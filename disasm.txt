
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 bc f9 00 00       	call   c000f9dc <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 c3 7b 02 00       	call   c0027be8 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 92 87 02 c0       	mov    ebx,0xc0028792
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb a0 87 02 c0    	cmp    ebx,0xc00287a0
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 18 ce 02 c0       	mov    eax,0xc002ce18
c0000049:	3d 18 ce 02 c0       	cmp    eax,0xc002ce18
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 18 ce 02 c0       	push   0xc002ce18
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 18 ce 02 c0       	mov    eax,0xc002ce18
c0000075:	2d 18 ce 02 c0       	sub    eax,0xc002ce18
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 18 ce 02 c0       	push   0xc002ce18
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 48 d4 02 c0 00 	cmp    BYTE PTR ds:0xc002d448,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb a8 87 02 c0       	mov    ebx,0xc00287a8
c00000bb:	81 eb a4 87 02 c0    	sub    ebx,0xc00287a4
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be a4 87 02 c0       	mov    esi,0xc00287a4
c00000ca:	a1 4c d4 02 c0       	mov    eax,ds:0xc002d44c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 4c d4 02 c0       	mov    ds:0xc002d44c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 4c d4 02 c0       	mov    eax,ds:0xc002d44c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 18 ce 02 c0       	push   0xc002ce18
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 48 d4 02 c0 01 	mov    BYTE PTR ds:0xc002d448,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 50 d4 02 c0       	push   0xc002d450
c000012c:	68 18 ce 02 c0       	push   0xc002ce18
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	85 d2                	test   edx,edx
c0000391:	75 11                	jne    c00003a4 <commonThreadSwitch.firstTime>
c0000393:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c0000396:	e8 af ca 01 00       	call   c001ce4a <changeTSS>
c000039b:	5d                   	pop    ebp
c000039c:	5f                   	pop    edi
c000039d:	5e                   	pop    esi
c000039e:	5a                   	pop    edx
c000039f:	59                   	pop    ecx
c00003a0:	5b                   	pop    ebx
c00003a1:	58                   	pop    eax
c00003a2:	9d                   	popf   
c00003a3:	c3                   	ret    

c00003a4 <commonThreadSwitch.firstTime>:
c00003a4:	fa                   	cli    
c00003a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003a8:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003ad:	60                   	pusha  
c00003ae:	e8 1e 23 01 00       	call   c00126d1 <mapVASFirstTime>
c00003b3:	61                   	popa   
c00003b4:	89 c4                	mov    esp,eax
c00003b6:	56                   	push   esi
c00003b7:	52                   	push   edx
c00003b8:	e8 8d ca 01 00       	call   c001ce4a <changeTSS>
c00003bd:	5a                   	pop    edx
c00003be:	5e                   	pop    esi
c00003bf:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003c6:	5d                   	pop    ebp
c00003c7:	5f                   	pop    edi
c00003c8:	5e                   	pop    esi
c00003c9:	59                   	pop    ecx
c00003ca:	59                   	pop    ecx
c00003cb:	5b                   	pop    ebx
c00003cc:	58                   	pop    eax
c00003cd:	81 c4 04 00 00 00    	add    esp,0x4
c00003d3:	6a 02                	push   0x2
c00003d5:	9d                   	popf   
c00003d6:	52                   	push   edx
c00003d7:	e8 db ce 01 00       	call   c001d2b7 <taskStartupFunction>
c00003dc:	5a                   	pop    edx
c00003dd:	50                   	push   eax
c00003de:	ff d2                	call   edx
c00003e0:	e8 89 d4 01 00       	call   c001d86e <taskReturned>
c00003e5:	e9 fb ff ff ff       	jmp    c00003e5 <commonThreadSwitch.firstTime+0x41>

c00003ea <asmQuickAcquireLock>:
c00003ea:	55                   	push   ebp
c00003eb:	89 e5                	mov    ebp,esp
c00003ed:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f0 <asmQuickAcquireLock.retry>:
c00003f0:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003f5:	72 02                	jb     c00003f9 <asmQuickAcquireLock.spin_with_pause>
c00003f7:	fa                   	cli    
c00003f8:	c3                   	ret    

c00003f9 <asmQuickAcquireLock.spin_with_pause>:
c00003f9:	f3 90                	pause  
c00003fb:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000401:	75 f6                	jne    c00003f9 <asmQuickAcquireLock.spin_with_pause>
c0000403:	e9 e8 ff ff ff       	jmp    c00003f0 <asmQuickAcquireLock.retry>

c0000408 <asmQuickReleaseLock>:
c0000408:	55                   	push   ebp
c0000409:	89 e5                	mov    ebp,esp
c000040b:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000412:	5d                   	pop    ebp
c0000413:	c3                   	ret    

c0000414 <asmAcquireLock>:
c0000414:	55                   	push   ebp
c0000415:	89 e5                	mov    ebp,esp
c0000417:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000041a <asmAcquireLock.retry>:
c000041a:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000041f:	72 05                	jb     c0000426 <asmAcquireLock.spin_with_pause>
c0000421:	9c                   	pushf  
c0000422:	58                   	pop    eax
c0000423:	fa                   	cli    
c0000424:	5d                   	pop    ebp
c0000425:	c3                   	ret    

c0000426 <asmAcquireLock.spin_with_pause>:
c0000426:	f3 90                	pause  
c0000428:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000042e:	75 f6                	jne    c0000426 <asmAcquireLock.spin_with_pause>
c0000430:	e9 e5 ff ff ff       	jmp    c000041a <asmAcquireLock.retry>

c0000435 <asmReleaseLock>:
c0000435:	55                   	push   ebp
c0000436:	89 e5                	mov    ebp,esp
c0000438:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000043b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000043e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000444:	52                   	push   edx
c0000445:	9d                   	popf   
c0000446:	5d                   	pop    ebp
c0000447:	c3                   	ret    

c0000448 <loadGDT>:
c0000448:	0f 01 15 90 d8 02 c0 	lgdtd  ds:0xc002d890
c000044f:	66 b8 10 00          	mov    ax,0x10
c0000453:	66 8e d8             	mov    ds,ax
c0000456:	66 8e c0             	mov    es,ax
c0000459:	66 8e e0             	mov    fs,ax
c000045c:	66 8e e8             	mov    gs,ax
c000045f:	66 8e d0             	mov    ss,ax
c0000462:	e9 00 00 00 00       	jmp    c0000467 <flush2>

c0000467 <flush2>:
c0000467:	c3                   	ret    

c0000468 <isr0>:
c0000468:	fa                   	cli    
c0000469:	68 00 00 00 00       	push   0x0
c000046e:	68 00 00 00 00       	push   0x0
c0000473:	e9 44 01 00 00       	jmp    c00005bc <int_common_stub>

c0000478 <isr1>:
c0000478:	fa                   	cli    
c0000479:	6a 00                	push   0x0
c000047b:	6a 01                	push   0x1
c000047d:	e9 3a 01 00 00       	jmp    c00005bc <int_common_stub>

c0000482 <isr2>:
c0000482:	fa                   	cli    
c0000483:	6a 00                	push   0x0
c0000485:	6a 02                	push   0x2
c0000487:	e9 30 01 00 00       	jmp    c00005bc <int_common_stub>

c000048c <isr3>:
c000048c:	fa                   	cli    
c000048d:	6a 00                	push   0x0
c000048f:	6a 03                	push   0x3
c0000491:	e9 26 01 00 00       	jmp    c00005bc <int_common_stub>

c0000496 <isr4>:
c0000496:	fa                   	cli    
c0000497:	6a 00                	push   0x0
c0000499:	6a 04                	push   0x4
c000049b:	e9 1c 01 00 00       	jmp    c00005bc <int_common_stub>

c00004a0 <isr5>:
c00004a0:	fa                   	cli    
c00004a1:	6a 00                	push   0x0
c00004a3:	6a 05                	push   0x5
c00004a5:	e9 12 01 00 00       	jmp    c00005bc <int_common_stub>

c00004aa <isr6>:
c00004aa:	fa                   	cli    
c00004ab:	6a 00                	push   0x0
c00004ad:	6a 06                	push   0x6
c00004af:	e9 08 01 00 00       	jmp    c00005bc <int_common_stub>

c00004b4 <isr7>:
c00004b4:	fa                   	cli    
c00004b5:	6a 00                	push   0x0
c00004b7:	6a 07                	push   0x7
c00004b9:	e9 fe 00 00 00       	jmp    c00005bc <int_common_stub>

c00004be <isr8>:
c00004be:	fa                   	cli    
c00004bf:	6a 08                	push   0x8
c00004c1:	e9 f6 00 00 00       	jmp    c00005bc <int_common_stub>

c00004c6 <isr9>:
c00004c6:	fa                   	cli    
c00004c7:	6a 00                	push   0x0
c00004c9:	6a 09                	push   0x9
c00004cb:	e9 ec 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d0 <isr10>:
c00004d0:	fa                   	cli    
c00004d1:	6a 0a                	push   0xa
c00004d3:	e9 e4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d8 <isr11>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0b                	push   0xb
c00004db:	e9 dc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e0 <isr12>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0c                	push   0xc
c00004e3:	e9 d4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e8 <isr13>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0d                	push   0xd
c00004eb:	e9 cc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f0 <isr14>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0e                	push   0xe
c00004f3:	e9 c4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f8 <isr15>:
c00004f8:	fa                   	cli    
c00004f9:	6a 00                	push   0x0
c00004fb:	6a 0f                	push   0xf
c00004fd:	e9 ba 00 00 00       	jmp    c00005bc <int_common_stub>

c0000502 <isr16>:
c0000502:	fa                   	cli    
c0000503:	6a 00                	push   0x0
c0000505:	6a 10                	push   0x10
c0000507:	e9 b0 00 00 00       	jmp    c00005bc <int_common_stub>

c000050c <isr17>:
c000050c:	fa                   	cli    
c000050d:	6a 00                	push   0x0
c000050f:	6a 11                	push   0x11
c0000511:	e9 a6 00 00 00       	jmp    c00005bc <int_common_stub>

c0000516 <isr18>:
c0000516:	fa                   	cli    
c0000517:	6a 00                	push   0x0
c0000519:	6a 12                	push   0x12
c000051b:	e9 9c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000520 <irq3>:
c0000520:	fa                   	cli    
c0000521:	6a 00                	push   0x0
c0000523:	6a 23                	push   0x23
c0000525:	e9 92 00 00 00       	jmp    c00005bc <int_common_stub>

c000052a <irq4>:
c000052a:	fa                   	cli    
c000052b:	6a 00                	push   0x0
c000052d:	6a 24                	push   0x24
c000052f:	e9 88 00 00 00       	jmp    c00005bc <int_common_stub>

c0000534 <irq5>:
c0000534:	fa                   	cli    
c0000535:	6a 00                	push   0x0
c0000537:	6a 25                	push   0x25
c0000539:	e9 7e 00 00 00       	jmp    c00005bc <int_common_stub>

c000053e <irq6>:
c000053e:	fa                   	cli    
c000053f:	6a 00                	push   0x0
c0000541:	6a 26                	push   0x26
c0000543:	e9 74 00 00 00       	jmp    c00005bc <int_common_stub>

c0000548 <irq7>:
c0000548:	fa                   	cli    
c0000549:	6a 00                	push   0x0
c000054b:	6a 27                	push   0x27
c000054d:	e9 6a 00 00 00       	jmp    c00005bc <int_common_stub>

c0000552 <irq8>:
c0000552:	fa                   	cli    
c0000553:	6a 00                	push   0x0
c0000555:	6a 28                	push   0x28
c0000557:	e9 60 00 00 00       	jmp    c00005bc <int_common_stub>

c000055c <irq9>:
c000055c:	fa                   	cli    
c000055d:	6a 00                	push   0x0
c000055f:	6a 29                	push   0x29
c0000561:	e9 56 00 00 00       	jmp    c00005bc <int_common_stub>

c0000566 <irq10>:
c0000566:	fa                   	cli    
c0000567:	6a 00                	push   0x0
c0000569:	6a 2a                	push   0x2a
c000056b:	e9 4c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000570 <irq11>:
c0000570:	fa                   	cli    
c0000571:	6a 00                	push   0x0
c0000573:	6a 2b                	push   0x2b
c0000575:	e9 42 00 00 00       	jmp    c00005bc <int_common_stub>

c000057a <irq12>:
c000057a:	fa                   	cli    
c000057b:	6a 00                	push   0x0
c000057d:	6a 2c                	push   0x2c
c000057f:	e9 38 00 00 00       	jmp    c00005bc <int_common_stub>

c0000584 <irq13>:
c0000584:	fa                   	cli    
c0000585:	6a 00                	push   0x0
c0000587:	6a 2d                	push   0x2d
c0000589:	e9 2e 00 00 00       	jmp    c00005bc <int_common_stub>

c000058e <irq14>:
c000058e:	fa                   	cli    
c000058f:	6a 00                	push   0x0
c0000591:	6a 2e                	push   0x2e
c0000593:	e9 24 00 00 00       	jmp    c00005bc <int_common_stub>

c0000598 <irq15>:
c0000598:	fa                   	cli    
c0000599:	6a 00                	push   0x0
c000059b:	6a 2f                	push   0x2f
c000059d:	e9 1a 00 00 00       	jmp    c00005bc <int_common_stub>

c00005a2 <irq1>:
c00005a2:	fa                   	cli    
c00005a3:	6a 00                	push   0x0
c00005a5:	6a 21                	push   0x21
c00005a7:	eb 13                	jmp    c00005bc <int_common_stub>

c00005a9 <irq2>:
c00005a9:	fa                   	cli    
c00005aa:	6a 00                	push   0x0
c00005ac:	6a 22                	push   0x22
c00005ae:	eb 0c                	jmp    c00005bc <int_common_stub>

c00005b0 <isr96>:
c00005b0:	6a 00                	push   0x0
c00005b2:	6a 60                	push   0x60
c00005b4:	fb                   	sti    
c00005b5:	eb 05                	jmp    c00005bc <int_common_stub>

c00005b7 <irq0>:
c00005b7:	fa                   	cli    
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 20                	push   0x20

c00005bc <int_common_stub>:
c00005bc:	60                   	pusha  
c00005bd:	1e                   	push   ds
c00005be:	06                   	push   es
c00005bf:	0f a0                	push   fs
c00005c1:	0f a8                	push   gs
c00005c3:	66 b8 10 00          	mov    ax,0x10
c00005c7:	66 8e d8             	mov    ds,ax
c00005ca:	66 8e c0             	mov    es,ax
c00005cd:	66 8e e0             	mov    fs,ax
c00005d0:	66 8e e8             	mov    gs,ax
c00005d3:	54                   	push   esp
c00005d4:	e8 fc 3f 01 00       	call   c00145d5 <int_handler>
c00005d9:	81 c4 04 00 00 00    	add    esp,0x4
c00005df:	0f a9                	pop    gs
c00005e1:	0f a1                	pop    fs
c00005e3:	07                   	pop    es
c00005e4:	1f                   	pop    ds
c00005e5:	61                   	popa   
c00005e6:	81 c4 08 00 00 00    	add    esp,0x8
c00005ec:	cf                   	iret   

c00005ed <irq16>:
c00005ed:	fa                   	cli    
c00005ee:	6a 00                	push   0x0
c00005f0:	6a 30                	push   0x30
c00005f2:	e9 c5 ff ff ff       	jmp    c00005bc <int_common_stub>

c00005f7 <irq17>:
c00005f7:	fa                   	cli    
c00005f8:	6a 00                	push   0x0
c00005fa:	6a 31                	push   0x31
c00005fc:	e9 bb ff ff ff       	jmp    c00005bc <int_common_stub>

c0000601 <irq18>:
c0000601:	fa                   	cli    
c0000602:	6a 00                	push   0x0
c0000604:	6a 32                	push   0x32
c0000606:	e9 b1 ff ff ff       	jmp    c00005bc <int_common_stub>

c000060b <irq19>:
c000060b:	fa                   	cli    
c000060c:	6a 00                	push   0x0
c000060e:	6a 33                	push   0x33
c0000610:	e9 a7 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000615 <irq20>:
c0000615:	fa                   	cli    
c0000616:	6a 00                	push   0x0
c0000618:	6a 34                	push   0x34
c000061a:	e9 9d ff ff ff       	jmp    c00005bc <int_common_stub>

c000061f <irq21>:
c000061f:	fa                   	cli    
c0000620:	6a 00                	push   0x0
c0000622:	6a 35                	push   0x35
c0000624:	e9 93 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000629 <irq22>:
c0000629:	fa                   	cli    
c000062a:	6a 00                	push   0x0
c000062c:	6a 36                	push   0x36
c000062e:	e9 89 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000633 <irq23>:
c0000633:	fa                   	cli    
c0000634:	6a 00                	push   0x0
c0000636:	6a 37                	push   0x37
c0000638:	e9 7f ff ff ff       	jmp    c00005bc <int_common_stub>

c000063d <memcmp>:
c000063d:	56                   	push   esi
c000063e:	53                   	push   ebx
c000063f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000643:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000647:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000064b:	01 d6                	add    esi,edx
c000064d:	39 f2                	cmp    edx,esi
c000064f:	74 0e                	je     c000065f <memcmp+0x22>
c0000651:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000654:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000657:	38 c8                	cmp    al,cl
c0000659:	75 08                	jne    c0000663 <memcmp+0x26>
c000065b:	42                   	inc    edx
c000065c:	43                   	inc    ebx
c000065d:	eb ee                	jmp    c000064d <memcmp+0x10>
c000065f:	31 c0                	xor    eax,eax
c0000661:	eb 02                	jmp    c0000665 <memcmp+0x28>
c0000663:	29 c8                	sub    eax,ecx
c0000665:	5b                   	pop    ebx
c0000666:	5e                   	pop    esi
c0000667:	c3                   	ret    

c0000668 <memmove>:
c0000668:	56                   	push   esi
c0000669:	53                   	push   ebx
c000066a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000066e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000672:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0000676:	39 c8                	cmp    eax,ecx
c0000678:	73 12                	jae    c000068c <memmove+0x24>
c000067a:	8d 34 0a             	lea    esi,[edx+ecx*1]
c000067d:	89 c3                	mov    ebx,eax
c000067f:	39 f1                	cmp    ecx,esi
c0000681:	74 1a                	je     c000069d <memmove+0x35>
c0000683:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000685:	43                   	inc    ebx
c0000686:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c0000689:	41                   	inc    ecx
c000068a:	eb f3                	jmp    c000067f <memmove+0x17>
c000068c:	76 0f                	jbe    c000069d <memmove+0x35>
c000068e:	85 d2                	test   edx,edx
c0000690:	74 0b                	je     c000069d <memmove+0x35>
c0000692:	8a 5c 11 ff          	mov    bl,BYTE PTR [ecx+edx*1-0x1]
c0000696:	88 5c 10 ff          	mov    BYTE PTR [eax+edx*1-0x1],bl
c000069a:	4a                   	dec    edx
c000069b:	eb f1                	jmp    c000068e <memmove+0x26>
c000069d:	5b                   	pop    ebx
c000069e:	5e                   	pop    esi
c000069f:	c3                   	ret    

c00006a0 <memcpy>:
c00006a0:	56                   	push   esi
c00006a1:	53                   	push   ebx
c00006a2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00006a6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00006aa:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00006ae:	89 f1                	mov    ecx,esi
c00006b0:	01 d3                	add    ebx,edx
c00006b2:	39 da                	cmp    edx,ebx
c00006b4:	74 09                	je     c00006bf <memcpy+0x1f>
c00006b6:	8a 02                	mov    al,BYTE PTR [edx]
c00006b8:	41                   	inc    ecx
c00006b9:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00006bc:	42                   	inc    edx
c00006bd:	eb f3                	jmp    c00006b2 <memcpy+0x12>
c00006bf:	89 f0                	mov    eax,esi
c00006c1:	5b                   	pop    ebx
c00006c2:	5e                   	pop    esi
c00006c3:	c3                   	ret    

c00006c4 <memset>:
c00006c4:	53                   	push   ebx
c00006c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006c9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00006cd:	89 c2                	mov    edx,eax
c00006cf:	01 c1                	add    ecx,eax
c00006d1:	39 ca                	cmp    edx,ecx
c00006d3:	74 0a                	je     c00006df <memset+0x1b>
c00006d5:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c00006d9:	42                   	inc    edx
c00006da:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00006dd:	eb f2                	jmp    c00006d1 <memset+0xd>
c00006df:	5b                   	pop    ebx
c00006e0:	c3                   	ret    

c00006e1 <strlen>:
c00006e1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00006e5:	31 c0                	xor    eax,eax
c00006e7:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006eb:	74 03                	je     c00006f0 <strlen+0xf>
c00006ed:	40                   	inc    eax
c00006ee:	eb f7                	jmp    c00006e7 <strlen+0x6>
c00006f0:	c3                   	ret    

c00006f1 <strpbrk>:
c00006f1:	53                   	push   ebx
c00006f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006f6:	8a 08                	mov    cl,BYTE PTR [eax]
c00006f8:	84 c9                	test   cl,cl
c00006fa:	74 14                	je     c0000710 <strpbrk+0x1f>
c00006fc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000700:	8a 1a                	mov    bl,BYTE PTR [edx]
c0000702:	84 db                	test   bl,bl
c0000704:	74 07                	je     c000070d <strpbrk+0x1c>
c0000706:	38 cb                	cmp    bl,cl
c0000708:	74 08                	je     c0000712 <strpbrk+0x21>
c000070a:	42                   	inc    edx
c000070b:	eb f3                	jmp    c0000700 <strpbrk+0xf>
c000070d:	40                   	inc    eax
c000070e:	eb e6                	jmp    c00006f6 <strpbrk+0x5>
c0000710:	31 c0                	xor    eax,eax
c0000712:	5b                   	pop    ebx
c0000713:	c3                   	ret    

c0000714 <strtok>:
c0000714:	56                   	push   esi
c0000715:	53                   	push   ebx
c0000716:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000071a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000071e:	85 db                	test   ebx,ebx
c0000720:	75 0e                	jne    c0000730 <strtok+0x1c>
c0000722:	8b 1d 68 d4 02 c0    	mov    ebx,DWORD PTR ds:0xc002d468
c0000728:	85 db                	test   ebx,ebx
c000072a:	75 04                	jne    c0000730 <strtok+0x1c>
c000072c:	31 db                	xor    ebx,ebx
c000072e:	eb 2e                	jmp    c000075e <strtok+0x4a>
c0000730:	56                   	push   esi
c0000731:	53                   	push   ebx
c0000732:	e8 ba ff ff ff       	call   c00006f1 <strpbrk>
c0000737:	5a                   	pop    edx
c0000738:	a3 68 d4 02 c0       	mov    ds:0xc002d468,eax
c000073d:	59                   	pop    ecx
c000073e:	a1 68 d4 02 c0       	mov    eax,ds:0xc002d468
c0000743:	39 d8                	cmp    eax,ebx
c0000745:	75 07                	jne    c000074e <strtok+0x3a>
c0000747:	43                   	inc    ebx
c0000748:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c000074c:	eb e2                	jmp    c0000730 <strtok+0x1c>
c000074e:	85 c0                	test   eax,eax
c0000750:	74 da                	je     c000072c <strtok+0x18>
c0000752:	8d 50 01             	lea    edx,[eax+0x1]
c0000755:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000758:	89 15 68 d4 02 c0    	mov    DWORD PTR ds:0xc002d468,edx
c000075e:	89 d8                	mov    eax,ebx
c0000760:	5b                   	pop    ebx
c0000761:	5e                   	pop    esi
c0000762:	c3                   	ret    

c0000763 <strcpy>:
c0000763:	53                   	push   ebx
c0000764:	31 d2                	xor    edx,edx
c0000766:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000076a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000076e:	8d 1c 10             	lea    ebx,[eax+edx*1]
c0000771:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0000774:	84 c9                	test   cl,cl
c0000776:	74 06                	je     c000077e <strcpy+0x1b>
c0000778:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c000077b:	42                   	inc    edx
c000077c:	eb ec                	jmp    c000076a <strcpy+0x7>
c000077e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000781:	5b                   	pop    ebx
c0000782:	c3                   	ret    

c0000783 <strncpy>:
c0000783:	56                   	push   esi
c0000784:	53                   	push   ebx
c0000785:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000789:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0000791:	89 c3                	mov    ebx,eax
c0000793:	85 c9                	test   ecx,ecx
c0000795:	74 1a                	je     c00007b1 <strncpy+0x2e>
c0000797:	46                   	inc    esi
c0000798:	43                   	inc    ebx
c0000799:	8a 56 ff             	mov    dl,BYTE PTR [esi-0x1]
c000079c:	49                   	dec    ecx
c000079d:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c00007a0:	84 d2                	test   dl,dl
c00007a2:	75 ef                	jne    c0000793 <strncpy+0x10>
c00007a4:	31 d2                	xor    edx,edx
c00007a6:	39 d1                	cmp    ecx,edx
c00007a8:	74 07                	je     c00007b1 <strncpy+0x2e>
c00007aa:	c6 04 13 00          	mov    BYTE PTR [ebx+edx*1],0x0
c00007ae:	42                   	inc    edx
c00007af:	eb f5                	jmp    c00007a6 <strncpy+0x23>
c00007b1:	5b                   	pop    ebx
c00007b2:	5e                   	pop    esi
c00007b3:	c3                   	ret    

c00007b4 <strcmp>:
c00007b4:	31 c9                	xor    ecx,ecx
c00007b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00007ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00007be:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c00007c2:	0f b6 14 0a          	movzx  edx,BYTE PTR [edx+ecx*1]
c00007c6:	38 d0                	cmp    al,dl
c00007c8:	75 08                	jne    c00007d2 <strcmp+0x1e>
c00007ca:	41                   	inc    ecx
c00007cb:	84 c0                	test   al,al
c00007cd:	75 e7                	jne    c00007b6 <strcmp+0x2>
c00007cf:	31 c0                	xor    eax,eax
c00007d1:	c3                   	ret    
c00007d2:	29 d0                	sub    eax,edx
c00007d4:	c3                   	ret    

c00007d5 <strchr>:
c00007d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00007d9:	8a 10                	mov    dl,BYTE PTR [eax]
c00007db:	84 d2                	test   dl,dl
c00007dd:	74 09                	je     c00007e8 <strchr+0x13>
c00007df:	3a 54 24 08          	cmp    dl,BYTE PTR [esp+0x8]
c00007e3:	74 05                	je     c00007ea <strchr+0x15>
c00007e5:	40                   	inc    eax
c00007e6:	eb f1                	jmp    c00007d9 <strchr+0x4>
c00007e8:	31 c0                	xor    eax,eax
c00007ea:	c3                   	ret    

c00007eb <strncmp>:
c00007eb:	56                   	push   esi
c00007ec:	53                   	push   ebx
c00007ed:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00007f1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007f5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007f9:	01 d6                	add    esi,edx
c00007fb:	39 f2                	cmp    edx,esi
c00007fd:	74 12                	je     c0000811 <strncmp+0x26>
c00007ff:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000802:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000805:	38 c8                	cmp    al,cl
c0000807:	75 0c                	jne    c0000815 <strncmp+0x2a>
c0000809:	42                   	inc    edx
c000080a:	84 c0                	test   al,al
c000080c:	74 03                	je     c0000811 <strncmp+0x26>
c000080e:	43                   	inc    ebx
c000080f:	eb ea                	jmp    c00007fb <strncmp+0x10>
c0000811:	31 c0                	xor    eax,eax
c0000813:	eb 02                	jmp    c0000817 <strncmp+0x2c>
c0000815:	29 c8                	sub    eax,ecx
c0000817:	5b                   	pop    ebx
c0000818:	5e                   	pop    esi
c0000819:	c3                   	ret    

c000081a <strcat>:
c000081a:	53                   	push   ebx
c000081b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000081f:	89 c1                	mov    ecx,eax
c0000821:	8d 51 01             	lea    edx,[ecx+0x1]
c0000824:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000828:	74 04                	je     c000082e <strcat+0x14>
c000082a:	89 d1                	mov    ecx,edx
c000082c:	eb f3                	jmp    c0000821 <strcat+0x7>
c000082e:	31 d2                	xor    edx,edx
c0000830:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000834:	8a 1c 13             	mov    bl,BYTE PTR [ebx+edx*1]
c0000837:	88 1c 11             	mov    BYTE PTR [ecx+edx*1],bl
c000083a:	42                   	inc    edx
c000083b:	84 db                	test   bl,bl
c000083d:	75 f1                	jne    c0000830 <strcat+0x16>
c000083f:	5b                   	pop    ebx
c0000840:	c3                   	ret    

c0000841 <strncat>:
c0000841:	56                   	push   esi
c0000842:	53                   	push   ebx
c0000843:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000847:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000084b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000084f:	89 c2                	mov    edx,eax
c0000851:	85 db                	test   ebx,ebx
c0000853:	74 23                	je     c0000878 <strncat+0x37>
c0000855:	8d 72 01             	lea    esi,[edx+0x1]
c0000858:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
c000085c:	74 04                	je     c0000862 <strncat+0x21>
c000085e:	89 f2                	mov    edx,esi
c0000860:	eb f3                	jmp    c0000855 <strncat+0x14>
c0000862:	8d 34 19             	lea    esi,[ecx+ebx*1]
c0000865:	41                   	inc    ecx
c0000866:	42                   	inc    edx
c0000867:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c000086a:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000086d:	84 db                	test   bl,bl
c000086f:	74 07                	je     c0000878 <strncat+0x37>
c0000871:	39 f1                	cmp    ecx,esi
c0000873:	75 f0                	jne    c0000865 <strncat+0x24>
c0000875:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000878:	5b                   	pop    ebx
c0000879:	5e                   	pop    esi
c000087a:	c3                   	ret    

c000087b <strstr>:
c000087b:	57                   	push   edi
c000087c:	56                   	push   esi
c000087d:	53                   	push   ebx
c000087e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000882:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000886:	57                   	push   edi
c0000887:	e8 55 fe ff ff       	call   c00006e1 <strlen>
c000088c:	59                   	pop    ecx
c000088d:	89 c6                	mov    esi,eax
c000088f:	85 c0                	test   eax,eax
c0000891:	74 1f                	je     c00008b2 <strstr+0x37>
c0000893:	53                   	push   ebx
c0000894:	e8 48 fe ff ff       	call   c00006e1 <strlen>
c0000899:	5a                   	pop    edx
c000089a:	39 f0                	cmp    eax,esi
c000089c:	72 12                	jb     c00008b0 <strstr+0x35>
c000089e:	56                   	push   esi
c000089f:	57                   	push   edi
c00008a0:	53                   	push   ebx
c00008a1:	e8 97 fd ff ff       	call   c000063d <memcmp>
c00008a6:	83 c4 0c             	add    esp,0xc
c00008a9:	85 c0                	test   eax,eax
c00008ab:	74 05                	je     c00008b2 <strstr+0x37>
c00008ad:	43                   	inc    ebx
c00008ae:	eb e3                	jmp    c0000893 <strstr+0x18>
c00008b0:	31 db                	xor    ebx,ebx
c00008b2:	89 d8                	mov    eax,ebx
c00008b4:	5b                   	pop    ebx
c00008b5:	5e                   	pop    esi
c00008b6:	5f                   	pop    edi
c00008b7:	c3                   	ret    

c00008b8 <toupper>:
c00008b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008bc:	0f b6 d0             	movzx  edx,al
c00008bf:	f6 82 c0 87 02 c0 02 	test   BYTE PTR [edx-0x3ffd7840],0x2
c00008c6:	74 03                	je     c00008cb <toupper+0x13>
c00008c8:	83 e8 20             	sub    eax,0x20
c00008cb:	c3                   	ret    

c00008cc <tolower>:
c00008cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008d0:	0f b6 d0             	movzx  edx,al
c00008d3:	f6 82 c0 87 02 c0 01 	test   BYTE PTR [edx-0x3ffd7840],0x1
c00008da:	74 03                	je     c00008df <tolower+0x13>
c00008dc:	83 c0 20             	add    eax,0x20
c00008df:	c3                   	ret    

c00008e0 <simple_strtoul>:
c00008e0:	55                   	push   ebp
c00008e1:	57                   	push   edi
c00008e2:	56                   	push   esi
c00008e3:	53                   	push   ebx
c00008e4:	83 ec 08             	sub    esp,0x8
c00008e7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008eb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008ef:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00008f2:	f6 82 c0 87 02 c0 08 	test   BYTE PTR [edx-0x3ffd7840],0x8
c00008f9:	74 03                	je     c00008fe <simple_strtoul+0x1e>
c00008fb:	41                   	inc    ecx
c00008fc:	eb f1                	jmp    c00008ef <simple_strtoul+0xf>
c00008fe:	80 fa 09             	cmp    dl,0x9
c0000901:	74 f8                	je     c00008fb <simple_strtoul+0x1b>
c0000903:	80 fa 2d             	cmp    dl,0x2d
c0000906:	75 0b                	jne    c0000913 <simple_strtoul+0x33>
c0000908:	41                   	inc    ecx
c0000909:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000911:	eb 0e                	jmp    c0000921 <simple_strtoul+0x41>
c0000913:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000091b:	80 fa 2b             	cmp    dl,0x2b
c000091e:	75 01                	jne    c0000921 <simple_strtoul+0x41>
c0000920:	41                   	inc    ecx
c0000921:	85 f6                	test   esi,esi
c0000923:	75 22                	jne    c0000947 <simple_strtoul+0x67>
c0000925:	be 0a 00 00 00       	mov    esi,0xa
c000092a:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c000092d:	75 5a                	jne    c0000989 <simple_strtoul+0xa9>
c000092f:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000933:	50                   	push   eax
c0000934:	e8 93 ff ff ff       	call   c00008cc <tolower>
c0000939:	5a                   	pop    edx
c000093a:	83 f8 78             	cmp    eax,0x78
c000093d:	74 03                	je     c0000942 <simple_strtoul+0x62>
c000093f:	41                   	inc    ecx
c0000940:	eb 16                	jmp    c0000958 <simple_strtoul+0x78>
c0000942:	83 c1 02             	add    ecx,0x2
c0000945:	eb 22                	jmp    c0000969 <simple_strtoul+0x89>
c0000947:	8d 46 fe             	lea    eax,[esi-0x2]
c000094a:	83 f8 22             	cmp    eax,0x22
c000094d:	0f 87 b7 00 00 00    	ja     c0000a0a <simple_strtoul+0x12a>
c0000953:	83 fe 08             	cmp    esi,0x8
c0000956:	75 0c                	jne    c0000964 <simple_strtoul+0x84>
c0000958:	be 08 00 00 00       	mov    esi,0x8
c000095d:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000960:	75 27                	jne    c0000989 <simple_strtoul+0xa9>
c0000962:	eb 1f                	jmp    c0000983 <simple_strtoul+0xa3>
c0000964:	83 fe 10             	cmp    esi,0x10
c0000967:	75 20                	jne    c0000989 <simple_strtoul+0xa9>
c0000969:	be 10 00 00 00       	mov    esi,0x10
c000096e:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000971:	75 16                	jne    c0000989 <simple_strtoul+0xa9>
c0000973:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000977:	50                   	push   eax
c0000978:	e8 4f ff ff ff       	call   c00008cc <tolower>
c000097d:	5d                   	pop    ebp
c000097e:	83 f8 78             	cmp    eax,0x78
c0000981:	74 03                	je     c0000986 <simple_strtoul+0xa6>
c0000983:	41                   	inc    ecx
c0000984:	eb 03                	jmp    c0000989 <simple_strtoul+0xa9>
c0000986:	83 c1 02             	add    ecx,0x2
c0000989:	31 ed                	xor    ebp,ebp
c000098b:	31 db                	xor    ebx,ebx
c000098d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000994:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000996:	84 d2                	test   dl,dl
c0000998:	74 27                	je     c00009c1 <simple_strtoul+0xe1>
c000099a:	0f b6 fa             	movzx  edi,dl
c000099d:	f6 87 c0 87 02 c0 04 	test   BYTE PTR [edi-0x3ffd7840],0x4
c00009a4:	74 05                	je     c00009ab <simple_strtoul+0xcb>
c00009a6:	83 ef 30             	sub    edi,0x30
c00009a9:	eb 22                	jmp    c00009cd <simple_strtoul+0xed>
c00009ab:	0f be d2             	movsx  edx,dl
c00009ae:	52                   	push   edx
c00009af:	e8 04 ff ff ff       	call   c00008b8 <toupper>
c00009b4:	5f                   	pop    edi
c00009b5:	0f b6 d0             	movzx  edx,al
c00009b8:	f6 82 c0 87 02 c0 01 	test   BYTE PTR [edx-0x3ffd7840],0x1
c00009bf:	75 09                	jne    c00009ca <simple_strtoul+0xea>
c00009c1:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00009c6:	75 2d                	jne    c00009f5 <simple_strtoul+0x115>
c00009c8:	eb 57                	jmp    c0000a21 <simple_strtoul+0x141>
c00009ca:	8d 78 c9             	lea    edi,[eax-0x37]
c00009cd:	39 f7                	cmp    edi,esi
c00009cf:	73 f0                	jae    c00009c1 <simple_strtoul+0xe1>
c00009d1:	31 d2                	xor    edx,edx
c00009d3:	89 f8                	mov    eax,edi
c00009d5:	f7 d0                	not    eax
c00009d7:	f7 f6                	div    esi
c00009d9:	39 d8                	cmp    eax,ebx
c00009db:	72 0e                	jb     c00009eb <simple_strtoul+0x10b>
c00009dd:	0f af de             	imul   ebx,esi
c00009e0:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009e7:	01 fb                	add    ebx,edi
c00009e9:	eb 07                	jmp    c00009f2 <simple_strtoul+0x112>
c00009eb:	bd 01 00 00 00       	mov    ebp,0x1
c00009f0:	31 db                	xor    ebx,ebx
c00009f2:	41                   	inc    ecx
c00009f3:	eb 9f                	jmp    c0000994 <simple_strtoul+0xb4>
c00009f5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009f8:	09 d8                	or     eax,ebx
c00009fa:	75 1f                	jne    c0000a1b <simple_strtoul+0x13b>
c00009fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a00:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000a04:	31 db                	xor    ebx,ebx
c0000a06:	89 38                	mov    DWORD PTR [eax],edi
c0000a08:	eb 17                	jmp    c0000a21 <simple_strtoul+0x141>
c0000a0a:	31 db                	xor    ebx,ebx
c0000a0c:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0000a11:	74 14                	je     c0000a27 <simple_strtoul+0x147>
c0000a13:	31 ed                	xor    ebp,ebp
c0000a15:	85 c9                	test   ecx,ecx
c0000a17:	75 e3                	jne    c00009fc <simple_strtoul+0x11c>
c0000a19:	31 db                	xor    ebx,ebx
c0000a1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a1f:	89 08                	mov    DWORD PTR [eax],ecx
c0000a21:	4d                   	dec    ebp
c0000a22:	75 03                	jne    c0000a27 <simple_strtoul+0x147>
c0000a24:	83 cb ff             	or     ebx,0xffffffff
c0000a27:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a2c:	75 02                	jne    c0000a30 <simple_strtoul+0x150>
c0000a2e:	f7 db                	neg    ebx
c0000a30:	83 c4 08             	add    esp,0x8
c0000a33:	89 d8                	mov    eax,ebx
c0000a35:	5b                   	pop    ebx
c0000a36:	5e                   	pop    esi
c0000a37:	5f                   	pop    edi
c0000a38:	5d                   	pop    ebp
c0000a39:	c3                   	ret    

c0000a3a <largebin_index>:
c0000a3a:	89 c2                	mov    edx,eax
c0000a3c:	c1 ea 08             	shr    edx,0x8
c0000a3f:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000a45:	77 10                	ja     c0000a57 <largebin_index+0x1d>
c0000a47:	0f bd d2             	bsr    edx,edx
c0000a4a:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000a4d:	d3 e8                	shr    eax,cl
c0000a4f:	83 e0 03             	and    eax,0x3
c0000a52:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000a56:	c3                   	ret    
c0000a57:	b8 5f 00 00 00       	mov    eax,0x5f
c0000a5c:	c3                   	ret    

c0000a5d <malloc_init_state>:
c0000a5d:	53                   	push   ebx
c0000a5e:	8d 50 34             	lea    edx,[eax+0x34]
c0000a61:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000a67:	89 d1                	mov    ecx,edx
c0000a69:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000a6c:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000a6f:	83 c2 08             	add    edx,0x8
c0000a72:	39 da                	cmp    edx,ebx
c0000a74:	75 f3                	jne    c0000a69 <malloc_init_state+0xc>
c0000a76:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a78:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000a82:	83 e2 03             	and    edx,0x3
c0000a85:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000a8f:	83 ca 48             	or     edx,0x48
c0000a92:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000a9c:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000aa6:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000aad:	89 10                	mov    DWORD PTR [eax],edx
c0000aaf:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ab2:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000abc:	5b                   	pop    ebx
c0000abd:	c3                   	ret    

c0000abe <malloc_consolidate>:
c0000abe:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ac0:	85 d2                	test   edx,edx
c0000ac2:	0f 84 d8 00 00 00    	je     c0000ba0 <malloc_consolidate+0xe2>
c0000ac8:	55                   	push   ebp
c0000ac9:	83 e2 fd             	and    edx,0xfffffffd
c0000acc:	57                   	push   edi
c0000acd:	89 c5                	mov    ebp,eax
c0000acf:	56                   	push   esi
c0000ad0:	8d 78 34             	lea    edi,[eax+0x34]
c0000ad3:	53                   	push   ebx
c0000ad4:	83 ec 10             	sub    esp,0x10
c0000ad7:	89 10                	mov    DWORD PTR [eax],edx
c0000ad9:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000add:	c1 ea 03             	shr    edx,0x3
c0000ae0:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000ae4:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000ae8:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000aeb:	85 d2                	test   edx,edx
c0000aed:	0f 84 98 00 00 00    	je     c0000b8b <malloc_consolidate+0xcd>
c0000af3:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000afa:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000afd:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000b00:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000b04:	89 f9                	mov    ecx,edi
c0000b06:	83 e1 fe             	and    ecx,0xfffffffe
c0000b09:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000b0c:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000b0f:	83 e3 fc             	and    ebx,0xfffffffc
c0000b12:	83 e7 01             	and    edi,0x1
c0000b15:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000b18:	75 14                	jne    c0000b2e <malloc_consolidate+0x70>
c0000b1a:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000b1c:	29 fa                	sub    edx,edi
c0000b1e:	01 f9                	add    ecx,edi
c0000b20:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000b23:	89 fb                	mov    ebx,edi
c0000b25:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000b28:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000b2b:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000b2e:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000b31:	74 40                	je     c0000b73 <malloc_consolidate+0xb5>
c0000b33:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000b36:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000b39:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000b3d:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000b40:	83 e7 01             	and    edi,0x1
c0000b43:	75 0e                	jne    c0000b53 <malloc_consolidate+0x95>
c0000b45:	01 d9                	add    ecx,ebx
c0000b47:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000b4a:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000b4d:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000b50:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000b53:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000b56:	89 ce                	mov    esi,ecx
c0000b58:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000b5b:	83 ce 01             	or     esi,0x1
c0000b5e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000b61:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000b64:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000b67:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000b6b:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000b6e:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000b71:	eb 0c                	jmp    c0000b7f <malloc_consolidate+0xc1>
c0000b73:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000b76:	83 c9 01             	or     ecx,0x1
c0000b79:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000b7c:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000b7f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000b83:	85 d2                	test   edx,edx
c0000b85:	0f 85 6f ff ff ff    	jne    c0000afa <malloc_consolidate+0x3c>
c0000b8b:	83 c5 04             	add    ebp,0x4
c0000b8e:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000b92:	0f 85 50 ff ff ff    	jne    c0000ae8 <malloc_consolidate+0x2a>
c0000b98:	83 c4 10             	add    esp,0x10
c0000b9b:	5b                   	pop    ebx
c0000b9c:	5e                   	pop    esi
c0000b9d:	5f                   	pop    edi
c0000b9e:	5d                   	pop    ebp
c0000b9f:	c3                   	ret    
c0000ba0:	e9 b8 fe ff ff       	jmp    c0000a5d <malloc_init_state>

c0000ba5 <dlfree>:
c0000ba5:	57                   	push   edi
c0000ba6:	56                   	push   esi
c0000ba7:	53                   	push   ebx
c0000ba8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000bac:	85 db                	test   ebx,ebx
c0000bae:	0f 84 e2 00 00 00    	je     c0000c96 <dlfree+0xf1>
c0000bb4:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000bb7:	8b 0d 80 d4 02 c0    	mov    ecx,DWORD PTR ds:0xc002d480
c0000bbd:	89 f0                	mov    eax,esi
c0000bbf:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000bc2:	83 e0 fc             	and    eax,0xfffffffc
c0000bc5:	39 c1                	cmp    ecx,eax
c0000bc7:	72 24                	jb     c0000bed <dlfree+0x48>
c0000bc9:	83 c9 03             	or     ecx,0x3
c0000bcc:	c1 e8 03             	shr    eax,0x3
c0000bcf:	89 0d 80 d4 02 c0    	mov    DWORD PTR ds:0xc002d480,ecx
c0000bd5:	83 e8 02             	sub    eax,0x2
c0000bd8:	8b 0c 85 84 d4 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd2b7c]
c0000bdf:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000be1:	89 14 85 84 d4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2b7c],edx
c0000be8:	e9 a9 00 00 00       	jmp    c0000c96 <dlfree+0xf1>
c0000bed:	83 e6 02             	and    esi,0x2
c0000bf0:	0f 85 a0 00 00 00    	jne    c0000c96 <dlfree+0xf1>
c0000bf6:	83 c9 01             	or     ecx,0x1
c0000bf9:	8d 34 02             	lea    esi,[edx+eax*1]
c0000bfc:	89 0d 80 d4 02 c0    	mov    DWORD PTR ds:0xc002d480,ecx
c0000c02:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000c05:	83 e1 fc             	and    ecx,0xfffffffc
c0000c08:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000c0c:	75 13                	jne    c0000c21 <dlfree+0x7c>
c0000c0e:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000c11:	29 da                	sub    edx,ebx
c0000c13:	01 d8                	add    eax,ebx
c0000c15:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c18:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000c1b:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000c1e:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000c21:	39 35 ac d4 02 c0    	cmp    DWORD PTR ds:0xc002d4ac,esi
c0000c27:	74 40                	je     c0000c69 <dlfree+0xc4>
c0000c29:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000c2d:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000c30:	80 e3 01             	and    bl,0x1
c0000c33:	75 0e                	jne    c0000c43 <dlfree+0x9e>
c0000c35:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000c38:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000c3b:	01 c8                	add    eax,ecx
c0000c3d:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000c40:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000c43:	8b 0d bc d4 02 c0    	mov    ecx,DWORD PTR ds:0xc002d4bc
c0000c49:	c7 42 0c b4 d4 02 c0 	mov    DWORD PTR [edx+0xc],0xc002d4b4
c0000c50:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000c53:	89 15 bc d4 02 c0    	mov    DWORD PTR ds:0xc002d4bc,edx
c0000c59:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000c5c:	89 c1                	mov    ecx,eax
c0000c5e:	83 c9 01             	or     ecx,0x1
c0000c61:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c64:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000c67:	eb 10                	jmp    c0000c79 <dlfree+0xd4>
c0000c69:	01 c8                	add    eax,ecx
c0000c6b:	89 c1                	mov    ecx,eax
c0000c6d:	83 c9 01             	or     ecx,0x1
c0000c70:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c73:	89 15 ac d4 02 c0    	mov    DWORD PTR ds:0xc002d4ac,edx
c0000c79:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000c7e:	76 16                	jbe    c0000c96 <dlfree+0xf1>
c0000c80:	f6 05 80 d4 02 c0 02 	test   BYTE PTR ds:0xc002d480,0x2
c0000c87:	74 0d                	je     c0000c96 <dlfree+0xf1>
c0000c89:	5b                   	pop    ebx
c0000c8a:	b8 80 d4 02 c0       	mov    eax,0xc002d480
c0000c8f:	5e                   	pop    esi
c0000c90:	5f                   	pop    edi
c0000c91:	e9 28 fe ff ff       	jmp    c0000abe <malloc_consolidate>
c0000c96:	5b                   	pop    ebx
c0000c97:	5e                   	pop    esi
c0000c98:	5f                   	pop    edi
c0000c99:	c3                   	ret    

c0000c9a <sYSMALLOc>:
c0000c9a:	55                   	push   ebp
c0000c9b:	57                   	push   edi
c0000c9c:	56                   	push   esi
c0000c9d:	53                   	push   ebx
c0000c9e:	89 d3                	mov    ebx,edx
c0000ca0:	83 ec 2c             	sub    esp,0x2c
c0000ca3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000ca7:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000cad:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000cb0:	8d 42 ff             	lea    eax,[edx-0x1]
c0000cb3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000cb7:	74 1f                	je     c0000cd8 <sYSMALLOc+0x3e>
c0000cb9:	89 d8                	mov    eax,ebx
c0000cbb:	e8 fe fd ff ff       	call   c0000abe <malloc_consolidate>
c0000cc0:	83 ec 0c             	sub    esp,0xc
c0000cc3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000cc7:	83 e8 07             	sub    eax,0x7
c0000cca:	50                   	push   eax
c0000ccb:	e8 30 02 00 00       	call   c0000f00 <dlmalloc>
c0000cd0:	83 c4 10             	add    esp,0x10
c0000cd3:	e9 20 02 00 00       	jmp    c0000ef8 <sYSMALLOc+0x25e>
c0000cd8:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000cdb:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ce1:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000ce4:	83 e0 fc             	and    eax,0xfffffffc
c0000ce7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ceb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000cef:	83 c0 10             	add    eax,0x10
c0000cf2:	01 c1                	add    ecx,eax
c0000cf4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000cf8:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000cff:	74 04                	je     c0000d05 <sYSMALLOc+0x6b>
c0000d01:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000d05:	f7 da                	neg    edx
c0000d07:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000d0b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000d0f:	21 d1                	and    ecx,edx
c0000d11:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000d15:	7f 07                	jg     c0000d1e <sYSMALLOc+0x84>
c0000d17:	31 c0                	xor    eax,eax
c0000d19:	e9 da 01 00 00       	jmp    c0000ef8 <sYSMALLOc+0x25e>
c0000d1e:	83 ec 0c             	sub    esp,0xc
c0000d21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000d25:	e8 51 e7 00 00       	call   c000f47b <sbrk>
c0000d2a:	83 c4 10             	add    esp,0x10
c0000d2d:	89 c6                	mov    esi,eax
c0000d2f:	83 f8 ff             	cmp    eax,0xffffffff
c0000d32:	74 e3                	je     c0000d17 <sYSMALLOc+0x7d>
c0000d34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000d38:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000d3c:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000d3f:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000d45:	39 f1                	cmp    ecx,esi
c0000d47:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000d4d:	75 13                	jne    c0000d62 <sYSMALLOc+0xc8>
c0000d4f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000d53:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d57:	83 c8 01             	or     eax,0x1
c0000d5a:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000d5d:	e9 3e 01 00 00       	jmp    c0000ea0 <sYSMALLOc+0x206>
c0000d62:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000d68:	88 d0                	mov    al,dl
c0000d6a:	83 e0 01             	and    eax,0x1
c0000d6d:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000d72:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000d76:	0f 95 c0             	setne  al
c0000d79:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000d7d:	39 f1                	cmp    ecx,esi
c0000d7f:	76 12                	jbe    c0000d93 <sYSMALLOc+0xf9>
c0000d81:	84 c0                	test   al,al
c0000d83:	74 0e                	je     c0000d93 <sYSMALLOc+0xf9>
c0000d85:	83 e2 fe             	and    edx,0xfffffffe
c0000d88:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000d8e:	e9 83 00 00 00       	jmp    c0000e16 <sYSMALLOc+0x17c>
c0000d93:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000d98:	74 7c                	je     c0000e16 <sYSMALLOc+0x17c>
c0000d9a:	84 c0                	test   al,al
c0000d9c:	74 0c                	je     c0000daa <sYSMALLOc+0x110>
c0000d9e:	89 f0                	mov    eax,esi
c0000da0:	29 c8                	sub    eax,ecx
c0000da2:	01 e8                	add    eax,ebp
c0000da4:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000daa:	89 f2                	mov    edx,esi
c0000dac:	83 e2 07             	and    edx,0x7
c0000daf:	74 0c                	je     c0000dbd <sYSMALLOc+0x123>
c0000db1:	b8 08 00 00 00       	mov    eax,0x8
c0000db6:	29 d0                	sub    eax,edx
c0000db8:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000dbb:	eb 04                	jmp    c0000dc1 <sYSMALLOc+0x127>
c0000dbd:	89 f5                	mov    ebp,esi
c0000dbf:	31 c0                	xor    eax,eax
c0000dc1:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000dc5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000dc9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000dcd:	01 c1                	add    ecx,eax
c0000dcf:	83 ec 0c             	sub    esp,0xc
c0000dd2:	01 f1                	add    ecx,esi
c0000dd4:	01 ca                	add    edx,ecx
c0000dd6:	29 c8                	sub    eax,ecx
c0000dd8:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ddc:	01 c2                	add    edx,eax
c0000dde:	52                   	push   edx
c0000ddf:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000de3:	e8 93 e6 00 00       	call   c000f47b <sbrk>
c0000de8:	83 c4 10             	add    esp,0x10
c0000deb:	83 f8 ff             	cmp    eax,0xffffffff
c0000dee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000df2:	75 0f                	jne    c0000e03 <sYSMALLOc+0x169>
c0000df4:	83 ec 0c             	sub    esp,0xc
c0000df7:	6a 00                	push   0x0
c0000df9:	e8 7d e6 00 00       	call   c000f47b <sbrk>
c0000dfe:	83 c4 10             	add    esp,0x10
c0000e01:	eb 30                	jmp    c0000e33 <sYSMALLOc+0x199>
c0000e03:	39 c6                	cmp    esi,eax
c0000e05:	76 33                	jbe    c0000e3a <sYSMALLOc+0x1a0>
c0000e07:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e0b:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000e12:	01 f0                	add    eax,esi
c0000e14:	eb 1d                	jmp    c0000e33 <sYSMALLOc+0x199>
c0000e16:	83 ec 0c             	sub    esp,0xc
c0000e19:	89 f5                	mov    ebp,esi
c0000e1b:	6a 00                	push   0x0
c0000e1d:	e8 59 e6 00 00       	call   c000f47b <sbrk>
c0000e22:	89 c2                	mov    edx,eax
c0000e24:	29 f2                	sub    edx,esi
c0000e26:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000e2a:	83 c4 10             	add    esp,0x10
c0000e2d:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000e33:	31 d2                	xor    edx,edx
c0000e35:	83 f8 ff             	cmp    eax,0xffffffff
c0000e38:	74 66                	je     c0000ea0 <sYSMALLOc+0x206>
c0000e3a:	29 e8                	sub    eax,ebp
c0000e3c:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000e3f:	01 d0                	add    eax,edx
c0000e41:	83 c8 01             	or     eax,0x1
c0000e44:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000e47:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000e4d:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e52:	74 4c                	je     c0000ea0 <sYSMALLOc+0x206>
c0000e54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e58:	83 e8 0c             	sub    eax,0xc
c0000e5b:	83 e0 f8             	and    eax,0xfffffff8
c0000e5e:	89 c2                	mov    edx,eax
c0000e60:	83 ca 01             	or     edx,0x1
c0000e63:	83 f8 0f             	cmp    eax,0xf
c0000e66:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000e69:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000e71:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000e79:	76 25                	jbe    c0000ea0 <sYSMALLOc+0x206>
c0000e7b:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000e81:	83 ec 0c             	sub    esp,0xc
c0000e84:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000e8e:	83 c7 08             	add    edi,0x8
c0000e91:	57                   	push   edi
c0000e92:	e8 0e fd ff ff       	call   c0000ba5 <dlfree>
c0000e97:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000e9d:	83 c4 10             	add    esp,0x10
c0000ea0:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000ea6:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000eac:	73 06                	jae    c0000eb4 <sYSMALLOc+0x21a>
c0000eae:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000eb4:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000eba:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000ec0:	73 06                	jae    c0000ec8 <sYSMALLOc+0x22e>
c0000ec2:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000ec8:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000ecb:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000ece:	83 e2 fc             	and    edx,0xfffffffc
c0000ed1:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000ed5:	0f 82 3c fe ff ff    	jb     c0000d17 <sYSMALLOc+0x7d>
c0000edb:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000edf:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000ee2:	29 fa                	sub    edx,edi
c0000ee4:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000ee7:	83 ca 01             	or     edx,0x1
c0000eea:	89 fb                	mov    ebx,edi
c0000eec:	83 c0 08             	add    eax,0x8
c0000eef:	83 cb 01             	or     ebx,0x1
c0000ef2:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000ef5:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000ef8:	83 c4 2c             	add    esp,0x2c
c0000efb:	5b                   	pop    ebx
c0000efc:	5e                   	pop    esi
c0000efd:	5f                   	pop    edi
c0000efe:	5d                   	pop    ebp
c0000eff:	c3                   	ret    

c0000f00 <dlmalloc>:
c0000f00:	55                   	push   ebp
c0000f01:	57                   	push   edi
c0000f02:	56                   	push   esi
c0000f03:	53                   	push   ebx
c0000f04:	83 ec 1c             	sub    esp,0x1c
c0000f07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000f0b:	83 f8 df             	cmp    eax,0xffffffdf
c0000f0e:	0f 87 70 03 00 00    	ja     c0001284 <dlmalloc+0x384>
c0000f14:	83 c0 0b             	add    eax,0xb
c0000f17:	be 10 00 00 00       	mov    esi,0x10
c0000f1c:	83 f8 0f             	cmp    eax,0xf
c0000f1f:	76 05                	jbe    c0000f26 <dlmalloc+0x26>
c0000f21:	83 e0 f8             	and    eax,0xfffffff8
c0000f24:	89 c6                	mov    esi,eax
c0000f26:	8b 3d 80 d4 02 c0    	mov    edi,DWORD PTR ds:0xc002d480
c0000f2c:	f7 c7 01 00 00 00    	test   edi,0x1
c0000f32:	75 17                	jne    c0000f4b <dlmalloc+0x4b>
c0000f34:	85 ff                	test   edi,edi
c0000f36:	0f 85 05 03 00 00    	jne    c0001241 <dlmalloc+0x341>
c0000f3c:	b8 80 d4 02 c0       	mov    eax,0xc002d480
c0000f41:	e8 78 fb ff ff       	call   c0000abe <malloc_consolidate>
c0000f46:	e9 f6 02 00 00       	jmp    c0001241 <dlmalloc+0x341>
c0000f4b:	39 f7                	cmp    edi,esi
c0000f4d:	72 1f                	jb     c0000f6e <dlmalloc+0x6e>
c0000f4f:	89 f2                	mov    edx,esi
c0000f51:	c1 ea 03             	shr    edx,0x3
c0000f54:	83 ea 02             	sub    edx,0x2
c0000f57:	8b 04 95 84 d4 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2b7c]
c0000f5e:	85 c0                	test   eax,eax
c0000f60:	74 0c                	je     c0000f6e <dlmalloc+0x6e>
c0000f62:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0000f65:	89 0c 95 84 d4 02 c0 	mov    DWORD PTR [edx*4-0x3ffd2b7c],ecx
c0000f6c:	eb 30                	jmp    c0000f9e <dlmalloc+0x9e>
c0000f6e:	89 f0                	mov    eax,esi
c0000f70:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f76:	77 2e                	ja     c0000fa6 <dlmalloc+0xa6>
c0000f78:	c1 e8 03             	shr    eax,0x3
c0000f7b:	8d 14 c5 b4 d4 02 c0 	lea    edx,[eax*8-0x3ffd2b4c]
c0000f82:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f86:	8d 5a f8             	lea    ebx,[edx-0x8]
c0000f89:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0000f8c:	39 c3                	cmp    ebx,eax
c0000f8e:	74 2e                	je     c0000fbe <dlmalloc+0xbe>
c0000f90:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0000f93:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0000f98:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000f9b:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0000f9e:	83 c0 08             	add    eax,0x8
c0000fa1:	e9 e0 02 00 00       	jmp    c0001286 <dlmalloc+0x386>
c0000fa6:	e8 8f fa ff ff       	call   c0000a3a <largebin_index>
c0000fab:	83 e7 02             	and    edi,0x2
c0000fae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000fb2:	74 0a                	je     c0000fbe <dlmalloc+0xbe>
c0000fb4:	b8 80 d4 02 c0       	mov    eax,0xc002d480
c0000fb9:	e8 00 fb ff ff       	call   c0000abe <malloc_consolidate>
c0000fbe:	8d 46 10             	lea    eax,[esi+0x10]
c0000fc1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000fc5:	8b 1d c0 d4 02 c0    	mov    ebx,DWORD PTR ds:0xc002d4c0
c0000fcb:	81 fb b4 d4 02 c0    	cmp    ebx,0xc002d4b4
c0000fd1:	0f 84 13 01 00 00    	je     c00010ea <dlmalloc+0x1ea>
c0000fd7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0000fda:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0000fdd:	83 e7 fc             	and    edi,0xfffffffc
c0000fe0:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000fe6:	77 4c                	ja     c0001034 <dlmalloc+0x134>
c0000fe8:	3d b4 d4 02 c0       	cmp    eax,0xc002d4b4
c0000fed:	75 45                	jne    c0001034 <dlmalloc+0x134>
c0000fef:	39 1d b0 d4 02 c0    	cmp    DWORD PTR ds:0xc002d4b0,ebx
c0000ff5:	75 3d                	jne    c0001034 <dlmalloc+0x134>
c0000ff7:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0000ffb:	73 37                	jae    c0001034 <dlmalloc+0x134>
c0000ffd:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001000:	89 fa                	mov    edx,edi
c0001002:	a3 bc d4 02 c0       	mov    ds:0xc002d4bc,eax
c0001007:	a3 c0 d4 02 c0       	mov    ds:0xc002d4c0,eax
c000100c:	a3 b0 d4 02 c0       	mov    ds:0xc002d4b0,eax
c0001011:	29 f2                	sub    edx,esi
c0001013:	c7 40 08 b4 d4 02 c0 	mov    DWORD PTR [eax+0x8],0xc002d4b4
c000101a:	c7 40 0c b4 d4 02 c0 	mov    DWORD PTR [eax+0xc],0xc002d4b4
c0001021:	83 ce 01             	or     esi,0x1
c0001024:	89 d1                	mov    ecx,edx
c0001026:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001029:	83 c9 01             	or     ecx,0x1
c000102c:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000102f:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001032:	eb 15                	jmp    c0001049 <dlmalloc+0x149>
c0001034:	a3 c0 d4 02 c0       	mov    ds:0xc002d4c0,eax
c0001039:	39 fe                	cmp    esi,edi
c000103b:	c7 40 08 b4 d4 02 c0 	mov    DWORD PTR [eax+0x8],0xc002d4b4
c0001042:	75 0d                	jne    c0001051 <dlmalloc+0x151>
c0001044:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001049:	8d 43 08             	lea    eax,[ebx+0x8]
c000104c:	e9 35 02 00 00       	jmp    c0001286 <dlmalloc+0x386>
c0001051:	89 f8                	mov    eax,edi
c0001053:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001059:	77 19                	ja     c0001074 <dlmalloc+0x174>
c000105b:	c1 e8 03             	shr    eax,0x3
c000105e:	8d 14 00             	lea    edx,[eax+eax*1]
c0001061:	83 c2 0d             	add    edx,0xd
c0001064:	8d 2c 95 78 d4 02 c0 	lea    ebp,[edx*4-0x3ffd2b88]
c000106b:	8b 14 95 80 d4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2b80]
c0001072:	eb 46                	jmp    c00010ba <dlmalloc+0x1ba>
c0001074:	e8 c1 f9 ff ff       	call   c0000a3a <largebin_index>
c0001079:	8d 14 00             	lea    edx,[eax+eax*1]
c000107c:	83 c2 0d             	add    edx,0xd
c000107f:	8d 0c 95 80 d4 02 c0 	lea    ecx,[edx*4-0x3ffd2b80]
c0001086:	8b 14 95 80 d4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2b80]
c000108d:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001090:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001094:	89 d5                	mov    ebp,edx
c0001096:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000109a:	74 1e                	je     c00010ba <dlmalloc+0x1ba>
c000109c:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000109f:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00010a2:	77 12                	ja     c00010b6 <dlmalloc+0x1b6>
c00010a4:	83 cf 01             	or     edi,0x1
c00010a7:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00010aa:	76 05                	jbe    c00010b1 <dlmalloc+0x1b1>
c00010ac:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00010af:	eb f6                	jmp    c00010a7 <dlmalloc+0x1a7>
c00010b1:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00010b4:	eb 04                	jmp    c00010ba <dlmalloc+0x1ba>
c00010b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00010ba:	89 c7                	mov    edi,eax
c00010bc:	88 c1                	mov    cl,al
c00010be:	c1 ff 05             	sar    edi,0x5
c00010c1:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00010c5:	bf 01 00 00 00       	mov    edi,0x1
c00010ca:	d3 e7                	shl    edi,cl
c00010cc:	89 f8                	mov    eax,edi
c00010ce:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00010d2:	09 04 bd b4 d7 02 c0 	or     DWORD PTR [edi*4-0x3ffd284c],eax
c00010d9:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00010dc:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00010df:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00010e2:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00010e5:	e9 db fe ff ff       	jmp    c0000fc5 <dlmalloc+0xc5>
c00010ea:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010f0:	76 78                	jbe    c000116a <dlmalloc+0x26a>
c00010f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00010f6:	8d 04 c5 b4 d4 02 c0 	lea    eax,[eax*8-0x3ffd2b4c]
c00010fd:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001100:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001103:	39 ca                	cmp    edx,ecx
c0001105:	74 63                	je     c000116a <dlmalloc+0x26a>
c0001107:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000110a:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000110d:	83 e3 fc             	and    ebx,0xfffffffc
c0001110:	39 de                	cmp    esi,ebx
c0001112:	77 52                	ja     c0001166 <dlmalloc+0x266>
c0001114:	89 df                	mov    edi,ebx
c0001116:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001119:	29 f7                	sub    edi,esi
c000111b:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000111e:	01 d3                	add    ebx,edx
c0001120:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001123:	83 ff 0f             	cmp    edi,0xf
c0001126:	8d 42 08             	lea    eax,[edx+0x8]
c0001129:	77 09                	ja     c0001134 <dlmalloc+0x234>
c000112b:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000112f:	e9 52 01 00 00       	jmp    c0001286 <dlmalloc+0x386>
c0001134:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001137:	83 ce 01             	or     esi,0x1
c000113a:	89 0d bc d4 02 c0    	mov    DWORD PTR ds:0xc002d4bc,ecx
c0001140:	89 0d c0 d4 02 c0    	mov    DWORD PTR ds:0xc002d4c0,ecx
c0001146:	c7 41 08 b4 d4 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002d4b4
c000114d:	c7 41 0c b4 d4 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002d4b4
c0001154:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001157:	89 fa                	mov    edx,edi
c0001159:	83 ca 01             	or     edx,0x1
c000115c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000115f:	89 3b                	mov    DWORD PTR [ebx],edi
c0001161:	e9 20 01 00 00       	jmp    c0001286 <dlmalloc+0x386>
c0001166:	89 c2                	mov    edx,eax
c0001168:	eb 99                	jmp    c0001103 <dlmalloc+0x203>
c000116a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000116e:	b8 01 00 00 00       	mov    eax,0x1
c0001173:	41                   	inc    ecx
c0001174:	89 cb                	mov    ebx,ecx
c0001176:	8d 14 cd ac d4 02 c0 	lea    edx,[ecx*8-0x3ffd2b54]
c000117d:	c1 eb 05             	shr    ebx,0x5
c0001180:	d3 e0                	shl    eax,cl
c0001182:	8b 3c 9d b4 d7 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd284c]
c0001189:	39 f8                	cmp    eax,edi
c000118b:	77 04                	ja     c0001191 <dlmalloc+0x291>
c000118d:	85 c0                	test   eax,eax
c000118f:	75 26                	jne    c00011b7 <dlmalloc+0x2b7>
c0001191:	43                   	inc    ebx
c0001192:	83 fb 02             	cmp    ebx,0x2
c0001195:	0f 87 a6 00 00 00    	ja     c0001241 <dlmalloc+0x341>
c000119b:	8b 3c 9d b4 d7 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd284c]
c00011a2:	85 ff                	test   edi,edi
c00011a4:	74 eb                	je     c0001191 <dlmalloc+0x291>
c00011a6:	89 d8                	mov    eax,ebx
c00011a8:	c1 e0 06             	shl    eax,0x6
c00011ab:	8d 14 85 ac d4 02 c0 	lea    edx,[eax*4-0x3ffd2b54]
c00011b2:	b8 01 00 00 00       	mov    eax,0x1
c00011b7:	85 f8                	test   eax,edi
c00011b9:	75 07                	jne    c00011c2 <dlmalloc+0x2c2>
c00011bb:	83 c2 08             	add    edx,0x8
c00011be:	01 c0                	add    eax,eax
c00011c0:	eb f5                	jmp    c00011b7 <dlmalloc+0x2b7>
c00011c2:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00011c5:	39 ca                	cmp    edx,ecx
c00011c7:	75 14                	jne    c00011dd <dlmalloc+0x2dd>
c00011c9:	89 c1                	mov    ecx,eax
c00011cb:	83 c2 08             	add    edx,0x8
c00011ce:	f7 d1                	not    ecx
c00011d0:	01 c0                	add    eax,eax
c00011d2:	21 cf                	and    edi,ecx
c00011d4:	89 3c 9d b4 d7 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd284c],edi
c00011db:	eb ac                	jmp    c0001189 <dlmalloc+0x289>
c00011dd:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00011e0:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00011e3:	83 e0 fc             	and    eax,0xfffffffc
c00011e6:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00011e9:	89 c3                	mov    ebx,eax
c00011eb:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00011ee:	29 f3                	sub    ebx,esi
c00011f0:	8d 14 01             	lea    edx,[ecx+eax*1]
c00011f3:	83 fb 0f             	cmp    ebx,0xf
c00011f6:	8d 41 08             	lea    eax,[ecx+0x8]
c00011f9:	77 09                	ja     c0001204 <dlmalloc+0x304>
c00011fb:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00011ff:	e9 82 00 00 00       	jmp    c0001286 <dlmalloc+0x386>
c0001204:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001207:	81 fe ff 00 00 00    	cmp    esi,0xff
c000120d:	89 3d bc d4 02 c0    	mov    DWORD PTR ds:0xc002d4bc,edi
c0001213:	89 3d c0 d4 02 c0    	mov    DWORD PTR ds:0xc002d4c0,edi
c0001219:	c7 47 08 b4 d4 02 c0 	mov    DWORD PTR [edi+0x8],0xc002d4b4
c0001220:	c7 47 0c b4 d4 02 c0 	mov    DWORD PTR [edi+0xc],0xc002d4b4
c0001227:	77 06                	ja     c000122f <dlmalloc+0x32f>
c0001229:	89 3d b0 d4 02 c0    	mov    DWORD PTR ds:0xc002d4b0,edi
c000122f:	83 ce 01             	or     esi,0x1
c0001232:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001235:	89 d9                	mov    ecx,ebx
c0001237:	83 c9 01             	or     ecx,0x1
c000123a:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000123d:	89 1a                	mov    DWORD PTR [edx],ebx
c000123f:	eb 45                	jmp    c0001286 <dlmalloc+0x386>
c0001241:	a1 ac d4 02 c0       	mov    eax,ds:0xc002d4ac
c0001246:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001249:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000124c:	83 e2 fc             	and    edx,0xfffffffc
c000124f:	39 d1                	cmp    ecx,edx
c0001251:	77 1e                	ja     c0001271 <dlmalloc+0x371>
c0001253:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001256:	89 f3                	mov    ebx,esi
c0001258:	89 0d ac d4 02 c0    	mov    DWORD PTR ds:0xc002d4ac,ecx
c000125e:	83 cb 01             	or     ebx,0x1
c0001261:	29 f2                	sub    edx,esi
c0001263:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001266:	83 ca 01             	or     edx,0x1
c0001269:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000126c:	e9 2d fd ff ff       	jmp    c0000f9e <dlmalloc+0x9e>
c0001271:	83 c4 1c             	add    esp,0x1c
c0001274:	89 f0                	mov    eax,esi
c0001276:	5b                   	pop    ebx
c0001277:	ba 80 d4 02 c0       	mov    edx,0xc002d480
c000127c:	5e                   	pop    esi
c000127d:	5f                   	pop    edi
c000127e:	5d                   	pop    ebp
c000127f:	e9 16 fa ff ff       	jmp    c0000c9a <sYSMALLOc>
c0001284:	31 c0                	xor    eax,eax
c0001286:	83 c4 1c             	add    esp,0x1c
c0001289:	5b                   	pop    ebx
c000128a:	5e                   	pop    esi
c000128b:	5f                   	pop    edi
c000128c:	5d                   	pop    ebp
c000128d:	c3                   	ret    

c000128e <iALLOc>:
c000128e:	55                   	push   ebp
c000128f:	89 c5                	mov    ebp,eax
c0001291:	57                   	push   edi
c0001292:	56                   	push   esi
c0001293:	53                   	push   ebx
c0001294:	83 ec 2c             	sub    esp,0x2c
c0001297:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000129b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000129f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00012a3:	83 3d 80 d4 02 c0 00 	cmp    DWORD PTR ds:0xc002d480,0x0
c00012aa:	75 12                	jne    c00012be <iALLOc+0x30>
c00012ac:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00012b0:	b8 80 d4 02 c0       	mov    eax,0xc002d480
c00012b5:	e8 04 f8 ff ff       	call   c0000abe <malloc_consolidate>
c00012ba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00012be:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00012c3:	74 12                	je     c00012d7 <iALLOc+0x49>
c00012c5:	85 ed                	test   ebp,ebp
c00012c7:	0f 84 64 01 00 00    	je     c0001431 <iALLOc+0x1a3>
c00012cd:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00012d5:	eb 33                	jmp    c000130a <iALLOc+0x7c>
c00012d7:	85 ed                	test   ebp,ebp
c00012d9:	75 14                	jne    c00012ef <iALLOc+0x61>
c00012db:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00012e3:	83 c4 2c             	add    esp,0x2c
c00012e6:	5b                   	pop    ebx
c00012e7:	5e                   	pop    esi
c00012e8:	5f                   	pop    edi
c00012e9:	5d                   	pop    ebp
c00012ea:	e9 11 fc ff ff       	jmp    c0000f00 <dlmalloc>
c00012ef:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00012f6:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00012fe:	83 f8 0f             	cmp    eax,0xf
c0001301:	76 07                	jbe    c000130a <iALLOc+0x7c>
c0001303:	83 e0 f8             	and    eax,0xfffffff8
c0001306:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000130a:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c000130f:	75 09                	jne    c000131a <iALLOc+0x8c>
c0001311:	89 d0                	mov    eax,edx
c0001313:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001316:	31 f6                	xor    esi,esi
c0001318:	eb 3b                	jmp    c0001355 <iALLOc+0xc7>
c000131a:	8b 02                	mov    eax,DWORD PTR [edx]
c000131c:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001324:	83 c0 0b             	add    eax,0xb
c0001327:	83 f8 0f             	cmp    eax,0xf
c000132a:	76 07                	jbe    c0001333 <iALLOc+0xa5>
c000132c:	83 e0 f8             	and    eax,0xfffffff8
c000132f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001333:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001337:	0f af f5             	imul   esi,ebp
c000133a:	eb 25                	jmp    c0001361 <iALLOc+0xd3>
c000133c:	8b 18                	mov    ebx,DWORD PTR [eax]
c000133e:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001341:	bb 10 00 00 00       	mov    ebx,0x10
c0001346:	83 f9 0f             	cmp    ecx,0xf
c0001349:	76 05                	jbe    c0001350 <iALLOc+0xc2>
c000134b:	83 e1 f8             	and    ecx,0xfffffff8
c000134e:	89 cb                	mov    ebx,ecx
c0001350:	01 de                	add    esi,ebx
c0001352:	83 c0 04             	add    eax,0x4
c0001355:	39 c7                	cmp    edi,eax
c0001357:	75 e3                	jne    c000133c <iALLOc+0xae>
c0001359:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001361:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001365:	8b 1d d4 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d7d4
c000136b:	83 ec 0c             	sub    esp,0xc
c000136e:	c7 05 d4 d7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d7d4,0x0
c0001378:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000137c:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001380:	50                   	push   eax
c0001381:	e8 7a fb ff ff       	call   c0000f00 <dlmalloc>
c0001386:	83 c4 10             	add    esp,0x10
c0001389:	89 1d d4 d7 02 c0    	mov    DWORD PTR ds:0xc002d7d4,ebx
c000138f:	85 c0                	test   eax,eax
c0001391:	0f 84 92 00 00 00    	je     c0001429 <iALLOc+0x19b>
c0001397:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000139a:	8d 78 f8             	lea    edi,[eax-0x8]
c000139d:	83 e3 fc             	and    ebx,0xfffffffc
c00013a0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00013a4:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00013a9:	74 1e                	je     c00013c9 <iALLOc+0x13b>
c00013ab:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00013af:	89 d9                	mov    ecx,ebx
c00013b1:	52                   	push   edx
c00013b2:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00013b6:	83 e9 04             	sub    ecx,0x4
c00013b9:	51                   	push   ecx
c00013ba:	6a 00                	push   0x0
c00013bc:	50                   	push   eax
c00013bd:	e8 02 f3 ff ff       	call   c00006c4 <memset>
c00013c2:	83 c4 10             	add    esp,0x10
c00013c5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00013c9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013ce:	75 14                	jne    c00013e4 <iALLOc+0x156>
c00013d0:	8d 04 37             	lea    eax,[edi+esi*1]
c00013d3:	29 f3                	sub    ebx,esi
c00013d5:	8d 48 08             	lea    ecx,[eax+0x8]
c00013d8:	83 cb 01             	or     ebx,0x1
c00013db:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00013df:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00013e2:	89 f3                	mov    ebx,esi
c00013e4:	31 c0                	xor    eax,eax
c00013e6:	4d                   	dec    ebp
c00013e7:	8d 4f 08             	lea    ecx,[edi+0x8]
c00013ea:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00013ee:	39 c5                	cmp    ebp,eax
c00013f0:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00013f3:	74 2c                	je     c0001421 <iALLOc+0x193>
c00013f5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00013f9:	85 c9                	test   ecx,ecx
c00013fb:	75 15                	jne    c0001412 <iALLOc+0x184>
c00013fd:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001400:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001403:	b9 10 00 00 00       	mov    ecx,0x10
c0001408:	83 fe 0f             	cmp    esi,0xf
c000140b:	76 05                	jbe    c0001412 <iALLOc+0x184>
c000140d:	83 e6 f8             	and    esi,0xfffffff8
c0001410:	89 f1                	mov    ecx,esi
c0001412:	89 ce                	mov    esi,ecx
c0001414:	29 cb                	sub    ebx,ecx
c0001416:	83 ce 01             	or     esi,0x1
c0001419:	40                   	inc    eax
c000141a:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000141d:	01 cf                	add    edi,ecx
c000141f:	eb c6                	jmp    c00013e7 <iALLOc+0x159>
c0001421:	83 cb 01             	or     ebx,0x1
c0001424:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001427:	eb 08                	jmp    c0001431 <iALLOc+0x1a3>
c0001429:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001431:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001435:	83 c4 2c             	add    esp,0x2c
c0001438:	5b                   	pop    ebx
c0001439:	5e                   	pop    esi
c000143a:	5f                   	pop    edi
c000143b:	5d                   	pop    ebp
c000143c:	c3                   	ret    

c000143d <dlrealloc>:
c000143d:	55                   	push   ebp
c000143e:	57                   	push   edi
c000143f:	56                   	push   esi
c0001440:	53                   	push   ebx
c0001441:	83 ec 1c             	sub    esp,0x1c
c0001444:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001448:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000144c:	85 db                	test   ebx,ebx
c000144e:	75 10                	jne    c0001460 <dlrealloc+0x23>
c0001450:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001454:	83 c4 1c             	add    esp,0x1c
c0001457:	5b                   	pop    ebx
c0001458:	5e                   	pop    esi
c0001459:	5f                   	pop    edi
c000145a:	5d                   	pop    ebp
c000145b:	e9 a0 fa ff ff       	jmp    c0000f00 <dlmalloc>
c0001460:	83 f8 df             	cmp    eax,0xffffffdf
c0001463:	76 07                	jbe    c000146c <dlrealloc+0x2f>
c0001465:	31 db                	xor    ebx,ebx
c0001467:	e9 7c 01 00 00       	jmp    c00015e8 <dlrealloc+0x1ab>
c000146c:	83 c0 0b             	add    eax,0xb
c000146f:	bf 10 00 00 00       	mov    edi,0x10
c0001474:	83 f8 0f             	cmp    eax,0xf
c0001477:	76 05                	jbe    c000147e <dlrealloc+0x41>
c0001479:	83 e0 f8             	and    eax,0xfffffff8
c000147c:	89 c7                	mov    edi,eax
c000147e:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001481:	8d 6b f8             	lea    ebp,[ebx-0x8]
c0001484:	89 c6                	mov    esi,eax
c0001486:	83 e6 fc             	and    esi,0xfffffffc
c0001489:	a8 02                	test   al,0x2
c000148b:	75 d8                	jne    c0001465 <dlrealloc+0x28>
c000148d:	39 f7                	cmp    edi,esi
c000148f:	0f 86 15 01 00 00    	jbe    c00015aa <dlrealloc+0x16d>
c0001495:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c0001499:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000149c:	39 15 ac d4 02 c0    	cmp    DWORD PTR ds:0xc002d4ac,edx
c00014a2:	75 33                	jne    c00014d7 <dlrealloc+0x9a>
c00014a4:	83 e1 fc             	and    ecx,0xfffffffc
c00014a7:	01 f1                	add    ecx,esi
c00014a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014ad:	8d 4f 10             	lea    ecx,[edi+0x10]
c00014b0:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00014b4:	77 49                	ja     c00014ff <dlrealloc+0xc2>
c00014b6:	01 fd                	add    ebp,edi
c00014b8:	83 e0 01             	and    eax,0x1
c00014bb:	09 f8                	or     eax,edi
c00014bd:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00014c0:	89 2d ac d4 02 c0    	mov    DWORD PTR ds:0xc002d4ac,ebp
c00014c6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00014ca:	29 f8                	sub    eax,edi
c00014cc:	83 c8 01             	or     eax,0x1
c00014cf:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00014d2:	e9 11 01 00 00       	jmp    c00015e8 <dlrealloc+0x1ab>
c00014d7:	89 c8                	mov    eax,ecx
c00014d9:	83 e0 fe             	and    eax,0xfffffffe
c00014dc:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00014e1:	75 1c                	jne    c00014ff <dlrealloc+0xc2>
c00014e3:	83 e1 fc             	and    ecx,0xfffffffc
c00014e6:	01 f1                	add    ecx,esi
c00014e8:	39 cf                	cmp    edi,ecx
c00014ea:	77 13                	ja     c00014ff <dlrealloc+0xc2>
c00014ec:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00014ef:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00014f2:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00014f5:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00014f8:	89 ce                	mov    esi,ecx
c00014fa:	e9 ab 00 00 00       	jmp    c00015aa <dlrealloc+0x16d>
c00014ff:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001503:	8d 47 f9             	lea    eax,[edi-0x7]
c0001506:	83 ec 0c             	sub    esp,0xc
c0001509:	50                   	push   eax
c000150a:	e8 f1 f9 ff ff       	call   c0000f00 <dlmalloc>
c000150f:	83 c4 10             	add    esp,0x10
c0001512:	89 c1                	mov    ecx,eax
c0001514:	85 c0                	test   eax,eax
c0001516:	0f 84 49 ff ff ff    	je     c0001465 <dlrealloc+0x28>
c000151c:	8d 40 f8             	lea    eax,[eax-0x8]
c000151f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001523:	39 c2                	cmp    edx,eax
c0001525:	75 0a                	jne    c0001531 <dlrealloc+0xf4>
c0001527:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000152a:	83 e0 fc             	and    eax,0xfffffffc
c000152d:	01 c6                	add    esi,eax
c000152f:	eb 79                	jmp    c00015aa <dlrealloc+0x16d>
c0001531:	83 ee 04             	sub    esi,0x4
c0001534:	83 fe 27             	cmp    esi,0x27
c0001537:	76 16                	jbe    c000154f <dlrealloc+0x112>
c0001539:	50                   	push   eax
c000153a:	56                   	push   esi
c000153b:	53                   	push   ebx
c000153c:	51                   	push   ecx
c000153d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001541:	e8 5a f1 ff ff       	call   c00006a0 <memcpy>
c0001546:	83 c4 10             	add    esp,0x10
c0001549:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000154d:	eb 43                	jmp    c0001592 <dlrealloc+0x155>
c000154f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001551:	83 fe 13             	cmp    esi,0x13
c0001554:	89 01                	mov    DWORD PTR [ecx],eax
c0001556:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001559:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c000155c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000155f:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001562:	76 2e                	jbe    c0001592 <dlrealloc+0x155>
c0001564:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001567:	83 fe 1b             	cmp    esi,0x1b
c000156a:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000156d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001570:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c0001573:	76 1d                	jbe    c0001592 <dlrealloc+0x155>
c0001575:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0001578:	83 fe 23             	cmp    esi,0x23
c000157b:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000157e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0001581:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c0001584:	76 0c                	jbe    c0001592 <dlrealloc+0x155>
c0001586:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0001589:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c000158c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000158f:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c0001592:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001596:	83 ec 0c             	sub    esp,0xc
c0001599:	53                   	push   ebx
c000159a:	e8 06 f6 ff ff       	call   c0000ba5 <dlfree>
c000159f:	83 c4 10             	add    esp,0x10
c00015a2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00015a6:	89 cb                	mov    ebx,ecx
c00015a8:	eb 3e                	jmp    c00015e8 <dlrealloc+0x1ab>
c00015aa:	89 f2                	mov    edx,esi
c00015ac:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00015af:	29 fa                	sub    edx,edi
c00015b1:	83 e1 01             	and    ecx,0x1
c00015b4:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00015b8:	83 fa 0f             	cmp    edx,0xf
c00015bb:	77 0b                	ja     c00015c8 <dlrealloc+0x18b>
c00015bd:	09 ce                	or     esi,ecx
c00015bf:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00015c2:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00015c6:	eb 20                	jmp    c00015e8 <dlrealloc+0x1ab>
c00015c8:	01 fd                	add    ebp,edi
c00015ca:	83 ec 0c             	sub    esp,0xc
c00015cd:	09 cf                	or     edi,ecx
c00015cf:	83 ca 01             	or     edx,0x1
c00015d2:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00015d5:	83 c5 08             	add    ebp,0x8
c00015d8:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00015db:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00015df:	55                   	push   ebp
c00015e0:	e8 c0 f5 ff ff       	call   c0000ba5 <dlfree>
c00015e5:	83 c4 10             	add    esp,0x10
c00015e8:	83 c4 1c             	add    esp,0x1c
c00015eb:	89 d8                	mov    eax,ebx
c00015ed:	5b                   	pop    ebx
c00015ee:	5e                   	pop    esi
c00015ef:	5f                   	pop    edi
c00015f0:	5d                   	pop    ebp
c00015f1:	c3                   	ret    

c00015f2 <dlmemalign>:
c00015f2:	55                   	push   ebp
c00015f3:	57                   	push   edi
c00015f4:	56                   	push   esi
c00015f5:	53                   	push   ebx
c00015f6:	83 ec 0c             	sub    esp,0xc
c00015f9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00015fd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001601:	83 fa 08             	cmp    edx,0x8
c0001604:	77 10                	ja     c0001616 <dlmemalign+0x24>
c0001606:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000160a:	83 c4 0c             	add    esp,0xc
c000160d:	5b                   	pop    ebx
c000160e:	5e                   	pop    esi
c000160f:	5f                   	pop    edi
c0001610:	5d                   	pop    ebp
c0001611:	e9 ea f8 ff ff       	jmp    c0000f00 <dlmalloc>
c0001616:	bf 10 00 00 00       	mov    edi,0x10
c000161b:	83 fa 0f             	cmp    edx,0xf
c000161e:	76 13                	jbe    c0001633 <dlmemalign+0x41>
c0001620:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001623:	85 d1                	test   ecx,edx
c0001625:	75 04                	jne    c000162b <dlmemalign+0x39>
c0001627:	89 d7                	mov    edi,edx
c0001629:	eb 08                	jmp    c0001633 <dlmemalign+0x41>
c000162b:	39 d7                	cmp    edi,edx
c000162d:	73 04                	jae    c0001633 <dlmemalign+0x41>
c000162f:	01 ff                	add    edi,edi
c0001631:	eb f8                	jmp    c000162b <dlmemalign+0x39>
c0001633:	83 f8 df             	cmp    eax,0xffffffdf
c0001636:	76 07                	jbe    c000163f <dlmemalign+0x4d>
c0001638:	31 c0                	xor    eax,eax
c000163a:	e9 ce 00 00 00       	jmp    c000170d <dlmemalign+0x11b>
c000163f:	83 c0 0b             	add    eax,0xb
c0001642:	bd 10 00 00 00       	mov    ebp,0x10
c0001647:	83 f8 0f             	cmp    eax,0xf
c000164a:	76 05                	jbe    c0001651 <dlmemalign+0x5f>
c000164c:	83 e0 f8             	and    eax,0xfffffff8
c000164f:	89 c5                	mov    ebp,eax
c0001651:	83 ec 0c             	sub    esp,0xc
c0001654:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001658:	50                   	push   eax
c0001659:	e8 a2 f8 ff ff       	call   c0000f00 <dlmalloc>
c000165e:	83 c4 10             	add    esp,0x10
c0001661:	89 c1                	mov    ecx,eax
c0001663:	85 c0                	test   eax,eax
c0001665:	74 d1                	je     c0001638 <dlmemalign+0x46>
c0001667:	31 d2                	xor    edx,edx
c0001669:	8d 70 f8             	lea    esi,[eax-0x8]
c000166c:	f7 f7                	div    edi
c000166e:	85 d2                	test   edx,edx
c0001670:	74 62                	je     c00016d4 <dlmemalign+0xe2>
c0001672:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001676:	89 f8                	mov    eax,edi
c0001678:	f7 d8                	neg    eax
c000167a:	21 c3                	and    ebx,eax
c000167c:	83 eb 08             	sub    ebx,0x8
c000167f:	89 d8                	mov    eax,ebx
c0001681:	29 f0                	sub    eax,esi
c0001683:	83 f8 0f             	cmp    eax,0xf
c0001686:	77 02                	ja     c000168a <dlmemalign+0x98>
c0001688:	01 fb                	add    ebx,edi
c000168a:	89 d8                	mov    eax,ebx
c000168c:	29 f0                	sub    eax,esi
c000168e:	89 c6                	mov    esi,eax
c0001690:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001693:	89 c2                	mov    edx,eax
c0001695:	83 e2 fc             	and    edx,0xfffffffc
c0001698:	29 f2                	sub    edx,esi
c000169a:	a8 02                	test   al,0x2
c000169c:	74 10                	je     c00016ae <dlmemalign+0xbc>
c000169e:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00016a1:	83 ca 02             	or     edx,0x2
c00016a4:	8d 43 08             	lea    eax,[ebx+0x8]
c00016a7:	89 33                	mov    DWORD PTR [ebx],esi
c00016a9:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00016ac:	eb 5f                	jmp    c000170d <dlmemalign+0x11b>
c00016ae:	83 ec 0c             	sub    esp,0xc
c00016b1:	89 d0                	mov    eax,edx
c00016b3:	83 c8 01             	or     eax,0x1
c00016b6:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00016b9:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00016be:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00016c1:	83 e0 01             	and    eax,0x1
c00016c4:	09 f0                	or     eax,esi
c00016c6:	89 de                	mov    esi,ebx
c00016c8:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00016cb:	51                   	push   ecx
c00016cc:	e8 d4 f4 ff ff       	call   c0000ba5 <dlfree>
c00016d1:	83 c4 10             	add    esp,0x10
c00016d4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00016d7:	a8 02                	test   al,0x2
c00016d9:	75 2f                	jne    c000170a <dlmemalign+0x118>
c00016db:	83 e0 fc             	and    eax,0xfffffffc
c00016de:	8d 55 10             	lea    edx,[ebp+0x10]
c00016e1:	39 c2                	cmp    edx,eax
c00016e3:	73 25                	jae    c000170a <dlmemalign+0x118>
c00016e5:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00016e8:	83 ec 0c             	sub    esp,0xc
c00016eb:	29 e8                	sub    eax,ebp
c00016ed:	83 c2 08             	add    edx,0x8
c00016f0:	83 c8 01             	or     eax,0x1
c00016f3:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00016f6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00016f9:	83 e0 01             	and    eax,0x1
c00016fc:	09 c5                	or     ebp,eax
c00016fe:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001701:	52                   	push   edx
c0001702:	e8 9e f4 ff ff       	call   c0000ba5 <dlfree>
c0001707:	83 c4 10             	add    esp,0x10
c000170a:	8d 46 08             	lea    eax,[esi+0x8]
c000170d:	83 c4 0c             	add    esp,0xc
c0001710:	5b                   	pop    ebx
c0001711:	5e                   	pop    esi
c0001712:	5f                   	pop    edi
c0001713:	5d                   	pop    ebp
c0001714:	c3                   	ret    

c0001715 <dlcalloc>:
c0001715:	53                   	push   ebx
c0001716:	83 ec 14             	sub    esp,0x14
c0001719:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000171d:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001722:	50                   	push   eax
c0001723:	e8 d8 f7 ff ff       	call   c0000f00 <dlmalloc>
c0001728:	83 c4 10             	add    esp,0x10
c000172b:	89 c3                	mov    ebx,eax
c000172d:	85 c0                	test   eax,eax
c000172f:	74 77                	je     c00017a8 <dlcalloc+0x93>
c0001731:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001734:	89 d0                	mov    eax,edx
c0001736:	83 e0 fc             	and    eax,0xfffffffc
c0001739:	80 e2 02             	and    dl,0x2
c000173c:	75 5a                	jne    c0001798 <dlcalloc+0x83>
c000173e:	83 e8 04             	sub    eax,0x4
c0001741:	83 f8 27             	cmp    eax,0x27
c0001744:	76 03                	jbe    c0001749 <dlcalloc+0x34>
c0001746:	51                   	push   ecx
c0001747:	eb 53                	jmp    c000179c <dlcalloc+0x87>
c0001749:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000174f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001756:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000175d:	83 f8 13             	cmp    eax,0x13
c0001760:	76 46                	jbe    c00017a8 <dlcalloc+0x93>
c0001762:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001769:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001770:	83 f8 1b             	cmp    eax,0x1b
c0001773:	76 33                	jbe    c00017a8 <dlcalloc+0x93>
c0001775:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000177c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001783:	83 f8 23             	cmp    eax,0x23
c0001786:	76 20                	jbe    c00017a8 <dlcalloc+0x93>
c0001788:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000178f:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001796:	eb 10                	jmp    c00017a8 <dlcalloc+0x93>
c0001798:	83 e8 08             	sub    eax,0x8
c000179b:	52                   	push   edx
c000179c:	50                   	push   eax
c000179d:	6a 00                	push   0x0
c000179f:	53                   	push   ebx
c00017a0:	e8 1f ef ff ff       	call   c00006c4 <memset>
c00017a5:	83 c4 10             	add    esp,0x10
c00017a8:	89 d8                	mov    eax,ebx
c00017aa:	83 c4 08             	add    esp,0x8
c00017ad:	5b                   	pop    ebx
c00017ae:	c3                   	ret    

c00017af <dlcfree>:
c00017af:	e9 f1 f3 ff ff       	jmp    c0000ba5 <dlfree>

c00017b4 <dlindependent_calloc>:
c00017b4:	83 ec 28             	sub    esp,0x28
c00017b7:	b9 03 00 00 00       	mov    ecx,0x3
c00017bc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00017c0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00017c4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00017c8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00017cc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00017d0:	e8 b9 fa ff ff       	call   c000128e <iALLOc>
c00017d5:	83 c4 2c             	add    esp,0x2c
c00017d8:	c3                   	ret    

c00017d9 <dlindependent_comalloc>:
c00017d9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00017dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00017e1:	31 c9                	xor    ecx,ecx
c00017e3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00017e7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00017eb:	e9 9e fa ff ff       	jmp    c000128e <iALLOc>

c00017f0 <dlvalloc>:
c00017f0:	83 ec 0c             	sub    esp,0xc
c00017f3:	83 3d 80 d4 02 c0 00 	cmp    DWORD PTR ds:0xc002d480,0x0
c00017fa:	75 0a                	jne    c0001806 <dlvalloc+0x16>
c00017fc:	b8 80 d4 02 c0       	mov    eax,0xc002d480
c0001801:	e8 b8 f2 ff ff       	call   c0000abe <malloc_consolidate>
c0001806:	50                   	push   eax
c0001807:	50                   	push   eax
c0001808:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000180c:	ff 35 dc d7 02 c0    	push   DWORD PTR ds:0xc002d7dc
c0001812:	e8 db fd ff ff       	call   c00015f2 <dlmemalign>
c0001817:	83 c4 1c             	add    esp,0x1c
c000181a:	c3                   	ret    

c000181b <dlpvalloc>:
c000181b:	83 ec 0c             	sub    esp,0xc
c000181e:	83 3d 80 d4 02 c0 00 	cmp    DWORD PTR ds:0xc002d480,0x0
c0001825:	75 0a                	jne    c0001831 <dlpvalloc+0x16>
c0001827:	b8 80 d4 02 c0       	mov    eax,0xc002d480
c000182c:	e8 8d f2 ff ff       	call   c0000abe <malloc_consolidate>
c0001831:	a1 dc d7 02 c0       	mov    eax,ds:0xc002d7dc
c0001836:	89 c1                	mov    ecx,eax
c0001838:	52                   	push   edx
c0001839:	f7 d9                	neg    ecx
c000183b:	52                   	push   edx
c000183c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001840:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001844:	21 ca                	and    edx,ecx
c0001846:	52                   	push   edx
c0001847:	50                   	push   eax
c0001848:	e8 a5 fd ff ff       	call   c00015f2 <dlmemalign>
c000184d:	83 c4 1c             	add    esp,0x1c
c0001850:	c3                   	ret    

c0001851 <dlmalloc_trim>:
c0001851:	b8 80 d4 02 c0       	mov    eax,0xc002d480
c0001856:	e8 63 f2 ff ff       	call   c0000abe <malloc_consolidate>
c000185b:	31 c0                	xor    eax,eax
c000185d:	c3                   	ret    

c000185e <dlmalloc_usable_size>:
c000185e:	53                   	push   ebx
c000185f:	31 c0                	xor    eax,eax
c0001861:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001865:	85 c9                	test   ecx,ecx
c0001867:	74 24                	je     c000188d <dlmalloc_usable_size+0x2f>
c0001869:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000186c:	f6 c2 02             	test   dl,0x2
c000186f:	74 08                	je     c0001879 <dlmalloc_usable_size+0x1b>
c0001871:	83 e2 fc             	and    edx,0xfffffffc
c0001874:	8d 42 f8             	lea    eax,[edx-0x8]
c0001877:	eb 14                	jmp    c000188d <dlmalloc_usable_size+0x2f>
c0001879:	89 d3                	mov    ebx,edx
c000187b:	31 c0                	xor    eax,eax
c000187d:	83 e3 fe             	and    ebx,0xfffffffe
c0001880:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001885:	74 06                	je     c000188d <dlmalloc_usable_size+0x2f>
c0001887:	83 e2 fc             	and    edx,0xfffffffc
c000188a:	8d 42 fc             	lea    eax,[edx-0x4]
c000188d:	5b                   	pop    ebx
c000188e:	c3                   	ret    

c000188f <dlmallinfo>:
c000188f:	55                   	push   ebp
c0001890:	57                   	push   edi
c0001891:	56                   	push   esi
c0001892:	53                   	push   ebx
c0001893:	83 ec 08             	sub    esp,0x8
c0001896:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000189a:	83 3d ac d4 02 c0 00 	cmp    DWORD PTR ds:0xc002d4ac,0x0
c00018a1:	75 0a                	jne    c00018ad <dlmallinfo+0x1e>
c00018a3:	b8 80 d4 02 c0       	mov    eax,0xc002d480
c00018a8:	e8 11 f2 ff ff       	call   c0000abe <malloc_consolidate>
c00018ad:	a1 ac d4 02 c0       	mov    eax,ds:0xc002d4ac
c00018b2:	31 ed                	xor    ebp,ebp
c00018b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00018b7:	31 c9                	xor    ecx,ecx
c00018b9:	83 e0 fc             	and    eax,0xfffffffc
c00018bc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00018c0:	31 c0                	xor    eax,eax
c00018c2:	8b 14 85 84 d4 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2b7c]
c00018c9:	85 d2                	test   edx,edx
c00018cb:	74 0e                	je     c00018db <dlmallinfo+0x4c>
c00018cd:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00018d0:	45                   	inc    ebp
c00018d1:	83 e6 fc             	and    esi,0xfffffffc
c00018d4:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00018d7:	01 f1                	add    ecx,esi
c00018d9:	eb ee                	jmp    c00018c9 <dlmallinfo+0x3a>
c00018db:	40                   	inc    eax
c00018dc:	83 f8 0a             	cmp    eax,0xa
c00018df:	75 e1                	jne    c00018c2 <dlmallinfo+0x33>
c00018e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018e5:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00018ec:	8d 14 01             	lea    edx,[ecx+eax*1]
c00018ef:	b8 b4 d4 02 c0       	mov    eax,0xc002d4b4
c00018f4:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00018f7:	39 f0                	cmp    eax,esi
c00018f9:	74 10                	je     c000190b <dlmallinfo+0x7c>
c00018fb:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c00018fe:	ff 04 24             	inc    DWORD PTR [esp]
c0001901:	83 e7 fc             	and    edi,0xfffffffc
c0001904:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001907:	01 fa                	add    edx,edi
c0001909:	eb ec                	jmp    c00018f7 <dlmallinfo+0x68>
c000190b:	83 c0 08             	add    eax,0x8
c000190e:	3d ac d7 02 c0       	cmp    eax,0xc002d7ac
c0001913:	75 df                	jne    c00018f4 <dlmallinfo+0x65>
c0001915:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001918:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000191b:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000191e:	a1 e8 d7 02 c0       	mov    eax,ds:0xc002d7e8
c0001923:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001926:	89 03                	mov    DWORD PTR [ebx],eax
c0001928:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c000192b:	8b 35 d0 d7 02 c0    	mov    esi,DWORD PTR ds:0xc002d7d0
c0001931:	29 d0                	sub    eax,edx
c0001933:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001936:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001939:	8b 35 e4 d7 02 c0    	mov    esi,DWORD PTR ds:0xc002d7e4
c000193f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001943:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001946:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001949:	8b 35 f4 d7 02 c0    	mov    esi,DWORD PTR ds:0xc002d7f4
c000194f:	89 d8                	mov    eax,ebx
c0001951:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001954:	83 c4 08             	add    esp,0x8
c0001957:	5b                   	pop    ebx
c0001958:	5e                   	pop    esi
c0001959:	5f                   	pop    edi
c000195a:	5d                   	pop    ebp
c000195b:	c2 04 00             	ret    0x4

c000195e <dlmalloc_stats>:
c000195e:	83 ec 30             	sub    esp,0x30
c0001961:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001965:	50                   	push   eax
c0001966:	e8 24 ff ff ff       	call   c000188f <dlmallinfo>
c000196b:	83 c4 30             	add    esp,0x30
c000196e:	c3                   	ret    

c000196f <dlmallopt>:
c000196f:	56                   	push   esi
c0001970:	b8 80 d4 02 c0       	mov    eax,0xc002d480
c0001975:	53                   	push   ebx
c0001976:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000197a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000197e:	e8 3b f1 ff ff       	call   c0000abe <malloc_consolidate>
c0001983:	8d 46 04             	lea    eax,[esi+0x4]
c0001986:	83 f8 05             	cmp    eax,0x5
c0001989:	77 67                	ja     c00019f2 <dlmallopt+0x83>
c000198b:	ff 24 85 c4 88 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd773c]
c0001992:	83 fb 50             	cmp    ebx,0x50
c0001995:	77 5b                	ja     c00019f2 <dlmallopt+0x83>
c0001997:	ba 08 00 00 00       	mov    edx,0x8
c000199c:	85 db                	test   ebx,ebx
c000199e:	74 12                	je     c00019b2 <dlmallopt+0x43>
c00019a0:	83 c3 0b             	add    ebx,0xb
c00019a3:	ba 10 00 00 00       	mov    edx,0x10
c00019a8:	83 fb 0f             	cmp    ebx,0xf
c00019ab:	76 05                	jbe    c00019b2 <dlmallopt+0x43>
c00019ad:	89 da                	mov    edx,ebx
c00019af:	83 e2 f8             	and    edx,0xfffffff8
c00019b2:	a1 80 d4 02 c0       	mov    eax,ds:0xc002d480
c00019b7:	83 e0 03             	and    eax,0x3
c00019ba:	09 d0                	or     eax,edx
c00019bc:	a3 80 d4 02 c0       	mov    ds:0xc002d480,eax
c00019c1:	eb 31                	jmp    c00019f4 <dlmallopt+0x85>
c00019c3:	89 1d c4 d7 02 c0    	mov    DWORD PTR ds:0xc002d7c4,ebx
c00019c9:	eb 06                	jmp    c00019d1 <dlmallopt+0x62>
c00019cb:	89 1d c8 d7 02 c0    	mov    DWORD PTR ds:0xc002d7c8,ebx
c00019d1:	be 01 00 00 00       	mov    esi,0x1
c00019d6:	eb 1c                	jmp    c00019f4 <dlmallopt+0x85>
c00019d8:	89 1d cc d7 02 c0    	mov    DWORD PTR ds:0xc002d7cc,ebx
c00019de:	eb f1                	jmp    c00019d1 <dlmallopt+0x62>
c00019e0:	31 f6                	xor    esi,esi
c00019e2:	85 db                	test   ebx,ebx
c00019e4:	75 0e                	jne    c00019f4 <dlmallopt+0x85>
c00019e6:	c7 05 d4 d7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d7d4,0x0
c00019f0:	eb df                	jmp    c00019d1 <dlmallopt+0x62>
c00019f2:	31 f6                	xor    esi,esi
c00019f4:	89 f0                	mov    eax,esi
c00019f6:	5b                   	pop    ebx
c00019f7:	5e                   	pop    esi
c00019f8:	c3                   	ret    

c00019f9 <disk_status>:
c00019f9:	31 c0                	xor    eax,eax
c00019fb:	c3                   	ret    

c00019fc <disk_initialize>:
c00019fc:	31 c0                	xor    eax,eax
c00019fe:	c3                   	ret    

c00019ff <disk_read>:
c00019ff:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a04:	0f b6 04 85 40 ef 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd10c0]
c0001a0c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a10:	e9 51 e8 01 00       	jmp    c0020266 <fatWrapperReadDisk>

c0001a15 <disk_write>:
c0001a15:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a1a:	0f b6 04 85 40 ef 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd10c0]
c0001a22:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a26:	e9 82 e8 01 00       	jmp    c00202ad <fatWrapperWriteDisk>

c0001a2b <disk_ioctl>:
c0001a2b:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001a30:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001a34:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a39:	0f b6 04 85 40 ef 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd10c0]
c0001a41:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a45:	e9 aa e8 01 00       	jmp    c00202f4 <fatWrapperIoctl>

c0001a4a <ld_word>:
c0001a4a:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a4e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a51:	c1 e2 08             	shl    edx,0x8
c0001a54:	09 d0                	or     eax,edx
c0001a56:	c3                   	ret    

c0001a57 <ld_dword>:
c0001a57:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001a5b:	89 d1                	mov    ecx,edx
c0001a5d:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a61:	c1 e1 08             	shl    ecx,0x8
c0001a64:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a67:	09 ca                	or     edx,ecx
c0001a69:	c1 e2 08             	shl    edx,0x8
c0001a6c:	09 d0                	or     eax,edx
c0001a6e:	c3                   	ret    

c0001a6f <ld_qword>:
c0001a6f:	57                   	push   edi
c0001a70:	56                   	push   esi
c0001a71:	53                   	push   ebx
c0001a72:	31 db                	xor    ebx,ebx
c0001a74:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001a77:	89 df                	mov    edi,ebx
c0001a79:	89 ce                	mov    esi,ecx
c0001a7b:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001a7f:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a83:	c1 e6 08             	shl    esi,0x8
c0001a86:	09 f2                	or     edx,esi
c0001a88:	89 d6                	mov    esi,edx
c0001a8a:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001a8e:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a92:	c1 e6 08             	shl    esi,0x8
c0001a95:	09 f2                	or     edx,esi
c0001a97:	89 d6                	mov    esi,edx
c0001a99:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a9d:	0f a4 f7 08          	shld   edi,esi,0x8
c0001aa1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001aa4:	c1 e6 08             	shl    esi,0x8
c0001aa7:	89 fb                	mov    ebx,edi
c0001aa9:	09 f2                	or     edx,esi
c0001aab:	89 d1                	mov    ecx,edx
c0001aad:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001ab1:	c1 e1 08             	shl    ecx,0x8
c0001ab4:	89 da                	mov    edx,ebx
c0001ab6:	09 c8                	or     eax,ecx
c0001ab8:	5b                   	pop    ebx
c0001ab9:	5e                   	pop    esi
c0001aba:	5f                   	pop    edi
c0001abb:	c3                   	ret    

c0001abc <st_word>:
c0001abc:	66 89 10             	mov    WORD PTR [eax],dx
c0001abf:	c3                   	ret    

c0001ac0 <st_dword>:
c0001ac0:	89 10                	mov    DWORD PTR [eax],edx
c0001ac2:	c3                   	ret    

c0001ac3 <st_qword>:
c0001ac3:	89 10                	mov    DWORD PTR [eax],edx
c0001ac5:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001ac8:	c3                   	ret    

c0001ac9 <mem_cpy>:
c0001ac9:	85 c9                	test   ecx,ecx
c0001acb:	74 10                	je     c0001add <mem_cpy+0x14>
c0001acd:	57                   	push   edi
c0001ace:	01 c1                	add    ecx,eax
c0001ad0:	56                   	push   esi
c0001ad1:	89 c7                	mov    edi,eax
c0001ad3:	89 d6                	mov    esi,edx
c0001ad5:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ad6:	39 f9                	cmp    ecx,edi
c0001ad8:	75 fb                	jne    c0001ad5 <mem_cpy+0xc>
c0001ada:	5e                   	pop    esi
c0001adb:	5f                   	pop    edi
c0001adc:	c3                   	ret    
c0001add:	c3                   	ret    

c0001ade <mem_set>:
c0001ade:	01 c1                	add    ecx,eax
c0001ae0:	40                   	inc    eax
c0001ae1:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001ae4:	39 c8                	cmp    eax,ecx
c0001ae6:	75 f8                	jne    c0001ae0 <mem_set+0x2>
c0001ae8:	c3                   	ret    

c0001ae9 <mem_cmp>:
c0001ae9:	57                   	push   edi
c0001aea:	56                   	push   esi
c0001aeb:	89 c6                	mov    esi,eax
c0001aed:	53                   	push   ebx
c0001aee:	46                   	inc    esi
c0001aef:	42                   	inc    edx
c0001af0:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001af4:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001af8:	29 fb                	sub    ebx,edi
c0001afa:	89 cf                	mov    edi,ecx
c0001afc:	29 f7                	sub    edi,esi
c0001afe:	01 c7                	add    edi,eax
c0001b00:	74 04                	je     c0001b06 <mem_cmp+0x1d>
c0001b02:	85 db                	test   ebx,ebx
c0001b04:	74 e8                	je     c0001aee <mem_cmp+0x5>
c0001b06:	89 d8                	mov    eax,ebx
c0001b08:	5b                   	pop    ebx
c0001b09:	5e                   	pop    esi
c0001b0a:	5f                   	pop    edi
c0001b0b:	c3                   	ret    

c0001b0c <chk_chr>:
c0001b0c:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001b0f:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001b12:	74 07                	je     c0001b1b <chk_chr+0xf>
c0001b14:	39 d1                	cmp    ecx,edx
c0001b16:	74 03                	je     c0001b1b <chk_chr+0xf>
c0001b18:	40                   	inc    eax
c0001b19:	eb f1                	jmp    c0001b0c <chk_chr>
c0001b1b:	89 c8                	mov    eax,ecx
c0001b1d:	c3                   	ret    

c0001b1e <dbc_1st>:
c0001b1e:	31 c0                	xor    eax,eax
c0001b20:	c3                   	ret    

c0001b21 <dbc_2nd>:
c0001b21:	31 c0                	xor    eax,eax
c0001b23:	c3                   	ret    

c0001b24 <tchar2uni>:
c0001b24:	57                   	push   edi
c0001b25:	89 c7                	mov    edi,eax
c0001b27:	56                   	push   esi
c0001b28:	53                   	push   ebx
c0001b29:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001b2b:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001b2d:	8d 73 01             	lea    esi,[ebx+0x1]
c0001b30:	84 c9                	test   cl,cl
c0001b32:	78 0a                	js     c0001b3e <tchar2uni+0x1a>
c0001b34:	0f b6 d1             	movzx  edx,cl
c0001b37:	89 f3                	mov    ebx,esi
c0001b39:	e9 9f 00 00 00       	jmp    c0001bdd <tchar2uni+0xb9>
c0001b3e:	88 ca                	mov    dl,cl
c0001b40:	83 e2 e0             	and    edx,0xffffffe0
c0001b43:	80 fa c0             	cmp    dl,0xc0
c0001b46:	75 0c                	jne    c0001b54 <tchar2uni+0x30>
c0001b48:	89 ca                	mov    edx,ecx
c0001b4a:	b9 01 00 00 00       	mov    ecx,0x1
c0001b4f:	83 e2 1f             	and    edx,0x1f
c0001b52:	eb 2e                	jmp    c0001b82 <tchar2uni+0x5e>
c0001b54:	88 ca                	mov    dl,cl
c0001b56:	83 e2 f0             	and    edx,0xfffffff0
c0001b59:	80 fa e0             	cmp    dl,0xe0
c0001b5c:	75 0c                	jne    c0001b6a <tchar2uni+0x46>
c0001b5e:	89 ca                	mov    edx,ecx
c0001b60:	b9 02 00 00 00       	mov    ecx,0x2
c0001b65:	83 e2 0f             	and    edx,0xf
c0001b68:	eb 18                	jmp    c0001b82 <tchar2uni+0x5e>
c0001b6a:	88 ca                	mov    dl,cl
c0001b6c:	83 e2 f8             	and    edx,0xfffffff8
c0001b6f:	88 d0                	mov    al,dl
c0001b71:	83 ca ff             	or     edx,0xffffffff
c0001b74:	3c f0                	cmp    al,0xf0
c0001b76:	75 6c                	jne    c0001be4 <tchar2uni+0xc0>
c0001b78:	89 ca                	mov    edx,ecx
c0001b7a:	b9 03 00 00 00       	mov    ecx,0x3
c0001b7f:	83 e2 07             	and    edx,0x7
c0001b82:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001b86:	46                   	inc    esi
c0001b87:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001b8a:	88 c8                	mov    al,cl
c0001b8c:	83 e0 c0             	and    eax,0xffffffc0
c0001b8f:	3c 80                	cmp    al,0x80
c0001b91:	75 4e                	jne    c0001be1 <tchar2uni+0xbd>
c0001b93:	c1 e2 06             	shl    edx,0x6
c0001b96:	83 e1 3f             	and    ecx,0x3f
c0001b99:	09 ca                	or     edx,ecx
c0001b9b:	39 de                	cmp    esi,ebx
c0001b9d:	75 e7                	jne    c0001b86 <tchar2uni+0x62>
c0001b9f:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001ba2:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001ba8:	77 37                	ja     c0001be1 <tchar2uni+0xbd>
c0001baa:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001bb0:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001bb6:	76 29                	jbe    c0001be1 <tchar2uni+0xbd>
c0001bb8:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001bbe:	76 1d                	jbe    c0001bdd <tchar2uni+0xb9>
c0001bc0:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001bc6:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001bcc:	c1 e1 06             	shl    ecx,0x6
c0001bcf:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001bd5:	09 ca                	or     edx,ecx
c0001bd7:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001bdd:	89 1f                	mov    DWORD PTR [edi],ebx
c0001bdf:	eb 03                	jmp    c0001be4 <tchar2uni+0xc0>
c0001be1:	83 ca ff             	or     edx,0xffffffff
c0001be4:	5b                   	pop    ebx
c0001be5:	89 d0                	mov    eax,edx
c0001be7:	5e                   	pop    esi
c0001be8:	5f                   	pop    edi
c0001be9:	c3                   	ret    

c0001bea <put_utf>:
c0001bea:	53                   	push   ebx
c0001beb:	83 f8 7f             	cmp    eax,0x7f
c0001bee:	89 c3                	mov    ebx,eax
c0001bf0:	b0 00                	mov    al,0x0
c0001bf2:	77 11                	ja     c0001c05 <put_utf+0x1b>
c0001bf4:	85 c9                	test   ecx,ecx
c0001bf6:	0f 84 e5 00 00 00    	je     c0001ce1 <put_utf+0xf7>
c0001bfc:	88 1a                	mov    BYTE PTR [edx],bl
c0001bfe:	b0 01                	mov    al,0x1
c0001c00:	e9 dc 00 00 00       	jmp    c0001ce1 <put_utf+0xf7>
c0001c05:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001c0b:	77 23                	ja     c0001c30 <put_utf+0x46>
c0001c0d:	83 f9 01             	cmp    ecx,0x1
c0001c10:	0f 86 cb 00 00 00    	jbe    c0001ce1 <put_utf+0xf7>
c0001c16:	89 d8                	mov    eax,ebx
c0001c18:	83 e3 3f             	and    ebx,0x3f
c0001c1b:	c1 e8 06             	shr    eax,0x6
c0001c1e:	83 cb 80             	or     ebx,0xffffff80
c0001c21:	83 c8 c0             	or     eax,0xffffffc0
c0001c24:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001c27:	88 02                	mov    BYTE PTR [edx],al
c0001c29:	b0 02                	mov    al,0x2
c0001c2b:	e9 b1 00 00 00       	jmp    c0001ce1 <put_utf+0xf7>
c0001c30:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001c36:	77 40                	ja     c0001c78 <put_utf+0x8e>
c0001c38:	83 f9 02             	cmp    ecx,0x2
c0001c3b:	0f 86 a0 00 00 00    	jbe    c0001ce1 <put_utf+0xf7>
c0001c41:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001c47:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001c4d:	0f 86 8e 00 00 00    	jbe    c0001ce1 <put_utf+0xf7>
c0001c53:	89 d8                	mov    eax,ebx
c0001c55:	c1 e8 0c             	shr    eax,0xc
c0001c58:	83 c8 e0             	or     eax,0xffffffe0
c0001c5b:	88 02                	mov    BYTE PTR [edx],al
c0001c5d:	89 d8                	mov    eax,ebx
c0001c5f:	83 e3 3f             	and    ebx,0x3f
c0001c62:	c1 e8 06             	shr    eax,0x6
c0001c65:	83 cb 80             	or     ebx,0xffffff80
c0001c68:	83 e0 3f             	and    eax,0x3f
c0001c6b:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001c6e:	83 c8 80             	or     eax,0xffffff80
c0001c71:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c74:	b0 03                	mov    al,0x3
c0001c76:	eb 69                	jmp    c0001ce1 <put_utf+0xf7>
c0001c78:	83 f9 03             	cmp    ecx,0x3
c0001c7b:	76 64                	jbe    c0001ce1 <put_utf+0xf7>
c0001c7d:	89 d9                	mov    ecx,ebx
c0001c7f:	0f b7 c3             	movzx  eax,bx
c0001c82:	66 31 c9             	xor    cx,cx
c0001c85:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001c8b:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001c91:	c1 e9 06             	shr    ecx,0x6
c0001c94:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001c9a:	77 43                	ja     c0001cdf <put_utf+0xf5>
c0001c9c:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001ca2:	77 3b                	ja     c0001cdf <put_utf+0xf5>
c0001ca4:	09 cb                	or     ebx,ecx
c0001ca6:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001cac:	89 d8                	mov    eax,ebx
c0001cae:	c1 e8 12             	shr    eax,0x12
c0001cb1:	83 c8 f0             	or     eax,0xfffffff0
c0001cb4:	88 02                	mov    BYTE PTR [edx],al
c0001cb6:	89 d8                	mov    eax,ebx
c0001cb8:	c1 e8 0c             	shr    eax,0xc
c0001cbb:	83 e0 3f             	and    eax,0x3f
c0001cbe:	83 c8 80             	or     eax,0xffffff80
c0001cc1:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001cc4:	89 d8                	mov    eax,ebx
c0001cc6:	83 e3 3f             	and    ebx,0x3f
c0001cc9:	c1 e8 06             	shr    eax,0x6
c0001ccc:	83 cb 80             	or     ebx,0xffffff80
c0001ccf:	83 e0 3f             	and    eax,0x3f
c0001cd2:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001cd5:	83 c8 80             	or     eax,0xffffff80
c0001cd8:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001cdb:	b0 04                	mov    al,0x4
c0001cdd:	eb 02                	jmp    c0001ce1 <put_utf+0xf7>
c0001cdf:	31 c0                	xor    eax,eax
c0001ce1:	5b                   	pop    ebx
c0001ce2:	c3                   	ret    

c0001ce3 <clst2sect>:
c0001ce3:	89 c1                	mov    ecx,eax
c0001ce5:	83 ea 02             	sub    edx,0x2
c0001ce8:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001ceb:	83 e8 02             	sub    eax,0x2
c0001cee:	39 d0                	cmp    eax,edx
c0001cf0:	76 0d                	jbe    c0001cff <clst2sect+0x1c>
c0001cf2:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001cf6:	f7 e2                	mul    edx
c0001cf8:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001cfb:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001cfe:	c3                   	ret    
c0001cff:	31 c0                	xor    eax,eax
c0001d01:	31 d2                	xor    edx,edx
c0001d03:	c3                   	ret    

c0001d04 <clmt_clust>:
c0001d04:	57                   	push   edi
c0001d05:	89 cf                	mov    edi,ecx
c0001d07:	56                   	push   esi
c0001d08:	89 d6                	mov    esi,edx
c0001d0a:	53                   	push   ebx
c0001d0b:	0f ac fe 09          	shrd   esi,edi,0x9
c0001d0f:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001d12:	89 f2                	mov    edx,esi
c0001d14:	8b 00                	mov    eax,DWORD PTR [eax]
c0001d16:	c1 ef 09             	shr    edi,0x9
c0001d19:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001d1d:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001d20:	89 f9                	mov    ecx,edi
c0001d22:	31 ff                	xor    edi,edi
c0001d24:	57                   	push   edi
c0001d25:	56                   	push   esi
c0001d26:	51                   	push   ecx
c0001d27:	52                   	push   edx
c0001d28:	e8 1f 42 02 00       	call   c0025f4c <__udivdi3>
c0001d2d:	83 c4 10             	add    esp,0x10
c0001d30:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001d32:	85 d2                	test   edx,edx
c0001d34:	74 10                	je     c0001d46 <clmt_clust+0x42>
c0001d36:	39 d0                	cmp    eax,edx
c0001d38:	72 07                	jb     c0001d41 <clmt_clust+0x3d>
c0001d3a:	29 d0                	sub    eax,edx
c0001d3c:	83 c3 08             	add    ebx,0x8
c0001d3f:	eb ef                	jmp    c0001d30 <clmt_clust+0x2c>
c0001d41:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001d44:	89 c2                	mov    edx,eax
c0001d46:	5b                   	pop    ebx
c0001d47:	89 d0                	mov    eax,edx
c0001d49:	5e                   	pop    esi
c0001d4a:	5f                   	pop    edi
c0001d4b:	c3                   	ret    

c0001d4c <pick_lfn>:
c0001d4c:	55                   	push   ebp
c0001d4d:	57                   	push   edi
c0001d4e:	56                   	push   esi
c0001d4f:	89 d6                	mov    esi,edx
c0001d51:	53                   	push   ebx
c0001d52:	89 c3                	mov    ebx,eax
c0001d54:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001d57:	e8 ee fc ff ff       	call   c0001a4a <ld_word>
c0001d5c:	66 85 c0             	test   ax,ax
c0001d5f:	74 04                	je     c0001d65 <pick_lfn+0x19>
c0001d61:	31 c0                	xor    eax,eax
c0001d63:	eb 5c                	jmp    c0001dc1 <pick_lfn+0x75>
c0001d65:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001d68:	bd 01 00 00 00       	mov    ebp,0x1
c0001d6d:	83 e1 bf             	and    ecx,0xffffffbf
c0001d70:	31 ff                	xor    edi,edi
c0001d72:	49                   	dec    ecx
c0001d73:	6b c9 0d             	imul   ecx,ecx,0xd
c0001d76:	0f b6 87 e0 89 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd7620]
c0001d7d:	01 f0                	add    eax,esi
c0001d7f:	e8 c6 fc ff ff       	call   c0001a4a <ld_word>
c0001d84:	66 85 ed             	test   bp,bp
c0001d87:	74 11                	je     c0001d9a <pick_lfn+0x4e>
c0001d89:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001d8f:	77 d0                	ja     c0001d61 <pick_lfn+0x15>
c0001d91:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001d95:	89 c5                	mov    ebp,eax
c0001d97:	41                   	inc    ecx
c0001d98:	eb 04                	jmp    c0001d9e <pick_lfn+0x52>
c0001d9a:	66 40                	inc    ax
c0001d9c:	75 c3                	jne    c0001d61 <pick_lfn+0x15>
c0001d9e:	47                   	inc    edi
c0001d9f:	83 ff 0d             	cmp    edi,0xd
c0001da2:	75 d2                	jne    c0001d76 <pick_lfn+0x2a>
c0001da4:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001da7:	74 13                	je     c0001dbc <pick_lfn+0x70>
c0001da9:	66 85 ed             	test   bp,bp
c0001dac:	74 0e                	je     c0001dbc <pick_lfn+0x70>
c0001dae:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001db4:	77 ab                	ja     c0001d61 <pick_lfn+0x15>
c0001db6:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001dbc:	b8 01 00 00 00       	mov    eax,0x1
c0001dc1:	5b                   	pop    ebx
c0001dc2:	5e                   	pop    esi
c0001dc3:	5f                   	pop    edi
c0001dc4:	5d                   	pop    ebp
c0001dc5:	c3                   	ret    

c0001dc6 <put_lfn>:
c0001dc6:	55                   	push   ebp
c0001dc7:	31 ed                	xor    ebp,ebp
c0001dc9:	57                   	push   edi
c0001dca:	89 d7                	mov    edi,edx
c0001dcc:	56                   	push   esi
c0001dcd:	31 f6                	xor    esi,esi
c0001dcf:	53                   	push   ebx
c0001dd0:	83 ec 08             	sub    esp,0x8
c0001dd3:	89 04 24             	mov    DWORD PTR [esp],eax
c0001dd6:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001dda:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001dde:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001de4:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001de7:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001dea:	31 d2                	xor    edx,edx
c0001dec:	e8 cb fc ff ff       	call   c0001abc <st_word>
c0001df1:	0f b6 d9             	movzx  ebx,cl
c0001df4:	4b                   	dec    ebx
c0001df5:	6b db 0d             	imul   ebx,ebx,0xd
c0001df8:	66 83 fe ff          	cmp    si,0xffff
c0001dfc:	74 08                	je     c0001e06 <put_lfn+0x40>
c0001dfe:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001e01:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001e05:	43                   	inc    ebx
c0001e06:	0f b6 85 e0 89 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd7620]
c0001e0d:	0f b7 d6             	movzx  edx,si
c0001e10:	01 f8                	add    eax,edi
c0001e12:	e8 a5 fc ff ff       	call   c0001abc <st_word>
c0001e17:	66 85 f6             	test   si,si
c0001e1a:	75 03                	jne    c0001e1f <put_lfn+0x59>
c0001e1c:	83 ce ff             	or     esi,0xffffffff
c0001e1f:	45                   	inc    ebp
c0001e20:	83 fd 0d             	cmp    ebp,0xd
c0001e23:	75 d3                	jne    c0001df8 <put_lfn+0x32>
c0001e25:	66 46                	inc    si
c0001e27:	74 0a                	je     c0001e33 <put_lfn+0x6d>
c0001e29:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001e2c:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001e31:	75 09                	jne    c0001e3c <put_lfn+0x76>
c0001e33:	88 c8                	mov    al,cl
c0001e35:	83 c8 40             	or     eax,0x40
c0001e38:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001e3c:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001e40:	88 07                	mov    BYTE PTR [edi],al
c0001e42:	83 c4 08             	add    esp,0x8
c0001e45:	5b                   	pop    ebx
c0001e46:	5e                   	pop    esi
c0001e47:	5f                   	pop    edi
c0001e48:	5d                   	pop    ebp
c0001e49:	c3                   	ret    

c0001e4a <gen_numname>:
c0001e4a:	57                   	push   edi
c0001e4b:	89 cf                	mov    edi,ecx
c0001e4d:	56                   	push   esi
c0001e4e:	b9 0b 00 00 00       	mov    ecx,0xb
c0001e53:	53                   	push   ebx
c0001e54:	89 c6                	mov    esi,eax
c0001e56:	83 ec 10             	sub    esp,0x10
c0001e59:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001e5d:	e8 67 fc ff ff       	call   c0001ac9 <mem_cpy>
c0001e62:	83 fb 05             	cmp    ebx,0x5
c0001e65:	76 2d                	jbe    c0001e94 <gen_numname+0x4a>
c0001e67:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001e6a:	66 85 c0             	test   ax,ax
c0001e6d:	74 25                	je     c0001e94 <gen_numname+0x4a>
c0001e6f:	83 c7 02             	add    edi,0x2
c0001e72:	ba 10 00 00 00       	mov    edx,0x10
c0001e77:	01 db                	add    ebx,ebx
c0001e79:	89 c1                	mov    ecx,eax
c0001e7b:	66 d1 e8             	shr    ax,1
c0001e7e:	83 e1 01             	and    ecx,0x1
c0001e81:	01 cb                	add    ebx,ecx
c0001e83:	0f ba e3 10          	bt     ebx,0x10
c0001e87:	73 06                	jae    c0001e8f <gen_numname+0x45>
c0001e89:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001e8f:	4a                   	dec    edx
c0001e90:	75 e5                	jne    c0001e77 <gen_numname+0x2d>
c0001e92:	eb d3                	jmp    c0001e67 <gen_numname+0x1d>
c0001e94:	b8 07 00 00 00       	mov    eax,0x7
c0001e99:	88 d9                	mov    cl,bl
c0001e9b:	83 e1 0f             	and    ecx,0xf
c0001e9e:	8d 51 30             	lea    edx,[ecx+0x30]
c0001ea1:	80 fa 39             	cmp    dl,0x39
c0001ea4:	76 03                	jbe    c0001ea9 <gen_numname+0x5f>
c0001ea6:	8d 51 37             	lea    edx,[ecx+0x37]
c0001ea9:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001eac:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001eb0:	89 da                	mov    edx,ebx
c0001eb2:	c1 ea 04             	shr    edx,0x4
c0001eb5:	83 fb 0f             	cmp    ebx,0xf
c0001eb8:	76 06                	jbe    c0001ec0 <gen_numname+0x76>
c0001eba:	89 c8                	mov    eax,ecx
c0001ebc:	89 d3                	mov    ebx,edx
c0001ebe:	eb d9                	jmp    c0001e99 <gen_numname+0x4f>
c0001ec0:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001ec5:	31 d2                	xor    edx,edx
c0001ec7:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001eca:	8d 04 16             	lea    eax,[esi+edx*1]
c0001ecd:	39 ca                	cmp    edx,ecx
c0001ecf:	73 18                	jae    c0001ee9 <gen_numname+0x9f>
c0001ed1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001ed4:	3c 20                	cmp    al,0x20
c0001ed6:	74 11                	je     c0001ee9 <gen_numname+0x9f>
c0001ed8:	e8 41 fc ff ff       	call   c0001b1e <dbc_1st>
c0001edd:	85 c0                	test   eax,eax
c0001edf:	74 05                	je     c0001ee6 <gen_numname+0x9c>
c0001ee1:	39 d3                	cmp    ebx,edx
c0001ee3:	74 04                	je     c0001ee9 <gen_numname+0x9f>
c0001ee5:	42                   	inc    edx
c0001ee6:	42                   	inc    edx
c0001ee7:	eb e1                	jmp    c0001eca <gen_numname+0x80>
c0001ee9:	b0 20                	mov    al,0x20
c0001eeb:	83 f9 07             	cmp    ecx,0x7
c0001eee:	77 05                	ja     c0001ef5 <gen_numname+0xab>
c0001ef0:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001ef4:	41                   	inc    ecx
c0001ef5:	42                   	inc    edx
c0001ef6:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001efa:	83 fa 07             	cmp    edx,0x7
c0001efd:	76 ea                	jbe    c0001ee9 <gen_numname+0x9f>
c0001eff:	83 c4 10             	add    esp,0x10
c0001f02:	5b                   	pop    ebx
c0001f03:	5e                   	pop    esi
c0001f04:	5f                   	pop    edi
c0001f05:	c3                   	ret    

c0001f06 <sum_sfn>:
c0001f06:	31 c9                	xor    ecx,ecx
c0001f08:	31 d2                	xor    edx,edx
c0001f0a:	d0 ca                	ror    dl,1
c0001f0c:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001f0f:	41                   	inc    ecx
c0001f10:	83 f9 0b             	cmp    ecx,0xb
c0001f13:	75 f5                	jne    c0001f0a <sum_sfn+0x4>
c0001f15:	88 d0                	mov    al,dl
c0001f17:	c3                   	ret    

c0001f18 <xdir_sum>:
c0001f18:	56                   	push   esi
c0001f19:	31 c9                	xor    ecx,ecx
c0001f1b:	53                   	push   ebx
c0001f1c:	31 d2                	xor    edx,edx
c0001f1e:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0001f22:	43                   	inc    ebx
c0001f23:	c1 e3 05             	shl    ebx,0x5
c0001f26:	83 fa 02             	cmp    edx,0x2
c0001f29:	74 0b                	je     c0001f36 <xdir_sum+0x1e>
c0001f2b:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0001f2f:	66 d1 c9             	ror    cx,1
c0001f32:	01 f1                	add    ecx,esi
c0001f34:	eb 05                	jmp    c0001f3b <xdir_sum+0x23>
c0001f36:	ba 03 00 00 00       	mov    edx,0x3
c0001f3b:	42                   	inc    edx
c0001f3c:	39 d3                	cmp    ebx,edx
c0001f3e:	77 e6                	ja     c0001f26 <xdir_sum+0xe>
c0001f40:	89 c8                	mov    eax,ecx
c0001f42:	5b                   	pop    ebx
c0001f43:	5e                   	pop    esi
c0001f44:	c3                   	ret    

c0001f45 <xsum32>:
c0001f45:	d1 ca                	ror    edx,1
c0001f47:	0f b6 c0             	movzx  eax,al
c0001f4a:	01 d0                	add    eax,edx
c0001f4c:	c3                   	ret    

c0001f4d <get_xfileinfo>:
c0001f4d:	55                   	push   ebp
c0001f4e:	31 c9                	xor    ecx,ecx
c0001f50:	57                   	push   edi
c0001f51:	bd 40 00 00 00       	mov    ebp,0x40
c0001f56:	56                   	push   esi
c0001f57:	31 ff                	xor    edi,edi
c0001f59:	53                   	push   ebx
c0001f5a:	89 c6                	mov    esi,eax
c0001f5c:	83 ec 0c             	sub    esp,0xc
c0001f5f:	89 d3                	mov    ebx,edx
c0001f61:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0001f68:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0001f6c:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0001f6f:	76 6d                	jbe    c0001fde <get_xfileinfo+0x91>
c0001f71:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0001f77:	76 0b                	jbe    c0001f84 <get_xfileinfo+0x37>
c0001f79:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0001f7d:	bf 01 00 00 00       	mov    edi,0x1
c0001f82:	eb 63                	jmp    c0001fe7 <get_xfileinfo+0x9a>
c0001f84:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0001f8a:	75 03                	jne    c0001f8f <get_xfileinfo+0x42>
c0001f8c:	83 c5 02             	add    ebp,0x2
c0001f8f:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0001f92:	83 c5 02             	add    ebp,0x2
c0001f95:	e8 b0 fa ff ff       	call   c0001a4a <ld_word>
c0001f9a:	ff 04 24             	inc    DWORD PTR [esp]
c0001f9d:	66 85 c9             	test   cx,cx
c0001fa0:	75 0d                	jne    c0001faf <get_xfileinfo+0x62>
c0001fa2:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0001fa8:	66 81 fa ff 07       	cmp    dx,0x7ff
c0001fad:	76 2b                	jbe    c0001fda <get_xfileinfo+0x8d>
c0001faf:	c1 e1 10             	shl    ecx,0x10
c0001fb2:	ba ff 00 00 00       	mov    edx,0xff
c0001fb7:	0f b7 c0             	movzx  eax,ax
c0001fba:	29 fa                	sub    edx,edi
c0001fbc:	09 c8                	or     eax,ecx
c0001fbe:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001fc2:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0001fc6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001fca:	e8 1b fc ff ff       	call   c0001bea <put_utf>
c0001fcf:	84 c0                	test   al,al
c0001fd1:	74 a6                	je     c0001f79 <get_xfileinfo+0x2c>
c0001fd3:	0f b6 c0             	movzx  eax,al
c0001fd6:	01 c7                	add    edi,eax
c0001fd8:	31 c0                	xor    eax,eax
c0001fda:	89 c1                	mov    ecx,eax
c0001fdc:	eb 8a                	jmp    c0001f68 <get_xfileinfo+0x1b>
c0001fde:	85 ff                	test   edi,edi
c0001fe0:	74 97                	je     c0001f79 <get_xfileinfo+0x2c>
c0001fe2:	66 85 c9             	test   cx,cx
c0001fe5:	75 92                	jne    c0001f79 <get_xfileinfo+0x2c>
c0001fe7:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0001fec:	31 c0                	xor    eax,eax
c0001fee:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0001ff2:	31 d2                	xor    edx,edx
c0001ff4:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0001ff7:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0001ffa:	80 e1 10             	and    cl,0x10
c0001ffd:	75 08                	jne    c0002007 <get_xfileinfo+0xba>
c0001fff:	8d 46 38             	lea    eax,[esi+0x38]
c0002002:	e8 68 fa ff ff       	call   c0001a6f <ld_qword>
c0002007:	89 03                	mov    DWORD PTR [ebx],eax
c0002009:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000200c:	8d 46 0c             	lea    eax,[esi+0xc]
c000200f:	e8 36 fa ff ff       	call   c0001a4a <ld_word>
c0002014:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002018:	8d 46 0e             	lea    eax,[esi+0xe]
c000201b:	e8 2a fa ff ff       	call   c0001a4a <ld_word>
c0002020:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002024:	83 c4 0c             	add    esp,0xc
c0002027:	5b                   	pop    ebx
c0002028:	5e                   	pop    esi
c0002029:	5f                   	pop    edi
c000202a:	5d                   	pop    ebp
c000202b:	c3                   	ret    

c000202c <get_ldnumber>:
c000202c:	8b 10                	mov    edx,DWORD PTR [eax]
c000202e:	85 d2                	test   edx,edx
c0002030:	74 14                	je     c0002046 <get_ldnumber+0x1a>
c0002032:	56                   	push   esi
c0002033:	53                   	push   ebx
c0002034:	89 d3                	mov    ebx,edx
c0002036:	43                   	inc    ebx
c0002037:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000203a:	80 f9 1f             	cmp    cl,0x1f
c000203d:	76 0d                	jbe    c000204c <get_ldnumber+0x20>
c000203f:	80 f9 3a             	cmp    cl,0x3a
c0002042:	75 f2                	jne    c0002036 <get_ldnumber+0xa>
c0002044:	eb 0a                	jmp    c0002050 <get_ldnumber+0x24>
c0002046:	83 c9 ff             	or     ecx,0xffffffff
c0002049:	89 c8                	mov    eax,ecx
c000204b:	c3                   	ret    
c000204c:	31 c9                	xor    ecx,ecx
c000204e:	eb 24                	jmp    c0002074 <get_ldnumber+0x48>
c0002050:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002053:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002056:	80 f9 09             	cmp    cl,0x9
c0002059:	77 16                	ja     c0002071 <get_ldnumber+0x45>
c000205b:	83 c2 02             	add    edx,0x2
c000205e:	83 c9 ff             	or     ecx,0xffffffff
c0002061:	39 d3                	cmp    ebx,edx
c0002063:	75 0f                	jne    c0002074 <get_ldnumber+0x48>
c0002065:	89 f2                	mov    edx,esi
c0002067:	89 18                	mov    DWORD PTR [eax],ebx
c0002069:	0f be ca             	movsx  ecx,dl
c000206c:	83 e9 30             	sub    ecx,0x30
c000206f:	eb 03                	jmp    c0002074 <get_ldnumber+0x48>
c0002071:	83 c9 ff             	or     ecx,0xffffffff
c0002074:	89 c8                	mov    eax,ecx
c0002076:	5b                   	pop    ebx
c0002077:	5e                   	pop    esi
c0002078:	c3                   	ret    

c0002079 <crc32>:
c0002079:	56                   	push   esi
c000207a:	89 d6                	mov    esi,edx
c000207c:	53                   	push   ebx
c000207d:	b2 01                	mov    dl,0x1
c000207f:	bb 08 00 00 00       	mov    ebx,0x8
c0002084:	89 f1                	mov    ecx,esi
c0002086:	84 d1                	test   cl,dl
c0002088:	0f 95 c1             	setne  cl
c000208b:	0f b6 c9             	movzx  ecx,cl
c000208e:	31 c1                	xor    ecx,eax
c0002090:	89 c8                	mov    eax,ecx
c0002092:	d1 e8                	shr    eax,1
c0002094:	80 e1 01             	and    cl,0x1
c0002097:	74 05                	je     c000209e <crc32+0x25>
c0002099:	35 20 83 b8 ed       	xor    eax,0xedb88320
c000209e:	d1 e2                	shl    edx,1
c00020a0:	4b                   	dec    ebx
c00020a1:	75 e1                	jne    c0002084 <crc32+0xb>
c00020a3:	5b                   	pop    ebx
c00020a4:	5e                   	pop    esi
c00020a5:	c3                   	ret    

c00020a6 <test_gpt_header>:
c00020a6:	55                   	push   ebp
c00020a7:	b9 10 00 00 00       	mov    ecx,0x10
c00020ac:	57                   	push   edi
c00020ad:	ba e0 88 02 c0       	mov    edx,0xc00288e0
c00020b2:	56                   	push   esi
c00020b3:	31 ff                	xor    edi,edi
c00020b5:	53                   	push   ebx
c00020b6:	89 c3                	mov    ebx,eax
c00020b8:	e8 2c fa ff ff       	call   c0001ae9 <mem_cmp>
c00020bd:	85 c0                	test   eax,eax
c00020bf:	75 55                	jne    c0002116 <test_gpt_header+0x70>
c00020c1:	89 c7                	mov    edi,eax
c00020c3:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00020c8:	83 ce ff             	or     esi,0xffffffff
c00020cb:	31 d2                	xor    edx,edx
c00020cd:	83 fd 03             	cmp    ebp,0x3
c00020d0:	76 05                	jbe    c00020d7 <test_gpt_header+0x31>
c00020d2:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00020d7:	89 f0                	mov    eax,esi
c00020d9:	45                   	inc    ebp
c00020da:	e8 9a ff ff ff       	call   c0002079 <crc32>
c00020df:	83 fd 4c             	cmp    ebp,0x4c
c00020e2:	89 c6                	mov    esi,eax
c00020e4:	75 e5                	jne    c00020cb <test_gpt_header+0x25>
c00020e6:	8d 43 10             	lea    eax,[ebx+0x10]
c00020e9:	f7 d6                	not    esi
c00020eb:	e8 67 f9 ff ff       	call   c0001a57 <ld_dword>
c00020f0:	39 c6                	cmp    esi,eax
c00020f2:	75 22                	jne    c0002116 <test_gpt_header+0x70>
c00020f4:	8d 43 54             	lea    eax,[ebx+0x54]
c00020f7:	e8 5b f9 ff ff       	call   c0001a57 <ld_dword>
c00020fc:	83 c0 80             	add    eax,0xffffff80
c00020ff:	75 15                	jne    c0002116 <test_gpt_header+0x70>
c0002101:	8d 43 50             	lea    eax,[ebx+0x50]
c0002104:	e8 4e f9 ff ff       	call   c0001a57 <ld_dword>
c0002109:	3d 80 00 00 00       	cmp    eax,0x80
c000210e:	0f 96 c0             	setbe  al
c0002111:	0f b6 c0             	movzx  eax,al
c0002114:	89 c7                	mov    edi,eax
c0002116:	5b                   	pop    ebx
c0002117:	89 f8                	mov    eax,edi
c0002119:	5e                   	pop    esi
c000211a:	5f                   	pop    edi
c000211b:	5d                   	pop    ebp
c000211c:	c3                   	ret    

c000211d <make_rand>:
c000211d:	56                   	push   esi
c000211e:	85 c0                	test   eax,eax
c0002120:	53                   	push   ebx
c0002121:	75 05                	jne    c0002128 <make_rand+0xb>
c0002123:	b8 01 00 00 00       	mov    eax,0x1
c0002128:	01 d1                	add    ecx,edx
c000212a:	bb 08 00 00 00       	mov    ebx,0x8
c000212f:	89 c6                	mov    esi,eax
c0002131:	d1 e8                	shr    eax,1
c0002133:	83 e6 01             	and    esi,0x1
c0002136:	85 f6                	test   esi,esi
c0002138:	74 05                	je     c000213f <make_rand+0x22>
c000213a:	35 00 00 00 a3       	xor    eax,0xa3000000
c000213f:	4b                   	dec    ebx
c0002140:	75 ed                	jne    c000212f <make_rand+0x12>
c0002142:	42                   	inc    edx
c0002143:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002146:	39 ca                	cmp    edx,ecx
c0002148:	75 e0                	jne    c000212a <make_rand+0xd>
c000214a:	5b                   	pop    ebx
c000214b:	5e                   	pop    esi
c000214c:	c3                   	ret    

c000214d <validate>:
c000214d:	56                   	push   esi
c000214e:	53                   	push   ebx
c000214f:	89 d6                	mov    esi,edx
c0002151:	51                   	push   ecx
c0002152:	85 c0                	test   eax,eax
c0002154:	75 09                	jne    c000215f <validate+0x12>
c0002156:	b8 09 00 00 00       	mov    eax,0x9
c000215b:	31 c9                	xor    ecx,ecx
c000215d:	eb 2f                	jmp    c000218e <validate+0x41>
c000215f:	89 c3                	mov    ebx,eax
c0002161:	8b 00                	mov    eax,DWORD PTR [eax]
c0002163:	85 c0                	test   eax,eax
c0002165:	74 ef                	je     c0002156 <validate+0x9>
c0002167:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000216a:	74 ea                	je     c0002156 <validate+0x9>
c000216c:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002170:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002174:	75 e0                	jne    c0002156 <validate+0x9>
c0002176:	83 ec 0c             	sub    esp,0xc
c0002179:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000217d:	50                   	push   eax
c000217e:	e8 76 f8 ff ff       	call   c00019f9 <disk_status>
c0002183:	83 c4 10             	add    esp,0x10
c0002186:	a8 01                	test   al,0x1
c0002188:	75 cc                	jne    c0002156 <validate+0x9>
c000218a:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000218c:	31 c0                	xor    eax,eax
c000218e:	89 0e                	mov    DWORD PTR [esi],ecx
c0002190:	5a                   	pop    edx
c0002191:	5b                   	pop    ebx
c0002192:	5e                   	pop    esi
c0002193:	c3                   	ret    

c0002194 <sync_window>:
c0002194:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002198:	0f 84 85 00 00 00    	je     c0002223 <sync_window+0x8f>
c000219e:	55                   	push   ebp
c000219f:	8d 68 54             	lea    ebp,[eax+0x54]
c00021a2:	57                   	push   edi
c00021a3:	56                   	push   esi
c00021a4:	53                   	push   ebx
c00021a5:	89 c3                	mov    ebx,eax
c00021a7:	83 ec 28             	sub    esp,0x28
c00021aa:	6a 01                	push   0x1
c00021ac:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00021af:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00021b2:	55                   	push   ebp
c00021b3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021b7:	50                   	push   eax
c00021b8:	e8 58 f8 ff ff       	call   c0001a15 <disk_write>
c00021bd:	83 c4 20             	add    esp,0x20
c00021c0:	ba 01 00 00 00       	mov    edx,0x1
c00021c5:	85 c0                	test   eax,eax
c00021c7:	75 50                	jne    c0002219 <sync_window+0x85>
c00021c9:	31 ff                	xor    edi,edi
c00021cb:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00021ce:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00021d2:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00021d6:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00021d9:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00021dc:	89 c6                	mov    esi,eax
c00021de:	89 d7                	mov    edi,edx
c00021e0:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00021e3:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00021e7:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00021ea:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00021ee:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00021f2:	73 23                	jae    c0002217 <sync_window+0x83>
c00021f4:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00021f8:	75 1d                	jne    c0002217 <sync_window+0x83>
c00021fa:	83 ec 0c             	sub    esp,0xc
c00021fd:	6a 01                	push   0x1
c00021ff:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002203:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002207:	52                   	push   edx
c0002208:	50                   	push   eax
c0002209:	55                   	push   ebp
c000220a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000220e:	50                   	push   eax
c000220f:	e8 01 f8 ff ff       	call   c0001a15 <disk_write>
c0002214:	83 c4 20             	add    esp,0x20
c0002217:	31 d2                	xor    edx,edx
c0002219:	83 c4 1c             	add    esp,0x1c
c000221c:	89 d0                	mov    eax,edx
c000221e:	5b                   	pop    ebx
c000221f:	5e                   	pop    esi
c0002220:	5f                   	pop    edi
c0002221:	5d                   	pop    ebp
c0002222:	c3                   	ret    
c0002223:	31 d2                	xor    edx,edx
c0002225:	89 d0                	mov    eax,edx
c0002227:	c3                   	ret    

c0002228 <move_window>:
c0002228:	56                   	push   esi
c0002229:	53                   	push   ebx
c000222a:	89 c3                	mov    ebx,eax
c000222c:	83 ec 14             	sub    esp,0x14
c000222f:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002232:	75 07                	jne    c000223b <move_window+0x13>
c0002234:	31 f6                	xor    esi,esi
c0002236:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002239:	74 59                	je     c0002294 <move_window+0x6c>
c000223b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000223f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002243:	89 d8                	mov    eax,ebx
c0002245:	e8 4a ff ff ff       	call   c0002194 <sync_window>
c000224a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000224e:	89 c6                	mov    esi,eax
c0002250:	85 c0                	test   eax,eax
c0002252:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002256:	75 3c                	jne    c0002294 <move_window+0x6c>
c0002258:	83 ec 0c             	sub    esp,0xc
c000225b:	8d 43 54             	lea    eax,[ebx+0x54]
c000225e:	6a 01                	push   0x1
c0002260:	51                   	push   ecx
c0002261:	52                   	push   edx
c0002262:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002266:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000226a:	50                   	push   eax
c000226b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000226f:	50                   	push   eax
c0002270:	e8 8a f7 ff ff       	call   c00019ff <disk_read>
c0002275:	83 c4 20             	add    esp,0x20
c0002278:	85 c0                	test   eax,eax
c000227a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000227e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002282:	74 0a                	je     c000228e <move_window+0x66>
c0002284:	83 ca ff             	or     edx,0xffffffff
c0002287:	be 01 00 00 00       	mov    esi,0x1
c000228c:	89 d1                	mov    ecx,edx
c000228e:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c0002291:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c0002294:	89 f0                	mov    eax,esi
c0002296:	83 c4 14             	add    esp,0x14
c0002299:	5b                   	pop    ebx
c000229a:	5e                   	pop    esi
c000229b:	c3                   	ret    

c000229c <check_fs>:
c000229c:	53                   	push   ebx
c000229d:	89 c3                	mov    ebx,eax
c000229f:	83 ec 08             	sub    esp,0x8
c00022a2:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00022a6:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00022ad:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00022b4:	e8 6f ff ff ff       	call   c0002228 <move_window>
c00022b9:	ba 04 00 00 00       	mov    edx,0x4
c00022be:	85 c0                	test   eax,eax
c00022c0:	0f 85 89 00 00 00    	jne    c000234f <check_fs+0xb3>
c00022c6:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00022cc:	e8 79 f7 ff ff       	call   c0001a4a <ld_word>
c00022d1:	ba 03 00 00 00       	mov    edx,0x3
c00022d6:	66 3d 55 aa          	cmp    ax,0xaa55
c00022da:	75 73                	jne    c000234f <check_fs+0xb3>
c00022dc:	ba 00 8a 02 c0       	mov    edx,0xc0028a00
c00022e1:	8d 43 54             	lea    eax,[ebx+0x54]
c00022e4:	b9 0b 00 00 00       	mov    ecx,0xb
c00022e9:	e8 fb f7 ff ff       	call   c0001ae9 <mem_cmp>
c00022ee:	ba 01 00 00 00       	mov    edx,0x1
c00022f3:	85 c0                	test   eax,eax
c00022f5:	74 58                	je     c000234f <check_fs+0xb3>
c00022f7:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00022fa:	8d 50 18             	lea    edx,[eax+0x18]
c00022fd:	80 fa 01             	cmp    dl,0x1
c0002300:	76 09                	jbe    c000230b <check_fs+0x6f>
c0002302:	ba 02 00 00 00       	mov    edx,0x2
c0002307:	3c eb                	cmp    al,0xeb
c0002309:	75 44                	jne    c000234f <check_fs+0xb3>
c000230b:	ba ac bb 02 c0       	mov    edx,0xc002bbac
c0002310:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c0002316:	b9 03 00 00 00       	mov    ecx,0x3
c000231b:	e8 c9 f7 ff ff       	call   c0001ae9 <mem_cmp>
c0002320:	31 d2                	xor    edx,edx
c0002322:	85 c0                	test   eax,eax
c0002324:	74 29                	je     c000234f <check_fs+0xb3>
c0002326:	ba 0c 8a 02 c0       	mov    edx,0xc0028a0c
c000232b:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002331:	b9 05 00 00 00       	mov    ecx,0x5
c0002336:	e8 ae f7 ff ff       	call   c0001ae9 <mem_cmp>
c000233b:	31 d2                	xor    edx,edx
c000233d:	85 c0                	test   eax,eax
c000233f:	74 0e                	je     c000234f <check_fs+0xb3>
c0002341:	31 d2                	xor    edx,edx
c0002343:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c000234a:	0f 95 c2             	setne  dl
c000234d:	01 d2                	add    edx,edx
c000234f:	89 d0                	mov    eax,edx
c0002351:	83 c4 08             	add    esp,0x8
c0002354:	5b                   	pop    ebx
c0002355:	c3                   	ret    

c0002356 <find_volume>:
c0002356:	55                   	push   ebp
c0002357:	31 c9                	xor    ecx,ecx
c0002359:	57                   	push   edi
c000235a:	56                   	push   esi
c000235b:	89 d6                	mov    esi,edx
c000235d:	53                   	push   ebx
c000235e:	31 d2                	xor    edx,edx
c0002360:	83 ec 3c             	sub    esp,0x3c
c0002363:	89 c3                	mov    ebx,eax
c0002365:	e8 32 ff ff ff       	call   c000229c <check_fs>
c000236a:	83 f8 02             	cmp    eax,0x2
c000236d:	74 0e                	je     c000237d <find_volume+0x27>
c000236f:	0f 87 5d 01 00 00    	ja     c00024d2 <find_volume+0x17c>
c0002375:	85 f6                	test   esi,esi
c0002377:	0f 84 55 01 00 00    	je     c00024d2 <find_volume+0x17c>
c000237d:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002384:	0f 85 dd 00 00 00    	jne    c0002467 <find_volume+0x111>
c000238a:	31 c9                	xor    ecx,ecx
c000238c:	ba 01 00 00 00       	mov    edx,0x1
c0002391:	89 d8                	mov    eax,ebx
c0002393:	e8 90 fe ff ff       	call   c0002228 <move_window>
c0002398:	85 c0                	test   eax,eax
c000239a:	74 0a                	je     c00023a6 <find_volume+0x50>
c000239c:	b8 04 00 00 00       	mov    eax,0x4
c00023a1:	e9 2c 01 00 00       	jmp    c00024d2 <find_volume+0x17c>
c00023a6:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00023a9:	89 e8                	mov    eax,ebp
c00023ab:	e8 f6 fc ff ff       	call   c00020a6 <test_gpt_header>
c00023b0:	85 c0                	test   eax,eax
c00023b2:	75 0a                	jne    c00023be <find_volume+0x68>
c00023b4:	b8 03 00 00 00       	mov    eax,0x3
c00023b9:	e9 14 01 00 00       	jmp    c00024d2 <find_volume+0x17c>
c00023be:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00023c4:	e8 8e f6 ff ff       	call   c0001a57 <ld_dword>
c00023c9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00023cd:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00023d3:	e8 97 f6 ff ff       	call   c0001a6f <ld_qword>
c00023d8:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00023e0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00023e4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00023e8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00023f0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00023f4:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00023f8:	74 ba                	je     c00023b4 <find_volume+0x5e>
c00023fa:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00023fe:	31 c9                	xor    ecx,ecx
c0002400:	c1 e7 07             	shl    edi,0x7
c0002403:	89 d8                	mov    eax,ebx
c0002405:	89 fa                	mov    edx,edi
c0002407:	c1 ea 09             	shr    edx,0x9
c000240a:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c000240e:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002412:	e8 11 fe ff ff       	call   c0002228 <move_window>
c0002417:	85 c0                	test   eax,eax
c0002419:	75 81                	jne    c000239c <find_volume+0x46>
c000241b:	81 e7 80 01 00 00    	and    edi,0x180
c0002421:	b9 10 00 00 00       	mov    ecx,0x10
c0002426:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000242a:	ba f0 89 02 c0       	mov    edx,0xc00289f0
c000242f:	e8 b5 f6 ff ff       	call   c0001ae9 <mem_cmp>
c0002434:	85 c0                	test   eax,eax
c0002436:	75 29                	jne    c0002461 <find_volume+0x10b>
c0002438:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000243c:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002440:	e8 2a f6 ff ff       	call   c0001a6f <ld_qword>
c0002445:	89 d1                	mov    ecx,edx
c0002447:	89 c2                	mov    edx,eax
c0002449:	89 d8                	mov    eax,ebx
c000244b:	e8 4c fe ff ff       	call   c000229c <check_fs>
c0002450:	85 f6                	test   esi,esi
c0002452:	75 07                	jne    c000245b <find_volume+0x105>
c0002454:	83 f8 01             	cmp    eax,0x1
c0002457:	77 08                	ja     c0002461 <find_volume+0x10b>
c0002459:	eb 77                	jmp    c00024d2 <find_volume+0x17c>
c000245b:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000245f:	74 71                	je     c00024d2 <find_volume+0x17c>
c0002461:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002465:	eb 89                	jmp    c00023f0 <find_volume+0x9a>
c0002467:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000246b:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002471:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002477:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000247b:	89 cd                	mov    ebp,ecx
c000247d:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002481:	89 f8                	mov    eax,edi
c0002483:	83 c7 10             	add    edi,0x10
c0002486:	e8 cc f5 ff ff       	call   c0001a57 <ld_dword>
c000248b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000248f:	89 01                	mov    DWORD PTR [ecx],eax
c0002491:	83 c1 04             	add    ecx,0x4
c0002494:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0002498:	75 e3                	jne    c000247d <find_volume+0x127>
c000249a:	31 ff                	xor    edi,edi
c000249c:	85 f6                	test   esi,esi
c000249e:	74 03                	je     c00024a3 <find_volume+0x14d>
c00024a0:	8d 7e ff             	lea    edi,[esi-0x1]
c00024a3:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00024a7:	85 d2                	test   edx,edx
c00024a9:	74 14                	je     c00024bf <find_volume+0x169>
c00024ab:	31 c9                	xor    ecx,ecx
c00024ad:	89 d8                	mov    eax,ebx
c00024af:	e8 e8 fd ff ff       	call   c000229c <check_fs>
c00024b4:	83 f8 01             	cmp    eax,0x1
c00024b7:	76 19                	jbe    c00024d2 <find_volume+0x17c>
c00024b9:	85 f6                	test   esi,esi
c00024bb:	74 0f                	je     c00024cc <find_volume+0x176>
c00024bd:	eb 13                	jmp    c00024d2 <find_volume+0x17c>
c00024bf:	85 f6                	test   esi,esi
c00024c1:	0f 85 ed fe ff ff    	jne    c00023b4 <find_volume+0x5e>
c00024c7:	b8 03 00 00 00       	mov    eax,0x3
c00024cc:	47                   	inc    edi
c00024cd:	83 ff 03             	cmp    edi,0x3
c00024d0:	76 d1                	jbe    c00024a3 <find_volume+0x14d>
c00024d2:	83 c4 3c             	add    esp,0x3c
c00024d5:	5b                   	pop    ebx
c00024d6:	5e                   	pop    esi
c00024d7:	5f                   	pop    edi
c00024d8:	5d                   	pop    ebp
c00024d9:	c3                   	ret    

c00024da <mount_volume>:
c00024da:	55                   	push   ebp
c00024db:	57                   	push   edi
c00024dc:	89 cf                	mov    edi,ecx
c00024de:	56                   	push   esi
c00024df:	53                   	push   ebx
c00024e0:	bb 0b 00 00 00       	mov    ebx,0xb
c00024e5:	83 ec 3c             	sub    esp,0x3c
c00024e8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024ee:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00024f2:	e8 35 fb ff ff       	call   c000202c <get_ldnumber>
c00024f7:	85 c0                	test   eax,eax
c00024f9:	0f 88 3a 05 00 00    	js     c0002a39 <mount_volume+0x55f>
c00024ff:	8b 2c 85 20 d8 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd27e0]
c0002506:	89 c6                	mov    esi,eax
c0002508:	bb 0c 00 00 00       	mov    ebx,0xc
c000250d:	85 ed                	test   ebp,ebp
c000250f:	0f 84 24 05 00 00    	je     c0002a39 <mount_volume+0x55f>
c0002515:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002519:	83 e7 fe             	and    edi,0xfffffffe
c000251c:	89 2a                	mov    DWORD PTR [edx],ebp
c000251e:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002522:	74 32                	je     c0002556 <mount_volume+0x7c>
c0002524:	83 ec 0c             	sub    esp,0xc
c0002527:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000252b:	50                   	push   eax
c000252c:	e8 c8 f4 ff ff       	call   c00019f9 <disk_status>
c0002531:	83 c4 10             	add    esp,0x10
c0002534:	a8 01                	test   al,0x1
c0002536:	75 1e                	jne    c0002556 <mount_volume+0x7c>
c0002538:	31 db                	xor    ebx,ebx
c000253a:	89 f9                	mov    ecx,edi
c000253c:	84 c9                	test   cl,cl
c000253e:	0f 84 f5 04 00 00    	je     c0002a39 <mount_volume+0x55f>
c0002544:	a8 04                	test   al,0x4
c0002546:	0f 84 ed 04 00 00    	je     c0002a39 <mount_volume+0x55f>
c000254c:	bb 0a 00 00 00       	mov    ebx,0xa
c0002551:	e9 e3 04 00 00       	jmp    c0002a39 <mount_volume+0x55f>
c0002556:	83 ec 0c             	sub    esp,0xc
c0002559:	89 f0                	mov    eax,esi
c000255b:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c000255f:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002562:	0f b6 f0             	movzx  esi,al
c0002565:	bb 03 00 00 00       	mov    ebx,0x3
c000256a:	56                   	push   esi
c000256b:	e8 8c f4 ff ff       	call   c00019fc <disk_initialize>
c0002570:	83 c4 10             	add    esp,0x10
c0002573:	a8 01                	test   al,0x1
c0002575:	0f 85 be 04 00 00    	jne    c0002a39 <mount_volume+0x55f>
c000257b:	89 f9                	mov    ecx,edi
c000257d:	84 c9                	test   cl,cl
c000257f:	74 04                	je     c0002585 <mount_volume+0xab>
c0002581:	a8 04                	test   al,0x4
c0002583:	75 c7                	jne    c000254c <mount_volume+0x72>
c0002585:	31 d2                	xor    edx,edx
c0002587:	89 e8                	mov    eax,ebp
c0002589:	e8 c8 fd ff ff       	call   c0002356 <find_volume>
c000258e:	83 f8 04             	cmp    eax,0x4
c0002591:	75 0a                	jne    c000259d <mount_volume+0xc3>
c0002593:	bb 01 00 00 00       	mov    ebx,0x1
c0002598:	e9 9c 04 00 00       	jmp    c0002a39 <mount_volume+0x55f>
c000259d:	83 f8 01             	cmp    eax,0x1
c00025a0:	76 0a                	jbe    c00025ac <mount_volume+0xd2>
c00025a2:	bb 0d 00 00 00       	mov    ebx,0xd
c00025a7:	e9 8d 04 00 00       	jmp    c0002a39 <mount_volume+0x55f>
c00025ac:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00025af:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00025b2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00025b6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00025ba:	75 17                	jne    c00025d3 <mount_volume+0xf9>
c00025bc:	b8 0b 00 00 00       	mov    eax,0xb
c00025c1:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00025c6:	75 da                	jne    c00025a2 <mount_volume+0xc8>
c00025c8:	40                   	inc    eax
c00025c9:	83 f8 40             	cmp    eax,0x40
c00025cc:	75 f3                	jne    c00025c1 <mount_volume+0xe7>
c00025ce:	e9 5a 02 00 00       	jmp    c000282d <mount_volume+0x353>
c00025d3:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00025d6:	e8 6f f4 ff ff       	call   c0001a4a <ld_word>
c00025db:	66 3d 00 02          	cmp    ax,0x200
c00025df:	75 c1                	jne    c00025a2 <mount_volume+0xc8>
c00025e1:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00025e4:	e8 61 f4 ff ff       	call   c0001a4a <ld_word>
c00025e9:	0f b7 c0             	movzx  eax,ax
c00025ec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025f0:	85 c0                	test   eax,eax
c00025f2:	75 0c                	jne    c0002600 <mount_volume+0x126>
c00025f4:	8d 45 78             	lea    eax,[ebp+0x78]
c00025f7:	e8 5b f4 ff ff       	call   c0001a57 <ld_dword>
c00025fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002600:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002604:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002607:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c000260a:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c000260e:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002611:	48                   	dec    eax
c0002612:	3c 01                	cmp    al,0x1
c0002614:	77 8c                	ja     c00025a2 <mount_volume+0xc8>
c0002616:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c000261a:	89 c3                	mov    ebx,eax
c000261c:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002620:	66 85 c0             	test   ax,ax
c0002623:	0f 84 79 ff ff ff    	je     c00025a2 <mount_volume+0xc8>
c0002629:	8d 40 ff             	lea    eax,[eax-0x1]
c000262c:	85 d8                	test   eax,ebx
c000262e:	0f 85 6e ff ff ff    	jne    c00025a2 <mount_volume+0xc8>
c0002634:	8d 45 65             	lea    eax,[ebp+0x65]
c0002637:	e8 0e f4 ff ff       	call   c0001a4a <ld_word>
c000263c:	89 c7                	mov    edi,eax
c000263e:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002642:	a8 0f                	test   al,0xf
c0002644:	0f 85 58 ff ff ff    	jne    c00025a2 <mount_volume+0xc8>
c000264a:	8d 45 67             	lea    eax,[ebp+0x67]
c000264d:	e8 f8 f3 ff ff       	call   c0001a4a <ld_word>
c0002652:	0f b7 f0             	movzx  esi,ax
c0002655:	85 f6                	test   esi,esi
c0002657:	75 0a                	jne    c0002663 <mount_volume+0x189>
c0002659:	8d 45 74             	lea    eax,[ebp+0x74]
c000265c:	e8 f6 f3 ff ff       	call   c0001a57 <ld_dword>
c0002661:	89 c6                	mov    esi,eax
c0002663:	8d 45 62             	lea    eax,[ebp+0x62]
c0002666:	e8 df f3 ff ff       	call   c0001a4a <ld_word>
c000266b:	66 85 c0             	test   ax,ax
c000266e:	0f 84 2e ff ff ff    	je     c00025a2 <mount_volume+0xc8>
c0002674:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002679:	0f b7 c8             	movzx  ecx,ax
c000267c:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002681:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002685:	89 fa                	mov    edx,edi
c0002687:	66 c1 ea 04          	shr    dx,0x4
c000268b:	0f b7 d2             	movzx  edx,dx
c000268e:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c0002692:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0002695:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002699:	39 c6                	cmp    esi,eax
c000269b:	0f 82 01 ff ff ff    	jb     c00025a2 <mount_volume+0xc8>
c00026a1:	29 c6                	sub    esi,eax
c00026a3:	31 d2                	xor    edx,edx
c00026a5:	89 f0                	mov    eax,esi
c00026a7:	f7 f3                	div    ebx
c00026a9:	39 de                	cmp    esi,ebx
c00026ab:	0f 82 f1 fe ff ff    	jb     c00025a2 <mount_volume+0xc8>
c00026b1:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00026b6:	0f 87 e6 fe ff ff    	ja     c00025a2 <mount_volume+0xc8>
c00026bc:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00026c1:	0f 86 63 03 00 00    	jbe    c0002a2a <mount_volume+0x550>
c00026c7:	bb 03 00 00 00       	mov    ebx,0x3
c00026cc:	8d 70 02             	lea    esi,[eax+0x2]
c00026cf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00026d3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00026d7:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00026da:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00026dd:	31 d2                	xor    edx,edx
c00026df:	89 c8                	mov    eax,ecx
c00026e1:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00026e4:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026e8:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026ec:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00026f0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00026f4:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00026f7:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00026fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00026fe:	31 d2                	xor    edx,edx
c0002700:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002704:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002708:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000270b:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c000270e:	83 fb 03             	cmp    ebx,0x3
c0002711:	75 2b                	jne    c000273e <mount_volume+0x264>
c0002713:	8d 45 7e             	lea    eax,[ebp+0x7e]
c0002716:	e8 2f f3 ff ff       	call   c0001a4a <ld_word>
c000271b:	66 09 c7             	or     di,ax
c000271e:	0f 85 7e fe ff ff    	jne    c00025a2 <mount_volume+0xc8>
c0002724:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c000272a:	c1 e6 02             	shl    esi,0x2
c000272d:	e8 25 f3 ff ff       	call   c0001a57 <ld_dword>
c0002732:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002739:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000273c:	eb 30                	jmp    c000276e <mount_volume+0x294>
c000273e:	66 85 ff             	test   di,di
c0002741:	0f 84 5b fe ff ff    	je     c00025a2 <mount_volume+0xc8>
c0002747:	31 d2                	xor    edx,edx
c0002749:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000274d:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002751:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002755:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002758:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c000275b:	83 fb 02             	cmp    ebx,0x2
c000275e:	75 04                	jne    c0002764 <mount_volume+0x28a>
c0002760:	01 f6                	add    esi,esi
c0002762:	eb 0a                	jmp    c000276e <mount_volume+0x294>
c0002764:	8d 04 76             	lea    eax,[esi+esi*2]
c0002767:	83 e6 01             	and    esi,0x1
c000276a:	d1 e8                	shr    eax,1
c000276c:	01 c6                	add    esi,eax
c000276e:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002774:	c1 ee 09             	shr    esi,0x9
c0002777:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000277b:	0f 87 21 fe ff ff    	ja     c00025a2 <mount_volume+0xc8>
c0002781:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002788:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c000278f:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c0002793:	83 fb 03             	cmp    ebx,0x3
c0002796:	75 7a                	jne    c0002812 <mount_volume+0x338>
c0002798:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c000279e:	e8 a7 f2 ff ff       	call   c0001a4a <ld_word>
c00027a3:	66 48                	dec    ax
c00027a5:	75 6b                	jne    c0002812 <mount_volume+0x338>
c00027a7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00027ab:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00027af:	83 c2 01             	add    edx,0x1
c00027b2:	89 e8                	mov    eax,ebp
c00027b4:	83 d1 00             	adc    ecx,0x0
c00027b7:	e8 6c fa ff ff       	call   c0002228 <move_window>
c00027bc:	85 c0                	test   eax,eax
c00027be:	75 52                	jne    c0002812 <mount_volume+0x338>
c00027c0:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00027c4:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00027ca:	e8 7b f2 ff ff       	call   c0001a4a <ld_word>
c00027cf:	66 3d 55 aa          	cmp    ax,0xaa55
c00027d3:	75 3d                	jne    c0002812 <mount_volume+0x338>
c00027d5:	8d 45 54             	lea    eax,[ebp+0x54]
c00027d8:	e8 7a f2 ff ff       	call   c0001a57 <ld_dword>
c00027dd:	3d 52 52 61 41       	cmp    eax,0x41615252
c00027e2:	75 2e                	jne    c0002812 <mount_volume+0x338>
c00027e4:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00027ea:	e8 68 f2 ff ff       	call   c0001a57 <ld_dword>
c00027ef:	3d 72 72 41 61       	cmp    eax,0x61417272
c00027f4:	75 1c                	jne    c0002812 <mount_volume+0x338>
c00027f6:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00027fc:	e8 56 f2 ff ff       	call   c0001a57 <ld_dword>
c0002801:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002804:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c000280a:	e8 48 f2 ff ff       	call   c0001a57 <ld_dword>
c000280f:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002812:	66 a1 00 d8 02 c0    	mov    ax,ds:0xc002d800
c0002818:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000281b:	40                   	inc    eax
c000281c:	31 db                	xor    ebx,ebx
c000281e:	66 a3 00 d8 02 c0    	mov    ds:0xc002d800,ax
c0002824:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002828:	e9 0c 02 00 00       	jmp    c0002a39 <mount_volume+0x55f>
c000282d:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002833:	e8 12 f2 ff ff       	call   c0001a4a <ld_word>
c0002838:	66 3d 00 01          	cmp    ax,0x100
c000283c:	0f 85 60 fd ff ff    	jne    c00025a2 <mount_volume+0xc8>
c0002842:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002849:	0f 85 53 fd ff ff    	jne    c00025a2 <mount_volume+0xc8>
c000284f:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002855:	e8 15 f2 ff ff       	call   c0001a6f <ld_qword>
c000285a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000285e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002862:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002868:	e8 ea f1 ff ff       	call   c0001a57 <ld_dword>
c000286d:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002870:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002876:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002879:	fe c8                	dec    al
c000287b:	0f 85 21 fd ff ff    	jne    c00025a2 <mount_volume+0xc8>
c0002881:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002888:	bb 01 00 00 00       	mov    ebx,0x1
c000288d:	d3 e3                	shl    ebx,cl
c000288f:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002893:	66 85 db             	test   bx,bx
c0002896:	0f 84 06 fd ff ff    	je     c00025a2 <mount_volume+0xc8>
c000289c:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c00028a2:	e8 b0 f1 ff ff       	call   c0001a57 <ld_dword>
c00028a7:	89 c6                	mov    esi,eax
c00028a9:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00028ae:	0f 87 ee fc ff ff    	ja     c00025a2 <mount_volume+0xc8>
c00028b4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028b8:	8d 40 02             	lea    eax,[eax+0x2]
c00028bb:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028be:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c00028c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028c5:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028c8:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c00028ce:	e8 84 f1 ff ff       	call   c0001a57 <ld_dword>
c00028d3:	31 d2                	xor    edx,edx
c00028d5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028d9:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028dd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00028e1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00028e5:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028e8:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028eb:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c00028f1:	e8 61 f1 ff ff       	call   c0001a57 <ld_dword>
c00028f6:	31 d2                	xor    edx,edx
c00028f8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00028fc:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002900:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002904:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002907:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000290a:	0f b7 c3             	movzx  eax,bx
c000290d:	31 d2                	xor    edx,edx
c000290f:	0f af f0             	imul   esi,eax
c0002912:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002916:	89 f0                	mov    eax,esi
c0002918:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c000291c:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002920:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002924:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002928:	39 c1                	cmp    ecx,eax
c000292a:	89 df                	mov    edi,ebx
c000292c:	19 d7                	sbb    edi,edx
c000292e:	0f 82 6e fc ff ff    	jb     c00025a2 <mount_volume+0xc8>
c0002934:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c000293a:	31 db                	xor    ebx,ebx
c000293c:	e8 16 f1 ff ff       	call   c0001a57 <ld_dword>
c0002941:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002948:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000294b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002953:	85 db                	test   ebx,ebx
c0002955:	75 39                	jne    c0002990 <mount_volume+0x4b6>
c0002957:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000295b:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000295f:	0f 86 3d fc ff ff    	jbe    c00025a2 <mount_volume+0xc8>
c0002965:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002968:	31 ff                	xor    edi,edi
c000296a:	89 e8                	mov    eax,ebp
c000296c:	e8 72 f3 ff ff       	call   c0001ce3 <clst2sect>
c0002971:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002975:	01 c6                	add    esi,eax
c0002977:	89 e8                	mov    eax,ebp
c0002979:	11 d7                	adc    edi,edx
c000297b:	89 f2                	mov    edx,esi
c000297d:	89 f9                	mov    ecx,edi
c000297f:	e8 a4 f8 ff ff       	call   c0002228 <move_window>
c0002984:	85 c0                	test   eax,eax
c0002986:	0f 85 07 fc ff ff    	jne    c0002593 <mount_volume+0xb9>
c000298c:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002990:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002995:	74 0b                	je     c00029a2 <mount_volume+0x4c8>
c0002997:	83 c3 20             	add    ebx,0x20
c000299a:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00029a0:	eb b1                	jmp    c0002953 <mount_volume+0x479>
c00029a2:	8d 75 54             	lea    esi,[ebp+0x54]
c00029a5:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c00029a9:	e8 a9 f0 ff ff       	call   c0001a57 <ld_dword>
c00029ae:	89 c3                	mov    ebx,eax
c00029b0:	83 f8 01             	cmp    eax,0x1
c00029b3:	0f 86 e9 fb ff ff    	jbe    c00025a2 <mount_volume+0xc8>
c00029b9:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00029bc:	0f 86 e0 fb ff ff    	jbe    c00025a2 <mount_volume+0xc8>
c00029c2:	8d 53 fe             	lea    edx,[ebx-0x2]
c00029c5:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00029c9:	0f af c2             	imul   eax,edx
c00029cc:	31 d2                	xor    edx,edx
c00029ce:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c00029d1:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c00029d4:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c00029d7:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c00029da:	31 c9                	xor    ecx,ecx
c00029dc:	89 da                	mov    edx,ebx
c00029de:	89 e8                	mov    eax,ebp
c00029e0:	c1 ea 07             	shr    edx,0x7
c00029e3:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c00029e6:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c00029e9:	e8 3a f8 ff ff       	call   c0002228 <move_window>
c00029ee:	85 c0                	test   eax,eax
c00029f0:	0f 85 9d fb ff ff    	jne    c0002593 <mount_volume+0xb9>
c00029f6:	89 d8                	mov    eax,ebx
c00029f8:	83 e0 7f             	and    eax,0x7f
c00029fb:	8d 04 86             	lea    eax,[esi+eax*4]
c00029fe:	e8 54 f0 ff ff       	call   c0001a57 <ld_dword>
c0002a03:	83 f8 ff             	cmp    eax,0xffffffff
c0002a06:	74 0a                	je     c0002a12 <mount_volume+0x538>
c0002a08:	43                   	inc    ebx
c0002a09:	39 d8                	cmp    eax,ebx
c0002a0b:	74 cd                	je     c00029da <mount_volume+0x500>
c0002a0d:	e9 90 fb ff ff       	jmp    c00025a2 <mount_volume+0xc8>
c0002a12:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002a19:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002a20:	bb 04 00 00 00       	mov    ebx,0x4
c0002a25:	e9 e8 fd ff ff       	jmp    c0002812 <mount_volume+0x338>
c0002a2a:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002a2f:	19 db                	sbb    ebx,ebx
c0002a31:	83 c3 02             	add    ebx,0x2
c0002a34:	e9 93 fc ff ff       	jmp    c00026cc <mount_volume+0x1f2>
c0002a39:	83 c4 3c             	add    esp,0x3c
c0002a3c:	89 d8                	mov    eax,ebx
c0002a3e:	5b                   	pop    ebx
c0002a3f:	5e                   	pop    esi
c0002a40:	5f                   	pop    edi
c0002a41:	5d                   	pop    ebp
c0002a42:	c3                   	ret    

c0002a43 <find_bitmap>:
c0002a43:	55                   	push   ebp
c0002a44:	57                   	push   edi
c0002a45:	89 c7                	mov    edi,eax
c0002a47:	56                   	push   esi
c0002a48:	8d 72 fe             	lea    esi,[edx-0x2]
c0002a4b:	53                   	push   ebx
c0002a4c:	83 ec 1c             	sub    esp,0x1c
c0002a4f:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002a52:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002a56:	83 e8 02             	sub    eax,0x2
c0002a59:	39 f0                	cmp    eax,esi
c0002a5b:	77 02                	ja     c0002a5f <find_bitmap+0x1c>
c0002a5d:	31 f6                	xor    esi,esi
c0002a5f:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002a63:	89 f3                	mov    ebx,esi
c0002a65:	31 ed                	xor    ebp,ebp
c0002a67:	31 c9                	xor    ecx,ecx
c0002a69:	89 da                	mov    edx,ebx
c0002a6b:	89 f8                	mov    eax,edi
c0002a6d:	c1 ea 0c             	shr    edx,0xc
c0002a70:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002a73:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002a76:	e8 ad f7 ff ff       	call   c0002228 <move_window>
c0002a7b:	85 c0                	test   eax,eax
c0002a7d:	75 68                	jne    c0002ae7 <find_bitmap+0xa4>
c0002a7f:	89 da                	mov    edx,ebx
c0002a81:	89 d9                	mov    ecx,ebx
c0002a83:	c1 ea 03             	shr    edx,0x3
c0002a86:	83 e1 07             	and    ecx,0x7
c0002a89:	b8 01 00 00 00       	mov    eax,0x1
c0002a8e:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002a94:	d3 e0                	shl    eax,cl
c0002a96:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002a99:	83 e9 02             	sub    ecx,0x2
c0002a9c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002aa0:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002aa4:	43                   	inc    ebx
c0002aa5:	21 c1                	and    ecx,eax
c0002aa7:	d1 e0                	shl    eax,1
c0002aa9:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002aad:	77 09                	ja     c0002ab8 <find_bitmap+0x75>
c0002aaf:	31 db                	xor    ebx,ebx
c0002ab1:	ba 00 02 00 00       	mov    edx,0x200
c0002ab6:	31 c0                	xor    eax,eax
c0002ab8:	84 c9                	test   cl,cl
c0002aba:	75 10                	jne    c0002acc <find_bitmap+0x89>
c0002abc:	45                   	inc    ebp
c0002abd:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002ac1:	75 0f                	jne    c0002ad2 <find_bitmap+0x8f>
c0002ac3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ac7:	83 c0 02             	add    eax,0x2
c0002aca:	eb 22                	jmp    c0002aee <find_bitmap+0xab>
c0002acc:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002ad0:	31 ed                	xor    ebp,ebp
c0002ad2:	39 de                	cmp    esi,ebx
c0002ad4:	74 16                	je     c0002aec <find_bitmap+0xa9>
c0002ad6:	84 c0                	test   al,al
c0002ad8:	75 c6                	jne    c0002aa0 <find_bitmap+0x5d>
c0002ada:	42                   	inc    edx
c0002adb:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002ae1:	77 84                	ja     c0002a67 <find_bitmap+0x24>
c0002ae3:	b0 01                	mov    al,0x1
c0002ae5:	eb b9                	jmp    c0002aa0 <find_bitmap+0x5d>
c0002ae7:	83 c8 ff             	or     eax,0xffffffff
c0002aea:	eb 02                	jmp    c0002aee <find_bitmap+0xab>
c0002aec:	31 c0                	xor    eax,eax
c0002aee:	83 c4 1c             	add    esp,0x1c
c0002af1:	5b                   	pop    ebx
c0002af2:	5e                   	pop    esi
c0002af3:	5f                   	pop    edi
c0002af4:	5d                   	pop    ebp
c0002af5:	c3                   	ret    

c0002af6 <change_bitmap>:
c0002af6:	55                   	push   ebp
c0002af7:	89 cd                	mov    ebp,ecx
c0002af9:	57                   	push   edi
c0002afa:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002afd:	56                   	push   esi
c0002afe:	89 c7                	mov    edi,eax
c0002b00:	53                   	push   ebx
c0002b01:	89 c8                	mov    eax,ecx
c0002b03:	83 ec 1c             	sub    esp,0x1c
c0002b06:	31 d2                	xor    edx,edx
c0002b08:	89 ce                	mov    esi,ecx
c0002b0a:	c1 e8 0c             	shr    eax,0xc
c0002b0d:	bb 01 00 00 00       	mov    ebx,0x1
c0002b12:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002b15:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002b18:	c1 ee 03             	shr    esi,0x3
c0002b1b:	83 e1 07             	and    ecx,0x7
c0002b1e:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002b24:	d3 e3                	shl    ebx,cl
c0002b26:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002b2a:	89 c1                	mov    ecx,eax
c0002b2c:	89 d3                	mov    ebx,edx
c0002b2e:	83 c1 01             	add    ecx,0x1
c0002b31:	83 d3 00             	adc    ebx,0x0
c0002b34:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002b38:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002b3c:	89 d1                	mov    ecx,edx
c0002b3e:	89 c2                	mov    edx,eax
c0002b40:	89 f8                	mov    eax,edi
c0002b42:	e8 e1 f6 ff ff       	call   c0002228 <move_window>
c0002b47:	89 c1                	mov    ecx,eax
c0002b49:	85 c0                	test   eax,eax
c0002b4b:	75 48                	jne    c0002b95 <change_bitmap+0x9f>
c0002b4d:	31 d2                	xor    edx,edx
c0002b4f:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002b53:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002b57:	0f 95 c2             	setne  dl
c0002b5a:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002b5e:	74 3c                	je     c0002b9c <change_bitmap+0xa6>
c0002b60:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002b64:	4d                   	dec    ebp
c0002b65:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002b69:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002b6d:	74 32                	je     c0002ba1 <change_bitmap+0xab>
c0002b6f:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002b73:	75 d8                	jne    c0002b4d <change_bitmap+0x57>
c0002b75:	8d 46 01             	lea    eax,[esi+0x1]
c0002b78:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002b7d:	89 c3                	mov    ebx,eax
c0002b7f:	31 f6                	xor    esi,esi
c0002b81:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002b85:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b89:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b8f:	74 99                	je     c0002b2a <change_bitmap+0x34>
c0002b91:	89 de                	mov    esi,ebx
c0002b93:	eb b8                	jmp    c0002b4d <change_bitmap+0x57>
c0002b95:	b9 01 00 00 00       	mov    ecx,0x1
c0002b9a:	eb 05                	jmp    c0002ba1 <change_bitmap+0xab>
c0002b9c:	b9 02 00 00 00       	mov    ecx,0x2
c0002ba1:	83 c4 1c             	add    esp,0x1c
c0002ba4:	89 c8                	mov    eax,ecx
c0002ba6:	5b                   	pop    ebx
c0002ba7:	5e                   	pop    esi
c0002ba8:	5f                   	pop    edi
c0002ba9:	5d                   	pop    ebp
c0002baa:	c3                   	ret    

c0002bab <put_fat>:
c0002bab:	83 fa 01             	cmp    edx,0x1
c0002bae:	0f 86 7b 01 00 00    	jbe    c0002d2f <put_fat+0x184>
c0002bb4:	55                   	push   ebp
c0002bb5:	57                   	push   edi
c0002bb6:	89 cf                	mov    edi,ecx
c0002bb8:	56                   	push   esi
c0002bb9:	b9 02 00 00 00       	mov    ecx,0x2
c0002bbe:	53                   	push   ebx
c0002bbf:	89 c6                	mov    esi,eax
c0002bc1:	83 ec 1c             	sub    esp,0x1c
c0002bc4:	89 d3                	mov    ebx,edx
c0002bc6:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002bc9:	0f 86 68 01 00 00    	jbe    c0002d37 <put_fat+0x18c>
c0002bcf:	8a 00                	mov    al,BYTE PTR [eax]
c0002bd1:	3c 02                	cmp    al,0x2
c0002bd3:	0f 84 c7 00 00 00    	je     c0002ca0 <put_fat+0xf5>
c0002bd9:	77 09                	ja     c0002be4 <put_fat+0x39>
c0002bdb:	fe c8                	dec    al
c0002bdd:	74 17                	je     c0002bf6 <put_fat+0x4b>
c0002bdf:	e9 53 01 00 00       	jmp    c0002d37 <put_fat+0x18c>
c0002be4:	b9 02 00 00 00       	mov    ecx,0x2
c0002be9:	3c 04                	cmp    al,0x4
c0002beb:	0f 86 e1 00 00 00    	jbe    c0002cd2 <put_fat+0x127>
c0002bf1:	e9 41 01 00 00       	jmp    c0002d37 <put_fat+0x18c>
c0002bf6:	89 d5                	mov    ebp,edx
c0002bf8:	31 c9                	xor    ecx,ecx
c0002bfa:	d1 ed                	shr    ebp,1
c0002bfc:	89 f0                	mov    eax,esi
c0002bfe:	01 d5                	add    ebp,edx
c0002c00:	89 ea                	mov    edx,ebp
c0002c02:	c1 ea 09             	shr    edx,0x9
c0002c05:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c08:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c0b:	e8 18 f6 ff ff       	call   c0002228 <move_window>
c0002c10:	89 c1                	mov    ecx,eax
c0002c12:	85 c0                	test   eax,eax
c0002c14:	0f 85 1d 01 00 00    	jne    c0002d37 <put_fat+0x18c>
c0002c1a:	8d 46 54             	lea    eax,[esi+0x54]
c0002c1d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c21:	8d 45 01             	lea    eax,[ebp+0x1]
c0002c24:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c2a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002c2e:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c32:	89 f8                	mov    eax,edi
c0002c34:	83 e3 01             	and    ebx,0x1
c0002c37:	74 0d                	je     c0002c46 <put_fat+0x9b>
c0002c39:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002c3c:	89 fa                	mov    edx,edi
c0002c3e:	83 e0 0f             	and    eax,0xf
c0002c41:	c1 e2 04             	shl    edx,0x4
c0002c44:	09 d0                	or     eax,edx
c0002c46:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002c49:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c4d:	31 c9                	xor    ecx,ecx
c0002c4f:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c53:	c1 ea 09             	shr    edx,0x9
c0002c56:	89 f0                	mov    eax,esi
c0002c58:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c5b:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c5e:	e8 c5 f5 ff ff       	call   c0002228 <move_window>
c0002c63:	89 c1                	mov    ecx,eax
c0002c65:	85 c0                	test   eax,eax
c0002c67:	0f 85 ca 00 00 00    	jne    c0002d37 <put_fat+0x18c>
c0002c6d:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002c71:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c77:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c7b:	85 db                	test   ebx,ebx
c0002c7d:	74 07                	je     c0002c86 <put_fat+0xdb>
c0002c7f:	c1 ef 04             	shr    edi,0x4
c0002c82:	89 fa                	mov    edx,edi
c0002c84:	eb 0e                	jmp    c0002c94 <put_fat+0xe9>
c0002c86:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002c89:	c1 ef 08             	shr    edi,0x8
c0002c8c:	83 e2 f0             	and    edx,0xfffffff0
c0002c8f:	83 e7 0f             	and    edi,0xf
c0002c92:	09 fa                	or     edx,edi
c0002c94:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002c97:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c9b:	e9 97 00 00 00       	jmp    c0002d37 <put_fat+0x18c>
c0002ca0:	31 c9                	xor    ecx,ecx
c0002ca2:	c1 ea 08             	shr    edx,0x8
c0002ca5:	89 f0                	mov    eax,esi
c0002ca7:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002caa:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002cad:	e8 76 f5 ff ff       	call   c0002228 <move_window>
c0002cb2:	89 c1                	mov    ecx,eax
c0002cb4:	85 c0                	test   eax,eax
c0002cb6:	75 7f                	jne    c0002d37 <put_fat+0x18c>
c0002cb8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cbc:	01 db                	add    ebx,ebx
c0002cbe:	0f b7 d7             	movzx  edx,di
c0002cc1:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002cc7:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ccb:	e8 ec ed ff ff       	call   c0001abc <st_word>
c0002cd0:	eb 53                	jmp    c0002d25 <put_fat+0x17a>
c0002cd2:	31 c9                	xor    ecx,ecx
c0002cd4:	c1 ea 07             	shr    edx,0x7
c0002cd7:	89 f0                	mov    eax,esi
c0002cd9:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002cdc:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002cdf:	e8 44 f5 ff ff       	call   c0002228 <move_window>
c0002ce4:	89 c1                	mov    ecx,eax
c0002ce6:	85 c0                	test   eax,eax
c0002ce8:	75 4d                	jne    c0002d37 <put_fat+0x18c>
c0002cea:	c1 e3 02             	shl    ebx,0x2
c0002ced:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002cf3:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002cf6:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002cfa:	74 1c                	je     c0002d18 <put_fat+0x16d>
c0002cfc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002d00:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002d06:	89 d8                	mov    eax,ebx
c0002d08:	e8 4a ed ff ff       	call   c0001a57 <ld_dword>
c0002d0d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d11:	25 00 00 00 f0       	and    eax,0xf0000000
c0002d16:	09 c7                	or     edi,eax
c0002d18:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d1c:	89 fa                	mov    edx,edi
c0002d1e:	89 d8                	mov    eax,ebx
c0002d20:	e8 9b ed ff ff       	call   c0001ac0 <st_dword>
c0002d25:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002d29:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d2d:	eb 08                	jmp    c0002d37 <put_fat+0x18c>
c0002d2f:	b9 02 00 00 00       	mov    ecx,0x2
c0002d34:	89 c8                	mov    eax,ecx
c0002d36:	c3                   	ret    
c0002d37:	83 c4 1c             	add    esp,0x1c
c0002d3a:	89 c8                	mov    eax,ecx
c0002d3c:	5b                   	pop    ebx
c0002d3d:	5e                   	pop    esi
c0002d3e:	5f                   	pop    edi
c0002d3f:	5d                   	pop    ebp
c0002d40:	c3                   	ret    

c0002d41 <fill_last_frag>:
c0002d41:	57                   	push   edi
c0002d42:	89 cf                	mov    edi,ecx
c0002d44:	56                   	push   esi
c0002d45:	89 d6                	mov    esi,edx
c0002d47:	53                   	push   ebx
c0002d48:	89 c3                	mov    ebx,eax
c0002d4a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002d4d:	85 c0                	test   eax,eax
c0002d4f:	74 21                	je     c0002d72 <fill_last_frag+0x31>
c0002d51:	89 f9                	mov    ecx,edi
c0002d53:	83 f8 01             	cmp    eax,0x1
c0002d56:	76 05                	jbe    c0002d5d <fill_last_frag+0x1c>
c0002d58:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002d5b:	29 c1                	sub    ecx,eax
c0002d5d:	8d 56 01             	lea    edx,[esi+0x1]
c0002d60:	29 c2                	sub    edx,eax
c0002d62:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d64:	e8 42 fe ff ff       	call   c0002bab <put_fat>
c0002d69:	85 c0                	test   eax,eax
c0002d6b:	75 05                	jne    c0002d72 <fill_last_frag+0x31>
c0002d6d:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002d70:	eb d8                	jmp    c0002d4a <fill_last_frag+0x9>
c0002d72:	5b                   	pop    ebx
c0002d73:	5e                   	pop    esi
c0002d74:	5f                   	pop    edi
c0002d75:	c3                   	ret    

c0002d76 <fill_first_frag>:
c0002d76:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002d7a:	75 2d                	jne    c0002da9 <fill_first_frag+0x33>
c0002d7c:	57                   	push   edi
c0002d7d:	56                   	push   esi
c0002d7e:	53                   	push   ebx
c0002d7f:	89 c3                	mov    ebx,eax
c0002d81:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002d84:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002d87:	01 d7                	add    edi,edx
c0002d89:	39 fa                	cmp    edx,edi
c0002d8b:	74 14                	je     c0002da1 <fill_first_frag+0x2b>
c0002d8d:	8d 72 01             	lea    esi,[edx+0x1]
c0002d90:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d92:	89 f1                	mov    ecx,esi
c0002d94:	e8 12 fe ff ff       	call   c0002bab <put_fat>
c0002d99:	89 f2                	mov    edx,esi
c0002d9b:	85 c0                	test   eax,eax
c0002d9d:	74 ea                	je     c0002d89 <fill_first_frag+0x13>
c0002d9f:	eb 0b                	jmp    c0002dac <fill_first_frag+0x36>
c0002da1:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002da5:	31 c0                	xor    eax,eax
c0002da7:	eb 03                	jmp    c0002dac <fill_first_frag+0x36>
c0002da9:	31 c0                	xor    eax,eax
c0002dab:	c3                   	ret    
c0002dac:	5b                   	pop    ebx
c0002dad:	5e                   	pop    esi
c0002dae:	5f                   	pop    edi
c0002daf:	c3                   	ret    

c0002db0 <get_fat>:
c0002db0:	83 fa 01             	cmp    edx,0x1
c0002db3:	0f 86 db 01 00 00    	jbe    c0002f94 <get_fat+0x1e4>
c0002db9:	55                   	push   ebp
c0002dba:	b9 01 00 00 00       	mov    ecx,0x1
c0002dbf:	57                   	push   edi
c0002dc0:	56                   	push   esi
c0002dc1:	53                   	push   ebx
c0002dc2:	83 ec 1c             	sub    esp,0x1c
c0002dc5:	8b 38                	mov    edi,DWORD PTR [eax]
c0002dc7:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002dca:	0f 86 cc 01 00 00    	jbe    c0002f9c <get_fat+0x1ec>
c0002dd0:	89 c3                	mov    ebx,eax
c0002dd2:	89 d6                	mov    esi,edx
c0002dd4:	8a 07                	mov    al,BYTE PTR [edi]
c0002dd6:	3c 02                	cmp    al,0x2
c0002dd8:	0f 84 99 00 00 00    	je     c0002e77 <get_fat+0xc7>
c0002dde:	77 09                	ja     c0002de9 <get_fat+0x39>
c0002de0:	fe c8                	dec    al
c0002de2:	74 1a                	je     c0002dfe <get_fat+0x4e>
c0002de4:	e9 b3 01 00 00       	jmp    c0002f9c <get_fat+0x1ec>
c0002de9:	3c 03                	cmp    al,0x3
c0002deb:	0f 84 b5 00 00 00    	je     c0002ea6 <get_fat+0xf6>
c0002df1:	3c 04                	cmp    al,0x4
c0002df3:	0f 84 e3 00 00 00    	je     c0002edc <get_fat+0x12c>
c0002df9:	e9 9e 01 00 00       	jmp    c0002f9c <get_fat+0x1ec>
c0002dfe:	89 d3                	mov    ebx,edx
c0002e00:	31 c9                	xor    ecx,ecx
c0002e02:	d1 eb                	shr    ebx,1
c0002e04:	89 f8                	mov    eax,edi
c0002e06:	01 d3                	add    ebx,edx
c0002e08:	89 da                	mov    edx,ebx
c0002e0a:	c1 ea 09             	shr    edx,0x9
c0002e0d:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e10:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e13:	e8 10 f4 ff ff       	call   c0002228 <move_window>
c0002e18:	85 c0                	test   eax,eax
c0002e1a:	74 08                	je     c0002e24 <get_fat+0x74>
c0002e1c:	83 c9 ff             	or     ecx,0xffffffff
c0002e1f:	e9 78 01 00 00       	jmp    c0002f9c <get_fat+0x1ec>
c0002e24:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002e27:	31 c9                	xor    ecx,ecx
c0002e29:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002e2f:	89 ea                	mov    edx,ebp
c0002e31:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002e35:	c1 ea 09             	shr    edx,0x9
c0002e38:	89 f8                	mov    eax,edi
c0002e3a:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e3d:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e40:	e8 e3 f3 ff ff       	call   c0002228 <move_window>
c0002e45:	85 c0                	test   eax,eax
c0002e47:	75 d3                	jne    c0002e1c <get_fat+0x6c>
c0002e49:	0f b6 c3             	movzx  eax,bl
c0002e4c:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e52:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002e57:	c1 e3 08             	shl    ebx,0x8
c0002e5a:	09 c3                	or     ebx,eax
c0002e5c:	89 d9                	mov    ecx,ebx
c0002e5e:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002e64:	83 e6 01             	and    esi,0x1
c0002e67:	0f 84 2f 01 00 00    	je     c0002f9c <get_fat+0x1ec>
c0002e6d:	89 d9                	mov    ecx,ebx
c0002e6f:	c1 e9 04             	shr    ecx,0x4
c0002e72:	e9 25 01 00 00       	jmp    c0002f9c <get_fat+0x1ec>
c0002e77:	31 c9                	xor    ecx,ecx
c0002e79:	c1 ea 08             	shr    edx,0x8
c0002e7c:	89 f8                	mov    eax,edi
c0002e7e:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e81:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e84:	e8 9f f3 ff ff       	call   c0002228 <move_window>
c0002e89:	85 c0                	test   eax,eax
c0002e8b:	75 8f                	jne    c0002e1c <get_fat+0x6c>
c0002e8d:	01 f6                	add    esi,esi
c0002e8f:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002e95:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e99:	e8 ac eb ff ff       	call   c0001a4a <ld_word>
c0002e9e:	0f b7 c8             	movzx  ecx,ax
c0002ea1:	e9 f6 00 00 00       	jmp    c0002f9c <get_fat+0x1ec>
c0002ea6:	31 c9                	xor    ecx,ecx
c0002ea8:	c1 ea 07             	shr    edx,0x7
c0002eab:	89 f8                	mov    eax,edi
c0002ead:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002eb0:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002eb3:	e8 70 f3 ff ff       	call   c0002228 <move_window>
c0002eb8:	85 c0                	test   eax,eax
c0002eba:	0f 85 5c ff ff ff    	jne    c0002e1c <get_fat+0x6c>
c0002ec0:	c1 e6 02             	shl    esi,0x2
c0002ec3:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002ec9:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002ecd:	e8 85 eb ff ff       	call   c0001a57 <ld_dword>
c0002ed2:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002ed7:	e9 b4 00 00 00       	jmp    c0002f90 <get_fat+0x1e0>
c0002edc:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002edf:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ee2:	89 d1                	mov    ecx,edx
c0002ee4:	09 c1                	or     ecx,eax
c0002ee6:	74 06                	je     c0002eee <get_fat+0x13e>
c0002ee8:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002eec:	75 0f                	jne    c0002efd <get_fat+0x14d>
c0002eee:	b9 01 00 00 00       	mov    ecx,0x1
c0002ef3:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0002ef7:	0f 85 9f 00 00 00    	jne    c0002f9c <get_fat+0x1ec>
c0002efd:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0002f01:	89 f5                	mov    ebp,esi
c0002f03:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0002f08:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0002f0b:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0002f0e:	80 f9 02             	cmp    cl,0x2
c0002f11:	75 35                	jne    c0002f48 <get_fat+0x198>
c0002f13:	83 c0 ff             	add    eax,0xffffffff
c0002f16:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0002f1b:	83 d2 ff             	adc    edx,0xffffffff
c0002f1e:	31 db                	xor    ebx,ebx
c0002f20:	0f ac d0 09          	shrd   eax,edx,0x9
c0002f24:	53                   	push   ebx
c0002f25:	c1 ea 09             	shr    edx,0x9
c0002f28:	51                   	push   ecx
c0002f29:	52                   	push   edx
c0002f2a:	50                   	push   eax
c0002f2b:	e8 1c 30 02 00       	call   c0025f4c <__udivdi3>
c0002f30:	83 c4 10             	add    esp,0x10
c0002f33:	b9 01 00 00 00       	mov    ecx,0x1
c0002f38:	39 c5                	cmp    ebp,eax
c0002f3a:	77 60                	ja     c0002f9c <get_fat+0x1ec>
c0002f3c:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f41:	74 59                	je     c0002f9c <get_fat+0x1ec>
c0002f43:	8d 4e 01             	lea    ecx,[esi+0x1]
c0002f46:	eb 54                	jmp    c0002f9c <get_fat+0x1ec>
c0002f48:	80 f9 03             	cmp    cl,0x3
c0002f4b:	75 05                	jne    c0002f52 <get_fat+0x1a2>
c0002f4d:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0002f50:	77 f1                	ja     c0002f43 <get_fat+0x193>
c0002f52:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f57:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0002f5b:	75 3f                	jne    c0002f9c <get_fat+0x1ec>
c0002f5d:	31 c9                	xor    ecx,ecx
c0002f5f:	89 f2                	mov    edx,esi
c0002f61:	89 f8                	mov    eax,edi
c0002f63:	c1 ea 07             	shr    edx,0x7
c0002f66:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f69:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f6c:	e8 b7 f2 ff ff       	call   c0002228 <move_window>
c0002f71:	85 c0                	test   eax,eax
c0002f73:	0f 85 a3 fe ff ff    	jne    c0002e1c <get_fat+0x6c>
c0002f79:	c1 e6 02             	shl    esi,0x2
c0002f7c:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002f82:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002f86:	e8 cc ea ff ff       	call   c0001a57 <ld_dword>
c0002f8b:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0002f90:	89 c1                	mov    ecx,eax
c0002f92:	eb 08                	jmp    c0002f9c <get_fat+0x1ec>
c0002f94:	b9 01 00 00 00       	mov    ecx,0x1
c0002f99:	89 c8                	mov    eax,ecx
c0002f9b:	c3                   	ret    
c0002f9c:	83 c4 1c             	add    esp,0x1c
c0002f9f:	89 c8                	mov    eax,ecx
c0002fa1:	5b                   	pop    ebx
c0002fa2:	5e                   	pop    esi
c0002fa3:	5f                   	pop    edi
c0002fa4:	5d                   	pop    ebp
c0002fa5:	c3                   	ret    

c0002fa6 <dir_sdi>:
c0002fa6:	55                   	push   ebp
c0002fa7:	57                   	push   edi
c0002fa8:	56                   	push   esi
c0002fa9:	53                   	push   ebx
c0002faa:	89 c3                	mov    ebx,eax
c0002fac:	83 ec 1c             	sub    esp,0x1c
c0002faf:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fb1:	31 c0                	xor    eax,eax
c0002fb3:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0002fb6:	0f 94 c0             	sete   al
c0002fb9:	48                   	dec    eax
c0002fba:	25 00 00 20 f0       	and    eax,0xf0200000
c0002fbf:	05 00 00 00 10       	add    eax,0x10000000
c0002fc4:	39 d0                	cmp    eax,edx
c0002fc6:	77 0a                	ja     c0002fd2 <dir_sdi+0x2c>
c0002fc8:	b8 02 00 00 00       	mov    eax,0x2
c0002fcd:	e9 c4 00 00 00       	jmp    c0003096 <dir_sdi+0xf0>
c0002fd2:	89 d6                	mov    esi,edx
c0002fd4:	f6 c2 1f             	test   dl,0x1f
c0002fd7:	75 ef                	jne    c0002fc8 <dir_sdi+0x22>
c0002fd9:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0002fdc:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0002fdf:	85 c9                	test   ecx,ecx
c0002fe1:	75 2d                	jne    c0003010 <dir_sdi+0x6a>
c0002fe3:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0002fe6:	77 1b                	ja     c0003003 <dir_sdi+0x5d>
c0002fe8:	89 f2                	mov    edx,esi
c0002fea:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0002fee:	c1 ea 05             	shr    edx,0x5
c0002ff1:	39 c2                	cmp    edx,eax
c0002ff3:	73 d3                	jae    c0002fc8 <dir_sdi+0x22>
c0002ff5:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002ff8:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0002ffb:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002ffe:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003001:	eb 4b                	jmp    c000304e <dir_sdi+0xa8>
c0003003:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003006:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c000300a:	85 c0                	test   eax,eax
c000300c:	74 da                	je     c0002fe8 <dir_sdi+0x42>
c000300e:	89 c1                	mov    ecx,eax
c0003010:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003014:	c1 e5 09             	shl    ebp,0x9
c0003017:	89 ca                	mov    edx,ecx
c0003019:	39 ee                	cmp    esi,ebp
c000301b:	72 1c                	jb     c0003039 <dir_sdi+0x93>
c000301d:	89 d8                	mov    eax,ebx
c000301f:	e8 8c fd ff ff       	call   c0002db0 <get_fat>
c0003024:	89 c1                	mov    ecx,eax
c0003026:	83 f8 ff             	cmp    eax,0xffffffff
c0003029:	74 66                	je     c0003091 <dir_sdi+0xeb>
c000302b:	83 f8 01             	cmp    eax,0x1
c000302e:	76 98                	jbe    c0002fc8 <dir_sdi+0x22>
c0003030:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003033:	76 93                	jbe    c0002fc8 <dir_sdi+0x22>
c0003035:	29 ee                	sub    esi,ebp
c0003037:	eb de                	jmp    c0003017 <dir_sdi+0x71>
c0003039:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000303d:	89 f8                	mov    eax,edi
c000303f:	e8 9f ec ff ff       	call   c0001ce3 <clst2sect>
c0003044:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003048:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000304b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000304e:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003051:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003054:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003057:	89 d1                	mov    ecx,edx
c0003059:	09 c1                	or     ecx,eax
c000305b:	0f 84 67 ff ff ff    	je     c0002fc8 <dir_sdi+0x22>
c0003061:	89 f1                	mov    ecx,esi
c0003063:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000306b:	c1 e9 09             	shr    ecx,0x9
c000306e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003072:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003076:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000307a:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000307d:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003083:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003086:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000308a:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000308d:	31 c0                	xor    eax,eax
c000308f:	eb 05                	jmp    c0003096 <dir_sdi+0xf0>
c0003091:	b8 01 00 00 00       	mov    eax,0x1
c0003096:	83 c4 1c             	add    esp,0x1c
c0003099:	5b                   	pop    ebx
c000309a:	5e                   	pop    esi
c000309b:	5f                   	pop    edi
c000309c:	5d                   	pop    ebp
c000309d:	c3                   	ret    

c000309e <create_chain>:
c000309e:	55                   	push   ebp
c000309f:	89 c5                	mov    ebp,eax
c00030a1:	57                   	push   edi
c00030a2:	56                   	push   esi
c00030a3:	53                   	push   ebx
c00030a4:	83 ec 1c             	sub    esp,0x1c
c00030a7:	85 d2                	test   edx,edx
c00030a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00030ad:	8b 30                	mov    esi,DWORD PTR [eax]
c00030af:	75 0e                	jne    c00030bf <create_chain+0x21>
c00030b1:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00030b4:	85 ff                	test   edi,edi
c00030b6:	74 39                	je     c00030f1 <create_chain+0x53>
c00030b8:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00030bb:	77 39                	ja     c00030f6 <create_chain+0x58>
c00030bd:	eb 32                	jmp    c00030f1 <create_chain+0x53>
c00030bf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00030c3:	e8 e8 fc ff ff       	call   c0002db0 <get_fat>
c00030c8:	89 c3                	mov    ebx,eax
c00030ca:	83 f8 01             	cmp    eax,0x1
c00030cd:	77 0a                	ja     c00030d9 <create_chain+0x3b>
c00030cf:	bb 01 00 00 00       	mov    ebx,0x1
c00030d4:	e9 ba 01 00 00       	jmp    c0003293 <create_chain+0x1f5>
c00030d9:	83 f8 ff             	cmp    eax,0xffffffff
c00030dc:	0f 84 62 01 00 00    	je     c0003244 <create_chain+0x1a6>
c00030e2:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00030e5:	0f 87 a8 01 00 00    	ja     c0003293 <create_chain+0x1f5>
c00030eb:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00030ef:	eb 05                	jmp    c00030f6 <create_chain+0x58>
c00030f1:	bf 01 00 00 00       	mov    edi,0x1
c00030f6:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00030fa:	75 07                	jne    c0003103 <create_chain+0x65>
c00030fc:	31 db                	xor    ebx,ebx
c00030fe:	e9 90 01 00 00       	jmp    c0003293 <create_chain+0x1f5>
c0003103:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003106:	75 74                	jne    c000317c <create_chain+0xde>
c0003108:	b9 01 00 00 00       	mov    ecx,0x1
c000310d:	89 fa                	mov    edx,edi
c000310f:	89 f0                	mov    eax,esi
c0003111:	e8 2d f9 ff ff       	call   c0002a43 <find_bitmap>
c0003116:	89 c3                	mov    ebx,eax
c0003118:	8d 40 ff             	lea    eax,[eax-0x1]
c000311b:	83 f8 fd             	cmp    eax,0xfffffffd
c000311e:	0f 87 6f 01 00 00    	ja     c0003293 <create_chain+0x1f5>
c0003124:	83 ec 0c             	sub    esp,0xc
c0003127:	b9 01 00 00 00       	mov    ecx,0x1
c000312c:	6a 01                	push   0x1
c000312e:	89 da                	mov    edx,ebx
c0003130:	89 f0                	mov    eax,esi
c0003132:	e8 bf f9 ff ff       	call   c0002af6 <change_bitmap>
c0003137:	83 c4 10             	add    esp,0x10
c000313a:	83 f8 02             	cmp    eax,0x2
c000313d:	74 90                	je     c00030cf <create_chain+0x31>
c000313f:	83 f8 01             	cmp    eax,0x1
c0003142:	0f 84 fc 00 00 00    	je     c0003244 <create_chain+0x1a6>
c0003148:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000314d:	75 09                	jne    c0003158 <create_chain+0xba>
c000314f:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003153:	e9 0c 01 00 00       	jmp    c0003264 <create_chain+0x1c6>
c0003158:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c000315c:	0f 85 e7 00 00 00    	jne    c0003249 <create_chain+0x1ab>
c0003162:	8d 57 01             	lea    edx,[edi+0x1]
c0003165:	39 da                	cmp    edx,ebx
c0003167:	0f 84 f7 00 00 00    	je     c0003264 <create_chain+0x1c6>
c000316d:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003170:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003174:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003177:	e9 cd 00 00 00       	jmp    c0003249 <create_chain+0x1ab>
c000317c:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003180:	75 41                	jne    c00031c3 <create_chain+0x125>
c0003182:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003185:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003188:	77 05                	ja     c000318f <create_chain+0xf1>
c000318a:	bb 02 00 00 00       	mov    ebx,0x2
c000318f:	89 da                	mov    edx,ebx
c0003191:	89 e8                	mov    eax,ebp
c0003193:	e8 18 fc ff ff       	call   c0002db0 <get_fat>
c0003198:	83 f8 01             	cmp    eax,0x1
c000319b:	0f 84 2e ff ff ff    	je     c00030cf <create_chain+0x31>
c00031a1:	83 f8 ff             	cmp    eax,0xffffffff
c00031a4:	0f 84 9a 00 00 00    	je     c0003244 <create_chain+0x1a6>
c00031aa:	85 c0                	test   eax,eax
c00031ac:	74 11                	je     c00031bf <create_chain+0x121>
c00031ae:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00031b1:	83 f8 01             	cmp    eax,0x1
c00031b4:	76 0d                	jbe    c00031c3 <create_chain+0x125>
c00031b6:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00031b9:	76 08                	jbe    c00031c3 <create_chain+0x125>
c00031bb:	89 c7                	mov    edi,eax
c00031bd:	eb 04                	jmp    c00031c3 <create_chain+0x125>
c00031bf:	85 db                	test   ebx,ebx
c00031c1:	75 38                	jne    c00031fb <create_chain+0x15d>
c00031c3:	89 fb                	mov    ebx,edi
c00031c5:	43                   	inc    ebx
c00031c6:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00031c9:	77 0e                	ja     c00031d9 <create_chain+0x13b>
c00031cb:	83 ff 01             	cmp    edi,0x1
c00031ce:	0f 86 28 ff ff ff    	jbe    c00030fc <create_chain+0x5e>
c00031d4:	bb 02 00 00 00       	mov    ebx,0x2
c00031d9:	89 da                	mov    edx,ebx
c00031db:	89 e8                	mov    eax,ebp
c00031dd:	e8 ce fb ff ff       	call   c0002db0 <get_fat>
c00031e2:	85 c0                	test   eax,eax
c00031e4:	74 15                	je     c00031fb <create_chain+0x15d>
c00031e6:	83 f8 01             	cmp    eax,0x1
c00031e9:	0f 84 e0 fe ff ff    	je     c00030cf <create_chain+0x31>
c00031ef:	40                   	inc    eax
c00031f0:	74 52                	je     c0003244 <create_chain+0x1a6>
c00031f2:	39 fb                	cmp    ebx,edi
c00031f4:	75 cf                	jne    c00031c5 <create_chain+0x127>
c00031f6:	e9 01 ff ff ff       	jmp    c00030fc <create_chain+0x5e>
c00031fb:	83 c9 ff             	or     ecx,0xffffffff
c00031fe:	89 da                	mov    edx,ebx
c0003200:	89 f0                	mov    eax,esi
c0003202:	e8 a4 f9 ff ff       	call   c0002bab <put_fat>
c0003207:	85 c0                	test   eax,eax
c0003209:	75 32                	jne    c000323d <create_chain+0x19f>
c000320b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003210:	74 11                	je     c0003223 <create_chain+0x185>
c0003212:	89 d9                	mov    ecx,ebx
c0003214:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003218:	89 f0                	mov    eax,esi
c000321a:	e8 8c f9 ff ff       	call   c0002bab <put_fat>
c000321f:	85 c0                	test   eax,eax
c0003221:	75 1a                	jne    c000323d <create_chain+0x19f>
c0003223:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003226:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003229:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c000322c:	8d 51 fe             	lea    edx,[ecx-0x2]
c000322f:	39 d0                	cmp    eax,edx
c0003231:	77 04                	ja     c0003237 <create_chain+0x199>
c0003233:	48                   	dec    eax
c0003234:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003237:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000323b:	eb 56                	jmp    c0003293 <create_chain+0x1f5>
c000323d:	48                   	dec    eax
c000323e:	0f 85 8b fe ff ff    	jne    c00030cf <create_chain+0x31>
c0003244:	83 cb ff             	or     ebx,0xffffffff
c0003247:	eb 4a                	jmp    c0003293 <create_chain+0x1f5>
c0003249:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000324d:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003250:	41                   	inc    ecx
c0003251:	39 d9                	cmp    ecx,ebx
c0003253:	75 19                	jne    c000326e <create_chain+0x1d0>
c0003255:	b9 02 00 00 00       	mov    ecx,0x2
c000325a:	85 d2                	test   edx,edx
c000325c:	74 03                	je     c0003261 <create_chain+0x1c3>
c000325e:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003261:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003264:	85 c0                	test   eax,eax
c0003266:	0f 85 63 fe ff ff    	jne    c00030cf <create_chain+0x31>
c000326c:	eb b5                	jmp    c0003223 <create_chain+0x185>
c000326e:	85 d2                	test   edx,edx
c0003270:	75 07                	jne    c0003279 <create_chain+0x1db>
c0003272:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003279:	89 d9                	mov    ecx,ebx
c000327b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000327f:	89 e8                	mov    eax,ebp
c0003281:	e8 bb fa ff ff       	call   c0002d41 <fill_last_frag>
c0003286:	85 c0                	test   eax,eax
c0003288:	75 b3                	jne    c000323d <create_chain+0x19f>
c000328a:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003291:	eb 90                	jmp    c0003223 <create_chain+0x185>
c0003293:	83 c4 1c             	add    esp,0x1c
c0003296:	89 d8                	mov    eax,ebx
c0003298:	5b                   	pop    ebx
c0003299:	5e                   	pop    esi
c000329a:	5f                   	pop    edi
c000329b:	5d                   	pop    ebp
c000329c:	c3                   	ret    

c000329d <remove_chain>:
c000329d:	55                   	push   ebp
c000329e:	57                   	push   edi
c000329f:	56                   	push   esi
c00032a0:	53                   	push   ebx
c00032a1:	83 ec 1c             	sub    esp,0x1c
c00032a4:	83 fa 01             	cmp    edx,0x1
c00032a7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00032ab:	8b 18                	mov    ebx,DWORD PTR [eax]
c00032ad:	77 0a                	ja     c00032b9 <remove_chain+0x1c>
c00032af:	b8 02 00 00 00       	mov    eax,0x2
c00032b4:	e9 24 01 00 00       	jmp    c00033dd <remove_chain+0x140>
c00032b9:	89 d6                	mov    esi,edx
c00032bb:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00032be:	76 ef                	jbe    c00032af <remove_chain+0x12>
c00032c0:	89 c7                	mov    edi,eax
c00032c2:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00032c7:	75 06                	jne    c00032cf <remove_chain+0x32>
c00032c9:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00032cd:	eb 54                	jmp    c0003323 <remove_chain+0x86>
c00032cf:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032d2:	75 06                	jne    c00032da <remove_chain+0x3d>
c00032d4:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00032d8:	74 ef                	je     c00032c9 <remove_chain+0x2c>
c00032da:	83 c9 ff             	or     ecx,0xffffffff
c00032dd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00032e1:	89 d8                	mov    eax,ebx
c00032e3:	e8 c3 f8 ff ff       	call   c0002bab <put_fat>
c00032e8:	85 c0                	test   eax,eax
c00032ea:	74 dd                	je     c00032c9 <remove_chain+0x2c>
c00032ec:	e9 ec 00 00 00       	jmp    c00033dd <remove_chain+0x140>
c00032f1:	83 f8 01             	cmp    eax,0x1
c00032f4:	74 b9                	je     c00032af <remove_chain+0x12>
c00032f6:	83 f8 ff             	cmp    eax,0xffffffff
c00032f9:	74 6d                	je     c0003368 <remove_chain+0xcb>
c00032fb:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032fe:	75 6f                	jne    c000336f <remove_chain+0xd2>
c0003300:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003303:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c0003306:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003309:	39 d0                	cmp    eax,edx
c000330b:	73 08                	jae    c0003315 <remove_chain+0x78>
c000330d:	40                   	inc    eax
c000330e:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003312:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003315:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003318:	39 e9                	cmp    ecx,ebp
c000331a:	75 64                	jne    c0003380 <remove_chain+0xe3>
c000331c:	89 ee                	mov    esi,ebp
c000331e:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003321:	76 0f                	jbe    c0003332 <remove_chain+0x95>
c0003323:	89 f2                	mov    edx,esi
c0003325:	89 f8                	mov    eax,edi
c0003327:	e8 84 fa ff ff       	call   c0002db0 <get_fat>
c000332c:	89 c5                	mov    ebp,eax
c000332e:	85 c0                	test   eax,eax
c0003330:	75 bf                	jne    c00032f1 <remove_chain+0x54>
c0003332:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003335:	0f 85 a0 00 00 00    	jne    c00033db <remove_chain+0x13e>
c000333b:	eb 6c                	jmp    c00033a9 <remove_chain+0x10c>
c000333d:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003340:	84 c0                	test   al,al
c0003342:	75 7d                	jne    c00033c1 <remove_chain+0x124>
c0003344:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003347:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c000334b:	0f 84 86 00 00 00    	je     c00033d7 <remove_chain+0x13a>
c0003351:	89 da                	mov    edx,ebx
c0003353:	89 f8                	mov    eax,edi
c0003355:	e8 56 fa ff ff       	call   c0002db0 <get_fat>
c000335a:	83 f8 01             	cmp    eax,0x1
c000335d:	0f 86 4c ff ff ff    	jbe    c00032af <remove_chain+0x12>
c0003363:	83 f8 ff             	cmp    eax,0xffffffff
c0003366:	75 4e                	jne    c00033b6 <remove_chain+0x119>
c0003368:	b8 01 00 00 00       	mov    eax,0x1
c000336d:	eb 6e                	jmp    c00033dd <remove_chain+0x140>
c000336f:	31 c9                	xor    ecx,ecx
c0003371:	89 f2                	mov    edx,esi
c0003373:	89 d8                	mov    eax,ebx
c0003375:	e8 31 f8 ff ff       	call   c0002bab <put_fat>
c000337a:	85 c0                	test   eax,eax
c000337c:	74 82                	je     c0003300 <remove_chain+0x63>
c000337e:	eb 5d                	jmp    c00033dd <remove_chain+0x140>
c0003380:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003383:	75 1b                	jne    c00033a0 <remove_chain+0x103>
c0003385:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003389:	89 d8                	mov    eax,ebx
c000338b:	83 ec 0c             	sub    esp,0xc
c000338e:	6a 00                	push   0x0
c0003390:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003394:	e8 5d f7 ff ff       	call   c0002af6 <change_bitmap>
c0003399:	83 c4 10             	add    esp,0x10
c000339c:	85 c0                	test   eax,eax
c000339e:	75 3d                	jne    c00033dd <remove_chain+0x140>
c00033a0:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00033a4:	e9 73 ff ff ff       	jmp    c000331c <remove_chain+0x7f>
c00033a9:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00033ae:	75 8d                	jne    c000333d <remove_chain+0xa0>
c00033b0:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00033b4:	eb 25                	jmp    c00033db <remove_chain+0x13e>
c00033b6:	8d 53 01             	lea    edx,[ebx+0x1]
c00033b9:	89 c3                	mov    ebx,eax
c00033bb:	39 c2                	cmp    edx,eax
c00033bd:	74 88                	je     c0003347 <remove_chain+0xaa>
c00033bf:	eb 1a                	jmp    c00033db <remove_chain+0x13e>
c00033c1:	3c 03                	cmp    al,0x3
c00033c3:	75 16                	jne    c00033db <remove_chain+0x13e>
c00033c5:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00033c8:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00033cc:	77 0d                	ja     c00033db <remove_chain+0x13e>
c00033ce:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00033d1:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00033d5:	72 04                	jb     c00033db <remove_chain+0x13e>
c00033d7:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00033db:	31 c0                	xor    eax,eax
c00033dd:	83 c4 1c             	add    esp,0x1c
c00033e0:	5b                   	pop    ebx
c00033e1:	5e                   	pop    esi
c00033e2:	5f                   	pop    edi
c00033e3:	5d                   	pop    ebp
c00033e4:	c3                   	ret    

c00033e5 <dir_clear>:
c00033e5:	55                   	push   ebp
c00033e6:	57                   	push   edi
c00033e7:	56                   	push   esi
c00033e8:	89 c6                	mov    esi,eax
c00033ea:	53                   	push   ebx
c00033eb:	83 ec 1c             	sub    esp,0x1c
c00033ee:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00033f2:	e8 9d ed ff ff       	call   c0002194 <sync_window>
c00033f7:	85 c0                	test   eax,eax
c00033f9:	0f 85 de 00 00 00    	jne    c00034dd <dir_clear+0xf8>
c00033ff:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003403:	89 f0                	mov    eax,esi
c0003405:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003408:	e8 d6 e8 ff ff       	call   c0001ce3 <clst2sect>
c000340d:	b9 00 02 00 00       	mov    ecx,0x200
c0003412:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003416:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000341a:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c000341d:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003420:	89 e8                	mov    eax,ebp
c0003422:	31 d2                	xor    edx,edx
c0003424:	e8 b5 e6 ff ff       	call   c0001ade <mem_set>
c0003429:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000342d:	c1 e3 09             	shl    ebx,0x9
c0003430:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003436:	76 1f                	jbe    c0003457 <dir_clear+0x72>
c0003438:	bb 00 80 00 00       	mov    ebx,0x8000
c000343d:	eb 18                	jmp    c0003457 <dir_clear+0x72>
c000343f:	83 ec 0c             	sub    esp,0xc
c0003442:	53                   	push   ebx
c0003443:	e8 35 4e 00 00       	call   c000827d <ff_memalloc>
c0003448:	83 c4 10             	add    esp,0x10
c000344b:	89 c7                	mov    edi,eax
c000344d:	85 c0                	test   eax,eax
c000344f:	0f 85 8f 00 00 00    	jne    c00034e4 <dir_clear+0xff>
c0003455:	d1 eb                	shr    ebx,1
c0003457:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000345d:	77 e0                	ja     c000343f <dir_clear+0x5a>
c000345f:	31 db                	xor    ebx,ebx
c0003461:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003465:	39 d8                	cmp    eax,ebx
c0003467:	76 66                	jbe    c00034cf <dir_clear+0xea>
c0003469:	83 ec 0c             	sub    esp,0xc
c000346c:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003470:	6a 01                	push   0x1
c0003472:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003476:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000347a:	55                   	push   ebp
c000347b:	50                   	push   eax
c000347c:	e8 94 e5 ff ff       	call   c0001a15 <disk_write>
c0003481:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003486:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c000348b:	83 c4 20             	add    esp,0x20
c000348e:	85 c0                	test   eax,eax
c0003490:	75 3d                	jne    c00034cf <dir_clear+0xea>
c0003492:	43                   	inc    ebx
c0003493:	eb cc                	jmp    c0003461 <dir_clear+0x7c>
c0003495:	83 ec 0c             	sub    esp,0xc
c0003498:	31 d2                	xor    edx,edx
c000349a:	55                   	push   ebp
c000349b:	89 d8                	mov    eax,ebx
c000349d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00034a1:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00034a5:	52                   	push   edx
c00034a6:	50                   	push   eax
c00034a7:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00034ab:	57                   	push   edi
c00034ac:	50                   	push   eax
c00034ad:	e8 63 e5 ff ff       	call   c0001a15 <disk_write>
c00034b2:	83 c4 20             	add    esp,0x20
c00034b5:	85 c0                	test   eax,eax
c00034b7:	75 0a                	jne    c00034c3 <dir_clear+0xde>
c00034b9:	01 eb                	add    ebx,ebp
c00034bb:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00034bf:	39 d8                	cmp    eax,ebx
c00034c1:	77 d2                	ja     c0003495 <dir_clear+0xb0>
c00034c3:	83 ec 0c             	sub    esp,0xc
c00034c6:	57                   	push   edi
c00034c7:	e8 c7 4d 00 00       	call   c0008293 <ff_memfree>
c00034cc:	83 c4 10             	add    esp,0x10
c00034cf:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00034d3:	39 d8                	cmp    eax,ebx
c00034d5:	0f 95 c0             	setne  al
c00034d8:	0f b6 c0             	movzx  eax,al
c00034db:	eb 19                	jmp    c00034f6 <dir_clear+0x111>
c00034dd:	b8 01 00 00 00       	mov    eax,0x1
c00034e2:	eb 12                	jmp    c00034f6 <dir_clear+0x111>
c00034e4:	89 d9                	mov    ecx,ebx
c00034e6:	31 d2                	xor    edx,edx
c00034e8:	c1 eb 09             	shr    ebx,0x9
c00034eb:	e8 ee e5 ff ff       	call   c0001ade <mem_set>
c00034f0:	89 dd                	mov    ebp,ebx
c00034f2:	31 db                	xor    ebx,ebx
c00034f4:	eb c5                	jmp    c00034bb <dir_clear+0xd6>
c00034f6:	83 c4 1c             	add    esp,0x1c
c00034f9:	5b                   	pop    ebx
c00034fa:	5e                   	pop    esi
c00034fb:	5f                   	pop    edi
c00034fc:	5d                   	pop    ebp
c00034fd:	c3                   	ret    

c00034fe <dir_next>:
c00034fe:	55                   	push   ebp
c00034ff:	57                   	push   edi
c0003500:	56                   	push   esi
c0003501:	53                   	push   ebx
c0003502:	89 c3                	mov    ebx,eax
c0003504:	83 ec 1c             	sub    esp,0x1c
c0003507:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003509:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000350d:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003510:	8d 78 20             	lea    edi,[eax+0x20]
c0003513:	31 c0                	xor    eax,eax
c0003515:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003519:	0f 94 c0             	sete   al
c000351c:	48                   	dec    eax
c000351d:	25 00 00 20 f0       	and    eax,0xf0200000
c0003522:	05 00 00 00 10       	add    eax,0x10000000
c0003527:	39 f8                	cmp    eax,edi
c0003529:	77 0e                	ja     c0003539 <dir_next+0x3b>
c000352b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003532:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003539:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000353c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000353f:	b8 04 00 00 00       	mov    eax,0x4
c0003544:	89 ce                	mov    esi,ecx
c0003546:	09 d6                	or     esi,edx
c0003548:	0f 84 da 00 00 00    	je     c0003628 <dir_next+0x12a>
c000354e:	89 f8                	mov    eax,edi
c0003550:	25 ff 01 00 00       	and    eax,0x1ff
c0003555:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003559:	0f 85 b9 00 00 00    	jne    c0003618 <dir_next+0x11a>
c000355f:	83 c2 01             	add    edx,0x1
c0003562:	83 d1 00             	adc    ecx,0x0
c0003565:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003568:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000356b:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000356e:	85 d2                	test   edx,edx
c0003570:	75 29                	jne    c000359b <dir_next+0x9d>
c0003572:	89 fa                	mov    edx,edi
c0003574:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003578:	c1 ea 05             	shr    edx,0x5
c000357b:	39 c2                	cmp    edx,eax
c000357d:	0f 82 95 00 00 00    	jb     c0003618 <dir_next+0x11a>
c0003583:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000358a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003591:	b8 04 00 00 00       	mov    eax,0x4
c0003596:	e9 8d 00 00 00       	jmp    c0003628 <dir_next+0x12a>
c000359b:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000359f:	89 f9                	mov    ecx,edi
c00035a1:	48                   	dec    eax
c00035a2:	c1 e9 09             	shr    ecx,0x9
c00035a5:	85 c8                	test   eax,ecx
c00035a7:	75 6f                	jne    c0003618 <dir_next+0x11a>
c00035a9:	89 d8                	mov    eax,ebx
c00035ab:	e8 00 f8 ff ff       	call   c0002db0 <get_fat>
c00035b0:	89 c6                	mov    esi,eax
c00035b2:	83 f8 01             	cmp    eax,0x1
c00035b5:	77 07                	ja     c00035be <dir_next+0xc0>
c00035b7:	b8 02 00 00 00       	mov    eax,0x2
c00035bc:	eb 6a                	jmp    c0003628 <dir_next+0x12a>
c00035be:	83 f8 ff             	cmp    eax,0xffffffff
c00035c1:	75 07                	jne    c00035ca <dir_next+0xcc>
c00035c3:	b8 01 00 00 00       	mov    eax,0x1
c00035c8:	eb 5e                	jmp    c0003628 <dir_next+0x12a>
c00035ca:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00035cd:	77 37                	ja     c0003606 <dir_next+0x108>
c00035cf:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00035d4:	74 ad                	je     c0003583 <dir_next+0x85>
c00035d6:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00035d9:	89 d8                	mov    eax,ebx
c00035db:	e8 be fa ff ff       	call   c000309e <create_chain>
c00035e0:	89 c6                	mov    esi,eax
c00035e2:	b8 07 00 00 00       	mov    eax,0x7
c00035e7:	85 f6                	test   esi,esi
c00035e9:	74 3d                	je     c0003628 <dir_next+0x12a>
c00035eb:	83 fe 01             	cmp    esi,0x1
c00035ee:	74 c7                	je     c00035b7 <dir_next+0xb9>
c00035f0:	83 fe ff             	cmp    esi,0xffffffff
c00035f3:	74 ce                	je     c00035c3 <dir_next+0xc5>
c00035f5:	89 f2                	mov    edx,esi
c00035f7:	89 e8                	mov    eax,ebp
c00035f9:	e8 e7 fd ff ff       	call   c00033e5 <dir_clear>
c00035fe:	85 c0                	test   eax,eax
c0003600:	75 c1                	jne    c00035c3 <dir_next+0xc5>
c0003602:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c0003606:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003609:	89 f2                	mov    edx,esi
c000360b:	89 e8                	mov    eax,ebp
c000360d:	e8 d1 e6 ff ff       	call   c0001ce3 <clst2sect>
c0003612:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003615:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003618:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000361c:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c000361f:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003623:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003626:	31 c0                	xor    eax,eax
c0003628:	83 c4 1c             	add    esp,0x1c
c000362b:	5b                   	pop    ebx
c000362c:	5e                   	pop    esi
c000362d:	5f                   	pop    edi
c000362e:	5d                   	pop    ebp
c000362f:	c3                   	ret    

c0003630 <load_xdir>:
c0003630:	55                   	push   ebp
c0003631:	57                   	push   edi
c0003632:	56                   	push   esi
c0003633:	89 c6                	mov    esi,eax
c0003635:	53                   	push   ebx
c0003636:	83 ec 1c             	sub    esp,0x1c
c0003639:	8b 00                	mov    eax,DWORD PTR [eax]
c000363b:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000363e:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003641:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003644:	e8 df eb ff ff       	call   c0002228 <move_window>
c0003649:	89 c3                	mov    ebx,eax
c000364b:	85 c0                	test   eax,eax
c000364d:	0f 85 0c 01 00 00    	jne    c000375f <load_xdir+0x12f>
c0003653:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003656:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003659:	0f 85 fb 00 00 00    	jne    c000375a <load_xdir+0x12a>
c000365f:	89 f8                	mov    eax,edi
c0003661:	b9 20 00 00 00       	mov    ecx,0x20
c0003666:	e8 5e e4 ff ff       	call   c0001ac9 <mem_cpy>
c000366b:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c000366f:	40                   	inc    eax
c0003670:	c1 e0 05             	shl    eax,0x5
c0003673:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003677:	83 e8 60             	sub    eax,0x60
c000367a:	3d 00 02 00 00       	cmp    eax,0x200
c000367f:	0f 87 d5 00 00 00    	ja     c000375a <load_xdir+0x12a>
c0003685:	31 d2                	xor    edx,edx
c0003687:	89 f0                	mov    eax,esi
c0003689:	e8 70 fe ff ff       	call   c00034fe <dir_next>
c000368e:	89 c3                	mov    ebx,eax
c0003690:	83 f8 04             	cmp    eax,0x4
c0003693:	0f 84 c1 00 00 00    	je     c000375a <load_xdir+0x12a>
c0003699:	85 c0                	test   eax,eax
c000369b:	0f 85 be 00 00 00    	jne    c000375f <load_xdir+0x12f>
c00036a1:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00036a4:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00036a7:	8b 06                	mov    eax,DWORD PTR [esi]
c00036a9:	e8 7a eb ff ff       	call   c0002228 <move_window>
c00036ae:	89 c3                	mov    ebx,eax
c00036b0:	85 c0                	test   eax,eax
c00036b2:	0f 85 a7 00 00 00    	jne    c000375f <load_xdir+0x12f>
c00036b8:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00036bb:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00036be:	0f 85 96 00 00 00    	jne    c000375a <load_xdir+0x12a>
c00036c4:	8d 47 20             	lea    eax,[edi+0x20]
c00036c7:	b9 20 00 00 00       	mov    ecx,0x20
c00036cc:	e8 f8 e3 ff ff       	call   c0001ac9 <mem_cpy>
c00036d1:	31 d2                	xor    edx,edx
c00036d3:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00036d7:	b9 0f 00 00 00       	mov    ecx,0xf
c00036dc:	83 c0 2c             	add    eax,0x2c
c00036df:	f7 f1                	div    ecx
c00036e1:	c1 e0 05             	shl    eax,0x5
c00036e4:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00036e8:	77 70                	ja     c000375a <load_xdir+0x12a>
c00036ea:	bd 40 00 00 00       	mov    ebp,0x40
c00036ef:	31 d2                	xor    edx,edx
c00036f1:	89 f0                	mov    eax,esi
c00036f3:	e8 06 fe ff ff       	call   c00034fe <dir_next>
c00036f8:	89 c3                	mov    ebx,eax
c00036fa:	83 f8 04             	cmp    eax,0x4
c00036fd:	74 5b                	je     c000375a <load_xdir+0x12a>
c00036ff:	85 c0                	test   eax,eax
c0003701:	75 5c                	jne    c000375f <load_xdir+0x12f>
c0003703:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003706:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003709:	8b 06                	mov    eax,DWORD PTR [esi]
c000370b:	e8 18 eb ff ff       	call   c0002228 <move_window>
c0003710:	89 c3                	mov    ebx,eax
c0003712:	85 c0                	test   eax,eax
c0003714:	75 49                	jne    c000375f <load_xdir+0x12f>
c0003716:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003719:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c000371c:	75 3c                	jne    c000375a <load_xdir+0x12a>
c000371e:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003724:	77 0d                	ja     c0003733 <load_xdir+0x103>
c0003726:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003729:	b9 20 00 00 00       	mov    ecx,0x20
c000372e:	e8 96 e3 ff ff       	call   c0001ac9 <mem_cpy>
c0003733:	83 c5 20             	add    ebp,0x20
c0003736:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000373a:	77 b3                	ja     c00036ef <load_xdir+0xbf>
c000373c:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003742:	77 1b                	ja     c000375f <load_xdir+0x12f>
c0003744:	89 f8                	mov    eax,edi
c0003746:	e8 cd e7 ff ff       	call   c0001f18 <xdir_sum>
c000374b:	89 c1                	mov    ecx,eax
c000374d:	8d 47 02             	lea    eax,[edi+0x2]
c0003750:	e8 f5 e2 ff ff       	call   c0001a4a <ld_word>
c0003755:	66 39 c1             	cmp    cx,ax
c0003758:	74 05                	je     c000375f <load_xdir+0x12f>
c000375a:	bb 02 00 00 00       	mov    ebx,0x2
c000375f:	83 c4 1c             	add    esp,0x1c
c0003762:	89 d8                	mov    eax,ebx
c0003764:	5b                   	pop    ebx
c0003765:	5e                   	pop    esi
c0003766:	5f                   	pop    edi
c0003767:	5d                   	pop    ebp
c0003768:	c3                   	ret    

c0003769 <load_obj_xdir>:
c0003769:	53                   	push   ebx
c000376a:	89 c3                	mov    ebx,eax
c000376c:	83 ec 08             	sub    esp,0x8
c000376f:	8b 02                	mov    eax,DWORD PTR [edx]
c0003771:	89 03                	mov    DWORD PTR [ebx],eax
c0003773:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003776:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003779:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000377c:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000377f:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003782:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003789:	30 c0                	xor    al,al
c000378b:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003792:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003795:	89 d8                	mov    eax,ebx
c0003797:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c000379a:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c000379d:	e8 04 f8 ff ff       	call   c0002fa6 <dir_sdi>
c00037a2:	85 c0                	test   eax,eax
c00037a4:	75 0b                	jne    c00037b1 <load_obj_xdir+0x48>
c00037a6:	89 d8                	mov    eax,ebx
c00037a8:	83 c4 08             	add    esp,0x8
c00037ab:	5b                   	pop    ebx
c00037ac:	e9 7f fe ff ff       	jmp    c0003630 <load_xdir>
c00037b1:	83 c4 08             	add    esp,0x8
c00037b4:	5b                   	pop    ebx
c00037b5:	c3                   	ret    

c00037b6 <dir_read>:
c00037b6:	55                   	push   ebp
c00037b7:	bd 04 00 00 00       	mov    ebp,0x4
c00037bc:	57                   	push   edi
c00037bd:	56                   	push   esi
c00037be:	be ff ff ff ff       	mov    esi,0xffffffff
c00037c3:	53                   	push   ebx
c00037c4:	89 c3                	mov    ebx,eax
c00037c6:	83 ec 1c             	sub    esp,0x1c
c00037c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00037cd:	8b 38                	mov    edi,DWORD PTR [eax]
c00037cf:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00037d4:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00037d7:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00037da:	89 c8                	mov    eax,ecx
c00037dc:	09 d0                	or     eax,edx
c00037de:	0f 84 25 01 00 00    	je     c0003909 <dir_read+0x153>
c00037e4:	89 f8                	mov    eax,edi
c00037e6:	e8 3d ea ff ff       	call   c0002228 <move_window>
c00037eb:	89 c5                	mov    ebp,eax
c00037ed:	85 c0                	test   eax,eax
c00037ef:	0f 85 23 01 00 00    	jne    c0003918 <dir_read+0x162>
c00037f5:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00037f8:	8a 0a                	mov    cl,BYTE PTR [edx]
c00037fa:	84 c9                	test   cl,cl
c00037fc:	0f 84 11 01 00 00    	je     c0003913 <dir_read+0x15d>
c0003802:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003805:	75 48                	jne    c000384f <dir_read+0x99>
c0003807:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000380c:	74 10                	je     c000381e <dir_read+0x68>
c000380e:	80 f9 83             	cmp    cl,0x83
c0003811:	0f 85 dd 00 00 00    	jne    c00038f4 <dir_read+0x13e>
c0003817:	31 ed                	xor    ebp,ebp
c0003819:	e9 08 01 00 00       	jmp    c0003926 <dir_read+0x170>
c000381e:	80 f9 85             	cmp    cl,0x85
c0003821:	0f 85 cd 00 00 00    	jne    c00038f4 <dir_read+0x13e>
c0003827:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000382a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000382d:	89 d8                	mov    eax,ebx
c000382f:	e8 fc fd ff ff       	call   c0003630 <load_xdir>
c0003834:	89 c5                	mov    ebp,eax
c0003836:	85 c0                	test   eax,eax
c0003838:	0f 85 da 00 00 00    	jne    c0003918 <dir_read+0x162>
c000383e:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003841:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003844:	83 e0 3f             	and    eax,0x3f
c0003847:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000384a:	e9 d7 00 00 00       	jmp    c0003926 <dir_read+0x170>
c000384f:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003852:	83 e0 3f             	and    eax,0x3f
c0003855:	80 f9 2e             	cmp    cl,0x2e
c0003858:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000385c:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000385f:	0f 84 8a 00 00 00    	je     c00038ef <dir_read+0x139>
c0003865:	80 f9 e5             	cmp    cl,0xe5
c0003868:	0f 84 81 00 00 00    	je     c00038ef <dir_read+0x139>
c000386e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003872:	83 e0 1f             	and    eax,0x1f
c0003875:	83 f8 08             	cmp    eax,0x8
c0003878:	0f 94 c0             	sete   al
c000387b:	0f b6 c0             	movzx  eax,al
c000387e:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003882:	75 6b                	jne    c00038ef <dir_read+0x139>
c0003884:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003889:	75 44                	jne    c00038cf <dir_read+0x119>
c000388b:	f6 c1 40             	test   cl,0x40
c000388e:	74 12                	je     c00038a2 <dir_read+0xec>
c0003890:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003893:	83 e1 bf             	and    ecx,0xffffffbf
c0003896:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000389a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000389d:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00038a0:	eb 06                	jmp    c00038a8 <dir_read+0xf2>
c00038a2:	89 f0                	mov    eax,esi
c00038a4:	38 c8                	cmp    al,cl
c00038a6:	75 47                	jne    c00038ef <dir_read+0x139>
c00038a8:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00038ac:	be ff ff ff ff       	mov    esi,0xffffffff
c00038b1:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00038b4:	75 3e                	jne    c00038f4 <dir_read+0x13e>
c00038b6:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00038ba:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00038bd:	e8 8a e4 ff ff       	call   c0001d4c <pick_lfn>
c00038c2:	85 c0                	test   eax,eax
c00038c4:	74 2e                	je     c00038f4 <dir_read+0x13e>
c00038c6:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00038ca:	8d 71 ff             	lea    esi,[ecx-0x1]
c00038cd:	eb 25                	jmp    c00038f4 <dir_read+0x13e>
c00038cf:	89 f0                	mov    eax,esi
c00038d1:	84 c0                	test   al,al
c00038d3:	75 11                	jne    c00038e6 <dir_read+0x130>
c00038d5:	89 d0                	mov    eax,edx
c00038d7:	e8 2a e6 ff ff       	call   c0001f06 <sum_sfn>
c00038dc:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00038e0:	0f 84 31 ff ff ff    	je     c0003817 <dir_read+0x61>
c00038e6:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00038ed:	eb 37                	jmp    c0003926 <dir_read+0x170>
c00038ef:	be ff ff ff ff       	mov    esi,0xffffffff
c00038f4:	31 d2                	xor    edx,edx
c00038f6:	89 d8                	mov    eax,ebx
c00038f8:	e8 01 fc ff ff       	call   c00034fe <dir_next>
c00038fd:	89 c5                	mov    ebp,eax
c00038ff:	85 c0                	test   eax,eax
c0003901:	0f 84 cd fe ff ff    	je     c00037d4 <dir_read+0x1e>
c0003907:	eb 0f                	jmp    c0003918 <dir_read+0x162>
c0003909:	85 ed                	test   ebp,ebp
c000390b:	0f 84 06 ff ff ff    	je     c0003817 <dir_read+0x61>
c0003911:	eb 05                	jmp    c0003918 <dir_read+0x162>
c0003913:	bd 04 00 00 00       	mov    ebp,0x4
c0003918:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000391f:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003926:	83 c4 1c             	add    esp,0x1c
c0003929:	89 e8                	mov    eax,ebp
c000392b:	5b                   	pop    ebx
c000392c:	5e                   	pop    esi
c000392d:	5f                   	pop    edi
c000392e:	5d                   	pop    ebp
c000392f:	c3                   	ret    

c0003930 <dir_alloc>:
c0003930:	55                   	push   ebp
c0003931:	89 d5                	mov    ebp,edx
c0003933:	57                   	push   edi
c0003934:	31 d2                	xor    edx,edx
c0003936:	56                   	push   esi
c0003937:	53                   	push   ebx
c0003938:	89 c3                	mov    ebx,eax
c000393a:	83 ec 0c             	sub    esp,0xc
c000393d:	8b 38                	mov    edi,DWORD PTR [eax]
c000393f:	e8 62 f6 ff ff       	call   c0002fa6 <dir_sdi>
c0003944:	85 c0                	test   eax,eax
c0003946:	75 4e                	jne    c0003996 <dir_alloc+0x66>
c0003948:	31 f6                	xor    esi,esi
c000394a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000394d:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003950:	89 f8                	mov    eax,edi
c0003952:	e8 d1 e8 ff ff       	call   c0002228 <move_window>
c0003957:	85 c0                	test   eax,eax
c0003959:	75 3b                	jne    c0003996 <dir_alloc+0x66>
c000395b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000395e:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003961:	8a 12                	mov    dl,BYTE PTR [edx]
c0003963:	75 07                	jne    c000396c <dir_alloc+0x3c>
c0003965:	f7 d2                	not    edx
c0003967:	c0 ea 07             	shr    dl,0x7
c000396a:	eb 0d                	jmp    c0003979 <dir_alloc+0x49>
c000396c:	84 d2                	test   dl,dl
c000396e:	0f 94 c1             	sete   cl
c0003971:	80 fa e5             	cmp    dl,0xe5
c0003974:	0f 94 c2             	sete   dl
c0003977:	09 ca                	or     edx,ecx
c0003979:	84 d2                	test   dl,dl
c000397b:	74 07                	je     c0003984 <dir_alloc+0x54>
c000397d:	46                   	inc    esi
c000397e:	39 ee                	cmp    esi,ebp
c0003980:	75 04                	jne    c0003986 <dir_alloc+0x56>
c0003982:	eb 1c                	jmp    c00039a0 <dir_alloc+0x70>
c0003984:	31 f6                	xor    esi,esi
c0003986:	ba 01 00 00 00       	mov    edx,0x1
c000398b:	89 d8                	mov    eax,ebx
c000398d:	e8 6c fb ff ff       	call   c00034fe <dir_next>
c0003992:	85 c0                	test   eax,eax
c0003994:	74 b4                	je     c000394a <dir_alloc+0x1a>
c0003996:	83 f8 04             	cmp    eax,0x4
c0003999:	75 05                	jne    c00039a0 <dir_alloc+0x70>
c000399b:	b8 07 00 00 00       	mov    eax,0x7
c00039a0:	83 c4 0c             	add    esp,0xc
c00039a3:	5b                   	pop    ebx
c00039a4:	5e                   	pop    esi
c00039a5:	5f                   	pop    edi
c00039a6:	5d                   	pop    ebp
c00039a7:	c3                   	ret    

c00039a8 <store_xdir>:
c00039a8:	55                   	push   ebp
c00039a9:	57                   	push   edi
c00039aa:	89 c7                	mov    edi,eax
c00039ac:	56                   	push   esi
c00039ad:	53                   	push   ebx
c00039ae:	83 ec 0c             	sub    esp,0xc
c00039b1:	8b 00                	mov    eax,DWORD PTR [eax]
c00039b3:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c00039b6:	89 e8                	mov    eax,ebp
c00039b8:	e8 5b e5 ff ff       	call   c0001f18 <xdir_sum>
c00039bd:	0f b7 d0             	movzx  edx,ax
c00039c0:	8d 45 02             	lea    eax,[ebp+0x2]
c00039c3:	e8 f4 e0 ff ff       	call   c0001abc <st_word>
c00039c8:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c00039cc:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c00039cf:	89 f8                	mov    eax,edi
c00039d1:	e8 d0 f5 ff ff       	call   c0002fa6 <dir_sdi>
c00039d6:	89 c6                	mov    esi,eax
c00039d8:	85 f6                	test   esi,esi
c00039da:	75 3d                	jne    c0003a19 <store_xdir+0x71>
c00039dc:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c00039df:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c00039e2:	8b 07                	mov    eax,DWORD PTR [edi]
c00039e4:	e8 3f e8 ff ff       	call   c0002228 <move_window>
c00039e9:	89 c6                	mov    esi,eax
c00039eb:	85 c0                	test   eax,eax
c00039ed:	75 2a                	jne    c0003a19 <store_xdir+0x71>
c00039ef:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c00039f2:	b9 20 00 00 00       	mov    ecx,0x20
c00039f7:	89 ea                	mov    edx,ebp
c00039f9:	e8 cb e0 ff ff       	call   c0001ac9 <mem_cpy>
c00039fe:	8b 07                	mov    eax,DWORD PTR [edi]
c0003a00:	85 db                	test   ebx,ebx
c0003a02:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003a06:	74 11                	je     c0003a19 <store_xdir+0x71>
c0003a08:	31 d2                	xor    edx,edx
c0003a0a:	89 f8                	mov    eax,edi
c0003a0c:	83 c5 20             	add    ebp,0x20
c0003a0f:	e8 ea fa ff ff       	call   c00034fe <dir_next>
c0003a14:	4b                   	dec    ebx
c0003a15:	89 c6                	mov    esi,eax
c0003a17:	eb bf                	jmp    c00039d8 <store_xdir+0x30>
c0003a19:	89 f0                	mov    eax,esi
c0003a1b:	83 fe 02             	cmp    esi,0x2
c0003a1e:	76 05                	jbe    c0003a25 <store_xdir+0x7d>
c0003a20:	b8 02 00 00 00       	mov    eax,0x2
c0003a25:	83 c4 0c             	add    esp,0xc
c0003a28:	5b                   	pop    ebx
c0003a29:	5e                   	pop    esi
c0003a2a:	5f                   	pop    edi
c0003a2b:	5d                   	pop    ebp
c0003a2c:	c3                   	ret    

c0003a2d <dir_remove>:
c0003a2d:	57                   	push   edi
c0003a2e:	56                   	push   esi
c0003a2f:	53                   	push   ebx
c0003a30:	89 c3                	mov    ebx,eax
c0003a32:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003a35:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a37:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003a3a:	83 fa ff             	cmp    edx,0xffffffff
c0003a3d:	74 09                	je     c0003a48 <dir_remove+0x1b>
c0003a3f:	e8 62 f5 ff ff       	call   c0002fa6 <dir_sdi>
c0003a44:	85 c0                	test   eax,eax
c0003a46:	75 41                	jne    c0003a89 <dir_remove+0x5c>
c0003a48:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a4b:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a4e:	89 f0                	mov    eax,esi
c0003a50:	e8 d3 e7 ff ff       	call   c0002228 <move_window>
c0003a55:	85 c0                	test   eax,eax
c0003a57:	75 26                	jne    c0003a7f <dir_remove+0x52>
c0003a59:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a5c:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003a5f:	75 05                	jne    c0003a66 <dir_remove+0x39>
c0003a61:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003a64:	eb 03                	jmp    c0003a69 <dir_remove+0x3c>
c0003a66:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a69:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a6d:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003a70:	73 17                	jae    c0003a89 <dir_remove+0x5c>
c0003a72:	31 d2                	xor    edx,edx
c0003a74:	89 d8                	mov    eax,ebx
c0003a76:	e8 83 fa ff ff       	call   c00034fe <dir_next>
c0003a7b:	85 c0                	test   eax,eax
c0003a7d:	74 c9                	je     c0003a48 <dir_remove+0x1b>
c0003a7f:	83 f8 04             	cmp    eax,0x4
c0003a82:	75 05                	jne    c0003a89 <dir_remove+0x5c>
c0003a84:	b8 02 00 00 00       	mov    eax,0x2
c0003a89:	5b                   	pop    ebx
c0003a8a:	5e                   	pop    esi
c0003a8b:	5f                   	pop    edi
c0003a8c:	c3                   	ret    

c0003a8d <create_name>:
c0003a8d:	55                   	push   ebp
c0003a8e:	89 d5                	mov    ebp,edx
c0003a90:	57                   	push   edi
c0003a91:	89 c7                	mov    edi,eax
c0003a93:	56                   	push   esi
c0003a94:	31 f6                	xor    esi,esi
c0003a96:	53                   	push   ebx
c0003a97:	83 ec 3c             	sub    esp,0x3c
c0003a9a:	8b 02                	mov    eax,DWORD PTR [edx]
c0003a9c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003aa0:	8b 07                	mov    eax,DWORD PTR [edi]
c0003aa2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003aa5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003aa9:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003aad:	e8 72 e0 ff ff       	call   c0001b24 <tchar2uni>
c0003ab2:	89 c3                	mov    ebx,eax
c0003ab4:	83 f8 ff             	cmp    eax,0xffffffff
c0003ab7:	75 0a                	jne    c0003ac3 <create_name+0x36>
c0003ab9:	b8 06 00 00 00       	mov    eax,0x6
c0003abe:	e9 9e 02 00 00       	jmp    c0003d61 <create_name+0x2d4>
c0003ac3:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ac8:	76 0c                	jbe    c0003ad6 <create_name+0x49>
c0003aca:	c1 e8 10             	shr    eax,0x10
c0003acd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003ad1:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003ad5:	46                   	inc    esi
c0003ad6:	66 83 fb 1f          	cmp    bx,0x1f
c0003ada:	76 4f                	jbe    c0003b2b <create_name+0x9e>
c0003adc:	66 83 fb 5c          	cmp    bx,0x5c
c0003ae0:	74 35                	je     c0003b17 <create_name+0x8a>
c0003ae2:	66 83 fb 2f          	cmp    bx,0x2f
c0003ae6:	74 2f                	je     c0003b17 <create_name+0x8a>
c0003ae8:	66 83 fb 7f          	cmp    bx,0x7f
c0003aec:	77 11                	ja     c0003aff <create_name+0x72>
c0003aee:	0f b7 d3             	movzx  edx,bx
c0003af1:	b8 12 8a 02 c0       	mov    eax,0xc0028a12
c0003af6:	e8 11 e0 ff ff       	call   c0001b0c <chk_chr>
c0003afb:	85 c0                	test   eax,eax
c0003afd:	75 ba                	jne    c0003ab9 <create_name+0x2c>
c0003aff:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003b05:	77 b2                	ja     c0003ab9 <create_name+0x2c>
c0003b07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b0b:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003b0f:	46                   	inc    esi
c0003b10:	eb 97                	jmp    c0003aa9 <create_name+0x1c>
c0003b12:	40                   	inc    eax
c0003b13:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b17:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003b1b:	8a 10                	mov    dl,BYTE PTR [eax]
c0003b1d:	80 fa 2f             	cmp    dl,0x2f
c0003b20:	74 f0                	je     c0003b12 <create_name+0x85>
c0003b22:	80 fa 5c             	cmp    dl,0x5c
c0003b25:	74 eb                	je     c0003b12 <create_name+0x85>
c0003b27:	31 db                	xor    ebx,ebx
c0003b29:	eb 02                	jmp    c0003b2d <create_name+0xa0>
c0003b2b:	b3 04                	mov    bl,0x4
c0003b2d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003b31:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003b34:	85 f6                	test   esi,esi
c0003b36:	74 18                	je     c0003b50 <create_name+0xc3>
c0003b38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b3c:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003b41:	66 83 f8 20          	cmp    ax,0x20
c0003b45:	74 06                	je     c0003b4d <create_name+0xc0>
c0003b47:	66 83 f8 2e          	cmp    ax,0x2e
c0003b4b:	75 03                	jne    c0003b50 <create_name+0xc3>
c0003b4d:	4e                   	dec    esi
c0003b4e:	eb e4                	jmp    c0003b34 <create_name+0xa7>
c0003b50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b54:	31 ed                	xor    ebp,ebp
c0003b56:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003b5c:	85 f6                	test   esi,esi
c0003b5e:	0f 84 55 ff ff ff    	je     c0003ab9 <create_name+0x2c>
c0003b64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b68:	8d 55 01             	lea    edx,[ebp+0x1]
c0003b6b:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003b6f:	66 83 f8 20          	cmp    ax,0x20
c0003b73:	75 04                	jne    c0003b79 <create_name+0xec>
c0003b75:	89 d5                	mov    ebp,edx
c0003b77:	eb eb                	jmp    c0003b64 <create_name+0xd7>
c0003b79:	85 ed                	test   ebp,ebp
c0003b7b:	75 06                	jne    c0003b83 <create_name+0xf6>
c0003b7d:	66 83 f8 2e          	cmp    ax,0x2e
c0003b81:	75 08                	jne    c0003b8b <create_name+0xfe>
c0003b83:	83 cb 03             	or     ebx,0x3
c0003b86:	eb 03                	jmp    c0003b8b <create_name+0xfe>
c0003b88:	4e                   	dec    esi
c0003b89:	74 0c                	je     c0003b97 <create_name+0x10a>
c0003b8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b8f:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003b95:	75 f1                	jne    c0003b88 <create_name+0xfb>
c0003b97:	b9 0b 00 00 00       	mov    ecx,0xb
c0003b9c:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003b9f:	ba 20 00 00 00       	mov    edx,0x20
c0003ba4:	e8 35 df ff ff       	call   c0001ade <mem_set>
c0003ba9:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003bb1:	31 c9                	xor    ecx,ecx
c0003bb3:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003bb8:	8d 45 01             	lea    eax,[ebp+0x1]
c0003bbb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003bbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003bc3:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003bc7:	66 85 ed             	test   bp,bp
c0003bca:	0f 84 30 01 00 00    	je     c0003d00 <create_name+0x273>
c0003bd0:	66 83 fd 20          	cmp    bp,0x20
c0003bd4:	74 10                	je     c0003be6 <create_name+0x159>
c0003bd6:	66 83 fd 2e          	cmp    bp,0x2e
c0003bda:	75 13                	jne    c0003bef <create_name+0x162>
c0003bdc:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003be0:	0f 84 6b 01 00 00    	je     c0003d51 <create_name+0x2c4>
c0003be6:	83 cb 03             	or     ebx,0x3
c0003be9:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003bed:	eb c9                	jmp    c0003bb8 <create_name+0x12b>
c0003bef:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003bf3:	73 0b                	jae    c0003c00 <create_name+0x173>
c0003bf5:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003bf9:	75 47                	jne    c0003c42 <create_name+0x1b5>
c0003bfb:	e9 51 01 00 00       	jmp    c0003d51 <create_name+0x2c4>
c0003c00:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003c05:	75 10                	jne    c0003c17 <create_name+0x18a>
c0003c07:	83 cb 03             	or     ebx,0x3
c0003c0a:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003c12:	e9 e9 00 00 00       	jmp    c0003d00 <create_name+0x273>
c0003c17:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003c1b:	74 0d                	je     c0003c2a <create_name+0x19d>
c0003c1d:	83 cb 03             	or     ebx,0x3
c0003c20:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003c24:	0f 87 d6 00 00 00    	ja     c0003d00 <create_name+0x273>
c0003c2a:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003c2f:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003c33:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003c3b:	b9 08 00 00 00       	mov    ecx,0x8
c0003c40:	eb a7                	jmp    c0003be9 <create_name+0x15c>
c0003c42:	66 83 fd 7f          	cmp    bp,0x7f
c0003c46:	76 68                	jbe    c0003cb0 <create_name+0x223>
c0003c48:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003c4c:	88 da                	mov    dl,bl
c0003c4e:	83 ca 02             	or     edx,0x2
c0003c51:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003c55:	50                   	push   eax
c0003c56:	50                   	push   eax
c0003c57:	68 b5 01 00 00       	push   0x1b5
c0003c5c:	55                   	push   ebp
c0003c5d:	e8 48 46 00 00       	call   c00082aa <ff_uni2oem>
c0003c62:	83 c4 10             	add    esp,0x10
c0003c65:	89 c5                	mov    ebp,eax
c0003c67:	a8 80                	test   al,0x80
c0003c69:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003c6d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003c71:	74 0c                	je     c0003c7f <create_name+0x1f2>
c0003c73:	83 e5 7f             	and    ebp,0x7f
c0003c76:	0f b6 ad 60 89 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd76a0]
c0003c7d:	eb 2a                	jmp    c0003ca9 <create_name+0x21c>
c0003c7f:	66 3d ff 00          	cmp    ax,0xff
c0003c83:	76 24                	jbe    c0003ca9 <create_name+0x21c>
c0003c85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003c89:	48                   	dec    eax
c0003c8a:	39 c8                	cmp    eax,ecx
c0003c8c:	77 0c                	ja     c0003c9a <create_name+0x20d>
c0003c8e:	83 cb 03             	or     ebx,0x3
c0003c91:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003c95:	e9 4f ff ff ff       	jmp    c0003be9 <create_name+0x15c>
c0003c9a:	89 e8                	mov    eax,ebp
c0003c9c:	88 d3                	mov    bl,dl
c0003c9e:	66 c1 e8 08          	shr    ax,0x8
c0003ca2:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ca6:	41                   	inc    ecx
c0003ca7:	eb 4b                	jmp    c0003cf4 <create_name+0x267>
c0003ca9:	88 d3                	mov    bl,dl
c0003cab:	66 85 ed             	test   bp,bp
c0003cae:	74 19                	je     c0003cc9 <create_name+0x23c>
c0003cb0:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003cb4:	0f b7 d5             	movzx  edx,bp
c0003cb7:	b8 1b 8a 02 c0       	mov    eax,0xc0028a1b
c0003cbc:	e8 4b de ff ff       	call   c0001b0c <chk_chr>
c0003cc1:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003cc5:	85 c0                	test   eax,eax
c0003cc7:	74 0a                	je     c0003cd3 <create_name+0x246>
c0003cc9:	83 cb 03             	or     ebx,0x3
c0003ccc:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003cd1:	eb 21                	jmp    c0003cf4 <create_name+0x267>
c0003cd3:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003cd6:	66 83 f8 19          	cmp    ax,0x19
c0003cda:	77 07                	ja     c0003ce3 <create_name+0x256>
c0003cdc:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ce1:	eb 11                	jmp    c0003cf4 <create_name+0x267>
c0003ce3:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003ce6:	66 83 f8 19          	cmp    ax,0x19
c0003cea:	77 08                	ja     c0003cf4 <create_name+0x267>
c0003cec:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003cf1:	83 ed 20             	sub    ebp,0x20
c0003cf4:	89 e8                	mov    eax,ebp
c0003cf6:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003cfa:	41                   	inc    ecx
c0003cfb:	e9 e9 fe ff ff       	jmp    c0003be9 <create_name+0x15c>
c0003d00:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003d04:	75 04                	jne    c0003d0a <create_name+0x27d>
c0003d06:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003d0a:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003d0f:	75 05                	jne    c0003d16 <create_name+0x289>
c0003d11:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003d16:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003d1a:	83 e0 0c             	and    eax,0xc
c0003d1d:	3c 0c                	cmp    al,0xc
c0003d1f:	74 0b                	je     c0003d2c <create_name+0x29f>
c0003d21:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003d25:	83 e0 03             	and    eax,0x3
c0003d28:	3c 03                	cmp    al,0x3
c0003d2a:	75 05                	jne    c0003d31 <create_name+0x2a4>
c0003d2c:	83 cb 02             	or     ebx,0x2
c0003d2f:	eb 19                	jmp    c0003d4a <create_name+0x2bd>
c0003d31:	f6 c3 02             	test   bl,0x2
c0003d34:	75 14                	jne    c0003d4a <create_name+0x2bd>
c0003d36:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003d3b:	74 03                	je     c0003d40 <create_name+0x2b3>
c0003d3d:	83 cb 10             	or     ebx,0x10
c0003d40:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003d45:	74 03                	je     c0003d4a <create_name+0x2bd>
c0003d47:	83 cb 08             	or     ebx,0x8
c0003d4a:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003d4d:	31 c0                	xor    eax,eax
c0003d4f:	eb 10                	jmp    c0003d61 <create_name+0x2d4>
c0003d51:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003d56:	0f 85 ce fe ff ff    	jne    c0003c2a <create_name+0x19d>
c0003d5c:	e9 a6 fe ff ff       	jmp    c0003c07 <create_name+0x17a>
c0003d61:	83 c4 3c             	add    esp,0x3c
c0003d64:	5b                   	pop    ebx
c0003d65:	5e                   	pop    esi
c0003d66:	5f                   	pop    edi
c0003d67:	5d                   	pop    ebp
c0003d68:	c3                   	ret    

c0003d69 <xname_sum>:
c0003d69:	56                   	push   esi
c0003d6a:	53                   	push   ebx
c0003d6b:	89 c6                	mov    esi,eax
c0003d6d:	51                   	push   ecx
c0003d6e:	31 db                	xor    ebx,ebx
c0003d70:	83 c6 02             	add    esi,0x2
c0003d73:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003d77:	66 85 c0             	test   ax,ax
c0003d7a:	74 1f                	je     c0003d9b <xname_sum+0x32>
c0003d7c:	83 ec 0c             	sub    esp,0xc
c0003d7f:	66 d1 cb             	ror    bx,1
c0003d82:	50                   	push   eax
c0003d83:	e8 1e 46 00 00       	call   c00083a6 <ff_wtoupper>
c0003d88:	83 c4 10             	add    esp,0x10
c0003d8b:	0f b6 d0             	movzx  edx,al
c0003d8e:	66 c1 e8 08          	shr    ax,0x8
c0003d92:	01 d3                	add    ebx,edx
c0003d94:	66 d1 cb             	ror    bx,1
c0003d97:	01 c3                	add    ebx,eax
c0003d99:	eb d5                	jmp    c0003d70 <xname_sum+0x7>
c0003d9b:	89 d8                	mov    eax,ebx
c0003d9d:	5a                   	pop    edx
c0003d9e:	5b                   	pop    ebx
c0003d9f:	5e                   	pop    esi
c0003da0:	c3                   	ret    

c0003da1 <create_xdir>:
c0003da1:	55                   	push   ebp
c0003da2:	b9 40 00 00 00       	mov    ecx,0x40
c0003da7:	57                   	push   edi
c0003da8:	bd 01 00 00 00       	mov    ebp,0x1
c0003dad:	56                   	push   esi
c0003dae:	31 ff                	xor    edi,edi
c0003db0:	53                   	push   ebx
c0003db1:	be 40 00 00 00       	mov    esi,0x40
c0003db6:	89 c3                	mov    ebx,eax
c0003db8:	83 ec 1c             	sub    esp,0x1c
c0003dbb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003dbf:	31 d2                	xor    edx,edx
c0003dc1:	e8 18 dd ff ff       	call   c0001ade <mem_set>
c0003dc6:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003dc9:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003dcd:	31 c9                	xor    ecx,ecx
c0003dcf:	8d 46 01             	lea    eax,[esi+0x1]
c0003dd2:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003dd6:	83 c6 02             	add    esi,0x2
c0003dd9:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003ddd:	66 85 ed             	test   bp,bp
c0003de0:	74 12                	je     c0003df4 <create_xdir+0x53>
c0003de2:	0f b6 c1             	movzx  eax,cl
c0003de5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003de9:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003ded:	66 83 fd 01          	cmp    bp,0x1
c0003df1:	80 d9 ff             	sbb    cl,0xff
c0003df4:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003df7:	0f b7 d5             	movzx  edx,bp
c0003dfa:	83 c6 02             	add    esi,0x2
c0003dfd:	e8 ba dc ff ff       	call   c0001abc <st_word>
c0003e02:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003e08:	75 d3                	jne    c0003ddd <create_xdir+0x3c>
c0003e0a:	8d 47 01             	lea    eax,[edi+0x1]
c0003e0d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003e11:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003e15:	0f b6 c1             	movzx  eax,cl
c0003e18:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003e1d:	74 07                	je     c0003e26 <create_xdir+0x85>
c0003e1f:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003e24:	eb a9                	jmp    c0003dcf <create_xdir+0x2e>
c0003e26:	8d 47 02             	lea    eax,[edi+0x2]
c0003e29:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003e2c:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003e2f:	89 d0                	mov    eax,edx
c0003e31:	e8 33 ff ff ff       	call   c0003d69 <xname_sum>
c0003e36:	83 c4 1c             	add    esp,0x1c
c0003e39:	0f b7 d0             	movzx  edx,ax
c0003e3c:	8d 43 24             	lea    eax,[ebx+0x24]
c0003e3f:	5b                   	pop    ebx
c0003e40:	5e                   	pop    esi
c0003e41:	5f                   	pop    edi
c0003e42:	5d                   	pop    ebp
c0003e43:	e9 74 dc ff ff       	jmp    c0001abc <st_word>

c0003e48 <cmp_lfn>:
c0003e48:	55                   	push   ebp
c0003e49:	57                   	push   edi
c0003e4a:	89 d7                	mov    edi,edx
c0003e4c:	56                   	push   esi
c0003e4d:	53                   	push   ebx
c0003e4e:	83 ec 1c             	sub    esp,0x1c
c0003e51:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e55:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003e58:	e8 ed db ff ff       	call   c0001a4a <ld_word>
c0003e5d:	66 85 c0             	test   ax,ax
c0003e60:	74 07                	je     c0003e69 <cmp_lfn+0x21>
c0003e62:	31 c0                	xor    eax,eax
c0003e64:	e9 9a 00 00 00       	jmp    c0003f03 <cmp_lfn+0xbb>
c0003e69:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003e6b:	bd 01 00 00 00       	mov    ebp,0x1
c0003e70:	83 e3 3f             	and    ebx,0x3f
c0003e73:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003e7b:	4b                   	dec    ebx
c0003e7c:	6b db 0d             	imul   ebx,ebx,0xd
c0003e7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003e83:	0f b6 80 e0 89 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd7620]
c0003e8a:	01 f8                	add    eax,edi
c0003e8c:	e8 b9 db ff ff       	call   c0001a4a <ld_word>
c0003e91:	66 85 ed             	test   bp,bp
c0003e94:	89 c6                	mov    esi,eax
c0003e96:	74 3c                	je     c0003ed4 <cmp_lfn+0x8c>
c0003e98:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003e9e:	77 c2                	ja     c0003e62 <cmp_lfn+0x1a>
c0003ea0:	83 ec 0c             	sub    esp,0xc
c0003ea3:	0f b7 c0             	movzx  eax,ax
c0003ea6:	50                   	push   eax
c0003ea7:	e8 fa 44 00 00       	call   c00083a6 <ff_wtoupper>
c0003eac:	89 c5                	mov    ebp,eax
c0003eae:	8d 43 01             	lea    eax,[ebx+0x1]
c0003eb1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003eb5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003eb9:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003ebd:	89 04 24             	mov    DWORD PTR [esp],eax
c0003ec0:	e8 e1 44 00 00       	call   c00083a6 <ff_wtoupper>
c0003ec5:	83 c4 10             	add    esp,0x10
c0003ec8:	39 c5                	cmp    ebp,eax
c0003eca:	75 96                	jne    c0003e62 <cmp_lfn+0x1a>
c0003ecc:	89 f5                	mov    ebp,esi
c0003ece:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003ed2:	eb 04                	jmp    c0003ed8 <cmp_lfn+0x90>
c0003ed4:	66 46                	inc    si
c0003ed6:	75 8a                	jne    c0003e62 <cmp_lfn+0x1a>
c0003ed8:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003edc:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003ee1:	75 9c                	jne    c0003e7f <cmp_lfn+0x37>
c0003ee3:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003ee6:	74 16                	je     c0003efe <cmp_lfn+0xb6>
c0003ee8:	66 85 ed             	test   bp,bp
c0003eeb:	74 11                	je     c0003efe <cmp_lfn+0xb6>
c0003eed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ef1:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003ef6:	0f 94 c0             	sete   al
c0003ef9:	0f b6 c0             	movzx  eax,al
c0003efc:	eb 05                	jmp    c0003f03 <cmp_lfn+0xbb>
c0003efe:	b8 01 00 00 00       	mov    eax,0x1
c0003f03:	83 c4 1c             	add    esp,0x1c
c0003f06:	5b                   	pop    ebx
c0003f07:	5e                   	pop    esi
c0003f08:	5f                   	pop    edi
c0003f09:	5d                   	pop    ebp
c0003f0a:	c3                   	ret    

c0003f0b <dir_find>:
c0003f0b:	55                   	push   ebp
c0003f0c:	31 d2                	xor    edx,edx
c0003f0e:	57                   	push   edi
c0003f0f:	56                   	push   esi
c0003f10:	53                   	push   ebx
c0003f11:	89 c3                	mov    ebx,eax
c0003f13:	83 ec 1c             	sub    esp,0x1c
c0003f16:	8b 30                	mov    esi,DWORD PTR [eax]
c0003f18:	e8 89 f0 ff ff       	call   c0002fa6 <dir_sdi>
c0003f1d:	89 04 24             	mov    DWORD PTR [esp],eax
c0003f20:	85 c0                	test   eax,eax
c0003f22:	0f 85 9e 01 00 00    	jne    c00040c6 <dir_find+0x1bb>
c0003f28:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003f2b:	0f 85 8d 00 00 00    	jne    c0003fbe <dir_find+0xb3>
c0003f31:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f34:	e8 30 fe ff ff       	call   c0003d69 <xname_sum>
c0003f39:	89 c7                	mov    edi,eax
c0003f3b:	31 d2                	xor    edx,edx
c0003f3d:	89 d8                	mov    eax,ebx
c0003f3f:	e8 72 f8 ff ff       	call   c00037b6 <dir_read>
c0003f44:	85 c0                	test   eax,eax
c0003f46:	0f 85 5e 01 00 00    	jne    c00040aa <dir_find+0x19f>
c0003f4c:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003f4f:	8d 41 24             	lea    eax,[ecx+0x24]
c0003f52:	e8 f3 da ff ff       	call   c0001a4a <ld_word>
c0003f57:	66 39 f8             	cmp    ax,di
c0003f5a:	75 df                	jne    c0003f3b <dir_find+0x30>
c0003f5c:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0003f5f:	31 ed                	xor    ebp,ebp
c0003f61:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003f65:	ba 40 00 00 00       	mov    edx,0x40
c0003f6a:	89 e9                	mov    ecx,ebp
c0003f6c:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0003f70:	0f 84 42 01 00 00    	je     c00040b8 <dir_find+0x1ad>
c0003f76:	f6 c2 1f             	test   dl,0x1f
c0003f79:	75 03                	jne    c0003f7e <dir_find+0x73>
c0003f7b:	83 c2 02             	add    edx,0x2
c0003f7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003f82:	89 d0                	mov    eax,edx
c0003f84:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0003f87:	e8 be da ff ff       	call   c0001a4a <ld_word>
c0003f8c:	83 ec 0c             	sub    esp,0xc
c0003f8f:	0f b7 c0             	movzx  eax,ax
c0003f92:	50                   	push   eax
c0003f93:	e8 0e 44 00 00       	call   c00083a6 <ff_wtoupper>
c0003f98:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003f9c:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f9f:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0003fa3:	89 04 24             	mov    DWORD PTR [esp],eax
c0003fa6:	e8 fb 43 00 00       	call   c00083a6 <ff_wtoupper>
c0003fab:	83 c4 10             	add    esp,0x10
c0003fae:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0003fb2:	75 87                	jne    c0003f3b <dir_find+0x30>
c0003fb4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003fb8:	45                   	inc    ebp
c0003fb9:	83 c2 02             	add    edx,0x2
c0003fbc:	eb ac                	jmp    c0003f6a <dir_find+0x5f>
c0003fbe:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003fc5:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c0003fca:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003fcf:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003fd2:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003fd5:	89 f0                	mov    eax,esi
c0003fd7:	e8 4c e2 ff ff       	call   c0002228 <move_window>
c0003fdc:	85 c0                	test   eax,eax
c0003fde:	0f 85 c6 00 00 00    	jne    c00040aa <dir_find+0x19f>
c0003fe4:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0003fe7:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0003fea:	84 c9                	test   cl,cl
c0003fec:	0f 84 bd 00 00 00    	je     c00040af <dir_find+0x1a4>
c0003ff2:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003ff5:	88 d0                	mov    al,dl
c0003ff7:	83 e0 3f             	and    eax,0x3f
c0003ffa:	80 f9 e5             	cmp    cl,0xe5
c0003ffd:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004000:	0f 84 87 00 00 00    	je     c000408d <dir_find+0x182>
c0004006:	80 e2 08             	and    dl,0x8
c0004009:	74 06                	je     c0004011 <dir_find+0x106>
c000400b:	3c 0f                	cmp    al,0xf
c000400d:	75 7e                	jne    c000408d <dir_find+0x182>
c000400f:	eb 04                	jmp    c0004015 <dir_find+0x10a>
c0004011:	3c 0f                	cmp    al,0xf
c0004013:	75 4c                	jne    c0004061 <dir_find+0x156>
c0004015:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004019:	75 7e                	jne    c0004099 <dir_find+0x18e>
c000401b:	f6 c1 40             	test   cl,0x40
c000401e:	74 12                	je     c0004032 <dir_find+0x127>
c0004020:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004023:	83 e1 bf             	and    ecx,0xffffffbf
c0004026:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000402a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000402d:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004030:	eb 06                	jmp    c0004038 <dir_find+0x12d>
c0004032:	89 f8                	mov    eax,edi
c0004034:	38 c8                	cmp    al,cl
c0004036:	75 5c                	jne    c0004094 <dir_find+0x189>
c0004038:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000403c:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004041:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004044:	75 53                	jne    c0004099 <dir_find+0x18e>
c0004046:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c000404a:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000404d:	89 ea                	mov    edx,ebp
c000404f:	e8 f4 fd ff ff       	call   c0003e48 <cmp_lfn>
c0004054:	85 c0                	test   eax,eax
c0004056:	74 41                	je     c0004099 <dir_find+0x18e>
c0004058:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c000405c:	8d 79 ff             	lea    edi,[ecx-0x1]
c000405f:	eb 38                	jmp    c0004099 <dir_find+0x18e>
c0004061:	89 f8                	mov    eax,edi
c0004063:	84 c0                	test   al,al
c0004065:	75 0d                	jne    c0004074 <dir_find+0x169>
c0004067:	89 e8                	mov    eax,ebp
c0004069:	e8 98 de ff ff       	call   c0001f06 <sum_sfn>
c000406e:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004072:	74 52                	je     c00040c6 <dir_find+0x1bb>
c0004074:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004078:	75 13                	jne    c000408d <dir_find+0x182>
c000407a:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000407d:	b9 0b 00 00 00       	mov    ecx,0xb
c0004082:	89 e8                	mov    eax,ebp
c0004084:	e8 60 da ff ff       	call   c0001ae9 <mem_cmp>
c0004089:	85 c0                	test   eax,eax
c000408b:	74 39                	je     c00040c6 <dir_find+0x1bb>
c000408d:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0004094:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004099:	31 d2                	xor    edx,edx
c000409b:	89 d8                	mov    eax,ebx
c000409d:	e8 5c f4 ff ff       	call   c00034fe <dir_next>
c00040a2:	85 c0                	test   eax,eax
c00040a4:	0f 84 25 ff ff ff    	je     c0003fcf <dir_find+0xc4>
c00040aa:	89 04 24             	mov    DWORD PTR [esp],eax
c00040ad:	eb 17                	jmp    c00040c6 <dir_find+0x1bb>
c00040af:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00040b6:	eb 0e                	jmp    c00040c6 <dir_find+0x1bb>
c00040b8:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00040bb:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00040c0:	0f 85 75 fe ff ff    	jne    c0003f3b <dir_find+0x30>
c00040c6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00040c9:	83 c4 1c             	add    esp,0x1c
c00040cc:	5b                   	pop    ebx
c00040cd:	5e                   	pop    esi
c00040ce:	5f                   	pop    edi
c00040cf:	5d                   	pop    ebp
c00040d0:	c3                   	ret    

c00040d1 <dir_register>:
c00040d1:	55                   	push   ebp
c00040d2:	57                   	push   edi
c00040d3:	56                   	push   esi
c00040d4:	be 06 00 00 00       	mov    esi,0x6
c00040d9:	53                   	push   ebx
c00040da:	83 ec 6c             	sub    esp,0x6c
c00040dd:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00040e1:	0f 85 62 02 00 00    	jne    c0004349 <dir_register+0x278>
c00040e7:	8b 28                	mov    ebp,DWORD PTR [eax]
c00040e9:	31 ff                	xor    edi,edi
c00040eb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00040ee:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00040f3:	74 03                	je     c00040f8 <dir_register+0x27>
c00040f5:	47                   	inc    edi
c00040f6:	eb f6                	jmp    c00040ee <dir_register+0x1d>
c00040f8:	89 c3                	mov    ebx,eax
c00040fa:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00040fe:	0f 85 e1 00 00 00    	jne    c00041e5 <dir_register+0x114>
c0004104:	83 c7 0e             	add    edi,0xe
c0004107:	b9 0f 00 00 00       	mov    ecx,0xf
c000410c:	89 f8                	mov    eax,edi
c000410e:	31 d2                	xor    edx,edx
c0004110:	f7 f1                	div    ecx
c0004112:	8d 50 02             	lea    edx,[eax+0x2]
c0004115:	89 c7                	mov    edi,eax
c0004117:	89 d8                	mov    eax,ebx
c0004119:	e8 12 f8 ff ff       	call   c0003930 <dir_alloc>
c000411e:	89 c6                	mov    esi,eax
c0004120:	85 c0                	test   eax,eax
c0004122:	0f 85 21 02 00 00    	jne    c0004349 <dir_register+0x278>
c0004128:	81 c7 01 00 00 08    	add    edi,0x8000001
c000412e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004131:	c1 e7 05             	shl    edi,0x5
c0004134:	29 f8                	sub    eax,edi
c0004136:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004139:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c000413c:	a8 04                	test   al,0x4
c000413e:	0f 84 91 00 00 00    	je     c00041d5 <dir_register+0x104>
c0004144:	83 e0 fb             	and    eax,0xfffffffb
c0004147:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000414a:	89 d8                	mov    eax,ebx
c000414c:	e8 25 ec ff ff       	call   c0002d76 <fill_first_frag>
c0004151:	85 c0                	test   eax,eax
c0004153:	0f 85 ee 01 00 00    	jne    c0004347 <dir_register+0x276>
c0004159:	83 c9 ff             	or     ecx,0xffffffff
c000415c:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000415f:	89 d8                	mov    eax,ebx
c0004161:	e8 db eb ff ff       	call   c0002d41 <fill_last_frag>
c0004166:	85 c0                	test   eax,eax
c0004168:	0f 85 d9 01 00 00    	jne    c0004347 <dir_register+0x276>
c000416e:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004172:	74 61                	je     c00041d5 <dir_register+0x104>
c0004174:	89 da                	mov    edx,ebx
c0004176:	8d 44 24 14          	lea    eax,[esp+0x14]
c000417a:	e8 ea f5 ff ff       	call   c0003769 <load_obj_xdir>
c000417f:	85 c0                	test   eax,eax
c0004181:	0f 85 c0 01 00 00    	jne    c0004347 <dir_register+0x276>
c0004187:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c000418b:	31 c9                	xor    ecx,ecx
c000418d:	c1 e2 09             	shl    edx,0x9
c0004190:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c0004193:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c0004196:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004199:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000419c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000419f:	83 c0 38             	add    eax,0x38
c00041a2:	e8 1c d9 ff ff       	call   c0001ac3 <st_qword>
c00041a7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00041aa:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00041ad:	83 c0 28             	add    eax,0x28
c00041b0:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00041b3:	e8 0b d9 ff ff       	call   c0001ac3 <st_qword>
c00041b8:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00041bb:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00041be:	83 c8 01             	or     eax,0x1
c00041c1:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00041c4:	8d 44 24 14          	lea    eax,[esp+0x14]
c00041c8:	e8 db f7 ff ff       	call   c00039a8 <store_xdir>
c00041cd:	85 c0                	test   eax,eax
c00041cf:	0f 85 72 01 00 00    	jne    c0004347 <dir_register+0x276>
c00041d5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00041d8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00041db:	e8 c1 fb ff ff       	call   c0003da1 <create_xdir>
c00041e0:	e9 64 01 00 00       	jmp    c0004349 <dir_register+0x278>
c00041e5:	8d 40 3c             	lea    eax,[eax+0x3c]
c00041e8:	b9 0c 00 00 00       	mov    ecx,0xc
c00041ed:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00041f1:	89 c2                	mov    edx,eax
c00041f3:	8d 44 24 14          	lea    eax,[esp+0x14]
c00041f7:	e8 cd d8 ff ff       	call   c0001ac9 <mem_cpy>
c00041fc:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004201:	74 58                	je     c000425b <dir_register+0x18a>
c0004203:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c0004207:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000420f:	83 ec 0c             	sub    esp,0xc
c0004212:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004215:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004219:	8d 54 24 24          	lea    edx,[esp+0x24]
c000421d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004221:	e8 24 dc ff ff       	call   c0001e4a <gen_numname>
c0004226:	89 d8                	mov    eax,ebx
c0004228:	e8 de fc ff ff       	call   c0003f0b <dir_find>
c000422d:	83 c4 10             	add    esp,0x10
c0004230:	89 c6                	mov    esi,eax
c0004232:	85 c0                	test   eax,eax
c0004234:	75 15                	jne    c000424b <dir_register+0x17a>
c0004236:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000423a:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c000423f:	75 ce                	jne    c000420f <dir_register+0x13e>
c0004241:	be 07 00 00 00       	mov    esi,0x7
c0004246:	e9 fe 00 00 00       	jmp    c0004349 <dir_register+0x278>
c000424b:	83 f8 04             	cmp    eax,0x4
c000424e:	0f 85 f5 00 00 00    	jne    c0004349 <dir_register+0x278>
c0004254:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004258:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c000425b:	b9 01 00 00 00       	mov    ecx,0x1
c0004260:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004265:	74 0f                	je     c0004276 <dir_register+0x1a5>
c0004267:	b9 0d 00 00 00       	mov    ecx,0xd
c000426c:	8d 47 0c             	lea    eax,[edi+0xc]
c000426f:	31 d2                	xor    edx,edx
c0004271:	f7 f1                	div    ecx
c0004273:	8d 48 01             	lea    ecx,[eax+0x1]
c0004276:	89 ca                	mov    edx,ecx
c0004278:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000427c:	89 d8                	mov    eax,ebx
c000427e:	e8 ad f6 ff ff       	call   c0003930 <dir_alloc>
c0004283:	89 c6                	mov    esi,eax
c0004285:	85 c0                	test   eax,eax
c0004287:	0f 85 bc 00 00 00    	jne    c0004349 <dir_register+0x278>
c000428d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004291:	49                   	dec    ecx
c0004292:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004296:	74 6a                	je     c0004302 <dir_register+0x231>
c0004298:	89 c8                	mov    eax,ecx
c000429a:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000429d:	c1 e0 05             	shl    eax,0x5
c00042a0:	29 c2                	sub    edx,eax
c00042a2:	89 d8                	mov    eax,ebx
c00042a4:	e8 fd ec ff ff       	call   c0002fa6 <dir_sdi>
c00042a9:	89 c6                	mov    esi,eax
c00042ab:	85 c0                	test   eax,eax
c00042ad:	0f 85 96 00 00 00    	jne    c0004349 <dir_register+0x278>
c00042b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00042b7:	e8 4a dc ff ff       	call   c0001f06 <sum_sfn>
c00042bc:	0f b6 f8             	movzx  edi,al
c00042bf:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00042c2:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00042c5:	89 e8                	mov    eax,ebp
c00042c7:	e8 5c df ff ff       	call   c0002228 <move_window>
c00042cc:	89 c6                	mov    esi,eax
c00042ce:	85 c0                	test   eax,eax
c00042d0:	75 77                	jne    c0004349 <dir_register+0x278>
c00042d2:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00042d7:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00042da:	83 ec 0c             	sub    esp,0xc
c00042dd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00042e0:	57                   	push   edi
c00042e1:	e8 e0 da ff ff       	call   c0001dc6 <put_lfn>
c00042e6:	31 d2                	xor    edx,edx
c00042e8:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00042ec:	89 d8                	mov    eax,ebx
c00042ee:	e8 0b f2 ff ff       	call   c00034fe <dir_next>
c00042f3:	83 c4 10             	add    esp,0x10
c00042f6:	89 c6                	mov    esi,eax
c00042f8:	85 c0                	test   eax,eax
c00042fa:	75 4d                	jne    c0004349 <dir_register+0x278>
c00042fc:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004300:	75 bd                	jne    c00042bf <dir_register+0x1ee>
c0004302:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004305:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004308:	89 e8                	mov    eax,ebp
c000430a:	e8 19 df ff ff       	call   c0002228 <move_window>
c000430f:	89 c6                	mov    esi,eax
c0004311:	85 c0                	test   eax,eax
c0004313:	75 34                	jne    c0004349 <dir_register+0x278>
c0004315:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004318:	b9 20 00 00 00       	mov    ecx,0x20
c000431d:	31 d2                	xor    edx,edx
c000431f:	e8 ba d7 ff ff       	call   c0001ade <mem_set>
c0004324:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004327:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000432b:	b9 0b 00 00 00       	mov    ecx,0xb
c0004330:	e8 94 d7 ff ff       	call   c0001ac9 <mem_cpy>
c0004335:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004338:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000433b:	83 e0 18             	and    eax,0x18
c000433e:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004341:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004345:	eb 02                	jmp    c0004349 <dir_register+0x278>
c0004347:	89 c6                	mov    esi,eax
c0004349:	83 c4 6c             	add    esp,0x6c
c000434c:	89 f0                	mov    eax,esi
c000434e:	5b                   	pop    ebx
c000434f:	5e                   	pop    esi
c0004350:	5f                   	pop    edi
c0004351:	5d                   	pop    ebp
c0004352:	c3                   	ret    

c0004353 <sync_fs>:
c0004353:	56                   	push   esi
c0004354:	53                   	push   ebx
c0004355:	53                   	push   ebx
c0004356:	89 c3                	mov    ebx,eax
c0004358:	e8 37 de ff ff       	call   c0002194 <sync_window>
c000435d:	85 c0                	test   eax,eax
c000435f:	0f 85 b1 00 00 00    	jne    c0004416 <sync_fs+0xc3>
c0004365:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004368:	0f 85 8e 00 00 00    	jne    c00043fc <sync_fs+0xa9>
c000436e:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004372:	0f 85 84 00 00 00    	jne    c00043fc <sync_fs+0xa9>
c0004378:	b9 00 02 00 00       	mov    ecx,0x200
c000437d:	8d 73 54             	lea    esi,[ebx+0x54]
c0004380:	31 d2                	xor    edx,edx
c0004382:	89 f0                	mov    eax,esi
c0004384:	e8 55 d7 ff ff       	call   c0001ade <mem_set>
c0004389:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c000438f:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004394:	e8 23 d7 ff ff       	call   c0001abc <st_word>
c0004399:	ba 52 52 61 41       	mov    edx,0x41615252
c000439e:	89 f0                	mov    eax,esi
c00043a0:	e8 1b d7 ff ff       	call   c0001ac0 <st_dword>
c00043a5:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00043ab:	ba 72 72 41 61       	mov    edx,0x61417272
c00043b0:	e8 0b d7 ff ff       	call   c0001ac0 <st_dword>
c00043b5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00043b8:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00043be:	e8 fd d6 ff ff       	call   c0001ac0 <st_dword>
c00043c3:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00043c6:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00043cc:	e8 ef d6 ff ff       	call   c0001ac0 <st_dword>
c00043d1:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00043d4:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00043d7:	83 c0 01             	add    eax,0x1
c00043da:	83 d2 00             	adc    edx,0x0
c00043dd:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00043e0:	83 ec 0c             	sub    esp,0xc
c00043e3:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00043e6:	6a 01                	push   0x1
c00043e8:	52                   	push   edx
c00043e9:	50                   	push   eax
c00043ea:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043ee:	56                   	push   esi
c00043ef:	50                   	push   eax
c00043f0:	e8 20 d6 ff ff       	call   c0001a15 <disk_write>
c00043f5:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00043f9:	83 c4 20             	add    esp,0x20
c00043fc:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004400:	51                   	push   ecx
c0004401:	6a 00                	push   0x0
c0004403:	6a 00                	push   0x0
c0004405:	50                   	push   eax
c0004406:	e8 20 d6 ff ff       	call   c0001a2b <disk_ioctl>
c000440b:	83 c4 10             	add    esp,0x10
c000440e:	85 c0                	test   eax,eax
c0004410:	0f 95 c0             	setne  al
c0004413:	0f b6 c0             	movzx  eax,al
c0004416:	5a                   	pop    edx
c0004417:	5b                   	pop    ebx
c0004418:	5e                   	pop    esi
c0004419:	c3                   	ret    

c000441a <create_partition>:
c000441a:	55                   	push   ebp
c000441b:	0f b6 c0             	movzx  eax,al
c000441e:	57                   	push   edi
c000441f:	56                   	push   esi
c0004420:	53                   	push   ebx
c0004421:	83 ec 60             	sub    esp,0x60
c0004424:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004428:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000442c:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004430:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004434:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004438:	50                   	push   eax
c0004439:	6a 01                	push   0x1
c000443b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000443f:	e8 e7 d5 ff ff       	call   c0001a2b <disk_ioctl>
c0004444:	83 c4 10             	add    esp,0x10
c0004447:	85 c0                	test   eax,eax
c0004449:	74 0a                	je     c0004455 <create_partition+0x3b>
c000444b:	b8 01 00 00 00       	mov    eax,0x1
c0004450:	e9 67 05 00 00       	jmp    c00049bc <create_partition+0x5a2>
c0004455:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004459:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000445d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004461:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004465:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000446a:	0f 86 ed 03 00 00    	jbe    c000485d <create_partition+0x443>
c0004470:	83 c0 df             	add    eax,0xffffffdf
c0004473:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000447b:	83 d2 ff             	adc    edx,0xffffffff
c000447e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004482:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004486:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000448a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000448e:	83 c0 bd             	add    eax,0xffffffbd
c0004491:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0004498:	83 d2 ff             	adc    edx,0xffffffff
c000449b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000449f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00044a3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00044ab:	be 22 00 00 00       	mov    esi,0x22
c00044b0:	31 ff                	xor    edi,edi
c00044b2:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00044ba:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00044c2:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00044ca:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00044ce:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00044d4:	75 0e                	jne    c00044e4 <create_partition+0xca>
c00044d6:	b9 00 02 00 00       	mov    ecx,0x200
c00044db:	31 d2                	xor    edx,edx
c00044dd:	89 d8                	mov    eax,ebx
c00044df:	e8 fa d5 ff ff       	call   c0001ade <mem_set>
c00044e4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00044e8:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00044ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00044f0:	0b 04 24             	or     eax,DWORD PTR [esp]
c00044f3:	0f 84 23 01 00 00    	je     c000461c <create_partition+0x202>
c00044f9:	89 f0                	mov    eax,esi
c00044fb:	89 fa                	mov    edx,edi
c00044fd:	05 ff 07 00 00       	add    eax,0x7ff
c0004502:	83 d2 00             	adc    edx,0x0
c0004505:	89 c1                	mov    ecx,eax
c0004507:	89 d7                	mov    edi,edx
c0004509:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000450f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004513:	89 ce                	mov    esi,ecx
c0004515:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004519:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000451d:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004521:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004524:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004528:	89 04 24             	mov    DWORD PTR [esp],eax
c000452b:	b8 64 00 00 00       	mov    eax,0x64
c0004530:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004533:	b8 00 00 00 00       	mov    eax,0x0
c0004538:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000453c:	72 41                	jb     c000457f <create_partition+0x165>
c000453e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004542:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004546:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c000454a:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000454f:	01 c1                	add    ecx,eax
c0004551:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004555:	f7 24 24             	mul    DWORD PTR [esp]
c0004558:	6a 00                	push   0x0
c000455a:	01 ca                	add    edx,ecx
c000455c:	6a 64                	push   0x64
c000455e:	52                   	push   edx
c000455f:	50                   	push   eax
c0004560:	e8 e7 19 02 00       	call   c0025f4c <__udivdi3>
c0004565:	83 c4 10             	add    esp,0x10
c0004568:	05 ff 07 00 00       	add    eax,0x7ff
c000456d:	83 d2 00             	adc    edx,0x0
c0004570:	89 c1                	mov    ecx,eax
c0004572:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004576:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000457c:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000457f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004582:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004586:	01 f0                	add    eax,esi
c0004588:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000458c:	11 fa                	adc    edx,edi
c000458e:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0004592:	19 d1                	sbb    ecx,edx
c0004594:	73 2e                	jae    c00045c4 <create_partition+0x1aa>
c0004596:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000459a:	89 f8                	mov    eax,edi
c000459c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00045a3:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00045a7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00045af:	73 6b                	jae    c000461c <create_partition+0x202>
c00045b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00045b5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00045b9:	29 f0                	sub    eax,esi
c00045bb:	19 fa                	sbb    edx,edi
c00045bd:	89 04 24             	mov    DWORD PTR [esp],eax
c00045c0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00045c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00045c8:	0b 04 24             	or     eax,DWORD PTR [esp]
c00045cb:	74 4f                	je     c000461c <create_partition+0x202>
c00045cd:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00045d0:	b9 10 00 00 00       	mov    ecx,0x10
c00045d5:	ba f0 89 02 c0       	mov    edx,0xc00289f0
c00045da:	e8 ea d4 ff ff       	call   c0001ac9 <mem_cpy>
c00045df:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00045e3:	b9 10 00 00 00       	mov    ecx,0x10
c00045e8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00045ec:	e8 2c db ff ff       	call   c000211d <make_rand>
c00045f1:	89 f2                	mov    edx,esi
c00045f3:	89 f9                	mov    ecx,edi
c00045f5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00045f9:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00045fd:	e8 c1 d4 ff ff       	call   c0001ac3 <st_qword>
c0004602:	03 34 24             	add    esi,DWORD PTR [esp]
c0004605:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004609:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000460d:	89 f2                	mov    edx,esi
c000460f:	89 f9                	mov    ecx,edi
c0004611:	83 c2 ff             	add    edx,0xffffffff
c0004614:	83 d1 ff             	adc    ecx,0xffffffff
c0004617:	e8 a7 d4 ff ff       	call   c0001ac3 <st_qword>
c000461c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004620:	83 e8 80             	sub    eax,0xffffff80
c0004623:	89 c5                	mov    ebp,eax
c0004625:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004629:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000462f:	75 6b                	jne    c000469c <create_partition+0x282>
c0004631:	45                   	inc    ebp
c0004632:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004636:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c000463b:	e8 39 da ff ff       	call   c0002079 <crc32>
c0004640:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004646:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000464a:	75 e5                	jne    c0004631 <create_partition+0x217>
c000464c:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004650:	31 d2                	xor    edx,edx
c0004652:	83 ec 0c             	sub    esp,0xc
c0004655:	c1 ed 09             	shr    ebp,0x9
c0004658:	6a 01                	push   0x1
c000465a:	8d 45 02             	lea    eax,[ebp+0x2]
c000465d:	52                   	push   edx
c000465e:	50                   	push   eax
c000465f:	53                   	push   ebx
c0004660:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004664:	e8 ac d3 ff ff       	call   c0001a15 <disk_write>
c0004669:	83 c4 20             	add    esp,0x20
c000466c:	85 c0                	test   eax,eax
c000466e:	0f 85 d7 fd ff ff    	jne    c000444b <create_partition+0x31>
c0004674:	83 ec 0c             	sub    esp,0xc
c0004677:	31 d2                	xor    edx,edx
c0004679:	6a 01                	push   0x1
c000467b:	89 e8                	mov    eax,ebp
c000467d:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004681:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004685:	52                   	push   edx
c0004686:	50                   	push   eax
c0004687:	53                   	push   ebx
c0004688:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000468c:	e8 84 d3 ff ff       	call   c0001a15 <disk_write>
c0004691:	83 c4 20             	add    esp,0x20
c0004694:	85 c0                	test   eax,eax
c0004696:	0f 85 af fd ff ff    	jne    c000444b <create_partition+0x31>
c000469c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046a0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00046a4:	3d 00 40 00 00       	cmp    eax,0x4000
c00046a9:	74 0d                	je     c00046b8 <create_partition+0x29e>
c00046ab:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00046af:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00046b3:	e9 12 fe ff ff       	jmp    c00044ca <create_partition+0xb0>
c00046b8:	31 d2                	xor    edx,edx
c00046ba:	b9 00 02 00 00       	mov    ecx,0x200
c00046bf:	89 d8                	mov    eax,ebx
c00046c1:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00046c4:	e8 15 d4 ff ff       	call   c0001ade <mem_set>
c00046c9:	8d 7b 48             	lea    edi,[ebx+0x48]
c00046cc:	b9 10 00 00 00       	mov    ecx,0x10
c00046d1:	ba e0 88 02 c0       	mov    edx,0xc00288e0
c00046d6:	89 d8                	mov    eax,ebx
c00046d8:	e8 ec d3 ff ff       	call   c0001ac9 <mem_cpy>
c00046dd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00046e1:	8d 43 58             	lea    eax,[ebx+0x58]
c00046e4:	f7 d2                	not    edx
c00046e6:	e8 d5 d3 ff ff       	call   c0001ac0 <st_dword>
c00046eb:	8d 43 18             	lea    eax,[ebx+0x18]
c00046ee:	31 c9                	xor    ecx,ecx
c00046f0:	89 04 24             	mov    DWORD PTR [esp],eax
c00046f3:	ba 01 00 00 00       	mov    edx,0x1
c00046f8:	e8 c6 d3 ff ff       	call   c0001ac3 <st_qword>
c00046fd:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004701:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004705:	83 c2 ff             	add    edx,0xffffffff
c0004708:	89 e8                	mov    eax,ebp
c000470a:	83 d1 ff             	adc    ecx,0xffffffff
c000470d:	e8 b1 d3 ff ff       	call   c0001ac3 <st_qword>
c0004712:	31 c9                	xor    ecx,ecx
c0004714:	8d 43 28             	lea    eax,[ebx+0x28]
c0004717:	ba 22 00 00 00       	mov    edx,0x22
c000471c:	e8 a2 d3 ff ff       	call   c0001ac3 <st_qword>
c0004721:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004725:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004729:	83 c2 de             	add    edx,0xffffffde
c000472c:	8d 43 30             	lea    eax,[ebx+0x30]
c000472f:	83 d1 ff             	adc    ecx,0xffffffff
c0004732:	31 f6                	xor    esi,esi
c0004734:	e8 8a d3 ff ff       	call   c0001ac3 <st_qword>
c0004739:	8d 43 54             	lea    eax,[ebx+0x54]
c000473c:	ba 80 00 00 00       	mov    edx,0x80
c0004741:	e8 7a d3 ff ff       	call   c0001ac0 <st_dword>
c0004746:	8d 43 50             	lea    eax,[ebx+0x50]
c0004749:	ba 80 00 00 00       	mov    edx,0x80
c000474e:	e8 6d d3 ff ff       	call   c0001ac0 <st_dword>
c0004753:	ba 02 00 00 00       	mov    edx,0x2
c0004758:	89 f8                	mov    eax,edi
c000475a:	e8 61 d3 ff ff       	call   c0001ac0 <st_dword>
c000475f:	8d 53 38             	lea    edx,[ebx+0x38]
c0004762:	b9 10 00 00 00       	mov    ecx,0x10
c0004767:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000476b:	e8 ad d9 ff ff       	call   c000211d <make_rand>
c0004770:	83 c8 ff             	or     eax,0xffffffff
c0004773:	46                   	inc    esi
c0004774:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004779:	e8 fb d8 ff ff       	call   c0002079 <crc32>
c000477e:	83 fe 5c             	cmp    esi,0x5c
c0004781:	75 f0                	jne    c0004773 <create_partition+0x359>
c0004783:	f7 d0                	not    eax
c0004785:	8d 73 10             	lea    esi,[ebx+0x10]
c0004788:	89 c2                	mov    edx,eax
c000478a:	89 f0                	mov    eax,esi
c000478c:	e8 2f d3 ff ff       	call   c0001ac0 <st_dword>
c0004791:	83 ec 0c             	sub    esp,0xc
c0004794:	6a 01                	push   0x1
c0004796:	6a 00                	push   0x0
c0004798:	6a 01                	push   0x1
c000479a:	53                   	push   ebx
c000479b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000479f:	e8 71 d2 ff ff       	call   c0001a15 <disk_write>
c00047a4:	83 c4 20             	add    esp,0x20
c00047a7:	85 c0                	test   eax,eax
c00047a9:	0f 85 9c fc ff ff    	jne    c000444b <create_partition+0x31>
c00047af:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00047b3:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00047b7:	83 c2 ff             	add    edx,0xffffffff
c00047ba:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047bd:	83 d1 ff             	adc    ecx,0xffffffff
c00047c0:	e8 fe d2 ff ff       	call   c0001ac3 <st_qword>
c00047c5:	ba 01 00 00 00       	mov    edx,0x1
c00047ca:	31 c9                	xor    ecx,ecx
c00047cc:	89 e8                	mov    eax,ebp
c00047ce:	e8 f0 d2 ff ff       	call   c0001ac3 <st_qword>
c00047d3:	89 f8                	mov    eax,edi
c00047d5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00047d9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047dd:	31 ff                	xor    edi,edi
c00047df:	e8 df d2 ff ff       	call   c0001ac3 <st_qword>
c00047e4:	89 f0                	mov    eax,esi
c00047e6:	31 d2                	xor    edx,edx
c00047e8:	e8 d3 d2 ff ff       	call   c0001ac0 <st_dword>
c00047ed:	83 c8 ff             	or     eax,0xffffffff
c00047f0:	47                   	inc    edi
c00047f1:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00047f6:	e8 7e d8 ff ff       	call   c0002079 <crc32>
c00047fb:	83 ff 5c             	cmp    edi,0x5c
c00047fe:	75 f0                	jne    c00047f0 <create_partition+0x3d6>
c0004800:	f7 d0                	not    eax
c0004802:	89 c2                	mov    edx,eax
c0004804:	89 f0                	mov    eax,esi
c0004806:	e8 b5 d2 ff ff       	call   c0001ac0 <st_dword>
c000480b:	83 ec 0c             	sub    esp,0xc
c000480e:	6a 01                	push   0x1
c0004810:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004814:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004818:	83 c0 ff             	add    eax,0xffffffff
c000481b:	83 d2 ff             	adc    edx,0xffffffff
c000481e:	52                   	push   edx
c000481f:	50                   	push   eax
c0004820:	53                   	push   ebx
c0004821:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004825:	e8 eb d1 ff ff       	call   c0001a15 <disk_write>
c000482a:	83 c4 20             	add    esp,0x20
c000482d:	85 c0                	test   eax,eax
c000482f:	0f 85 16 fc ff ff    	jne    c000444b <create_partition+0x31>
c0004835:	31 d2                	xor    edx,edx
c0004837:	89 d8                	mov    eax,ebx
c0004839:	b9 00 02 00 00       	mov    ecx,0x200
c000483e:	e8 9b d2 ff ff       	call   c0001ade <mem_set>
c0004843:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004849:	b9 10 00 00 00       	mov    ecx,0x10
c000484e:	ba f0 88 02 c0       	mov    edx,0xc00288f0
c0004853:	e8 71 d2 ff ff       	call   c0001ac9 <mem_cpy>
c0004858:	e9 21 01 00 00       	jmp    c000497e <create_partition+0x564>
c000485d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004861:	b9 05 00 00 00       	mov    ecx,0x5
c0004866:	89 04 24             	mov    DWORD PTR [esp],eax
c0004869:	bf 08 00 00 00       	mov    edi,0x8
c000486e:	89 f8                	mov    eax,edi
c0004870:	31 d2                	xor    edx,edx
c0004872:	0f b6 f0             	movzx  esi,al
c0004875:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004878:	f7 f6                	div    esi
c000487a:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c000487f:	76 0a                	jbe    c000488b <create_partition+0x471>
c0004881:	d1 e7                	shl    edi,1
c0004883:	49                   	dec    ecx
c0004884:	75 e8                	jne    c000486e <create_partition+0x454>
c0004886:	bf ff ff ff ff       	mov    edi,0xffffffff
c000488b:	b9 00 02 00 00       	mov    ecx,0x200
c0004890:	31 d2                	xor    edx,edx
c0004892:	89 d8                	mov    eax,ebx
c0004894:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c000489a:	e8 3f d2 ff ff       	call   c0001ade <mem_set>
c000489f:	b9 64 00 00 00       	mov    ecx,0x64
c00048a4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00048a7:	31 d2                	xor    edx,edx
c00048a9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00048b1:	f7 f1                	div    ecx
c00048b3:	b9 3f 00 00 00       	mov    ecx,0x3f
c00048b8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048bc:	89 f8                	mov    eax,edi
c00048be:	0f b6 c0             	movzx  eax,al
c00048c1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00048c5:	e9 80 00 00 00       	jmp    c000494a <create_partition+0x530>
c00048ca:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00048cd:	29 cf                	sub    edi,ecx
c00048cf:	89 ca                	mov    edx,ecx
c00048d1:	89 f0                	mov    eax,esi
c00048d3:	bd 3f 00 00 00       	mov    ebp,0x3f
c00048d8:	e8 e3 d1 ff ff       	call   c0001ac0 <st_dword>
c00048dd:	8d 46 04             	lea    eax,[esi+0x4]
c00048e0:	89 fa                	mov    edx,edi
c00048e2:	83 c6 10             	add    esi,0x10
c00048e5:	e8 d6 d1 ff ff       	call   c0001ac0 <st_dword>
c00048ea:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00048ee:	31 d2                	xor    edx,edx
c00048f0:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c00048f3:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c00048f7:	89 c8                	mov    eax,ecx
c00048f9:	01 f9                	add    ecx,edi
c00048fb:	f7 f5                	div    ebp
c00048fd:	89 d5                	mov    ebp,edx
c00048ff:	31 d2                	xor    edx,edx
c0004901:	45                   	inc    ebp
c0004902:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004906:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004909:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c000490c:	89 c2                	mov    edx,eax
c000490e:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004911:	c1 ea 02             	shr    edx,0x2
c0004914:	83 e2 c0             	and    edx,0xffffffc0
c0004917:	09 ea                	or     edx,ebp
c0004919:	bd 3f 00 00 00       	mov    ebp,0x3f
c000491e:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004921:	31 d2                	xor    edx,edx
c0004923:	f7 f5                	div    ebp
c0004925:	89 d7                	mov    edi,edx
c0004927:	31 d2                	xor    edx,edx
c0004929:	47                   	inc    edi
c000492a:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c000492e:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004931:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004934:	89 c5                	mov    ebp,eax
c0004936:	c1 ed 02             	shr    ebp,0x2
c0004939:	83 e5 c0             	and    ebp,0xffffffc0
c000493c:	09 ef                	or     edi,ebp
c000493e:	89 fa                	mov    edx,edi
c0004940:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004943:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004948:	74 34                	je     c000497e <create_partition+0x564>
c000494a:	85 c9                	test   ecx,ecx
c000494c:	74 30                	je     c000497e <create_partition+0x564>
c000494e:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004951:	76 2b                	jbe    c000497e <create_partition+0x564>
c0004953:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004957:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000495b:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c000495e:	83 ff 64             	cmp    edi,0x64
c0004961:	76 4b                	jbe    c00049ae <create_partition+0x594>
c0004963:	89 f8                	mov    eax,edi
c0004965:	01 c8                	add    eax,ecx
c0004967:	0f 82 5d ff ff ff    	jb     c00048ca <create_partition+0x4b0>
c000496d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004970:	0f 87 54 ff ff ff    	ja     c00048ca <create_partition+0x4b0>
c0004976:	85 ff                	test   edi,edi
c0004978:	0f 85 51 ff ff ff    	jne    c00048cf <create_partition+0x4b5>
c000497e:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004984:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004989:	e8 2e d1 ff ff       	call   c0001abc <st_word>
c000498e:	83 ec 0c             	sub    esp,0xc
c0004991:	6a 01                	push   0x1
c0004993:	6a 00                	push   0x0
c0004995:	6a 00                	push   0x0
c0004997:	53                   	push   ebx
c0004998:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000499c:	e8 74 d0 ff ff       	call   c0001a15 <disk_write>
c00049a1:	83 c4 20             	add    esp,0x20
c00049a4:	85 c0                	test   eax,eax
c00049a6:	0f 95 c0             	setne  al
c00049a9:	0f b6 c0             	movzx  eax,al
c00049ac:	eb 0e                	jmp    c00049bc <create_partition+0x5a2>
c00049ae:	74 07                	je     c00049b7 <create_partition+0x59d>
c00049b0:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c00049b5:	eb ac                	jmp    c0004963 <create_partition+0x549>
c00049b7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00049ba:	eb a7                	jmp    c0004963 <create_partition+0x549>
c00049bc:	83 c4 5c             	add    esp,0x5c
c00049bf:	5b                   	pop    ebx
c00049c0:	5e                   	pop    esi
c00049c1:	5f                   	pop    edi
c00049c2:	5d                   	pop    ebp
c00049c3:	c3                   	ret    

c00049c4 <get_fileinfo>:
c00049c4:	55                   	push   ebp
c00049c5:	57                   	push   edi
c00049c6:	56                   	push   esi
c00049c7:	53                   	push   ebx
c00049c8:	83 ec 1c             	sub    esp,0x1c
c00049cb:	8b 30                	mov    esi,DWORD PTR [eax]
c00049cd:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c00049d1:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00049d5:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c00049d8:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c00049db:	0f 84 dc 01 00 00    	je     c0004bbd <get_fileinfo+0x1f9>
c00049e1:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00049e4:	75 0f                	jne    c00049f5 <get_fileinfo+0x31>
c00049e6:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00049e9:	83 c4 1c             	add    esp,0x1c
c00049ec:	5b                   	pop    ebx
c00049ed:	5e                   	pop    esi
c00049ee:	5f                   	pop    edi
c00049ef:	5d                   	pop    ebp
c00049f0:	e9 58 d5 ff ff       	jmp    c0001f4d <get_xfileinfo>
c00049f5:	89 d3                	mov    ebx,edx
c00049f7:	89 c6                	mov    esi,eax
c00049f9:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c00049fd:	74 6a                	je     c0004a69 <get_fileinfo+0xa5>
c00049ff:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004a07:	31 ed                	xor    ebp,ebp
c0004a09:	31 ff                	xor    edi,edi
c0004a0b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004a0f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004a13:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004a16:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004a1a:	66 85 d2             	test   dx,dx
c0004a1d:	74 3e                	je     c0004a5d <get_fileinfo+0x99>
c0004a1f:	66 85 ed             	test   bp,bp
c0004a22:	75 0c                	jne    c0004a30 <get_fileinfo+0x6c>
c0004a24:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004a2a:	66 3d ff 07          	cmp    ax,0x7ff
c0004a2e:	76 22                	jbe    c0004a52 <get_fileinfo+0x8e>
c0004a30:	b9 ff 00 00 00       	mov    ecx,0xff
c0004a35:	89 e8                	mov    eax,ebp
c0004a37:	29 f9                	sub    ecx,edi
c0004a39:	c1 e0 10             	shl    eax,0x10
c0004a3c:	09 d0                	or     eax,edx
c0004a3e:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004a42:	e8 a3 d1 ff ff       	call   c0001bea <put_utf>
c0004a47:	84 c0                	test   al,al
c0004a49:	74 10                	je     c0004a5b <get_fileinfo+0x97>
c0004a4b:	0f b6 c0             	movzx  eax,al
c0004a4e:	31 d2                	xor    edx,edx
c0004a50:	01 c7                	add    edi,eax
c0004a52:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004a57:	89 d5                	mov    ebp,edx
c0004a59:	eb b0                	jmp    c0004a0b <get_fileinfo+0x47>
c0004a5b:	31 ff                	xor    edi,edi
c0004a5d:	66 85 ed             	test   bp,bp
c0004a60:	74 02                	je     c0004a64 <get_fileinfo+0xa0>
c0004a62:	31 ff                	xor    edi,edi
c0004a64:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004a69:	31 ff                	xor    edi,edi
c0004a6b:	31 c9                	xor    ecx,ecx
c0004a6d:	83 f9 0a             	cmp    ecx,0xa
c0004a70:	0f 87 ad 00 00 00    	ja     c0004b23 <get_fileinfo+0x15f>
c0004a76:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a79:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004a7c:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004a80:	66 83 fa 20          	cmp    dx,0x20
c0004a84:	0f 84 92 00 00 00    	je     c0004b1c <get_fileinfo+0x158>
c0004a8a:	66 83 fa 05          	cmp    dx,0x5
c0004a8e:	75 05                	jne    c0004a95 <get_fileinfo+0xd1>
c0004a90:	ba e5 00 00 00       	mov    edx,0xe5
c0004a95:	83 ff 0b             	cmp    edi,0xb
c0004a98:	77 0b                	ja     c0004aa5 <get_fileinfo+0xe1>
c0004a9a:	83 fd 09             	cmp    ebp,0x9
c0004a9d:	75 06                	jne    c0004aa5 <get_fileinfo+0xe1>
c0004a9f:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004aa4:	47                   	inc    edi
c0004aa5:	0f b7 c2             	movzx  eax,dx
c0004aa8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004aac:	e8 6d d0 ff ff       	call   c0001b1e <dbc_1st>
c0004ab1:	85 c0                	test   eax,eax
c0004ab3:	74 2f                	je     c0004ae4 <get_fileinfo+0x120>
c0004ab5:	83 fd 08             	cmp    ebp,0x8
c0004ab8:	74 2a                	je     c0004ae4 <get_fileinfo+0x120>
c0004aba:	83 fd 0b             	cmp    ebp,0xb
c0004abd:	74 25                	je     c0004ae4 <get_fileinfo+0x120>
c0004abf:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ac2:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004ac6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004aca:	e8 52 d0 ff ff       	call   c0001b21 <dbc_2nd>
c0004acf:	85 c0                	test   eax,eax
c0004ad1:	74 11                	je     c0004ae4 <get_fileinfo+0x120>
c0004ad3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004ad7:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004adc:	c1 e2 08             	shl    edx,0x8
c0004adf:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004ae2:	09 c2                	or     edx,eax
c0004ae4:	0f b7 d2             	movzx  edx,dx
c0004ae7:	50                   	push   eax
c0004ae8:	50                   	push   eax
c0004ae9:	68 b5 01 00 00       	push   0x1b5
c0004aee:	52                   	push   edx
c0004aef:	e8 46 38 00 00       	call   c000833a <ff_oem2uni>
c0004af4:	83 c4 10             	add    esp,0x10
c0004af7:	66 85 c0             	test   ax,ax
c0004afa:	75 04                	jne    c0004b00 <get_fileinfo+0x13c>
c0004afc:	31 ff                	xor    edi,edi
c0004afe:	eb 23                	jmp    c0004b23 <get_fileinfo+0x15f>
c0004b00:	b9 0c 00 00 00       	mov    ecx,0xc
c0004b05:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004b09:	29 f9                	sub    ecx,edi
c0004b0b:	0f b7 c0             	movzx  eax,ax
c0004b0e:	e8 d7 d0 ff ff       	call   c0001bea <put_utf>
c0004b13:	84 c0                	test   al,al
c0004b15:	74 e5                	je     c0004afc <get_fileinfo+0x138>
c0004b17:	0f b6 c0             	movzx  eax,al
c0004b1a:	01 c7                	add    edi,eax
c0004b1c:	89 e9                	mov    ecx,ebp
c0004b1e:	e9 4a ff ff ff       	jmp    c0004a6d <get_fileinfo+0xa9>
c0004b23:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004b28:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004b2c:	75 54                	jne    c0004b82 <get_fileinfo+0x1be>
c0004b2e:	85 ff                	test   edi,edi
c0004b30:	75 0b                	jne    c0004b3d <get_fileinfo+0x179>
c0004b32:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004b36:	ba 01 00 00 00       	mov    edx,0x1
c0004b3b:	eb 33                	jmp    c0004b70 <get_fileinfo+0x1ac>
c0004b3d:	b1 08                	mov    cl,0x8
c0004b3f:	31 d2                	xor    edx,edx
c0004b41:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004b47:	84 c0                	test   al,al
c0004b49:	74 25                	je     c0004b70 <get_fileinfo+0x1ac>
c0004b4b:	66 83 f8 2e          	cmp    ax,0x2e
c0004b4f:	74 16                	je     c0004b67 <get_fileinfo+0x1a3>
c0004b51:	8d 78 bf             	lea    edi,[eax-0x41]
c0004b54:	66 83 ff 19          	cmp    di,0x19
c0004b58:	77 0f                	ja     c0004b69 <get_fileinfo+0x1a5>
c0004b5a:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004b5d:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004b60:	74 07                	je     c0004b69 <get_fileinfo+0x1a5>
c0004b62:	83 c0 20             	add    eax,0x20
c0004b65:	eb 02                	jmp    c0004b69 <get_fileinfo+0x1a5>
c0004b67:	b1 10                	mov    cl,0x10
c0004b69:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004b6d:	42                   	inc    edx
c0004b6e:	eb d1                	jmp    c0004b41 <get_fileinfo+0x17d>
c0004b70:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004b75:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b78:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004b7c:	75 04                	jne    c0004b82 <get_fileinfo+0x1be>
c0004b7e:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004b82:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b85:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004b88:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004b8b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b8e:	83 c0 1c             	add    eax,0x1c
c0004b91:	e8 c1 ce ff ff       	call   c0001a57 <ld_dword>
c0004b96:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004b9d:	89 03                	mov    DWORD PTR [ebx],eax
c0004b9f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ba2:	83 c0 16             	add    eax,0x16
c0004ba5:	e8 a0 ce ff ff       	call   c0001a4a <ld_word>
c0004baa:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004bae:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004bb1:	83 c0 18             	add    eax,0x18
c0004bb4:	e8 91 ce ff ff       	call   c0001a4a <ld_word>
c0004bb9:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004bbd:	83 c4 1c             	add    esp,0x1c
c0004bc0:	5b                   	pop    ebx
c0004bc1:	5e                   	pop    esi
c0004bc2:	5f                   	pop    edi
c0004bc3:	5d                   	pop    ebp
c0004bc4:	c3                   	ret    

c0004bc5 <ld_clust.isra.0>:
c0004bc5:	56                   	push   esi
c0004bc6:	89 c6                	mov    esi,eax
c0004bc8:	53                   	push   ebx
c0004bc9:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004bcc:	89 d3                	mov    ebx,edx
c0004bce:	e8 77 ce ff ff       	call   c0001a4a <ld_word>
c0004bd3:	0f b7 c8             	movzx  ecx,ax
c0004bd6:	89 f0                	mov    eax,esi
c0004bd8:	3c 03                	cmp    al,0x3
c0004bda:	75 0d                	jne    c0004be9 <ld_clust.isra.0+0x24>
c0004bdc:	8d 43 14             	lea    eax,[ebx+0x14]
c0004bdf:	e8 66 ce ff ff       	call   c0001a4a <ld_word>
c0004be4:	c1 e0 10             	shl    eax,0x10
c0004be7:	09 c1                	or     ecx,eax
c0004be9:	89 c8                	mov    eax,ecx
c0004beb:	5b                   	pop    ebx
c0004bec:	5e                   	pop    esi
c0004bed:	c3                   	ret    

c0004bee <st_clust.isra.1>:
c0004bee:	56                   	push   esi
c0004bef:	89 c6                	mov    esi,eax
c0004bf1:	53                   	push   ebx
c0004bf2:	89 d3                	mov    ebx,edx
c0004bf4:	0f b7 d1             	movzx  edx,cx
c0004bf7:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004bfa:	e8 bd ce ff ff       	call   c0001abc <st_word>
c0004bff:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004c02:	75 0f                	jne    c0004c13 <st_clust.isra.1+0x25>
c0004c04:	c1 e9 10             	shr    ecx,0x10
c0004c07:	8d 43 14             	lea    eax,[ebx+0x14]
c0004c0a:	89 ca                	mov    edx,ecx
c0004c0c:	5b                   	pop    ebx
c0004c0d:	5e                   	pop    esi
c0004c0e:	e9 a9 ce ff ff       	jmp    c0001abc <st_word>
c0004c13:	5b                   	pop    ebx
c0004c14:	5e                   	pop    esi
c0004c15:	c3                   	ret    

c0004c16 <init_alloc_info.isra.2>:
c0004c16:	56                   	push   esi
c0004c17:	53                   	push   ebx
c0004c18:	89 c6                	mov    esi,eax
c0004c1a:	89 d3                	mov    ebx,edx
c0004c1c:	51                   	push   ecx
c0004c1d:	8b 00                	mov    eax,DWORD PTR [eax]
c0004c1f:	83 c0 34             	add    eax,0x34
c0004c22:	e8 30 ce ff ff       	call   c0001a57 <ld_dword>
c0004c27:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004c2a:	8b 06                	mov    eax,DWORD PTR [esi]
c0004c2c:	83 c0 38             	add    eax,0x38
c0004c2f:	e8 3b ce ff ff       	call   c0001a6f <ld_qword>
c0004c34:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004c37:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004c3a:	8b 06                	mov    eax,DWORD PTR [esi]
c0004c3c:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004c3f:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c46:	83 e0 02             	and    eax,0x2
c0004c49:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004c4c:	5b                   	pop    ebx
c0004c4d:	5b                   	pop    ebx
c0004c4e:	5e                   	pop    esi
c0004c4f:	c3                   	ret    

c0004c50 <follow_path>:
c0004c50:	56                   	push   esi
c0004c51:	53                   	push   ebx
c0004c52:	89 c3                	mov    ebx,eax
c0004c54:	83 ec 14             	sub    esp,0x14
c0004c57:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004c5b:	8b 30                	mov    esi,DWORD PTR [eax]
c0004c5d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c61:	8a 10                	mov    dl,BYTE PTR [eax]
c0004c63:	80 fa 5c             	cmp    dl,0x5c
c0004c66:	75 07                	jne    c0004c6f <follow_path+0x1f>
c0004c68:	40                   	inc    eax
c0004c69:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c6d:	eb ee                	jmp    c0004c5d <follow_path+0xd>
c0004c6f:	80 fa 2f             	cmp    dl,0x2f
c0004c72:	74 f4                	je     c0004c68 <follow_path+0x18>
c0004c74:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004c7b:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c82:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004c85:	77 52                	ja     c0004cd9 <follow_path+0x89>
c0004c87:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004c8b:	31 d2                	xor    edx,edx
c0004c8d:	89 d8                	mov    eax,ebx
c0004c8f:	e8 12 e3 ff ff       	call   c0002fa6 <dir_sdi>
c0004c94:	eb 7c                	jmp    c0004d12 <follow_path+0xc2>
c0004c96:	89 d8                	mov    eax,ebx
c0004c98:	e8 6e f2 ff ff       	call   c0003f0b <dir_find>
c0004c9d:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004ca0:	85 c0                	test   eax,eax
c0004ca2:	75 46                	jne    c0004cea <follow_path+0x9a>
c0004ca4:	80 e2 04             	and    dl,0x4
c0004ca7:	75 69                	jne    c0004d12 <follow_path+0xc2>
c0004ca9:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004cad:	74 5e                	je     c0004d0d <follow_path+0xbd>
c0004caf:	8a 06                	mov    al,BYTE PTR [esi]
c0004cb1:	3c 04                	cmp    al,0x4
c0004cb3:	75 41                	jne    c0004cf6 <follow_path+0xa6>
c0004cb5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004cb8:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004cbc:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004cbf:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004cc2:	30 c0                	xor    al,al
c0004cc4:	09 d0                	or     eax,edx
c0004cc6:	89 da                	mov    edx,ebx
c0004cc8:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ccb:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004cce:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004cd1:	8d 46 10             	lea    eax,[esi+0x10]
c0004cd4:	e8 3d ff ff ff       	call   c0004c16 <init_alloc_info.isra.2>
c0004cd9:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004cdd:	89 d8                	mov    eax,ebx
c0004cdf:	e8 a9 ed ff ff       	call   c0003a8d <create_name>
c0004ce4:	85 c0                	test   eax,eax
c0004ce6:	74 ae                	je     c0004c96 <follow_path+0x46>
c0004ce8:	eb 28                	jmp    c0004d12 <follow_path+0xc2>
c0004cea:	83 f8 04             	cmp    eax,0x4
c0004ced:	75 23                	jne    c0004d12 <follow_path+0xc2>
c0004cef:	80 e2 04             	and    dl,0x4
c0004cf2:	74 19                	je     c0004d0d <follow_path+0xbd>
c0004cf4:	eb 1c                	jmp    c0004d12 <follow_path+0xc2>
c0004cf6:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004cf9:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004cff:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004d03:	e8 bd fe ff ff       	call   c0004bc5 <ld_clust.isra.0>
c0004d08:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004d0b:	eb cc                	jmp    c0004cd9 <follow_path+0x89>
c0004d0d:	b8 05 00 00 00       	mov    eax,0x5
c0004d12:	83 c4 14             	add    esp,0x14
c0004d15:	5b                   	pop    ebx
c0004d16:	5e                   	pop    esi
c0004d17:	c3                   	ret    

c0004d18 <f_mount>:
c0004d18:	53                   	push   ebx
c0004d19:	83 ec 18             	sub    esp,0x18
c0004d1c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004d20:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004d24:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d28:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004d2c:	e8 fb d2 ff ff       	call   c000202c <get_ldnumber>
c0004d31:	89 c2                	mov    edx,eax
c0004d33:	b8 0b 00 00 00       	mov    eax,0xb
c0004d38:	85 d2                	test   edx,edx
c0004d3a:	78 39                	js     c0004d75 <f_mount+0x5d>
c0004d3c:	8b 04 95 20 d8 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd27e0]
c0004d43:	85 c0                	test   eax,eax
c0004d45:	74 03                	je     c0004d4a <f_mount+0x32>
c0004d47:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d4e:	85 c0                	test   eax,eax
c0004d50:	74 03                	je     c0004d55 <f_mount+0x3d>
c0004d52:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d59:	89 04 95 20 d8 02 c0 	mov    DWORD PTR [edx*4-0x3ffd27e0],eax
c0004d60:	31 c0                	xor    eax,eax
c0004d62:	84 db                	test   bl,bl
c0004d64:	74 0f                	je     c0004d75 <f_mount+0x5d>
c0004d66:	31 c9                	xor    ecx,ecx
c0004d68:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d6c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d70:	e8 65 d7 ff ff       	call   c00024da <mount_volume>
c0004d75:	83 c4 18             	add    esp,0x18
c0004d78:	5b                   	pop    ebx
c0004d79:	c3                   	ret    

c0004d7a <f_open>:
c0004d7a:	55                   	push   ebp
c0004d7b:	bd 09 00 00 00       	mov    ebp,0x9
c0004d80:	57                   	push   edi
c0004d81:	56                   	push   esi
c0004d82:	53                   	push   ebx
c0004d83:	83 ec 7c             	sub    esp,0x7c
c0004d86:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004d8d:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004d94:	85 db                	test   ebx,ebx
c0004d96:	0f 84 10 04 00 00    	je     c00051ac <f_open+0x432>
c0004d9c:	89 fe                	mov    esi,edi
c0004d9e:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004da2:	83 e6 3f             	and    esi,0x3f
c0004da5:	89 f0                	mov    eax,esi
c0004da7:	0f b6 c8             	movzx  ecx,al
c0004daa:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004db1:	e8 24 d7 ff ff       	call   c00024da <mount_volume>
c0004db6:	89 c5                	mov    ebp,eax
c0004db8:	85 c0                	test   eax,eax
c0004dba:	0f 85 e6 03 00 00    	jne    c00051a6 <f_open+0x42c>
c0004dc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004dc4:	bd 11 00 00 00       	mov    ebp,0x11
c0004dc9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004dcd:	83 ec 0c             	sub    esp,0xc
c0004dd0:	68 60 04 00 00       	push   0x460
c0004dd5:	e8 a3 34 00 00       	call   c000827d <ff_memalloc>
c0004dda:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004dde:	83 c4 10             	add    esp,0x10
c0004de1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004de6:	0f 84 c0 03 00 00    	je     c00051ac <f_open+0x432>
c0004dec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004df0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004df4:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004dfa:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004dfd:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004e00:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004e07:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e0b:	e8 40 fe ff ff       	call   c0004c50 <follow_path>
c0004e10:	89 c5                	mov    ebp,eax
c0004e12:	85 c0                	test   eax,eax
c0004e14:	75 0c                	jne    c0004e22 <f_open+0xa8>
c0004e16:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004e1b:	79 05                	jns    c0004e22 <f_open+0xa8>
c0004e1d:	bd 06 00 00 00       	mov    ebp,0x6
c0004e22:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004e28:	0f 84 84 01 00 00    	je     c0004fb2 <f_open+0x238>
c0004e2e:	85 ed                	test   ebp,ebp
c0004e30:	74 20                	je     c0004e52 <f_open+0xd8>
c0004e32:	83 fd 04             	cmp    ebp,0x4
c0004e35:	0f 85 58 03 00 00    	jne    c0005193 <f_open+0x419>
c0004e3b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e3f:	83 ce 08             	or     esi,0x8
c0004e42:	e8 8a f2 ff ff       	call   c00040d1 <dir_register>
c0004e47:	89 c5                	mov    ebp,eax
c0004e49:	85 c0                	test   eax,eax
c0004e4b:	74 2f                	je     c0004e7c <f_open+0x102>
c0004e4d:	e9 41 03 00 00       	jmp    c0005193 <f_open+0x419>
c0004e52:	bd 07 00 00 00       	mov    ebp,0x7
c0004e57:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004e5c:	0f 85 31 03 00 00    	jne    c0005193 <f_open+0x419>
c0004e62:	bd 08 00 00 00       	mov    ebp,0x8
c0004e67:	f7 c7 04 00 00 00    	test   edi,0x4
c0004e6d:	0f 85 20 03 00 00    	jne    c0005193 <f_open+0x419>
c0004e73:	83 e7 08             	and    edi,0x8
c0004e76:	0f 84 65 01 00 00    	je     c0004fe1 <f_open+0x267>
c0004e7c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004e80:	8a 02                	mov    al,BYTE PTR [edx]
c0004e82:	3c 04                	cmp    al,0x4
c0004e84:	0f 85 97 00 00 00    	jne    c0004f21 <f_open+0x1a7>
c0004e8a:	8d 42 10             	lea    eax,[edx+0x10]
c0004e8d:	89 13                	mov    DWORD PTR [ebx],edx
c0004e8f:	89 da                	mov    edx,ebx
c0004e91:	e8 80 fd ff ff       	call   c0004c16 <init_alloc_info.isra.2>
c0004e96:	31 d2                	xor    edx,edx
c0004e98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e9c:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004ea1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ea4:	83 c0 02             	add    eax,0x2
c0004ea7:	e8 32 cc ff ff       	call   c0001ade <mem_set>
c0004eac:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004eb1:	31 d2                	xor    edx,edx
c0004eb3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004eb7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004eba:	83 c0 26             	add    eax,0x26
c0004ebd:	e8 1c cc ff ff       	call   c0001ade <mem_set>
c0004ec2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ec6:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004ec9:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004ecd:	ba 00 00 21 50       	mov    edx,0x50210000
c0004ed2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ed5:	83 c0 08             	add    eax,0x8
c0004ed8:	e8 e3 cb ff ff       	call   c0001ac0 <st_dword>
c0004edd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ee1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ee4:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004ee8:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004eec:	e8 b7 ea ff ff       	call   c00039a8 <store_xdir>
c0004ef1:	89 c5                	mov    ebp,eax
c0004ef3:	85 c0                	test   eax,eax
c0004ef5:	0f 85 98 02 00 00    	jne    c0005193 <f_open+0x419>
c0004efb:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004efe:	85 d2                	test   edx,edx
c0004f00:	0f 84 db 00 00 00    	je     c0004fe1 <f_open+0x267>
c0004f06:	31 c9                	xor    ecx,ecx
c0004f08:	89 d8                	mov    eax,ebx
c0004f0a:	e8 8e e3 ff ff       	call   c000329d <remove_chain>
c0004f0f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004f13:	89 c5                	mov    ebp,eax
c0004f15:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004f18:	48                   	dec    eax
c0004f19:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0004f1c:	e9 b8 00 00 00       	jmp    c0004fd9 <f_open+0x25f>
c0004f21:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0004f25:	89 ea                	mov    edx,ebp
c0004f27:	e8 99 fc ff ff       	call   c0004bc5 <ld_clust.isra.0>
c0004f2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0004f31:	89 c7                	mov    edi,eax
c0004f33:	8d 45 0e             	lea    eax,[ebp+0xe]
c0004f36:	e8 85 cb ff ff       	call   c0001ac0 <st_dword>
c0004f3b:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f3f:	31 c9                	xor    ecx,ecx
c0004f41:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0004f45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f49:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f4d:	e8 9c fc ff ff       	call   c0004bee <st_clust.isra.1>
c0004f52:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f56:	31 d2                	xor    edx,edx
c0004f58:	83 c0 1c             	add    eax,0x1c
c0004f5b:	e8 60 cb ff ff       	call   c0001ac0 <st_dword>
c0004f60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f64:	85 ff                	test   edi,edi
c0004f66:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f6a:	74 75                	je     c0004fe1 <f_open+0x267>
c0004f6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f70:	31 c9                	xor    ecx,ecx
c0004f72:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0004f75:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0004f78:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004f7c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004f80:	89 fa                	mov    edx,edi
c0004f82:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f86:	e8 12 e3 ff ff       	call   c000329d <remove_chain>
c0004f8b:	89 c5                	mov    ebp,eax
c0004f8d:	85 c0                	test   eax,eax
c0004f8f:	0f 85 fe 01 00 00    	jne    c0005193 <f_open+0x419>
c0004f95:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004f99:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004f9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fa1:	4f                   	dec    edi
c0004fa2:	e8 81 d2 ff ff       	call   c0002228 <move_window>
c0004fa7:	89 c5                	mov    ebp,eax
c0004fa9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fad:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0004fb0:	eb 27                	jmp    c0004fd9 <f_open+0x25f>
c0004fb2:	85 ed                	test   ebp,ebp
c0004fb4:	0f 85 d9 01 00 00    	jne    c0005193 <f_open+0x419>
c0004fba:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c0004fbe:	bd 04 00 00 00       	mov    ebp,0x4
c0004fc3:	a8 10                	test   al,0x10
c0004fc5:	0f 85 c8 01 00 00    	jne    c0005193 <f_open+0x419>
c0004fcb:	83 e7 02             	and    edi,0x2
c0004fce:	74 11                	je     c0004fe1 <f_open+0x267>
c0004fd0:	bd 07 00 00 00       	mov    ebp,0x7
c0004fd5:	a8 01                	test   al,0x1
c0004fd7:	eb 02                	jmp    c0004fdb <f_open+0x261>
c0004fd9:	85 ed                	test   ebp,ebp
c0004fdb:	0f 85 b2 01 00 00    	jne    c0005193 <f_open+0x419>
c0004fe1:	f7 c6 08 00 00 00    	test   esi,0x8
c0004fe7:	74 03                	je     c0004fec <f_open+0x272>
c0004fe9:	83 ce 40             	or     esi,0x40
c0004fec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004ff0:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0004ff3:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0004ff6:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0004ff9:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0004ffc:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005000:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0005003:	8a 02                	mov    al,BYTE PTR [edx]
c0005005:	3c 04                	cmp    al,0x4
c0005007:	75 2a                	jne    c0005033 <f_open+0x2b9>
c0005009:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000500d:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005012:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005015:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005019:	30 c0                	xor    al,al
c000501b:	09 c8                	or     eax,ecx
c000501d:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005020:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005024:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005027:	8d 42 10             	lea    eax,[edx+0x10]
c000502a:	89 da                	mov    edx,ebx
c000502c:	e8 e5 fb ff ff       	call   c0004c16 <init_alloc_info.isra.2>
c0005031:	eb 1c                	jmp    c000504f <f_open+0x2d5>
c0005033:	89 fa                	mov    edx,edi
c0005035:	e8 8b fb ff ff       	call   c0004bc5 <ld_clust.isra.0>
c000503a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000503d:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005040:	e8 12 ca ff ff       	call   c0001a57 <ld_dword>
c0005045:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000504c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000504f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005053:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c000505a:	89 03                	mov    DWORD PTR [ebx],eax
c000505c:	31 d2                	xor    edx,edx
c000505e:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005062:	b9 00 02 00 00       	mov    ecx,0x200
c0005067:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000506b:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c000506f:	89 f0                	mov    eax,esi
c0005071:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005078:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c000507b:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005082:	8d 43 50             	lea    eax,[ebx+0x50]
c0005085:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c000508c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005093:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005097:	e8 42 ca ff ff       	call   c0001ade <mem_set>
c000509c:	83 e6 20             	and    esi,0x20
c000509f:	75 07                	jne    c00050a8 <f_open+0x32e>
c00050a1:	31 ed                	xor    ebp,ebp
c00050a3:	e9 eb 00 00 00       	jmp    c0005193 <f_open+0x419>
c00050a8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00050ab:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00050ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00050b2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00050b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00050ba:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00050be:	74 e1                	je     c00050a1 <f_open+0x327>
c00050c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00050c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00050c8:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00050cb:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00050ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050d2:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050d5:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00050d9:	31 ff                	xor    edi,edi
c00050db:	c1 e5 09             	shl    ebp,0x9
c00050de:	89 ee                	mov    esi,ebp
c00050e0:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00050e4:	89 f8                	mov    eax,edi
c00050e6:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00050ea:	73 22                	jae    c000510e <f_open+0x394>
c00050ec:	89 d8                	mov    eax,ebx
c00050ee:	e8 bd dc ff ff       	call   c0002db0 <get_fat>
c00050f3:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00050f7:	89 c2                	mov    edx,eax
c00050f9:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00050fd:	83 f8 01             	cmp    eax,0x1
c0005100:	76 10                	jbe    c0005112 <f_open+0x398>
c0005102:	83 f8 ff             	cmp    eax,0xffffffff
c0005105:	75 d9                	jne    c00050e0 <f_open+0x366>
c0005107:	bd 01 00 00 00       	mov    ebp,0x1
c000510c:	eb 09                	jmp    c0005117 <f_open+0x39d>
c000510e:	31 ed                	xor    ebp,ebp
c0005110:	eb 05                	jmp    c0005117 <f_open+0x39d>
c0005112:	bd 02 00 00 00       	mov    ebp,0x2
c0005117:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000511a:	85 ed                	test   ebp,ebp
c000511c:	75 75                	jne    c0005193 <f_open+0x419>
c000511e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005122:	25 ff 01 00 00       	and    eax,0x1ff
c0005127:	0f 84 74 ff ff ff    	je     c00050a1 <f_open+0x327>
c000512d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005131:	bd 02 00 00 00       	mov    ebp,0x2
c0005136:	89 c8                	mov    eax,ecx
c0005138:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000513c:	e8 a2 cb ff ff       	call   c0001ce3 <clst2sect>
c0005141:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005145:	89 d7                	mov    edi,edx
c0005147:	09 c7                	or     edi,eax
c0005149:	74 48                	je     c0005193 <f_open+0x419>
c000514b:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000514f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005153:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000515b:	0f ac fe 09          	shrd   esi,edi,0x9
c000515f:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005163:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005167:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000516a:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000516e:	83 ec 0c             	sub    esp,0xc
c0005171:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005174:	6a 01                	push   0x1
c0005176:	52                   	push   edx
c0005177:	50                   	push   eax
c0005178:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000517c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005180:	50                   	push   eax
c0005181:	e8 79 c8 ff ff       	call   c00019ff <disk_read>
c0005186:	83 c4 20             	add    esp,0x20
c0005189:	85 c0                	test   eax,eax
c000518b:	0f 95 c0             	setne  al
c000518e:	0f b6 c0             	movzx  eax,al
c0005191:	89 c5                	mov    ebp,eax
c0005193:	83 ec 0c             	sub    esp,0xc
c0005196:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000519a:	e8 f4 30 00 00       	call   c0008293 <ff_memfree>
c000519f:	83 c4 10             	add    esp,0x10
c00051a2:	85 ed                	test   ebp,ebp
c00051a4:	74 06                	je     c00051ac <f_open+0x432>
c00051a6:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00051ac:	83 c4 7c             	add    esp,0x7c
c00051af:	89 e8                	mov    eax,ebp
c00051b1:	5b                   	pop    ebx
c00051b2:	5e                   	pop    esi
c00051b3:	5f                   	pop    edi
c00051b4:	5d                   	pop    ebp
c00051b5:	c3                   	ret    

c00051b6 <f_read>:
c00051b6:	55                   	push   ebp
c00051b7:	57                   	push   edi
c00051b8:	56                   	push   esi
c00051b9:	53                   	push   ebx
c00051ba:	83 ec 2c             	sub    esp,0x2c
c00051bd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00051c1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00051c5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00051cb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051cf:	89 d8                	mov    eax,ebx
c00051d1:	e8 77 cf ff ff       	call   c000214d <validate>
c00051d6:	89 c5                	mov    ebp,eax
c00051d8:	85 c0                	test   eax,eax
c00051da:	0f 85 4c 02 00 00    	jne    c000542c <f_read+0x276>
c00051e0:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00051e4:	85 ed                	test   ebp,ebp
c00051e6:	0f 85 40 02 00 00    	jne    c000542c <f_read+0x276>
c00051ec:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00051f0:	0f 84 31 02 00 00    	je     c0005427 <f_read+0x271>
c00051f6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051f9:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051fc:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00051ff:	bf 00 00 00 00       	mov    edi,0x0
c0005204:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0005207:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000520b:	89 d1                	mov    ecx,edx
c000520d:	19 f9                	sbb    ecx,edi
c000520f:	0f 83 cf 00 00 00    	jae    c00052e4 <f_read+0x12e>
c0005215:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005219:	e9 c6 00 00 00       	jmp    c00052e4 <f_read+0x12e>
c000521e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005221:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005224:	89 d0                	mov    eax,edx
c0005226:	25 ff 01 00 00       	and    eax,0x1ff
c000522b:	0f 85 c9 01 00 00    	jne    c00053fa <f_read+0x244>
c0005231:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005235:	89 d6                	mov    esi,edx
c0005237:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000523b:	89 cf                	mov    edi,ecx
c000523d:	48                   	dec    eax
c000523e:	0f ac fe 09          	shrd   esi,edi,0x9
c0005242:	21 f0                	and    eax,esi
c0005244:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005248:	0f 84 a6 00 00 00    	je     c00052f4 <f_read+0x13e>
c000524e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005252:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005255:	89 c8                	mov    eax,ecx
c0005257:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000525a:	e8 84 ca ff ff       	call   c0001ce3 <clst2sect>
c000525f:	89 d7                	mov    edi,edx
c0005261:	09 c7                	or     edi,eax
c0005263:	0f 84 b4 00 00 00    	je     c000531d <f_read+0x167>
c0005269:	31 ff                	xor    edi,edi
c000526b:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000526f:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005272:	01 c6                	add    esi,eax
c0005274:	11 d7                	adc    edi,edx
c0005276:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000527e:	0f 86 fd 00 00 00    	jbe    c0005381 <f_read+0x1cb>
c0005284:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005288:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000528c:	c1 e8 09             	shr    eax,0x9
c000528f:	89 04 24             	mov    DWORD PTR [esp],eax
c0005292:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005296:	03 14 24             	add    edx,DWORD PTR [esp]
c0005299:	39 c2                	cmp    edx,eax
c000529b:	76 07                	jbe    c00052a4 <f_read+0xee>
c000529d:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00052a1:	89 04 24             	mov    DWORD PTR [esp],eax
c00052a4:	83 ec 0c             	sub    esp,0xc
c00052a7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00052ab:	57                   	push   edi
c00052ac:	56                   	push   esi
c00052ad:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00052b1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00052b5:	50                   	push   eax
c00052b6:	e8 44 c7 ff ff       	call   c00019ff <disk_read>
c00052bb:	83 c4 20             	add    esp,0x20
c00052be:	85 c0                	test   eax,eax
c00052c0:	75 6e                	jne    c0005330 <f_read+0x17a>
c00052c2:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00052c6:	78 7e                	js     c0005346 <f_read+0x190>
c00052c8:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00052cb:	c1 e6 09             	shl    esi,0x9
c00052ce:	31 ff                	xor    edi,edi
c00052d0:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00052d4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00052d8:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00052dc:	01 30                	add    DWORD PTR [eax],esi
c00052de:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00052e1:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00052e4:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00052e9:	0f 85 2f ff ff ff    	jne    c000521e <f_read+0x68>
c00052ef:	e9 38 01 00 00       	jmp    c000542c <f_read+0x276>
c00052f4:	89 c8                	mov    eax,ecx
c00052f6:	09 d0                	or     eax,edx
c00052f8:	75 05                	jne    c00052ff <f_read+0x149>
c00052fa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00052fd:	eb 19                	jmp    c0005318 <f_read+0x162>
c00052ff:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005303:	74 09                	je     c000530e <f_read+0x158>
c0005305:	89 d8                	mov    eax,ebx
c0005307:	e8 f8 c9 ff ff       	call   c0001d04 <clmt_clust>
c000530c:	eb 0a                	jmp    c0005318 <f_read+0x162>
c000530e:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005311:	89 d8                	mov    eax,ebx
c0005313:	e8 98 da ff ff       	call   c0002db0 <get_fat>
c0005318:	83 f8 01             	cmp    eax,0x1
c000531b:	77 0e                	ja     c000532b <f_read+0x175>
c000531d:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005321:	bd 02 00 00 00       	mov    ebp,0x2
c0005326:	e9 01 01 00 00       	jmp    c000542c <f_read+0x276>
c000532b:	83 f8 ff             	cmp    eax,0xffffffff
c000532e:	75 0e                	jne    c000533e <f_read+0x188>
c0005330:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005334:	bd 01 00 00 00       	mov    ebp,0x1
c0005339:	e9 ee 00 00 00       	jmp    c000542c <f_read+0x276>
c000533e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005341:	e9 08 ff ff ff       	jmp    c000524e <f_read+0x98>
c0005346:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005349:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000534c:	29 f0                	sub    eax,esi
c000534e:	19 fa                	sbb    edx,edi
c0005350:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005353:	89 d7                	mov    edi,edx
c0005355:	ba 00 00 00 00       	mov    edx,0x0
c000535a:	89 f9                	mov    ecx,edi
c000535c:	19 d1                	sbb    ecx,edx
c000535e:	0f 83 64 ff ff ff    	jae    c00052c8 <f_read+0x112>
c0005364:	89 c7                	mov    edi,eax
c0005366:	8d 53 50             	lea    edx,[ebx+0x50]
c0005369:	c1 e7 09             	shl    edi,0x9
c000536c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005370:	b9 00 02 00 00       	mov    ecx,0x200
c0005375:	01 f8                	add    eax,edi
c0005377:	e8 4d c7 ff ff       	call   c0001ac9 <mem_cpy>
c000537c:	e9 47 ff ff ff       	jmp    c00052c8 <f_read+0x112>
c0005381:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005384:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005387:	89 04 24             	mov    DWORD PTR [esp],eax
c000538a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000538e:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c0005392:	75 05                	jne    c0005399 <f_read+0x1e3>
c0005394:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005397:	74 5b                	je     c00053f4 <f_read+0x23e>
c0005399:	8d 43 50             	lea    eax,[ebx+0x50]
c000539c:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00053a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00053a4:	79 2a                	jns    c00053d0 <f_read+0x21a>
c00053a6:	83 ec 0c             	sub    esp,0xc
c00053a9:	6a 01                	push   0x1
c00053ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00053af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00053b3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00053b7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00053bb:	50                   	push   eax
c00053bc:	e8 54 c6 ff ff       	call   c0001a15 <disk_write>
c00053c1:	83 c4 20             	add    esp,0x20
c00053c4:	85 c0                	test   eax,eax
c00053c6:	0f 85 64 ff ff ff    	jne    c0005330 <f_read+0x17a>
c00053cc:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00053d0:	83 ec 0c             	sub    esp,0xc
c00053d3:	6a 01                	push   0x1
c00053d5:	57                   	push   edi
c00053d6:	56                   	push   esi
c00053d7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00053db:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00053df:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00053e3:	50                   	push   eax
c00053e4:	e8 16 c6 ff ff       	call   c00019ff <disk_read>
c00053e9:	83 c4 20             	add    esp,0x20
c00053ec:	85 c0                	test   eax,eax
c00053ee:	0f 85 3c ff ff ff    	jne    c0005330 <f_read+0x17a>
c00053f4:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00053f7:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00053fa:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00053fd:	ba 00 02 00 00       	mov    edx,0x200
c0005402:	25 ff 01 00 00       	and    eax,0x1ff
c0005407:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000540b:	29 c2                	sub    edx,eax
c000540d:	39 d6                	cmp    esi,edx
c000540f:	76 02                	jbe    c0005413 <f_read+0x25d>
c0005411:	89 d6                	mov    esi,edx
c0005413:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005417:	89 f1                	mov    ecx,esi
c0005419:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000541d:	e8 a7 c6 ff ff       	call   c0001ac9 <mem_cpy>
c0005422:	e9 a7 fe ff ff       	jmp    c00052ce <f_read+0x118>
c0005427:	bd 07 00 00 00       	mov    ebp,0x7
c000542c:	83 c4 2c             	add    esp,0x2c
c000542f:	89 e8                	mov    eax,ebp
c0005431:	5b                   	pop    ebx
c0005432:	5e                   	pop    esi
c0005433:	5f                   	pop    edi
c0005434:	5d                   	pop    ebp
c0005435:	c3                   	ret    

c0005436 <f_write>:
c0005436:	55                   	push   ebp
c0005437:	57                   	push   edi
c0005438:	56                   	push   esi
c0005439:	53                   	push   ebx
c000543a:	83 ec 2c             	sub    esp,0x2c
c000543d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005441:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005445:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000544b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000544f:	89 d8                	mov    eax,ebx
c0005451:	e8 f7 cc ff ff       	call   c000214d <validate>
c0005456:	89 c5                	mov    ebp,eax
c0005458:	85 c0                	test   eax,eax
c000545a:	0f 85 86 02 00 00    	jne    c00056e6 <f_write+0x2b0>
c0005460:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005464:	85 ed                	test   ebp,ebp
c0005466:	0f 85 7a 02 00 00    	jne    c00056e6 <f_write+0x2b0>
c000546c:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005470:	0f 84 6b 02 00 00    	je     c00056e1 <f_write+0x2ab>
c0005476:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000547a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000547d:	0f 84 43 01 00 00    	je     c00055c6 <f_write+0x190>
c0005483:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005486:	89 c1                	mov    ecx,eax
c0005488:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000548c:	0f 83 34 01 00 00    	jae    c00055c6 <f_write+0x190>
c0005492:	f7 d0                	not    eax
c0005494:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005498:	e9 29 01 00 00       	jmp    c00055c6 <f_write+0x190>
c000549d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00054a0:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00054a3:	89 d0                	mov    eax,edx
c00054a5:	25 ff 01 00 00       	and    eax,0x1ff
c00054aa:	0f 85 00 02 00 00    	jne    c00056b0 <f_write+0x27a>
c00054b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00054b4:	89 d6                	mov    esi,edx
c00054b6:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00054ba:	89 cf                	mov    edi,ecx
c00054bc:	48                   	dec    eax
c00054bd:	0f ac fe 09          	shrd   esi,edi,0x9
c00054c1:	21 f0                	and    eax,esi
c00054c3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054c7:	0f 84 06 01 00 00    	je     c00055d3 <f_write+0x19d>
c00054cd:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054d1:	0f 88 6e 01 00 00    	js     c0005645 <f_write+0x20f>
c00054d7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00054db:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054de:	89 c8                	mov    eax,ecx
c00054e0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00054e4:	e8 fa c7 ff ff       	call   c0001ce3 <clst2sect>
c00054e9:	89 d1                	mov    ecx,edx
c00054eb:	09 c1                	or     ecx,eax
c00054ed:	0f 84 1c 01 00 00    	je     c000560f <f_write+0x1d9>
c00054f3:	31 ff                	xor    edi,edi
c00054f5:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00054f9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00054fd:	01 c6                	add    esi,eax
c00054ff:	11 d7                	adc    edi,edx
c0005501:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005509:	0f 86 63 01 00 00    	jbe    c0005672 <f_write+0x23c>
c000550f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005513:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005517:	c1 e8 09             	shr    eax,0x9
c000551a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000551e:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005522:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005526:	39 c2                	cmp    edx,eax
c0005528:	76 08                	jbe    c0005532 <f_write+0xfc>
c000552a:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000552e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005532:	83 ec 0c             	sub    esp,0xc
c0005535:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005539:	57                   	push   edi
c000553a:	56                   	push   esi
c000553b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000553f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005543:	50                   	push   eax
c0005544:	e8 cc c4 ff ff       	call   c0001a15 <disk_write>
c0005549:	83 c4 20             	add    esp,0x20
c000554c:	85 c0                	test   eax,eax
c000554e:	0f 85 ce 00 00 00    	jne    c0005622 <f_write+0x1ec>
c0005554:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005557:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000555a:	29 f0                	sub    eax,esi
c000555c:	19 fa                	sbb    edx,edi
c000555e:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005562:	89 d7                	mov    edi,edx
c0005564:	ba 00 00 00 00       	mov    edx,0x0
c0005569:	89 f9                	mov    ecx,edi
c000556b:	19 d1                	sbb    ecx,edx
c000556d:	73 1c                	jae    c000558b <f_write+0x155>
c000556f:	89 c7                	mov    edi,eax
c0005571:	b9 00 02 00 00       	mov    ecx,0x200
c0005576:	c1 e7 09             	shl    edi,0x9
c0005579:	8d 43 50             	lea    eax,[ebx+0x50]
c000557c:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005580:	89 fa                	mov    edx,edi
c0005582:	e8 42 c5 ff ff       	call   c0001ac9 <mem_cpy>
c0005587:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000558b:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000558f:	c1 e6 09             	shl    esi,0x9
c0005592:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005596:	31 ff                	xor    edi,edi
c0005598:	01 30                	add    DWORD PTR [eax],esi
c000559a:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000559e:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00055a2:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00055a5:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00055a8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00055ab:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00055ae:	89 c1                	mov    ecx,eax
c00055b0:	39 f2                	cmp    edx,esi
c00055b2:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00055b5:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00055b8:	19 f9                	sbb    ecx,edi
c00055ba:	73 04                	jae    c00055c0 <f_write+0x18a>
c00055bc:	89 f2                	mov    edx,esi
c00055be:	89 f8                	mov    eax,edi
c00055c0:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00055c3:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00055c6:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00055cb:	0f 85 cc fe ff ff    	jne    c000549d <f_write+0x67>
c00055d1:	eb 2e                	jmp    c0005601 <f_write+0x1cb>
c00055d3:	89 c8                	mov    eax,ecx
c00055d5:	09 d0                	or     eax,edx
c00055d7:	75 0b                	jne    c00055e4 <f_write+0x1ae>
c00055d9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00055dc:	31 d2                	xor    edx,edx
c00055de:	85 c0                	test   eax,eax
c00055e0:	75 28                	jne    c000560a <f_write+0x1d4>
c00055e2:	eb 12                	jmp    c00055f6 <f_write+0x1c0>
c00055e4:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00055e8:	74 09                	je     c00055f3 <f_write+0x1bd>
c00055ea:	89 d8                	mov    eax,ebx
c00055ec:	e8 13 c7 ff ff       	call   c0001d04 <clmt_clust>
c00055f1:	eb 0a                	jmp    c00055fd <f_write+0x1c7>
c00055f3:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055f6:	89 d8                	mov    eax,ebx
c00055f8:	e8 a1 da ff ff       	call   c000309e <create_chain>
c00055fd:	85 c0                	test   eax,eax
c00055ff:	75 09                	jne    c000560a <f_write+0x1d4>
c0005601:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005605:	e9 dc 00 00 00       	jmp    c00056e6 <f_write+0x2b0>
c000560a:	83 f8 01             	cmp    eax,0x1
c000560d:	75 0e                	jne    c000561d <f_write+0x1e7>
c000560f:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005613:	bd 02 00 00 00       	mov    ebp,0x2
c0005618:	e9 c9 00 00 00       	jmp    c00056e6 <f_write+0x2b0>
c000561d:	83 f8 ff             	cmp    eax,0xffffffff
c0005620:	75 0e                	jne    c0005630 <f_write+0x1fa>
c0005622:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005626:	bd 01 00 00 00       	mov    ebp,0x1
c000562b:	e9 b6 00 00 00       	jmp    c00056e6 <f_write+0x2b0>
c0005630:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005633:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005637:	0f 85 90 fe ff ff    	jne    c00054cd <f_write+0x97>
c000563d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005640:	e9 88 fe ff ff       	jmp    c00054cd <f_write+0x97>
c0005645:	83 ec 0c             	sub    esp,0xc
c0005648:	8d 43 50             	lea    eax,[ebx+0x50]
c000564b:	6a 01                	push   0x1
c000564d:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005650:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005653:	50                   	push   eax
c0005654:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005658:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000565c:	50                   	push   eax
c000565d:	e8 b3 c3 ff ff       	call   c0001a15 <disk_write>
c0005662:	83 c4 20             	add    esp,0x20
c0005665:	85 c0                	test   eax,eax
c0005667:	75 b9                	jne    c0005622 <f_write+0x1ec>
c0005669:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000566d:	e9 65 fe ff ff       	jmp    c00054d7 <f_write+0xa1>
c0005672:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005675:	75 05                	jne    c000567c <f_write+0x246>
c0005677:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c000567a:	74 2e                	je     c00056aa <f_write+0x274>
c000567c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000567f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005682:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005685:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005688:	73 20                	jae    c00056aa <f_write+0x274>
c000568a:	83 ec 0c             	sub    esp,0xc
c000568d:	8d 43 50             	lea    eax,[ebx+0x50]
c0005690:	6a 01                	push   0x1
c0005692:	57                   	push   edi
c0005693:	56                   	push   esi
c0005694:	50                   	push   eax
c0005695:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005699:	50                   	push   eax
c000569a:	e8 60 c3 ff ff       	call   c00019ff <disk_read>
c000569f:	83 c4 20             	add    esp,0x20
c00056a2:	85 c0                	test   eax,eax
c00056a4:	0f 85 78 ff ff ff    	jne    c0005622 <f_write+0x1ec>
c00056aa:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00056ad:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00056b0:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00056b3:	ba 00 02 00 00       	mov    edx,0x200
c00056b8:	25 ff 01 00 00       	and    eax,0x1ff
c00056bd:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00056c1:	29 c2                	sub    edx,eax
c00056c3:	39 d6                	cmp    esi,edx
c00056c5:	76 02                	jbe    c00056c9 <f_write+0x293>
c00056c7:	89 d6                	mov    esi,edx
c00056c9:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00056cd:	89 f1                	mov    ecx,esi
c00056cf:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00056d3:	e8 f1 c3 ff ff       	call   c0001ac9 <mem_cpy>
c00056d8:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00056dc:	e9 b1 fe ff ff       	jmp    c0005592 <f_write+0x15c>
c00056e1:	bd 07 00 00 00       	mov    ebp,0x7
c00056e6:	83 c4 2c             	add    esp,0x2c
c00056e9:	89 e8                	mov    eax,ebp
c00056eb:	5b                   	pop    ebx
c00056ec:	5e                   	pop    esi
c00056ed:	5f                   	pop    edi
c00056ee:	5d                   	pop    ebp
c00056ef:	c3                   	ret    

c00056f0 <f_sync>:
c00056f0:	56                   	push   esi
c00056f1:	53                   	push   ebx
c00056f2:	83 ec 64             	sub    esp,0x64
c00056f5:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00056f9:	8d 54 24 10          	lea    edx,[esp+0x10]
c00056fd:	89 d8                	mov    eax,ebx
c00056ff:	e8 49 ca ff ff       	call   c000214d <validate>
c0005704:	85 c0                	test   eax,eax
c0005706:	0f 85 ba 01 00 00    	jne    c00058c6 <f_sync+0x1d6>
c000570c:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000570f:	f6 c2 40             	test   dl,0x40
c0005712:	0f 84 ae 01 00 00    	je     c00058c6 <f_sync+0x1d6>
c0005718:	84 d2                	test   dl,dl
c000571a:	79 33                	jns    c000574f <f_sync+0x5f>
c000571c:	83 ec 0c             	sub    esp,0xc
c000571f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005722:	6a 01                	push   0x1
c0005724:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005727:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000572a:	50                   	push   eax
c000572b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000572f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005733:	50                   	push   eax
c0005734:	e8 dc c2 ff ff       	call   c0001a15 <disk_write>
c0005739:	83 c4 20             	add    esp,0x20
c000573c:	89 c2                	mov    edx,eax
c000573e:	b8 01 00 00 00       	mov    eax,0x1
c0005743:	85 d2                	test   edx,edx
c0005745:	0f 85 7b 01 00 00    	jne    c00058c6 <f_sync+0x1d6>
c000574b:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000574f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005753:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005756:	0f 85 11 01 00 00    	jne    c000586d <f_sync+0x17d>
c000575c:	89 d8                	mov    eax,ebx
c000575e:	e8 13 d6 ff ff       	call   c0002d76 <fill_first_frag>
c0005763:	85 c0                	test   eax,eax
c0005765:	0f 85 5b 01 00 00    	jne    c00058c6 <f_sync+0x1d6>
c000576b:	83 c9 ff             	or     ecx,0xffffffff
c000576e:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005771:	89 d8                	mov    eax,ebx
c0005773:	e8 c9 d5 ff ff       	call   c0002d41 <fill_last_frag>
c0005778:	85 c0                	test   eax,eax
c000577a:	0f 85 46 01 00 00    	jne    c00058c6 <f_sync+0x1d6>
c0005780:	83 ec 0c             	sub    esp,0xc
c0005783:	68 60 04 00 00       	push   0x460
c0005788:	e8 f0 2a 00 00       	call   c000827d <ff_memalloc>
c000578d:	83 c4 10             	add    esp,0x10
c0005790:	89 c6                	mov    esi,eax
c0005792:	b8 11 00 00 00       	mov    eax,0x11
c0005797:	85 f6                	test   esi,esi
c0005799:	0f 84 27 01 00 00    	je     c00058c6 <f_sync+0x1d6>
c000579f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057a3:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00057a9:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00057ac:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00057af:	89 da                	mov    edx,ebx
c00057b1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00057b5:	e8 af df ff ff       	call   c0003769 <load_obj_xdir>
c00057ba:	85 c0                	test   eax,eax
c00057bc:	0f 85 95 00 00 00    	jne    c0005857 <f_sync+0x167>
c00057c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057c6:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00057c9:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00057cd:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00057d0:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00057d3:	83 ca 01             	or     edx,0x1
c00057d6:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00057d9:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00057dc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057df:	83 c0 34             	add    eax,0x34
c00057e2:	e8 d9 c2 ff ff       	call   c0001ac0 <st_dword>
c00057e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057eb:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057ee:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057f1:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057f4:	83 c0 38             	add    eax,0x38
c00057f7:	e8 c7 c2 ff ff       	call   c0001ac3 <st_qword>
c00057fc:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005803:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005806:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005809:	83 c0 28             	add    eax,0x28
c000580c:	e8 b2 c2 ff ff       	call   c0001ac3 <st_qword>
c0005811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005815:	ba 00 00 21 50       	mov    edx,0x50210000
c000581a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000581d:	83 c0 0c             	add    eax,0xc
c0005820:	e8 9b c2 ff ff       	call   c0001ac0 <st_dword>
c0005825:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005829:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000582c:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005830:	31 d2                	xor    edx,edx
c0005832:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005835:	83 c0 10             	add    eax,0x10
c0005838:	e8 83 c2 ff ff       	call   c0001ac0 <st_dword>
c000583d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005841:	e8 62 e1 ff ff       	call   c00039a8 <store_xdir>
c0005846:	85 c0                	test   eax,eax
c0005848:	75 0d                	jne    c0005857 <f_sync+0x167>
c000584a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000584e:	e8 00 eb ff ff       	call   c0004353 <sync_fs>
c0005853:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005857:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000585b:	83 ec 0c             	sub    esp,0xc
c000585e:	56                   	push   esi
c000585f:	e8 2f 2a 00 00       	call   c0008293 <ff_memfree>
c0005864:	83 c4 10             	add    esp,0x10
c0005867:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000586b:	eb 59                	jmp    c00058c6 <f_sync+0x1d6>
c000586d:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005870:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005873:	e8 b0 c9 ff ff       	call   c0002228 <move_window>
c0005878:	85 c0                	test   eax,eax
c000587a:	75 4a                	jne    c00058c6 <f_sync+0x1d6>
c000587c:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c000587f:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005883:	89 f2                	mov    edx,esi
c0005885:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005888:	8b 03                	mov    eax,DWORD PTR [ebx]
c000588a:	e8 5f f3 ff ff       	call   c0004bee <st_clust.isra.1>
c000588f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005892:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005895:	e8 26 c2 ff ff       	call   c0001ac0 <st_dword>
c000589a:	8d 46 16             	lea    eax,[esi+0x16]
c000589d:	ba 00 00 21 50       	mov    edx,0x50210000
c00058a2:	e8 19 c2 ff ff       	call   c0001ac0 <st_dword>
c00058a7:	8d 46 12             	lea    eax,[esi+0x12]
c00058aa:	31 d2                	xor    edx,edx
c00058ac:	e8 0b c2 ff ff       	call   c0001abc <st_word>
c00058b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058b5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00058b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058bd:	e8 91 ea ff ff       	call   c0004353 <sync_fs>
c00058c2:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00058c6:	83 c4 64             	add    esp,0x64
c00058c9:	5b                   	pop    ebx
c00058ca:	5e                   	pop    esi
c00058cb:	c3                   	ret    

c00058cc <f_close>:
c00058cc:	53                   	push   ebx
c00058cd:	83 ec 24             	sub    esp,0x24
c00058d0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00058d4:	53                   	push   ebx
c00058d5:	e8 16 fe ff ff       	call   c00056f0 <f_sync>
c00058da:	83 c4 10             	add    esp,0x10
c00058dd:	85 c0                	test   eax,eax
c00058df:	75 15                	jne    c00058f6 <f_close+0x2a>
c00058e1:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00058e5:	89 d8                	mov    eax,ebx
c00058e7:	e8 61 c8 ff ff       	call   c000214d <validate>
c00058ec:	85 c0                	test   eax,eax
c00058ee:	75 06                	jne    c00058f6 <f_close+0x2a>
c00058f0:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00058f6:	83 c4 18             	add    esp,0x18
c00058f9:	5b                   	pop    ebx
c00058fa:	c3                   	ret    

c00058fb <f_lseek>:
c00058fb:	55                   	push   ebp
c00058fc:	57                   	push   edi
c00058fd:	56                   	push   esi
c00058fe:	53                   	push   ebx
c00058ff:	83 ec 3c             	sub    esp,0x3c
c0005902:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005906:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000590a:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000590e:	89 04 24             	mov    DWORD PTR [esp],eax
c0005911:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005915:	89 d8                	mov    eax,ebx
c0005917:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c000591b:	e8 2d c8 ff ff       	call   c000214d <validate>
c0005920:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005924:	85 c0                	test   eax,eax
c0005926:	0f 85 7a 04 00 00    	jne    c0005da6 <f_lseek+0x4ab>
c000592c:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005930:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005934:	85 c0                	test   eax,eax
c0005936:	0f 85 6a 04 00 00    	jne    c0005da6 <f_lseek+0x4ab>
c000593c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005940:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005943:	74 0c                	je     c0005951 <f_lseek+0x56>
c0005945:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005948:	85 c0                	test   eax,eax
c000594a:	75 1f                	jne    c000596b <f_lseek+0x70>
c000594c:	e9 b5 01 00 00       	jmp    c0005b06 <f_lseek+0x20b>
c0005951:	83 c9 ff             	or     ecx,0xffffffff
c0005954:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005957:	89 d8                	mov    eax,ebx
c0005959:	e8 e3 d3 ff ff       	call   c0002d41 <fill_last_frag>
c000595e:	85 c0                	test   eax,eax
c0005960:	74 e3                	je     c0005945 <f_lseek+0x4a>
c0005962:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005966:	e9 3b 04 00 00       	jmp    c0005da6 <f_lseek+0x4ab>
c000596b:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005970:	0f 85 ac 00 00 00    	jne    c0005a22 <f_lseek+0x127>
c0005976:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c000597a:	0f 85 a2 00 00 00    	jne    c0005a22 <f_lseek+0x127>
c0005980:	8d 78 04             	lea    edi,[eax+0x4]
c0005983:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005986:	8b 00                	mov    eax,DWORD PTR [eax]
c0005988:	be 02 00 00 00       	mov    esi,0x2
c000598d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005991:	85 ed                	test   ebp,ebp
c0005993:	74 73                	je     c0005a08 <f_lseek+0x10d>
c0005995:	89 e9                	mov    ecx,ebp
c0005997:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000599e:	ff 04 24             	inc    DWORD PTR [esp]
c00059a1:	89 ca                	mov    edx,ecx
c00059a3:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00059a7:	89 d8                	mov    eax,ebx
c00059a9:	e8 02 d4 ff ff       	call   c0002db0 <get_fat>
c00059ae:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00059b2:	83 f8 01             	cmp    eax,0x1
c00059b5:	77 11                	ja     c00059c8 <f_lseek+0xcd>
c00059b7:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00059bb:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c00059c3:	e9 de 03 00 00       	jmp    c0005da6 <f_lseek+0x4ab>
c00059c8:	83 f8 ff             	cmp    eax,0xffffffff
c00059cb:	75 11                	jne    c00059de <f_lseek+0xe3>
c00059cd:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00059d1:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c00059d9:	e9 c8 03 00 00       	jmp    c0005da6 <f_lseek+0x4ab>
c00059de:	8d 51 01             	lea    edx,[ecx+0x1]
c00059e1:	89 c1                	mov    ecx,eax
c00059e3:	39 c2                	cmp    edx,eax
c00059e5:	74 b7                	je     c000599e <f_lseek+0xa3>
c00059e7:	83 c6 02             	add    esi,0x2
c00059ea:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c00059ee:	72 0b                	jb     c00059fb <f_lseek+0x100>
c00059f0:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00059f3:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c00059f6:	89 0f                	mov    DWORD PTR [edi],ecx
c00059f8:	83 c7 08             	add    edi,0x8
c00059fb:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00059ff:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005a02:	76 04                	jbe    c0005a08 <f_lseek+0x10d>
c0005a04:	89 c5                	mov    ebp,eax
c0005a06:	eb 8d                	jmp    c0005995 <f_lseek+0x9a>
c0005a08:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005a0b:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005a0f:	89 30                	mov    DWORD PTR [eax],esi
c0005a11:	0f 87 87 03 00 00    	ja     c0005d9e <f_lseek+0x4a3>
c0005a17:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005a1d:	e9 84 03 00 00       	jmp    c0005da6 <f_lseek+0x4ab>
c0005a22:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005a25:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005a28:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005a2c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005a30:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005a34:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005a37:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005a3b:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005a3f:	73 0f                	jae    c0005a50 <f_lseek+0x155>
c0005a41:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005a44:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005a48:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005a4c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005a50:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005a54:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005a58:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005a5b:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005a5e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a62:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005a66:	0f 84 3a 03 00 00    	je     c0005da6 <f_lseek+0x4ab>
c0005a6c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005a70:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005a74:	83 c6 ff             	add    esi,0xffffffff
c0005a77:	89 d8                	mov    eax,ebx
c0005a79:	83 d7 ff             	adc    edi,0xffffffff
c0005a7c:	89 f2                	mov    edx,esi
c0005a7e:	89 f9                	mov    ecx,edi
c0005a80:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005a84:	89 34 24             	mov    DWORD PTR [esp],esi
c0005a87:	e8 78 c2 ff ff       	call   c0001d04 <clmt_clust>
c0005a8c:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005a90:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005a93:	89 c2                	mov    edx,eax
c0005a95:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005a99:	89 c8                	mov    eax,ecx
c0005a9b:	e8 43 c2 ff ff       	call   c0001ce3 <clst2sect>
c0005aa0:	89 d7                	mov    edi,edx
c0005aa2:	09 c7                	or     edi,eax
c0005aa4:	0f 84 0d ff ff ff    	je     c00059b7 <f_lseek+0xbc>
c0005aaa:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005aae:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005ab4:	0f 84 ec 02 00 00    	je     c0005da6 <f_lseek+0x4ab>
c0005aba:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005abe:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ac2:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005ac5:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ac9:	0f ac fe 09          	shrd   esi,edi,0x9
c0005acd:	4d                   	dec    ebp
c0005ace:	31 ff                	xor    edi,edi
c0005ad0:	21 ee                	and    esi,ebp
c0005ad2:	01 c6                	add    esi,eax
c0005ad4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005ad7:	11 d7                	adc    edi,edx
c0005ad9:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005adc:	39 fa                	cmp    edx,edi
c0005ade:	75 08                	jne    c0005ae8 <f_lseek+0x1ed>
c0005ae0:	39 f0                	cmp    eax,esi
c0005ae2:	0f 84 be 02 00 00    	je     c0005da6 <f_lseek+0x4ab>
c0005ae8:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005aeb:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005aef:	0f 89 80 02 00 00    	jns    c0005d75 <f_lseek+0x47a>
c0005af5:	83 ec 0c             	sub    esp,0xc
c0005af8:	6a 01                	push   0x1
c0005afa:	52                   	push   edx
c0005afb:	50                   	push   eax
c0005afc:	55                   	push   ebp
c0005afd:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005b01:	e9 5a 02 00 00       	jmp    c0005d60 <f_lseek+0x465>
c0005b06:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005b0a:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005b0d:	74 16                	je     c0005b25 <f_lseek+0x22a>
c0005b0f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005b14:	76 0f                	jbe    c0005b25 <f_lseek+0x22a>
c0005b16:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005b1d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005b25:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005b28:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005b2b:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005b2e:	89 c7                	mov    edi,eax
c0005b30:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005b34:	73 0d                	jae    c0005b43 <f_lseek+0x248>
c0005b36:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005b3a:	75 07                	jne    c0005b43 <f_lseek+0x248>
c0005b3c:	89 14 24             	mov    DWORD PTR [esp],edx
c0005b3f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005b43:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005b46:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005b49:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005b4d:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005b54:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005b5b:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005b5e:	75 09                	jne    c0005b69 <f_lseek+0x26e>
c0005b60:	31 f6                	xor    esi,esi
c0005b62:	31 ff                	xor    edi,edi
c0005b64:	e9 af 01 00 00       	jmp    c0005d18 <f_lseek+0x41d>
c0005b69:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005b6d:	89 d7                	mov    edi,edx
c0005b6f:	c1 e1 09             	shl    ecx,0x9
c0005b72:	09 c7                	or     edi,eax
c0005b74:	89 cd                	mov    ebp,ecx
c0005b76:	74 6d                	je     c0005be5 <f_lseek+0x2ea>
c0005b78:	83 c0 ff             	add    eax,0xffffffff
c0005b7b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b7f:	83 d2 ff             	adc    edx,0xffffffff
c0005b82:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b85:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b89:	83 c0 ff             	add    eax,0xffffffff
c0005b8c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b90:	83 d2 ff             	adc    edx,0xffffffff
c0005b93:	31 ff                	xor    edi,edi
c0005b95:	57                   	push   edi
c0005b96:	51                   	push   ecx
c0005b97:	52                   	push   edx
c0005b98:	50                   	push   eax
c0005b99:	e8 ae 03 02 00       	call   c0025f4c <__udivdi3>
c0005b9e:	83 c4 10             	add    esp,0x10
c0005ba1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005ba5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005ba9:	57                   	push   edi
c0005baa:	55                   	push   ebp
c0005bab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005baf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005bb3:	e8 94 03 02 00       	call   c0025f4c <__udivdi3>
c0005bb8:	83 c4 10             	add    esp,0x10
c0005bbb:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005bbf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005bc3:	19 d1                	sbb    ecx,edx
c0005bc5:	72 1e                	jb     c0005be5 <f_lseek+0x2ea>
c0005bc7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005bcb:	89 e9                	mov    ecx,ebp
c0005bcd:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005bd0:	f7 d9                	neg    ecx
c0005bd2:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005bd5:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005bd9:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005bdc:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005bdf:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005be3:	eb 28                	jmp    c0005c0d <f_lseek+0x312>
c0005be5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005be8:	85 c0                	test   eax,eax
c0005bea:	75 1e                	jne    c0005c0a <f_lseek+0x30f>
c0005bec:	31 d2                	xor    edx,edx
c0005bee:	89 d8                	mov    eax,ebx
c0005bf0:	e8 a9 d4 ff ff       	call   c000309e <create_chain>
c0005bf5:	83 f8 01             	cmp    eax,0x1
c0005bf8:	0f 84 b9 fd ff ff    	je     c00059b7 <f_lseek+0xbc>
c0005bfe:	83 f8 ff             	cmp    eax,0xffffffff
c0005c01:	0f 84 c6 fd ff ff    	je     c00059cd <f_lseek+0xd2>
c0005c07:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005c0a:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c0d:	85 c0                	test   eax,eax
c0005c0f:	0f 84 4b ff ff ff    	je     c0005b60 <f_lseek+0x265>
c0005c15:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005c19:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005c21:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005c24:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005c28:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005c2b:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005c2e:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005c32:	0f 83 9d 00 00 00    	jae    c0005cd5 <f_lseek+0x3da>
c0005c38:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005c3c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005c40:	29 34 24             	sub    DWORD PTR [esp],esi
c0005c43:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005c47:	01 f2                	add    edx,esi
c0005c49:	11 f9                	adc    ecx,edi
c0005c4b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005c4f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005c53:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005c56:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005c59:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005c5c:	f6 c1 02             	test   cl,0x2
c0005c5f:	74 35                	je     c0005c96 <f_lseek+0x39b>
c0005c61:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005c65:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005c68:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005c6b:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005c6f:	73 16                	jae    c0005c87 <f_lseek+0x38c>
c0005c71:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c75:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c79:	88 ca                	mov    dl,cl
c0005c7b:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005c7e:	83 ca 40             	or     edx,0x40
c0005c81:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005c84:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005c87:	89 c2                	mov    edx,eax
c0005c89:	89 d8                	mov    eax,ebx
c0005c8b:	e8 0e d4 ff ff       	call   c000309e <create_chain>
c0005c90:	85 c0                	test   eax,eax
c0005c92:	75 0b                	jne    c0005c9f <f_lseek+0x3a4>
c0005c94:	eb 30                	jmp    c0005cc6 <f_lseek+0x3cb>
c0005c96:	89 c2                	mov    edx,eax
c0005c98:	89 d8                	mov    eax,ebx
c0005c9a:	e8 11 d1 ff ff       	call   c0002db0 <get_fat>
c0005c9f:	83 f8 ff             	cmp    eax,0xffffffff
c0005ca2:	0f 84 25 fd ff ff    	je     c00059cd <f_lseek+0xd2>
c0005ca8:	83 f8 01             	cmp    eax,0x1
c0005cab:	0f 86 06 fd ff ff    	jbe    c00059b7 <f_lseek+0xbc>
c0005cb1:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005cb5:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005cb8:	0f 86 f9 fc ff ff    	jbe    c00059b7 <f_lseek+0xbc>
c0005cbe:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005cc1:	e9 5b ff ff ff       	jmp    c0005c21 <f_lseek+0x326>
c0005cc6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005ccd:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005cd5:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005cd8:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005cdc:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005cdf:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ce2:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005ce5:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005ceb:	0f 84 6f fe ff ff    	je     c0005b60 <f_lseek+0x265>
c0005cf1:	89 c2                	mov    edx,eax
c0005cf3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005cf7:	e8 e7 bf ff ff       	call   c0001ce3 <clst2sect>
c0005cfc:	89 d7                	mov    edi,edx
c0005cfe:	09 c7                	or     edi,eax
c0005d00:	0f 84 b1 fc ff ff    	je     c00059b7 <f_lseek+0xbc>
c0005d06:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d0a:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005d0d:	0f ac fe 09          	shrd   esi,edi,0x9
c0005d11:	c1 ef 09             	shr    edi,0x9
c0005d14:	01 c6                	add    esi,eax
c0005d16:	11 d7                	adc    edi,edx
c0005d18:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d1b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d1e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005d21:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005d24:	19 d1                	sbb    ecx,edx
c0005d26:	73 0a                	jae    c0005d32 <f_lseek+0x437>
c0005d28:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005d2b:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005d2e:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005d32:	a9 ff 01 00 00       	test   eax,0x1ff
c0005d37:	74 6d                	je     c0005da6 <f_lseek+0x4ab>
c0005d39:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005d3c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005d3f:	39 fa                	cmp    edx,edi
c0005d41:	75 04                	jne    c0005d47 <f_lseek+0x44c>
c0005d43:	39 f0                	cmp    eax,esi
c0005d45:	74 5f                	je     c0005da6 <f_lseek+0x4ab>
c0005d47:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d4a:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d4e:	79 25                	jns    c0005d75 <f_lseek+0x47a>
c0005d50:	83 ec 0c             	sub    esp,0xc
c0005d53:	6a 01                	push   0x1
c0005d55:	52                   	push   edx
c0005d56:	50                   	push   eax
c0005d57:	55                   	push   ebp
c0005d58:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d5c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d60:	50                   	push   eax
c0005d61:	e8 af bc ff ff       	call   c0001a15 <disk_write>
c0005d66:	83 c4 20             	add    esp,0x20
c0005d69:	85 c0                	test   eax,eax
c0005d6b:	0f 85 5c fc ff ff    	jne    c00059cd <f_lseek+0xd2>
c0005d71:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005d75:	83 ec 0c             	sub    esp,0xc
c0005d78:	6a 01                	push   0x1
c0005d7a:	57                   	push   edi
c0005d7b:	56                   	push   esi
c0005d7c:	55                   	push   ebp
c0005d7d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d81:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d85:	50                   	push   eax
c0005d86:	e8 74 bc ff ff       	call   c00019ff <disk_read>
c0005d8b:	83 c4 20             	add    esp,0x20
c0005d8e:	85 c0                	test   eax,eax
c0005d90:	0f 85 37 fc ff ff    	jne    c00059cd <f_lseek+0xd2>
c0005d96:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005d99:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005d9c:	eb 08                	jmp    c0005da6 <f_lseek+0x4ab>
c0005d9e:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005da6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005daa:	83 c4 3c             	add    esp,0x3c
c0005dad:	5b                   	pop    ebx
c0005dae:	5e                   	pop    esi
c0005daf:	5f                   	pop    edi
c0005db0:	5d                   	pop    ebp
c0005db1:	c3                   	ret    

c0005db2 <f_opendir>:
c0005db2:	56                   	push   esi
c0005db3:	b8 09 00 00 00       	mov    eax,0x9
c0005db8:	53                   	push   ebx
c0005db9:	83 ec 24             	sub    esp,0x24
c0005dbc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005dc0:	85 db                	test   ebx,ebx
c0005dc2:	0f 84 e6 00 00 00    	je     c0005eae <f_opendir+0xfc>
c0005dc8:	31 c9                	xor    ecx,ecx
c0005dca:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005dce:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005dd2:	e8 03 c7 ff ff       	call   c00024da <mount_volume>
c0005dd7:	85 c0                	test   eax,eax
c0005dd9:	0f 85 c9 00 00 00    	jne    c0005ea8 <f_opendir+0xf6>
c0005ddf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005de3:	83 ec 0c             	sub    esp,0xc
c0005de6:	89 03                	mov    DWORD PTR [ebx],eax
c0005de8:	68 60 04 00 00       	push   0x460
c0005ded:	e8 8b 24 00 00       	call   c000827d <ff_memalloc>
c0005df2:	83 c4 10             	add    esp,0x10
c0005df5:	89 c6                	mov    esi,eax
c0005df7:	b8 11 00 00 00       	mov    eax,0x11
c0005dfc:	85 f6                	test   esi,esi
c0005dfe:	0f 84 aa 00 00 00    	je     c0005eae <f_opendir+0xfc>
c0005e04:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e08:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005e0e:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005e11:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005e14:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005e18:	89 d8                	mov    eax,ebx
c0005e1a:	e8 31 ee ff ff       	call   c0004c50 <follow_path>
c0005e1f:	85 c0                	test   eax,eax
c0005e21:	75 61                	jne    c0005e84 <f_opendir+0xd2>
c0005e23:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005e27:	78 46                	js     c0005e6f <f_opendir+0xbd>
c0005e29:	b8 05 00 00 00       	mov    eax,0x5
c0005e2e:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005e32:	74 50                	je     c0005e84 <f_opendir+0xd2>
c0005e34:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005e38:	8a 01                	mov    al,BYTE PTR [ecx]
c0005e3a:	3c 04                	cmp    al,0x4
c0005e3c:	75 26                	jne    c0005e64 <f_opendir+0xb2>
c0005e3e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005e41:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005e44:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005e47:	30 d2                	xor    dl,dl
c0005e49:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005e4d:	09 c2                	or     edx,eax
c0005e4f:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005e52:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005e55:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005e58:	89 da                	mov    edx,ebx
c0005e5a:	8d 41 10             	lea    eax,[ecx+0x10]
c0005e5d:	e8 b4 ed ff ff       	call   c0004c16 <init_alloc_info.isra.2>
c0005e62:	eb 0b                	jmp    c0005e6f <f_opendir+0xbd>
c0005e64:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005e67:	e8 59 ed ff ff       	call   c0004bc5 <ld_clust.isra.0>
c0005e6c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e6f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e73:	31 d2                	xor    edx,edx
c0005e75:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005e79:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005e7d:	89 d8                	mov    eax,ebx
c0005e7f:	e8 22 d1 ff ff       	call   c0002fa6 <dir_sdi>
c0005e84:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005e88:	83 ec 0c             	sub    esp,0xc
c0005e8b:	56                   	push   esi
c0005e8c:	e8 02 24 00 00       	call   c0008293 <ff_memfree>
c0005e91:	83 c4 10             	add    esp,0x10
c0005e94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e98:	83 f8 04             	cmp    eax,0x4
c0005e9b:	74 06                	je     c0005ea3 <f_opendir+0xf1>
c0005e9d:	85 c0                	test   eax,eax
c0005e9f:	74 0d                	je     c0005eae <f_opendir+0xfc>
c0005ea1:	eb 05                	jmp    c0005ea8 <f_opendir+0xf6>
c0005ea3:	b8 05 00 00 00       	mov    eax,0x5
c0005ea8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005eae:	83 c4 24             	add    esp,0x24
c0005eb1:	5b                   	pop    ebx
c0005eb2:	5e                   	pop    esi
c0005eb3:	c3                   	ret    

c0005eb4 <f_closedir>:
c0005eb4:	53                   	push   ebx
c0005eb5:	83 ec 18             	sub    esp,0x18
c0005eb8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005ebc:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005ec0:	89 d8                	mov    eax,ebx
c0005ec2:	e8 86 c2 ff ff       	call   c000214d <validate>
c0005ec7:	85 c0                	test   eax,eax
c0005ec9:	75 06                	jne    c0005ed1 <f_closedir+0x1d>
c0005ecb:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ed1:	83 c4 18             	add    esp,0x18
c0005ed4:	5b                   	pop    ebx
c0005ed5:	c3                   	ret    

c0005ed6 <f_readdir>:
c0005ed6:	57                   	push   edi
c0005ed7:	56                   	push   esi
c0005ed8:	53                   	push   ebx
c0005ed9:	83 ec 20             	sub    esp,0x20
c0005edc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ee0:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005ee4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005ee8:	89 d8                	mov    eax,ebx
c0005eea:	e8 5e c2 ff ff       	call   c000214d <validate>
c0005eef:	85 c0                	test   eax,eax
c0005ef1:	75 77                	jne    c0005f6a <f_readdir+0x94>
c0005ef3:	85 ff                	test   edi,edi
c0005ef5:	75 0b                	jne    c0005f02 <f_readdir+0x2c>
c0005ef7:	31 d2                	xor    edx,edx
c0005ef9:	89 d8                	mov    eax,ebx
c0005efb:	e8 a6 d0 ff ff       	call   c0002fa6 <dir_sdi>
c0005f00:	eb 68                	jmp    c0005f6a <f_readdir+0x94>
c0005f02:	83 ec 0c             	sub    esp,0xc
c0005f05:	68 60 04 00 00       	push   0x460
c0005f0a:	e8 6e 23 00 00       	call   c000827d <ff_memalloc>
c0005f0f:	83 c4 10             	add    esp,0x10
c0005f12:	89 c6                	mov    esi,eax
c0005f14:	b8 11 00 00 00       	mov    eax,0x11
c0005f19:	85 f6                	test   esi,esi
c0005f1b:	74 4d                	je     c0005f6a <f_readdir+0x94>
c0005f1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f21:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f27:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f2a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f2d:	31 d2                	xor    edx,edx
c0005f2f:	89 d8                	mov    eax,ebx
c0005f31:	e8 80 d8 ff ff       	call   c00037b6 <dir_read>
c0005f36:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0005f3b:	75 19                	jne    c0005f56 <f_readdir+0x80>
c0005f3d:	89 fa                	mov    edx,edi
c0005f3f:	89 d8                	mov    eax,ebx
c0005f41:	e8 7e ea ff ff       	call   c00049c4 <get_fileinfo>
c0005f46:	31 d2                	xor    edx,edx
c0005f48:	89 d8                	mov    eax,ebx
c0005f4a:	e8 af d5 ff ff       	call   c00034fe <dir_next>
c0005f4f:	83 f8 04             	cmp    eax,0x4
c0005f52:	75 02                	jne    c0005f56 <f_readdir+0x80>
c0005f54:	31 c0                	xor    eax,eax
c0005f56:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f5a:	83 ec 0c             	sub    esp,0xc
c0005f5d:	56                   	push   esi
c0005f5e:	e8 30 23 00 00       	call   c0008293 <ff_memfree>
c0005f63:	83 c4 10             	add    esp,0x10
c0005f66:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f6a:	83 c4 20             	add    esp,0x20
c0005f6d:	5b                   	pop    ebx
c0005f6e:	5e                   	pop    esi
c0005f6f:	5f                   	pop    edi
c0005f70:	c3                   	ret    

c0005f71 <f_stat>:
c0005f71:	57                   	push   edi
c0005f72:	31 c9                	xor    ecx,ecx
c0005f74:	56                   	push   esi
c0005f75:	53                   	push   ebx
c0005f76:	83 ec 50             	sub    esp,0x50
c0005f79:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005f7d:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005f81:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005f85:	e8 50 c5 ff ff       	call   c00024da <mount_volume>
c0005f8a:	89 c3                	mov    ebx,eax
c0005f8c:	85 c0                	test   eax,eax
c0005f8e:	75 67                	jne    c0005ff7 <f_stat+0x86>
c0005f90:	83 ec 0c             	sub    esp,0xc
c0005f93:	bb 11 00 00 00       	mov    ebx,0x11
c0005f98:	68 60 04 00 00       	push   0x460
c0005f9d:	e8 db 22 00 00       	call   c000827d <ff_memalloc>
c0005fa2:	83 c4 10             	add    esp,0x10
c0005fa5:	89 c6                	mov    esi,eax
c0005fa7:	85 c0                	test   eax,eax
c0005fa9:	74 4c                	je     c0005ff7 <f_stat+0x86>
c0005fab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005faf:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005fb5:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005fb8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005fbb:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005fbf:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005fc3:	e8 88 ec ff ff       	call   c0004c50 <follow_path>
c0005fc8:	89 c3                	mov    ebx,eax
c0005fca:	85 c0                	test   eax,eax
c0005fcc:	75 1d                	jne    c0005feb <f_stat+0x7a>
c0005fce:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0005fd3:	78 11                	js     c0005fe6 <f_stat+0x75>
c0005fd5:	85 ff                	test   edi,edi
c0005fd7:	74 12                	je     c0005feb <f_stat+0x7a>
c0005fd9:	89 fa                	mov    edx,edi
c0005fdb:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005fdf:	e8 e0 e9 ff ff       	call   c00049c4 <get_fileinfo>
c0005fe4:	eb 05                	jmp    c0005feb <f_stat+0x7a>
c0005fe6:	bb 06 00 00 00       	mov    ebx,0x6
c0005feb:	83 ec 0c             	sub    esp,0xc
c0005fee:	56                   	push   esi
c0005fef:	e8 9f 22 00 00       	call   c0008293 <ff_memfree>
c0005ff4:	83 c4 10             	add    esp,0x10
c0005ff7:	83 c4 50             	add    esp,0x50
c0005ffa:	89 d8                	mov    eax,ebx
c0005ffc:	5b                   	pop    ebx
c0005ffd:	5e                   	pop    esi
c0005ffe:	5f                   	pop    edi
c0005fff:	c3                   	ret    

c0006000 <f_getfree>:
c0006000:	55                   	push   ebp
c0006001:	31 c9                	xor    ecx,ecx
c0006003:	57                   	push   edi
c0006004:	56                   	push   esi
c0006005:	53                   	push   ebx
c0006006:	83 ec 5c             	sub    esp,0x5c
c0006009:	8d 54 24 24          	lea    edx,[esp+0x24]
c000600d:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006011:	e8 c4 c4 ff ff       	call   c00024da <mount_volume>
c0006016:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000601a:	85 c0                	test   eax,eax
c000601c:	0f 85 9d 01 00 00    	jne    c00061bf <f_getfree+0x1bf>
c0006022:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006026:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c000602a:	89 02                	mov    DWORD PTR [edx],eax
c000602c:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c000602f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006032:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006035:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006039:	39 f2                	cmp    edx,esi
c000603b:	77 0b                	ja     c0006048 <f_getfree+0x48>
c000603d:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006041:	89 10                	mov    DWORD PTR [eax],edx
c0006043:	e9 77 01 00 00       	jmp    c00061bf <f_getfree+0x1bf>
c0006048:	8a 10                	mov    dl,BYTE PTR [eax]
c000604a:	80 fa 01             	cmp    dl,0x1
c000604d:	75 3a                	jne    c0006089 <f_getfree+0x89>
c000604f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006053:	be 02 00 00 00       	mov    esi,0x2
c0006058:	31 db                	xor    ebx,ebx
c000605a:	89 f2                	mov    edx,esi
c000605c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006060:	e8 4b cd ff ff       	call   c0002db0 <get_fat>
c0006065:	83 f8 ff             	cmp    eax,0xffffffff
c0006068:	0f 84 28 01 00 00    	je     c0006196 <f_getfree+0x196>
c000606e:	83 f8 01             	cmp    eax,0x1
c0006071:	0f 84 29 01 00 00    	je     c00061a0 <f_getfree+0x1a0>
c0006077:	83 d3 00             	adc    ebx,0x0
c000607a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000607e:	46                   	inc    esi
c000607f:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006082:	77 d6                	ja     c000605a <f_getfree+0x5a>
c0006084:	e9 25 01 00 00       	jmp    c00061ae <f_getfree+0x1ae>
c0006089:	80 fa 04             	cmp    dl,0x4
c000608c:	0f 85 88 00 00 00    	jne    c000611a <f_getfree+0x11a>
c0006092:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0006095:	31 ed                	xor    ebp,ebp
c0006097:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c000609a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000609e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00060a2:	31 db                	xor    ebx,ebx
c00060a4:	85 ed                	test   ebp,ebp
c00060a6:	75 3f                	jne    c00060e7 <f_getfree+0xe7>
c00060a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00060ac:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00060b0:	83 c0 01             	add    eax,0x1
c00060b3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00060b7:	83 d2 00             	adc    edx,0x0
c00060ba:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00060be:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00060c2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060c6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00060ca:	e8 59 c1 ff ff       	call   c0002228 <move_window>
c00060cf:	85 c0                	test   eax,eax
c00060d1:	0f 85 d3 00 00 00    	jne    c00061aa <f_getfree+0x1aa>
c00060d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00060db:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00060df:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00060e3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00060e7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060eb:	8d 4e f8             	lea    ecx,[esi-0x8]
c00060ee:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00060f2:	89 cf                	mov    edi,ecx
c00060f4:	85 f6                	test   esi,esi
c00060f6:	74 12                	je     c000610a <f_getfree+0x10a>
c00060f8:	88 c1                	mov    cl,al
c00060fa:	83 e1 01             	and    ecx,0x1
c00060fd:	80 f9 01             	cmp    cl,0x1
c0006100:	83 d3 00             	adc    ebx,0x0
c0006103:	d0 e8                	shr    al,1
c0006105:	4e                   	dec    esi
c0006106:	39 fe                	cmp    esi,edi
c0006108:	75 ea                	jne    c00060f4 <f_getfree+0xf4>
c000610a:	45                   	inc    ebp
c000610b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006111:	85 f6                	test   esi,esi
c0006113:	75 8f                	jne    c00060a4 <f_getfree+0xa4>
c0006115:	e9 94 00 00 00       	jmp    c00061ae <f_getfree+0x1ae>
c000611a:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000611d:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006120:	31 f6                	xor    esi,esi
c0006122:	31 db                	xor    ebx,ebx
c0006124:	85 f6                	test   esi,esi
c0006126:	75 1b                	jne    c0006143 <f_getfree+0x143>
c0006128:	89 d7                	mov    edi,edx
c000612a:	89 cd                	mov    ebp,ecx
c000612c:	83 c7 01             	add    edi,0x1
c000612f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006133:	83 d5 00             	adc    ebp,0x0
c0006136:	e8 ed c0 ff ff       	call   c0002228 <move_window>
c000613b:	85 c0                	test   eax,eax
c000613d:	75 6b                	jne    c00061aa <f_getfree+0x1aa>
c000613f:	89 fa                	mov    edx,edi
c0006141:	89 e9                	mov    ecx,ebp
c0006143:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006147:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000614b:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c000614f:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006152:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006156:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000615a:	75 11                	jne    c000616d <f_getfree+0x16d>
c000615c:	e8 e9 b8 ff ff       	call   c0001a4a <ld_word>
c0006161:	66 83 f8 01          	cmp    ax,0x1
c0006165:	83 d3 00             	adc    ebx,0x0
c0006168:	83 c6 02             	add    esi,0x2
c000616b:	eb 13                	jmp    c0006180 <f_getfree+0x180>
c000616d:	e8 e5 b8 ff ff       	call   c0001a57 <ld_dword>
c0006172:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006177:	83 f8 01             	cmp    eax,0x1
c000617a:	83 d3 00             	adc    ebx,0x0
c000617d:	83 c6 04             	add    esi,0x4
c0006180:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006186:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000618a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000618e:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c0006192:	75 90                	jne    c0006124 <f_getfree+0x124>
c0006194:	eb 18                	jmp    c00061ae <f_getfree+0x1ae>
c0006196:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000619e:	eb 0e                	jmp    c00061ae <f_getfree+0x1ae>
c00061a0:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00061a8:	eb 04                	jmp    c00061ae <f_getfree+0x1ae>
c00061aa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00061ae:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00061b2:	89 18                	mov    DWORD PTR [eax],ebx
c00061b4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061b8:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00061bb:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00061bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00061c3:	83 c4 5c             	add    esp,0x5c
c00061c6:	5b                   	pop    ebx
c00061c7:	5e                   	pop    esi
c00061c8:	5f                   	pop    edi
c00061c9:	5d                   	pop    ebp
c00061ca:	c3                   	ret    

c00061cb <f_truncate>:
c00061cb:	56                   	push   esi
c00061cc:	53                   	push   ebx
c00061cd:	83 ec 14             	sub    esp,0x14
c00061d0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00061d4:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00061d8:	89 d8                	mov    eax,ebx
c00061da:	e8 6e bf ff ff       	call   c000214d <validate>
c00061df:	89 c6                	mov    esi,eax
c00061e1:	85 c0                	test   eax,eax
c00061e3:	0f 85 d2 00 00 00    	jne    c00062bb <f_truncate+0xf0>
c00061e9:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00061ed:	85 f6                	test   esi,esi
c00061ef:	0f 85 c6 00 00 00    	jne    c00062bb <f_truncate+0xf0>
c00061f5:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00061f9:	0f 84 b7 00 00 00    	je     c00062b6 <f_truncate+0xeb>
c00061ff:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006202:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006205:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0006208:	89 d1                	mov    ecx,edx
c000620a:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c000620d:	0f 83 a8 00 00 00    	jae    c00062bb <f_truncate+0xf0>
c0006213:	09 c2                	or     edx,eax
c0006215:	75 15                	jne    c000622c <f_truncate+0x61>
c0006217:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000621a:	31 c9                	xor    ecx,ecx
c000621c:	89 d8                	mov    eax,ebx
c000621e:	e8 7a d0 ff ff       	call   c000329d <remove_chain>
c0006223:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000622a:	eb 35                	jmp    c0006261 <f_truncate+0x96>
c000622c:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000622f:	89 d8                	mov    eax,ebx
c0006231:	e8 7a cb ff ff       	call   c0002db0 <get_fat>
c0006236:	89 c2                	mov    edx,eax
c0006238:	b8 01 00 00 00       	mov    eax,0x1
c000623d:	83 fa ff             	cmp    edx,0xffffffff
c0006240:	74 1f                	je     c0006261 <f_truncate+0x96>
c0006242:	b8 02 00 00 00       	mov    eax,0x2
c0006247:	83 fa 01             	cmp    edx,0x1
c000624a:	74 15                	je     c0006261 <f_truncate+0x96>
c000624c:	31 c0                	xor    eax,eax
c000624e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006252:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006255:	76 0a                	jbe    c0006261 <f_truncate+0x96>
c0006257:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000625a:	89 d8                	mov    eax,ebx
c000625c:	e8 3c d0 ff ff       	call   c000329d <remove_chain>
c0006261:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006264:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006267:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000626a:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000626d:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006270:	83 ca 40             	or     edx,0x40
c0006273:	85 c0                	test   eax,eax
c0006275:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006278:	75 35                	jne    c00062af <f_truncate+0xe4>
c000627a:	84 d2                	test   dl,dl
c000627c:	79 3d                	jns    c00062bb <f_truncate+0xf0>
c000627e:	83 ec 0c             	sub    esp,0xc
c0006281:	8d 43 50             	lea    eax,[ebx+0x50]
c0006284:	6a 01                	push   0x1
c0006286:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006289:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000628c:	50                   	push   eax
c000628d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0006291:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0006295:	50                   	push   eax
c0006296:	e8 7a b7 ff ff       	call   c0001a15 <disk_write>
c000629b:	83 c4 20             	add    esp,0x20
c000629e:	85 c0                	test   eax,eax
c00062a0:	75 08                	jne    c00062aa <f_truncate+0xdf>
c00062a2:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00062a6:	31 f6                	xor    esi,esi
c00062a8:	eb 11                	jmp    c00062bb <f_truncate+0xf0>
c00062aa:	b8 01 00 00 00       	mov    eax,0x1
c00062af:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00062b2:	89 c6                	mov    esi,eax
c00062b4:	eb 05                	jmp    c00062bb <f_truncate+0xf0>
c00062b6:	be 07 00 00 00       	mov    esi,0x7
c00062bb:	89 f0                	mov    eax,esi
c00062bd:	83 c4 14             	add    esp,0x14
c00062c0:	5b                   	pop    ebx
c00062c1:	5e                   	pop    esi
c00062c2:	c3                   	ret    

c00062c3 <f_unlink>:
c00062c3:	56                   	push   esi
c00062c4:	b9 02 00 00 00       	mov    ecx,0x2
c00062c9:	53                   	push   ebx
c00062ca:	81 ec e4 00 00 00    	sub    esp,0xe4
c00062d0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00062d4:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00062db:	e8 fa c1 ff ff       	call   c00024da <mount_volume>
c00062e0:	85 c0                	test   eax,eax
c00062e2:	0f 85 55 01 00 00    	jne    c000643d <f_unlink+0x17a>
c00062e8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062ec:	83 ec 0c             	sub    esp,0xc
c00062ef:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00062f3:	68 60 04 00 00       	push   0x460
c00062f8:	e8 80 1f 00 00       	call   c000827d <ff_memalloc>
c00062fd:	83 c4 10             	add    esp,0x10
c0006300:	89 c3                	mov    ebx,eax
c0006302:	b8 11 00 00 00       	mov    eax,0x11
c0006307:	85 db                	test   ebx,ebx
c0006309:	0f 84 2e 01 00 00    	je     c000643d <f_unlink+0x17a>
c000630f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006313:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006319:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000631c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000631f:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006326:	8d 44 24 48          	lea    eax,[esp+0x48]
c000632a:	e8 21 e9 ff ff       	call   c0004c50 <follow_path>
c000632f:	85 c0                	test   eax,eax
c0006331:	0f 85 f2 00 00 00    	jne    c0006429 <f_unlink+0x166>
c0006337:	b8 06 00 00 00       	mov    eax,0x6
c000633c:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006344:	0f 88 df 00 00 00    	js     c0006429 <f_unlink+0x166>
c000634a:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c000634f:	74 0a                	je     c000635b <f_unlink+0x98>
c0006351:	b8 07 00 00 00       	mov    eax,0x7
c0006356:	e9 ce 00 00 00       	jmp    c0006429 <f_unlink+0x166>
c000635b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000635f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006363:	8a 02                	mov    al,BYTE PTR [edx]
c0006365:	3c 04                	cmp    al,0x4
c0006367:	75 12                	jne    c000637b <f_unlink+0xb8>
c0006369:	8d 42 10             	lea    eax,[edx+0x10]
c000636c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006370:	e8 a1 e8 ff ff       	call   c0004c16 <init_alloc_info.isra.2>
c0006375:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006379:	eb 0e                	jmp    c0006389 <f_unlink+0xc6>
c000637b:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006382:	e8 3e e8 ff ff       	call   c0004bc5 <ld_clust.isra.0>
c0006387:	89 c6                	mov    esi,eax
c0006389:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000638e:	75 12                	jne    c00063a2 <f_unlink+0xdf>
c0006390:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006394:	e8 94 d6 ff ff       	call   c0003a2d <dir_remove>
c0006399:	85 c0                	test   eax,eax
c000639b:	74 6c                	je     c0006409 <f_unlink+0x146>
c000639d:	e9 87 00 00 00       	jmp    c0006429 <f_unlink+0x166>
c00063a2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063a6:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00063ad:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00063b4:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00063b7:	75 21                	jne    c00063da <f_unlink+0x117>
c00063b9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00063bd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00063c1:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00063c8:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00063cf:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00063d3:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00063da:	31 d2                	xor    edx,edx
c00063dc:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063e3:	e8 be cb ff ff       	call   c0002fa6 <dir_sdi>
c00063e8:	85 c0                	test   eax,eax
c00063ea:	75 3d                	jne    c0006429 <f_unlink+0x166>
c00063ec:	31 d2                	xor    edx,edx
c00063ee:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063f5:	e8 bc d3 ff ff       	call   c00037b6 <dir_read>
c00063fa:	85 c0                	test   eax,eax
c00063fc:	0f 84 4f ff ff ff    	je     c0006351 <f_unlink+0x8e>
c0006402:	83 f8 04             	cmp    eax,0x4
c0006405:	75 22                	jne    c0006429 <f_unlink+0x166>
c0006407:	eb 87                	jmp    c0006390 <f_unlink+0xcd>
c0006409:	85 f6                	test   esi,esi
c000640b:	75 0b                	jne    c0006418 <f_unlink+0x155>
c000640d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006411:	e8 3d df ff ff       	call   c0004353 <sync_fs>
c0006416:	eb 11                	jmp    c0006429 <f_unlink+0x166>
c0006418:	31 c9                	xor    ecx,ecx
c000641a:	89 f2                	mov    edx,esi
c000641c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006420:	e8 78 ce ff ff       	call   c000329d <remove_chain>
c0006425:	85 c0                	test   eax,eax
c0006427:	74 e4                	je     c000640d <f_unlink+0x14a>
c0006429:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000642d:	83 ec 0c             	sub    esp,0xc
c0006430:	53                   	push   ebx
c0006431:	e8 5d 1e 00 00       	call   c0008293 <ff_memfree>
c0006436:	83 c4 10             	add    esp,0x10
c0006439:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000643d:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006443:	5b                   	pop    ebx
c0006444:	5e                   	pop    esi
c0006445:	c3                   	ret    

c0006446 <f_mkdir>:
c0006446:	57                   	push   edi
c0006447:	b9 02 00 00 00       	mov    ecx,0x2
c000644c:	56                   	push   esi
c000644d:	53                   	push   ebx
c000644e:	83 c4 80             	add    esp,0xffffff80
c0006451:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006455:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c000645c:	e8 79 c0 ff ff       	call   c00024da <mount_volume>
c0006461:	89 c3                	mov    ebx,eax
c0006463:	85 c0                	test   eax,eax
c0006465:	0f 85 fe 01 00 00    	jne    c0006669 <f_mkdir+0x223>
c000646b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000646f:	bb 11 00 00 00       	mov    ebx,0x11
c0006474:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006478:	83 ec 0c             	sub    esp,0xc
c000647b:	68 60 04 00 00       	push   0x460
c0006480:	e8 f8 1d 00 00       	call   c000827d <ff_memalloc>
c0006485:	83 c4 10             	add    esp,0x10
c0006488:	89 c7                	mov    edi,eax
c000648a:	85 c0                	test   eax,eax
c000648c:	0f 84 d7 01 00 00    	je     c0006669 <f_mkdir+0x223>
c0006492:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006496:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c000649c:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c000649f:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00064a2:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00064a9:	8d 44 24 34          	lea    eax,[esp+0x34]
c00064ad:	e8 9e e7 ff ff       	call   c0004c50 <follow_path>
c00064b2:	89 c3                	mov    ebx,eax
c00064b4:	85 c0                	test   eax,eax
c00064b6:	74 3e                	je     c00064f6 <f_mkdir+0xb0>
c00064b8:	83 f8 04             	cmp    eax,0x4
c00064bb:	75 3e                	jne    c00064fb <f_mkdir+0xb5>
c00064bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064c1:	31 d2                	xor    edx,edx
c00064c3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00064c7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00064cb:	e8 ce cb ff ff       	call   c000309e <create_chain>
c00064d0:	89 c6                	mov    esi,eax
c00064d2:	85 c0                	test   eax,eax
c00064d4:	74 0c                	je     c00064e2 <f_mkdir+0x9c>
c00064d6:	bb 02 00 00 00       	mov    ebx,0x2
c00064db:	83 f8 01             	cmp    eax,0x1
c00064de:	74 07                	je     c00064e7 <f_mkdir+0xa1>
c00064e0:	eb 2a                	jmp    c000650c <f_mkdir+0xc6>
c00064e2:	bb 07 00 00 00       	mov    ebx,0x7
c00064e7:	31 c9                	xor    ecx,ecx
c00064e9:	89 f2                	mov    edx,esi
c00064eb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00064ef:	e8 a9 cd ff ff       	call   c000329d <remove_chain>
c00064f4:	eb 05                	jmp    c00064fb <f_mkdir+0xb5>
c00064f6:	bb 08 00 00 00       	mov    ebx,0x8
c00064fb:	83 ec 0c             	sub    esp,0xc
c00064fe:	57                   	push   edi
c00064ff:	e8 8f 1d 00 00       	call   c0008293 <ff_memfree>
c0006504:	83 c4 10             	add    esp,0x10
c0006507:	e9 5d 01 00 00       	jmp    c0006669 <f_mkdir+0x223>
c000650c:	bb 01 00 00 00       	mov    ebx,0x1
c0006511:	83 f8 ff             	cmp    eax,0xffffffff
c0006514:	74 d1                	je     c00064e7 <f_mkdir+0xa1>
c0006516:	89 f2                	mov    edx,esi
c0006518:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000651c:	e8 c4 ce ff ff       	call   c00033e5 <dir_clear>
c0006521:	89 c3                	mov    ebx,eax
c0006523:	85 c0                	test   eax,eax
c0006525:	75 c0                	jne    c00064e7 <f_mkdir+0xa1>
c0006527:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000652b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000652e:	74 69                	je     c0006599 <f_mkdir+0x153>
c0006530:	b9 0b 00 00 00       	mov    ecx,0xb
c0006535:	83 c0 54             	add    eax,0x54
c0006538:	ba 20 00 00 00       	mov    edx,0x20
c000653d:	e8 9c b5 ff ff       	call   c0001ade <mem_set>
c0006542:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006546:	ba 00 00 21 50       	mov    edx,0x50210000
c000654b:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c000654f:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006553:	83 c0 6a             	add    eax,0x6a
c0006556:	e8 65 b5 ff ff       	call   c0001ac0 <st_dword>
c000655b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000655f:	89 f1                	mov    ecx,esi
c0006561:	8d 50 54             	lea    edx,[eax+0x54]
c0006564:	e8 85 e6 ff ff       	call   c0004bee <st_clust.isra.1>
c0006569:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000656d:	b9 20 00 00 00       	mov    ecx,0x20
c0006572:	8d 50 54             	lea    edx,[eax+0x54]
c0006575:	83 c0 74             	add    eax,0x74
c0006578:	e8 4c b5 ff ff       	call   c0001ac9 <mem_cpy>
c000657d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006581:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006585:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006589:	8d 50 74             	lea    edx,[eax+0x74]
c000658c:	e8 5d e6 ff ff       	call   c0004bee <st_clust.isra.1>
c0006591:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006595:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006599:	8d 44 24 34          	lea    eax,[esp+0x34]
c000659d:	e8 2f db ff ff       	call   c00040d1 <dir_register>
c00065a2:	89 c3                	mov    ebx,eax
c00065a4:	85 c0                	test   eax,eax
c00065a6:	0f 85 3b ff ff ff    	jne    c00064e7 <f_mkdir+0xa1>
c00065ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065b0:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065b3:	75 74                	jne    c0006629 <f_mkdir+0x1e3>
c00065b5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065b8:	ba 00 00 21 50       	mov    edx,0x50210000
c00065bd:	83 c0 0c             	add    eax,0xc
c00065c0:	e8 fb b4 ff ff       	call   c0001ac0 <st_dword>
c00065c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065c9:	89 f2                	mov    edx,esi
c00065cb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065ce:	83 c0 34             	add    eax,0x34
c00065d1:	e8 ea b4 ff ff       	call   c0001ac0 <st_dword>
c00065d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065da:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00065de:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065e1:	c1 e2 09             	shl    edx,0x9
c00065e4:	83 c0 38             	add    eax,0x38
c00065e7:	e8 d4 b4 ff ff       	call   c0001ac0 <st_dword>
c00065ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065f0:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00065f4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065f7:	c1 e2 09             	shl    edx,0x9
c00065fa:	83 c0 28             	add    eax,0x28
c00065fd:	e8 be b4 ff ff       	call   c0001ac0 <st_dword>
c0006602:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006606:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006609:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c000660d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006610:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006614:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006618:	e8 8b d3 ff ff       	call   c00039a8 <store_xdir>
c000661d:	89 c3                	mov    ebx,eax
c000661f:	85 c0                	test   eax,eax
c0006621:	0f 85 d4 fe ff ff    	jne    c00064fb <f_mkdir+0xb5>
c0006627:	eb 30                	jmp    c0006659 <f_mkdir+0x213>
c0006629:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000662d:	ba 00 00 21 50       	mov    edx,0x50210000
c0006632:	83 c0 16             	add    eax,0x16
c0006635:	e8 86 b4 ff ff       	call   c0001ac0 <st_dword>
c000663a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000663e:	89 f1                	mov    ecx,esi
c0006640:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006644:	e8 a5 e5 ff ff       	call   c0004bee <st_clust.isra.1>
c0006649:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000664d:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006651:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006655:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006659:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000665d:	e8 f1 dc ff ff       	call   c0004353 <sync_fs>
c0006662:	89 c3                	mov    ebx,eax
c0006664:	e9 92 fe ff ff       	jmp    c00064fb <f_mkdir+0xb5>
c0006669:	83 ec 80             	sub    esp,0xffffff80
c000666c:	89 d8                	mov    eax,ebx
c000666e:	5b                   	pop    ebx
c000666f:	5e                   	pop    esi
c0006670:	5f                   	pop    edi
c0006671:	c3                   	ret    

c0006672 <f_rename>:
c0006672:	55                   	push   ebp
c0006673:	57                   	push   edi
c0006674:	56                   	push   esi
c0006675:	53                   	push   ebx
c0006676:	81 ec fc 00 00 00    	sub    esp,0xfc
c000667c:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006683:	e8 a4 b9 ff ff       	call   c000202c <get_ldnumber>
c0006688:	b9 02 00 00 00       	mov    ecx,0x2
c000668d:	8d 54 24 14          	lea    edx,[esp+0x14]
c0006691:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c0006698:	e8 3d be ff ff       	call   c00024da <mount_volume>
c000669d:	85 c0                	test   eax,eax
c000669f:	0f 85 b5 02 00 00    	jne    c000695a <f_rename+0x2e8>
c00066a5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066a9:	83 ec 0c             	sub    esp,0xc
c00066ac:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00066b0:	68 60 04 00 00       	push   0x460
c00066b5:	e8 c3 1b 00 00       	call   c000827d <ff_memalloc>
c00066ba:	83 c4 10             	add    esp,0x10
c00066bd:	89 c3                	mov    ebx,eax
c00066bf:	b8 11 00 00 00       	mov    eax,0x11
c00066c4:	85 db                	test   ebx,ebx
c00066c6:	0f 84 8e 02 00 00    	je     c000695a <f_rename+0x2e8>
c00066cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066d0:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00066d6:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00066d9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066dc:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00066e3:	8d 44 24 58          	lea    eax,[esp+0x58]
c00066e7:	e8 64 e5 ff ff       	call   c0004c50 <follow_path>
c00066ec:	85 c0                	test   eax,eax
c00066ee:	0f 85 52 02 00 00    	jne    c0006946 <f_rename+0x2d4>
c00066f4:	b8 06 00 00 00       	mov    eax,0x6
c00066f9:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006701:	0f 85 3f 02 00 00    	jne    c0006946 <f_rename+0x2d4>
c0006707:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000670b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000670e:	0f 85 05 01 00 00    	jne    c0006819 <f_rename+0x1a7>
c0006714:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006717:	b9 40 00 00 00       	mov    ecx,0x40
c000671c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006720:	e8 a4 b3 ff ff       	call   c0001ac9 <mem_cpy>
c0006725:	b9 4c 00 00 00       	mov    ecx,0x4c
c000672a:	8d 54 24 58          	lea    edx,[esp+0x58]
c000672e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006735:	e8 8f b3 ff ff       	call   c0001ac9 <mem_cpy>
c000673a:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006741:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006748:	e8 03 e5 ff ff       	call   c0004c50 <follow_path>
c000674d:	85 c0                	test   eax,eax
c000674f:	75 29                	jne    c000677a <f_rename+0x108>
c0006751:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006755:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000675c:	74 0a                	je     c0006768 <f_rename+0xf6>
c000675e:	b8 08 00 00 00       	mov    eax,0x8
c0006763:	e9 de 01 00 00       	jmp    c0006946 <f_rename+0x2d4>
c0006768:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000676f:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006776:	75 e6                	jne    c000675e <f_rename+0xec>
c0006778:	eb 09                	jmp    c0006783 <f_rename+0x111>
c000677a:	83 f8 04             	cmp    eax,0x4
c000677d:	0f 85 c3 01 00 00    	jne    c0006946 <f_rename+0x2d4>
c0006783:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000678a:	e8 42 d9 ff ff       	call   c00040d1 <dir_register>
c000678f:	85 c0                	test   eax,eax
c0006791:	0f 85 af 01 00 00    	jne    c0006946 <f_rename+0x2d4>
c0006797:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000679b:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c000679e:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00067a1:	89 c5                	mov    ebp,eax
c00067a3:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00067a6:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00067aa:	8d 46 24             	lea    eax,[esi+0x24]
c00067ad:	e8 98 b2 ff ff       	call   c0001a4a <ld_word>
c00067b2:	b9 40 00 00 00       	mov    ecx,0x40
c00067b7:	89 c7                	mov    edi,eax
c00067b9:	8d 54 24 18          	lea    edx,[esp+0x18]
c00067bd:	89 f0                	mov    eax,esi
c00067bf:	e8 05 b3 ff ff       	call   c0001ac9 <mem_cpy>
c00067c4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067c8:	89 e9                	mov    ecx,ebp
c00067ca:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067cd:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00067d0:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00067d4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067d8:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067db:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00067de:	0f b7 d7             	movzx  edx,di
c00067e1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067e4:	83 c0 24             	add    eax,0x24
c00067e7:	e8 d0 b2 ff ff       	call   c0001abc <st_word>
c00067ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067f0:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067f3:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00067f6:	a8 10                	test   al,0x10
c00067f8:	75 06                	jne    c0006800 <f_rename+0x18e>
c00067fa:	83 c8 20             	or     eax,0x20
c00067fd:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006800:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006807:	e8 9c d1 ff ff       	call   c00039a8 <store_xdir>
c000680c:	85 c0                	test   eax,eax
c000680e:	0f 84 1c 01 00 00    	je     c0006930 <f_rename+0x2be>
c0006814:	e9 2d 01 00 00       	jmp    c0006946 <f_rename+0x2d4>
c0006819:	b9 20 00 00 00       	mov    ecx,0x20
c000681e:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006825:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006829:	e8 9b b2 ff ff       	call   c0001ac9 <mem_cpy>
c000682e:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006833:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006837:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000683e:	e8 86 b2 ff ff       	call   c0001ac9 <mem_cpy>
c0006843:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000684a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006851:	e8 fa e3 ff ff       	call   c0004c50 <follow_path>
c0006856:	85 c0                	test   eax,eax
c0006858:	75 27                	jne    c0006881 <f_rename+0x20f>
c000685a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000685e:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006865:	0f 85 f3 fe ff ff    	jne    c000675e <f_rename+0xec>
c000686b:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006872:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006879:	0f 85 df fe ff ff    	jne    c000675e <f_rename+0xec>
c000687f:	eb 09                	jmp    c000688a <f_rename+0x218>
c0006881:	83 f8 04             	cmp    eax,0x4
c0006884:	0f 85 bc 00 00 00    	jne    c0006946 <f_rename+0x2d4>
c000688a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006891:	e8 3b d8 ff ff       	call   c00040d1 <dir_register>
c0006896:	85 c0                	test   eax,eax
c0006898:	0f 85 a8 00 00 00    	jne    c0006946 <f_rename+0x2d4>
c000689e:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c00068a5:	b9 13 00 00 00       	mov    ecx,0x13
c00068aa:	8d 46 0d             	lea    eax,[esi+0xd]
c00068ad:	8d 54 24 25          	lea    edx,[esp+0x25]
c00068b1:	e8 13 b2 ff ff       	call   c0001ac9 <mem_cpy>
c00068b6:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00068ba:	a8 10                	test   al,0x10
c00068bc:	75 03                	jne    c00068c1 <f_rename+0x24f>
c00068be:	83 c8 20             	or     eax,0x20
c00068c1:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00068c4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068c8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00068cc:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c00068d0:	74 5e                	je     c0006930 <f_rename+0x2be>
c00068d2:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c00068d9:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c00068dd:	74 51                	je     c0006930 <f_rename+0x2be>
c00068df:	89 f2                	mov    edx,esi
c00068e1:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00068e5:	8a 07                	mov    al,BYTE PTR [edi]
c00068e7:	e8 d9 e2 ff ff       	call   c0004bc5 <ld_clust.isra.0>
c00068ec:	89 c2                	mov    edx,eax
c00068ee:	89 f8                	mov    eax,edi
c00068f0:	e8 ee b3 ff ff       	call   c0001ce3 <clst2sect>
c00068f5:	89 c6                	mov    esi,eax
c00068f7:	89 d1                	mov    ecx,edx
c00068f9:	b8 02 00 00 00       	mov    eax,0x2
c00068fe:	09 f2                	or     edx,esi
c0006900:	74 44                	je     c0006946 <f_rename+0x2d4>
c0006902:	89 f2                	mov    edx,esi
c0006904:	89 f8                	mov    eax,edi
c0006906:	e8 1d b9 ff ff       	call   c0002228 <move_window>
c000690b:	85 c0                	test   eax,eax
c000690d:	75 37                	jne    c0006946 <f_rename+0x2d4>
c000690f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006913:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006917:	75 17                	jne    c0006930 <f_rename+0x2be>
c0006919:	8d 50 74             	lea    edx,[eax+0x74]
c000691c:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006923:	e8 c6 e2 ff ff       	call   c0004bee <st_clust.isra.1>
c0006928:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000692c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006930:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006934:	e8 f4 d0 ff ff       	call   c0003a2d <dir_remove>
c0006939:	85 c0                	test   eax,eax
c000693b:	75 09                	jne    c0006946 <f_rename+0x2d4>
c000693d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006941:	e8 0d da ff ff       	call   c0004353 <sync_fs>
c0006946:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000694a:	83 ec 0c             	sub    esp,0xc
c000694d:	53                   	push   ebx
c000694e:	e8 40 19 00 00       	call   c0008293 <ff_memfree>
c0006953:	83 c4 10             	add    esp,0x10
c0006956:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000695a:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006960:	5b                   	pop    ebx
c0006961:	5e                   	pop    esi
c0006962:	5f                   	pop    edi
c0006963:	5d                   	pop    ebp
c0006964:	c3                   	ret    

c0006965 <f_chmod>:
c0006965:	57                   	push   edi
c0006966:	b9 02 00 00 00       	mov    ecx,0x2
c000696b:	56                   	push   esi
c000696c:	53                   	push   ebx
c000696d:	83 ec 60             	sub    esp,0x60
c0006970:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006974:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006978:	8d 54 24 10          	lea    edx,[esp+0x10]
c000697c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006980:	e8 55 bb ff ff       	call   c00024da <mount_volume>
c0006985:	85 c0                	test   eax,eax
c0006987:	0f 85 af 00 00 00    	jne    c0006a3c <f_chmod+0xd7>
c000698d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006991:	83 ec 0c             	sub    esp,0xc
c0006994:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006998:	68 60 04 00 00       	push   0x460
c000699d:	e8 db 18 00 00       	call   c000827d <ff_memalloc>
c00069a2:	83 c4 10             	add    esp,0x10
c00069a5:	89 c6                	mov    esi,eax
c00069a7:	b8 11 00 00 00       	mov    eax,0x11
c00069ac:	85 f6                	test   esi,esi
c00069ae:	0f 84 88 00 00 00    	je     c0006a3c <f_chmod+0xd7>
c00069b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069b8:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00069be:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00069c1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00069c4:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c00069c8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069cc:	e8 7f e2 ff ff       	call   c0004c50 <follow_path>
c00069d1:	85 c0                	test   eax,eax
c00069d3:	75 53                	jne    c0006a28 <f_chmod+0xc3>
c00069d5:	b8 06 00 00 00       	mov    eax,0x6
c00069da:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c00069df:	75 47                	jne    c0006a28 <f_chmod+0xc3>
c00069e1:	89 f9                	mov    ecx,edi
c00069e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069e7:	83 e1 27             	and    ecx,0x27
c00069ea:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00069ed:	75 1d                	jne    c0006a0c <f_chmod+0xa7>
c00069ef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069f2:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069f5:	21 cb                	and    ebx,ecx
c00069f7:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069fa:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c00069fd:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a01:	e8 a2 cf ff ff       	call   c00039a8 <store_xdir>
c0006a06:	85 c0                	test   eax,eax
c0006a08:	75 1e                	jne    c0006a28 <f_chmod+0xc3>
c0006a0a:	eb 13                	jmp    c0006a1f <f_chmod+0xba>
c0006a0c:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006a10:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006a13:	21 cb                	and    ebx,ecx
c0006a15:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006a18:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006a1b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a23:	e8 2b d9 ff ff       	call   c0004353 <sync_fs>
c0006a28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a2c:	83 ec 0c             	sub    esp,0xc
c0006a2f:	56                   	push   esi
c0006a30:	e8 5e 18 00 00       	call   c0008293 <ff_memfree>
c0006a35:	83 c4 10             	add    esp,0x10
c0006a38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a3c:	83 c4 60             	add    esp,0x60
c0006a3f:	5b                   	pop    ebx
c0006a40:	5e                   	pop    esi
c0006a41:	5f                   	pop    edi
c0006a42:	c3                   	ret    

c0006a43 <f_utime>:
c0006a43:	56                   	push   esi
c0006a44:	b9 02 00 00 00       	mov    ecx,0x2
c0006a49:	53                   	push   ebx
c0006a4a:	83 ec 64             	sub    esp,0x64
c0006a4d:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006a51:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a55:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a59:	e8 7c ba ff ff       	call   c00024da <mount_volume>
c0006a5e:	85 c0                	test   eax,eax
c0006a60:	0f 85 b5 00 00 00    	jne    c0006b1b <f_utime+0xd8>
c0006a66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a6a:	83 ec 0c             	sub    esp,0xc
c0006a6d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006a71:	68 60 04 00 00       	push   0x460
c0006a76:	e8 02 18 00 00       	call   c000827d <ff_memalloc>
c0006a7b:	83 c4 10             	add    esp,0x10
c0006a7e:	89 c3                	mov    ebx,eax
c0006a80:	b8 11 00 00 00       	mov    eax,0x11
c0006a85:	85 db                	test   ebx,ebx
c0006a87:	0f 84 8e 00 00 00    	je     c0006b1b <f_utime+0xd8>
c0006a8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a91:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006a97:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006a9a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006a9d:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006aa1:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006aa5:	e8 a6 e1 ff ff       	call   c0004c50 <follow_path>
c0006aaa:	85 c0                	test   eax,eax
c0006aac:	75 59                	jne    c0006b07 <f_utime+0xc4>
c0006aae:	b8 06 00 00 00       	mov    eax,0x6
c0006ab3:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006ab8:	75 4d                	jne    c0006b07 <f_utime+0xc4>
c0006aba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006abe:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006ac2:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006ac6:	c1 e2 10             	shl    edx,0x10
c0006ac9:	09 ca                	or     edx,ecx
c0006acb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ace:	75 1a                	jne    c0006aea <f_utime+0xa7>
c0006ad0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006ad3:	83 c0 0c             	add    eax,0xc
c0006ad6:	e8 e5 af ff ff       	call   c0001ac0 <st_dword>
c0006adb:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006adf:	e8 c4 ce ff ff       	call   c00039a8 <store_xdir>
c0006ae4:	85 c0                	test   eax,eax
c0006ae6:	75 1f                	jne    c0006b07 <f_utime+0xc4>
c0006ae8:	eb 14                	jmp    c0006afe <f_utime+0xbb>
c0006aea:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006aee:	83 c0 16             	add    eax,0x16
c0006af1:	e8 ca af ff ff       	call   c0001ac0 <st_dword>
c0006af6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006afa:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006afe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b02:	e8 4c d8 ff ff       	call   c0004353 <sync_fs>
c0006b07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b0b:	83 ec 0c             	sub    esp,0xc
c0006b0e:	53                   	push   ebx
c0006b0f:	e8 7f 17 00 00       	call   c0008293 <ff_memfree>
c0006b14:	83 c4 10             	add    esp,0x10
c0006b17:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b1b:	83 c4 64             	add    esp,0x64
c0006b1e:	5b                   	pop    ebx
c0006b1f:	5e                   	pop    esi
c0006b20:	c3                   	ret    

c0006b21 <f_getlabel>:
c0006b21:	55                   	push   ebp
c0006b22:	31 c9                	xor    ecx,ecx
c0006b24:	57                   	push   edi
c0006b25:	56                   	push   esi
c0006b26:	53                   	push   ebx
c0006b27:	83 ec 6c             	sub    esp,0x6c
c0006b2a:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b2e:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006b35:	e8 a0 b9 ff ff       	call   c00024da <mount_volume>
c0006b3a:	89 c6                	mov    esi,eax
c0006b3c:	85 c0                	test   eax,eax
c0006b3e:	0f 85 c1 01 00 00    	jne    c0006d05 <f_getlabel+0x1e4>
c0006b44:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006b4c:	0f 84 5f 01 00 00    	je     c0006cb1 <f_getlabel+0x190>
c0006b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b56:	31 d2                	xor    edx,edx
c0006b58:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006b5c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006b64:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b68:	e8 39 c4 ff ff       	call   c0002fa6 <dir_sdi>
c0006b6d:	85 c0                	test   eax,eax
c0006b6f:	0f 85 2d 01 00 00    	jne    c0006ca2 <f_getlabel+0x181>
c0006b75:	ba 01 00 00 00       	mov    edx,0x1
c0006b7a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b7e:	e8 33 cc ff ff       	call   c00037b6 <dir_read>
c0006b83:	85 c0                	test   eax,eax
c0006b85:	0f 85 17 01 00 00    	jne    c0006ca2 <f_getlabel+0x181>
c0006b8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b8f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006b92:	74 09                	je     c0006b9d <f_getlabel+0x7c>
c0006b94:	31 db                	xor    ebx,ebx
c0006b96:	31 c9                	xor    ecx,ecx
c0006b98:	e9 c8 00 00 00       	jmp    c0006c65 <f_getlabel+0x144>
c0006b9d:	31 ed                	xor    ebp,ebp
c0006b9f:	31 db                	xor    ebx,ebx
c0006ba1:	31 ff                	xor    edi,edi
c0006ba3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ba7:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006bab:	39 fa                	cmp    edx,edi
c0006bad:	76 4b                	jbe    c0006bfa <f_getlabel+0xd9>
c0006baf:	47                   	inc    edi
c0006bb0:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006bb3:	01 d0                	add    eax,edx
c0006bb5:	e8 90 ae ff ff       	call   c0001a4a <ld_word>
c0006bba:	66 85 ed             	test   bp,bp
c0006bbd:	75 0d                	jne    c0006bcc <f_getlabel+0xab>
c0006bbf:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006bc5:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006bca:	76 28                	jbe    c0006bf4 <f_getlabel+0xd3>
c0006bcc:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006bd3:	89 e9                	mov    ecx,ebp
c0006bd5:	01 da                	add    edx,ebx
c0006bd7:	c1 e1 10             	shl    ecx,0x10
c0006bda:	0f b7 c0             	movzx  eax,ax
c0006bdd:	09 c8                	or     eax,ecx
c0006bdf:	b9 04 00 00 00       	mov    ecx,0x4
c0006be4:	e8 01 b0 ff ff       	call   c0001bea <put_utf>
c0006be9:	84 c0                	test   al,al
c0006beb:	74 0b                	je     c0006bf8 <f_getlabel+0xd7>
c0006bed:	0f b6 c0             	movzx  eax,al
c0006bf0:	01 c3                	add    ebx,eax
c0006bf2:	31 c0                	xor    eax,eax
c0006bf4:	89 c5                	mov    ebp,eax
c0006bf6:	eb ab                	jmp    c0006ba3 <f_getlabel+0x82>
c0006bf8:	31 db                	xor    ebx,ebx
c0006bfa:	66 85 ed             	test   bp,bp
c0006bfd:	74 02                	je     c0006c01 <f_getlabel+0xe0>
c0006bff:	31 db                	xor    ebx,ebx
c0006c01:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006c08:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006c0c:	e9 a0 00 00 00       	jmp    c0006cb1 <f_getlabel+0x190>
c0006c11:	83 ff 0b             	cmp    edi,0xb
c0006c14:	74 11                	je     c0006c27 <f_getlabel+0x106>
c0006c16:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006c1b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c1f:	8d 79 02             	lea    edi,[ecx+0x2]
c0006c22:	c1 e0 08             	shl    eax,0x8
c0006c25:	09 c2                	or     edx,eax
c0006c27:	0f b7 d2             	movzx  edx,dx
c0006c2a:	50                   	push   eax
c0006c2b:	50                   	push   eax
c0006c2c:	68 b5 01 00 00       	push   0x1b5
c0006c31:	52                   	push   edx
c0006c32:	e8 03 17 00 00       	call   c000833a <ff_oem2uni>
c0006c37:	83 c4 10             	add    esp,0x10
c0006c3a:	66 85 c0             	test   ax,ax
c0006c3d:	74 46                	je     c0006c85 <f_getlabel+0x164>
c0006c3f:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006c46:	0f b7 c0             	movzx  eax,ax
c0006c49:	01 da                	add    edx,ebx
c0006c4b:	b9 04 00 00 00       	mov    ecx,0x4
c0006c50:	e8 95 af ff ff       	call   c0001bea <put_utf>
c0006c55:	84 c0                	test   al,al
c0006c57:	74 2c                	je     c0006c85 <f_getlabel+0x164>
c0006c59:	0f b6 c0             	movzx  eax,al
c0006c5c:	01 c3                	add    ebx,eax
c0006c5e:	83 ff 0b             	cmp    edi,0xb
c0006c61:	74 24                	je     c0006c87 <f_getlabel+0x166>
c0006c63:	89 f9                	mov    ecx,edi
c0006c65:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006c69:	8d 79 01             	lea    edi,[ecx+0x1]
c0006c6c:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006c71:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006c76:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c7a:	e8 9f ae ff ff       	call   c0001b1e <dbc_1st>
c0006c7f:	85 c0                	test   eax,eax
c0006c81:	74 a4                	je     c0006c27 <f_getlabel+0x106>
c0006c83:	eb 8c                	jmp    c0006c11 <f_getlabel+0xf0>
c0006c85:	31 db                	xor    ebx,ebx
c0006c87:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006c8e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006c91:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006c98:	74 17                	je     c0006cb1 <f_getlabel+0x190>
c0006c9a:	4b                   	dec    ebx
c0006c9b:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006c9e:	74 ee                	je     c0006c8e <f_getlabel+0x16d>
c0006ca0:	eb 0f                	jmp    c0006cb1 <f_getlabel+0x190>
c0006ca2:	83 f8 04             	cmp    eax,0x4
c0006ca5:	75 5c                	jne    c0006d03 <f_getlabel+0x1e2>
c0006ca7:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006cae:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006cb1:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006cb9:	74 4a                	je     c0006d05 <f_getlabel+0x1e4>
c0006cbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cbf:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006cc2:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006cc5:	e8 5e b5 ff ff       	call   c0002228 <move_window>
c0006cca:	89 c6                	mov    esi,eax
c0006ccc:	85 c0                	test   eax,eax
c0006cce:	75 35                	jne    c0006d05 <f_getlabel+0x1e4>
c0006cd0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006cd4:	b8 43 00 00 00       	mov    eax,0x43
c0006cd9:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006cdb:	80 f9 03             	cmp    cl,0x3
c0006cde:	74 0f                	je     c0006cef <f_getlabel+0x1ce>
c0006ce0:	31 c0                	xor    eax,eax
c0006ce2:	80 f9 04             	cmp    cl,0x4
c0006ce5:	0f 94 c0             	sete   al
c0006ce8:	48                   	dec    eax
c0006ce9:	83 e0 c3             	and    eax,0xffffffc3
c0006cec:	83 c0 64             	add    eax,0x64
c0006cef:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006cf3:	e8 5f ad ff ff       	call   c0001a57 <ld_dword>
c0006cf8:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006cff:	89 07                	mov    DWORD PTR [edi],eax
c0006d01:	eb 02                	jmp    c0006d05 <f_getlabel+0x1e4>
c0006d03:	89 c6                	mov    esi,eax
c0006d05:	83 c4 6c             	add    esp,0x6c
c0006d08:	89 f0                	mov    eax,esi
c0006d0a:	5b                   	pop    ebx
c0006d0b:	5e                   	pop    esi
c0006d0c:	5f                   	pop    edi
c0006d0d:	5d                   	pop    ebp
c0006d0e:	c3                   	ret    

c0006d0f <f_setlabel>:
c0006d0f:	56                   	push   esi
c0006d10:	b9 02 00 00 00       	mov    ecx,0x2
c0006d15:	53                   	push   ebx
c0006d16:	83 ec 74             	sub    esp,0x74
c0006d19:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006d1d:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d24:	e8 b1 b7 ff ff       	call   c00024da <mount_volume>
c0006d29:	89 c6                	mov    esi,eax
c0006d2b:	85 c0                	test   eax,eax
c0006d2d:	0f 85 41 02 00 00    	jne    c0006f74 <f_setlabel+0x265>
c0006d33:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006d37:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d3a:	0f 85 8e 00 00 00    	jne    c0006dce <f_setlabel+0xbf>
c0006d40:	b9 16 00 00 00       	mov    ecx,0x16
c0006d45:	31 d2                	xor    edx,edx
c0006d47:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d4b:	31 db                	xor    ebx,ebx
c0006d4d:	e8 8c ad ff ff       	call   c0001ade <mem_set>
c0006d52:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006d59:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006d5c:	0f 86 0a 01 00 00    	jbe    c0006e6c <f_setlabel+0x15d>
c0006d62:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d69:	e8 b6 ad ff ff       	call   c0001b24 <tchar2uni>
c0006d6e:	89 c6                	mov    esi,eax
c0006d70:	3d ff ff 00 00       	cmp    eax,0xffff
c0006d75:	76 2a                	jbe    c0006da1 <f_setlabel+0x92>
c0006d77:	83 f8 ff             	cmp    eax,0xffffffff
c0006d7a:	74 05                	je     c0006d81 <f_setlabel+0x72>
c0006d7c:	83 fb 09             	cmp    ebx,0x9
c0006d7f:	76 0a                	jbe    c0006d8b <f_setlabel+0x7c>
c0006d81:	be 06 00 00 00       	mov    esi,0x6
c0006d86:	e9 e9 01 00 00       	jmp    c0006f74 <f_setlabel+0x265>
c0006d8b:	89 c2                	mov    edx,eax
c0006d8d:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d91:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d94:	c1 ea 10             	shr    edx,0x10
c0006d97:	01 c8                	add    eax,ecx
c0006d99:	43                   	inc    ebx
c0006d9a:	e8 1d ad ff ff       	call   c0001abc <st_word>
c0006d9f:	eb 04                	jmp    c0006da5 <f_setlabel+0x96>
c0006da1:	85 c0                	test   eax,eax
c0006da3:	74 dc                	je     c0006d81 <f_setlabel+0x72>
c0006da5:	89 f2                	mov    edx,esi
c0006da7:	b8 37 89 02 c0       	mov    eax,0xc0028937
c0006dac:	e8 5b ad ff ff       	call   c0001b0c <chk_chr>
c0006db1:	85 c0                	test   eax,eax
c0006db3:	75 cc                	jne    c0006d81 <f_setlabel+0x72>
c0006db5:	83 fb 0a             	cmp    ebx,0xa
c0006db8:	77 c7                	ja     c0006d81 <f_setlabel+0x72>
c0006dba:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006dbd:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006dc1:	0f b7 d6             	movzx  edx,si
c0006dc4:	01 c8                	add    eax,ecx
c0006dc6:	43                   	inc    ebx
c0006dc7:	e8 f0 ac ff ff       	call   c0001abc <st_word>
c0006dcc:	eb 84                	jmp    c0006d52 <f_setlabel+0x43>
c0006dce:	b9 0b 00 00 00       	mov    ecx,0xb
c0006dd3:	ba 20 00 00 00       	mov    edx,0x20
c0006dd8:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006ddc:	31 db                	xor    ebx,ebx
c0006dde:	e8 fb ac ff ff       	call   c0001ade <mem_set>
c0006de3:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006dea:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006ded:	76 60                	jbe    c0006e4f <f_setlabel+0x140>
c0006def:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006df6:	e8 29 ad ff ff       	call   c0001b24 <tchar2uni>
c0006dfb:	3d ff ff 00 00       	cmp    eax,0xffff
c0006e00:	0f 87 7b ff ff ff    	ja     c0006d81 <f_setlabel+0x72>
c0006e06:	83 ec 0c             	sub    esp,0xc
c0006e09:	50                   	push   eax
c0006e0a:	e8 97 15 00 00       	call   c00083a6 <ff_wtoupper>
c0006e0f:	5a                   	pop    edx
c0006e10:	59                   	pop    ecx
c0006e11:	68 b5 01 00 00       	push   0x1b5
c0006e16:	50                   	push   eax
c0006e17:	e8 8e 14 00 00       	call   c00082aa <ff_uni2oem>
c0006e1c:	83 c4 10             	add    esp,0x10
c0006e1f:	89 c6                	mov    esi,eax
c0006e21:	66 85 c0             	test   ax,ax
c0006e24:	0f 84 57 ff ff ff    	je     c0006d81 <f_setlabel+0x72>
c0006e2a:	0f b7 d0             	movzx  edx,ax
c0006e2d:	b8 30 89 02 c0       	mov    eax,0xc0028930
c0006e32:	e8 d5 ac ff ff       	call   c0001b0c <chk_chr>
c0006e37:	85 c0                	test   eax,eax
c0006e39:	0f 85 42 ff ff ff    	jne    c0006d81 <f_setlabel+0x72>
c0006e3f:	66 81 fe ff 00       	cmp    si,0xff
c0006e44:	0f 87 14 01 00 00    	ja     c0006f5e <f_setlabel+0x24f>
c0006e4a:	e9 fa 00 00 00       	jmp    c0006f49 <f_setlabel+0x23a>
c0006e4f:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006e54:	0f 84 27 ff ff ff    	je     c0006d81 <f_setlabel+0x72>
c0006e5a:	85 db                	test   ebx,ebx
c0006e5c:	74 0e                	je     c0006e6c <f_setlabel+0x15d>
c0006e5e:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006e61:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006e66:	75 04                	jne    c0006e6c <f_setlabel+0x15d>
c0006e68:	89 c3                	mov    ebx,eax
c0006e6a:	eb ee                	jmp    c0006e5a <f_setlabel+0x14b>
c0006e6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e70:	31 d2                	xor    edx,edx
c0006e72:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006e76:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006e7e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e82:	e8 1f c1 ff ff       	call   c0002fa6 <dir_sdi>
c0006e87:	89 c6                	mov    esi,eax
c0006e89:	85 c0                	test   eax,eax
c0006e8b:	0f 85 e3 00 00 00    	jne    c0006f74 <f_setlabel+0x265>
c0006e91:	ba 01 00 00 00       	mov    edx,0x1
c0006e96:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e9a:	e8 17 c9 ff ff       	call   c00037b6 <dir_read>
c0006e9f:	85 c0                	test   eax,eax
c0006ea1:	75 21                	jne    c0006ec4 <f_setlabel+0x1b5>
c0006ea3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006ea7:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006eab:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006eae:	74 5d                	je     c0006f0d <f_setlabel+0x1fe>
c0006eb0:	85 db                	test   ebx,ebx
c0006eb2:	74 0b                	je     c0006ebf <f_setlabel+0x1b0>
c0006eb4:	b9 0b 00 00 00       	mov    ecx,0xb
c0006eb9:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006ebd:	eb 70                	jmp    c0006f2f <f_setlabel+0x220>
c0006ebf:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006ec2:	eb 70                	jmp    c0006f34 <f_setlabel+0x225>
c0006ec4:	83 f8 04             	cmp    eax,0x4
c0006ec7:	75 7c                	jne    c0006f45 <f_setlabel+0x236>
c0006ec9:	85 db                	test   ebx,ebx
c0006ecb:	0f 84 a3 00 00 00    	je     c0006f74 <f_setlabel+0x265>
c0006ed1:	ba 01 00 00 00       	mov    edx,0x1
c0006ed6:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006eda:	e8 51 ca ff ff       	call   c0003930 <dir_alloc>
c0006edf:	89 c6                	mov    esi,eax
c0006ee1:	85 c0                	test   eax,eax
c0006ee3:	0f 85 8b 00 00 00    	jne    c0006f74 <f_setlabel+0x265>
c0006ee9:	31 d2                	xor    edx,edx
c0006eeb:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006eef:	b9 20 00 00 00       	mov    ecx,0x20
c0006ef4:	e8 e5 ab ff ff       	call   c0001ade <mem_set>
c0006ef9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006efd:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f00:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f04:	75 18                	jne    c0006f1e <f_setlabel+0x20f>
c0006f06:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0006f09:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f0d:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0006f10:	b9 16 00 00 00       	mov    ecx,0x16
c0006f15:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f19:	83 c0 02             	add    eax,0x2
c0006f1c:	eb 9b                	jmp    c0006eb9 <f_setlabel+0x1aa>
c0006f1e:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0006f22:	b9 0b 00 00 00       	mov    ecx,0xb
c0006f27:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006f2b:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f2f:	e8 95 ab ff ff       	call   c0001ac9 <mem_cpy>
c0006f34:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f38:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006f3c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f40:	e8 0e d4 ff ff       	call   c0004353 <sync_fs>
c0006f45:	89 c6                	mov    esi,eax
c0006f47:	eb 2b                	jmp    c0006f74 <f_setlabel+0x265>
c0006f49:	83 fb 0a             	cmp    ebx,0xa
c0006f4c:	0f 87 2f fe ff ff    	ja     c0006d81 <f_setlabel+0x72>
c0006f52:	89 f0                	mov    eax,esi
c0006f54:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f58:	43                   	inc    ebx
c0006f59:	e9 85 fe ff ff       	jmp    c0006de3 <f_setlabel+0xd4>
c0006f5e:	83 fb 09             	cmp    ebx,0x9
c0006f61:	0f 87 1a fe ff ff    	ja     c0006d81 <f_setlabel+0x72>
c0006f67:	89 f0                	mov    eax,esi
c0006f69:	66 c1 e8 08          	shr    ax,0x8
c0006f6d:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f71:	43                   	inc    ebx
c0006f72:	eb de                	jmp    c0006f52 <f_setlabel+0x243>
c0006f74:	89 f0                	mov    eax,esi
c0006f76:	83 c4 74             	add    esp,0x74
c0006f79:	5b                   	pop    ebx
c0006f7a:	5e                   	pop    esi
c0006f7b:	c3                   	ret    

c0006f7c <f_forward>:
c0006f7c:	55                   	push   ebp
c0006f7d:	57                   	push   edi
c0006f7e:	56                   	push   esi
c0006f7f:	53                   	push   ebx
c0006f80:	83 ec 2c             	sub    esp,0x2c
c0006f83:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006f87:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0006f8b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0006f91:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006f95:	89 d8                	mov    eax,ebx
c0006f97:	e8 b1 b1 ff ff       	call   c000214d <validate>
c0006f9c:	89 c5                	mov    ebp,eax
c0006f9e:	85 c0                	test   eax,eax
c0006fa0:	0f 85 aa 01 00 00    	jne    c0007150 <f_forward+0x1d4>
c0006fa6:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0006faa:	85 ed                	test   ebp,ebp
c0006fac:	0f 85 9e 01 00 00    	jne    c0007150 <f_forward+0x1d4>
c0006fb2:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0006fb6:	0f 84 8f 01 00 00    	je     c000714b <f_forward+0x1cf>
c0006fbc:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0006fbf:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0006fc2:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0006fc5:	bf 00 00 00 00       	mov    edi,0x0
c0006fca:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0006fcd:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0006fd1:	89 d1                	mov    ecx,edx
c0006fd3:	19 f9                	sbb    ecx,edi
c0006fd5:	0f 83 cf 00 00 00    	jae    c00070aa <f_forward+0x12e>
c0006fdb:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0006fdf:	e9 c6 00 00 00       	jmp    c00070aa <f_forward+0x12e>
c0006fe4:	50                   	push   eax
c0006fe5:	50                   	push   eax
c0006fe6:	6a 00                	push   0x0
c0006fe8:	6a 00                	push   0x0
c0006fea:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006fee:	83 c4 10             	add    esp,0x10
c0006ff1:	85 c0                	test   eax,eax
c0006ff3:	0f 84 57 01 00 00    	je     c0007150 <f_forward+0x1d4>
c0006ff9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006ffc:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007000:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0007003:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0007007:	89 d7                	mov    edi,edx
c0007009:	8d 4e ff             	lea    ecx,[esi-0x1]
c000700c:	89 c6                	mov    esi,eax
c000700e:	0f ac fe 09          	shrd   esi,edi,0x9
c0007012:	21 ce                	and    esi,ecx
c0007014:	89 c1                	mov    ecx,eax
c0007016:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c000701c:	0f 84 98 00 00 00    	je     c00070ba <f_forward+0x13e>
c0007022:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007026:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007029:	89 c8                	mov    eax,ecx
c000702b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000702f:	e8 af ac ff ff       	call   c0001ce3 <clst2sect>
c0007034:	89 d7                	mov    edi,edx
c0007036:	09 c7                	or     edi,eax
c0007038:	0f 84 9e 00 00 00    	je     c00070dc <f_forward+0x160>
c000703e:	31 ff                	xor    edi,edi
c0007040:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007043:	01 c6                	add    esi,eax
c0007045:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007049:	11 d7                	adc    edi,edx
c000704b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000704e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007051:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007055:	39 fa                	cmp    edx,edi
c0007057:	0f 85 a2 00 00 00    	jne    c00070ff <f_forward+0x183>
c000705d:	39 f0                	cmp    eax,esi
c000705f:	0f 85 9a 00 00 00    	jne    c00070ff <f_forward+0x183>
c0007065:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007068:	ba 00 02 00 00       	mov    edx,0x200
c000706d:	25 ff 01 00 00       	and    eax,0x1ff
c0007072:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007076:	29 c2                	sub    edx,eax
c0007078:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000707b:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000707e:	39 d1                	cmp    ecx,edx
c0007080:	76 02                	jbe    c0007084 <f_forward+0x108>
c0007082:	89 d1                	mov    ecx,edx
c0007084:	8d 73 50             	lea    esi,[ebx+0x50]
c0007087:	52                   	push   edx
c0007088:	01 c6                	add    esi,eax
c000708a:	52                   	push   edx
c000708b:	51                   	push   ecx
c000708c:	56                   	push   esi
c000708d:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007091:	83 c4 10             	add    esp,0x10
c0007094:	85 c0                	test   eax,eax
c0007096:	74 44                	je     c00070dc <f_forward+0x160>
c0007098:	31 ff                	xor    edi,edi
c000709a:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c000709d:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00070a0:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00070a4:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00070a8:	01 07                	add    DWORD PTR [edi],eax
c00070aa:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00070af:	0f 85 2f ff ff ff    	jne    c0006fe4 <f_forward+0x68>
c00070b5:	e9 96 00 00 00       	jmp    c0007150 <f_forward+0x1d4>
c00070ba:	85 f6                	test   esi,esi
c00070bc:	0f 85 60 ff ff ff    	jne    c0007022 <f_forward+0xa6>
c00070c2:	89 d7                	mov    edi,edx
c00070c4:	09 c7                	or     edi,eax
c00070c6:	75 05                	jne    c00070cd <f_forward+0x151>
c00070c8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00070cb:	eb 0a                	jmp    c00070d7 <f_forward+0x15b>
c00070cd:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00070d0:	89 d8                	mov    eax,ebx
c00070d2:	e8 d9 bc ff ff       	call   c0002db0 <get_fat>
c00070d7:	83 f8 01             	cmp    eax,0x1
c00070da:	77 0b                	ja     c00070e7 <f_forward+0x16b>
c00070dc:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00070e0:	bd 02 00 00 00       	mov    ebp,0x2
c00070e5:	eb 69                	jmp    c0007150 <f_forward+0x1d4>
c00070e7:	83 f8 ff             	cmp    eax,0xffffffff
c00070ea:	75 0b                	jne    c00070f7 <f_forward+0x17b>
c00070ec:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00070f0:	bd 01 00 00 00       	mov    ebp,0x1
c00070f5:	eb 59                	jmp    c0007150 <f_forward+0x1d4>
c00070f7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00070fa:	e9 23 ff ff ff       	jmp    c0007022 <f_forward+0xa6>
c00070ff:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0007103:	79 20                	jns    c0007125 <f_forward+0x1a9>
c0007105:	83 ec 0c             	sub    esp,0xc
c0007108:	6a 01                	push   0x1
c000710a:	52                   	push   edx
c000710b:	50                   	push   eax
c000710c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007110:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0007114:	50                   	push   eax
c0007115:	e8 fb a8 ff ff       	call   c0001a15 <disk_write>
c000711a:	83 c4 20             	add    esp,0x20
c000711d:	85 c0                	test   eax,eax
c000711f:	75 cb                	jne    c00070ec <f_forward+0x170>
c0007121:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007125:	83 ec 0c             	sub    esp,0xc
c0007128:	6a 01                	push   0x1
c000712a:	57                   	push   edi
c000712b:	56                   	push   esi
c000712c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007130:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007134:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007138:	50                   	push   eax
c0007139:	e8 c1 a8 ff ff       	call   c00019ff <disk_read>
c000713e:	83 c4 20             	add    esp,0x20
c0007141:	85 c0                	test   eax,eax
c0007143:	0f 84 1c ff ff ff    	je     c0007065 <f_forward+0xe9>
c0007149:	eb a1                	jmp    c00070ec <f_forward+0x170>
c000714b:	bd 07 00 00 00       	mov    ebp,0x7
c0007150:	83 c4 2c             	add    esp,0x2c
c0007153:	89 e8                	mov    eax,ebp
c0007155:	5b                   	pop    ebx
c0007156:	5e                   	pop    esi
c0007157:	5f                   	pop    edi
c0007158:	5d                   	pop    ebp
c0007159:	c3                   	ret    

c000715a <f_mkfs>:
c000715a:	55                   	push   ebp
c000715b:	57                   	push   edi
c000715c:	56                   	push   esi
c000715d:	53                   	push   ebx
c000715e:	bb 0b 00 00 00       	mov    ebx,0xb
c0007163:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007169:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007170:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007177:	e8 b0 ae ff ff       	call   c000202c <get_ldnumber>
c000717c:	85 c0                	test   eax,eax
c000717e:	0f 88 ec 10 00 00    	js     c0008270 <f_mkfs+0x1116>
c0007184:	8b 14 85 20 d8 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd27e0]
c000718b:	85 d2                	test   edx,edx
c000718d:	74 03                	je     c0007192 <f_mkfs+0x38>
c000718f:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0007192:	85 f6                	test   esi,esi
c0007194:	75 05                	jne    c000719b <f_mkfs+0x41>
c0007196:	be 20 89 02 c0       	mov    esi,0xc0028920
c000719b:	83 ec 0c             	sub    esp,0xc
c000719e:	0f b6 c0             	movzx  eax,al
c00071a1:	bb 03 00 00 00       	mov    ebx,0x3
c00071a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00071aa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071ae:	e8 49 a8 ff ff       	call   c00019fc <disk_initialize>
c00071b3:	83 c4 10             	add    esp,0x10
c00071b6:	a8 01                	test   al,0x1
c00071b8:	0f 85 b2 10 00 00    	jne    c0008270 <f_mkfs+0x1116>
c00071be:	bb 0a 00 00 00       	mov    ebx,0xa
c00071c3:	a8 04                	test   al,0x4
c00071c5:	0f 85 a5 10 00 00    	jne    c0008270 <f_mkfs+0x1116>
c00071cb:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00071ce:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00071d2:	85 c0                	test   eax,eax
c00071d4:	75 20                	jne    c00071f6 <f_mkfs+0x9c>
c00071d6:	51                   	push   ecx
c00071d7:	8d 44 24 78          	lea    eax,[esp+0x78]
c00071db:	50                   	push   eax
c00071dc:	6a 03                	push   0x3
c00071de:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071e2:	e8 44 a8 ff ff       	call   c0001a2b <disk_ioctl>
c00071e7:	83 c4 10             	add    esp,0x10
c00071ea:	85 c0                	test   eax,eax
c00071ec:	74 08                	je     c00071f6 <f_mkfs+0x9c>
c00071ee:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00071f6:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00071fa:	8d 42 ff             	lea    eax,[edx-0x1]
c00071fd:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007202:	77 04                	ja     c0007208 <f_mkfs+0xae>
c0007204:	85 c2                	test   edx,eax
c0007206:	74 08                	je     c0007210 <f_mkfs+0xb6>
c0007208:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007210:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0007213:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0007217:	48                   	dec    eax
c0007218:	3c 01                	cmp    al,0x1
c000721a:	76 05                	jbe    c0007221 <f_mkfs+0xc7>
c000721c:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007221:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007224:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007228:	48                   	dec    eax
c0007229:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000722e:	77 07                	ja     c0007237 <f_mkfs+0xdd>
c0007230:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007235:	74 08                	je     c000723f <f_mkfs+0xe5>
c0007237:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c000723f:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007242:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007248:	77 07                	ja     c0007251 <f_mkfs+0xf7>
c000724a:	8d 43 ff             	lea    eax,[ebx-0x1]
c000724d:	85 d8                	test   eax,ebx
c000724f:	74 02                	je     c0007253 <f_mkfs+0xf9>
c0007251:	31 db                	xor    ebx,ebx
c0007253:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c000725e:	77 0a                	ja     c000726a <f_mkfs+0x110>
c0007260:	bb 11 00 00 00       	mov    ebx,0x11
c0007265:	e9 06 10 00 00       	jmp    c0008270 <f_mkfs+0x1116>
c000726a:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007271:	8b 36                	mov    esi,DWORD PTR [esi]
c0007273:	85 ed                	test   ebp,ebp
c0007275:	75 1e                	jne    c0007295 <f_mkfs+0x13b>
c0007277:	83 ec 0c             	sub    esp,0xc
c000727a:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007281:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007286:	50                   	push   eax
c0007287:	e8 f1 0f 00 00       	call   c000827d <ff_memalloc>
c000728c:	83 c4 10             	add    esp,0x10
c000728f:	89 c5                	mov    ebp,eax
c0007291:	85 c0                	test   eax,eax
c0007293:	74 cb                	je     c0007260 <f_mkfs+0x106>
c0007295:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c000729d:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00072a5:	52                   	push   edx
c00072a6:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00072aa:	50                   	push   eax
c00072ab:	6a 01                	push   0x1
c00072ad:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072b1:	e8 75 a7 ff ff       	call   c0001a2b <disk_ioctl>
c00072b6:	83 c4 10             	add    esp,0x10
c00072b9:	85 c0                	test   eax,eax
c00072bb:	0f 85 4a 0f 00 00    	jne    c000820b <f_mkfs+0x10b1>
c00072c1:	89 f1                	mov    ecx,esi
c00072c3:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00072cb:	83 e1 0f             	and    ecx,0xf
c00072ce:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00072d6:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00072da:	83 e6 08             	and    esi,0x8
c00072dd:	75 56                	jne    c0007335 <f_mkfs+0x1db>
c00072df:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00072e3:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00072e7:	83 ff 00             	cmp    edi,0x0
c00072ea:	76 20                	jbe    c000730c <f_mkfs+0x1b2>
c00072ec:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00072f1:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00072f9:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00072ff:	83 d7 ff             	adc    edi,0xffffffff
c0007302:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007306:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000730a:	eb 21                	jmp    c000732d <f_mkfs+0x1d3>
c000730c:	ba 3f 00 00 00       	mov    edx,0x3f
c0007311:	39 f2                	cmp    edx,esi
c0007313:	19 f8                	sbb    eax,edi
c0007315:	73 1e                	jae    c0007335 <f_mkfs+0x1db>
c0007317:	83 c6 c1             	add    esi,0xffffffc1
c000731a:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007322:	83 d7 ff             	adc    edi,0xffffffff
c0007325:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007329:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000732d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007335:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007339:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000733d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007340:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007344:	31 c0                	xor    eax,eax
c0007346:	ba 7f 00 00 00       	mov    edx,0x7f
c000734b:	89 c7                	mov    edi,eax
c000734d:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007350:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007354:	0f 83 c5 0a 00 00    	jae    c0007e1f <f_mkfs+0xcc5>
c000735a:	89 df                	mov    edi,ebx
c000735c:	c1 ef 09             	shr    edi,0x9
c000735f:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007363:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c000736a:	c1 ef 09             	shr    edi,0x9
c000736d:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007372:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007376:	74 29                	je     c00073a1 <f_mkfs+0x247>
c0007378:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000737e:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c0007383:	0f 97 c2             	seta   dl
c0007386:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007389:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000738d:	0f 92 c0             	setb   al
c0007390:	08 c2                	or     dl,al
c0007392:	75 5b                	jne    c00073ef <f_mkfs+0x295>
c0007394:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007398:	83 e0 07             	and    eax,0x7
c000739b:	3c 04                	cmp    al,0x4
c000739d:	74 50                	je     c00073ef <f_mkfs+0x295>
c000739f:	eb 1b                	jmp    c00073bc <f_mkfs+0x262>
c00073a1:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00073a6:	0f 87 73 0a 00 00    	ja     c0007e1f <f_mkfs+0xcc5>
c00073ac:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00073b2:	76 08                	jbe    c00073bc <f_mkfs+0x262>
c00073b4:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00073bc:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00073c0:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00073c4:	83 e0 01             	and    eax,0x1
c00073c7:	80 e1 02             	and    cl,0x2
c00073ca:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00073ce:	74 0d                	je     c00073dd <f_mkfs+0x283>
c00073d0:	84 c0                	test   al,al
c00073d2:	0f 84 53 09 00 00    	je     c0007d2b <f_mkfs+0xbd1>
c00073d8:	e9 12 08 00 00       	jmp    c0007bef <f_mkfs+0xa95>
c00073dd:	bb 13 00 00 00       	mov    ebx,0x13
c00073e2:	84 c0                	test   al,al
c00073e4:	0f 85 05 08 00 00    	jne    c0007bef <f_mkfs+0xa95>
c00073ea:	e9 39 0e 00 00       	jmp    c0008228 <f_mkfs+0x10ce>
c00073ef:	31 c0                	xor    eax,eax
c00073f1:	ba ff 0f 00 00       	mov    edx,0xfff
c00073f6:	89 c7                	mov    edi,eax
c00073f8:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00073fb:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00073ff:	0f 83 1a 0a 00 00    	jae    c0007e1f <f_mkfs+0xcc5>
c0007405:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c000740b:	77 39                	ja     c0007446 <f_mkfs+0x2ec>
c000740d:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007412:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c000741a:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000741d:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007421:	73 08                	jae    c000742b <f_mkfs+0x2d1>
c0007423:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c000742b:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007430:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007433:	b8 00 00 00 00       	mov    eax,0x0
c0007438:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000743c:	73 08                	jae    c0007446 <f_mkfs+0x2ec>
c000743e:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007446:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000744a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000744e:	83 c0 20             	add    eax,0x20
c0007451:	83 d2 00             	adc    edx,0x0
c0007454:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007458:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000745c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007460:	31 d2                	xor    edx,edx
c0007462:	31 ff                	xor    edi,edi
c0007464:	52                   	push   edx
c0007465:	89 fb                	mov    ebx,edi
c0007467:	50                   	push   eax
c0007468:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000746c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007470:	e8 d7 ea 01 00       	call   c0025f4c <__udivdi3>
c0007475:	83 c4 10             	add    esp,0x10
c0007478:	c1 e0 02             	shl    eax,0x2
c000747b:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c000747f:	05 07 02 00 00       	add    eax,0x207
c0007484:	89 f1                	mov    ecx,esi
c0007486:	c1 e8 09             	shr    eax,0x9
c0007489:	83 c1 ff             	add    ecx,0xffffffff
c000748c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0007490:	83 d3 ff             	adc    ebx,0xffffffff
c0007493:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0007497:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c000749b:	31 d2                	xor    edx,edx
c000749d:	01 c8                	add    eax,ecx
c000749f:	11 da                	adc    edx,ebx
c00074a1:	89 c1                	mov    ecx,eax
c00074a3:	f7 de                	neg    esi
c00074a5:	89 d0                	mov    eax,edx
c00074a7:	83 d7 00             	adc    edi,0x0
c00074aa:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00074ae:	f7 df                	neg    edi
c00074b0:	21 f1                	and    ecx,esi
c00074b2:	21 f8                	and    eax,edi
c00074b4:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00074b8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00074bc:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00074c0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00074c4:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00074c8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00074cb:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00074cf:	0f ac d0 01          	shrd   eax,edx,0x1
c00074d3:	89 df                	mov    edi,ebx
c00074d5:	d1 ea                	shr    edx,1
c00074d7:	39 c1                	cmp    ecx,eax
c00074d9:	19 d7                	sbb    edi,edx
c00074db:	0f 83 3e 09 00 00    	jae    c0007e1f <f_mkfs+0xcc5>
c00074e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074e5:	31 d2                	xor    edx,edx
c00074e7:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00074eb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00074ef:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00074f3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00074f6:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00074fa:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00074fe:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007502:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007506:	83 f8 0f             	cmp    eax,0xf
c0007509:	0f 86 10 09 00 00    	jbe    c0007e1f <f_mkfs+0xcc5>
c000750f:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c0007517:	0f 87 02 09 00 00    	ja     c0007e1f <f_mkfs+0xcc5>
c000751d:	31 d2                	xor    edx,edx
c000751f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007523:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000752b:	83 c0 07             	add    eax,0x7
c000752e:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007536:	c1 e8 03             	shr    eax,0x3
c0007539:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007540:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007544:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007548:	c1 e0 09             	shl    eax,0x9
c000754b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000754f:	48                   	dec    eax
c0007550:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007554:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007558:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c000755c:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007560:	31 d2                	xor    edx,edx
c0007562:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007566:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000756d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007571:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007576:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000757a:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000757e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007582:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007586:	31 ff                	xor    edi,edi
c0007588:	31 f6                	xor    esi,esi
c000758a:	31 db                	xor    ebx,ebx
c000758c:	85 ff                	test   edi,edi
c000758e:	74 05                	je     c0007595 <f_mkfs+0x43b>
c0007590:	4f                   	dec    edi
c0007591:	74 44                	je     c00075d7 <f_mkfs+0x47d>
c0007593:	eb 4f                	jmp    c00075e4 <f_mkfs+0x48a>
c0007595:	83 ec 0c             	sub    esp,0xc
c0007598:	0f b7 c3             	movzx  eax,bx
c000759b:	50                   	push   eax
c000759c:	e8 05 0e 00 00       	call   c00083a6 <ff_wtoupper>
c00075a1:	83 c4 10             	add    esp,0x10
c00075a4:	89 c1                	mov    ecx,eax
c00075a6:	8d 53 01             	lea    edx,[ebx+0x1]
c00075a9:	66 39 c3             	cmp    bx,ax
c00075ac:	75 3e                	jne    c00075ec <f_mkfs+0x492>
c00075ae:	be 01 00 00 00       	mov    esi,0x1
c00075b3:	89 df                	mov    edi,ebx
c00075b5:	66 01 f7             	add    di,si
c00075b8:	75 07                	jne    c00075c1 <f_mkfs+0x467>
c00075ba:	83 fe 7f             	cmp    esi,0x7f
c00075bd:	77 31                	ja     c00075f0 <f_mkfs+0x496>
c00075bf:	eb 16                	jmp    c00075d7 <f_mkfs+0x47d>
c00075c1:	83 ec 0c             	sub    esp,0xc
c00075c4:	0f b7 ff             	movzx  edi,di
c00075c7:	57                   	push   edi
c00075c8:	e8 d9 0d 00 00       	call   c00083a6 <ff_wtoupper>
c00075cd:	83 c4 10             	add    esp,0x10
c00075d0:	39 c7                	cmp    edi,eax
c00075d2:	75 e6                	jne    c00075ba <f_mkfs+0x460>
c00075d4:	46                   	inc    esi
c00075d5:	eb dc                	jmp    c00075b3 <f_mkfs+0x459>
c00075d7:	31 c0                	xor    eax,eax
c00075d9:	89 d9                	mov    ecx,ebx
c00075db:	4e                   	dec    esi
c00075dc:	0f 95 c0             	setne  al
c00075df:	43                   	inc    ebx
c00075e0:	89 c7                	mov    edi,eax
c00075e2:	eb 14                	jmp    c00075f8 <f_mkfs+0x49e>
c00075e4:	89 f1                	mov    ecx,esi
c00075e6:	01 f3                	add    ebx,esi
c00075e8:	31 ff                	xor    edi,edi
c00075ea:	eb 0c                	jmp    c00075f8 <f_mkfs+0x49e>
c00075ec:	89 d3                	mov    ebx,edx
c00075ee:	eb 08                	jmp    c00075f8 <f_mkfs+0x49e>
c00075f0:	bf 02 00 00 00       	mov    edi,0x2
c00075f5:	83 c9 ff             	or     ecx,0xffffffff
c00075f8:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00075fc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075ff:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c0007603:	0f b6 c1             	movzx  eax,cl
c0007606:	e8 3a a9 ff ff       	call   c0001f45 <xsum32>
c000760b:	66 c1 e9 08          	shr    cx,0x8
c000760f:	89 c2                	mov    edx,eax
c0007611:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007614:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c0007618:	0f b7 c1             	movzx  eax,cx
c000761b:	e8 25 a9 ff ff       	call   c0001f45 <xsum32>
c0007620:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007625:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007629:	66 85 db             	test   bx,bx
c000762c:	74 1f                	je     c000764d <f_mkfs+0x4f3>
c000762e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007631:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007638:	83 c0 02             	add    eax,0x2
c000763b:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007641:	39 c2                	cmp    edx,eax
c0007643:	74 08                	je     c000764d <f_mkfs+0x4f3>
c0007645:	89 04 24             	mov    DWORD PTR [esp],eax
c0007648:	e9 3f ff ff ff       	jmp    c000758c <f_mkfs+0x432>
c000764d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007650:	83 ec 0c             	sub    esp,0xc
c0007653:	05 01 02 00 00       	add    eax,0x201
c0007658:	c1 e8 09             	shr    eax,0x9
c000765b:	50                   	push   eax
c000765c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007660:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007664:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007668:	55                   	push   ebp
c0007669:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000766d:	e8 a3 a3 ff ff       	call   c0001a15 <disk_write>
c0007672:	83 c4 20             	add    esp,0x20
c0007675:	85 c0                	test   eax,eax
c0007677:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000767a:	0f 85 8b 0b 00 00    	jne    c000820b <f_mkfs+0x10b1>
c0007680:	89 d0                	mov    eax,edx
c0007682:	31 d2                	xor    edx,edx
c0007684:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c0007688:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c000768c:	66 85 db             	test   bx,bx
c000768f:	74 04                	je     c0007695 <f_mkfs+0x53b>
c0007691:	31 c0                	xor    eax,eax
c0007693:	eb b0                	jmp    c0007645 <f_mkfs+0x4eb>
c0007695:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007699:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000769d:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00076a1:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00076a7:	31 d2                	xor    edx,edx
c00076a9:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00076b4:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00076b8:	c1 eb 09             	shr    ebx,0x9
c00076bb:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00076c2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00076c6:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00076ca:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00076ce:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00076d2:	8d 70 01             	lea    esi,[eax+0x1]
c00076d5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00076dd:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00076e4:	31 d2                	xor    edx,edx
c00076e6:	25 00 fe ff ff       	and    eax,0xfffffe00
c00076eb:	89 04 24             	mov    DWORD PTR [esp],eax
c00076ee:	89 c1                	mov    ecx,eax
c00076f0:	89 e8                	mov    eax,ebp
c00076f2:	e8 e7 a3 ff ff       	call   c0001ade <mem_set>
c00076f7:	31 c0                	xor    eax,eax
c00076f9:	39 04 24             	cmp    DWORD PTR [esp],eax
c00076fc:	76 10                	jbe    c000770e <f_mkfs+0x5b4>
c00076fe:	83 fe 07             	cmp    esi,0x7
c0007701:	76 0b                	jbe    c000770e <f_mkfs+0x5b4>
c0007703:	40                   	inc    eax
c0007704:	83 ee 08             	sub    esi,0x8
c0007707:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c000770c:	eb eb                	jmp    c00076f9 <f_mkfs+0x59f>
c000770e:	b2 01                	mov    dl,0x1
c0007710:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007714:	85 f6                	test   esi,esi
c0007716:	74 0c                	je     c0007724 <f_mkfs+0x5ca>
c0007718:	39 04 24             	cmp    DWORD PTR [esp],eax
c000771b:	76 07                	jbe    c0007724 <f_mkfs+0x5ca>
c000771d:	08 11                	or     BYTE PTR [ecx],dl
c000771f:	4e                   	dec    esi
c0007720:	d1 e2                	shl    edx,1
c0007722:	eb f0                	jmp    c0007714 <f_mkfs+0x5ba>
c0007724:	89 df                	mov    edi,ebx
c0007726:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c000772a:	76 04                	jbe    c0007730 <f_mkfs+0x5d6>
c000772c:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007730:	83 ec 0c             	sub    esp,0xc
c0007733:	57                   	push   edi
c0007734:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007738:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000773c:	55                   	push   ebp
c000773d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007741:	e8 cf a2 ff ff       	call   c0001a15 <disk_write>
c0007746:	83 c4 20             	add    esp,0x20
c0007749:	85 c0                	test   eax,eax
c000774b:	0f 85 ba 0a 00 00    	jne    c000820b <f_mkfs+0x10b1>
c0007751:	31 d2                	xor    edx,edx
c0007753:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007757:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c000775b:	29 fb                	sub    ebx,edi
c000775d:	0f 85 7a ff ff ff    	jne    c00076dd <f_mkfs+0x583>
c0007763:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007767:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000776f:	31 f6                	xor    esi,esi
c0007771:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007775:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007778:	31 d2                	xor    edx,edx
c000777a:	89 e8                	mov    eax,ebp
c000777c:	e8 5d a3 ff ff       	call   c0001ade <mem_set>
c0007781:	31 c9                	xor    ecx,ecx
c0007783:	85 db                	test   ebx,ebx
c0007785:	75 40                	jne    c00077c7 <f_mkfs+0x66d>
c0007787:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c000778c:	89 e8                	mov    eax,ebp
c000778e:	bb 02 00 00 00       	mov    ebx,0x2
c0007793:	e8 28 a3 ff ff       	call   c0001ac0 <st_dword>
c0007798:	8d 45 04             	lea    eax,[ebp+0x4]
c000779b:	83 ca ff             	or     edx,0xffffffff
c000779e:	e8 1d a3 ff ff       	call   c0001ac0 <st_dword>
c00077a3:	b9 08 00 00 00       	mov    ecx,0x8
c00077a8:	eb 1d                	jmp    c00077c7 <f_mkfs+0x66d>
c00077aa:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00077ad:	76 3b                	jbe    c00077ea <f_mkfs+0x690>
c00077af:	43                   	inc    ebx
c00077b0:	83 fe 01             	cmp    esi,0x1
c00077b3:	89 da                	mov    edx,ebx
c00077b5:	77 03                	ja     c00077ba <f_mkfs+0x660>
c00077b7:	83 ca ff             	or     edx,0xffffffff
c00077ba:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00077be:	4e                   	dec    esi
c00077bf:	e8 fc a2 ff ff       	call   c0001ac0 <st_dword>
c00077c4:	83 c1 04             	add    ecx,0x4
c00077c7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00077cb:	85 f6                	test   esi,esi
c00077cd:	75 db                	jne    c00077aa <f_mkfs+0x650>
c00077cf:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00077d4:	77 14                	ja     c00077ea <f_mkfs+0x690>
c00077d6:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00077da:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00077e1:	85 f6                	test   esi,esi
c00077e3:	74 05                	je     c00077ea <f_mkfs+0x690>
c00077e5:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00077e8:	77 dd                	ja     c00077c7 <f_mkfs+0x66d>
c00077ea:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00077ee:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00077f2:	39 cf                	cmp    edi,ecx
c00077f4:	76 02                	jbe    c00077f8 <f_mkfs+0x69e>
c00077f6:	89 cf                	mov    edi,ecx
c00077f8:	83 ec 0c             	sub    esp,0xc
c00077fb:	57                   	push   edi
c00077fc:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007800:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007804:	55                   	push   ebp
c0007805:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007809:	e8 07 a2 ff ff       	call   c0001a15 <disk_write>
c000780e:	83 c4 20             	add    esp,0x20
c0007811:	85 c0                	test   eax,eax
c0007813:	0f 85 f2 09 00 00    	jne    c000820b <f_mkfs+0x10b1>
c0007819:	31 d2                	xor    edx,edx
c000781b:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c000781f:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007823:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007827:	0f 85 48 ff ff ff    	jne    c0007775 <f_mkfs+0x61b>
c000782d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007830:	31 d2                	xor    edx,edx
c0007832:	89 e8                	mov    eax,ebp
c0007834:	31 ff                	xor    edi,edi
c0007836:	e8 a3 a2 ff ff       	call   c0001ade <mem_set>
c000783b:	8d 45 34             	lea    eax,[ebp+0x34]
c000783e:	ba 02 00 00 00       	mov    edx,0x2
c0007843:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007847:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c000784b:	e8 70 a2 ff ff       	call   c0001ac0 <st_dword>
c0007850:	8d 45 38             	lea    eax,[ebp+0x38]
c0007853:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007857:	e8 64 a2 ff ff       	call   c0001ac0 <st_dword>
c000785c:	8d 45 44             	lea    eax,[ebp+0x44]
c000785f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007863:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007867:	e8 54 a2 ff ff       	call   c0001ac0 <st_dword>
c000786c:	8d 45 54             	lea    eax,[ebp+0x54]
c000786f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007873:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007877:	83 c2 02             	add    edx,0x2
c000787a:	e8 41 a2 ff ff       	call   c0001ac0 <st_dword>
c000787f:	8d 45 58             	lea    eax,[ebp+0x58]
c0007882:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007886:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000788a:	e8 31 a2 ff ff       	call   c0001ac0 <st_dword>
c000788f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007893:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007898:	89 c6                	mov    esi,eax
c000789a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000789e:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00078a2:	89 04 24             	mov    DWORD PTR [esp],eax
c00078a5:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c00078a9:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c00078ac:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00078b0:	39 cb                	cmp    ebx,ecx
c00078b2:	76 02                	jbe    c00078b6 <f_mkfs+0x75c>
c00078b4:	89 cb                	mov    ebx,ecx
c00078b6:	83 ec 0c             	sub    esp,0xc
c00078b9:	53                   	push   ebx
c00078ba:	57                   	push   edi
c00078bb:	56                   	push   esi
c00078bc:	55                   	push   ebp
c00078bd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00078c1:	e8 4f a1 ff ff       	call   c0001a15 <disk_write>
c00078c6:	83 c4 20             	add    esp,0x20
c00078c9:	85 c0                	test   eax,eax
c00078cb:	0f 85 3a 09 00 00    	jne    c000820b <f_mkfs+0x10b1>
c00078d1:	31 d2                	xor    edx,edx
c00078d3:	b9 00 02 00 00       	mov    ecx,0x200
c00078d8:	89 e8                	mov    eax,ebp
c00078da:	e8 ff a1 ff ff       	call   c0001ade <mem_set>
c00078df:	31 d2                	xor    edx,edx
c00078e1:	01 de                	add    esi,ebx
c00078e3:	11 d7                	adc    edi,edx
c00078e5:	29 1c 24             	sub    DWORD PTR [esp],ebx
c00078e8:	75 bf                	jne    c00078a9 <f_mkfs+0x74f>
c00078ea:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00078ee:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00078f2:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c00078fa:	b9 00 02 00 00       	mov    ecx,0x200
c00078ff:	31 d2                	xor    edx,edx
c0007901:	89 e8                	mov    eax,ebp
c0007903:	e8 d6 a1 ff ff       	call   c0001ade <mem_set>
c0007908:	b9 0b 00 00 00       	mov    ecx,0xb
c000790d:	ba 00 8a 02 c0       	mov    edx,0xc0028a00
c0007912:	89 e8                	mov    eax,ebp
c0007914:	e8 b0 a1 ff ff       	call   c0001ac9 <mem_cpy>
c0007919:	8d 45 40             	lea    eax,[ebp+0x40]
c000791c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007920:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007924:	e8 9a a1 ff ff       	call   c0001ac3 <st_qword>
c0007929:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000792d:	8d 45 48             	lea    eax,[ebp+0x48]
c0007930:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007934:	e8 8a a1 ff ff       	call   c0001ac3 <st_qword>
c0007939:	8d 45 50             	lea    eax,[ebp+0x50]
c000793c:	ba 20 00 00 00       	mov    edx,0x20
c0007941:	e8 7a a1 ff ff       	call   c0001ac0 <st_dword>
c0007946:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000794a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000794e:	e8 6d a1 ff ff       	call   c0001ac0 <st_dword>
c0007953:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007957:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000795b:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c000795f:	e8 5c a1 ff ff       	call   c0001ac0 <st_dword>
c0007964:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007967:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000796b:	e8 50 a1 ff ff       	call   c0001ac0 <st_dword>
c0007970:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007974:	8d 50 02             	lea    edx,[eax+0x2]
c0007977:	8d 45 60             	lea    eax,[ebp+0x60]
c000797a:	e8 41 a1 ff ff       	call   c0001ac0 <st_dword>
c000797f:	8d 45 64             	lea    eax,[ebp+0x64]
c0007982:	ba 00 00 21 50       	mov    edx,0x50210000
c0007987:	e8 34 a1 ff ff       	call   c0001ac0 <st_dword>
c000798c:	8d 45 68             	lea    eax,[ebp+0x68]
c000798f:	ba 00 01 00 00       	mov    edx,0x100
c0007994:	e8 23 a1 ff ff       	call   c0001abc <st_word>
c0007999:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c000799d:	b8 0a 00 00 00       	mov    eax,0xa
c00079a2:	48                   	dec    eax
c00079a3:	74 05                	je     c00079aa <f_mkfs+0x850>
c00079a5:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c00079a8:	eb f8                	jmp    c00079a2 <f_mkfs+0x848>
c00079aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00079ae:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c00079b2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00079b6:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c00079ba:	74 05                	je     c00079c1 <f_mkfs+0x867>
c00079bc:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c00079bf:	eb f5                	jmp    c00079b6 <f_mkfs+0x85c>
c00079c1:	8d 45 78             	lea    eax,[ebp+0x78]
c00079c4:	ba eb fe 00 00       	mov    edx,0xfeeb
c00079c9:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c00079cf:	31 db                	xor    ebx,ebx
c00079d1:	e8 e6 a0 ff ff       	call   c0001abc <st_word>
c00079d6:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c00079dc:	ba 55 aa 00 00       	mov    edx,0xaa55
c00079e1:	89 04 24             	mov    DWORD PTR [esp],eax
c00079e4:	e8 d3 a0 ff ff       	call   c0001abc <st_word>
c00079e9:	31 c9                	xor    ecx,ecx
c00079eb:	8d 41 96             	lea    eax,[ecx-0x6a]
c00079ee:	83 f8 01             	cmp    eax,0x1
c00079f1:	76 13                	jbe    c0007a06 <f_mkfs+0x8ac>
c00079f3:	83 f9 70             	cmp    ecx,0x70
c00079f6:	74 0e                	je     c0007a06 <f_mkfs+0x8ac>
c00079f8:	89 da                	mov    edx,ebx
c00079fa:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c00079ff:	e8 41 a5 ff ff       	call   c0001f45 <xsum32>
c0007a04:	89 c3                	mov    ebx,eax
c0007a06:	41                   	inc    ecx
c0007a07:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a0d:	75 dc                	jne    c00079eb <f_mkfs+0x891>
c0007a0f:	89 f0                	mov    eax,esi
c0007a11:	89 fa                	mov    edx,edi
c0007a13:	83 c0 01             	add    eax,0x1
c0007a16:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a1a:	83 d2 00             	adc    edx,0x0
c0007a1d:	83 ec 0c             	sub    esp,0xc
c0007a20:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007a24:	6a 01                	push   0x1
c0007a26:	57                   	push   edi
c0007a27:	56                   	push   esi
c0007a28:	55                   	push   ebp
c0007a29:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a2d:	e8 e3 9f ff ff       	call   c0001a15 <disk_write>
c0007a32:	83 c4 20             	add    esp,0x20
c0007a35:	85 c0                	test   eax,eax
c0007a37:	0f 85 ce 07 00 00    	jne    c000820b <f_mkfs+0x10b1>
c0007a3d:	31 d2                	xor    edx,edx
c0007a3f:	b9 00 02 00 00       	mov    ecx,0x200
c0007a44:	89 e8                	mov    eax,ebp
c0007a46:	e8 93 a0 ff ff       	call   c0001ade <mem_set>
c0007a4b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007a50:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a53:	e8 64 a0 ff ff       	call   c0001abc <st_word>
c0007a58:	89 f0                	mov    eax,esi
c0007a5a:	89 fa                	mov    edx,edi
c0007a5c:	83 c0 09             	add    eax,0x9
c0007a5f:	83 d2 00             	adc    edx,0x0
c0007a62:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a65:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007a69:	31 c9                	xor    ecx,ecx
c0007a6b:	41                   	inc    ecx
c0007a6c:	89 da                	mov    edx,ebx
c0007a6e:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007a73:	e8 cd a4 ff ff       	call   c0001f45 <xsum32>
c0007a78:	89 c3                	mov    ebx,eax
c0007a7a:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a80:	75 e9                	jne    c0007a6b <f_mkfs+0x911>
c0007a82:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007a86:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007a8a:	83 c0 01             	add    eax,0x1
c0007a8d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007a91:	83 d2 00             	adc    edx,0x0
c0007a94:	83 ec 0c             	sub    esp,0xc
c0007a97:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007a9b:	6a 01                	push   0x1
c0007a9d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007aa1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007aa5:	55                   	push   ebp
c0007aa6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007aaa:	e8 66 9f ff ff       	call   c0001a15 <disk_write>
c0007aaf:	83 c4 20             	add    esp,0x20
c0007ab2:	85 c0                	test   eax,eax
c0007ab4:	0f 85 51 07 00 00    	jne    c000820b <f_mkfs+0x10b1>
c0007aba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007abe:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007ac2:	75 09                	jne    c0007acd <f_mkfs+0x973>
c0007ac4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007ac7:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007acb:	74 12                	je     c0007adf <f_mkfs+0x985>
c0007acd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ad1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007ad5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007ad9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007add:	eb 8a                	jmp    c0007a69 <f_mkfs+0x90f>
c0007adf:	31 d2                	xor    edx,edx
c0007ae1:	b9 00 02 00 00       	mov    ecx,0x200
c0007ae6:	89 e8                	mov    eax,ebp
c0007ae8:	e8 f1 9f ff ff       	call   c0001ade <mem_set>
c0007aed:	83 c6 0b             	add    esi,0xb
c0007af0:	83 d7 00             	adc    edi,0x0
c0007af3:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007af7:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007afb:	31 c9                	xor    ecx,ecx
c0007afd:	41                   	inc    ecx
c0007afe:	89 da                	mov    edx,ebx
c0007b00:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007b05:	e8 3b a4 ff ff       	call   c0001f45 <xsum32>
c0007b0a:	89 c3                	mov    ebx,eax
c0007b0c:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007b12:	75 e9                	jne    c0007afd <f_mkfs+0x9a3>
c0007b14:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007b17:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007b1b:	83 c6 01             	add    esi,0x1
c0007b1e:	83 d7 00             	adc    edi,0x0
c0007b21:	83 ec 0c             	sub    esp,0xc
c0007b24:	6a 01                	push   0x1
c0007b26:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007b2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007b2e:	55                   	push   ebp
c0007b2f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b33:	e8 dd 9e ff ff       	call   c0001a15 <disk_write>
c0007b38:	83 c4 20             	add    esp,0x20
c0007b3b:	85 c0                	test   eax,eax
c0007b3d:	0f 85 c8 06 00 00    	jne    c000820b <f_mkfs+0x10b1>
c0007b43:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007b47:	75 06                	jne    c0007b4f <f_mkfs+0x9f5>
c0007b49:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007b4d:	74 09                	je     c0007b58 <f_mkfs+0x9fe>
c0007b4f:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b52:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007b56:	eb a3                	jmp    c0007afb <f_mkfs+0x9a1>
c0007b58:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007b5c:	89 da                	mov    edx,ebx
c0007b5e:	01 e8                	add    eax,ebp
c0007b60:	e8 5b 9f ff ff       	call   c0001ac0 <st_dword>
c0007b65:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007b6a:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007b72:	75 e4                	jne    c0007b58 <f_mkfs+0x9fe>
c0007b74:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007b77:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007b7b:	83 c6 02             	add    esi,0x2
c0007b7e:	83 d7 00             	adc    edi,0x0
c0007b81:	83 ec 0c             	sub    esp,0xc
c0007b84:	6a 01                	push   0x1
c0007b86:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b8a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b8e:	55                   	push   ebp
c0007b8f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b93:	e8 7d 9e ff ff       	call   c0001a15 <disk_write>
c0007b98:	83 c4 20             	add    esp,0x20
c0007b9b:	85 c0                	test   eax,eax
c0007b9d:	0f 85 68 06 00 00    	jne    c000820b <f_mkfs+0x10b1>
c0007ba3:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007ba8:	74 0d                	je     c0007bb7 <f_mkfs+0xa5d>
c0007baa:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007bb2:	e9 43 fd ff ff       	jmp    c00078fa <f_mkfs+0x7a0>
c0007bb7:	b1 07                	mov    cl,0x7
c0007bb9:	e9 e3 05 00 00       	jmp    c00081a1 <f_mkfs+0x1047>
c0007bbe:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007bc3:	0f 85 4f 02 00 00    	jne    c0007e18 <f_mkfs+0xcbe>
c0007bc9:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007bce:	0f 86 22 02 00 00    	jbe    c0007df6 <f_mkfs+0xc9c>
c0007bd4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007bd9:	0f 85 81 06 00 00    	jne    c0008260 <f_mkfs+0x1106>
c0007bdf:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007be2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007be6:	83 f8 40             	cmp    eax,0x40
c0007be9:	0f 87 51 06 00 00    	ja     c0008240 <f_mkfs+0x10e6>
c0007bef:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007bf3:	85 ff                	test   edi,edi
c0007bf5:	75 1c                	jne    c0007c13 <f_mkfs+0xab9>
c0007bf7:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007bfa:	ba 00 89 02 c0       	mov    edx,0xc0028900
c0007bff:	c1 e9 0c             	shr    ecx,0xc
c0007c02:	bf 01 00 00 00       	mov    edi,0x1
c0007c07:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007c0a:	66 85 c0             	test   ax,ax
c0007c0d:	0f 85 95 01 00 00    	jne    c0007da8 <f_mkfs+0xc4e>
c0007c13:	31 d2                	xor    edx,edx
c0007c15:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c18:	f7 f7                	div    edi
c0007c1a:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007c1f:	0f 86 95 01 00 00    	jbe    c0007dba <f_mkfs+0xc60>
c0007c25:	83 c0 02             	add    eax,0x2
c0007c28:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007c2d:	01 c0                	add    eax,eax
c0007c2f:	05 ff 01 00 00       	add    eax,0x1ff
c0007c34:	be 01 00 00 00       	mov    esi,0x1
c0007c39:	c1 e8 09             	shr    eax,0x9
c0007c3c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007c40:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c44:	c1 e0 05             	shl    eax,0x5
c0007c47:	c1 e8 09             	shr    eax,0x9
c0007c4a:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007c4e:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007c53:	31 d2                	xor    edx,edx
c0007c55:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007c59:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007c5d:	89 f0                	mov    eax,esi
c0007c5f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007c63:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007c67:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007c6b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007c6f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007c73:	31 d2                	xor    edx,edx
c0007c75:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007c7a:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007c7e:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007c82:	31 db                	xor    ebx,ebx
c0007c84:	01 c8                	add    eax,ecx
c0007c86:	11 da                	adc    edx,ebx
c0007c88:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007c8c:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007c90:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007c94:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007c98:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007c9c:	f7 da                	neg    edx
c0007c9e:	21 d1                	and    ecx,edx
c0007ca0:	29 d9                	sub    ecx,ebx
c0007ca2:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ca7:	0f 85 20 01 00 00    	jne    c0007dcd <f_mkfs+0xc73>
c0007cad:	31 db                	xor    ebx,ebx
c0007caf:	01 ce                	add    esi,ecx
c0007cb1:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007cb5:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007cb9:	31 d2                	xor    edx,edx
c0007cbb:	89 f8                	mov    eax,edi
c0007cbd:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007cc1:	c1 e0 04             	shl    eax,0x4
c0007cc4:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007cc8:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ccc:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007cd0:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007cd4:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007cd7:	19 d3                	sbb    ebx,edx
c0007cd9:	0f 82 40 01 00 00    	jb     c0007e1f <f_mkfs+0xcc5>
c0007cdf:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ce2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ce6:	89 c8                	mov    eax,ecx
c0007ce8:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007ced:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007cf1:	29 f0                	sub    eax,esi
c0007cf3:	29 d0                	sub    eax,edx
c0007cf5:	31 d2                	xor    edx,edx
c0007cf7:	f7 f7                	div    edi
c0007cf9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007cfe:	89 c3                	mov    ebx,eax
c0007d00:	0f 85 b8 fe ff ff    	jne    c0007bbe <f_mkfs+0xa64>
c0007d06:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007d0b:	0f 87 1d 01 00 00    	ja     c0007e2e <f_mkfs+0xcd4>
c0007d11:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007d16:	0f 85 03 01 00 00    	jne    c0007e1f <f_mkfs+0xcc5>
c0007d1c:	83 ff 01             	cmp    edi,0x1
c0007d1f:	0f 86 fa 00 00 00    	jbe    c0007e1f <f_mkfs+0xcc5>
c0007d25:	d1 ef                	shr    edi,1
c0007d27:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007d2b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007d2f:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007d32:	85 db                	test   ebx,ebx
c0007d34:	75 2d                	jne    c0007d63 <f_mkfs+0xc09>
c0007d36:	89 cb                	mov    ebx,ecx
c0007d38:	ba 10 89 02 c0       	mov    edx,0xc0028910
c0007d3d:	c1 eb 11             	shr    ebx,0x11
c0007d40:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007d48:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007d4b:	66 85 c0             	test   ax,ax
c0007d4e:	74 11                	je     c0007d61 <f_mkfs+0xc07>
c0007d50:	83 c2 02             	add    edx,0x2
c0007d53:	39 d8                	cmp    eax,ebx
c0007d55:	77 0a                	ja     c0007d61 <f_mkfs+0xc07>
c0007d57:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007d5b:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007d5f:	eb e7                	jmp    c0007d48 <f_mkfs+0xbee>
c0007d61:	31 db                	xor    ebx,ebx
c0007d63:	31 d2                	xor    edx,edx
c0007d65:	89 c8                	mov    eax,ecx
c0007d67:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007d6b:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007d72:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007d77:	c1 ea 09             	shr    edx,0x9
c0007d7a:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007d7f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d83:	0f 87 96 00 00 00    	ja     c0007e1f <f_mkfs+0xcc5>
c0007d89:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d8d:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007d95:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007d99:	be 20 00 00 00       	mov    esi,0x20
c0007d9e:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007da3:	e9 a6 fe ff ff       	jmp    c0007c4e <f_mkfs+0xaf4>
c0007da8:	83 c2 02             	add    edx,0x2
c0007dab:	39 c8                	cmp    eax,ecx
c0007dad:	0f 87 60 fe ff ff    	ja     c0007c13 <f_mkfs+0xab9>
c0007db3:	01 ff                	add    edi,edi
c0007db5:	e9 4d fe ff ff       	jmp    c0007c07 <f_mkfs+0xaad>
c0007dba:	8d 04 40             	lea    eax,[eax+eax*2]
c0007dbd:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007dc2:	40                   	inc    eax
c0007dc3:	d1 e8                	shr    eax,1
c0007dc5:	83 c0 03             	add    eax,0x3
c0007dc8:	e9 62 fe ff ff       	jmp    c0007c2f <f_mkfs+0xad5>
c0007dcd:	31 d2                	xor    edx,edx
c0007dcf:	89 c8                	mov    eax,ecx
c0007dd1:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007dd5:	85 d2                	test   edx,edx
c0007dd7:	74 0c                	je     c0007de5 <f_mkfs+0xc8b>
c0007dd9:	49                   	dec    ecx
c0007dda:	46                   	inc    esi
c0007ddb:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007de0:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007de5:	89 c8                	mov    eax,ecx
c0007de7:	31 d2                	xor    edx,edx
c0007de9:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007ded:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007df1:	e9 c3 fe ff ff       	jmp    c0007cb9 <f_mkfs+0xb5f>
c0007df6:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dfb:	77 31                	ja     c0007e2e <f_mkfs+0xcd4>
c0007dfd:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007e02:	75 1b                	jne    c0007e1f <f_mkfs+0xcc5>
c0007e04:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007e07:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007e0b:	3d 80 00 00 00       	cmp    eax,0x80
c0007e10:	0f 86 d9 fd ff ff    	jbe    c0007bef <f_mkfs+0xa95>
c0007e16:	eb 07                	jmp    c0007e1f <f_mkfs+0xcc5>
c0007e18:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e1d:	76 0a                	jbe    c0007e29 <f_mkfs+0xccf>
c0007e1f:	bb 0e 00 00 00       	mov    ebx,0xe
c0007e24:	e9 ff 03 00 00       	jmp    c0008228 <f_mkfs+0x10ce>
c0007e29:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007e2e:	31 d2                	xor    edx,edx
c0007e30:	b9 00 02 00 00       	mov    ecx,0x200
c0007e35:	89 e8                	mov    eax,ebp
c0007e37:	e8 a2 9c ff ff       	call   c0001ade <mem_set>
c0007e3c:	b9 0b 00 00 00       	mov    ecx,0xb
c0007e41:	ba 22 8a 02 c0       	mov    edx,0xc0028a22
c0007e46:	89 e8                	mov    eax,ebp
c0007e48:	e8 7c 9c ff ff       	call   c0001ac9 <mem_cpy>
c0007e4d:	8d 45 0b             	lea    eax,[ebp+0xb]
c0007e50:	ba 00 02 00 00       	mov    edx,0x200
c0007e55:	e8 62 9c ff ff       	call   c0001abc <st_word>
c0007e5a:	89 f8                	mov    eax,edi
c0007e5c:	0f b7 d6             	movzx  edx,si
c0007e5f:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0007e62:	8d 45 0e             	lea    eax,[ebp+0xe]
c0007e65:	e8 52 9c ff ff       	call   c0001abc <st_word>
c0007e6a:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0007e6e:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e73:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0007e76:	75 08                	jne    c0007e80 <f_mkfs+0xd26>
c0007e78:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007e80:	8d 45 11             	lea    eax,[ebp+0x11]
c0007e83:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007e87:	e8 30 9c ff ff       	call   c0001abc <st_word>
c0007e8c:	b8 ff ff 00 00       	mov    eax,0xffff
c0007e91:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007e95:	39 d0                	cmp    eax,edx
c0007e97:	b8 00 00 00 00       	mov    eax,0x0
c0007e9c:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0007ea0:	72 0a                	jb     c0007eac <f_mkfs+0xd52>
c0007ea2:	8d 45 13             	lea    eax,[ebp+0x13]
c0007ea5:	e8 12 9c ff ff       	call   c0001abc <st_word>
c0007eaa:	eb 08                	jmp    c0007eb4 <f_mkfs+0xd5a>
c0007eac:	8d 45 20             	lea    eax,[ebp+0x20]
c0007eaf:	e8 0c 9c ff ff       	call   c0001ac0 <st_dword>
c0007eb4:	8d 45 18             	lea    eax,[ebp+0x18]
c0007eb7:	ba 3f 00 00 00       	mov    edx,0x3f
c0007ebc:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0007ec0:	e8 f7 9b ff ff       	call   c0001abc <st_word>
c0007ec5:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0007ec8:	ba ff 00 00 00       	mov    edx,0xff
c0007ecd:	e8 ea 9b ff ff       	call   c0001abc <st_word>
c0007ed2:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0007ed5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007ed9:	e8 e2 9b ff ff       	call   c0001ac0 <st_dword>
c0007ede:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ee3:	75 57                	jne    c0007f3c <f_mkfs+0xde2>
c0007ee5:	8d 45 43             	lea    eax,[ebp+0x43]
c0007ee8:	ba 00 00 21 50       	mov    edx,0x50210000
c0007eed:	e8 ce 9b ff ff       	call   c0001ac0 <st_dword>
c0007ef2:	8d 45 24             	lea    eax,[ebp+0x24]
c0007ef5:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ef9:	e8 c2 9b ff ff       	call   c0001ac0 <st_dword>
c0007efe:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0007f01:	ba 02 00 00 00       	mov    edx,0x2
c0007f06:	e8 b5 9b ff ff       	call   c0001ac0 <st_dword>
c0007f0b:	8d 45 30             	lea    eax,[ebp+0x30]
c0007f0e:	ba 01 00 00 00       	mov    edx,0x1
c0007f13:	e8 a4 9b ff ff       	call   c0001abc <st_word>
c0007f18:	8d 45 32             	lea    eax,[ebp+0x32]
c0007f1b:	ba 06 00 00 00       	mov    edx,0x6
c0007f20:	e8 97 9b ff ff       	call   c0001abc <st_word>
c0007f25:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0007f29:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0007f2d:	8d 45 47             	lea    eax,[ebp+0x47]
c0007f30:	b9 13 00 00 00       	mov    ecx,0x13
c0007f35:	ba 2e 8a 02 c0       	mov    edx,0xc0028a2e
c0007f3a:	eb 2f                	jmp    c0007f6b <f_mkfs+0xe11>
c0007f3c:	8d 45 27             	lea    eax,[ebp+0x27]
c0007f3f:	ba 00 00 21 50       	mov    edx,0x50210000
c0007f44:	e8 77 9b ff ff       	call   c0001ac0 <st_dword>
c0007f49:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0007f4e:	8d 45 16             	lea    eax,[ebp+0x16]
c0007f51:	e8 66 9b ff ff       	call   c0001abc <st_word>
c0007f56:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0007f5a:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0007f5e:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0007f61:	b9 13 00 00 00       	mov    ecx,0x13
c0007f66:	ba 42 8a 02 c0       	mov    edx,0xc0028a42
c0007f6b:	e8 59 9b ff ff       	call   c0001ac9 <mem_cpy>
c0007f70:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0007f76:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007f7b:	89 f0                	mov    eax,esi
c0007f7d:	e8 3a 9b ff ff       	call   c0001abc <st_word>
c0007f82:	83 ec 0c             	sub    esp,0xc
c0007f85:	6a 01                	push   0x1
c0007f87:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f8b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f8f:	55                   	push   ebp
c0007f90:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f94:	e8 7c 9a ff ff       	call   c0001a15 <disk_write>
c0007f99:	83 c4 20             	add    esp,0x20
c0007f9c:	85 c0                	test   eax,eax
c0007f9e:	0f 85 67 02 00 00    	jne    c000820b <f_mkfs+0x10b1>
c0007fa4:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007fa9:	0f 85 b7 00 00 00    	jne    c0008066 <f_mkfs+0xf0c>
c0007faf:	83 ec 0c             	sub    esp,0xc
c0007fb2:	6a 01                	push   0x1
c0007fb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007fb8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007fbc:	83 c0 06             	add    eax,0x6
c0007fbf:	83 d2 00             	adc    edx,0x0
c0007fc2:	52                   	push   edx
c0007fc3:	50                   	push   eax
c0007fc4:	55                   	push   ebp
c0007fc5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007fc9:	e8 47 9a ff ff       	call   c0001a15 <disk_write>
c0007fce:	83 c4 20             	add    esp,0x20
c0007fd1:	b9 00 02 00 00       	mov    ecx,0x200
c0007fd6:	31 d2                	xor    edx,edx
c0007fd8:	89 e8                	mov    eax,ebp
c0007fda:	e8 ff 9a ff ff       	call   c0001ade <mem_set>
c0007fdf:	ba 52 52 61 41       	mov    edx,0x41615252
c0007fe4:	89 e8                	mov    eax,ebp
c0007fe6:	e8 d5 9a ff ff       	call   c0001ac0 <st_dword>
c0007feb:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0007ff1:	ba 72 72 41 61       	mov    edx,0x61417272
c0007ff6:	e8 c5 9a ff ff       	call   c0001ac0 <st_dword>
c0007ffb:	8d 53 ff             	lea    edx,[ebx-0x1]
c0007ffe:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0008004:	e8 b7 9a ff ff       	call   c0001ac0 <st_dword>
c0008009:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c000800f:	ba 02 00 00 00       	mov    edx,0x2
c0008014:	e8 a7 9a ff ff       	call   c0001ac0 <st_dword>
c0008019:	ba 55 aa 00 00       	mov    edx,0xaa55
c000801e:	89 f0                	mov    eax,esi
c0008020:	e8 97 9a ff ff       	call   c0001abc <st_word>
c0008025:	83 ec 0c             	sub    esp,0xc
c0008028:	6a 01                	push   0x1
c000802a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000802e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008032:	83 c0 07             	add    eax,0x7
c0008035:	83 d2 00             	adc    edx,0x0
c0008038:	52                   	push   edx
c0008039:	50                   	push   eax
c000803a:	55                   	push   ebp
c000803b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000803f:	e8 d1 99 ff ff       	call   c0001a15 <disk_write>
c0008044:	83 c4 14             	add    esp,0x14
c0008047:	6a 01                	push   0x1
c0008049:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000804d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008051:	83 c0 01             	add    eax,0x1
c0008054:	83 d2 00             	adc    edx,0x0
c0008057:	52                   	push   edx
c0008058:	50                   	push   eax
c0008059:	55                   	push   ebp
c000805a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000805e:	e8 b2 99 ff ff       	call   c0001a15 <disk_write>
c0008063:	83 c4 20             	add    esp,0x20
c0008066:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c000806d:	31 d2                	xor    edx,edx
c000806f:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0008075:	31 db                	xor    ebx,ebx
c0008077:	89 e8                	mov    eax,ebp
c0008079:	e8 60 9a ff ff       	call   c0001ade <mem_set>
c000807e:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0008083:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000808a:	0f 94 c3             	sete   bl
c000808d:	4b                   	dec    ebx
c000808e:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c0008094:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c000809a:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000809f:	75 21                	jne    c00080c2 <f_mkfs+0xf68>
c00080a1:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00080a6:	89 e8                	mov    eax,ebp
c00080a8:	e8 13 9a ff ff       	call   c0001ac0 <st_dword>
c00080ad:	8d 45 04             	lea    eax,[ebp+0x4]
c00080b0:	83 ca ff             	or     edx,0xffffffff
c00080b3:	e8 08 9a ff ff       	call   c0001ac0 <st_dword>
c00080b8:	8d 45 08             	lea    eax,[ebp+0x8]
c00080bb:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00080c0:	eb 04                	jmp    c00080c6 <f_mkfs+0xf6c>
c00080c2:	89 da                	mov    edx,ebx
c00080c4:	89 e8                	mov    eax,ebp
c00080c6:	e8 f5 99 ff ff       	call   c0001ac0 <st_dword>
c00080cb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00080cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00080d3:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00080d7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00080db:	39 ce                	cmp    esi,ecx
c00080dd:	76 02                	jbe    c00080e1 <f_mkfs+0xf87>
c00080df:	89 ce                	mov    esi,ecx
c00080e1:	83 ec 0c             	sub    esp,0xc
c00080e4:	56                   	push   esi
c00080e5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080e9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080ed:	55                   	push   ebp
c00080ee:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00080f2:	e8 1e 99 ff ff       	call   c0001a15 <disk_write>
c00080f7:	83 c4 20             	add    esp,0x20
c00080fa:	85 c0                	test   eax,eax
c00080fc:	0f 85 09 01 00 00    	jne    c000820b <f_mkfs+0x10b1>
c0008102:	31 d2                	xor    edx,edx
c0008104:	b9 00 02 00 00       	mov    ecx,0x200
c0008109:	89 e8                	mov    eax,ebp
c000810b:	e8 ce 99 ff ff       	call   c0001ade <mem_set>
c0008110:	31 d2                	xor    edx,edx
c0008112:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c0008116:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000811a:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000811e:	75 b3                	jne    c00080d3 <f_mkfs+0xf79>
c0008120:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008123:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000812a:	40                   	inc    eax
c000812b:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c000812f:	0f 87 65 ff ff ff    	ja     c000809a <f_mkfs+0xf40>
c0008135:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000813a:	74 04                	je     c0008140 <f_mkfs+0xfe6>
c000813c:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008140:	89 fb                	mov    ebx,edi
c0008142:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008146:	76 04                	jbe    c000814c <f_mkfs+0xff2>
c0008148:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000814c:	83 ec 0c             	sub    esp,0xc
c000814f:	53                   	push   ebx
c0008150:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008154:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008158:	55                   	push   ebp
c0008159:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000815d:	e8 b3 98 ff ff       	call   c0001a15 <disk_write>
c0008162:	83 c4 20             	add    esp,0x20
c0008165:	85 c0                	test   eax,eax
c0008167:	0f 85 9e 00 00 00    	jne    c000820b <f_mkfs+0x10b1>
c000816d:	31 d2                	xor    edx,edx
c000816f:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008173:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008177:	29 df                	sub    edi,ebx
c0008179:	75 c5                	jne    c0008140 <f_mkfs+0xfe6>
c000817b:	b1 0c                	mov    cl,0xc
c000817d:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008182:	74 1d                	je     c00081a1 <f_mkfs+0x1047>
c0008184:	b8 ff ff 00 00       	mov    eax,0xffff
c0008189:	b1 06                	mov    cl,0x6
c000818b:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c000818f:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c0008193:	72 0c                	jb     c00081a1 <f_mkfs+0x1047>
c0008195:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c000819a:	0f 94 c1             	sete   cl
c000819d:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00081a1:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00081a6:	75 4c                	jne    c00081f4 <f_mkfs+0x109a>
c00081a8:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00081ac:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00081b0:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00081b7:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00081be:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00081c9:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00081d4:	0f b6 c9             	movzx  ecx,cl
c00081d7:	83 ec 0c             	sub    esp,0xc
c00081da:	55                   	push   ebp
c00081db:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00081e2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00081e6:	e8 2f c2 ff ff       	call   c000441a <create_partition>
c00081eb:	83 c4 10             	add    esp,0x10
c00081ee:	89 c3                	mov    ebx,eax
c00081f0:	85 c0                	test   eax,eax
c00081f2:	75 34                	jne    c0008228 <f_mkfs+0x10ce>
c00081f4:	31 db                	xor    ebx,ebx
c00081f6:	50                   	push   eax
c00081f7:	6a 00                	push   0x0
c00081f9:	6a 00                	push   0x0
c00081fb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00081ff:	e8 27 98 ff ff       	call   c0001a2b <disk_ioctl>
c0008204:	83 c4 10             	add    esp,0x10
c0008207:	85 c0                	test   eax,eax
c0008209:	74 1d                	je     c0008228 <f_mkfs+0x10ce>
c000820b:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008213:	75 0c                	jne    c0008221 <f_mkfs+0x10c7>
c0008215:	83 ec 0c             	sub    esp,0xc
c0008218:	55                   	push   ebp
c0008219:	e8 75 00 00 00       	call   c0008293 <ff_memfree>
c000821e:	83 c4 10             	add    esp,0x10
c0008221:	bb 01 00 00 00       	mov    ebx,0x1
c0008226:	eb 48                	jmp    c0008270 <f_mkfs+0x1116>
c0008228:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008230:	75 3e                	jne    c0008270 <f_mkfs+0x1116>
c0008232:	83 ec 0c             	sub    esp,0xc
c0008235:	55                   	push   ebp
c0008236:	e8 58 00 00 00       	call   c0008293 <ff_memfree>
c000823b:	83 c4 10             	add    esp,0x10
c000823e:	eb 30                	jmp    c0008270 <f_mkfs+0x1116>
c0008240:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008245:	0f 85 eb fa ff ff    	jne    c0007d36 <f_mkfs+0xbdc>
c000824b:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000824f:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008255:	0f 86 b8 f9 ff ff    	jbe    c0007c13 <f_mkfs+0xab9>
c000825b:	e9 bf fb ff ff       	jmp    c0007e1f <f_mkfs+0xcc5>
c0008260:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008265:	0f 85 c0 fa ff ff    	jne    c0007d2b <f_mkfs+0xbd1>
c000826b:	e9 af fb ff ff       	jmp    c0007e1f <f_mkfs+0xcc5>
c0008270:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008276:	89 d8                	mov    eax,ebx
c0008278:	5b                   	pop    ebx
c0008279:	5e                   	pop    esi
c000827a:	5f                   	pop    edi
c000827b:	5d                   	pop    ebp
c000827c:	c3                   	ret    

c000827d <ff_memalloc>:
c000827d:	83 ec 0c             	sub    esp,0xc
c0008280:	83 ec 0c             	sub    esp,0xc
c0008283:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008287:	e8 98 73 00 00       	call   c000f624 <malloc>
c000828c:	83 c4 10             	add    esp,0x10
c000828f:	83 c4 0c             	add    esp,0xc
c0008292:	c3                   	ret    

c0008293 <ff_memfree>:
c0008293:	83 ec 0c             	sub    esp,0xc
c0008296:	83 ec 0c             	sub    esp,0xc
c0008299:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000829d:	e8 92 73 00 00       	call   c000f634 <free>
c00082a2:	83 c4 10             	add    esp,0x10
c00082a5:	90                   	nop
c00082a6:	83 c4 0c             	add    esp,0xc
c00082a9:	c3                   	ret    

c00082aa <ff_uni2oem>:
c00082aa:	83 ec 14             	sub    esp,0x14
c00082ad:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00082b1:	66 89 04 24          	mov    WORD PTR [esp],ax
c00082b5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00082bc:	c7 44 24 0c 60 8d 02 c0 	mov    DWORD PTR [esp+0xc],0xc0028d60
c00082c4:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00082c9:	77 0b                	ja     c00082d6 <ff_uni2oem+0x2c>
c00082cb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00082cf:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082d4:	eb 5b                	jmp    c0008331 <ff_uni2oem+0x87>
c00082d6:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00082de:	77 51                	ja     c0008331 <ff_uni2oem+0x87>
c00082e0:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00082e6:	75 49                	jne    c0008331 <ff_uni2oem+0x87>
c00082e8:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00082ef:	eb 0b                	jmp    c00082fc <ff_uni2oem+0x52>
c00082f1:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082f6:	40                   	inc    eax
c00082f7:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082fc:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008302:	77 1b                	ja     c000831f <ff_uni2oem+0x75>
c0008304:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008309:	01 c0                	add    eax,eax
c000830b:	89 c2                	mov    edx,eax
c000830d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008311:	01 d0                	add    eax,edx
c0008313:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008316:	0f b7 c0             	movzx  eax,ax
c0008319:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000831d:	75 d2                	jne    c00082f1 <ff_uni2oem+0x47>
c000831f:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008324:	83 e8 80             	sub    eax,0xffffff80
c0008327:	25 ff 00 00 00       	and    eax,0xff
c000832c:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008331:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008336:	83 c4 14             	add    esp,0x14
c0008339:	c3                   	ret    

c000833a <ff_oem2uni>:
c000833a:	83 ec 18             	sub    esp,0x18
c000833d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008341:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008345:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000834a:	66 89 04 24          	mov    WORD PTR [esp],ax
c000834e:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008355:	c7 44 24 10 60 8d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0028d60
c000835d:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008363:	77 0b                	ja     c0008370 <ff_oem2uni+0x36>
c0008365:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008369:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000836e:	eb 2d                	jmp    c000839d <ff_oem2uni+0x63>
c0008370:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008376:	75 25                	jne    c000839d <ff_oem2uni+0x63>
c0008378:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c000837f:	77 1c                	ja     c000839d <ff_oem2uni+0x63>
c0008381:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008386:	05 80 ff ff 7f       	add    eax,0x7fffff80
c000838b:	01 c0                	add    eax,eax
c000838d:	89 c2                	mov    edx,eax
c000838f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008393:	01 d0                	add    eax,edx
c0008395:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008398:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000839d:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00083a2:	83 c4 18             	add    esp,0x18
c00083a5:	c3                   	ret    

c00083a6 <ff_wtoupper>:
c00083a6:	83 ec 10             	sub    esp,0x10
c00083a9:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00083b1:	0f 87 3e 01 00 00    	ja     c00084f5 <ff_wtoupper+0x14f>
c00083b7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00083bb:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00083c0:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00083c7:	77 07                	ja     c00083d0 <ff_wtoupper+0x2a>
c00083c9:	b8 60 8b 02 c0       	mov    eax,0xc0028b60
c00083ce:	eb 05                	jmp    c00083d5 <ff_wtoupper+0x2f>
c00083d0:	b8 a0 8a 02 c0       	mov    eax,0xc0028aa0
c00083d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00083d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083dd:	8d 50 02             	lea    edx,[eax+0x2]
c00083e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083e4:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083e7:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00083ec:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00083f2:	0f 84 f4 00 00 00    	je     c00084ec <ff_wtoupper+0x146>
c00083f8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00083fd:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008402:	0f 82 e4 00 00 00    	jb     c00084ec <ff_wtoupper+0x146>
c0008408:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000840c:	8d 50 02             	lea    edx,[eax+0x2]
c000840f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008413:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008416:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000841b:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008420:	66 c1 e8 08          	shr    ax,0x8
c0008424:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008429:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008430:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008435:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c000843a:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000843f:	01 ca                	add    edx,ecx
c0008441:	39 d0                	cmp    eax,edx
c0008443:	0f 8d 86 00 00 00    	jge    c00084cf <ff_wtoupper+0x129>
c0008449:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000844e:	83 f8 08             	cmp    eax,0x8
c0008451:	0f 87 94 00 00 00    	ja     c00084eb <ff_wtoupper+0x145>
c0008457:	8b 04 85 60 8a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd75a0]
c000845e:	ff e0                	jmp    eax
c0008460:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0008465:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000846a:	29 c2                	sub    edx,eax
c000846c:	89 d0                	mov    eax,edx
c000846e:	01 c0                	add    eax,eax
c0008470:	89 c2                	mov    edx,eax
c0008472:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008476:	01 d0                	add    eax,edx
c0008478:	66 8b 00             	mov    ax,WORD PTR [eax]
c000847b:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008480:	eb 4b                	jmp    c00084cd <ff_wtoupper+0x127>
c0008482:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008487:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000848b:	83 e0 01             	and    eax,0x1
c000848e:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0008493:	eb 38                	jmp    c00084cd <ff_wtoupper+0x127>
c0008495:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c000849b:	eb 30                	jmp    c00084cd <ff_wtoupper+0x127>
c000849d:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00084a3:	eb 28                	jmp    c00084cd <ff_wtoupper+0x127>
c00084a5:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00084ab:	eb 20                	jmp    c00084cd <ff_wtoupper+0x127>
c00084ad:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00084b3:	eb 18                	jmp    c00084cd <ff_wtoupper+0x127>
c00084b5:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00084bb:	eb 10                	jmp    c00084cd <ff_wtoupper+0x127>
c00084bd:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00084c3:	eb 08                	jmp    c00084cd <ff_wtoupper+0x127>
c00084c5:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00084cc:	90                   	nop
c00084cd:	eb 1c                	jmp    c00084eb <ff_wtoupper+0x145>
c00084cf:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00084d5:	0f 85 fe fe ff ff    	jne    c00083d9 <ff_wtoupper+0x33>
c00084db:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00084e0:	01 c0                	add    eax,eax
c00084e2:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00084e6:	e9 ee fe ff ff       	jmp    c00083d9 <ff_wtoupper+0x33>
c00084eb:	90                   	nop
c00084ec:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00084f1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00084f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084f9:	83 c4 10             	add    esp,0x10
c00084fc:	c3                   	ret    

c00084fd <psrc_set_converter>:
c00084fd:	56                   	push   esi
c00084fe:	89 d6                	mov    esi,edx
c0008500:	53                   	push   ebx
c0008501:	89 c3                	mov    ebx,eax
c0008503:	83 ec 0c             	sub    esp,0xc
c0008506:	52                   	push   edx
c0008507:	50                   	push   eax
c0008508:	e8 6f 55 00 00       	call   c000da7c <sinc_set_converter>
c000850d:	83 c4 10             	add    esp,0x10
c0008510:	85 c0                	test   eax,eax
c0008512:	74 25                	je     c0008539 <psrc_set_converter+0x3c>
c0008514:	50                   	push   eax
c0008515:	50                   	push   eax
c0008516:	56                   	push   esi
c0008517:	53                   	push   ebx
c0008518:	e8 17 5d 00 00       	call   c000e234 <zoh_set_converter>
c000851d:	83 c4 10             	add    esp,0x10
c0008520:	85 c0                	test   eax,eax
c0008522:	74 15                	je     c0008539 <psrc_set_converter+0x3c>
c0008524:	51                   	push   ecx
c0008525:	51                   	push   ecx
c0008526:	56                   	push   esi
c0008527:	53                   	push   ebx
c0008528:	e8 0f 11 00 00       	call   c000963c <linear_set_converter>
c000852d:	83 c4 10             	add    esp,0x10
c0008530:	ba 0a 00 00 00       	mov    edx,0xa
c0008535:	85 c0                	test   eax,eax
c0008537:	75 02                	jne    c000853b <psrc_set_converter+0x3e>
c0008539:	31 d2                	xor    edx,edx
c000853b:	89 d0                	mov    eax,edx
c000853d:	5a                   	pop    edx
c000853e:	5b                   	pop    ebx
c000853f:	5e                   	pop    esi
c0008540:	c3                   	ret    

c0008541 <src_delete>:
c0008541:	53                   	push   ebx
c0008542:	83 ec 08             	sub    esp,0x8
c0008545:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008549:	85 db                	test   ebx,ebx
c000854b:	74 29                	je     c0008576 <src_delete+0x35>
c000854d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008550:	85 c0                	test   eax,eax
c0008552:	74 0c                	je     c0008560 <src_delete+0x1f>
c0008554:	83 ec 0c             	sub    esp,0xc
c0008557:	50                   	push   eax
c0008558:	e8 d7 70 00 00       	call   c000f634 <free>
c000855d:	83 c4 10             	add    esp,0x10
c0008560:	50                   	push   eax
c0008561:	6a 3c                	push   0x3c
c0008563:	6a 00                	push   0x0
c0008565:	53                   	push   ebx
c0008566:	e8 59 81 ff ff       	call   c00006c4 <memset>
c000856b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000856e:	e8 c1 70 00 00       	call   c000f634 <free>
c0008573:	83 c4 10             	add    esp,0x10
c0008576:	31 c0                	xor    eax,eax
c0008578:	83 c4 08             	add    esp,0x8
c000857b:	5b                   	pop    ebx
c000857c:	c3                   	ret    

c000857d <src_process>:
c000857d:	55                   	push   ebp
c000857e:	57                   	push   edi
c000857f:	56                   	push   esi
c0008580:	53                   	push   ebx
c0008581:	83 ec 1c             	sub    esp,0x1c
c0008584:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008588:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000858c:	85 ed                	test   ebp,ebp
c000858e:	0f 84 6f 01 00 00    	je     c0008703 <src_process+0x186>
c0008594:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c0008598:	0f 84 6c 01 00 00    	je     c000870a <src_process+0x18d>
c000859e:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00085a2:	0f 84 62 01 00 00    	je     c000870a <src_process+0x18d>
c00085a8:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00085af:	0f 85 5c 01 00 00    	jne    c0008711 <src_process+0x194>
c00085b5:	85 db                	test   ebx,ebx
c00085b7:	0f 84 5b 01 00 00    	je     c0008718 <src_process+0x19b>
c00085bd:	8b 33                	mov    esi,DWORD PTR [ebx]
c00085bf:	85 f6                	test   esi,esi
c00085c1:	0f 84 58 01 00 00    	je     c000871f <src_process+0x1a2>
c00085c7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00085ca:	85 ff                	test   edi,edi
c00085cc:	0f 84 4d 01 00 00    	je     c000871f <src_process+0x1a2>
c00085d2:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00085d5:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00085d8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00085dc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085e0:	68 00 00 70 3f       	push   0x3f700000
c00085e5:	6a 00                	push   0x0
c00085e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085ef:	e8 2b f4 01 00       	call   c0027a1f <__ltdf2>
c00085f4:	83 c4 10             	add    esp,0x10
c00085f7:	85 c0                	test   eax,eax
c00085f9:	0f 88 27 01 00 00    	js     c0008726 <src_process+0x1a9>
c00085ff:	68 00 00 70 40       	push   0x40700000
c0008604:	6a 00                	push   0x0
c0008606:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000860a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000860e:	e8 ee f3 01 00       	call   c0027a01 <__gtdf2>
c0008613:	83 c4 10             	add    esp,0x10
c0008616:	85 c0                	test   eax,eax
c0008618:	0f 8f 08 01 00 00    	jg     c0008726 <src_process+0x1a9>
c000861e:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008622:	79 07                	jns    c000862b <src_process+0xae>
c0008624:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000862b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000862e:	85 c0                	test   eax,eax
c0008630:	79 50                	jns    c0008682 <src_process+0x105>
c0008632:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008639:	39 fe                	cmp    esi,edi
c000863b:	72 37                	jb     c0008674 <src_process+0xf7>
c000863d:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008644:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000864b:	68 00 00 70 3f       	push   0x3f700000
c0008650:	6a 00                	push   0x0
c0008652:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008655:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008658:	e8 c2 f3 01 00       	call   c0027a1f <__ltdf2>
c000865d:	83 c4 10             	add    esp,0x10
c0008660:	85 c0                	test   eax,eax
c0008662:	79 37                	jns    c000869b <src_process+0x11e>
c0008664:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008668:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000866c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000866f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008672:	eb 27                	jmp    c000869b <src_process+0x11e>
c0008674:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008677:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c000867b:	8d 04 86             	lea    eax,[esi+eax*4]
c000867e:	39 c7                	cmp    edi,eax
c0008680:	eb 0d                	jmp    c000868f <src_process+0x112>
c0008682:	39 fe                	cmp    esi,edi
c0008684:	72 ee                	jb     c0008674 <src_process+0xf7>
c0008686:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c000868a:	8d 04 87             	lea    eax,[edi+eax*4]
c000868d:	39 c6                	cmp    esi,eax
c000868f:	73 ac                	jae    c000863d <src_process+0xc0>
c0008691:	b8 10 00 00 00       	mov    eax,0x10
c0008696:	e9 90 00 00 00       	jmp    c000872b <src_process+0x1ae>
c000869b:	83 ec 10             	sub    esp,0x10
c000869e:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00086a1:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00086a4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00086a7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00086aa:	e8 75 ea 01 00       	call   c0027124 <__subdf3>
c00086af:	83 c4 18             	add    esp,0x18
c00086b2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00086b6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00086ba:	52                   	push   edx
c00086bb:	50                   	push   eax
c00086bc:	e8 ef f4 01 00       	call   c0027bb0 <fabs>
c00086c1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00086c5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00086c9:	83 c4 10             	add    esp,0x10
c00086cc:	68 af 03 d2 3c       	push   0x3cd203af
c00086d1:	68 16 56 e7 9e       	push   0x9ee75616
c00086d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00086da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00086de:	e8 3c f3 01 00       	call   c0027a1f <__ltdf2>
c00086e3:	83 c4 10             	add    esp,0x10
c00086e6:	85 c0                	test   eax,eax
c00086e8:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00086ec:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00086f0:	79 05                	jns    c00086f7 <src_process+0x17a>
c00086f2:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c00086f5:	eb 03                	jmp    c00086fa <src_process+0x17d>
c00086f7:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00086fa:	83 c4 1c             	add    esp,0x1c
c00086fd:	5b                   	pop    ebx
c00086fe:	5e                   	pop    esi
c00086ff:	5f                   	pop    edi
c0008700:	5d                   	pop    ebp
c0008701:	ff e0                	jmp    eax
c0008703:	b8 02 00 00 00       	mov    eax,0x2
c0008708:	eb 21                	jmp    c000872b <src_process+0x1ae>
c000870a:	b8 07 00 00 00       	mov    eax,0x7
c000870f:	eb 1a                	jmp    c000872b <src_process+0x1ae>
c0008711:	b8 12 00 00 00       	mov    eax,0x12
c0008716:	eb 13                	jmp    c000872b <src_process+0x1ae>
c0008718:	b8 03 00 00 00       	mov    eax,0x3
c000871d:	eb 0c                	jmp    c000872b <src_process+0x1ae>
c000871f:	b8 04 00 00 00       	mov    eax,0x4
c0008724:	eb 05                	jmp    c000872b <src_process+0x1ae>
c0008726:	b8 06 00 00 00       	mov    eax,0x6
c000872b:	83 c4 1c             	add    esp,0x1c
c000872e:	5b                   	pop    ebx
c000872f:	5e                   	pop    esi
c0008730:	5f                   	pop    edi
c0008731:	5d                   	pop    ebp
c0008732:	c3                   	ret    

c0008733 <src_callback_read>:
c0008733:	55                   	push   ebp
c0008734:	57                   	push   edi
c0008735:	56                   	push   esi
c0008736:	53                   	push   ebx
c0008737:	83 ec 3c             	sub    esp,0x3c
c000873a:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000873e:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008742:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008746:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c000874a:	85 ed                	test   ebp,ebp
c000874c:	0f 8e 52 01 00 00    	jle    c00088a4 <src_callback_read+0x171>
c0008752:	85 db                	test   ebx,ebx
c0008754:	0f 84 4a 01 00 00    	je     c00088a4 <src_callback_read+0x171>
c000875a:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008761:	74 0c                	je     c000876f <src_callback_read+0x3c>
c0008763:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c000876a:	e9 35 01 00 00       	jmp    c00088a4 <src_callback_read+0x171>
c000876f:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008773:	75 0c                	jne    c0008781 <src_callback_read+0x4e>
c0008775:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c000877c:	e9 23 01 00 00       	jmp    c00088a4 <src_callback_read+0x171>
c0008781:	51                   	push   ecx
c0008782:	6a 24                	push   0x24
c0008784:	6a 00                	push   0x0
c0008786:	8d 44 24 18          	lea    eax,[esp+0x18]
c000878a:	50                   	push   eax
c000878b:	e8 34 7f ff ff       	call   c00006c4 <memset>
c0008790:	83 c4 10             	add    esp,0x10
c0008793:	68 00 00 70 3f       	push   0x3f700000
c0008798:	6a 00                	push   0x0
c000879a:	57                   	push   edi
c000879b:	56                   	push   esi
c000879c:	e8 7e f2 01 00       	call   c0027a1f <__ltdf2>
c00087a1:	83 c4 10             	add    esp,0x10
c00087a4:	85 c0                	test   eax,eax
c00087a6:	78 3e                	js     c00087e6 <src_callback_read+0xb3>
c00087a8:	68 00 00 70 40       	push   0x40700000
c00087ad:	6a 00                	push   0x0
c00087af:	57                   	push   edi
c00087b0:	56                   	push   esi
c00087b1:	e8 4b f2 01 00       	call   c0027a01 <__gtdf2>
c00087b6:	83 c4 10             	add    esp,0x10
c00087b9:	85 c0                	test   eax,eax
c00087bb:	7f 29                	jg     c00087e6 <src_callback_read+0xb3>
c00087bd:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00087c1:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00087c5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00087c9:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00087cd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00087d0:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00087d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00087d8:	31 f6                	xor    esi,esi
c00087da:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00087dd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00087e1:	e9 97 00 00 00       	jmp    c000887d <src_callback_read+0x14a>
c00087e6:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00087ed:	e9 b2 00 00 00       	jmp    c00088a4 <src_callback_read+0x171>
c00087f2:	8d 44 24 04          	lea    eax,[esp+0x4]
c00087f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087fa:	52                   	push   edx
c00087fb:	52                   	push   edx
c00087fc:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008800:	50                   	push   eax
c0008801:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008804:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008807:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000880b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000880f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008813:	83 c4 10             	add    esp,0x10
c0008816:	85 c0                	test   eax,eax
c0008818:	75 08                	jne    c0008822 <src_callback_read+0xef>
c000881a:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008822:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008829:	50                   	push   eax
c000882a:	50                   	push   eax
c000882b:	8d 44 24 14          	lea    eax,[esp+0x14]
c000882f:	50                   	push   eax
c0008830:	53                   	push   ebx
c0008831:	e8 47 fd ff ff       	call   c000857d <src_process>
c0008836:	83 c4 10             	add    esp,0x10
c0008839:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008840:	85 c0                	test   eax,eax
c0008842:	75 49                	jne    c000888d <src_callback_read+0x15a>
c0008844:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008848:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000884b:	89 f9                	mov    ecx,edi
c000884d:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008851:	0f af ca             	imul   ecx,edx
c0008854:	c1 e1 02             	shl    ecx,0x2
c0008857:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c000885b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000885f:	0f af d1             	imul   edx,ecx
c0008862:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008866:	c1 e2 02             	shl    edx,0x2
c0008869:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c000886d:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008870:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008875:	74 12                	je     c0008889 <src_callback_read+0x156>
c0008877:	39 d5                	cmp    ebp,edx
c0008879:	7e 14                	jle    c000888f <src_callback_read+0x15c>
c000887b:	89 d6                	mov    esi,edx
c000887d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008882:	75 9e                	jne    c0008822 <src_callback_read+0xef>
c0008884:	e9 69 ff ff ff       	jmp    c00087f2 <src_callback_read+0xbf>
c0008889:	85 c9                	test   ecx,ecx
c000888b:	75 ea                	jne    c0008877 <src_callback_read+0x144>
c000888d:	89 f2                	mov    edx,esi
c000888f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008893:	85 c0                	test   eax,eax
c0008895:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008898:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000889c:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000889f:	74 05                	je     c00088a6 <src_callback_read+0x173>
c00088a1:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00088a4:	31 d2                	xor    edx,edx
c00088a6:	83 c4 3c             	add    esp,0x3c
c00088a9:	89 d0                	mov    eax,edx
c00088ab:	5b                   	pop    ebx
c00088ac:	5e                   	pop    esi
c00088ad:	5f                   	pop    edi
c00088ae:	5d                   	pop    ebp
c00088af:	c3                   	ret    

c00088b0 <src_set_ratio>:
c00088b0:	57                   	push   edi
c00088b1:	ba 02 00 00 00       	mov    edx,0x2
c00088b6:	56                   	push   esi
c00088b7:	53                   	push   ebx
c00088b8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088bc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00088c0:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00088c4:	85 db                	test   ebx,ebx
c00088c6:	74 4c                	je     c0008914 <src_set_ratio+0x64>
c00088c8:	ba 07 00 00 00       	mov    edx,0x7
c00088cd:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c00088d1:	74 41                	je     c0008914 <src_set_ratio+0x64>
c00088d3:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c00088d7:	74 3b                	je     c0008914 <src_set_ratio+0x64>
c00088d9:	68 00 00 70 3f       	push   0x3f700000
c00088de:	6a 00                	push   0x0
c00088e0:	57                   	push   edi
c00088e1:	56                   	push   esi
c00088e2:	e8 38 f1 01 00       	call   c0027a1f <__ltdf2>
c00088e7:	83 c4 10             	add    esp,0x10
c00088ea:	ba 06 00 00 00       	mov    edx,0x6
c00088ef:	85 c0                	test   eax,eax
c00088f1:	78 21                	js     c0008914 <src_set_ratio+0x64>
c00088f3:	68 00 00 70 40       	push   0x40700000
c00088f8:	6a 00                	push   0x0
c00088fa:	57                   	push   edi
c00088fb:	56                   	push   esi
c00088fc:	e8 00 f1 01 00       	call   c0027a01 <__gtdf2>
c0008901:	83 c4 10             	add    esp,0x10
c0008904:	ba 06 00 00 00       	mov    edx,0x6
c0008909:	85 c0                	test   eax,eax
c000890b:	7f 07                	jg     c0008914 <src_set_ratio+0x64>
c000890d:	89 33                	mov    DWORD PTR [ebx],esi
c000890f:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008912:	31 d2                	xor    edx,edx
c0008914:	5b                   	pop    ebx
c0008915:	89 d0                	mov    eax,edx
c0008917:	5e                   	pop    esi
c0008918:	5f                   	pop    edi
c0008919:	c3                   	ret    

c000891a <src_get_channels>:
c000891a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000891e:	b8 02 00 00 00       	mov    eax,0x2
c0008923:	85 d2                	test   edx,edx
c0008925:	74 14                	je     c000893b <src_get_channels+0x21>
c0008927:	b8 07 00 00 00       	mov    eax,0x7
c000892c:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008930:	74 09                	je     c000893b <src_get_channels+0x21>
c0008932:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008936:	74 03                	je     c000893b <src_get_channels+0x21>
c0008938:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000893b:	c3                   	ret    

c000893c <src_reset>:
c000893c:	53                   	push   ebx
c000893d:	b8 02 00 00 00       	mov    eax,0x2
c0008942:	83 ec 08             	sub    esp,0x8
c0008945:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008949:	85 db                	test   ebx,ebx
c000894b:	74 36                	je     c0008983 <src_reset+0x47>
c000894d:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008950:	85 c0                	test   eax,eax
c0008952:	74 09                	je     c000895d <src_reset+0x21>
c0008954:	83 ec 0c             	sub    esp,0xc
c0008957:	53                   	push   ebx
c0008958:	ff d0                	call   eax
c000895a:	83 c4 10             	add    esp,0x10
c000895d:	31 c0                	xor    eax,eax
c000895f:	31 d2                	xor    edx,edx
c0008961:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008964:	89 03                	mov    DWORD PTR [ebx],eax
c0008966:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008969:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000896c:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008973:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000897a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008981:	31 c0                	xor    eax,eax
c0008983:	83 c4 08             	add    esp,0x8
c0008986:	5b                   	pop    ebx
c0008987:	c3                   	ret    

c0008988 <src_new>:
c0008988:	57                   	push   edi
c0008989:	56                   	push   esi
c000898a:	53                   	push   ebx
c000898b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000898f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008993:	85 f6                	test   esi,esi
c0008995:	74 73                	je     c0008a0a <src_new+0x82>
c0008997:	85 ff                	test   edi,edi
c0008999:	7f 08                	jg     c00089a3 <src_new+0x1b>
c000899b:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c00089a1:	eb 1e                	jmp    c00089c1 <src_new+0x39>
c00089a3:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00089a9:	50                   	push   eax
c00089aa:	50                   	push   eax
c00089ab:	6a 3c                	push   0x3c
c00089ad:	6a 01                	push   0x1
c00089af:	e8 a0 6c 00 00       	call   c000f654 <calloc>
c00089b4:	83 c4 10             	add    esp,0x10
c00089b7:	89 c3                	mov    ebx,eax
c00089b9:	85 c0                	test   eax,eax
c00089bb:	75 10                	jne    c00089cd <src_new+0x45>
c00089bd:	85 f6                	test   esi,esi
c00089bf:	75 04                	jne    c00089c5 <src_new+0x3d>
c00089c1:	31 db                	xor    ebx,ebx
c00089c3:	eb 4b                	jmp    c0008a10 <src_new+0x88>
c00089c5:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00089cb:	eb 43                	jmp    c0008a10 <src_new+0x88>
c00089cd:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00089d0:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c00089d7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00089db:	e8 1d fb ff ff       	call   c00084fd <psrc_set_converter>
c00089e0:	85 c0                	test   eax,eax
c00089e2:	74 18                	je     c00089fc <src_new+0x74>
c00089e4:	85 f6                	test   esi,esi
c00089e6:	74 06                	je     c00089ee <src_new+0x66>
c00089e8:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c00089ee:	83 ec 0c             	sub    esp,0xc
c00089f1:	53                   	push   ebx
c00089f2:	31 db                	xor    ebx,ebx
c00089f4:	e8 3b 6c 00 00       	call   c000f634 <free>
c00089f9:	83 c4 10             	add    esp,0x10
c00089fc:	83 ec 0c             	sub    esp,0xc
c00089ff:	53                   	push   ebx
c0008a00:	e8 37 ff ff ff       	call   c000893c <src_reset>
c0008a05:	83 c4 10             	add    esp,0x10
c0008a08:	eb 06                	jmp    c0008a10 <src_new+0x88>
c0008a0a:	85 ff                	test   edi,edi
c0008a0c:	7f 9b                	jg     c00089a9 <src_new+0x21>
c0008a0e:	eb b1                	jmp    c00089c1 <src_new+0x39>
c0008a10:	89 d8                	mov    eax,ebx
c0008a12:	5b                   	pop    ebx
c0008a13:	5e                   	pop    esi
c0008a14:	5f                   	pop    edi
c0008a15:	c3                   	ret    

c0008a16 <src_callback_new>:
c0008a16:	56                   	push   esi
c0008a17:	53                   	push   ebx
c0008a18:	53                   	push   ebx
c0008a19:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008a1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a21:	85 f6                	test   esi,esi
c0008a23:	75 0e                	jne    c0008a33 <src_callback_new+0x1d>
c0008a25:	31 db                	xor    ebx,ebx
c0008a27:	85 c0                	test   eax,eax
c0008a29:	74 47                	je     c0008a72 <src_callback_new+0x5c>
c0008a2b:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008a31:	eb 3f                	jmp    c0008a72 <src_callback_new+0x5c>
c0008a33:	85 c0                	test   eax,eax
c0008a35:	74 06                	je     c0008a3d <src_callback_new+0x27>
c0008a37:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008a3d:	51                   	push   ecx
c0008a3e:	50                   	push   eax
c0008a3f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008a43:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008a47:	e8 3c ff ff ff       	call   c0008988 <src_new>
c0008a4c:	83 c4 10             	add    esp,0x10
c0008a4f:	89 c3                	mov    ebx,eax
c0008a51:	85 c0                	test   eax,eax
c0008a53:	74 1d                	je     c0008a72 <src_callback_new+0x5c>
c0008a55:	83 ec 0c             	sub    esp,0xc
c0008a58:	50                   	push   eax
c0008a59:	e8 de fe ff ff       	call   c000893c <src_reset>
c0008a5e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008a62:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a69:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008a6c:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008a6f:	83 c4 10             	add    esp,0x10
c0008a72:	89 d8                	mov    eax,ebx
c0008a74:	5a                   	pop    edx
c0008a75:	5b                   	pop    ebx
c0008a76:	5e                   	pop    esi
c0008a77:	c3                   	ret    

c0008a78 <src_get_name>:
c0008a78:	53                   	push   ebx
c0008a79:	83 ec 14             	sub    esp,0x14
c0008a7c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a80:	53                   	push   ebx
c0008a81:	e8 d0 4f 00 00       	call   c000da56 <sinc_get_name>
c0008a86:	83 c4 10             	add    esp,0x10
c0008a89:	85 c0                	test   eax,eax
c0008a8b:	75 1d                	jne    c0008aaa <src_get_name+0x32>
c0008a8d:	83 ec 0c             	sub    esp,0xc
c0008a90:	53                   	push   ebx
c0008a91:	e8 80 57 00 00       	call   c000e216 <zoh_get_name>
c0008a96:	83 c4 10             	add    esp,0x10
c0008a99:	85 c0                	test   eax,eax
c0008a9b:	75 0d                	jne    c0008aaa <src_get_name+0x32>
c0008a9d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008aa1:	83 c4 08             	add    esp,0x8
c0008aa4:	5b                   	pop    ebx
c0008aa5:	e9 74 0b 00 00       	jmp    c000961e <linear_get_name>
c0008aaa:	83 c4 08             	add    esp,0x8
c0008aad:	5b                   	pop    ebx
c0008aae:	c3                   	ret    

c0008aaf <src_get_description>:
c0008aaf:	53                   	push   ebx
c0008ab0:	83 ec 14             	sub    esp,0x14
c0008ab3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008ab7:	53                   	push   ebx
c0008ab8:	e8 ac 4f 00 00       	call   c000da69 <sinc_get_description>
c0008abd:	83 c4 10             	add    esp,0x10
c0008ac0:	85 c0                	test   eax,eax
c0008ac2:	75 1d                	jne    c0008ae1 <src_get_description+0x32>
c0008ac4:	83 ec 0c             	sub    esp,0xc
c0008ac7:	53                   	push   ebx
c0008ac8:	e8 58 57 00 00       	call   c000e225 <zoh_get_description>
c0008acd:	83 c4 10             	add    esp,0x10
c0008ad0:	85 c0                	test   eax,eax
c0008ad2:	75 0d                	jne    c0008ae1 <src_get_description+0x32>
c0008ad4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008ad8:	83 c4 08             	add    esp,0x8
c0008adb:	5b                   	pop    ebx
c0008adc:	e9 4c 0b 00 00       	jmp    c000962d <linear_get_description>
c0008ae1:	83 c4 08             	add    esp,0x8
c0008ae4:	5b                   	pop    ebx
c0008ae5:	c3                   	ret    

c0008ae6 <src_get_version>:
c0008ae6:	b8 60 8e 02 c0       	mov    eax,0xc0028e60
c0008aeb:	c3                   	ret    

c0008aec <src_is_valid_ratio>:
c0008aec:	83 ec 1c             	sub    esp,0x1c
c0008aef:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008af3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008af7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008afb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008aff:	68 00 00 70 3f       	push   0x3f700000
c0008b04:	6a 00                	push   0x0
c0008b06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008b0a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008b0e:	e8 0c ef 01 00       	call   c0027a1f <__ltdf2>
c0008b13:	83 c4 10             	add    esp,0x10
c0008b16:	31 d2                	xor    edx,edx
c0008b18:	85 c0                	test   eax,eax
c0008b1a:	78 1e                	js     c0008b3a <src_is_valid_ratio+0x4e>
c0008b1c:	68 00 00 70 40       	push   0x40700000
c0008b21:	6a 00                	push   0x0
c0008b23:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008b27:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008b2b:	e8 d1 ee 01 00       	call   c0027a01 <__gtdf2>
c0008b30:	31 d2                	xor    edx,edx
c0008b32:	83 c4 10             	add    esp,0x10
c0008b35:	85 c0                	test   eax,eax
c0008b37:	0f 9e c2             	setle  dl
c0008b3a:	89 d0                	mov    eax,edx
c0008b3c:	83 c4 1c             	add    esp,0x1c
c0008b3f:	c3                   	ret    

c0008b40 <src_error>:
c0008b40:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b44:	31 c0                	xor    eax,eax
c0008b46:	85 d2                	test   edx,edx
c0008b48:	74 03                	je     c0008b4d <src_error+0xd>
c0008b4a:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008b4d:	c3                   	ret    

c0008b4e <src_strerror>:
c0008b4e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b52:	31 c0                	xor    eax,eax
c0008b54:	83 fa 17             	cmp    edx,0x17
c0008b57:	77 07                	ja     c0008b60 <src_strerror+0x12>
c0008b59:	8b 04 95 c0 92 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6d40]
c0008b60:	c3                   	ret    

c0008b61 <src_simple>:
c0008b61:	56                   	push   esi
c0008b62:	53                   	push   ebx
c0008b63:	83 ec 18             	sub    esp,0x18
c0008b66:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008b6a:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008b6e:	50                   	push   eax
c0008b6f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008b73:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008b77:	e8 0c fe ff ff       	call   c0008988 <src_new>
c0008b7c:	83 c4 10             	add    esp,0x10
c0008b7f:	85 c0                	test   eax,eax
c0008b81:	75 06                	jne    c0008b89 <src_simple+0x28>
c0008b83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b87:	eb 25                	jmp    c0008bae <src_simple+0x4d>
c0008b89:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008b90:	89 c3                	mov    ebx,eax
c0008b92:	50                   	push   eax
c0008b93:	50                   	push   eax
c0008b94:	56                   	push   esi
c0008b95:	53                   	push   ebx
c0008b96:	e8 e2 f9 ff ff       	call   c000857d <src_process>
c0008b9b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008b9e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008ba2:	e8 9a f9 ff ff       	call   c0008541 <src_delete>
c0008ba7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bab:	83 c4 10             	add    esp,0x10
c0008bae:	83 c4 14             	add    esp,0x14
c0008bb1:	5b                   	pop    ebx
c0008bb2:	5e                   	pop    esi
c0008bb3:	c3                   	ret    

c0008bb4 <src_short_to_float_array>:
c0008bb4:	53                   	push   ebx
c0008bb5:	83 ec 18             	sub    esp,0x18
c0008bb8:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008bbc:	85 db                	test   ebx,ebx
c0008bbe:	74 54                	je     c0008c14 <src_short_to_float_array+0x60>
c0008bc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008bc4:	4b                   	dec    ebx
c0008bc5:	83 ec 0c             	sub    esp,0xc
c0008bc8:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008bcc:	50                   	push   eax
c0008bcd:	e8 e1 eb 01 00       	call   c00277b3 <__floatsidf>
c0008bd2:	83 c4 10             	add    esp,0x10
c0008bd5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008bd9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008bdd:	68 00 00 00 3f       	push   0x3f000000
c0008be2:	6a 00                	push   0x0
c0008be4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008be8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bec:	e8 5f e5 01 00       	call   c0027150 <__muldf3>
c0008bf1:	59                   	pop    ecx
c0008bf2:	59                   	pop    ecx
c0008bf3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008bf7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008bfb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c03:	e8 1b ee 01 00       	call   c0027a23 <__truncdfsf2>
c0008c08:	83 c4 10             	add    esp,0x10
c0008c0b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008c0f:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008c12:	eb a8                	jmp    c0008bbc <src_short_to_float_array+0x8>
c0008c14:	83 c4 18             	add    esp,0x18
c0008c17:	5b                   	pop    ebx
c0008c18:	c3                   	ret    

c0008c19 <src_float_to_short_array>:
c0008c19:	56                   	push   esi
c0008c1a:	53                   	push   ebx
c0008c1b:	83 ec 14             	sub    esp,0x14
c0008c1e:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008c22:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008c26:	85 db                	test   ebx,ebx
c0008c28:	0f 84 a4 00 00 00    	je     c0008cd2 <src_float_to_short_array+0xb9>
c0008c2e:	83 ec 0c             	sub    esp,0xc
c0008c31:	4b                   	dec    ebx
c0008c32:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008c36:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008c39:	e8 09 ef 01 00       	call   c0027b47 <__extendsfdf2>
c0008c3e:	83 c4 10             	add    esp,0x10
c0008c41:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c45:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008c49:	68 00 00 e0 41       	push   0x41e00000
c0008c4e:	6a 00                	push   0x0
c0008c50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c58:	e8 f3 e4 01 00       	call   c0027150 <__muldf3>
c0008c5d:	83 c4 10             	add    esp,0x10
c0008c60:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c64:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008c68:	68 ff ff df 41       	push   0x41dfffff
c0008c6d:	68 00 00 c0 ff       	push   0xffc00000
c0008c72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c7a:	e8 9e ed 01 00       	call   c0027a1d <__gedf2>
c0008c7f:	83 c4 10             	add    esp,0x10
c0008c82:	85 c0                	test   eax,eax
c0008c84:	78 08                	js     c0008c8e <src_float_to_short_array+0x75>
c0008c86:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008c8c:	eb 98                	jmp    c0008c26 <src_float_to_short_array+0xd>
c0008c8e:	68 00 00 e0 c1       	push   0xc1e00000
c0008c93:	6a 00                	push   0x0
c0008c95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c9d:	e8 7f ed 01 00       	call   c0027a21 <__ledf2>
c0008ca2:	83 c4 10             	add    esp,0x10
c0008ca5:	85 c0                	test   eax,eax
c0008ca7:	7f 0b                	jg     c0008cb4 <src_float_to_short_array+0x9b>
c0008ca9:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008caf:	e9 72 ff ff ff       	jmp    c0008c26 <src_float_to_short_array+0xd>
c0008cb4:	50                   	push   eax
c0008cb5:	50                   	push   eax
c0008cb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cbe:	e8 0d ef 01 00       	call   c0027bd0 <lrint>
c0008cc3:	83 c4 10             	add    esp,0x10
c0008cc6:	c1 f8 10             	sar    eax,0x10
c0008cc9:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008ccd:	e9 54 ff ff ff       	jmp    c0008c26 <src_float_to_short_array+0xd>
c0008cd2:	83 c4 14             	add    esp,0x14
c0008cd5:	5b                   	pop    ebx
c0008cd6:	5e                   	pop    esi
c0008cd7:	c3                   	ret    

c0008cd8 <src_int_to_float_array>:
c0008cd8:	53                   	push   ebx
c0008cd9:	83 ec 18             	sub    esp,0x18
c0008cdc:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ce0:	85 db                	test   ebx,ebx
c0008ce2:	74 52                	je     c0008d36 <src_int_to_float_array+0x5e>
c0008ce4:	83 ec 0c             	sub    esp,0xc
c0008ce7:	4b                   	dec    ebx
c0008ce8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008cec:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008cef:	e8 bf ea 01 00       	call   c00277b3 <__floatsidf>
c0008cf4:	83 c4 10             	add    esp,0x10
c0008cf7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cfb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008cff:	68 00 00 00 3e       	push   0x3e000000
c0008d04:	6a 00                	push   0x0
c0008d06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d0a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d0e:	e8 3d e4 01 00       	call   c0027150 <__muldf3>
c0008d13:	59                   	pop    ecx
c0008d14:	59                   	pop    ecx
c0008d15:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008d19:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008d1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d25:	e8 f9 ec 01 00       	call   c0027a23 <__truncdfsf2>
c0008d2a:	83 c4 10             	add    esp,0x10
c0008d2d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008d31:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008d34:	eb aa                	jmp    c0008ce0 <src_int_to_float_array+0x8>
c0008d36:	83 c4 18             	add    esp,0x18
c0008d39:	5b                   	pop    ebx
c0008d3a:	c3                   	ret    

c0008d3b <src_float_to_int_array>:
c0008d3b:	56                   	push   esi
c0008d3c:	53                   	push   ebx
c0008d3d:	83 ec 14             	sub    esp,0x14
c0008d40:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d44:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008d48:	85 db                	test   ebx,ebx
c0008d4a:	0f 84 a2 00 00 00    	je     c0008df2 <src_float_to_int_array+0xb7>
c0008d50:	83 ec 0c             	sub    esp,0xc
c0008d53:	4b                   	dec    ebx
c0008d54:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008d58:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008d5b:	e8 e7 ed 01 00       	call   c0027b47 <__extendsfdf2>
c0008d60:	83 c4 10             	add    esp,0x10
c0008d63:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d67:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d6b:	68 00 00 e0 41       	push   0x41e00000
c0008d70:	6a 00                	push   0x0
c0008d72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d7a:	e8 d1 e3 01 00       	call   c0027150 <__muldf3>
c0008d7f:	83 c4 10             	add    esp,0x10
c0008d82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d86:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d8a:	68 ff ff df 41       	push   0x41dfffff
c0008d8f:	68 00 00 c0 ff       	push   0xffc00000
c0008d94:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d98:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d9c:	e8 7c ec 01 00       	call   c0027a1d <__gedf2>
c0008da1:	83 c4 10             	add    esp,0x10
c0008da4:	85 c0                	test   eax,eax
c0008da6:	78 09                	js     c0008db1 <src_float_to_int_array+0x76>
c0008da8:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008daf:	eb 97                	jmp    c0008d48 <src_float_to_int_array+0xd>
c0008db1:	68 00 00 e0 c1       	push   0xc1e00000
c0008db6:	6a 00                	push   0x0
c0008db8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dbc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc0:	e8 5c ec 01 00       	call   c0027a21 <__ledf2>
c0008dc5:	83 c4 10             	add    esp,0x10
c0008dc8:	85 c0                	test   eax,eax
c0008dca:	7f 0c                	jg     c0008dd8 <src_float_to_int_array+0x9d>
c0008dcc:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008dd3:	e9 70 ff ff ff       	jmp    c0008d48 <src_float_to_int_array+0xd>
c0008dd8:	50                   	push   eax
c0008dd9:	50                   	push   eax
c0008dda:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dde:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008de2:	e8 e9 ed 01 00       	call   c0027bd0 <lrint>
c0008de7:	83 c4 10             	add    esp,0x10
c0008dea:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008ded:	e9 56 ff ff ff       	jmp    c0008d48 <src_float_to_int_array+0xd>
c0008df2:	83 c4 14             	add    esp,0x14
c0008df5:	5b                   	pop    ebx
c0008df6:	5e                   	pop    esi
c0008df7:	c3                   	ret    

c0008df8 <linear_vari_process>:
c0008df8:	55                   	push   ebp
c0008df9:	31 d2                	xor    edx,edx
c0008dfb:	57                   	push   edi
c0008dfc:	56                   	push   esi
c0008dfd:	53                   	push   ebx
c0008dfe:	83 ec 3c             	sub    esp,0x3c
c0008e01:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008e05:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008e09:	0f 8e d3 07 00 00    	jle    c00095e2 <linear_vari_process+0x7ea>
c0008e0f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008e13:	ba 05 00 00 00       	mov    edx,0x5
c0008e18:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0008e1b:	85 db                	test   ebx,ebx
c0008e1d:	0f 84 bf 07 00 00    	je     c00095e2 <linear_vari_process+0x7ea>
c0008e23:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0008e26:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008e2a:	74 19                	je     c0008e45 <linear_vari_process+0x4d>
c0008e2c:	31 d2                	xor    edx,edx
c0008e2e:	39 c2                	cmp    edx,eax
c0008e30:	7d 0c                	jge    c0008e3e <linear_vari_process+0x46>
c0008e32:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008e34:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0008e37:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0008e3b:	42                   	inc    edx
c0008e3c:	eb f0                	jmp    c0008e2e <linear_vari_process+0x36>
c0008e3e:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008e45:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0008e48:	0f af d0             	imul   edx,eax
c0008e4b:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008e4e:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0008e52:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0008e59:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008e5c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008e63:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008e67:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008e6a:	8b 00                	mov    eax,DWORD PTR [eax]
c0008e6c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e70:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e74:	68 00 00 70 3f       	push   0x3f700000
c0008e79:	6a 00                	push   0x0
c0008e7b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e7f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e83:	e8 97 eb 01 00       	call   c0027a1f <__ltdf2>
c0008e88:	83 c4 10             	add    esp,0x10
c0008e8b:	ba 16 00 00 00       	mov    edx,0x16
c0008e90:	85 c0                	test   eax,eax
c0008e92:	0f 88 4a 07 00 00    	js     c00095e2 <linear_vari_process+0x7ea>
c0008e98:	68 00 00 70 40       	push   0x40700000
c0008e9d:	6a 00                	push   0x0
c0008e9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ea3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ea7:	e8 55 eb 01 00       	call   c0027a01 <__gtdf2>
c0008eac:	83 c4 10             	add    esp,0x10
c0008eaf:	ba 16 00 00 00       	mov    edx,0x16
c0008eb4:	85 c0                	test   eax,eax
c0008eb6:	0f 8f 26 07 00 00    	jg     c00095e2 <linear_vari_process+0x7ea>
c0008ebc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008ec0:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0008ec3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008ec6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008eca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008ece:	68 00 00 f0 3f       	push   0x3ff00000
c0008ed3:	6a 00                	push   0x0
c0008ed5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008edd:	e8 3d eb 01 00       	call   c0027a1f <__ltdf2>
c0008ee2:	83 c4 10             	add    esp,0x10
c0008ee5:	85 c0                	test   eax,eax
c0008ee7:	0f 89 89 02 00 00    	jns    c0009176 <linear_vari_process+0x37e>
c0008eed:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0008ef0:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c0008ef3:	0f 8d 7d 02 00 00    	jge    c0009176 <linear_vari_process+0x37e>
c0008ef9:	83 ec 0c             	sub    esp,0xc
c0008efc:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0008eff:	e8 af e8 01 00       	call   c00277b3 <__floatsidf>
c0008f04:	83 c4 10             	add    esp,0x10
c0008f07:	89 04 24             	mov    DWORD PTR [esp],eax
c0008f0a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008f0e:	68 00 00 f0 3f       	push   0x3ff00000
c0008f13:	6a 00                	push   0x0
c0008f15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f1d:	e8 b1 db 01 00       	call   c0026ad3 <__adddf3>
c0008f22:	83 c4 10             	add    esp,0x10
c0008f25:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008f29:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008f2d:	52                   	push   edx
c0008f2e:	50                   	push   eax
c0008f2f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f33:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f37:	e8 14 e2 01 00       	call   c0027150 <__muldf3>
c0008f3c:	5d                   	pop    ebp
c0008f3d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008f41:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008f45:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0008f48:	e8 66 e8 01 00       	call   c00277b3 <__floatsidf>
c0008f4d:	83 c4 10             	add    esp,0x10
c0008f50:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008f54:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008f58:	52                   	push   edx
c0008f59:	50                   	push   eax
c0008f5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f5e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f62:	e8 6c db 01 00       	call   c0026ad3 <__adddf3>
c0008f67:	59                   	pop    ecx
c0008f68:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008f6c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008f70:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0008f73:	e8 3b e8 01 00       	call   c00277b3 <__floatsidf>
c0008f78:	83 c4 10             	add    esp,0x10
c0008f7b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008f7f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008f83:	52                   	push   edx
c0008f84:	50                   	push   eax
c0008f85:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f89:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f8d:	e8 8b ea 01 00       	call   c0027a1d <__gedf2>
c0008f92:	83 c4 10             	add    esp,0x10
c0008f95:	85 c0                	test   eax,eax
c0008f97:	0f 89 d9 01 00 00    	jns    c0009176 <linear_vari_process+0x37e>
c0008f9d:	85 ff                	test   edi,edi
c0008f9f:	0f 8e f4 00 00 00    	jle    c0009099 <linear_vari_process+0x2a1>
c0008fa5:	83 ec 10             	sub    esp,0x10
c0008fa8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0008fab:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0008fae:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0008fb2:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0008fb5:	ff 30                	push   DWORD PTR [eax]
c0008fb7:	e8 68 e1 01 00       	call   c0027124 <__subdf3>
c0008fbc:	83 c4 18             	add    esp,0x18
c0008fbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008fc3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008fc7:	52                   	push   edx
c0008fc8:	50                   	push   eax
c0008fc9:	e8 e2 eb 01 00       	call   c0027bb0 <fabs>
c0008fce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008fd2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008fd6:	83 c4 10             	add    esp,0x10
c0008fd9:	68 a1 9c c7 3b       	push   0x3bc79ca1
c0008fde:	68 23 42 92 0c       	push   0xc924223
c0008fe3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008fe7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008feb:	e8 11 ea 01 00       	call   c0027a01 <__gtdf2>
c0008ff0:	83 c4 10             	add    esp,0x10
c0008ff3:	85 c0                	test   eax,eax
c0008ff5:	0f 8e 9e 00 00 00    	jle    c0009099 <linear_vari_process+0x2a1>
c0008ffb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008fff:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009002:	8b 00                	mov    eax,DWORD PTR [eax]
c0009004:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009008:	89 04 24             	mov    DWORD PTR [esp],eax
c000900b:	52                   	push   edx
c000900c:	50                   	push   eax
c000900d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009010:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009013:	e8 0c e1 01 00       	call   c0027124 <__subdf3>
c0009018:	59                   	pop    ecx
c0009019:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000901d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009021:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009024:	e8 8a e7 01 00       	call   c00277b3 <__floatsidf>
c0009029:	83 c4 10             	add    esp,0x10
c000902c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009030:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009034:	52                   	push   edx
c0009035:	50                   	push   eax
c0009036:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000903a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000903e:	e8 0d e1 01 00       	call   c0027150 <__muldf3>
c0009043:	5f                   	pop    edi
c0009044:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009048:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000904c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000904f:	e8 5f e7 01 00       	call   c00277b3 <__floatsidf>
c0009054:	83 c4 10             	add    esp,0x10
c0009057:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000905b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000905f:	52                   	push   edx
c0009060:	50                   	push   eax
c0009061:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009065:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009069:	e8 c6 e3 01 00       	call   c0027434 <__divdf3>
c000906e:	83 c4 10             	add    esp,0x10
c0009071:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009075:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009079:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000907d:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009081:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009085:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009089:	e8 45 da 01 00       	call   c0026ad3 <__adddf3>
c000908e:	83 c4 10             	add    esp,0x10
c0009091:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009095:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009099:	31 ff                	xor    edi,edi
c000909b:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c000909e:	0f 8e 9d 00 00 00    	jle    c0009141 <linear_vari_process+0x349>
c00090a4:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00090a7:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00090ab:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00090ae:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00090b2:	89 04 24             	mov    DWORD PTR [esp],eax
c00090b5:	8b 06                	mov    eax,DWORD PTR [esi]
c00090b7:	52                   	push   edx
c00090b8:	52                   	push   edx
c00090b9:	55                   	push   ebp
c00090ba:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00090bd:	47                   	inc    edi
c00090be:	e8 a5 d3 01 00       	call   c0026468 <__subsf3>
c00090c3:	89 04 24             	mov    DWORD PTR [esp],eax
c00090c6:	e8 7c ea 01 00       	call   c0027b47 <__extendsfdf2>
c00090cb:	83 c4 10             	add    esp,0x10
c00090ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00090d2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00090d6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00090da:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00090de:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090e2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090e6:	e8 65 e0 01 00       	call   c0027150 <__muldf3>
c00090eb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00090ee:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00090f2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00090f6:	e8 4c ea 01 00       	call   c0027b47 <__extendsfdf2>
c00090fb:	83 c4 10             	add    esp,0x10
c00090fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009102:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009106:	52                   	push   edx
c0009107:	50                   	push   eax
c0009108:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000910c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009110:	e8 be d9 01 00       	call   c0026ad3 <__adddf3>
c0009115:	59                   	pop    ecx
c0009116:	5d                   	pop    ebp
c0009117:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000911b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000911f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009123:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009127:	e8 f7 e8 01 00       	call   c0027a23 <__truncdfsf2>
c000912c:	83 c4 10             	add    esp,0x10
c000912f:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0009132:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009136:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009139:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000913c:	e9 5a ff ff ff       	jmp    c000909b <linear_vari_process+0x2a3>
c0009141:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009145:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009149:	68 00 00 f0 3f       	push   0x3ff00000
c000914e:	6a 00                	push   0x0
c0009150:	e8 df e2 01 00       	call   c0027434 <__divdf3>
c0009155:	83 c4 10             	add    esp,0x10
c0009158:	89 04 24             	mov    DWORD PTR [esp],eax
c000915b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000915f:	52                   	push   edx
c0009160:	50                   	push   eax
c0009161:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009165:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009169:	e8 65 d9 01 00       	call   c0026ad3 <__adddf3>
c000916e:	83 c4 10             	add    esp,0x10
c0009171:	e9 50 fd ff ff       	jmp    c0008ec6 <linear_vari_process+0xce>
c0009176:	50                   	push   eax
c0009177:	50                   	push   eax
c0009178:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000917c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009180:	e8 4b ea 01 00       	call   c0027bd0 <lrint>
c0009185:	83 ec 0c             	sub    esp,0xc
c0009188:	50                   	push   eax
c0009189:	e8 25 e6 01 00       	call   c00277b3 <__floatsidf>
c000918e:	83 c4 10             	add    esp,0x10
c0009191:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009195:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009199:	52                   	push   edx
c000919a:	50                   	push   eax
c000919b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000919f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091a3:	e8 7c df 01 00       	call   c0027124 <__subdf3>
c00091a8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00091ac:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00091b0:	83 c4 20             	add    esp,0x20
c00091b3:	6a 00                	push   0x0
c00091b5:	6a 00                	push   0x0
c00091b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091bb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091bf:	e8 5b e8 01 00       	call   c0027a1f <__ltdf2>
c00091c4:	83 c4 10             	add    esp,0x10
c00091c7:	85 c0                	test   eax,eax
c00091c9:	79 1e                	jns    c00091e9 <linear_vari_process+0x3f1>
c00091cb:	68 00 00 f0 3f       	push   0x3ff00000
c00091d0:	6a 00                	push   0x0
c00091d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091d6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091da:	e8 f4 d8 01 00       	call   c0026ad3 <__adddf3>
c00091df:	83 c4 10             	add    esp,0x10
c00091e2:	89 04 24             	mov    DWORD PTR [esp],eax
c00091e5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00091e9:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00091ec:	83 ec 10             	sub    esp,0x10
c00091ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091f7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091fb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091ff:	e8 20 df 01 00       	call   c0027124 <__subdf3>
c0009204:	83 c4 18             	add    esp,0x18
c0009207:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000920b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000920f:	52                   	push   edx
c0009210:	50                   	push   eax
c0009211:	e8 ba e9 01 00       	call   c0027bd0 <lrint>
c0009216:	83 c4 10             	add    esp,0x10
c0009219:	0f af f8             	imul   edi,eax
c000921c:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000921f:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c0009222:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009225:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0009228:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000922b:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c000922f:	0f 8d 13 03 00 00    	jge    c0009548 <linear_vari_process+0x750>
c0009235:	83 ec 0c             	sub    esp,0xc
c0009238:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000923b:	e8 73 e5 01 00       	call   c00277b3 <__floatsidf>
c0009240:	83 c4 10             	add    esp,0x10
c0009243:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009247:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000924b:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000924f:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009253:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009257:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000925b:	e8 f0 de 01 00       	call   c0027150 <__muldf3>
c0009260:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009263:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009267:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000926b:	e8 43 e5 01 00       	call   c00277b3 <__floatsidf>
c0009270:	83 c4 10             	add    esp,0x10
c0009273:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009277:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000927b:	52                   	push   edx
c000927c:	50                   	push   eax
c000927d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009281:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009285:	e8 49 d8 01 00       	call   c0026ad3 <__adddf3>
c000928a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000928d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009291:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009295:	e8 19 e5 01 00       	call   c00277b3 <__floatsidf>
c000929a:	83 c4 10             	add    esp,0x10
c000929d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092a1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092a5:	52                   	push   edx
c00092a6:	50                   	push   eax
c00092a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092af:	e8 6b e7 01 00       	call   c0027a1f <__ltdf2>
c00092b4:	83 c4 10             	add    esp,0x10
c00092b7:	85 c0                	test   eax,eax
c00092b9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00092bd:	0f 89 85 02 00 00    	jns    c0009548 <linear_vari_process+0x750>
c00092c3:	85 c9                	test   ecx,ecx
c00092c5:	0f 8e f5 00 00 00    	jle    c00093c0 <linear_vari_process+0x5c8>
c00092cb:	83 ec 10             	sub    esp,0x10
c00092ce:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00092d1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00092d4:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00092d8:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00092db:	ff 30                	push   DWORD PTR [eax]
c00092dd:	e8 42 de 01 00       	call   c0027124 <__subdf3>
c00092e2:	83 c4 18             	add    esp,0x18
c00092e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092e9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092ed:	52                   	push   edx
c00092ee:	50                   	push   eax
c00092ef:	e8 bc e8 01 00       	call   c0027bb0 <fabs>
c00092f4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092f8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092fc:	83 c4 10             	add    esp,0x10
c00092ff:	68 a1 9c c7 3b       	push   0x3bc79ca1
c0009304:	68 23 42 92 0c       	push   0xc924223
c0009309:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000930d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009311:	e8 eb e6 01 00       	call   c0027a01 <__gtdf2>
c0009316:	83 c4 10             	add    esp,0x10
c0009319:	85 c0                	test   eax,eax
c000931b:	0f 8e 9f 00 00 00    	jle    c00093c0 <linear_vari_process+0x5c8>
c0009321:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009325:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009328:	8b 00                	mov    eax,DWORD PTR [eax]
c000932a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000932e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009332:	52                   	push   edx
c0009333:	50                   	push   eax
c0009334:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009337:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000933a:	e8 e5 dd 01 00       	call   c0027124 <__subdf3>
c000933f:	5f                   	pop    edi
c0009340:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009344:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009348:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000934b:	e8 63 e4 01 00       	call   c00277b3 <__floatsidf>
c0009350:	83 c4 10             	add    esp,0x10
c0009353:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009357:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000935b:	52                   	push   edx
c000935c:	50                   	push   eax
c000935d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009361:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009365:	e8 e6 dd 01 00       	call   c0027150 <__muldf3>
c000936a:	5d                   	pop    ebp
c000936b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000936f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009373:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009376:	e8 38 e4 01 00       	call   c00277b3 <__floatsidf>
c000937b:	83 c4 10             	add    esp,0x10
c000937e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009382:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009386:	52                   	push   edx
c0009387:	50                   	push   eax
c0009388:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000938c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009390:	e8 9f e0 01 00       	call   c0027434 <__divdf3>
c0009395:	83 c4 10             	add    esp,0x10
c0009398:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000939c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093a0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093a4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093b0:	e8 1e d7 01 00       	call   c0026ad3 <__adddf3>
c00093b5:	83 c4 10             	add    esp,0x10
c00093b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093bc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093c0:	31 ff                	xor    edi,edi
c00093c2:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00093c5:	39 f8                	cmp    eax,edi
c00093c7:	0f 8e ac 00 00 00    	jle    c0009479 <linear_vari_process+0x681>
c00093cd:	8b 16                	mov    edx,DWORD PTR [esi]
c00093cf:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00093d2:	29 c1                	sub    ecx,eax
c00093d4:	89 c8                	mov    eax,ecx
c00093d6:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00093d9:	01 f8                	add    eax,edi
c00093db:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00093df:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00093e2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00093e5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093e9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00093ec:	51                   	push   ecx
c00093ed:	01 f8                	add    eax,edi
c00093ef:	51                   	push   ecx
c00093f0:	47                   	inc    edi
c00093f1:	55                   	push   ebp
c00093f2:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c00093f5:	e8 6e d0 01 00       	call   c0026468 <__subsf3>
c00093fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00093fd:	e8 45 e7 01 00       	call   c0027b47 <__extendsfdf2>
c0009402:	83 c4 10             	add    esp,0x10
c0009405:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009409:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000940d:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009411:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009415:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009419:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000941d:	e8 2e dd 01 00       	call   c0027150 <__muldf3>
c0009422:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009425:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009429:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000942d:	e8 15 e7 01 00       	call   c0027b47 <__extendsfdf2>
c0009432:	83 c4 10             	add    esp,0x10
c0009435:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009439:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000943d:	52                   	push   edx
c000943e:	50                   	push   eax
c000943f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009443:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009447:	e8 87 d6 01 00       	call   c0026ad3 <__adddf3>
c000944c:	5d                   	pop    ebp
c000944d:	59                   	pop    ecx
c000944e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009452:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009456:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000945a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000945e:	e8 c0 e5 01 00       	call   c0027a23 <__truncdfsf2>
c0009463:	83 c4 10             	add    esp,0x10
c0009466:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000946a:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000946e:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009471:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009474:	e9 49 ff ff ff       	jmp    c00093c2 <linear_vari_process+0x5ca>
c0009479:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000947d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009481:	68 00 00 f0 3f       	push   0x3ff00000
c0009486:	6a 00                	push   0x0
c0009488:	e8 a7 df 01 00       	call   c0027434 <__divdf3>
c000948d:	83 c4 10             	add    esp,0x10
c0009490:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009494:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009498:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000949c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00094a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094a4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094a8:	e8 26 d6 01 00       	call   c0026ad3 <__adddf3>
c00094ad:	59                   	pop    ecx
c00094ae:	5f                   	pop    edi
c00094af:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094b3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094bf:	e8 0c e7 01 00       	call   c0027bd0 <lrint>
c00094c4:	83 ec 0c             	sub    esp,0xc
c00094c7:	50                   	push   eax
c00094c8:	e8 e6 e2 01 00       	call   c00277b3 <__floatsidf>
c00094cd:	83 c4 10             	add    esp,0x10
c00094d0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094d4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094d8:	52                   	push   edx
c00094d9:	50                   	push   eax
c00094da:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094de:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094e2:	e8 3d dc 01 00       	call   c0027124 <__subdf3>
c00094e7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00094eb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00094ef:	83 c4 20             	add    esp,0x20
c00094f2:	6a 00                	push   0x0
c00094f4:	6a 00                	push   0x0
c00094f6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094fa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094fe:	e8 1c e5 01 00       	call   c0027a1f <__ltdf2>
c0009503:	83 c4 10             	add    esp,0x10
c0009506:	85 c0                	test   eax,eax
c0009508:	79 1e                	jns    c0009528 <linear_vari_process+0x730>
c000950a:	68 00 00 f0 3f       	push   0x3ff00000
c000950f:	6a 00                	push   0x0
c0009511:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009515:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009519:	e8 b5 d5 01 00       	call   c0026ad3 <__adddf3>
c000951e:	83 c4 10             	add    esp,0x10
c0009521:	89 04 24             	mov    DWORD PTR [esp],eax
c0009524:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009528:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000952b:	83 ec 10             	sub    esp,0x10
c000952e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009532:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009536:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000953a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000953e:	e8 e1 db 01 00       	call   c0027124 <__subdf3>
c0009543:	e9 bc fc ff ff       	jmp    c0009204 <linear_vari_process+0x40c>
c0009548:	39 fd                	cmp    ebp,edi
c000954a:	7d 38                	jge    c0009584 <linear_vari_process+0x78c>
c000954c:	83 ec 0c             	sub    esp,0xc
c000954f:	89 f8                	mov    eax,edi
c0009551:	29 e8                	sub    eax,ebp
c0009553:	99                   	cdq    
c0009554:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009557:	50                   	push   eax
c0009558:	e8 56 e2 01 00       	call   c00277b3 <__floatsidf>
c000955d:	83 c4 10             	add    esp,0x10
c0009560:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009564:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009568:	52                   	push   edx
c0009569:	50                   	push   eax
c000956a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000956e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009572:	e8 5c d5 01 00       	call   c0026ad3 <__adddf3>
c0009577:	83 c4 10             	add    esp,0x10
c000957a:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000957d:	89 04 24             	mov    DWORD PTR [esp],eax
c0009580:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009584:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009588:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000958b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000958f:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0009592:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0009595:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009598:	85 c0                	test   eax,eax
c000959a:	7f 29                	jg     c00095c5 <linear_vari_process+0x7cd>
c000959c:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00095a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00095a4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00095a8:	89 01                	mov    DWORD PTR [ecx],eax
c00095aa:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00095ad:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00095b0:	99                   	cdq    
c00095b1:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00095b4:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00095b7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095ba:	99                   	cdq    
c00095bb:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00095be:	31 d2                	xor    edx,edx
c00095c0:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00095c3:	eb 1d                	jmp    c00095e2 <linear_vari_process+0x7ea>
c00095c5:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00095c8:	31 d2                	xor    edx,edx
c00095ca:	29 c8                	sub    eax,ecx
c00095cc:	c1 e0 02             	shl    eax,0x2
c00095cf:	39 d1                	cmp    ecx,edx
c00095d1:	7e c9                	jle    c000959c <linear_vari_process+0x7a4>
c00095d3:	8b 3e                	mov    edi,DWORD PTR [esi]
c00095d5:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00095d8:	83 c0 04             	add    eax,0x4
c00095db:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00095df:	42                   	inc    edx
c00095e0:	eb ed                	jmp    c00095cf <linear_vari_process+0x7d7>
c00095e2:	83 c4 3c             	add    esp,0x3c
c00095e5:	89 d0                	mov    eax,edx
c00095e7:	5b                   	pop    ebx
c00095e8:	5e                   	pop    esi
c00095e9:	5f                   	pop    edi
c00095ea:	5d                   	pop    ebp
c00095eb:	c3                   	ret    

c00095ec <linear_reset>:
c00095ec:	83 ec 0c             	sub    esp,0xc
c00095ef:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00095f3:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00095f6:	85 c0                	test   eax,eax
c00095f8:	74 20                	je     c000961a <linear_reset+0x2e>
c00095fa:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00095fd:	83 c0 1c             	add    eax,0x1c
c0009600:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c0009603:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000960a:	c1 e2 02             	shl    edx,0x2
c000960d:	51                   	push   ecx
c000960e:	52                   	push   edx
c000960f:	6a 00                	push   0x0
c0009611:	50                   	push   eax
c0009612:	e8 ad 70 ff ff       	call   c00006c4 <memset>
c0009617:	83 c4 10             	add    esp,0x10
c000961a:	83 c4 0c             	add    esp,0xc
c000961d:	c3                   	ret    

c000961e <linear_get_name>:
c000961e:	31 c0                	xor    eax,eax
c0009620:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009625:	75 05                	jne    c000962c <linear_get_name+0xe>
c0009627:	b8 20 93 02 c0       	mov    eax,0xc0029320
c000962c:	c3                   	ret    

c000962d <linear_get_description>:
c000962d:	31 c0                	xor    eax,eax
c000962f:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009634:	75 05                	jne    c000963b <linear_get_description+0xe>
c0009636:	b8 34 93 02 c0       	mov    eax,0xc0029334
c000963b:	c3                   	ret    

c000963c <linear_set_converter>:
c000963c:	53                   	push   ebx
c000963d:	b8 0a 00 00 00       	mov    eax,0xa
c0009642:	83 ec 08             	sub    esp,0x8
c0009645:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009649:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c000964e:	75 6e                	jne    c00096be <linear_set_converter+0x82>
c0009650:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0009653:	85 c0                	test   eax,eax
c0009655:	74 13                	je     c000966a <linear_set_converter+0x2e>
c0009657:	83 ec 0c             	sub    esp,0xc
c000965a:	50                   	push   eax
c000965b:	e8 d4 5f 00 00       	call   c000f634 <free>
c0009660:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0009667:	83 c4 10             	add    esp,0x10
c000966a:	50                   	push   eax
c000966b:	50                   	push   eax
c000966c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000966f:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0009676:	50                   	push   eax
c0009677:	6a 01                	push   0x1
c0009679:	e8 d6 5f 00 00       	call   c000f654 <calloc>
c000967e:	83 c4 10             	add    esp,0x10
c0009681:	89 c2                	mov    edx,eax
c0009683:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0009686:	85 d2                	test   edx,edx
c0009688:	b8 01 00 00 00       	mov    eax,0x1
c000968d:	74 2f                	je     c00096be <linear_set_converter+0x82>
c000968f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009692:	83 ec 0c             	sub    esp,0xc
c0009695:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009698:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c000969e:	c7 43 24 f8 8d 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008df8
c00096a5:	c7 43 20 f8 8d 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008df8
c00096ac:	c7 43 28 ec 95 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00095ec
c00096b3:	53                   	push   ebx
c00096b4:	e8 33 ff ff ff       	call   c00095ec <linear_reset>
c00096b9:	83 c4 10             	add    esp,0x10
c00096bc:	31 c0                	xor    eax,eax
c00096be:	83 c4 08             	add    esp,0x8
c00096c1:	5b                   	pop    ebx
c00096c2:	c3                   	ret    

c00096c3 <int_to_fp>:
c00096c3:	c1 e0 0c             	shl    eax,0xc
c00096c6:	c3                   	ret    

c00096c7 <fp_to_int>:
c00096c7:	c1 f8 0c             	sar    eax,0xc
c00096ca:	c3                   	ret    

c00096cb <fp_fraction_part>:
c00096cb:	25 ff 0f 00 00       	and    eax,0xfff
c00096d0:	c3                   	ret    

c00096d1 <fp_to_double>:
c00096d1:	83 ec 1c             	sub    esp,0x1c
c00096d4:	e8 f2 ff ff ff       	call   c00096cb <fp_fraction_part>
c00096d9:	83 ec 0c             	sub    esp,0xc
c00096dc:	50                   	push   eax
c00096dd:	e8 d1 e0 01 00       	call   c00277b3 <__floatsidf>
c00096e2:	83 c4 10             	add    esp,0x10
c00096e5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096e9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096ed:	68 00 00 30 3f       	push   0x3f300000
c00096f2:	6a 00                	push   0x0
c00096f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096f8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096fc:	e8 4f da 01 00       	call   c0027150 <__muldf3>
c0009701:	83 c4 2c             	add    esp,0x2c
c0009704:	c3                   	ret    

c0009705 <calc_output_single>:
c0009705:	55                   	push   ebp
c0009706:	57                   	push   edi
c0009707:	56                   	push   esi
c0009708:	89 c6                	mov    esi,eax
c000970a:	53                   	push   ebx
c000970b:	89 d3                	mov    ebx,edx
c000970d:	83 ec 4c             	sub    esp,0x4c
c0009710:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009714:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0009717:	e8 a7 ff ff ff       	call   c00096c3 <int_to_fp>
c000971c:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c000971f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009723:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0009727:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c000972b:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c000972e:	99                   	cdq    
c000972f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009737:	f7 fb                	idiv   ebx
c0009739:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009741:	89 da                	mov    edx,ebx
c0009743:	0f af d0             	imul   edx,eax
c0009746:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c000974a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000974e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009752:	29 c2                	sub    edx,eax
c0009754:	8d 2c 96             	lea    ebp,[esi+edx*4]
c0009757:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000975b:	83 c5 04             	add    ebp,0x4
c000975e:	e8 6e ff ff ff       	call   c00096d1 <fp_to_double>
c0009763:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009767:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000976b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000976f:	e8 53 ff ff ff       	call   c00096c7 <fp_to_int>
c0009774:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009777:	52                   	push   edx
c0009778:	52                   	push   edx
c0009779:	51                   	push   ecx
c000977a:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c000977e:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009782:	e8 e1 cc 01 00       	call   c0026468 <__subsf3>
c0009787:	89 04 24             	mov    DWORD PTR [esp],eax
c000978a:	e8 b8 e3 01 00       	call   c0027b47 <__extendsfdf2>
c000978f:	83 c4 10             	add    esp,0x10
c0009792:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009796:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000979a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000979e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00097a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00097a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00097aa:	e8 a1 d9 01 00       	call   c0027150 <__muldf3>
c00097af:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00097b3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00097b7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00097ba:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00097be:	e8 84 e3 01 00       	call   c0027b47 <__extendsfdf2>
c00097c3:	83 c4 10             	add    esp,0x10
c00097c6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00097ca:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00097ce:	52                   	push   edx
c00097cf:	50                   	push   eax
c00097d0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00097d4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00097d8:	e8 f6 d2 01 00       	call   c0026ad3 <__adddf3>
c00097dd:	59                   	pop    ecx
c00097de:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00097e2:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00097e6:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c00097ec:	e8 56 e3 01 00       	call   c0027b47 <__extendsfdf2>
c00097f1:	83 c4 10             	add    esp,0x10
c00097f4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00097f8:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00097fc:	52                   	push   edx
c00097fd:	50                   	push   eax
c00097fe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009802:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009806:	e8 45 d9 01 00       	call   c0027150 <__muldf3>
c000980b:	83 c4 10             	add    esp,0x10
c000980e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009812:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009816:	52                   	push   edx
c0009817:	50                   	push   eax
c0009818:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000981c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009820:	e8 ae d2 01 00       	call   c0026ad3 <__adddf3>
c0009825:	83 c4 10             	add    esp,0x10
c0009828:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000982c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009830:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009834:	0f 89 1d ff ff ff    	jns    c0009757 <calc_output_single+0x52>
c000983a:	89 d9                	mov    ecx,ebx
c000983c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009840:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009844:	89 dd                	mov    ebp,ebx
c0009846:	29 c8                	sub    eax,ecx
c0009848:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009850:	99                   	cdq    
c0009851:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009859:	f7 fb                	idiv   ebx
c000985b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000985f:	0f af e8             	imul   ebp,eax
c0009862:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009866:	01 cd                	add    ebp,ecx
c0009868:	8d 34 86             	lea    esi,[esi+eax*4]
c000986b:	89 e8                	mov    eax,ebp
c000986d:	83 ee 04             	sub    esi,0x4
c0009870:	e8 5c fe ff ff       	call   c00096d1 <fp_to_double>
c0009875:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009879:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000987d:	89 e8                	mov    eax,ebp
c000987f:	29 dd                	sub    ebp,ebx
c0009881:	e8 41 fe ff ff       	call   c00096c7 <fp_to_int>
c0009886:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009889:	52                   	push   edx
c000988a:	52                   	push   edx
c000988b:	51                   	push   ecx
c000988c:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009890:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009894:	e8 cf cb 01 00       	call   c0026468 <__subsf3>
c0009899:	89 04 24             	mov    DWORD PTR [esp],eax
c000989c:	e8 a6 e2 01 00       	call   c0027b47 <__extendsfdf2>
c00098a1:	83 c4 10             	add    esp,0x10
c00098a4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00098a8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00098ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00098b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00098b4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00098b8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00098bc:	e8 8f d8 01 00       	call   c0027150 <__muldf3>
c00098c1:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00098c5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00098c9:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00098cc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00098d0:	e8 72 e2 01 00       	call   c0027b47 <__extendsfdf2>
c00098d5:	83 c4 10             	add    esp,0x10
c00098d8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00098dc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00098e0:	52                   	push   edx
c00098e1:	50                   	push   eax
c00098e2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098e6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098ea:	e8 e4 d1 01 00       	call   c0026ad3 <__adddf3>
c00098ef:	59                   	pop    ecx
c00098f0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00098f4:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00098f8:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c00098fe:	e8 44 e2 01 00       	call   c0027b47 <__extendsfdf2>
c0009903:	83 c4 10             	add    esp,0x10
c0009906:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000990a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000990e:	52                   	push   edx
c000990f:	50                   	push   eax
c0009910:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009914:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009918:	e8 33 d8 01 00       	call   c0027150 <__muldf3>
c000991d:	83 c4 10             	add    esp,0x10
c0009920:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009924:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009928:	52                   	push   edx
c0009929:	50                   	push   eax
c000992a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000992e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009932:	e8 9c d1 01 00       	call   c0026ad3 <__adddf3>
c0009937:	83 c4 10             	add    esp,0x10
c000993a:	85 ed                	test   ebp,ebp
c000993c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009940:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009944:	0f 8f 21 ff ff ff    	jg     c000986b <calc_output_single+0x166>
c000994a:	52                   	push   edx
c000994b:	50                   	push   eax
c000994c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009950:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009954:	e8 7a d1 01 00       	call   c0026ad3 <__adddf3>
c0009959:	83 c4 5c             	add    esp,0x5c
c000995c:	5b                   	pop    ebx
c000995d:	5e                   	pop    esi
c000995e:	5f                   	pop    edi
c000995f:	5d                   	pop    ebp
c0009960:	c3                   	ret    

c0009961 <calc_output_stereo>:
c0009961:	55                   	push   ebp
c0009962:	89 cd                	mov    ebp,ecx
c0009964:	57                   	push   edi
c0009965:	56                   	push   esi
c0009966:	53                   	push   ebx
c0009967:	89 c3                	mov    ebx,eax
c0009969:	83 ec 6c             	sub    esp,0x6c
c000996c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009970:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009977:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000997e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009982:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009986:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009989:	e8 35 fd ff ff       	call   c00096c3 <int_to_fp>
c000998e:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009996:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000999a:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00099a2:	29 c8                	sub    eax,ecx
c00099a4:	99                   	cdq    
c00099a5:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c00099a9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00099ad:	0f af d0             	imul   edx,eax
c00099b0:	8d 34 0a             	lea    esi,[edx+ecx*1]
c00099b3:	31 d2                	xor    edx,edx
c00099b5:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c00099b9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00099bd:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c00099c0:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00099c4:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c00099c7:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00099cb:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c00099cf:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c00099d2:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00099d7:	29 c1                	sub    ecx,eax
c00099d9:	31 c0                	xor    eax,eax
c00099db:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c00099de:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00099e2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00099e6:	83 c7 08             	add    edi,0x8
c00099e9:	e8 e3 fc ff ff       	call   c00096d1 <fp_to_double>
c00099ee:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00099f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00099f6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00099fa:	e8 c8 fc ff ff       	call   c00096c7 <fp_to_int>
c00099ff:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009a02:	52                   	push   edx
c0009a03:	52                   	push   edx
c0009a04:	51                   	push   ecx
c0009a05:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009a09:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009a0d:	e8 56 ca 01 00       	call   c0026468 <__subsf3>
c0009a12:	89 04 24             	mov    DWORD PTR [esp],eax
c0009a15:	e8 2d e1 01 00       	call   c0027b47 <__extendsfdf2>
c0009a1a:	83 c4 10             	add    esp,0x10
c0009a1d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a21:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a25:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a29:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a2d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a31:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a35:	e8 16 d7 01 00       	call   c0027150 <__muldf3>
c0009a3a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009a3e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009a42:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009a45:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009a49:	e8 f9 e0 01 00       	call   c0027b47 <__extendsfdf2>
c0009a4e:	83 c4 10             	add    esp,0x10
c0009a51:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a55:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a59:	52                   	push   edx
c0009a5a:	50                   	push   eax
c0009a5b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009a5f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009a63:	e8 6b d0 01 00       	call   c0026ad3 <__adddf3>
c0009a68:	59                   	pop    ecx
c0009a69:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009a6d:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009a71:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009a77:	e8 cb e0 01 00       	call   c0027b47 <__extendsfdf2>
c0009a7c:	83 c4 10             	add    esp,0x10
c0009a7f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a83:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a87:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a8b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a8f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a93:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a97:	e8 b4 d6 01 00       	call   c0027150 <__muldf3>
c0009a9c:	83 c4 10             	add    esp,0x10
c0009a9f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009aa3:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009aa7:	52                   	push   edx
c0009aa8:	50                   	push   eax
c0009aa9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009aad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ab1:	e8 1d d0 01 00       	call   c0026ad3 <__adddf3>
c0009ab6:	59                   	pop    ecx
c0009ab7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009abb:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009abf:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009ac5:	e8 7d e0 01 00       	call   c0027b47 <__extendsfdf2>
c0009aca:	83 c4 10             	add    esp,0x10
c0009acd:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ad1:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009ad5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ad9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009add:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009ae1:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009ae5:	e8 66 d6 01 00       	call   c0027150 <__muldf3>
c0009aea:	83 c4 10             	add    esp,0x10
c0009aed:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009af1:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009af5:	52                   	push   edx
c0009af6:	50                   	push   eax
c0009af7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009afb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009aff:	e8 cf cf 01 00       	call   c0026ad3 <__adddf3>
c0009b04:	83 c4 10             	add    esp,0x10
c0009b07:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009b0b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b0f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b13:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009b17:	0f 89 c5 fe ff ff    	jns    c00099e2 <calc_output_stereo+0x81>
c0009b1d:	29 e9                	sub    ecx,ebp
c0009b1f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009b23:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009b27:	29 c8                	sub    eax,ecx
c0009b29:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009b31:	99                   	cdq    
c0009b32:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009b36:	31 d2                	xor    edx,edx
c0009b38:	0f af f8             	imul   edi,eax
c0009b3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b3f:	40                   	inc    eax
c0009b40:	01 cf                	add    edi,ecx
c0009b42:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009b47:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009b4b:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009b53:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009b56:	31 c0                	xor    eax,eax
c0009b58:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b5c:	89 f8                	mov    eax,edi
c0009b5e:	83 eb 08             	sub    ebx,0x8
c0009b61:	e8 6b fb ff ff       	call   c00096d1 <fp_to_double>
c0009b66:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009b6a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009b6e:	89 f8                	mov    eax,edi
c0009b70:	e8 52 fb ff ff       	call   c00096c7 <fp_to_int>
c0009b75:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009b78:	52                   	push   edx
c0009b79:	52                   	push   edx
c0009b7a:	55                   	push   ebp
c0009b7b:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009b7f:	e8 e4 c8 01 00       	call   c0026468 <__subsf3>
c0009b84:	89 04 24             	mov    DWORD PTR [esp],eax
c0009b87:	e8 bb df 01 00       	call   c0027b47 <__extendsfdf2>
c0009b8c:	83 c4 10             	add    esp,0x10
c0009b8f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b93:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009b97:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009b9b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009b9f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ba3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ba7:	e8 a4 d5 01 00       	call   c0027150 <__muldf3>
c0009bac:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009baf:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009bb3:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009bb7:	e8 8b df 01 00       	call   c0027b47 <__extendsfdf2>
c0009bbc:	83 c4 10             	add    esp,0x10
c0009bbf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bc3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bc7:	52                   	push   edx
c0009bc8:	50                   	push   eax
c0009bc9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009bcd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009bd1:	e8 fd ce 01 00       	call   c0026ad3 <__adddf3>
c0009bd6:	59                   	pop    ecx
c0009bd7:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009bdb:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009bdf:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009be5:	e8 5d df 01 00       	call   c0027b47 <__extendsfdf2>
c0009bea:	83 c4 10             	add    esp,0x10
c0009bed:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bf1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bf5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009bf9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009bfd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c01:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c05:	e8 46 d5 01 00       	call   c0027150 <__muldf3>
c0009c0a:	83 c4 10             	add    esp,0x10
c0009c0d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009c11:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009c15:	52                   	push   edx
c0009c16:	50                   	push   eax
c0009c17:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009c1b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009c1f:	e8 af ce 01 00       	call   c0026ad3 <__adddf3>
c0009c24:	5d                   	pop    ebp
c0009c25:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009c29:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009c2d:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009c33:	e8 0f df 01 00       	call   c0027b47 <__extendsfdf2>
c0009c38:	83 c4 10             	add    esp,0x10
c0009c3b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009c3f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009c43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c47:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c4b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c4f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c53:	e8 f8 d4 01 00       	call   c0027150 <__muldf3>
c0009c58:	83 c4 10             	add    esp,0x10
c0009c5b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009c5f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009c63:	52                   	push   edx
c0009c64:	50                   	push   eax
c0009c65:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c69:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c6d:	e8 61 ce 01 00       	call   c0026ad3 <__adddf3>
c0009c72:	83 c4 10             	add    esp,0x10
c0009c75:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009c79:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009c7d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009c81:	85 ff                	test   edi,edi
c0009c83:	0f 8f d3 fe ff ff    	jg     c0009b5c <calc_output_stereo+0x1fb>
c0009c89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c91:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c99:	e8 35 ce 01 00       	call   c0026ad3 <__adddf3>
c0009c9e:	83 c4 10             	add    esp,0x10
c0009ca1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ca5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ca9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009cad:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009cb1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cb5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cb9:	e8 92 d4 01 00       	call   c0027150 <__muldf3>
c0009cbe:	59                   	pop    ecx
c0009cbf:	5b                   	pop    ebx
c0009cc0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009cc4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009cc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ccc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cd0:	e8 4e dd 01 00       	call   c0027a23 <__truncdfsf2>
c0009cd5:	83 c4 10             	add    esp,0x10
c0009cd8:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009cdf:	89 03                	mov    DWORD PTR [ebx],eax
c0009ce1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ce5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ce9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ced:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cf1:	e8 dd cd 01 00       	call   c0026ad3 <__adddf3>
c0009cf6:	83 c4 10             	add    esp,0x10
c0009cf9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009cfd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009d01:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d05:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d09:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d0d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d11:	e8 3a d4 01 00       	call   c0027150 <__muldf3>
c0009d16:	5e                   	pop    esi
c0009d17:	5f                   	pop    edi
c0009d18:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009d1c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009d20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d28:	e8 f6 dc 01 00       	call   c0027a23 <__truncdfsf2>
c0009d2d:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009d34:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009d37:	83 c4 7c             	add    esp,0x7c
c0009d3a:	5b                   	pop    ebx
c0009d3b:	5e                   	pop    esi
c0009d3c:	5f                   	pop    edi
c0009d3d:	5d                   	pop    ebp
c0009d3e:	c3                   	ret    

c0009d3f <calc_output_quad>:
c0009d3f:	55                   	push   ebp
c0009d40:	57                   	push   edi
c0009d41:	56                   	push   esi
c0009d42:	89 c6                	mov    esi,eax
c0009d44:	53                   	push   ebx
c0009d45:	83 ec 7c             	sub    esp,0x7c
c0009d48:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009d4c:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009d50:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009d57:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009d5e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009d62:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009d66:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009d69:	e8 55 f9 ff ff       	call   c00096c3 <int_to_fp>
c0009d6e:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009d71:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009d74:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009d78:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009d7c:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009d80:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009d84:	99                   	cdq    
c0009d85:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009d89:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d8d:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009d90:	31 d2                	xor    edx,edx
c0009d92:	0f af d8             	imul   ebx,eax
c0009d95:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009d9d:	0f af c7             	imul   eax,edi
c0009da0:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009da4:	29 c1                	sub    ecx,eax
c0009da6:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009dae:	31 c0                	xor    eax,eax
c0009db0:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009db3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009db7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009dbb:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dbf:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dc3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009dc7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009dcb:	89 d8                	mov    eax,ebx
c0009dcd:	83 c7 10             	add    edi,0x10
c0009dd0:	e8 fc f8 ff ff       	call   c00096d1 <fp_to_double>
c0009dd5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009dd9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ddd:	89 d8                	mov    eax,ebx
c0009ddf:	e8 e3 f8 ff ff       	call   c00096c7 <fp_to_int>
c0009de4:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009de8:	52                   	push   edx
c0009de9:	52                   	push   edx
c0009dea:	51                   	push   ecx
c0009deb:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009def:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009df3:	e8 70 c6 01 00       	call   c0026468 <__subsf3>
c0009df8:	89 04 24             	mov    DWORD PTR [esp],eax
c0009dfb:	e8 47 dd 01 00       	call   c0027b47 <__extendsfdf2>
c0009e00:	83 c4 10             	add    esp,0x10
c0009e03:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e07:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e0f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e13:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e17:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e1b:	e8 30 d3 01 00       	call   c0027150 <__muldf3>
c0009e20:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0009e24:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e28:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e2b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e2f:	e8 13 dd 01 00       	call   c0027b47 <__extendsfdf2>
c0009e34:	83 c4 10             	add    esp,0x10
c0009e37:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e3b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e3f:	52                   	push   edx
c0009e40:	50                   	push   eax
c0009e41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e45:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e49:	e8 85 cc 01 00       	call   c0026ad3 <__adddf3>
c0009e4e:	59                   	pop    ecx
c0009e4f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e53:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e57:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c0009e5d:	e8 e5 dc 01 00       	call   c0027b47 <__extendsfdf2>
c0009e62:	83 c4 10             	add    esp,0x10
c0009e65:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e69:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e6d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e71:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e75:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e79:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e7d:	e8 ce d2 01 00       	call   c0027150 <__muldf3>
c0009e82:	83 c4 10             	add    esp,0x10
c0009e85:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e89:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e8d:	52                   	push   edx
c0009e8e:	50                   	push   eax
c0009e8f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009e93:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009e97:	e8 37 cc 01 00       	call   c0026ad3 <__adddf3>
c0009e9c:	59                   	pop    ecx
c0009e9d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0009ea1:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0009ea5:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c0009eab:	e8 97 dc 01 00       	call   c0027b47 <__extendsfdf2>
c0009eb0:	83 c4 10             	add    esp,0x10
c0009eb3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009eb7:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ebb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ebf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ec3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ec7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ecb:	e8 80 d2 01 00       	call   c0027150 <__muldf3>
c0009ed0:	83 c4 10             	add    esp,0x10
c0009ed3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009ed7:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009edb:	52                   	push   edx
c0009edc:	50                   	push   eax
c0009edd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee5:	e8 e9 cb 01 00       	call   c0026ad3 <__adddf3>
c0009eea:	59                   	pop    ecx
c0009eeb:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0009eef:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0009ef3:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009ef9:	e8 49 dc 01 00       	call   c0027b47 <__extendsfdf2>
c0009efe:	83 c4 10             	add    esp,0x10
c0009f01:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009f05:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f09:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f0d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f11:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f15:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f19:	e8 32 d2 01 00       	call   c0027150 <__muldf3>
c0009f1e:	83 c4 10             	add    esp,0x10
c0009f21:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009f25:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f29:	52                   	push   edx
c0009f2a:	50                   	push   eax
c0009f2b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009f2f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009f33:	e8 9b cb 01 00       	call   c0026ad3 <__adddf3>
c0009f38:	59                   	pop    ecx
c0009f39:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009f3d:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009f41:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009f47:	e8 fb db 01 00       	call   c0027b47 <__extendsfdf2>
c0009f4c:	83 c4 10             	add    esp,0x10
c0009f4f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009f53:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f57:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f5b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f5f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f63:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f67:	e8 e4 d1 01 00       	call   c0027150 <__muldf3>
c0009f6c:	83 c4 10             	add    esp,0x10
c0009f6f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009f73:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009f77:	52                   	push   edx
c0009f78:	50                   	push   eax
c0009f79:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009f7d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009f81:	e8 4d cb 01 00       	call   c0026ad3 <__adddf3>
c0009f86:	83 c4 10             	add    esp,0x10
c0009f89:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009f8d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009f91:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c0009f95:	0f 89 30 fe ff ff    	jns    c0009dcb <calc_output_quad+0x8c>
c0009f9b:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0009f9f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009fa3:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009fa7:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0009fab:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0009fb3:	29 c8                	sub    eax,ecx
c0009fb5:	99                   	cdq    
c0009fb6:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009fba:	31 d2                	xor    edx,edx
c0009fbc:	0f af d8             	imul   ebx,eax
c0009fbf:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009fc3:	40                   	inc    eax
c0009fc4:	01 cb                	add    ebx,ecx
c0009fc6:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0009fcb:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009fcf:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c0009fd3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009fd7:	8d 34 86             	lea    esi,[esi+eax*4]
c0009fda:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0009fe2:	31 c0                	xor    eax,eax
c0009fe4:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009fe8:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009fec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009ff0:	89 d8                	mov    eax,ebx
c0009ff2:	83 ee 10             	sub    esi,0x10
c0009ff5:	e8 d7 f6 ff ff       	call   c00096d1 <fp_to_double>
c0009ffa:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009ffe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a002:	89 d8                	mov    eax,ebx
c000a004:	e8 be f6 ff ff       	call   c00096c7 <fp_to_int>
c000a009:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a00d:	52                   	push   edx
c000a00e:	52                   	push   edx
c000a00f:	57                   	push   edi
c000a010:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a014:	e8 4f c4 01 00       	call   c0026468 <__subsf3>
c000a019:	89 04 24             	mov    DWORD PTR [esp],eax
c000a01c:	e8 26 db 01 00       	call   c0027b47 <__extendsfdf2>
c000a021:	83 c4 10             	add    esp,0x10
c000a024:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a028:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a02c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a030:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a034:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a038:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a03c:	e8 0f d1 01 00       	call   c0027150 <__muldf3>
c000a041:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a044:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a048:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a04c:	e8 f6 da 01 00       	call   c0027b47 <__extendsfdf2>
c000a051:	83 c4 10             	add    esp,0x10
c000a054:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a058:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a05c:	52                   	push   edx
c000a05d:	50                   	push   eax
c000a05e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a062:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a066:	e8 68 ca 01 00       	call   c0026ad3 <__adddf3>
c000a06b:	59                   	pop    ecx
c000a06c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a070:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a074:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a07a:	e8 c8 da 01 00       	call   c0027b47 <__extendsfdf2>
c000a07f:	83 c4 10             	add    esp,0x10
c000a082:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a086:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a08a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a08e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a092:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a096:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a09a:	e8 b1 d0 01 00       	call   c0027150 <__muldf3>
c000a09f:	83 c4 10             	add    esp,0x10
c000a0a2:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0a6:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0aa:	52                   	push   edx
c000a0ab:	50                   	push   eax
c000a0ac:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a0b0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a0b4:	e8 1a ca 01 00       	call   c0026ad3 <__adddf3>
c000a0b9:	5f                   	pop    edi
c000a0ba:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a0be:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a0c2:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a0c8:	e8 7a da 01 00       	call   c0027b47 <__extendsfdf2>
c000a0cd:	83 c4 10             	add    esp,0x10
c000a0d0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0d4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0e0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0e4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0e8:	e8 63 d0 01 00       	call   c0027150 <__muldf3>
c000a0ed:	83 c4 10             	add    esp,0x10
c000a0f0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0f4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0f8:	52                   	push   edx
c000a0f9:	50                   	push   eax
c000a0fa:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a0fe:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a102:	e8 cc c9 01 00       	call   c0026ad3 <__adddf3>
c000a107:	59                   	pop    ecx
c000a108:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a10c:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a110:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a116:	e8 2c da 01 00       	call   c0027b47 <__extendsfdf2>
c000a11b:	83 c4 10             	add    esp,0x10
c000a11e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a122:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a126:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a12a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a12e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a132:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a136:	e8 15 d0 01 00       	call   c0027150 <__muldf3>
c000a13b:	83 c4 10             	add    esp,0x10
c000a13e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a142:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a146:	52                   	push   edx
c000a147:	50                   	push   eax
c000a148:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a14c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a150:	e8 7e c9 01 00       	call   c0026ad3 <__adddf3>
c000a155:	5f                   	pop    edi
c000a156:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a15a:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a15e:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a164:	e8 de d9 01 00       	call   c0027b47 <__extendsfdf2>
c000a169:	83 c4 10             	add    esp,0x10
c000a16c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a170:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a174:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a178:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a17c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a180:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a184:	e8 c7 cf 01 00       	call   c0027150 <__muldf3>
c000a189:	83 c4 10             	add    esp,0x10
c000a18c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a190:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a194:	52                   	push   edx
c000a195:	50                   	push   eax
c000a196:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a19a:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a19e:	e8 30 c9 01 00       	call   c0026ad3 <__adddf3>
c000a1a3:	83 c4 10             	add    esp,0x10
c000a1a6:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a1aa:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a1ae:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a1b2:	85 db                	test   ebx,ebx
c000a1b4:	0f 8f 36 fe ff ff    	jg     c0009ff0 <calc_output_quad+0x2b1>
c000a1ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a1be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a1c2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a1c6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a1ca:	e8 04 c9 01 00       	call   c0026ad3 <__adddf3>
c000a1cf:	83 c4 10             	add    esp,0x10
c000a1d2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a1d6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a1da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1e2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1ea:	e8 61 cf 01 00       	call   c0027150 <__muldf3>
c000a1ef:	59                   	pop    ecx
c000a1f0:	5b                   	pop    ebx
c000a1f1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a1f5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a1f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a201:	e8 1d d8 01 00       	call   c0027a23 <__truncdfsf2>
c000a206:	83 c4 10             	add    esp,0x10
c000a209:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a210:	89 06                	mov    DWORD PTR [esi],eax
c000a212:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a216:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a21a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a21e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a222:	e8 ac c8 01 00       	call   c0026ad3 <__adddf3>
c000a227:	83 c4 10             	add    esp,0x10
c000a22a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a22e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a232:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a236:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a23a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a23e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a242:	e8 09 cf 01 00       	call   c0027150 <__muldf3>
c000a247:	5e                   	pop    esi
c000a248:	5f                   	pop    edi
c000a249:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a24d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a251:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a255:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a259:	e8 c5 d7 01 00       	call   c0027a23 <__truncdfsf2>
c000a25e:	83 c4 10             	add    esp,0x10
c000a261:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a268:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a26b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a26f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a273:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a277:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a27b:	e8 53 c8 01 00       	call   c0026ad3 <__adddf3>
c000a280:	83 c4 10             	add    esp,0x10
c000a283:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a287:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a28b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a28f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a293:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a297:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a29b:	e8 b0 ce 01 00       	call   c0027150 <__muldf3>
c000a2a0:	5d                   	pop    ebp
c000a2a1:	59                   	pop    ecx
c000a2a2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a2a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a2aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2b2:	e8 6c d7 01 00       	call   c0027a23 <__truncdfsf2>
c000a2b7:	83 c4 10             	add    esp,0x10
c000a2ba:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a2c1:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a2c4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a2c8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a2cc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a2d0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a2d4:	e8 fa c7 01 00       	call   c0026ad3 <__adddf3>
c000a2d9:	83 c4 10             	add    esp,0x10
c000a2dc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a2e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a2e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2f4:	e8 57 ce 01 00       	call   c0027150 <__muldf3>
c000a2f9:	5b                   	pop    ebx
c000a2fa:	5e                   	pop    esi
c000a2fb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a2ff:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a303:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a307:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a30b:	e8 13 d7 01 00       	call   c0027a23 <__truncdfsf2>
c000a310:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a317:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a31a:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a320:	5b                   	pop    ebx
c000a321:	5e                   	pop    esi
c000a322:	5f                   	pop    edi
c000a323:	5d                   	pop    ebp
c000a324:	c3                   	ret    

c000a325 <calc_output_hex>:
c000a325:	55                   	push   ebp
c000a326:	89 cd                	mov    ebp,ecx
c000a328:	57                   	push   edi
c000a329:	56                   	push   esi
c000a32a:	53                   	push   ebx
c000a32b:	89 c3                	mov    ebx,eax
c000a32d:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a333:	89 14 24             	mov    DWORD PTR [esp],edx
c000a336:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a33d:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a344:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a348:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a34c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a34f:	e8 6f f3 ff ff       	call   c00096c3 <int_to_fp>
c000a354:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a357:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a35b:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a35e:	29 c8                	sub    eax,ecx
c000a360:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a364:	99                   	cdq    
c000a365:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a36d:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a370:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a378:	0f af f8             	imul   edi,eax
c000a37b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a37e:	01 cf                	add    edi,ecx
c000a380:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a384:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a387:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a38b:	0f af c2             	imul   eax,edx
c000a38e:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a392:	29 c1                	sub    ecx,eax
c000a394:	31 d2                	xor    edx,edx
c000a396:	31 c0                	xor    eax,eax
c000a398:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a39b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a39f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a3a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a3a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a3ab:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a3af:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a3b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a3b7:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a3bb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a3bf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a3c3:	89 f8                	mov    eax,edi
c000a3c5:	e8 07 f3 ff ff       	call   c00096d1 <fp_to_double>
c000a3ca:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a3ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a3d2:	89 f8                	mov    eax,edi
c000a3d4:	e8 ee f2 ff ff       	call   c00096c7 <fp_to_int>
c000a3d9:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a3dd:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a3e0:	52                   	push   edx
c000a3e1:	52                   	push   edx
c000a3e2:	51                   	push   ecx
c000a3e3:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a3e7:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a3ee:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a3f2:	e8 71 c0 01 00       	call   c0026468 <__subsf3>
c000a3f7:	89 04 24             	mov    DWORD PTR [esp],eax
c000a3fa:	e8 48 d7 01 00       	call   c0027b47 <__extendsfdf2>
c000a3ff:	83 c4 10             	add    esp,0x10
c000a402:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a406:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a40a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a40e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a412:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a416:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a41a:	e8 31 cd 01 00       	call   c0027150 <__muldf3>
c000a41f:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a423:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a427:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a42a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a42e:	e8 14 d7 01 00       	call   c0027b47 <__extendsfdf2>
c000a433:	83 c4 10             	add    esp,0x10
c000a436:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a43a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a43e:	52                   	push   edx
c000a43f:	50                   	push   eax
c000a440:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a444:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a448:	e8 86 c6 01 00       	call   c0026ad3 <__adddf3>
c000a44d:	59                   	pop    ecx
c000a44e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a452:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a456:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a45c:	e8 e6 d6 01 00       	call   c0027b47 <__extendsfdf2>
c000a461:	83 c4 10             	add    esp,0x10
c000a464:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a468:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a474:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a478:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a47c:	e8 cf cc 01 00       	call   c0027150 <__muldf3>
c000a481:	83 c4 10             	add    esp,0x10
c000a484:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a488:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a48c:	52                   	push   edx
c000a48d:	50                   	push   eax
c000a48e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a492:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a496:	e8 38 c6 01 00       	call   c0026ad3 <__adddf3>
c000a49b:	59                   	pop    ecx
c000a49c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a4a0:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a4a4:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a4aa:	e8 98 d6 01 00       	call   c0027b47 <__extendsfdf2>
c000a4af:	83 c4 10             	add    esp,0x10
c000a4b2:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4b6:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4c6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4ca:	e8 81 cc 01 00       	call   c0027150 <__muldf3>
c000a4cf:	83 c4 10             	add    esp,0x10
c000a4d2:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4d6:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4da:	52                   	push   edx
c000a4db:	50                   	push   eax
c000a4dc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e4:	e8 ea c5 01 00       	call   c0026ad3 <__adddf3>
c000a4e9:	59                   	pop    ecx
c000a4ea:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a4ee:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a4f2:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a4f8:	e8 4a d6 01 00       	call   c0027b47 <__extendsfdf2>
c000a4fd:	83 c4 10             	add    esp,0x10
c000a500:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a504:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a508:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a50c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a510:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a514:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a518:	e8 33 cc 01 00       	call   c0027150 <__muldf3>
c000a51d:	83 c4 10             	add    esp,0x10
c000a520:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a524:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a528:	52                   	push   edx
c000a529:	50                   	push   eax
c000a52a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a52e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a532:	e8 9c c5 01 00       	call   c0026ad3 <__adddf3>
c000a537:	59                   	pop    ecx
c000a538:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a53c:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a540:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a546:	e8 fc d5 01 00       	call   c0027b47 <__extendsfdf2>
c000a54b:	83 c4 10             	add    esp,0x10
c000a54e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a552:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a556:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a55a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a55e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a562:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a566:	e8 e5 cb 01 00       	call   c0027150 <__muldf3>
c000a56b:	83 c4 10             	add    esp,0x10
c000a56e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a572:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a576:	52                   	push   edx
c000a577:	50                   	push   eax
c000a578:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a57c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a580:	e8 4e c5 01 00       	call   c0026ad3 <__adddf3>
c000a585:	59                   	pop    ecx
c000a586:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a58a:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a58e:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a594:	e8 ae d5 01 00       	call   c0027b47 <__extendsfdf2>
c000a599:	83 c4 10             	add    esp,0x10
c000a59c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5a4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5ac:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5b0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5b4:	e8 97 cb 01 00       	call   c0027150 <__muldf3>
c000a5b9:	83 c4 10             	add    esp,0x10
c000a5bc:	83 c6 18             	add    esi,0x18
c000a5bf:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5c3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5c7:	52                   	push   edx
c000a5c8:	50                   	push   eax
c000a5c9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a5cd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a5d1:	e8 fd c4 01 00       	call   c0026ad3 <__adddf3>
c000a5d6:	59                   	pop    ecx
c000a5d7:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a5db:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a5df:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a5e5:	e8 5d d5 01 00       	call   c0027b47 <__extendsfdf2>
c000a5ea:	83 c4 10             	add    esp,0x10
c000a5ed:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5f1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5fd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a601:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a605:	e8 46 cb 01 00       	call   c0027150 <__muldf3>
c000a60a:	83 c4 10             	add    esp,0x10
c000a60d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a611:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a615:	52                   	push   edx
c000a616:	50                   	push   eax
c000a617:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a61b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a61f:	e8 af c4 01 00       	call   c0026ad3 <__adddf3>
c000a624:	83 c4 10             	add    esp,0x10
c000a627:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a62b:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a62f:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a632:	0f 89 8b fd ff ff    	jns    c000a3c3 <calc_output_hex+0x9e>
c000a638:	31 f6                	xor    esi,esi
c000a63a:	31 ff                	xor    edi,edi
c000a63c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a640:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a643:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a647:	29 e9                	sub    ecx,ebp
c000a649:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a64d:	29 c8                	sub    eax,ecx
c000a64f:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a652:	99                   	cdq    
c000a653:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a657:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a65a:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a65e:	0f af e8             	imul   ebp,eax
c000a661:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a665:	40                   	inc    eax
c000a666:	01 cd                	add    ebp,ecx
c000a668:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a66d:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a671:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a675:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a679:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a67c:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a680:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a684:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a688:	89 e8                	mov    eax,ebp
c000a68a:	e8 42 f0 ff ff       	call   c00096d1 <fp_to_double>
c000a68f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a693:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a697:	89 e8                	mov    eax,ebp
c000a699:	e8 29 f0 ff ff       	call   c00096c7 <fp_to_int>
c000a69e:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a6a2:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a6a5:	52                   	push   edx
c000a6a6:	52                   	push   edx
c000a6a7:	51                   	push   ecx
c000a6a8:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a6af:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a6b6:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a6ba:	e8 a9 bd 01 00       	call   c0026468 <__subsf3>
c000a6bf:	89 04 24             	mov    DWORD PTR [esp],eax
c000a6c2:	e8 80 d4 01 00       	call   c0027b47 <__extendsfdf2>
c000a6c7:	83 c4 10             	add    esp,0x10
c000a6ca:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a6ce:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a6d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6da:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a6de:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a6e2:	e8 69 ca 01 00       	call   c0027150 <__muldf3>
c000a6e7:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a6ee:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a6f2:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a6f5:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a6f9:	e8 49 d4 01 00       	call   c0027b47 <__extendsfdf2>
c000a6fe:	83 c4 10             	add    esp,0x10
c000a701:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a705:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a709:	52                   	push   edx
c000a70a:	50                   	push   eax
c000a70b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a70f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a713:	e8 bb c3 01 00       	call   c0026ad3 <__adddf3>
c000a718:	59                   	pop    ecx
c000a719:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a71d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a721:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a727:	e8 1b d4 01 00       	call   c0027b47 <__extendsfdf2>
c000a72c:	83 c4 10             	add    esp,0x10
c000a72f:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a733:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a737:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a73b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a73f:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a743:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a747:	e8 04 ca 01 00       	call   c0027150 <__muldf3>
c000a74c:	83 c4 10             	add    esp,0x10
c000a74f:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a753:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a757:	52                   	push   edx
c000a758:	50                   	push   eax
c000a759:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a75d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a761:	e8 6d c3 01 00       	call   c0026ad3 <__adddf3>
c000a766:	59                   	pop    ecx
c000a767:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a76b:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a76f:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a775:	e8 cd d3 01 00       	call   c0027b47 <__extendsfdf2>
c000a77a:	83 c4 10             	add    esp,0x10
c000a77d:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a781:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a785:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a789:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a78d:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a791:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a795:	e8 b6 c9 01 00       	call   c0027150 <__muldf3>
c000a79a:	83 c4 10             	add    esp,0x10
c000a79d:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7a1:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7a5:	52                   	push   edx
c000a7a6:	50                   	push   eax
c000a7a7:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a7ab:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a7af:	e8 1f c3 01 00       	call   c0026ad3 <__adddf3>
c000a7b4:	59                   	pop    ecx
c000a7b5:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a7b9:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a7bd:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a7c3:	e8 7f d3 01 00       	call   c0027b47 <__extendsfdf2>
c000a7c8:	83 c4 10             	add    esp,0x10
c000a7cb:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7cf:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7db:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7df:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7e3:	e8 68 c9 01 00       	call   c0027150 <__muldf3>
c000a7e8:	83 c4 10             	add    esp,0x10
c000a7eb:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7ef:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7f3:	52                   	push   edx
c000a7f4:	50                   	push   eax
c000a7f5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7f9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7fd:	e8 d1 c2 01 00       	call   c0026ad3 <__adddf3>
c000a802:	59                   	pop    ecx
c000a803:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000a807:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000a80b:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a811:	e8 31 d3 01 00       	call   c0027b47 <__extendsfdf2>
c000a816:	83 c4 10             	add    esp,0x10
c000a819:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a81d:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a821:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a825:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a829:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a82d:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a831:	e8 1a c9 01 00       	call   c0027150 <__muldf3>
c000a836:	83 c4 10             	add    esp,0x10
c000a839:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a83d:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a841:	52                   	push   edx
c000a842:	50                   	push   eax
c000a843:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a847:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a84b:	e8 83 c2 01 00       	call   c0026ad3 <__adddf3>
c000a850:	59                   	pop    ecx
c000a851:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a855:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a859:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000a85f:	e8 e3 d2 01 00       	call   c0027b47 <__extendsfdf2>
c000a864:	83 c4 10             	add    esp,0x10
c000a867:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a86b:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a86f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a873:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a877:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a87b:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a87f:	e8 cc c8 01 00       	call   c0027150 <__muldf3>
c000a884:	83 c4 10             	add    esp,0x10
c000a887:	83 eb 18             	sub    ebx,0x18
c000a88a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a88e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a892:	52                   	push   edx
c000a893:	50                   	push   eax
c000a894:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a898:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a89c:	e8 32 c2 01 00       	call   c0026ad3 <__adddf3>
c000a8a1:	59                   	pop    ecx
c000a8a2:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a8a6:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000a8aa:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000a8b0:	e8 92 d2 01 00       	call   c0027b47 <__extendsfdf2>
c000a8b5:	83 c4 10             	add    esp,0x10
c000a8b8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8bc:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8c8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8cc:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8d0:	e8 7b c8 01 00       	call   c0027150 <__muldf3>
c000a8d5:	83 c4 10             	add    esp,0x10
c000a8d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8dc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8e0:	52                   	push   edx
c000a8e1:	50                   	push   eax
c000a8e2:	57                   	push   edi
c000a8e3:	56                   	push   esi
c000a8e4:	e8 ea c1 01 00       	call   c0026ad3 <__adddf3>
c000a8e9:	83 c4 10             	add    esp,0x10
c000a8ec:	89 c6                	mov    esi,eax
c000a8ee:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000a8f1:	89 d7                	mov    edi,edx
c000a8f3:	85 ed                	test   ebp,ebp
c000a8f5:	0f 8f 8d fd ff ff    	jg     c000a688 <calc_output_hex+0x363>
c000a8fb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8ff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a903:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a907:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a90b:	e8 c3 c1 01 00       	call   c0026ad3 <__adddf3>
c000a910:	83 c4 10             	add    esp,0x10
c000a913:	89 04 24             	mov    DWORD PTR [esp],eax
c000a916:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a91a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a91e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a922:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a926:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a92a:	e8 21 c8 01 00       	call   c0027150 <__muldf3>
c000a92f:	59                   	pop    ecx
c000a930:	5b                   	pop    ebx
c000a931:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a935:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a939:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a93d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a941:	e8 dd d0 01 00       	call   c0027a23 <__truncdfsf2>
c000a946:	83 c4 10             	add    esp,0x10
c000a949:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a950:	89 03                	mov    DWORD PTR [ebx],eax
c000a952:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a956:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a95a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a95e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a962:	e8 6c c1 01 00       	call   c0026ad3 <__adddf3>
c000a967:	83 c4 10             	add    esp,0x10
c000a96a:	89 04 24             	mov    DWORD PTR [esp],eax
c000a96d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a971:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a975:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a979:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a97d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a981:	e8 ca c7 01 00       	call   c0027150 <__muldf3>
c000a986:	5d                   	pop    ebp
c000a987:	59                   	pop    ecx
c000a988:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a98c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a990:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a994:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a998:	e8 86 d0 01 00       	call   c0027a23 <__truncdfsf2>
c000a99d:	83 c4 10             	add    esp,0x10
c000a9a0:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a9a7:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000a9aa:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a9ae:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a9b2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a9b6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a9ba:	e8 14 c1 01 00       	call   c0026ad3 <__adddf3>
c000a9bf:	83 c4 10             	add    esp,0x10
c000a9c2:	89 04 24             	mov    DWORD PTR [esp],eax
c000a9c5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9c9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9cd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9d1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9d5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9d9:	e8 72 c7 01 00       	call   c0027150 <__muldf3>
c000a9de:	5b                   	pop    ebx
c000a9df:	5d                   	pop    ebp
c000a9e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a9e4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a9e8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9ec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9f0:	e8 2e d0 01 00       	call   c0027a23 <__truncdfsf2>
c000a9f5:	83 c4 10             	add    esp,0x10
c000a9f8:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a9ff:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000aa02:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa06:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa0a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000aa0e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000aa12:	e8 bc c0 01 00       	call   c0026ad3 <__adddf3>
c000aa17:	83 c4 10             	add    esp,0x10
c000aa1a:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa1d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa21:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa25:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa29:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa2d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa31:	e8 1a c7 01 00       	call   c0027150 <__muldf3>
c000aa36:	59                   	pop    ecx
c000aa37:	5b                   	pop    ebx
c000aa38:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aa3c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa48:	e8 d6 cf 01 00       	call   c0027a23 <__truncdfsf2>
c000aa4d:	83 c4 10             	add    esp,0x10
c000aa50:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aa57:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000aa5a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aa5e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aa62:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aa66:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aa6a:	e8 64 c0 01 00       	call   c0026ad3 <__adddf3>
c000aa6f:	83 c4 10             	add    esp,0x10
c000aa72:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa75:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa79:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa7d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa81:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa85:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa89:	e8 c2 c6 01 00       	call   c0027150 <__muldf3>
c000aa8e:	5d                   	pop    ebp
c000aa8f:	59                   	pop    ecx
c000aa90:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aa94:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaa0:	e8 7e cf 01 00       	call   c0027a23 <__truncdfsf2>
c000aaa5:	83 c4 10             	add    esp,0x10
c000aaa8:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aaaf:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000aab2:	57                   	push   edi
c000aab3:	56                   	push   esi
c000aab4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aab8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aabc:	e8 12 c0 01 00       	call   c0026ad3 <__adddf3>
c000aac1:	83 c4 10             	add    esp,0x10
c000aac4:	89 04 24             	mov    DWORD PTR [esp],eax
c000aac7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aacb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aacf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aad3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aad7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aadb:	e8 70 c6 01 00       	call   c0027150 <__muldf3>
c000aae0:	5b                   	pop    ebx
c000aae1:	5e                   	pop    esi
c000aae2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aae6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aaea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaf2:	e8 2c cf 01 00       	call   c0027a23 <__truncdfsf2>
c000aaf7:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000aafe:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000ab01:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ab07:	5b                   	pop    ebx
c000ab08:	5e                   	pop    esi
c000ab09:	5f                   	pop    edi
c000ab0a:	5d                   	pop    ebp
c000ab0b:	c3                   	ret    

c000ab0c <sinc_reset>:
c000ab0c:	56                   	push   esi
c000ab0d:	53                   	push   ebx
c000ab0e:	51                   	push   ecx
c000ab0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab13:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000ab16:	85 db                	test   ebx,ebx
c000ab18:	74 59                	je     c000ab73 <sinc_reset+0x67>
c000ab1a:	31 d2                	xor    edx,edx
c000ab1c:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ab23:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ab26:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ab29:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ab30:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ab37:	31 c0                	xor    eax,eax
c000ab39:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ab3f:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ab42:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ab45:	52                   	push   edx
c000ab46:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ab49:	c1 e0 02             	shl    eax,0x2
c000ab4c:	50                   	push   eax
c000ab4d:	6a 00                	push   0x0
c000ab4f:	56                   	push   esi
c000ab50:	e8 6f 5b ff ff       	call   c00006c4 <memset>
c000ab55:	83 c4 0c             	add    esp,0xc
c000ab58:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ab5b:	c1 e0 02             	shl    eax,0x2
c000ab5e:	50                   	push   eax
c000ab5f:	68 aa 00 00 00       	push   0xaa
c000ab64:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ab67:	8d 04 86             	lea    eax,[esi+eax*4]
c000ab6a:	50                   	push   eax
c000ab6b:	e8 54 5b ff ff       	call   c00006c4 <memset>
c000ab70:	83 c4 10             	add    esp,0x10
c000ab73:	58                   	pop    eax
c000ab74:	5b                   	pop    ebx
c000ab75:	5e                   	pop    esi
c000ab76:	c3                   	ret    

c000ab77 <calc_output_multi>:
c000ab77:	55                   	push   ebp
c000ab78:	57                   	push   edi
c000ab79:	56                   	push   esi
c000ab7a:	89 c6                	mov    esi,eax
c000ab7c:	53                   	push   ebx
c000ab7d:	83 ec 4c             	sub    esp,0x4c
c000ab80:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ab84:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ab88:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ab8c:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ab90:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000ab94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ab98:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ab9c:	8d 46 44             	lea    eax,[esi+0x44]
c000ab9f:	89 04 24             	mov    DWORD PTR [esp],eax
c000aba2:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000aba8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000abac:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000abaf:	e8 0f eb ff ff       	call   c00096c3 <int_to_fp>
c000abb4:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000abb7:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000abbb:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000abbf:	99                   	cdq    
c000abc0:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000abc4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000abc8:	0f af d0             	imul   edx,eax
c000abcb:	0f af c3             	imul   eax,ebx
c000abce:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000abd2:	29 c1                	sub    ecx,eax
c000abd4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000abd8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000abdc:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000abe3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000abe7:	57                   	push   edi
c000abe8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000abec:	6a 00                	push   0x0
c000abee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abf2:	e8 cd 5a ff ff       	call   c00006c4 <memset>
c000abf7:	83 c4 10             	add    esp,0x10
c000abfa:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000abfe:	89 df                	mov    edi,ebx
c000ac00:	e8 cc ea ff ff       	call   c00096d1 <fp_to_double>
c000ac05:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ac09:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ac0d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ac11:	e8 b1 ea ff ff       	call   c00096c7 <fp_to_int>
c000ac16:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ac19:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ac1c:	51                   	push   ecx
c000ac1d:	51                   	push   ecx
c000ac1e:	55                   	push   ebp
c000ac1f:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ac23:	e8 40 b8 01 00       	call   c0026468 <__subsf3>
c000ac28:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac2b:	e8 17 cf 01 00       	call   c0027b47 <__extendsfdf2>
c000ac30:	83 c4 10             	add    esp,0x10
c000ac33:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ac37:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac43:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac47:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac4b:	e8 00 c5 01 00       	call   c0027150 <__muldf3>
c000ac50:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ac53:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ac57:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ac5b:	e8 e7 ce 01 00       	call   c0027b47 <__extendsfdf2>
c000ac60:	83 c4 10             	add    esp,0x10
c000ac63:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ac67:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac6b:	52                   	push   edx
c000ac6c:	50                   	push   eax
c000ac6d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac71:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac75:	e8 59 be 01 00       	call   c0026ad3 <__adddf3>
c000ac7a:	83 c4 10             	add    esp,0x10
c000ac7d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ac81:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ac85:	89 f8                	mov    eax,edi
c000ac87:	b9 08 00 00 00       	mov    ecx,0x8
c000ac8c:	99                   	cdq    
c000ac8d:	f7 f9                	idiv   ecx
c000ac8f:	4a                   	dec    edx
c000ac90:	83 fa 06             	cmp    edx,0x6
c000ac93:	77 07                	ja     c000ac9c <calc_output_multi+0x125>
c000ac95:	ff 24 95 64 93 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6c9c]
c000ac9c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ac9f:	4f                   	dec    edi
c000aca0:	83 ec 0c             	sub    esp,0xc
c000aca3:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aca6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000acaa:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000acb1:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000acb5:	e8 8d ce 01 00       	call   c0027b47 <__extendsfdf2>
c000acba:	83 c4 10             	add    esp,0x10
c000acbd:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000acc1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000acc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000acc9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000accd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000acd1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000acd5:	e8 76 c4 01 00       	call   c0027150 <__muldf3>
c000acda:	83 c4 10             	add    esp,0x10
c000acdd:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ace1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ace5:	52                   	push   edx
c000ace6:	50                   	push   eax
c000ace7:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000acea:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aced:	e8 e1 bd 01 00       	call   c0026ad3 <__adddf3>
c000acf2:	83 c4 10             	add    esp,0x10
c000acf5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000acf8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000acfb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000acfe:	4f                   	dec    edi
c000acff:	83 ec 0c             	sub    esp,0xc
c000ad02:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ad05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ad09:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ad10:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ad14:	e8 2e ce 01 00       	call   c0027b47 <__extendsfdf2>
c000ad19:	83 c4 10             	add    esp,0x10
c000ad1c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad20:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad2c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad30:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad34:	e8 17 c4 01 00       	call   c0027150 <__muldf3>
c000ad39:	83 c4 10             	add    esp,0x10
c000ad3c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad40:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad44:	52                   	push   edx
c000ad45:	50                   	push   eax
c000ad46:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ad49:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ad4c:	e8 82 bd 01 00       	call   c0026ad3 <__adddf3>
c000ad51:	83 c4 10             	add    esp,0x10
c000ad54:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ad57:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ad5a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ad5d:	4f                   	dec    edi
c000ad5e:	83 ec 0c             	sub    esp,0xc
c000ad61:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ad64:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ad68:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ad6f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ad73:	e8 cf cd 01 00       	call   c0027b47 <__extendsfdf2>
c000ad78:	83 c4 10             	add    esp,0x10
c000ad7b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad7f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad83:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad87:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad8b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad8f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad93:	e8 b8 c3 01 00       	call   c0027150 <__muldf3>
c000ad98:	83 c4 10             	add    esp,0x10
c000ad9b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad9f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ada3:	52                   	push   edx
c000ada4:	50                   	push   eax
c000ada5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ada8:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000adab:	e8 23 bd 01 00       	call   c0026ad3 <__adddf3>
c000adb0:	83 c4 10             	add    esp,0x10
c000adb3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000adb6:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000adb9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000adbc:	4f                   	dec    edi
c000adbd:	83 ec 0c             	sub    esp,0xc
c000adc0:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000adc3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000adc7:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000adce:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000add2:	e8 70 cd 01 00       	call   c0027b47 <__extendsfdf2>
c000add7:	83 c4 10             	add    esp,0x10
c000adda:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000adde:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ade2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ade6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000adea:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000adee:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000adf2:	e8 59 c3 01 00       	call   c0027150 <__muldf3>
c000adf7:	83 c4 10             	add    esp,0x10
c000adfa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000adfe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae02:	52                   	push   edx
c000ae03:	50                   	push   eax
c000ae04:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ae07:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ae0a:	e8 c4 bc 01 00       	call   c0026ad3 <__adddf3>
c000ae0f:	83 c4 10             	add    esp,0x10
c000ae12:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ae15:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ae18:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae1b:	4f                   	dec    edi
c000ae1c:	83 ec 0c             	sub    esp,0xc
c000ae1f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae22:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae26:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae2d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae31:	e8 11 cd 01 00       	call   c0027b47 <__extendsfdf2>
c000ae36:	83 c4 10             	add    esp,0x10
c000ae39:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae3d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae45:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae49:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae4d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae51:	e8 fa c2 01 00       	call   c0027150 <__muldf3>
c000ae56:	83 c4 10             	add    esp,0x10
c000ae59:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae5d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae61:	52                   	push   edx
c000ae62:	50                   	push   eax
c000ae63:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ae66:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ae69:	e8 65 bc 01 00       	call   c0026ad3 <__adddf3>
c000ae6e:	83 c4 10             	add    esp,0x10
c000ae71:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ae74:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ae77:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae7a:	4f                   	dec    edi
c000ae7b:	83 ec 0c             	sub    esp,0xc
c000ae7e:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae81:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae85:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae8c:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae90:	e8 b2 cc 01 00       	call   c0027b47 <__extendsfdf2>
c000ae95:	83 c4 10             	add    esp,0x10
c000ae98:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae9c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aea0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aea4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aea8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeac:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeb0:	e8 9b c2 01 00       	call   c0027150 <__muldf3>
c000aeb5:	83 c4 10             	add    esp,0x10
c000aeb8:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aebc:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aec0:	52                   	push   edx
c000aec1:	50                   	push   eax
c000aec2:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aec5:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aec8:	e8 06 bc 01 00       	call   c0026ad3 <__adddf3>
c000aecd:	83 c4 10             	add    esp,0x10
c000aed0:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aed3:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aed6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aed9:	4f                   	dec    edi
c000aeda:	83 ec 0c             	sub    esp,0xc
c000aedd:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aee0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aee4:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aeeb:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aeef:	e8 53 cc 01 00       	call   c0027b47 <__extendsfdf2>
c000aef4:	83 c4 10             	add    esp,0x10
c000aef7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aefb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aeff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af07:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af0b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af0f:	e8 3c c2 01 00       	call   c0027150 <__muldf3>
c000af14:	83 c4 10             	add    esp,0x10
c000af17:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af1b:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af1f:	52                   	push   edx
c000af20:	50                   	push   eax
c000af21:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af24:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af27:	e8 a7 bb 01 00       	call   c0026ad3 <__adddf3>
c000af2c:	83 c4 10             	add    esp,0x10
c000af2f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af32:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af35:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af38:	4f                   	dec    edi
c000af39:	83 ec 0c             	sub    esp,0xc
c000af3c:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af3f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af43:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af4a:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af4e:	e8 f4 cb 01 00       	call   c0027b47 <__extendsfdf2>
c000af53:	83 c4 10             	add    esp,0x10
c000af56:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af5a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af5e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af62:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af66:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af6a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af6e:	e8 dd c1 01 00       	call   c0027150 <__muldf3>
c000af73:	83 c4 10             	add    esp,0x10
c000af76:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af7a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af7e:	52                   	push   edx
c000af7f:	50                   	push   eax
c000af80:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af83:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af86:	e8 48 bb 01 00       	call   c0026ad3 <__adddf3>
c000af8b:	83 c4 10             	add    esp,0x10
c000af8e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af91:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af94:	85 ff                	test   edi,edi
c000af96:	0f 8f e9 fc ff ff    	jg     c000ac85 <calc_output_multi+0x10e>
c000af9c:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000afa0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000afa4:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000afa8:	0f 89 4c fc ff ff    	jns    c000abfa <calc_output_multi+0x83>
c000afae:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000afb2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000afb6:	29 c8                	sub    eax,ecx
c000afb8:	99                   	cdq    
c000afb9:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000afbd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000afc1:	0f af d0             	imul   edx,eax
c000afc4:	40                   	inc    eax
c000afc5:	01 d1                	add    ecx,edx
c000afc7:	0f af c3             	imul   eax,ebx
c000afca:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000afce:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000afd1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000afd5:	55                   	push   ebp
c000afd6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000afda:	6a 00                	push   0x0
c000afdc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000afe0:	e8 df 56 ff ff       	call   c00006c4 <memset>
c000afe5:	83 c4 10             	add    esp,0x10
c000afe8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000afec:	e8 e0 e6 ff ff       	call   c00096d1 <fp_to_double>
c000aff1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aff5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aff9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000affd:	e8 c5 e6 ff ff       	call   c00096c7 <fp_to_int>
c000b002:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b005:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b008:	57                   	push   edi
c000b009:	57                   	push   edi
c000b00a:	89 df                	mov    edi,ebx
c000b00c:	55                   	push   ebp
c000b00d:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b011:	e8 52 b4 01 00       	call   c0026468 <__subsf3>
c000b016:	89 04 24             	mov    DWORD PTR [esp],eax
c000b019:	e8 29 cb 01 00       	call   c0027b47 <__extendsfdf2>
c000b01e:	83 c4 10             	add    esp,0x10
c000b021:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b025:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b029:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b02d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b031:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b035:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b039:	e8 12 c1 01 00       	call   c0027150 <__muldf3>
c000b03e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b041:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b045:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b049:	e8 f9 ca 01 00       	call   c0027b47 <__extendsfdf2>
c000b04e:	83 c4 10             	add    esp,0x10
c000b051:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b055:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b059:	52                   	push   edx
c000b05a:	50                   	push   eax
c000b05b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b05f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b063:	e8 6b ba 01 00       	call   c0026ad3 <__adddf3>
c000b068:	83 c4 10             	add    esp,0x10
c000b06b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b06f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b073:	89 f8                	mov    eax,edi
c000b075:	b9 08 00 00 00       	mov    ecx,0x8
c000b07a:	99                   	cdq    
c000b07b:	f7 f9                	idiv   ecx
c000b07d:	4a                   	dec    edx
c000b07e:	83 fa 06             	cmp    edx,0x6
c000b081:	77 07                	ja     c000b08a <calc_output_multi+0x513>
c000b083:	ff 24 95 80 93 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6c80]
c000b08a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b08e:	4f                   	dec    edi
c000b08f:	83 ec 0c             	sub    esp,0xc
c000b092:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b095:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b099:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0a0:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0a4:	e8 9e ca 01 00       	call   c0027b47 <__extendsfdf2>
c000b0a9:	83 c4 10             	add    esp,0x10
c000b0ac:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b0b0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b0b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b0c0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b0c4:	e8 87 c0 01 00       	call   c0027150 <__muldf3>
c000b0c9:	83 c4 10             	add    esp,0x10
c000b0cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b0d0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b0d4:	52                   	push   edx
c000b0d5:	50                   	push   eax
c000b0d6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0d9:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0dc:	e8 f2 b9 01 00       	call   c0026ad3 <__adddf3>
c000b0e1:	83 c4 10             	add    esp,0x10
c000b0e4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0e7:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b0ee:	4f                   	dec    edi
c000b0ef:	83 ec 0c             	sub    esp,0xc
c000b0f2:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0f9:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b100:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b104:	e8 3e ca 01 00       	call   c0027b47 <__extendsfdf2>
c000b109:	83 c4 10             	add    esp,0x10
c000b10c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b110:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b114:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b118:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b120:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b124:	e8 27 c0 01 00       	call   c0027150 <__muldf3>
c000b129:	83 c4 10             	add    esp,0x10
c000b12c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b130:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b134:	52                   	push   edx
c000b135:	50                   	push   eax
c000b136:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b139:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b13c:	e8 92 b9 01 00       	call   c0026ad3 <__adddf3>
c000b141:	83 c4 10             	add    esp,0x10
c000b144:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b147:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b14a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b14e:	4f                   	dec    edi
c000b14f:	83 ec 0c             	sub    esp,0xc
c000b152:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b155:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b159:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b160:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b164:	e8 de c9 01 00       	call   c0027b47 <__extendsfdf2>
c000b169:	83 c4 10             	add    esp,0x10
c000b16c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b170:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b174:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b178:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b17c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b180:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b184:	e8 c7 bf 01 00       	call   c0027150 <__muldf3>
c000b189:	83 c4 10             	add    esp,0x10
c000b18c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b190:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b194:	52                   	push   edx
c000b195:	50                   	push   eax
c000b196:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b199:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b19c:	e8 32 b9 01 00       	call   c0026ad3 <__adddf3>
c000b1a1:	83 c4 10             	add    esp,0x10
c000b1a4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1a7:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b1ae:	4f                   	dec    edi
c000b1af:	83 ec 0c             	sub    esp,0xc
c000b1b2:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b1b5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b1b9:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b1c0:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b1c4:	e8 7e c9 01 00       	call   c0027b47 <__extendsfdf2>
c000b1c9:	83 c4 10             	add    esp,0x10
c000b1cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b1d0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b1d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1e0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1e4:	e8 67 bf 01 00       	call   c0027150 <__muldf3>
c000b1e9:	83 c4 10             	add    esp,0x10
c000b1ec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b1f0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b1f4:	52                   	push   edx
c000b1f5:	50                   	push   eax
c000b1f6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b1f9:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b1fc:	e8 d2 b8 01 00       	call   c0026ad3 <__adddf3>
c000b201:	83 c4 10             	add    esp,0x10
c000b204:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b207:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b20a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b20e:	4f                   	dec    edi
c000b20f:	83 ec 0c             	sub    esp,0xc
c000b212:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b215:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b219:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b220:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b224:	e8 1e c9 01 00       	call   c0027b47 <__extendsfdf2>
c000b229:	83 c4 10             	add    esp,0x10
c000b22c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b230:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b234:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b238:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b23c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b240:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b244:	e8 07 bf 01 00       	call   c0027150 <__muldf3>
c000b249:	83 c4 10             	add    esp,0x10
c000b24c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b250:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b254:	52                   	push   edx
c000b255:	50                   	push   eax
c000b256:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b259:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b25c:	e8 72 b8 01 00       	call   c0026ad3 <__adddf3>
c000b261:	83 c4 10             	add    esp,0x10
c000b264:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b267:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b26a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b26e:	4f                   	dec    edi
c000b26f:	83 ec 0c             	sub    esp,0xc
c000b272:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b275:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b279:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b280:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b284:	e8 be c8 01 00       	call   c0027b47 <__extendsfdf2>
c000b289:	83 c4 10             	add    esp,0x10
c000b28c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b290:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b294:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b298:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b29c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2a0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2a4:	e8 a7 be 01 00       	call   c0027150 <__muldf3>
c000b2a9:	83 c4 10             	add    esp,0x10
c000b2ac:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2b0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2b4:	52                   	push   edx
c000b2b5:	50                   	push   eax
c000b2b6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2b9:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2bc:	e8 12 b8 01 00       	call   c0026ad3 <__adddf3>
c000b2c1:	83 c4 10             	add    esp,0x10
c000b2c4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2c7:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2ce:	4f                   	dec    edi
c000b2cf:	83 ec 0c             	sub    esp,0xc
c000b2d2:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2d9:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2e0:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2e4:	e8 5e c8 01 00       	call   c0027b47 <__extendsfdf2>
c000b2e9:	83 c4 10             	add    esp,0x10
c000b2ec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2f0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b300:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b304:	e8 47 be 01 00       	call   c0027150 <__muldf3>
c000b309:	83 c4 10             	add    esp,0x10
c000b30c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b310:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b314:	52                   	push   edx
c000b315:	50                   	push   eax
c000b316:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b319:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b31c:	e8 b2 b7 01 00       	call   c0026ad3 <__adddf3>
c000b321:	83 c4 10             	add    esp,0x10
c000b324:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b327:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b32a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b32e:	4f                   	dec    edi
c000b32f:	83 ec 0c             	sub    esp,0xc
c000b332:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b335:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b339:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b340:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b344:	e8 fe c7 01 00       	call   c0027b47 <__extendsfdf2>
c000b349:	83 c4 10             	add    esp,0x10
c000b34c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b350:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b354:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b358:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b35c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b360:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b364:	e8 e7 bd 01 00       	call   c0027150 <__muldf3>
c000b369:	83 c4 10             	add    esp,0x10
c000b36c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b370:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b374:	52                   	push   edx
c000b375:	50                   	push   eax
c000b376:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b379:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b37c:	e8 52 b7 01 00       	call   c0026ad3 <__adddf3>
c000b381:	83 c4 10             	add    esp,0x10
c000b384:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b387:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b38a:	85 ff                	test   edi,edi
c000b38c:	0f 8f e1 fc ff ff    	jg     c000b073 <calc_output_multi+0x4fc>
c000b392:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b396:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b39a:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b39e:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b3a3:	0f 8f 3f fc ff ff    	jg     c000afe8 <calc_output_multi+0x471>
c000b3a9:	be 08 00 00 00       	mov    esi,0x8
c000b3ae:	89 d8                	mov    eax,ebx
c000b3b0:	99                   	cdq    
c000b3b1:	f7 fe                	idiv   esi
c000b3b3:	4a                   	dec    edx
c000b3b4:	83 fa 06             	cmp    edx,0x6
c000b3b7:	77 07                	ja     c000b3c0 <calc_output_multi+0x849>
c000b3b9:	ff 24 95 9c 93 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6c64]
c000b3c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3c4:	4b                   	dec    ebx
c000b3c5:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b3c9:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b3cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b3d0:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b3d4:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b3d7:	e8 f7 b6 01 00       	call   c0026ad3 <__adddf3>
c000b3dc:	83 c4 10             	add    esp,0x10
c000b3df:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b3e3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b3e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3f7:	e8 54 bd 01 00       	call   c0027150 <__muldf3>
c000b3fc:	5d                   	pop    ebp
c000b3fd:	59                   	pop    ecx
c000b3fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b402:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b406:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b40a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b40e:	e8 10 c6 01 00       	call   c0027a23 <__truncdfsf2>
c000b413:	83 c4 10             	add    esp,0x10
c000b416:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b41a:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b41d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b421:	4b                   	dec    ebx
c000b422:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b426:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b429:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b42d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b431:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b434:	e8 9a b6 01 00       	call   c0026ad3 <__adddf3>
c000b439:	83 c4 10             	add    esp,0x10
c000b43c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b440:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b444:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b448:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b44c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b450:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b454:	e8 f7 bc 01 00       	call   c0027150 <__muldf3>
c000b459:	59                   	pop    ecx
c000b45a:	5f                   	pop    edi
c000b45b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b45f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b463:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b467:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b46b:	e8 b3 c5 01 00       	call   c0027a23 <__truncdfsf2>
c000b470:	83 c4 10             	add    esp,0x10
c000b473:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b477:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b47a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b47e:	4b                   	dec    ebx
c000b47f:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b483:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b486:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b48a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b48e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b491:	e8 3d b6 01 00       	call   c0026ad3 <__adddf3>
c000b496:	83 c4 10             	add    esp,0x10
c000b499:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b49d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b4a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4b1:	e8 9a bc 01 00       	call   c0027150 <__muldf3>
c000b4b6:	5f                   	pop    edi
c000b4b7:	5d                   	pop    ebp
c000b4b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b4bc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b4c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4c8:	e8 56 c5 01 00       	call   c0027a23 <__truncdfsf2>
c000b4cd:	83 c4 10             	add    esp,0x10
c000b4d0:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b4d4:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b4d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4db:	4b                   	dec    ebx
c000b4dc:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b4e0:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b4e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b4e7:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b4eb:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b4ee:	e8 e0 b5 01 00       	call   c0026ad3 <__adddf3>
c000b4f3:	83 c4 10             	add    esp,0x10
c000b4f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b4fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b4fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b502:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b506:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b50a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b50e:	e8 3d bc 01 00       	call   c0027150 <__muldf3>
c000b513:	5d                   	pop    ebp
c000b514:	59                   	pop    ecx
c000b515:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b519:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b51d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b521:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b525:	e8 f9 c4 01 00       	call   c0027a23 <__truncdfsf2>
c000b52a:	83 c4 10             	add    esp,0x10
c000b52d:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b531:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b534:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b538:	4b                   	dec    ebx
c000b539:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b53d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b540:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b544:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b548:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b54b:	e8 83 b5 01 00       	call   c0026ad3 <__adddf3>
c000b550:	83 c4 10             	add    esp,0x10
c000b553:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b557:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b55b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b55f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b563:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b567:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b56b:	e8 e0 bb 01 00       	call   c0027150 <__muldf3>
c000b570:	59                   	pop    ecx
c000b571:	5f                   	pop    edi
c000b572:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b576:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b57a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b57e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b582:	e8 9c c4 01 00       	call   c0027a23 <__truncdfsf2>
c000b587:	83 c4 10             	add    esp,0x10
c000b58a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b58e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b591:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b595:	4b                   	dec    ebx
c000b596:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b59a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b59d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5a1:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5a5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5a8:	e8 26 b5 01 00       	call   c0026ad3 <__adddf3>
c000b5ad:	83 c4 10             	add    esp,0x10
c000b5b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5b4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5c8:	e8 83 bb 01 00       	call   c0027150 <__muldf3>
c000b5cd:	5f                   	pop    edi
c000b5ce:	5d                   	pop    ebp
c000b5cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5df:	e8 3f c4 01 00       	call   c0027a23 <__truncdfsf2>
c000b5e4:	83 c4 10             	add    esp,0x10
c000b5e7:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b5eb:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b5ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5f2:	4b                   	dec    ebx
c000b5f3:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5f7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5fe:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b602:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b605:	e8 c9 b4 01 00       	call   c0026ad3 <__adddf3>
c000b60a:	83 c4 10             	add    esp,0x10
c000b60d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b611:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b615:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b619:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b61d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b625:	e8 26 bb 01 00       	call   c0027150 <__muldf3>
c000b62a:	5d                   	pop    ebp
c000b62b:	59                   	pop    ecx
c000b62c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b630:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b634:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b638:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b63c:	e8 e2 c3 01 00       	call   c0027a23 <__truncdfsf2>
c000b641:	83 c4 10             	add    esp,0x10
c000b644:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b648:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b64b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b64f:	4b                   	dec    ebx
c000b650:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b654:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b657:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b65b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b65f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b662:	e8 6c b4 01 00       	call   c0026ad3 <__adddf3>
c000b667:	83 c4 10             	add    esp,0x10
c000b66a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b66e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b672:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b676:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b67a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b67e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b682:	e8 c9 ba 01 00       	call   c0027150 <__muldf3>
c000b687:	59                   	pop    ecx
c000b688:	5f                   	pop    edi
c000b689:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b68d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b691:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b695:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b699:	e8 85 c3 01 00       	call   c0027a23 <__truncdfsf2>
c000b69e:	83 c4 10             	add    esp,0x10
c000b6a1:	85 db                	test   ebx,ebx
c000b6a3:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b6a7:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b6aa:	0f 8f fe fc ff ff    	jg     c000b3ae <calc_output_multi+0x837>
c000b6b0:	83 c4 4c             	add    esp,0x4c
c000b6b3:	5b                   	pop    ebx
c000b6b4:	5e                   	pop    esi
c000b6b5:	5f                   	pop    edi
c000b6b6:	5d                   	pop    ebp
c000b6b7:	c3                   	ret    

c000b6b8 <double_to_fp>:
c000b6b8:	83 ec 0c             	sub    esp,0xc
c000b6bb:	68 00 00 b0 40       	push   0x40b00000
c000b6c0:	6a 00                	push   0x0
c000b6c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6ca:	e8 81 ba 01 00       	call   c0027150 <__muldf3>
c000b6cf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b6d3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b6d7:	83 c4 1c             	add    esp,0x1c
c000b6da:	e9 f1 c4 01 00       	jmp    c0027bd0 <lrint>

c000b6df <prepare_data>:
c000b6df:	55                   	push   ebp
c000b6e0:	57                   	push   edi
c000b6e1:	56                   	push   esi
c000b6e2:	53                   	push   ebx
c000b6e3:	83 ec 1c             	sub    esp,0x1c
c000b6e6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b6ea:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b6ee:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b6f2:	0f 89 57 01 00 00    	jns    c000b84f <prepare_data+0x170>
c000b6f8:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b6fb:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b6fe:	85 d2                	test   edx,edx
c000b700:	75 0d                	jne    c000b70f <prepare_data+0x30>
c000b702:	8d 14 36             	lea    edx,[esi+esi*1]
c000b705:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b708:	29 d0                	sub    eax,edx
c000b70a:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b70d:	eb 44                	jmp    c000b753 <prepare_data+0x74>
c000b70f:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b712:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b715:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b718:	39 c1                	cmp    ecx,eax
c000b71a:	7d 04                	jge    c000b720 <prepare_data+0x41>
c000b71c:	29 d0                	sub    eax,edx
c000b71e:	eb 2d                	jmp    c000b74d <prepare_data+0x6e>
c000b720:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b726:	29 d7                	sub    edi,edx
c000b728:	01 f7                	add    edi,esi
c000b72a:	51                   	push   ecx
c000b72b:	29 f2                	sub    edx,esi
c000b72d:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b734:	8d 14 90             	lea    edx,[eax+edx*4]
c000b737:	51                   	push   ecx
c000b738:	52                   	push   edx
c000b739:	50                   	push   eax
c000b73a:	e8 29 4f ff ff       	call   c0000668 <memmove>
c000b73f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b742:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b745:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b748:	29 f0                	sub    eax,esi
c000b74a:	83 c4 10             	add    esp,0x10
c000b74d:	29 f0                	sub    eax,esi
c000b74f:	79 02                	jns    c000b753 <prepare_data+0x74>
c000b751:	31 c0                	xor    eax,eax
c000b753:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b756:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b759:	29 ef                	sub    edi,ebp
c000b75b:	39 c7                	cmp    edi,eax
c000b75d:	7e 02                	jle    c000b761 <prepare_data+0x82>
c000b75f:	89 c7                	mov    edi,eax
c000b761:	89 f8                	mov    eax,edi
c000b763:	99                   	cdq    
c000b764:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b767:	b8 15 00 00 00       	mov    eax,0x15
c000b76c:	29 d7                	sub    edi,edx
c000b76e:	0f 88 dd 00 00 00    	js     c000b851 <prepare_data+0x172>
c000b774:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b777:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b77a:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b77d:	0f 8f ce 00 00 00    	jg     c000b851 <prepare_data+0x172>
c000b783:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b789:	50                   	push   eax
c000b78a:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b791:	50                   	push   eax
c000b792:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b796:	8b 00                	mov    eax,DWORD PTR [eax]
c000b798:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b79b:	50                   	push   eax
c000b79c:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b79f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b7a3:	50                   	push   eax
c000b7a4:	e8 f7 4e ff ff       	call   c00006a0 <memcpy>
c000b7a9:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b7ac:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b7af:	01 fd                	add    ebp,edi
c000b7b1:	01 f9                	add    ecx,edi
c000b7b3:	83 c4 10             	add    esp,0x10
c000b7b6:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b7b9:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b7bc:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b7bf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b7c3:	0f 85 86 00 00 00    	jne    c000b84f <prepare_data+0x170>
c000b7c9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b7cc:	89 e8                	mov    eax,ebp
c000b7ce:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b7d1:	29 c8                	sub    eax,ecx
c000b7d3:	39 f8                	cmp    eax,edi
c000b7d5:	7d 78                	jge    c000b84f <prepare_data+0x170>
c000b7d7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b7db:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b7df:	74 6e                	je     c000b84f <prepare_data+0x170>
c000b7e1:	8d 7e 04             	lea    edi,[esi+0x4]
c000b7e4:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b7e8:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b7eb:	29 ef                	sub    edi,ebp
c000b7ed:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b7f1:	7c 29                	jl     c000b81c <prepare_data+0x13d>
c000b7f3:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b7f6:	29 f1                	sub    ecx,esi
c000b7f8:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b7ff:	55                   	push   ebp
c000b800:	50                   	push   eax
c000b801:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b804:	50                   	push   eax
c000b805:	52                   	push   edx
c000b806:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b80a:	e8 59 4e ff ff       	call   c0000668 <memmove>
c000b80f:	83 c4 10             	add    esp,0x10
c000b812:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b815:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b818:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b81c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000b81f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000b822:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000b825:	83 c6 05             	add    esi,0x5
c000b828:	78 07                	js     c000b831 <prepare_data+0x152>
c000b82a:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b82d:	39 cf                	cmp    edi,ecx
c000b82f:	7e 04                	jle    c000b835 <prepare_data+0x156>
c000b831:	89 ce                	mov    esi,ecx
c000b833:	29 c6                	sub    esi,eax
c000b835:	8d 04 82             	lea    eax,[edx+eax*4]
c000b838:	51                   	push   ecx
c000b839:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000b840:	51                   	push   ecx
c000b841:	6a 00                	push   0x0
c000b843:	50                   	push   eax
c000b844:	e8 7b 4e ff ff       	call   c00006c4 <memset>
c000b849:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000b84c:	83 c4 10             	add    esp,0x10
c000b84f:	31 c0                	xor    eax,eax
c000b851:	83 c4 1c             	add    esp,0x1c
c000b854:	5b                   	pop    ebx
c000b855:	5e                   	pop    esi
c000b856:	5f                   	pop    edi
c000b857:	5d                   	pop    ebp
c000b858:	c3                   	ret    

c000b859 <sinc_multichan_vari_process>:
c000b859:	55                   	push   ebp
c000b85a:	ba 05 00 00 00       	mov    edx,0x5
c000b85f:	57                   	push   edi
c000b860:	56                   	push   esi
c000b861:	53                   	push   ebx
c000b862:	83 ec 4c             	sub    esp,0x4c
c000b865:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000b869:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000b86d:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000b870:	85 db                	test   ebx,ebx
c000b872:	0f 84 9b 06 00 00    	je     c000bf13 <sinc_multichan_vari_process+0x6ba>
c000b878:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000b87b:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000b87e:	0f af c5             	imul   eax,ebp
c000b881:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000b884:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000b887:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000b88e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000b895:	0f af c5             	imul   eax,ebp
c000b898:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000b89b:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000b89e:	8b 06                	mov    eax,DWORD PTR [esi]
c000b8a0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b8a4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8a8:	68 00 00 70 3f       	push   0x3f700000
c000b8ad:	6a 00                	push   0x0
c000b8af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8b7:	e8 63 c1 01 00       	call   c0027a1f <__ltdf2>
c000b8bc:	83 c4 10             	add    esp,0x10
c000b8bf:	ba 16 00 00 00       	mov    edx,0x16
c000b8c4:	85 c0                	test   eax,eax
c000b8c6:	0f 88 47 06 00 00    	js     c000bf13 <sinc_multichan_vari_process+0x6ba>
c000b8cc:	68 00 00 70 40       	push   0x40700000
c000b8d1:	6a 00                	push   0x0
c000b8d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8db:	e8 21 c1 01 00       	call   c0027a01 <__gtdf2>
c000b8e0:	83 c4 10             	add    esp,0x10
c000b8e3:	ba 16 00 00 00       	mov    edx,0x16
c000b8e8:	85 c0                	test   eax,eax
c000b8ea:	0f 8f 23 06 00 00    	jg     c000bf13 <sinc_multichan_vari_process+0x6ba>
c000b8f0:	83 ec 0c             	sub    esp,0xc
c000b8f3:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b8f6:	e8 b8 be 01 00       	call   c00277b3 <__floatsidf>
c000b8fb:	83 c4 10             	add    esp,0x10
c000b8fe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b902:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b906:	68 00 00 00 40       	push   0x40000000
c000b90b:	6a 00                	push   0x0
c000b90d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b911:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b915:	e8 b9 b1 01 00       	call   c0026ad3 <__adddf3>
c000b91a:	59                   	pop    ecx
c000b91b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b91f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b923:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000b926:	e8 88 be 01 00       	call   c00277b3 <__floatsidf>
c000b92b:	83 c4 10             	add    esp,0x10
c000b92e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b932:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b936:	52                   	push   edx
c000b937:	50                   	push   eax
c000b938:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b93c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b940:	e8 ef ba 01 00       	call   c0027434 <__divdf3>
c000b945:	83 c4 10             	add    esp,0x10
c000b948:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b94c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b950:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000b953:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000b956:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b95a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b95e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b962:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b966:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b96a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b96e:	e8 8e c0 01 00       	call   c0027a01 <__gtdf2>
c000b973:	83 c4 10             	add    esp,0x10
c000b976:	85 c0                	test   eax,eax
c000b978:	7e 2d                	jle    c000b9a7 <sinc_multichan_vari_process+0x14e>
c000b97a:	68 00 00 f0 3f       	push   0x3ff00000
c000b97f:	6a 00                	push   0x0
c000b981:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b985:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b989:	e8 91 c0 01 00       	call   c0027a1f <__ltdf2>
c000b98e:	83 c4 10             	add    esp,0x10
c000b991:	85 c0                	test   eax,eax
c000b993:	79 4d                	jns    c000b9e2 <sinc_multichan_vari_process+0x189>
c000b995:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b999:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b99d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b9a1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b9a5:	eb 1b                	jmp    c000b9c2 <sinc_multichan_vari_process+0x169>
c000b9a7:	68 00 00 f0 3f       	push   0x3ff00000
c000b9ac:	6a 00                	push   0x0
c000b9ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b9b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b9b6:	e8 64 c0 01 00       	call   c0027a1f <__ltdf2>
c000b9bb:	83 c4 10             	add    esp,0x10
c000b9be:	85 c0                	test   eax,eax
c000b9c0:	79 20                	jns    c000b9e2 <sinc_multichan_vari_process+0x189>
c000b9c2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b9c6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b9ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9ce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9d2:	e8 5d ba 01 00       	call   c0027434 <__divdf3>
c000b9d7:	83 c4 10             	add    esp,0x10
c000b9da:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b9de:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9e2:	50                   	push   eax
c000b9e3:	50                   	push   eax
c000b9e4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9e8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9ec:	e8 df c1 01 00       	call   c0027bd0 <lrint>
c000b9f1:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000b9f4:	40                   	inc    eax
c000b9f5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b9f9:	0f af c5             	imul   eax,ebp
c000b9fc:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000ba00:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000ba03:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ba07:	58                   	pop    eax
c000ba08:	5a                   	pop    edx
c000ba09:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba0d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba11:	e8 ba c1 01 00       	call   c0027bd0 <lrint>
c000ba16:	83 ec 0c             	sub    esp,0xc
c000ba19:	50                   	push   eax
c000ba1a:	e8 94 bd 01 00       	call   c00277b3 <__floatsidf>
c000ba1f:	83 c4 10             	add    esp,0x10
c000ba22:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ba26:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba2a:	52                   	push   edx
c000ba2b:	50                   	push   eax
c000ba2c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba30:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba34:	e8 eb b6 01 00       	call   c0027124 <__subdf3>
c000ba39:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ba3d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ba41:	83 c4 20             	add    esp,0x20
c000ba44:	6a 00                	push   0x0
c000ba46:	6a 00                	push   0x0
c000ba48:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba4c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba50:	e8 ca bf 01 00       	call   c0027a1f <__ltdf2>
c000ba55:	83 c4 10             	add    esp,0x10
c000ba58:	85 c0                	test   eax,eax
c000ba5a:	79 1f                	jns    c000ba7b <sinc_multichan_vari_process+0x222>
c000ba5c:	68 00 00 f0 3f       	push   0x3ff00000
c000ba61:	6a 00                	push   0x0
c000ba63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba6b:	e8 63 b0 01 00       	call   c0026ad3 <__adddf3>
c000ba70:	83 c4 10             	add    esp,0x10
c000ba73:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ba77:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ba7b:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ba7e:	83 ec 10             	sub    esp,0x10
c000ba81:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ba85:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba90:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba94:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba98:	e8 87 b6 01 00       	call   c0027124 <__subdf3>
c000ba9d:	83 c4 18             	add    esp,0x18
c000baa0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000baa4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000baa8:	52                   	push   edx
c000baa9:	50                   	push   eax
c000baaa:	e8 21 c1 01 00       	call   c0027bd0 <lrint>
c000baaf:	0f af e8             	imul   ebp,eax
c000bab2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bab6:	01 e8                	add    eax,ebp
c000bab8:	99                   	cdq    
c000bab9:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000babc:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000babf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bac3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bac7:	68 00 00 f0 3f       	push   0x3ff00000
c000bacc:	6a 00                	push   0x0
c000bace:	e8 61 b9 01 00       	call   c0027434 <__divdf3>
c000bad3:	83 c4 10             	add    esp,0x10
c000bad6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bada:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bade:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bae3:	68 23 42 92 0c       	push   0xc924223
c000bae8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000baec:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000baf0:	e8 de af 01 00       	call   c0026ad3 <__adddf3>
c000baf5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000baf9:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bafd:	83 c4 20             	add    esp,0x20
c000bb00:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bb08:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bb10:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bb13:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bb16:	7d 50                	jge    c000bb68 <sinc_multichan_vari_process+0x30f>
c000bb18:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bb1b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bb1e:	01 c8                	add    eax,ecx
c000bb20:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bb23:	99                   	cdq    
c000bb24:	f7 f9                	idiv   ecx
c000bb26:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bb2a:	7d 0c                	jge    c000bb38 <sinc_multichan_vari_process+0x2df>
c000bb2c:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bb2f:	85 ed                	test   ebp,ebp
c000bb31:	79 6b                	jns    c000bb9e <sinc_multichan_vari_process+0x345>
c000bb33:	e9 e6 00 00 00       	jmp    c000bc1e <sinc_multichan_vari_process+0x3c5>
c000bb38:	50                   	push   eax
c000bb39:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bb3d:	57                   	push   edi
c000bb3e:	53                   	push   ebx
c000bb3f:	e8 9b fb ff ff       	call   c000b6df <prepare_data>
c000bb44:	83 c4 10             	add    esp,0x10
c000bb47:	89 c2                	mov    edx,eax
c000bb49:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bb4c:	85 c0                	test   eax,eax
c000bb4e:	0f 85 bf 03 00 00    	jne    c000bf13 <sinc_multichan_vari_process+0x6ba>
c000bb54:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bb57:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bb5a:	01 c8                	add    eax,ecx
c000bb5c:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bb5f:	99                   	cdq    
c000bb60:	f7 f9                	idiv   ecx
c000bb62:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bb66:	7c c4                	jl     c000bb2c <sinc_multichan_vari_process+0x2d3>
c000bb68:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bb6c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bb70:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bb73:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bb76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb7a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bb7e:	89 06                	mov    DWORD PTR [esi],eax
c000bb80:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bb83:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bb86:	99                   	cdq    
c000bb87:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bb8a:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bb8d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bb90:	99                   	cdq    
c000bb91:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bb94:	31 d2                	xor    edx,edx
c000bb96:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bb99:	e9 75 03 00 00       	jmp    c000bf13 <sinc_multichan_vari_process+0x6ba>
c000bb9e:	83 ec 0c             	sub    esp,0xc
c000bba1:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bba4:	e8 0a bc 01 00       	call   c00277b3 <__floatsidf>
c000bba9:	83 c4 10             	add    esp,0x10
c000bbac:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bbb0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bbb4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbb8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbbc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbc0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbc4:	e8 0a af 01 00       	call   c0026ad3 <__adddf3>
c000bbc9:	83 c4 10             	add    esp,0x10
c000bbcc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bbd0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bbd4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bbd8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bbdc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbe0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbe4:	e8 ea ae 01 00       	call   c0026ad3 <__adddf3>
c000bbe9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bbec:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bbf0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bbf4:	e8 ba bb 01 00       	call   c00277b3 <__floatsidf>
c000bbf9:	83 c4 10             	add    esp,0x10
c000bbfc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc00:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc04:	52                   	push   edx
c000bc05:	50                   	push   eax
c000bc06:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc0a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc0e:	e8 0a be 01 00       	call   c0027a1d <__gedf2>
c000bc13:	83 c4 10             	add    esp,0x10
c000bc16:	85 c0                	test   eax,eax
c000bc18:	0f 89 4a ff ff ff    	jns    c000bb68 <sinc_multichan_vari_process+0x30f>
c000bc1e:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000bc22:	0f 8e ed 00 00 00    	jle    c000bd15 <sinc_multichan_vari_process+0x4bc>
c000bc28:	83 ec 10             	sub    esp,0x10
c000bc2b:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bc2e:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bc31:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000bc34:	ff 36                	push   DWORD PTR [esi]
c000bc36:	e8 e9 b4 01 00       	call   c0027124 <__subdf3>
c000bc3b:	83 c4 18             	add    esp,0x18
c000bc3e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc42:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc46:	52                   	push   edx
c000bc47:	50                   	push   eax
c000bc48:	e8 63 bf 01 00       	call   c0027bb0 <fabs>
c000bc4d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc51:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bc55:	83 c4 10             	add    esp,0x10
c000bc58:	68 df 7c db 3d       	push   0x3ddb7cdf
c000bc5d:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000bc62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc66:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc6a:	e8 92 bd 01 00       	call   c0027a01 <__gtdf2>
c000bc6f:	83 c4 10             	add    esp,0x10
c000bc72:	85 c0                	test   eax,eax
c000bc74:	0f 8e 9b 00 00 00    	jle    c000bd15 <sinc_multichan_vari_process+0x4bc>
c000bc7a:	8b 06                	mov    eax,DWORD PTR [esi]
c000bc7c:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bc7f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bc83:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bc87:	52                   	push   edx
c000bc88:	50                   	push   eax
c000bc89:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bc8c:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bc8f:	e8 90 b4 01 00       	call   c0027124 <__subdf3>
c000bc94:	59                   	pop    ecx
c000bc95:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bc99:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bc9d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000bca0:	e8 0e bb 01 00       	call   c00277b3 <__floatsidf>
c000bca5:	83 c4 10             	add    esp,0x10
c000bca8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcac:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcb0:	52                   	push   edx
c000bcb1:	50                   	push   eax
c000bcb2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bcb6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bcba:	e8 91 b4 01 00       	call   c0027150 <__muldf3>
c000bcbf:	5d                   	pop    ebp
c000bcc0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bcc4:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bcc8:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bccb:	e8 e3 ba 01 00       	call   c00277b3 <__floatsidf>
c000bcd0:	83 c4 10             	add    esp,0x10
c000bcd3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcd7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcdb:	52                   	push   edx
c000bcdc:	50                   	push   eax
c000bcdd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bce1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bce5:	e8 4a b7 01 00       	call   c0027434 <__divdf3>
c000bcea:	83 c4 10             	add    esp,0x10
c000bced:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bcf1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcf5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bcf9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bcfd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd01:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd05:	e8 c9 ad 01 00       	call   c0026ad3 <__adddf3>
c000bd0a:	83 c4 10             	add    esp,0x10
c000bd0d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bd11:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bd15:	83 ec 0c             	sub    esp,0xc
c000bd18:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bd1b:	e8 93 ba 01 00       	call   c00277b3 <__floatsidf>
c000bd20:	83 c4 10             	add    esp,0x10
c000bd23:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bd27:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bd2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd33:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd37:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd3b:	e8 df bc 01 00       	call   c0027a1f <__ltdf2>
c000bd40:	83 c4 10             	add    esp,0x10
c000bd43:	85 c0                	test   eax,eax
c000bd45:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd49:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bd4d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bd51:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bd55:	78 10                	js     c000bd67 <sinc_multichan_vari_process+0x50e>
c000bd57:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bd5b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bd5f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bd63:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bd67:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd6b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd6f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd73:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd77:	e8 d4 b3 01 00       	call   c0027150 <__muldf3>
c000bd7c:	59                   	pop    ecx
c000bd7d:	5d                   	pop    ebp
c000bd7e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bd82:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bd86:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd8a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd8e:	e8 25 f9 ff ff       	call   c000b6b8 <double_to_fp>
c000bd93:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd97:	89 c5                	mov    ebp,eax
c000bd99:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd9d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bda1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bda5:	e8 a6 b3 01 00       	call   c0027150 <__muldf3>
c000bdaa:	83 c4 18             	add    esp,0x18
c000bdad:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bdb1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bdb5:	52                   	push   edx
c000bdb6:	50                   	push   eax
c000bdb7:	e8 fc f8 ff ff       	call   c000b6b8 <double_to_fp>
c000bdbc:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bdbf:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bdc3:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bdc6:	8d 04 90             	lea    eax,[eax+edx*4]
c000bdc9:	50                   	push   eax
c000bdca:	50                   	push   eax
c000bdcb:	50                   	push   eax
c000bdcc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bdcf:	e8 df b9 01 00       	call   c00277b3 <__floatsidf>
c000bdd4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bdd8:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bddc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bde0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bde4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bde8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bdec:	e8 43 b6 01 00       	call   c0027434 <__divdf3>
c000bdf1:	83 c4 1c             	add    esp,0x1c
c000bdf4:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000bdf8:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000bdfc:	52                   	push   edx
c000bdfd:	89 ea                	mov    edx,ebp
c000bdff:	50                   	push   eax
c000be00:	89 d8                	mov    eax,ebx
c000be02:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000be05:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000be09:	e8 69 ed ff ff       	call   c000ab77 <calc_output_multi>
c000be0e:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000be11:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000be14:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000be18:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000be1c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000be20:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000be24:	e8 0b b6 01 00       	call   c0027434 <__divdf3>
c000be29:	83 c4 10             	add    esp,0x10
c000be2c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000be30:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000be34:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be38:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be3c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be40:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be44:	e8 8a ac 01 00       	call   c0026ad3 <__adddf3>
c000be49:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000be4d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000be51:	83 c4 28             	add    esp,0x28
c000be54:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be58:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be5c:	e8 6f bd 01 00       	call   c0027bd0 <lrint>
c000be61:	83 ec 0c             	sub    esp,0xc
c000be64:	50                   	push   eax
c000be65:	e8 49 b9 01 00       	call   c00277b3 <__floatsidf>
c000be6a:	83 c4 10             	add    esp,0x10
c000be6d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000be71:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000be75:	52                   	push   edx
c000be76:	50                   	push   eax
c000be77:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000be7b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000be7f:	e8 a0 b2 01 00       	call   c0027124 <__subdf3>
c000be84:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be88:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be8c:	83 c4 20             	add    esp,0x20
c000be8f:	6a 00                	push   0x0
c000be91:	6a 00                	push   0x0
c000be93:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be97:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be9b:	e8 7f bb 01 00       	call   c0027a1f <__ltdf2>
c000bea0:	83 c4 10             	add    esp,0x10
c000bea3:	85 c0                	test   eax,eax
c000bea5:	79 20                	jns    c000bec7 <sinc_multichan_vari_process+0x66e>
c000bea7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000beab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000beaf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000beb3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000beb7:	e8 17 ac 01 00       	call   c0026ad3 <__adddf3>
c000bebc:	83 c4 10             	add    esp,0x10
c000bebf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bec3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bec7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000beca:	83 ec 10             	sub    esp,0x10
c000becd:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000bed1:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bed4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bed8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bedc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bee0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bee4:	e8 3b b2 01 00       	call   c0027124 <__subdf3>
c000bee9:	83 c4 18             	add    esp,0x18
c000beec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bef0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bef4:	52                   	push   edx
c000bef5:	50                   	push   eax
c000bef6:	e8 d5 bc 01 00       	call   c0027bd0 <lrint>
c000befb:	0f af e8             	imul   ebp,eax
c000befe:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000bf02:	83 c4 10             	add    esp,0x10
c000bf05:	01 e8                	add    eax,ebp
c000bf07:	99                   	cdq    
c000bf08:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bf0b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bf0e:	e9 fd fb ff ff       	jmp    c000bb10 <sinc_multichan_vari_process+0x2b7>
c000bf13:	83 c4 4c             	add    esp,0x4c
c000bf16:	89 d0                	mov    eax,edx
c000bf18:	5b                   	pop    ebx
c000bf19:	5e                   	pop    esi
c000bf1a:	5f                   	pop    edi
c000bf1b:	5d                   	pop    ebp
c000bf1c:	c3                   	ret    

c000bf1d <sinc_hex_vari_process>:
c000bf1d:	55                   	push   ebp
c000bf1e:	ba 05 00 00 00       	mov    edx,0x5
c000bf23:	57                   	push   edi
c000bf24:	56                   	push   esi
c000bf25:	53                   	push   ebx
c000bf26:	83 ec 4c             	sub    esp,0x4c
c000bf29:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000bf2d:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000bf31:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000bf34:	85 db                	test   ebx,ebx
c000bf36:	0f 84 9c 06 00 00    	je     c000c5d8 <sinc_hex_vari_process+0x6bb>
c000bf3c:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bf3f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000bf42:	0f af c7             	imul   eax,edi
c000bf45:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000bf48:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000bf4b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000bf52:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000bf59:	0f af c7             	imul   eax,edi
c000bf5c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bf5f:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000bf62:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000bf65:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf69:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf6d:	68 00 00 70 3f       	push   0x3f700000
c000bf72:	6a 00                	push   0x0
c000bf74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf7c:	e8 9e ba 01 00       	call   c0027a1f <__ltdf2>
c000bf81:	83 c4 10             	add    esp,0x10
c000bf84:	ba 16 00 00 00       	mov    edx,0x16
c000bf89:	85 c0                	test   eax,eax
c000bf8b:	0f 88 47 06 00 00    	js     c000c5d8 <sinc_hex_vari_process+0x6bb>
c000bf91:	68 00 00 70 40       	push   0x40700000
c000bf96:	6a 00                	push   0x0
c000bf98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bfa0:	e8 5c ba 01 00       	call   c0027a01 <__gtdf2>
c000bfa5:	83 c4 10             	add    esp,0x10
c000bfa8:	ba 16 00 00 00       	mov    edx,0x16
c000bfad:	85 c0                	test   eax,eax
c000bfaf:	0f 8f 23 06 00 00    	jg     c000c5d8 <sinc_hex_vari_process+0x6bb>
c000bfb5:	83 ec 0c             	sub    esp,0xc
c000bfb8:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bfbb:	e8 f3 b7 01 00       	call   c00277b3 <__floatsidf>
c000bfc0:	83 c4 10             	add    esp,0x10
c000bfc3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bfc7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bfcb:	68 00 00 00 40       	push   0x40000000
c000bfd0:	6a 00                	push   0x0
c000bfd2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfd6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfda:	e8 f4 aa 01 00       	call   c0026ad3 <__adddf3>
c000bfdf:	59                   	pop    ecx
c000bfe0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bfe4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bfe8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfeb:	e8 c3 b7 01 00       	call   c00277b3 <__floatsidf>
c000bff0:	83 c4 10             	add    esp,0x10
c000bff3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bff7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bffb:	52                   	push   edx
c000bffc:	50                   	push   eax
c000bffd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c001:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c005:	e8 2a b4 01 00       	call   c0027434 <__divdf3>
c000c00a:	83 c4 10             	add    esp,0x10
c000c00d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c011:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c015:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c018:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c01b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c01f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c023:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c027:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c02b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c02f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c033:	e8 c9 b9 01 00       	call   c0027a01 <__gtdf2>
c000c038:	83 c4 10             	add    esp,0x10
c000c03b:	85 c0                	test   eax,eax
c000c03d:	7e 2d                	jle    c000c06c <sinc_hex_vari_process+0x14f>
c000c03f:	68 00 00 f0 3f       	push   0x3ff00000
c000c044:	6a 00                	push   0x0
c000c046:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c04a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c04e:	e8 cc b9 01 00       	call   c0027a1f <__ltdf2>
c000c053:	83 c4 10             	add    esp,0x10
c000c056:	85 c0                	test   eax,eax
c000c058:	79 4d                	jns    c000c0a7 <sinc_hex_vari_process+0x18a>
c000c05a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c05e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c062:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c066:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c06a:	eb 1b                	jmp    c000c087 <sinc_hex_vari_process+0x16a>
c000c06c:	68 00 00 f0 3f       	push   0x3ff00000
c000c071:	6a 00                	push   0x0
c000c073:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c077:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c07b:	e8 9f b9 01 00       	call   c0027a1f <__ltdf2>
c000c080:	83 c4 10             	add    esp,0x10
c000c083:	85 c0                	test   eax,eax
c000c085:	79 20                	jns    c000c0a7 <sinc_hex_vari_process+0x18a>
c000c087:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c08b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c08f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c093:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c097:	e8 98 b3 01 00       	call   c0027434 <__divdf3>
c000c09c:	83 c4 10             	add    esp,0x10
c000c09f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c0a3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c0a7:	50                   	push   eax
c000c0a8:	50                   	push   eax
c000c0a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c0ad:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c0b1:	e8 1a bb 01 00       	call   c0027bd0 <lrint>
c000c0b6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c0b9:	40                   	inc    eax
c000c0ba:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0be:	0f af c7             	imul   eax,edi
c000c0c1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c0c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c0c8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0cc:	58                   	pop    eax
c000c0cd:	5a                   	pop    edx
c000c0ce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c0d2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c0d6:	e8 f5 ba 01 00       	call   c0027bd0 <lrint>
c000c0db:	83 ec 0c             	sub    esp,0xc
c000c0de:	50                   	push   eax
c000c0df:	e8 cf b6 01 00       	call   c00277b3 <__floatsidf>
c000c0e4:	83 c4 10             	add    esp,0x10
c000c0e7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c0eb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c0ef:	52                   	push   edx
c000c0f0:	50                   	push   eax
c000c0f1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c0f5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c0f9:	e8 26 b0 01 00       	call   c0027124 <__subdf3>
c000c0fe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c102:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c106:	83 c4 20             	add    esp,0x20
c000c109:	6a 00                	push   0x0
c000c10b:	6a 00                	push   0x0
c000c10d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c111:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c115:	e8 05 b9 01 00       	call   c0027a1f <__ltdf2>
c000c11a:	83 c4 10             	add    esp,0x10
c000c11d:	85 c0                	test   eax,eax
c000c11f:	79 1f                	jns    c000c140 <sinc_hex_vari_process+0x223>
c000c121:	68 00 00 f0 3f       	push   0x3ff00000
c000c126:	6a 00                	push   0x0
c000c128:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c12c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c130:	e8 9e a9 01 00       	call   c0026ad3 <__adddf3>
c000c135:	83 c4 10             	add    esp,0x10
c000c138:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c13c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c140:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c143:	83 ec 10             	sub    esp,0x10
c000c146:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c14a:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c14d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c151:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c155:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c159:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c15d:	e8 c2 af 01 00       	call   c0027124 <__subdf3>
c000c162:	83 c4 18             	add    esp,0x18
c000c165:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c169:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c16d:	52                   	push   edx
c000c16e:	50                   	push   eax
c000c16f:	e8 5c ba 01 00       	call   c0027bd0 <lrint>
c000c174:	0f af f8             	imul   edi,eax
c000c177:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c17b:	01 f8                	add    eax,edi
c000c17d:	99                   	cdq    
c000c17e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c181:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c184:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c188:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c18c:	68 00 00 f0 3f       	push   0x3ff00000
c000c191:	6a 00                	push   0x0
c000c193:	e8 9c b2 01 00       	call   c0027434 <__divdf3>
c000c198:	83 c4 10             	add    esp,0x10
c000c19b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c19f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c1a3:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c1a8:	68 23 42 92 0c       	push   0xc924223
c000c1ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c1b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c1b5:	e8 19 a9 01 00       	call   c0026ad3 <__adddf3>
c000c1ba:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c1be:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c1c2:	83 c4 20             	add    esp,0x20
c000c1c5:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c1cd:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c1d5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c1d8:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c1db:	7d 50                	jge    c000c22d <sinc_hex_vari_process+0x310>
c000c1dd:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c1e0:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c1e3:	01 c8                	add    eax,ecx
c000c1e5:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c1e8:	99                   	cdq    
c000c1e9:	f7 f9                	idiv   ecx
c000c1eb:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c1ef:	7d 0c                	jge    c000c1fd <sinc_hex_vari_process+0x2e0>
c000c1f1:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c1f4:	85 ff                	test   edi,edi
c000c1f6:	79 6c                	jns    c000c264 <sinc_hex_vari_process+0x347>
c000c1f8:	e9 e7 00 00 00       	jmp    c000c2e4 <sinc_hex_vari_process+0x3c7>
c000c1fd:	50                   	push   eax
c000c1fe:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c202:	56                   	push   esi
c000c203:	53                   	push   ebx
c000c204:	e8 d6 f4 ff ff       	call   c000b6df <prepare_data>
c000c209:	83 c4 10             	add    esp,0x10
c000c20c:	89 c2                	mov    edx,eax
c000c20e:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c211:	85 c0                	test   eax,eax
c000c213:	0f 85 bf 03 00 00    	jne    c000c5d8 <sinc_hex_vari_process+0x6bb>
c000c219:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c21c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c21f:	01 c8                	add    eax,ecx
c000c221:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c224:	99                   	cdq    
c000c225:	f7 f9                	idiv   ecx
c000c227:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c22b:	7c c4                	jl     c000c1f1 <sinc_hex_vari_process+0x2d4>
c000c22d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c231:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c235:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c238:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c23b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c23f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c243:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c246:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c249:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c24c:	99                   	cdq    
c000c24d:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c250:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c253:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c256:	99                   	cdq    
c000c257:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c25a:	31 d2                	xor    edx,edx
c000c25c:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c25f:	e9 74 03 00 00       	jmp    c000c5d8 <sinc_hex_vari_process+0x6bb>
c000c264:	83 ec 0c             	sub    esp,0xc
c000c267:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c26a:	e8 44 b5 01 00       	call   c00277b3 <__floatsidf>
c000c26f:	83 c4 10             	add    esp,0x10
c000c272:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c276:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c27a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c27e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c282:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c286:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c28a:	e8 44 a8 01 00       	call   c0026ad3 <__adddf3>
c000c28f:	83 c4 10             	add    esp,0x10
c000c292:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c296:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c29a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c29e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c2a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c2aa:	e8 24 a8 01 00       	call   c0026ad3 <__adddf3>
c000c2af:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c2b2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c2b6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c2ba:	e8 f4 b4 01 00       	call   c00277b3 <__floatsidf>
c000c2bf:	83 c4 10             	add    esp,0x10
c000c2c2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2c6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2ca:	52                   	push   edx
c000c2cb:	50                   	push   eax
c000c2cc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c2d0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c2d4:	e8 44 b7 01 00       	call   c0027a1d <__gedf2>
c000c2d9:	83 c4 10             	add    esp,0x10
c000c2dc:	85 c0                	test   eax,eax
c000c2de:	0f 89 49 ff ff ff    	jns    c000c22d <sinc_hex_vari_process+0x310>
c000c2e4:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c2e8:	0f 8e ef 00 00 00    	jle    c000c3dd <sinc_hex_vari_process+0x4c0>
c000c2ee:	83 ec 10             	sub    esp,0x10
c000c2f1:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c2f4:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c2f7:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c2fa:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c2fd:	e8 22 ae 01 00       	call   c0027124 <__subdf3>
c000c302:	83 c4 18             	add    esp,0x18
c000c305:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c309:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c30d:	52                   	push   edx
c000c30e:	50                   	push   eax
c000c30f:	e8 9c b8 01 00       	call   c0027bb0 <fabs>
c000c314:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c318:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c31c:	83 c4 10             	add    esp,0x10
c000c31f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c324:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c329:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c32d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c331:	e8 cb b6 01 00       	call   c0027a01 <__gtdf2>
c000c336:	83 c4 10             	add    esp,0x10
c000c339:	85 c0                	test   eax,eax
c000c33b:	0f 8e 9c 00 00 00    	jle    c000c3dd <sinc_hex_vari_process+0x4c0>
c000c341:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c344:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c347:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c34b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c34f:	52                   	push   edx
c000c350:	50                   	push   eax
c000c351:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c354:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c357:	e8 c8 ad 01 00       	call   c0027124 <__subdf3>
c000c35c:	59                   	pop    ecx
c000c35d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c361:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c365:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c368:	e8 46 b4 01 00       	call   c00277b3 <__floatsidf>
c000c36d:	83 c4 10             	add    esp,0x10
c000c370:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c374:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c378:	52                   	push   edx
c000c379:	50                   	push   eax
c000c37a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c37e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c382:	e8 c9 ad 01 00       	call   c0027150 <__muldf3>
c000c387:	5f                   	pop    edi
c000c388:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c38c:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c390:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c393:	e8 1b b4 01 00       	call   c00277b3 <__floatsidf>
c000c398:	83 c4 10             	add    esp,0x10
c000c39b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c39f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3a3:	52                   	push   edx
c000c3a4:	50                   	push   eax
c000c3a5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c3a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c3ad:	e8 82 b0 01 00       	call   c0027434 <__divdf3>
c000c3b2:	83 c4 10             	add    esp,0x10
c000c3b5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c3b9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c3bd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c3c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c3c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c3c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c3cd:	e8 01 a7 01 00       	call   c0026ad3 <__adddf3>
c000c3d2:	83 c4 10             	add    esp,0x10
c000c3d5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c3d9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c3dd:	83 ec 0c             	sub    esp,0xc
c000c3e0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c3e3:	e8 cb b3 01 00       	call   c00277b3 <__floatsidf>
c000c3e8:	83 c4 10             	add    esp,0x10
c000c3eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3ef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c403:	e8 17 b6 01 00       	call   c0027a1f <__ltdf2>
c000c408:	83 c4 10             	add    esp,0x10
c000c40b:	85 c0                	test   eax,eax
c000c40d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c411:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c415:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c419:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c41d:	78 10                	js     c000c42f <sinc_hex_vari_process+0x512>
c000c41f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c423:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c427:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c42b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c42f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c433:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c437:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c43b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c43f:	e8 0c ad 01 00       	call   c0027150 <__muldf3>
c000c444:	59                   	pop    ecx
c000c445:	5f                   	pop    edi
c000c446:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c44a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c44e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c452:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c456:	e8 5d f2 ff ff       	call   c000b6b8 <double_to_fp>
c000c45b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c45f:	89 c7                	mov    edi,eax
c000c461:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c465:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c469:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c46d:	e8 de ac 01 00       	call   c0027150 <__muldf3>
c000c472:	83 c4 18             	add    esp,0x18
c000c475:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c479:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c47d:	52                   	push   edx
c000c47e:	50                   	push   eax
c000c47f:	e8 34 f2 ff ff       	call   c000b6b8 <double_to_fp>
c000c484:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c487:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c48b:	83 c4 0c             	add    esp,0xc
c000c48e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c491:	8d 04 90             	lea    eax,[eax+edx*4]
c000c494:	50                   	push   eax
c000c495:	50                   	push   eax
c000c496:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c499:	e8 15 b3 01 00       	call   c00277b3 <__floatsidf>
c000c49e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c4a2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c4a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4aa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4ae:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4b2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4b6:	e8 79 af 01 00       	call   c0027434 <__divdf3>
c000c4bb:	83 c4 18             	add    esp,0x18
c000c4be:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4c2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4c6:	52                   	push   edx
c000c4c7:	89 fa                	mov    edx,edi
c000c4c9:	50                   	push   eax
c000c4ca:	89 d8                	mov    eax,ebx
c000c4cc:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c4d0:	e8 50 de ff ff       	call   c000a325 <calc_output_hex>
c000c4d5:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c4d9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4dd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4e1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4e5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4e9:	e8 46 af 01 00       	call   c0027434 <__divdf3>
c000c4ee:	83 c4 10             	add    esp,0x10
c000c4f1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4f5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4f9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c501:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c505:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c509:	e8 c5 a5 01 00       	call   c0026ad3 <__adddf3>
c000c50e:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c512:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c516:	83 c4 18             	add    esp,0x18
c000c519:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c51d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c521:	e8 aa b6 01 00       	call   c0027bd0 <lrint>
c000c526:	83 ec 0c             	sub    esp,0xc
c000c529:	50                   	push   eax
c000c52a:	e8 84 b2 01 00       	call   c00277b3 <__floatsidf>
c000c52f:	83 c4 10             	add    esp,0x10
c000c532:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c536:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c53a:	52                   	push   edx
c000c53b:	50                   	push   eax
c000c53c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c540:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c544:	e8 db ab 01 00       	call   c0027124 <__subdf3>
c000c549:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c54d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c551:	83 c4 20             	add    esp,0x20
c000c554:	6a 00                	push   0x0
c000c556:	6a 00                	push   0x0
c000c558:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c55c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c560:	e8 ba b4 01 00       	call   c0027a1f <__ltdf2>
c000c565:	83 c4 10             	add    esp,0x10
c000c568:	85 c0                	test   eax,eax
c000c56a:	79 20                	jns    c000c58c <sinc_hex_vari_process+0x66f>
c000c56c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c570:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c574:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c578:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c57c:	e8 52 a5 01 00       	call   c0026ad3 <__adddf3>
c000c581:	83 c4 10             	add    esp,0x10
c000c584:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c588:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c58c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c58f:	83 ec 10             	sub    esp,0x10
c000c592:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c596:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c599:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c59d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5a1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c5a5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c5a9:	e8 76 ab 01 00       	call   c0027124 <__subdf3>
c000c5ae:	83 c4 18             	add    esp,0x18
c000c5b1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5b5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5b9:	52                   	push   edx
c000c5ba:	50                   	push   eax
c000c5bb:	e8 10 b6 01 00       	call   c0027bd0 <lrint>
c000c5c0:	0f af f8             	imul   edi,eax
c000c5c3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c5c7:	83 c4 10             	add    esp,0x10
c000c5ca:	01 f8                	add    eax,edi
c000c5cc:	99                   	cdq    
c000c5cd:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c5d0:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c5d3:	e9 fd fb ff ff       	jmp    c000c1d5 <sinc_hex_vari_process+0x2b8>
c000c5d8:	83 c4 4c             	add    esp,0x4c
c000c5db:	89 d0                	mov    eax,edx
c000c5dd:	5b                   	pop    ebx
c000c5de:	5e                   	pop    esi
c000c5df:	5f                   	pop    edi
c000c5e0:	5d                   	pop    ebp
c000c5e1:	c3                   	ret    

c000c5e2 <sinc_quad_vari_process>:
c000c5e2:	55                   	push   ebp
c000c5e3:	ba 05 00 00 00       	mov    edx,0x5
c000c5e8:	57                   	push   edi
c000c5e9:	56                   	push   esi
c000c5ea:	53                   	push   ebx
c000c5eb:	83 ec 4c             	sub    esp,0x4c
c000c5ee:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c5f2:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c5f6:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c5f9:	85 db                	test   ebx,ebx
c000c5fb:	0f 84 9c 06 00 00    	je     c000cc9d <sinc_quad_vari_process+0x6bb>
c000c601:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c604:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c607:	0f af c7             	imul   eax,edi
c000c60a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c60d:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c610:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c617:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c61e:	0f af c7             	imul   eax,edi
c000c621:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c624:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c627:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c62a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c62e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c632:	68 00 00 70 3f       	push   0x3f700000
c000c637:	6a 00                	push   0x0
c000c639:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c63d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c641:	e8 d9 b3 01 00       	call   c0027a1f <__ltdf2>
c000c646:	83 c4 10             	add    esp,0x10
c000c649:	ba 16 00 00 00       	mov    edx,0x16
c000c64e:	85 c0                	test   eax,eax
c000c650:	0f 88 47 06 00 00    	js     c000cc9d <sinc_quad_vari_process+0x6bb>
c000c656:	68 00 00 70 40       	push   0x40700000
c000c65b:	6a 00                	push   0x0
c000c65d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c661:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c665:	e8 97 b3 01 00       	call   c0027a01 <__gtdf2>
c000c66a:	83 c4 10             	add    esp,0x10
c000c66d:	ba 16 00 00 00       	mov    edx,0x16
c000c672:	85 c0                	test   eax,eax
c000c674:	0f 8f 23 06 00 00    	jg     c000cc9d <sinc_quad_vari_process+0x6bb>
c000c67a:	83 ec 0c             	sub    esp,0xc
c000c67d:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c680:	e8 2e b1 01 00       	call   c00277b3 <__floatsidf>
c000c685:	83 c4 10             	add    esp,0x10
c000c688:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c68c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c690:	68 00 00 00 40       	push   0x40000000
c000c695:	6a 00                	push   0x0
c000c697:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c69b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c69f:	e8 2f a4 01 00       	call   c0026ad3 <__adddf3>
c000c6a4:	59                   	pop    ecx
c000c6a5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c6a9:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c6ad:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c6b0:	e8 fe b0 01 00       	call   c00277b3 <__floatsidf>
c000c6b5:	83 c4 10             	add    esp,0x10
c000c6b8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c6bc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c6c0:	52                   	push   edx
c000c6c1:	50                   	push   eax
c000c6c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6ca:	e8 65 ad 01 00       	call   c0027434 <__divdf3>
c000c6cf:	83 c4 10             	add    esp,0x10
c000c6d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c6d6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c6da:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c6dd:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c6e0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c6e4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c6e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6f8:	e8 04 b3 01 00       	call   c0027a01 <__gtdf2>
c000c6fd:	83 c4 10             	add    esp,0x10
c000c700:	85 c0                	test   eax,eax
c000c702:	7e 2d                	jle    c000c731 <sinc_quad_vari_process+0x14f>
c000c704:	68 00 00 f0 3f       	push   0x3ff00000
c000c709:	6a 00                	push   0x0
c000c70b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c70f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c713:	e8 07 b3 01 00       	call   c0027a1f <__ltdf2>
c000c718:	83 c4 10             	add    esp,0x10
c000c71b:	85 c0                	test   eax,eax
c000c71d:	79 4d                	jns    c000c76c <sinc_quad_vari_process+0x18a>
c000c71f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c723:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c727:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c72b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c72f:	eb 1b                	jmp    c000c74c <sinc_quad_vari_process+0x16a>
c000c731:	68 00 00 f0 3f       	push   0x3ff00000
c000c736:	6a 00                	push   0x0
c000c738:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c73c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c740:	e8 da b2 01 00       	call   c0027a1f <__ltdf2>
c000c745:	83 c4 10             	add    esp,0x10
c000c748:	85 c0                	test   eax,eax
c000c74a:	79 20                	jns    c000c76c <sinc_quad_vari_process+0x18a>
c000c74c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c750:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c754:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c758:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c75c:	e8 d3 ac 01 00       	call   c0027434 <__divdf3>
c000c761:	83 c4 10             	add    esp,0x10
c000c764:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c768:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c76c:	50                   	push   eax
c000c76d:	50                   	push   eax
c000c76e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c772:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c776:	e8 55 b4 01 00       	call   c0027bd0 <lrint>
c000c77b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c77e:	40                   	inc    eax
c000c77f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c783:	0f af c7             	imul   eax,edi
c000c786:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c78a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c78d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c791:	58                   	pop    eax
c000c792:	5a                   	pop    edx
c000c793:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c797:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c79b:	e8 30 b4 01 00       	call   c0027bd0 <lrint>
c000c7a0:	83 ec 0c             	sub    esp,0xc
c000c7a3:	50                   	push   eax
c000c7a4:	e8 0a b0 01 00       	call   c00277b3 <__floatsidf>
c000c7a9:	83 c4 10             	add    esp,0x10
c000c7ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c7b0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c7b4:	52                   	push   edx
c000c7b5:	50                   	push   eax
c000c7b6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c7ba:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c7be:	e8 61 a9 01 00       	call   c0027124 <__subdf3>
c000c7c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7cb:	83 c4 20             	add    esp,0x20
c000c7ce:	6a 00                	push   0x0
c000c7d0:	6a 00                	push   0x0
c000c7d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7da:	e8 40 b2 01 00       	call   c0027a1f <__ltdf2>
c000c7df:	83 c4 10             	add    esp,0x10
c000c7e2:	85 c0                	test   eax,eax
c000c7e4:	79 1f                	jns    c000c805 <sinc_quad_vari_process+0x223>
c000c7e6:	68 00 00 f0 3f       	push   0x3ff00000
c000c7eb:	6a 00                	push   0x0
c000c7ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7f5:	e8 d9 a2 01 00       	call   c0026ad3 <__adddf3>
c000c7fa:	83 c4 10             	add    esp,0x10
c000c7fd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c801:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c805:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c808:	83 ec 10             	sub    esp,0x10
c000c80b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c80f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c812:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c816:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c81e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c822:	e8 fd a8 01 00       	call   c0027124 <__subdf3>
c000c827:	83 c4 18             	add    esp,0x18
c000c82a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c82e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c832:	52                   	push   edx
c000c833:	50                   	push   eax
c000c834:	e8 97 b3 01 00       	call   c0027bd0 <lrint>
c000c839:	0f af f8             	imul   edi,eax
c000c83c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c840:	01 f8                	add    eax,edi
c000c842:	99                   	cdq    
c000c843:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c846:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c849:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c84d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c851:	68 00 00 f0 3f       	push   0x3ff00000
c000c856:	6a 00                	push   0x0
c000c858:	e8 d7 ab 01 00       	call   c0027434 <__divdf3>
c000c85d:	83 c4 10             	add    esp,0x10
c000c860:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c864:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c868:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c86d:	68 23 42 92 0c       	push   0xc924223
c000c872:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c876:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c87a:	e8 54 a2 01 00       	call   c0026ad3 <__adddf3>
c000c87f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c883:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c887:	83 c4 20             	add    esp,0x20
c000c88a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c892:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c89a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c89d:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c8a0:	7d 50                	jge    c000c8f2 <sinc_quad_vari_process+0x310>
c000c8a2:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c8a5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c8a8:	01 c8                	add    eax,ecx
c000c8aa:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c8ad:	99                   	cdq    
c000c8ae:	f7 f9                	idiv   ecx
c000c8b0:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c8b4:	7d 0c                	jge    c000c8c2 <sinc_quad_vari_process+0x2e0>
c000c8b6:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c8b9:	85 ff                	test   edi,edi
c000c8bb:	79 6c                	jns    c000c929 <sinc_quad_vari_process+0x347>
c000c8bd:	e9 e7 00 00 00       	jmp    c000c9a9 <sinc_quad_vari_process+0x3c7>
c000c8c2:	50                   	push   eax
c000c8c3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c8c7:	56                   	push   esi
c000c8c8:	53                   	push   ebx
c000c8c9:	e8 11 ee ff ff       	call   c000b6df <prepare_data>
c000c8ce:	83 c4 10             	add    esp,0x10
c000c8d1:	89 c2                	mov    edx,eax
c000c8d3:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c8d6:	85 c0                	test   eax,eax
c000c8d8:	0f 85 bf 03 00 00    	jne    c000cc9d <sinc_quad_vari_process+0x6bb>
c000c8de:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c8e1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c8e4:	01 c8                	add    eax,ecx
c000c8e6:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c8e9:	99                   	cdq    
c000c8ea:	f7 f9                	idiv   ecx
c000c8ec:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c8f0:	7c c4                	jl     c000c8b6 <sinc_quad_vari_process+0x2d4>
c000c8f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c8f6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c8fa:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c8fd:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c900:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c904:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c908:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c90b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c90e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c911:	99                   	cdq    
c000c912:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c915:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c918:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c91b:	99                   	cdq    
c000c91c:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c91f:	31 d2                	xor    edx,edx
c000c921:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c924:	e9 74 03 00 00       	jmp    c000cc9d <sinc_quad_vari_process+0x6bb>
c000c929:	83 ec 0c             	sub    esp,0xc
c000c92c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c92f:	e8 7f ae 01 00       	call   c00277b3 <__floatsidf>
c000c934:	83 c4 10             	add    esp,0x10
c000c937:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c93b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c93f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c943:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c947:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c94b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c94f:	e8 7f a1 01 00       	call   c0026ad3 <__adddf3>
c000c954:	83 c4 10             	add    esp,0x10
c000c957:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c95b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c95f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c963:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c967:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c96b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c96f:	e8 5f a1 01 00       	call   c0026ad3 <__adddf3>
c000c974:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c977:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c97b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c97f:	e8 2f ae 01 00       	call   c00277b3 <__floatsidf>
c000c984:	83 c4 10             	add    esp,0x10
c000c987:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c98b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c98f:	52                   	push   edx
c000c990:	50                   	push   eax
c000c991:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c995:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c999:	e8 7f b0 01 00       	call   c0027a1d <__gedf2>
c000c99e:	83 c4 10             	add    esp,0x10
c000c9a1:	85 c0                	test   eax,eax
c000c9a3:	0f 89 49 ff ff ff    	jns    c000c8f2 <sinc_quad_vari_process+0x310>
c000c9a9:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c9ad:	0f 8e ef 00 00 00    	jle    c000caa2 <sinc_quad_vari_process+0x4c0>
c000c9b3:	83 ec 10             	sub    esp,0x10
c000c9b6:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c9b9:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c9bc:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c9bf:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c9c2:	e8 5d a7 01 00       	call   c0027124 <__subdf3>
c000c9c7:	83 c4 18             	add    esp,0x18
c000c9ca:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9ce:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9d2:	52                   	push   edx
c000c9d3:	50                   	push   eax
c000c9d4:	e8 d7 b1 01 00       	call   c0027bb0 <fabs>
c000c9d9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c9dd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c9e1:	83 c4 10             	add    esp,0x10
c000c9e4:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c9e9:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c9ee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9f2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9f6:	e8 06 b0 01 00       	call   c0027a01 <__gtdf2>
c000c9fb:	83 c4 10             	add    esp,0x10
c000c9fe:	85 c0                	test   eax,eax
c000ca00:	0f 8e 9c 00 00 00    	jle    c000caa2 <sinc_quad_vari_process+0x4c0>
c000ca06:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ca09:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000ca0c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ca10:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ca14:	52                   	push   edx
c000ca15:	50                   	push   eax
c000ca16:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000ca19:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000ca1c:	e8 03 a7 01 00       	call   c0027124 <__subdf3>
c000ca21:	59                   	pop    ecx
c000ca22:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ca26:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000ca2a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ca2d:	e8 81 ad 01 00       	call   c00277b3 <__floatsidf>
c000ca32:	83 c4 10             	add    esp,0x10
c000ca35:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca39:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca3d:	52                   	push   edx
c000ca3e:	50                   	push   eax
c000ca3f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca43:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca47:	e8 04 a7 01 00       	call   c0027150 <__muldf3>
c000ca4c:	5f                   	pop    edi
c000ca4d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ca51:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000ca55:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000ca58:	e8 56 ad 01 00       	call   c00277b3 <__floatsidf>
c000ca5d:	83 c4 10             	add    esp,0x10
c000ca60:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca64:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca68:	52                   	push   edx
c000ca69:	50                   	push   eax
c000ca6a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca6e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca72:	e8 bd a9 01 00       	call   c0027434 <__divdf3>
c000ca77:	83 c4 10             	add    esp,0x10
c000ca7a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca7e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca82:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca8a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca8e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca92:	e8 3c a0 01 00       	call   c0026ad3 <__adddf3>
c000ca97:	83 c4 10             	add    esp,0x10
c000ca9a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ca9e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000caa2:	83 ec 0c             	sub    esp,0xc
c000caa5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000caa8:	e8 06 ad 01 00       	call   c00277b3 <__floatsidf>
c000caad:	83 c4 10             	add    esp,0x10
c000cab0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cab4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cab8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cabc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cac0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cac4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cac8:	e8 52 af 01 00       	call   c0027a1f <__ltdf2>
c000cacd:	83 c4 10             	add    esp,0x10
c000cad0:	85 c0                	test   eax,eax
c000cad2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cad6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cada:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000cade:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000cae2:	78 10                	js     c000caf4 <sinc_quad_vari_process+0x512>
c000cae4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cae8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000caec:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000caf0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000caf4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000caf8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cafc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb00:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb04:	e8 47 a6 01 00       	call   c0027150 <__muldf3>
c000cb09:	59                   	pop    ecx
c000cb0a:	5f                   	pop    edi
c000cb0b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb0f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb13:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb17:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb1b:	e8 98 eb ff ff       	call   c000b6b8 <double_to_fp>
c000cb20:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb24:	89 c7                	mov    edi,eax
c000cb26:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb2e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb32:	e8 19 a6 01 00       	call   c0027150 <__muldf3>
c000cb37:	83 c4 18             	add    esp,0x18
c000cb3a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb3e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb42:	52                   	push   edx
c000cb43:	50                   	push   eax
c000cb44:	e8 6f eb ff ff       	call   c000b6b8 <double_to_fp>
c000cb49:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cb4c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cb50:	83 c4 0c             	add    esp,0xc
c000cb53:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cb56:	8d 04 90             	lea    eax,[eax+edx*4]
c000cb59:	50                   	push   eax
c000cb5a:	50                   	push   eax
c000cb5b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cb5e:	e8 50 ac 01 00       	call   c00277b3 <__floatsidf>
c000cb63:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cb67:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cb6b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb6f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb73:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb77:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb7b:	e8 b4 a8 01 00       	call   c0027434 <__divdf3>
c000cb80:	83 c4 18             	add    esp,0x18
c000cb83:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb87:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb8b:	52                   	push   edx
c000cb8c:	89 fa                	mov    edx,edi
c000cb8e:	50                   	push   eax
c000cb8f:	89 d8                	mov    eax,ebx
c000cb91:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cb95:	e8 a5 d1 ff ff       	call   c0009d3f <calc_output_quad>
c000cb9a:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cb9e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cba2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cba6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cbaa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cbae:	e8 81 a8 01 00       	call   c0027434 <__divdf3>
c000cbb3:	83 c4 10             	add    esp,0x10
c000cbb6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbba:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbc6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cbca:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cbce:	e8 00 9f 01 00       	call   c0026ad3 <__adddf3>
c000cbd3:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cbd7:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cbdb:	83 c4 18             	add    esp,0x18
c000cbde:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbe2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbe6:	e8 e5 af 01 00       	call   c0027bd0 <lrint>
c000cbeb:	83 ec 0c             	sub    esp,0xc
c000cbee:	50                   	push   eax
c000cbef:	e8 bf ab 01 00       	call   c00277b3 <__floatsidf>
c000cbf4:	83 c4 10             	add    esp,0x10
c000cbf7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cbfb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cbff:	52                   	push   edx
c000cc00:	50                   	push   eax
c000cc01:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cc05:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cc09:	e8 16 a5 01 00       	call   c0027124 <__subdf3>
c000cc0e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc12:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc16:	83 c4 20             	add    esp,0x20
c000cc19:	6a 00                	push   0x0
c000cc1b:	6a 00                	push   0x0
c000cc1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc25:	e8 f5 ad 01 00       	call   c0027a1f <__ltdf2>
c000cc2a:	83 c4 10             	add    esp,0x10
c000cc2d:	85 c0                	test   eax,eax
c000cc2f:	79 20                	jns    c000cc51 <sinc_quad_vari_process+0x66f>
c000cc31:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc35:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc41:	e8 8d 9e 01 00       	call   c0026ad3 <__adddf3>
c000cc46:	83 c4 10             	add    esp,0x10
c000cc49:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cc4d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cc51:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000cc54:	83 ec 10             	sub    esp,0x10
c000cc57:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cc5b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cc5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc66:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cc6a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cc6e:	e8 b1 a4 01 00       	call   c0027124 <__subdf3>
c000cc73:	83 c4 18             	add    esp,0x18
c000cc76:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc7a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc7e:	52                   	push   edx
c000cc7f:	50                   	push   eax
c000cc80:	e8 4b af 01 00       	call   c0027bd0 <lrint>
c000cc85:	0f af f8             	imul   edi,eax
c000cc88:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cc8c:	83 c4 10             	add    esp,0x10
c000cc8f:	01 f8                	add    eax,edi
c000cc91:	99                   	cdq    
c000cc92:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000cc95:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000cc98:	e9 fd fb ff ff       	jmp    c000c89a <sinc_quad_vari_process+0x2b8>
c000cc9d:	83 c4 4c             	add    esp,0x4c
c000cca0:	89 d0                	mov    eax,edx
c000cca2:	5b                   	pop    ebx
c000cca3:	5e                   	pop    esi
c000cca4:	5f                   	pop    edi
c000cca5:	5d                   	pop    ebp
c000cca6:	c3                   	ret    

c000cca7 <sinc_stereo_vari_process>:
c000cca7:	55                   	push   ebp
c000cca8:	ba 05 00 00 00       	mov    edx,0x5
c000ccad:	57                   	push   edi
c000ccae:	56                   	push   esi
c000ccaf:	53                   	push   ebx
c000ccb0:	83 ec 4c             	sub    esp,0x4c
c000ccb3:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ccb7:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ccbb:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ccbe:	85 db                	test   ebx,ebx
c000ccc0:	0f 84 9c 06 00 00    	je     c000d362 <sinc_stereo_vari_process+0x6bb>
c000ccc6:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000ccc9:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cccc:	0f af c7             	imul   eax,edi
c000cccf:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ccd2:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ccd5:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ccdc:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cce3:	0f af c7             	imul   eax,edi
c000cce6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cce9:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000ccec:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ccef:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ccf3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccf7:	68 00 00 70 3f       	push   0x3f700000
c000ccfc:	6a 00                	push   0x0
c000ccfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd06:	e8 14 ad 01 00       	call   c0027a1f <__ltdf2>
c000cd0b:	83 c4 10             	add    esp,0x10
c000cd0e:	ba 16 00 00 00       	mov    edx,0x16
c000cd13:	85 c0                	test   eax,eax
c000cd15:	0f 88 47 06 00 00    	js     c000d362 <sinc_stereo_vari_process+0x6bb>
c000cd1b:	68 00 00 70 40       	push   0x40700000
c000cd20:	6a 00                	push   0x0
c000cd22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd2a:	e8 d2 ac 01 00       	call   c0027a01 <__gtdf2>
c000cd2f:	83 c4 10             	add    esp,0x10
c000cd32:	ba 16 00 00 00       	mov    edx,0x16
c000cd37:	85 c0                	test   eax,eax
c000cd39:	0f 8f 23 06 00 00    	jg     c000d362 <sinc_stereo_vari_process+0x6bb>
c000cd3f:	83 ec 0c             	sub    esp,0xc
c000cd42:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cd45:	e8 69 aa 01 00       	call   c00277b3 <__floatsidf>
c000cd4a:	83 c4 10             	add    esp,0x10
c000cd4d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cd51:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cd55:	68 00 00 00 40       	push   0x40000000
c000cd5a:	6a 00                	push   0x0
c000cd5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd64:	e8 6a 9d 01 00       	call   c0026ad3 <__adddf3>
c000cd69:	59                   	pop    ecx
c000cd6a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cd6e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cd72:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd75:	e8 39 aa 01 00       	call   c00277b3 <__floatsidf>
c000cd7a:	83 c4 10             	add    esp,0x10
c000cd7d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cd81:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cd85:	52                   	push   edx
c000cd86:	50                   	push   eax
c000cd87:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd8f:	e8 a0 a6 01 00       	call   c0027434 <__divdf3>
c000cd94:	83 c4 10             	add    esp,0x10
c000cd97:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cd9b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cd9f:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cda2:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cda5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cda9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cdad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdb1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdb5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdb9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdbd:	e8 3f ac 01 00       	call   c0027a01 <__gtdf2>
c000cdc2:	83 c4 10             	add    esp,0x10
c000cdc5:	85 c0                	test   eax,eax
c000cdc7:	7e 2d                	jle    c000cdf6 <sinc_stereo_vari_process+0x14f>
c000cdc9:	68 00 00 f0 3f       	push   0x3ff00000
c000cdce:	6a 00                	push   0x0
c000cdd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdd8:	e8 42 ac 01 00       	call   c0027a1f <__ltdf2>
c000cddd:	83 c4 10             	add    esp,0x10
c000cde0:	85 c0                	test   eax,eax
c000cde2:	79 4d                	jns    c000ce31 <sinc_stereo_vari_process+0x18a>
c000cde4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cde8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cdec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cdf0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cdf4:	eb 1b                	jmp    c000ce11 <sinc_stereo_vari_process+0x16a>
c000cdf6:	68 00 00 f0 3f       	push   0x3ff00000
c000cdfb:	6a 00                	push   0x0
c000cdfd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce05:	e8 15 ac 01 00       	call   c0027a1f <__ltdf2>
c000ce0a:	83 c4 10             	add    esp,0x10
c000ce0d:	85 c0                	test   eax,eax
c000ce0f:	79 20                	jns    c000ce31 <sinc_stereo_vari_process+0x18a>
c000ce11:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ce15:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ce19:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce1d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce21:	e8 0e a6 01 00       	call   c0027434 <__divdf3>
c000ce26:	83 c4 10             	add    esp,0x10
c000ce29:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce2d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce31:	50                   	push   eax
c000ce32:	50                   	push   eax
c000ce33:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce37:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce3b:	e8 90 ad 01 00       	call   c0027bd0 <lrint>
c000ce40:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000ce43:	40                   	inc    eax
c000ce44:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce48:	0f af c7             	imul   eax,edi
c000ce4b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000ce4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce52:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce56:	58                   	pop    eax
c000ce57:	5a                   	pop    edx
c000ce58:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce5c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce60:	e8 6b ad 01 00       	call   c0027bd0 <lrint>
c000ce65:	83 ec 0c             	sub    esp,0xc
c000ce68:	50                   	push   eax
c000ce69:	e8 45 a9 01 00       	call   c00277b3 <__floatsidf>
c000ce6e:	83 c4 10             	add    esp,0x10
c000ce71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce79:	52                   	push   edx
c000ce7a:	50                   	push   eax
c000ce7b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ce7f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ce83:	e8 9c a2 01 00       	call   c0027124 <__subdf3>
c000ce88:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce8c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce90:	83 c4 20             	add    esp,0x20
c000ce93:	6a 00                	push   0x0
c000ce95:	6a 00                	push   0x0
c000ce97:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce9f:	e8 7b ab 01 00       	call   c0027a1f <__ltdf2>
c000cea4:	83 c4 10             	add    esp,0x10
c000cea7:	85 c0                	test   eax,eax
c000cea9:	79 1f                	jns    c000ceca <sinc_stereo_vari_process+0x223>
c000ceab:	68 00 00 f0 3f       	push   0x3ff00000
c000ceb0:	6a 00                	push   0x0
c000ceb2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ceb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ceba:	e8 14 9c 01 00       	call   c0026ad3 <__adddf3>
c000cebf:	83 c4 10             	add    esp,0x10
c000cec2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cec6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ceca:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000cecd:	83 ec 10             	sub    esp,0x10
c000ced0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ced4:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ced7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cedb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cedf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cee3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cee7:	e8 38 a2 01 00       	call   c0027124 <__subdf3>
c000ceec:	83 c4 18             	add    esp,0x18
c000ceef:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cef3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cef7:	52                   	push   edx
c000cef8:	50                   	push   eax
c000cef9:	e8 d2 ac 01 00       	call   c0027bd0 <lrint>
c000cefe:	0f af f8             	imul   edi,eax
c000cf01:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cf05:	01 f8                	add    eax,edi
c000cf07:	99                   	cdq    
c000cf08:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000cf0b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000cf0e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf12:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf16:	68 00 00 f0 3f       	push   0x3ff00000
c000cf1b:	6a 00                	push   0x0
c000cf1d:	e8 12 a5 01 00       	call   c0027434 <__divdf3>
c000cf22:	83 c4 10             	add    esp,0x10
c000cf25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cf29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cf2d:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000cf32:	68 23 42 92 0c       	push   0xc924223
c000cf37:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf3b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf3f:	e8 8f 9b 01 00       	call   c0026ad3 <__adddf3>
c000cf44:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000cf48:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000cf4c:	83 c4 20             	add    esp,0x20
c000cf4f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000cf57:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cf5f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cf62:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cf65:	7d 50                	jge    c000cfb7 <sinc_stereo_vari_process+0x310>
c000cf67:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cf6a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cf6d:	01 c8                	add    eax,ecx
c000cf6f:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cf72:	99                   	cdq    
c000cf73:	f7 f9                	idiv   ecx
c000cf75:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cf79:	7d 0c                	jge    c000cf87 <sinc_stereo_vari_process+0x2e0>
c000cf7b:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cf7e:	85 ff                	test   edi,edi
c000cf80:	79 6c                	jns    c000cfee <sinc_stereo_vari_process+0x347>
c000cf82:	e9 e7 00 00 00       	jmp    c000d06e <sinc_stereo_vari_process+0x3c7>
c000cf87:	50                   	push   eax
c000cf88:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cf8c:	56                   	push   esi
c000cf8d:	53                   	push   ebx
c000cf8e:	e8 4c e7 ff ff       	call   c000b6df <prepare_data>
c000cf93:	83 c4 10             	add    esp,0x10
c000cf96:	89 c2                	mov    edx,eax
c000cf98:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cf9b:	85 c0                	test   eax,eax
c000cf9d:	0f 85 bf 03 00 00    	jne    c000d362 <sinc_stereo_vari_process+0x6bb>
c000cfa3:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cfa6:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cfa9:	01 c8                	add    eax,ecx
c000cfab:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cfae:	99                   	cdq    
c000cfaf:	f7 f9                	idiv   ecx
c000cfb1:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cfb5:	7c c4                	jl     c000cf7b <sinc_stereo_vari_process+0x2d4>
c000cfb7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cfbb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cfbf:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cfc2:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cfc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfc9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cfcd:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cfd0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cfd3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cfd6:	99                   	cdq    
c000cfd7:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cfda:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cfdd:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cfe0:	99                   	cdq    
c000cfe1:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cfe4:	31 d2                	xor    edx,edx
c000cfe6:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cfe9:	e9 74 03 00 00       	jmp    c000d362 <sinc_stereo_vari_process+0x6bb>
c000cfee:	83 ec 0c             	sub    esp,0xc
c000cff1:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cff4:	e8 ba a7 01 00       	call   c00277b3 <__floatsidf>
c000cff9:	83 c4 10             	add    esp,0x10
c000cffc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d000:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d004:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d008:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d00c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d010:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d014:	e8 ba 9a 01 00       	call   c0026ad3 <__adddf3>
c000d019:	83 c4 10             	add    esp,0x10
c000d01c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d020:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d024:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d028:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d02c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d030:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d034:	e8 9a 9a 01 00       	call   c0026ad3 <__adddf3>
c000d039:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d03c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d040:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d044:	e8 6a a7 01 00       	call   c00277b3 <__floatsidf>
c000d049:	83 c4 10             	add    esp,0x10
c000d04c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d050:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d054:	52                   	push   edx
c000d055:	50                   	push   eax
c000d056:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d05a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d05e:	e8 ba a9 01 00       	call   c0027a1d <__gedf2>
c000d063:	83 c4 10             	add    esp,0x10
c000d066:	85 c0                	test   eax,eax
c000d068:	0f 89 49 ff ff ff    	jns    c000cfb7 <sinc_stereo_vari_process+0x310>
c000d06e:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d072:	0f 8e ef 00 00 00    	jle    c000d167 <sinc_stereo_vari_process+0x4c0>
c000d078:	83 ec 10             	sub    esp,0x10
c000d07b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d07e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d081:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d084:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d087:	e8 98 a0 01 00       	call   c0027124 <__subdf3>
c000d08c:	83 c4 18             	add    esp,0x18
c000d08f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d093:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d097:	52                   	push   edx
c000d098:	50                   	push   eax
c000d099:	e8 12 ab 01 00       	call   c0027bb0 <fabs>
c000d09e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0a2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d0a6:	83 c4 10             	add    esp,0x10
c000d0a9:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d0ae:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d0b3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0b7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0bb:	e8 41 a9 01 00       	call   c0027a01 <__gtdf2>
c000d0c0:	83 c4 10             	add    esp,0x10
c000d0c3:	85 c0                	test   eax,eax
c000d0c5:	0f 8e 9c 00 00 00    	jle    c000d167 <sinc_stereo_vari_process+0x4c0>
c000d0cb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d0ce:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d0d1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d0d5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d0d9:	52                   	push   edx
c000d0da:	50                   	push   eax
c000d0db:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d0de:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d0e1:	e8 3e a0 01 00       	call   c0027124 <__subdf3>
c000d0e6:	59                   	pop    ecx
c000d0e7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d0eb:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d0ef:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d0f2:	e8 bc a6 01 00       	call   c00277b3 <__floatsidf>
c000d0f7:	83 c4 10             	add    esp,0x10
c000d0fa:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0fe:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d102:	52                   	push   edx
c000d103:	50                   	push   eax
c000d104:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d108:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d10c:	e8 3f a0 01 00       	call   c0027150 <__muldf3>
c000d111:	5f                   	pop    edi
c000d112:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d116:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d11a:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d11d:	e8 91 a6 01 00       	call   c00277b3 <__floatsidf>
c000d122:	83 c4 10             	add    esp,0x10
c000d125:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d129:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d12d:	52                   	push   edx
c000d12e:	50                   	push   eax
c000d12f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d133:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d137:	e8 f8 a2 01 00       	call   c0027434 <__divdf3>
c000d13c:	83 c4 10             	add    esp,0x10
c000d13f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d143:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d147:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d14b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d14f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d153:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d157:	e8 77 99 01 00       	call   c0026ad3 <__adddf3>
c000d15c:	83 c4 10             	add    esp,0x10
c000d15f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d163:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d167:	83 ec 0c             	sub    esp,0xc
c000d16a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d16d:	e8 41 a6 01 00       	call   c00277b3 <__floatsidf>
c000d172:	83 c4 10             	add    esp,0x10
c000d175:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d179:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d17d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d181:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d185:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d189:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d18d:	e8 8d a8 01 00       	call   c0027a1f <__ltdf2>
c000d192:	83 c4 10             	add    esp,0x10
c000d195:	85 c0                	test   eax,eax
c000d197:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d19b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d19f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d1a3:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d1a7:	78 10                	js     c000d1b9 <sinc_stereo_vari_process+0x512>
c000d1a9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d1ad:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d1b1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1b5:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d1b9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1bd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1c1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d1c5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d1c9:	e8 82 9f 01 00       	call   c0027150 <__muldf3>
c000d1ce:	59                   	pop    ecx
c000d1cf:	5f                   	pop    edi
c000d1d0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d1d4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d1d8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1e0:	e8 d3 e4 ff ff       	call   c000b6b8 <double_to_fp>
c000d1e5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d1e9:	89 c7                	mov    edi,eax
c000d1eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d1ef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1f3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1f7:	e8 54 9f 01 00       	call   c0027150 <__muldf3>
c000d1fc:	83 c4 18             	add    esp,0x18
c000d1ff:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d203:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d207:	52                   	push   edx
c000d208:	50                   	push   eax
c000d209:	e8 aa e4 ff ff       	call   c000b6b8 <double_to_fp>
c000d20e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d211:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d215:	83 c4 0c             	add    esp,0xc
c000d218:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d21b:	8d 04 90             	lea    eax,[eax+edx*4]
c000d21e:	50                   	push   eax
c000d21f:	50                   	push   eax
c000d220:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d223:	e8 8b a5 01 00       	call   c00277b3 <__floatsidf>
c000d228:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d22c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d230:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d234:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d238:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d23c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d240:	e8 ef a1 01 00       	call   c0027434 <__divdf3>
c000d245:	83 c4 18             	add    esp,0x18
c000d248:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d24c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d250:	52                   	push   edx
c000d251:	89 fa                	mov    edx,edi
c000d253:	50                   	push   eax
c000d254:	89 d8                	mov    eax,ebx
c000d256:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d25a:	e8 02 c7 ff ff       	call   c0009961 <calc_output_stereo>
c000d25f:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d263:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d267:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d26b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d26f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d273:	e8 bc a1 01 00       	call   c0027434 <__divdf3>
c000d278:	83 c4 10             	add    esp,0x10
c000d27b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d27f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d283:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d287:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d28b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d28f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d293:	e8 3b 98 01 00       	call   c0026ad3 <__adddf3>
c000d298:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d29c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d2a0:	83 c4 18             	add    esp,0x18
c000d2a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2a7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2ab:	e8 20 a9 01 00       	call   c0027bd0 <lrint>
c000d2b0:	83 ec 0c             	sub    esp,0xc
c000d2b3:	50                   	push   eax
c000d2b4:	e8 fa a4 01 00       	call   c00277b3 <__floatsidf>
c000d2b9:	83 c4 10             	add    esp,0x10
c000d2bc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d2c0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d2c4:	52                   	push   edx
c000d2c5:	50                   	push   eax
c000d2c6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d2ca:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d2ce:	e8 51 9e 01 00       	call   c0027124 <__subdf3>
c000d2d3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2d7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2db:	83 c4 20             	add    esp,0x20
c000d2de:	6a 00                	push   0x0
c000d2e0:	6a 00                	push   0x0
c000d2e2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2ea:	e8 30 a7 01 00       	call   c0027a1f <__ltdf2>
c000d2ef:	83 c4 10             	add    esp,0x10
c000d2f2:	85 c0                	test   eax,eax
c000d2f4:	79 20                	jns    c000d316 <sinc_stereo_vari_process+0x66f>
c000d2f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d302:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d306:	e8 c8 97 01 00       	call   c0026ad3 <__adddf3>
c000d30b:	83 c4 10             	add    esp,0x10
c000d30e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d312:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d316:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d319:	83 ec 10             	sub    esp,0x10
c000d31c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d320:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d323:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d327:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d32b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d32f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d333:	e8 ec 9d 01 00       	call   c0027124 <__subdf3>
c000d338:	83 c4 18             	add    esp,0x18
c000d33b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d33f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d343:	52                   	push   edx
c000d344:	50                   	push   eax
c000d345:	e8 86 a8 01 00       	call   c0027bd0 <lrint>
c000d34a:	0f af f8             	imul   edi,eax
c000d34d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d351:	83 c4 10             	add    esp,0x10
c000d354:	01 f8                	add    eax,edi
c000d356:	99                   	cdq    
c000d357:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d35a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d35d:	e9 fd fb ff ff       	jmp    c000cf5f <sinc_stereo_vari_process+0x2b8>
c000d362:	83 c4 4c             	add    esp,0x4c
c000d365:	89 d0                	mov    eax,edx
c000d367:	5b                   	pop    ebx
c000d368:	5e                   	pop    esi
c000d369:	5f                   	pop    edi
c000d36a:	5d                   	pop    ebp
c000d36b:	c3                   	ret    

c000d36c <sinc_mono_vari_process>:
c000d36c:	55                   	push   ebp
c000d36d:	ba 05 00 00 00       	mov    edx,0x5
c000d372:	57                   	push   edi
c000d373:	56                   	push   esi
c000d374:	53                   	push   ebx
c000d375:	83 ec 4c             	sub    esp,0x4c
c000d378:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d37c:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d380:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d383:	85 db                	test   ebx,ebx
c000d385:	0f 84 c1 06 00 00    	je     c000da4c <sinc_mono_vari_process+0x6e0>
c000d38b:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d38e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d391:	0f af c7             	imul   eax,edi
c000d394:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d397:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d39a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d3a1:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d3a8:	0f af c7             	imul   eax,edi
c000d3ab:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d3ae:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d3b2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d3b5:	8b 00                	mov    eax,DWORD PTR [eax]
c000d3b7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d3bb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d3bf:	68 00 00 70 3f       	push   0x3f700000
c000d3c4:	6a 00                	push   0x0
c000d3c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3ce:	e8 4c a6 01 00       	call   c0027a1f <__ltdf2>
c000d3d3:	83 c4 10             	add    esp,0x10
c000d3d6:	ba 16 00 00 00       	mov    edx,0x16
c000d3db:	85 c0                	test   eax,eax
c000d3dd:	0f 88 69 06 00 00    	js     c000da4c <sinc_mono_vari_process+0x6e0>
c000d3e3:	68 00 00 70 40       	push   0x40700000
c000d3e8:	6a 00                	push   0x0
c000d3ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3f2:	e8 0a a6 01 00       	call   c0027a01 <__gtdf2>
c000d3f7:	83 c4 10             	add    esp,0x10
c000d3fa:	ba 16 00 00 00       	mov    edx,0x16
c000d3ff:	85 c0                	test   eax,eax
c000d401:	0f 8f 45 06 00 00    	jg     c000da4c <sinc_mono_vari_process+0x6e0>
c000d407:	83 ec 0c             	sub    esp,0xc
c000d40a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d40d:	e8 a1 a3 01 00       	call   c00277b3 <__floatsidf>
c000d412:	83 c4 10             	add    esp,0x10
c000d415:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d419:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d41d:	68 00 00 00 40       	push   0x40000000
c000d422:	6a 00                	push   0x0
c000d424:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d428:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d42c:	e8 a2 96 01 00       	call   c0026ad3 <__adddf3>
c000d431:	59                   	pop    ecx
c000d432:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d436:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d43a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d43d:	e8 71 a3 01 00       	call   c00277b3 <__floatsidf>
c000d442:	83 c4 10             	add    esp,0x10
c000d445:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d449:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d44d:	52                   	push   edx
c000d44e:	50                   	push   eax
c000d44f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d453:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d457:	e8 d8 9f 01 00       	call   c0027434 <__divdf3>
c000d45c:	83 c4 10             	add    esp,0x10
c000d45f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d463:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d467:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d46a:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d46d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d471:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d475:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d479:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d47d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d481:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d485:	e8 77 a5 01 00       	call   c0027a01 <__gtdf2>
c000d48a:	83 c4 10             	add    esp,0x10
c000d48d:	85 c0                	test   eax,eax
c000d48f:	7e 2d                	jle    c000d4be <sinc_mono_vari_process+0x152>
c000d491:	68 00 00 f0 3f       	push   0x3ff00000
c000d496:	6a 00                	push   0x0
c000d498:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d49c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4a0:	e8 7a a5 01 00       	call   c0027a1f <__ltdf2>
c000d4a5:	83 c4 10             	add    esp,0x10
c000d4a8:	85 c0                	test   eax,eax
c000d4aa:	79 4d                	jns    c000d4f9 <sinc_mono_vari_process+0x18d>
c000d4ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4b0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d4b4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d4b8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d4bc:	eb 1b                	jmp    c000d4d9 <sinc_mono_vari_process+0x16d>
c000d4be:	68 00 00 f0 3f       	push   0x3ff00000
c000d4c3:	6a 00                	push   0x0
c000d4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4cd:	e8 4d a5 01 00       	call   c0027a1f <__ltdf2>
c000d4d2:	83 c4 10             	add    esp,0x10
c000d4d5:	85 c0                	test   eax,eax
c000d4d7:	79 20                	jns    c000d4f9 <sinc_mono_vari_process+0x18d>
c000d4d9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d4dd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d4e1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4e9:	e8 46 9f 01 00       	call   c0027434 <__divdf3>
c000d4ee:	83 c4 10             	add    esp,0x10
c000d4f1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4f5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4f9:	50                   	push   eax
c000d4fa:	50                   	push   eax
c000d4fb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4ff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d503:	e8 c8 a6 01 00       	call   c0027bd0 <lrint>
c000d508:	40                   	inc    eax
c000d509:	0f af c7             	imul   eax,edi
c000d50c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d510:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d514:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d517:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d51a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d51e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d522:	58                   	pop    eax
c000d523:	5a                   	pop    edx
c000d524:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d528:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d52c:	e8 9f a6 01 00       	call   c0027bd0 <lrint>
c000d531:	83 ec 0c             	sub    esp,0xc
c000d534:	50                   	push   eax
c000d535:	e8 79 a2 01 00       	call   c00277b3 <__floatsidf>
c000d53a:	83 c4 10             	add    esp,0x10
c000d53d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d541:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d545:	52                   	push   edx
c000d546:	50                   	push   eax
c000d547:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d54b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d54f:	e8 d0 9b 01 00       	call   c0027124 <__subdf3>
c000d554:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d558:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d55c:	83 c4 20             	add    esp,0x20
c000d55f:	6a 00                	push   0x0
c000d561:	6a 00                	push   0x0
c000d563:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d567:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d56b:	e8 af a4 01 00       	call   c0027a1f <__ltdf2>
c000d570:	83 c4 10             	add    esp,0x10
c000d573:	85 c0                	test   eax,eax
c000d575:	79 1f                	jns    c000d596 <sinc_mono_vari_process+0x22a>
c000d577:	68 00 00 f0 3f       	push   0x3ff00000
c000d57c:	6a 00                	push   0x0
c000d57e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d582:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d586:	e8 48 95 01 00       	call   c0026ad3 <__adddf3>
c000d58b:	83 c4 10             	add    esp,0x10
c000d58e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d592:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d596:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d599:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d59c:	83 ec 10             	sub    esp,0x10
c000d59f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5a7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5ab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5af:	e8 70 9b 01 00       	call   c0027124 <__subdf3>
c000d5b4:	83 c4 18             	add    esp,0x18
c000d5b7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d5bb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d5bf:	52                   	push   edx
c000d5c0:	50                   	push   eax
c000d5c1:	e8 0a a6 01 00       	call   c0027bd0 <lrint>
c000d5c6:	0f af f8             	imul   edi,eax
c000d5c9:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d5cc:	31 ff                	xor    edi,edi
c000d5ce:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d5d3:	99                   	cdq    
c000d5d4:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d5d7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d5da:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d5de:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d5e2:	55                   	push   ebp
c000d5e3:	57                   	push   edi
c000d5e4:	e8 4b 9e 01 00       	call   c0027434 <__divdf3>
c000d5e9:	83 c4 10             	add    esp,0x10
c000d5ec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d5f0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d5f4:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d5f9:	68 23 42 92 0c       	push   0xc924223
c000d5fe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d602:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d606:	e8 c8 94 01 00       	call   c0026ad3 <__adddf3>
c000d60b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d60f:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d613:	83 c4 20             	add    esp,0x20
c000d616:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d61a:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d61e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d621:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d624:	7d 54                	jge    c000d67a <sinc_mono_vari_process+0x30e>
c000d626:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d629:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d62c:	01 c8                	add    eax,ecx
c000d62e:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d631:	99                   	cdq    
c000d632:	f7 f9                	idiv   ecx
c000d634:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d638:	7d 0c                	jge    c000d646 <sinc_mono_vari_process+0x2da>
c000d63a:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d63d:	85 ff                	test   edi,edi
c000d63f:	79 73                	jns    c000d6b4 <sinc_mono_vari_process+0x348>
c000d641:	e9 ee 00 00 00       	jmp    c000d734 <sinc_mono_vari_process+0x3c8>
c000d646:	50                   	push   eax
c000d647:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d64b:	56                   	push   esi
c000d64c:	53                   	push   ebx
c000d64d:	e8 8d e0 ff ff       	call   c000b6df <prepare_data>
c000d652:	89 c2                	mov    edx,eax
c000d654:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d658:	83 c4 10             	add    esp,0x10
c000d65b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d65e:	85 d2                	test   edx,edx
c000d660:	0f 85 e6 03 00 00    	jne    c000da4c <sinc_mono_vari_process+0x6e0>
c000d666:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d669:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d66c:	01 c8                	add    eax,ecx
c000d66e:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d671:	99                   	cdq    
c000d672:	f7 f9                	idiv   ecx
c000d674:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d678:	7c c0                	jl     c000d63a <sinc_mono_vari_process+0x2ce>
c000d67a:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d67e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d682:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d686:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d689:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d68c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d690:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d694:	89 01                	mov    DWORD PTR [ecx],eax
c000d696:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d699:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d69c:	99                   	cdq    
c000d69d:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d6a0:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d6a3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d6a6:	99                   	cdq    
c000d6a7:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d6aa:	31 d2                	xor    edx,edx
c000d6ac:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d6af:	e9 98 03 00 00       	jmp    c000da4c <sinc_mono_vari_process+0x6e0>
c000d6b4:	83 ec 0c             	sub    esp,0xc
c000d6b7:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d6ba:	e8 f4 a0 01 00       	call   c00277b3 <__floatsidf>
c000d6bf:	83 c4 10             	add    esp,0x10
c000d6c2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d6c6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6ca:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6d2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6d6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6da:	e8 f4 93 01 00       	call   c0026ad3 <__adddf3>
c000d6df:	83 c4 10             	add    esp,0x10
c000d6e2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d6e6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6ea:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6ee:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6f2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6f6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6fa:	e8 d4 93 01 00       	call   c0026ad3 <__adddf3>
c000d6ff:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d702:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d706:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d70a:	e8 a4 a0 01 00       	call   c00277b3 <__floatsidf>
c000d70f:	83 c4 10             	add    esp,0x10
c000d712:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d716:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d71a:	52                   	push   edx
c000d71b:	50                   	push   eax
c000d71c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d720:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d724:	e8 d8 a2 01 00       	call   c0027a01 <__gtdf2>
c000d729:	83 c4 10             	add    esp,0x10
c000d72c:	85 c0                	test   eax,eax
c000d72e:	0f 8f 46 ff ff ff    	jg     c000d67a <sinc_mono_vari_process+0x30e>
c000d734:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d738:	0f 8e f5 00 00 00    	jle    c000d833 <sinc_mono_vari_process+0x4c7>
c000d73e:	83 ec 10             	sub    esp,0x10
c000d741:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d744:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d747:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d74b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d74e:	ff 30                	push   DWORD PTR [eax]
c000d750:	e8 cf 99 01 00       	call   c0027124 <__subdf3>
c000d755:	83 c4 18             	add    esp,0x18
c000d758:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d75c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d760:	52                   	push   edx
c000d761:	50                   	push   eax
c000d762:	e8 49 a4 01 00       	call   c0027bb0 <fabs>
c000d767:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d76b:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d76f:	83 c4 10             	add    esp,0x10
c000d772:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d777:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d77c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d780:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d784:	e8 78 a2 01 00       	call   c0027a01 <__gtdf2>
c000d789:	83 c4 10             	add    esp,0x10
c000d78c:	85 c0                	test   eax,eax
c000d78e:	0f 8e 9f 00 00 00    	jle    c000d833 <sinc_mono_vari_process+0x4c7>
c000d794:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d798:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d79b:	8b 00                	mov    eax,DWORD PTR [eax]
c000d79d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d7a1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d7a5:	52                   	push   edx
c000d7a6:	50                   	push   eax
c000d7a7:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d7aa:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d7ad:	e8 72 99 01 00       	call   c0027124 <__subdf3>
c000d7b2:	5f                   	pop    edi
c000d7b3:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d7b7:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d7bb:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d7be:	e8 f0 9f 01 00       	call   c00277b3 <__floatsidf>
c000d7c3:	83 c4 10             	add    esp,0x10
c000d7c6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d7ca:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d7ce:	52                   	push   edx
c000d7cf:	50                   	push   eax
c000d7d0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7d4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7d8:	e8 73 99 01 00       	call   c0027150 <__muldf3>
c000d7dd:	5d                   	pop    ebp
c000d7de:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d7e2:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d7e6:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d7e9:	e8 c5 9f 01 00       	call   c00277b3 <__floatsidf>
c000d7ee:	83 c4 10             	add    esp,0x10
c000d7f1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d7f5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d7f9:	52                   	push   edx
c000d7fa:	50                   	push   eax
c000d7fb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7ff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d803:	e8 2c 9c 01 00       	call   c0027434 <__divdf3>
c000d808:	83 c4 10             	add    esp,0x10
c000d80b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d80f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d813:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d817:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d81b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d81f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d823:	e8 ab 92 01 00       	call   c0026ad3 <__adddf3>
c000d828:	83 c4 10             	add    esp,0x10
c000d82b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d82f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d833:	83 ec 0c             	sub    esp,0xc
c000d836:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d839:	e8 75 9f 01 00       	call   c00277b3 <__floatsidf>
c000d83e:	83 c4 10             	add    esp,0x10
c000d841:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d845:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d849:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d84d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d851:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d855:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d859:	e8 c1 a1 01 00       	call   c0027a1f <__ltdf2>
c000d85e:	83 c4 10             	add    esp,0x10
c000d861:	85 c0                	test   eax,eax
c000d863:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000d867:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000d86b:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000d86f:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000d873:	78 10                	js     c000d885 <sinc_mono_vari_process+0x519>
c000d875:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d879:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d87d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d881:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d885:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d889:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d88d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d891:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d895:	e8 b6 98 01 00       	call   c0027150 <__muldf3>
c000d89a:	59                   	pop    ecx
c000d89b:	5f                   	pop    edi
c000d89c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d8a0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d8a4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8a8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8ac:	e8 07 de ff ff       	call   c000b6b8 <double_to_fp>
c000d8b1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8b5:	89 c7                	mov    edi,eax
c000d8b7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d8bf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d8c3:	e8 88 98 01 00       	call   c0027150 <__muldf3>
c000d8c8:	83 c4 18             	add    esp,0x18
c000d8cb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d8cf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d8d3:	52                   	push   edx
c000d8d4:	50                   	push   eax
c000d8d5:	e8 de dd ff ff       	call   c000b6b8 <double_to_fp>
c000d8da:	83 ec 0c             	sub    esp,0xc
c000d8dd:	89 c5                	mov    ebp,eax
c000d8df:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d8e2:	e8 cc 9e 01 00       	call   c00277b3 <__floatsidf>
c000d8e7:	83 c4 10             	add    esp,0x10
c000d8ea:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d8ee:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d8f2:	52                   	push   edx
c000d8f3:	50                   	push   eax
c000d8f4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d8f8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d8fc:	e8 33 9b 01 00       	call   c0027434 <__divdf3>
c000d901:	83 c4 10             	add    esp,0x10
c000d904:	89 e9                	mov    ecx,ebp
c000d906:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d90a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d90e:	89 d8                	mov    eax,ebx
c000d910:	89 fa                	mov    edx,edi
c000d912:	e8 ee bd ff ff       	call   c0009705 <calc_output_single>
c000d917:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000d91a:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000d91d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d921:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d925:	52                   	push   edx
c000d926:	50                   	push   eax
c000d927:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d92b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d92f:	e8 1c 98 01 00       	call   c0027150 <__muldf3>
c000d934:	59                   	pop    ecx
c000d935:	59                   	pop    ecx
c000d936:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d93a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d93e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d942:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d946:	e8 d8 a0 01 00       	call   c0027a23 <__truncdfsf2>
c000d94b:	83 c4 10             	add    esp,0x10
c000d94e:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000d951:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000d954:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d958:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d95c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d960:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d964:	e8 cb 9a 01 00       	call   c0027434 <__divdf3>
c000d969:	83 c4 10             	add    esp,0x10
c000d96c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d970:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d974:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d978:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d97c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d980:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d984:	e8 4a 91 01 00       	call   c0026ad3 <__adddf3>
c000d989:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000d98d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d991:	83 c4 18             	add    esp,0x18
c000d994:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d998:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d99c:	e8 2f a2 01 00       	call   c0027bd0 <lrint>
c000d9a1:	83 ec 0c             	sub    esp,0xc
c000d9a4:	50                   	push   eax
c000d9a5:	e8 09 9e 01 00       	call   c00277b3 <__floatsidf>
c000d9aa:	83 c4 10             	add    esp,0x10
c000d9ad:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d9b1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d9b5:	52                   	push   edx
c000d9b6:	50                   	push   eax
c000d9b7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d9bb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d9bf:	e8 60 97 01 00       	call   c0027124 <__subdf3>
c000d9c4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d9c8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d9cc:	83 c4 20             	add    esp,0x20
c000d9cf:	6a 00                	push   0x0
c000d9d1:	6a 00                	push   0x0
c000d9d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9db:	e8 3f a0 01 00       	call   c0027a1f <__ltdf2>
c000d9e0:	83 c4 10             	add    esp,0x10
c000d9e3:	85 c0                	test   eax,eax
c000d9e5:	79 20                	jns    c000da07 <sinc_mono_vari_process+0x69b>
c000d9e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f7:	e8 d7 90 01 00       	call   c0026ad3 <__adddf3>
c000d9fc:	83 c4 10             	add    esp,0x10
c000d9ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000da03:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000da07:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000da0a:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000da0d:	83 ec 10             	sub    esp,0x10
c000da10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000da1c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000da20:	e8 ff 96 01 00       	call   c0027124 <__subdf3>
c000da25:	83 c4 18             	add    esp,0x18
c000da28:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da2c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da30:	52                   	push   edx
c000da31:	50                   	push   eax
c000da32:	e8 99 a1 01 00       	call   c0027bd0 <lrint>
c000da37:	83 c4 10             	add    esp,0x10
c000da3a:	0f af f8             	imul   edi,eax
c000da3d:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000da40:	99                   	cdq    
c000da41:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000da44:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000da47:	e9 d2 fb ff ff       	jmp    c000d61e <sinc_mono_vari_process+0x2b2>
c000da4c:	83 c4 4c             	add    esp,0x4c
c000da4f:	89 d0                	mov    eax,edx
c000da51:	5b                   	pop    ebx
c000da52:	5e                   	pop    esi
c000da53:	5f                   	pop    edi
c000da54:	5d                   	pop    ebp
c000da55:	c3                   	ret    

c000da56 <sinc_get_name>:
c000da56:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000da5a:	31 c0                	xor    eax,eax
c000da5c:	83 fa 02             	cmp    edx,0x2
c000da5f:	77 07                	ja     c000da68 <sinc_get_name+0x12>
c000da61:	8b 04 95 c4 93 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6c3c]
c000da68:	c3                   	ret    

c000da69 <sinc_get_description>:
c000da69:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000da6d:	31 c0                	xor    eax,eax
c000da6f:	83 fa 02             	cmp    edx,0x2
c000da72:	77 07                	ja     c000da7b <sinc_get_description+0x12>
c000da74:	8b 04 95 b8 93 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6c48]
c000da7b:	c3                   	ret    

c000da7c <sinc_set_converter>:
c000da7c:	53                   	push   ebx
c000da7d:	81 ec 58 08 00 00    	sub    esp,0x858
c000da83:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000da8a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000da8d:	85 c0                	test   eax,eax
c000da8f:	74 13                	je     c000daa4 <sinc_set_converter+0x28>
c000da91:	83 ec 0c             	sub    esp,0xc
c000da94:	50                   	push   eax
c000da95:	e8 9a 1b 00 00       	call   c000f634 <free>
c000da9a:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000daa1:	83 c4 10             	add    esp,0x10
c000daa4:	50                   	push   eax
c000daa5:	68 44 08 00 00       	push   0x844
c000daaa:	6a 00                	push   0x0
c000daac:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dab0:	50                   	push   eax
c000dab1:	e8 0e 2c ff ff       	call   c00006c4 <memset>
c000dab6:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dab9:	83 c4 10             	add    esp,0x10
c000dabc:	b8 0b 00 00 00       	mov    eax,0xb
c000dac1:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dac7:	7f 6e                	jg     c000db37 <sinc_set_converter+0xbb>
c000dac9:	83 fa 01             	cmp    edx,0x1
c000dacc:	75 10                	jne    c000dade <sinc_set_converter+0x62>
c000dace:	c7 43 24 6c d3 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d36c
c000dad5:	c7 43 20 6c d3 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d36c
c000dadc:	eb 4d                	jmp    c000db2b <sinc_set_converter+0xaf>
c000dade:	83 fa 02             	cmp    edx,0x2
c000dae1:	75 10                	jne    c000daf3 <sinc_set_converter+0x77>
c000dae3:	c7 43 24 a7 cc 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cca7
c000daea:	c7 43 20 a7 cc 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cca7
c000daf1:	eb 38                	jmp    c000db2b <sinc_set_converter+0xaf>
c000daf3:	83 fa 04             	cmp    edx,0x4
c000daf6:	75 10                	jne    c000db08 <sinc_set_converter+0x8c>
c000daf8:	c7 43 24 e2 c5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c5e2
c000daff:	c7 43 20 e2 c5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c5e2
c000db06:	eb 23                	jmp    c000db2b <sinc_set_converter+0xaf>
c000db08:	83 fa 06             	cmp    edx,0x6
c000db0b:	75 10                	jne    c000db1d <sinc_set_converter+0xa1>
c000db0d:	c7 43 24 1d bf 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000bf1d
c000db14:	c7 43 20 1d bf 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000bf1d
c000db1b:	eb 0e                	jmp    c000db2b <sinc_set_converter+0xaf>
c000db1d:	c7 43 24 59 b8 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000b859
c000db24:	c7 43 20 59 b8 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000b859
c000db2b:	c7 43 28 0c ab 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ab0c
c000db32:	b8 0a 00 00 00       	mov    eax,0xa
c000db37:	81 c4 58 08 00 00    	add    esp,0x858
c000db3d:	5b                   	pop    ebx
c000db3e:	c3                   	ret    

c000db3f <zoh_vari_process>:
c000db3f:	55                   	push   ebp
c000db40:	31 d2                	xor    edx,edx
c000db42:	57                   	push   edi
c000db43:	56                   	push   esi
c000db44:	53                   	push   ebx
c000db45:	83 ec 3c             	sub    esp,0x3c
c000db48:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000db4c:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000db50:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000db54:	0f 8e 80 06 00 00    	jle    c000e1da <zoh_vari_process+0x69b>
c000db5a:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000db5d:	ba 05 00 00 00       	mov    edx,0x5
c000db62:	85 db                	test   ebx,ebx
c000db64:	0f 84 70 06 00 00    	je     c000e1da <zoh_vari_process+0x69b>
c000db6a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000db6d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000db71:	74 19                	je     c000db8c <zoh_vari_process+0x4d>
c000db73:	31 d2                	xor    edx,edx
c000db75:	39 c2                	cmp    edx,eax
c000db77:	7d 0c                	jge    c000db85 <zoh_vari_process+0x46>
c000db79:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000db7b:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000db7e:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000db82:	42                   	inc    edx
c000db83:	eb f0                	jmp    c000db75 <zoh_vari_process+0x36>
c000db85:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000db8c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000db8f:	0f af d0             	imul   edx,eax
c000db92:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000db95:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000db99:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000dba0:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000dba3:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000dbaa:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dbad:	8b 07                	mov    eax,DWORD PTR [edi]
c000dbaf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dbb3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dbb7:	68 00 00 70 3f       	push   0x3f700000
c000dbbc:	6a 00                	push   0x0
c000dbbe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbc6:	e8 54 9e 01 00       	call   c0027a1f <__ltdf2>
c000dbcb:	83 c4 10             	add    esp,0x10
c000dbce:	ba 16 00 00 00       	mov    edx,0x16
c000dbd3:	85 c0                	test   eax,eax
c000dbd5:	0f 88 ff 05 00 00    	js     c000e1da <zoh_vari_process+0x69b>
c000dbdb:	68 00 00 70 40       	push   0x40700000
c000dbe0:	6a 00                	push   0x0
c000dbe2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbe6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbea:	e8 12 9e 01 00       	call   c0027a01 <__gtdf2>
c000dbef:	83 c4 10             	add    esp,0x10
c000dbf2:	ba 16 00 00 00       	mov    edx,0x16
c000dbf7:	85 c0                	test   eax,eax
c000dbf9:	0f 8f db 05 00 00    	jg     c000e1da <zoh_vari_process+0x69b>
c000dbff:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dc02:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000dc05:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dc09:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dc0d:	68 00 00 f0 3f       	push   0x3ff00000
c000dc12:	6a 00                	push   0x0
c000dc14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc1c:	e8 fe 9d 01 00       	call   c0027a1f <__ltdf2>
c000dc21:	83 c4 10             	add    esp,0x10
c000dc24:	85 c0                	test   eax,eax
c000dc26:	0f 89 da 01 00 00    	jns    c000de06 <zoh_vari_process+0x2c7>
c000dc2c:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000dc2f:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000dc32:	0f 8d ce 01 00 00    	jge    c000de06 <zoh_vari_process+0x2c7>
c000dc38:	83 ec 0c             	sub    esp,0xc
c000dc3b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dc3e:	e8 70 9b 01 00       	call   c00277b3 <__floatsidf>
c000dc43:	83 c4 10             	add    esp,0x10
c000dc46:	89 04 24             	mov    DWORD PTR [esp],eax
c000dc49:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dc4d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc51:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc55:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc59:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc5d:	e8 ee 94 01 00       	call   c0027150 <__muldf3>
c000dc62:	59                   	pop    ecx
c000dc63:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc67:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dc6b:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000dc6e:	e8 40 9b 01 00       	call   c00277b3 <__floatsidf>
c000dc73:	83 c4 10             	add    esp,0x10
c000dc76:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dc7a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dc7e:	52                   	push   edx
c000dc7f:	50                   	push   eax
c000dc80:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc84:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc88:	e8 46 8e 01 00       	call   c0026ad3 <__adddf3>
c000dc8d:	59                   	pop    ecx
c000dc8e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc92:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dc96:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000dc99:	e8 15 9b 01 00       	call   c00277b3 <__floatsidf>
c000dc9e:	83 c4 10             	add    esp,0x10
c000dca1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dca5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dca9:	52                   	push   edx
c000dcaa:	50                   	push   eax
c000dcab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dcaf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dcb3:	e8 65 9d 01 00       	call   c0027a1d <__gedf2>
c000dcb8:	83 c4 10             	add    esp,0x10
c000dcbb:	85 c0                	test   eax,eax
c000dcbd:	0f 89 43 01 00 00    	jns    c000de06 <zoh_vari_process+0x2c7>
c000dcc3:	85 ed                	test   ebp,ebp
c000dcc5:	0f 8e ec 00 00 00    	jle    c000ddb7 <zoh_vari_process+0x278>
c000dccb:	83 ec 10             	sub    esp,0x10
c000dcce:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dcd1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dcd4:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000dcd7:	ff 37                	push   DWORD PTR [edi]
c000dcd9:	e8 46 94 01 00       	call   c0027124 <__subdf3>
c000dcde:	83 c4 18             	add    esp,0x18
c000dce1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dce5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dce9:	52                   	push   edx
c000dcea:	50                   	push   eax
c000dceb:	e8 c0 9e 01 00       	call   c0027bb0 <fabs>
c000dcf0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dcf4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dcf8:	83 c4 10             	add    esp,0x10
c000dcfb:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000dd00:	68 23 42 92 0c       	push   0xc924223
c000dd05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd09:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd0d:	e8 ef 9c 01 00       	call   c0027a01 <__gtdf2>
c000dd12:	83 c4 10             	add    esp,0x10
c000dd15:	85 c0                	test   eax,eax
c000dd17:	0f 8e 9a 00 00 00    	jle    c000ddb7 <zoh_vari_process+0x278>
c000dd1d:	8b 07                	mov    eax,DWORD PTR [edi]
c000dd1f:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dd22:	89 04 24             	mov    DWORD PTR [esp],eax
c000dd25:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dd29:	52                   	push   edx
c000dd2a:	50                   	push   eax
c000dd2b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dd2e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dd31:	e8 ee 93 01 00       	call   c0027124 <__subdf3>
c000dd36:	59                   	pop    ecx
c000dd37:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dd3b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dd3f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000dd42:	e8 6c 9a 01 00       	call   c00277b3 <__floatsidf>
c000dd47:	83 c4 10             	add    esp,0x10
c000dd4a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dd4e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dd52:	52                   	push   edx
c000dd53:	50                   	push   eax
c000dd54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd58:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd5c:	e8 ef 93 01 00       	call   c0027150 <__muldf3>
c000dd61:	5d                   	pop    ebp
c000dd62:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dd66:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dd6a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000dd6d:	e8 41 9a 01 00       	call   c00277b3 <__floatsidf>
c000dd72:	83 c4 10             	add    esp,0x10
c000dd75:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dd79:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dd7d:	52                   	push   edx
c000dd7e:	50                   	push   eax
c000dd7f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd83:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd87:	e8 a8 96 01 00       	call   c0027434 <__divdf3>
c000dd8c:	83 c4 10             	add    esp,0x10
c000dd8f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd93:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd97:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dd9b:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dd9f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dda3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dda7:	e8 27 8d 01 00       	call   c0026ad3 <__adddf3>
c000ddac:	83 c4 10             	add    esp,0x10
c000ddaf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ddb3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ddb7:	31 c0                	xor    eax,eax
c000ddb9:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000ddbc:	7e 13                	jle    c000ddd1 <zoh_vari_process+0x292>
c000ddbe:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000ddc2:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000ddc5:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000ddc8:	40                   	inc    eax
c000ddc9:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000ddcc:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000ddcf:	eb e8                	jmp    c000ddb9 <zoh_vari_process+0x27a>
c000ddd1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ddd5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ddd9:	68 00 00 f0 3f       	push   0x3ff00000
c000ddde:	6a 00                	push   0x0
c000dde0:	e8 4f 96 01 00       	call   c0027434 <__divdf3>
c000dde5:	83 c4 10             	add    esp,0x10
c000dde8:	89 04 24             	mov    DWORD PTR [esp],eax
c000ddeb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ddef:	52                   	push   edx
c000ddf0:	50                   	push   eax
c000ddf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf9:	e8 d5 8c 01 00       	call   c0026ad3 <__adddf3>
c000ddfe:	83 c4 10             	add    esp,0x10
c000de01:	e9 ff fd ff ff       	jmp    c000dc05 <zoh_vari_process+0xc6>
c000de06:	55                   	push   ebp
c000de07:	55                   	push   ebp
c000de08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de10:	e8 bb 9d 01 00       	call   c0027bd0 <lrint>
c000de15:	83 ec 0c             	sub    esp,0xc
c000de18:	50                   	push   eax
c000de19:	e8 95 99 01 00       	call   c00277b3 <__floatsidf>
c000de1e:	83 c4 10             	add    esp,0x10
c000de21:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de25:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000de29:	52                   	push   edx
c000de2a:	50                   	push   eax
c000de2b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de2f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de33:	e8 ec 92 01 00       	call   c0027124 <__subdf3>
c000de38:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000de3c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000de40:	83 c4 20             	add    esp,0x20
c000de43:	6a 00                	push   0x0
c000de45:	6a 00                	push   0x0
c000de47:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de4b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de4f:	e8 cb 9b 01 00       	call   c0027a1f <__ltdf2>
c000de54:	83 c4 10             	add    esp,0x10
c000de57:	85 c0                	test   eax,eax
c000de59:	79 1e                	jns    c000de79 <zoh_vari_process+0x33a>
c000de5b:	68 00 00 f0 3f       	push   0x3ff00000
c000de60:	6a 00                	push   0x0
c000de62:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de66:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de6a:	e8 64 8c 01 00       	call   c0026ad3 <__adddf3>
c000de6f:	83 c4 10             	add    esp,0x10
c000de72:	89 04 24             	mov    DWORD PTR [esp],eax
c000de75:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de79:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000de7c:	83 ec 10             	sub    esp,0x10
c000de7f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de83:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de87:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de8b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de8f:	e8 90 92 01 00       	call   c0027124 <__subdf3>
c000de94:	83 c4 18             	add    esp,0x18
c000de97:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de9b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de9f:	52                   	push   edx
c000dea0:	50                   	push   eax
c000dea1:	e8 2a 9d 01 00       	call   c0027bd0 <lrint>
c000dea6:	83 c4 10             	add    esp,0x10
c000dea9:	0f af e8             	imul   ebp,eax
c000deac:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000deaf:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000deb2:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000deb6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000deb9:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000debc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dec0:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000dec3:	0f 8d 7a 02 00 00    	jge    c000e143 <zoh_vari_process+0x604>
c000dec9:	83 ec 0c             	sub    esp,0xc
c000decc:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000decf:	e8 df 98 01 00       	call   c00277b3 <__floatsidf>
c000ded4:	83 c4 10             	add    esp,0x10
c000ded7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dedb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dedf:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dee3:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dee7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000deeb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000deef:	e8 5c 92 01 00       	call   c0027150 <__muldf3>
c000def4:	59                   	pop    ecx
c000def5:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000def9:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000defd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df01:	e8 ad 98 01 00       	call   c00277b3 <__floatsidf>
c000df06:	83 c4 10             	add    esp,0x10
c000df09:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000df0d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000df11:	52                   	push   edx
c000df12:	50                   	push   eax
c000df13:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000df17:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000df1b:	e8 b3 8b 01 00       	call   c0026ad3 <__adddf3>
c000df20:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000df23:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000df27:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000df2b:	e8 83 98 01 00       	call   c00277b3 <__floatsidf>
c000df30:	83 c4 10             	add    esp,0x10
c000df33:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000df37:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000df3b:	52                   	push   edx
c000df3c:	50                   	push   eax
c000df3d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000df41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000df45:	e8 d7 9a 01 00       	call   c0027a21 <__ledf2>
c000df4a:	83 c4 10             	add    esp,0x10
c000df4d:	85 c0                	test   eax,eax
c000df4f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000df53:	0f 8f ea 01 00 00    	jg     c000e143 <zoh_vari_process+0x604>
c000df59:	85 c9                	test   ecx,ecx
c000df5b:	0f 8e ed 00 00 00    	jle    c000e04e <zoh_vari_process+0x50f>
c000df61:	83 ec 10             	sub    esp,0x10
c000df64:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df67:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df6a:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000df6d:	ff 37                	push   DWORD PTR [edi]
c000df6f:	e8 b0 91 01 00       	call   c0027124 <__subdf3>
c000df74:	83 c4 18             	add    esp,0x18
c000df77:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df7b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df7f:	52                   	push   edx
c000df80:	50                   	push   eax
c000df81:	e8 2a 9c 01 00       	call   c0027bb0 <fabs>
c000df86:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000df8a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000df8e:	83 c4 10             	add    esp,0x10
c000df91:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df96:	68 23 42 92 0c       	push   0xc924223
c000df9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfa3:	e8 59 9a 01 00       	call   c0027a01 <__gtdf2>
c000dfa8:	83 c4 10             	add    esp,0x10
c000dfab:	85 c0                	test   eax,eax
c000dfad:	0f 8e 9b 00 00 00    	jle    c000e04e <zoh_vari_process+0x50f>
c000dfb3:	8b 07                	mov    eax,DWORD PTR [edi]
c000dfb5:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dfb8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfbc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfc0:	52                   	push   edx
c000dfc1:	50                   	push   eax
c000dfc2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dfc5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dfc8:	e8 57 91 01 00       	call   c0027124 <__subdf3>
c000dfcd:	5d                   	pop    ebp
c000dfce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dfd2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000dfd6:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000dfd9:	e8 d5 97 01 00       	call   c00277b3 <__floatsidf>
c000dfde:	83 c4 10             	add    esp,0x10
c000dfe1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dfe5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dfe9:	52                   	push   edx
c000dfea:	50                   	push   eax
c000dfeb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dff3:	e8 58 91 01 00       	call   c0027150 <__muldf3>
c000dff8:	59                   	pop    ecx
c000dff9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dffd:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e001:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e004:	e8 aa 97 01 00       	call   c00277b3 <__floatsidf>
c000e009:	83 c4 10             	add    esp,0x10
c000e00c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e010:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e014:	52                   	push   edx
c000e015:	50                   	push   eax
c000e016:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e01a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e01e:	e8 11 94 01 00       	call   c0027434 <__divdf3>
c000e023:	83 c4 10             	add    esp,0x10
c000e026:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e02a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e02e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e032:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e036:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e03a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e03e:	e8 90 8a 01 00       	call   c0026ad3 <__adddf3>
c000e043:	83 c4 10             	add    esp,0x10
c000e046:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e04a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e04e:	31 d2                	xor    edx,edx
c000e050:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e053:	39 d0                	cmp    eax,edx
c000e055:	7e 1d                	jle    c000e074 <zoh_vari_process+0x535>
c000e057:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e05a:	29 c1                	sub    ecx,eax
c000e05c:	89 c8                	mov    eax,ecx
c000e05e:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e060:	01 d0                	add    eax,edx
c000e062:	42                   	inc    edx
c000e063:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e066:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e069:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e06c:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e06f:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e072:	eb dc                	jmp    c000e050 <zoh_vari_process+0x511>
c000e074:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e078:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e07c:	68 00 00 f0 3f       	push   0x3ff00000
c000e081:	6a 00                	push   0x0
c000e083:	e8 ac 93 01 00       	call   c0027434 <__divdf3>
c000e088:	83 c4 10             	add    esp,0x10
c000e08b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e08f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e093:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e097:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e09b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e09f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0a3:	e8 2b 8a 01 00       	call   c0026ad3 <__adddf3>
c000e0a8:	5d                   	pop    ebp
c000e0a9:	59                   	pop    ecx
c000e0aa:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0ba:	e8 11 9b 01 00       	call   c0027bd0 <lrint>
c000e0bf:	83 ec 0c             	sub    esp,0xc
c000e0c2:	50                   	push   eax
c000e0c3:	e8 eb 96 01 00       	call   c00277b3 <__floatsidf>
c000e0c8:	83 c4 10             	add    esp,0x10
c000e0cb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0cf:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e0d3:	52                   	push   edx
c000e0d4:	50                   	push   eax
c000e0d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0dd:	e8 42 90 01 00       	call   c0027124 <__subdf3>
c000e0e2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e0e6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e0ea:	83 c4 20             	add    esp,0x20
c000e0ed:	6a 00                	push   0x0
c000e0ef:	6a 00                	push   0x0
c000e0f1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0f5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0f9:	e8 21 99 01 00       	call   c0027a1f <__ltdf2>
c000e0fe:	83 c4 10             	add    esp,0x10
c000e101:	85 c0                	test   eax,eax
c000e103:	79 1e                	jns    c000e123 <zoh_vari_process+0x5e4>
c000e105:	68 00 00 f0 3f       	push   0x3ff00000
c000e10a:	6a 00                	push   0x0
c000e10c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e110:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e114:	e8 ba 89 01 00       	call   c0026ad3 <__adddf3>
c000e119:	83 c4 10             	add    esp,0x10
c000e11c:	89 04 24             	mov    DWORD PTR [esp],eax
c000e11f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e123:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e126:	83 ec 10             	sub    esp,0x10
c000e129:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e12d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e131:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e135:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e139:	e8 e6 8f 01 00       	call   c0027124 <__subdf3>
c000e13e:	e9 51 fd ff ff       	jmp    c000de94 <zoh_vari_process+0x355>
c000e143:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e147:	7d 3a                	jge    c000e183 <zoh_vari_process+0x644>
c000e149:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e14d:	83 ec 0c             	sub    esp,0xc
c000e150:	29 e8                	sub    eax,ebp
c000e152:	99                   	cdq    
c000e153:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e156:	50                   	push   eax
c000e157:	e8 57 96 01 00       	call   c00277b3 <__floatsidf>
c000e15c:	83 c4 10             	add    esp,0x10
c000e15f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e163:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e167:	52                   	push   edx
c000e168:	50                   	push   eax
c000e169:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e16d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e171:	e8 5d 89 01 00       	call   c0026ad3 <__adddf3>
c000e176:	83 c4 10             	add    esp,0x10
c000e179:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e17c:	89 04 24             	mov    DWORD PTR [esp],eax
c000e17f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e183:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e186:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e18a:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e18d:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e190:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e193:	85 c0                	test   eax,eax
c000e195:	7f 25                	jg     c000e1bc <zoh_vari_process+0x67d>
c000e197:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e19b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e19f:	89 07                	mov    DWORD PTR [edi],eax
c000e1a1:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e1a4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e1a7:	99                   	cdq    
c000e1a8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e1ab:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e1ae:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e1b1:	99                   	cdq    
c000e1b2:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e1b5:	31 d2                	xor    edx,edx
c000e1b7:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e1ba:	eb 1e                	jmp    c000e1da <zoh_vari_process+0x69b>
c000e1bc:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e1bf:	31 d2                	xor    edx,edx
c000e1c1:	29 c8                	sub    eax,ecx
c000e1c3:	c1 e0 02             	shl    eax,0x2
c000e1c6:	39 d1                	cmp    ecx,edx
c000e1c8:	7e cd                	jle    c000e197 <zoh_vari_process+0x658>
c000e1ca:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e1cc:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e1d0:	83 c0 04             	add    eax,0x4
c000e1d3:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e1d7:	42                   	inc    edx
c000e1d8:	eb ec                	jmp    c000e1c6 <zoh_vari_process+0x687>
c000e1da:	83 c4 3c             	add    esp,0x3c
c000e1dd:	89 d0                	mov    eax,edx
c000e1df:	5b                   	pop    ebx
c000e1e0:	5e                   	pop    esi
c000e1e1:	5f                   	pop    edi
c000e1e2:	5d                   	pop    ebp
c000e1e3:	c3                   	ret    

c000e1e4 <zoh_reset>:
c000e1e4:	83 ec 0c             	sub    esp,0xc
c000e1e7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e1eb:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e1ee:	85 c0                	test   eax,eax
c000e1f0:	74 20                	je     c000e212 <zoh_reset+0x2e>
c000e1f2:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e1f5:	83 c0 1c             	add    eax,0x1c
c000e1f8:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e1fb:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e202:	c1 e2 02             	shl    edx,0x2
c000e205:	51                   	push   ecx
c000e206:	52                   	push   edx
c000e207:	6a 00                	push   0x0
c000e209:	50                   	push   eax
c000e20a:	e8 b5 24 ff ff       	call   c00006c4 <memset>
c000e20f:	83 c4 10             	add    esp,0x10
c000e212:	83 c4 0c             	add    esp,0xc
c000e215:	c3                   	ret    

c000e216 <zoh_get_name>:
c000e216:	31 c0                	xor    eax,eax
c000e218:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e21d:	75 05                	jne    c000e224 <zoh_get_name+0xe>
c000e21f:	b8 de 94 02 c0       	mov    eax,0xc00294de
c000e224:	c3                   	ret    

c000e225 <zoh_get_description>:
c000e225:	31 c0                	xor    eax,eax
c000e227:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e22c:	75 05                	jne    c000e233 <zoh_get_description+0xe>
c000e22e:	b8 ef 94 02 c0       	mov    eax,0xc00294ef
c000e233:	c3                   	ret    

c000e234 <zoh_set_converter>:
c000e234:	53                   	push   ebx
c000e235:	b8 0a 00 00 00       	mov    eax,0xa
c000e23a:	83 ec 08             	sub    esp,0x8
c000e23d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e241:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e246:	75 6e                	jne    c000e2b6 <zoh_set_converter+0x82>
c000e248:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e24b:	85 c0                	test   eax,eax
c000e24d:	74 13                	je     c000e262 <zoh_set_converter+0x2e>
c000e24f:	83 ec 0c             	sub    esp,0xc
c000e252:	50                   	push   eax
c000e253:	e8 dc 13 00 00       	call   c000f634 <free>
c000e258:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e25f:	83 c4 10             	add    esp,0x10
c000e262:	50                   	push   eax
c000e263:	50                   	push   eax
c000e264:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e267:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e26e:	50                   	push   eax
c000e26f:	6a 01                	push   0x1
c000e271:	e8 de 13 00 00       	call   c000f654 <calloc>
c000e276:	83 c4 10             	add    esp,0x10
c000e279:	89 c2                	mov    edx,eax
c000e27b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e27e:	85 d2                	test   edx,edx
c000e280:	b8 01 00 00 00       	mov    eax,0x1
c000e285:	74 2f                	je     c000e2b6 <zoh_set_converter+0x82>
c000e287:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e28a:	83 ec 0c             	sub    esp,0xc
c000e28d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e290:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e296:	c7 43 24 3f db 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000db3f
c000e29d:	c7 43 20 3f db 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000db3f
c000e2a4:	c7 43 28 e4 e1 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e1e4
c000e2ab:	53                   	push   ebx
c000e2ac:	e8 33 ff ff ff       	call   c000e1e4 <zoh_reset>
c000e2b1:	83 c4 10             	add    esp,0x10
c000e2b4:	31 c0                	xor    eax,eax
c000e2b6:	83 c4 08             	add    esp,0x8
c000e2b9:	5b                   	pop    ebx
c000e2ba:	c3                   	ret    

c000e2bb <CPU::current()>:
c000e2bb:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c000e2c0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e2c6:	90                   	nop
c000e2c7:	c3                   	ret    

c000e2c8 <operator new(unsigned long)>:
c000e2c8:	83 ec 0c             	sub    esp,0xc
c000e2cb:	83 ec 0c             	sub    esp,0xc
c000e2ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2d2:	e8 4d 13 00 00       	call   c000f624 <malloc>
c000e2d7:	83 c4 10             	add    esp,0x10
c000e2da:	83 c4 0c             	add    esp,0xc
c000e2dd:	c3                   	ret    

c000e2de <Krnl::resolveCompatibilitySymbol(char*)>:
c000e2de:	83 ec 0c             	sub    esp,0xc
c000e2e1:	83 ec 08             	sub    esp,0x8
c000e2e4:	68 26 95 02 c0       	push   0xc0029526
c000e2e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2ed:	e8 c2 24 ff ff       	call   c00007b4 <strcmp>
c000e2f2:	83 c4 10             	add    esp,0x10
c000e2f5:	85 c0                	test   eax,eax
c000e2f7:	0f 94 c0             	sete   al
c000e2fa:	84 c0                	test   al,al
c000e2fc:	74 0a                	je     c000e308 <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e2fe:	b8 88 d8 02 c0       	mov    eax,0xc002d888
c000e303:	e9 e3 00 00 00       	jmp    c000e3eb <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e308:	83 ec 08             	sub    esp,0x8
c000e30b:	68 2f 95 02 c0       	push   0xc002952f
c000e310:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e314:	e8 9b 24 ff ff       	call   c00007b4 <strcmp>
c000e319:	83 c4 10             	add    esp,0x10
c000e31c:	85 c0                	test   eax,eax
c000e31e:	0f 94 c0             	sete   al
c000e321:	84 c0                	test   al,al
c000e323:	74 0a                	je     c000e32f <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e325:	b8 4c 5f 02 c0       	mov    eax,0xc0025f4c
c000e32a:	e9 bc 00 00 00       	jmp    c000e3eb <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e32f:	83 ec 08             	sub    esp,0x8
c000e332:	68 39 95 02 c0       	push   0xc0029539
c000e337:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e33b:	e8 74 24 ff ff       	call   c00007b4 <strcmp>
c000e340:	83 c4 10             	add    esp,0x10
c000e343:	85 c0                	test   eax,eax
c000e345:	0f 94 c0             	sete   al
c000e348:	84 c0                	test   al,al
c000e34a:	74 0a                	je     c000e356 <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e34c:	b8 80 5c 02 c0       	mov    eax,0xc0025c80
c000e351:	e9 95 00 00 00       	jmp    c000e3eb <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e356:	83 ec 08             	sub    esp,0x8
c000e359:	68 42 95 02 c0       	push   0xc0029542
c000e35e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e362:	e8 4d 24 ff ff       	call   c00007b4 <strcmp>
c000e367:	83 c4 10             	add    esp,0x10
c000e36a:	85 c0                	test   eax,eax
c000e36c:	0f 94 c0             	sete   al
c000e36f:	84 c0                	test   al,al
c000e371:	74 07                	je     c000e37a <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e373:	b8 4c 60 02 c0       	mov    eax,0xc002604c
c000e378:	eb 71                	jmp    c000e3eb <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e37a:	83 ec 08             	sub    esp,0x8
c000e37d:	68 4c 95 02 c0       	push   0xc002954c
c000e382:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e386:	e8 29 24 ff ff       	call   c00007b4 <strcmp>
c000e38b:	83 c4 10             	add    esp,0x10
c000e38e:	85 c0                	test   eax,eax
c000e390:	0f 94 c0             	sete   al
c000e393:	84 c0                	test   al,al
c000e395:	74 07                	je     c000e39e <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e397:	b8 cc 5d 02 c0       	mov    eax,0xc0025dcc
c000e39c:	eb 4d                	jmp    c000e3eb <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e39e:	83 ec 08             	sub    esp,0x8
c000e3a1:	68 55 95 02 c0       	push   0xc0029555
c000e3a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3aa:	e8 05 24 ff ff       	call   c00007b4 <strcmp>
c000e3af:	83 c4 10             	add    esp,0x10
c000e3b2:	85 c0                	test   eax,eax
c000e3b4:	0f 94 c0             	sete   al
c000e3b7:	84 c0                	test   al,al
c000e3b9:	74 07                	je     c000e3c2 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e3bb:	b8 8c d8 02 c0       	mov    eax,0xc002d88c
c000e3c0:	eb 29                	jmp    c000e3eb <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e3c2:	83 ec 08             	sub    esp,0x8
c000e3c5:	68 62 95 02 c0       	push   0xc0029562
c000e3ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3ce:	e8 e1 23 ff ff       	call   c00007b4 <strcmp>
c000e3d3:	83 c4 10             	add    esp,0x10
c000e3d6:	85 c0                	test   eax,eax
c000e3d8:	0f 94 c0             	sete   al
c000e3db:	84 c0                	test   al,al
c000e3dd:	74 07                	je     c000e3e6 <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e3df:	b8 8d d8 02 c0       	mov    eax,0xc002d88d
c000e3e4:	eb 05                	jmp    c000e3eb <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e3e6:	b8 00 00 00 00       	mov    eax,0x0
c000e3eb:	83 c4 0c             	add    esp,0xc
c000e3ee:	c3                   	ret    
c000e3ef:	90                   	nop

c000e3f0 <Computer::close(int, int, void*)>:
c000e3f0:	57                   	push   edi
c000e3f1:	56                   	push   esi
c000e3f2:	53                   	push   ebx
c000e3f3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e3f7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e3fb:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e3ff:	83 ec 0c             	sub    esp,0xc
c000e402:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e408:	e8 83 5a 00 00       	call   c0013e90 <Device::closeAll()>
c000e40d:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e413:	83 c4 10             	add    esp,0x10
c000e416:	8b 10                	mov    edx,DWORD PTR [eax]
c000e418:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e41c:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e424:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e428:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e42c:	5b                   	pop    ebx
c000e42d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e430:	5e                   	pop    esi
c000e431:	5f                   	pop    edi
c000e432:	ff e0                	jmp    eax

c000e434 <Krnl::firstTask()>:
c000e434:	53                   	push   ebx
c000e435:	83 ec 14             	sub    esp,0x14
c000e438:	fb                   	sti    
c000e439:	68 3f 07 00 00       	push   0x73f
c000e43e:	e8 e1 11 00 00       	call   c000f624 <malloc>
c000e443:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e44a:	89 c3                	mov    ebx,eax
c000e44c:	ff 35 d4 ed 02 c0    	push   DWORD PTR ds:0xc002edd4
c000e452:	68 6f 95 02 c0       	push   0xc002956f
c000e457:	6a 01                	push   0x1
c000e459:	50                   	push   eax
c000e45a:	e8 59 ec 00 00       	call   c001d0b8 <Process::Process(bool, char const*, Process*, char**)>
c000e45f:	83 c4 20             	add    esp,0x20
c000e462:	68 ff 00 00 00       	push   0xff
c000e467:	6a 00                	push   0x0
c000e469:	68 b9 ef 00 c0       	push   0xc000efb9
c000e46e:	53                   	push   ebx
c000e46f:	e8 42 ef 00 00       	call   c001d3b6 <Process::createThread(void (*)(void*), void*, int)>
c000e474:	6a 7a                	push   0x7a
c000e476:	6a 00                	push   0x0
c000e478:	68 14 dc 01 c0       	push   0xc001dc14
c000e47d:	ff 35 d4 ed 02 c0    	push   DWORD PTR ds:0xc002edd4
c000e483:	e8 2e ef 00 00       	call   c001d3b6 <Process::createThread(void (*)(void*), void*, int)>
c000e488:	83 c4 20             	add    esp,0x20
c000e48b:	a3 88 ed 02 c0       	mov    ds:0xc002ed88,eax
c000e490:	c6 05 8d d8 02 c0 01 	mov    BYTE PTR ds:0xc002d88d,0x1
c000e497:	e8 f9 fa 00 00       	call   c001df95 <Vm::initialise8086()>
c000e49c:	e8 d7 47 00 00       	call   c0012c78 <Fs::initVFS()>
c000e4a1:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c000e4a6:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e4ac:	8b 10                	mov    edx,DWORD PTR [eax]
c000e4ae:	6a 00                	push   0x0
c000e4b0:	6a 00                	push   0x0
c000e4b2:	6a 00                	push   0x0
c000e4b4:	50                   	push   eax
c000e4b5:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e4b8:	e8 f2 d5 00 00       	call   c001baaf <Sys::loadSyscalls()>
c000e4bd:	e8 52 b6 00 00       	call   c0019b14 <Krnl::loadSystemEnv()>
c000e4c2:	83 c4 0c             	add    esp,0xc
c000e4c5:	6a 3a                	push   0x3a
c000e4c7:	68 7c 95 02 c0       	push   0xc002957c
c000e4cc:	68 85 95 02 c0       	push   0xc0029585
c000e4d1:	e8 64 c3 00 00       	call   c001a83a <Reg::readIntWithDefault(char*, char*, int)>
c000e4d6:	89 04 24             	mov    DWORD PTR [esp],eax
c000e4d9:	e8 82 52 00 00       	call   c0013760 <User::loadClockSettings(int)>
c000e4de:	58                   	pop    eax
c000e4df:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c000e4e4:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e4ea:	e8 75 59 00 00       	call   c0013e64 <Device::loadDriversForAll()>
c000e4ef:	5a                   	pop    edx
c000e4f0:	8b 1d 88 d8 02 c0    	mov    ebx,DWORD PTR ds:0xc002d888
c000e4f6:	59                   	pop    ecx
c000e4f7:	6a 01                	push   0x1
c000e4f9:	68 8d 95 02 c0       	push   0xc002958d
c000e4fe:	e8 0d e7 00 00       	call   c001cc10 <Thr::loadDLL(char const*, bool)>
c000e503:	5a                   	pop    edx
c000e504:	59                   	pop    ecx
c000e505:	53                   	push   ebx
c000e506:	50                   	push   eax
c000e507:	e8 13 e9 00 00       	call   c001ce1f <Thr::executeDLL(unsigned long, void*)>
c000e50c:	83 c4 10             	add    esp,0x10
c000e50f:	83 ec 0c             	sub    esp,0xc
c000e512:	6a 02                	push   0x2
c000e514:	e8 01 f2 00 00       	call   c001d71a <blockTask(TaskState)>
c000e519:	83 c4 10             	add    esp,0x10
c000e51c:	eb f1                	jmp    c000e50f <Krnl::firstTask()+0xdb>

c000e51e <Computer::Computer()>:
c000e51e:	83 ec 0c             	sub    esp,0xc
c000e521:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e525:	83 ec 08             	sub    esp,0x8
c000e528:	68 a9 95 02 c0       	push   0xc00295a9
c000e52d:	50                   	push   eax
c000e52e:	e8 d7 59 00 00       	call   c0013f0a <Device::Device(char const*)>
c000e533:	83 c4 10             	add    esp,0x10
c000e536:	ba 48 97 02 c0       	mov    edx,0xc0029748
c000e53b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e53f:	89 10                	mov    DWORD PTR [eax],edx
c000e541:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e545:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e54f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e553:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e55d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e561:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e567:	83 ca 04             	or     edx,0x4
c000e56a:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e570:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e574:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e57a:	0f b6 d0             	movzx  edx,al
c000e57d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e581:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e588:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e58c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e592:	0f b6 d0             	movzx  edx,al
c000e595:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e599:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e59e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5a2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e5a8:	8d 50 01             	lea    edx,[eax+0x1]
c000e5ab:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e5af:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e5b5:	0f b6 d0             	movzx  edx,al
c000e5b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5bc:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e5c0:	83 e1 3f             	and    ecx,0x3f
c000e5c3:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e5c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5cb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e5d1:	0f b6 d0             	movzx  edx,al
c000e5d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5d8:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e5df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5e3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e5e9:	0f b6 d0             	movzx  edx,al
c000e5ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5f0:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e5f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5f9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e5ff:	8d 50 01             	lea    edx,[eax+0x1]
c000e602:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e606:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e60c:	0f b6 d0             	movzx  edx,al
c000e60f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e613:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e617:	83 e1 3f             	and    ecx,0x3f
c000e61a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e61e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e622:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e628:	0f b6 d0             	movzx  edx,al
c000e62b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e62f:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e636:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e63a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e640:	0f b6 d0             	movzx  edx,al
c000e643:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e647:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e64c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e650:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e656:	8d 50 01             	lea    edx,[eax+0x1]
c000e659:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e65d:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e663:	0f b6 d0             	movzx  edx,al
c000e666:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e66a:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e66e:	83 e1 3f             	and    ecx,0x3f
c000e671:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e675:	90                   	nop
c000e676:	83 c4 0c             	add    esp,0xc
c000e679:	c3                   	ret    

c000e67a <Computer::setBootMessage(char const*)>:
c000e67a:	c3                   	ret    
c000e67b:	90                   	nop

c000e67c <Computer::detectFeatures()>:
c000e67c:	55                   	push   ebp
c000e67d:	57                   	push   edi
c000e67e:	56                   	push   esi
c000e67f:	53                   	push   ebx
c000e680:	83 ec 1c             	sub    esp,0x1c
c000e683:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e687:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e691:	e8 4e 1c ff ff       	call   c00002e4 <detectCPUID>
c000e696:	85 c0                	test   eax,eax
c000e698:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e69e:	0f 95 c2             	setne  dl
c000e6a1:	83 e0 fd             	and    eax,0xfffffffd
c000e6a4:	d1 e2                	shl    edx,1
c000e6a6:	09 d0                	or     eax,edx
c000e6a8:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e6ae:	a8 02                	test   al,0x2
c000e6b0:	75 46                	jne    c000e6f8 <Computer::detectFeatures()+0x7c>
c000e6b2:	f6 05 a1 d8 02 c0 04 	test   BYTE PTR ds:0xc002d8a1,0x4
c000e6b9:	74 07                	je     c000e6c2 <Computer::detectFeatures()+0x46>
c000e6bb:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e6c2:	e8 4f 75 01 00       	call   c0025c16 <x87Detect>
c000e6c7:	83 e0 01             	and    eax,0x1
c000e6ca:	c1 e0 04             	shl    eax,0x4
c000e6cd:	88 c2                	mov    dl,al
c000e6cf:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e6d5:	83 e0 ef             	and    eax,0xffffffef
c000e6d8:	09 d0                	or     eax,edx
c000e6da:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e6e0:	a8 10                	test   al,0x10
c000e6e2:	0f 85 2a 01 00 00    	jne    c000e812 <Computer::detectFeatures()+0x196>
c000e6e8:	84 c0                	test   al,al
c000e6ea:	0f 88 45 01 00 00    	js     c000e835 <Computer::detectFeatures()+0x1b9>
c000e6f0:	83 c4 1c             	add    esp,0x1c
c000e6f3:	5b                   	pop    ebx
c000e6f4:	5e                   	pop    esi
c000e6f5:	5f                   	pop    edi
c000e6f6:	5d                   	pop    ebp
c000e6f7:	c3                   	ret    
c000e6f8:	83 ec 0c             	sub    esp,0xc
c000e6fb:	6a 20                	push   0x20
c000e6fd:	e8 d4 9d 00 00       	call   c00184d6 <CPU::cpuidCheckEDX(unsigned int)>
c000e702:	83 e0 01             	and    eax,0x1
c000e705:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e70c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e712:	83 e0 f7             	and    eax,0xfffffff7
c000e715:	09 d0                	or     eax,edx
c000e717:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e71d:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e724:	e8 ad 9d 00 00       	call   c00184d6 <CPU::cpuidCheckEDX(unsigned int)>
c000e729:	83 e0 01             	and    eax,0x1
c000e72c:	88 c2                	mov    dl,al
c000e72e:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e734:	83 e0 fe             	and    eax,0xfffffffe
c000e737:	09 d0                	or     eax,edx
c000e739:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e73f:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e746:	e8 8b 9d 00 00       	call   c00184d6 <CPU::cpuidCheckEDX(unsigned int)>
c000e74b:	c1 e0 07             	shl    eax,0x7
c000e74e:	88 c2                	mov    dl,al
c000e750:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e756:	83 e0 7f             	and    eax,0x7f
c000e759:	09 d0                	or     eax,edx
c000e75b:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e761:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e768:	e8 69 9d 00 00       	call   c00184d6 <CPU::cpuidCheckEDX(unsigned int)>
c000e76d:	83 c4 10             	add    esp,0x10
c000e770:	83 e0 01             	and    eax,0x1
c000e773:	c1 e0 05             	shl    eax,0x5
c000e776:	88 c2                	mov    dl,al
c000e778:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e77e:	83 e0 df             	and    eax,0xffffffdf
c000e781:	09 d0                	or     eax,edx
c000e783:	f7 05 a0 d8 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002d8a0,0x401
c000e78d:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e793:	0f 84 c2 00 00 00    	je     c000e85b <Computer::detectFeatures()+0x1df>
c000e799:	83 e0 fe             	and    eax,0xfffffffe
c000e79c:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e7a2:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e7a8:	88 c2                	mov    dl,al
c000e7aa:	83 e2 09             	and    edx,0x9
c000e7ad:	fe ca                	dec    dl
c000e7af:	75 09                	jne    c000e7ba <Computer::detectFeatures()+0x13e>
c000e7b1:	83 e0 fe             	and    eax,0xfffffffe
c000e7b4:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e7ba:	83 ec 0c             	sub    esp,0xc
c000e7bd:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e7c1:	50                   	push   eax
c000e7c2:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e7c6:	55                   	push   ebp
c000e7c7:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e7cb:	57                   	push   edi
c000e7cc:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e7d0:	56                   	push   esi
c000e7d1:	68 00 00 00 80       	push   0x80000000
c000e7d6:	e8 77 9c 00 00       	call   c0018452 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e7db:	83 c4 20             	add    esp,0x20
c000e7de:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000e7e5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e7e9:	0f 86 c3 fe ff ff    	jbe    c000e6b2 <Computer::detectFeatures()+0x36>
c000e7ef:	83 ec 0c             	sub    esp,0xc
c000e7f2:	50                   	push   eax
c000e7f3:	55                   	push   ebp
c000e7f4:	57                   	push   edi
c000e7f5:	56                   	push   esi
c000e7f6:	68 01 00 00 80       	push   0x80000001
c000e7fb:	e8 52 9c 00 00       	call   c0018452 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e800:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000e80a:	83 c4 20             	add    esp,0x20
c000e80d:	e9 a0 fe ff ff       	jmp    c000e6b2 <Computer::detectFeatures()+0x36>
c000e812:	e8 b9 73 01 00       	call   c0025bd0 <absolutelyNoChanceInHell>
c000e817:	88 c2                	mov    dl,al
c000e819:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e81f:	c1 e2 07             	shl    edx,0x7
c000e822:	83 e0 7f             	and    eax,0x7f
c000e825:	09 d0                	or     eax,edx
c000e827:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e82d:	84 c0                	test   al,al
c000e82f:	0f 89 bb fe ff ff    	jns    c000e6f0 <Computer::detectFeatures()+0x74>
c000e835:	e8 76 73 01 00       	call   c0025bb0 <avxDetect>
c000e83a:	83 e0 01             	and    eax,0x1
c000e83d:	c1 e0 05             	shl    eax,0x5
c000e840:	88 c2                	mov    dl,al
c000e842:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e848:	83 e0 df             	and    eax,0xffffffdf
c000e84b:	09 d0                	or     eax,edx
c000e84d:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e853:	83 c4 1c             	add    esp,0x1c
c000e856:	5b                   	pop    ebx
c000e857:	5e                   	pop    esi
c000e858:	5f                   	pop    edi
c000e859:	5d                   	pop    ebp
c000e85a:	c3                   	ret    
c000e85b:	83 ec 0c             	sub    esp,0xc
c000e85e:	68 00 02 00 00       	push   0x200
c000e863:	e8 6e 9c 00 00       	call   c00184d6 <CPU::cpuidCheckEDX(unsigned int)>
c000e868:	83 c4 10             	add    esp,0x10
c000e86b:	83 e0 01             	and    eax,0x1
c000e86e:	88 c2                	mov    dl,al
c000e870:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e876:	83 e0 fe             	and    eax,0xfffffffe
c000e879:	09 d0                	or     eax,edx
c000e87b:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e881:	e9 1c ff ff ff       	jmp    c000e7a2 <Computer::detectFeatures()+0x126>

c000e886 <Computer::displayFeatures()>:
c000e886:	53                   	push   ebx
c000e887:	83 ec 14             	sub    esp,0x14
c000e88a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e88e:	68 b9 95 02 c0       	push   0xc00295b9
c000e893:	e8 5b 40 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c000e898:	83 c4 10             	add    esp,0x10
c000e89b:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000e8a2:	0f 85 73 02 00 00    	jne    c000eb1b <Computer::displayFeatures()+0x295>
c000e8a8:	b8 b6 95 02 c0       	mov    eax,0xc00295b6
c000e8ad:	83 ec 08             	sub    esp,0x8
c000e8b0:	50                   	push   eax
c000e8b1:	68 cc 95 02 c0       	push   0xc00295cc
c000e8b6:	e8 38 40 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c000e8bb:	83 c4 10             	add    esp,0x10
c000e8be:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000e8c5:	0f 85 8c 02 00 00    	jne    c000eb57 <Computer::displayFeatures()+0x2d1>
c000e8cb:	b8 b6 95 02 c0       	mov    eax,0xc00295b6
c000e8d0:	83 ec 08             	sub    esp,0x8
c000e8d3:	50                   	push   eax
c000e8d4:	68 dd 95 02 c0       	push   0xc00295dd
c000e8d9:	e8 15 40 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c000e8de:	83 c4 10             	add    esp,0x10
c000e8e1:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000e8e8:	0f 85 5f 02 00 00    	jne    c000eb4d <Computer::displayFeatures()+0x2c7>
c000e8ee:	b8 b6 95 02 c0       	mov    eax,0xc00295b6
c000e8f3:	83 ec 08             	sub    esp,0x8
c000e8f6:	50                   	push   eax
c000e8f7:	68 ee 95 02 c0       	push   0xc00295ee
c000e8fc:	e8 f2 3f 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c000e901:	83 c4 10             	add    esp,0x10
c000e904:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000e90b:	0f 85 32 02 00 00    	jne    c000eb43 <Computer::displayFeatures()+0x2bd>
c000e911:	b8 b6 95 02 c0       	mov    eax,0xc00295b6
c000e916:	83 ec 08             	sub    esp,0x8
c000e919:	50                   	push   eax
c000e91a:	68 ff 95 02 c0       	push   0xc00295ff
c000e91f:	e8 cf 3f 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c000e924:	83 c4 10             	add    esp,0x10
c000e927:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000e92e:	0f 85 05 02 00 00    	jne    c000eb39 <Computer::displayFeatures()+0x2b3>
c000e934:	b8 b6 95 02 c0       	mov    eax,0xc00295b6
c000e939:	83 ec 08             	sub    esp,0x8
c000e93c:	50                   	push   eax
c000e93d:	68 10 96 02 c0       	push   0xc0029610
c000e942:	e8 ac 3f 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c000e947:	83 c4 10             	add    esp,0x10
c000e94a:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000e951:	0f 85 d8 01 00 00    	jne    c000eb2f <Computer::displayFeatures()+0x2a9>
c000e957:	b8 b6 95 02 c0       	mov    eax,0xc00295b6
c000e95c:	83 ec 08             	sub    esp,0x8
c000e95f:	50                   	push   eax
c000e960:	68 21 96 02 c0       	push   0xc0029621
c000e965:	e8 89 3f 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c000e96a:	83 c4 10             	add    esp,0x10
c000e96d:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000e974:	0f 85 ab 01 00 00    	jne    c000eb25 <Computer::displayFeatures()+0x29f>
c000e97a:	b8 b6 95 02 c0       	mov    eax,0xc00295b6
c000e97f:	83 ec 08             	sub    esp,0x8
c000e982:	50                   	push   eax
c000e983:	68 32 96 02 c0       	push   0xc0029632
c000e988:	e8 66 3f 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c000e98d:	83 c4 10             	add    esp,0x10
c000e990:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000e997:	0f 88 1b 02 00 00    	js     c000ebb8 <Computer::displayFeatures()+0x332>
c000e99d:	b8 b6 95 02 c0       	mov    eax,0xc00295b6
c000e9a2:	83 ec 08             	sub    esp,0x8
c000e9a5:	50                   	push   eax
c000e9a6:	68 43 96 02 c0       	push   0xc0029643
c000e9ab:	e8 43 3f 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c000e9b0:	83 c4 10             	add    esp,0x10
c000e9b3:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000e9ba:	0f 85 a1 01 00 00    	jne    c000eb61 <Computer::displayFeatures()+0x2db>
c000e9c0:	b8 b6 95 02 c0       	mov    eax,0xc00295b6
c000e9c5:	83 ec 08             	sub    esp,0x8
c000e9c8:	50                   	push   eax
c000e9c9:	68 54 96 02 c0       	push   0xc0029654
c000e9ce:	e8 20 3f 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c000e9d3:	83 c4 10             	add    esp,0x10
c000e9d6:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000e9dd:	0f 85 cb 01 00 00    	jne    c000ebae <Computer::displayFeatures()+0x328>
c000e9e3:	b8 b6 95 02 c0       	mov    eax,0xc00295b6
c000e9e8:	83 ec 08             	sub    esp,0x8
c000e9eb:	50                   	push   eax
c000e9ec:	68 65 96 02 c0       	push   0xc0029665
c000e9f1:	e8 fd 3e 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c000e9f6:	83 c4 10             	add    esp,0x10
c000e9f9:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ea00:	0f 85 9e 01 00 00    	jne    c000eba4 <Computer::displayFeatures()+0x31e>
c000ea06:	b8 b6 95 02 c0       	mov    eax,0xc00295b6
c000ea0b:	83 ec 08             	sub    esp,0x8
c000ea0e:	50                   	push   eax
c000ea0f:	68 76 96 02 c0       	push   0xc0029676
c000ea14:	e8 da 3e 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c000ea19:	83 c4 10             	add    esp,0x10
c000ea1c:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ea23:	0f 85 71 01 00 00    	jne    c000eb9a <Computer::displayFeatures()+0x314>
c000ea29:	b8 b6 95 02 c0       	mov    eax,0xc00295b6
c000ea2e:	83 ec 08             	sub    esp,0x8
c000ea31:	50                   	push   eax
c000ea32:	68 87 96 02 c0       	push   0xc0029687
c000ea37:	e8 b7 3e 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c000ea3c:	83 c4 10             	add    esp,0x10
c000ea3f:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ea46:	0f 85 44 01 00 00    	jne    c000eb90 <Computer::displayFeatures()+0x30a>
c000ea4c:	b8 b6 95 02 c0       	mov    eax,0xc00295b6
c000ea51:	83 ec 08             	sub    esp,0x8
c000ea54:	50                   	push   eax
c000ea55:	68 98 96 02 c0       	push   0xc0029698
c000ea5a:	e8 94 3e 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c000ea5f:	83 c4 10             	add    esp,0x10
c000ea62:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000ea69:	0f 85 17 01 00 00    	jne    c000eb86 <Computer::displayFeatures()+0x300>
c000ea6f:	b8 b6 95 02 c0       	mov    eax,0xc00295b6
c000ea74:	83 ec 08             	sub    esp,0x8
c000ea77:	50                   	push   eax
c000ea78:	68 a9 96 02 c0       	push   0xc00296a9
c000ea7d:	e8 71 3e 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c000ea82:	83 c4 10             	add    esp,0x10
c000ea85:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000ea8c:	0f 85 ea 00 00 00    	jne    c000eb7c <Computer::displayFeatures()+0x2f6>
c000ea92:	b8 b6 95 02 c0       	mov    eax,0xc00295b6
c000ea97:	83 ec 08             	sub    esp,0x8
c000ea9a:	50                   	push   eax
c000ea9b:	68 ba 96 02 c0       	push   0xc00296ba
c000eaa0:	e8 4e 3e 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c000eaa5:	83 c4 10             	add    esp,0x10
c000eaa8:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000eaaf:	0f 88 0d 01 00 00    	js     c000ebc2 <Computer::displayFeatures()+0x33c>
c000eab5:	b8 b6 95 02 c0       	mov    eax,0xc00295b6
c000eaba:	83 ec 08             	sub    esp,0x8
c000eabd:	50                   	push   eax
c000eabe:	68 cb 96 02 c0       	push   0xc00296cb
c000eac3:	e8 2b 3e 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c000eac8:	83 c4 10             	add    esp,0x10
c000eacb:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000ead2:	0f 85 9a 00 00 00    	jne    c000eb72 <Computer::displayFeatures()+0x2ec>
c000ead8:	b8 b6 95 02 c0       	mov    eax,0xc00295b6
c000eadd:	83 ec 08             	sub    esp,0x8
c000eae0:	50                   	push   eax
c000eae1:	68 dc 96 02 c0       	push   0xc00296dc
c000eae6:	e8 08 3e 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c000eaeb:	83 c4 10             	add    esp,0x10
c000eaee:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000eaf5:	75 74                	jne    c000eb6b <Computer::displayFeatures()+0x2e5>
c000eaf7:	b8 b6 95 02 c0       	mov    eax,0xc00295b6
c000eafc:	83 ec 08             	sub    esp,0x8
c000eaff:	50                   	push   eax
c000eb00:	68 ed 96 02 c0       	push   0xc00296ed
c000eb05:	e8 e9 3d 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c000eb0a:	c7 44 24 20 a3 af 02 c0 	mov    DWORD PTR [esp+0x20],0xc002afa3
c000eb12:	83 c4 18             	add    esp,0x18
c000eb15:	5b                   	pop    ebx
c000eb16:	e9 d8 3d 00 00       	jmp    c00128f3 <Dbg::kprintf(char const*, ...)>
c000eb1b:	b8 b2 95 02 c0       	mov    eax,0xc00295b2
c000eb20:	e9 88 fd ff ff       	jmp    c000e8ad <Computer::displayFeatures()+0x27>
c000eb25:	b8 b2 95 02 c0       	mov    eax,0xc00295b2
c000eb2a:	e9 50 fe ff ff       	jmp    c000e97f <Computer::displayFeatures()+0xf9>
c000eb2f:	b8 b2 95 02 c0       	mov    eax,0xc00295b2
c000eb34:	e9 23 fe ff ff       	jmp    c000e95c <Computer::displayFeatures()+0xd6>
c000eb39:	b8 b2 95 02 c0       	mov    eax,0xc00295b2
c000eb3e:	e9 f6 fd ff ff       	jmp    c000e939 <Computer::displayFeatures()+0xb3>
c000eb43:	b8 b2 95 02 c0       	mov    eax,0xc00295b2
c000eb48:	e9 c9 fd ff ff       	jmp    c000e916 <Computer::displayFeatures()+0x90>
c000eb4d:	b8 b2 95 02 c0       	mov    eax,0xc00295b2
c000eb52:	e9 9c fd ff ff       	jmp    c000e8f3 <Computer::displayFeatures()+0x6d>
c000eb57:	b8 b2 95 02 c0       	mov    eax,0xc00295b2
c000eb5c:	e9 6f fd ff ff       	jmp    c000e8d0 <Computer::displayFeatures()+0x4a>
c000eb61:	b8 b2 95 02 c0       	mov    eax,0xc00295b2
c000eb66:	e9 5a fe ff ff       	jmp    c000e9c5 <Computer::displayFeatures()+0x13f>
c000eb6b:	b8 b2 95 02 c0       	mov    eax,0xc00295b2
c000eb70:	eb 8a                	jmp    c000eafc <Computer::displayFeatures()+0x276>
c000eb72:	b8 b2 95 02 c0       	mov    eax,0xc00295b2
c000eb77:	e9 61 ff ff ff       	jmp    c000eadd <Computer::displayFeatures()+0x257>
c000eb7c:	b8 b2 95 02 c0       	mov    eax,0xc00295b2
c000eb81:	e9 11 ff ff ff       	jmp    c000ea97 <Computer::displayFeatures()+0x211>
c000eb86:	b8 b2 95 02 c0       	mov    eax,0xc00295b2
c000eb8b:	e9 e4 fe ff ff       	jmp    c000ea74 <Computer::displayFeatures()+0x1ee>
c000eb90:	b8 b2 95 02 c0       	mov    eax,0xc00295b2
c000eb95:	e9 b7 fe ff ff       	jmp    c000ea51 <Computer::displayFeatures()+0x1cb>
c000eb9a:	b8 b2 95 02 c0       	mov    eax,0xc00295b2
c000eb9f:	e9 8a fe ff ff       	jmp    c000ea2e <Computer::displayFeatures()+0x1a8>
c000eba4:	b8 b2 95 02 c0       	mov    eax,0xc00295b2
c000eba9:	e9 5d fe ff ff       	jmp    c000ea0b <Computer::displayFeatures()+0x185>
c000ebae:	b8 b2 95 02 c0       	mov    eax,0xc00295b2
c000ebb3:	e9 30 fe ff ff       	jmp    c000e9e8 <Computer::displayFeatures()+0x162>
c000ebb8:	b8 b2 95 02 c0       	mov    eax,0xc00295b2
c000ebbd:	e9 e0 fd ff ff       	jmp    c000e9a2 <Computer::displayFeatures()+0x11c>
c000ebc2:	b8 b2 95 02 c0       	mov    eax,0xc00295b2
c000ebc7:	e9 ee fe ff ff       	jmp    c000eaba <Computer::displayFeatures()+0x234>

c000ebcc <Computer::rdmsr(unsigned int)>:
c000ebcc:	83 ec 0c             	sub    esp,0xc
c000ebcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebd3:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ebda:	74 0a                	je     c000ebe6 <Computer::rdmsr(unsigned int)+0x1a>
c000ebdc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ebe0:	0f 32                	rdmsr  
c000ebe2:	83 c4 0c             	add    esp,0xc
c000ebe5:	c3                   	ret    
c000ebe6:	83 ec 0c             	sub    esp,0xc
c000ebe9:	68 fe 96 02 c0       	push   0xc00296fe
c000ebee:	e8 5a b0 00 00       	call   c0019c4d <Krnl::panic(char const*)>
c000ebf3:	83 c4 10             	add    esp,0x10
c000ebf6:	eb e4                	jmp    c000ebdc <Computer::rdmsr(unsigned int)+0x10>

c000ebf8 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ebf8:	57                   	push   edi
c000ebf9:	56                   	push   esi
c000ebfa:	52                   	push   edx
c000ebfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebff:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ec03:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ec07:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ec0e:	74 0e                	je     c000ec1e <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000ec10:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ec14:	89 f0                	mov    eax,esi
c000ec16:	89 fa                	mov    edx,edi
c000ec18:	0f 30                	wrmsr  
c000ec1a:	58                   	pop    eax
c000ec1b:	5e                   	pop    esi
c000ec1c:	5f                   	pop    edi
c000ec1d:	c3                   	ret    
c000ec1e:	83 ec 0c             	sub    esp,0xc
c000ec21:	68 04 97 02 c0       	push   0xc0029704
c000ec26:	e8 22 b0 00 00       	call   c0019c4d <Krnl::panic(char const*)>
c000ec2b:	83 c4 10             	add    esp,0x10
c000ec2e:	eb e0                	jmp    c000ec10 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ec30 <Computer::nmiEnabled()>:
c000ec30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec34:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ec3a:	c3                   	ret    
c000ec3b:	90                   	nop

c000ec3c <Computer::readCMOS(unsigned char)>:
c000ec3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec40:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ec47:	19 c0                	sbb    eax,eax
c000ec49:	83 e0 80             	and    eax,0xffffff80
c000ec4c:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ec50:	e6 70                	out    0x70,al
c000ec52:	e4 71                	in     al,0x71
c000ec54:	c3                   	ret    
c000ec55:	90                   	nop

c000ec56 <Computer::enableNMI(bool)>:
c000ec56:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ec5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec5e:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ec64:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ec6c:	eb ce                	jmp    c000ec3c <Computer::readCMOS(unsigned char)>

c000ec6e <Computer::open(int, int, void*)>:
c000ec6e:	56                   	push   esi
c000ec6f:	53                   	push   ebx
c000ec70:	83 ec 10             	sub    esp,0x10
c000ec73:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ec77:	f6 05 a0 d8 02 c0 04 	test   BYTE PTR ds:0xc002d8a0,0x4
c000ec7e:	68 68 12 00 00       	push   0x1268
c000ec83:	0f 94 05 c4 c7 02 c0 	sete   BYTE PTR ds:0xc002c7c4
c000ec8a:	e8 95 09 00 00       	call   c000f624 <malloc>
c000ec8f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec92:	89 c6                	mov    esi,eax
c000ec94:	e8 0d 8d 00 00       	call   c00179a6 <ACPI::ACPI()>
c000ec99:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000ec9f:	58                   	pop    eax
c000eca0:	5a                   	pop    edx
c000eca1:	56                   	push   esi
c000eca2:	53                   	push   ebx
c000eca3:	e8 72 50 00 00       	call   c0013d1a <Device::addChild(Device*)>
c000eca8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ecab:	e8 cc f9 ff ff       	call   c000e67c <Computer::detectFeatures()>
c000ecb0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ecb3:	e8 ce fb ff ff       	call   c000e886 <Computer::displayFeatures()>
c000ecb8:	59                   	pop    ecx
c000ecb9:	5e                   	pop    esi
c000ecba:	6a 01                	push   0x1
c000ecbc:	53                   	push   ebx
c000ecbd:	e8 94 ff ff ff       	call   c000ec56 <Computer::enableNMI(bool)>
c000ecc2:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000ecc9:	e8 56 09 00 00       	call   c000f624 <malloc>
c000ecce:	89 04 24             	mov    DWORD PTR [esp],eax
c000ecd1:	89 c6                	mov    esi,eax
c000ecd3:	e8 b6 98 00 00       	call   c001858e <CPU::CPU()>
c000ecd8:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000ecde:	58                   	pop    eax
c000ecdf:	5a                   	pop    edx
c000ece0:	56                   	push   esi
c000ece1:	53                   	push   ebx
c000ece2:	e8 33 50 00 00       	call   c0013d1a <Device::addChild(Device*)>
c000ece7:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000eced:	8b 10                	mov    edx,DWORD PTR [eax]
c000ecef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ecf3:	6a 00                	push   0x0
c000ecf5:	6a 00                	push   0x0
c000ecf7:	50                   	push   eax
c000ecf8:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ecfb:	83 c4 20             	add    esp,0x20
c000ecfe:	e8 9d 55 00 00       	call   c00142a0 <setupFPU()>
c000ed03:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ed09:	85 c0                	test   eax,eax
c000ed0b:	74 1f                	je     c000ed2c <Computer::open(int, int, void*)+0xbe>
c000ed0d:	83 ec 08             	sub    esp,0x8
c000ed10:	50                   	push   eax
c000ed11:	53                   	push   ebx
c000ed12:	e8 03 50 00 00       	call   c0013d1a <Device::addChild(Device*)>
c000ed17:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ed1d:	8b 10                	mov    edx,DWORD PTR [eax]
c000ed1f:	6a 00                	push   0x0
c000ed21:	6a 00                	push   0x0
c000ed23:	6a 00                	push   0x0
c000ed25:	50                   	push   eax
c000ed26:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ed29:	83 c4 20             	add    esp,0x20
c000ed2c:	83 ec 0c             	sub    esp,0xc
c000ed2f:	68 34 e4 00 c0       	push   0xc000e434
c000ed34:	e8 7d e7 00 00       	call   c001d4b6 <setupMultitasking(void (*)())>
c000ed39:	83 c4 14             	add    esp,0x14
c000ed3c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ed41:	5b                   	pop    ebx
c000ed42:	5e                   	pop    esi
c000ed43:	c3                   	ret    

c000ed44 <Computer::disableNMI()>:
c000ed44:	6a 00                	push   0x0
c000ed46:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ed4a:	e8 07 ff ff ff       	call   c000ec56 <Computer::enableNMI(bool)>
c000ed4f:	58                   	pop    eax
c000ed50:	5a                   	pop    edx
c000ed51:	c3                   	ret    

c000ed52 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ed52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ed56:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ed5d:	19 c0                	sbb    eax,eax
c000ed5f:	83 e0 80             	and    eax,0xffffff80
c000ed62:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ed66:	e6 70                	out    0x70,al
c000ed68:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ed6c:	e6 71                	out    0x71,al
c000ed6e:	c3                   	ret    
c000ed6f:	90                   	nop

c000ed70 <Computer::handleNMI()>:
c000ed70:	56                   	push   esi
c000ed71:	53                   	push   ebx
c000ed72:	83 ec 10             	sub    esp,0x10
c000ed75:	e4 92                	in     al,0x92
c000ed77:	89 c6                	mov    esi,eax
c000ed79:	e4 61                	in     al,0x61
c000ed7b:	68 0a 97 02 c0       	push   0xc002970a
c000ed80:	88 c3                	mov    bl,al
c000ed82:	e8 6c 3b 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c000ed87:	83 c4 10             	add    esp,0x10
c000ed8a:	83 e6 10             	and    esi,0x10
c000ed8d:	75 0d                	jne    c000ed9c <Computer::handleNMI()+0x2c>
c000ed8f:	f6 c3 40             	test   bl,0x40
c000ed92:	75 1d                	jne    c000edb1 <Computer::handleNMI()+0x41>
c000ed94:	84 db                	test   bl,bl
c000ed96:	78 2d                	js     c000edc5 <Computer::handleNMI()+0x55>
c000ed98:	58                   	pop    eax
c000ed99:	5b                   	pop    ebx
c000ed9a:	5e                   	pop    esi
c000ed9b:	c3                   	ret    
c000ed9c:	83 ec 0c             	sub    esp,0xc
c000ed9f:	68 1b 97 02 c0       	push   0xc002971b
c000eda4:	e8 a4 ae 00 00       	call   c0019c4d <Krnl::panic(char const*)>
c000eda9:	83 c4 10             	add    esp,0x10
c000edac:	f6 c3 40             	test   bl,0x40
c000edaf:	74 e3                	je     c000ed94 <Computer::handleNMI()+0x24>
c000edb1:	83 ec 0c             	sub    esp,0xc
c000edb4:	68 28 97 02 c0       	push   0xc0029728
c000edb9:	e8 8f ae 00 00       	call   c0019c4d <Krnl::panic(char const*)>
c000edbe:	83 c4 10             	add    esp,0x10
c000edc1:	84 db                	test   bl,bl
c000edc3:	79 d3                	jns    c000ed98 <Computer::handleNMI()+0x28>
c000edc5:	c7 44 24 10 32 97 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029732
c000edcd:	5a                   	pop    edx
c000edce:	5b                   	pop    ebx
c000edcf:	5e                   	pop    esi
c000edd0:	e9 78 ae 00 00       	jmp    c0019c4d <Krnl::panic(char const*)>
c000edd5:	90                   	nop

c000edd6 <Computer::setDiskActivityLight(int, bool)>:
c000edd6:	56                   	push   esi
c000edd7:	53                   	push   ebx
c000edd8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000eddc:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000ede1:	77 1b                	ja     c000edfe <Computer::setDiskActivityLight(int, bool)+0x28>
c000ede3:	e4 92                	in     al,0x92
c000ede5:	bb 40 00 00 00       	mov    ebx,0x40
c000edea:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000edee:	89 da                	mov    edx,ebx
c000edf0:	d3 e2                	shl    edx,cl
c000edf2:	89 f1                	mov    ecx,esi
c000edf4:	f7 d2                	not    edx
c000edf6:	d3 e3                	shl    ebx,cl
c000edf8:	21 d0                	and    eax,edx
c000edfa:	09 d8                	or     eax,ebx
c000edfc:	e6 92                	out    0x92,al
c000edfe:	5b                   	pop    ebx
c000edff:	5e                   	pop    esi
c000ee00:	c3                   	ret    
c000ee01:	90                   	nop

c000ee02 <GDTEntry::setBase(unsigned int)>:
c000ee02:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ee06:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ee0a:	89 c1                	mov    ecx,eax
c000ee0c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000ee10:	c1 e9 10             	shr    ecx,0x10
c000ee13:	c1 e8 18             	shr    eax,0x18
c000ee16:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000ee19:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000ee1c:	c3                   	ret    
c000ee1d:	90                   	nop

c000ee1e <GDTEntry::setLimit(unsigned int)>:
c000ee1e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ee22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ee26:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000ee29:	66 89 01             	mov    WORD PTR [ecx],ax
c000ee2c:	83 e2 f0             	and    edx,0xfffffff0
c000ee2f:	c1 e8 10             	shr    eax,0x10
c000ee32:	83 e0 0f             	and    eax,0xf
c000ee35:	09 d0                	or     eax,edx
c000ee37:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000ee3a:	c3                   	ret    
c000ee3b:	90                   	nop

c000ee3c <GDT::GDT()>:
c000ee3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee40:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ee46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee4a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ee50:	90                   	nop
c000ee51:	c3                   	ret    

c000ee52 <GDT::addEntry(GDTEntry)>:
c000ee52:	53                   	push   ebx
c000ee53:	83 ec 0c             	sub    esp,0xc
c000ee56:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ee5a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ee5c:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000ee63:	52                   	push   edx
c000ee64:	50                   	push   eax
c000ee65:	68 6c 97 02 c0       	push   0xc002976c
c000ee6a:	e8 84 3a 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c000ee6f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ee71:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ee75:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ee79:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000ee7d:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000ee81:	8d 50 01             	lea    edx,[eax+0x1]
c000ee84:	c1 e0 03             	shl    eax,0x3
c000ee87:	89 13                	mov    DWORD PTR [ebx],edx
c000ee89:	83 c4 18             	add    esp,0x18
c000ee8c:	5b                   	pop    ebx
c000ee8d:	c3                   	ret    

c000ee8e <GDT::getNumberOfEntries()>:
c000ee8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee92:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee94:	c3                   	ret    
c000ee95:	90                   	nop

c000ee96 <GDT::flush()>:
c000ee96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee9a:	8b 10                	mov    edx,DWORD PTR [eax]
c000ee9c:	83 c0 04             	add    eax,0x4
c000ee9f:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000eea6:	a3 92 d8 02 c0       	mov    ds:0xc002d892,eax
c000eeab:	66 89 15 90 d8 02 c0 	mov    WORD PTR ds:0xc002d890,dx
c000eeb2:	e9 91 15 ff ff       	jmp    c0000448 <loadGDT>
c000eeb7:	90                   	nop

c000eeb8 <GDT::setup()>:
c000eeb8:	55                   	push   ebp
c000eeb9:	57                   	push   edi
c000eeba:	56                   	push   esi
c000eebb:	53                   	push   ebx
c000eebc:	83 ec 3c             	sub    esp,0x3c
c000eebf:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000eec3:	6a 00                	push   0x0
c000eec5:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000eec9:	53                   	push   ebx
c000eeca:	e8 33 ff ff ff       	call   c000ee02 <GDTEntry::setBase(unsigned int)>
c000eecf:	6a 00                	push   0x0
c000eed1:	53                   	push   ebx
c000eed2:	e8 47 ff ff ff       	call   c000ee1e <GDTEntry::setLimit(unsigned int)>
c000eed7:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000eedf:	6a 00                	push   0x0
c000eee1:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000eee5:	53                   	push   ebx
c000eee6:	e8 17 ff ff ff       	call   c000ee02 <GDTEntry::setBase(unsigned int)>
c000eeeb:	68 ff ff ff 00       	push   0xffffff
c000eef0:	53                   	push   ebx
c000eef1:	e8 28 ff ff ff       	call   c000ee1e <GDTEntry::setLimit(unsigned int)>
c000eef6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000eefa:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000eeff:	0d 00 9a c0 00       	or     eax,0xc09a00
c000ef04:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ef08:	83 c4 20             	add    esp,0x20
c000ef0b:	6a 00                	push   0x0
c000ef0d:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000ef11:	53                   	push   ebx
c000ef12:	e8 eb fe ff ff       	call   c000ee02 <GDTEntry::setBase(unsigned int)>
c000ef17:	68 ff ff ff 00       	push   0xffffff
c000ef1c:	53                   	push   ebx
c000ef1d:	e8 fc fe ff ff       	call   c000ee1e <GDTEntry::setLimit(unsigned int)>
c000ef22:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ef26:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ef2a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000ef2e:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000ef32:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000ef36:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000ef3b:	0d 00 92 c0 00       	or     eax,0xc09200
c000ef40:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000ef44:	89 d8                	mov    eax,ebx
c000ef46:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000ef4a:	80 cc 60             	or     ah,0x60
c000ef4d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ef51:	83 c4 0c             	add    esp,0xc
c000ef54:	89 f8                	mov    eax,edi
c000ef56:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ef5a:	80 cc 60             	or     ah,0x60
c000ef5d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ef61:	89 c7                	mov    edi,eax
c000ef63:	55                   	push   ebp
c000ef64:	e8 e9 fe ff ff       	call   c000ee52 <GDT::addEntry(GDTEntry)>
c000ef69:	83 c4 0c             	add    esp,0xc
c000ef6c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ef70:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ef74:	55                   	push   ebp
c000ef75:	e8 d8 fe ff ff       	call   c000ee52 <GDT::addEntry(GDTEntry)>
c000ef7a:	83 c4 0c             	add    esp,0xc
c000ef7d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ef81:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ef85:	55                   	push   ebp
c000ef86:	e8 c7 fe ff ff       	call   c000ee52 <GDT::addEntry(GDTEntry)>
c000ef8b:	83 c4 0c             	add    esp,0xc
c000ef8e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ef92:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ef96:	53                   	push   ebx
c000ef97:	51                   	push   ecx
c000ef98:	55                   	push   ebp
c000ef99:	e8 b4 fe ff ff       	call   c000ee52 <GDT::addEntry(GDTEntry)>
c000ef9e:	83 c4 0c             	add    esp,0xc
c000efa1:	57                   	push   edi
c000efa2:	56                   	push   esi
c000efa3:	55                   	push   ebp
c000efa4:	e8 a9 fe ff ff       	call   c000ee52 <GDT::addEntry(GDTEntry)>
c000efa9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000efac:	e8 e5 fe ff ff       	call   c000ee96 <GDT::flush()>
c000efb1:	83 c4 4c             	add    esp,0x4c
c000efb4:	5b                   	pop    ebx
c000efb5:	5e                   	pop    esi
c000efb6:	5f                   	pop    edi
c000efb7:	5d                   	pop    ebp
c000efb8:	c3                   	ret    

c000efb9 <idleFunction(void*)>:
c000efb9:	53                   	push   ebx
c000efba:	83 ec 08             	sub    esp,0x8
c000efbd:	e8 c4 e2 00 00       	call   c001d286 <unlockScheduler()>
c000efc2:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c000efc7:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000efcd:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000efd4:	74 3c                	je     c000f012 <idleFunction(void*)+0x59>
c000efd6:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000efdd:	74 33                	je     c000f012 <idleFunction(void*)+0x59>
c000efdf:	31 db                	xor    ebx,ebx
c000efe1:	52                   	push   edx
c000efe2:	52                   	push   edx
c000efe3:	68 e1 00 00 00       	push   0xe1
c000efe8:	50                   	push   eax
c000efe9:	e8 de fb ff ff       	call   c000ebcc <Computer::rdmsr(unsigned int)>
c000efee:	53                   	push   ebx
c000efef:	83 e0 02             	and    eax,0x2
c000eff2:	50                   	push   eax
c000eff3:	68 e1 00 00 00       	push   0xe1
c000eff8:	ff 35 88 d8 02 c0    	push   DWORD PTR ds:0xc002d888
c000effe:	e8 f5 fb ff ff       	call   c000ebf8 <Computer::wrmsr(unsigned int, unsigned long long)>
c000f003:	83 c4 20             	add    esp,0x20
c000f006:	e8 74 12 ff ff       	call   c000027f <doTPAUSE>
c000f00b:	e8 40 8c 01 00       	call   c0027c50 <idleCommon()>
c000f010:	eb f4                	jmp    c000f006 <idleFunction(void*)+0x4d>
c000f012:	fb                   	sti    
c000f013:	f4                   	hlt    
c000f014:	e8 37 8c 01 00       	call   c0027c50 <idleCommon()>
c000f019:	eb f7                	jmp    c000f012 <idleFunction(void*)+0x59>
c000f01b:	90                   	nop

c000f01c <IDTEntry::IDTEntry(bool)>:
c000f01c:	83 ec 04             	sub    esp,0x4
c000f01f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f023:	88 04 24             	mov    BYTE PTR [esp],al
c000f026:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f02a:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f030:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f034:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f038:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f03c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f03f:	83 e2 f0             	and    edx,0xfffffff0
c000f042:	83 ca 0e             	or     edx,0xe
c000f045:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f048:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f04c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f04f:	83 e2 ef             	and    edx,0xffffffef
c000f052:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f055:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f059:	74 04                	je     c000f05f <IDTEntry::IDTEntry(bool)+0x43>
c000f05b:	b2 03                	mov    dl,0x3
c000f05d:	eb 02                	jmp    c000f061 <IDTEntry::IDTEntry(bool)+0x45>
c000f05f:	b2 00                	mov    dl,0x0
c000f061:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f065:	83 e2 03             	and    edx,0x3
c000f068:	88 d1                	mov    cl,dl
c000f06a:	c1 e1 05             	shl    ecx,0x5
c000f06d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f070:	83 e2 9f             	and    edx,0xffffff9f
c000f073:	09 ca                	or     edx,ecx
c000f075:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f078:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f07c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f07f:	83 ca 80             	or     edx,0xffffff80
c000f082:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f085:	90                   	nop
c000f086:	83 c4 04             	add    esp,0x4
c000f089:	c3                   	ret    

c000f08a <IDTEntry::setOffset(unsigned int)>:
c000f08a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f08e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f092:	66 89 02             	mov    WORD PTR [edx],ax
c000f095:	c1 e8 10             	shr    eax,0x10
c000f098:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f09c:	c3                   	ret    
c000f09d:	90                   	nop

c000f09e <IDT::IDT()>:
c000f09e:	90                   	nop
c000f09f:	c3                   	ret    

c000f0a0 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f0a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0a4:	83 c0 30             	add    eax,0x30
c000f0a7:	c3                   	ret    

c000f0a8 <IDT::addEntry(IDTEntry, int)>:
c000f0a8:	53                   	push   ebx
c000f0a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f0ad:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f0b1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f0b5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f0b9:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f0bc:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f0c0:	5b                   	pop    ebx
c000f0c1:	c3                   	ret    

c000f0c2 <IDT::addEntry(int, void (*)(), bool)>:
c000f0c2:	53                   	push   ebx
c000f0c3:	83 ec 10             	sub    esp,0x10
c000f0c6:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f0cb:	50                   	push   eax
c000f0cc:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f0d0:	53                   	push   ebx
c000f0d1:	e8 46 ff ff ff       	call   c000f01c <IDTEntry::IDTEntry(bool)>
c000f0d6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f0da:	53                   	push   ebx
c000f0db:	e8 aa ff ff ff       	call   c000f08a <IDTEntry::setOffset(unsigned int)>
c000f0e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f0e4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f0e8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f0ec:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f0f0:	e8 b3 ff ff ff       	call   c000f0a8 <IDT::addEntry(IDTEntry, int)>
c000f0f5:	83 c4 30             	add    esp,0x30
c000f0f8:	5b                   	pop    ebx
c000f0f9:	c3                   	ret    

c000f0fa <IDT::flush()>:
c000f0fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0fe:	66 c7 05 98 d8 02 c0 ff 07 	mov    WORD PTR ds:0xc002d898,0x7ff
c000f107:	a3 9a d8 02 c0       	mov    ds:0xc002d89a,eax
c000f10c:	0f 01 1d 98 d8 02 c0 	lidtd  ds:0xc002d898
c000f113:	c3                   	ret    

c000f114 <IDT::setup()>:
c000f114:	57                   	push   edi
c000f115:	56                   	push   esi
c000f116:	53                   	push   ebx
c000f117:	83 ec 10             	sub    esp,0x10
c000f11a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f11e:	6a 00                	push   0x0
c000f120:	68 68 04 00 c0       	push   0xc0000468
c000f125:	6a 00                	push   0x0
c000f127:	53                   	push   ebx
c000f128:	e8 95 ff ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f12d:	6a 00                	push   0x0
c000f12f:	68 78 04 00 c0       	push   0xc0000478
c000f134:	6a 01                	push   0x1
c000f136:	53                   	push   ebx
c000f137:	e8 86 ff ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f13c:	83 c4 20             	add    esp,0x20
c000f13f:	6a 00                	push   0x0
c000f141:	68 82 04 00 c0       	push   0xc0000482
c000f146:	6a 02                	push   0x2
c000f148:	53                   	push   ebx
c000f149:	e8 74 ff ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f14e:	6a 00                	push   0x0
c000f150:	68 8c 04 00 c0       	push   0xc000048c
c000f155:	6a 03                	push   0x3
c000f157:	53                   	push   ebx
c000f158:	e8 65 ff ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f15d:	83 c4 20             	add    esp,0x20
c000f160:	6a 00                	push   0x0
c000f162:	68 96 04 00 c0       	push   0xc0000496
c000f167:	6a 04                	push   0x4
c000f169:	53                   	push   ebx
c000f16a:	e8 53 ff ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f16f:	6a 00                	push   0x0
c000f171:	68 a0 04 00 c0       	push   0xc00004a0
c000f176:	6a 05                	push   0x5
c000f178:	53                   	push   ebx
c000f179:	e8 44 ff ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f17e:	83 c4 20             	add    esp,0x20
c000f181:	6a 00                	push   0x0
c000f183:	68 aa 04 00 c0       	push   0xc00004aa
c000f188:	6a 06                	push   0x6
c000f18a:	53                   	push   ebx
c000f18b:	e8 32 ff ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f190:	6a 00                	push   0x0
c000f192:	68 b4 04 00 c0       	push   0xc00004b4
c000f197:	6a 07                	push   0x7
c000f199:	53                   	push   ebx
c000f19a:	e8 23 ff ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f19f:	83 c4 20             	add    esp,0x20
c000f1a2:	6a 00                	push   0x0
c000f1a4:	68 be 04 00 c0       	push   0xc00004be
c000f1a9:	6a 08                	push   0x8
c000f1ab:	53                   	push   ebx
c000f1ac:	e8 11 ff ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f1b1:	6a 00                	push   0x0
c000f1b3:	68 c6 04 00 c0       	push   0xc00004c6
c000f1b8:	6a 09                	push   0x9
c000f1ba:	53                   	push   ebx
c000f1bb:	e8 02 ff ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f1c0:	83 c4 20             	add    esp,0x20
c000f1c3:	6a 00                	push   0x0
c000f1c5:	68 d0 04 00 c0       	push   0xc00004d0
c000f1ca:	6a 0a                	push   0xa
c000f1cc:	53                   	push   ebx
c000f1cd:	e8 f0 fe ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f1d2:	6a 00                	push   0x0
c000f1d4:	68 d8 04 00 c0       	push   0xc00004d8
c000f1d9:	6a 0b                	push   0xb
c000f1db:	53                   	push   ebx
c000f1dc:	e8 e1 fe ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f1e1:	83 c4 20             	add    esp,0x20
c000f1e4:	6a 00                	push   0x0
c000f1e6:	68 e0 04 00 c0       	push   0xc00004e0
c000f1eb:	6a 0c                	push   0xc
c000f1ed:	53                   	push   ebx
c000f1ee:	e8 cf fe ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f1f3:	6a 00                	push   0x0
c000f1f5:	68 e8 04 00 c0       	push   0xc00004e8
c000f1fa:	6a 0d                	push   0xd
c000f1fc:	53                   	push   ebx
c000f1fd:	e8 c0 fe ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f202:	83 c4 20             	add    esp,0x20
c000f205:	6a 00                	push   0x0
c000f207:	68 f0 04 00 c0       	push   0xc00004f0
c000f20c:	6a 0e                	push   0xe
c000f20e:	53                   	push   ebx
c000f20f:	e8 ae fe ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f214:	6a 00                	push   0x0
c000f216:	68 f8 04 00 c0       	push   0xc00004f8
c000f21b:	6a 0f                	push   0xf
c000f21d:	53                   	push   ebx
c000f21e:	e8 9f fe ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f223:	83 c4 20             	add    esp,0x20
c000f226:	6a 00                	push   0x0
c000f228:	68 02 05 00 c0       	push   0xc0000502
c000f22d:	6a 10                	push   0x10
c000f22f:	53                   	push   ebx
c000f230:	e8 8d fe ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f235:	6a 00                	push   0x0
c000f237:	68 0c 05 00 c0       	push   0xc000050c
c000f23c:	6a 11                	push   0x11
c000f23e:	53                   	push   ebx
c000f23f:	e8 7e fe ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f244:	83 c4 20             	add    esp,0x20
c000f247:	6a 00                	push   0x0
c000f249:	68 16 05 00 c0       	push   0xc0000516
c000f24e:	6a 12                	push   0x12
c000f250:	53                   	push   ebx
c000f251:	e8 6c fe ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f256:	6a 01                	push   0x1
c000f258:	68 b0 05 00 c0       	push   0xc00005b0
c000f25d:	6a 60                	push   0x60
c000f25f:	53                   	push   ebx
c000f260:	e8 5d fe ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f265:	83 c4 20             	add    esp,0x20
c000f268:	6a 00                	push   0x0
c000f26a:	68 b7 05 00 c0       	push   0xc00005b7
c000f26f:	6a 20                	push   0x20
c000f271:	53                   	push   ebx
c000f272:	e8 4b fe ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f277:	6a 00                	push   0x0
c000f279:	68 a2 05 00 c0       	push   0xc00005a2
c000f27e:	6a 21                	push   0x21
c000f280:	53                   	push   ebx
c000f281:	e8 3c fe ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f286:	83 c4 20             	add    esp,0x20
c000f289:	6a 00                	push   0x0
c000f28b:	68 a9 05 00 c0       	push   0xc00005a9
c000f290:	6a 22                	push   0x22
c000f292:	53                   	push   ebx
c000f293:	e8 2a fe ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f298:	6a 00                	push   0x0
c000f29a:	68 20 05 00 c0       	push   0xc0000520
c000f29f:	6a 23                	push   0x23
c000f2a1:	53                   	push   ebx
c000f2a2:	e8 1b fe ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f2a7:	83 c4 20             	add    esp,0x20
c000f2aa:	6a 00                	push   0x0
c000f2ac:	68 2a 05 00 c0       	push   0xc000052a
c000f2b1:	6a 24                	push   0x24
c000f2b3:	53                   	push   ebx
c000f2b4:	e8 09 fe ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f2b9:	6a 00                	push   0x0
c000f2bb:	68 34 05 00 c0       	push   0xc0000534
c000f2c0:	6a 25                	push   0x25
c000f2c2:	53                   	push   ebx
c000f2c3:	e8 fa fd ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f2c8:	83 c4 20             	add    esp,0x20
c000f2cb:	6a 00                	push   0x0
c000f2cd:	68 3e 05 00 c0       	push   0xc000053e
c000f2d2:	6a 26                	push   0x26
c000f2d4:	53                   	push   ebx
c000f2d5:	e8 e8 fd ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f2da:	6a 00                	push   0x0
c000f2dc:	68 48 05 00 c0       	push   0xc0000548
c000f2e1:	6a 27                	push   0x27
c000f2e3:	53                   	push   ebx
c000f2e4:	e8 d9 fd ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f2e9:	83 c4 20             	add    esp,0x20
c000f2ec:	6a 00                	push   0x0
c000f2ee:	68 52 05 00 c0       	push   0xc0000552
c000f2f3:	6a 28                	push   0x28
c000f2f5:	53                   	push   ebx
c000f2f6:	e8 c7 fd ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f2fb:	6a 00                	push   0x0
c000f2fd:	68 5c 05 00 c0       	push   0xc000055c
c000f302:	6a 29                	push   0x29
c000f304:	53                   	push   ebx
c000f305:	e8 b8 fd ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f30a:	83 c4 20             	add    esp,0x20
c000f30d:	6a 00                	push   0x0
c000f30f:	68 66 05 00 c0       	push   0xc0000566
c000f314:	6a 2a                	push   0x2a
c000f316:	53                   	push   ebx
c000f317:	e8 a6 fd ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f31c:	6a 00                	push   0x0
c000f31e:	68 70 05 00 c0       	push   0xc0000570
c000f323:	6a 2b                	push   0x2b
c000f325:	53                   	push   ebx
c000f326:	e8 97 fd ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f32b:	83 c4 20             	add    esp,0x20
c000f32e:	6a 00                	push   0x0
c000f330:	68 7a 05 00 c0       	push   0xc000057a
c000f335:	6a 2c                	push   0x2c
c000f337:	53                   	push   ebx
c000f338:	e8 85 fd ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f33d:	6a 00                	push   0x0
c000f33f:	68 84 05 00 c0       	push   0xc0000584
c000f344:	6a 2d                	push   0x2d
c000f346:	53                   	push   ebx
c000f347:	e8 76 fd ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f34c:	83 c4 20             	add    esp,0x20
c000f34f:	6a 00                	push   0x0
c000f351:	68 8e 05 00 c0       	push   0xc000058e
c000f356:	6a 2e                	push   0x2e
c000f358:	53                   	push   ebx
c000f359:	e8 64 fd ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f35e:	6a 00                	push   0x0
c000f360:	68 98 05 00 c0       	push   0xc0000598
c000f365:	6a 2f                	push   0x2f
c000f367:	53                   	push   ebx
c000f368:	e8 55 fd ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f36d:	83 c4 20             	add    esp,0x20
c000f370:	6a 00                	push   0x0
c000f372:	68 ed 05 00 c0       	push   0xc00005ed
c000f377:	6a 30                	push   0x30
c000f379:	53                   	push   ebx
c000f37a:	e8 43 fd ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f37f:	6a 00                	push   0x0
c000f381:	68 f7 05 00 c0       	push   0xc00005f7
c000f386:	6a 31                	push   0x31
c000f388:	53                   	push   ebx
c000f389:	e8 34 fd ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f38e:	83 c4 20             	add    esp,0x20
c000f391:	6a 00                	push   0x0
c000f393:	68 01 06 00 c0       	push   0xc0000601
c000f398:	6a 32                	push   0x32
c000f39a:	53                   	push   ebx
c000f39b:	e8 22 fd ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f3a0:	6a 00                	push   0x0
c000f3a2:	68 0b 06 00 c0       	push   0xc000060b
c000f3a7:	6a 33                	push   0x33
c000f3a9:	53                   	push   ebx
c000f3aa:	e8 13 fd ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f3af:	83 c4 20             	add    esp,0x20
c000f3b2:	6a 00                	push   0x0
c000f3b4:	68 15 06 00 c0       	push   0xc0000615
c000f3b9:	6a 34                	push   0x34
c000f3bb:	53                   	push   ebx
c000f3bc:	e8 01 fd ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f3c1:	6a 00                	push   0x0
c000f3c3:	68 1f 06 00 c0       	push   0xc000061f
c000f3c8:	6a 35                	push   0x35
c000f3ca:	53                   	push   ebx
c000f3cb:	e8 f2 fc ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f3d0:	83 c4 20             	add    esp,0x20
c000f3d3:	6a 00                	push   0x0
c000f3d5:	68 29 06 00 c0       	push   0xc0000629
c000f3da:	6a 36                	push   0x36
c000f3dc:	53                   	push   ebx
c000f3dd:	e8 e0 fc ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f3e2:	6a 00                	push   0x0
c000f3e4:	68 33 06 00 c0       	push   0xc0000633
c000f3e9:	6a 37                	push   0x37
c000f3eb:	53                   	push   ebx
c000f3ec:	e8 d1 fc ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f3f1:	83 c4 20             	add    esp,0x20
c000f3f4:	e8 9a 26 00 00       	call   c0011a93 <Virt::getAKernelVAS()>
c000f3f9:	52                   	push   edx
c000f3fa:	6a 03                	push   0x3
c000f3fc:	6a 02                	push   0x2
c000f3fe:	50                   	push   eax
c000f3ff:	e8 ca 2c 00 00       	call   c00120ce <VAS::allocatePages(int, int)>
c000f404:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f40b:	89 c6                	mov    esi,eax
c000f40d:	e8 12 02 00 00       	call   c000f624 <malloc>
c000f412:	81 c6 00 20 00 00    	add    esi,0x2000
c000f418:	89 04 24             	mov    DWORD PTR [esp],eax
c000f41b:	89 c7                	mov    edi,eax
c000f41d:	e8 12 1e 00 00       	call   c0011234 <TSS::TSS()>
c000f422:	83 c4 0c             	add    esp,0xc
c000f425:	68 be 04 00 c0       	push   0xc00004be
c000f42a:	56                   	push   esi
c000f42b:	57                   	push   edi
c000f42c:	e8 43 1e 00 00       	call   c0011274 <TSS::setup(unsigned long, unsigned long)>
c000f431:	59                   	pop    ecx
c000f432:	89 c6                	mov    esi,eax
c000f434:	5f                   	pop    edi
c000f435:	6a 00                	push   0x0
c000f437:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f43b:	50                   	push   eax
c000f43c:	e8 db fb ff ff       	call   c000f01c <IDTEntry::IDTEntry(bool)>
c000f441:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f445:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f44a:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f451:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f457:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f45b:	80 ce 05             	or     dh,0x5
c000f45e:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f461:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f465:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f469:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f46c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f46f:	e8 86 fc ff ff       	call   c000f0fa <IDT::flush()>
c000f474:	83 c4 20             	add    esp,0x20
c000f477:	5b                   	pop    ebx
c000f478:	5e                   	pop    esi
c000f479:	5f                   	pop    edi
c000f47a:	c3                   	ret    

c000f47b <sbrk>:
c000f47b:	55                   	push   ebp
c000f47c:	57                   	push   edi
c000f47d:	56                   	push   esi
c000f47e:	53                   	push   ebx
c000f47f:	83 ec 1c             	sub    esp,0x1c
c000f482:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f486:	85 c0                	test   eax,eax
c000f488:	74 3e                	je     c000f4c8 <sbrk+0x4d>
c000f48a:	78 43                	js     c000f4cf <sbrk+0x54>
c000f48c:	8b 15 88 d8 02 c0    	mov    edx,DWORD PTR ds:0xc002d888
c000f492:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f498:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f49e:	83 e2 01             	and    edx,0x1
c000f4a1:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f4a5:	8b 0d a4 c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c7a4
c000f4ab:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f4af:	05 ff 0f 00 00       	add    eax,0xfff
c000f4b4:	89 c2                	mov    edx,eax
c000f4b6:	78 2f                	js     c000f4e7 <sbrk+0x6c>
c000f4b8:	c1 fa 0c             	sar    edx,0xc
c000f4bb:	89 d7                	mov    edi,edx
c000f4bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f4c1:	be 00 00 00 00       	mov    esi,0x0
c000f4c6:	eb 36                	jmp    c000f4fe <sbrk+0x83>
c000f4c8:	a1 a4 c7 02 c0       	mov    eax,ds:0xc002c7a4
c000f4cd:	eb 74                	jmp    c000f543 <sbrk+0xc8>
c000f4cf:	83 ec 08             	sub    esp,0x8
c000f4d2:	50                   	push   eax
c000f4d3:	68 88 97 02 c0       	push   0xc0029788
c000f4d8:	e8 16 34 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c000f4dd:	83 c4 10             	add    esp,0x10
c000f4e0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f4e5:	eb 5c                	jmp    c000f543 <sbrk+0xc8>
c000f4e7:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f4ed:	eb c9                	jmp    c000f4b8 <sbrk+0x3d>
c000f4ef:	81 05 a4 c7 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002c7a4,0x1000
c000f4f9:	46                   	inc    esi
c000f4fa:	39 f7                	cmp    edi,esi
c000f4fc:	74 34                	je     c000f532 <sbrk+0xb7>
c000f4fe:	e8 90 25 00 00       	call   c0011a93 <Virt::getAKernelVAS()>
c000f503:	89 c3                	mov    ebx,eax
c000f505:	8b 2d a4 c7 02 c0    	mov    ebp,DWORD PTR ds:0xc002c7a4
c000f50b:	e8 b1 07 00 00       	call   c000fcc1 <Phys::allocatePage()>
c000f510:	68 01 04 00 00       	push   0x401
c000f515:	55                   	push   ebp
c000f516:	50                   	push   eax
c000f517:	53                   	push   ebx
c000f518:	e8 b1 2a 00 00       	call   c0011fce <VAS::mapPage(unsigned long, unsigned long, int)>
c000f51d:	83 c4 10             	add    esp,0x10
c000f520:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f525:	74 c8                	je     c000f4ef <sbrk+0x74>
c000f527:	8b 1d a4 c7 02 c0    	mov    ebx,DWORD PTR ds:0xc002c7a4
c000f52d:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f530:	eb bd                	jmp    c000f4ef <sbrk+0x74>
c000f532:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f537:	75 12                	jne    c000f54b <sbrk+0xd0>
c000f539:	0f 20 d8             	mov    eax,cr3
c000f53c:	0f 22 d8             	mov    cr3,eax
c000f53f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f543:	83 c4 1c             	add    esp,0x1c
c000f546:	5b                   	pop    ebx
c000f547:	5e                   	pop    esi
c000f548:	5f                   	pop    edi
c000f549:	5d                   	pop    ebp
c000f54a:	c3                   	ret    
c000f54b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f54f:	89 cb                	mov    ebx,ecx
c000f551:	c1 eb 0a             	shr    ebx,0xa
c000f554:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f55a:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f560:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f564:	c1 e0 0c             	shl    eax,0xc
c000f567:	01 c8                	add    eax,ecx
c000f569:	c1 e8 0a             	shr    eax,0xa
c000f56c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f571:	2d 00 00 40 00       	sub    eax,0x400000
c000f576:	39 c3                	cmp    ebx,eax
c000f578:	77 c5                	ja     c000f53f <sbrk+0xc4>
c000f57a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f57d:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f583:	39 d8                	cmp    eax,ebx
c000f585:	73 f3                	jae    c000f57a <sbrk+0xff>
c000f587:	eb b6                	jmp    c000f53f <sbrk+0xc4>

c000f589 <mmap>:
c000f589:	83 ec 18             	sub    esp,0x18
c000f58c:	68 b8 97 02 c0       	push   0xc00297b8
c000f591:	e8 b7 a6 00 00       	call   c0019c4d <Krnl::panic(char const*)>
c000f596:	b8 00 00 00 00       	mov    eax,0x0
c000f59b:	83 c4 1c             	add    esp,0x1c
c000f59e:	c3                   	ret    

c000f59f <munmap>:
c000f59f:	83 ec 18             	sub    esp,0x18
c000f5a2:	68 bd 97 02 c0       	push   0xc00297bd
c000f5a7:	e8 a1 a6 00 00       	call   c0019c4d <Krnl::panic(char const*)>
c000f5ac:	b8 00 00 00 00       	mov    eax,0x0
c000f5b1:	83 c4 1c             	add    esp,0x1c
c000f5b4:	c3                   	ret    

c000f5b5 <liballoc_lock()>:
c000f5b5:	83 ec 0c             	sub    esp,0xc
c000f5b8:	e8 c7 dc 00 00       	call   c001d284 <lockScheduler()>
c000f5bd:	b8 00 00 00 00       	mov    eax,0x0
c000f5c2:	83 c4 0c             	add    esp,0xc
c000f5c5:	c3                   	ret    

c000f5c6 <liballoc_unlock()>:
c000f5c6:	83 ec 0c             	sub    esp,0xc
c000f5c9:	e8 b8 dc 00 00       	call   c001d286 <unlockScheduler()>
c000f5ce:	b8 00 00 00 00       	mov    eax,0x0
c000f5d3:	83 c4 0c             	add    esp,0xc
c000f5d6:	c3                   	ret    

c000f5d7 <liballoc_alloc(int)>:
c000f5d7:	83 ec 0c             	sub    esp,0xc
c000f5da:	e8 b4 24 00 00       	call   c0011a93 <Virt::getAKernelVAS()>
c000f5df:	83 ec 04             	sub    esp,0x4
c000f5e2:	6a 01                	push   0x1
c000f5e4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f5e8:	50                   	push   eax
c000f5e9:	e8 e0 2a 00 00       	call   c00120ce <VAS::allocatePages(int, int)>
c000f5ee:	83 c4 1c             	add    esp,0x1c
c000f5f1:	c3                   	ret    

c000f5f2 <liballoc_free(void*, int)>:
c000f5f2:	83 ec 0c             	sub    esp,0xc
c000f5f5:	e8 99 24 00 00       	call   c0011a93 <Virt::getAKernelVAS()>
c000f5fa:	83 ec 08             	sub    esp,0x8
c000f5fd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f601:	50                   	push   eax
c000f602:	e8 83 27 00 00       	call   c0011d8a <VAS::freeAllocatedPages(unsigned long)>
c000f607:	b8 00 00 00 00       	mov    eax,0x0
c000f60c:	83 c4 1c             	add    esp,0x1c
c000f60f:	c3                   	ret    

c000f610 <realloc>:
c000f610:	83 ec 14             	sub    esp,0x14
c000f613:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f617:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f61b:	e8 1d 1e ff ff       	call   c000143d <dlrealloc>
c000f620:	83 c4 1c             	add    esp,0x1c
c000f623:	c3                   	ret    

c000f624 <malloc>:
c000f624:	83 ec 18             	sub    esp,0x18
c000f627:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f62b:	e8 d0 18 ff ff       	call   c0000f00 <dlmalloc>
c000f630:	83 c4 1c             	add    esp,0x1c
c000f633:	c3                   	ret    

c000f634 <free>:
c000f634:	83 ec 18             	sub    esp,0x18
c000f637:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f63b:	e8 65 15 ff ff       	call   c0000ba5 <dlfree>
c000f640:	83 c4 1c             	add    esp,0x1c
c000f643:	c3                   	ret    

c000f644 <rfree>:
c000f644:	83 ec 18             	sub    esp,0x18
c000f647:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f64b:	e8 55 15 ff ff       	call   c0000ba5 <dlfree>
c000f650:	83 c4 1c             	add    esp,0x1c
c000f653:	c3                   	ret    

c000f654 <calloc>:
c000f654:	56                   	push   esi
c000f655:	53                   	push   ebx
c000f656:	83 ec 10             	sub    esp,0x10
c000f659:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f65d:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f662:	53                   	push   ebx
c000f663:	e8 bc ff ff ff       	call   c000f624 <malloc>
c000f668:	89 c6                	mov    esi,eax
c000f66a:	83 c4 0c             	add    esp,0xc
c000f66d:	53                   	push   ebx
c000f66e:	6a 00                	push   0x0
c000f670:	50                   	push   eax
c000f671:	e8 4e 10 ff ff       	call   c00006c4 <memset>
c000f676:	89 f0                	mov    eax,esi
c000f678:	83 c4 14             	add    esp,0x14
c000f67b:	5b                   	pop    ebx
c000f67c:	5e                   	pop    esi
c000f67d:	c3                   	ret    

c000f67e <hwTextMode_loadInData(VgaText*)>:
c000f67e:	55                   	push   ebp
c000f67f:	a1 c0 c7 02 c0       	mov    eax,ds:0xc002c7c0
c000f684:	57                   	push   edi
c000f685:	56                   	push   esi
c000f686:	53                   	push   ebx
c000f687:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f68b:	8b 97 ac 0f 00 00    	mov    edx,DWORD PTR [edi+0xfac]
c000f691:	85 d2                	test   edx,edx
c000f693:	7e 2f                	jle    c000f6c4 <hwTextMode_loadInData(VgaText*)+0x46>
c000f695:	8d a8 94 00 00 00    	lea    ebp,[eax+0x94]
c000f69b:	8d 4f 0c             	lea    ecx,[edi+0xc]
c000f69e:	31 f6                	xor    esi,esi
c000f6a0:	29 fd                	sub    ebp,edi
c000f6a2:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f6a5:	31 c0                	xor    eax,eax
c000f6a7:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f6ab:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f6af:	40                   	inc    eax
c000f6b0:	83 f8 50             	cmp    eax,0x50
c000f6b3:	75 f2                	jne    c000f6a7 <hwTextMode_loadInData(VgaText*)+0x29>
c000f6b5:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f6bb:	46                   	inc    esi
c000f6bc:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f6c2:	7f de                	jg     c000f6a2 <hwTextMode_loadInData(VgaText*)+0x24>
c000f6c4:	5b                   	pop    ebx
c000f6c5:	5e                   	pop    esi
c000f6c6:	5f                   	pop    edi
c000f6c7:	5d                   	pop    ebp
c000f6c8:	c3                   	ret    

c000f6c9 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f6c9:	55                   	push   ebp
c000f6ca:	80 3d 20 d9 02 c0 00 	cmp    BYTE PTR ds:0xc002d920,0x0
c000f6d1:	57                   	push   edi
c000f6d2:	56                   	push   esi
c000f6d3:	53                   	push   ebx
c000f6d4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f6d8:	75 50                	jne    c000f72a <hwTextMode_loadInTitle(VgaText*, char*)+0x61>
c000f6da:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f6e0:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f6e6:	8b 15 c0 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c7c0
c000f6ec:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f6f0:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c000f6f6:	eb 0e                	jmp    c000f706 <hwTextMode_loadInTitle(VgaText*, char*)+0x3d>
c000f6f8:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f6fe:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f704:	89 da                	mov    edx,ebx
c000f706:	83 e5 0f             	and    ebp,0xf
c000f709:	c1 e0 04             	shl    eax,0x4
c000f70c:	8d 5a 02             	lea    ebx,[edx+0x2]
c000f70f:	0f b6 c0             	movzx  eax,al
c000f712:	41                   	inc    ecx
c000f713:	09 e8                	or     eax,ebp
c000f715:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c000f719:	c1 e0 08             	shl    eax,0x8
c000f71c:	09 e8                	or     eax,ebp
c000f71e:	39 fb                	cmp    ebx,edi
c000f720:	66 89 02             	mov    WORD PTR [edx],ax
c000f723:	75 d3                	jne    c000f6f8 <hwTextMode_loadInTitle(VgaText*, char*)+0x2f>
c000f725:	5b                   	pop    ebx
c000f726:	5e                   	pop    esi
c000f727:	5f                   	pop    edi
c000f728:	5d                   	pop    ebp
c000f729:	c3                   	ret    
c000f72a:	c7 86 d8 0f 00 00 02 00 00 00 	mov    DWORD PTR [esi+0xfd8],0x2
c000f734:	c7 86 d4 0f 00 00 00 00 00 00 	mov    DWORD PTR [esi+0xfd4],0x0
c000f73e:	31 c0                	xor    eax,eax
c000f740:	bd 02 00 00 00       	mov    ebp,0x2
c000f745:	eb 9f                	jmp    c000f6e6 <hwTextMode_loadInTitle(VgaText*, char*)+0x1d>

c000f747 <hwTextMode_showCursor(VgaText*, bool)>:
c000f747:	56                   	push   esi
c000f748:	80 3d 20 d9 02 c0 00 	cmp    BYTE PTR ds:0xc002d920,0x0
c000f74f:	53                   	push   ebx
c000f750:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f754:	75 39                	jne    c000f78f <hwTextMode_showCursor(VgaText*, bool)+0x48>
c000f756:	84 c0                	test   al,al
c000f758:	74 38                	je     c000f792 <hwTextMode_showCursor(VgaText*, bool)+0x4b>
c000f75a:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f75f:	b0 0a                	mov    al,0xa
c000f761:	89 da                	mov    edx,ebx
c000f763:	ee                   	out    dx,al
c000f764:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f769:	89 ca                	mov    edx,ecx
c000f76b:	ec                   	in     al,dx
c000f76c:	b2 0f                	mov    dl,0xf
c000f76e:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f772:	83 e0 c0             	and    eax,0xffffffc0
c000f775:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f77b:	09 d0                	or     eax,edx
c000f77d:	89 ca                	mov    edx,ecx
c000f77f:	ee                   	out    dx,al
c000f780:	b0 0b                	mov    al,0xb
c000f782:	89 da                	mov    edx,ebx
c000f784:	ee                   	out    dx,al
c000f785:	89 ca                	mov    edx,ecx
c000f787:	ec                   	in     al,dx
c000f788:	83 e0 e0             	and    eax,0xffffffe0
c000f78b:	83 c8 0f             	or     eax,0xf
c000f78e:	ee                   	out    dx,al
c000f78f:	5b                   	pop    ebx
c000f790:	5e                   	pop    esi
c000f791:	c3                   	ret    
c000f792:	b0 0a                	mov    al,0xa
c000f794:	ba d4 03 00 00       	mov    edx,0x3d4
c000f799:	ee                   	out    dx,al
c000f79a:	b0 20                	mov    al,0x20
c000f79c:	ba d5 03 00 00       	mov    edx,0x3d5
c000f7a1:	ee                   	out    dx,al
c000f7a2:	5b                   	pop    ebx
c000f7a3:	5e                   	pop    esi
c000f7a4:	c3                   	ret    

c000f7a5 <hwTextMode_update(VgaText*)>:
c000f7a5:	c3                   	ret    

c000f7a6 <hwTextMode_updateCursor(VgaText*)>:
c000f7a6:	56                   	push   esi
c000f7a7:	80 3d 20 d9 02 c0 00 	cmp    BYTE PTR ds:0xc002d920,0x0
c000f7ae:	53                   	push   ebx
c000f7af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f7b3:	75 3f                	jne    c000f7f4 <hwTextMode_updateCursor(VgaText*)+0x4e>
c000f7b5:	be d4 03 00 00       	mov    esi,0x3d4
c000f7ba:	b9 19 00 00 00       	mov    ecx,0x19
c000f7bf:	89 f2                	mov    edx,esi
c000f7c1:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f7c7:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f7cd:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f7d0:	c1 e1 04             	shl    ecx,0x4
c000f7d3:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000f7d9:	b0 0f                	mov    al,0xf
c000f7db:	ee                   	out    dx,al
c000f7dc:	bb d5 03 00 00       	mov    ebx,0x3d5
c000f7e1:	88 c8                	mov    al,cl
c000f7e3:	89 da                	mov    edx,ebx
c000f7e5:	ee                   	out    dx,al
c000f7e6:	b0 0e                	mov    al,0xe
c000f7e8:	89 f2                	mov    edx,esi
c000f7ea:	ee                   	out    dx,al
c000f7eb:	89 c8                	mov    eax,ecx
c000f7ed:	89 da                	mov    edx,ebx
c000f7ef:	66 c1 e8 08          	shr    ax,0x8
c000f7f3:	ee                   	out    dx,al
c000f7f4:	5b                   	pop    ebx
c000f7f5:	5e                   	pop    esi
c000f7f6:	c3                   	ret    

c000f7f7 <hwTextMode_disableBlink(VgaText*, bool)>:
c000f7f7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f7fb:	80 3d 20 d9 02 c0 00 	cmp    BYTE PTR ds:0xc002d920,0x0
c000f802:	75 38                	jne    c000f83c <hwTextMode_disableBlink(VgaText*, bool)+0x45>
c000f804:	ba da 03 00 00       	mov    edx,0x3da
c000f809:	84 c0                	test   al,al
c000f80b:	75 18                	jne    c000f825 <hwTextMode_disableBlink(VgaText*, bool)+0x2e>
c000f80d:	ec                   	in     al,dx
c000f80e:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000f813:	b0 30                	mov    al,0x30
c000f815:	89 ca                	mov    edx,ecx
c000f817:	ee                   	out    dx,al
c000f818:	ba c1 03 00 00       	mov    edx,0x3c1
c000f81d:	ec                   	in     al,dx
c000f81e:	83 c8 08             	or     eax,0x8
c000f821:	89 ca                	mov    edx,ecx
c000f823:	ee                   	out    dx,al
c000f824:	c3                   	ret    
c000f825:	ec                   	in     al,dx
c000f826:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000f82b:	b0 30                	mov    al,0x30
c000f82d:	89 ca                	mov    edx,ecx
c000f82f:	ee                   	out    dx,al
c000f830:	ba c1 03 00 00       	mov    edx,0x3c1
c000f835:	ec                   	in     al,dx
c000f836:	83 e0 f7             	and    eax,0xfffffff7
c000f839:	89 ca                	mov    edx,ecx
c000f83b:	ee                   	out    dx,al
c000f83c:	c3                   	ret    

c000f83d <hwTextMode_scrollScreen(VgaText*)>:
c000f83d:	55                   	push   ebp
c000f83e:	57                   	push   edi
c000f83f:	56                   	push   esi
c000f840:	53                   	push   ebx
c000f841:	83 ec 1c             	sub    esp,0x1c
c000f844:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f848:	80 3d 20 d9 02 c0 00 	cmp    BYTE PTR ds:0xc002d920,0x0
c000f84f:	74 14                	je     c000f865 <hwTextMode_scrollScreen(VgaText*)+0x28>
c000f851:	c7 81 d0 0f 00 00 02 00 00 00 	mov    DWORD PTR [ecx+0xfd0],0x2
c000f85b:	c7 81 cc 0f 00 00 00 00 00 00 	mov    DWORD PTR [ecx+0xfcc],0x0
c000f865:	a1 c0 c7 02 c0       	mov    eax,ds:0xc002c7c0
c000f86a:	bd 02 00 00 00       	mov    ebp,0x2
c000f86f:	05 a0 00 00 00       	add    eax,0xa0
c000f874:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f878:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f87c:	31 c0                	xor    eax,eax
c000f87e:	eb 0b                	jmp    c000f88b <hwTextMode_scrollScreen(VgaText*)+0x4e>
c000f880:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000f886:	74 57                	je     c000f8df <hwTextMode_scrollScreen(VgaText*)+0xa2>
c000f888:	43                   	inc    ebx
c000f889:	89 f0                	mov    eax,esi
c000f88b:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000f891:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000f897:	88 13                	mov    BYTE PTR [ebx],dl
c000f899:	8d 70 01             	lea    esi,[eax+0x1]
c000f89c:	83 fd 18             	cmp    ebp,0x18
c000f89f:	75 df                	jne    c000f880 <hwTextMode_scrollScreen(VgaText*)+0x43>
c000f8a1:	a8 01                	test   al,0x1
c000f8a3:	75 13                	jne    c000f8b8 <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000f8a5:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000f8a8:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000f8ae:	75 d8                	jne    c000f888 <hwTextMode_scrollScreen(VgaText*)+0x4b>
c000f8b0:	83 c4 1c             	add    esp,0x1c
c000f8b3:	5b                   	pop    ebx
c000f8b4:	5e                   	pop    esi
c000f8b5:	5f                   	pop    edi
c000f8b6:	5d                   	pop    ebp
c000f8b7:	c3                   	ret    
c000f8b8:	83 ec 08             	sub    esp,0x8
c000f8bb:	0f b6 81 cc 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfcc]
c000f8c2:	50                   	push   eax
c000f8c3:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000f8c7:	0f b6 81 d0 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfd0]
c000f8ce:	50                   	push   eax
c000f8cf:	e8 32 0c 00 00       	call   c0010506 <VgaText::combineColours(unsigned char, unsigned char)>
c000f8d4:	83 c4 10             	add    esp,0x10
c000f8d7:	88 07                	mov    BYTE PTR [edi],al
c000f8d9:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f8dd:	eb c9                	jmp    c000f8a8 <hwTextMode_scrollScreen(VgaText*)+0x6b>
c000f8df:	45                   	inc    ebp
c000f8e0:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000f8e8:	eb 8e                	jmp    c000f878 <hwTextMode_scrollScreen(VgaText*)+0x3b>

c000f8ea <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000f8ea:	57                   	push   edi
c000f8eb:	80 3d 20 d9 02 c0 00 	cmp    BYTE PTR ds:0xc002d920,0x0
c000f8f2:	56                   	push   esi
c000f8f3:	53                   	push   ebx
c000f8f4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f8f8:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000f8fc:	75 65                	jne    c000f963 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x79>
c000f8fe:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c000f903:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000f908:	83 ec 08             	sub    esp,0x8
c000f90b:	52                   	push   edx
c000f90c:	50                   	push   eax
c000f90d:	e8 f4 0b 00 00       	call   c0010506 <VgaText::combineColours(unsigned char, unsigned char)>
c000f912:	5a                   	pop    edx
c000f913:	0f b6 c0             	movzx  eax,al
c000f916:	59                   	pop    ecx
c000f917:	50                   	push   eax
c000f918:	0f be c3             	movsx  eax,bl
c000f91b:	50                   	push   eax
c000f91c:	e8 8b 0c 00 00       	call   c00105ac <VgaText::combineCharAndColour(char, unsigned char)>
c000f921:	83 c4 10             	add    esp,0x10
c000f924:	8b 35 c0 c7 02 c0    	mov    esi,DWORD PTR ds:0xc002c7c0
c000f92a:	80 3d 20 d9 02 c0 00 	cmp    BYTE PTR ds:0xc002d920,0x0
c000f931:	74 07                	je     c000f93a <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x50>
c000f933:	66 0f be c3          	movsx  ax,bl
c000f937:	80 cc 02             	or     ah,0x2
c000f93a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f93e:	ba 19 00 00 00       	mov    edx,0x19
c000f943:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000f949:	8d 0c bf             	lea    ecx,[edi+edi*4]
c000f94c:	8d 14 92             	lea    edx,[edx+edx*4]
c000f94f:	c1 e1 04             	shl    ecx,0x4
c000f952:	c1 e2 04             	shl    edx,0x4
c000f955:	03 4c 24 20          	add    ecx,DWORD PTR [esp+0x20]
c000f959:	01 ca                	add    edx,ecx
c000f95b:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000f95f:	5b                   	pop    ebx
c000f960:	5e                   	pop    esi
c000f961:	5f                   	pop    edi
c000f962:	c3                   	ret    
c000f963:	b8 02 00 00 00       	mov    eax,0x2
c000f968:	31 d2                	xor    edx,edx
c000f96a:	eb 9c                	jmp    c000f908 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c000f96c <setupTextMode()>:
c000f96c:	a1 10 04 00 00       	mov    eax,ds:0x410
c000f971:	83 e0 30             	and    eax,0x30
c000f974:	66 83 f8 30          	cmp    ax,0x30
c000f978:	75 11                	jne    c000f98b <setupTextMode()+0x1f>
c000f97a:	81 2d c0 c7 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002c7c0,0x8000
c000f984:	c6 05 20 d9 02 c0 01 	mov    BYTE PTR ds:0xc002d920,0x1
c000f98b:	c7 05 58 d9 02 c0 f7 f7 00 c0 	mov    DWORD PTR ds:0xc002d958,0xc000f7f7
c000f995:	c7 05 44 d9 02 c0 7e f6 00 c0 	mov    DWORD PTR ds:0xc002d944,0xc000f67e
c000f99f:	c7 05 40 d9 02 c0 c9 f6 00 c0 	mov    DWORD PTR ds:0xc002d940,0xc000f6c9
c000f9a9:	c7 05 4c d9 02 c0 3d f8 00 c0 	mov    DWORD PTR ds:0xc002d94c,0xc000f83d
c000f9b3:	c7 05 54 d9 02 c0 47 f7 00 c0 	mov    DWORD PTR ds:0xc002d954,0xc000f747
c000f9bd:	c7 05 48 d9 02 c0 a5 f7 00 c0 	mov    DWORD PTR ds:0xc002d948,0xc000f7a5
c000f9c7:	c7 05 50 d9 02 c0 a6 f7 00 c0 	mov    DWORD PTR ds:0xc002d950,0xc000f7a6
c000f9d1:	c7 05 5c d9 02 c0 ea f8 00 c0 	mov    DWORD PTR ds:0xc002d95c,0xc000f8ea
c000f9db:	c3                   	ret    

c000f9dc <kernel_main>:
c000f9dc:	57                   	push   edi
c000f9dd:	bf f9 03 00 00       	mov    edi,0x3f9
c000f9e2:	56                   	push   esi
c000f9e3:	31 f6                	xor    esi,esi
c000f9e5:	53                   	push   ebx
c000f9e6:	83 ec 10             	sub    esp,0x10
c000f9e9:	e8 72 09 00 00       	call   c0010360 <installVgaTextImplementation()>
c000f9ee:	e8 79 ff ff ff       	call   c000f96c <setupTextMode()>
c000f9f3:	89 f0                	mov    eax,esi
c000f9f5:	89 fa                	mov    edx,edi
c000f9f7:	ee                   	out    dx,al
c000f9f8:	bb fb 03 00 00       	mov    ebx,0x3fb
c000f9fd:	b0 80                	mov    al,0x80
c000f9ff:	89 da                	mov    edx,ebx
c000fa01:	ee                   	out    dx,al
c000fa02:	b1 03                	mov    cl,0x3
c000fa04:	ba f8 03 00 00       	mov    edx,0x3f8
c000fa09:	88 c8                	mov    al,cl
c000fa0b:	ee                   	out    dx,al
c000fa0c:	89 f0                	mov    eax,esi
c000fa0e:	89 fa                	mov    edx,edi
c000fa10:	ee                   	out    dx,al
c000fa11:	88 c8                	mov    al,cl
c000fa13:	89 da                	mov    edx,ebx
c000fa15:	ee                   	out    dx,al
c000fa16:	b0 c7                	mov    al,0xc7
c000fa18:	ba fa 03 00 00       	mov    edx,0x3fa
c000fa1d:	ee                   	out    dx,al
c000fa1e:	b0 0b                	mov    al,0xb
c000fa20:	ba fc 03 00 00       	mov    edx,0x3fc
c000fa25:	ee                   	out    dx,al
c000fa26:	83 ec 0c             	sub    esp,0xc
c000fa29:	68 c4 97 02 c0       	push   0xc00297c4
c000fa2e:	e8 c0 2e 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c000fa33:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fa38:	05 ff 0f 00 00       	add    eax,0xfff
c000fa3d:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fa42:	89 04 24             	mov    DWORD PTR [esp],eax
c000fa45:	e8 d1 03 00 00       	call   c000fe1b <Phys::physicalMemorySetup(unsigned int)>
c000fa4a:	e8 c5 1f 00 00       	call   c0011a14 <Virt::virtualMemorySetup()>
c000fa4f:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000fa55:	83 c4 10             	add    esp,0x10
c000fa58:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000fa5e:	75 0e                	jne    c000fa6e <kernel_main+0x92>
c000fa60:	89 d8                	mov    eax,ebx
c000fa62:	25 48 03 00 00       	and    eax,0x348
c000fa67:	3d 00 03 00 00       	cmp    eax,0x300
c000fa6c:	74 10                	je     c000fa7e <kernel_main+0xa2>
c000fa6e:	83 ec 0c             	sub    esp,0xc
c000fa71:	68 a4 af 02 c0       	push   0xc002afa4
c000fa76:	e8 d2 a1 00 00       	call   c0019c4d <Krnl::panic(char const*)>
c000fa7b:	83 c4 10             	add    esp,0x10
c000fa7e:	83 ec 0c             	sub    esp,0xc
c000fa81:	89 1d a0 d8 02 c0    	mov    DWORD PTR ds:0xc002d8a0,ebx
c000fa87:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000fa8b:	53                   	push   ebx
c000fa8c:	e8 37 21 00 00       	call   c0011bc8 <VAS::VAS()>
c000fa91:	89 1d 04 da 02 c0    	mov    DWORD PTR ds:0xc002da04,ebx
c000fa97:	e8 84 05 ff ff       	call   c0000020 <callGlobalConstructors>
c000fa9c:	c7 04 24 db 97 02 c0 	mov    DWORD PTR [esp],0xc00297db
c000faa3:	e8 4b 2e 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c000faa8:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000faaf:	e8 70 fb ff ff       	call   c000f624 <malloc>
c000fab4:	89 04 24             	mov    DWORD PTR [esp],eax
c000fab7:	89 c6                	mov    esi,eax
c000fab9:	e8 60 ea ff ff       	call   c000e51e <Computer::Computer()>
c000fabe:	58                   	pop    eax
c000fabf:	89 35 88 d8 02 c0    	mov    DWORD PTR ds:0xc002d888,esi
c000fac5:	5a                   	pop    edx
c000fac6:	56                   	push   esi
c000fac7:	68 f8 97 02 c0       	push   0xc00297f8
c000facc:	e8 22 2e 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c000fad1:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c000fad6:	8b 10                	mov    edx,DWORD PTR [eax]
c000fad8:	6a 00                	push   0x0
c000fada:	6a 00                	push   0x0
c000fadc:	6a 00                	push   0x0
c000fade:	50                   	push   eax
c000fadf:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fae2:	83 c4 14             	add    esp,0x14
c000fae5:	53                   	push   ebx
c000fae6:	e8 77 23 00 00       	call   c0011e62 <VAS::~VAS()>
c000faeb:	c7 04 24 0b 98 02 c0 	mov    DWORD PTR [esp],0xc002980b
c000faf2:	e8 56 a1 00 00       	call   c0019c4d <Krnl::panic(char const*)>
c000faf7:	83 c4 20             	add    esp,0x20
c000fafa:	5b                   	pop    ebx
c000fafb:	5e                   	pop    esi
c000fafc:	5f                   	pop    edi
c000fafd:	c3                   	ret    

c000fafe <Phys::allocateDMA(unsigned long)>:
c000fafe:	55                   	push   ebp
c000faff:	31 d2                	xor    edx,edx
c000fb01:	57                   	push   edi
c000fb02:	31 ed                	xor    ebp,ebp
c000fb04:	56                   	push   esi
c000fb05:	31 c9                	xor    ecx,ecx
c000fb07:	53                   	push   ebx
c000fb08:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fb0c:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fb12:	31 c0                	xor    eax,eax
c000fb14:	c1 ee 0c             	shr    esi,0xc
c000fb17:	eb 17                	jmp    c000fb30 <Phys::allocateDMA(unsigned long)+0x32>
c000fb19:	85 c9                	test   ecx,ecx
c000fb1b:	75 04                	jne    c000fb21 <Phys::allocateDMA(unsigned long)+0x23>
c000fb1d:	89 d5                	mov    ebp,edx
c000fb1f:	89 d0                	mov    eax,edx
c000fb21:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fb24:	39 de                	cmp    esi,ebx
c000fb26:	74 20                	je     c000fb48 <Phys::allocateDMA(unsigned long)+0x4a>
c000fb28:	42                   	inc    edx
c000fb29:	89 d9                	mov    ecx,ebx
c000fb2b:	83 fa 2f             	cmp    edx,0x2f
c000fb2e:	7f 11                	jg     c000fb41 <Phys::allocateDMA(unsigned long)+0x43>
c000fb30:	80 ba e0 d8 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd2720],0x0
c000fb37:	74 e0                	je     c000fb19 <Phys::allocateDMA(unsigned long)+0x1b>
c000fb39:	31 c9                	xor    ecx,ecx
c000fb3b:	42                   	inc    edx
c000fb3c:	83 fa 2f             	cmp    edx,0x2f
c000fb3f:	7e ef                	jle    c000fb30 <Phys::allocateDMA(unsigned long)+0x32>
c000fb41:	5b                   	pop    ebx
c000fb42:	31 c0                	xor    eax,eax
c000fb44:	5e                   	pop    esi
c000fb45:	5f                   	pop    edi
c000fb46:	5d                   	pop    ebp
c000fb47:	c3                   	ret    
c000fb48:	8d 14 30             	lea    edx,[eax+esi*1]
c000fb4b:	89 d7                	mov    edi,edx
c000fb4d:	4f                   	dec    edi
c000fb4e:	79 03                	jns    c000fb53 <Phys::allocateDMA(unsigned long)+0x55>
c000fb50:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fb53:	c1 ff 04             	sar    edi,0x4
c000fb56:	89 c2                	mov    edx,eax
c000fb58:	c1 fa 04             	sar    edx,0x4
c000fb5b:	39 fa                	cmp    edx,edi
c000fb5d:	75 2f                	jne    c000fb8e <Phys::allocateDMA(unsigned long)+0x90>
c000fb5f:	85 db                	test   ebx,ebx
c000fb61:	74 1a                	je     c000fb7d <Phys::allocateDMA(unsigned long)+0x7f>
c000fb63:	be e0 d8 02 c0       	mov    esi,0xc002d8e0
c000fb68:	8d 90 e0 d8 02 c0    	lea    edx,[eax-0x3ffd2720]
c000fb6e:	f7 d6                	not    esi
c000fb70:	29 c6                	sub    esi,eax
c000fb72:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fb75:	42                   	inc    edx
c000fb76:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fb79:	39 d9                	cmp    ecx,ebx
c000fb7b:	7f f5                	jg     c000fb72 <Phys::allocateDMA(unsigned long)+0x74>
c000fb7d:	85 ff                	test   edi,edi
c000fb7f:	74 13                	je     c000fb94 <Phys::allocateDMA(unsigned long)+0x96>
c000fb81:	5b                   	pop    ebx
c000fb82:	05 50 20 0c 00       	add    eax,0xc2050
c000fb87:	5e                   	pop    esi
c000fb88:	c1 e0 0c             	shl    eax,0xc
c000fb8b:	5f                   	pop    edi
c000fb8c:	5d                   	pop    ebp
c000fb8d:	c3                   	ret    
c000fb8e:	89 ea                	mov    edx,ebp
c000fb90:	31 c9                	xor    ecx,ecx
c000fb92:	eb a7                	jmp    c000fb3b <Phys::allocateDMA(unsigned long)+0x3d>
c000fb94:	5b                   	pop    ebx
c000fb95:	c1 e0 0c             	shl    eax,0xc
c000fb98:	5e                   	pop    esi
c000fb99:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fb9e:	5f                   	pop    edi
c000fb9f:	5d                   	pop    ebp
c000fba0:	c3                   	ret    

c000fba1 <Phys::freeDMA(unsigned long, unsigned long)>:
c000fba1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fba5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fba9:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fbaf:	c1 e9 0c             	shr    ecx,0xc
c000fbb2:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fbb7:	76 25                	jbe    c000fbde <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fbb9:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fbbe:	c1 e8 0c             	shr    eax,0xc
c000fbc1:	8d 50 10             	lea    edx,[eax+0x10]
c000fbc4:	85 c9                	test   ecx,ecx
c000fbc6:	74 15                	je     c000fbdd <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fbc8:	8d 82 e0 d8 02 c0    	lea    eax,[edx-0x3ffd2720]
c000fbce:	8d 94 11 e0 d8 02 c0 	lea    edx,[ecx+edx*1-0x3ffd2720]
c000fbd5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fbd8:	40                   	inc    eax
c000fbd9:	39 d0                	cmp    eax,edx
c000fbdb:	75 f8                	jne    c000fbd5 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fbdd:	c3                   	ret    
c000fbde:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fbe4:	c1 ea 0c             	shr    edx,0xc
c000fbe7:	eb db                	jmp    c000fbc4 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fbe9 <Phys::setPageState(unsigned long, bool)>:
c000fbe9:	56                   	push   esi
c000fbea:	ba 01 00 00 00       	mov    edx,0x1
c000fbef:	53                   	push   ebx
c000fbf0:	8b 35 a8 c7 02 c0    	mov    esi,DWORD PTR ds:0xc002c7a8
c000fbf6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fbfa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fbfe:	89 c8                	mov    eax,ecx
c000fc00:	83 e1 07             	and    ecx,0x7
c000fc03:	c1 e8 03             	shr    eax,0x3
c000fc06:	d3 e3                	shl    ebx,cl
c000fc08:	01 c6                	add    esi,eax
c000fc0a:	d3 e2                	shl    edx,cl
c000fc0c:	f7 d2                	not    edx
c000fc0e:	20 16                	and    BYTE PTR [esi],dl
c000fc10:	03 05 a8 c7 02 c0    	add    eax,DWORD PTR ds:0xc002c7a8
c000fc16:	08 18                	or     BYTE PTR [eax],bl
c000fc18:	5b                   	pop    ebx
c000fc19:	5e                   	pop    esi
c000fc1a:	c3                   	ret    

c000fc1b <Phys::getPageState(unsigned long)>:
c000fc1b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fc1f:	8b 15 a8 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c7a8
c000fc25:	89 c8                	mov    eax,ecx
c000fc27:	83 e1 07             	and    ecx,0x7
c000fc2a:	c1 e8 03             	shr    eax,0x3
c000fc2d:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fc31:	d3 f8                	sar    eax,cl
c000fc33:	83 e0 01             	and    eax,0x1
c000fc36:	c3                   	ret    

c000fc37 <Phys::freePage(unsigned long)>:
c000fc37:	53                   	push   ebx
c000fc38:	83 ec 08             	sub    esp,0x8
c000fc3b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fc3f:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fc45:	76 57                	jbe    c000fc9e <Phys::freePage(unsigned long)+0x67>
c000fc47:	c1 eb 0c             	shr    ebx,0xc
c000fc4a:	53                   	push   ebx
c000fc4b:	e8 cb ff ff ff       	call   c000fc1b <Phys::getPageState(unsigned long)>
c000fc50:	5a                   	pop    edx
c000fc51:	84 c0                	test   al,al
c000fc53:	74 5b                	je     c000fcb0 <Phys::freePage(unsigned long)+0x79>
c000fc55:	a1 cc d8 02 c0       	mov    eax,ds:0xc002d8cc
c000fc5a:	48                   	dec    eax
c000fc5b:	a3 cc d8 02 c0       	mov    ds:0xc002d8cc,eax
c000fc60:	8d 04 80             	lea    eax,[eax+eax*4]
c000fc63:	8d 04 80             	lea    eax,[eax+eax*4]
c000fc66:	c1 e0 02             	shl    eax,0x2
c000fc69:	99                   	cdq    
c000fc6a:	f7 3d d0 d8 02 c0    	idiv   DWORD PTR ds:0xc002d8d0
c000fc70:	39 05 c8 d8 02 c0    	cmp    DWORD PTR ds:0xc002d8c8,eax
c000fc76:	75 13                	jne    c000fc8b <Phys::freePage(unsigned long)+0x54>
c000fc78:	83 ec 08             	sub    esp,0x8
c000fc7b:	6a 00                	push   0x0
c000fc7d:	53                   	push   ebx
c000fc7e:	e8 66 ff ff ff       	call   c000fbe9 <Phys::setPageState(unsigned long, bool)>
c000fc83:	83 c4 10             	add    esp,0x10
c000fc86:	83 c4 08             	add    esp,0x8
c000fc89:	5b                   	pop    ebx
c000fc8a:	c3                   	ret    
c000fc8b:	83 ec 0c             	sub    esp,0xc
c000fc8e:	a3 c8 d8 02 c0       	mov    ds:0xc002d8c8,eax
c000fc93:	50                   	push   eax
c000fc94:	e8 5b 0a 00 00       	call   c00106f4 <VgaText::updateRAMUsageDisplay(int)>
c000fc99:	83 c4 10             	add    esp,0x10
c000fc9c:	eb da                	jmp    c000fc78 <Phys::freePage(unsigned long)+0x41>
c000fc9e:	68 00 10 00 00       	push   0x1000
c000fca3:	53                   	push   ebx
c000fca4:	e8 f8 fe ff ff       	call   c000fba1 <Phys::freeDMA(unsigned long, unsigned long)>
c000fca9:	59                   	pop    ecx
c000fcaa:	5b                   	pop    ebx
c000fcab:	83 c4 08             	add    esp,0x8
c000fcae:	5b                   	pop    ebx
c000fcaf:	c3                   	ret    
c000fcb0:	c7 44 24 10 26 98 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029826
c000fcb8:	83 c4 08             	add    esp,0x8
c000fcbb:	5b                   	pop    ebx
c000fcbc:	e9 8c 9f 00 00       	jmp    c0019c4d <Krnl::panic(char const*)>

c000fcc1 <Phys::allocatePage()>:
c000fcc1:	56                   	push   esi
c000fcc2:	53                   	push   ebx
c000fcc3:	51                   	push   ecx
c000fcc4:	8b 35 c0 d8 02 c0    	mov    esi,DWORD PTR ds:0xc002d8c0
c000fcca:	89 f3                	mov    ebx,esi
c000fccc:	eb 0a                	jmp    c000fcd8 <Phys::allocatePage()+0x17>
c000fcce:	89 1d c0 d8 02 c0    	mov    DWORD PTR ds:0xc002d8c0,ebx
c000fcd4:	39 de                	cmp    esi,ebx
c000fcd6:	74 24                	je     c000fcfc <Phys::allocatePage()+0x3b>
c000fcd8:	53                   	push   ebx
c000fcd9:	e8 3d ff ff ff       	call   c000fc1b <Phys::getPageState(unsigned long)>
c000fcde:	5a                   	pop    edx
c000fcdf:	84 c0                	test   al,al
c000fce1:	74 5a                	je     c000fd3d <Phys::allocatePage()+0x7c>
c000fce3:	43                   	inc    ebx
c000fce4:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fcea:	75 e2                	jne    c000fcce <Phys::allocatePage()+0xd>
c000fcec:	31 db                	xor    ebx,ebx
c000fcee:	c7 05 c0 d8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d8c0,0x0
c000fcf8:	39 de                	cmp    esi,ebx
c000fcfa:	75 dc                	jne    c000fcd8 <Phys::allocatePage()+0x17>
c000fcfc:	83 ec 0c             	sub    esp,0xc
c000fcff:	68 3c 98 02 c0       	push   0xc002983c
c000fd04:	e8 ea 2b 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c000fd09:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000fd10:	e8 e9 fd ff ff       	call   c000fafe <Phys::allocateDMA(unsigned long)>
c000fd15:	83 c4 10             	add    esp,0x10
c000fd18:	85 c0                	test   eax,eax
c000fd1a:	75 56                	jne    c000fd72 <Phys::allocatePage()+0xb1>
c000fd1c:	83 ec 0c             	sub    esp,0xc
c000fd1f:	68 4d 98 02 c0       	push   0xc002984d
c000fd24:	e8 24 9f 00 00       	call   c0019c4d <Krnl::panic(char const*)>
c000fd29:	83 c4 10             	add    esp,0x10
c000fd2c:	8b 1d c0 d8 02 c0    	mov    ebx,DWORD PTR ds:0xc002d8c0
c000fd32:	53                   	push   ebx
c000fd33:	e8 e3 fe ff ff       	call   c000fc1b <Phys::getPageState(unsigned long)>
c000fd38:	5a                   	pop    edx
c000fd39:	84 c0                	test   al,al
c000fd3b:	75 a6                	jne    c000fce3 <Phys::allocatePage()+0x22>
c000fd3d:	6a 01                	push   0x1
c000fd3f:	53                   	push   ebx
c000fd40:	e8 a4 fe ff ff       	call   c000fbe9 <Phys::setPageState(unsigned long, bool)>
c000fd45:	a1 cc d8 02 c0       	mov    eax,ds:0xc002d8cc
c000fd4a:	59                   	pop    ecx
c000fd4b:	40                   	inc    eax
c000fd4c:	5b                   	pop    ebx
c000fd4d:	a3 cc d8 02 c0       	mov    ds:0xc002d8cc,eax
c000fd52:	8d 04 80             	lea    eax,[eax+eax*4]
c000fd55:	8d 04 80             	lea    eax,[eax+eax*4]
c000fd58:	c1 e0 02             	shl    eax,0x2
c000fd5b:	99                   	cdq    
c000fd5c:	f7 3d d0 d8 02 c0    	idiv   DWORD PTR ds:0xc002d8d0
c000fd62:	39 05 c8 d8 02 c0    	cmp    DWORD PTR ds:0xc002d8c8,eax
c000fd68:	75 0c                	jne    c000fd76 <Phys::allocatePage()+0xb5>
c000fd6a:	a1 c0 d8 02 c0       	mov    eax,ds:0xc002d8c0
c000fd6f:	c1 e0 0c             	shl    eax,0xc
c000fd72:	5a                   	pop    edx
c000fd73:	5b                   	pop    ebx
c000fd74:	5e                   	pop    esi
c000fd75:	c3                   	ret    
c000fd76:	83 ec 0c             	sub    esp,0xc
c000fd79:	a3 c8 d8 02 c0       	mov    ds:0xc002d8c8,eax
c000fd7e:	50                   	push   eax
c000fd7f:	e8 70 09 00 00       	call   c00106f4 <VgaText::updateRAMUsageDisplay(int)>
c000fd84:	83 c4 10             	add    esp,0x10
c000fd87:	eb e1                	jmp    c000fd6a <Phys::allocatePage()+0xa9>

c000fd89 <Phys::allocateContiguousPages(int)>:
c000fd89:	57                   	push   edi
c000fd8a:	56                   	push   esi
c000fd8b:	53                   	push   ebx
c000fd8c:	31 db                	xor    ebx,ebx
c000fd8e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000fd92:	e8 ed d4 00 00       	call   c001d284 <lockScheduler()>
c000fd97:	85 db                	test   ebx,ebx
c000fd99:	75 11                	jne    c000fdac <Phys::allocateContiguousPages(int)+0x23>
c000fd9b:	e8 21 ff ff ff       	call   c000fcc1 <Phys::allocatePage()>
c000fda0:	83 ff 01             	cmp    edi,0x1
c000fda3:	89 c6                	mov    esi,eax
c000fda5:	74 21                	je     c000fdc8 <Phys::allocateContiguousPages(int)+0x3f>
c000fda7:	bb 01 00 00 00       	mov    ebx,0x1
c000fdac:	e8 10 ff ff ff       	call   c000fcc1 <Phys::allocatePage()>
c000fdb1:	89 da                	mov    edx,ebx
c000fdb3:	c1 e2 0c             	shl    edx,0xc
c000fdb6:	01 f2                	add    edx,esi
c000fdb8:	39 c2                	cmp    edx,eax
c000fdba:	74 17                	je     c000fdd3 <Phys::allocateContiguousPages(int)+0x4a>
c000fdbc:	bb 01 00 00 00       	mov    ebx,0x1
c000fdc1:	89 c6                	mov    esi,eax
c000fdc3:	83 ff 01             	cmp    edi,0x1
c000fdc6:	75 e4                	jne    c000fdac <Phys::allocateContiguousPages(int)+0x23>
c000fdc8:	e8 b9 d4 00 00       	call   c001d286 <unlockScheduler()>
c000fdcd:	89 f0                	mov    eax,esi
c000fdcf:	5b                   	pop    ebx
c000fdd0:	5e                   	pop    esi
c000fdd1:	5f                   	pop    edi
c000fdd2:	c3                   	ret    
c000fdd3:	43                   	inc    ebx
c000fdd4:	39 fb                	cmp    ebx,edi
c000fdd6:	75 bf                	jne    c000fd97 <Phys::allocateContiguousPages(int)+0xe>
c000fdd8:	e8 a9 d4 00 00       	call   c001d286 <unlockScheduler()>
c000fddd:	89 f0                	mov    eax,esi
c000fddf:	5b                   	pop    ebx
c000fde0:	5e                   	pop    esi
c000fde1:	5f                   	pop    edi
c000fde2:	c3                   	ret    

c000fde3 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000fde3:	56                   	push   esi
c000fde4:	53                   	push   ebx
c000fde5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fde9:	39 1d c4 d8 02 c0    	cmp    DWORD PTR ds:0xc002d8c4,ebx
c000fdef:	73 06                	jae    c000fdf7 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000fdf1:	89 1d c4 d8 02 c0    	mov    DWORD PTR ds:0xc002d8c4,ebx
c000fdf7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fdfb:	c1 eb 0c             	shr    ebx,0xc
c000fdfe:	c1 e8 0c             	shr    eax,0xc
c000fe01:	39 d8                	cmp    eax,ebx
c000fe03:	73 13                	jae    c000fe18 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000fe05:	6a 00                	push   0x0
c000fe07:	8d 70 01             	lea    esi,[eax+0x1]
c000fe0a:	50                   	push   eax
c000fe0b:	e8 d9 fd ff ff       	call   c000fbe9 <Phys::setPageState(unsigned long, bool)>
c000fe10:	5a                   	pop    edx
c000fe11:	89 f0                	mov    eax,esi
c000fe13:	59                   	pop    ecx
c000fe14:	39 f3                	cmp    ebx,esi
c000fe16:	75 ed                	jne    c000fe05 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000fe18:	5b                   	pop    ebx
c000fe19:	5e                   	pop    esi
c000fe1a:	c3                   	ret    

c000fe1b <Phys::physicalMemorySetup(unsigned int)>:
c000fe1b:	55                   	push   ebp
c000fe1c:	57                   	push   edi
c000fe1d:	56                   	push   esi
c000fe1e:	53                   	push   ebx
c000fe1f:	31 db                	xor    ebx,ebx
c000fe21:	83 ec 40             	sub    esp,0x40
c000fe24:	6a 30                	push   0x30
c000fe26:	6a 00                	push   0x0
c000fe28:	68 e0 d8 02 c0       	push   0xc002d8e0
c000fe2d:	e8 92 08 ff ff       	call   c00006c4 <memset>
c000fe32:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000fe36:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fe3b:	05 00 10 00 00       	add    eax,0x1000
c000fe40:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000fe44:	83 c4 10             	add    esp,0x10
c000fe47:	83 ec 08             	sub    esp,0x8
c000fe4a:	6a 01                	push   0x1
c000fe4c:	53                   	push   ebx
c000fe4d:	43                   	inc    ebx
c000fe4e:	e8 96 fd ff ff       	call   c000fbe9 <Phys::setPageState(unsigned long, bool)>
c000fe53:	83 c4 10             	add    esp,0x10
c000fe56:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fe5c:	75 e9                	jne    c000fe47 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000fe5e:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000fe65:	66 85 c0             	test   ax,ax
c000fe68:	0f 84 8e 01 00 00    	je     c000fffc <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c000fe6e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000fe72:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000fe7a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fe7e:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000fe83:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fe87:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000fe8f:	eb 15                	jmp    c000fea6 <Phys::physicalMemorySetup(unsigned int)+0x8b>
c000fe91:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000fe95:	83 c3 18             	add    ebx,0x18
c000fe98:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fe9c:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000fea0:	0f 84 66 01 00 00    	je     c001000c <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000fea6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000fea9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000feac:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000feaf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000feb3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000feb7:	8b 33                	mov    esi,DWORD PTR [ebx]
c000feb9:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000febc:	01 f0                	add    eax,esi
c000febe:	55                   	push   ebp
c000febf:	11 fa                	adc    edx,edi
c000fec1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fec5:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000fec9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fecd:	56                   	push   esi
c000fece:	68 88 98 02 c0       	push   0xc0029888
c000fed3:	e8 1b 2a 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c000fed8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fedc:	83 c4 10             	add    esp,0x10
c000fedf:	09 f8                	or     eax,edi
c000fee1:	0f 85 25 01 00 00    	jne    c001000c <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000fee7:	4d                   	dec    ebp
c000fee8:	75 a7                	jne    c000fe91 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000feea:	ba 00 00 08 00       	mov    edx,0x80000
c000feef:	89 c1                	mov    ecx,eax
c000fef1:	39 f2                	cmp    edx,esi
c000fef3:	19 f9                	sbb    ecx,edi
c000fef5:	0f 82 a7 00 00 00    	jb     c000ffa2 <Phys::physicalMemorySetup(unsigned int)+0x187>
c000fefb:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000feff:	89 c1                	mov    ecx,eax
c000ff01:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000ff05:	0f 83 97 00 00 00    	jae    c000ffa2 <Phys::physicalMemorySetup(unsigned int)+0x187>
c000ff0b:	ba 00 00 0a 00       	mov    edx,0xa0000
c000ff10:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000ff14:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000ff18:	39 fa                	cmp    edx,edi
c000ff1a:	19 e8                	sbb    eax,ebp
c000ff1c:	0f 82 14 01 00 00    	jb     c0010036 <Phys::physicalMemorySetup(unsigned int)+0x21b>
c000ff22:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000ff26:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000ff2a:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000ff30:	ba ff 1f 00 00       	mov    edx,0x1fff
c000ff35:	83 d5 ff             	adc    ebp,0xffffffff
c000ff38:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000ff3c:	31 c0                	xor    eax,eax
c000ff3e:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000ff42:	39 fa                	cmp    edx,edi
c000ff44:	89 c1                	mov    ecx,eax
c000ff46:	19 e9                	sbb    ecx,ebp
c000ff48:	0f 83 43 ff ff ff    	jae    c000fe91 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000ff4e:	be 00 00 08 00       	mov    esi,0x80000
c000ff53:	50                   	push   eax
c000ff54:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000ff58:	57                   	push   edi
c000ff59:	56                   	push   esi
c000ff5a:	68 ac 98 02 c0       	push   0xc00298ac
c000ff5f:	e8 8f 29 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c000ff64:	5a                   	pop    edx
c000ff65:	59                   	pop    ecx
c000ff66:	57                   	push   edi
c000ff67:	56                   	push   esi
c000ff68:	e8 76 fe ff ff       	call   c000fde3 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000ff6d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ff71:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ff75:	83 c4 0c             	add    esp,0xc
c000ff78:	0f ac d0 0c          	shrd   eax,edx,0xc
c000ff7c:	03 05 d0 d8 02 c0    	add    eax,DWORD PTR ds:0xc002d8d0
c000ff82:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000ff89:	a3 d0 d8 02 c0       	mov    ds:0xc002d8d0,eax
c000ff8e:	52                   	push   edx
c000ff8f:	50                   	push   eax
c000ff90:	68 69 98 02 c0       	push   0xc0029869
c000ff95:	e8 59 29 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c000ff9a:	83 c4 10             	add    esp,0x10
c000ff9d:	e9 ef fe ff ff       	jmp    c000fe91 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000ffa2:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000ffa6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ffaa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ffae:	39 ea                	cmp    edx,ebp
c000ffb0:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000ffb4:	0f 82 d7 fe ff ff    	jb     c000fe91 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000ffba:	ba ff 1f 00 00       	mov    edx,0x1fff
c000ffbf:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000ffc3:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000ffc7:	0f 83 c4 fe ff ff    	jae    c000fe91 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000ffcd:	39 ee                	cmp    esi,ebp
c000ffcf:	89 f8                	mov    eax,edi
c000ffd1:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000ffd5:	0f 83 78 ff ff ff    	jae    c000ff53 <Phys::physicalMemorySetup(unsigned int)+0x138>
c000ffdb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ffdf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ffe3:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000ffe7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000ffeb:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000ffef:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fff3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fff7:	e9 57 ff ff ff       	jmp    c000ff53 <Phys::physicalMemorySetup(unsigned int)+0x138>
c000fffc:	83 ec 0c             	sub    esp,0xc
c000ffff:	68 5b 98 02 c0       	push   0xc002985b
c0010004:	e8 44 9c 00 00       	call   c0019c4d <Krnl::panic(char const*)>
c0010009:	83 c4 10             	add    esp,0x10
c001000c:	bb 40 01 00 00       	mov    ebx,0x140
c0010011:	83 ec 08             	sub    esp,0x8
c0010014:	6a 00                	push   0x0
c0010016:	53                   	push   ebx
c0010017:	43                   	inc    ebx
c0010018:	e8 cc fb ff ff       	call   c000fbe9 <Phys::setPageState(unsigned long, bool)>
c001001d:	ff 05 d0 d8 02 c0    	inc    DWORD PTR ds:0xc002d8d0
c0010023:	83 c4 10             	add    esp,0x10
c0010026:	81 fb 80 01 00 00    	cmp    ebx,0x180
c001002c:	75 e3                	jne    c0010011 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c001002e:	83 c4 3c             	add    esp,0x3c
c0010031:	5b                   	pop    ebx
c0010032:	5e                   	pop    esi
c0010033:	5f                   	pop    edi
c0010034:	5d                   	pop    ebp
c0010035:	c3                   	ret    
c0010036:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c001003e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010046:	e9 d7 fe ff ff       	jmp    c000ff22 <Phys::physicalMemorySetup(unsigned int)+0x107>
c001004b:	90                   	nop

c001004c <Pipe::isAtty()>:
c001004c:	31 c0                	xor    eax,eax
c001004e:	c3                   	ret    
c001004f:	90                   	nop

c0010050 <Pipe::~Pipe()>:
c0010050:	83 ec 0c             	sub    esp,0xc
c0010053:	ba 18 99 02 c0       	mov    edx,0xc0029918
c0010058:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001005c:	89 10                	mov    DWORD PTR [eax],edx
c001005e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010062:	83 ec 0c             	sub    esp,0xc
c0010065:	50                   	push   eax
c0010066:	e8 37 16 00 00       	call   c00116a2 <UnixFile::~UnixFile()>
c001006b:	83 c4 10             	add    esp,0x10
c001006e:	90                   	nop
c001006f:	83 c4 0c             	add    esp,0xc
c0010072:	c3                   	ret    
c0010073:	90                   	nop

c0010074 <Pipe::~Pipe()>:
c0010074:	83 ec 0c             	sub    esp,0xc
c0010077:	83 ec 0c             	sub    esp,0xc
c001007a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001007e:	e8 cd ff ff ff       	call   c0010050 <Pipe::~Pipe()>
c0010083:	83 c4 10             	add    esp,0x10
c0010086:	83 ec 08             	sub    esp,0x8
c0010089:	6a 20                	push   0x20
c001008b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001008f:	e8 7f 27 00 00       	call   c0012813 <operator delete(void*, unsigned long)>
c0010094:	83 c4 10             	add    esp,0x10
c0010097:	83 c4 0c             	add    esp,0xc
c001009a:	c3                   	ret    
c001009b:	90                   	nop

c001009c <Pipe::read(unsigned long long, void*, int*)>:
c001009c:	55                   	push   ebp
c001009d:	57                   	push   edi
c001009e:	56                   	push   esi
c001009f:	53                   	push   ebx
c00100a0:	83 ec 1c             	sub    esp,0x1c
c00100a3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00100a7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00100ab:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00100af:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00100b2:	89 c8                	mov    eax,ecx
c00100b4:	99                   	cdq    
c00100b5:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c00100b9:	74 19                	je     c00100d4 <Pipe::read(unsigned long long, void*, int*)+0x38>
c00100bb:	39 f9                	cmp    ecx,edi
c00100bd:	89 d1                	mov    ecx,edx
c00100bf:	19 f1                	sbb    ecx,esi
c00100c1:	73 11                	jae    c00100d4 <Pipe::read(unsigned long long, void*, int*)+0x38>
c00100c3:	e8 bc d1 00 00       	call   c001d284 <lockScheduler()>
c00100c8:	e8 f3 d4 00 00       	call   c001d5c0 <schedule()>
c00100cd:	e8 b4 d1 00 00       	call   c001d286 <unlockScheduler()>
c00100d2:	eb db                	jmp    c00100af <Pipe::read(unsigned long long, void*, int*)+0x13>
c00100d4:	39 f8                	cmp    eax,edi
c00100d6:	89 d1                	mov    ecx,edx
c00100d8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00100dc:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00100e0:	19 f1                	sbb    ecx,esi
c00100e2:	73 08                	jae    c00100ec <Pipe::read(unsigned long long, void*, int*)+0x50>
c00100e4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00100e8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00100ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00100ef:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00100f2:	29 c6                	sub    esi,eax
c00100f4:	89 f1                	mov    ecx,esi
c00100f6:	c1 f9 1f             	sar    ecx,0x1f
c00100f9:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c00100fd:	89 ca                	mov    edx,ecx
c00100ff:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010103:	19 d1                	sbb    ecx,edx
c0010105:	73 04                	jae    c001010b <Pipe::read(unsigned long long, void*, int*)+0x6f>
c0010107:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c001010b:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001010f:	89 fd                	mov    ebp,edi
c0010111:	29 f5                	sub    ebp,esi
c0010113:	85 f6                	test   esi,esi
c0010115:	74 12                	je     c0010129 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c0010117:	52                   	push   edx
c0010118:	56                   	push   esi
c0010119:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c001011c:	50                   	push   eax
c001011d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0010121:	e8 7a 05 ff ff       	call   c00006a0 <memcpy>
c0010126:	83 c4 10             	add    esp,0x10
c0010129:	85 ed                	test   ebp,ebp
c001012b:	74 12                	je     c001013f <Pipe::read(unsigned long long, void*, int*)+0xa3>
c001012d:	50                   	push   eax
c001012e:	55                   	push   ebp
c001012f:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0010132:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c0010136:	56                   	push   esi
c0010137:	e8 64 05 ff ff       	call   c00006a0 <memcpy>
c001013c:	83 c4 10             	add    esp,0x10
c001013f:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c0010142:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010145:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0010148:	99                   	cdq    
c0010149:	89 f7                	mov    edi,esi
c001014b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001014f:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0010153:	c1 ff 1f             	sar    edi,0x1f
c0010156:	57                   	push   edi
c0010157:	56                   	push   esi
c0010158:	52                   	push   edx
c0010159:	50                   	push   eax
c001015a:	e8 ed 5e 01 00       	call   c002604c <__umoddi3>
c001015f:	83 c4 10             	add    esp,0x10
c0010162:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0010165:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c001016a:	75 10                	jne    c001017c <Pipe::read(unsigned long long, void*, int*)+0xe0>
c001016c:	83 ec 0c             	sub    esp,0xc
c001016f:	68 d5 98 02 c0       	push   0xc00298d5
c0010174:	e8 d4 9a 00 00       	call   c0019c4d <Krnl::panic(char const*)>
c0010179:	83 c4 10             	add    esp,0x10
c001017c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010180:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010184:	89 10                	mov    DWORD PTR [eax],edx
c0010186:	83 c4 1c             	add    esp,0x1c
c0010189:	31 c0                	xor    eax,eax
c001018b:	5b                   	pop    ebx
c001018c:	5e                   	pop    esi
c001018d:	5f                   	pop    edi
c001018e:	5d                   	pop    ebp
c001018f:	c3                   	ret    

c0010190 <Pipe::write(unsigned long long, void*, int*)>:
c0010190:	55                   	push   ebp
c0010191:	57                   	push   edi
c0010192:	56                   	push   esi
c0010193:	53                   	push   ebx
c0010194:	83 ec 1c             	sub    esp,0x1c
c0010197:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001019b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001019f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00101a3:	89 04 24             	mov    DWORD PTR [esp],eax
c00101a6:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c00101a9:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c00101ac:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00101b0:	89 de                	mov    esi,ebx
c00101b2:	89 df                	mov    edi,ebx
c00101b4:	c1 ff 1f             	sar    edi,0x1f
c00101b7:	01 c6                	add    esi,eax
c00101b9:	89 c8                	mov    eax,ecx
c00101bb:	11 d7                	adc    edi,edx
c00101bd:	99                   	cdq    
c00101be:	39 f1                	cmp    ecx,esi
c00101c0:	89 d0                	mov    eax,edx
c00101c2:	19 f8                	sbb    eax,edi
c00101c4:	b8 01 00 00 00       	mov    eax,0x1
c00101c9:	0f 82 80 00 00 00    	jb     c001024f <Pipe::write(unsigned long long, void*, int*)+0xbf>
c00101cf:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00101d2:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00101d5:	01 d8                	add    eax,ebx
c00101d7:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00101db:	99                   	cdq    
c00101dc:	f7 f9                	idiv   ecx
c00101de:	29 d1                	sub    ecx,edx
c00101e0:	89 d7                	mov    edi,edx
c00101e2:	89 c8                	mov    eax,ecx
c00101e4:	99                   	cdq    
c00101e5:	39 ce                	cmp    esi,ecx
c00101e7:	19 d3                	sbb    ebx,edx
c00101e9:	bb 00 00 00 00       	mov    ebx,0x0
c00101ee:	72 04                	jb     c00101f4 <Pipe::write(unsigned long long, void*, int*)+0x64>
c00101f0:	89 f3                	mov    ebx,esi
c00101f2:	29 cb                	sub    ebx,ecx
c00101f4:	89 f1                	mov    ecx,esi
c00101f6:	29 d9                	sub    ecx,ebx
c00101f8:	74 1a                	je     c0010214 <Pipe::write(unsigned long long, void*, int*)+0x84>
c00101fa:	52                   	push   edx
c00101fb:	51                   	push   ecx
c00101fc:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010200:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0010204:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0010207:	57                   	push   edi
c0010208:	e8 93 04 ff ff       	call   c00006a0 <memcpy>
c001020d:	83 c4 10             	add    esp,0x10
c0010210:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010214:	85 db                	test   ebx,ebx
c0010216:	74 12                	je     c001022a <Pipe::write(unsigned long long, void*, int*)+0x9a>
c0010218:	50                   	push   eax
c0010219:	53                   	push   ebx
c001021a:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c001021e:	51                   	push   ecx
c001021f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0010222:	e8 79 04 ff ff       	call   c00006a0 <memcpy>
c0010227:	83 c4 10             	add    esp,0x10
c001022a:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c001022d:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010232:	75 10                	jne    c0010244 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c0010234:	83 ec 0c             	sub    esp,0xc
c0010237:	68 f1 98 02 c0       	push   0xc00298f1
c001023c:	e8 0c 9a 00 00       	call   c0019c4d <Krnl::panic(char const*)>
c0010241:	83 c4 10             	add    esp,0x10
c0010244:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010248:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001024b:	89 38                	mov    DWORD PTR [eax],edi
c001024d:	31 c0                	xor    eax,eax
c001024f:	83 c4 1c             	add    esp,0x1c
c0010252:	5b                   	pop    ebx
c0010253:	5e                   	pop    esi
c0010254:	5f                   	pop    edi
c0010255:	5d                   	pop    ebp
c0010256:	c3                   	ret    
c0010257:	90                   	nop

c0010258 <Pipe::Pipe(int)>:
c0010258:	83 ec 0c             	sub    esp,0xc
c001025b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001025f:	83 ec 08             	sub    esp,0x8
c0010262:	6a 00                	push   0x0
c0010264:	50                   	push   eax
c0010265:	e8 56 12 00 00       	call   c00114c0 <UnixFile::UnixFile(int)>
c001026a:	83 c4 10             	add    esp,0x10
c001026d:	ba 18 99 02 c0       	mov    edx,0xc0029918
c0010272:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010276:	89 10                	mov    DWORD PTR [eax],edx
c0010278:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001027c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010280:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0010283:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010287:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c001028e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010292:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0010299:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001029d:	83 ec 0c             	sub    esp,0xc
c00102a0:	50                   	push   eax
c00102a1:	e8 7e f3 ff ff       	call   c000f624 <malloc>
c00102a6:	83 c4 10             	add    esp,0x10
c00102a9:	89 c2                	mov    edx,eax
c00102ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102af:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00102b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102b6:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00102ba:	90                   	nop
c00102bb:	83 c4 0c             	add    esp,0xc
c00102be:	c3                   	ret    
c00102bf:	90                   	nop

c00102c0 <VgaText::isAtty()>:
c00102c0:	b0 01                	mov    al,0x1
c00102c2:	c3                   	ret    
c00102c3:	90                   	nop

c00102c4 <VgaText::~VgaText()>:
c00102c4:	83 ec 0c             	sub    esp,0xc
c00102c7:	ba d4 99 02 c0       	mov    edx,0xc00299d4
c00102cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102d0:	89 10                	mov    DWORD PTR [eax],edx
c00102d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102d6:	83 ec 0c             	sub    esp,0xc
c00102d9:	50                   	push   eax
c00102da:	e8 c3 13 00 00       	call   c00116a2 <UnixFile::~UnixFile()>
c00102df:	83 c4 10             	add    esp,0x10
c00102e2:	90                   	nop
c00102e3:	83 c4 0c             	add    esp,0xc
c00102e6:	c3                   	ret    
c00102e7:	90                   	nop

c00102e8 <VgaText::~VgaText()>:
c00102e8:	83 ec 0c             	sub    esp,0xc
c00102eb:	83 ec 0c             	sub    esp,0xc
c00102ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102f2:	e8 cd ff ff ff       	call   c00102c4 <VgaText::~VgaText()>
c00102f7:	83 c4 10             	add    esp,0x10
c00102fa:	83 ec 08             	sub    esp,0x8
c00102fd:	68 60 12 00 00       	push   0x1260
c0010302:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010306:	e8 08 25 00 00       	call   c0012813 <operator delete(void*, unsigned long)>
c001030b:	83 c4 10             	add    esp,0x10
c001030e:	83 c4 0c             	add    esp,0xc
c0010311:	c3                   	ret    

c0010312 <VgaText::read(unsigned long long, void*, int*)>:
c0010312:	83 ec 10             	sub    esp,0x10
c0010315:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010319:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001031d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010321:	e8 dd 58 00 00       	call   c0015c03 <readKeyboard(VgaText*, char*, unsigned long)>
c0010326:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001032a:	89 02                	mov    DWORD PTR [edx],eax
c001032c:	31 c0                	xor    eax,eax
c001032e:	83 c4 1c             	add    esp,0x1c
c0010331:	c3                   	ret    

c0010332 <setTerminalScrollLock(bool)>:
c0010332:	c3                   	ret    

c0010333 <addToTerminalCycle(VgaText*)>:
c0010333:	8b 15 60 d9 02 c0    	mov    edx,DWORD PTR ds:0xc002d960
c0010339:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001033d:	85 d2                	test   edx,edx
c001033f:	75 0c                	jne    c001034d <addToTerminalCycle(VgaText*)+0x1a>
c0010341:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c0010347:	a3 60 d9 02 c0       	mov    ds:0xc002d960,eax
c001034c:	c3                   	ret    
c001034d:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c0010353:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c0010359:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c001035f:	c3                   	ret    

c0010360 <installVgaTextImplementation()>:
c0010360:	83 ec 10             	sub    esp,0x10
c0010363:	6a 20                	push   0x20
c0010365:	6a 00                	push   0x0
c0010367:	68 40 d9 02 c0       	push   0xc002d940
c001036c:	e8 53 03 ff ff       	call   c00006c4 <memset>
c0010371:	83 c4 1c             	add    esp,0x1c
c0010374:	c3                   	ret    

c0010375 <scrollTerminalScrollLock(int)>:
c0010375:	c3                   	ret    

c0010376 <VgaText::load()>:
c0010376:	53                   	push   ebx
c0010377:	31 c0                	xor    eax,eax
c0010379:	83 ec 58             	sub    esp,0x58
c001037c:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0010380:	89 e2                	mov    edx,esp
c0010382:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c0010386:	40                   	inc    eax
c0010387:	83 f8 50             	cmp    eax,0x50
c001038a:	75 f6                	jne    c0010382 <VgaText::load()+0xc>
c001038c:	31 c0                	xor    eax,eax
c001038e:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c0010395:	84 c9                	test   cl,cl
c0010397:	74 06                	je     c001039f <VgaText::load()+0x29>
c0010399:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c001039c:	40                   	inc    eax
c001039d:	eb ef                	jmp    c001038e <VgaText::load()+0x18>
c001039f:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c00103a5:	85 c0                	test   eax,eax
c00103a7:	74 09                	je     c00103b2 <VgaText::load()+0x3c>
c00103a9:	51                   	push   ecx
c00103aa:	51                   	push   ecx
c00103ab:	52                   	push   edx
c00103ac:	53                   	push   ebx
c00103ad:	ff d0                	call   eax
c00103af:	83 c4 10             	add    esp,0x10
c00103b2:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c00103b8:	85 c0                	test   eax,eax
c00103ba:	74 09                	je     c00103c5 <VgaText::load()+0x4f>
c00103bc:	83 ec 0c             	sub    esp,0xc
c00103bf:	53                   	push   ebx
c00103c0:	ff d0                	call   eax
c00103c2:	83 c4 10             	add    esp,0x10
c00103c5:	83 c4 58             	add    esp,0x58
c00103c8:	5b                   	pop    ebx
c00103c9:	c3                   	ret    

c00103ca <VgaText::updateCursor()>:
c00103ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103ce:	39 05 64 d9 02 c0    	cmp    DWORD PTR ds:0xc002d964,eax
c00103d4:	75 0c                	jne    c00103e2 <VgaText::updateCursor()+0x18>
c00103d6:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c00103dc:	85 c0                	test   eax,eax
c00103de:	74 02                	je     c00103e2 <VgaText::updateCursor()+0x18>
c00103e0:	ff e0                	jmp    eax
c00103e2:	c3                   	ret    
c00103e3:	90                   	nop

c00103e4 <VgaText::showCursor(bool)>:
c00103e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103e8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00103ec:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c00103f2:	c3                   	ret    
c00103f3:	90                   	nop

c00103f4 <VgaText::disableBlink(bool)>:
c00103f4:	56                   	push   esi
c00103f5:	53                   	push   ebx
c00103f6:	51                   	push   ecx
c00103f7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00103fb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00103ff:	39 1d 64 d9 02 c0    	cmp    DWORD PTR ds:0xc002d964,ebx
c0010405:	75 18                	jne    c001041f <VgaText::disableBlink(bool)+0x2b>
c0010407:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c001040d:	85 c0                	test   eax,eax
c001040f:	74 0e                	je     c001041f <VgaText::disableBlink(bool)+0x2b>
c0010411:	89 f1                	mov    ecx,esi
c0010413:	52                   	push   edx
c0010414:	52                   	push   edx
c0010415:	0f b6 d1             	movzx  edx,cl
c0010418:	52                   	push   edx
c0010419:	53                   	push   ebx
c001041a:	ff d0                	call   eax
c001041c:	83 c4 10             	add    esp,0x10
c001041f:	89 f0                	mov    eax,esi
c0010421:	83 f0 01             	xor    eax,0x1
c0010424:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c001042a:	58                   	pop    eax
c001042b:	5b                   	pop    ebx
c001042c:	5e                   	pop    esi
c001042d:	c3                   	ret    

c001042e <VgaText::doANSI_SGR(int)>:
c001042e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010432:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010436:	85 d2                	test   edx,edx
c0010438:	75 14                	jne    c001044e <VgaText::doANSI_SGR(int)+0x20>
c001043a:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c0010440:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010446:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c001044c:	eb 65                	jmp    c00104b3 <VgaText::doANSI_SGR(int)+0x85>
c001044e:	83 fa 07             	cmp    edx,0x7
c0010451:	75 14                	jne    c0010467 <VgaText::doANSI_SGR(int)+0x39>
c0010453:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c0010459:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c001045f:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c0010465:	eb 4c                	jmp    c00104b3 <VgaText::doANSI_SGR(int)+0x85>
c0010467:	83 fa 1b             	cmp    edx,0x1b
c001046a:	74 ce                	je     c001043a <VgaText::doANSI_SGR(int)+0xc>
c001046c:	8d 4a e2             	lea    ecx,[edx-0x1e]
c001046f:	83 f9 07             	cmp    ecx,0x7
c0010472:	77 09                	ja     c001047d <VgaText::doANSI_SGR(int)+0x4f>
c0010474:	8b 14 8d e0 c7 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd3820]
c001047b:	eb 20                	jmp    c001049d <VgaText::doANSI_SGR(int)+0x6f>
c001047d:	8d 4a d8             	lea    ecx,[edx-0x28]
c0010480:	83 f9 07             	cmp    ecx,0x7
c0010483:	77 09                	ja     c001048e <VgaText::doANSI_SGR(int)+0x60>
c0010485:	8b 14 8d e0 c7 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd3820]
c001048c:	eb 25                	jmp    c00104b3 <VgaText::doANSI_SGR(int)+0x85>
c001048e:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0010491:	83 f9 07             	cmp    ecx,0x7
c0010494:	77 0e                	ja     c00104a4 <VgaText::doANSI_SGR(int)+0x76>
c0010496:	8b 14 95 98 c6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3968]
c001049d:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00104a3:	c3                   	ret    
c00104a4:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00104a7:	83 f9 07             	cmp    ecx,0x7
c00104aa:	77 0d                	ja     c00104b9 <VgaText::doANSI_SGR(int)+0x8b>
c00104ac:	8b 14 95 70 c6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3990]
c00104b3:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c00104b9:	c3                   	ret    

c00104ba <VgaText::setDefaultBgColour(VgaColour)>:
c00104ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00104c2:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c00104c8:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c00104ce:	c3                   	ret    
c00104cf:	90                   	nop

c00104d0 <VgaText::setDefaultFgColour(VgaColour)>:
c00104d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104d4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00104d8:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c00104de:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00104e4:	c3                   	ret    
c00104e5:	90                   	nop

c00104e6 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00104e6:	53                   	push   ebx
c00104e7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00104eb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00104ef:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00104f3:	51                   	push   ecx
c00104f4:	e8 c1 ff ff ff       	call   c00104ba <VgaText::setDefaultBgColour(VgaColour)>
c00104f9:	58                   	pop    eax
c00104fa:	5a                   	pop    edx
c00104fb:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00104ff:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010503:	5b                   	pop    ebx
c0010504:	eb ca                	jmp    c00104d0 <VgaText::setDefaultFgColour(VgaColour)>

c0010506 <VgaText::combineColours(unsigned char, unsigned char)>:
c0010506:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001050a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001050f:	83 e0 0f             	and    eax,0xf
c0010512:	c1 e2 04             	shl    edx,0x4
c0010515:	09 d0                	or     eax,edx
c0010517:	c3                   	ret    

c0010518 <VgaText::scrollScreen()>:
c0010518:	57                   	push   edi
c0010519:	56                   	push   esi
c001051a:	be 01 00 00 00       	mov    esi,0x1
c001051f:	53                   	push   ebx
c0010520:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010524:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c001052a:	31 ff                	xor    edi,edi
c001052c:	01 d9                	add    ecx,ebx
c001052e:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c0010531:	83 fe 17             	cmp    esi,0x17
c0010534:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c001053a:	75 28                	jne    c0010564 <VgaText::scrollScreen()+0x4c>
c001053c:	f7 c7 01 00 00 00    	test   edi,0x1
c0010542:	74 1c                	je     c0010560 <VgaText::scrollScreen()+0x48>
c0010544:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c001054b:	50                   	push   eax
c001054c:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c0010553:	50                   	push   eax
c0010554:	e8 ad ff ff ff       	call   c0010506 <VgaText::combineColours(unsigned char, unsigned char)>
c0010559:	5a                   	pop    edx
c001055a:	5a                   	pop    edx
c001055b:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c001055e:	eb 04                	jmp    c0010564 <VgaText::scrollScreen()+0x4c>
c0010560:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c0010564:	47                   	inc    edi
c0010565:	41                   	inc    ecx
c0010566:	81 ff a0 00 00 00    	cmp    edi,0xa0
c001056c:	75 c0                	jne    c001052e <VgaText::scrollScreen()+0x16>
c001056e:	46                   	inc    esi
c001056f:	83 fe 18             	cmp    esi,0x18
c0010572:	75 b0                	jne    c0010524 <VgaText::scrollScreen()+0xc>
c0010574:	39 1d 64 d9 02 c0    	cmp    DWORD PTR ds:0xc002d964,ebx
c001057a:	75 24                	jne    c00105a0 <VgaText::scrollScreen()+0x88>
c001057c:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010583:	74 08                	je     c001058d <VgaText::scrollScreen()+0x75>
c0010585:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c001058b:	eb 13                	jmp    c00105a0 <VgaText::scrollScreen()+0x88>
c001058d:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c0010593:	85 c0                	test   eax,eax
c0010595:	74 09                	je     c00105a0 <VgaText::scrollScreen()+0x88>
c0010597:	83 ec 0c             	sub    esp,0xc
c001059a:	53                   	push   ebx
c001059b:	ff d0                	call   eax
c001059d:	83 c4 10             	add    esp,0x10
c00105a0:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00105a4:	5b                   	pop    ebx
c00105a5:	5e                   	pop    esi
c00105a6:	5f                   	pop    edi
c00105a7:	e9 1e fe ff ff       	jmp    c00103ca <VgaText::updateCursor()>

c00105ac <VgaText::combineCharAndColour(char, unsigned char)>:
c00105ac:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00105b1:	c1 e0 08             	shl    eax,0x8
c00105b4:	89 c2                	mov    edx,eax
c00105b6:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00105bb:	09 d0                	or     eax,edx
c00105bd:	c3                   	ret    

c00105be <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00105be:	53                   	push   ebx
c00105bf:	83 ec 08             	sub    esp,0x8
c00105c2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00105c6:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00105cb:	50                   	push   eax
c00105cc:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00105d1:	50                   	push   eax
c00105d2:	e8 2f ff ff ff       	call   c0010506 <VgaText::combineColours(unsigned char, unsigned char)>
c00105d7:	5a                   	pop    edx
c00105d8:	0f b6 c0             	movzx  eax,al
c00105db:	5b                   	pop    ebx
c00105dc:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c00105e1:	50                   	push   eax
c00105e2:	53                   	push   ebx
c00105e3:	e8 c4 ff ff ff       	call   c00105ac <VgaText::combineCharAndColour(char, unsigned char)>
c00105e8:	5a                   	pop    edx
c00105e9:	5a                   	pop    edx
c00105ea:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c00105f0:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c00105f4:	0f b7 d2             	movzx  edx,dx
c00105f7:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c00105fc:	39 0d 64 d9 02 c0    	cmp    DWORD PTR ds:0xc002d964,ecx
c0010602:	75 14                	jne    c0010618 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c0010604:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c001060a:	85 c0                	test   eax,eax
c001060c:	74 0a                	je     c0010618 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c001060e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010612:	83 c4 08             	add    esp,0x8
c0010615:	5b                   	pop    ebx
c0010616:	ff e0                	jmp    eax
c0010618:	83 c4 08             	add    esp,0x8
c001061b:	5b                   	pop    ebx
c001061c:	c3                   	ret    
c001061d:	90                   	nop

c001061e <VgaText::getCursorX()>:
c001061e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010622:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c0010628:	c3                   	ret    
c0010629:	90                   	nop

c001062a <VgaText::getCursorY()>:
c001062a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001062e:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c0010634:	c3                   	ret    
c0010635:	90                   	nop

c0010636 <VgaText::setCursor(int, int)>:
c0010636:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001063a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001063e:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c0010644:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010648:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c001064e:	e9 77 fd ff ff       	jmp    c00103ca <VgaText::updateCursor()>
c0010653:	90                   	nop

c0010654 <VgaText::setCursorX(int)>:
c0010654:	83 ec 10             	sub    esp,0x10
c0010657:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001065b:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c0010661:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010665:	50                   	push   eax
c0010666:	e8 cb ff ff ff       	call   c0010636 <VgaText::setCursor(int, int)>
c001066b:	83 c4 1c             	add    esp,0x1c
c001066e:	c3                   	ret    
c001066f:	90                   	nop

c0010670 <VgaText::setCursorY(int)>:
c0010670:	83 ec 10             	sub    esp,0x10
c0010673:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010677:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001067b:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c0010681:	50                   	push   eax
c0010682:	e8 af ff ff ff       	call   c0010636 <VgaText::setCursor(int, int)>
c0010687:	83 c4 1c             	add    esp,0x1c
c001068a:	c3                   	ret    
c001068b:	90                   	nop

c001068c <VgaText::incrementCursor(bool)>:
c001068c:	56                   	push   esi
c001068d:	53                   	push   ebx
c001068e:	51                   	push   ecx
c001068f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010693:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010697:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c001069d:	40                   	inc    eax
c001069e:	83 f8 50             	cmp    eax,0x50
c00106a1:	74 08                	je     c00106ab <VgaText::incrementCursor(bool)+0x1f>
c00106a3:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c00106a9:	eb 33                	jmp    c00106de <VgaText::incrementCursor(bool)+0x52>
c00106ab:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c00106b1:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c00106bb:	8d 50 01             	lea    edx,[eax+0x1]
c00106be:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c00106c4:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c00106ca:	75 12                	jne    c00106de <VgaText::incrementCursor(bool)+0x52>
c00106cc:	83 ec 0c             	sub    esp,0xc
c00106cf:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c00106d5:	53                   	push   ebx
c00106d6:	e8 3d fe ff ff       	call   c0010518 <VgaText::scrollScreen()>
c00106db:	83 c4 10             	add    esp,0x10
c00106de:	89 f0                	mov    eax,esi
c00106e0:	84 c0                	test   al,al
c00106e2:	74 0c                	je     c00106f0 <VgaText::incrementCursor(bool)+0x64>
c00106e4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00106e8:	5a                   	pop    edx
c00106e9:	5b                   	pop    ebx
c00106ea:	5e                   	pop    esi
c00106eb:	e9 da fc ff ff       	jmp    c00103ca <VgaText::updateCursor()>
c00106f0:	58                   	pop    eax
c00106f1:	5b                   	pop    ebx
c00106f2:	5e                   	pop    esi
c00106f3:	c3                   	ret    

c00106f4 <VgaText::updateRAMUsageDisplay(int)>:
c00106f4:	56                   	push   esi
c00106f5:	8b 35 c0 c7 02 c0    	mov    esi,DWORD PTR ds:0xc002c7c0
c00106fb:	53                   	push   ebx
c00106fc:	bb 0a 00 00 00       	mov    ebx,0xa
c0010701:	6a 0f                	push   0xf
c0010703:	6a 00                	push   0x0
c0010705:	e8 fc fd ff ff       	call   c0010506 <VgaText::combineColours(unsigned char, unsigned char)>
c001070a:	5a                   	pop    edx
c001070b:	59                   	pop    ecx
c001070c:	0f b6 c8             	movzx  ecx,al
c001070f:	51                   	push   ecx
c0010710:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010714:	99                   	cdq    
c0010715:	f7 fb                	idiv   ebx
c0010717:	89 d3                	mov    ebx,edx
c0010719:	83 c0 30             	add    eax,0x30
c001071c:	83 c3 30             	add    ebx,0x30
c001071f:	0f be c0             	movsx  eax,al
c0010722:	0f b6 db             	movzx  ebx,bl
c0010725:	50                   	push   eax
c0010726:	e8 81 fe ff ff       	call   c00105ac <VgaText::combineCharAndColour(char, unsigned char)>
c001072b:	5a                   	pop    edx
c001072c:	5a                   	pop    edx
c001072d:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c0010734:	51                   	push   ecx
c0010735:	53                   	push   ebx
c0010736:	e8 71 fe ff ff       	call   c00105ac <VgaText::combineCharAndColour(char, unsigned char)>
c001073b:	5b                   	pop    ebx
c001073c:	5a                   	pop    edx
c001073d:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c0010744:	51                   	push   ecx
c0010745:	6a 25                	push   0x25
c0010747:	e8 60 fe ff ff       	call   c00105ac <VgaText::combineCharAndColour(char, unsigned char)>
c001074c:	59                   	pop    ecx
c001074d:	5b                   	pop    ebx
c001074e:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c0010755:	5b                   	pop    ebx
c0010756:	5e                   	pop    esi
c0010757:	c3                   	ret    

c0010758 <VgaText::updateDiskUsage()>:
c0010758:	55                   	push   ebp
c0010759:	bd 10 27 00 00       	mov    ebp,0x2710
c001075e:	57                   	push   edi
c001075f:	8b 3d c0 c7 02 c0    	mov    edi,DWORD PTR ds:0xc002c7c0
c0010765:	56                   	push   esi
c0010766:	53                   	push   ebx
c0010767:	6a 0f                	push   0xf
c0010769:	6a 00                	push   0x0
c001076b:	e8 96 fd ff ff       	call   c0010506 <VgaText::combineColours(unsigned char, unsigned char)>
c0010770:	5a                   	pop    edx
c0010771:	0f b6 d8             	movzx  ebx,al
c0010774:	59                   	pop    ecx
c0010775:	8b 35 c8 fb 02 c0    	mov    esi,DWORD PTR ds:0xc002fbc8
c001077b:	53                   	push   ebx
c001077c:	b9 0a 00 00 00       	mov    ecx,0xa
c0010781:	89 f0                	mov    eax,esi
c0010783:	99                   	cdq    
c0010784:	f7 fd                	idiv   ebp
c0010786:	99                   	cdq    
c0010787:	f7 f9                	idiv   ecx
c0010789:	8d 42 30             	lea    eax,[edx+0x30]
c001078c:	0f b6 c0             	movzx  eax,al
c001078f:	50                   	push   eax
c0010790:	e8 17 fe ff ff       	call   c00105ac <VgaText::combineCharAndColour(char, unsigned char)>
c0010795:	5d                   	pop    ebp
c0010796:	bd e8 03 00 00       	mov    ebp,0x3e8
c001079b:	5a                   	pop    edx
c001079c:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c00107a0:	53                   	push   ebx
c00107a1:	89 f0                	mov    eax,esi
c00107a3:	99                   	cdq    
c00107a4:	f7 fd                	idiv   ebp
c00107a6:	99                   	cdq    
c00107a7:	f7 f9                	idiv   ecx
c00107a9:	8d 42 30             	lea    eax,[edx+0x30]
c00107ac:	0f b6 c0             	movzx  eax,al
c00107af:	50                   	push   eax
c00107b0:	e8 f7 fd ff ff       	call   c00105ac <VgaText::combineCharAndColour(char, unsigned char)>
c00107b5:	5d                   	pop    ebp
c00107b6:	bd 64 00 00 00       	mov    ebp,0x64
c00107bb:	5a                   	pop    edx
c00107bc:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c00107c3:	53                   	push   ebx
c00107c4:	89 f0                	mov    eax,esi
c00107c6:	99                   	cdq    
c00107c7:	f7 fd                	idiv   ebp
c00107c9:	99                   	cdq    
c00107ca:	f7 f9                	idiv   ecx
c00107cc:	8d 42 30             	lea    eax,[edx+0x30]
c00107cf:	0f b6 c0             	movzx  eax,al
c00107d2:	50                   	push   eax
c00107d3:	e8 d4 fd ff ff       	call   c00105ac <VgaText::combineCharAndColour(char, unsigned char)>
c00107d8:	5d                   	pop    ebp
c00107d9:	5a                   	pop    edx
c00107da:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c00107e1:	53                   	push   ebx
c00107e2:	89 f0                	mov    eax,esi
c00107e4:	99                   	cdq    
c00107e5:	f7 f9                	idiv   ecx
c00107e7:	89 d6                	mov    esi,edx
c00107e9:	99                   	cdq    
c00107ea:	f7 f9                	idiv   ecx
c00107ec:	8d 42 30             	lea    eax,[edx+0x30]
c00107ef:	0f b6 c0             	movzx  eax,al
c00107f2:	50                   	push   eax
c00107f3:	e8 b4 fd ff ff       	call   c00105ac <VgaText::combineCharAndColour(char, unsigned char)>
c00107f8:	5d                   	pop    ebp
c00107f9:	5a                   	pop    edx
c00107fa:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c0010801:	53                   	push   ebx
c0010802:	8d 46 30             	lea    eax,[esi+0x30]
c0010805:	0f b6 f0             	movzx  esi,al
c0010808:	56                   	push   esi
c0010809:	e8 9e fd ff ff       	call   c00105ac <VgaText::combineCharAndColour(char, unsigned char)>
c001080e:	5e                   	pop    esi
c001080f:	8b 35 c4 fb 02 c0    	mov    esi,DWORD PTR ds:0xc002fbc4
c0010815:	5d                   	pop    ebp
c0010816:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c001081d:	bd 10 27 00 00       	mov    ebp,0x2710
c0010822:	53                   	push   ebx
c0010823:	89 f0                	mov    eax,esi
c0010825:	99                   	cdq    
c0010826:	f7 fd                	idiv   ebp
c0010828:	99                   	cdq    
c0010829:	f7 f9                	idiv   ecx
c001082b:	8d 42 30             	lea    eax,[edx+0x30]
c001082e:	0f b6 c0             	movzx  eax,al
c0010831:	50                   	push   eax
c0010832:	e8 75 fd ff ff       	call   c00105ac <VgaText::combineCharAndColour(char, unsigned char)>
c0010837:	5a                   	pop    edx
c0010838:	5d                   	pop    ebp
c0010839:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c0010840:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010845:	53                   	push   ebx
c0010846:	89 f0                	mov    eax,esi
c0010848:	99                   	cdq    
c0010849:	f7 fd                	idiv   ebp
c001084b:	99                   	cdq    
c001084c:	f7 f9                	idiv   ecx
c001084e:	8d 42 30             	lea    eax,[edx+0x30]
c0010851:	0f b6 c0             	movzx  eax,al
c0010854:	50                   	push   eax
c0010855:	e8 52 fd ff ff       	call   c00105ac <VgaText::combineCharAndColour(char, unsigned char)>
c001085a:	5a                   	pop    edx
c001085b:	5d                   	pop    ebp
c001085c:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c0010863:	bd 64 00 00 00       	mov    ebp,0x64
c0010868:	53                   	push   ebx
c0010869:	89 f0                	mov    eax,esi
c001086b:	99                   	cdq    
c001086c:	f7 fd                	idiv   ebp
c001086e:	99                   	cdq    
c001086f:	f7 f9                	idiv   ecx
c0010871:	83 c2 30             	add    edx,0x30
c0010874:	0f b6 d2             	movzx  edx,dl
c0010877:	52                   	push   edx
c0010878:	e8 2f fd ff ff       	call   c00105ac <VgaText::combineCharAndColour(char, unsigned char)>
c001087d:	5a                   	pop    edx
c001087e:	5d                   	pop    ebp
c001087f:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c0010886:	53                   	push   ebx
c0010887:	89 f0                	mov    eax,esi
c0010889:	99                   	cdq    
c001088a:	f7 f9                	idiv   ecx
c001088c:	89 d6                	mov    esi,edx
c001088e:	99                   	cdq    
c001088f:	f7 f9                	idiv   ecx
c0010891:	8d 42 30             	lea    eax,[edx+0x30]
c0010894:	0f b6 c0             	movzx  eax,al
c0010897:	50                   	push   eax
c0010898:	e8 0f fd ff ff       	call   c00105ac <VgaText::combineCharAndColour(char, unsigned char)>
c001089d:	5a                   	pop    edx
c001089e:	59                   	pop    ecx
c001089f:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c00108a6:	53                   	push   ebx
c00108a7:	8d 46 30             	lea    eax,[esi+0x30]
c00108aa:	0f b6 f0             	movzx  esi,al
c00108ad:	56                   	push   esi
c00108ae:	e8 f9 fc ff ff       	call   c00105ac <VgaText::combineCharAndColour(char, unsigned char)>
c00108b3:	5b                   	pop    ebx
c00108b4:	5e                   	pop    esi
c00108b5:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c00108bc:	5b                   	pop    ebx
c00108bd:	5e                   	pop    esi
c00108be:	5f                   	pop    edi
c00108bf:	5d                   	pop    ebp
c00108c0:	c3                   	ret    
c00108c1:	90                   	nop

c00108c2 <VgaText::updateTitle()>:
c00108c2:	53                   	push   ebx
c00108c3:	31 c0                	xor    eax,eax
c00108c5:	83 ec 58             	sub    esp,0x58
c00108c8:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00108cc:	89 e1                	mov    ecx,esp
c00108ce:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c00108d2:	40                   	inc    eax
c00108d3:	83 f8 50             	cmp    eax,0x50
c00108d6:	75 f6                	jne    c00108ce <VgaText::updateTitle()+0xc>
c00108d8:	31 c0                	xor    eax,eax
c00108da:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c00108e1:	84 db                	test   bl,bl
c00108e3:	74 06                	je     c00108eb <VgaText::updateTitle()+0x29>
c00108e5:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c00108e8:	40                   	inc    eax
c00108e9:	eb ef                	jmp    c00108da <VgaText::updateTitle()+0x18>
c00108eb:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c00108f1:	85 c0                	test   eax,eax
c00108f3:	74 09                	je     c00108fe <VgaText::updateTitle()+0x3c>
c00108f5:	53                   	push   ebx
c00108f6:	53                   	push   ebx
c00108f7:	51                   	push   ecx
c00108f8:	52                   	push   edx
c00108f9:	ff d0                	call   eax
c00108fb:	83 c4 10             	add    esp,0x10
c00108fe:	e8 55 fe ff ff       	call   c0010758 <VgaText::updateDiskUsage()>
c0010903:	83 c4 58             	add    esp,0x58
c0010906:	5b                   	pop    ebx
c0010907:	c3                   	ret    

c0010908 <VgaText::setTitleTextColour(VgaColour)>:
c0010908:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001090c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010910:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c0010916:	eb aa                	jmp    c00108c2 <VgaText::updateTitle()>

c0010918 <VgaText::setTitleColour(VgaColour)>:
c0010918:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001091c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010920:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c0010926:	eb 9a                	jmp    c00108c2 <VgaText::updateTitle()>

c0010928 <VgaText::setTitle(char*)>:
c0010928:	53                   	push   ebx
c0010929:	83 ec 10             	sub    esp,0x10
c001092c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010930:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010934:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c001093a:	50                   	push   eax
c001093b:	e8 23 fe fe ff       	call   c0000763 <strcpy>
c0010940:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010944:	83 c4 18             	add    esp,0x18
c0010947:	5b                   	pop    ebx
c0010948:	e9 75 ff ff ff       	jmp    c00108c2 <VgaText::updateTitle()>
c001094d:	90                   	nop

c001094e <VgaText::decrementCursor(bool)>:
c001094e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010952:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010956:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c001095c:	85 c0                	test   eax,eax
c001095e:	74 07                	je     c0010967 <VgaText::decrementCursor(bool)+0x19>
c0010960:	48                   	dec    eax
c0010961:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c0010967:	84 c9                	test   cl,cl
c0010969:	74 09                	je     c0010974 <VgaText::decrementCursor(bool)+0x26>
c001096b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001096f:	e9 56 fa ff ff       	jmp    c00103ca <VgaText::updateCursor()>
c0010974:	c3                   	ret    
c0010975:	90                   	nop

c0010976 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010976:	53                   	push   ebx
c0010977:	83 ec 08             	sub    esp,0x8
c001097a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001097e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010982:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010986:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001098a:	3c 07                	cmp    al,0x7
c001098c:	75 2a                	jne    c00109b8 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c001098e:	a1 0c da 02 c0       	mov    eax,ds:0xc002da0c
c0010993:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001099b:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c00109a3:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c00109ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00109af:	83 c4 08             	add    esp,0x8
c00109b2:	5b                   	pop    ebx
c00109b3:	e9 3a 2d 00 00       	jmp    c00136f2 <Buzzer::beep(int, int, bool)>
c00109b8:	3c 0d                	cmp    al,0xd
c00109ba:	75 0c                	jne    c00109c8 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c00109bc:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c00109c6:	eb 3b                	jmp    c0010a03 <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c00109c8:	3c 0a                	cmp    al,0xa
c00109ca:	75 40                	jne    c0010a0c <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c00109cc:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c00109d2:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c00109dc:	8d 50 01             	lea    edx,[eax+0x1]
c00109df:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c00109e5:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c00109eb:	75 12                	jne    c00109ff <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c00109ed:	83 ec 0c             	sub    esp,0xc
c00109f0:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c00109f6:	53                   	push   ebx
c00109f7:	e8 1c fb ff ff       	call   c0010518 <VgaText::scrollScreen()>
c00109fc:	83 c4 10             	add    esp,0x10
c00109ff:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010a03:	83 c4 08             	add    esp,0x8
c0010a06:	5b                   	pop    ebx
c0010a07:	e9 be f9 ff ff       	jmp    c00103ca <VgaText::updateCursor()>
c0010a0c:	3c 08                	cmp    al,0x8
c0010a0e:	75 31                	jne    c0010a41 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c0010a10:	50                   	push   eax
c0010a11:	50                   	push   eax
c0010a12:	6a 01                	push   0x1
c0010a14:	53                   	push   ebx
c0010a15:	e8 34 ff ff ff       	call   c001094e <VgaText::decrementCursor(bool)>
c0010a1a:	5a                   	pop    edx
c0010a1b:	59                   	pop    ecx
c0010a1c:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010a22:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010a28:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010a2e:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010a34:	6a 20                	push   0x20
c0010a36:	53                   	push   ebx
c0010a37:	e8 82 fb ff ff       	call   c00105be <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010a3c:	83 c4 28             	add    esp,0x28
c0010a3f:	5b                   	pop    ebx
c0010a40:	c3                   	ret    
c0010a41:	83 ec 08             	sub    esp,0x8
c0010a44:	0f be c0             	movsx  eax,al
c0010a47:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010a4d:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010a53:	51                   	push   ecx
c0010a54:	52                   	push   edx
c0010a55:	50                   	push   eax
c0010a56:	53                   	push   ebx
c0010a57:	e8 62 fb ff ff       	call   c00105be <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010a5c:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010a60:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010a68:	83 c4 28             	add    esp,0x28
c0010a6b:	5b                   	pop    ebx
c0010a6c:	e9 1b fc ff ff       	jmp    c001068c <VgaText::incrementCursor(bool)>
c0010a71:	90                   	nop

c0010a72 <VgaText::isShowingCursor()>:
c0010a72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010a76:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c0010a7c:	c3                   	ret    
c0010a7d:	90                   	nop

c0010a7e <VgaText::isBlinkDisabled()>:
c0010a7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010a82:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c0010a88:	83 f0 01             	xor    eax,0x1
c0010a8b:	c3                   	ret    

c0010a8c <VgaText::setCursorHeight(int)>:
c0010a8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010a90:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010a94:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c0010a9a:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c0010aa1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010aa5:	e9 3a f9 ff ff       	jmp    c00103e4 <VgaText::showCursor(bool)>

c0010aaa <VgaText::getCursorHeight()>:
c0010aaa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010aae:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c0010ab4:	c3                   	ret    

c0010ab5 <setActiveTerminal(VgaText*)>:
c0010ab5:	53                   	push   ebx
c0010ab6:	83 ec 08             	sub    esp,0x8
c0010ab9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010abd:	85 db                	test   ebx,ebx
c0010abf:	75 11                	jne    c0010ad2 <setActiveTerminal(VgaText*)+0x1d>
c0010ac1:	c7 44 24 10 2c 99 02 c0 	mov    DWORD PTR [esp+0x10],0xc002992c
c0010ac9:	83 c4 08             	add    esp,0x8
c0010acc:	5b                   	pop    ebx
c0010acd:	e9 7b 91 00 00       	jmp    c0019c4d <Krnl::panic(char const*)>
c0010ad2:	50                   	push   eax
c0010ad3:	50                   	push   eax
c0010ad4:	53                   	push   ebx
c0010ad5:	68 3a 99 02 c0       	push   0xc002993a
c0010ada:	e8 14 1e 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0010adf:	a1 64 d9 02 c0       	mov    eax,ds:0xc002d964
c0010ae4:	83 c4 10             	add    esp,0x10
c0010ae7:	85 c0                	test   eax,eax
c0010ae9:	74 0c                	je     c0010af7 <setActiveTerminal(VgaText*)+0x42>
c0010aeb:	83 ec 0c             	sub    esp,0xc
c0010aee:	50                   	push   eax
c0010aef:	e8 d6 f8 ff ff       	call   c00103ca <VgaText::updateCursor()>
c0010af4:	83 c4 10             	add    esp,0x10
c0010af7:	89 1d 64 d9 02 c0    	mov    DWORD PTR ds:0xc002d964,ebx
c0010afd:	51                   	push   ecx
c0010afe:	51                   	push   ecx
c0010aff:	53                   	push   ebx
c0010b00:	68 52 99 02 c0       	push   0xc0029952
c0010b05:	e8 e9 1d 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0010b0a:	83 c4 0c             	add    esp,0xc
c0010b0d:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010b13:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010b19:	53                   	push   ebx
c0010b1a:	e8 17 fb ff ff       	call   c0010636 <VgaText::setCursor(int, int)>
c0010b1f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010b22:	e8 57 ff ff ff       	call   c0010a7e <VgaText::isBlinkDisabled()>
c0010b27:	5a                   	pop    edx
c0010b28:	0f b6 c0             	movzx  eax,al
c0010b2b:	59                   	pop    ecx
c0010b2c:	50                   	push   eax
c0010b2d:	53                   	push   ebx
c0010b2e:	e8 c1 f8 ff ff       	call   c00103f4 <VgaText::disableBlink(bool)>
c0010b33:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010b36:	e8 6f ff ff ff       	call   c0010aaa <VgaText::getCursorHeight()>
c0010b3b:	5a                   	pop    edx
c0010b3c:	59                   	pop    ecx
c0010b3d:	50                   	push   eax
c0010b3e:	53                   	push   ebx
c0010b3f:	e8 48 ff ff ff       	call   c0010a8c <VgaText::setCursorHeight(int)>
c0010b44:	83 c4 10             	add    esp,0x10
c0010b47:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010b4e:	75 0a                	jne    c0010b5a <setActiveTerminal(VgaText*)+0xa5>
c0010b50:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c0010b5a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010b5e:	83 c4 08             	add    esp,0x8
c0010b61:	5b                   	pop    ebx
c0010b62:	e9 0f f8 ff ff       	jmp    c0010376 <VgaText::load()>

c0010b67 <doTerminalCycle()>:
c0010b67:	83 ec 18             	sub    esp,0x18
c0010b6a:	a1 60 d9 02 c0       	mov    eax,ds:0xc002d960
c0010b6f:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c0010b75:	50                   	push   eax
c0010b76:	a3 60 d9 02 c0       	mov    ds:0xc002d960,eax
c0010b7b:	e8 35 ff ff ff       	call   c0010ab5 <setActiveTerminal(VgaText*)>
c0010b80:	83 c4 1c             	add    esp,0x1c
c0010b83:	c3                   	ret    

c0010b84 <VgaText::doUpdate()>:
c0010b84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b88:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c0010b8e:	85 c0                	test   eax,eax
c0010b90:	74 02                	je     c0010b94 <VgaText::doUpdate()+0x10>
c0010b92:	ff e0                	jmp    eax
c0010b94:	c3                   	ret    
c0010b95:	90                   	nop

c0010b96 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010b96:	55                   	push   ebp
c0010b97:	57                   	push   edi
c0010b98:	56                   	push   esi
c0010b99:	53                   	push   ebx
c0010b9a:	83 ec 1c             	sub    esp,0x1c
c0010b9d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010ba1:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010ba6:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c0010bad:	8d 7d 0c             	lea    edi,[ebp+0xc]
c0010bb0:	50                   	push   eax
c0010bb1:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010bb6:	50                   	push   eax
c0010bb7:	e8 4a f9 ff ff       	call   c0010506 <VgaText::combineColours(unsigned char, unsigned char)>
c0010bbc:	59                   	pop    ecx
c0010bbd:	0f b6 c0             	movzx  eax,al
c0010bc0:	5b                   	pop    ebx
c0010bc1:	31 c9                	xor    ecx,ecx
c0010bc3:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010bcb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010bcf:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010bd5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010bd9:	0f b7 db             	movzx  ebx,bx
c0010bdc:	01 db                	add    ebx,ebx
c0010bde:	01 fb                	add    ebx,edi
c0010be0:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0010be3:	84 c0                	test   al,al
c0010be5:	0f 84 38 01 00 00    	je     c0010d23 <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c0010beb:	3c 0d                	cmp    al,0xd
c0010bed:	75 0f                	jne    c0010bfe <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0010bef:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010bf9:	e9 1f 01 00 00       	jmp    c0010d1d <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010bfe:	3c 0a                	cmp    al,0xa
c0010c00:	75 5b                	jne    c0010c5d <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c0010c02:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c0010c08:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010c12:	8d 48 01             	lea    ecx,[eax+0x1]
c0010c15:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c0010c1b:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c0010c21:	75 12                	jne    c0010c35 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0010c23:	83 ec 0c             	sub    esp,0xc
c0010c26:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c0010c2c:	55                   	push   ebp
c0010c2d:	e8 e6 f8 ff ff       	call   c0010518 <VgaText::scrollScreen()>
c0010c32:	83 c4 10             	add    esp,0x10
c0010c35:	83 ec 0c             	sub    esp,0xc
c0010c38:	55                   	push   ebp
c0010c39:	e8 8c f7 ff ff       	call   c00103ca <VgaText::updateCursor()>
c0010c3e:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010c46:	83 c4 10             	add    esp,0x10
c0010c49:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010c4f:	31 c9                	xor    ecx,ecx
c0010c51:	0f b7 db             	movzx  ebx,bx
c0010c54:	01 db                	add    ebx,ebx
c0010c56:	01 fb                	add    ebx,edi
c0010c58:	e9 c0 00 00 00       	jmp    c0010d1d <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010c5d:	3c 08                	cmp    al,0x8
c0010c5f:	75 4e                	jne    c0010caf <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c0010c61:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010c65:	53                   	push   ebx
c0010c66:	53                   	push   ebx
c0010c67:	6a 01                	push   0x1
c0010c69:	55                   	push   ebp
c0010c6a:	e8 df fc ff ff       	call   c001094e <VgaText::decrementCursor(bool)>
c0010c6f:	58                   	pop    eax
c0010c70:	5a                   	pop    edx
c0010c71:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010c77:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010c7d:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010c83:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010c89:	6a 20                	push   0x20
c0010c8b:	55                   	push   ebp
c0010c8c:	e8 2d f9 ff ff       	call   c00105be <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010c91:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010c99:	83 c4 20             	add    esp,0x20
c0010c9c:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010ca2:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010ca6:	0f b7 db             	movzx  ebx,bx
c0010ca9:	01 db                	add    ebx,ebx
c0010cab:	01 fb                	add    ebx,edi
c0010cad:	eb 6e                	jmp    c0010d1d <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010caf:	51                   	push   ecx
c0010cb0:	51                   	push   ecx
c0010cb1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010cb5:	50                   	push   eax
c0010cb6:	e8 f1 f8 ff ff       	call   c00105ac <VgaText::combineCharAndColour(char, unsigned char)>
c0010cbb:	83 c4 10             	add    esp,0x10
c0010cbe:	66 89 03             	mov    WORD PTR [ebx],ax
c0010cc1:	39 2d 64 d9 02 c0    	cmp    DWORD PTR ds:0xc002d964,ebp
c0010cc7:	75 2a                	jne    c0010cf3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010cc9:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010ccf:	85 c0                	test   eax,eax
c0010cd1:	74 20                	je     c0010cf3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010cd3:	52                   	push   edx
c0010cd4:	52                   	push   edx
c0010cd5:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010cdb:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010ce1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010ce5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010ce9:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c0010cec:	51                   	push   ecx
c0010ced:	55                   	push   ebp
c0010cee:	ff d0                	call   eax
c0010cf0:	83 c4 20             	add    esp,0x20
c0010cf3:	83 c3 02             	add    ebx,0x2
c0010cf6:	50                   	push   eax
c0010cf7:	50                   	push   eax
c0010cf8:	6a 00                	push   0x0
c0010cfa:	55                   	push   ebp
c0010cfb:	e8 8c f9 ff ff       	call   c001068c <VgaText::incrementCursor(bool)>
c0010d00:	83 c4 10             	add    esp,0x10
c0010d03:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c0010d0a:	75 0f                	jne    c0010d1b <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c0010d0c:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010d14:	0f b7 db             	movzx  ebx,bx
c0010d17:	01 db                	add    ebx,ebx
c0010d19:	01 fb                	add    ebx,edi
c0010d1b:	b1 01                	mov    cl,0x1
c0010d1d:	46                   	inc    esi
c0010d1e:	e9 bd fe ff ff       	jmp    c0010be0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0010d23:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010d27:	83 ec 0c             	sub    esp,0xc
c0010d2a:	55                   	push   ebp
c0010d2b:	e8 9a f6 ff ff       	call   c00103ca <VgaText::updateCursor()>
c0010d30:	83 c4 10             	add    esp,0x10
c0010d33:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010d37:	84 c9                	test   cl,cl
c0010d39:	74 0c                	je     c0010d47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c0010d3b:	83 ec 0c             	sub    esp,0xc
c0010d3e:	55                   	push   ebp
c0010d3f:	e8 40 fe ff ff       	call   c0010b84 <VgaText::doUpdate()>
c0010d44:	83 c4 10             	add    esp,0x10
c0010d47:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c0010d4e:	83 c4 1c             	add    esp,0x1c
c0010d51:	5b                   	pop    ebx
c0010d52:	5e                   	pop    esi
c0010d53:	5f                   	pop    edi
c0010d54:	5d                   	pop    ebp
c0010d55:	c3                   	ret    

c0010d56 <VgaText::clearScreen()>:
c0010d56:	57                   	push   edi
c0010d57:	56                   	push   esi
c0010d58:	31 f6                	xor    esi,esi
c0010d5a:	53                   	push   ebx
c0010d5b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010d5f:	52                   	push   edx
c0010d60:	6a 00                	push   0x0
c0010d62:	6a 00                	push   0x0
c0010d64:	53                   	push   ebx
c0010d65:	e8 cc f8 ff ff       	call   c0010636 <VgaText::setCursor(int, int)>
c0010d6a:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c0010d71:	83 c4 10             	add    esp,0x10
c0010d74:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c0010d7a:	7e 26                	jle    c0010da2 <VgaText::clearScreen()+0x4c>
c0010d7c:	31 ff                	xor    edi,edi
c0010d7e:	50                   	push   eax
c0010d7f:	50                   	push   eax
c0010d80:	56                   	push   esi
c0010d81:	57                   	push   edi
c0010d82:	47                   	inc    edi
c0010d83:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010d89:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010d8f:	6a 20                	push   0x20
c0010d91:	53                   	push   ebx
c0010d92:	e8 27 f8 ff ff       	call   c00105be <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010d97:	83 c4 20             	add    esp,0x20
c0010d9a:	83 ff 50             	cmp    edi,0x50
c0010d9d:	75 df                	jne    c0010d7e <VgaText::clearScreen()+0x28>
c0010d9f:	46                   	inc    esi
c0010da0:	eb d2                	jmp    c0010d74 <VgaText::clearScreen()+0x1e>
c0010da2:	83 ec 0c             	sub    esp,0xc
c0010da5:	53                   	push   ebx
c0010da6:	e8 d9 fd ff ff       	call   c0010b84 <VgaText::doUpdate()>
c0010dab:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c0010db2:	83 c4 10             	add    esp,0x10
c0010db5:	5b                   	pop    ebx
c0010db6:	5e                   	pop    esi
c0010db7:	5f                   	pop    edi
c0010db8:	c3                   	ret    
c0010db9:	90                   	nop

c0010dba <VgaText::putchar(char)>:
c0010dba:	56                   	push   esi
c0010dbb:	53                   	push   ebx
c0010dbc:	83 ec 14             	sub    esp,0x14
c0010dbf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010dc3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010dc7:	3c 5b                	cmp    al,0x5b
c0010dc9:	75 21                	jne    c0010dec <VgaText::putchar(char)+0x32>
c0010dcb:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c0010dd2:	74 28                	je     c0010dfc <VgaText::putchar(char)+0x42>
c0010dd4:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c0010ddd:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c0010de7:	e9 e2 00 00 00       	jmp    c0010ece <VgaText::putchar(char)+0x114>
c0010dec:	3c 1b                	cmp    al,0x1b
c0010dee:	75 0c                	jne    c0010dfc <VgaText::putchar(char)+0x42>
c0010df0:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c0010df7:	e9 d2 00 00 00       	jmp    c0010ece <VgaText::putchar(char)+0x114>
c0010dfc:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c0010e02:	84 c9                	test   cl,cl
c0010e04:	0f 84 ab 00 00 00    	je     c0010eb5 <VgaText::putchar(char)+0xfb>
c0010e0a:	8d 50 c0             	lea    edx,[eax-0x40]
c0010e0d:	80 fa 3e             	cmp    dl,0x3e
c0010e10:	0f 87 82 00 00 00    	ja     c0010e98 <VgaText::putchar(char)+0xde>
c0010e16:	3c 6d                	cmp    al,0x6d
c0010e18:	75 4d                	jne    c0010e67 <VgaText::putchar(char)+0xad>
c0010e1a:	31 f6                	xor    esi,esi
c0010e1c:	31 d2                	xor    edx,edx
c0010e1e:	31 c0                	xor    eax,eax
c0010e20:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c0010e26:	7e 30                	jle    c0010e58 <VgaText::putchar(char)+0x9e>
c0010e28:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c0010e30:	80 fa 3b             	cmp    dl,0x3b
c0010e33:	75 17                	jne    c0010e4c <VgaText::putchar(char)+0x92>
c0010e35:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010e39:	50                   	push   eax
c0010e3a:	53                   	push   ebx
c0010e3b:	e8 ee f5 ff ff       	call   c001042e <VgaText::doANSI_SGR(int)>
c0010e40:	59                   	pop    ecx
c0010e41:	31 d2                	xor    edx,edx
c0010e43:	58                   	pop    eax
c0010e44:	31 c0                	xor    eax,eax
c0010e46:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010e4a:	eb 09                	jmp    c0010e55 <VgaText::putchar(char)+0x9b>
c0010e4c:	6b c0 0a             	imul   eax,eax,0xa
c0010e4f:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010e53:	88 ca                	mov    dl,cl
c0010e55:	46                   	inc    esi
c0010e56:	eb c8                	jmp    c0010e20 <VgaText::putchar(char)+0x66>
c0010e58:	84 d2                	test   dl,dl
c0010e5a:	74 31                	je     c0010e8d <VgaText::putchar(char)+0xd3>
c0010e5c:	50                   	push   eax
c0010e5d:	53                   	push   ebx
c0010e5e:	e8 cb f5 ff ff       	call   c001042e <VgaText::doANSI_SGR(int)>
c0010e63:	58                   	pop    eax
c0010e64:	5a                   	pop    edx
c0010e65:	eb 26                	jmp    c0010e8d <VgaText::putchar(char)+0xd3>
c0010e67:	3c 4a                	cmp    al,0x4a
c0010e69:	75 22                	jne    c0010e8d <VgaText::putchar(char)+0xd3>
c0010e6b:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c0010e72:	75 19                	jne    c0010e8d <VgaText::putchar(char)+0xd3>
c0010e74:	83 ec 0c             	sub    esp,0xc
c0010e77:	53                   	push   ebx
c0010e78:	e8 d9 fe ff ff       	call   c0010d56 <VgaText::clearScreen()>
c0010e7d:	83 c4 0c             	add    esp,0xc
c0010e80:	6a 00                	push   0x0
c0010e82:	6a 00                	push   0x0
c0010e84:	53                   	push   ebx
c0010e85:	e8 ac f7 ff ff       	call   c0010636 <VgaText::setCursor(int, int)>
c0010e8a:	83 c4 10             	add    esp,0x10
c0010e8d:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c0010e96:	eb 36                	jmp    c0010ece <VgaText::putchar(char)+0x114>
c0010e98:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c0010e9e:	83 fa 0e             	cmp    edx,0xe
c0010ea1:	7f 2b                	jg     c0010ece <VgaText::putchar(char)+0x114>
c0010ea3:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010ea6:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c0010eac:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c0010eb3:	eb 19                	jmp    c0010ece <VgaText::putchar(char)+0x114>
c0010eb5:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010ebb:	0f be c0             	movsx  eax,al
c0010ebe:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010ec4:	50                   	push   eax
c0010ec5:	53                   	push   ebx
c0010ec6:	e8 ab fa ff ff       	call   c0010976 <VgaText::putchar(char, VgaColour, VgaColour)>
c0010ecb:	83 c4 10             	add    esp,0x10
c0010ece:	83 c4 14             	add    esp,0x14
c0010ed1:	5b                   	pop    ebx
c0010ed2:	5e                   	pop    esi
c0010ed3:	c3                   	ret    

c0010ed4 <VgaText::puts(char const*)>:
c0010ed4:	53                   	push   ebx
c0010ed5:	83 ec 08             	sub    esp,0x8
c0010ed8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010edc:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0010edf:	84 c0                	test   al,al
c0010ee1:	74 12                	je     c0010ef5 <VgaText::puts(char const*)+0x21>
c0010ee3:	43                   	inc    ebx
c0010ee4:	51                   	push   ecx
c0010ee5:	51                   	push   ecx
c0010ee6:	50                   	push   eax
c0010ee7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010eeb:	e8 ca fe ff ff       	call   c0010dba <VgaText::putchar(char)>
c0010ef0:	83 c4 10             	add    esp,0x10
c0010ef3:	eb e7                	jmp    c0010edc <VgaText::puts(char const*)+0x8>
c0010ef5:	83 c4 08             	add    esp,0x8
c0010ef8:	5b                   	pop    ebx
c0010ef9:	c3                   	ret    

c0010efa <VgaText::putx(unsigned int)>:
c0010efa:	57                   	push   edi
c0010efb:	b9 11 00 00 00       	mov    ecx,0x11
c0010f00:	56                   	push   esi
c0010f01:	be 6e 99 02 c0       	mov    esi,0xc002996e
c0010f06:	53                   	push   ebx
c0010f07:	83 ec 20             	sub    esp,0x20
c0010f0a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010f0e:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0010f12:	fc                   	cld    
c0010f13:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010f15:	be 08 00 00 00       	mov    esi,0x8
c0010f1a:	50                   	push   eax
c0010f1b:	50                   	push   eax
c0010f1c:	89 d8                	mov    eax,ebx
c0010f1e:	c1 e3 04             	shl    ebx,0x4
c0010f21:	c1 e8 1c             	shr    eax,0x1c
c0010f24:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0010f29:	50                   	push   eax
c0010f2a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010f2e:	e8 87 fe ff ff       	call   c0010dba <VgaText::putchar(char)>
c0010f33:	83 c4 10             	add    esp,0x10
c0010f36:	4e                   	dec    esi
c0010f37:	75 e1                	jne    c0010f1a <VgaText::putx(unsigned int)+0x20>
c0010f39:	83 c4 20             	add    esp,0x20
c0010f3c:	5b                   	pop    ebx
c0010f3d:	5e                   	pop    esi
c0010f3e:	5f                   	pop    edi
c0010f3f:	c3                   	ret    

c0010f40 <VgaText::VgaText(char const*)>:
c0010f40:	57                   	push   edi
c0010f41:	56                   	push   esi
c0010f42:	53                   	push   ebx
c0010f43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f47:	83 ec 08             	sub    esp,0x8
c0010f4a:	6a 00                	push   0x0
c0010f4c:	50                   	push   eax
c0010f4d:	e8 6e 05 00 00       	call   c00114c0 <UnixFile::UnixFile(int)>
c0010f52:	83 c4 10             	add    esp,0x10
c0010f55:	ba d4 99 02 c0       	mov    edx,0xc00299d4
c0010f5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f5e:	89 10                	mov    DWORD PTR [eax],edx
c0010f60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f64:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c0010f6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f72:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c0010f7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f80:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c0010f87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f8b:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c0010f92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f96:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c0010fa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fa4:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c0010fae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fb2:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c0010fb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fbd:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c0010fc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fc8:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c0010fce:	bb 40 d9 02 c0       	mov    ebx,0xc002d940
c0010fd3:	b8 08 00 00 00       	mov    eax,0x8
c0010fd8:	fc                   	cld    
c0010fd9:	89 d7                	mov    edi,edx
c0010fdb:	89 de                	mov    esi,ebx
c0010fdd:	89 c1                	mov    ecx,eax
c0010fdf:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010fe1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fe5:	05 1e 10 00 00       	add    eax,0x101e
c0010fea:	83 ec 08             	sub    esp,0x8
c0010fed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ff1:	50                   	push   eax
c0010ff2:	e8 6c f7 fe ff       	call   c0000763 <strcpy>
c0010ff7:	83 c4 10             	add    esp,0x10
c0010ffa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ffe:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c0011008:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001100c:	83 c0 0c             	add    eax,0xc
c001100f:	83 ec 04             	sub    esp,0x4
c0011012:	68 00 0f 00 00       	push   0xf00
c0011017:	6a 00                	push   0x0
c0011019:	50                   	push   eax
c001101a:	e8 a5 f6 fe ff       	call   c00006c4 <memset>
c001101f:	83 c4 10             	add    esp,0x10
c0011022:	83 ec 04             	sub    esp,0x4
c0011025:	6a 00                	push   0x0
c0011027:	6a 07                	push   0x7
c0011029:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001102d:	e8 b4 f4 ff ff       	call   c00104e6 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0011032:	83 c4 10             	add    esp,0x10
c0011035:	83 ec 08             	sub    esp,0x8
c0011038:	6a 02                	push   0x2
c001103a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001103e:	e8 49 fa ff ff       	call   c0010a8c <VgaText::setCursorHeight(int)>
c0011043:	83 c4 10             	add    esp,0x10
c0011046:	83 ec 04             	sub    esp,0x4
c0011049:	6a 00                	push   0x0
c001104b:	6a 00                	push   0x0
c001104d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011051:	e8 e0 f5 ff ff       	call   c0010636 <VgaText::setCursor(int, int)>
c0011056:	83 c4 10             	add    esp,0x10
c0011059:	83 ec 08             	sub    esp,0x8
c001105c:	6a 01                	push   0x1
c001105e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011062:	e8 7d f3 ff ff       	call   c00103e4 <VgaText::showCursor(bool)>
c0011067:	83 c4 10             	add    esp,0x10
c001106a:	83 ec 08             	sub    esp,0x8
c001106d:	6a 01                	push   0x1
c001106f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011073:	e8 7c f3 ff ff       	call   c00103f4 <VgaText::disableBlink(bool)>
c0011078:	83 c4 10             	add    esp,0x10
c001107b:	83 ec 0c             	sub    esp,0xc
c001107e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011082:	e8 cf fc ff ff       	call   c0010d56 <VgaText::clearScreen()>
c0011087:	83 c4 10             	add    esp,0x10
c001108a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001108e:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c0011095:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011099:	05 9e 10 00 00       	add    eax,0x109e
c001109e:	83 ec 04             	sub    esp,0x4
c00110a1:	68 96 00 00 00       	push   0x96
c00110a6:	6a 00                	push   0x0
c00110a8:	50                   	push   eax
c00110a9:	e8 16 f6 fe ff       	call   c00006c4 <memset>
c00110ae:	83 c4 10             	add    esp,0x10
c00110b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110b5:	05 34 11 00 00       	add    eax,0x1134
c00110ba:	83 ec 04             	sub    esp,0x4
c00110bd:	68 2c 01 00 00       	push   0x12c
c00110c2:	6a 00                	push   0x0
c00110c4:	50                   	push   eax
c00110c5:	e8 fa f5 fe ff       	call   c00006c4 <memset>
c00110ca:	83 c4 10             	add    esp,0x10
c00110cd:	90                   	nop
c00110ce:	5b                   	pop    ebx
c00110cf:	5e                   	pop    esi
c00110d0:	5f                   	pop    edi
c00110d1:	c3                   	ret    

c00110d2 <VgaText::receiveKey(unsigned char)>:
c00110d2:	55                   	push   ebp
c00110d3:	57                   	push   edi
c00110d4:	56                   	push   esi
c00110d5:	53                   	push   ebx
c00110d6:	83 ec 1c             	sub    esp,0x1c
c00110d9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00110dd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00110e1:	84 db                	test   bl,bl
c00110e3:	0f 84 c9 00 00 00    	je     c00111b2 <VgaText::receiveKey(unsigned char)+0xe0>
c00110e9:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c00110ef:	80 fb 08             	cmp    bl,0x8
c00110f2:	75 2c                	jne    c0011120 <VgaText::receiveKey(unsigned char)+0x4e>
c00110f4:	83 ec 0c             	sub    esp,0xc
c00110f7:	57                   	push   edi
c00110f8:	e8 e4 f5 fe ff       	call   c00006e1 <strlen>
c00110fd:	83 c4 10             	add    esp,0x10
c0011100:	85 c0                	test   eax,eax
c0011102:	74 41                	je     c0011145 <VgaText::receiveKey(unsigned char)+0x73>
c0011104:	50                   	push   eax
c0011105:	50                   	push   eax
c0011106:	6a 08                	push   0x8
c0011108:	56                   	push   esi
c0011109:	e8 ac fc ff ff       	call   c0010dba <VgaText::putchar(char)>
c001110e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011111:	e8 cb f5 fe ff       	call   c00006e1 <strlen>
c0011116:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c001111e:	eb 22                	jmp    c0011142 <VgaText::receiveKey(unsigned char)+0x70>
c0011120:	0f be c3             	movsx  eax,bl
c0011123:	52                   	push   edx
c0011124:	52                   	push   edx
c0011125:	50                   	push   eax
c0011126:	56                   	push   esi
c0011127:	e8 8e fc ff ff       	call   c0010dba <VgaText::putchar(char)>
c001112c:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0011130:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0011135:	59                   	pop    ecx
c0011136:	5d                   	pop    ebp
c0011137:	8d 44 24 16          	lea    eax,[esp+0x16]
c001113b:	50                   	push   eax
c001113c:	57                   	push   edi
c001113d:	e8 d8 f6 fe ff       	call   c000081a <strcat>
c0011142:	83 c4 10             	add    esp,0x10
c0011145:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c001114c:	75 05                	jne    c0011153 <VgaText::receiveKey(unsigned char)+0x81>
c001114e:	80 fb 0a             	cmp    bl,0xa
c0011151:	75 53                	jne    c00111a6 <VgaText::receiveKey(unsigned char)+0xd4>
c0011153:	83 ec 0c             	sub    esp,0xc
c0011156:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c001115c:	53                   	push   ebx
c001115d:	e8 7f f5 fe ff       	call   c00006e1 <strlen>
c0011162:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011165:	89 c5                	mov    ebp,eax
c0011167:	e8 75 f5 fe ff       	call   c00006e1 <strlen>
c001116c:	83 c4 10             	add    esp,0x10
c001116f:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0011173:	3d 2c 01 00 00       	cmp    eax,0x12c
c0011178:	76 10                	jbe    c001118a <VgaText::receiveKey(unsigned char)+0xb8>
c001117a:	83 ec 0c             	sub    esp,0xc
c001117d:	68 7f 99 02 c0       	push   0xc002997f
c0011182:	e8 c6 8a 00 00       	call   c0019c4d <Krnl::panic(char const*)>
c0011187:	83 c4 10             	add    esp,0x10
c001118a:	50                   	push   eax
c001118b:	50                   	push   eax
c001118c:	57                   	push   edi
c001118d:	53                   	push   ebx
c001118e:	e8 87 f6 fe ff       	call   c000081a <strcat>
c0011193:	83 c4 0c             	add    esp,0xc
c0011196:	68 96 00 00 00       	push   0x96
c001119b:	6a 00                	push   0x0
c001119d:	57                   	push   edi
c001119e:	e8 21 f5 fe ff       	call   c00006c4 <memset>
c00111a3:	83 c4 10             	add    esp,0x10
c00111a6:	83 ec 0c             	sub    esp,0xc
c00111a9:	56                   	push   esi
c00111aa:	e8 d5 f9 ff ff       	call   c0010b84 <VgaText::doUpdate()>
c00111af:	83 c4 10             	add    esp,0x10
c00111b2:	83 c4 1c             	add    esp,0x1c
c00111b5:	5b                   	pop    ebx
c00111b6:	5e                   	pop    esi
c00111b7:	5f                   	pop    edi
c00111b8:	5d                   	pop    ebp
c00111b9:	c3                   	ret    

c00111ba <VgaText::write(unsigned long long, void*, int*)>:
c00111ba:	55                   	push   ebp
c00111bb:	57                   	push   edi
c00111bc:	56                   	push   esi
c00111bd:	53                   	push   ebx
c00111be:	83 ec 0c             	sub    esp,0xc
c00111c1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00111c5:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00111c9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00111cd:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c00111d4:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c00111d7:	39 eb                	cmp    ebx,ebp
c00111d9:	74 13                	je     c00111ee <VgaText::write(unsigned long long, void*, int*)+0x34>
c00111db:	43                   	inc    ebx
c00111dc:	50                   	push   eax
c00111dd:	50                   	push   eax
c00111de:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c00111e2:	50                   	push   eax
c00111e3:	56                   	push   esi
c00111e4:	e8 d1 fb ff ff       	call   c0010dba <VgaText::putchar(char)>
c00111e9:	83 c4 10             	add    esp,0x10
c00111ec:	eb e9                	jmp    c00111d7 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c00111ee:	83 ec 0c             	sub    esp,0xc
c00111f1:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c00111f8:	56                   	push   esi
c00111f9:	e8 86 f9 ff ff       	call   c0010b84 <VgaText::doUpdate()>
c00111fe:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011202:	89 38                	mov    DWORD PTR [eax],edi
c0011204:	83 c4 1c             	add    esp,0x1c
c0011207:	31 c0                	xor    eax,eax
c0011209:	5b                   	pop    ebx
c001120a:	5e                   	pop    esi
c001120b:	5f                   	pop    edi
c001120c:	5d                   	pop    ebp
c001120d:	c3                   	ret    

c001120e <newTerminal(char*)>:
c001120e:	83 ec 28             	sub    esp,0x28
c0011211:	68 60 12 00 00       	push   0x1260
c0011216:	e8 09 e4 ff ff       	call   c000f624 <malloc>
c001121b:	5a                   	pop    edx
c001121c:	59                   	pop    ecx
c001121d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011221:	50                   	push   eax
c0011222:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011226:	e8 15 fd ff ff       	call   c0010f40 <VgaText::VgaText(char const*)>
c001122b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001122f:	83 c4 2c             	add    esp,0x2c
c0011232:	c3                   	ret    
c0011233:	90                   	nop

c0011234 <TSS::TSS()>:
c0011234:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011238:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001123f:	90                   	nop
c0011240:	c3                   	ret    
c0011241:	90                   	nop

c0011242 <TSS::setESP(unsigned long)>:
c0011242:	55                   	push   ebp
c0011243:	89 e5                	mov    ebp,esp
c0011245:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011248:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001124b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001124e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011251:	90                   	nop
c0011252:	5d                   	pop    ebp
c0011253:	c3                   	ret    

c0011254 <TSS::flush()>:
c0011254:	55                   	push   ebp
c0011255:	89 e5                	mov    ebp,esp
c0011257:	83 ec 10             	sub    esp,0x10
c001125a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001125d:	8b 00                	mov    eax,DWORD PTR [eax]
c001125f:	83 c8 03             	or     eax,0x3
c0011262:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0011266:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c001126a:	66 89 d0             	mov    ax,dx
c001126d:	0f 00 d8             	ltr    ax
c0011270:	90                   	nop
c0011271:	c9                   	leave  
c0011272:	c3                   	ret    
c0011273:	90                   	nop

c0011274 <TSS::setup(unsigned long, unsigned long)>:
c0011274:	55                   	push   ebp
c0011275:	89 e5                	mov    ebp,esp
c0011277:	83 ec 18             	sub    esp,0x18
c001127a:	83 ec 0c             	sub    esp,0xc
c001127d:	6a 68                	push   0x68
c001127f:	e8 a0 e3 ff ff       	call   c000f624 <malloc>
c0011284:	83 c4 10             	add    esp,0x10
c0011287:	89 c2                	mov    edx,eax
c0011289:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001128c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001128f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011292:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011295:	83 ec 04             	sub    esp,0x4
c0011298:	6a 68                	push   0x68
c001129a:	6a 00                	push   0x0
c001129c:	50                   	push   eax
c001129d:	e8 22 f4 fe ff       	call   c00006c4 <memset>
c00112a2:	83 c4 10             	add    esp,0x10
c00112a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00112a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112ab:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c00112b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00112b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112b7:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c00112bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00112c0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112c3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00112c6:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00112c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00112cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112cf:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c00112d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00112d8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112db:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c00112e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00112e4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112e7:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c00112ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00112f0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112f3:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c00112f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00112fc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112ff:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0011305:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011308:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001130b:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0011311:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011314:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011317:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001131a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001131d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011320:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011323:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011326:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011329:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001132c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001132f:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0011336:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011339:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001133c:	0f 20 da             	mov    edx,cr3
c001133f:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0011342:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011345:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0011348:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001134b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001134e:	83 ec 08             	sub    esp,0x8
c0011351:	50                   	push   eax
c0011352:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011355:	50                   	push   eax
c0011356:	e8 a7 da ff ff       	call   c000ee02 <GDTEntry::setBase(unsigned int)>
c001135b:	83 c4 10             	add    esp,0x10
c001135e:	83 ec 08             	sub    esp,0x8
c0011361:	6a 68                	push   0x68
c0011363:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011366:	50                   	push   eax
c0011367:	e8 b2 da ff ff       	call   c000ee1e <GDTEntry::setLimit(unsigned int)>
c001136c:	83 c4 10             	add    esp,0x10
c001136f:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0011373:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011376:	83 e0 0f             	and    eax,0xf
c0011379:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c001137c:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c001137f:	83 c8 40             	or     eax,0x40
c0011382:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011385:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c001138a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011390:	05 78 01 00 00       	add    eax,0x178
c0011395:	83 ec 04             	sub    esp,0x4
c0011398:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001139b:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001139e:	50                   	push   eax
c001139f:	e8 ae da ff ff       	call   c000ee52 <GDT::addEntry(GDTEntry)>
c00113a4:	83 c4 10             	add    esp,0x10
c00113a7:	89 c2                	mov    edx,eax
c00113a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113ac:	89 10                	mov    DWORD PTR [eax],edx
c00113ae:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c00113b3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00113b9:	05 78 01 00 00       	add    eax,0x178
c00113be:	83 ec 0c             	sub    esp,0xc
c00113c1:	50                   	push   eax
c00113c2:	e8 cf da ff ff       	call   c000ee96 <GDT::flush()>
c00113c7:	83 c4 10             	add    esp,0x10
c00113ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113cd:	8b 00                	mov    eax,DWORD PTR [eax]
c00113cf:	83 ec 08             	sub    esp,0x8
c00113d2:	50                   	push   eax
c00113d3:	68 e8 99 02 c0       	push   0xc00299e8
c00113d8:	e8 16 15 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00113dd:	83 c4 10             	add    esp,0x10
c00113e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00113e5:	c9                   	leave  
c00113e6:	c3                   	ret    
c00113e7:	90                   	nop

c00113e8 <ReservedFilename::read(unsigned long long, void*, int*)>:
c00113e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00113ec:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00113f0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113f3:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00113f8:	75 08                	jne    c0011402 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00113fa:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011400:	eb 38                	jmp    c001143a <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0011402:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011407:	75 17                	jne    c0011420 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0011409:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001140e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011411:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011417:	8b 10                	mov    edx,DWORD PTR [eax]
c0011419:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001141d:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0011420:	89 c1                	mov    ecx,eax
c0011422:	83 e1 fd             	and    ecx,0xfffffffd
c0011425:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c001142b:	74 cd                	je     c00113fa <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c001142d:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011432:	83 e0 ef             	and    eax,0xffffffef
c0011435:	83 f8 08             	cmp    eax,0x8
c0011438:	76 c0                	jbe    c00113fa <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c001143a:	31 c0                	xor    eax,eax
c001143c:	c3                   	ret    
c001143d:	90                   	nop

c001143e <ReservedFilename::isAtty()>:
c001143e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011442:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011445:	31 c0                	xor    eax,eax
c0011447:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c001144d:	74 09                	je     c0011458 <ReservedFilename::isAtty()+0x1a>
c001144f:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0011455:	0f 94 c0             	sete   al
c0011458:	c3                   	ret    
c0011459:	90                   	nop

c001145a <ReservedFilename::write(unsigned long long, void*, int*)>:
c001145a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001145e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011462:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011465:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011469:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c001146e:	75 08                	jne    c0011478 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0011470:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011476:	eb 3d                	jmp    c00114b5 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011478:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001147d:	75 17                	jne    c0011496 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c001147f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011484:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011487:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001148d:	8b 10                	mov    edx,DWORD PTR [eax]
c001148f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011493:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0011496:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001149b:	75 04                	jne    c00114a1 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c001149d:	89 0a                	mov    DWORD PTR [edx],ecx
c001149f:	eb 14                	jmp    c00114b5 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00114a1:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00114a6:	74 c8                	je     c0011470 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00114a8:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00114ad:	83 e0 ef             	and    eax,0xffffffef
c00114b0:	83 f8 08             	cmp    eax,0x8
c00114b3:	76 bb                	jbe    c0011470 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00114b5:	31 c0                	xor    eax,eax
c00114b7:	c3                   	ret    

c00114b8 <UnixFile::getFileDescriptor()>:
c00114b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00114bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114bf:	c3                   	ret    

c00114c0 <UnixFile::UnixFile(int)>:
c00114c0:	53                   	push   ebx
c00114c1:	83 ec 28             	sub    esp,0x28
c00114c4:	ba d4 9a 02 c0       	mov    edx,0xc0029ad4
c00114c9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00114cd:	89 10                	mov    DWORD PTR [eax],edx
c00114cf:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00114d7:	0f 8f 8c 01 00 00    	jg     c0011669 <UnixFile::UnixFile(int)+0x1a9>
c00114dd:	a1 20 c8 02 c0       	mov    eax,ds:0xc002c820
c00114e2:	8d 50 01             	lea    edx,[eax+0x1]
c00114e5:	89 15 20 c8 02 c0    	mov    DWORD PTR ds:0xc002c820,edx
c00114eb:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00114ef:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00114f2:	83 ec 08             	sub    esp,0x8
c00114f5:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00114f9:	68 f8 d9 02 c0       	push   0xc002d9f8
c00114fe:	e8 bd 67 01 00       	call   c0027cc0 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011503:	83 c4 10             	add    esp,0x10
c0011506:	a0 f4 d9 02 c0       	mov    al,ds:0xc002d9f4
c001150b:	83 f0 01             	xor    eax,0x1
c001150e:	84 c0                	test   al,al
c0011510:	0f 84 54 01 00 00    	je     c001166a <UnixFile::UnixFile(int)+0x1aa>
c0011516:	c6 05 f4 d9 02 c0 01 	mov    BYTE PTR ds:0xc002d9f4,0x1
c001151d:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0011525:	83 ec 0c             	sub    esp,0xc
c0011528:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001152c:	e8 f3 e0 ff ff       	call   c000f624 <malloc>
c0011531:	83 c4 10             	add    esp,0x10
c0011534:	89 c3                	mov    ebx,eax
c0011536:	83 ec 08             	sub    esp,0x8
c0011539:	68 03 ff ff 0f       	push   0xfffff03
c001153e:	53                   	push   ebx
c001153f:	e8 2c 01 00 00       	call   c0011670 <ReservedFilename::ReservedFilename(int)>
c0011544:	83 c4 10             	add    esp,0x10
c0011547:	89 1d ec d9 02 c0    	mov    DWORD PTR ds:0xc002d9ec,ebx
c001154d:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0011555:	83 ec 0c             	sub    esp,0xc
c0011558:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001155c:	e8 c3 e0 ff ff       	call   c000f624 <malloc>
c0011561:	83 c4 10             	add    esp,0x10
c0011564:	89 c3                	mov    ebx,eax
c0011566:	83 ec 08             	sub    esp,0x8
c0011569:	68 01 ff ff 0f       	push   0xfffff01
c001156e:	53                   	push   ebx
c001156f:	e8 fc 00 00 00       	call   c0011670 <ReservedFilename::ReservedFilename(int)>
c0011574:	83 c4 10             	add    esp,0x10
c0011577:	89 1d f0 d9 02 c0    	mov    DWORD PTR ds:0xc002d9f0,ebx
c001157d:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0011585:	83 ec 0c             	sub    esp,0xc
c0011588:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001158c:	e8 93 e0 ff ff       	call   c000f624 <malloc>
c0011591:	83 c4 10             	add    esp,0x10
c0011594:	89 c3                	mov    ebx,eax
c0011596:	83 ec 08             	sub    esp,0x8
c0011599:	68 00 ff ff 0f       	push   0xfffff00
c001159e:	53                   	push   ebx
c001159f:	e8 cc 00 00 00       	call   c0011670 <ReservedFilename::ReservedFilename(int)>
c00115a4:	83 c4 10             	add    esp,0x10
c00115a7:	89 1d e4 d9 02 c0    	mov    DWORD PTR ds:0xc002d9e4,ebx
c00115ad:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00115b5:	83 ec 0c             	sub    esp,0xc
c00115b8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00115bc:	e8 63 e0 ff ff       	call   c000f624 <malloc>
c00115c1:	83 c4 10             	add    esp,0x10
c00115c4:	89 c3                	mov    ebx,eax
c00115c6:	83 ec 08             	sub    esp,0x8
c00115c9:	68 02 ff ff 0f       	push   0xfffff02
c00115ce:	53                   	push   ebx
c00115cf:	e8 9c 00 00 00       	call   c0011670 <ReservedFilename::ReservedFilename(int)>
c00115d4:	83 c4 10             	add    esp,0x10
c00115d7:	89 1d e8 d9 02 c0    	mov    DWORD PTR ds:0xc002d9e8,ebx
c00115dd:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00115e5:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00115ea:	7f 7e                	jg     c001166a <UnixFile::UnixFile(int)+0x1aa>
c00115ec:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00115f4:	83 ec 0c             	sub    esp,0xc
c00115f7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00115fb:	e8 24 e0 ff ff       	call   c000f624 <malloc>
c0011600:	83 c4 10             	add    esp,0x10
c0011603:	89 c3                	mov    ebx,eax
c0011605:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011609:	05 10 ff ff 0f       	add    eax,0xfffff10
c001160e:	83 ec 08             	sub    esp,0x8
c0011611:	50                   	push   eax
c0011612:	53                   	push   ebx
c0011613:	e8 58 00 00 00       	call   c0011670 <ReservedFilename::ReservedFilename(int)>
c0011618:	83 c4 10             	add    esp,0x10
c001161b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001161f:	89 1c 85 c0 d9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2640],ebx
c0011626:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c001162e:	83 ec 0c             	sub    esp,0xc
c0011631:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011635:	e8 ea df ff ff       	call   c000f624 <malloc>
c001163a:	83 c4 10             	add    esp,0x10
c001163d:	89 c3                	mov    ebx,eax
c001163f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011643:	05 20 ff ff 0f       	add    eax,0xfffff20
c0011648:	83 ec 08             	sub    esp,0x8
c001164b:	50                   	push   eax
c001164c:	53                   	push   ebx
c001164d:	e8 1e 00 00 00       	call   c0011670 <ReservedFilename::ReservedFilename(int)>
c0011652:	83 c4 10             	add    esp,0x10
c0011655:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011659:	89 1c 85 80 d9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2680],ebx
c0011660:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011664:	e9 7c ff ff ff       	jmp    c00115e5 <UnixFile::UnixFile(int)+0x125>
c0011669:	90                   	nop
c001166a:	83 c4 28             	add    esp,0x28
c001166d:	5b                   	pop    ebx
c001166e:	c3                   	ret    
c001166f:	90                   	nop

c0011670 <ReservedFilename::ReservedFilename(int)>:
c0011670:	83 ec 0c             	sub    esp,0xc
c0011673:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011677:	83 ec 08             	sub    esp,0x8
c001167a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001167e:	50                   	push   eax
c001167f:	e8 3c fe ff ff       	call   c00114c0 <UnixFile::UnixFile(int)>
c0011684:	83 c4 10             	add    esp,0x10
c0011687:	ba f0 9a 02 c0       	mov    edx,0xc0029af0
c001168c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011690:	89 10                	mov    DWORD PTR [eax],edx
c0011692:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011696:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001169a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001169d:	90                   	nop
c001169e:	83 c4 0c             	add    esp,0xc
c00116a1:	c3                   	ret    

c00116a2 <UnixFile::~UnixFile()>:
c00116a2:	83 ec 1c             	sub    esp,0x1c
c00116a5:	ba d4 9a 02 c0       	mov    edx,0xc0029ad4
c00116aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00116ae:	89 10                	mov    DWORD PTR [eax],edx
c00116b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00116b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00116b7:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00116bc:	7f 73                	jg     c0011731 <UnixFile::~UnixFile()+0x8f>
c00116be:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00116c6:	83 ec 0c             	sub    esp,0xc
c00116c9:	68 f8 d9 02 c0       	push   0xc002d9f8
c00116ce:	e8 c1 66 01 00       	call   c0027d94 <LinkedList<UnixFile>::getFirstElement()>
c00116d3:	83 c4 10             	add    esp,0x10
c00116d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00116da:	83 ec 0c             	sub    esp,0xc
c00116dd:	68 f8 d9 02 c0       	push   0xc002d9f8
c00116e2:	e8 b5 66 01 00       	call   c0027d9c <LinkedList<UnixFile>::removeFirst()>
c00116e7:	83 c4 10             	add    esp,0x10
c00116ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00116ee:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00116f2:	74 40                	je     c0011734 <UnixFile::~UnixFile()+0x92>
c00116f4:	83 ec 08             	sub    esp,0x8
c00116f7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00116fb:	68 f8 d9 02 c0       	push   0xc002d9f8
c0011700:	e8 bb 65 01 00       	call   c0027cc0 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011705:	83 c4 10             	add    esp,0x10
c0011708:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001170c:	8d 50 01             	lea    edx,[eax+0x1]
c001170f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011713:	3d 88 13 00 00       	cmp    eax,0x1388
c0011718:	0f 94 c0             	sete   al
c001171b:	84 c0                	test   al,al
c001171d:	74 a7                	je     c00116c6 <UnixFile::~UnixFile()+0x24>
c001171f:	83 ec 0c             	sub    esp,0xc
c0011722:	68 ac 9a 02 c0       	push   0xc0029aac
c0011727:	e8 21 85 00 00       	call   c0019c4d <Krnl::panic(char const*)>
c001172c:	83 c4 10             	add    esp,0x10
c001172f:	eb 95                	jmp    c00116c6 <UnixFile::~UnixFile()+0x24>
c0011731:	90                   	nop
c0011732:	eb 01                	jmp    c0011735 <UnixFile::~UnixFile()+0x93>
c0011734:	90                   	nop
c0011735:	90                   	nop
c0011736:	83 c4 1c             	add    esp,0x1c
c0011739:	c3                   	ret    

c001173a <UnixFile::~UnixFile()>:
c001173a:	83 ec 0c             	sub    esp,0xc
c001173d:	83 ec 0c             	sub    esp,0xc
c0011740:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011744:	e8 59 ff ff ff       	call   c00116a2 <UnixFile::~UnixFile()>
c0011749:	83 c4 10             	add    esp,0x10
c001174c:	83 ec 08             	sub    esp,0x8
c001174f:	6a 0c                	push   0xc
c0011751:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011755:	e8 b9 10 00 00       	call   c0012813 <operator delete(void*, unsigned long)>
c001175a:	83 c4 10             	add    esp,0x10
c001175d:	83 c4 0c             	add    esp,0xc
c0011760:	c3                   	ret    
c0011761:	90                   	nop

c0011762 <ReservedFilename::~ReservedFilename()>:
c0011762:	83 ec 0c             	sub    esp,0xc
c0011765:	ba f0 9a 02 c0       	mov    edx,0xc0029af0
c001176a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001176e:	89 10                	mov    DWORD PTR [eax],edx
c0011770:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011774:	83 ec 0c             	sub    esp,0xc
c0011777:	50                   	push   eax
c0011778:	e8 25 ff ff ff       	call   c00116a2 <UnixFile::~UnixFile()>
c001177d:	83 c4 10             	add    esp,0x10
c0011780:	90                   	nop
c0011781:	83 c4 0c             	add    esp,0xc
c0011784:	c3                   	ret    
c0011785:	90                   	nop

c0011786 <ReservedFilename::~ReservedFilename()>:
c0011786:	83 ec 0c             	sub    esp,0xc
c0011789:	83 ec 0c             	sub    esp,0xc
c001178c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011790:	e8 cd ff ff ff       	call   c0011762 <ReservedFilename::~ReservedFilename()>
c0011795:	83 c4 10             	add    esp,0x10
c0011798:	83 ec 08             	sub    esp,0x8
c001179b:	6a 0c                	push   0xc
c001179d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00117a1:	e8 6d 10 00 00       	call   c0012813 <operator delete(void*, unsigned long)>
c00117a6:	83 c4 10             	add    esp,0x10
c00117a9:	83 c4 0c             	add    esp,0xc
c00117ac:	c3                   	ret    

c00117ad <getFromFileDescriptor(int)>:
c00117ad:	53                   	push   ebx
c00117ae:	83 ec 08             	sub    esp,0x8
c00117b1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00117b5:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00117bb:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00117c1:	7f 2c                	jg     c00117ef <getFromFileDescriptor(int)+0x42>
c00117c3:	83 ec 0c             	sub    esp,0xc
c00117c6:	68 f8 d9 02 c0       	push   0xc002d9f8
c00117cb:	e8 c4 65 01 00       	call   c0027d94 <LinkedList<UnixFile>::getFirstElement()>
c00117d0:	83 c4 10             	add    esp,0x10
c00117d3:	85 c0                	test   eax,eax
c00117d5:	75 04                	jne    c00117db <getFromFileDescriptor(int)+0x2e>
c00117d7:	31 c0                	xor    eax,eax
c00117d9:	eb 6e                	jmp    c0011849 <getFromFileDescriptor(int)+0x9c>
c00117db:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00117de:	74 69                	je     c0011849 <getFromFileDescriptor(int)+0x9c>
c00117e0:	52                   	push   edx
c00117e1:	52                   	push   edx
c00117e2:	50                   	push   eax
c00117e3:	68 f8 d9 02 c0       	push   0xc002d9f8
c00117e8:	e8 51 66 01 00       	call   c0027e3e <LinkedList<UnixFile>::getNext(UnixFile*)>
c00117ed:	eb e1                	jmp    c00117d0 <getFromFileDescriptor(int)+0x23>
c00117ef:	a1 ec d9 02 c0       	mov    eax,ds:0xc002d9ec
c00117f4:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00117fa:	74 4d                	je     c0011849 <getFromFileDescriptor(int)+0x9c>
c00117fc:	a1 f0 d9 02 c0       	mov    eax,ds:0xc002d9f0
c0011801:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011807:	74 40                	je     c0011849 <getFromFileDescriptor(int)+0x9c>
c0011809:	a1 e8 d9 02 c0       	mov    eax,ds:0xc002d9e8
c001180e:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011814:	74 33                	je     c0011849 <getFromFileDescriptor(int)+0x9c>
c0011816:	a1 e4 d9 02 c0       	mov    eax,ds:0xc002d9e4
c001181b:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011821:	74 26                	je     c0011849 <getFromFileDescriptor(int)+0x9c>
c0011823:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011829:	83 f8 08             	cmp    eax,0x8
c001182c:	77 09                	ja     c0011837 <getFromFileDescriptor(int)+0x8a>
c001182e:	8b 04 85 c0 d9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2640]
c0011835:	eb 12                	jmp    c0011849 <getFromFileDescriptor(int)+0x9c>
c0011837:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c001183d:	83 fb 08             	cmp    ebx,0x8
c0011840:	77 95                	ja     c00117d7 <getFromFileDescriptor(int)+0x2a>
c0011842:	8b 04 9d 80 d9 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd2680]
c0011849:	83 c4 08             	add    esp,0x8
c001184c:	5b                   	pop    ebx
c001184d:	c3                   	ret    

c001184e <__static_initialization_and_destruction_0(int, int)>:
c001184e:	83 ec 0c             	sub    esp,0xc
c0011851:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011856:	75 34                	jne    c001188c <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011858:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011860:	75 2a                	jne    c001188c <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011862:	83 ec 0c             	sub    esp,0xc
c0011865:	68 f8 d9 02 c0       	push   0xc002d9f8
c001186a:	e8 f9 63 01 00       	call   c0027c68 <LinkedList<UnixFile>::LinkedList()>
c001186f:	83 c4 10             	add    esp,0x10
c0011872:	83 ec 04             	sub    esp,0x4
c0011875:	68 a0 c7 02 c0       	push   0xc002c7a0
c001187a:	68 f8 d9 02 c0       	push   0xc002d9f8
c001187f:	68 66 7c 02 c0       	push   0xc0027c66
c0011884:	e8 04 0f 00 00       	call   c001278d <__cxa_atexit>
c0011889:	83 c4 10             	add    esp,0x10
c001188c:	90                   	nop
c001188d:	83 c4 0c             	add    esp,0xc
c0011890:	c3                   	ret    

c0011891 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011891:	83 ec 0c             	sub    esp,0xc
c0011894:	83 ec 08             	sub    esp,0x8
c0011897:	68 ff ff 00 00       	push   0xffff
c001189c:	6a 01                	push   0x1
c001189e:	e8 ab ff ff ff       	call   c001184e <__static_initialization_and_destruction_0(int, int)>
c00118a3:	83 c4 10             	add    esp,0x10
c00118a6:	83 c4 0c             	add    esp,0xc
c00118a9:	c3                   	ret    

c00118aa <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00118aa:	53                   	push   ebx
c00118ab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00118af:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00118b3:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c00118b9:	89 c8                	mov    eax,ecx
c00118bb:	d1 e8                	shr    eax,1
c00118bd:	03 05 28 c8 02 c0    	add    eax,DWORD PTR ds:0xc002c828
c00118c3:	83 e1 01             	and    ecx,0x1
c00118c6:	8a 10                	mov    dl,BYTE PTR [eax]
c00118c8:	75 09                	jne    c00118d3 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c00118ca:	83 e2 f0             	and    edx,0xfffffff0
c00118cd:	09 da                	or     edx,ebx
c00118cf:	88 10                	mov    BYTE PTR [eax],dl
c00118d1:	5b                   	pop    ebx
c00118d2:	c3                   	ret    
c00118d3:	c1 e3 04             	shl    ebx,0x4
c00118d6:	83 e2 0f             	and    edx,0xf
c00118d9:	09 da                	or     edx,ebx
c00118db:	88 10                	mov    BYTE PTR [eax],dl
c00118dd:	5b                   	pop    ebx
c00118de:	c3                   	ret    

c00118df <Virt::getPageState(unsigned long)>:
c00118df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118e3:	8b 0d 28 c8 02 c0    	mov    ecx,DWORD PTR ds:0xc002c828
c00118e9:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00118ef:	89 d0                	mov    eax,edx
c00118f1:	d1 e8                	shr    eax,1
c00118f3:	83 e2 01             	and    edx,0x1
c00118f6:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00118f9:	75 04                	jne    c00118ff <Virt::getPageState(unsigned long)+0x20>
c00118fb:	83 e0 0f             	and    eax,0xf
c00118fe:	c3                   	ret    
c00118ff:	c0 e8 04             	shr    al,0x4
c0011902:	c3                   	ret    

c0011903 <Virt::allocateKernelVirtualPages(int)>:
c0011903:	55                   	push   ebp
c0011904:	31 ed                	xor    ebp,ebp
c0011906:	57                   	push   edi
c0011907:	56                   	push   esi
c0011908:	53                   	push   ebx
c0011909:	31 db                	xor    ebx,ebx
c001190b:	83 ec 1c             	sub    esp,0x1c
c001190e:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011912:	8b 3d 24 c8 02 c0    	mov    edi,DWORD PTR ds:0xc002c824
c0011918:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001191d:	57                   	push   edi
c001191e:	e8 bc ff ff ff       	call   c00118df <Virt::getPageState(unsigned long)>
c0011923:	5a                   	pop    edx
c0011924:	84 c0                	test   al,al
c0011926:	75 3a                	jne    c0011962 <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011928:	85 db                	test   ebx,ebx
c001192a:	75 02                	jne    c001192e <Virt::allocateKernelVirtualPages(int)+0x2b>
c001192c:	89 fd                	mov    ebp,edi
c001192e:	43                   	inc    ebx
c001192f:	39 f3                	cmp    ebx,esi
c0011931:	74 5a                	je     c001198d <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011933:	47                   	inc    edi
c0011934:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c001193a:	76 31                	jbe    c001196d <Virt::allocateKernelVirtualPages(int)+0x6a>
c001193c:	c7 05 24 c8 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002c824,0xc8000
c0011946:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001194b:	75 28                	jne    c0011975 <Virt::allocateKernelVirtualPages(int)+0x72>
c001194d:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011952:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011957:	57                   	push   edi
c0011958:	e8 82 ff ff ff       	call   c00118df <Virt::getPageState(unsigned long)>
c001195d:	5a                   	pop    edx
c001195e:	84 c0                	test   al,al
c0011960:	74 c6                	je     c0011928 <Virt::allocateKernelVirtualPages(int)+0x25>
c0011962:	31 db                	xor    ebx,ebx
c0011964:	47                   	inc    edi
c0011965:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c001196b:	77 cf                	ja     c001193c <Virt::allocateKernelVirtualPages(int)+0x39>
c001196d:	89 3d 24 c8 02 c0    	mov    DWORD PTR ds:0xc002c824,edi
c0011973:	eb a8                	jmp    c001191d <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011975:	83 ec 0c             	sub    esp,0xc
c0011978:	68 04 9b 02 c0       	push   0xc0029b04
c001197d:	e8 cb 82 00 00       	call   c0019c4d <Krnl::panic(char const*)>
c0011982:	8b 3d 24 c8 02 c0    	mov    edi,DWORD PTR ds:0xc002c824
c0011988:	83 c4 10             	add    esp,0x10
c001198b:	eb 90                	jmp    c001191d <Virt::allocateKernelVirtualPages(int)+0x1a>
c001198d:	89 2d 24 c8 02 c0    	mov    DWORD PTR ds:0xc002c824,ebp
c0011993:	4b                   	dec    ebx
c0011994:	74 5f                	je     c00119f5 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011996:	85 f6                	test   esi,esi
c0011998:	74 3d                	je     c00119d7 <Virt::allocateKernelVirtualPages(int)+0xd4>
c001199a:	89 e8                	mov    eax,ebp
c001199c:	31 db                	xor    ebx,ebx
c001199e:	8d 7e ff             	lea    edi,[esi-0x1]
c00119a1:	eb 14                	jmp    c00119b7 <Virt::allocateKernelVirtualPages(int)+0xb4>
c00119a3:	6a 01                	push   0x1
c00119a5:	43                   	inc    ebx
c00119a6:	50                   	push   eax
c00119a7:	e8 fe fe ff ff       	call   c00118aa <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00119ac:	58                   	pop    eax
c00119ad:	39 f3                	cmp    ebx,esi
c00119af:	5a                   	pop    edx
c00119b0:	74 25                	je     c00119d7 <Virt::allocateKernelVirtualPages(int)+0xd4>
c00119b2:	a1 24 c8 02 c0       	mov    eax,ds:0xc002c824
c00119b7:	8d 50 01             	lea    edx,[eax+0x1]
c00119ba:	85 db                	test   ebx,ebx
c00119bc:	89 15 24 c8 02 c0    	mov    DWORD PTR ds:0xc002c824,edx
c00119c2:	74 20                	je     c00119e4 <Virt::allocateKernelVirtualPages(int)+0xe1>
c00119c4:	39 df                	cmp    edi,ebx
c00119c6:	75 db                	jne    c00119a3 <Virt::allocateKernelVirtualPages(int)+0xa0>
c00119c8:	6a 03                	push   0x3
c00119ca:	43                   	inc    ebx
c00119cb:	50                   	push   eax
c00119cc:	e8 d9 fe ff ff       	call   c00118aa <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00119d1:	59                   	pop    ecx
c00119d2:	39 f3                	cmp    ebx,esi
c00119d4:	58                   	pop    eax
c00119d5:	75 db                	jne    c00119b2 <Virt::allocateKernelVirtualPages(int)+0xaf>
c00119d7:	83 c4 1c             	add    esp,0x1c
c00119da:	89 e8                	mov    eax,ebp
c00119dc:	5b                   	pop    ebx
c00119dd:	c1 e0 0c             	shl    eax,0xc
c00119e0:	5e                   	pop    esi
c00119e1:	5f                   	pop    edi
c00119e2:	5d                   	pop    ebp
c00119e3:	c3                   	ret    
c00119e4:	6a 02                	push   0x2
c00119e6:	bb 01 00 00 00       	mov    ebx,0x1
c00119eb:	50                   	push   eax
c00119ec:	e8 b9 fe ff ff       	call   c00118aa <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00119f1:	58                   	pop    eax
c00119f2:	5a                   	pop    edx
c00119f3:	eb bd                	jmp    c00119b2 <Virt::allocateKernelVirtualPages(int)+0xaf>
c00119f5:	6a 04                	push   0x4
c00119f7:	8d 45 01             	lea    eax,[ebp+0x1]
c00119fa:	55                   	push   ebp
c00119fb:	a3 24 c8 02 c0       	mov    ds:0xc002c824,eax
c0011a00:	e8 a5 fe ff ff       	call   c00118aa <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011a05:	59                   	pop    ecx
c0011a06:	89 e8                	mov    eax,ebp
c0011a08:	5b                   	pop    ebx
c0011a09:	c1 e0 0c             	shl    eax,0xc
c0011a0c:	83 c4 1c             	add    esp,0x1c
c0011a0f:	5b                   	pop    ebx
c0011a10:	5e                   	pop    esi
c0011a11:	5f                   	pop    edi
c0011a12:	5d                   	pop    ebp
c0011a13:	c3                   	ret    

c0011a14 <Virt::virtualMemorySetup()>:
c0011a14:	53                   	push   ebx
c0011a15:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011a1a:	83 ec 08             	sub    esp,0x8
c0011a1d:	6a 0f                	push   0xf
c0011a1f:	53                   	push   ebx
c0011a20:	43                   	inc    ebx
c0011a21:	e8 84 fe ff ff       	call   c00118aa <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011a26:	59                   	pop    ecx
c0011a27:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011a2d:	58                   	pop    eax
c0011a2e:	75 ed                	jne    c0011a1d <Virt::virtualMemorySetup()+0x9>
c0011a30:	83 ec 08             	sub    esp,0x8
c0011a33:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011a38:	68 00 00 00 c8       	push   0xc8000000
c0011a3d:	68 8b 9c 02 c0       	push   0xc0029c8b
c0011a42:	e8 ac 0e 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0011a47:	58                   	pop    eax
c0011a48:	5a                   	pop    edx
c0011a49:	68 00 f0 ff ef       	push   0xeffff000
c0011a4e:	68 9f 9c 02 c0       	push   0xc0029c9f
c0011a53:	e8 9b 0e 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0011a58:	83 c4 10             	add    esp,0x10
c0011a5b:	83 ec 08             	sub    esp,0x8
c0011a5e:	6a 00                	push   0x0
c0011a60:	53                   	push   ebx
c0011a61:	43                   	inc    ebx
c0011a62:	e8 43 fe ff ff       	call   c00118aa <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011a67:	83 c4 10             	add    esp,0x10
c0011a6a:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011a70:	75 e9                	jne    c0011a5b <Virt::virtualMemorySetup()+0x47>
c0011a72:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011a77:	83 ec 08             	sub    esp,0x8
c0011a7a:	6a 0f                	push   0xf
c0011a7c:	53                   	push   ebx
c0011a7d:	43                   	inc    ebx
c0011a7e:	e8 27 fe ff ff       	call   c00118aa <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011a83:	83 c4 10             	add    esp,0x10
c0011a86:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011a8c:	75 e9                	jne    c0011a77 <Virt::virtualMemorySetup()+0x63>
c0011a8e:	83 c4 08             	add    esp,0x8
c0011a91:	5b                   	pop    ebx
c0011a92:	c3                   	ret    

c0011a93 <Virt::getAKernelVAS()>:
c0011a93:	a1 04 da 02 c0       	mov    eax,ds:0xc002da04
c0011a98:	c3                   	ret    

c0011a99 <Virt::setupPageSwapping(int)>:
c0011a99:	57                   	push   edi
c0011a9a:	56                   	push   esi
c0011a9b:	53                   	push   ebx
c0011a9c:	83 ec 1c             	sub    esp,0x1c
c0011a9f:	68 14 01 00 00       	push   0x114
c0011aa4:	e8 7b db ff ff       	call   c000f624 <malloc>
c0011aa9:	83 c4 0c             	add    esp,0xc
c0011aac:	89 c6                	mov    esi,eax
c0011aae:	ff 35 d4 ed 02 c0    	push   DWORD PTR ds:0xc002edd4
c0011ab4:	68 b3 9c 02 c0       	push   0xc0029cb3
c0011ab9:	50                   	push   eax
c0011aba:	e8 8d 13 00 00       	call   c0012e4c <File::File(char const*, Process*)>
c0011abf:	89 34 24             	mov    DWORD PTR [esp],esi
c0011ac2:	e8 61 15 00 00       	call   c0013028 <File::unlink()>
c0011ac7:	58                   	pop    eax
c0011ac8:	5a                   	pop    edx
c0011ac9:	6a 12                	push   0x12
c0011acb:	56                   	push   esi
c0011acc:	e8 df 13 00 00       	call   c0012eb0 <File::open(FileOpenMode)>
c0011ad1:	83 c4 10             	add    esp,0x10
c0011ad4:	85 c0                	test   eax,eax
c0011ad6:	0f 85 ca 00 00 00    	jne    c0011ba6 <Virt::setupPageSwapping(int)+0x10d>
c0011adc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011ae0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011ae8:	c1 e3 08             	shl    ebx,0x8
c0011aeb:	83 ec 0c             	sub    esp,0xc
c0011aee:	68 00 00 01 00       	push   0x10000
c0011af3:	e8 2c db ff ff       	call   c000f624 <malloc>
c0011af8:	83 c4 0c             	add    esp,0xc
c0011afb:	89 c7                	mov    edi,eax
c0011afd:	68 00 00 01 00       	push   0x10000
c0011b02:	6a 00                	push   0x0
c0011b04:	50                   	push   eax
c0011b05:	e8 ba eb fe ff       	call   c00006c4 <memset>
c0011b0a:	83 c4 10             	add    esp,0x10
c0011b0d:	85 db                	test   ebx,ebx
c0011b0f:	79 03                	jns    c0011b14 <Virt::setupPageSwapping(int)+0x7b>
c0011b11:	83 c3 0f             	add    ebx,0xf
c0011b14:	c1 fb 04             	sar    ebx,0x4
c0011b17:	4b                   	dec    ebx
c0011b18:	83 fb ff             	cmp    ebx,0xffffffff
c0011b1b:	74 4b                	je     c0011b68 <Virt::setupPageSwapping(int)+0xcf>
c0011b1d:	83 ec 0c             	sub    esp,0xc
c0011b20:	8b 06                	mov    eax,DWORD PTR [esi]
c0011b22:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011b26:	52                   	push   edx
c0011b27:	57                   	push   edi
c0011b28:	6a 00                	push   0x0
c0011b2a:	68 00 00 01 00       	push   0x10000
c0011b2f:	56                   	push   esi
c0011b30:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011b33:	83 c4 20             	add    esp,0x20
c0011b36:	85 c0                	test   eax,eax
c0011b38:	75 59                	jne    c0011b93 <Virt::setupPageSwapping(int)+0xfa>
c0011b3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b3e:	3d 00 00 01 00       	cmp    eax,0x10000
c0011b43:	74 d2                	je     c0011b17 <Virt::setupPageSwapping(int)+0x7e>
c0011b45:	83 ec 08             	sub    esp,0x8
c0011b48:	4b                   	dec    ebx
c0011b49:	50                   	push   eax
c0011b4a:	68 06 9d 02 c0       	push   0xc0029d06
c0011b4f:	e8 9f 0d 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0011b54:	c7 04 24 0f 9d 02 c0 	mov    DWORD PTR [esp],0xc0029d0f
c0011b5b:	e8 ed 80 00 00       	call   c0019c4d <Krnl::panic(char const*)>
c0011b60:	83 c4 10             	add    esp,0x10
c0011b63:	83 fb ff             	cmp    ebx,0xffffffff
c0011b66:	75 b5                	jne    c0011b1d <Virt::setupPageSwapping(int)+0x84>
c0011b68:	83 ec 0c             	sub    esp,0xc
c0011b6b:	56                   	push   esi
c0011b6c:	e8 9d 13 00 00       	call   c0012f0e <File::close()>
c0011b71:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011b74:	e8 cb da ff ff       	call   c000f644 <rfree>
c0011b79:	83 c4 10             	add    esp,0x10
c0011b7c:	85 f6                	test   esi,esi
c0011b7e:	74 0c                	je     c0011b8c <Virt::setupPageSwapping(int)+0xf3>
c0011b80:	83 ec 0c             	sub    esp,0xc
c0011b83:	8b 06                	mov    eax,DWORD PTR [esi]
c0011b85:	56                   	push   esi
c0011b86:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011b89:	83 c4 10             	add    esp,0x10
c0011b8c:	83 c4 10             	add    esp,0x10
c0011b8f:	5b                   	pop    ebx
c0011b90:	5e                   	pop    esi
c0011b91:	5f                   	pop    edi
c0011b92:	c3                   	ret    
c0011b93:	83 ec 08             	sub    esp,0x8
c0011b96:	50                   	push   eax
c0011b97:	68 ee 9c 02 c0       	push   0xc0029cee
c0011b9c:	e8 52 0d 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0011ba1:	83 c4 10             	add    esp,0x10
c0011ba4:	eb 94                	jmp    c0011b3a <Virt::setupPageSwapping(int)+0xa1>
c0011ba6:	83 ec 08             	sub    esp,0x8
c0011ba9:	50                   	push   eax
c0011baa:	68 ca 9c 02 c0       	push   0xc0029cca
c0011baf:	e8 3f 0d 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0011bb4:	c7 04 24 d3 9c 02 c0 	mov    DWORD PTR [esp],0xc0029cd3
c0011bbb:	e8 8d 80 00 00       	call   c0019c4d <Krnl::panic(char const*)>
c0011bc0:	83 c4 10             	add    esp,0x10
c0011bc3:	e9 14 ff ff ff       	jmp    c0011adc <Virt::setupPageSwapping(int)+0x43>

c0011bc8 <VAS::VAS()>:
c0011bc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bcc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011bd3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bd7:	a3 04 da 02 c0       	mov    ds:0xc002da04,eax
c0011bdc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011be0:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011be4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011be8:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011beb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bef:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c0011bf6:	90                   	nop
c0011bf7:	c3                   	ret    

c0011bf8 <VAS::VAS(VAS*)>:
c0011bf8:	83 ec 0c             	sub    esp,0xc
c0011bfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011bff:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011c06:	83 ec 0c             	sub    esp,0xc
c0011c09:	68 24 9b 02 c0       	push   0xc0029b24
c0011c0e:	e8 3a 80 00 00       	call   c0019c4d <Krnl::panic(char const*)>
c0011c13:	83 c4 10             	add    esp,0x10
c0011c16:	90                   	nop
c0011c17:	83 c4 0c             	add    esp,0xc
c0011c1a:	c3                   	ret    
c0011c1b:	90                   	nop

c0011c1c <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011c1c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c20:	89 c2                	mov    edx,eax
c0011c22:	c1 e8 0a             	shr    eax,0xa
c0011c25:	c1 ea 16             	shr    edx,0x16
c0011c28:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011c2d:	19 c9                	sbb    ecx,ecx
c0011c2f:	c1 e2 0c             	shl    edx,0xc
c0011c32:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011c38:	25 fc 0f 00 00       	and    eax,0xffc
c0011c3d:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011c44:	01 d0                	add    eax,edx
c0011c46:	c3                   	ret    
c0011c47:	90                   	nop

c0011c48 <VAS::getPageTableEntry(unsigned long)>:
c0011c48:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011c4c:	89 ca                	mov    edx,ecx
c0011c4e:	c1 e9 0a             	shr    ecx,0xa
c0011c51:	c1 ea 16             	shr    edx,0x16
c0011c54:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011c5a:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011c60:	c1 e0 0c             	shl    eax,0xc
c0011c63:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011c66:	c3                   	ret    

c0011c67 <Virt::freeKernelVirtualPages(unsigned long)>:
c0011c67:	57                   	push   edi
c0011c68:	56                   	push   esi
c0011c69:	be 01 00 00 00       	mov    esi,0x1
c0011c6e:	53                   	push   ebx
c0011c6f:	83 ec 10             	sub    esp,0x10
c0011c72:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011c76:	c1 eb 0c             	shr    ebx,0xc
c0011c79:	eb 3f                	jmp    c0011cba <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011c7b:	e8 13 fe ff ff       	call   c0011a93 <Virt::getAKernelVAS()>
c0011c80:	83 ec 08             	sub    esp,0x8
c0011c83:	57                   	push   edi
c0011c84:	50                   	push   eax
c0011c85:	e8 be ff ff ff       	call   c0011c48 <VAS::getPageTableEntry(unsigned long)>
c0011c8a:	83 c4 10             	add    esp,0x10
c0011c8d:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c8f:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011c93:	f6 c4 04             	test   ah,0x4
c0011c96:	75 5f                	jne    c0011cf7 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011c98:	80 fa 04             	cmp    dl,0x4
c0011c9b:	74 78                	je     c0011d15 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011c9d:	80 fa 02             	cmp    dl,0x2
c0011ca0:	0f 84 88 00 00 00    	je     c0011d2e <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011ca6:	80 fa 03             	cmp    dl,0x3
c0011ca9:	0f 84 ad 00 00 00    	je     c0011d5c <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011caf:	fe ca                	dec    dl
c0011cb1:	0f 84 92 00 00 00    	je     c0011d49 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011cb7:	43                   	inc    ebx
c0011cb8:	31 f6                	xor    esi,esi
c0011cba:	53                   	push   ebx
c0011cbb:	e8 1f fc ff ff       	call   c00118df <Virt::getPageState(unsigned long)>
c0011cc0:	5f                   	pop    edi
c0011cc1:	89 df                	mov    edi,ebx
c0011cc3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011cc7:	c1 e7 0c             	shl    edi,0xc
c0011cca:	84 c0                	test   al,al
c0011ccc:	75 ad                	jne    c0011c7b <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011cce:	83 ec 0c             	sub    esp,0xc
c0011cd1:	68 15 9d 02 c0       	push   0xc0029d15
c0011cd6:	e8 72 7f 00 00       	call   c0019c4d <Krnl::panic(char const*)>
c0011cdb:	e8 b3 fd ff ff       	call   c0011a93 <Virt::getAKernelVAS()>
c0011ce0:	5a                   	pop    edx
c0011ce1:	59                   	pop    ecx
c0011ce2:	57                   	push   edi
c0011ce3:	50                   	push   eax
c0011ce4:	e8 5f ff ff ff       	call   c0011c48 <VAS::getPageTableEntry(unsigned long)>
c0011ce9:	83 c4 10             	add    esp,0x10
c0011cec:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cee:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011cf2:	f6 c4 04             	test   ah,0x4
c0011cf5:	74 c0                	je     c0011cb7 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011cf7:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0011cfb:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011d00:	83 ec 0c             	sub    esp,0xc
c0011d03:	50                   	push   eax
c0011d04:	e8 2e df ff ff       	call   c000fc37 <Phys::freePage(unsigned long)>
c0011d09:	83 c4 10             	add    esp,0x10
c0011d0c:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011d10:	80 fa 04             	cmp    dl,0x4
c0011d13:	75 88                	jne    c0011c9d <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011d15:	89 f0                	mov    eax,esi
c0011d17:	84 c0                	test   al,al
c0011d19:	75 47                	jne    c0011d62 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011d1b:	c7 44 24 20 48 9b 02 c0 	mov    DWORD PTR [esp+0x20],0xc0029b48
c0011d23:	83 c4 10             	add    esp,0x10
c0011d26:	5b                   	pop    ebx
c0011d27:	5e                   	pop    esi
c0011d28:	5f                   	pop    edi
c0011d29:	e9 1f 7f 00 00       	jmp    c0019c4d <Krnl::panic(char const*)>
c0011d2e:	89 f0                	mov    eax,esi
c0011d30:	84 c0                	test   al,al
c0011d32:	75 15                	jne    c0011d49 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011d34:	83 ec 0c             	sub    esp,0xc
c0011d37:	68 31 9d 02 c0       	push   0xc0029d31
c0011d3c:	e8 0c 7f 00 00       	call   c0019c4d <Krnl::panic(char const*)>
c0011d41:	83 c4 10             	add    esp,0x10
c0011d44:	e9 6e ff ff ff       	jmp    c0011cb7 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011d49:	83 ec 08             	sub    esp,0x8
c0011d4c:	6a 00                	push   0x0
c0011d4e:	53                   	push   ebx
c0011d4f:	e8 56 fb ff ff       	call   c00118aa <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d54:	83 c4 10             	add    esp,0x10
c0011d57:	e9 5b ff ff ff       	jmp    c0011cb7 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011d5c:	89 f0                	mov    eax,esi
c0011d5e:	84 c0                	test   al,al
c0011d60:	75 15                	jne    c0011d77 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011d62:	83 ec 08             	sub    esp,0x8
c0011d65:	6a 00                	push   0x0
c0011d67:	53                   	push   ebx
c0011d68:	e8 3d fb ff ff       	call   c00118aa <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d6d:	83 c4 10             	add    esp,0x10
c0011d70:	83 c4 10             	add    esp,0x10
c0011d73:	5b                   	pop    ebx
c0011d74:	5e                   	pop    esi
c0011d75:	5f                   	pop    edi
c0011d76:	c3                   	ret    
c0011d77:	c7 44 24 20 4d 9d 02 c0 	mov    DWORD PTR [esp+0x20],0xc0029d4d
c0011d7f:	83 c4 10             	add    esp,0x10
c0011d82:	5b                   	pop    ebx
c0011d83:	5e                   	pop    esi
c0011d84:	5f                   	pop    edi
c0011d85:	e9 c3 7e 00 00       	jmp    c0019c4d <Krnl::panic(char const*)>

c0011d8a <VAS::freeAllocatedPages(unsigned long)>:
c0011d8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011d8e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011d92:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011d96:	74 09                	je     c0011da1 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011d98:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011d9c:	e9 c6 fe ff ff       	jmp    c0011c67 <Virt::freeKernelVirtualPages(unsigned long)>
c0011da1:	c7 44 24 04 6c 9b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0029b6c
c0011da9:	e9 45 0b 00 00       	jmp    c00128f3 <Dbg::kprintf(char const*, ...)>

c0011dae <VAS::virtualToPhysical(unsigned long)>:
c0011dae:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011db2:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011db6:	e8 8d fe ff ff       	call   c0011c48 <VAS::getPageTableEntry(unsigned long)>
c0011dbb:	5a                   	pop    edx
c0011dbc:	8b 00                	mov    eax,DWORD PTR [eax]
c0011dbe:	59                   	pop    ecx
c0011dbf:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011dc4:	c3                   	ret    
c0011dc5:	90                   	nop

c0011dc6 <VAS::reflagRange(unsigned long, int, int, int)>:
c0011dc6:	55                   	push   ebp
c0011dc7:	57                   	push   edi
c0011dc8:	56                   	push   esi
c0011dc9:	53                   	push   ebx
c0011dca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0011dce:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0011dd2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0011dd6:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011dda:	85 db                	test   ebx,ebx
c0011ddc:	7e 22                	jle    c0011e00 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0011dde:	c1 e3 0c             	shl    ebx,0xc
c0011de1:	01 f3                	add    ebx,esi
c0011de3:	56                   	push   esi
c0011de4:	81 c6 00 10 00 00    	add    esi,0x1000
c0011dea:	55                   	push   ebp
c0011deb:	e8 58 fe ff ff       	call   c0011c48 <VAS::getPageTableEntry(unsigned long)>
c0011df0:	5a                   	pop    edx
c0011df1:	59                   	pop    ecx
c0011df2:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011df4:	21 f9                	and    ecx,edi
c0011df6:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0011dfa:	39 f3                	cmp    ebx,esi
c0011dfc:	89 08                	mov    DWORD PTR [eax],ecx
c0011dfe:	75 e3                	jne    c0011de3 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0011e00:	5b                   	pop    ebx
c0011e01:	5e                   	pop    esi
c0011e02:	5f                   	pop    edi
c0011e03:	5d                   	pop    ebp
c0011e04:	c3                   	ret    
c0011e05:	90                   	nop

c0011e06 <VAS::setToWriteCombining(unsigned long, int)>:
c0011e06:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c0011e0b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011e11:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c0011e18:	75 01                	jne    c0011e1b <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0011e1a:	c3                   	ret    
c0011e1b:	68 80 00 00 00       	push   0x80
c0011e20:	6a ff                	push   0xffffffff
c0011e22:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011e26:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011e2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011e2e:	e8 93 ff ff ff       	call   c0011dc6 <VAS::reflagRange(unsigned long, int, int, int)>
c0011e33:	83 c4 14             	add    esp,0x14
c0011e36:	c3                   	ret    
c0011e37:	90                   	nop

c0011e38 <VAS::mapOtherVASIn(bool, VAS*)>:
c0011e38:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011e3d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011e41:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0011e44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e48:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0011e4b:	19 c0                	sbb    eax,eax
c0011e4d:	83 ca 03             	or     edx,0x3
c0011e50:	83 e0 fc             	and    eax,0xfffffffc
c0011e53:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0011e5a:	0f 20 d8             	mov    eax,cr3
c0011e5d:	0f 22 d8             	mov    cr3,eax
c0011e60:	c3                   	ret    
c0011e61:	90                   	nop

c0011e62 <VAS::~VAS()>:
c0011e62:	83 ec 2c             	sub    esp,0x2c
c0011e65:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011e6d:	e8 12 b4 00 00       	call   c001d284 <lockScheduler()>
c0011e72:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011e77:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e79:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011e7c:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011e82:	83 ec 04             	sub    esp,0x4
c0011e85:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011e89:	6a 01                	push   0x1
c0011e8b:	50                   	push   eax
c0011e8c:	e8 a7 ff ff ff       	call   c0011e38 <VAS::mapOtherVASIn(bool, VAS*)>
c0011e91:	83 c4 10             	add    esp,0x10
c0011e94:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011e9c:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0011ea4:	0f 8f d7 00 00 00    	jg     c0011f81 <VAS::~VAS()+0x11f>
c0011eaa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011eae:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011eb1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011eb5:	c1 e2 02             	shl    edx,0x2
c0011eb8:	01 d0                	add    eax,edx
c0011eba:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ebc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011ec0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ec4:	83 e0 01             	and    eax,0x1
c0011ec7:	0f 84 ab 00 00 00    	je     c0011f78 <VAS::~VAS()+0x116>
c0011ecd:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011ed5:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0011edd:	7f 75                	jg     c0011f54 <VAS::~VAS()+0xf2>
c0011edf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011ee3:	c1 e0 0a             	shl    eax,0xa
c0011ee6:	89 c2                	mov    edx,eax
c0011ee8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011eec:	01 d0                	add    eax,edx
c0011eee:	c1 e0 0c             	shl    eax,0xc
c0011ef1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011ef5:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011efa:	8b 00                	mov    eax,DWORD PTR [eax]
c0011efc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011eff:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011f05:	83 ec 04             	sub    esp,0x4
c0011f08:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011f0c:	6a 01                	push   0x1
c0011f0e:	50                   	push   eax
c0011f0f:	e8 08 fd ff ff       	call   c0011c1c <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0011f14:	83 c4 10             	add    esp,0x10
c0011f17:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011f1b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011f1f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011f21:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011f25:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f29:	25 01 04 00 00       	and    eax,0x401
c0011f2e:	3d 01 04 00 00       	cmp    eax,0x401
c0011f33:	75 19                	jne    c0011f4e <VAS::~VAS()+0xec>
c0011f35:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f39:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011f3e:	83 ec 0c             	sub    esp,0xc
c0011f41:	50                   	push   eax
c0011f42:	e8 f0 dc ff ff       	call   c000fc37 <Phys::freePage(unsigned long)>
c0011f47:	83 c4 10             	add    esp,0x10
c0011f4a:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011f4e:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0011f52:	eb 81                	jmp    c0011ed5 <VAS::~VAS()+0x73>
c0011f54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f58:	25 00 04 00 00       	and    eax,0x400
c0011f5d:	74 19                	je     c0011f78 <VAS::~VAS()+0x116>
c0011f5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f63:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011f68:	83 ec 0c             	sub    esp,0xc
c0011f6b:	50                   	push   eax
c0011f6c:	e8 c6 dc ff ff       	call   c000fc37 <Phys::freePage(unsigned long)>
c0011f71:	83 c4 10             	add    esp,0x10
c0011f74:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011f78:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011f7c:	e9 1b ff ff ff       	jmp    c0011e9c <VAS::~VAS()+0x3a>
c0011f81:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f85:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011f88:	83 ec 0c             	sub    esp,0xc
c0011f8b:	50                   	push   eax
c0011f8c:	e8 d6 fc ff ff       	call   c0011c67 <Virt::freeKernelVirtualPages(unsigned long)>
c0011f91:	83 c4 10             	add    esp,0x10
c0011f94:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f98:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011f9b:	83 ec 0c             	sub    esp,0xc
c0011f9e:	50                   	push   eax
c0011f9f:	e8 93 dc ff ff       	call   c000fc37 <Phys::freePage(unsigned long)>
c0011fa4:	83 c4 10             	add    esp,0x10
c0011fa7:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011fab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011faf:	c1 e0 02             	shl    eax,0x2
c0011fb2:	83 ec 08             	sub    esp,0x8
c0011fb5:	50                   	push   eax
c0011fb6:	68 90 9b 02 c0       	push   0xc0029b90
c0011fbb:	e8 33 09 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0011fc0:	83 c4 10             	add    esp,0x10
c0011fc3:	e8 be b2 00 00       	call   c001d286 <unlockScheduler()>
c0011fc8:	90                   	nop
c0011fc9:	83 c4 2c             	add    esp,0x2c
c0011fcc:	c3                   	ret    
c0011fcd:	90                   	nop

c0011fce <VAS::mapPage(unsigned long, unsigned long, int)>:
c0011fce:	55                   	push   ebp
c0011fcf:	57                   	push   edi
c0011fd0:	56                   	push   esi
c0011fd1:	53                   	push   ebx
c0011fd2:	83 ec 1c             	sub    esp,0x1c
c0011fd5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011fd9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011fdd:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0011fe3:	77 08                	ja     c0011fed <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0011fe5:	0f 20 d8             	mov    eax,cr3
c0011fe8:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c0011feb:	75 47                	jne    c0012034 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0011fed:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011ff1:	09 d8                	or     eax,ebx
c0011ff3:	a9 ff 0f 00 00       	test   eax,0xfff
c0011ff8:	75 57                	jne    c0012051 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0011ffa:	89 de                	mov    esi,ebx
c0011ffc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011fff:	c1 ee 16             	shr    esi,0x16
c0012002:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0012009:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c001200d:	74 54                	je     c0012063 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c001200f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012013:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0012019:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c001201d:	c1 e6 0c             	shl    esi,0xc
c0012020:	c1 eb 0a             	shr    ebx,0xa
c0012023:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0012029:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c001202c:	83 c4 1c             	add    esp,0x1c
c001202f:	5b                   	pop    ebx
c0012030:	5e                   	pop    esi
c0012031:	5f                   	pop    edi
c0012032:	5d                   	pop    ebp
c0012033:	c3                   	ret    
c0012034:	83 ec 0c             	sub    esp,0xc
c0012037:	68 b0 9b 02 c0       	push   0xc0029bb0
c001203c:	e8 b2 08 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0012041:	83 c4 10             	add    esp,0x10
c0012044:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012048:	09 d8                	or     eax,ebx
c001204a:	a9 ff 0f 00 00       	test   eax,0xfff
c001204f:	74 a9                	je     c0011ffa <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0012051:	83 ec 0c             	sub    esp,0xc
c0012054:	68 18 9c 02 c0       	push   0xc0029c18
c0012059:	e8 ef 7b 00 00       	call   c0019c4d <Krnl::panic(char const*)>
c001205e:	83 c4 10             	add    esp,0x10
c0012061:	eb 97                	jmp    c0011ffa <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0012063:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012067:	e8 55 dc ff ff       	call   c000fcc1 <Phys::allocatePage()>
c001206c:	89 c5                	mov    ebp,eax
c001206e:	e8 20 fa ff ff       	call   c0011a93 <Virt::getAKernelVAS()>
c0012073:	83 ec 0c             	sub    esp,0xc
c0012076:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001207a:	6a 01                	push   0x1
c001207c:	e8 82 f8 ff ff       	call   c0011903 <Virt::allocateKernelVirtualPages(int)>
c0012081:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012088:	6a 01                	push   0x1
c001208a:	50                   	push   eax
c001208b:	55                   	push   ebp
c001208c:	81 cd 07 04 00 00    	or     ebp,0x407
c0012092:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012096:	51                   	push   ecx
c0012097:	e8 26 02 00 00       	call   c00122c2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001209c:	83 c4 1c             	add    esp,0x1c
c001209f:	68 00 10 00 00       	push   0x1000
c00120a4:	6a 00                	push   0x0
c00120a6:	50                   	push   eax
c00120a7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00120ab:	e8 14 e6 fe ff       	call   c00006c4 <memset>
c00120b0:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00120b4:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00120b7:	e8 ab fb ff ff       	call   c0011c67 <Virt::freeKernelVirtualPages(unsigned long)>
c00120bc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00120c0:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00120c3:	83 c4 10             	add    esp,0x10
c00120c6:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c00120c9:	e9 41 ff ff ff       	jmp    c001200f <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c00120ce <VAS::allocatePages(int, int)>:
c00120ce:	55                   	push   ebp
c00120cf:	57                   	push   edi
c00120d0:	56                   	push   esi
c00120d1:	53                   	push   ebx
c00120d2:	83 ec 1c             	sub    esp,0x1c
c00120d5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00120d9:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c00120de:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00120e4:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c00120ea:	83 e0 01             	and    eax,0x1
c00120ed:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c00120f1:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00120f5:	0f 85 cc 00 00 00    	jne    c00121c7 <VAS::allocatePages(int, int)+0xf9>
c00120fb:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00120fe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012102:	85 c0                	test   eax,eax
c0012104:	0f 84 a1 00 00 00    	je     c00121ab <VAS::allocatePages(int, int)+0xdd>
c001210a:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001210e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012112:	c1 e6 0c             	shl    esi,0xc
c0012115:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0012119:	85 c0                	test   eax,eax
c001211b:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c001211e:	7e 33                	jle    c0012153 <VAS::allocatePages(int, int)+0x85>
c0012120:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0012124:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012128:	81 cd 00 04 00 00    	or     ebp,0x400
c001212e:	e8 8e db ff ff       	call   c000fcc1 <Phys::allocatePage()>
c0012133:	55                   	push   ebp
c0012134:	53                   	push   ebx
c0012135:	50                   	push   eax
c0012136:	57                   	push   edi
c0012137:	e8 92 fe ff ff       	call   c0011fce <VAS::mapPage(unsigned long, unsigned long, int)>
c001213c:	83 c4 10             	add    esp,0x10
c001213f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012144:	74 03                	je     c0012149 <VAS::allocatePages(int, int)+0x7b>
c0012146:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012149:	81 c3 00 10 00 00    	add    ebx,0x1000
c001214f:	39 de                	cmp    esi,ebx
c0012151:	75 db                	jne    c001212e <VAS::allocatePages(int, int)+0x60>
c0012153:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012158:	75 12                	jne    c001216c <VAS::allocatePages(int, int)+0x9e>
c001215a:	0f 20 d8             	mov    eax,cr3
c001215d:	0f 22 d8             	mov    cr3,eax
c0012160:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012164:	83 c4 1c             	add    esp,0x1c
c0012167:	5b                   	pop    ebx
c0012168:	5e                   	pop    esi
c0012169:	5f                   	pop    edi
c001216a:	5d                   	pop    ebp
c001216b:	c3                   	ret    
c001216c:	c1 ee 0a             	shr    esi,0xa
c001216f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012173:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0012179:	c1 eb 0a             	shr    ebx,0xa
c001217c:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0012182:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012188:	81 eb 00 00 40 00    	sub    ebx,0x400000
c001218e:	39 c3                	cmp    ebx,eax
c0012190:	77 ce                	ja     c0012160 <VAS::allocatePages(int, int)+0x92>
c0012192:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012195:	81 c3 00 10 00 00    	add    ebx,0x1000
c001219b:	39 d8                	cmp    eax,ebx
c001219d:	73 f3                	jae    c0012192 <VAS::allocatePages(int, int)+0xc4>
c001219f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00121a3:	83 c4 1c             	add    esp,0x1c
c00121a6:	5b                   	pop    ebx
c00121a7:	5e                   	pop    esi
c00121a8:	5f                   	pop    edi
c00121a9:	5d                   	pop    ebp
c00121aa:	c3                   	ret    
c00121ab:	83 ec 0c             	sub    esp,0xc
c00121ae:	68 3c 9c 02 c0       	push   0xc0029c3c
c00121b3:	e8 95 7a 00 00       	call   c0019c4d <Krnl::panic(char const*)>
c00121b8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00121bb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00121bf:	83 c4 10             	add    esp,0x10
c00121c2:	e9 43 ff ff ff       	jmp    c001210a <VAS::allocatePages(int, int)+0x3c>
c00121c7:	83 ec 0c             	sub    esp,0xc
c00121ca:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00121ce:	e8 30 f7 ff ff       	call   c0011903 <Virt::allocateKernelVirtualPages(int)>
c00121d3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00121d7:	83 c4 10             	add    esp,0x10
c00121da:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c00121df:	0f 87 9b 00 00 00    	ja     c0012280 <VAS::allocatePages(int, int)+0x1b2>
c00121e5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00121e9:	85 d2                	test   edx,edx
c00121eb:	7e 3c                	jle    c0012229 <VAS::allocatePages(int, int)+0x15b>
c00121ed:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00121f1:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00121f5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00121f9:	c1 e5 0c             	shl    ebp,0xc
c00121fc:	81 ce 00 04 00 00    	or     esi,0x400
c0012202:	01 dd                	add    ebp,ebx
c0012204:	e8 b8 da ff ff       	call   c000fcc1 <Phys::allocatePage()>
c0012209:	56                   	push   esi
c001220a:	53                   	push   ebx
c001220b:	50                   	push   eax
c001220c:	57                   	push   edi
c001220d:	e8 bc fd ff ff       	call   c0011fce <VAS::mapPage(unsigned long, unsigned long, int)>
c0012212:	83 c4 10             	add    esp,0x10
c0012215:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001221a:	74 03                	je     c001221f <VAS::allocatePages(int, int)+0x151>
c001221c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001221f:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012225:	39 dd                	cmp    ebp,ebx
c0012227:	75 db                	jne    c0012204 <VAS::allocatePages(int, int)+0x136>
c0012229:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001222e:	0f 84 26 ff ff ff    	je     c001215a <VAS::allocatePages(int, int)+0x8c>
c0012234:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012238:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001223c:	89 d3                	mov    ebx,edx
c001223e:	c1 e0 0c             	shl    eax,0xc
c0012241:	c1 eb 0a             	shr    ebx,0xa
c0012244:	01 d0                	add    eax,edx
c0012246:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001224c:	c1 e8 0a             	shr    eax,0xa
c001224f:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012255:	25 00 f0 ff ff       	and    eax,0xfffff000
c001225a:	2d 00 00 40 00       	sub    eax,0x400000
c001225f:	39 c3                	cmp    ebx,eax
c0012261:	0f 87 f9 fe ff ff    	ja     c0012160 <VAS::allocatePages(int, int)+0x92>
c0012267:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001226a:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012270:	39 d8                	cmp    eax,ebx
c0012272:	73 f3                	jae    c0012267 <VAS::allocatePages(int, int)+0x199>
c0012274:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012278:	83 c4 1c             	add    esp,0x1c
c001227b:	5b                   	pop    ebx
c001227c:	5e                   	pop    esi
c001227d:	5f                   	pop    edi
c001227e:	5d                   	pop    ebp
c001227f:	c3                   	ret    
c0012280:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c0012285:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001228b:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0012292:	0f 84 4d ff ff ff    	je     c00121e5 <VAS::allocatePages(int, int)+0x117>
c0012298:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c00122a0:	e9 40 ff ff ff       	jmp    c00121e5 <VAS::allocatePages(int, int)+0x117>
c00122a5:	90                   	nop

c00122a6 <VAS::setCPUSpecific(unsigned long)>:
c00122a6:	83 ec 0c             	sub    esp,0xc
c00122a9:	6a 05                	push   0x5
c00122ab:	68 00 00 40 c2       	push   0xc2400000
c00122b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00122b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00122b8:	e8 11 fd ff ff       	call   c0011fce <VAS::mapPage(unsigned long, unsigned long, int)>
c00122bd:	83 c4 1c             	add    esp,0x1c
c00122c0:	c3                   	ret    
c00122c1:	90                   	nop

c00122c2 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c00122c2:	55                   	push   ebp
c00122c3:	57                   	push   edi
c00122c4:	56                   	push   esi
c00122c5:	53                   	push   ebx
c00122c6:	83 ec 1c             	sub    esp,0x1c
c00122c9:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c00122ce:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00122d2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00122d8:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00122dc:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c00122e2:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c00122e6:	83 e0 01             	and    eax,0x1
c00122e9:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00122ed:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00122f1:	85 c0                	test   eax,eax
c00122f3:	7e 39                	jle    c001232e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c00122f5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00122f9:	89 f3                	mov    ebx,esi
c00122fb:	c1 e0 0c             	shl    eax,0xc
c00122fe:	01 f0                	add    eax,esi
c0012300:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012304:	55                   	push   ebp
c0012305:	53                   	push   ebx
c0012306:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001230a:	29 f0                	sub    eax,esi
c001230c:	01 d8                	add    eax,ebx
c001230e:	50                   	push   eax
c001230f:	57                   	push   edi
c0012310:	e8 b9 fc ff ff       	call   c0011fce <VAS::mapPage(unsigned long, unsigned long, int)>
c0012315:	83 c4 10             	add    esp,0x10
c0012318:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001231d:	74 03                	je     c0012322 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c001231f:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012322:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012328:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c001232c:	75 d6                	jne    c0012304 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c001232e:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012333:	75 10                	jne    c0012345 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0012335:	0f 20 d8             	mov    eax,cr3
c0012338:	0f 22 d8             	mov    cr3,eax
c001233b:	83 c4 1c             	add    esp,0x1c
c001233e:	89 f0                	mov    eax,esi
c0012340:	5b                   	pop    ebx
c0012341:	5e                   	pop    esi
c0012342:	5f                   	pop    edi
c0012343:	5d                   	pop    ebp
c0012344:	c3                   	ret    
c0012345:	89 f3                	mov    ebx,esi
c0012347:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001234b:	c1 eb 0a             	shr    ebx,0xa
c001234e:	c1 e0 0c             	shl    eax,0xc
c0012351:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012357:	01 f0                	add    eax,esi
c0012359:	81 eb 00 00 40 00    	sub    ebx,0x400000
c001235f:	c1 e8 0a             	shr    eax,0xa
c0012362:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012367:	2d 00 00 40 00       	sub    eax,0x400000
c001236c:	39 c3                	cmp    ebx,eax
c001236e:	77 cb                	ja     c001233b <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0012370:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012373:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012379:	39 d8                	cmp    eax,ebx
c001237b:	73 f3                	jae    c0012370 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c001237d:	83 c4 1c             	add    esp,0x1c
c0012380:	89 f0                	mov    eax,esi
c0012382:	5b                   	pop    ebx
c0012383:	5e                   	pop    esi
c0012384:	5f                   	pop    edi
c0012385:	5d                   	pop    ebp
c0012386:	c3                   	ret    
c0012387:	90                   	nop

c0012388 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0012388:	55                   	push   ebp
c0012389:	57                   	push   edi
c001238a:	56                   	push   esi
c001238b:	53                   	push   ebx
c001238c:	83 ec 1c             	sub    esp,0x1c
c001238f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012393:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012397:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c001239b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001239f:	a9 ff 0f 00 00       	test   eax,0xfff
c00123a4:	75 4a                	jne    c00123f0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c00123a6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00123aa:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00123ad:	c1 eb 16             	shr    ebx,0x16
c00123b0:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c00123b7:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c00123bb:	74 4d                	je     c001240a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c00123bd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00123c1:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00123c5:	c1 e8 0a             	shr    eax,0xa
c00123c8:	80 fa 01             	cmp    dl,0x1
c00123cb:	19 d2                	sbb    edx,edx
c00123cd:	c1 e3 0c             	shl    ebx,0xc
c00123d0:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c00123d4:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c00123da:	25 fc 0f 00 00       	and    eax,0xffc
c00123df:	01 d8                	add    eax,ebx
c00123e1:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c00123e8:	83 c4 1c             	add    esp,0x1c
c00123eb:	5b                   	pop    ebx
c00123ec:	5e                   	pop    esi
c00123ed:	5f                   	pop    edi
c00123ee:	5d                   	pop    ebp
c00123ef:	c3                   	ret    
c00123f0:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00123f4:	83 ec 0c             	sub    esp,0xc
c00123f7:	68 68 9c 02 c0       	push   0xc0029c68
c00123fc:	e8 4c 78 00 00       	call   c0019c4d <Krnl::panic(char const*)>
c0012401:	83 c4 10             	add    esp,0x10
c0012404:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012408:	eb 9c                	jmp    c00123a6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c001240a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001240e:	e8 ae d8 ff ff       	call   c000fcc1 <Phys::allocatePage()>
c0012413:	89 c5                	mov    ebp,eax
c0012415:	e8 79 f6 ff ff       	call   c0011a93 <Virt::getAKernelVAS()>
c001241a:	83 ec 0c             	sub    esp,0xc
c001241d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012421:	6a 01                	push   0x1
c0012423:	e8 db f4 ff ff       	call   c0011903 <Virt::allocateKernelVirtualPages(int)>
c0012428:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001242f:	6a 01                	push   0x1
c0012431:	50                   	push   eax
c0012432:	55                   	push   ebp
c0012433:	81 cd 07 04 00 00    	or     ebp,0x407
c0012439:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001243d:	51                   	push   ecx
c001243e:	e8 7f fe ff ff       	call   c00122c2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012443:	83 c4 1c             	add    esp,0x1c
c0012446:	68 00 10 00 00       	push   0x1000
c001244b:	6a 00                	push   0x0
c001244d:	50                   	push   eax
c001244e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012452:	e8 6d e2 fe ff       	call   c00006c4 <memset>
c0012457:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001245b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001245e:	e8 04 f8 ff ff       	call   c0011c67 <Virt::freeKernelVirtualPages(unsigned long)>
c0012463:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012466:	83 c4 10             	add    esp,0x10
c0012469:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c001246c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012470:	e9 48 ff ff ff       	jmp    c00123bd <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c0012475:	90                   	nop

c0012476 <VAS::VAS(bool)>:
c0012476:	53                   	push   ebx
c0012477:	83 ec 28             	sub    esp,0x28
c001247a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001247e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0012482:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012486:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001248d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012491:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0012495:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0012498:	e8 24 d8 ff ff       	call   c000fcc1 <Phys::allocatePage()>
c001249d:	89 c2                	mov    edx,eax
c001249f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00124a3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00124a6:	e8 e8 f5 ff ff       	call   c0011a93 <Virt::getAKernelVAS()>
c00124ab:	89 c3                	mov    ebx,eax
c00124ad:	83 ec 0c             	sub    esp,0xc
c00124b0:	6a 01                	push   0x1
c00124b2:	e8 4c f4 ff ff       	call   c0011903 <Virt::allocateKernelVirtualPages(int)>
c00124b7:	83 c4 10             	add    esp,0x10
c00124ba:	89 c2                	mov    edx,eax
c00124bc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00124c0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00124c3:	83 ec 0c             	sub    esp,0xc
c00124c6:	6a 03                	push   0x3
c00124c8:	6a 01                	push   0x1
c00124ca:	52                   	push   edx
c00124cb:	50                   	push   eax
c00124cc:	53                   	push   ebx
c00124cd:	e8 f0 fd ff ff       	call   c00122c2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00124d2:	83 c4 20             	add    esp,0x20
c00124d5:	89 c2                	mov    edx,eax
c00124d7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00124db:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00124de:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00124e6:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c00124ee:	7f 1c                	jg     c001250c <VAS::VAS(bool)+0x96>
c00124f0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00124f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00124f7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00124fb:	c1 e2 02             	shl    edx,0x2
c00124fe:	01 d0                	add    eax,edx
c0012500:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012506:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001250a:	eb da                	jmp    c00124e6 <VAS::VAS(bool)+0x70>
c001250c:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0012514:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c001251c:	7f 7a                	jg     c0012598 <VAS::VAS(bool)+0x122>
c001251e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012522:	2d 00 02 00 00       	sub    eax,0x200
c0012527:	c1 e0 0c             	shl    eax,0xc
c001252a:	83 c8 03             	or     eax,0x3
c001252d:	89 c2                	mov    edx,eax
c001252f:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c0012534:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001253a:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012540:	83 e0 10             	and    eax,0x10
c0012543:	84 c0                	test   al,al
c0012545:	74 07                	je     c001254e <VAS::VAS(bool)+0xd8>
c0012547:	b8 00 01 00 00       	mov    eax,0x100
c001254c:	eb 05                	jmp    c0012553 <VAS::VAS(bool)+0xdd>
c001254e:	b8 00 00 00 00       	mov    eax,0x0
c0012553:	09 d0                	or     eax,edx
c0012555:	89 c1                	mov    ecx,eax
c0012557:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001255b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001255e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012562:	c1 e2 02             	shl    edx,0x2
c0012565:	01 d0                	add    eax,edx
c0012567:	89 ca                	mov    edx,ecx
c0012569:	89 10                	mov    DWORD PTR [eax],edx
c001256b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001256f:	2d 40 03 00 00       	sub    eax,0x340
c0012574:	83 f8 7f             	cmp    eax,0x7f
c0012577:	77 16                	ja     c001258f <VAS::VAS(bool)+0x119>
c0012579:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001257d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012580:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012584:	c1 e2 02             	shl    edx,0x2
c0012587:	01 d0                	add    eax,edx
c0012589:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c001258f:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012593:	e9 7c ff ff ff       	jmp    c0012514 <VAS::VAS(bool)+0x9e>
c0012598:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c001259d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00125a3:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00125a9:	83 e0 10             	and    eax,0x10
c00125ac:	84 c0                	test   al,al
c00125ae:	74 07                	je     c00125b7 <VAS::VAS(bool)+0x141>
c00125b0:	b8 03 41 00 00       	mov    eax,0x4103
c00125b5:	eb 05                	jmp    c00125bc <VAS::VAS(bool)+0x146>
c00125b7:	b8 03 40 00 00       	mov    eax,0x4003
c00125bc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00125c0:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00125c3:	81 c2 20 0c 00 00    	add    edx,0xc20
c00125c9:	89 02                	mov    DWORD PTR [edx],eax
c00125cb:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c00125d0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00125d6:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00125dc:	83 ec 08             	sub    esp,0x8
c00125df:	50                   	push   eax
c00125e0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00125e4:	e8 bd fc ff ff       	call   c00122a6 <VAS::setCPUSpecific(unsigned long)>
c00125e9:	83 c4 10             	add    esp,0x10
c00125ec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00125f0:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00125f3:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c00125f8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00125fe:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012604:	83 e0 10             	and    eax,0x10
c0012607:	84 c0                	test   al,al
c0012609:	74 07                	je     c0012612 <VAS::VAS(bool)+0x19c>
c001260b:	b8 00 01 00 00       	mov    eax,0x100
c0012610:	eb 05                	jmp    c0012617 <VAS::VAS(bool)+0x1a1>
c0012612:	b8 00 00 00 00       	mov    eax,0x0
c0012617:	09 c2                	or     edx,eax
c0012619:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001261d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012620:	05 fc 0f 00 00       	add    eax,0xffc
c0012625:	83 ca 03             	or     edx,0x3
c0012628:	89 10                	mov    DWORD PTR [eax],edx
c001262a:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c001262f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012635:	83 ec 0c             	sub    esp,0xc
c0012638:	50                   	push   eax
c0012639:	e8 c8 19 00 00       	call   c0014006 <Device::getName()>
c001263e:	83 c4 10             	add    esp,0x10
c0012641:	83 ec 08             	sub    esp,0x8
c0012644:	68 67 9d 02 c0       	push   0xc0029d67
c0012649:	50                   	push   eax
c001264a:	e8 65 e1 fe ff       	call   c00007b4 <strcmp>
c001264f:	83 c4 10             	add    esp,0x10
c0012652:	85 c0                	test   eax,eax
c0012654:	0f 94 c0             	sete   al
c0012657:	84 c0                	test   al,al
c0012659:	74 70                	je     c00126cb <VAS::VAS(bool)+0x255>
c001265b:	e8 07 ac 00 00       	call   c001d267 <disableIRQs()>
c0012660:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c0012665:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001266b:	05 7c 09 00 00       	add    eax,0x97c
c0012670:	83 ec 0c             	sub    esp,0xc
c0012673:	50                   	push   eax
c0012674:	e8 27 ca ff ff       	call   c000f0a0 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012679:	83 c4 10             	add    esp,0x10
c001267c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012681:	89 c3                	mov    ebx,eax
c0012683:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c0012688:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001268e:	05 7c 09 00 00       	add    eax,0x97c
c0012693:	83 ec 0c             	sub    esp,0xc
c0012696:	50                   	push   eax
c0012697:	e8 04 ca ff ff       	call   c000f0a0 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c001269c:	83 c4 10             	add    esp,0x10
c001269f:	83 ec 08             	sub    esp,0x8
c00126a2:	50                   	push   eax
c00126a3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00126a7:	e8 9c f5 ff ff       	call   c0011c48 <VAS::getPageTableEntry(unsigned long)>
c00126ac:	83 c4 10             	add    esp,0x10
c00126af:	8b 00                	mov    eax,DWORD PTR [eax]
c00126b1:	25 00 f0 ff ff       	and    eax,0xfffff000
c00126b6:	6a 11                	push   0x11
c00126b8:	53                   	push   ebx
c00126b9:	50                   	push   eax
c00126ba:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00126be:	e8 0b f9 ff ff       	call   c0011fce <VAS::mapPage(unsigned long, unsigned long, int)>
c00126c3:	83 c4 10             	add    esp,0x10
c00126c6:	e8 aa ab 00 00       	call   c001d275 <enableIRQs()>
c00126cb:	90                   	nop
c00126cc:	83 c4 28             	add    esp,0x28
c00126cf:	5b                   	pop    ebx
c00126d0:	c3                   	ret    

c00126d1 <mapVASFirstTime>:
c00126d1:	55                   	push   ebp
c00126d2:	57                   	push   edi
c00126d3:	56                   	push   esi
c00126d4:	53                   	push   ebx
c00126d5:	83 ec 0c             	sub    esp,0xc
c00126d8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00126dd:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00126e0:	4a                   	dec    edx
c00126e1:	0f 84 8e 00 00 00    	je     c0012775 <mapVASFirstTime+0xa4>
c00126e7:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c00126ea:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c00126ed:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c00126f2:	c1 e5 15             	shl    ebp,0x15
c00126f5:	be 00 90 e7 01       	mov    esi,0x1e79000
c00126fa:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012700:	29 eb                	sub    ebx,ebp
c0012702:	29 ee                	sub    esi,ebp
c0012704:	e8 b8 d5 ff ff       	call   c000fcc1 <Phys::allocatePage()>
c0012709:	83 ec 0c             	sub    esp,0xc
c001270c:	68 03 04 00 00       	push   0x403
c0012711:	6a 01                	push   0x1
c0012713:	53                   	push   ebx
c0012714:	81 eb 00 10 00 00    	sub    ebx,0x1000
c001271a:	50                   	push   eax
c001271b:	57                   	push   edi
c001271c:	e8 a1 fb ff ff       	call   c00122c2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012721:	83 c4 20             	add    esp,0x20
c0012724:	39 f3                	cmp    ebx,esi
c0012726:	75 dc                	jne    c0012704 <mapVASFirstTime+0x33>
c0012728:	be 00 f0 ff 01       	mov    esi,0x1fff000
c001272d:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012732:	29 ee                	sub    esi,ebp
c0012734:	29 e8                	sub    eax,ebp
c0012736:	89 c5                	mov    ebp,eax
c0012738:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c001273c:	19 db                	sbb    ebx,ebx
c001273e:	e8 7e d5 ff ff       	call   c000fcc1 <Phys::allocatePage()>
c0012743:	83 e3 04             	and    ebx,0x4
c0012746:	83 ec 0c             	sub    esp,0xc
c0012749:	81 c3 03 04 00 00    	add    ebx,0x403
c001274f:	53                   	push   ebx
c0012750:	6a 01                	push   0x1
c0012752:	56                   	push   esi
c0012753:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012759:	50                   	push   eax
c001275a:	57                   	push   edi
c001275b:	e8 62 fb ff ff       	call   c00122c2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012760:	83 c4 20             	add    esp,0x20
c0012763:	39 f5                	cmp    ebp,esi
c0012765:	75 d1                	jne    c0012738 <mapVASFirstTime+0x67>
c0012767:	0f 20 d8             	mov    eax,cr3
c001276a:	0f 22 d8             	mov    cr3,eax
c001276d:	83 c4 0c             	add    esp,0xc
c0012770:	5b                   	pop    ebx
c0012771:	5e                   	pop    esi
c0012772:	5f                   	pop    edi
c0012773:	5d                   	pop    ebp
c0012774:	c3                   	ret    
c0012775:	83 ec 0c             	sub    esp,0xc
c0012778:	68 75 9d 02 c0       	push   0xc0029d75
c001277d:	e8 71 01 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0012782:	83 c4 10             	add    esp,0x10
c0012785:	83 c4 0c             	add    esp,0xc
c0012788:	5b                   	pop    ebx
c0012789:	5e                   	pop    esi
c001278a:	5f                   	pop    edi
c001278b:	5d                   	pop    ebp
c001278c:	c3                   	ret    

c001278d <__cxa_atexit>:
c001278d:	31 c0                	xor    eax,eax
c001278f:	c3                   	ret    

c0012790 <__cxa_finalize>:
c0012790:	c3                   	ret    

c0012791 <__stack_chk_fail>:
c0012791:	55                   	push   ebp
c0012792:	89 e5                	mov    ebp,esp
c0012794:	83 ec 14             	sub    esp,0x14
c0012797:	68 8e 9d 02 c0       	push   0xc0029d8e
c001279c:	e8 52 01 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00127a1:	58                   	pop    eax
c00127a2:	5a                   	pop    edx
c00127a3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00127a6:	68 de 9d 02 c0       	push   0xc0029dde
c00127ab:	e8 43 01 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00127b0:	59                   	pop    ecx
c00127b1:	58                   	pop    eax
c00127b2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00127b5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00127b8:	68 de 9d 02 c0       	push   0xc0029dde
c00127bd:	e8 31 01 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00127c2:	5a                   	pop    edx
c00127c3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00127c6:	59                   	pop    ecx
c00127c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00127c9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00127cc:	68 de 9d 02 c0       	push   0xc0029dde
c00127d1:	e8 1d 01 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00127d6:	5a                   	pop    edx
c00127d7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00127da:	59                   	pop    ecx
c00127db:	8b 00                	mov    eax,DWORD PTR [eax]
c00127dd:	8b 00                	mov    eax,DWORD PTR [eax]
c00127df:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00127e2:	68 de 9d 02 c0       	push   0xc0029dde
c00127e7:	e8 07 01 00 00       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00127ec:	c7 04 24 e6 9d 02 c0 	mov    DWORD PTR [esp],0xc0029de6
c00127f3:	e8 55 74 00 00       	call   c0019c4d <Krnl::panic(char const*)>
c00127f8:	83 c4 10             	add    esp,0x10
c00127fb:	c9                   	leave  
c00127fc:	c3                   	ret    

c00127fd <__cxa_pure_virtual>:
c00127fd:	83 ec 18             	sub    esp,0x18
c0012800:	68 fe 9d 02 c0       	push   0xc0029dfe
c0012805:	e8 43 74 00 00       	call   c0019c4d <Krnl::panic(char const*)>
c001280a:	83 c4 1c             	add    esp,0x1c
c001280d:	c3                   	ret    

c001280e <operator new[](unsigned long)>:
c001280e:	e9 11 ce ff ff       	jmp    c000f624 <malloc>

c0012813 <operator delete(void*, unsigned long)>:
c0012813:	e9 2c ce ff ff       	jmp    c000f644 <rfree>

c0012818 <operator delete[](void*)>:
c0012818:	e9 27 ce ff ff       	jmp    c000f644 <rfree>

c001281d <operator delete[](void*, unsigned long)>:
c001281d:	e9 22 ce ff ff       	jmp    c000f644 <rfree>

c0012822 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012822:	57                   	push   edi
c0012823:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012828:	56                   	push   esi
c0012829:	be 14 9e 02 c0       	mov    esi,0xc0029e14
c001282e:	53                   	push   ebx
c001282f:	83 ec 40             	sub    esp,0x40
c0012832:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012836:	8d 7c 24 01          	lea    edi,[esp+0x1]
c001283a:	fc                   	cld    
c001283b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001283d:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012841:	83 f9 3e             	cmp    ecx,0x3e
c0012844:	7e 05                	jle    c001284b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012846:	b9 3e 00 00 00       	mov    ecx,0x3e
c001284b:	89 df                	mov    edi,ebx
c001284d:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012851:	eb 02                	jmp    c0012855 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012853:	89 c7                	mov    edi,eax
c0012855:	31 d2                	xor    edx,edx
c0012857:	46                   	inc    esi
c0012858:	89 f8                	mov    eax,edi
c001285a:	f7 f1                	div    ecx
c001285c:	39 cf                	cmp    edi,ecx
c001285e:	73 f3                	jae    c0012853 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012860:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012863:	eb 02                	jmp    c0012867 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012865:	89 c3                	mov    ebx,eax
c0012867:	31 d2                	xor    edx,edx
c0012869:	4e                   	dec    esi
c001286a:	89 d8                	mov    eax,ebx
c001286c:	f7 f1                	div    ecx
c001286e:	39 cb                	cmp    ebx,ecx
c0012870:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012874:	88 16                	mov    BYTE PTR [esi],dl
c0012876:	73 ed                	jae    c0012865 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012878:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001287c:	83 c4 40             	add    esp,0x40
c001287f:	5b                   	pop    ebx
c0012880:	5e                   	pop    esi
c0012881:	5f                   	pop    edi
c0012882:	c3                   	ret    

c0012883 <Dbg::logc(char)>:
c0012883:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012887:	ba fd 03 00 00       	mov    edx,0x3fd
c001288c:	ec                   	in     al,dx
c001288d:	a8 20                	test   al,0x20
c001288f:	74 fb                	je     c001288c <Dbg::logc(char)+0x9>
c0012891:	ba f8 03 00 00       	mov    edx,0x3f8
c0012896:	88 c8                	mov    al,cl
c0012898:	ee                   	out    dx,al
c0012899:	c3                   	ret    

c001289a <Dbg::logs(char*)>:
c001289a:	53                   	push   ebx
c001289b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001289f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00128a2:	84 c0                	test   al,al
c00128a4:	74 0f                	je     c00128b5 <Dbg::logs(char*)+0x1b>
c00128a6:	50                   	push   eax
c00128a7:	43                   	inc    ebx
c00128a8:	e8 d6 ff ff ff       	call   c0012883 <Dbg::logc(char)>
c00128ad:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00128b0:	5a                   	pop    edx
c00128b1:	84 c0                	test   al,al
c00128b3:	75 f1                	jne    c00128a6 <Dbg::logs(char*)+0xc>
c00128b5:	5b                   	pop    ebx
c00128b6:	c3                   	ret    

c00128b7 <Dbg::logWriteInt(unsigned int)>:
c00128b7:	83 ec 10             	sub    esp,0x10
c00128ba:	6a 0a                	push   0xa
c00128bc:	8d 44 24 08          	lea    eax,[esp+0x8]
c00128c0:	50                   	push   eax
c00128c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128c5:	e8 58 ff ff ff       	call   c0012822 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00128ca:	50                   	push   eax
c00128cb:	e8 ca ff ff ff       	call   c001289a <Dbg::logs(char*)>
c00128d0:	83 c4 20             	add    esp,0x20
c00128d3:	c3                   	ret    

c00128d4 <Dbg::logWriteIntBase(unsigned int, int)>:
c00128d4:	83 ec 10             	sub    esp,0x10
c00128d7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00128db:	8d 44 24 08          	lea    eax,[esp+0x8]
c00128df:	50                   	push   eax
c00128e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128e4:	e8 39 ff ff ff       	call   c0012822 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00128e9:	50                   	push   eax
c00128ea:	e8 ab ff ff ff       	call   c001289a <Dbg::logs(char*)>
c00128ef:	83 c4 20             	add    esp,0x20
c00128f2:	c3                   	ret    

c00128f3 <Dbg::kprintf(char const*, ...)>:
c00128f3:	55                   	push   ebp
c00128f4:	57                   	push   edi
c00128f5:	56                   	push   esi
c00128f6:	53                   	push   ebx
c00128f7:	83 ec 0c             	sub    esp,0xc
c00128fa:	8d 44 24 24          	lea    eax,[esp+0x24]
c00128fe:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012902:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012906:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012909:	84 c0                	test   al,al
c001290b:	74 4a                	je     c0012957 <Dbg::kprintf(char const*, ...)+0x64>
c001290d:	31 db                	xor    ebx,ebx
c001290f:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012912:	3c 25                	cmp    al,0x25
c0012914:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012917:	0f 85 e4 00 00 00    	jne    c0012a01 <Dbg::kprintf(char const*, ...)+0x10e>
c001291d:	83 c3 02             	add    ebx,0x2
c0012920:	8a 07                	mov    al,BYTE PTR [edi]
c0012922:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012925:	83 e8 25             	sub    eax,0x25
c0012928:	3c 53                	cmp    al,0x53
c001292a:	0f 87 ba 00 00 00    	ja     c00129ea <Dbg::kprintf(char const*, ...)+0xf7>
c0012930:	0f b6 c0             	movzx  eax,al
c0012933:	ff 24 85 54 9e 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd61ac]
c001293a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001293e:	89 c8                	mov    eax,ecx
c0012940:	83 c1 04             	add    ecx,0x4
c0012943:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012947:	ff 30                	push   DWORD PTR [eax]
c0012949:	e8 4c ff ff ff       	call   c001289a <Dbg::logs(char*)>
c001294e:	58                   	pop    eax
c001294f:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012953:	84 c0                	test   al,al
c0012955:	75 b8                	jne    c001290f <Dbg::kprintf(char const*, ...)+0x1c>
c0012957:	83 c4 0c             	add    esp,0xc
c001295a:	5b                   	pop    ebx
c001295b:	5e                   	pop    esi
c001295c:	5f                   	pop    edi
c001295d:	5d                   	pop    ebp
c001295e:	c3                   	ret    
c001295f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012963:	89 d0                	mov    eax,edx
c0012965:	83 c2 04             	add    edx,0x4
c0012968:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001296c:	ff 30                	push   DWORD PTR [eax]
c001296e:	e8 44 ff ff ff       	call   c00128b7 <Dbg::logWriteInt(unsigned int)>
c0012973:	58                   	pop    eax
c0012974:	eb d9                	jmp    c001294f <Dbg::kprintf(char const*, ...)+0x5c>
c0012976:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001297a:	89 d0                	mov    eax,edx
c001297c:	83 c2 04             	add    edx,0x4
c001297f:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012982:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012986:	50                   	push   eax
c0012987:	e8 f7 fe ff ff       	call   c0012883 <Dbg::logc(char)>
c001298c:	58                   	pop    eax
c001298d:	eb c0                	jmp    c001294f <Dbg::kprintf(char const*, ...)+0x5c>
c001298f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012993:	89 c8                	mov    eax,ecx
c0012995:	83 c1 04             	add    ecx,0x4
c0012998:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001299c:	ff 30                	push   DWORD PTR [eax]
c001299e:	e8 14 ff ff ff       	call   c00128b7 <Dbg::logWriteInt(unsigned int)>
c00129a3:	5f                   	pop    edi
c00129a4:	eb a9                	jmp    c001294f <Dbg::kprintf(char const*, ...)+0x5c>
c00129a6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00129aa:	89 c8                	mov    eax,ecx
c00129ac:	83 c1 04             	add    ecx,0x4
c00129af:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00129b3:	6a 10                	push   0x10
c00129b5:	ff 30                	push   DWORD PTR [eax]
c00129b7:	e8 18 ff ff ff       	call   c00128d4 <Dbg::logWriteIntBase(unsigned int, int)>
c00129bc:	59                   	pop    ecx
c00129bd:	5f                   	pop    edi
c00129be:	eb 8f                	jmp    c001294f <Dbg::kprintf(char const*, ...)+0x5c>
c00129c0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00129c4:	89 d0                	mov    eax,edx
c00129c6:	83 c2 08             	add    edx,0x8
c00129c9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00129cd:	6a 10                	push   0x10
c00129cf:	ff 30                	push   DWORD PTR [eax]
c00129d1:	e8 fe fe ff ff       	call   c00128d4 <Dbg::logWriteIntBase(unsigned int, int)>
c00129d6:	58                   	pop    eax
c00129d7:	5a                   	pop    edx
c00129d8:	e9 72 ff ff ff       	jmp    c001294f <Dbg::kprintf(char const*, ...)+0x5c>
c00129dd:	6a 25                	push   0x25
c00129df:	e8 9f fe ff ff       	call   c0012883 <Dbg::logc(char)>
c00129e4:	58                   	pop    eax
c00129e5:	e9 65 ff ff ff       	jmp    c001294f <Dbg::kprintf(char const*, ...)+0x5c>
c00129ea:	6a 25                	push   0x25
c00129ec:	e8 92 fe ff ff       	call   c0012883 <Dbg::logc(char)>
c00129f1:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00129f4:	50                   	push   eax
c00129f5:	e8 89 fe ff ff       	call   c0012883 <Dbg::logc(char)>
c00129fa:	5a                   	pop    edx
c00129fb:	59                   	pop    ecx
c00129fc:	e9 4e ff ff ff       	jmp    c001294f <Dbg::kprintf(char const*, ...)+0x5c>
c0012a01:	50                   	push   eax
c0012a02:	89 eb                	mov    ebx,ebp
c0012a04:	e8 7a fe ff ff       	call   c0012883 <Dbg::logc(char)>
c0012a09:	89 fd                	mov    ebp,edi
c0012a0b:	58                   	pop    eax
c0012a0c:	e9 3e ff ff ff       	jmp    c001294f <Dbg::kprintf(char const*, ...)+0x5c>
c0012a11:	90                   	nop

c0012a12 <File::read(unsigned long long, void*, int*)>:
c0012a12:	53                   	push   ebx
c0012a13:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012a17:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012a1b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012a22:	3c 19                	cmp    al,0x19
c0012a24:	77 35                	ja     c0012a5b <File::read(unsigned long long, void*, int*)+0x49>
c0012a26:	8b 04 85 a0 de 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2160]
c0012a2d:	85 c0                	test   eax,eax
c0012a2f:	74 2a                	je     c0012a5b <File::read(unsigned long long, void*, int*)+0x49>
c0012a31:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012a37:	85 c0                	test   eax,eax
c0012a39:	74 20                	je     c0012a5b <File::read(unsigned long long, void*, int*)+0x49>
c0012a3b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012a3f:	74 21                	je     c0012a62 <File::read(unsigned long long, void*, int*)+0x50>
c0012a41:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012a43:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012a47:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012a4d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012a51:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012a55:	5b                   	pop    ebx
c0012a56:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0012a59:	ff e0                	jmp    eax
c0012a5b:	b8 0b 00 00 00       	mov    eax,0xb
c0012a60:	eb 05                	jmp    c0012a67 <File::read(unsigned long long, void*, int*)+0x55>
c0012a62:	b8 05 00 00 00       	mov    eax,0x5
c0012a67:	5b                   	pop    ebx
c0012a68:	c3                   	ret    
c0012a69:	90                   	nop

c0012a6a <File::write(unsigned long long, void*, int*)>:
c0012a6a:	53                   	push   ebx
c0012a6b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012a6f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012a73:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012a7a:	3c 19                	cmp    al,0x19
c0012a7c:	77 35                	ja     c0012ab3 <File::write(unsigned long long, void*, int*)+0x49>
c0012a7e:	8b 04 85 a0 de 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2160]
c0012a85:	85 c0                	test   eax,eax
c0012a87:	74 2a                	je     c0012ab3 <File::write(unsigned long long, void*, int*)+0x49>
c0012a89:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012a8f:	85 c0                	test   eax,eax
c0012a91:	74 20                	je     c0012ab3 <File::write(unsigned long long, void*, int*)+0x49>
c0012a93:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012a97:	74 21                	je     c0012aba <File::write(unsigned long long, void*, int*)+0x50>
c0012a99:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012a9b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012a9f:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012aa5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012aa9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012aad:	5b                   	pop    ebx
c0012aae:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0012ab1:	ff e0                	jmp    eax
c0012ab3:	b8 0b 00 00 00       	mov    eax,0xb
c0012ab8:	eb 05                	jmp    c0012abf <File::write(unsigned long long, void*, int*)+0x55>
c0012aba:	b8 05 00 00 00       	mov    eax,0x5
c0012abf:	5b                   	pop    ebx
c0012ac0:	c3                   	ret    
c0012ac1:	90                   	nop

c0012ac2 <Directory::read(unsigned long long, void*, int*)>:
c0012ac2:	53                   	push   ebx
c0012ac3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012ac7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012acb:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012ad2:	3c 19                	cmp    al,0x19
c0012ad4:	77 35                	ja     c0012b0b <Directory::read(unsigned long long, void*, int*)+0x49>
c0012ad6:	8b 04 85 a0 de 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2160]
c0012add:	85 c0                	test   eax,eax
c0012adf:	74 2a                	je     c0012b0b <Directory::read(unsigned long long, void*, int*)+0x49>
c0012ae1:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012ae7:	85 c0                	test   eax,eax
c0012ae9:	74 20                	je     c0012b0b <Directory::read(unsigned long long, void*, int*)+0x49>
c0012aeb:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012aef:	74 21                	je     c0012b12 <Directory::read(unsigned long long, void*, int*)+0x50>
c0012af1:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012af3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012af7:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012afd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012b01:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012b05:	5b                   	pop    ebx
c0012b06:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0012b09:	ff e0                	jmp    eax
c0012b0b:	b8 0b 00 00 00       	mov    eax,0xb
c0012b10:	eb 05                	jmp    c0012b17 <Directory::read(unsigned long long, void*, int*)+0x55>
c0012b12:	b8 05 00 00 00       	mov    eax,0x5
c0012b17:	5b                   	pop    ebx
c0012b18:	c3                   	ret    
c0012b19:	90                   	nop

c0012b1a <Directory::write(unsigned long long, void*, int*)>:
c0012b1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b1e:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0012b25:	b8 0b 00 00 00       	mov    eax,0xb
c0012b2a:	80 fa 19             	cmp    dl,0x19
c0012b2d:	77 18                	ja     c0012b47 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012b2f:	8b 14 95 a0 de 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2160]
c0012b36:	85 d2                	test   edx,edx
c0012b38:	74 0d                	je     c0012b47 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012b3a:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0012b41:	19 c0                	sbb    eax,eax
c0012b43:	83 e0 0a             	and    eax,0xa
c0012b46:	40                   	inc    eax
c0012b47:	c3                   	ret    

c0012b48 <File::isAtty()>:
c0012b48:	31 c0                	xor    eax,eax
c0012b4a:	c3                   	ret    
c0012b4b:	90                   	nop

c0012b4c <Directory::isAtty()>:
c0012b4c:	31 c0                	xor    eax,eax
c0012b4e:	c3                   	ret    
c0012b4f:	90                   	nop

c0012b50 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0012b50:	b8 0a 00 00 00       	mov    eax,0xa
c0012b55:	c3                   	ret    

c0012b56 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0012b56:	b8 0a 00 00 00       	mov    eax,0xa
c0012b5b:	c3                   	ret    

c0012b5c <File::~File()>:
c0012b5c:	83 ec 0c             	sub    esp,0xc
c0012b5f:	ba 10 a0 02 c0       	mov    edx,0xc002a010
c0012b64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b68:	89 10                	mov    DWORD PTR [eax],edx
c0012b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b6e:	83 ec 0c             	sub    esp,0xc
c0012b71:	50                   	push   eax
c0012b72:	e8 2b eb ff ff       	call   c00116a2 <UnixFile::~UnixFile()>
c0012b77:	83 c4 10             	add    esp,0x10
c0012b7a:	90                   	nop
c0012b7b:	83 c4 0c             	add    esp,0xc
c0012b7e:	c3                   	ret    
c0012b7f:	90                   	nop

c0012b80 <File::~File()>:
c0012b80:	83 ec 0c             	sub    esp,0xc
c0012b83:	83 ec 0c             	sub    esp,0xc
c0012b86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b8a:	e8 cd ff ff ff       	call   c0012b5c <File::~File()>
c0012b8f:	83 c4 10             	add    esp,0x10
c0012b92:	83 ec 08             	sub    esp,0x8
c0012b95:	68 14 01 00 00       	push   0x114
c0012b9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b9e:	e8 70 fc ff ff       	call   c0012813 <operator delete(void*, unsigned long)>
c0012ba3:	83 c4 10             	add    esp,0x10
c0012ba6:	83 c4 0c             	add    esp,0xc
c0012ba9:	c3                   	ret    

c0012baa <Directory::~Directory()>:
c0012baa:	83 ec 0c             	sub    esp,0xc
c0012bad:	ba 2c a0 02 c0       	mov    edx,0xc002a02c
c0012bb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012bb6:	89 10                	mov    DWORD PTR [eax],edx
c0012bb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012bbc:	83 ec 0c             	sub    esp,0xc
c0012bbf:	50                   	push   eax
c0012bc0:	e8 dd ea ff ff       	call   c00116a2 <UnixFile::~UnixFile()>
c0012bc5:	83 c4 10             	add    esp,0x10
c0012bc8:	90                   	nop
c0012bc9:	83 c4 0c             	add    esp,0xc
c0012bcc:	c3                   	ret    
c0012bcd:	90                   	nop

c0012bce <Directory::~Directory()>:
c0012bce:	83 ec 0c             	sub    esp,0xc
c0012bd1:	83 ec 0c             	sub    esp,0xc
c0012bd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012bd8:	e8 cd ff ff ff       	call   c0012baa <Directory::~Directory()>
c0012bdd:	83 c4 10             	add    esp,0x10
c0012be0:	83 ec 08             	sub    esp,0x8
c0012be3:	68 14 01 00 00       	push   0x114
c0012be8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012bec:	e8 22 fc ff ff       	call   c0012813 <operator delete(void*, unsigned long)>
c0012bf1:	83 c4 10             	add    esp,0x10
c0012bf4:	83 c4 0c             	add    esp,0xc
c0012bf7:	c3                   	ret    

c0012bf8 <Filesystem::Filesystem()>:
c0012bf8:	ba ac 9f 02 c0       	mov    edx,0xc0029fac
c0012bfd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c01:	89 10                	mov    DWORD PTR [eax],edx
c0012c03:	8b 15 08 da 02 c0    	mov    edx,DWORD PTR ds:0xc002da08
c0012c09:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c0d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012c10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c14:	a3 08 da 02 c0       	mov    ds:0xc002da08,eax
c0012c19:	90                   	nop
c0012c1a:	c3                   	ret    
c0012c1b:	90                   	nop

c0012c1c <Filesystem::~Filesystem()>:
c0012c1c:	ba ac 9f 02 c0       	mov    edx,0xc0029fac
c0012c21:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c25:	89 10                	mov    DWORD PTR [eax],edx
c0012c27:	90                   	nop
c0012c28:	c3                   	ret    
c0012c29:	90                   	nop

c0012c2a <Filesystem::~Filesystem()>:
c0012c2a:	83 ec 0c             	sub    esp,0xc
c0012c2d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012c31:	e8 e6 ff ff ff       	call   c0012c1c <Filesystem::~Filesystem()>
c0012c36:	83 c4 04             	add    esp,0x4
c0012c39:	83 ec 08             	sub    esp,0x8
c0012c3c:	6a 08                	push   0x8
c0012c3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c42:	e8 cc fb ff ff       	call   c0012813 <operator delete(void*, unsigned long)>
c0012c47:	83 c4 10             	add    esp,0x10
c0012c4a:	83 c4 0c             	add    esp,0xc
c0012c4d:	c3                   	ret    

c0012c4e <Fs::getcwd(Process*, char*, int)>:
c0012c4e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012c52:	31 c0                	xor    eax,eax
c0012c54:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012c57:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012c5b:	7d 15                	jge    c0012c72 <Fs::getcwd(Process*, char*, int)+0x24>
c0012c5d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012c61:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012c68:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012c6b:	84 c9                	test   cl,cl
c0012c6d:	74 06                	je     c0012c75 <Fs::getcwd(Process*, char*, int)+0x27>
c0012c6f:	40                   	inc    eax
c0012c70:	eb e2                	jmp    c0012c54 <Fs::getcwd(Process*, char*, int)+0x6>
c0012c72:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012c75:	31 c0                	xor    eax,eax
c0012c77:	c3                   	ret    

c0012c78 <Fs::initVFS()>:
c0012c78:	83 ec 18             	sub    esp,0x18
c0012c7b:	6a 08                	push   0x8
c0012c7d:	e8 a2 c9 ff ff       	call   c000f624 <malloc>
c0012c82:	89 04 24             	mov    DWORD PTR [esp],eax
c0012c85:	e8 6e d7 00 00       	call   c00203f8 <FAT::FAT()>
c0012c8a:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012c91:	e8 8e c9 ff ff       	call   c000f624 <malloc>
c0012c96:	89 04 24             	mov    DWORD PTR [esp],eax
c0012c99:	e8 b2 e9 00 00       	call   c0021650 <ISO9660::ISO9660()>
c0012c9e:	83 c4 1c             	add    esp,0x1c
c0012ca1:	c3                   	ret    

c0012ca2 <Fs::standardiseFiles(char*, char const*, char const*)>:
c0012ca2:	55                   	push   ebp
c0012ca3:	57                   	push   edi
c0012ca4:	56                   	push   esi
c0012ca5:	53                   	push   ebx
c0012ca6:	81 ec 10 04 00 00    	sub    esp,0x410
c0012cac:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0012cb3:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0012cba:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0012cc1:	68 00 04 00 00       	push   0x400
c0012cc6:	6a 00                	push   0x0
c0012cc8:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012ccc:	56                   	push   esi
c0012ccd:	e8 f2 d9 fe ff       	call   c00006c4 <memset>
c0012cd2:	83 c4 10             	add    esp,0x10
c0012cd5:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0012cd9:	75 0b                	jne    c0012ce6 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0012cdb:	50                   	push   eax
c0012cdc:	50                   	push   eax
c0012cdd:	57                   	push   edi
c0012cde:	56                   	push   esi
c0012cdf:	e8 7f da fe ff       	call   c0000763 <strcpy>
c0012ce4:	eb 41                	jmp    c0012d27 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0012ce6:	8a 07                	mov    al,BYTE PTR [edi]
c0012ce8:	3c 5c                	cmp    al,0x5c
c0012cea:	74 04                	je     c0012cf0 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0012cec:	3c 2f                	cmp    al,0x2f
c0012cee:	75 18                	jne    c0012d08 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0012cf0:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012cf3:	3c 60                	cmp    al,0x60
c0012cf5:	7e 03                	jle    c0012cfa <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0012cf7:	83 e8 20             	sub    eax,0x20
c0012cfa:	88 04 24             	mov    BYTE PTR [esp],al
c0012cfd:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012d04:	50                   	push   eax
c0012d05:	50                   	push   eax
c0012d06:	eb 18                	jmp    c0012d20 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0012d08:	50                   	push   eax
c0012d09:	50                   	push   eax
c0012d0a:	55                   	push   ebp
c0012d0b:	56                   	push   esi
c0012d0c:	e8 52 da fe ff       	call   c0000763 <strcpy>
c0012d11:	5a                   	pop    edx
c0012d12:	59                   	pop    ecx
c0012d13:	68 80 b5 02 c0       	push   0xc002b580
c0012d18:	56                   	push   esi
c0012d19:	e8 fc da fe ff       	call   c000081a <strcat>
c0012d1e:	5d                   	pop    ebp
c0012d1f:	58                   	pop    eax
c0012d20:	57                   	push   edi
c0012d21:	56                   	push   esi
c0012d22:	e8 f3 da fe ff       	call   c000081a <strcat>
c0012d27:	83 c4 10             	add    esp,0x10
c0012d2a:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012d2d:	3c 60                	cmp    al,0x60
c0012d2f:	7e 03                	jle    c0012d34 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0012d31:	83 e8 20             	sub    eax,0x20
c0012d34:	88 04 24             	mov    BYTE PTR [esp],al
c0012d37:	88 03                	mov    BYTE PTR [ebx],al
c0012d39:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012d40:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012d46:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012d4a:	bf 03 00 00 00       	mov    edi,0x3
c0012d4f:	b8 03 00 00 00       	mov    eax,0x3
c0012d54:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012d57:	84 d2                	test   dl,dl
c0012d59:	0f 84 91 00 00 00    	je     c0012df0 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0012d5f:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012d62:	80 fa 5c             	cmp    dl,0x5c
c0012d65:	74 05                	je     c0012d6c <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0012d67:	80 fa 2f             	cmp    dl,0x2f
c0012d6a:	75 12                	jne    c0012d7e <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012d6c:	89 c5                	mov    ebp,eax
c0012d6e:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012d73:	74 09                	je     c0012d7e <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012d75:	40                   	inc    eax
c0012d76:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0012d7a:	89 cf                	mov    edi,ecx
c0012d7c:	eb d6                	jmp    c0012d54 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0012d7e:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0012d83:	75 5b                	jne    c0012de0 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012d85:	80 fa 2e             	cmp    dl,0x2e
c0012d88:	75 56                	jne    c0012de0 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012d8a:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0012d8e:	74 19                	je     c0012da9 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0012d90:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012d95:	74 53                	je     c0012dea <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012d97:	89 f9                	mov    ecx,edi
c0012d99:	41                   	inc    ecx
c0012d9a:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012d9d:	80 fa 2f             	cmp    dl,0x2f
c0012da0:	74 f7                	je     c0012d99 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012da2:	80 fa 5c             	cmp    dl,0x5c
c0012da5:	74 f2                	je     c0012d99 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012da7:	eb d1                	jmp    c0012d7a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012da9:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012dae:	74 3a                	je     c0012dea <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012db0:	83 f8 03             	cmp    eax,0x3
c0012db3:	74 c5                	je     c0012d7a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012db5:	41                   	inc    ecx
c0012db6:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012db9:	80 fa 2f             	cmp    dl,0x2f
c0012dbc:	74 f7                	je     c0012db5 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012dbe:	80 fa 5c             	cmp    dl,0x5c
c0012dc1:	74 f2                	je     c0012db5 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012dc3:	48                   	dec    eax
c0012dc4:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012dc8:	75 06                	jne    c0012dd0 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012dca:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012dce:	eb f3                	jmp    c0012dc3 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0012dd0:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012dd4:	74 07                	je     c0012ddd <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0012dd6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012dda:	48                   	dec    eax
c0012ddb:	eb f3                	jmp    c0012dd0 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012ddd:	40                   	inc    eax
c0012dde:	eb 9a                	jmp    c0012d7a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012de0:	80 fa 2f             	cmp    dl,0x2f
c0012de3:	74 95                	je     c0012d7a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012de5:	80 fa 5c             	cmp    dl,0x5c
c0012de8:	74 90                	je     c0012d7a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012dea:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012ded:	40                   	inc    eax
c0012dee:	eb 8a                	jmp    c0012d7a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012df0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012df4:	83 ec 0c             	sub    esp,0xc
c0012df7:	53                   	push   ebx
c0012df8:	e8 e4 d8 fe ff       	call   c00006e1 <strlen>
c0012dfd:	83 c4 10             	add    esp,0x10
c0012e00:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0012e05:	75 26                	jne    c0012e2d <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0012e07:	83 ec 0c             	sub    esp,0xc
c0012e0a:	53                   	push   ebx
c0012e0b:	e8 d1 d8 fe ff       	call   c00006e1 <strlen>
c0012e10:	83 c4 10             	add    esp,0x10
c0012e13:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0012e18:	74 26                	je     c0012e40 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0012e1a:	83 ec 0c             	sub    esp,0xc
c0012e1d:	53                   	push   ebx
c0012e1e:	e8 be d8 fe ff       	call   c00006e1 <strlen>
c0012e23:	83 c4 10             	add    esp,0x10
c0012e26:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012e2b:	eb c7                	jmp    c0012df4 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0012e2d:	83 ec 0c             	sub    esp,0xc
c0012e30:	53                   	push   ebx
c0012e31:	e8 ab d8 fe ff       	call   c00006e1 <strlen>
c0012e36:	83 c4 10             	add    esp,0x10
c0012e39:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012e3e:	74 c7                	je     c0012e07 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0012e40:	81 c4 0c 04 00 00    	add    esp,0x40c
c0012e46:	5b                   	pop    ebx
c0012e47:	5e                   	pop    esi
c0012e48:	5f                   	pop    edi
c0012e49:	5d                   	pop    ebp
c0012e4a:	c3                   	ret    
c0012e4b:	90                   	nop

c0012e4c <File::File(char const*, Process*)>:
c0012e4c:	83 ec 0c             	sub    esp,0xc
c0012e4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e53:	83 ec 08             	sub    esp,0x8
c0012e56:	6a 00                	push   0x0
c0012e58:	50                   	push   eax
c0012e59:	e8 62 e6 ff ff       	call   c00114c0 <UnixFile::UnixFile(int)>
c0012e5e:	83 c4 10             	add    esp,0x10
c0012e61:	ba 10 a0 02 c0       	mov    edx,0xc002a010
c0012e66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e6a:	89 10                	mov    DWORD PTR [eax],edx
c0012e6c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012e70:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012e76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e7a:	83 c0 0d             	add    eax,0xd
c0012e7d:	83 ec 04             	sub    esp,0x4
c0012e80:	52                   	push   edx
c0012e81:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e85:	50                   	push   eax
c0012e86:	e8 17 fe ff ff       	call   c0012ca2 <Fs::standardiseFiles(char*, char const*, char const*)>
c0012e8b:	83 c4 10             	add    esp,0x10
c0012e8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e92:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012e95:	8d 50 bf             	lea    edx,[eax-0x41]
c0012e98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e9c:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012ea2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ea6:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012eaa:	90                   	nop
c0012eab:	83 c4 0c             	add    esp,0xc
c0012eae:	c3                   	ret    
c0012eaf:	90                   	nop

c0012eb0 <File::open(FileOpenMode)>:
c0012eb0:	53                   	push   ebx
c0012eb1:	b8 0b 00 00 00       	mov    eax,0xb
c0012eb6:	83 ec 08             	sub    esp,0x8
c0012eb9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012ebd:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012ec4:	80 fa 19             	cmp    dl,0x19
c0012ec7:	77 40                	ja     c0012f09 <File::open(FileOpenMode)+0x59>
c0012ec9:	8b 14 95 a0 de 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2160]
c0012ed0:	85 d2                	test   edx,edx
c0012ed2:	74 35                	je     c0012f09 <File::open(FileOpenMode)+0x59>
c0012ed4:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012eda:	85 d2                	test   edx,edx
c0012edc:	74 2b                	je     c0012f09 <File::open(FileOpenMode)+0x59>
c0012ede:	b8 06 00 00 00       	mov    eax,0x6
c0012ee3:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012ee7:	75 20                	jne    c0012f09 <File::open(FileOpenMode)+0x59>
c0012ee9:	8b 02                	mov    eax,DWORD PTR [edx]
c0012eeb:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012ef1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012ef5:	51                   	push   ecx
c0012ef6:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012ef9:	51                   	push   ecx
c0012efa:	52                   	push   edx
c0012efb:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012efe:	83 c4 10             	add    esp,0x10
c0012f01:	85 c0                	test   eax,eax
c0012f03:	75 04                	jne    c0012f09 <File::open(FileOpenMode)+0x59>
c0012f05:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012f09:	83 c4 08             	add    esp,0x8
c0012f0c:	5b                   	pop    ebx
c0012f0d:	c3                   	ret    

c0012f0e <File::close()>:
c0012f0e:	53                   	push   ebx
c0012f0f:	b8 0b 00 00 00       	mov    eax,0xb
c0012f14:	83 ec 08             	sub    esp,0x8
c0012f17:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012f1b:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012f22:	80 fa 19             	cmp    dl,0x19
c0012f25:	77 41                	ja     c0012f68 <File::close()+0x5a>
c0012f27:	8b 1c 95 a0 de 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd2160]
c0012f2e:	85 db                	test   ebx,ebx
c0012f30:	74 36                	je     c0012f68 <File::close()+0x5a>
c0012f32:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012f39:	74 2d                	je     c0012f68 <File::close()+0x5a>
c0012f3b:	b8 05 00 00 00       	mov    eax,0x5
c0012f40:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012f44:	74 22                	je     c0012f68 <File::close()+0x5a>
c0012f46:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012f4a:	8b 04 95 a0 de 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2160]
c0012f51:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012f57:	53                   	push   ebx
c0012f58:	53                   	push   ebx
c0012f59:	8b 10                	mov    edx,DWORD PTR [eax]
c0012f5b:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012f61:	50                   	push   eax
c0012f62:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0012f65:	83 c4 10             	add    esp,0x10
c0012f68:	83 c4 08             	add    esp,0x8
c0012f6b:	5b                   	pop    ebx
c0012f6c:	c3                   	ret    
c0012f6d:	90                   	nop

c0012f6e <File::seek(unsigned long long)>:
c0012f6e:	56                   	push   esi
c0012f6f:	53                   	push   ebx
c0012f70:	b8 0b 00 00 00       	mov    eax,0xb
c0012f75:	51                   	push   ecx
c0012f76:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012f7a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012f7e:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0012f85:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012f89:	80 fa 19             	cmp    dl,0x19
c0012f8c:	77 31                	ja     c0012fbf <File::seek(unsigned long long)+0x51>
c0012f8e:	8b 14 95 a0 de 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2160]
c0012f95:	85 d2                	test   edx,edx
c0012f97:	74 26                	je     c0012fbf <File::seek(unsigned long long)+0x51>
c0012f99:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012f9f:	85 d2                	test   edx,edx
c0012fa1:	74 1c                	je     c0012fbf <File::seek(unsigned long long)+0x51>
c0012fa3:	b8 05 00 00 00       	mov    eax,0x5
c0012fa8:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0012fac:	74 11                	je     c0012fbf <File::seek(unsigned long long)+0x51>
c0012fae:	8b 02                	mov    eax,DWORD PTR [edx]
c0012fb0:	53                   	push   ebx
c0012fb1:	51                   	push   ecx
c0012fb2:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0012fb8:	52                   	push   edx
c0012fb9:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012fbc:	83 c4 10             	add    esp,0x10
c0012fbf:	5a                   	pop    edx
c0012fc0:	5b                   	pop    ebx
c0012fc1:	5e                   	pop    esi
c0012fc2:	c3                   	ret    
c0012fc3:	90                   	nop

c0012fc4 <File::tell(unsigned long long*)>:
c0012fc4:	83 ec 0c             	sub    esp,0xc
c0012fc7:	b8 0b 00 00 00       	mov    eax,0xb
c0012fcc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012fd0:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012fd7:	80 fa 19             	cmp    dl,0x19
c0012fda:	77 34                	ja     c0013010 <File::tell(unsigned long long*)+0x4c>
c0012fdc:	8b 14 95 a0 de 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2160]
c0012fe3:	85 d2                	test   edx,edx
c0012fe5:	74 29                	je     c0013010 <File::tell(unsigned long long*)+0x4c>
c0012fe7:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012fed:	85 d2                	test   edx,edx
c0012fef:	74 1f                	je     c0013010 <File::tell(unsigned long long*)+0x4c>
c0012ff1:	b8 05 00 00 00       	mov    eax,0x5
c0012ff6:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012ffa:	74 14                	je     c0013010 <File::tell(unsigned long long*)+0x4c>
c0012ffc:	50                   	push   eax
c0012ffd:	8b 02                	mov    eax,DWORD PTR [edx]
c0012fff:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013003:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013009:	52                   	push   edx
c001300a:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001300d:	83 c4 10             	add    esp,0x10
c0013010:	83 c4 0c             	add    esp,0xc
c0013013:	c3                   	ret    

c0013014 <File::rewind()>:
c0013014:	83 ec 10             	sub    esp,0x10
c0013017:	6a 00                	push   0x0
c0013019:	6a 00                	push   0x0
c001301b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001301f:	e8 4a ff ff ff       	call   c0012f6e <File::seek(unsigned long long)>
c0013024:	83 c4 1c             	add    esp,0x1c
c0013027:	c3                   	ret    

c0013028 <File::unlink()>:
c0013028:	83 ec 0c             	sub    esp,0xc
c001302b:	b8 0b 00 00 00       	mov    eax,0xb
c0013030:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013034:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001303b:	80 f9 19             	cmp    cl,0x19
c001303e:	77 2f                	ja     c001306f <File::unlink()+0x47>
c0013040:	8b 0c 8d a0 de 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2160]
c0013047:	85 c9                	test   ecx,ecx
c0013049:	74 24                	je     c001306f <File::unlink()+0x47>
c001304b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013051:	85 c9                	test   ecx,ecx
c0013053:	74 1a                	je     c001306f <File::unlink()+0x47>
c0013055:	b8 06 00 00 00       	mov    eax,0x6
c001305a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001305e:	75 0f                	jne    c001306f <File::unlink()+0x47>
c0013060:	83 c2 0d             	add    edx,0xd
c0013063:	50                   	push   eax
c0013064:	50                   	push   eax
c0013065:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013067:	52                   	push   edx
c0013068:	51                   	push   ecx
c0013069:	ff 50 38             	call   DWORD PTR [eax+0x38]
c001306c:	83 c4 10             	add    esp,0x10
c001306f:	83 c4 0c             	add    esp,0xc
c0013072:	c3                   	ret    
c0013073:	90                   	nop

c0013074 <File::rename(char const*)>:
c0013074:	83 ec 0c             	sub    esp,0xc
c0013077:	b8 0b 00 00 00       	mov    eax,0xb
c001307c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013080:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013087:	80 f9 19             	cmp    cl,0x19
c001308a:	77 32                	ja     c00130be <File::rename(char const*)+0x4a>
c001308c:	8b 0c 8d a0 de 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2160]
c0013093:	85 c9                	test   ecx,ecx
c0013095:	74 27                	je     c00130be <File::rename(char const*)+0x4a>
c0013097:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001309d:	85 c9                	test   ecx,ecx
c001309f:	74 1d                	je     c00130be <File::rename(char const*)+0x4a>
c00130a1:	b8 06 00 00 00       	mov    eax,0x6
c00130a6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00130aa:	75 12                	jne    c00130be <File::rename(char const*)+0x4a>
c00130ac:	83 c2 0d             	add    edx,0xd
c00130af:	50                   	push   eax
c00130b0:	8b 01                	mov    eax,DWORD PTR [ecx]
c00130b2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00130b6:	52                   	push   edx
c00130b7:	51                   	push   ecx
c00130b8:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00130bb:	83 c4 10             	add    esp,0x10
c00130be:	83 c4 0c             	add    esp,0xc
c00130c1:	c3                   	ret    

c00130c2 <File::chfatattr(unsigned char, unsigned char)>:
c00130c2:	57                   	push   edi
c00130c3:	b8 0b 00 00 00       	mov    eax,0xb
c00130c8:	56                   	push   esi
c00130c9:	53                   	push   ebx
c00130ca:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00130ce:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00130d2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00130d9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00130dd:	80 f9 19             	cmp    cl,0x19
c00130e0:	77 37                	ja     c0013119 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00130e2:	8b 0c 8d a0 de 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2160]
c00130e9:	85 c9                	test   ecx,ecx
c00130eb:	74 2c                	je     c0013119 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00130ed:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00130f3:	85 c9                	test   ecx,ecx
c00130f5:	74 22                	je     c0013119 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00130f7:	b8 06 00 00 00       	mov    eax,0x6
c00130fc:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013100:	75 17                	jne    c0013119 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013102:	8b 39                	mov    edi,DWORD PTR [ecx]
c0013104:	89 f0                	mov    eax,esi
c0013106:	83 c2 0d             	add    edx,0xd
c0013109:	0f b6 f0             	movzx  esi,al
c001310c:	0f b6 db             	movzx  ebx,bl
c001310f:	56                   	push   esi
c0013110:	53                   	push   ebx
c0013111:	52                   	push   edx
c0013112:	51                   	push   ecx
c0013113:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0013116:	83 c4 10             	add    esp,0x10
c0013119:	5b                   	pop    ebx
c001311a:	5e                   	pop    esi
c001311b:	5f                   	pop    edi
c001311c:	c3                   	ret    
c001311d:	90                   	nop

c001311e <File::exists()>:
c001311e:	83 ec 0c             	sub    esp,0xc
c0013121:	31 c0                	xor    eax,eax
c0013123:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013127:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001312e:	80 f9 19             	cmp    cl,0x19
c0013131:	77 24                	ja     c0013157 <File::exists()+0x39>
c0013133:	8b 0c 8d a0 de 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2160]
c001313a:	85 c9                	test   ecx,ecx
c001313c:	74 19                	je     c0013157 <File::exists()+0x39>
c001313e:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013144:	85 c9                	test   ecx,ecx
c0013146:	74 0f                	je     c0013157 <File::exists()+0x39>
c0013148:	83 c2 0d             	add    edx,0xd
c001314b:	50                   	push   eax
c001314c:	50                   	push   eax
c001314d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001314f:	52                   	push   edx
c0013150:	51                   	push   ecx
c0013151:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013154:	83 c4 10             	add    esp,0x10
c0013157:	83 c4 0c             	add    esp,0xc
c001315a:	c3                   	ret    
c001315b:	90                   	nop

c001315c <File::stat(unsigned long long*, bool*)>:
c001315c:	56                   	push   esi
c001315d:	53                   	push   ebx
c001315e:	50                   	push   eax
c001315f:	b8 0b 00 00 00       	mov    eax,0xb
c0013164:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013168:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001316c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013173:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013177:	80 f9 19             	cmp    cl,0x19
c001317a:	77 3d                	ja     c00131b9 <File::stat(unsigned long long*, bool*)+0x5d>
c001317c:	8b 0c 8d a0 de 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2160]
c0013183:	85 c9                	test   ecx,ecx
c0013185:	74 32                	je     c00131b9 <File::stat(unsigned long long*, bool*)+0x5d>
c0013187:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001318d:	85 c9                	test   ecx,ecx
c001318f:	74 28                	je     c00131b9 <File::stat(unsigned long long*, bool*)+0x5d>
c0013191:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013193:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013197:	74 13                	je     c00131ac <File::stat(unsigned long long*, bool*)+0x50>
c0013199:	83 ec 04             	sub    esp,0x4
c001319c:	56                   	push   esi
c001319d:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00131a3:	51                   	push   ecx
c00131a4:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c00131a7:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00131aa:	eb 0a                	jmp    c00131b6 <File::stat(unsigned long long*, bool*)+0x5a>
c00131ac:	53                   	push   ebx
c00131ad:	83 c2 0d             	add    edx,0xd
c00131b0:	56                   	push   esi
c00131b1:	52                   	push   edx
c00131b2:	51                   	push   ecx
c00131b3:	ff 50 30             	call   DWORD PTR [eax+0x30]
c00131b6:	83 c4 10             	add    esp,0x10
c00131b9:	5a                   	pop    edx
c00131ba:	5b                   	pop    ebx
c00131bb:	5e                   	pop    esi
c00131bc:	c3                   	ret    

c00131bd <Fs::setcwd(Process*, char*)>:
c00131bd:	55                   	push   ebp
c00131be:	57                   	push   edi
c00131bf:	56                   	push   esi
c00131c0:	53                   	push   ebx
c00131c1:	81 ec 20 02 00 00    	sub    esp,0x220
c00131c7:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c00131ce:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c00131d4:	57                   	push   edi
c00131d5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00131dc:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c00131e0:	56                   	push   esi
c00131e1:	e8 bc fa ff ff       	call   c0012ca2 <Fs::standardiseFiles(char*, char const*, char const*)>
c00131e6:	89 34 24             	mov    DWORD PTR [esp],esi
c00131e9:	e8 f3 d4 fe ff       	call   c00006e1 <strlen>
c00131ee:	83 c4 10             	add    esp,0x10
c00131f1:	83 f8 02             	cmp    eax,0x2
c00131f4:	77 17                	ja     c001320d <Fs::setcwd(Process*, char*)+0x50>
c00131f6:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c00131fb:	83 e8 41             	sub    eax,0x41
c00131fe:	83 f8 19             	cmp    eax,0x19
c0013201:	76 24                	jbe    c0013227 <Fs::setcwd(Process*, char*)+0x6a>
c0013203:	b8 03 00 00 00       	mov    eax,0x3
c0013208:	e9 e0 00 00 00       	jmp    c00132ed <Fs::setcwd(Process*, char*)+0x130>
c001320d:	83 ec 0c             	sub    esp,0xc
c0013210:	56                   	push   esi
c0013211:	e8 cb d4 fe ff       	call   c00006e1 <strlen>
c0013216:	83 c4 10             	add    esp,0x10
c0013219:	83 f8 03             	cmp    eax,0x3
c001321c:	75 34                	jne    c0013252 <Fs::setcwd(Process*, char*)+0x95>
c001321e:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0013223:	75 2d                	jne    c0013252 <Fs::setcwd(Process*, char*)+0x95>
c0013225:	eb cf                	jmp    c00131f6 <Fs::setcwd(Process*, char*)+0x39>
c0013227:	8b 14 85 a0 de 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2160]
c001322e:	b8 05 00 00 00       	mov    eax,0x5
c0013233:	85 d2                	test   edx,edx
c0013235:	0f 84 b2 00 00 00    	je     c00132ed <Fs::setcwd(Process*, char*)+0x130>
c001323b:	b8 06 00 00 00       	mov    eax,0x6
c0013240:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013247:	0f 85 92 00 00 00    	jne    c00132df <Fs::setcwd(Process*, char*)+0x122>
c001324d:	e9 9b 00 00 00       	jmp    c00132ed <Fs::setcwd(Process*, char*)+0x130>
c0013252:	83 ec 0c             	sub    esp,0xc
c0013255:	68 14 01 00 00       	push   0x114
c001325a:	e8 c5 c3 ff ff       	call   c000f624 <malloc>
c001325f:	83 c4 0c             	add    esp,0xc
c0013262:	89 c3                	mov    ebx,eax
c0013264:	55                   	push   ebp
c0013265:	56                   	push   esi
c0013266:	50                   	push   eax
c0013267:	e8 e0 fb ff ff       	call   c0012e4c <File::File(char const*, Process*)>
c001326c:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0013271:	83 c4 0c             	add    esp,0xc
c0013274:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0013278:	50                   	push   eax
c0013279:	8d 44 24 10          	lea    eax,[esp+0x10]
c001327d:	50                   	push   eax
c001327e:	53                   	push   ebx
c001327f:	e8 d8 fe ff ff       	call   c001315c <File::stat(unsigned long long*, bool*)>
c0013284:	83 c4 10             	add    esp,0x10
c0013287:	83 f8 02             	cmp    eax,0x2
c001328a:	74 04                	je     c0013290 <Fs::setcwd(Process*, char*)+0xd3>
c001328c:	85 c0                	test   eax,eax
c001328e:	74 1c                	je     c00132ac <Fs::setcwd(Process*, char*)+0xef>
c0013290:	b8 01 00 00 00       	mov    eax,0x1
c0013295:	85 db                	test   ebx,ebx
c0013297:	74 54                	je     c00132ed <Fs::setcwd(Process*, char*)+0x130>
c0013299:	83 ec 0c             	sub    esp,0xc
c001329c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001329e:	53                   	push   ebx
c001329f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00132a2:	83 c4 10             	add    esp,0x10
c00132a5:	b8 01 00 00 00       	mov    eax,0x1
c00132aa:	eb 41                	jmp    c00132ed <Fs::setcwd(Process*, char*)+0x130>
c00132ac:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c00132b1:	75 1c                	jne    c00132cf <Fs::setcwd(Process*, char*)+0x112>
c00132b3:	b8 02 00 00 00       	mov    eax,0x2
c00132b8:	85 db                	test   ebx,ebx
c00132ba:	74 31                	je     c00132ed <Fs::setcwd(Process*, char*)+0x130>
c00132bc:	83 ec 0c             	sub    esp,0xc
c00132bf:	8b 03                	mov    eax,DWORD PTR [ebx]
c00132c1:	53                   	push   ebx
c00132c2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00132c5:	83 c4 10             	add    esp,0x10
c00132c8:	b8 02 00 00 00       	mov    eax,0x2
c00132cd:	eb 1e                	jmp    c00132ed <Fs::setcwd(Process*, char*)+0x130>
c00132cf:	85 db                	test   ebx,ebx
c00132d1:	74 0c                	je     c00132df <Fs::setcwd(Process*, char*)+0x122>
c00132d3:	83 ec 0c             	sub    esp,0xc
c00132d6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00132d8:	53                   	push   ebx
c00132d9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00132dc:	83 c4 10             	add    esp,0x10
c00132df:	50                   	push   eax
c00132e0:	50                   	push   eax
c00132e1:	56                   	push   esi
c00132e2:	57                   	push   edi
c00132e3:	e8 7b d4 fe ff       	call   c0000763 <strcpy>
c00132e8:	83 c4 10             	add    esp,0x10
c00132eb:	31 c0                	xor    eax,eax
c00132ed:	81 c4 1c 02 00 00    	add    esp,0x21c
c00132f3:	5b                   	pop    ebx
c00132f4:	5e                   	pop    esi
c00132f5:	5f                   	pop    edi
c00132f6:	5d                   	pop    ebp
c00132f7:	c3                   	ret    

c00132f8 <Directory::Directory(char const*, Process*)>:
c00132f8:	83 ec 0c             	sub    esp,0xc
c00132fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132ff:	83 ec 08             	sub    esp,0x8
c0013302:	6a 00                	push   0x0
c0013304:	50                   	push   eax
c0013305:	e8 b6 e1 ff ff       	call   c00114c0 <UnixFile::UnixFile(int)>
c001330a:	83 c4 10             	add    esp,0x10
c001330d:	ba 2c a0 02 c0       	mov    edx,0xc002a02c
c0013312:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013316:	89 10                	mov    DWORD PTR [eax],edx
c0013318:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001331c:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013322:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013326:	83 c0 0d             	add    eax,0xd
c0013329:	83 ec 04             	sub    esp,0x4
c001332c:	52                   	push   edx
c001332d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013331:	50                   	push   eax
c0013332:	e8 6b f9 ff ff       	call   c0012ca2 <Fs::standardiseFiles(char*, char const*, char const*)>
c0013337:	83 c4 10             	add    esp,0x10
c001333a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001333e:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013341:	8d 50 bf             	lea    edx,[eax-0x41]
c0013344:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013348:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c001334e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013352:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013356:	90                   	nop
c0013357:	83 c4 0c             	add    esp,0xc
c001335a:	c3                   	ret    
c001335b:	90                   	nop

c001335c <Directory::open()>:
c001335c:	53                   	push   ebx
c001335d:	b8 0b 00 00 00       	mov    eax,0xb
c0013362:	83 ec 08             	sub    esp,0x8
c0013365:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013369:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013370:	80 fa 19             	cmp    dl,0x19
c0013373:	77 3d                	ja     c00133b2 <Directory::open()+0x56>
c0013375:	8b 14 95 a0 de 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2160]
c001337c:	85 d2                	test   edx,edx
c001337e:	74 32                	je     c00133b2 <Directory::open()+0x56>
c0013380:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013386:	85 d2                	test   edx,edx
c0013388:	74 28                	je     c00133b2 <Directory::open()+0x56>
c001338a:	b8 06 00 00 00       	mov    eax,0x6
c001338f:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013393:	75 1d                	jne    c00133b2 <Directory::open()+0x56>
c0013395:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001339b:	50                   	push   eax
c001339c:	8b 02                	mov    eax,DWORD PTR [edx]
c001339e:	51                   	push   ecx
c001339f:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00133a2:	51                   	push   ecx
c00133a3:	52                   	push   edx
c00133a4:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c00133a7:	83 c4 10             	add    esp,0x10
c00133aa:	85 c0                	test   eax,eax
c00133ac:	75 04                	jne    c00133b2 <Directory::open()+0x56>
c00133ae:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00133b2:	83 c4 08             	add    esp,0x8
c00133b5:	5b                   	pop    ebx
c00133b6:	c3                   	ret    
c00133b7:	90                   	nop

c00133b8 <Directory::close()>:
c00133b8:	53                   	push   ebx
c00133b9:	b8 0b 00 00 00       	mov    eax,0xb
c00133be:	83 ec 08             	sub    esp,0x8
c00133c1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00133c5:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00133cc:	80 fa 19             	cmp    dl,0x19
c00133cf:	77 41                	ja     c0013412 <Directory::close()+0x5a>
c00133d1:	8b 1c 95 a0 de 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd2160]
c00133d8:	85 db                	test   ebx,ebx
c00133da:	74 36                	je     c0013412 <Directory::close()+0x5a>
c00133dc:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c00133e3:	74 2d                	je     c0013412 <Directory::close()+0x5a>
c00133e5:	b8 05 00 00 00       	mov    eax,0x5
c00133ea:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00133ee:	74 22                	je     c0013412 <Directory::close()+0x5a>
c00133f0:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00133f4:	8b 04 95 a0 de 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2160]
c00133fb:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013401:	53                   	push   ebx
c0013402:	53                   	push   ebx
c0013403:	8b 10                	mov    edx,DWORD PTR [eax]
c0013405:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001340b:	50                   	push   eax
c001340c:	ff 52 20             	call   DWORD PTR [edx+0x20]
c001340f:	83 c4 10             	add    esp,0x10
c0013412:	83 c4 08             	add    esp,0x8
c0013415:	5b                   	pop    ebx
c0013416:	c3                   	ret    
c0013417:	90                   	nop

c0013418 <Directory::unlink()>:
c0013418:	83 ec 0c             	sub    esp,0xc
c001341b:	b8 0b 00 00 00       	mov    eax,0xb
c0013420:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013424:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001342b:	80 f9 19             	cmp    cl,0x19
c001342e:	77 2f                	ja     c001345f <Directory::unlink()+0x47>
c0013430:	8b 0c 8d a0 de 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2160]
c0013437:	85 c9                	test   ecx,ecx
c0013439:	74 24                	je     c001345f <Directory::unlink()+0x47>
c001343b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013441:	85 c9                	test   ecx,ecx
c0013443:	74 1a                	je     c001345f <Directory::unlink()+0x47>
c0013445:	b8 06 00 00 00       	mov    eax,0x6
c001344a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001344e:	75 0f                	jne    c001345f <Directory::unlink()+0x47>
c0013450:	83 c2 0d             	add    edx,0xd
c0013453:	50                   	push   eax
c0013454:	50                   	push   eax
c0013455:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013457:	52                   	push   edx
c0013458:	51                   	push   ecx
c0013459:	ff 50 38             	call   DWORD PTR [eax+0x38]
c001345c:	83 c4 10             	add    esp,0x10
c001345f:	83 c4 0c             	add    esp,0xc
c0013462:	c3                   	ret    
c0013463:	90                   	nop

c0013464 <Directory::rename(char const*)>:
c0013464:	83 ec 0c             	sub    esp,0xc
c0013467:	b8 0b 00 00 00       	mov    eax,0xb
c001346c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013470:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013477:	80 f9 19             	cmp    cl,0x19
c001347a:	77 32                	ja     c00134ae <Directory::rename(char const*)+0x4a>
c001347c:	8b 0c 8d a0 de 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2160]
c0013483:	85 c9                	test   ecx,ecx
c0013485:	74 27                	je     c00134ae <Directory::rename(char const*)+0x4a>
c0013487:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001348d:	85 c9                	test   ecx,ecx
c001348f:	74 1d                	je     c00134ae <Directory::rename(char const*)+0x4a>
c0013491:	b8 06 00 00 00       	mov    eax,0x6
c0013496:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001349a:	75 12                	jne    c00134ae <Directory::rename(char const*)+0x4a>
c001349c:	83 c2 0d             	add    edx,0xd
c001349f:	50                   	push   eax
c00134a0:	8b 01                	mov    eax,DWORD PTR [ecx]
c00134a2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00134a6:	52                   	push   edx
c00134a7:	51                   	push   ecx
c00134a8:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00134ab:	83 c4 10             	add    esp,0x10
c00134ae:	83 c4 0c             	add    esp,0xc
c00134b1:	c3                   	ret    

c00134b2 <Directory::exists()>:
c00134b2:	83 ec 0c             	sub    esp,0xc
c00134b5:	31 c0                	xor    eax,eax
c00134b7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00134bb:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00134c2:	80 f9 19             	cmp    cl,0x19
c00134c5:	77 24                	ja     c00134eb <Directory::exists()+0x39>
c00134c7:	8b 0c 8d a0 de 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2160]
c00134ce:	85 c9                	test   ecx,ecx
c00134d0:	74 19                	je     c00134eb <Directory::exists()+0x39>
c00134d2:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00134d8:	85 c9                	test   ecx,ecx
c00134da:	74 0f                	je     c00134eb <Directory::exists()+0x39>
c00134dc:	83 c2 0d             	add    edx,0xd
c00134df:	50                   	push   eax
c00134e0:	50                   	push   eax
c00134e1:	8b 01                	mov    eax,DWORD PTR [ecx]
c00134e3:	52                   	push   edx
c00134e4:	51                   	push   ecx
c00134e5:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00134e8:	83 c4 10             	add    esp,0x10
c00134eb:	83 c4 0c             	add    esp,0xc
c00134ee:	c3                   	ret    
c00134ef:	90                   	nop

c00134f0 <Directory::read(dirent*)>:
c00134f0:	83 ec 1c             	sub    esp,0x1c
c00134f3:	b8 0b 00 00 00       	mov    eax,0xb
c00134f8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00134fc:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013503:	80 fa 19             	cmp    dl,0x19
c0013506:	77 30                	ja     c0013538 <Directory::read(dirent*)+0x48>
c0013508:	8b 14 95 a0 de 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2160]
c001350f:	85 d2                	test   edx,edx
c0013511:	74 25                	je     c0013538 <Directory::read(dirent*)+0x48>
c0013513:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c001351a:	74 1c                	je     c0013538 <Directory::read(dirent*)+0x48>
c001351c:	83 ec 0c             	sub    esp,0xc
c001351f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013521:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013525:	52                   	push   edx
c0013526:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001352a:	6a 00                	push   0x0
c001352c:	68 10 01 00 00       	push   0x110
c0013531:	51                   	push   ecx
c0013532:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013535:	83 c4 20             	add    esp,0x20
c0013538:	83 c4 1c             	add    esp,0x1c
c001353b:	c3                   	ret    

c001353c <Directory::create()>:
c001353c:	83 ec 0c             	sub    esp,0xc
c001353f:	b8 0b 00 00 00       	mov    eax,0xb
c0013544:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013548:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001354f:	80 f9 19             	cmp    cl,0x19
c0013552:	77 2f                	ja     c0013583 <Directory::create()+0x47>
c0013554:	8b 0c 8d a0 de 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2160]
c001355b:	85 c9                	test   ecx,ecx
c001355d:	74 24                	je     c0013583 <Directory::create()+0x47>
c001355f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013565:	85 c9                	test   ecx,ecx
c0013567:	74 1a                	je     c0013583 <Directory::create()+0x47>
c0013569:	b8 06 00 00 00       	mov    eax,0x6
c001356e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013572:	75 0f                	jne    c0013583 <Directory::create()+0x47>
c0013574:	83 c2 0d             	add    edx,0xd
c0013577:	50                   	push   eax
c0013578:	50                   	push   eax
c0013579:	8b 01                	mov    eax,DWORD PTR [ecx]
c001357b:	52                   	push   edx
c001357c:	51                   	push   ecx
c001357d:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013580:	83 c4 10             	add    esp,0x10
c0013583:	83 c4 0c             	add    esp,0xc
c0013586:	c3                   	ret    
c0013587:	90                   	nop

c0013588 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013588:	b8 0a 00 00 00       	mov    eax,0xa
c001358d:	c3                   	ret    

c001358e <Bus::Bus(char const*)>:
c001358e:	83 ec 0c             	sub    esp,0xc
c0013591:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013595:	83 ec 08             	sub    esp,0x8
c0013598:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001359c:	50                   	push   eax
c001359d:	e8 68 09 00 00       	call   c0013f0a <Device::Device(char const*)>
c00135a2:	83 c4 10             	add    esp,0x10
c00135a5:	ba 48 a0 02 c0       	mov    edx,0xc002a048
c00135aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135ae:	89 10                	mov    DWORD PTR [eax],edx
c00135b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135b4:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c00135be:	90                   	nop
c00135bf:	83 c4 0c             	add    esp,0xc
c00135c2:	c3                   	ret    
c00135c3:	90                   	nop

c00135c4 <Bus::~Bus()>:
c00135c4:	83 ec 0c             	sub    esp,0xc
c00135c7:	ba 48 a0 02 c0       	mov    edx,0xc002a048
c00135cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135d0:	89 10                	mov    DWORD PTR [eax],edx
c00135d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135d6:	83 ec 0c             	sub    esp,0xc
c00135d9:	50                   	push   eax
c00135da:	e8 0d 06 00 00       	call   c0013bec <Device::~Device()>
c00135df:	83 c4 10             	add    esp,0x10
c00135e2:	90                   	nop
c00135e3:	83 c4 0c             	add    esp,0xc
c00135e6:	c3                   	ret    
c00135e7:	90                   	nop

c00135e8 <Bus::~Bus()>:
c00135e8:	83 ec 0c             	sub    esp,0xc
c00135eb:	83 ec 0c             	sub    esp,0xc
c00135ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135f2:	e8 cd ff ff ff       	call   c00135c4 <Bus::~Bus()>
c00135f7:	83 c4 10             	add    esp,0x10
c00135fa:	83 ec 08             	sub    esp,0x8
c00135fd:	68 58 01 00 00       	push   0x158
c0013602:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013606:	e8 08 f2 ff ff       	call   c0012813 <operator delete(void*, unsigned long)>
c001360b:	83 c4 10             	add    esp,0x10
c001360e:	83 c4 0c             	add    esp,0xc
c0013611:	c3                   	ret    

c0013612 <Buzzer::Buzzer(char const*)>:
c0013612:	83 ec 0c             	sub    esp,0xc
c0013615:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013619:	83 ec 08             	sub    esp,0x8
c001361c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013620:	50                   	push   eax
c0013621:	e8 e4 08 00 00       	call   c0013f0a <Device::Device(char const*)>
c0013626:	83 c4 10             	add    esp,0x10
c0013629:	ba 74 a0 02 c0       	mov    edx,0xc002a074
c001362e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013632:	89 10                	mov    DWORD PTR [eax],edx
c0013634:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013638:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013642:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013646:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013650:	90                   	nop
c0013651:	83 c4 0c             	add    esp,0xc
c0013654:	c3                   	ret    
c0013655:	90                   	nop

c0013656 <Buzzer::~Buzzer()>:
c0013656:	83 ec 0c             	sub    esp,0xc
c0013659:	ba 74 a0 02 c0       	mov    edx,0xc002a074
c001365e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013662:	89 10                	mov    DWORD PTR [eax],edx
c0013664:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013668:	83 ec 0c             	sub    esp,0xc
c001366b:	50                   	push   eax
c001366c:	e8 7b 05 00 00       	call   c0013bec <Device::~Device()>
c0013671:	83 c4 10             	add    esp,0x10
c0013674:	90                   	nop
c0013675:	83 c4 0c             	add    esp,0xc
c0013678:	c3                   	ret    
c0013679:	90                   	nop

c001367a <Buzzer::~Buzzer()>:
c001367a:	83 ec 0c             	sub    esp,0xc
c001367d:	83 ec 0c             	sub    esp,0xc
c0013680:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013684:	e8 cd ff ff ff       	call   c0013656 <Buzzer::~Buzzer()>
c0013689:	83 c4 10             	add    esp,0x10
c001368c:	83 ec 08             	sub    esp,0x8
c001368f:	68 5c 01 00 00       	push   0x15c
c0013694:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013698:	e8 76 f1 ff ff       	call   c0012813 <operator delete(void*, unsigned long)>
c001369d:	83 c4 10             	add    esp,0x10
c00136a0:	83 c4 0c             	add    esp,0xc
c00136a3:	c3                   	ret    

c00136a4 <Buzzer::stop()>:
c00136a4:	83 ec 14             	sub    esp,0x14
c00136a7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00136ab:	8b 10                	mov    edx,DWORD PTR [eax]
c00136ad:	6a 00                	push   0x0
c00136af:	50                   	push   eax
c00136b0:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00136b3:	83 c4 1c             	add    esp,0x1c
c00136b6:	c3                   	ret    

c00136b7 <beepThread(void*)>:
c00136b7:	53                   	push   ebx
c00136b8:	83 ec 08             	sub    esp,0x8
c00136bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00136bf:	e8 c2 9b 00 00       	call   c001d286 <unlockScheduler()>
c00136c4:	b8 40 42 0f 00       	mov    eax,0xf4240
c00136c9:	52                   	push   edx
c00136ca:	52                   	push   edx
c00136cb:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c00136d1:	52                   	push   edx
c00136d2:	50                   	push   eax
c00136d3:	e8 fc a0 00 00       	call   c001d7d4 <nanoSleep(unsigned long long)>
c00136d8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00136db:	e8 c4 ff ff ff       	call   c00136a4 <Buzzer::stop()>
c00136e0:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c00136e8:	83 c4 18             	add    esp,0x18
c00136eb:	5b                   	pop    ebx
c00136ec:	e9 29 a0 00 00       	jmp    c001d71a <blockTask(TaskState)>
c00136f1:	90                   	nop

c00136f2 <Buzzer::beep(int, int, bool)>:
c00136f2:	57                   	push   edi
c00136f3:	56                   	push   esi
c00136f4:	53                   	push   ebx
c00136f5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00136f9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00136fd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013701:	52                   	push   edx
c0013702:	52                   	push   edx
c0013703:	8b 06                	mov    eax,DWORD PTR [esi]
c0013705:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013709:	56                   	push   esi
c001370a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001370d:	83 c4 10             	add    esp,0x10
c0013710:	89 f8                	mov    eax,edi
c0013712:	84 c0                	test   al,al
c0013714:	74 1f                	je     c0013735 <Buzzer::beep(int, int, bool)+0x43>
c0013716:	50                   	push   eax
c0013717:	50                   	push   eax
c0013718:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c001371e:	99                   	cdq    
c001371f:	52                   	push   edx
c0013720:	50                   	push   eax
c0013721:	e8 ae a0 00 00       	call   c001d7d4 <nanoSleep(unsigned long long)>
c0013726:	83 c4 10             	add    esp,0x10
c0013729:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001372d:	5b                   	pop    ebx
c001372e:	5e                   	pop    esi
c001372f:	5f                   	pop    edi
c0013730:	e9 6f ff ff ff       	jmp    c00136a4 <Buzzer::stop()>
c0013735:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c001373b:	a1 d4 ed 02 c0       	mov    eax,ds:0xc002edd4
c0013740:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013748:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c001374c:	c7 44 24 14 b7 36 01 c0 	mov    DWORD PTR [esp+0x14],0xc00136b7
c0013754:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013758:	5b                   	pop    ebx
c0013759:	5e                   	pop    esi
c001375a:	5f                   	pop    edi
c001375b:	e9 56 9c 00 00       	jmp    c001d3b6 <Process::createThread(void (*)(void*), void*, int)>

c0013760 <User::loadClockSettings(int)>:
c0013760:	53                   	push   ebx
c0013761:	83 ec 14             	sub    esp,0x14
c0013764:	68 14 01 00 00       	push   0x114
c0013769:	e8 b6 be ff ff       	call   c000f624 <malloc>
c001376e:	83 c4 0c             	add    esp,0xc
c0013771:	89 c3                	mov    ebx,eax
c0013773:	ff 35 d4 ed 02 c0    	push   DWORD PTR ds:0xc002edd4
c0013779:	68 9c a0 02 c0       	push   0xc002a09c
c001377e:	50                   	push   eax
c001377f:	e8 c8 f6 ff ff       	call   c0012e4c <File::File(char const*, Process*)>
c0013784:	58                   	pop    eax
c0013785:	5a                   	pop    edx
c0013786:	6a 01                	push   0x1
c0013788:	53                   	push   ebx
c0013789:	e8 22 f7 ff ff       	call   c0012eb0 <File::open(FileOpenMode)>
c001378e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013791:	e8 78 f7 ff ff       	call   c0012f0e <File::close()>
c0013796:	83 c4 10             	add    esp,0x10
c0013799:	85 db                	test   ebx,ebx
c001379b:	74 0f                	je     c00137ac <User::loadClockSettings(int)+0x4c>
c001379d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001379f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00137a3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00137a6:	83 c4 08             	add    esp,0x8
c00137a9:	5b                   	pop    ebx
c00137aa:	ff e0                	jmp    eax
c00137ac:	83 c4 08             	add    esp,0x8
c00137af:	5b                   	pop    ebx
c00137b0:	c3                   	ret    
c00137b1:	90                   	nop

c00137b2 <Clock::Clock(char const*)>:
c00137b2:	83 ec 0c             	sub    esp,0xc
c00137b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137b9:	83 ec 08             	sub    esp,0x8
c00137bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00137c0:	50                   	push   eax
c00137c1:	e8 44 07 00 00       	call   c0013f0a <Device::Device(char const*)>
c00137c6:	83 c4 10             	add    esp,0x10
c00137c9:	ba c4 a0 02 c0       	mov    edx,0xc002a0c4
c00137ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137d2:	89 10                	mov    DWORD PTR [eax],edx
c00137d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137d8:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c00137e2:	90                   	nop
c00137e3:	83 c4 0c             	add    esp,0xc
c00137e6:	c3                   	ret    
c00137e7:	90                   	nop

c00137e8 <Clock::~Clock()>:
c00137e8:	83 ec 0c             	sub    esp,0xc
c00137eb:	ba c4 a0 02 c0       	mov    edx,0xc002a0c4
c00137f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137f4:	89 10                	mov    DWORD PTR [eax],edx
c00137f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137fa:	83 ec 0c             	sub    esp,0xc
c00137fd:	50                   	push   eax
c00137fe:	e8 e9 03 00 00       	call   c0013bec <Device::~Device()>
c0013803:	83 c4 10             	add    esp,0x10
c0013806:	90                   	nop
c0013807:	83 c4 0c             	add    esp,0xc
c001380a:	c3                   	ret    
c001380b:	90                   	nop

c001380c <Clock::~Clock()>:
c001380c:	83 ec 0c             	sub    esp,0xc
c001380f:	83 ec 0c             	sub    esp,0xc
c0013812:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013816:	e8 cd ff ff ff       	call   c00137e8 <Clock::~Clock()>
c001381b:	83 c4 10             	add    esp,0x10
c001381e:	83 ec 08             	sub    esp,0x8
c0013821:	68 58 01 00 00       	push   0x158
c0013826:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001382a:	e8 e4 ef ff ff       	call   c0012813 <operator delete(void*, unsigned long)>
c001382f:	83 c4 10             	add    esp,0x10
c0013832:	83 c4 0c             	add    esp,0xc
c0013835:	c3                   	ret    

c0013836 <Clock::timeInSecondsLocal()>:
c0013836:	53                   	push   ebx
c0013837:	83 ec 14             	sub    esp,0x14
c001383a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001383e:	8b 10                	mov    edx,DWORD PTR [eax]
c0013840:	50                   	push   eax
c0013841:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013844:	0f b6 0d 10 da 02 c0 	movzx  ecx,BYTE PTR ds:0xc002da10
c001384b:	03 0d 14 da 02 c0    	add    ecx,DWORD PTR ds:0xc002da14
c0013851:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013857:	89 cb                	mov    ebx,ecx
c0013859:	c1 fb 1f             	sar    ebx,0x1f
c001385c:	01 c8                	add    eax,ecx
c001385e:	11 da                	adc    edx,ebx
c0013860:	83 c4 10             	add    esp,0x10
c0013863:	31 c9                	xor    ecx,ecx
c0013865:	80 3d 11 da 02 c0 00 	cmp    BYTE PTR ds:0xc002da11,0x0
c001386c:	74 05                	je     c0013873 <Clock::timeInSecondsLocal()+0x3d>
c001386e:	b9 08 07 00 00       	mov    ecx,0x708
c0013873:	31 db                	xor    ebx,ebx
c0013875:	01 c8                	add    eax,ecx
c0013877:	11 da                	adc    edx,ebx
c0013879:	83 c4 08             	add    esp,0x8
c001387c:	5b                   	pop    ebx
c001387d:	c3                   	ret    

c001387e <Clock::setTimeInSecondsLocal(unsigned long long)>:
c001387e:	57                   	push   edi
c001387f:	56                   	push   esi
c0013880:	53                   	push   ebx
c0013881:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013885:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013889:	8b 01                	mov    eax,DWORD PTR [ecx]
c001388b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001388f:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013892:	0f b6 05 10 da 02 c0 	movzx  eax,BYTE PTR ds:0xc002da10
c0013899:	03 05 14 da 02 c0    	add    eax,DWORD PTR ds:0xc002da14
c001389f:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c00138a5:	99                   	cdq    
c00138a6:	29 c6                	sub    esi,eax
c00138a8:	19 d7                	sbb    edi,edx
c00138aa:	89 f0                	mov    eax,esi
c00138ac:	89 fa                	mov    edx,edi
c00138ae:	31 f6                	xor    esi,esi
c00138b0:	80 3d 11 da 02 c0 00 	cmp    BYTE PTR ds:0xc002da11,0x0
c00138b7:	74 05                	je     c00138be <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c00138b9:	be 08 07 00 00       	mov    esi,0x708
c00138be:	31 ff                	xor    edi,edi
c00138c0:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00138c4:	29 f0                	sub    eax,esi
c00138c6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00138ca:	19 fa                	sbb    edx,edi
c00138cc:	89 d8                	mov    eax,ebx
c00138ce:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00138d2:	5b                   	pop    ebx
c00138d3:	5e                   	pop    esi
c00138d4:	5f                   	pop    edi
c00138d5:	ff e0                	jmp    eax

c00138d7 <datetimeToSeconds(datetime_t)>:
c00138d7:	55                   	push   ebp
c00138d8:	57                   	push   edi
c00138d9:	56                   	push   esi
c00138da:	53                   	push   ebx
c00138db:	83 ec 14             	sub    esp,0x14
c00138de:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00138e2:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00138e6:	89 d3                	mov    ebx,edx
c00138e8:	0f b6 c6             	movzx  eax,dh
c00138eb:	c1 eb 10             	shr    ebx,0x10
c00138ee:	48                   	dec    eax
c00138ef:	66 81 eb 6c 07       	sub    bx,0x76c
c00138f4:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00138f8:	0f b6 f5             	movzx  esi,ch
c00138fb:	89 cf                	mov    edi,ecx
c00138fd:	6b f6 3c             	imul   esi,esi,0x3c
c0013900:	c1 ef 10             	shr    edi,0x10
c0013903:	0f b6 c9             	movzx  ecx,cl
c0013906:	89 f8                	mov    eax,edi
c0013908:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001390e:	0f b6 f8             	movzx  edi,al
c0013911:	0f b6 d2             	movzx  edx,dl
c0013914:	01 fe                	add    esi,edi
c0013916:	01 f1                	add    ecx,esi
c0013918:	0f b7 f3             	movzx  esi,bx
c001391b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001391f:	c1 f9 1f             	sar    ecx,0x1f
c0013922:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013927:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001392b:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013930:	8b 0c 8d 00 a1 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5f00]
c0013937:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c001393b:	76 29                	jbe    c0013966 <datetimeToSeconds(datetime_t)+0x8f>
c001393d:	f6 c3 03             	test   bl,0x3
c0013940:	75 24                	jne    c0013966 <datetimeToSeconds(datetime_t)+0x8f>
c0013942:	31 d2                	xor    edx,edx
c0013944:	bf 64 00 00 00       	mov    edi,0x64
c0013949:	89 d8                	mov    eax,ebx
c001394b:	66 f7 f7             	div    di
c001394e:	66 85 d2             	test   dx,dx
c0013951:	75 12                	jne    c0013965 <datetimeToSeconds(datetime_t)+0x8e>
c0013953:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013959:	bf 90 01 00 00       	mov    edi,0x190
c001395e:	99                   	cdq    
c001395f:	f7 ff                	idiv   edi
c0013961:	85 d2                	test   edx,edx
c0013963:	75 01                	jne    c0013966 <datetimeToSeconds(datetime_t)+0x8f>
c0013965:	41                   	inc    ecx
c0013966:	66 83 fb 46          	cmp    bx,0x46
c001396a:	76 45                	jbe    c00139b1 <datetimeToSeconds(datetime_t)+0xda>
c001396c:	bb 46 00 00 00       	mov    ebx,0x46
c0013971:	bf 64 00 00 00       	mov    edi,0x64
c0013976:	bd 90 01 00 00       	mov    ebp,0x190
c001397b:	b8 6d 01 00 00       	mov    eax,0x16d
c0013980:	f6 c3 03             	test   bl,0x3
c0013983:	75 23                	jne    c00139a8 <datetimeToSeconds(datetime_t)+0xd1>
c0013985:	89 d8                	mov    eax,ebx
c0013987:	99                   	cdq    
c0013988:	f7 ff                	idiv   edi
c001398a:	b8 6e 01 00 00       	mov    eax,0x16e
c001398f:	85 d2                	test   edx,edx
c0013991:	75 15                	jne    c00139a8 <datetimeToSeconds(datetime_t)+0xd1>
c0013993:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013999:	99                   	cdq    
c001399a:	f7 fd                	idiv   ebp
c001399c:	83 fa 01             	cmp    edx,0x1
c001399f:	19 c0                	sbb    eax,eax
c00139a1:	f7 d0                	not    eax
c00139a3:	05 6e 01 00 00       	add    eax,0x16e
c00139a8:	01 c1                	add    ecx,eax
c00139aa:	43                   	inc    ebx
c00139ab:	39 f3                	cmp    ebx,esi
c00139ad:	7c cc                	jl     c001397b <datetimeToSeconds(datetime_t)+0xa4>
c00139af:	eb 35                	jmp    c00139e6 <datetimeToSeconds(datetime_t)+0x10f>
c00139b1:	74 33                	je     c00139e6 <datetimeToSeconds(datetime_t)+0x10f>
c00139b3:	b8 45 00 00 00       	mov    eax,0x45
c00139b8:	89 c2                	mov    edx,eax
c00139ba:	83 e2 03             	and    edx,0x3
c00139bd:	39 f0                	cmp    eax,esi
c00139bf:	7e 0f                	jle    c00139d0 <datetimeToSeconds(datetime_t)+0xf9>
c00139c1:	83 fa 01             	cmp    edx,0x1
c00139c4:	19 d2                	sbb    edx,edx
c00139c6:	48                   	dec    eax
c00139c7:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c00139ce:	eb e8                	jmp    c00139b8 <datetimeToSeconds(datetime_t)+0xe1>
c00139d0:	b8 6d 01 00 00       	mov    eax,0x16d
c00139d5:	85 d2                	test   edx,edx
c00139d7:	75 0b                	jne    c00139e4 <datetimeToSeconds(datetime_t)+0x10d>
c00139d9:	66 83 fb 01          	cmp    bx,0x1
c00139dd:	19 c0                	sbb    eax,eax
c00139df:	05 6e 01 00 00       	add    eax,0x16e
c00139e4:	29 c1                	sub    ecx,eax
c00139e6:	b8 80 51 01 00       	mov    eax,0x15180
c00139eb:	f7 e9                	imul   ecx
c00139ed:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00139f1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00139f5:	83 c4 14             	add    esp,0x14
c00139f8:	5b                   	pop    ebx
c00139f9:	5e                   	pop    esi
c00139fa:	5f                   	pop    edi
c00139fb:	5d                   	pop    ebp
c00139fc:	c3                   	ret    
c00139fd:	90                   	nop

c00139fe <Clock::setTimeInDatetimeLocal(datetime_t)>:
c00139fe:	57                   	push   edi
c00139ff:	56                   	push   esi
c0013a00:	53                   	push   ebx
c0013a01:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013a05:	8b 06                	mov    eax,DWORD PTR [esi]
c0013a07:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013a0a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013a0e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013a12:	e8 c0 fe ff ff       	call   c00138d7 <datetimeToSeconds(datetime_t)>
c0013a17:	59                   	pop    ecx
c0013a18:	0f b6 0d 10 da 02 c0 	movzx  ecx,BYTE PTR ds:0xc002da10
c0013a1f:	5b                   	pop    ebx
c0013a20:	03 0d 14 da 02 c0    	add    ecx,DWORD PTR ds:0xc002da14
c0013a26:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013a2c:	89 cb                	mov    ebx,ecx
c0013a2e:	c1 fb 1f             	sar    ebx,0x1f
c0013a31:	29 c8                	sub    eax,ecx
c0013a33:	19 da                	sbb    edx,ebx
c0013a35:	31 c9                	xor    ecx,ecx
c0013a37:	80 3d 11 da 02 c0 00 	cmp    BYTE PTR ds:0xc002da11,0x0
c0013a3e:	74 05                	je     c0013a45 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013a40:	b9 08 07 00 00       	mov    ecx,0x708
c0013a45:	31 db                	xor    ebx,ebx
c0013a47:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013a4b:	29 c8                	sub    eax,ecx
c0013a4d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013a51:	19 da                	sbb    edx,ebx
c0013a53:	89 f8                	mov    eax,edi
c0013a55:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013a59:	5b                   	pop    ebx
c0013a5a:	5e                   	pop    esi
c0013a5b:	5f                   	pop    edi
c0013a5c:	ff e0                	jmp    eax

c0013a5e <secondsToDatetime(unsigned long long)>:
c0013a5e:	55                   	push   ebp
c0013a5f:	57                   	push   edi
c0013a60:	56                   	push   esi
c0013a61:	53                   	push   ebx
c0013a62:	83 ec 1c             	sub    esp,0x1c
c0013a65:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013a69:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013a6d:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0013a71:	6a 00                	push   0x0
c0013a73:	68 80 51 01 00       	push   0x15180
c0013a78:	55                   	push   ebp
c0013a79:	57                   	push   edi
c0013a7a:	e8 cd 24 01 00       	call   c0025f4c <__udivdi3>
c0013a7f:	83 c4 10             	add    esp,0x10
c0013a82:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0013a88:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013a8c:	6a 00                	push   0x0
c0013a8e:	68 80 51 01 00       	push   0x15180
c0013a93:	55                   	push   ebp
c0013a94:	57                   	push   edi
c0013a95:	bf 10 0e 00 00       	mov    edi,0xe10
c0013a9a:	e8 ad 25 01 00       	call   c002604c <__umoddi3>
c0013a9f:	83 c4 10             	add    esp,0x10
c0013aa2:	99                   	cdq    
c0013aa3:	f7 ff                	idiv   edi
c0013aa5:	bf 3c 00 00 00       	mov    edi,0x3c
c0013aaa:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0013aad:	89 d0                	mov    eax,edx
c0013aaf:	99                   	cdq    
c0013ab0:	f7 ff                	idiv   edi
c0013ab2:	85 db                	test   ebx,ebx
c0013ab4:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0013ab7:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0013aba:	79 11                	jns    c0013acd <secondsToDatetime(unsigned long long)+0x6f>
c0013abc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013ac0:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0013ac6:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013acb:	eb 07                	jmp    c0013ad4 <secondsToDatetime(unsigned long long)+0x76>
c0013acd:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013ad2:	89 d8                	mov    eax,ebx
c0013ad4:	bf b4 05 00 00       	mov    edi,0x5b4
c0013ad9:	99                   	cdq    
c0013ada:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0013adf:	f7 f9                	idiv   ecx
c0013ae1:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0013ae6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013aea:	31 d2                	xor    edx,edx
c0013aec:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0013af4:	01 c3                	add    ebx,eax
c0013af6:	89 d8                	mov    eax,ebx
c0013af8:	f7 f1                	div    ecx
c0013afa:	31 d2                	xor    edx,edx
c0013afc:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0013aff:	89 d8                	mov    eax,ebx
c0013b01:	f7 f7                	div    edi
c0013b03:	31 d2                	xor    edx,edx
c0013b05:	29 c1                	sub    ecx,eax
c0013b07:	89 d8                	mov    eax,ebx
c0013b09:	f7 f5                	div    ebp
c0013b0b:	bd 6d 01 00 00       	mov    ebp,0x16d
c0013b10:	29 c1                	sub    ecx,eax
c0013b12:	31 d2                	xor    edx,edx
c0013b14:	89 c8                	mov    eax,ecx
c0013b16:	f7 f5                	div    ebp
c0013b18:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0013b1d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013b21:	31 d2                	xor    edx,edx
c0013b23:	89 c8                	mov    eax,ecx
c0013b25:	f7 f5                	div    ebp
c0013b27:	31 d2                	xor    edx,edx
c0013b29:	01 c3                	add    ebx,eax
c0013b2b:	89 c8                	mov    eax,ecx
c0013b2d:	f7 f7                	div    edi
c0013b2f:	bf 99 00 00 00       	mov    edi,0x99
c0013b34:	29 c3                	sub    ebx,eax
c0013b36:	31 d2                	xor    edx,edx
c0013b38:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0013b40:	29 c3                	sub    ebx,eax
c0013b42:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013b45:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0013b48:	bb 05 00 00 00       	mov    ebx,0x5
c0013b4d:	83 c1 02             	add    ecx,0x2
c0013b50:	89 c8                	mov    eax,ecx
c0013b52:	f7 f7                	div    edi
c0013b54:	31 d2                	xor    edx,edx
c0013b56:	89 c7                	mov    edi,eax
c0013b58:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0013b5e:	83 c0 02             	add    eax,0x2
c0013b61:	f7 f3                	div    ebx
c0013b63:	89 eb                	mov    ebx,ebp
c0013b65:	29 c3                	sub    ebx,eax
c0013b67:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0013b6d:	88 1e                	mov    BYTE PTR [esi],bl
c0013b6f:	19 c0                	sbb    eax,eax
c0013b71:	31 d2                	xor    edx,edx
c0013b73:	83 e0 0c             	and    eax,0xc
c0013b76:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0013b7a:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0013b82:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0013b86:	83 f9 01             	cmp    ecx,0x1
c0013b89:	0f 96 c2             	setbe  dl
c0013b8c:	41                   	inc    ecx
c0013b8d:	01 d0                	add    eax,edx
c0013b8f:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0013b92:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0013b96:	83 c4 1c             	add    esp,0x1c
c0013b99:	89 f0                	mov    eax,esi
c0013b9b:	5b                   	pop    ebx
c0013b9c:	5e                   	pop    esi
c0013b9d:	5f                   	pop    edi
c0013b9e:	5d                   	pop    ebp
c0013b9f:	c2 04 00             	ret    0x4

c0013ba2 <Clock::timeInDatetimeLocal()>:
c0013ba2:	53                   	push   ebx
c0013ba3:	83 ec 14             	sub    esp,0x14
c0013ba6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013baa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013bae:	e8 83 fc ff ff       	call   c0013836 <Clock::timeInSecondsLocal()>
c0013bb3:	83 c4 0c             	add    esp,0xc
c0013bb6:	52                   	push   edx
c0013bb7:	50                   	push   eax
c0013bb8:	53                   	push   ebx
c0013bb9:	e8 a0 fe ff ff       	call   c0013a5e <secondsToDatetime(unsigned long long)>
c0013bbe:	89 d8                	mov    eax,ebx
c0013bc0:	83 c4 14             	add    esp,0x14
c0013bc3:	5b                   	pop    ebx
c0013bc4:	c2 04 00             	ret    0x4
c0013bc7:	90                   	nop

c0013bc8 <Device::hibernate()>:
c0013bc8:	c3                   	ret    
c0013bc9:	90                   	nop

c0013bca <Device::wake()>:
c0013bca:	c3                   	ret    
c0013bcb:	90                   	nop

c0013bcc <Device::detect()>:
c0013bcc:	c3                   	ret    
c0013bcd:	90                   	nop

c0013bce <Device::disableLegacy()>:
c0013bce:	c3                   	ret    
c0013bcf:	90                   	nop

c0013bd0 <Device::powerSaving(PowerSavingLevel)>:
c0013bd0:	c3                   	ret    
c0013bd1:	90                   	nop

c0013bd2 <DriverlessDevice::close(int, int, void*)>:
c0013bd2:	31 c0                	xor    eax,eax
c0013bd4:	c3                   	ret    
c0013bd5:	90                   	nop

c0013bd6 <DriverlessDevice::detect()>:
c0013bd6:	c3                   	ret    
c0013bd7:	90                   	nop

c0013bd8 <DriverlessDevice::open(int, int, void*)>:
c0013bd8:	83 ec 18             	sub    esp,0x18
c0013bdb:	68 30 a1 02 c0       	push   0xc002a130
c0013be0:	e8 68 60 00 00       	call   c0019c4d <Krnl::panic(char const*)>
c0013be5:	83 c8 ff             	or     eax,0xffffffff
c0013be8:	83 c4 1c             	add    esp,0x1c
c0013beb:	c3                   	ret    

c0013bec <Device::~Device()>:
c0013bec:	ba 58 a1 02 c0       	mov    edx,0xc002a158
c0013bf1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013bf5:	89 10                	mov    DWORD PTR [eax],edx
c0013bf7:	90                   	nop
c0013bf8:	c3                   	ret    
c0013bf9:	90                   	nop

c0013bfa <Device::~Device()>:
c0013bfa:	83 ec 0c             	sub    esp,0xc
c0013bfd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013c01:	e8 e6 ff ff ff       	call   c0013bec <Device::~Device()>
c0013c06:	83 c4 04             	add    esp,0x4
c0013c09:	83 ec 08             	sub    esp,0x8
c0013c0c:	68 58 01 00 00       	push   0x158
c0013c11:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c15:	e8 f9 eb ff ff       	call   c0012813 <operator delete(void*, unsigned long)>
c0013c1a:	83 c4 10             	add    esp,0x10
c0013c1d:	83 c4 0c             	add    esp,0xc
c0013c20:	c3                   	ret    
c0013c21:	90                   	nop

c0013c22 <Device::findAndLoadDriver()>:
c0013c22:	c3                   	ret    
c0013c23:	90                   	nop

c0013c24 <Device::preOpenPCI(PCIDeviceInfo)>:
c0013c24:	57                   	push   edi
c0013c25:	b9 09 00 00 00       	mov    ecx,0x9
c0013c2a:	56                   	push   esi
c0013c2b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013c2f:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013c33:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0013c3d:	81 c7 18 01 00 00    	add    edi,0x118
c0013c43:	fc                   	cld    
c0013c44:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013c46:	5e                   	pop    esi
c0013c47:	5f                   	pop    edi
c0013c48:	c3                   	ret    
c0013c49:	90                   	nop

c0013c4a <Device::preOpenACPI(void*, char*, char*)>:
c0013c4a:	56                   	push   esi
c0013c4b:	53                   	push   ebx
c0013c4c:	83 ec 08             	sub    esp,0x8
c0013c4f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013c53:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0013c57:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c0013c61:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c65:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c0013c6b:	6a 1e                	push   0x1e
c0013c6d:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c0013c73:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013c77:	81 c3 3a 01 00 00    	add    ebx,0x13a
c0013c7d:	50                   	push   eax
c0013c7e:	e8 1d ca fe ff       	call   c00006a0 <memcpy>
c0013c83:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0013c87:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0013c8b:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c0013c93:	83 c4 14             	add    esp,0x14
c0013c96:	5b                   	pop    ebx
c0013c97:	5e                   	pop    esi
c0013c98:	e9 03 ca fe ff       	jmp    c00006a0 <memcpy>
c0013c9d:	90                   	nop

c0013c9e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013c9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013ca2:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013ca7:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013cae:	75 0b                	jne    c0013cbb <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0013cb0:	8b 00                	mov    eax,DWORD PTR [eax]
c0013cb2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013cb6:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0013cb9:	eb 1e                	jmp    c0013cd9 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0013cbb:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c0013cc0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013cc6:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013ccc:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013cce:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013cd2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013cd6:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0013cd9:	ff e0                	jmp    eax
c0013cdb:	90                   	nop

c0013cdc <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013cdc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013ce0:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013ce5:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013cec:	75 0b                	jne    c0013cf9 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0013cee:	8b 00                	mov    eax,DWORD PTR [eax]
c0013cf0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013cf4:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013cf7:	eb 1e                	jmp    c0013d17 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0013cf9:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c0013cfe:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013d04:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013d0a:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013d0c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013d10:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013d14:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0013d17:	ff e0                	jmp    eax
c0013d19:	90                   	nop

c0013d1a <Device::addChild(Device*)>:
c0013d1a:	53                   	push   ebx
c0013d1b:	83 ec 08             	sub    esp,0x8
c0013d1e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013d22:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013d26:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013d2c:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013d32:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013d34:	85 d2                	test   edx,edx
c0013d36:	74 04                	je     c0013d3c <Device::addChild(Device*)+0x22>
c0013d38:	89 d3                	mov    ebx,edx
c0013d3a:	eb f6                	jmp    c0013d32 <Device::addChild(Device*)+0x18>
c0013d3c:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013d3f:	83 ec 0c             	sub    esp,0xc
c0013d42:	6a 08                	push   0x8
c0013d44:	e8 db b8 ff ff       	call   c000f624 <malloc>
c0013d49:	89 03                	mov    DWORD PTR [ebx],eax
c0013d4b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013d51:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013d58:	83 c4 18             	add    esp,0x18
c0013d5b:	5b                   	pop    ebx
c0013d5c:	c3                   	ret    
c0013d5d:	90                   	nop

c0013d5e <Device::removeAllChildren()>:
c0013d5e:	56                   	push   esi
c0013d5f:	53                   	push   ebx
c0013d60:	52                   	push   edx
c0013d61:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013d65:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0013d6b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013d6e:	74 17                	je     c0013d87 <Device::removeAllChildren()+0x29>
c0013d70:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013d73:	85 c0                	test   eax,eax
c0013d75:	74 0c                	je     c0013d83 <Device::removeAllChildren()+0x25>
c0013d77:	83 ec 0c             	sub    esp,0xc
c0013d7a:	8b 10                	mov    edx,DWORD PTR [eax]
c0013d7c:	50                   	push   eax
c0013d7d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0013d80:	83 c4 10             	add    esp,0x10
c0013d83:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013d85:	eb e4                	jmp    c0013d6b <Device::removeAllChildren()+0xd>
c0013d87:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013d8d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013d93:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013d99:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013da0:	58                   	pop    eax
c0013da1:	5b                   	pop    ebx
c0013da2:	5e                   	pop    esi
c0013da3:	c3                   	ret    

c0013da4 <Device::hibernateAll()>:
c0013da4:	53                   	push   ebx
c0013da5:	83 ec 14             	sub    esp,0x14
c0013da8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013dac:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013dae:	53                   	push   ebx
c0013daf:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013db2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013db8:	83 c4 10             	add    esp,0x10
c0013dbb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013dbe:	74 0f                	je     c0013dcf <Device::hibernateAll()+0x2b>
c0013dc0:	83 ec 0c             	sub    esp,0xc
c0013dc3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013dc6:	e8 d9 ff ff ff       	call   c0013da4 <Device::hibernateAll()>
c0013dcb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013dcd:	eb e9                	jmp    c0013db8 <Device::hibernateAll()+0x14>
c0013dcf:	83 c4 08             	add    esp,0x8
c0013dd2:	5b                   	pop    ebx
c0013dd3:	c3                   	ret    

c0013dd4 <Device::wakeAll()>:
c0013dd4:	53                   	push   ebx
c0013dd5:	83 ec 14             	sub    esp,0x14
c0013dd8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013ddc:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013dde:	53                   	push   ebx
c0013ddf:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013de2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013de8:	83 c4 10             	add    esp,0x10
c0013deb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013dee:	74 0f                	je     c0013dff <Device::wakeAll()+0x2b>
c0013df0:	83 ec 0c             	sub    esp,0xc
c0013df3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013df6:	e8 d9 ff ff ff       	call   c0013dd4 <Device::wakeAll()>
c0013dfb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013dfd:	eb e9                	jmp    c0013de8 <Device::wakeAll()+0x14>
c0013dff:	83 c4 08             	add    esp,0x8
c0013e02:	5b                   	pop    ebx
c0013e03:	c3                   	ret    

c0013e04 <Device::detectAll()>:
c0013e04:	53                   	push   ebx
c0013e05:	83 ec 14             	sub    esp,0x14
c0013e08:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013e0c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e0e:	53                   	push   ebx
c0013e0f:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013e12:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013e18:	83 c4 10             	add    esp,0x10
c0013e1b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013e1e:	74 0f                	je     c0013e2f <Device::detectAll()+0x2b>
c0013e20:	83 ec 0c             	sub    esp,0xc
c0013e23:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013e26:	e8 d9 ff ff ff       	call   c0013e04 <Device::detectAll()>
c0013e2b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013e2d:	eb e9                	jmp    c0013e18 <Device::detectAll()+0x14>
c0013e2f:	83 c4 08             	add    esp,0x8
c0013e32:	5b                   	pop    ebx
c0013e33:	c3                   	ret    

c0013e34 <Device::disableLegacyAll()>:
c0013e34:	53                   	push   ebx
c0013e35:	83 ec 14             	sub    esp,0x14
c0013e38:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013e3c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e3e:	53                   	push   ebx
c0013e3f:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0013e42:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013e48:	83 c4 10             	add    esp,0x10
c0013e4b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013e4e:	74 0f                	je     c0013e5f <Device::disableLegacyAll()+0x2b>
c0013e50:	83 ec 0c             	sub    esp,0xc
c0013e53:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013e56:	e8 d9 ff ff ff       	call   c0013e34 <Device::disableLegacyAll()>
c0013e5b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013e5d:	eb e9                	jmp    c0013e48 <Device::disableLegacyAll()+0x14>
c0013e5f:	83 c4 08             	add    esp,0x8
c0013e62:	5b                   	pop    ebx
c0013e63:	c3                   	ret    

c0013e64 <Device::loadDriversForAll()>:
c0013e64:	53                   	push   ebx
c0013e65:	83 ec 08             	sub    esp,0x8
c0013e68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e6c:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013e72:	8b 18                	mov    ebx,DWORD PTR [eax]
c0013e74:	85 db                	test   ebx,ebx
c0013e76:	74 12                	je     c0013e8a <Device::loadDriversForAll()+0x26>
c0013e78:	83 ec 0c             	sub    esp,0xc
c0013e7b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0013e7e:	e8 e1 ff ff ff       	call   c0013e64 <Device::loadDriversForAll()>
c0013e83:	83 c4 10             	add    esp,0x10
c0013e86:	89 d8                	mov    eax,ebx
c0013e88:	eb e8                	jmp    c0013e72 <Device::loadDriversForAll()+0xe>
c0013e8a:	83 c4 08             	add    esp,0x8
c0013e8d:	5b                   	pop    ebx
c0013e8e:	c3                   	ret    
c0013e8f:	90                   	nop

c0013e90 <Device::closeAll()>:
c0013e90:	53                   	push   ebx
c0013e91:	83 ec 08             	sub    esp,0x8
c0013e94:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013e98:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e9a:	6a 00                	push   0x0
c0013e9c:	6a 00                	push   0x0
c0013e9e:	6a 00                	push   0x0
c0013ea0:	53                   	push   ebx
c0013ea1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013ea4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013eaa:	83 c4 10             	add    esp,0x10
c0013ead:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013eb0:	74 0f                	je     c0013ec1 <Device::closeAll()+0x31>
c0013eb2:	83 ec 0c             	sub    esp,0xc
c0013eb5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013eb8:	e8 d3 ff ff ff       	call   c0013e90 <Device::closeAll()>
c0013ebd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013ebf:	eb e9                	jmp    c0013eaa <Device::closeAll()+0x1a>
c0013ec1:	83 c4 08             	add    esp,0x8
c0013ec4:	5b                   	pop    ebx
c0013ec5:	c3                   	ret    

c0013ec6 <Device::powerSavingAll(PowerSavingLevel)>:
c0013ec6:	56                   	push   esi
c0013ec7:	53                   	push   ebx
c0013ec8:	83 ec 0c             	sub    esp,0xc
c0013ecb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013ecf:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013ed3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013ed5:	56                   	push   esi
c0013ed6:	53                   	push   ebx
c0013ed7:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0013eda:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013ee0:	83 c4 10             	add    esp,0x10
c0013ee3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013ee6:	74 0f                	je     c0013ef7 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0013ee8:	52                   	push   edx
c0013ee9:	52                   	push   edx
c0013eea:	56                   	push   esi
c0013eeb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013eee:	e8 d3 ff ff ff       	call   c0013ec6 <Device::powerSavingAll(PowerSavingLevel)>
c0013ef3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013ef5:	eb e9                	jmp    c0013ee0 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0013ef7:	58                   	pop    eax
c0013ef8:	5b                   	pop    ebx
c0013ef9:	5e                   	pop    esi
c0013efa:	c3                   	ret    
c0013efb:	90                   	nop

c0013efc <Device::setName(char const*)>:
c0013efc:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0013f04:	e9 5a c8 fe ff       	jmp    c0000763 <strcpy>
c0013f09:	90                   	nop

c0013f0a <Device::Device(char const*)>:
c0013f0a:	83 ec 1c             	sub    esp,0x1c
c0013f0d:	ba 58 a1 02 c0       	mov    edx,0xc002a158
c0013f12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f16:	89 10                	mov    DWORD PTR [eax],edx
c0013f18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f1c:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0013f26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f2a:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013f34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f38:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013f42:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f46:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013f50:	83 ec 08             	sub    esp,0x8
c0013f53:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013f57:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013f5b:	e8 9c ff ff ff       	call   c0013efc <Device::setName(char const*)>
c0013f60:	83 c4 10             	add    esp,0x10
c0013f63:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0013f6b:	83 ec 0c             	sub    esp,0xc
c0013f6e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013f72:	e8 ad b6 ff ff       	call   c000f624 <malloc>
c0013f77:	83 c4 10             	add    esp,0x10
c0013f7a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013f80:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013f87:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013f8b:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0013f91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f95:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013f9b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013fa1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fa5:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013fab:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013fb2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fb6:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0013fbd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fc1:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0013fc8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fcc:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013fd6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fda:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013fe4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fe8:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013ff2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ff6:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0014000:	90                   	nop
c0014001:	83 c4 1c             	add    esp,0x1c
c0014004:	c3                   	ret    
c0014005:	90                   	nop

c0014006 <Device::getName()>:
c0014006:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001400a:	05 d0 00 00 00       	add    eax,0xd0
c001400f:	c3                   	ret    

c0014010 <DriverlessDevice::DriverlessDevice(char const*)>:
c0014010:	83 ec 0c             	sub    esp,0xc
c0014013:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014017:	83 ec 08             	sub    esp,0x8
c001401a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001401e:	50                   	push   eax
c001401f:	e8 e6 fe ff ff       	call   c0013f0a <Device::Device(char const*)>
c0014024:	83 c4 10             	add    esp,0x10
c0014027:	ba 84 a1 02 c0       	mov    edx,0xc002a184
c001402c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014030:	89 10                	mov    DWORD PTR [eax],edx
c0014032:	90                   	nop
c0014033:	83 c4 0c             	add    esp,0xc
c0014036:	c3                   	ret    
c0014037:	90                   	nop

c0014038 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0014038:	57                   	push   edi
c0014039:	56                   	push   esi
c001403a:	53                   	push   ebx
c001403b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001403f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0014043:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014047:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c001404d:	75 0c                	jne    c001405b <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c001404f:	52                   	push   edx
c0014050:	52                   	push   edx
c0014051:	53                   	push   ebx
c0014052:	56                   	push   esi
c0014053:	e8 32 3e 01 00       	call   c0027e8a <LinkedList<Device>::addElement(Device*)>
c0014058:	83 c4 10             	add    esp,0x10
c001405b:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014061:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014064:	74 12                	je     c0014078 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0014066:	50                   	push   eax
c0014067:	57                   	push   edi
c0014068:	56                   	push   esi
c0014069:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001406c:	e8 c7 ff ff ff       	call   c0014038 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014071:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014073:	83 c4 10             	add    esp,0x10
c0014076:	eb e9                	jmp    c0014061 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0014078:	5b                   	pop    ebx
c0014079:	5e                   	pop    esi
c001407a:	5f                   	pop    edi
c001407b:	c3                   	ret    

c001407c <getDevicesOfType(DeviceType)>:
c001407c:	53                   	push   ebx
c001407d:	83 ec 14             	sub    esp,0x14
c0014080:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014084:	53                   	push   ebx
c0014085:	e8 dc 3e 01 00       	call   c0027f66 <LinkedList<Device>::LinkedList()>
c001408a:	83 c4 0c             	add    esp,0xc
c001408d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014091:	53                   	push   ebx
c0014092:	ff 35 88 d8 02 c0    	push   DWORD PTR ds:0xc002d888
c0014098:	e8 9b ff ff ff       	call   c0014038 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001409d:	89 d8                	mov    eax,ebx
c001409f:	83 c4 18             	add    esp,0x18
c00140a2:	5b                   	pop    ebx
c00140a3:	c2 04 00             	ret    0x4

c00140a6 <HardDiskController::HardDiskController(char const*)>:
c00140a6:	83 ec 0c             	sub    esp,0xc
c00140a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140ad:	83 ec 08             	sub    esp,0x8
c00140b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140b4:	50                   	push   eax
c00140b5:	e8 50 fe ff ff       	call   c0013f0a <Device::Device(char const*)>
c00140ba:	83 c4 10             	add    esp,0x10
c00140bd:	ba b0 a1 02 c0       	mov    edx,0xc002a1b0
c00140c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140c6:	89 10                	mov    DWORD PTR [eax],edx
c00140c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140cc:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c00140d6:	90                   	nop
c00140d7:	83 c4 0c             	add    esp,0xc
c00140da:	c3                   	ret    
c00140db:	90                   	nop

c00140dc <HardDiskController::~HardDiskController()>:
c00140dc:	83 ec 0c             	sub    esp,0xc
c00140df:	ba b0 a1 02 c0       	mov    edx,0xc002a1b0
c00140e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140e8:	89 10                	mov    DWORD PTR [eax],edx
c00140ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140ee:	83 ec 0c             	sub    esp,0xc
c00140f1:	50                   	push   eax
c00140f2:	e8 f5 fa ff ff       	call   c0013bec <Device::~Device()>
c00140f7:	83 c4 10             	add    esp,0x10
c00140fa:	90                   	nop
c00140fb:	83 c4 0c             	add    esp,0xc
c00140fe:	c3                   	ret    
c00140ff:	90                   	nop

c0014100 <HardDiskController::~HardDiskController()>:
c0014100:	83 ec 0c             	sub    esp,0xc
c0014103:	83 ec 0c             	sub    esp,0xc
c0014106:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001410a:	e8 cd ff ff ff       	call   c00140dc <HardDiskController::~HardDiskController()>
c001410f:	83 c4 10             	add    esp,0x10
c0014112:	83 ec 08             	sub    esp,0x8
c0014115:	68 58 01 00 00       	push   0x158
c001411a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001411e:	e8 f0 e6 ff ff       	call   c0012813 <operator delete(void*, unsigned long)>
c0014123:	83 c4 10             	add    esp,0x10
c0014126:	83 c4 0c             	add    esp,0xc
c0014129:	c3                   	ret    

c001412a <PhysicalDisk::eject()>:
c001412a:	83 ec 18             	sub    esp,0x18
c001412d:	68 d4 a1 02 c0       	push   0xc002a1d4
c0014132:	e8 bc e7 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0014137:	83 c8 ff             	or     eax,0xffffffff
c001413a:	83 c4 1c             	add    esp,0x1c
c001413d:	c3                   	ret    

c001413e <PhysicalDisk::PhysicalDisk(char const*, int)>:
c001413e:	83 ec 0c             	sub    esp,0xc
c0014141:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014145:	83 ec 08             	sub    esp,0x8
c0014148:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001414c:	50                   	push   eax
c001414d:	e8 b8 fd ff ff       	call   c0013f0a <Device::Device(char const*)>
c0014152:	83 c4 10             	add    esp,0x10
c0014155:	ba 04 a2 02 c0       	mov    edx,0xc002a204
c001415a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001415e:	89 10                	mov    DWORD PTR [eax],edx
c0014160:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014164:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001416b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001416f:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0014176:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001417a:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0014184:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014188:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001418c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0014192:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014196:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00141a0:	90                   	nop
c00141a1:	83 c4 0c             	add    esp,0xc
c00141a4:	c3                   	ret    
c00141a5:	90                   	nop

c00141a6 <PhysicalDisk::startCache()>:
c00141a6:	56                   	push   esi
c00141a7:	53                   	push   ebx
c00141a8:	83 ec 10             	sub    esp,0x10
c00141ab:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00141af:	6a 30                	push   0x30
c00141b1:	e8 6e b4 ff ff       	call   c000f624 <malloc>
c00141b6:	89 c6                	mov    esi,eax
c00141b8:	58                   	pop    eax
c00141b9:	5a                   	pop    edx
c00141ba:	53                   	push   ebx
c00141bb:	56                   	push   esi
c00141bc:	e8 95 26 00 00       	call   c0016856 <VCache::VCache(PhysicalDisk*)>
c00141c1:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c00141c7:	83 c4 14             	add    esp,0x14
c00141ca:	5b                   	pop    ebx
c00141cb:	5e                   	pop    esi
c00141cc:	c3                   	ret    
c00141cd:	90                   	nop

c00141ce <PhysicalDisk::~PhysicalDisk()>:
c00141ce:	83 ec 0c             	sub    esp,0xc
c00141d1:	ba 04 a2 02 c0       	mov    edx,0xc002a204
c00141d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141da:	89 10                	mov    DWORD PTR [eax],edx
c00141dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141e0:	83 ec 0c             	sub    esp,0xc
c00141e3:	50                   	push   eax
c00141e4:	e8 03 fa ff ff       	call   c0013bec <Device::~Device()>
c00141e9:	83 c4 10             	add    esp,0x10
c00141ec:	90                   	nop
c00141ed:	83 c4 0c             	add    esp,0xc
c00141f0:	c3                   	ret    
c00141f1:	90                   	nop

c00141f2 <PhysicalDisk::~PhysicalDisk()>:
c00141f2:	83 ec 0c             	sub    esp,0xc
c00141f5:	83 ec 0c             	sub    esp,0xc
c00141f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00141fc:	e8 cd ff ff ff       	call   c00141ce <PhysicalDisk::~PhysicalDisk()>
c0014201:	83 c4 10             	add    esp,0x10
c0014204:	83 ec 08             	sub    esp,0x8
c0014207:	68 6c 01 00 00       	push   0x16c
c001420c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014210:	e8 fe e5 ff ff       	call   c0012813 <operator delete(void*, unsigned long)>
c0014215:	83 c4 10             	add    esp,0x10
c0014218:	83 c4 0c             	add    esp,0xc
c001421b:	c3                   	ret    

c001421c <FPU::FPU(char const*)>:
c001421c:	83 ec 0c             	sub    esp,0xc
c001421f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014223:	83 ec 08             	sub    esp,0x8
c0014226:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001422a:	50                   	push   eax
c001422b:	e8 da fc ff ff       	call   c0013f0a <Device::Device(char const*)>
c0014230:	83 c4 10             	add    esp,0x10
c0014233:	ba 48 a2 02 c0       	mov    edx,0xc002a248
c0014238:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001423c:	89 10                	mov    DWORD PTR [eax],edx
c001423e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014242:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c001424c:	90                   	nop
c001424d:	83 c4 0c             	add    esp,0xc
c0014250:	c3                   	ret    
c0014251:	90                   	nop

c0014252 <FPU::~FPU()>:
c0014252:	83 ec 0c             	sub    esp,0xc
c0014255:	ba 48 a2 02 c0       	mov    edx,0xc002a248
c001425a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001425e:	89 10                	mov    DWORD PTR [eax],edx
c0014260:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014264:	83 ec 0c             	sub    esp,0xc
c0014267:	50                   	push   eax
c0014268:	e8 7f f9 ff ff       	call   c0013bec <Device::~Device()>
c001426d:	83 c4 10             	add    esp,0x10
c0014270:	90                   	nop
c0014271:	83 c4 0c             	add    esp,0xc
c0014274:	c3                   	ret    
c0014275:	90                   	nop

c0014276 <FPU::~FPU()>:
c0014276:	83 ec 0c             	sub    esp,0xc
c0014279:	83 ec 0c             	sub    esp,0xc
c001427c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014280:	e8 cd ff ff ff       	call   c0014252 <FPU::~FPU()>
c0014285:	83 c4 10             	add    esp,0x10
c0014288:	83 ec 08             	sub    esp,0x8
c001428b:	68 58 01 00 00       	push   0x158
c0014290:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014294:	e8 7a e5 ff ff       	call   c0012813 <operator delete(void*, unsigned long)>
c0014299:	83 c4 10             	add    esp,0x10
c001429c:	83 c4 0c             	add    esp,0xc
c001429f:	c3                   	ret    

c00142a0 <setupFPU()>:
c00142a0:	53                   	push   ebx
c00142a1:	83 ec 08             	sub    esp,0x8
c00142a4:	8b 15 88 d8 02 c0    	mov    edx,DWORD PTR ds:0xc002d888
c00142aa:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c00142b1:	74 19                	je     c00142cc <setupFPU()+0x2c>
c00142b3:	83 ec 0c             	sub    esp,0xc
c00142b6:	68 58 01 00 00       	push   0x158
c00142bb:	e8 64 b3 ff ff       	call   c000f624 <malloc>
c00142c0:	89 c3                	mov    ebx,eax
c00142c2:	89 04 24             	mov    DWORD PTR [esp],eax
c00142c5:	e8 04 08 01 00       	call   c0024ace <AVX::AVX()>
c00142ca:	eb 5b                	jmp    c0014327 <setupFPU()+0x87>
c00142cc:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00142d2:	84 c0                	test   al,al
c00142d4:	79 19                	jns    c00142ef <setupFPU()+0x4f>
c00142d6:	83 ec 0c             	sub    esp,0xc
c00142d9:	68 58 01 00 00       	push   0x158
c00142de:	e8 41 b3 ff ff       	call   c000f624 <malloc>
c00142e3:	89 c3                	mov    ebx,eax
c00142e5:	89 04 24             	mov    DWORD PTR [esp],eax
c00142e8:	e8 07 09 01 00       	call   c0024bf4 <SSE::SSE()>
c00142ed:	eb 38                	jmp    c0014327 <setupFPU()+0x87>
c00142ef:	a8 20                	test   al,0x20
c00142f1:	74 19                	je     c001430c <setupFPU()+0x6c>
c00142f3:	83 ec 0c             	sub    esp,0xc
c00142f6:	68 58 01 00 00       	push   0x158
c00142fb:	e8 24 b3 ff ff       	call   c000f624 <malloc>
c0014300:	89 c3                	mov    ebx,eax
c0014302:	89 04 24             	mov    DWORD PTR [esp],eax
c0014305:	e8 54 08 01 00       	call   c0024b5e <MMX::MMX()>
c001430a:	eb 1b                	jmp    c0014327 <setupFPU()+0x87>
c001430c:	a8 10                	test   al,0x10
c001430e:	74 1c                	je     c001432c <setupFPU()+0x8c>
c0014310:	83 ec 0c             	sub    esp,0xc
c0014313:	68 58 01 00 00       	push   0x158
c0014318:	e8 07 b3 ff ff       	call   c000f624 <malloc>
c001431d:	89 c3                	mov    ebx,eax
c001431f:	89 04 24             	mov    DWORD PTR [esp],eax
c0014322:	e8 5b 09 01 00       	call   c0024c82 <x87::x87()>
c0014327:	83 c4 10             	add    esp,0x10
c001432a:	eb 24                	jmp    c0014350 <setupFPU()+0xb0>
c001432c:	83 e0 ef             	and    eax,0xffffffef
c001432f:	83 ec 0c             	sub    esp,0xc
c0014332:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0014338:	68 34 a2 02 c0       	push   0xc002a234
c001433d:	e8 b1 e5 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0014342:	0f 20 c0             	mov    eax,cr0
c0014345:	83 c8 04             	or     eax,0x4
c0014348:	0f 22 c0             	mov    cr0,eax
c001434b:	31 db                	xor    ebx,ebx
c001434d:	83 c4 10             	add    esp,0x10
c0014350:	89 d8                	mov    eax,ebx
c0014352:	83 c4 08             	add    esp,0x8
c0014355:	5b                   	pop    ebx
c0014356:	c3                   	ret    
c0014357:	90                   	nop

c0014358 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0014358:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001435c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014360:	c1 e0 04             	shl    eax,0x4
c0014363:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014367:	8d 50 10             	lea    edx,[eax+0x10]
c001436a:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0014370:	74 08                	je     c001437a <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0014372:	83 c0 04             	add    eax,0x4
c0014375:	39 d0                	cmp    eax,edx
c0014377:	75 f1                	jne    c001436a <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0014379:	c3                   	ret    
c001437a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014384:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c001438e:	eb e2                	jmp    c0014372 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0014390 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0014390:	57                   	push   edi
c0014391:	31 c0                	xor    eax,eax
c0014393:	56                   	push   esi
c0014394:	53                   	push   ebx
c0014395:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014399:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001439d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00143a1:	89 da                	mov    edx,ebx
c00143a3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00143a7:	c1 e2 04             	shl    edx,0x4
c00143aa:	01 ca                	add    edx,ecx
c00143ac:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c00143b4:	74 16                	je     c00143cc <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c00143b6:	40                   	inc    eax
c00143b7:	83 f8 04             	cmp    eax,0x4
c00143ba:	75 f0                	jne    c00143ac <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c00143bc:	c7 44 24 10 78 a2 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a278
c00143c4:	5b                   	pop    ebx
c00143c5:	5e                   	pop    esi
c00143c6:	5f                   	pop    edi
c00143c7:	e9 81 58 00 00       	jmp    c0019c4d <Krnl::panic(char const*)>
c00143cc:	8d 04 98             	lea    eax,[eax+ebx*4]
c00143cf:	8d 04 81             	lea    eax,[ecx+eax*4]
c00143d2:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c00143d8:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c00143de:	5b                   	pop    ebx
c00143df:	5e                   	pop    esi
c00143e0:	5f                   	pop    edi
c00143e1:	c3                   	ret    

c00143e2 <doubleFault(regs*, void*)>:
c00143e2:	55                   	push   ebp
c00143e3:	89 e5                	mov    ebp,esp
c00143e5:	83 ec 08             	sub    esp,0x8
c00143e8:	83 ec 0c             	sub    esp,0xc
c00143eb:	68 b3 a2 02 c0       	push   0xc002a2b3
c00143f0:	e8 58 58 00 00       	call   c0019c4d <Krnl::panic(char const*)>
c00143f5:	83 c4 10             	add    esp,0x10
c00143f8:	90                   	nop
c00143f9:	c9                   	leave  
c00143fa:	c3                   	ret    
c00143fb:	90                   	nop

c00143fc <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00143fc:	56                   	push   esi
c00143fd:	53                   	push   ebx
c00143fe:	50                   	push   eax
c00143ff:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014403:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014407:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c001440c:	75 35                	jne    c0014443 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c001440e:	8d 43 20             	lea    eax,[ebx+0x20]
c0014411:	31 d2                	xor    edx,edx
c0014413:	89 c1                	mov    ecx,eax
c0014415:	c1 e1 04             	shl    ecx,0x4
c0014418:	01 f1                	add    ecx,esi
c001441a:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0014422:	74 3e                	je     c0014462 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0014424:	42                   	inc    edx
c0014425:	83 fa 04             	cmp    edx,0x4
c0014428:	75 f0                	jne    c001441a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c001442a:	83 ec 0c             	sub    esp,0xc
c001442d:	68 f8 a2 02 c0       	push   0xc002a2f8
c0014432:	e8 16 58 00 00       	call   c0019c4d <Krnl::panic(char const*)>
c0014437:	83 c4 10             	add    esp,0x10
c001443a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001443f:	5a                   	pop    edx
c0014440:	5b                   	pop    ebx
c0014441:	5e                   	pop    esi
c0014442:	c3                   	ret    
c0014443:	83 ec 0c             	sub    esp,0xc
c0014446:	56                   	push   esi
c0014447:	e8 ba fb ff ff       	call   c0014006 <Device::getName()>
c001444c:	83 c4 10             	add    esp,0x10
c001444f:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014452:	75 ba                	jne    c001440e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014454:	83 fb 0f             	cmp    ebx,0xf
c0014457:	7f 29                	jg     c0014482 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0014459:	0f b6 9b e0 ca 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd3520]
c0014460:	eb ac                	jmp    c001440e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014462:	8d 04 82             	lea    eax,[edx+eax*4]
c0014465:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014469:	8d 04 86             	lea    eax,[esi+eax*4]
c001446c:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014472:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014476:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c001447c:	89 d8                	mov    eax,ebx
c001447e:	5a                   	pop    edx
c001447f:	5b                   	pop    ebx
c0014480:	5e                   	pop    esi
c0014481:	c3                   	ret    
c0014482:	83 ec 0c             	sub    esp,0xc
c0014485:	68 c0 a2 02 c0       	push   0xc002a2c0
c001448a:	e8 be 57 00 00       	call   c0019c4d <Krnl::panic(char const*)>
c001448f:	83 c4 10             	add    esp,0x10
c0014492:	e9 77 ff ff ff       	jmp    c001440e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014497:	90                   	nop

c0014498 <InterruptController::clearAllHandlers(int, bool)>:
c0014498:	56                   	push   esi
c0014499:	53                   	push   ebx
c001449a:	52                   	push   edx
c001449b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001449f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00144a3:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00144a8:	75 61                	jne    c001450b <InterruptController::clearAllHandlers(int, bool)+0x73>
c00144aa:	8d 46 20             	lea    eax,[esi+0x20]
c00144ad:	c1 e6 04             	shl    esi,0x4
c00144b0:	c1 e0 04             	shl    eax,0x4
c00144b3:	01 de                	add    esi,ebx
c00144b5:	01 d8                	add    eax,ebx
c00144b7:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c00144c1:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c00144cb:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00144d5:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c00144df:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c00144e9:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c00144f3:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c00144fd:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014507:	58                   	pop    eax
c0014508:	5b                   	pop    ebx
c0014509:	5e                   	pop    esi
c001450a:	c3                   	ret    
c001450b:	83 ec 0c             	sub    esp,0xc
c001450e:	53                   	push   ebx
c001450f:	e8 f2 fa ff ff       	call   c0014006 <Device::getName()>
c0014514:	83 c4 10             	add    esp,0x10
c0014517:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001451a:	75 8e                	jne    c00144aa <InterruptController::clearAllHandlers(int, bool)+0x12>
c001451c:	83 fe 0f             	cmp    esi,0xf
c001451f:	7f 09                	jg     c001452a <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014521:	0f b6 b6 e0 ca 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd3520]
c0014528:	eb 80                	jmp    c00144aa <InterruptController::clearAllHandlers(int, bool)+0x12>
c001452a:	83 ec 0c             	sub    esp,0xc
c001452d:	68 34 a3 02 c0       	push   0xc002a334
c0014532:	e8 16 57 00 00       	call   c0019c4d <Krnl::panic(char const*)>
c0014537:	83 c4 10             	add    esp,0x10
c001453a:	e9 6b ff ff ff       	jmp    c00144aa <InterruptController::clearAllHandlers(int, bool)+0x12>
c001453f:	90                   	nop

c0014540 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014540:	56                   	push   esi
c0014541:	53                   	push   ebx
c0014542:	52                   	push   edx
c0014543:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014547:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001454b:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014550:	75 3a                	jne    c001458c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014552:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014556:	8d 50 20             	lea    edx,[eax+0x20]
c0014559:	c1 e2 04             	shl    edx,0x4
c001455c:	8d 04 16             	lea    eax,[esi+edx*1]
c001455f:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014563:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014569:	74 0b                	je     c0014576 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c001456b:	83 c0 04             	add    eax,0x4
c001456e:	39 d0                	cmp    eax,edx
c0014570:	75 f1                	jne    c0014563 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014572:	58                   	pop    eax
c0014573:	5b                   	pop    ebx
c0014574:	5e                   	pop    esi
c0014575:	c3                   	ret    
c0014576:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014580:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c001458a:	eb df                	jmp    c001456b <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c001458c:	83 ec 0c             	sub    esp,0xc
c001458f:	56                   	push   esi
c0014590:	e8 71 fa ff ff       	call   c0014006 <Device::getName()>
c0014595:	83 c4 10             	add    esp,0x10
c0014598:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001459b:	75 b5                	jne    c0014552 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c001459d:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c00145a2:	7f 11                	jg     c00145b5 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c00145a4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00145a8:	0f b6 80 e0 ca 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd3520]
c00145af:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00145b3:	eb 9d                	jmp    c0014552 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00145b5:	83 ec 0c             	sub    esp,0xc
c00145b8:	68 34 a3 02 c0       	push   0xc002a334
c00145bd:	e8 8b 56 00 00       	call   c0019c4d <Krnl::panic(char const*)>
c00145c2:	83 c4 10             	add    esp,0x10
c00145c5:	eb 8b                	jmp    c0014552 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c00145c7 <nmiHandler(regs*, void*)>:
c00145c7:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c00145cc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00145d0:	e9 9b a7 ff ff       	jmp    c000ed70 <Computer::handleNMI()>

c00145d5 <int_handler>:
c00145d5:	55                   	push   ebp
c00145d6:	57                   	push   edi
c00145d7:	56                   	push   esi
c00145d8:	53                   	push   ebx
c00145d9:	83 ec 0c             	sub    esp,0xc
c00145dc:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00145e0:	80 3d c0 e3 02 c0 00 	cmp    BYTE PTR ds:0xc002e3c0,0x0
c00145e7:	74 0b                	je     c00145f4 <int_handler+0x1f>
c00145e9:	fa                   	cli    
c00145ea:	f4                   	hlt    
c00145eb:	80 3d c0 e3 02 c0 00 	cmp    BYTE PTR ds:0xc002e3c0,0x0
c00145f2:	75 f5                	jne    c00145e9 <int_handler+0x14>
c00145f4:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c00145f9:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c00145fc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014602:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014608:	8d 43 e0             	lea    eax,[ebx-0x20]
c001460b:	83 f8 17             	cmp    eax,0x17
c001460e:	77 13                	ja     c0014623 <int_handler+0x4e>
c0014610:	83 ec 08             	sub    esp,0x8
c0014613:	8b 17                	mov    edx,DWORD PTR [edi]
c0014615:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014618:	0f b6 c0             	movzx  eax,al
c001461b:	50                   	push   eax
c001461c:	57                   	push   edi
c001461d:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014620:	83 c4 10             	add    esp,0x10
c0014623:	83 c3 15             	add    ebx,0x15
c0014626:	c1 e3 04             	shl    ebx,0x4
c0014629:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c001462d:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014634:	31 db                	xor    ebx,ebx
c0014636:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c001463a:	85 c0                	test   eax,eax
c001463c:	74 13                	je     c0014651 <int_handler+0x7c>
c001463e:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014641:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014645:	74 1c                	je     c0014663 <int_handler+0x8e>
c0014647:	83 ec 08             	sub    esp,0x8
c001464a:	52                   	push   edx
c001464b:	56                   	push   esi
c001464c:	ff d0                	call   eax
c001464e:	83 c4 10             	add    esp,0x10
c0014651:	43                   	inc    ebx
c0014652:	83 fb 04             	cmp    ebx,0x4
c0014655:	75 df                	jne    c0014636 <int_handler+0x61>
c0014657:	83 c4 0c             	add    esp,0xc
c001465a:	31 c0                	xor    eax,eax
c001465c:	5b                   	pop    ebx
c001465d:	31 d2                	xor    edx,edx
c001465f:	5e                   	pop    esi
c0014660:	5f                   	pop    edi
c0014661:	5d                   	pop    ebp
c0014662:	c3                   	ret    
c0014663:	83 ec 08             	sub    esp,0x8
c0014666:	52                   	push   edx
c0014667:	56                   	push   esi
c0014668:	ff d0                	call   eax
c001466a:	83 c4 10             	add    esp,0x10
c001466d:	83 c4 0c             	add    esp,0xc
c0014670:	5b                   	pop    ebx
c0014671:	5e                   	pop    esi
c0014672:	5f                   	pop    edi
c0014673:	5d                   	pop    ebp
c0014674:	c3                   	ret    
c0014675:	90                   	nop

c0014676 <InterruptController::InterruptController(char const*)>:
c0014676:	83 ec 1c             	sub    esp,0x1c
c0014679:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001467d:	83 ec 08             	sub    esp,0x8
c0014680:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014684:	50                   	push   eax
c0014685:	e8 80 f8 ff ff       	call   c0013f0a <Device::Device(char const*)>
c001468a:	83 c4 10             	add    esp,0x10
c001468d:	ba b4 a5 02 c0       	mov    edx,0xc002a5b4
c0014692:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014696:	89 10                	mov    DWORD PTR [eax],edx
c0014698:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001469c:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c00146a6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00146ae:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00146b6:	7f 5e                	jg     c0014716 <InterruptController::InterruptController(char const*)+0xa0>
c00146b8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00146c0:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c00146c5:	7f 49                	jg     c0014710 <InterruptController::InterruptController(char const*)+0x9a>
c00146c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00146cf:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00146d6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00146da:	01 ca                	add    edx,ecx
c00146dc:	83 c2 54             	add    edx,0x54
c00146df:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c00146e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00146ef:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00146f6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00146fa:	01 ca                	add    edx,ecx
c00146fc:	81 c2 54 04 00 00    	add    edx,0x454
c0014702:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001470a:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001470e:	eb b0                	jmp    c00146c0 <InterruptController::InterruptController(char const*)+0x4a>
c0014710:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014714:	eb 98                	jmp    c00146ae <InterruptController::InterruptController(char const*)+0x38>
c0014716:	90                   	nop
c0014717:	83 c4 1c             	add    esp,0x1c
c001471a:	c3                   	ret    
c001471b:	90                   	nop

c001471c <InterruptController::~InterruptController()>:
c001471c:	83 ec 0c             	sub    esp,0xc
c001471f:	ba b4 a5 02 c0       	mov    edx,0xc002a5b4
c0014724:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014728:	89 10                	mov    DWORD PTR [eax],edx
c001472a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001472e:	83 ec 0c             	sub    esp,0xc
c0014731:	50                   	push   eax
c0014732:	e8 b5 f4 ff ff       	call   c0013bec <Device::~Device()>
c0014737:	83 c4 10             	add    esp,0x10
c001473a:	90                   	nop
c001473b:	83 c4 0c             	add    esp,0xc
c001473e:	c3                   	ret    
c001473f:	90                   	nop

c0014740 <InterruptController::~InterruptController()>:
c0014740:	83 ec 0c             	sub    esp,0xc
c0014743:	83 ec 0c             	sub    esp,0xc
c0014746:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001474a:	e8 cd ff ff ff       	call   c001471c <InterruptController::~InterruptController()>
c001474f:	83 c4 10             	add    esp,0x10
c0014752:	83 ec 08             	sub    esp,0x8
c0014755:	68 58 21 00 00       	push   0x2158
c001475a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001475e:	e8 b0 e0 ff ff       	call   c0012813 <operator delete(void*, unsigned long)>
c0014763:	83 c4 10             	add    esp,0x10
c0014766:	83 c4 0c             	add    esp,0xc
c0014769:	c3                   	ret    

c001476a <displayDebugInfo(regs*)>:
c001476a:	55                   	push   ebp
c001476b:	57                   	push   edi
c001476c:	56                   	push   esi
c001476d:	53                   	push   ebx
c001476e:	83 ec 24             	sub    esp,0x24
c0014771:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014775:	0f 20 c2             	mov    edx,cr0
c0014778:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001477c:	0f 20 d7             	mov    edi,cr2
c001477f:	0f 20 de             	mov    esi,cr3
c0014782:	0f 20 e5             	mov    ebp,cr4
c0014785:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014788:	68 6e a3 02 c0       	push   0xc002a36e
c001478d:	e8 61 e1 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0014792:	58                   	pop    eax
c0014793:	5a                   	pop    edx
c0014794:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014797:	68 79 a3 02 c0       	push   0xc002a379
c001479c:	e8 52 e1 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00147a1:	59                   	pop    ecx
c00147a2:	58                   	pop    eax
c00147a3:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00147a6:	68 84 a3 02 c0       	push   0xc002a384
c00147ab:	e8 43 e1 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00147b0:	58                   	pop    eax
c00147b1:	5a                   	pop    edx
c00147b2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00147b5:	68 8f a3 02 c0       	push   0xc002a38f
c00147ba:	e8 34 e1 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00147bf:	59                   	pop    ecx
c00147c0:	58                   	pop    eax
c00147c1:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00147c4:	68 9a a3 02 c0       	push   0xc002a39a
c00147c9:	e8 25 e1 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00147ce:	58                   	pop    eax
c00147cf:	5a                   	pop    edx
c00147d0:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c00147d3:	68 a5 a3 02 c0       	push   0xc002a3a5
c00147d8:	e8 16 e1 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00147dd:	59                   	pop    ecx
c00147de:	58                   	pop    eax
c00147df:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00147e2:	68 b0 a3 02 c0       	push   0xc002a3b0
c00147e7:	e8 07 e1 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00147ec:	58                   	pop    eax
c00147ed:	5a                   	pop    edx
c00147ee:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00147f1:	68 bb a3 02 c0       	push   0xc002a3bb
c00147f6:	e8 f8 e0 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00147fb:	59                   	pop    ecx
c00147fc:	58                   	pop    eax
c00147fd:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014800:	68 c6 a3 02 c0       	push   0xc002a3c6
c0014805:	e8 e9 e0 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001480a:	58                   	pop    eax
c001480b:	5a                   	pop    edx
c001480c:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001480f:	68 d5 a3 02 c0       	push   0xc002a3d5
c0014814:	e8 da e0 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0014819:	59                   	pop    ecx
c001481a:	58                   	pop    eax
c001481b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001481e:	68 e0 a3 02 c0       	push   0xc002a3e0
c0014823:	e8 cb e0 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0014828:	58                   	pop    eax
c0014829:	5a                   	pop    edx
c001482a:	57                   	push   edi
c001482b:	68 eb a3 02 c0       	push   0xc002a3eb
c0014830:	e8 be e0 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0014835:	59                   	pop    ecx
c0014836:	58                   	pop    eax
c0014837:	56                   	push   esi
c0014838:	68 f6 a3 02 c0       	push   0xc002a3f6
c001483d:	e8 b1 e0 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0014842:	58                   	pop    eax
c0014843:	a1 d4 ed 02 c0       	mov    eax,ds:0xc002edd4
c0014848:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001484e:	e8 62 c2 ff ff       	call   c0010ab5 <setActiveTerminal(VgaText*)>
c0014853:	58                   	pop    eax
c0014854:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014857:	5a                   	pop    edx
c0014858:	c1 e0 05             	shl    eax,0x5
c001485b:	05 40 c8 02 c0       	add    eax,0xc002c840
c0014860:	50                   	push   eax
c0014861:	a1 d4 ed 02 c0       	mov    eax,ds:0xc002edd4
c0014866:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001486c:	e8 63 c6 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0014871:	59                   	pop    ecx
c0014872:	58                   	pop    eax
c0014873:	a1 d4 ed 02 c0       	mov    eax,ds:0xc002edd4
c0014878:	68 01 a4 02 c0       	push   0xc002a401
c001487d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014883:	e8 4c c6 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0014888:	58                   	pop    eax
c0014889:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001488e:	5a                   	pop    edx
c001488f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014892:	83 c0 0c             	add    eax,0xc
c0014895:	50                   	push   eax
c0014896:	a1 d4 ed 02 c0       	mov    eax,ds:0xc002edd4
c001489b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148a1:	e8 2e c6 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c00148a6:	59                   	pop    ecx
c00148a7:	58                   	pop    eax
c00148a8:	a1 d4 ed 02 c0       	mov    eax,ds:0xc002edd4
c00148ad:	68 0a a4 02 c0       	push   0xc002a40a
c00148b2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148b8:	e8 17 c6 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c00148bd:	58                   	pop    eax
c00148be:	a1 d4 ed 02 c0       	mov    eax,ds:0xc002edd4
c00148c3:	5a                   	pop    edx
c00148c4:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00148c7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148cd:	e8 28 c6 ff ff       	call   c0010efa <VgaText::putx(unsigned int)>
c00148d2:	59                   	pop    ecx
c00148d3:	58                   	pop    eax
c00148d4:	a1 d4 ed 02 c0       	mov    eax,ds:0xc002edd4
c00148d9:	68 12 a4 02 c0       	push   0xc002a412
c00148de:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148e4:	e8 eb c5 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c00148e9:	58                   	pop    eax
c00148ea:	a1 d4 ed 02 c0       	mov    eax,ds:0xc002edd4
c00148ef:	5a                   	pop    edx
c00148f0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00148f3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148f9:	e8 fc c5 ff ff       	call   c0010efa <VgaText::putx(unsigned int)>
c00148fe:	59                   	pop    ecx
c00148ff:	58                   	pop    eax
c0014900:	a1 d4 ed 02 c0       	mov    eax,ds:0xc002edd4
c0014905:	68 1a a4 02 c0       	push   0xc002a41a
c001490a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014910:	e8 bf c5 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0014915:	58                   	pop    eax
c0014916:	a1 d4 ed 02 c0       	mov    eax,ds:0xc002edd4
c001491b:	5a                   	pop    edx
c001491c:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c001491f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014925:	e8 d0 c5 ff ff       	call   c0010efa <VgaText::putx(unsigned int)>
c001492a:	59                   	pop    ecx
c001492b:	58                   	pop    eax
c001492c:	a1 d4 ed 02 c0       	mov    eax,ds:0xc002edd4
c0014931:	68 22 a4 02 c0       	push   0xc002a422
c0014936:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001493c:	e8 93 c5 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0014941:	58                   	pop    eax
c0014942:	a1 d4 ed 02 c0       	mov    eax,ds:0xc002edd4
c0014947:	5a                   	pop    edx
c0014948:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c001494b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014951:	e8 a4 c5 ff ff       	call   c0010efa <VgaText::putx(unsigned int)>
c0014956:	59                   	pop    ecx
c0014957:	58                   	pop    eax
c0014958:	a1 d4 ed 02 c0       	mov    eax,ds:0xc002edd4
c001495d:	68 2a a4 02 c0       	push   0xc002a42a
c0014962:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014968:	e8 67 c5 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c001496d:	58                   	pop    eax
c001496e:	a1 d4 ed 02 c0       	mov    eax,ds:0xc002edd4
c0014973:	5a                   	pop    edx
c0014974:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014977:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001497d:	e8 78 c5 ff ff       	call   c0010efa <VgaText::putx(unsigned int)>
c0014982:	59                   	pop    ecx
c0014983:	58                   	pop    eax
c0014984:	a1 d4 ed 02 c0       	mov    eax,ds:0xc002edd4
c0014989:	68 32 a4 02 c0       	push   0xc002a432
c001498e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014994:	e8 3b c5 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0014999:	58                   	pop    eax
c001499a:	a1 d4 ed 02 c0       	mov    eax,ds:0xc002edd4
c001499f:	5a                   	pop    edx
c00149a0:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c00149a3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149a9:	e8 4c c5 ff ff       	call   c0010efa <VgaText::putx(unsigned int)>
c00149ae:	59                   	pop    ecx
c00149af:	58                   	pop    eax
c00149b0:	a1 d4 ed 02 c0       	mov    eax,ds:0xc002edd4
c00149b5:	68 3a a4 02 c0       	push   0xc002a43a
c00149ba:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149c0:	e8 0f c5 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c00149c5:	58                   	pop    eax
c00149c6:	a1 d4 ed 02 c0       	mov    eax,ds:0xc002edd4
c00149cb:	5a                   	pop    edx
c00149cc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00149d0:	52                   	push   edx
c00149d1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149d7:	e8 1e c5 ff ff       	call   c0010efa <VgaText::putx(unsigned int)>
c00149dc:	59                   	pop    ecx
c00149dd:	58                   	pop    eax
c00149de:	a1 d4 ed 02 c0       	mov    eax,ds:0xc002edd4
c00149e3:	68 43 a4 02 c0       	push   0xc002a443
c00149e8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149ee:	e8 e1 c4 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c00149f3:	58                   	pop    eax
c00149f4:	a1 d4 ed 02 c0       	mov    eax,ds:0xc002edd4
c00149f9:	5a                   	pop    edx
c00149fa:	57                   	push   edi
c00149fb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a01:	e8 f4 c4 ff ff       	call   c0010efa <VgaText::putx(unsigned int)>
c0014a06:	59                   	pop    ecx
c0014a07:	a1 d4 ed 02 c0       	mov    eax,ds:0xc002edd4
c0014a0c:	5f                   	pop    edi
c0014a0d:	68 4b a4 02 c0       	push   0xc002a44b
c0014a12:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a18:	e8 b7 c4 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0014a1d:	58                   	pop    eax
c0014a1e:	a1 d4 ed 02 c0       	mov    eax,ds:0xc002edd4
c0014a23:	5a                   	pop    edx
c0014a24:	56                   	push   esi
c0014a25:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a2b:	e8 ca c4 ff ff       	call   c0010efa <VgaText::putx(unsigned int)>
c0014a30:	59                   	pop    ecx
c0014a31:	a1 d4 ed 02 c0       	mov    eax,ds:0xc002edd4
c0014a36:	5e                   	pop    esi
c0014a37:	68 53 a4 02 c0       	push   0xc002a453
c0014a3c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a42:	e8 8d c4 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0014a47:	5f                   	pop    edi
c0014a48:	58                   	pop    eax
c0014a49:	a1 d4 ed 02 c0       	mov    eax,ds:0xc002edd4
c0014a4e:	55                   	push   ebp
c0014a4f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a55:	e8 a0 c4 ff ff       	call   c0010efa <VgaText::putx(unsigned int)>
c0014a5a:	58                   	pop    eax
c0014a5b:	a1 d4 ed 02 c0       	mov    eax,ds:0xc002edd4
c0014a60:	5a                   	pop    edx
c0014a61:	68 5b a4 02 c0       	push   0xc002a45b
c0014a66:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a6c:	e8 63 c4 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0014a71:	0f 21 c0             	mov    eax,db0
c0014a74:	59                   	pop    ecx
c0014a75:	5e                   	pop    esi
c0014a76:	50                   	push   eax
c0014a77:	a1 d4 ed 02 c0       	mov    eax,ds:0xc002edd4
c0014a7c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a82:	e8 73 c4 ff ff       	call   c0010efa <VgaText::putx(unsigned int)>
c0014a87:	5f                   	pop    edi
c0014a88:	a1 d4 ed 02 c0       	mov    eax,ds:0xc002edd4
c0014a8d:	5d                   	pop    ebp
c0014a8e:	68 64 a4 02 c0       	push   0xc002a464
c0014a93:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a99:	e8 36 c4 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0014a9e:	0f 21 c8             	mov    eax,db1
c0014aa1:	5a                   	pop    edx
c0014aa2:	59                   	pop    ecx
c0014aa3:	50                   	push   eax
c0014aa4:	a1 d4 ed 02 c0       	mov    eax,ds:0xc002edd4
c0014aa9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014aaf:	e8 46 c4 ff ff       	call   c0010efa <VgaText::putx(unsigned int)>
c0014ab4:	5e                   	pop    esi
c0014ab5:	a1 d4 ed 02 c0       	mov    eax,ds:0xc002edd4
c0014aba:	5f                   	pop    edi
c0014abb:	68 6c a4 02 c0       	push   0xc002a46c
c0014ac0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ac6:	e8 09 c4 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0014acb:	0f 21 d0             	mov    eax,db2
c0014ace:	5d                   	pop    ebp
c0014acf:	5a                   	pop    edx
c0014ad0:	50                   	push   eax
c0014ad1:	a1 d4 ed 02 c0       	mov    eax,ds:0xc002edd4
c0014ad6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014adc:	e8 19 c4 ff ff       	call   c0010efa <VgaText::putx(unsigned int)>
c0014ae1:	59                   	pop    ecx
c0014ae2:	a1 d4 ed 02 c0       	mov    eax,ds:0xc002edd4
c0014ae7:	5e                   	pop    esi
c0014ae8:	68 74 a4 02 c0       	push   0xc002a474
c0014aed:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014af3:	e8 dc c3 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0014af8:	0f 21 d8             	mov    eax,db3
c0014afb:	5f                   	pop    edi
c0014afc:	5d                   	pop    ebp
c0014afd:	50                   	push   eax
c0014afe:	a1 d4 ed 02 c0       	mov    eax,ds:0xc002edd4
c0014b03:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b09:	e8 ec c3 ff ff       	call   c0010efa <VgaText::putx(unsigned int)>
c0014b0e:	58                   	pop    eax
c0014b0f:	a1 d4 ed 02 c0       	mov    eax,ds:0xc002edd4
c0014b14:	5a                   	pop    edx
c0014b15:	68 7c a4 02 c0       	push   0xc002a47c
c0014b1a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b20:	e8 af c3 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0014b25:	0f 21 f0             	mov    eax,db6
c0014b28:	59                   	pop    ecx
c0014b29:	5e                   	pop    esi
c0014b2a:	50                   	push   eax
c0014b2b:	a1 d4 ed 02 c0       	mov    eax,ds:0xc002edd4
c0014b30:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b36:	e8 bf c3 ff ff       	call   c0010efa <VgaText::putx(unsigned int)>
c0014b3b:	5f                   	pop    edi
c0014b3c:	a1 d4 ed 02 c0       	mov    eax,ds:0xc002edd4
c0014b41:	5d                   	pop    ebp
c0014b42:	68 84 a4 02 c0       	push   0xc002a484
c0014b47:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b4d:	e8 82 c3 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0014b52:	0f 21 f8             	mov    eax,db7
c0014b55:	5a                   	pop    edx
c0014b56:	59                   	pop    ecx
c0014b57:	50                   	push   eax
c0014b58:	a1 d4 ed 02 c0       	mov    eax,ds:0xc002edd4
c0014b5d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b63:	e8 92 c3 ff ff       	call   c0010efa <VgaText::putx(unsigned int)>
c0014b68:	5e                   	pop    esi
c0014b69:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014b6c:	e8 4e 80 00 00       	call   c001cbbf <Thr::getDriverNameFromAddress(unsigned long)>
c0014b71:	83 c4 10             	add    esp,0x10
c0014b74:	85 c0                	test   eax,eax
c0014b76:	74 3c                	je     c0014bb4 <displayDebugInfo(regs*)+0x44a>
c0014b78:	89 c3                	mov    ebx,eax
c0014b7a:	50                   	push   eax
c0014b7b:	50                   	push   eax
c0014b7c:	a1 d4 ed 02 c0       	mov    eax,ds:0xc002edd4
c0014b81:	68 8c a4 02 c0       	push   0xc002a48c
c0014b86:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b8c:	e8 43 c3 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0014b91:	5a                   	pop    edx
c0014b92:	a1 d4 ed 02 c0       	mov    eax,ds:0xc002edd4
c0014b97:	59                   	pop    ecx
c0014b98:	53                   	push   ebx
c0014b99:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b9f:	e8 30 c3 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0014ba4:	5e                   	pop    esi
c0014ba5:	5f                   	pop    edi
c0014ba6:	53                   	push   ebx
c0014ba7:	68 98 a4 02 c0       	push   0xc002a498
c0014bac:	e8 42 dd ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0014bb1:	83 c4 10             	add    esp,0x10
c0014bb4:	fa                   	cli    
c0014bb5:	f4                   	hlt    
c0014bb6:	eb fe                	jmp    c0014bb6 <displayDebugInfo(regs*)+0x44c>

c0014bb8 <x87EmulHandler(regs*, void*)>:
c0014bb8:	53                   	push   ebx
c0014bb9:	83 ec 14             	sub    esp,0x14
c0014bbc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014bc0:	53                   	push   ebx
c0014bc1:	e8 52 a3 00 00       	call   c001ef18 <Vm::x87Handler(regs*)>
c0014bc6:	83 c4 10             	add    esp,0x10
c0014bc9:	84 c0                	test   al,al
c0014bcb:	74 05                	je     c0014bd2 <x87EmulHandler(regs*, void*)+0x1a>
c0014bcd:	83 c4 08             	add    esp,0x8
c0014bd0:	5b                   	pop    ebx
c0014bd1:	c3                   	ret    
c0014bd2:	83 ec 0c             	sub    esp,0xc
c0014bd5:	68 a6 a4 02 c0       	push   0xc002a4a6
c0014bda:	e8 14 dd ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0014bdf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014be2:	e8 83 fb ff ff       	call   c001476a <displayDebugInfo(regs*)>

c0014be7 <gpFault(regs*, void*)>:
c0014be7:	53                   	push   ebx
c0014be8:	83 ec 14             	sub    esp,0x14
c0014beb:	c7 05 30 da 02 c0 95 e2 01 c0 	mov    DWORD PTR ds:0xc002da30,0xc001e295
c0014bf5:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014bf9:	53                   	push   ebx
c0014bfa:	e8 96 96 00 00       	call   c001e295 <Vm::faultHandler(regs*)>
c0014bff:	83 c4 10             	add    esp,0x10
c0014c02:	84 c0                	test   al,al
c0014c04:	74 05                	je     c0014c0b <gpFault(regs*, void*)+0x24>
c0014c06:	83 c4 08             	add    esp,0x8
c0014c09:	5b                   	pop    ebx
c0014c0a:	c3                   	ret    
c0014c0b:	83 ec 0c             	sub    esp,0xc
c0014c0e:	68 bc a4 02 c0       	push   0xc002a4bc
c0014c13:	e8 db dc ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0014c18:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014c1b:	e8 4a fb ff ff       	call   c001476a <displayDebugInfo(regs*)>

c0014c20 <pgFault(regs*, void*)>:
c0014c20:	83 ec 18             	sub    esp,0x18
c0014c23:	68 d7 a4 02 c0       	push   0xc002a4d7
c0014c28:	e8 c6 dc ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0014c2d:	58                   	pop    eax
c0014c2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014c32:	e8 33 fb ff ff       	call   c001476a <displayDebugInfo(regs*)>

c0014c37 <otherISRHandler(regs*, void*)>:
c0014c37:	53                   	push   ebx
c0014c38:	83 ec 0c             	sub    esp,0xc
c0014c3b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014c3f:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014c42:	50                   	push   eax
c0014c43:	50                   	push   eax
c0014c44:	68 e4 a4 02 c0       	push   0xc002a4e4
c0014c49:	e8 a5 dc ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0014c4e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014c51:	e8 14 fb ff ff       	call   c001476a <displayDebugInfo(regs*)>

c0014c56 <opcodeFault(regs*, void*)>:
c0014c56:	55                   	push   ebp
c0014c57:	89 e5                	mov    ebp,esp
c0014c59:	56                   	push   esi
c0014c5a:	53                   	push   ebx
c0014c5b:	83 ec 40             	sub    esp,0x40
c0014c5e:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c0014c63:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014c69:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0014c6f:	84 c0                	test   al,al
c0014c71:	74 24                	je     c0014c97 <opcodeFault(regs*, void*)+0x41>
c0014c73:	83 ec 0c             	sub    esp,0xc
c0014c76:	68 04 a5 02 c0       	push   0xc002a504
c0014c7b:	e8 73 dc ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0014c80:	83 c4 10             	add    esp,0x10
c0014c83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c86:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c89:	8d 50 19             	lea    edx,[eax+0x19]
c0014c8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c8f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c92:	e9 be 05 00 00       	jmp    c0015255 <opcodeFault(regs*, void*)+0x5ff>
c0014c97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c9a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c9d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014ca0:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0014ca4:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0014ca8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cab:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014cae:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0014cb1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cb4:	8a 00                	mov    al,BYTE PTR [eax]
c0014cb6:	3c f0                	cmp    al,0xf0
c0014cb8:	75 17                	jne    c0014cd1 <opcodeFault(regs*, void*)+0x7b>
c0014cba:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014cbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cc0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014cc3:	8d 50 01             	lea    edx,[eax+0x1]
c0014cc6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cc9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ccc:	e9 da 00 00 00       	jmp    c0014dab <opcodeFault(regs*, void*)+0x155>
c0014cd1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cd4:	8a 00                	mov    al,BYTE PTR [eax]
c0014cd6:	3c f2                	cmp    al,0xf2
c0014cd8:	74 09                	je     c0014ce3 <opcodeFault(regs*, void*)+0x8d>
c0014cda:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cdd:	8a 00                	mov    al,BYTE PTR [eax]
c0014cdf:	3c f3                	cmp    al,0xf3
c0014ce1:	75 1b                	jne    c0014cfe <opcodeFault(regs*, void*)+0xa8>
c0014ce3:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014ce7:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014cea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ced:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014cf0:	8d 50 01             	lea    edx,[eax+0x1]
c0014cf3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cf6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014cf9:	e9 ad 00 00 00       	jmp    c0014dab <opcodeFault(regs*, void*)+0x155>
c0014cfe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d01:	8a 00                	mov    al,BYTE PTR [eax]
c0014d03:	3c 66                	cmp    al,0x66
c0014d05:	75 1f                	jne    c0014d26 <opcodeFault(regs*, void*)+0xd0>
c0014d07:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014d0b:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0014d0f:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014d12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d15:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d18:	8d 50 01             	lea    edx,[eax+0x1]
c0014d1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d1e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d21:	e9 85 00 00 00       	jmp    c0014dab <opcodeFault(regs*, void*)+0x155>
c0014d26:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d29:	8a 00                	mov    al,BYTE PTR [eax]
c0014d2b:	3c 67                	cmp    al,0x67
c0014d2d:	75 18                	jne    c0014d47 <opcodeFault(regs*, void*)+0xf1>
c0014d2f:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014d33:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014d36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d39:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d3c:	8d 50 01             	lea    edx,[eax+0x1]
c0014d3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d42:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d45:	eb 64                	jmp    c0014dab <opcodeFault(regs*, void*)+0x155>
c0014d47:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d4a:	8a 00                	mov    al,BYTE PTR [eax]
c0014d4c:	3c 2e                	cmp    al,0x2e
c0014d4e:	74 09                	je     c0014d59 <opcodeFault(regs*, void*)+0x103>
c0014d50:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d53:	8a 00                	mov    al,BYTE PTR [eax]
c0014d55:	3c 3e                	cmp    al,0x3e
c0014d57:	75 18                	jne    c0014d71 <opcodeFault(regs*, void*)+0x11b>
c0014d59:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014d5d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014d60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d63:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d66:	8d 50 01             	lea    edx,[eax+0x1]
c0014d69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d6c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d6f:	eb 3a                	jmp    c0014dab <opcodeFault(regs*, void*)+0x155>
c0014d71:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d74:	8a 00                	mov    al,BYTE PTR [eax]
c0014d76:	3c 36                	cmp    al,0x36
c0014d78:	74 1b                	je     c0014d95 <opcodeFault(regs*, void*)+0x13f>
c0014d7a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d7d:	8a 00                	mov    al,BYTE PTR [eax]
c0014d7f:	3c 26                	cmp    al,0x26
c0014d81:	74 12                	je     c0014d95 <opcodeFault(regs*, void*)+0x13f>
c0014d83:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d86:	8a 00                	mov    al,BYTE PTR [eax]
c0014d88:	3c 64                	cmp    al,0x64
c0014d8a:	74 09                	je     c0014d95 <opcodeFault(regs*, void*)+0x13f>
c0014d8c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d8f:	8a 00                	mov    al,BYTE PTR [eax]
c0014d91:	3c 65                	cmp    al,0x65
c0014d93:	75 16                	jne    c0014dab <opcodeFault(regs*, void*)+0x155>
c0014d95:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014d99:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014d9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d9f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014da2:	8d 50 01             	lea    edx,[eax+0x1]
c0014da5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014da8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014dab:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014dae:	8a 00                	mov    al,BYTE PTR [eax]
c0014db0:	3c 0f                	cmp    al,0xf
c0014db2:	0f 85 ad 00 00 00    	jne    c0014e65 <opcodeFault(regs*, void*)+0x20f>
c0014db8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014dbb:	40                   	inc    eax
c0014dbc:	8a 00                	mov    al,BYTE PTR [eax]
c0014dbe:	3c c2                	cmp    al,0xc2
c0014dc0:	74 0e                	je     c0014dd0 <opcodeFault(regs*, void*)+0x17a>
c0014dc2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014dc5:	40                   	inc    eax
c0014dc6:	8a 00                	mov    al,BYTE PTR [eax]
c0014dc8:	3c c3                	cmp    al,0xc3
c0014dca:	0f 85 95 00 00 00    	jne    c0014e65 <opcodeFault(regs*, void*)+0x20f>
c0014dd0:	83 ec 0c             	sub    esp,0xc
c0014dd3:	68 27 a5 02 c0       	push   0xc002a527
c0014dd8:	e8 16 db ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0014ddd:	83 c4 10             	add    esp,0x10
c0014de0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014de3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014de6:	8d 50 01             	lea    edx,[eax+0x1]
c0014de9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dec:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014def:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014df2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014df5:	8a 00                	mov    al,BYTE PTR [eax]
c0014df7:	8d 50 fe             	lea    edx,[eax-0x2]
c0014dfa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014dfd:	88 10                	mov    BYTE PTR [eax],dl
c0014dff:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0014e02:	50                   	push   eax
c0014e03:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0014e06:	50                   	push   eax
c0014e07:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0014e0a:	50                   	push   eax
c0014e0b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014e0e:	e8 6b 46 00 00       	call   c001947e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014e13:	83 c4 10             	add    esp,0x10
c0014e16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e19:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e1c:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014e1f:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0014e22:	01 d0                	add    eax,edx
c0014e24:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0014e27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e2a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e2d:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014e30:	48                   	dec    eax
c0014e31:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0014e34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e37:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0014e3a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e40:	83 ec 04             	sub    esp,0x4
c0014e43:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0014e46:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014e49:	50                   	push   eax
c0014e4a:	e8 65 b3 fe ff       	call   c00001b4 <voodooXADD>
c0014e4f:	83 c4 10             	add    esp,0x10
c0014e52:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0014e55:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0014e58:	01 c2                	add    edx,eax
c0014e5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e5d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e60:	e9 f0 03 00 00       	jmp    c0015255 <opcodeFault(regs*, void*)+0x5ff>
c0014e65:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e68:	8a 00                	mov    al,BYTE PTR [eax]
c0014e6a:	3c 0f                	cmp    al,0xf
c0014e6c:	0f 85 8b 01 00 00    	jne    c0014ffd <opcodeFault(regs*, void*)+0x3a7>
c0014e72:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e75:	40                   	inc    eax
c0014e76:	8a 00                	mov    al,BYTE PTR [eax]
c0014e78:	3c c7                	cmp    al,0xc7
c0014e7a:	0f 86 7d 01 00 00    	jbe    c0014ffd <opcodeFault(regs*, void*)+0x3a7>
c0014e80:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e83:	40                   	inc    eax
c0014e84:	8a 00                	mov    al,BYTE PTR [eax]
c0014e86:	3c cf                	cmp    al,0xcf
c0014e88:	0f 87 6f 01 00 00    	ja     c0014ffd <opcodeFault(regs*, void*)+0x3a7>
c0014e8e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e91:	40                   	inc    eax
c0014e92:	8a 00                	mov    al,BYTE PTR [eax]
c0014e94:	83 c0 38             	add    eax,0x38
c0014e97:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0014e9a:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014e9e:	75 0b                	jne    c0014eab <opcodeFault(regs*, void*)+0x255>
c0014ea0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ea3:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014ea6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014ea9:	eb 75                	jmp    c0014f20 <opcodeFault(regs*, void*)+0x2ca>
c0014eab:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014eaf:	75 0b                	jne    c0014ebc <opcodeFault(regs*, void*)+0x266>
c0014eb1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014eb4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014eb7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014eba:	eb 64                	jmp    c0014f20 <opcodeFault(regs*, void*)+0x2ca>
c0014ebc:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014ec0:	75 0b                	jne    c0014ecd <opcodeFault(regs*, void*)+0x277>
c0014ec2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ec5:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014ec8:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014ecb:	eb 53                	jmp    c0014f20 <opcodeFault(regs*, void*)+0x2ca>
c0014ecd:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014ed1:	75 0b                	jne    c0014ede <opcodeFault(regs*, void*)+0x288>
c0014ed3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ed6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014ed9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014edc:	eb 42                	jmp    c0014f20 <opcodeFault(regs*, void*)+0x2ca>
c0014ede:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014ee2:	75 0b                	jne    c0014eef <opcodeFault(regs*, void*)+0x299>
c0014ee4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ee7:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014eea:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014eed:	eb 31                	jmp    c0014f20 <opcodeFault(regs*, void*)+0x2ca>
c0014eef:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014ef3:	75 0b                	jne    c0014f00 <opcodeFault(regs*, void*)+0x2aa>
c0014ef5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ef8:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014efb:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014efe:	eb 20                	jmp    c0014f20 <opcodeFault(regs*, void*)+0x2ca>
c0014f00:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014f04:	75 0b                	jne    c0014f11 <opcodeFault(regs*, void*)+0x2bb>
c0014f06:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f09:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014f0c:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f0f:	eb 0f                	jmp    c0014f20 <opcodeFault(regs*, void*)+0x2ca>
c0014f11:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014f15:	75 09                	jne    c0014f20 <opcodeFault(regs*, void*)+0x2ca>
c0014f17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f1a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014f1d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f20:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0014f24:	74 10                	je     c0014f36 <opcodeFault(regs*, void*)+0x2e0>
c0014f26:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0014f2d:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0014f34:	eb 2d                	jmp    c0014f63 <opcodeFault(regs*, void*)+0x30d>
c0014f36:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014f39:	c1 e0 18             	shl    eax,0x18
c0014f3c:	89 c2                	mov    edx,eax
c0014f3e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014f41:	c1 e0 08             	shl    eax,0x8
c0014f44:	25 00 00 ff 00       	and    eax,0xff0000
c0014f49:	09 c2                	or     edx,eax
c0014f4b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014f4e:	c1 e8 08             	shr    eax,0x8
c0014f51:	25 00 ff 00 00       	and    eax,0xff00
c0014f56:	09 c2                	or     edx,eax
c0014f58:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014f5b:	c1 e8 18             	shr    eax,0x18
c0014f5e:	09 d0                	or     eax,edx
c0014f60:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f63:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014f67:	75 0b                	jne    c0014f74 <opcodeFault(regs*, void*)+0x31e>
c0014f69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f6c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014f6f:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014f72:	eb 75                	jmp    c0014fe9 <opcodeFault(regs*, void*)+0x393>
c0014f74:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014f78:	75 0b                	jne    c0014f85 <opcodeFault(regs*, void*)+0x32f>
c0014f7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f7d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014f80:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0014f83:	eb 64                	jmp    c0014fe9 <opcodeFault(regs*, void*)+0x393>
c0014f85:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014f89:	75 0b                	jne    c0014f96 <opcodeFault(regs*, void*)+0x340>
c0014f8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f8e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014f91:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014f94:	eb 53                	jmp    c0014fe9 <opcodeFault(regs*, void*)+0x393>
c0014f96:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014f9a:	75 0b                	jne    c0014fa7 <opcodeFault(regs*, void*)+0x351>
c0014f9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f9f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014fa2:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0014fa5:	eb 42                	jmp    c0014fe9 <opcodeFault(regs*, void*)+0x393>
c0014fa7:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014fab:	75 0b                	jne    c0014fb8 <opcodeFault(regs*, void*)+0x362>
c0014fad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fb0:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014fb3:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0014fb6:	eb 31                	jmp    c0014fe9 <opcodeFault(regs*, void*)+0x393>
c0014fb8:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014fbc:	75 0b                	jne    c0014fc9 <opcodeFault(regs*, void*)+0x373>
c0014fbe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fc1:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014fc4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0014fc7:	eb 20                	jmp    c0014fe9 <opcodeFault(regs*, void*)+0x393>
c0014fc9:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014fcd:	75 0b                	jne    c0014fda <opcodeFault(regs*, void*)+0x384>
c0014fcf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fd2:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014fd5:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0014fd8:	eb 0f                	jmp    c0014fe9 <opcodeFault(regs*, void*)+0x393>
c0014fda:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014fde:	75 09                	jne    c0014fe9 <opcodeFault(regs*, void*)+0x393>
c0014fe0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fe3:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014fe6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0014fe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fec:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014fef:	8d 50 02             	lea    edx,[eax+0x2]
c0014ff2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ff5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ff8:	e9 58 02 00 00       	jmp    c0015255 <opcodeFault(regs*, void*)+0x5ff>
c0014ffd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015000:	8a 00                	mov    al,BYTE PTR [eax]
c0015002:	3c 0f                	cmp    al,0xf
c0015004:	0f 85 76 01 00 00    	jne    c0015180 <opcodeFault(regs*, void*)+0x52a>
c001500a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001500d:	40                   	inc    eax
c001500e:	8a 00                	mov    al,BYTE PTR [eax]
c0015010:	3c c7                	cmp    al,0xc7
c0015012:	0f 85 68 01 00 00    	jne    c0015180 <opcodeFault(regs*, void*)+0x52a>
c0015018:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001501b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001501e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015021:	8d 50 01             	lea    edx,[eax+0x1]
c0015024:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015027:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001502a:	8d 45 ba             	lea    eax,[ebp-0x46]
c001502d:	50                   	push   eax
c001502e:	8d 45 bb             	lea    eax,[ebp-0x45]
c0015031:	50                   	push   eax
c0015032:	8d 45 bc             	lea    eax,[ebp-0x44]
c0015035:	50                   	push   eax
c0015036:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015039:	e8 40 44 00 00       	call   c001947e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001503e:	83 c4 10             	add    esp,0x10
c0015041:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0015044:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0015047:	83 f0 01             	xor    eax,0x1
c001504a:	84 c0                	test   al,al
c001504c:	0f 84 2e 01 00 00    	je     c0015180 <opcodeFault(regs*, void*)+0x52a>
c0015052:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0015055:	3c 01                	cmp    al,0x1
c0015057:	0f 85 23 01 00 00    	jne    c0015180 <opcodeFault(regs*, void*)+0x52a>
c001505d:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0015060:	83 f0 01             	xor    eax,0x1
c0015063:	84 c0                	test   al,al
c0015065:	0f 84 15 01 00 00    	je     c0015180 <opcodeFault(regs*, void*)+0x52a>
c001506b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001506e:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015071:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015074:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c001507b:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001507e:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015081:	89 c2                	mov    edx,eax
c0015083:	b8 00 00 00 00       	mov    eax,0x0
c0015088:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001508b:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c001508e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015091:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0015094:	ba 00 00 00 00       	mov    edx,0x0
c0015099:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c001509c:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c001509f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150a2:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00150a5:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00150a8:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c00150af:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00150b2:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00150b5:	89 c2                	mov    edx,eax
c00150b7:	b8 00 00 00 00       	mov    eax,0x0
c00150bc:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00150bf:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c00150c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150c5:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00150c8:	ba 00 00 00 00       	mov    edx,0x0
c00150cd:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c00150d0:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c00150d3:	e8 ac 81 00 00       	call   c001d284 <lockScheduler()>
c00150d8:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00150db:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00150de:	8b 00                	mov    eax,DWORD PTR [eax]
c00150e0:	89 c1                	mov    ecx,eax
c00150e2:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c00150e5:	89 cb                	mov    ebx,ecx
c00150e7:	89 d0                	mov    eax,edx
c00150e9:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c00150ec:	89 c6                	mov    esi,eax
c00150ee:	89 f0                	mov    eax,esi
c00150f0:	09 d8                	or     eax,ebx
c00150f2:	85 c0                	test   eax,eax
c00150f4:	75 21                	jne    c0015117 <opcodeFault(regs*, void*)+0x4c1>
c00150f6:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00150f9:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00150fc:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00150ff:	89 01                	mov    DWORD PTR [ecx],eax
c0015101:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0015104:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015107:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001510a:	83 c8 40             	or     eax,0x40
c001510d:	89 c2                	mov    edx,eax
c001510f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015112:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0015115:	eb 3e                	jmp    c0015155 <opcodeFault(regs*, void*)+0x4ff>
c0015117:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001511a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001511d:	8b 00                	mov    eax,DWORD PTR [eax]
c001511f:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015122:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0015125:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0015128:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001512b:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001512e:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015131:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015134:	89 d0                	mov    eax,edx
c0015136:	31 d2                	xor    edx,edx
c0015138:	89 c3                	mov    ebx,eax
c001513a:	89 d6                	mov    esi,edx
c001513c:	89 da                	mov    edx,ebx
c001513e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015141:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0015144:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015147:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001514a:	83 e0 bf             	and    eax,0xffffffbf
c001514d:	89 c2                	mov    edx,eax
c001514f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015152:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0015155:	e8 2c 81 00 00       	call   c001d286 <unlockScheduler()>
c001515a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001515d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015160:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0015163:	01 c2                	add    edx,eax
c0015165:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015168:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001516b:	83 ec 0c             	sub    esp,0xc
c001516e:	68 36 a5 02 c0       	push   0xc002a536
c0015173:	e8 7b d7 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0015178:	83 c4 10             	add    esp,0x10
c001517b:	e9 d5 00 00 00       	jmp    c0015255 <opcodeFault(regs*, void*)+0x5ff>
c0015180:	83 ec 0c             	sub    esp,0xc
c0015183:	68 49 a5 02 c0       	push   0xc002a549
c0015188:	e8 66 d7 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001518d:	83 c4 10             	add    esp,0x10
c0015190:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015193:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015196:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015199:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001519c:	c1 e0 04             	shl    eax,0x4
c001519f:	01 d0                	add    eax,edx
c00151a1:	83 c0 03             	add    eax,0x3
c00151a4:	8a 00                	mov    al,BYTE PTR [eax]
c00151a6:	0f b6 d8             	movzx  ebx,al
c00151a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151ac:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00151af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151b2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00151b5:	c1 e0 04             	shl    eax,0x4
c00151b8:	01 d0                	add    eax,edx
c00151ba:	83 c0 02             	add    eax,0x2
c00151bd:	8a 00                	mov    al,BYTE PTR [eax]
c00151bf:	0f b6 c8             	movzx  ecx,al
c00151c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151c5:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00151c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151cb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00151ce:	c1 e0 04             	shl    eax,0x4
c00151d1:	01 d0                	add    eax,edx
c00151d3:	40                   	inc    eax
c00151d4:	8a 00                	mov    al,BYTE PTR [eax]
c00151d6:	0f b6 d0             	movzx  edx,al
c00151d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151dc:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c00151df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151e2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00151e5:	c1 e0 04             	shl    eax,0x4
c00151e8:	01 f0                	add    eax,esi
c00151ea:	8a 00                	mov    al,BYTE PTR [eax]
c00151ec:	0f b6 c0             	movzx  eax,al
c00151ef:	83 ec 0c             	sub    esp,0xc
c00151f2:	53                   	push   ebx
c00151f3:	51                   	push   ecx
c00151f4:	52                   	push   edx
c00151f5:	50                   	push   eax
c00151f6:	68 5c a5 02 c0       	push   0xc002a55c
c00151fb:	e8 f3 d6 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0015200:	83 c4 20             	add    esp,0x20
c0015203:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015206:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015209:	83 c0 03             	add    eax,0x3
c001520c:	8a 00                	mov    al,BYTE PTR [eax]
c001520e:	0f b6 d8             	movzx  ebx,al
c0015211:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015214:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015217:	83 c0 02             	add    eax,0x2
c001521a:	8a 00                	mov    al,BYTE PTR [eax]
c001521c:	0f b6 c8             	movzx  ecx,al
c001521f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015222:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015225:	40                   	inc    eax
c0015226:	8a 00                	mov    al,BYTE PTR [eax]
c0015228:	0f b6 d0             	movzx  edx,al
c001522b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001522e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015231:	8a 00                	mov    al,BYTE PTR [eax]
c0015233:	0f b6 c0             	movzx  eax,al
c0015236:	83 ec 0c             	sub    esp,0xc
c0015239:	53                   	push   ebx
c001523a:	51                   	push   ecx
c001523b:	52                   	push   edx
c001523c:	50                   	push   eax
c001523d:	68 84 a5 02 c0       	push   0xc002a584
c0015242:	e8 ac d6 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0015247:	83 c4 20             	add    esp,0x20
c001524a:	83 ec 0c             	sub    esp,0xc
c001524d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015250:	e8 15 f5 ff ff       	call   c001476a <displayDebugInfo(regs*)>
c0015255:	8d 65 f8             	lea    esp,[ebp-0x8]
c0015258:	5b                   	pop    ebx
c0015259:	5e                   	pop    esi
c001525a:	5d                   	pop    ebp
c001525b:	c3                   	ret    

c001525c <displayProgramFault(char const*)>:
c001525c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015261:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015264:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001526a:	85 c0                	test   eax,eax
c001526c:	74 15                	je     c0015283 <displayProgramFault(char const*)+0x27>
c001526e:	83 ec 0c             	sub    esp,0xc
c0015271:	6a 04                	push   0x4
c0015273:	6a 0f                	push   0xf
c0015275:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015279:	50                   	push   eax
c001527a:	e8 17 b9 ff ff       	call   c0010b96 <VgaText::puts(char const*, VgaColour, VgaColour)>
c001527f:	83 c4 1c             	add    esp,0x1c
c0015282:	c3                   	ret    
c0015283:	c3                   	ret    

c0015284 <setupInterruptController()>:
c0015284:	55                   	push   ebp
c0015285:	89 e5                	mov    ebp,esp
c0015287:	53                   	push   ebx
c0015288:	83 ec 24             	sub    esp,0x24
c001528b:	b8 00 00 00 00       	mov    eax,0x0
c0015290:	85 c0                	test   eax,eax
c0015292:	0f 95 c0             	setne  al
c0015295:	84 c0                	test   al,al
c0015297:	74 5b                	je     c00152f4 <setupInterruptController()+0x70>
c0015299:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c00152a0:	83 ec 0c             	sub    esp,0xc
c00152a3:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c00152a6:	e8 79 a3 ff ff       	call   c000f624 <malloc>
c00152ab:	83 c4 10             	add    esp,0x10
c00152ae:	89 c3                	mov    ebx,eax
c00152b0:	83 ec 0c             	sub    esp,0xc
c00152b3:	53                   	push   ebx
c00152b4:	e8 07 fc 00 00       	call   c0024ec0 <APIC::APIC()>
c00152b9:	83 c4 10             	add    esp,0x10
c00152bc:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c00152bf:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c00152c2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00152c5:	8b 00                	mov    eax,DWORD PTR [eax]
c00152c7:	83 c0 08             	add    eax,0x8
c00152ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00152cc:	6a 00                	push   0x0
c00152ce:	6a 00                	push   0x0
c00152d0:	6a 00                	push   0x0
c00152d2:	52                   	push   edx
c00152d3:	ff d0                	call   eax
c00152d5:	83 c4 10             	add    esp,0x10
c00152d8:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c00152dd:	83 ec 08             	sub    esp,0x8
c00152e0:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00152e3:	50                   	push   eax
c00152e4:	e8 31 ea ff ff       	call   c0013d1a <Device::addChild(Device*)>
c00152e9:	83 c4 10             	add    esp,0x10
c00152ec:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00152ef:	e9 52 03 00 00       	jmp    c0015646 <setupInterruptController()+0x3c2>
c00152f4:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c00152f9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00152ff:	83 e0 01             	and    eax,0x1
c0015302:	84 c0                	test   al,al
c0015304:	0f 95 c0             	setne  al
c0015307:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c001530a:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c0015311:	83 ec 0c             	sub    esp,0xc
c0015314:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015317:	e8 08 a3 ff ff       	call   c000f624 <malloc>
c001531c:	83 c4 10             	add    esp,0x10
c001531f:	89 c3                	mov    ebx,eax
c0015321:	83 ec 0c             	sub    esp,0xc
c0015324:	53                   	push   ebx
c0015325:	e8 ee 00 01 00       	call   c0025418 <PIC::PIC()>
c001532a:	83 c4 10             	add    esp,0x10
c001532d:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015330:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015333:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015336:	8b 00                	mov    eax,DWORD PTR [eax]
c0015338:	83 c0 08             	add    eax,0x8
c001533b:	8b 00                	mov    eax,DWORD PTR [eax]
c001533d:	6a 00                	push   0x0
c001533f:	6a 00                	push   0x0
c0015341:	6a 00                	push   0x0
c0015343:	52                   	push   edx
c0015344:	ff d0                	call   eax
c0015346:	83 c4 10             	add    esp,0x10
c0015349:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c001534d:	74 73                	je     c00153c2 <setupInterruptController()+0x13e>
c001534f:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015352:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015355:	8b 00                	mov    eax,DWORD PTR [eax]
c0015357:	83 c0 0c             	add    eax,0xc
c001535a:	8b 00                	mov    eax,DWORD PTR [eax]
c001535c:	6a 00                	push   0x0
c001535e:	6a 00                	push   0x0
c0015360:	6a 00                	push   0x0
c0015362:	52                   	push   edx
c0015363:	ff d0                	call   eax
c0015365:	83 c4 10             	add    esp,0x10
c0015368:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c001536c:	74 15                	je     c0015383 <setupInterruptController()+0xff>
c001536e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015371:	8b 00                	mov    eax,DWORD PTR [eax]
c0015373:	83 c0 04             	add    eax,0x4
c0015376:	8b 00                	mov    eax,DWORD PTR [eax]
c0015378:	83 ec 0c             	sub    esp,0xc
c001537b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001537e:	ff d0                	call   eax
c0015380:	83 c4 10             	add    esp,0x10
c0015383:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c001538a:	83 ec 0c             	sub    esp,0xc
c001538d:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015390:	e8 8f a2 ff ff       	call   c000f624 <malloc>
c0015395:	83 c4 10             	add    esp,0x10
c0015398:	89 c3                	mov    ebx,eax
c001539a:	83 ec 0c             	sub    esp,0xc
c001539d:	53                   	push   ebx
c001539e:	e8 1d fb 00 00       	call   c0024ec0 <APIC::APIC()>
c00153a3:	83 c4 10             	add    esp,0x10
c00153a6:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00153a9:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00153ac:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153af:	8b 00                	mov    eax,DWORD PTR [eax]
c00153b1:	83 c0 08             	add    eax,0x8
c00153b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00153b6:	6a 00                	push   0x0
c00153b8:	6a 00                	push   0x0
c00153ba:	6a 00                	push   0x0
c00153bc:	52                   	push   edx
c00153bd:	ff d0                	call   eax
c00153bf:	83 c4 10             	add    esp,0x10
c00153c2:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c00153c7:	83 ec 08             	sub    esp,0x8
c00153ca:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153cd:	50                   	push   eax
c00153ce:	e8 47 e9 ff ff       	call   c0013d1a <Device::addChild(Device*)>
c00153d3:	83 c4 10             	add    esp,0x10
c00153d6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00153db:	83 c0 24             	add    eax,0x24
c00153de:	8b 00                	mov    eax,DWORD PTR [eax]
c00153e0:	6a 00                	push   0x0
c00153e2:	68 37 4c 01 c0       	push   0xc0014c37
c00153e7:	6a 00                	push   0x0
c00153e9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153ec:	ff d0                	call   eax
c00153ee:	83 c4 10             	add    esp,0x10
c00153f1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00153f6:	83 c0 24             	add    eax,0x24
c00153f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00153fb:	6a 00                	push   0x0
c00153fd:	68 37 4c 01 c0       	push   0xc0014c37
c0015402:	6a 01                	push   0x1
c0015404:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015407:	ff d0                	call   eax
c0015409:	83 c4 10             	add    esp,0x10
c001540c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001540f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015411:	83 c0 24             	add    eax,0x24
c0015414:	8b 00                	mov    eax,DWORD PTR [eax]
c0015416:	6a 00                	push   0x0
c0015418:	68 c7 45 01 c0       	push   0xc00145c7
c001541d:	6a 02                	push   0x2
c001541f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015422:	ff d0                	call   eax
c0015424:	83 c4 10             	add    esp,0x10
c0015427:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001542a:	8b 00                	mov    eax,DWORD PTR [eax]
c001542c:	83 c0 24             	add    eax,0x24
c001542f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015431:	6a 00                	push   0x0
c0015433:	68 37 4c 01 c0       	push   0xc0014c37
c0015438:	6a 03                	push   0x3
c001543a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001543d:	ff d0                	call   eax
c001543f:	83 c4 10             	add    esp,0x10
c0015442:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015445:	8b 00                	mov    eax,DWORD PTR [eax]
c0015447:	83 c0 24             	add    eax,0x24
c001544a:	8b 00                	mov    eax,DWORD PTR [eax]
c001544c:	6a 00                	push   0x0
c001544e:	68 37 4c 01 c0       	push   0xc0014c37
c0015453:	6a 04                	push   0x4
c0015455:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015458:	ff d0                	call   eax
c001545a:	83 c4 10             	add    esp,0x10
c001545d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015460:	8b 00                	mov    eax,DWORD PTR [eax]
c0015462:	83 c0 24             	add    eax,0x24
c0015465:	8b 00                	mov    eax,DWORD PTR [eax]
c0015467:	6a 00                	push   0x0
c0015469:	68 37 4c 01 c0       	push   0xc0014c37
c001546e:	6a 05                	push   0x5
c0015470:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015473:	ff d0                	call   eax
c0015475:	83 c4 10             	add    esp,0x10
c0015478:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001547b:	8b 00                	mov    eax,DWORD PTR [eax]
c001547d:	83 c0 24             	add    eax,0x24
c0015480:	8b 00                	mov    eax,DWORD PTR [eax]
c0015482:	6a 00                	push   0x0
c0015484:	68 56 4c 01 c0       	push   0xc0014c56
c0015489:	6a 06                	push   0x6
c001548b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001548e:	ff d0                	call   eax
c0015490:	83 c4 10             	add    esp,0x10
c0015493:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015496:	8b 00                	mov    eax,DWORD PTR [eax]
c0015498:	83 c0 24             	add    eax,0x24
c001549b:	8b 00                	mov    eax,DWORD PTR [eax]
c001549d:	6a 00                	push   0x0
c001549f:	68 b8 4b 01 c0       	push   0xc0014bb8
c00154a4:	6a 07                	push   0x7
c00154a6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154a9:	ff d0                	call   eax
c00154ab:	83 c4 10             	add    esp,0x10
c00154ae:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154b1:	8b 00                	mov    eax,DWORD PTR [eax]
c00154b3:	83 c0 24             	add    eax,0x24
c00154b6:	8b 00                	mov    eax,DWORD PTR [eax]
c00154b8:	6a 00                	push   0x0
c00154ba:	68 e2 43 01 c0       	push   0xc00143e2
c00154bf:	6a 08                	push   0x8
c00154c1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154c4:	ff d0                	call   eax
c00154c6:	83 c4 10             	add    esp,0x10
c00154c9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00154ce:	83 c0 24             	add    eax,0x24
c00154d1:	8b 00                	mov    eax,DWORD PTR [eax]
c00154d3:	6a 00                	push   0x0
c00154d5:	68 37 4c 01 c0       	push   0xc0014c37
c00154da:	6a 09                	push   0x9
c00154dc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154df:	ff d0                	call   eax
c00154e1:	83 c4 10             	add    esp,0x10
c00154e4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154e7:	8b 00                	mov    eax,DWORD PTR [eax]
c00154e9:	83 c0 24             	add    eax,0x24
c00154ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00154ee:	6a 00                	push   0x0
c00154f0:	68 37 4c 01 c0       	push   0xc0014c37
c00154f5:	6a 0a                	push   0xa
c00154f7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154fa:	ff d0                	call   eax
c00154fc:	83 c4 10             	add    esp,0x10
c00154ff:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015502:	8b 00                	mov    eax,DWORD PTR [eax]
c0015504:	83 c0 24             	add    eax,0x24
c0015507:	8b 00                	mov    eax,DWORD PTR [eax]
c0015509:	6a 00                	push   0x0
c001550b:	68 37 4c 01 c0       	push   0xc0014c37
c0015510:	6a 0b                	push   0xb
c0015512:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015515:	ff d0                	call   eax
c0015517:	83 c4 10             	add    esp,0x10
c001551a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001551d:	8b 00                	mov    eax,DWORD PTR [eax]
c001551f:	83 c0 24             	add    eax,0x24
c0015522:	8b 00                	mov    eax,DWORD PTR [eax]
c0015524:	6a 00                	push   0x0
c0015526:	68 37 4c 01 c0       	push   0xc0014c37
c001552b:	6a 0c                	push   0xc
c001552d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015530:	ff d0                	call   eax
c0015532:	83 c4 10             	add    esp,0x10
c0015535:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015538:	8b 00                	mov    eax,DWORD PTR [eax]
c001553a:	83 c0 24             	add    eax,0x24
c001553d:	8b 00                	mov    eax,DWORD PTR [eax]
c001553f:	6a 00                	push   0x0
c0015541:	68 e7 4b 01 c0       	push   0xc0014be7
c0015546:	6a 0d                	push   0xd
c0015548:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001554b:	ff d0                	call   eax
c001554d:	83 c4 10             	add    esp,0x10
c0015550:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015553:	8b 00                	mov    eax,DWORD PTR [eax]
c0015555:	83 c0 24             	add    eax,0x24
c0015558:	8b 00                	mov    eax,DWORD PTR [eax]
c001555a:	6a 00                	push   0x0
c001555c:	68 20 4c 01 c0       	push   0xc0014c20
c0015561:	6a 0e                	push   0xe
c0015563:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015566:	ff d0                	call   eax
c0015568:	83 c4 10             	add    esp,0x10
c001556b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001556e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015570:	83 c0 24             	add    eax,0x24
c0015573:	8b 00                	mov    eax,DWORD PTR [eax]
c0015575:	6a 00                	push   0x0
c0015577:	68 37 4c 01 c0       	push   0xc0014c37
c001557c:	6a 0f                	push   0xf
c001557e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015581:	ff d0                	call   eax
c0015583:	83 c4 10             	add    esp,0x10
c0015586:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015589:	8b 00                	mov    eax,DWORD PTR [eax]
c001558b:	83 c0 24             	add    eax,0x24
c001558e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015590:	6a 00                	push   0x0
c0015592:	68 37 4c 01 c0       	push   0xc0014c37
c0015597:	6a 10                	push   0x10
c0015599:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001559c:	ff d0                	call   eax
c001559e:	83 c4 10             	add    esp,0x10
c00155a1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00155a6:	83 c0 24             	add    eax,0x24
c00155a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00155ab:	6a 00                	push   0x0
c00155ad:	68 37 4c 01 c0       	push   0xc0014c37
c00155b2:	6a 11                	push   0x11
c00155b4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155b7:	ff d0                	call   eax
c00155b9:	83 c4 10             	add    esp,0x10
c00155bc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00155c1:	83 c0 24             	add    eax,0x24
c00155c4:	8b 00                	mov    eax,DWORD PTR [eax]
c00155c6:	6a 00                	push   0x0
c00155c8:	68 37 4c 01 c0       	push   0xc0014c37
c00155cd:	6a 12                	push   0x12
c00155cf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155d2:	ff d0                	call   eax
c00155d4:	83 c4 10             	add    esp,0x10
c00155d7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155da:	8b 00                	mov    eax,DWORD PTR [eax]
c00155dc:	83 c0 24             	add    eax,0x24
c00155df:	8b 00                	mov    eax,DWORD PTR [eax]
c00155e1:	6a 00                	push   0x0
c00155e3:	68 37 4c 01 c0       	push   0xc0014c37
c00155e8:	6a 13                	push   0x13
c00155ea:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155ed:	ff d0                	call   eax
c00155ef:	83 c4 10             	add    esp,0x10
c00155f2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00155f7:	83 c0 24             	add    eax,0x24
c00155fa:	8b 00                	mov    eax,DWORD PTR [eax]
c00155fc:	6a 00                	push   0x0
c00155fe:	68 37 4c 01 c0       	push   0xc0014c37
c0015603:	6a 14                	push   0x14
c0015605:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015608:	ff d0                	call   eax
c001560a:	83 c4 10             	add    esp,0x10
c001560d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015610:	8b 00                	mov    eax,DWORD PTR [eax]
c0015612:	83 c0 24             	add    eax,0x24
c0015615:	8b 00                	mov    eax,DWORD PTR [eax]
c0015617:	6a 00                	push   0x0
c0015619:	68 37 4c 01 c0       	push   0xc0014c37
c001561e:	6a 1e                	push   0x1e
c0015620:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015623:	ff d0                	call   eax
c0015625:	83 c4 10             	add    esp,0x10
c0015628:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001562b:	8b 00                	mov    eax,DWORD PTR [eax]
c001562d:	83 c0 24             	add    eax,0x24
c0015630:	8b 00                	mov    eax,DWORD PTR [eax]
c0015632:	6a 00                	push   0x0
c0015634:	68 86 bc 01 c0       	push   0xc001bc86
c0015639:	6a 60                	push   0x60
c001563b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001563e:	ff d0                	call   eax
c0015640:	83 c4 10             	add    esp,0x10
c0015643:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015646:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015649:	c9                   	leave  
c001564a:	c3                   	ret    
c001564b:	90                   	nop

c001564c <InterruptController::convertLegacyIRQNumber(int)>:
c001564c:	55                   	push   ebp
c001564d:	89 e5                	mov    ebp,esp
c001564f:	83 ec 08             	sub    esp,0x8
c0015652:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015655:	83 ec 0c             	sub    esp,0xc
c0015658:	50                   	push   eax
c0015659:	e8 a8 e9 ff ff       	call   c0014006 <Device::getName()>
c001565e:	83 c4 10             	add    esp,0x10
c0015661:	8a 00                	mov    al,BYTE PTR [eax]
c0015663:	3c 41                	cmp    al,0x41
c0015665:	0f 94 c0             	sete   al
c0015668:	84 c0                	test   al,al
c001566a:	74 28                	je     c0015694 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c001566c:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015670:	7f 12                	jg     c0015684 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015672:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015675:	05 e0 ca 02 c0       	add    eax,0xc002cae0
c001567a:	8a 00                	mov    al,BYTE PTR [eax]
c001567c:	0f b6 c0             	movzx  eax,al
c001567f:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015682:	eb 10                	jmp    c0015694 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015684:	83 ec 0c             	sub    esp,0xc
c0015687:	68 c0 a2 02 c0       	push   0xc002a2c0
c001568c:	e8 bc 45 00 00       	call   c0019c4d <Krnl::panic(char const*)>
c0015691:	83 c4 10             	add    esp,0x10
c0015694:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015697:	c9                   	leave  
c0015698:	c3                   	ret    
c0015699:	90                   	nop

c001569a <startGUI(void*)>:
c001569a:	55                   	push   ebp
c001569b:	89 e5                	mov    ebp,esp
c001569d:	53                   	push   ebx
c001569e:	83 ec 04             	sub    esp,0x4
c00156a1:	e8 e0 7b 00 00       	call   c001d286 <unlockScheduler()>
c00156a6:	8b 1d 88 d8 02 c0    	mov    ebx,DWORD PTR ds:0xc002d888
c00156ac:	83 ec 08             	sub    esp,0x8
c00156af:	6a 01                	push   0x1
c00156b1:	68 f4 a5 02 c0       	push   0xc002a5f4
c00156b6:	e8 55 75 00 00       	call   c001cc10 <Thr::loadDLL(char const*, bool)>
c00156bb:	83 c4 10             	add    esp,0x10
c00156be:	83 ec 08             	sub    esp,0x8
c00156c1:	53                   	push   ebx
c00156c2:	50                   	push   eax
c00156c3:	e8 57 77 00 00       	call   c001ce1f <Thr::executeDLL(unsigned long, void*)>
c00156c8:	83 c4 10             	add    esp,0x10
c00156cb:	8b 1d 88 d8 02 c0    	mov    ebx,DWORD PTR ds:0xc002d888
c00156d1:	83 ec 08             	sub    esp,0x8
c00156d4:	6a 01                	push   0x1
c00156d6:	68 0e a6 02 c0       	push   0xc002a60e
c00156db:	e8 30 75 00 00       	call   c001cc10 <Thr::loadDLL(char const*, bool)>
c00156e0:	83 c4 10             	add    esp,0x10
c00156e3:	83 ec 08             	sub    esp,0x8
c00156e6:	53                   	push   ebx
c00156e7:	50                   	push   eax
c00156e8:	e8 32 77 00 00       	call   c001ce1f <Thr::executeDLL(unsigned long, void*)>
c00156ed:	83 c4 10             	add    esp,0x10
c00156f0:	90                   	nop
c00156f1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00156f4:	c9                   	leave  
c00156f5:	c3                   	ret    

c00156f6 <startGUIVESA(void*)>:
c00156f6:	55                   	push   ebp
c00156f7:	89 e5                	mov    ebp,esp
c00156f9:	53                   	push   ebx
c00156fa:	83 ec 04             	sub    esp,0x4
c00156fd:	e8 84 7b 00 00       	call   c001d286 <unlockScheduler()>
c0015702:	8b 1d 88 d8 02 c0    	mov    ebx,DWORD PTR ds:0xc002d888
c0015708:	83 ec 08             	sub    esp,0x8
c001570b:	6a 01                	push   0x1
c001570d:	68 28 a6 02 c0       	push   0xc002a628
c0015712:	e8 f9 74 00 00       	call   c001cc10 <Thr::loadDLL(char const*, bool)>
c0015717:	83 c4 10             	add    esp,0x10
c001571a:	83 ec 08             	sub    esp,0x8
c001571d:	53                   	push   ebx
c001571e:	50                   	push   eax
c001571f:	e8 fb 76 00 00       	call   c001ce1f <Thr::executeDLL(unsigned long, void*)>
c0015724:	83 c4 10             	add    esp,0x10
c0015727:	8b 1d 88 d8 02 c0    	mov    ebx,DWORD PTR ds:0xc002d888
c001572d:	83 ec 08             	sub    esp,0x8
c0015730:	6a 01                	push   0x1
c0015732:	68 0e a6 02 c0       	push   0xc002a60e
c0015737:	e8 d4 74 00 00       	call   c001cc10 <Thr::loadDLL(char const*, bool)>
c001573c:	83 c4 10             	add    esp,0x10
c001573f:	83 ec 08             	sub    esp,0x8
c0015742:	53                   	push   ebx
c0015743:	50                   	push   eax
c0015744:	e8 d6 76 00 00       	call   c001ce1f <Thr::executeDLL(unsigned long, void*)>
c0015749:	83 c4 10             	add    esp,0x10
c001574c:	90                   	nop
c001574d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015750:	c9                   	leave  
c0015751:	c3                   	ret    

c0015752 <sendKeyToTerminal(unsigned char)>:
c0015752:	55                   	push   ebp
c0015753:	89 e5                	mov    ebp,esp
c0015755:	83 ec 28             	sub    esp,0x28
c0015758:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001575b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001575e:	a1 64 d9 02 c0       	mov    eax,ds:0xc002d964
c0015763:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015767:	83 ec 08             	sub    esp,0x8
c001576a:	52                   	push   edx
c001576b:	50                   	push   eax
c001576c:	e8 61 b9 ff ff       	call   c00110d2 <VgaText::receiveKey(unsigned char)>
c0015771:	83 c4 10             	add    esp,0x10
c0015774:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015778:	75 41                	jne    c00157bb <sendKeyToTerminal(unsigned char)+0x69>
c001577a:	e8 2c 7b 00 00       	call   c001d2ab <lockStuff()>
c001577f:	a1 40 da 02 c0       	mov    eax,ds:0xc002da40
c0015784:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015787:	c7 05 40 da 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002da40,0x0
c0015791:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015795:	74 1f                	je     c00157b6 <sendKeyToTerminal(unsigned char)+0x64>
c0015797:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001579a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001579d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00157a0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00157a3:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00157a6:	83 ec 0c             	sub    esp,0xc
c00157a9:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00157ac:	e8 eb 80 00 00       	call   c001d89c <unblockTask(ThreadControlBlock*)>
c00157b1:	83 c4 10             	add    esp,0x10
c00157b4:	eb db                	jmp    c0015791 <sendKeyToTerminal(unsigned char)+0x3f>
c00157b6:	e8 8a 7e 00 00       	call   c001d645 <unlockStuff()>
c00157bb:	90                   	nop
c00157bc:	c9                   	leave  
c00157bd:	c3                   	ret    

c00157be <sendKeyboardToken(KeyboardToken)>:
c00157be:	55                   	push   ebp
c00157bf:	89 e5                	mov    ebp,esp
c00157c1:	83 ec 18             	sub    esp,0x18
c00157c4:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c00157c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157ca:	0f b7 c0             	movzx  eax,ax
c00157cd:	83 f2 01             	xor    edx,0x1
c00157d0:	88 90 60 da 02 c0    	mov    BYTE PTR [eax-0x3ffd25a0],dl
c00157d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157d9:	66 3d 03 02          	cmp    ax,0x203
c00157dd:	75 07                	jne    c00157e6 <sendKeyboardToken(KeyboardToken)+0x28>
c00157df:	a0 60 db 02 c0       	mov    al,ds:0xc002db60
c00157e4:	84 c0                	test   al,al
c00157e6:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c00157ea:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c00157ed:	a0 68 de 02 c0       	mov    al,ds:0xc002de68
c00157f2:	38 c2                	cmp    dl,al
c00157f4:	74 1c                	je     c0015812 <sendKeyboardToken(KeyboardToken)+0x54>
c00157f6:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c00157f9:	a2 68 de 02 c0       	mov    ds:0xc002de68,al
c00157fe:	a0 68 de 02 c0       	mov    al,ds:0xc002de68
c0015803:	0f b6 c0             	movzx  eax,al
c0015806:	83 ec 0c             	sub    esp,0xc
c0015809:	50                   	push   eax
c001580a:	e8 23 ab ff ff       	call   c0010332 <setTerminalScrollLock(bool)>
c001580f:	83 c4 10             	add    esp,0x10
c0015812:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015815:	84 c0                	test   al,al
c0015817:	0f 84 ae 00 00 00    	je     c00158cb <sendKeyboardToken(KeyboardToken)+0x10d>
c001581d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015820:	66 3d 10 03          	cmp    ax,0x310
c0015824:	75 06                	jne    c001582c <sendKeyboardToken(KeyboardToken)+0x6e>
c0015826:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c001582c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001582f:	66 3d 11 03          	cmp    ax,0x311
c0015833:	75 06                	jne    c001583b <sendKeyboardToken(KeyboardToken)+0x7d>
c0015835:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c001583b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001583e:	66 3d 12 03          	cmp    ax,0x312
c0015842:	75 06                	jne    c001584a <sendKeyboardToken(KeyboardToken)+0x8c>
c0015844:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c001584a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001584d:	66 3d 13 03          	cmp    ax,0x313
c0015851:	75 06                	jne    c0015859 <sendKeyboardToken(KeyboardToken)+0x9b>
c0015853:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015859:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001585c:	66 3d 14 03          	cmp    ax,0x314
c0015860:	75 06                	jne    c0015868 <sendKeyboardToken(KeyboardToken)+0xaa>
c0015862:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015868:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001586b:	66 3d 15 03          	cmp    ax,0x315
c001586f:	75 06                	jne    c0015877 <sendKeyboardToken(KeyboardToken)+0xb9>
c0015871:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015877:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001587a:	66 3d 16 03          	cmp    ax,0x316
c001587e:	75 06                	jne    c0015886 <sendKeyboardToken(KeyboardToken)+0xc8>
c0015880:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015886:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015889:	66 3d 17 03          	cmp    ax,0x317
c001588d:	75 06                	jne    c0015895 <sendKeyboardToken(KeyboardToken)+0xd7>
c001588f:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015895:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015898:	66 3d 18 03          	cmp    ax,0x318
c001589c:	75 06                	jne    c00158a4 <sendKeyboardToken(KeyboardToken)+0xe6>
c001589e:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c00158a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158a7:	66 3d 19 03          	cmp    ax,0x319
c00158ab:	75 06                	jne    c00158b3 <sendKeyboardToken(KeyboardToken)+0xf5>
c00158ad:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c00158b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158b6:	66 3d 1a 03          	cmp    ax,0x31a
c00158ba:	0f 85 c9 00 00 00    	jne    c0015989 <sendKeyboardToken(KeyboardToken)+0x1cb>
c00158c0:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c00158c6:	e9 be 00 00 00       	jmp    c0015989 <sendKeyboardToken(KeyboardToken)+0x1cb>
c00158cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158ce:	66 3d 10 03          	cmp    ax,0x310
c00158d2:	75 0a                	jne    c00158de <sendKeyboardToken(KeyboardToken)+0x120>
c00158d4:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c00158da:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00158de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158e1:	66 3d 11 03          	cmp    ax,0x311
c00158e5:	75 0a                	jne    c00158f1 <sendKeyboardToken(KeyboardToken)+0x133>
c00158e7:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c00158ed:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00158f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158f4:	66 3d 12 03          	cmp    ax,0x312
c00158f8:	75 0a                	jne    c0015904 <sendKeyboardToken(KeyboardToken)+0x146>
c00158fa:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015900:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015904:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015907:	66 3d 13 03          	cmp    ax,0x313
c001590b:	75 0a                	jne    c0015917 <sendKeyboardToken(KeyboardToken)+0x159>
c001590d:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0015913:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015917:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001591a:	66 3d 14 03          	cmp    ax,0x314
c001591e:	75 0a                	jne    c001592a <sendKeyboardToken(KeyboardToken)+0x16c>
c0015920:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0015926:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001592a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001592d:	66 3d 15 03          	cmp    ax,0x315
c0015931:	75 0a                	jne    c001593d <sendKeyboardToken(KeyboardToken)+0x17f>
c0015933:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015939:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001593d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015940:	66 3d 16 03          	cmp    ax,0x316
c0015944:	75 0a                	jne    c0015950 <sendKeyboardToken(KeyboardToken)+0x192>
c0015946:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c001594c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015950:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015953:	66 3d 17 03          	cmp    ax,0x317
c0015957:	75 0a                	jne    c0015963 <sendKeyboardToken(KeyboardToken)+0x1a5>
c0015959:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c001595f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015963:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015966:	66 3d 18 03          	cmp    ax,0x318
c001596a:	75 0a                	jne    c0015976 <sendKeyboardToken(KeyboardToken)+0x1b8>
c001596c:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0015972:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015976:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015979:	66 3d 19 03          	cmp    ax,0x319
c001597d:	75 0a                	jne    c0015989 <sendKeyboardToken(KeyboardToken)+0x1cb>
c001597f:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0015985:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015989:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001598c:	66 3d 00 02          	cmp    ax,0x200
c0015990:	75 2c                	jne    c00159be <sendKeyboardToken(KeyboardToken)+0x200>
c0015992:	a0 60 de 02 c0       	mov    al,ds:0xc002de60
c0015997:	83 f0 01             	xor    eax,0x1
c001599a:	84 c0                	test   al,al
c001599c:	74 20                	je     c00159be <sendKeyboardToken(KeyboardToken)+0x200>
c001599e:	a1 d4 ed 02 c0       	mov    eax,ds:0xc002edd4
c00159a3:	6a 01                	push   0x1
c00159a5:	6a 00                	push   0x0
c00159a7:	68 9a 56 01 c0       	push   0xc001569a
c00159ac:	50                   	push   eax
c00159ad:	e8 04 7a 00 00       	call   c001d3b6 <Process::createThread(void (*)(void*), void*, int)>
c00159b2:	83 c4 10             	add    esp,0x10
c00159b5:	c6 05 60 de 02 c0 01 	mov    BYTE PTR ds:0xc002de60,0x1
c00159bc:	eb 33                	jmp    c00159f1 <sendKeyboardToken(KeyboardToken)+0x233>
c00159be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159c1:	66 3d 01 02          	cmp    ax,0x201
c00159c5:	75 2a                	jne    c00159f1 <sendKeyboardToken(KeyboardToken)+0x233>
c00159c7:	a0 60 de 02 c0       	mov    al,ds:0xc002de60
c00159cc:	83 f0 01             	xor    eax,0x1
c00159cf:	84 c0                	test   al,al
c00159d1:	74 1e                	je     c00159f1 <sendKeyboardToken(KeyboardToken)+0x233>
c00159d3:	a1 d4 ed 02 c0       	mov    eax,ds:0xc002edd4
c00159d8:	6a 01                	push   0x1
c00159da:	6a 00                	push   0x0
c00159dc:	68 f6 56 01 c0       	push   0xc00156f6
c00159e1:	50                   	push   eax
c00159e2:	e8 cf 79 00 00       	call   c001d3b6 <Process::createThread(void (*)(void*), void*, int)>
c00159e7:	83 c4 10             	add    esp,0x10
c00159ea:	c6 05 60 de 02 c0 01 	mov    BYTE PTR ds:0xc002de60,0x1
c00159f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159f4:	66 3d 1d 03          	cmp    ax,0x31d
c00159f8:	75 06                	jne    c0015a00 <sendKeyboardToken(KeyboardToken)+0x242>
c00159fa:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0015a00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a03:	66 3d 1c 03          	cmp    ax,0x31c
c0015a07:	75 06                	jne    c0015a0f <sendKeyboardToken(KeyboardToken)+0x251>
c0015a09:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0015a0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a12:	66 3d 1b 03          	cmp    ax,0x31b
c0015a16:	75 06                	jne    c0015a1e <sendKeyboardToken(KeyboardToken)+0x260>
c0015a18:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0015a1e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a21:	66 3d 1e 03          	cmp    ax,0x31e
c0015a25:	75 06                	jne    c0015a2d <sendKeyboardToken(KeyboardToken)+0x26f>
c0015a27:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0015a2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a30:	66 3d 1f 03          	cmp    ax,0x31f
c0015a34:	75 06                	jne    c0015a3c <sendKeyboardToken(KeyboardToken)+0x27e>
c0015a36:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0015a3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a3f:	66 3d 1a 03          	cmp    ax,0x31a
c0015a43:	75 06                	jne    c0015a4b <sendKeyboardToken(KeyboardToken)+0x28d>
c0015a45:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0015a4b:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0015a4f:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015a52:	83 f0 01             	xor    eax,0x1
c0015a55:	84 c0                	test   al,al
c0015a57:	74 77                	je     c0015ad0 <sendKeyboardToken(KeyboardToken)+0x312>
c0015a59:	a0 61 db 02 c0       	mov    al,ds:0xc002db61
c0015a5e:	84 c0                	test   al,al
c0015a60:	74 41                	je     c0015aa3 <sendKeyboardToken(KeyboardToken)+0x2e5>
c0015a62:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015a66:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0015a6a:	74 2b                	je     c0015a97 <sendKeyboardToken(KeyboardToken)+0x2d9>
c0015a6c:	8b 15 64 de 02 c0    	mov    edx,DWORD PTR ds:0xc002de64
c0015a72:	89 d0                	mov    eax,edx
c0015a74:	c1 e0 02             	shl    eax,0x2
c0015a77:	01 d0                	add    eax,edx
c0015a79:	01 c0                	add    eax,eax
c0015a7b:	a3 64 de 02 c0       	mov    ds:0xc002de64,eax
c0015a80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a83:	0f b7 c0             	movzx  eax,ax
c0015a86:	8d 50 d0             	lea    edx,[eax-0x30]
c0015a89:	a1 64 de 02 c0       	mov    eax,ds:0xc002de64
c0015a8e:	01 d0                	add    eax,edx
c0015a90:	a3 64 de 02 c0       	mov    ds:0xc002de64,eax
c0015a95:	eb 6d                	jmp    c0015b04 <sendKeyboardToken(KeyboardToken)+0x346>
c0015a97:	c7 05 64 de 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002de64,0x0
c0015aa1:	eb 61                	jmp    c0015b04 <sendKeyboardToken(KeyboardToken)+0x346>
c0015aa3:	a1 64 de 02 c0       	mov    eax,ds:0xc002de64
c0015aa8:	85 c0                	test   eax,eax
c0015aaa:	74 18                	je     c0015ac4 <sendKeyboardToken(KeyboardToken)+0x306>
c0015aac:	a1 64 de 02 c0       	mov    eax,ds:0xc002de64
c0015ab1:	0f b6 c0             	movzx  eax,al
c0015ab4:	83 ec 0c             	sub    esp,0xc
c0015ab7:	50                   	push   eax
c0015ab8:	e8 95 fc ff ff       	call   c0015752 <sendKeyToTerminal(unsigned char)>
c0015abd:	83 c4 10             	add    esp,0x10
c0015ac0:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015ac4:	c7 05 64 de 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002de64,0x0
c0015ace:	eb 34                	jmp    c0015b04 <sendKeyboardToken(KeyboardToken)+0x346>
c0015ad0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ad3:	66 3d 01 01          	cmp    ax,0x101
c0015ad7:	75 2b                	jne    c0015b04 <sendKeyboardToken(KeyboardToken)+0x346>
c0015ad9:	a1 64 de 02 c0       	mov    eax,ds:0xc002de64
c0015ade:	85 c0                	test   eax,eax
c0015ae0:	74 18                	je     c0015afa <sendKeyboardToken(KeyboardToken)+0x33c>
c0015ae2:	a1 64 de 02 c0       	mov    eax,ds:0xc002de64
c0015ae7:	0f b6 c0             	movzx  eax,al
c0015aea:	83 ec 0c             	sub    esp,0xc
c0015aed:	50                   	push   eax
c0015aee:	e8 5f fc ff ff       	call   c0015752 <sendKeyToTerminal(unsigned char)>
c0015af3:	83 c4 10             	add    esp,0x10
c0015af6:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015afa:	c7 05 64 de 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002de64,0x0
c0015b04:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015b07:	83 f0 01             	xor    eax,0x1
c0015b0a:	84 c0                	test   al,al
c0015b0c:	74 4c                	je     c0015b5a <sendKeyboardToken(KeyboardToken)+0x39c>
c0015b0e:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015b11:	83 f0 01             	xor    eax,0x1
c0015b14:	84 c0                	test   al,al
c0015b16:	74 42                	je     c0015b5a <sendKeyboardToken(KeyboardToken)+0x39c>
c0015b18:	a0 60 db 02 c0       	mov    al,ds:0xc002db60
c0015b1d:	83 f0 01             	xor    eax,0x1
c0015b20:	84 c0                	test   al,al
c0015b22:	74 36                	je     c0015b5a <sendKeyboardToken(KeyboardToken)+0x39c>
c0015b24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b27:	66 83 f8 1f          	cmp    ax,0x1f
c0015b2b:	76 09                	jbe    c0015b36 <sendKeyboardToken(KeyboardToken)+0x378>
c0015b2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b30:	66 83 f8 7e          	cmp    ax,0x7e
c0015b34:	76 12                	jbe    c0015b48 <sendKeyboardToken(KeyboardToken)+0x38a>
c0015b36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b39:	66 83 f8 0a          	cmp    ax,0xa
c0015b3d:	74 09                	je     c0015b48 <sendKeyboardToken(KeyboardToken)+0x38a>
c0015b3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b42:	66 83 f8 08          	cmp    ax,0x8
c0015b46:	75 12                	jne    c0015b5a <sendKeyboardToken(KeyboardToken)+0x39c>
c0015b48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b4b:	0f b6 c0             	movzx  eax,al
c0015b4e:	83 ec 0c             	sub    esp,0xc
c0015b51:	50                   	push   eax
c0015b52:	e8 fb fb ff ff       	call   c0015752 <sendKeyToTerminal(unsigned char)>
c0015b57:	83 c4 10             	add    esp,0x10
c0015b5a:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015b5d:	83 f0 01             	xor    eax,0x1
c0015b60:	84 c0                	test   al,al
c0015b62:	74 4f                	je     c0015bb3 <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015b64:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015b67:	83 f0 01             	xor    eax,0x1
c0015b6a:	84 c0                	test   al,al
c0015b6c:	74 45                	je     c0015bb3 <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015b6e:	a0 60 db 02 c0       	mov    al,ds:0xc002db60
c0015b73:	84 c0                	test   al,al
c0015b75:	74 3c                	je     c0015bb3 <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015b77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b7a:	66 83 f8 3f          	cmp    ax,0x3f
c0015b7e:	76 33                	jbe    c0015bb3 <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015b80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b83:	66 83 f8 7f          	cmp    ax,0x7f
c0015b87:	77 2a                	ja     c0015bb3 <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015b89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b8c:	88 c2                	mov    dl,al
c0015b8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b91:	66 83 f8 5f          	cmp    ax,0x5f
c0015b95:	76 04                	jbe    c0015b9b <sendKeyboardToken(KeyboardToken)+0x3dd>
c0015b97:	b0 20                	mov    al,0x20
c0015b99:	eb 02                	jmp    c0015b9d <sendKeyboardToken(KeyboardToken)+0x3df>
c0015b9b:	b0 00                	mov    al,0x0
c0015b9d:	29 c2                	sub    edx,eax
c0015b9f:	88 d0                	mov    al,dl
c0015ba1:	83 e8 40             	sub    eax,0x40
c0015ba4:	0f b6 c0             	movzx  eax,al
c0015ba7:	83 ec 0c             	sub    esp,0xc
c0015baa:	50                   	push   eax
c0015bab:	e8 a2 fb ff ff       	call   c0015752 <sendKeyToTerminal(unsigned char)>
c0015bb0:	83 c4 10             	add    esp,0x10
c0015bb3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bb6:	66 3d 00 03          	cmp    ax,0x300
c0015bba:	75 0f                	jne    c0015bcb <sendKeyboardToken(KeyboardToken)+0x40d>
c0015bbc:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015bbf:	83 f0 01             	xor    eax,0x1
c0015bc2:	84 c0                	test   al,al
c0015bc4:	74 05                	je     c0015bcb <sendKeyboardToken(KeyboardToken)+0x40d>
c0015bc6:	e8 9c af ff ff       	call   c0010b67 <doTerminalCycle()>
c0015bcb:	90                   	nop
c0015bcc:	c9                   	leave  
c0015bcd:	c3                   	ret    

c0015bce <clearInternalKeybuffer(VgaText*)>:
c0015bce:	55                   	push   ebp
c0015bcf:	89 e5                	mov    ebp,esp
c0015bd1:	83 ec 08             	sub    esp,0x8
c0015bd4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bd7:	05 34 11 00 00       	add    eax,0x1134
c0015bdc:	83 ec 0c             	sub    esp,0xc
c0015bdf:	50                   	push   eax
c0015be0:	e8 fc aa fe ff       	call   c00006e1 <strlen>
c0015be5:	83 c4 10             	add    esp,0x10
c0015be8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015beb:	81 c2 34 11 00 00    	add    edx,0x1134
c0015bf1:	83 ec 04             	sub    esp,0x4
c0015bf4:	50                   	push   eax
c0015bf5:	6a 00                	push   0x0
c0015bf7:	52                   	push   edx
c0015bf8:	e8 c7 aa fe ff       	call   c00006c4 <memset>
c0015bfd:	83 c4 10             	add    esp,0x10
c0015c00:	90                   	nop
c0015c01:	c9                   	leave  
c0015c02:	c3                   	ret    

c0015c03 <readKeyboard(VgaText*, char*, unsigned long)>:
c0015c03:	55                   	push   ebp
c0015c04:	89 e5                	mov    ebp,esp
c0015c06:	83 ec 18             	sub    esp,0x18
c0015c09:	fb                   	sti    
c0015c0a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0015c11:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0015c15:	0f 84 8a 00 00 00    	je     c0015ca5 <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c0015c1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c1e:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0015c24:	84 c0                	test   al,al
c0015c26:	75 11                	jne    c0015c39 <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c0015c28:	e8 57 76 00 00       	call   c001d284 <lockScheduler()>
c0015c2d:	e8 8e 79 00 00       	call   c001d5c0 <schedule()>
c0015c32:	e8 4f 76 00 00       	call   c001d286 <unlockScheduler()>
c0015c37:	eb e2                	jmp    c0015c1b <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c0015c39:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015c3c:	8d 50 01             	lea    edx,[eax+0x1]
c0015c3f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0015c42:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015c45:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0015c4b:	88 10                	mov    BYTE PTR [eax],dl
c0015c4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c50:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0015c56:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0015c59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c5c:	05 34 11 00 00       	add    eax,0x1134
c0015c61:	83 ec 0c             	sub    esp,0xc
c0015c64:	50                   	push   eax
c0015c65:	e8 77 aa fe ff       	call   c00006e1 <strlen>
c0015c6a:	83 c4 10             	add    esp,0x10
c0015c6d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015c70:	81 c2 34 11 00 00    	add    edx,0x1134
c0015c76:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015c79:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015c7c:	81 c2 34 11 00 00    	add    edx,0x1134
c0015c82:	83 ec 04             	sub    esp,0x4
c0015c85:	50                   	push   eax
c0015c86:	51                   	push   ecx
c0015c87:	52                   	push   edx
c0015c88:	e8 db a9 fe ff       	call   c0000668 <memmove>
c0015c8d:	83 c4 10             	add    esp,0x10
c0015c90:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0015c93:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015c96:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0015c9a:	0f 85 71 ff ff ff    	jne    c0015c11 <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c0015ca0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ca3:	eb 03                	jmp    c0015ca8 <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c0015ca5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ca8:	c9                   	leave  
c0015ca9:	c3                   	ret    

c0015caa <Keyboard::Keyboard(char const*)>:
c0015caa:	83 ec 0c             	sub    esp,0xc
c0015cad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015cb1:	83 ec 08             	sub    esp,0x8
c0015cb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015cb8:	50                   	push   eax
c0015cb9:	e8 4c e2 ff ff       	call   c0013f0a <Device::Device(char const*)>
c0015cbe:	83 c4 10             	add    esp,0x10
c0015cc1:	ba 4c a6 02 c0       	mov    edx,0xc002a64c
c0015cc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015cca:	89 10                	mov    DWORD PTR [eax],edx
c0015ccc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015cd0:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0015cda:	c6 05 44 da 02 c0 01 	mov    BYTE PTR ds:0xc002da44,0x1
c0015ce1:	90                   	nop
c0015ce2:	83 c4 0c             	add    esp,0xc
c0015ce5:	c3                   	ret    

c0015ce6 <Keyboard::~Keyboard()>:
c0015ce6:	83 ec 0c             	sub    esp,0xc
c0015ce9:	ba 4c a6 02 c0       	mov    edx,0xc002a64c
c0015cee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015cf2:	89 10                	mov    DWORD PTR [eax],edx
c0015cf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015cf8:	83 ec 0c             	sub    esp,0xc
c0015cfb:	50                   	push   eax
c0015cfc:	e8 eb de ff ff       	call   c0013bec <Device::~Device()>
c0015d01:	83 c4 10             	add    esp,0x10
c0015d04:	90                   	nop
c0015d05:	83 c4 0c             	add    esp,0xc
c0015d08:	c3                   	ret    
c0015d09:	90                   	nop

c0015d0a <Keyboard::~Keyboard()>:
c0015d0a:	83 ec 0c             	sub    esp,0xc
c0015d0d:	83 ec 0c             	sub    esp,0xc
c0015d10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d14:	e8 cd ff ff ff       	call   c0015ce6 <Keyboard::~Keyboard()>
c0015d19:	83 c4 10             	add    esp,0x10
c0015d1c:	83 ec 08             	sub    esp,0x8
c0015d1f:	68 5c 01 00 00       	push   0x15c
c0015d24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d28:	e8 e6 ca ff ff       	call   c0012813 <operator delete(void*, unsigned long)>
c0015d2d:	83 c4 10             	add    esp,0x10
c0015d30:	83 c4 0c             	add    esp,0xc
c0015d33:	c3                   	ret    

c0015d34 <LogicalDisk::close(int, int, void*)>:
c0015d34:	83 c8 ff             	or     eax,0xffffffff
c0015d37:	c3                   	ret    

c0015d38 <LogicalDisk::~LogicalDisk()>:
c0015d38:	83 ec 0c             	sub    esp,0xc
c0015d3b:	ba fc a6 02 c0       	mov    edx,0xc002a6fc
c0015d40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d44:	89 10                	mov    DWORD PTR [eax],edx
c0015d46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d4a:	83 ec 0c             	sub    esp,0xc
c0015d4d:	50                   	push   eax
c0015d4e:	e8 99 de ff ff       	call   c0013bec <Device::~Device()>
c0015d53:	83 c4 10             	add    esp,0x10
c0015d56:	90                   	nop
c0015d57:	83 c4 0c             	add    esp,0xc
c0015d5a:	c3                   	ret    
c0015d5b:	90                   	nop

c0015d5c <LogicalDisk::~LogicalDisk()>:
c0015d5c:	83 ec 0c             	sub    esp,0xc
c0015d5f:	83 ec 0c             	sub    esp,0xc
c0015d62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d66:	e8 cd ff ff ff       	call   c0015d38 <LogicalDisk::~LogicalDisk()>
c0015d6b:	83 c4 10             	add    esp,0x10
c0015d6e:	83 ec 08             	sub    esp,0x8
c0015d71:	68 74 01 00 00       	push   0x174
c0015d76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d7a:	e8 94 ca ff ff       	call   c0012813 <operator delete(void*, unsigned long)>
c0015d7f:	83 c4 10             	add    esp,0x10
c0015d82:	83 c4 0c             	add    esp,0xc
c0015d85:	c3                   	ret    

c0015d86 <LogicalDisk::open(int, int, void*)>:
c0015d86:	83 ec 18             	sub    esp,0x18
c0015d89:	68 78 a6 02 c0       	push   0xc002a678
c0015d8e:	e8 ba 3e 00 00       	call   c0019c4d <Krnl::panic(char const*)>
c0015d93:	83 c8 ff             	or     eax,0xffffffff
c0015d96:	83 c4 1c             	add    esp,0x1c
c0015d99:	c3                   	ret    

c0015d9a <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0015d9a:	53                   	push   ebx
c0015d9b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015d9f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015da3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015da7:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0015dad:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0015db3:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0015db9:	77 10                	ja     c0015dcb <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0015dbb:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0015dc1:	89 d3                	mov    ebx,edx
c0015dc3:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0015dc9:	72 05                	jb     c0015dd0 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0015dcb:	83 c8 ff             	or     eax,0xffffffff
c0015dce:	89 c2                	mov    edx,eax
c0015dd0:	5b                   	pop    ebx
c0015dd1:	c3                   	ret    

c0015dd2 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0015dd2:	56                   	push   esi
c0015dd3:	83 c8 ff             	or     eax,0xffffffff
c0015dd6:	53                   	push   ebx
c0015dd7:	89 c2                	mov    edx,eax
c0015dd9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015ddd:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0015de1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015de5:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015deb:	77 27                	ja     c0015e14 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015ded:	89 d8                	mov    eax,ebx
c0015def:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0015df5:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0015dfb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015e00:	89 c2                	mov    edx,eax
c0015e02:	73 10                	jae    c0015e14 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015e04:	89 c8                	mov    eax,ecx
c0015e06:	89 da                	mov    edx,ebx
c0015e08:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0015e0e:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0015e14:	5b                   	pop    ebx
c0015e15:	5e                   	pop    esi
c0015e16:	c3                   	ret    
c0015e17:	90                   	nop

c0015e18 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015e18:	83 ec 1c             	sub    esp,0x1c
c0015e1b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015e1f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015e23:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e27:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015e2b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015e2f:	89 04 24             	mov    DWORD PTR [esp],eax
c0015e32:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015e36:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015e3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e3e:	83 ec 08             	sub    esp,0x8
c0015e41:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015e45:	50                   	push   eax
c0015e46:	e8 bf e0 ff ff       	call   c0013f0a <Device::Device(char const*)>
c0015e4b:	83 c4 10             	add    esp,0x10
c0015e4e:	ba fc a6 02 c0       	mov    edx,0xc002a6fc
c0015e53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e57:	89 10                	mov    DWORD PTR [eax],edx
c0015e59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e5d:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015e64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e68:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015e6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e73:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0015e7d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015e81:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015e85:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015e89:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0015e8f:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0015e95:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015e99:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015e9c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015ea0:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0015ea6:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0015eac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015eb0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015eb4:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0015eba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ebe:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015ec8:	90                   	nop
c0015ec9:	83 c4 1c             	add    esp,0x1c
c0015ecc:	c3                   	ret    
c0015ecd:	90                   	nop

c0015ece <LogicalDisk::assignDriveLetter()>:
c0015ece:	55                   	push   ebp
c0015ecf:	57                   	push   edi
c0015ed0:	56                   	push   esi
c0015ed1:	53                   	push   ebx
c0015ed2:	83 ec 14             	sub    esp,0x14
c0015ed5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015ed9:	8b 3d 80 de 02 c0    	mov    edi,DWORD PTR ds:0xc002de80
c0015edf:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0015ee5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0015ee9:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0015eef:	8b 3d 84 de 02 c0    	mov    edi,DWORD PTR ds:0xc002de84
c0015ef5:	3c 01                	cmp    al,0x1
c0015ef7:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0015efb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0015eff:	19 c0                	sbb    eax,eax
c0015f01:	83 e0 02             	and    eax,0x2
c0015f04:	83 c0 41             	add    eax,0x41
c0015f07:	0f be e8             	movsx  ebp,al
c0015f0a:	3c 43                	cmp    al,0x43
c0015f0c:	75 10                	jne    c0015f1e <LogicalDisk::assignDriveLetter()+0x50>
c0015f0e:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0015f15:	75 5d                	jne    c0015f74 <LogicalDisk::assignDriveLetter()+0xa6>
c0015f17:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015f1c:	75 56                	jne    c0015f74 <LogicalDisk::assignDriveLetter()+0xa6>
c0015f1e:	8d 75 bf             	lea    esi,[ebp-0x41]
c0015f21:	ba 01 00 00 00       	mov    edx,0x1
c0015f26:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0015f2a:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0015f2e:	d3 e2                	shl    edx,cl
c0015f30:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015f34:	89 d7                	mov    edi,edx
c0015f36:	89 d6                	mov    esi,edx
c0015f38:	c1 ff 1f             	sar    edi,0x1f
c0015f3b:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0015f3f:	21 f9                	and    ecx,edi
c0015f41:	09 d1                	or     ecx,edx
c0015f43:	75 2f                	jne    c0015f74 <LogicalDisk::assignDriveLetter()+0xa6>
c0015f45:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0015f49:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015f4d:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0015f53:	09 f2                	or     edx,esi
c0015f55:	89 15 80 de 02 c0    	mov    DWORD PTR ds:0xc002de80,edx
c0015f5b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015f5f:	09 fa                	or     edx,edi
c0015f61:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0015f65:	89 15 84 de 02 c0    	mov    DWORD PTR ds:0xc002de84,edx
c0015f6b:	89 1c bd a0 de 02 c0 	mov    DWORD PTR [edi*4-0x3ffd2160],ebx
c0015f72:	eb 08                	jmp    c0015f7c <LogicalDisk::assignDriveLetter()+0xae>
c0015f74:	45                   	inc    ebp
c0015f75:	40                   	inc    eax
c0015f76:	3c 5b                	cmp    al,0x5b
c0015f78:	75 90                	jne    c0015f0a <LogicalDisk::assignDriveLetter()+0x3c>
c0015f7a:	31 c0                	xor    eax,eax
c0015f7c:	83 c4 14             	add    esp,0x14
c0015f7f:	5b                   	pop    ebx
c0015f80:	5e                   	pop    esi
c0015f81:	5f                   	pop    edi
c0015f82:	5d                   	pop    ebp
c0015f83:	c3                   	ret    

c0015f84 <LogicalDisk::mount()>:
c0015f84:	56                   	push   esi
c0015f85:	53                   	push   ebx
c0015f86:	51                   	push   ecx
c0015f87:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015f8b:	8b 1d 08 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da08
c0015f91:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0015f9b:	85 db                	test   ebx,ebx
c0015f9d:	74 50                	je     c0015fef <LogicalDisk::mount()+0x6b>
c0015f9f:	e8 cb 72 00 00       	call   c001d26f <getIRQNestingLevel()>
c0015fa4:	52                   	push   edx
c0015fa5:	52                   	push   edx
c0015fa6:	50                   	push   eax
c0015fa7:	68 9c a6 02 c0       	push   0xc002a69c
c0015fac:	e8 42 c9 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0015fb1:	83 c4 0c             	add    esp,0xc
c0015fb4:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0015fbb:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015fbd:	83 e8 41             	sub    eax,0x41
c0015fc0:	50                   	push   eax
c0015fc1:	56                   	push   esi
c0015fc2:	53                   	push   ebx
c0015fc3:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015fc6:	83 c4 10             	add    esp,0x10
c0015fc9:	84 c0                	test   al,al
c0015fcb:	74 08                	je     c0015fd5 <LogicalDisk::mount()+0x51>
c0015fcd:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0015fd3:	eb 1c                	jmp    c0015ff1 <LogicalDisk::mount()+0x6d>
c0015fd5:	e8 95 72 00 00       	call   c001d26f <getIRQNestingLevel()>
c0015fda:	51                   	push   ecx
c0015fdb:	51                   	push   ecx
c0015fdc:	50                   	push   eax
c0015fdd:	68 b7 a6 02 c0       	push   0xc002a6b7
c0015fe2:	e8 0c c9 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0015fe7:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0015fea:	83 c4 10             	add    esp,0x10
c0015fed:	eb ac                	jmp    c0015f9b <LogicalDisk::mount()+0x17>
c0015fef:	31 c0                	xor    eax,eax
c0015ff1:	5a                   	pop    edx
c0015ff2:	5b                   	pop    ebx
c0015ff3:	5e                   	pop    esi
c0015ff4:	c3                   	ret    
c0015ff5:	90                   	nop

c0015ff6 <LogicalDisk::unmount()>:
c0015ff6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015ffa:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0016004:	c3                   	ret    
c0016005:	90                   	nop

c0016006 <LogicalDisk::eject()>:
c0016006:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001600a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016010:	8b 10                	mov    edx,DWORD PTR [eax]
c0016012:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016016:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c0016019:	90                   	nop

c001601a <LogicalDisk::unassignDriveLetter()>:
c001601a:	57                   	push   edi
c001601b:	56                   	push   esi
c001601c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016020:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0016027:	84 c9                	test   cl,cl
c0016029:	75 0f                	jne    c001603a <LogicalDisk::unassignDriveLetter()+0x20>
c001602b:	c7 44 24 0c d2 a6 02 c0 	mov    DWORD PTR [esp+0xc],0xc002a6d2
c0016033:	5e                   	pop    esi
c0016034:	5f                   	pop    edi
c0016035:	e9 13 3c 00 00       	jmp    c0019c4d <Krnl::panic(char const*)>
c001603a:	83 e9 41             	sub    ecx,0x41
c001603d:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0016044:	b8 01 00 00 00       	mov    eax,0x1
c0016049:	c7 04 8d a0 de 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd2160],0x0
c0016054:	d3 e0                	shl    eax,cl
c0016056:	89 c7                	mov    edi,eax
c0016058:	f7 d0                	not    eax
c001605a:	c1 ff 1f             	sar    edi,0x1f
c001605d:	21 05 80 de 02 c0    	and    DWORD PTR ds:0xc002de80,eax
c0016063:	89 fe                	mov    esi,edi
c0016065:	f7 d6                	not    esi
c0016067:	21 35 84 de 02 c0    	and    DWORD PTR ds:0xc002de84,esi
c001606d:	5e                   	pop    esi
c001606e:	5f                   	pop    edi
c001606f:	c3                   	ret    

c0016070 <LogicalDisk::read(unsigned long long, int, void*)>:
c0016070:	57                   	push   edi
c0016071:	56                   	push   esi
c0016072:	53                   	push   ebx
c0016073:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016077:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001607b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001607f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016083:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016089:	77 41                	ja     c00160cc <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c001608b:	99                   	cdq    
c001608c:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016092:	01 c8                	add    eax,ecx
c0016094:	11 da                	adc    edx,ebx
c0016096:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001609c:	19 d7                	sbb    edi,edx
c001609e:	72 33                	jb     c00160d3 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c00160a0:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00160a6:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00160ac:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00160b0:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00160b4:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00160ba:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00160c0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00160c4:	5b                   	pop    ebx
c00160c5:	5e                   	pop    esi
c00160c6:	5f                   	pop    edi
c00160c7:	e9 0c 0a 00 00       	jmp    c0016ad8 <VCache::read(unsigned long long, int, void*)>
c00160cc:	b8 05 00 00 00       	mov    eax,0x5
c00160d1:	eb 05                	jmp    c00160d8 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c00160d3:	b8 07 00 00 00       	mov    eax,0x7
c00160d8:	5b                   	pop    ebx
c00160d9:	5e                   	pop    esi
c00160da:	5f                   	pop    edi
c00160db:	c3                   	ret    

c00160dc <LogicalDisk::write(unsigned long long, int, void*)>:
c00160dc:	57                   	push   edi
c00160dd:	56                   	push   esi
c00160de:	53                   	push   ebx
c00160df:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00160e3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00160e7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00160eb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00160ef:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00160f5:	77 41                	ja     c0016138 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c00160f7:	99                   	cdq    
c00160f8:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00160fe:	01 c8                	add    eax,ecx
c0016100:	11 da                	adc    edx,ebx
c0016102:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016108:	19 d7                	sbb    edi,edx
c001610a:	72 33                	jb     c001613f <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c001610c:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016112:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016118:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001611c:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016120:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016126:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001612c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016130:	5b                   	pop    ebx
c0016131:	5e                   	pop    esi
c0016132:	5f                   	pop    edi
c0016133:	e9 bc 08 00 00       	jmp    c00169f4 <VCache::write(unsigned long long, int, void*)>
c0016138:	b8 05 00 00 00       	mov    eax,0x5
c001613d:	eb 05                	jmp    c0016144 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c001613f:	b8 07 00 00 00       	mov    eax,0x7
c0016144:	5b                   	pop    ebx
c0016145:	5e                   	pop    esi
c0016146:	5f                   	pop    edi
c0016147:	c3                   	ret    

c0016148 <Mouse::Mouse(char const*)>:
c0016148:	83 ec 0c             	sub    esp,0xc
c001614b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001614f:	83 ec 08             	sub    esp,0x8
c0016152:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016156:	50                   	push   eax
c0016157:	e8 ae dd ff ff       	call   c0013f0a <Device::Device(char const*)>
c001615c:	83 c4 10             	add    esp,0x10
c001615f:	ba 28 a7 02 c0       	mov    edx,0xc002a728
c0016164:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016168:	89 10                	mov    DWORD PTR [eax],edx
c001616a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001616e:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0016178:	90                   	nop
c0016179:	83 c4 0c             	add    esp,0xc
c001617c:	c3                   	ret    
c001617d:	90                   	nop

c001617e <Mouse::~Mouse()>:
c001617e:	83 ec 0c             	sub    esp,0xc
c0016181:	ba 28 a7 02 c0       	mov    edx,0xc002a728
c0016186:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001618a:	89 10                	mov    DWORD PTR [eax],edx
c001618c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016190:	83 ec 0c             	sub    esp,0xc
c0016193:	50                   	push   eax
c0016194:	e8 53 da ff ff       	call   c0013bec <Device::~Device()>
c0016199:	83 c4 10             	add    esp,0x10
c001619c:	90                   	nop
c001619d:	83 c4 0c             	add    esp,0xc
c00161a0:	c3                   	ret    
c00161a1:	90                   	nop

c00161a2 <Mouse::~Mouse()>:
c00161a2:	83 ec 0c             	sub    esp,0xc
c00161a5:	83 ec 0c             	sub    esp,0xc
c00161a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00161ac:	e8 cd ff ff ff       	call   c001617e <Mouse::~Mouse()>
c00161b1:	83 c4 10             	add    esp,0x10
c00161b4:	83 ec 08             	sub    esp,0x8
c00161b7:	68 58 01 00 00       	push   0x158
c00161bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00161c0:	e8 4e c6 ff ff       	call   c0012813 <operator delete(void*, unsigned long)>
c00161c5:	83 c4 10             	add    esp,0x10
c00161c8:	83 c4 0c             	add    esp,0xc
c00161cb:	c3                   	ret    

c00161cc <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00161cc:	55                   	push   ebp
c00161cd:	57                   	push   edi
c00161ce:	56                   	push   esi
c00161cf:	53                   	push   ebx
c00161d0:	81 ec 28 01 00 00    	sub    esp,0x128
c00161d6:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00161dd:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00161e4:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00161eb:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c00161f2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00161f6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00161fa:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016201:	e8 00 de ff ff       	call   c0014006 <Device::getName()>
c0016206:	5a                   	pop    edx
c0016207:	59                   	pop    ecx
c0016208:	50                   	push   eax
c0016209:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c001620d:	55                   	push   ebp
c001620e:	e8 50 a5 fe ff       	call   c0000763 <strcpy>
c0016213:	5b                   	pop    ebx
c0016214:	58                   	pop    eax
c0016215:	68 4c a7 02 c0       	push   0xc002a74c
c001621a:	55                   	push   ebp
c001621b:	e8 fa a5 fe ff       	call   c000081a <strcat>
c0016220:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0016227:	e8 f8 93 ff ff       	call   c000f624 <malloc>
c001622c:	83 c4 0c             	add    esp,0xc
c001622f:	89 c3                	mov    ebx,eax
c0016231:	57                   	push   edi
c0016232:	56                   	push   esi
c0016233:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016237:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001623b:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0016242:	55                   	push   ebp
c0016243:	50                   	push   eax
c0016244:	e8 cf fb ff ff       	call   c0015e18 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0016249:	83 c4 14             	add    esp,0x14
c001624c:	53                   	push   ebx
c001624d:	e8 7c fc ff ff       	call   c0015ece <LogicalDisk::assignDriveLetter()>
c0016252:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016255:	89 c6                	mov    esi,eax
c0016257:	e8 28 fd ff ff       	call   c0015f84 <LogicalDisk::mount()>
c001625c:	58                   	pop    eax
c001625d:	5a                   	pop    edx
c001625e:	53                   	push   ebx
c001625f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016266:	e8 af da ff ff       	call   c0013d1a <Device::addChild(Device*)>
c001626b:	59                   	pop    ecx
c001626c:	89 f0                	mov    eax,esi
c001626e:	5b                   	pop    ebx
c001626f:	0f be f0             	movsx  esi,al
c0016272:	56                   	push   esi
c0016273:	68 57 a7 02 c0       	push   0xc002a757
c0016278:	e8 76 c6 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001627d:	81 c4 2c 01 00 00    	add    esp,0x12c
c0016283:	5b                   	pop    ebx
c0016284:	5e                   	pop    esi
c0016285:	5f                   	pop    edi
c0016286:	5d                   	pop    ebp
c0016287:	c3                   	ret    

c0016288 <createPartitionsForDisk(PhysicalDisk*)>:
c0016288:	55                   	push   ebp
c0016289:	57                   	push   edi
c001628a:	56                   	push   esi
c001628b:	53                   	push   ebx
c001628c:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0016292:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0016299:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001629f:	3d 00 02 00 00       	cmp    eax,0x200
c00162a4:	74 27                	je     c00162cd <createPartitionsForDisk(PhysicalDisk*)+0x45>
c00162a6:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c00162ac:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c00162b2:	83 ec 10             	sub    esp,0x10
c00162b5:	0f a4 f7 0a          	shld   edi,esi,0xa
c00162b9:	99                   	cdq    
c00162ba:	c1 e6 0a             	shl    esi,0xa
c00162bd:	52                   	push   edx
c00162be:	89 fd                	mov    ebp,edi
c00162c0:	50                   	push   eax
c00162c1:	55                   	push   ebp
c00162c2:	56                   	push   esi
c00162c3:	e8 84 fc 00 00       	call   c0025f4c <__udivdi3>
c00162c8:	e9 b1 00 00 00       	jmp    c001637e <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00162cd:	83 ec 0c             	sub    esp,0xc
c00162d0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00162d2:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c00162d6:	56                   	push   esi
c00162d7:	6a 01                	push   0x1
c00162d9:	6a 00                	push   0x0
c00162db:	6a 00                	push   0x0
c00162dd:	53                   	push   ebx
c00162de:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00162e1:	83 c4 20             	add    esp,0x20
c00162e4:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c00162ec:	75 0a                	jne    c00162f8 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c00162ee:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c00162f6:	74 2c                	je     c0016324 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c00162f8:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00162fe:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016304:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001630a:	83 ec 10             	sub    esp,0x10
c001630d:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016311:	89 f7                	mov    edi,esi
c0016313:	c1 e0 0a             	shl    eax,0xa
c0016316:	c1 ff 1f             	sar    edi,0x1f
c0016319:	57                   	push   edi
c001631a:	56                   	push   esi
c001631b:	52                   	push   edx
c001631c:	50                   	push   eax
c001631d:	e8 2a fc 00 00       	call   c0025f4c <__udivdi3>
c0016322:	eb 5a                	jmp    c001637e <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016324:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c001632b:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0016332:	83 e1 7f             	and    ecx,0x7f
c0016335:	83 e0 7f             	and    eax,0x7f
c0016338:	01 c1                	add    ecx,eax
c001633a:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0016341:	83 e0 7f             	and    eax,0x7f
c0016344:	01 c1                	add    ecx,eax
c0016346:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c001634d:	83 e0 7f             	and    eax,0x7f
c0016350:	00 c1                	add    cl,al
c0016352:	74 41                	je     c0016395 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0016354:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001635a:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016360:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016366:	83 ec 10             	sub    esp,0x10
c0016369:	0f a4 c2 0a          	shld   edx,eax,0xa
c001636d:	89 f7                	mov    edi,esi
c001636f:	c1 e0 0a             	shl    eax,0xa
c0016372:	c1 ff 1f             	sar    edi,0x1f
c0016375:	57                   	push   edi
c0016376:	56                   	push   esi
c0016377:	52                   	push   edx
c0016378:	50                   	push   eax
c0016379:	e8 ce fb 00 00       	call   c0025f4c <__udivdi3>
c001637e:	83 c4 14             	add    esp,0x14
c0016381:	52                   	push   edx
c0016382:	50                   	push   eax
c0016383:	6a 00                	push   0x0
c0016385:	6a 00                	push   0x0
c0016387:	53                   	push   ebx
c0016388:	e8 3f fe ff ff       	call   c00161cc <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001638d:	83 c4 20             	add    esp,0x20
c0016390:	e9 79 01 00 00       	jmp    c001650e <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0016395:	89 f0                	mov    eax,esi
c0016397:	31 f6                	xor    esi,esi
c0016399:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c00163a0:	75 02                	jne    c00163a4 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c00163a2:	89 f1                	mov    ecx,esi
c00163a4:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c00163ab:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c00163b2:	c1 e2 08             	shl    edx,0x8
c00163b5:	c1 e7 10             	shl    edi,0x10
c00163b8:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c00163c0:	09 fa                	or     edx,edi
c00163c2:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c00163ca:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c00163d1:	83 c0 10             	add    eax,0x10
c00163d4:	09 fa                	or     edx,edi
c00163d6:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c00163dd:	c1 e7 18             	shl    edi,0x18
c00163e0:	09 fa                	or     edx,edi
c00163e2:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c00163e9:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c00163ed:	c1 e7 10             	shl    edi,0x10
c00163f0:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c00163f7:	c1 e2 08             	shl    edx,0x8
c00163fa:	09 fa                	or     edx,edi
c00163fc:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016403:	09 fa                	or     edx,edi
c0016405:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c001640c:	c1 e7 18             	shl    edi,0x18
c001640f:	09 fa                	or     edx,edi
c0016411:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016415:	46                   	inc    esi
c0016416:	83 fe 04             	cmp    esi,0x4
c0016419:	0f 85 7a ff ff ff    	jne    c0016399 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c001641f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016423:	83 f0 01             	xor    eax,0x1
c0016426:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001642a:	75 57                	jne    c0016483 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001642c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016430:	83 f0 01             	xor    eax,0x1
c0016433:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016437:	75 4a                	jne    c0016483 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016439:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001643d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016445:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001644d:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016453:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016459:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001645f:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016463:	89 f7                	mov    edi,esi
c0016465:	c1 e0 0a             	shl    eax,0xa
c0016468:	c1 ff 1f             	sar    edi,0x1f
c001646b:	57                   	push   edi
c001646c:	56                   	push   esi
c001646d:	52                   	push   edx
c001646e:	50                   	push   eax
c001646f:	e8 d8 fa 00 00       	call   c0025f4c <__udivdi3>
c0016474:	83 c4 10             	add    esp,0x10
c0016477:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001647b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001647f:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016483:	84 c9                	test   cl,cl
c0016485:	74 53                	je     c00164da <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016487:	0f b6 c9             	movzx  ecx,cl
c001648a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001648e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016492:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016496:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001649a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001649e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00164a2:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c00164a6:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c00164aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00164ae:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00164b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00164b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00164ba:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c00164be:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c00164c2:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c00164c6:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c00164ca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00164ce:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00164d2:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c00164d6:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c00164da:	31 ed                	xor    ebp,ebp
c00164dc:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c00164e0:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c00164e4:	89 f8                	mov    eax,edi
c00164e6:	09 f0                	or     eax,esi
c00164e8:	74 1e                	je     c0016508 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00164ea:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c00164ee:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c00164f2:	89 d1                	mov    ecx,edx
c00164f4:	09 c1                	or     ecx,eax
c00164f6:	74 10                	je     c0016508 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00164f8:	83 ec 0c             	sub    esp,0xc
c00164fb:	57                   	push   edi
c00164fc:	56                   	push   esi
c00164fd:	52                   	push   edx
c00164fe:	50                   	push   eax
c00164ff:	53                   	push   ebx
c0016500:	e8 c7 fc ff ff       	call   c00161cc <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016505:	83 c4 20             	add    esp,0x20
c0016508:	45                   	inc    ebp
c0016509:	83 fd 04             	cmp    ebp,0x4
c001650c:	75 ce                	jne    c00164dc <createPartitionsForDisk(PhysicalDisk*)+0x254>
c001650e:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016514:	5b                   	pop    ebx
c0016515:	5e                   	pop    esi
c0016516:	5f                   	pop    edi
c0016517:	5d                   	pop    ebp
c0016518:	c3                   	ret    
c0016519:	90                   	nop

c001651a <Serial::Serial(char const*)>:
c001651a:	83 ec 0c             	sub    esp,0xc
c001651d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016521:	83 ec 08             	sub    esp,0x8
c0016524:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016528:	50                   	push   eax
c0016529:	e8 dc d9 ff ff       	call   c0013f0a <Device::Device(char const*)>
c001652e:	83 c4 10             	add    esp,0x10
c0016531:	ba 84 a7 02 c0       	mov    edx,0xc002a784
c0016536:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001653a:	89 10                	mov    DWORD PTR [eax],edx
c001653c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016540:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c001654a:	90                   	nop
c001654b:	83 c4 0c             	add    esp,0xc
c001654e:	c3                   	ret    
c001654f:	90                   	nop

c0016550 <Serial::~Serial()>:
c0016550:	83 ec 0c             	sub    esp,0xc
c0016553:	ba 84 a7 02 c0       	mov    edx,0xc002a784
c0016558:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001655c:	89 10                	mov    DWORD PTR [eax],edx
c001655e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016562:	83 ec 0c             	sub    esp,0xc
c0016565:	50                   	push   eax
c0016566:	e8 81 d6 ff ff       	call   c0013bec <Device::~Device()>
c001656b:	83 c4 10             	add    esp,0x10
c001656e:	90                   	nop
c001656f:	83 c4 0c             	add    esp,0xc
c0016572:	c3                   	ret    
c0016573:	90                   	nop

c0016574 <Serial::~Serial()>:
c0016574:	83 ec 0c             	sub    esp,0xc
c0016577:	83 ec 0c             	sub    esp,0xc
c001657a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001657e:	e8 cd ff ff ff       	call   c0016550 <Serial::~Serial()>
c0016583:	83 c4 10             	add    esp,0x10
c0016586:	83 ec 08             	sub    esp,0x8
c0016589:	68 58 01 00 00       	push   0x158
c001658e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016592:	e8 7c c2 ff ff       	call   c0012813 <operator delete(void*, unsigned long)>
c0016597:	83 c4 10             	add    esp,0x10
c001659a:	83 c4 0c             	add    esp,0xc
c001659d:	c3                   	ret    

c001659e <Timer::Timer(char const*)>:
c001659e:	83 ec 0c             	sub    esp,0xc
c00165a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165a5:	83 ec 08             	sub    esp,0x8
c00165a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00165ac:	50                   	push   eax
c00165ad:	e8 58 d9 ff ff       	call   c0013f0a <Device::Device(char const*)>
c00165b2:	83 c4 10             	add    esp,0x10
c00165b5:	ba c8 a7 02 c0       	mov    edx,0xc002a7c8
c00165ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165be:	89 10                	mov    DWORD PTR [eax],edx
c00165c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165c4:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c00165ce:	90                   	nop
c00165cf:	83 c4 0c             	add    esp,0xc
c00165d2:	c3                   	ret    
c00165d3:	90                   	nop

c00165d4 <Timer::~Timer()>:
c00165d4:	83 ec 0c             	sub    esp,0xc
c00165d7:	ba c8 a7 02 c0       	mov    edx,0xc002a7c8
c00165dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165e0:	89 10                	mov    DWORD PTR [eax],edx
c00165e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165e6:	83 ec 0c             	sub    esp,0xc
c00165e9:	50                   	push   eax
c00165ea:	e8 fd d5 ff ff       	call   c0013bec <Device::~Device()>
c00165ef:	83 c4 10             	add    esp,0x10
c00165f2:	90                   	nop
c00165f3:	83 c4 0c             	add    esp,0xc
c00165f6:	c3                   	ret    
c00165f7:	90                   	nop

c00165f8 <Timer::~Timer()>:
c00165f8:	83 ec 0c             	sub    esp,0xc
c00165fb:	83 ec 0c             	sub    esp,0xc
c00165fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016602:	e8 cd ff ff ff       	call   c00165d4 <Timer::~Timer()>
c0016607:	83 c4 10             	add    esp,0x10
c001660a:	83 ec 08             	sub    esp,0x8
c001660d:	68 5c 01 00 00       	push   0x15c
c0016612:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016616:	e8 f8 c1 ff ff       	call   c0012813 <operator delete(void*, unsigned long)>
c001661b:	83 c4 10             	add    esp,0x10
c001661e:	83 c4 0c             	add    esp,0xc
c0016621:	c3                   	ret    

c0016622 <Timer::read()>:
c0016622:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016626:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001662c:	c3                   	ret    

c001662d <timerHandler(unsigned long long)>:
c001662d:	55                   	push   ebp
c001662e:	57                   	push   edi
c001662f:	56                   	push   esi
c0016630:	53                   	push   ebx
c0016631:	83 ec 0c             	sub    esp,0xc
c0016634:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016638:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001663c:	01 35 10 df 02 c0    	add    DWORD PTR ds:0xc002df10,esi
c0016642:	11 3d 14 df 02 c0    	adc    DWORD PTR ds:0xc002df14,edi
c0016648:	80 3d 8d d8 02 c0 00 	cmp    BYTE PTR ds:0xc002d88d,0x0
c001664f:	0f 84 07 01 00 00    	je     c001675c <timerHandler(unsigned long long)+0x12f>
c0016655:	e8 51 6c 00 00       	call   c001d2ab <lockStuff()>
c001665a:	83 ec 0c             	sub    esp,0xc
c001665d:	68 bc ed 02 c0       	push   0xc002edbc
c0016662:	e8 57 19 01 00       	call   c0027fbe <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016667:	c7 04 24 bc ed 02 c0 	mov    DWORD PTR [esp],0xc002edbc
c001666e:	89 c3                	mov    ebx,eax
c0016670:	e8 51 19 01 00       	call   c0027fc6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016675:	83 c4 10             	add    esp,0x10
c0016678:	84 c0                	test   al,al
c001667a:	74 60                	je     c00166dc <timerHandler(unsigned long long)+0xaf>
c001667c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016682:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0016685:	85 c0                	test   eax,eax
c0016687:	0f 85 91 00 00 00    	jne    c001671e <timerHandler(unsigned long long)+0xf1>
c001668d:	e9 be 00 00 00       	jmp    c0016750 <timerHandler(unsigned long long)+0x123>
c0016692:	83 ec 0c             	sub    esp,0xc
c0016695:	55                   	push   ebp
c0016696:	e8 01 72 00 00       	call   c001d89c <unblockTask(ThreadControlBlock*)>
c001669b:	83 c4 10             	add    esp,0x10
c001669e:	39 eb                	cmp    ebx,ebp
c00166a0:	75 12                	jne    c00166b4 <timerHandler(unsigned long long)+0x87>
c00166a2:	83 ec 0c             	sub    esp,0xc
c00166a5:	68 bc ed 02 c0       	push   0xc002edbc
c00166aa:	e8 0f 19 01 00       	call   c0027fbe <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00166af:	89 c3                	mov    ebx,eax
c00166b1:	83 c4 10             	add    esp,0x10
c00166b4:	83 ec 0c             	sub    esp,0xc
c00166b7:	68 bc ed 02 c0       	push   0xc002edbc
c00166bc:	e8 05 19 01 00       	call   c0027fc6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00166c1:	83 c4 10             	add    esp,0x10
c00166c4:	84 c0                	test   al,al
c00166c6:	75 b4                	jne    c001667c <timerHandler(unsigned long long)+0x4f>
c00166c8:	83 ec 0c             	sub    esp,0xc
c00166cb:	68 bc ed 02 c0       	push   0xc002edbc
c00166d0:	e8 e9 18 01 00       	call   c0027fbe <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00166d5:	83 c4 10             	add    esp,0x10
c00166d8:	39 d8                	cmp    eax,ebx
c00166da:	74 a0                	je     c001667c <timerHandler(unsigned long long)+0x4f>
c00166dc:	83 ec 0c             	sub    esp,0xc
c00166df:	68 bc ed 02 c0       	push   0xc002edbc
c00166e4:	e8 d5 18 01 00       	call   c0027fbe <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00166e9:	c7 04 24 bc ed 02 c0 	mov    DWORD PTR [esp],0xc002edbc
c00166f0:	89 c5                	mov    ebp,eax
c00166f2:	e8 eb 18 01 00       	call   c0027fe2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00166f7:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c00166fa:	83 c4 10             	add    esp,0x10
c00166fd:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016700:	39 15 10 df 02 c0    	cmp    DWORD PTR ds:0xc002df10,edx
c0016706:	a1 14 df 02 c0       	mov    eax,ds:0xc002df14
c001670b:	19 c8                	sbb    eax,ecx
c001670d:	73 83                	jae    c0016692 <timerHandler(unsigned long long)+0x65>
c001670f:	50                   	push   eax
c0016710:	50                   	push   eax
c0016711:	55                   	push   ebp
c0016712:	68 bc ed 02 c0       	push   0xc002edbc
c0016717:	e8 74 19 01 00       	call   c0028090 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001671c:	eb 93                	jmp    c00166b1 <timerHandler(unsigned long long)+0x84>
c001671e:	80 3d 8c d8 02 c0 00 	cmp    BYTE PTR ds:0xc002d88c,0x0
c0016725:	74 29                	je     c0016750 <timerHandler(unsigned long long)+0x123>
c0016727:	39 c6                	cmp    esi,eax
c0016729:	bb 00 00 00 00       	mov    ebx,0x0
c001672e:	19 df                	sbb    edi,ebx
c0016730:	72 19                	jb     c001674b <timerHandler(unsigned long long)+0x11e>
c0016732:	e8 4d 6b 00 00       	call   c001d284 <lockScheduler()>
c0016737:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001673c:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c001673f:	e8 7c 6e 00 00       	call   c001d5c0 <schedule()>
c0016744:	e8 3d 6b 00 00       	call   c001d286 <unlockScheduler()>
c0016749:	eb 05                	jmp    c0016750 <timerHandler(unsigned long long)+0x123>
c001674b:	29 f0                	sub    eax,esi
c001674d:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0016750:	83 c4 0c             	add    esp,0xc
c0016753:	5b                   	pop    ebx
c0016754:	5e                   	pop    esi
c0016755:	5f                   	pop    edi
c0016756:	5d                   	pop    ebp
c0016757:	e9 e9 6e 00 00       	jmp    c001d645 <unlockStuff()>
c001675c:	83 c4 0c             	add    esp,0xc
c001675f:	5b                   	pop    ebx
c0016760:	5e                   	pop    esi
c0016761:	5f                   	pop    edi
c0016762:	5d                   	pop    ebp
c0016763:	c3                   	ret    

c0016764 <setupTimer(int)>:
c0016764:	57                   	push   edi
c0016765:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c001676a:	56                   	push   esi
c001676b:	53                   	push   ebx
c001676c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016770:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016776:	83 ec 0c             	sub    esp,0xc
c0016779:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c001677f:	e8 82 d8 ff ff       	call   c0014006 <Device::getName()>
c0016784:	83 c4 10             	add    esp,0x10
c0016787:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001678a:	0f 85 8d 00 00 00    	jne    c001681d <setupTimer(int)+0xb9>
c0016790:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c0016795:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c001679c:	74 7f                	je     c001681d <setupTimer(int)+0xb9>
c001679e:	83 ec 0c             	sub    esp,0xc
c00167a1:	68 5c 01 00 00       	push   0x15c
c00167a6:	e8 79 8e ff ff       	call   c000f624 <malloc>
c00167ab:	89 04 24             	mov    DWORD PTR [esp],eax
c00167ae:	89 c3                	mov    ebx,eax
c00167b0:	e8 6d f3 00 00       	call   c0025b22 <PIT::PIT()>
c00167b5:	59                   	pop    ecx
c00167b6:	5f                   	pop    edi
c00167b7:	53                   	push   ebx
c00167b8:	ff 35 88 d8 02 c0    	push   DWORD PTR ds:0xc002d888
c00167be:	e8 57 d5 ff ff       	call   c0013d1a <Device::addChild(Device*)>
c00167c3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00167c5:	6a 00                	push   0x0
c00167c7:	6a 00                	push   0x0
c00167c9:	56                   	push   esi
c00167ca:	53                   	push   ebx
c00167cb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00167ce:	83 c4 14             	add    esp,0x14
c00167d1:	68 60 01 00 00       	push   0x160
c00167d6:	e8 49 8e ff ff       	call   c000f624 <malloc>
c00167db:	89 04 24             	mov    DWORD PTR [esp],eax
c00167de:	89 c7                	mov    edi,eax
c00167e0:	e8 ed f1 00 00       	call   c00259d2 <APICTimer::APICTimer()>
c00167e5:	6a 00                	push   0x0
c00167e7:	6a 00                	push   0x0
c00167e9:	56                   	push   esi
c00167ea:	57                   	push   edi
c00167eb:	e8 e4 f0 00 00       	call   c00258d4 <APICTimer::open(int, int, void*)>
c00167f0:	83 c4 20             	add    esp,0x20
c00167f3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00167f5:	6a 00                	push   0x0
c00167f7:	6a 00                	push   0x0
c00167f9:	6a 00                	push   0x0
c00167fb:	53                   	push   ebx
c00167fc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00167ff:	58                   	pop    eax
c0016800:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c0016805:	5a                   	pop    edx
c0016806:	57                   	push   edi
c0016807:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001680d:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016813:	e8 02 d5 ff ff       	call   c0013d1a <Device::addChild(Device*)>
c0016818:	83 c4 10             	add    esp,0x10
c001681b:	eb 33                	jmp    c0016850 <setupTimer(int)+0xec>
c001681d:	83 ec 0c             	sub    esp,0xc
c0016820:	68 5c 01 00 00       	push   0x15c
c0016825:	e8 fa 8d ff ff       	call   c000f624 <malloc>
c001682a:	89 04 24             	mov    DWORD PTR [esp],eax
c001682d:	89 c3                	mov    ebx,eax
c001682f:	e8 ee f2 00 00       	call   c0025b22 <PIT::PIT()>
c0016834:	58                   	pop    eax
c0016835:	5a                   	pop    edx
c0016836:	53                   	push   ebx
c0016837:	ff 35 88 d8 02 c0    	push   DWORD PTR ds:0xc002d888
c001683d:	e8 d8 d4 ff ff       	call   c0013d1a <Device::addChild(Device*)>
c0016842:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016844:	6a 00                	push   0x0
c0016846:	6a 00                	push   0x0
c0016848:	56                   	push   esi
c0016849:	53                   	push   ebx
c001684a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001684d:	83 c4 20             	add    esp,0x20
c0016850:	89 d8                	mov    eax,ebx
c0016852:	5b                   	pop    ebx
c0016853:	5e                   	pop    esi
c0016854:	5f                   	pop    edi
c0016855:	c3                   	ret    

c0016856 <VCache::VCache(PhysicalDisk*)>:
c0016856:	53                   	push   ebx
c0016857:	83 ec 18             	sub    esp,0x18
c001685a:	ba f8 a7 02 c0       	mov    edx,0xc002a7f8
c001685f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016863:	89 10                	mov    DWORD PTR [eax],edx
c0016865:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016869:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016870:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016874:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c001687b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001687f:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016886:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001688d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016891:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016898:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001689f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168a3:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00168aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168ae:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00168b2:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c00168ba:	83 ec 0c             	sub    esp,0xc
c00168bd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00168c1:	e8 5e 8d ff ff       	call   c000f624 <malloc>
c00168c6:	83 c4 10             	add    esp,0x10
c00168c9:	89 c3                	mov    ebx,eax
c00168cb:	83 ec 0c             	sub    esp,0xc
c00168ce:	53                   	push   ebx
c00168cf:	e8 d0 6a 00 00       	call   c001d3a4 <Mutex::Mutex()>
c00168d4:	83 c4 10             	add    esp,0x10
c00168d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168db:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00168de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168e2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00168e6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00168e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168ed:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c00168f4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00168f8:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00168fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016902:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0016905:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016909:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c001690f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016915:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016919:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c001691c:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c001691f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016923:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016927:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001692b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016931:	c1 e0 06             	shl    eax,0x6
c0016934:	83 ec 0c             	sub    esp,0xc
c0016937:	50                   	push   eax
c0016938:	e8 e7 8c ff ff       	call   c000f624 <malloc>
c001693d:	83 c4 10             	add    esp,0x10
c0016940:	89 c2                	mov    edx,eax
c0016942:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016946:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0016949:	90                   	nop
c001694a:	83 c4 18             	add    esp,0x18
c001694d:	5b                   	pop    ebx
c001694e:	c3                   	ret    
c001694f:	90                   	nop

c0016950 <VCache::writeWriteBuffer()>:
c0016950:	53                   	push   ebx
c0016951:	83 ec 14             	sub    esp,0x14
c0016954:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0016958:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001695b:	8b 10                	mov    edx,DWORD PTR [eax]
c001695d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016960:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016963:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0016966:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0016969:	50                   	push   eax
c001696a:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c001696d:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0016974:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c001697b:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c001697f:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0016986:	83 c4 28             	add    esp,0x28
c0016989:	5b                   	pop    ebx
c001698a:	c3                   	ret    
c001698b:	90                   	nop

c001698c <VCache::~VCache()>:
c001698c:	83 ec 0c             	sub    esp,0xc
c001698f:	ba f8 a7 02 c0       	mov    edx,0xc002a7f8
c0016994:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016998:	89 10                	mov    DWORD PTR [eax],edx
c001699a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001699e:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c00169a1:	84 c0                	test   al,al
c00169a3:	74 0f                	je     c00169b4 <VCache::~VCache()+0x28>
c00169a5:	83 ec 0c             	sub    esp,0xc
c00169a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00169ac:	e8 9f ff ff ff       	call   c0016950 <VCache::writeWriteBuffer()>
c00169b1:	83 c4 10             	add    esp,0x10
c00169b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00169b8:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00169bb:	83 ec 0c             	sub    esp,0xc
c00169be:	50                   	push   eax
c00169bf:	e8 70 8c ff ff       	call   c000f634 <free>
c00169c4:	83 c4 10             	add    esp,0x10
c00169c7:	90                   	nop
c00169c8:	83 c4 0c             	add    esp,0xc
c00169cb:	c3                   	ret    

c00169cc <VCache::~VCache()>:
c00169cc:	83 ec 0c             	sub    esp,0xc
c00169cf:	83 ec 0c             	sub    esp,0xc
c00169d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00169d6:	e8 b1 ff ff ff       	call   c001698c <VCache::~VCache()>
c00169db:	83 c4 10             	add    esp,0x10
c00169de:	83 ec 08             	sub    esp,0x8
c00169e1:	6a 30                	push   0x30
c00169e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00169e7:	e8 27 be ff ff       	call   c0012813 <operator delete(void*, unsigned long)>
c00169ec:	83 c4 10             	add    esp,0x10
c00169ef:	83 c4 0c             	add    esp,0xc
c00169f2:	c3                   	ret    
c00169f3:	90                   	nop

c00169f4 <VCache::write(unsigned long long, int, void*)>:
c00169f4:	55                   	push   ebp
c00169f5:	57                   	push   edi
c00169f6:	56                   	push   esi
c00169f7:	53                   	push   ebx
c00169f8:	83 ec 28             	sub    esp,0x28
c00169fb:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00169ff:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016a03:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016a07:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0016a0b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016a0e:	e8 f3 6d 00 00       	call   c001d806 <Semaphore::acquire()>
c0016a13:	83 c4 10             	add    esp,0x10
c0016a16:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016a1a:	74 66                	je     c0016a82 <VCache::write(unsigned long long, int, void*)+0x8e>
c0016a1c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016a1f:	99                   	cdq    
c0016a20:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016a24:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0016a27:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0016a2a:	89 c1                	mov    ecx,eax
c0016a2c:	89 d0                	mov    eax,edx
c0016a2e:	31 f1                	xor    ecx,esi
c0016a30:	31 f8                	xor    eax,edi
c0016a32:	89 ca                	mov    edx,ecx
c0016a34:	09 c2                	or     edx,eax
c0016a36:	75 3e                	jne    c0016a76 <VCache::write(unsigned long long, int, void*)+0x82>
c0016a38:	83 fd 01             	cmp    ebp,0x1
c0016a3b:	75 39                	jne    c0016a76 <VCache::write(unsigned long long, int, void*)+0x82>
c0016a3d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016a40:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016a46:	51                   	push   ecx
c0016a47:	50                   	push   eax
c0016a48:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016a4c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0016a50:	0f af c8             	imul   ecx,eax
c0016a53:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c0016a56:	51                   	push   ecx
c0016a57:	e8 44 9c fe ff       	call   c00006a0 <memcpy>
c0016a5c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016a5f:	83 c4 10             	add    esp,0x10
c0016a62:	40                   	inc    eax
c0016a63:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0016a66:	83 f8 40             	cmp    eax,0x40
c0016a69:	75 57                	jne    c0016ac2 <VCache::write(unsigned long long, int, void*)+0xce>
c0016a6b:	83 ec 0c             	sub    esp,0xc
c0016a6e:	53                   	push   ebx
c0016a6f:	e8 dc fe ff ff       	call   c0016950 <VCache::writeWriteBuffer()>
c0016a74:	eb 34                	jmp    c0016aaa <VCache::write(unsigned long long, int, void*)+0xb6>
c0016a76:	83 ec 0c             	sub    esp,0xc
c0016a79:	53                   	push   ebx
c0016a7a:	e8 d1 fe ff ff       	call   c0016950 <VCache::writeWriteBuffer()>
c0016a7f:	83 c4 10             	add    esp,0x10
c0016a82:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016a85:	83 fd 3f             	cmp    ebp,0x3f
c0016a88:	7f 25                	jg     c0016aaf <VCache::write(unsigned long long, int, void*)+0xbb>
c0016a8a:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0016a8d:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0016a90:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c0016a93:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0016a97:	52                   	push   edx
c0016a98:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0016a9e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016aa2:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016aa5:	e8 f6 9b fe ff       	call   c00006a0 <memcpy>
c0016aaa:	83 c4 10             	add    esp,0x10
c0016aad:	eb 13                	jmp    c0016ac2 <VCache::write(unsigned long long, int, void*)+0xce>
c0016aaf:	83 ec 0c             	sub    esp,0xc
c0016ab2:	8b 10                	mov    edx,DWORD PTR [eax]
c0016ab4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016ab8:	55                   	push   ebp
c0016ab9:	57                   	push   edi
c0016aba:	56                   	push   esi
c0016abb:	50                   	push   eax
c0016abc:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016abf:	83 c4 20             	add    esp,0x20
c0016ac2:	83 ec 0c             	sub    esp,0xc
c0016ac5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016ac8:	e8 e7 72 00 00       	call   c001ddb4 <Semaphore::release()>
c0016acd:	83 c4 2c             	add    esp,0x2c
c0016ad0:	31 c0                	xor    eax,eax
c0016ad2:	5b                   	pop    ebx
c0016ad3:	5e                   	pop    esi
c0016ad4:	5f                   	pop    edi
c0016ad5:	5d                   	pop    ebp
c0016ad6:	c3                   	ret    
c0016ad7:	90                   	nop

c0016ad8 <VCache::read(unsigned long long, int, void*)>:
c0016ad8:	57                   	push   edi
c0016ad9:	56                   	push   esi
c0016ada:	53                   	push   ebx
c0016adb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016adf:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0016ae3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0016ae7:	83 ec 0c             	sub    esp,0xc
c0016aea:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016aed:	e8 14 6d 00 00       	call   c001d806 <Semaphore::acquire()>
c0016af2:	83 c4 10             	add    esp,0x10
c0016af5:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016af9:	74 0c                	je     c0016b07 <VCache::read(unsigned long long, int, void*)+0x2f>
c0016afb:	83 ec 0c             	sub    esp,0xc
c0016afe:	53                   	push   ebx
c0016aff:	e8 4c fe ff ff       	call   c0016950 <VCache::writeWriteBuffer()>
c0016b04:	83 c4 10             	add    esp,0x10
c0016b07:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016b0a:	83 ec 0c             	sub    esp,0xc
c0016b0d:	8b 10                	mov    edx,DWORD PTR [eax]
c0016b0f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016b13:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016b17:	57                   	push   edi
c0016b18:	56                   	push   esi
c0016b19:	50                   	push   eax
c0016b1a:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016b1d:	83 c4 14             	add    esp,0x14
c0016b20:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016b23:	e8 8c 72 00 00       	call   c001ddb4 <Semaphore::release()>
c0016b28:	83 c4 10             	add    esp,0x10
c0016b2b:	31 c0                	xor    eax,eax
c0016b2d:	5b                   	pop    ebx
c0016b2e:	5e                   	pop    esi
c0016b2f:	5f                   	pop    edi
c0016b30:	c3                   	ret    
c0016b31:	90                   	nop

c0016b32 <Video::putrect(int, int, int, int, unsigned int)>:
c0016b32:	55                   	push   ebp
c0016b33:	57                   	push   edi
c0016b34:	56                   	push   esi
c0016b35:	53                   	push   ebx
c0016b36:	83 ec 1c             	sub    esp,0x1c
c0016b39:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016b3d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016b41:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016b45:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016b49:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016b4d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016b51:	01 df                	add    edi,ebx
c0016b53:	39 fb                	cmp    ebx,edi
c0016b55:	7d 1f                	jge    c0016b76 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0016b57:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016b5b:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0016b5f:	7d 12                	jge    c0016b73 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0016b61:	8b 16                	mov    edx,DWORD PTR [esi]
c0016b63:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0016b67:	53                   	push   ebx
c0016b68:	55                   	push   ebp
c0016b69:	45                   	inc    ebp
c0016b6a:	56                   	push   esi
c0016b6b:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016b6e:	83 c4 10             	add    esp,0x10
c0016b71:	eb e8                	jmp    c0016b5b <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0016b73:	43                   	inc    ebx
c0016b74:	eb dd                	jmp    c0016b53 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0016b76:	83 c4 1c             	add    esp,0x1c
c0016b79:	5b                   	pop    ebx
c0016b7a:	5e                   	pop    esi
c0016b7b:	5f                   	pop    edi
c0016b7c:	5d                   	pop    ebp
c0016b7d:	c3                   	ret    

c0016b7e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0016b7e:	55                   	push   ebp
c0016b7f:	57                   	push   edi
c0016b80:	31 ff                	xor    edi,edi
c0016b82:	56                   	push   esi
c0016b83:	53                   	push   ebx
c0016b84:	83 ec 1c             	sub    esp,0x1c
c0016b87:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0016b8b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016b8f:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0016b96:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0016b9b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016b9f:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0016ba3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016ba7:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0016baa:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016bae:	01 f9                	add    ecx,edi
c0016bb0:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0016bb4:	7d 2f                	jge    c0016be5 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0016bb6:	31 f6                	xor    esi,esi
c0016bb8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016bbc:	01 f2                	add    edx,esi
c0016bbe:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0016bc2:	7d 1a                	jge    c0016bde <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0016bc4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016bc7:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0016bca:	46                   	inc    esi
c0016bcb:	51                   	push   ecx
c0016bcc:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016bd0:	52                   	push   edx
c0016bd1:	55                   	push   ebp
c0016bd2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016bd5:	83 c4 10             	add    esp,0x10
c0016bd8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016bdc:	eb da                	jmp    c0016bb8 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0016bde:	47                   	inc    edi
c0016bdf:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0016be3:	eb c5                	jmp    c0016baa <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0016be5:	83 c4 1c             	add    esp,0x1c
c0016be8:	5b                   	pop    ebx
c0016be9:	5e                   	pop    esi
c0016bea:	5f                   	pop    edi
c0016beb:	5d                   	pop    ebp
c0016bec:	c3                   	ret    
c0016bed:	90                   	nop

c0016bee <Video::blit(unsigned int*, int, int, int, int)>:
c0016bee:	55                   	push   ebp
c0016bef:	57                   	push   edi
c0016bf0:	56                   	push   esi
c0016bf1:	53                   	push   ebx
c0016bf2:	83 ec 1c             	sub    esp,0x1c
c0016bf5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016bf9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016bfd:	85 c0                	test   eax,eax
c0016bff:	79 02                	jns    c0016c03 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0016c01:	31 c0                	xor    eax,eax
c0016c03:	c1 e0 02             	shl    eax,0x2
c0016c06:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016c0a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016c0e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016c12:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0016c16:	39 d8                	cmp    eax,ebx
c0016c18:	7e 49                	jle    c0016c63 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016c1a:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016c20:	7c 41                	jl     c0016c63 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016c22:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0016c26:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016c2a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016c2e:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0016c32:	39 f9                	cmp    ecx,edi
c0016c34:	7e 22                	jle    c0016c58 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0016c36:	83 c5 04             	add    ebp,0x4
c0016c39:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016c3f:	7c 14                	jl     c0016c55 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0016c41:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016c43:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0016c46:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016c4a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016c4e:	56                   	push   esi
c0016c4f:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0016c52:	83 c4 10             	add    esp,0x10
c0016c55:	47                   	inc    edi
c0016c56:	eb d2                	jmp    c0016c2a <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0016c58:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016c5c:	43                   	inc    ebx
c0016c5d:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0016c61:	eb ab                	jmp    c0016c0e <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0016c63:	83 c4 1c             	add    esp,0x1c
c0016c66:	5b                   	pop    ebx
c0016c67:	5e                   	pop    esi
c0016c68:	5f                   	pop    edi
c0016c69:	5d                   	pop    ebp
c0016c6a:	c3                   	ret    
c0016c6b:	90                   	nop

c0016c6c <Video::clearScreen(unsigned int)>:
c0016c6c:	57                   	push   edi
c0016c6d:	56                   	push   esi
c0016c6e:	53                   	push   ebx
c0016c6f:	31 db                	xor    ebx,ebx
c0016c71:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016c75:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016c7b:	7e 1f                	jle    c0016c9c <Video::clearScreen(unsigned int)+0x30>
c0016c7d:	31 ff                	xor    edi,edi
c0016c7f:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016c85:	7e 12                	jle    c0016c99 <Video::clearScreen(unsigned int)+0x2d>
c0016c87:	8b 06                	mov    eax,DWORD PTR [esi]
c0016c89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016c8d:	53                   	push   ebx
c0016c8e:	57                   	push   edi
c0016c8f:	47                   	inc    edi
c0016c90:	56                   	push   esi
c0016c91:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016c94:	83 c4 10             	add    esp,0x10
c0016c97:	eb e6                	jmp    c0016c7f <Video::clearScreen(unsigned int)+0x13>
c0016c99:	43                   	inc    ebx
c0016c9a:	eb d9                	jmp    c0016c75 <Video::clearScreen(unsigned int)+0x9>
c0016c9c:	5b                   	pop    ebx
c0016c9d:	5e                   	pop    esi
c0016c9e:	5f                   	pop    edi
c0016c9f:	c3                   	ret    

c0016ca0 <Video::putpixel(int, int, unsigned int)>:
c0016ca0:	c7 44 24 04 00 a8 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a800
c0016ca8:	e9 a0 2f 00 00       	jmp    c0019c4d <Krnl::panic(char const*)>
c0016cad:	90                   	nop

c0016cae <Video::Video(char const*)>:
c0016cae:	83 ec 0c             	sub    esp,0xc
c0016cb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cb5:	83 ec 08             	sub    esp,0x8
c0016cb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cbc:	50                   	push   eax
c0016cbd:	e8 48 d2 ff ff       	call   c0013f0a <Device::Device(char const*)>
c0016cc2:	83 c4 10             	add    esp,0x10
c0016cc5:	ba 84 a8 02 c0       	mov    edx,0xc002a884
c0016cca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cce:	89 10                	mov    DWORD PTR [eax],edx
c0016cd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cd4:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0016cde:	90                   	nop
c0016cdf:	83 c4 0c             	add    esp,0xc
c0016ce2:	c3                   	ret    
c0016ce3:	90                   	nop

c0016ce4 <Video::~Video()>:
c0016ce4:	83 ec 0c             	sub    esp,0xc
c0016ce7:	ba 84 a8 02 c0       	mov    edx,0xc002a884
c0016cec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cf0:	89 10                	mov    DWORD PTR [eax],edx
c0016cf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cf6:	83 ec 0c             	sub    esp,0xc
c0016cf9:	50                   	push   eax
c0016cfa:	e8 ed ce ff ff       	call   c0013bec <Device::~Device()>
c0016cff:	83 c4 10             	add    esp,0x10
c0016d02:	90                   	nop
c0016d03:	83 c4 0c             	add    esp,0xc
c0016d06:	c3                   	ret    
c0016d07:	90                   	nop

c0016d08 <Video::~Video()>:
c0016d08:	83 ec 0c             	sub    esp,0xc
c0016d0b:	83 ec 0c             	sub    esp,0xc
c0016d0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d12:	e8 cd ff ff ff       	call   c0016ce4 <Video::~Video()>
c0016d17:	83 c4 10             	add    esp,0x10
c0016d1a:	83 ec 08             	sub    esp,0x8
c0016d1d:	68 64 01 00 00       	push   0x164
c0016d22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d26:	e8 e8 ba ff ff       	call   c0012813 <operator delete(void*, unsigned long)>
c0016d2b:	83 c4 10             	add    esp,0x10
c0016d2e:	83 c4 0c             	add    esp,0xc
c0016d31:	c3                   	ret    

c0016d32 <Video::isMonochrome()>:
c0016d32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d36:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0016d3c:	c3                   	ret    
c0016d3d:	90                   	nop

c0016d3e <Video::getWidth()>:
c0016d3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d42:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016d48:	c3                   	ret    
c0016d49:	90                   	nop

c0016d4a <Video::getHeight()>:
c0016d4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d4e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016d54:	c3                   	ret    
c0016d55:	90                   	nop

c0016d56 <Video::drawCursor(int, int, unsigned char*, int)>:
c0016d56:	55                   	push   ebp
c0016d57:	57                   	push   edi
c0016d58:	56                   	push   esi
c0016d59:	53                   	push   ebx
c0016d5a:	83 ec 2c             	sub    esp,0x2c
c0016d5d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016d61:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016d65:	83 f8 01             	cmp    eax,0x1
c0016d68:	19 c9                	sbb    ecx,ecx
c0016d6a:	31 db                	xor    ebx,ebx
c0016d6c:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0016d70:	89 cd                	mov    ebp,ecx
c0016d72:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0016d7a:	f7 d5                	not    ebp
c0016d7c:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0016d82:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0016d86:	01 d8                	add    eax,ebx
c0016d88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016d8c:	56                   	push   esi
c0016d8d:	e8 b8 ff ff ff       	call   c0016d4a <Video::getHeight()>
c0016d92:	59                   	pop    ecx
c0016d93:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0016d97:	7e 70                	jle    c0016e09 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0016d99:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016d9d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016da1:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0016da4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016da8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016dac:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0016db3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016db7:	89 f8                	mov    eax,edi
c0016db9:	83 c0 20             	add    eax,0x20
c0016dbc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016dc0:	56                   	push   esi
c0016dc1:	e8 78 ff ff ff       	call   c0016d3e <Video::getWidth()>
c0016dc6:	5a                   	pop    edx
c0016dc7:	39 c7                	cmp    edi,eax
c0016dc9:	7d 34                	jge    c0016dff <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0016dcb:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0016dd0:	74 05                	je     c0016dd7 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0016dd2:	8b 06                	mov    eax,DWORD PTR [esi]
c0016dd4:	55                   	push   ebp
c0016dd5:	eb 0d                	jmp    c0016de4 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0016dd7:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0016ddc:	74 12                	je     c0016df0 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0016dde:	8b 06                	mov    eax,DWORD PTR [esi]
c0016de0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016de4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016de8:	57                   	push   edi
c0016de9:	56                   	push   esi
c0016dea:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016ded:	83 c4 10             	add    esp,0x10
c0016df0:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0016df4:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0016df8:	47                   	inc    edi
c0016df9:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0016dfd:	75 c1                	jne    c0016dc0 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0016dff:	43                   	inc    ebx
c0016e00:	83 fb 20             	cmp    ebx,0x20
c0016e03:	0f 85 79 ff ff ff    	jne    c0016d82 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0016e09:	83 c4 2c             	add    esp,0x2c
c0016e0c:	5b                   	pop    ebx
c0016e0d:	5e                   	pop    esi
c0016e0e:	5f                   	pop    edi
c0016e0f:	5d                   	pop    ebp
c0016e10:	c3                   	ret    
c0016e11:	90                   	nop

c0016e12 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0016e12:	55                   	push   ebp
c0016e13:	57                   	push   edi
c0016e14:	56                   	push   esi
c0016e15:	53                   	push   ebx
c0016e16:	83 ec 28             	sub    esp,0x28
c0016e19:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016e1d:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0016e21:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c0016e25:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0016e29:	c1 e7 08             	shl    edi,0x8
c0016e2c:	01 c7                	add    edi,eax
c0016e2e:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0016e32:	c1 e0 08             	shl    eax,0x8
c0016e35:	01 d0                	add    eax,edx
c0016e37:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016e3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016e3f:	0f af c7             	imul   eax,edi
c0016e42:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0016e49:	50                   	push   eax
c0016e4a:	e8 d5 87 ff ff       	call   c000f624 <malloc>
c0016e4f:	83 c4 10             	add    esp,0x10
c0016e52:	89 c5                	mov    ebp,eax
c0016e54:	85 c0                	test   eax,eax
c0016e56:	75 15                	jne    c0016e6d <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c0016e58:	83 ec 0c             	sub    esp,0xc
c0016e5b:	68 21 a8 02 c0       	push   0xc002a821
c0016e60:	e8 8e ba ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0016e65:	83 c4 10             	add    esp,0x10
c0016e68:	e9 1c 01 00 00       	jmp    c0016f89 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0016e6d:	be 12 00 00 00       	mov    esi,0x12
c0016e72:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0016e76:	74 11                	je     c0016e89 <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c0016e78:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c0016e7c:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c0016e80:	c1 fe 03             	sar    esi,0x3
c0016e83:	0f af f0             	imul   esi,eax
c0016e86:	83 c6 12             	add    esi,0x12
c0016e89:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0016e8d:	74 04                	je     c0016e93 <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c0016e8f:	85 ff                	test   edi,edi
c0016e91:	75 12                	jne    c0016ea5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c0016e93:	83 ec 0c             	sub    esp,0xc
c0016e96:	68 38 a8 02 c0       	push   0xc002a838
c0016e9b:	e8 53 ba ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0016ea0:	e9 ce 00 00 00       	jmp    c0016f73 <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c0016ea5:	52                   	push   edx
c0016ea6:	52                   	push   edx
c0016ea7:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c0016eab:	50                   	push   eax
c0016eac:	68 4d a8 02 c0       	push   0xc002a84d
c0016eb1:	e8 3d ba ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0016eb6:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c0016eba:	83 c4 10             	add    esp,0x10
c0016ebd:	80 fa 02             	cmp    dl,0x2
c0016ec0:	0f 85 98 00 00 00    	jne    c0016f5e <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c0016ec6:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0016ecb:	75 10                	jne    c0016edd <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0016ecd:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0016ed1:	75 0a                	jne    c0016edd <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0016ed3:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0016ed6:	83 e8 18             	sub    eax,0x18
c0016ed9:	a8 f7                	test   al,0xf7
c0016edb:	74 0a                	je     c0016ee7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c0016edd:	83 ec 0c             	sub    esp,0xc
c0016ee0:	68 5a a8 02 c0       	push   0xc002a85a
c0016ee5:	eb 7f                	jmp    c0016f66 <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c0016ee7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016eef:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016ef7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016efb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016f03:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0016f07:	75 0c                	jne    c0016f15 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c0016f09:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c0016f0e:	c1 e0 18             	shl    eax,0x18
c0016f11:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016f15:	41                   	inc    ecx
c0016f16:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c0016f1b:	c1 e2 10             	shl    edx,0x10
c0016f1e:	89 d0                	mov    eax,edx
c0016f20:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c0016f25:	c1 e2 08             	shl    edx,0x8
c0016f28:	09 c2                	or     edx,eax
c0016f2a:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c0016f2e:	09 c2                	or     edx,eax
c0016f30:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c0016f34:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c0016f38:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0016f3c:	c1 f8 03             	sar    eax,0x3
c0016f3f:	01 c6                	add    esi,eax
c0016f41:	89 c8                	mov    eax,ecx
c0016f43:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0016f47:	39 c7                	cmp    edi,eax
c0016f49:	7f b0                	jg     c0016efb <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0016f4b:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0016f4f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016f53:	39 14 24             	cmp    DWORD PTR [esp],edx
c0016f56:	7e 22                	jle    c0016f7a <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c0016f58:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0016f5c:	eb 99                	jmp    c0016ef7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c0016f5e:	50                   	push   eax
c0016f5f:	50                   	push   eax
c0016f60:	52                   	push   edx
c0016f61:	68 68 a8 02 c0       	push   0xc002a868
c0016f66:	e8 88 b9 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0016f6b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016f6e:	e8 c1 86 ff ff       	call   c000f634 <free>
c0016f73:	83 c4 10             	add    esp,0x10
c0016f76:	31 ed                	xor    ebp,ebp
c0016f78:	eb 0f                	jmp    c0016f89 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0016f7a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016f7e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0016f81:	89 38                	mov    DWORD PTR [eax],edi
c0016f83:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016f87:	89 08                	mov    DWORD PTR [eax],ecx
c0016f89:	83 c4 1c             	add    esp,0x1c
c0016f8c:	89 e8                	mov    eax,ebp
c0016f8e:	5b                   	pop    ebx
c0016f8f:	5e                   	pop    esi
c0016f90:	5f                   	pop    edi
c0016f91:	5d                   	pop    ebp
c0016f92:	c3                   	ret    
c0016f93:	90                   	nop

c0016f94 <Video::putTGA(int, int, unsigned char*, int)>:
c0016f94:	55                   	push   ebp
c0016f95:	57                   	push   edi
c0016f96:	56                   	push   esi
c0016f97:	53                   	push   ebx
c0016f98:	83 ec 28             	sub    esp,0x28
c0016f9b:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0016f9f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016fa3:	50                   	push   eax
c0016fa4:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016fa8:	50                   	push   eax
c0016fa9:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016fad:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016fb1:	56                   	push   esi
c0016fb2:	e8 5b fe ff ff       	call   c0016e12 <Video::tgaParse(unsigned char*, int, int*, int*)>
c0016fb7:	83 c4 20             	add    esp,0x20
c0016fba:	85 c0                	test   eax,eax
c0016fbc:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016fc0:	74 35                	je     c0016ff7 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0016fc2:	89 c7                	mov    edi,eax
c0016fc4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016fc8:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0016fcc:	39 d8                	cmp    eax,ebx
c0016fce:	7e 27                	jle    c0016ff7 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0016fd0:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016fd4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016fd8:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0016fdc:	39 e8                	cmp    eax,ebp
c0016fde:	7e 14                	jle    c0016ff4 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0016fe0:	8b 06                	mov    eax,DWORD PTR [esi]
c0016fe2:	83 c7 04             	add    edi,0x4
c0016fe5:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0016fe8:	53                   	push   ebx
c0016fe9:	55                   	push   ebp
c0016fea:	45                   	inc    ebp
c0016feb:	56                   	push   esi
c0016fec:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016fef:	83 c4 10             	add    esp,0x10
c0016ff2:	eb e0                	jmp    c0016fd4 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0016ff4:	43                   	inc    ebx
c0016ff5:	eb cd                	jmp    c0016fc4 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0016ff7:	83 c4 1c             	add    esp,0x1c
c0016ffa:	5b                   	pop    ebx
c0016ffb:	5e                   	pop    esi
c0016ffc:	5f                   	pop    edi
c0016ffd:	5d                   	pop    ebp
c0016ffe:	c3                   	ret    
c0016fff:	90                   	nop

c0017000 <ACPI::close(int, int, void*)>:
c0017000:	83 ec 1c             	sub    esp,0x1c
c0017003:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c001700b:	74 0a                	je     c0017017 <ACPI::close(int, int, void*)+0x17>
c001700d:	b8 00 00 00 00       	mov    eax,0x0
c0017012:	e9 9a 00 00 00       	jmp    c00170b1 <ACPI::close(int, int, void*)+0xb1>
c0017017:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001701c:	75 37                	jne    c0017055 <ACPI::close(int, int, void*)+0x55>
c001701e:	83 ec 0c             	sub    esp,0xc
c0017021:	68 c4 a8 02 c0       	push   0xc002a8c4
c0017026:	e8 c8 b8 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001702b:	83 c4 10             	add    esp,0x10
c001702e:	a1 28 df 02 c0       	mov    eax,ds:0xc002df28
c0017033:	85 c0                	test   eax,eax
c0017035:	74 07                	je     c001703e <ACPI::close(int, int, void*)+0x3e>
c0017037:	a1 28 df 02 c0       	mov    eax,ds:0xc002df28
c001703c:	ff d0                	call   eax
c001703e:	83 ec 0c             	sub    esp,0xc
c0017041:	68 e8 a9 02 c0       	push   0xc002a9e8
c0017046:	e8 02 2c 00 00       	call   c0019c4d <Krnl::panic(char const*)>
c001704b:	83 c4 10             	add    esp,0x10
c001704e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017053:	eb 5c                	jmp    c00170b1 <ACPI::close(int, int, void*)+0xb1>
c0017055:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c001705a:	75 50                	jne    c00170ac <ACPI::close(int, int, void*)+0xac>
c001705c:	a1 24 df 02 c0       	mov    eax,ds:0xc002df24
c0017061:	85 c0                	test   eax,eax
c0017063:	74 07                	je     c001706c <ACPI::close(int, int, void*)+0x6c>
c0017065:	a1 24 df 02 c0       	mov    eax,ds:0xc002df24
c001706a:	ff d0                	call   eax
c001706c:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0017071:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017076:	83 e0 02             	and    eax,0x2
c0017079:	74 1c                	je     c0017097 <ACPI::close(int, int, void*)+0x97>
c001707b:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0017082:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017086:	89 c2                	mov    edx,eax
c0017088:	ec                   	in     al,dx
c0017089:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001708d:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0017091:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017095:	eb da                	jmp    c0017071 <ACPI::close(int, int, void*)+0x71>
c0017097:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c001709e:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c00170a3:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00170a7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00170ab:	ee                   	out    dx,al
c00170ac:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00170b1:	83 c4 1c             	add    esp,0x1c
c00170b4:	c3                   	ret    

c00170b5 <findRSDP()>:
c00170b5:	83 ec 1c             	sub    esp,0x1c
c00170b8:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c00170bd:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00170c3:	83 e0 04             	and    eax,0x4
c00170c6:	84 c0                	test   al,al
c00170c8:	75 07                	jne    c00170d1 <findRSDP()+0x1c>
c00170ca:	b8 00 00 00 00       	mov    eax,0x0
c00170cf:	eb 6a                	jmp    c001713b <findRSDP()+0x86>
c00170d1:	a1 d0 d8 02 c0       	mov    eax,ds:0xc002d8d0
c00170d6:	3d ff 07 00 00       	cmp    eax,0x7ff
c00170db:	7f 1b                	jg     c00170f8 <findRSDP()+0x43>
c00170dd:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c00170e2:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00170e8:	83 e2 fb             	and    edx,0xfffffffb
c00170eb:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00170f1:	b8 00 00 00 00       	mov    eax,0x0
c00170f6:	eb 43                	jmp    c001713b <findRSDP()+0x86>
c00170f8:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0017100:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0017108:	77 2c                	ja     c0017136 <findRSDP()+0x81>
c001710a:	83 ec 04             	sub    esp,0x4
c001710d:	6a 08                	push   0x8
c001710f:	68 d1 a8 02 c0       	push   0xc002a8d1
c0017114:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017118:	e8 20 95 fe ff       	call   c000063d <memcmp>
c001711d:	83 c4 10             	add    esp,0x10
c0017120:	85 c0                	test   eax,eax
c0017122:	0f 94 c0             	sete   al
c0017125:	84 c0                	test   al,al
c0017127:	74 06                	je     c001712f <findRSDP()+0x7a>
c0017129:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001712d:	eb 0c                	jmp    c001713b <findRSDP()+0x86>
c001712f:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0017134:	eb ca                	jmp    c0017100 <findRSDP()+0x4b>
c0017136:	b8 00 00 00 00       	mov    eax,0x0
c001713b:	83 c4 1c             	add    esp,0x1c
c001713e:	c3                   	ret    

c001713f <loadACPITables(unsigned char*)>:
c001713f:	56                   	push   esi
c0017140:	53                   	push   ebx
c0017141:	83 ec 44             	sub    esp,0x44
c0017144:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c0017149:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001714f:	83 e0 04             	and    eax,0x4
c0017152:	84 c0                	test   al,al
c0017154:	0f 84 05 02 00 00    	je     c001735f <loadACPITables(unsigned char*)+0x220>
c001715a:	a0 40 e1 02 c0       	mov    al,ds:0xc002e140
c001715f:	84 c0                	test   al,al
c0017161:	74 75                	je     c00171d8 <loadACPITables(unsigned char*)+0x99>
c0017163:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017167:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001716b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001716f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017172:	83 e8 24             	sub    eax,0x24
c0017175:	c1 e8 03             	shr    eax,0x3
c0017178:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001717c:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017184:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017188:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c001718c:	0f 8d b2 00 00 00    	jge    c0017244 <loadACPITables(unsigned char*)+0x105>
c0017192:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017196:	83 c0 24             	add    eax,0x24
c0017199:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001719d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00171a1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00171a5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00171a9:	c1 e0 03             	shl    eax,0x3
c00171ac:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c00171b0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00171b4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00171b7:	8b 00                	mov    eax,DWORD PTR [eax]
c00171b9:	89 c1                	mov    ecx,eax
c00171bb:	a1 2c df 02 c0       	mov    eax,ds:0xc002df2c
c00171c0:	8d 50 01             	lea    edx,[eax+0x1]
c00171c3:	89 15 2c df 02 c0    	mov    DWORD PTR ds:0xc002df2c,edx
c00171c9:	89 ca                	mov    edx,ecx
c00171cb:	89 14 c5 44 df 02 c0 	mov    DWORD PTR [eax*8-0x3ffd20bc],edx
c00171d2:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c00171d6:	eb ac                	jmp    c0017184 <loadACPITables(unsigned char*)+0x45>
c00171d8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00171dc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00171e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00171e4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00171e7:	83 e8 24             	sub    eax,0x24
c00171ea:	c1 e8 02             	shr    eax,0x2
c00171ed:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00171f1:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c00171f9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00171fd:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0017201:	7d 41                	jge    c0017244 <loadACPITables(unsigned char*)+0x105>
c0017203:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017207:	83 c0 24             	add    eax,0x24
c001720a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001720e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017212:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017216:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001721a:	c1 e0 02             	shl    eax,0x2
c001721d:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0017221:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017225:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017227:	a1 2c df 02 c0       	mov    eax,ds:0xc002df2c
c001722c:	8d 50 01             	lea    edx,[eax+0x1]
c001722f:	89 15 2c df 02 c0    	mov    DWORD PTR ds:0xc002df2c,edx
c0017235:	89 ca                	mov    edx,ecx
c0017237:	89 14 c5 44 df 02 c0 	mov    DWORD PTR [eax*8-0x3ffd20bc],edx
c001723e:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0017242:	eb b5                	jmp    c00171f9 <loadACPITables(unsigned char*)+0xba>
c0017244:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c001724c:	a1 2c df 02 c0       	mov    eax,ds:0xc002df2c
c0017251:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0017255:	0f 8d 05 01 00 00    	jge    c0017360 <loadACPITables(unsigned char*)+0x221>
c001725b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001725f:	8b 04 c5 44 df 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd20bc]
c0017266:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001726a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001726e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017272:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017276:	25 ff 0f 00 00       	and    eax,0xfff
c001727b:	89 c6                	mov    esi,eax
c001727d:	e8 11 a8 ff ff       	call   c0011a93 <Virt::getAKernelVAS()>
c0017282:	89 c3                	mov    ebx,eax
c0017284:	83 ec 0c             	sub    esp,0xc
c0017287:	6a 01                	push   0x1
c0017289:	e8 75 a6 ff ff       	call   c0011903 <Virt::allocateKernelVirtualPages(int)>
c001728e:	83 c4 10             	add    esp,0x10
c0017291:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017295:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001729b:	83 ec 0c             	sub    esp,0xc
c001729e:	6a 01                	push   0x1
c00172a0:	6a 01                	push   0x1
c00172a2:	50                   	push   eax
c00172a3:	52                   	push   edx
c00172a4:	53                   	push   ebx
c00172a5:	e8 18 b0 ff ff       	call   c00122c2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00172aa:	83 c4 20             	add    esp,0x20
c00172ad:	09 f0                	or     eax,esi
c00172af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00172b3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00172b7:	c1 e0 03             	shl    eax,0x3
c00172ba:	05 40 df 02 c0       	add    eax,0xc002df40
c00172bf:	83 ec 04             	sub    esp,0x4
c00172c2:	6a 04                	push   0x4
c00172c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00172c8:	50                   	push   eax
c00172c9:	e8 d2 93 fe ff       	call   c00006a0 <memcpy>
c00172ce:	83 c4 10             	add    esp,0x10
c00172d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00172d5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00172d8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00172dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00172e0:	05 00 10 00 00       	add    eax,0x1000
c00172e5:	c1 e8 0c             	shr    eax,0xc
c00172e8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00172ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00172f0:	89 04 24             	mov    DWORD PTR [esp],eax
c00172f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00172f7:	25 ff 0f 00 00       	and    eax,0xfff
c00172fc:	89 c6                	mov    esi,eax
c00172fe:	e8 90 a7 ff ff       	call   c0011a93 <Virt::getAKernelVAS()>
c0017303:	89 c3                	mov    ebx,eax
c0017305:	83 ec 0c             	sub    esp,0xc
c0017308:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001730c:	e8 f2 a5 ff ff       	call   c0011903 <Virt::allocateKernelVirtualPages(int)>
c0017311:	83 c4 10             	add    esp,0x10
c0017314:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017318:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001731e:	83 ec 0c             	sub    esp,0xc
c0017321:	6a 01                	push   0x1
c0017323:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017327:	50                   	push   eax
c0017328:	52                   	push   edx
c0017329:	53                   	push   ebx
c001732a:	e8 93 af ff ff       	call   c00122c2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001732f:	83 c4 20             	add    esp,0x20
c0017332:	09 f0                	or     eax,esi
c0017334:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017338:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001733b:	83 ec 0c             	sub    esp,0xc
c001733e:	50                   	push   eax
c001733f:	e8 23 a9 ff ff       	call   c0011c67 <Virt::freeKernelVirtualPages(unsigned long)>
c0017344:	83 c4 10             	add    esp,0x10
c0017347:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001734b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001734f:	89 14 c5 44 df 02 c0 	mov    DWORD PTR [eax*8-0x3ffd20bc],edx
c0017356:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c001735a:	e9 ed fe ff ff       	jmp    c001724c <loadACPITables(unsigned char*)+0x10d>
c001735f:	90                   	nop
c0017360:	83 c4 44             	add    esp,0x44
c0017363:	5b                   	pop    ebx
c0017364:	5e                   	pop    esi
c0017365:	c3                   	ret    

c0017366 <findRSDT(unsigned char*)>:
c0017366:	56                   	push   esi
c0017367:	53                   	push   ebx
c0017368:	83 ec 44             	sub    esp,0x44
c001736b:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c0017370:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017376:	83 e0 04             	and    eax,0x4
c0017379:	84 c0                	test   al,al
c001737b:	75 0a                	jne    c0017387 <findRSDT(unsigned char*)+0x21>
c001737d:	b8 00 00 00 00       	mov    eax,0x0
c0017382:	e9 f7 00 00 00       	jmp    c001747e <findRSDT(unsigned char*)+0x118>
c0017387:	83 ec 04             	sub    esp,0x4
c001738a:	6a 24                	push   0x24
c001738c:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0017390:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017394:	50                   	push   eax
c0017395:	e8 06 93 fe ff       	call   c00006a0 <memcpy>
c001739a:	83 c4 10             	add    esp,0x10
c001739d:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00173a1:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c00173a5:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00173ad:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00173b1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00173b5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00173b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00173bd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00173c1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00173c5:	25 ff 0f 00 00       	and    eax,0xfff
c00173ca:	89 c6                	mov    esi,eax
c00173cc:	e8 c2 a6 ff ff       	call   c0011a93 <Virt::getAKernelVAS()>
c00173d1:	89 c3                	mov    ebx,eax
c00173d3:	83 ec 0c             	sub    esp,0xc
c00173d6:	6a 02                	push   0x2
c00173d8:	e8 26 a5 ff ff       	call   c0011903 <Virt::allocateKernelVirtualPages(int)>
c00173dd:	83 c4 10             	add    esp,0x10
c00173e0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00173e4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00173ea:	83 ec 0c             	sub    esp,0xc
c00173ed:	6a 01                	push   0x1
c00173ef:	6a 02                	push   0x2
c00173f1:	50                   	push   eax
c00173f2:	52                   	push   edx
c00173f3:	53                   	push   ebx
c00173f4:	e8 c9 ae ff ff       	call   c00122c2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00173f9:	83 c4 20             	add    esp,0x20
c00173fc:	09 f0                	or     eax,esi
c00173fe:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017402:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017406:	25 ff 0f 00 00       	and    eax,0xfff
c001740b:	89 c6                	mov    esi,eax
c001740d:	e8 81 a6 ff ff       	call   c0011a93 <Virt::getAKernelVAS()>
c0017412:	89 c3                	mov    ebx,eax
c0017414:	83 ec 0c             	sub    esp,0xc
c0017417:	6a 02                	push   0x2
c0017419:	e8 e5 a4 ff ff       	call   c0011903 <Virt::allocateKernelVirtualPages(int)>
c001741e:	83 c4 10             	add    esp,0x10
c0017421:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017425:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001742b:	83 ec 0c             	sub    esp,0xc
c001742e:	6a 01                	push   0x1
c0017430:	6a 02                	push   0x2
c0017432:	50                   	push   eax
c0017433:	52                   	push   edx
c0017434:	53                   	push   ebx
c0017435:	e8 88 ae ff ff       	call   c00122c2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001743a:	83 c4 20             	add    esp,0x20
c001743d:	09 f0                	or     eax,esi
c001743f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017443:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0017448:	75 11                	jne    c001745b <findRSDT(unsigned char*)+0xf5>
c001744a:	c6 05 40 e1 02 c0 00 	mov    BYTE PTR ds:0xc002e140,0x0
c0017451:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017455:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017459:	eb 1f                	jmp    c001747a <findRSDT(unsigned char*)+0x114>
c001745b:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0017460:	75 11                	jne    c0017473 <findRSDT(unsigned char*)+0x10d>
c0017462:	c6 05 40 e1 02 c0 01 	mov    BYTE PTR ds:0xc002e140,0x1
c0017469:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001746d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017471:	eb 07                	jmp    c001747a <findRSDT(unsigned char*)+0x114>
c0017473:	b8 00 00 00 00       	mov    eax,0x0
c0017478:	eb 04                	jmp    c001747e <findRSDT(unsigned char*)+0x118>
c001747a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001747e:	83 c4 44             	add    esp,0x44
c0017481:	5b                   	pop    ebx
c0017482:	5e                   	pop    esi
c0017483:	c3                   	ret    

c0017484 <findDataTable(unsigned char*, char*)>:
c0017484:	83 ec 1c             	sub    esp,0x1c
c0017487:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c001748c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017492:	83 e0 04             	and    eax,0x4
c0017495:	84 c0                	test   al,al
c0017497:	75 07                	jne    c00174a0 <findDataTable(unsigned char*, char*)+0x1c>
c0017499:	b8 00 00 00 00       	mov    eax,0x0
c001749e:	eb 7c                	jmp    c001751c <findDataTable(unsigned char*, char*)+0x98>
c00174a0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00174a8:	a1 2c df 02 c0       	mov    eax,ds:0xc002df2c
c00174ad:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00174b1:	7d 3a                	jge    c00174ed <findDataTable(unsigned char*, char*)+0x69>
c00174b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00174b7:	c1 e0 03             	shl    eax,0x3
c00174ba:	05 40 df 02 c0       	add    eax,0xc002df40
c00174bf:	83 ec 04             	sub    esp,0x4
c00174c2:	6a 04                	push   0x4
c00174c4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00174c8:	50                   	push   eax
c00174c9:	e8 6f 91 fe ff       	call   c000063d <memcmp>
c00174ce:	83 c4 10             	add    esp,0x10
c00174d1:	85 c0                	test   eax,eax
c00174d3:	0f 94 c0             	sete   al
c00174d6:	84 c0                	test   al,al
c00174d8:	74 0d                	je     c00174e7 <findDataTable(unsigned char*, char*)+0x63>
c00174da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00174de:	8b 04 c5 44 df 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd20bc]
c00174e5:	eb 35                	jmp    c001751c <findDataTable(unsigned char*, char*)+0x98>
c00174e7:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00174eb:	eb bb                	jmp    c00174a8 <findDataTable(unsigned char*, char*)+0x24>
c00174ed:	a0 40 e1 02 c0       	mov    al,ds:0xc002e140
c00174f2:	84 c0                	test   al,al
c00174f4:	74 07                	je     c00174fd <findDataTable(unsigned char*, char*)+0x79>
c00174f6:	b8 58 00 00 00       	mov    eax,0x58
c00174fb:	eb 05                	jmp    c0017502 <findDataTable(unsigned char*, char*)+0x7e>
c00174fd:	b8 52 00 00 00       	mov    eax,0x52
c0017502:	83 ec 04             	sub    esp,0x4
c0017505:	50                   	push   eax
c0017506:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001750a:	68 0c aa 02 c0       	push   0xc002aa0c
c001750f:	e8 df b3 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0017514:	83 c4 10             	add    esp,0x10
c0017517:	b8 00 00 00 00       	mov    eax,0x0
c001751c:	83 c4 1c             	add    esp,0x1c
c001751f:	c3                   	ret    

c0017520 <scanMADT()>:
c0017520:	53                   	push   ebx
c0017521:	83 ec 38             	sub    esp,0x38
c0017524:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c0017529:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001752f:	83 e0 04             	and    eax,0x4
c0017532:	84 c0                	test   al,al
c0017534:	0f 84 63 04 00 00    	je     c001799d <scanMADT()+0x47d>
c001753a:	e8 76 fb ff ff       	call   c00170b5 <findRSDP()>
c001753f:	a3 4c e1 02 c0       	mov    ds:0xc002e14c,eax
c0017544:	a1 4c e1 02 c0       	mov    eax,ds:0xc002e14c
c0017549:	85 c0                	test   eax,eax
c001754b:	75 19                	jne    c0017566 <scanMADT()+0x46>
c001754d:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c0017552:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017558:	83 e2 fb             	and    edx,0xfffffffb
c001755b:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017561:	e9 3b 04 00 00       	jmp    c00179a1 <scanMADT()+0x481>
c0017566:	a1 4c e1 02 c0       	mov    eax,ds:0xc002e14c
c001756b:	83 ec 0c             	sub    esp,0xc
c001756e:	50                   	push   eax
c001756f:	e8 f2 fd ff ff       	call   c0017366 <findRSDT(unsigned char*)>
c0017574:	83 c4 10             	add    esp,0x10
c0017577:	a3 48 e1 02 c0       	mov    ds:0xc002e148,eax
c001757c:	a1 48 e1 02 c0       	mov    eax,ds:0xc002e148
c0017581:	85 c0                	test   eax,eax
c0017583:	75 19                	jne    c001759e <scanMADT()+0x7e>
c0017585:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c001758a:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017590:	83 e2 fb             	and    edx,0xfffffffb
c0017593:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017599:	e9 03 04 00 00       	jmp    c00179a1 <scanMADT()+0x481>
c001759e:	a1 48 e1 02 c0       	mov    eax,ds:0xc002e148
c00175a3:	83 ec 0c             	sub    esp,0xc
c00175a6:	50                   	push   eax
c00175a7:	e8 93 fb ff ff       	call   c001713f <loadACPITables(unsigned char*)>
c00175ac:	83 c4 10             	add    esp,0x10
c00175af:	a1 48 e1 02 c0       	mov    eax,ds:0xc002e148
c00175b4:	83 ec 08             	sub    esp,0x8
c00175b7:	68 da a8 02 c0       	push   0xc002a8da
c00175bc:	50                   	push   eax
c00175bd:	e8 c2 fe ff ff       	call   c0017484 <findDataTable(unsigned char*, char*)>
c00175c2:	83 c4 10             	add    esp,0x10
c00175c5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00175c9:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c00175ce:	75 19                	jne    c00175e9 <scanMADT()+0xc9>
c00175d0:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c00175d5:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00175db:	83 e2 fe             	and    edx,0xfffffffe
c00175de:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00175e4:	e9 b8 03 00 00       	jmp    c00179a1 <scanMADT()+0x481>
c00175e9:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00175f1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00175f5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00175f8:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c00175fc:	0f 87 9f 03 00 00    	ja     c00179a1 <scanMADT()+0x481>
c0017602:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c001760a:	0f 87 91 03 00 00    	ja     c00179a1 <scanMADT()+0x481>
c0017610:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017614:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017618:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001761c:	8d 50 01             	lea    edx,[eax+0x1]
c001761f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017623:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017627:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001762b:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001762f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017633:	8d 50 01             	lea    edx,[eax+0x1]
c0017636:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001763a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001763e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017642:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017646:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c001764b:	0f 86 4f 03 00 00    	jbe    c00179a0 <scanMADT()+0x480>
c0017651:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017656:	75 57                	jne    c00176af <scanMADT()+0x18f>
c0017658:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001765c:	8d 50 01             	lea    edx,[eax+0x1]
c001765f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017663:	8a 15 40 e3 02 c0    	mov    dl,BYTE PTR ds:0xc002e340
c0017669:	0f b6 d2             	movzx  edx,dl
c001766c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017670:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017674:	88 82 80 e3 02 c0    	mov    BYTE PTR [edx-0x3ffd1c80],al
c001767a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001767e:	8d 50 01             	lea    edx,[eax+0x1]
c0017681:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017685:	8a 15 40 e3 02 c0    	mov    dl,BYTE PTR ds:0xc002e340
c001768b:	8d 4a 01             	lea    ecx,[edx+0x1]
c001768e:	88 0d 40 e3 02 c0    	mov    BYTE PTR ds:0xc002e340,cl
c0017694:	0f b6 d2             	movzx  edx,dl
c0017697:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001769b:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001769f:	88 82 60 e3 02 c0    	mov    BYTE PTR [edx-0x3ffd1ca0],al
c00176a5:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00176aa:	e9 da 02 00 00       	jmp    c0017989 <scanMADT()+0x469>
c00176af:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c00176b4:	0f 85 14 01 00 00    	jne    c00177ce <scanMADT()+0x2ae>
c00176ba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00176be:	8d 50 01             	lea    edx,[eax+0x1]
c00176c1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00176c5:	8a 15 00 e2 02 c0    	mov    dl,BYTE PTR ds:0xc002e200
c00176cb:	0f b6 d2             	movzx  edx,dl
c00176ce:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00176d2:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00176d6:	88 82 20 e2 02 c0    	mov    BYTE PTR [edx-0x3ffd1de0],al
c00176dc:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c00176e0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00176e4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00176e8:	01 d0                	add    eax,edx
c00176ea:	83 c0 2c             	add    eax,0x2c
c00176ed:	8a 00                	mov    al,BYTE PTR [eax]
c00176ef:	0f b6 d0             	movzx  edx,al
c00176f2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00176f6:	8d 48 01             	lea    ecx,[eax+0x1]
c00176f9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00176fd:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017701:	0f b6 c0             	movzx  eax,al
c0017704:	c1 e0 08             	shl    eax,0x8
c0017707:	89 d1                	mov    ecx,edx
c0017709:	09 c1                	or     ecx,eax
c001770b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001770f:	8d 50 02             	lea    edx,[eax+0x2]
c0017712:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017716:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001771a:	0f b6 c0             	movzx  eax,al
c001771d:	c1 e0 10             	shl    eax,0x10
c0017720:	09 c1                	or     ecx,eax
c0017722:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017726:	8d 50 03             	lea    edx,[eax+0x3]
c0017729:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001772d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017731:	0f b6 c0             	movzx  eax,al
c0017734:	c1 e0 18             	shl    eax,0x18
c0017737:	09 c1                	or     ecx,eax
c0017739:	89 ca                	mov    edx,ecx
c001773b:	a0 00 e2 02 c0       	mov    al,ds:0xc002e200
c0017740:	0f b6 c0             	movzx  eax,al
c0017743:	89 14 85 40 e2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1dc0],edx
c001774a:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001774f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017753:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017757:	01 d0                	add    eax,edx
c0017759:	83 c0 2c             	add    eax,0x2c
c001775c:	8a 00                	mov    al,BYTE PTR [eax]
c001775e:	0f b6 d0             	movzx  edx,al
c0017761:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017765:	8d 48 01             	lea    ecx,[eax+0x1]
c0017768:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001776c:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017770:	0f b6 c0             	movzx  eax,al
c0017773:	c1 e0 08             	shl    eax,0x8
c0017776:	89 d1                	mov    ecx,edx
c0017778:	09 c1                	or     ecx,eax
c001777a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001777e:	8d 50 02             	lea    edx,[eax+0x2]
c0017781:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017785:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017789:	0f b6 c0             	movzx  eax,al
c001778c:	c1 e0 10             	shl    eax,0x10
c001778f:	09 c1                	or     ecx,eax
c0017791:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017795:	8d 50 03             	lea    edx,[eax+0x3]
c0017798:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001779c:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00177a0:	0f b6 c0             	movzx  eax,al
c00177a3:	c1 e0 18             	shl    eax,0x18
c00177a6:	09 c1                	or     ecx,eax
c00177a8:	89 ca                	mov    edx,ecx
c00177aa:	a0 00 e2 02 c0       	mov    al,ds:0xc002e200
c00177af:	0f b6 c0             	movzx  eax,al
c00177b2:	89 14 85 c0 e2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1d40],edx
c00177b9:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00177be:	a0 00 e2 02 c0       	mov    al,ds:0xc002e200
c00177c3:	40                   	inc    eax
c00177c4:	a2 00 e2 02 c0       	mov    ds:0xc002e200,al
c00177c9:	e9 bb 01 00 00       	jmp    c0017989 <scanMADT()+0x469>
c00177ce:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c00177d3:	0f 85 e9 00 00 00    	jne    c00178c2 <scanMADT()+0x3a2>
c00177d9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00177dd:	8d 50 01             	lea    edx,[eax+0x1]
c00177e0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00177e4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00177e8:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00177ec:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c00177f0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00177f4:	8d 50 01             	lea    edx,[eax+0x1]
c00177f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00177fb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00177ff:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017803:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017807:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001780b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001780f:	01 d0                	add    eax,edx
c0017811:	83 c0 2c             	add    eax,0x2c
c0017814:	8a 00                	mov    al,BYTE PTR [eax]
c0017816:	0f b6 d0             	movzx  edx,al
c0017819:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001781d:	8d 48 01             	lea    ecx,[eax+0x1]
c0017820:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017824:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017828:	0f b6 c0             	movzx  eax,al
c001782b:	c1 e0 08             	shl    eax,0x8
c001782e:	89 d1                	mov    ecx,edx
c0017830:	09 c1                	or     ecx,eax
c0017832:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017836:	8d 50 02             	lea    edx,[eax+0x2]
c0017839:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001783d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017841:	0f b6 c0             	movzx  eax,al
c0017844:	c1 e0 10             	shl    eax,0x10
c0017847:	09 c1                	or     ecx,eax
c0017849:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001784d:	8d 50 03             	lea    edx,[eax+0x3]
c0017850:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017854:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017858:	0f b6 c0             	movzx  eax,al
c001785b:	c1 e0 18             	shl    eax,0x18
c001785e:	09 c8                	or     eax,ecx
c0017860:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017864:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017869:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001786d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017871:	01 d0                	add    eax,edx
c0017873:	83 c0 2c             	add    eax,0x2c
c0017876:	8a 00                	mov    al,BYTE PTR [eax]
c0017878:	0f b6 c0             	movzx  eax,al
c001787b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001787f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017882:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017886:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c001788a:	0f b6 d2             	movzx  edx,dl
c001788d:	c1 e2 08             	shl    edx,0x8
c0017890:	09 d0                	or     eax,edx
c0017892:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0017897:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001789c:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c00178a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00178a5:	88 90 e0 ca 02 c0    	mov    BYTE PTR [eax-0x3ffd3520],dl
c00178ab:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c00178b0:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00178b5:	66 89 84 12 e0 e1 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd1e20],ax
c00178bd:	e9 c7 00 00 00       	jmp    c0017989 <scanMADT()+0x469>
c00178c2:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c00178c7:	0f 85 b0 00 00 00    	jne    c001797d <scanMADT()+0x45d>
c00178cd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00178d1:	8d 50 01             	lea    edx,[eax+0x1]
c00178d4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00178d8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00178dc:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00178e0:	0f b6 c0             	movzx  eax,al
c00178e3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00178e7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00178eb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00178ef:	01 d0                	add    eax,edx
c00178f1:	83 c0 2c             	add    eax,0x2c
c00178f4:	8a 00                	mov    al,BYTE PTR [eax]
c00178f6:	0f b6 d0             	movzx  edx,al
c00178f9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00178fd:	8d 48 01             	lea    ecx,[eax+0x1]
c0017900:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017904:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017908:	0f b6 c0             	movzx  eax,al
c001790b:	c1 e0 08             	shl    eax,0x8
c001790e:	09 d0                	or     eax,edx
c0017910:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017914:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017919:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001791d:	8d 50 01             	lea    edx,[eax+0x1]
c0017920:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017924:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017928:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001792c:	0f b6 c0             	movzx  eax,al
c001792f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017933:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017937:	c1 e0 08             	shl    eax,0x8
c001793a:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001793e:	89 c1                	mov    ecx,eax
c0017940:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017944:	c1 e0 18             	shl    eax,0x18
c0017947:	89 c3                	mov    ebx,eax
c0017949:	a1 50 e1 02 c0       	mov    eax,ds:0xc002e150
c001794e:	8d 50 01             	lea    edx,[eax+0x1]
c0017951:	89 15 50 e1 02 c0    	mov    DWORD PTR ds:0xc002e150,edx
c0017957:	09 d9                	or     ecx,ebx
c0017959:	89 ca                	mov    edx,ecx
c001795b:	89 14 85 60 e1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1ea0],edx
c0017962:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017966:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001796a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001796e:	68 3c aa 02 c0       	push   0xc002aa3c
c0017973:	e8 7b af ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0017978:	83 c4 10             	add    esp,0x10
c001797b:	eb 0c                	jmp    c0017989 <scanMADT()+0x469>
c001797d:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0017982:	75 05                	jne    c0017989 <scanMADT()+0x469>
c0017984:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0017989:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c001798e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017992:	01 d0                	add    eax,edx
c0017994:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017998:	e9 54 fc ff ff       	jmp    c00175f1 <scanMADT()+0xd1>
c001799d:	90                   	nop
c001799e:	eb 01                	jmp    c00179a1 <scanMADT()+0x481>
c00179a0:	90                   	nop
c00179a1:	83 c4 38             	add    esp,0x38
c00179a4:	5b                   	pop    ebx
c00179a5:	c3                   	ret    

c00179a6 <ACPI::ACPI()>:
c00179a6:	83 ec 0c             	sub    esp,0xc
c00179a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179ad:	83 ec 08             	sub    esp,0x8
c00179b0:	68 df a8 02 c0       	push   0xc002a8df
c00179b5:	50                   	push   eax
c00179b6:	e8 4f c5 ff ff       	call   c0013f0a <Device::Device(char const*)>
c00179bb:	83 c4 10             	add    esp,0x10
c00179be:	ba b0 aa 02 c0       	mov    edx,0xc002aab0
c00179c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179c7:	89 10                	mov    DWORD PTR [eax],edx
c00179c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179cd:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00179d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179d8:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c00179e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179e6:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c00179f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179f4:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c00179fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179ff:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c0017a06:	e8 15 fb ff ff       	call   c0017520 <scanMADT()>
c0017a0b:	90                   	nop
c0017a0c:	83 c4 0c             	add    esp,0xc
c0017a0f:	c3                   	ret    

c0017a10 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0017a10:	83 ec 2c             	sub    esp,0x2c
c0017a13:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017a17:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017a1b:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017a1f:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0017a23:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0017a28:	88 d0                	mov    al,dl
c0017a2a:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017a2e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017a33:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017a3b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017a3f:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017a45:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0017a49:	0f 8d 97 00 00 00    	jge    c0017ae6 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0017a4f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017a53:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017a57:	83 c2 2a             	add    edx,0x2a
c0017a5a:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0017a5e:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0017a63:	75 78                	jne    c0017add <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017a65:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017a69:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017a6d:	83 c2 2a             	add    edx,0x2a
c0017a70:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0017a74:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0017a78:	75 63                	jne    c0017add <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017a7a:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017a7f:	74 3a                	je     c0017abb <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0017a81:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017a85:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017a89:	83 c2 2a             	add    edx,0x2a
c0017a8c:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0017a90:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017a94:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017a97:	39 c2                	cmp    edx,eax
c0017a99:	74 10                	je     c0017aab <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0017a9b:	83 ec 0c             	sub    esp,0xc
c0017a9e:	68 78 aa 02 c0       	push   0xc002aa78
c0017aa3:	e8 a5 21 00 00       	call   c0019c4d <Krnl::panic(char const*)>
c0017aa8:	83 c4 10             	add    esp,0x10
c0017aab:	83 ec 0c             	sub    esp,0xc
c0017aae:	68 e4 a8 02 c0       	push   0xc002a8e4
c0017ab3:	e8 95 21 00 00       	call   c0019c4d <Krnl::panic(char const*)>
c0017ab8:	83 c4 10             	add    esp,0x10
c0017abb:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0017abf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017ac3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017ac7:	83 c2 2a             	add    edx,0x2a
c0017aca:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0017ace:	8b 02                	mov    eax,DWORD PTR [edx]
c0017ad0:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0017ad3:	89 01                	mov    DWORD PTR [ecx],eax
c0017ad5:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017ad8:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017add:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0017ae1:	e9 55 ff ff ff       	jmp    c0017a3b <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0017ae6:	90                   	nop
c0017ae7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017aeb:	83 c4 2c             	add    esp,0x2c
c0017aee:	c2 04 00             	ret    0x4
c0017af1:	90                   	nop

c0017af2 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0017af2:	83 ec 1c             	sub    esp,0x1c
c0017af5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017af9:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0017afd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017b01:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0017b06:	88 c8                	mov    al,cl
c0017b08:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017b0c:	88 d0                	mov    al,dl
c0017b0e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017b12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b16:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017b1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b20:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017b23:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0017b27:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0017b2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b2f:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017b35:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017b39:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0017b3c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017b40:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0017b45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b49:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017b4f:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017b53:	8d 48 01             	lea    ecx,[eax+0x1]
c0017b56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b5a:	83 c2 2a             	add    edx,0x2a
c0017b5d:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0017b61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b65:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017b6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b6f:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017b72:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017b76:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0017b7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b7e:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017b84:	8d 50 01             	lea    edx,[eax+0x1]
c0017b87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b8b:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0017b91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b95:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017b9b:	3d 00 02 00 00       	cmp    eax,0x200
c0017ba0:	75 10                	jne    c0017bb2 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0017ba2:	83 ec 0c             	sub    esp,0xc
c0017ba5:	68 f3 a8 02 c0       	push   0xc002a8f3
c0017baa:	e8 9e 20 00 00       	call   c0019c4d <Krnl::panic(char const*)>
c0017baf:	83 c4 10             	add    esp,0x10
c0017bb2:	90                   	nop
c0017bb3:	83 c4 1c             	add    esp,0x1c
c0017bb6:	c3                   	ret    
c0017bb7:	90                   	nop

c0017bb8 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0017bb8:	b8 00 00 00 00       	mov    eax,0x0
c0017bbd:	c3                   	ret    

c0017bbe <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0017bbe:	83 ec 1c             	sub    esp,0x1c
c0017bc1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017bc5:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0017bc8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017bcc:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c0017bd1:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017bd6:	83 ec 08             	sub    esp,0x8
c0017bd9:	52                   	push   edx
c0017bda:	50                   	push   eax
c0017bdb:	e8 5c 70 ff ff       	call   c000ec3c <Computer::readCMOS(unsigned char)>
c0017be0:	83 c4 10             	add    esp,0x10
c0017be3:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0017be7:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c0017bec:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017bf1:	83 ec 04             	sub    esp,0x4
c0017bf4:	6a 01                	push   0x1
c0017bf6:	52                   	push   edx
c0017bf7:	50                   	push   eax
c0017bf8:	e8 55 71 ff ff       	call   c000ed52 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017bfd:	83 c4 10             	add    esp,0x10
c0017c00:	90                   	nop
c0017c01:	83 c4 1c             	add    esp,0x1c
c0017c04:	c3                   	ret    
c0017c05:	90                   	nop

c0017c06 <ACPI::open(int, int, void*)>:
c0017c06:	53                   	push   ebx
c0017c07:	83 ec 28             	sub    esp,0x28
c0017c0a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c0e:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c0017c15:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c19:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c0017c20:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c0017c25:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017c2b:	83 e0 04             	and    eax,0x4
c0017c2e:	84 c0                	test   al,al
c0017c30:	74 47                	je     c0017c79 <ACPI::open(int, int, void*)+0x73>
c0017c32:	a1 48 e1 02 c0       	mov    eax,ds:0xc002e148
c0017c37:	83 ec 08             	sub    esp,0x8
c0017c3a:	68 10 a9 02 c0       	push   0xc002a910
c0017c3f:	50                   	push   eax
c0017c40:	e8 3f f8 ff ff       	call   c0017484 <findDataTable(unsigned char*, char*)>
c0017c45:	83 c4 10             	add    esp,0x10
c0017c48:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017c4c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0017c51:	74 26                	je     c0017c79 <ACPI::open(int, int, void*)+0x73>
c0017c53:	83 ec 0c             	sub    esp,0xc
c0017c56:	68 15 a9 02 c0       	push   0xc002a915
c0017c5b:	e8 93 ac ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0017c60:	83 c4 10             	add    esp,0x10
c0017c63:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c67:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0017c6e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c72:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0017c79:	c7 44 24 18 5f 0c 00 00 	mov    DWORD PTR [esp+0x18],0xc5f
c0017c81:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017c85:	8a 00                	mov    al,BYTE PTR [eax]
c0017c87:	3c 01                	cmp    al,0x1
c0017c89:	75 28                	jne    c0017cb3 <ACPI::open(int, int, void*)+0xad>
c0017c8b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c8f:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0017c96:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c9a:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0017ca1:	83 ec 0c             	sub    esp,0xc
c0017ca4:	68 26 a9 02 c0       	push   0xc002a926
c0017ca9:	e8 45 ac ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0017cae:	83 c4 10             	add    esp,0x10
c0017cb1:	eb 25                	jmp    c0017cd8 <ACPI::open(int, int, void*)+0xd2>
c0017cb3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017cb7:	8a 00                	mov    al,BYTE PTR [eax]
c0017cb9:	3c 02                	cmp    al,0x2
c0017cbb:	75 1b                	jne    c0017cd8 <ACPI::open(int, int, void*)+0xd2>
c0017cbd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017cc1:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0017cc8:	83 ec 0c             	sub    esp,0xc
c0017ccb:	68 2e a9 02 c0       	push   0xc002a92e
c0017cd0:	e8 1e ac ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0017cd5:	83 c4 10             	add    esp,0x10
c0017cd8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017cdc:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0017ce2:	83 f0 01             	xor    eax,0x1
c0017ce5:	84 c0                	test   al,al
c0017ce7:	74 6a                	je     c0017d53 <ACPI::open(int, int, void*)+0x14d>
c0017ce9:	83 ec 0c             	sub    esp,0xc
c0017cec:	68 36 a9 02 c0       	push   0xc002a936
c0017cf1:	e8 fd ab ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0017cf6:	83 c4 10             	add    esp,0x10
c0017cf9:	e8 52 84 fe ff       	call   c0000150 <manualPCIProbe>
c0017cfe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017d02:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c0017d07:	75 28                	jne    c0017d31 <ACPI::open(int, int, void*)+0x12b>
c0017d09:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017d0d:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0017d14:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017d18:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0017d1f:	83 ec 0c             	sub    esp,0xc
c0017d22:	68 44 a9 02 c0       	push   0xc002a944
c0017d27:	e8 c7 ab ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0017d2c:	83 c4 10             	add    esp,0x10
c0017d2f:	eb 22                	jmp    c0017d53 <ACPI::open(int, int, void*)+0x14d>
c0017d31:	83 7c 24 14 02       	cmp    DWORD PTR [esp+0x14],0x2
c0017d36:	75 1b                	jne    c0017d53 <ACPI::open(int, int, void*)+0x14d>
c0017d38:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017d3c:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0017d43:	83 ec 0c             	sub    esp,0xc
c0017d46:	68 4e a9 02 c0       	push   0xc002a94e
c0017d4b:	e8 a3 ab ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0017d50:	83 c4 10             	add    esp,0x10
c0017d53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017d57:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0017d5d:	84 c0                	test   al,al
c0017d5f:	74 13                	je     c0017d74 <ACPI::open(int, int, void*)+0x16e>
c0017d61:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017d65:	8a 80 65 12 00 00    	mov    al,BYTE PTR [eax+0x1265]
c0017d6b:	83 f0 01             	xor    eax,0x1
c0017d6e:	0f b6 c0             	movzx  eax,al
c0017d71:	40                   	inc    eax
c0017d72:	eb 05                	jmp    c0017d79 <ACPI::open(int, int, void*)+0x173>
c0017d74:	b8 00 00 00 00       	mov    eax,0x0
c0017d79:	83 ec 08             	sub    esp,0x8
c0017d7c:	50                   	push   eax
c0017d7d:	68 58 a9 02 c0       	push   0xc002a958
c0017d82:	e8 6c ab ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0017d87:	83 c4 10             	add    esp,0x10
c0017d8a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017d8e:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0017d94:	84 c0                	test   al,al
c0017d96:	74 67                	je     c0017dff <ACPI::open(int, int, void*)+0x1f9>
c0017d98:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c0017da0:	83 ec 0c             	sub    esp,0xc
c0017da3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017da7:	e8 78 78 ff ff       	call   c000f624 <malloc>
c0017dac:	83 c4 10             	add    esp,0x10
c0017daf:	89 c3                	mov    ebx,eax
c0017db1:	83 ec 0c             	sub    esp,0xc
c0017db4:	53                   	push   ebx
c0017db5:	e8 ce 9f 00 00       	call   c0021d88 <PCI::PCI()>
c0017dba:	83 c4 10             	add    esp,0x10
c0017dbd:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0017dc1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017dc5:	83 ec 08             	sub    esp,0x8
c0017dc8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017dcc:	50                   	push   eax
c0017dcd:	e8 48 bf ff ff       	call   c0013d1a <Device::addChild(Device*)>
c0017dd2:	83 c4 10             	add    esp,0x10
c0017dd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017dd9:	8b 00                	mov    eax,DWORD PTR [eax]
c0017ddb:	83 c0 08             	add    eax,0x8
c0017dde:	8b 00                	mov    eax,DWORD PTR [eax]
c0017de0:	6a 00                	push   0x0
c0017de2:	6a 00                	push   0x0
c0017de4:	6a 00                	push   0x0
c0017de6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017dea:	ff d0                	call   eax
c0017dec:	83 c4 10             	add    esp,0x10
c0017def:	83 ec 0c             	sub    esp,0xc
c0017df2:	68 61 a9 02 c0       	push   0xc002a961
c0017df7:	e8 f7 aa ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0017dfc:	83 c4 10             	add    esp,0x10
c0017dff:	83 ec 0c             	sub    esp,0xc
c0017e02:	68 6c a9 02 c0       	push   0xc002a96c
c0017e07:	e8 b1 43 00 00       	call   c001c1bd <Thr::loadKernelSymbolTable(char const*)>
c0017e0c:	83 c4 10             	add    esp,0x10
c0017e0f:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c0017e14:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017e1a:	83 e0 04             	and    eax,0x4
c0017e1d:	84 c0                	test   al,al
c0017e1f:	0f 84 d2 00 00 00    	je     c0017ef7 <ACPI::open(int, int, void*)+0x2f1>
c0017e25:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0017e2c:	83 ec 0c             	sub    esp,0xc
c0017e2f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017e33:	e8 ec 77 ff ff       	call   c000f624 <malloc>
c0017e38:	83 c4 10             	add    esp,0x10
c0017e3b:	89 c3                	mov    ebx,eax
c0017e3d:	a1 d4 ed 02 c0       	mov    eax,ds:0xc002edd4
c0017e42:	83 ec 04             	sub    esp,0x4
c0017e45:	50                   	push   eax
c0017e46:	68 8a a9 02 c0       	push   0xc002a98a
c0017e4b:	53                   	push   ebx
c0017e4c:	e8 fb af ff ff       	call   c0012e4c <File::File(char const*, Process*)>
c0017e51:	83 c4 10             	add    esp,0x10
c0017e54:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0017e58:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017e5d:	74 17                	je     c0017e76 <ACPI::open(int, int, void*)+0x270>
c0017e5f:	83 ec 0c             	sub    esp,0xc
c0017e62:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017e66:	e8 b3 b2 ff ff       	call   c001311e <File::exists()>
c0017e6b:	83 c4 10             	add    esp,0x10
c0017e6e:	84 c0                	test   al,al
c0017e70:	74 04                	je     c0017e76 <ACPI::open(int, int, void*)+0x270>
c0017e72:	b0 01                	mov    al,0x1
c0017e74:	eb 02                	jmp    c0017e78 <ACPI::open(int, int, void*)+0x272>
c0017e76:	b0 00                	mov    al,0x0
c0017e78:	84 c0                	test   al,al
c0017e7a:	74 22                	je     c0017e9e <ACPI::open(int, int, void*)+0x298>
c0017e7c:	83 ec 08             	sub    esp,0x8
c0017e7f:	6a 01                	push   0x1
c0017e81:	68 8a a9 02 c0       	push   0xc002a98a
c0017e86:	e8 85 4d 00 00       	call   c001cc10 <Thr::loadDLL(char const*, bool)>
c0017e8b:	83 c4 10             	add    esp,0x10
c0017e8e:	83 ec 08             	sub    esp,0x8
c0017e91:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0017e95:	50                   	push   eax
c0017e96:	e8 84 4f 00 00       	call   c001ce1f <Thr::executeDLL(unsigned long, void*)>
c0017e9b:	83 c4 10             	add    esp,0x10
c0017e9e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017ea3:	74 1e                	je     c0017ec3 <ACPI::open(int, int, void*)+0x2bd>
c0017ea5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017eaa:	74 17                	je     c0017ec3 <ACPI::open(int, int, void*)+0x2bd>
c0017eac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017eb0:	8b 00                	mov    eax,DWORD PTR [eax]
c0017eb2:	83 c0 08             	add    eax,0x8
c0017eb5:	8b 00                	mov    eax,DWORD PTR [eax]
c0017eb7:	83 ec 0c             	sub    esp,0xc
c0017eba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017ebe:	ff d0                	call   eax
c0017ec0:	83 c4 10             	add    esp,0x10
c0017ec3:	a1 48 e1 02 c0       	mov    eax,ds:0xc002e148
c0017ec8:	83 ec 08             	sub    esp,0x8
c0017ecb:	68 a7 a9 02 c0       	push   0xc002a9a7
c0017ed0:	50                   	push   eax
c0017ed1:	e8 ae f5 ff ff       	call   c0017484 <findDataTable(unsigned char*, char*)>
c0017ed6:	83 c4 10             	add    esp,0x10
c0017ed9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017edd:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017ee2:	74 13                	je     c0017ef7 <ACPI::open(int, int, void*)+0x2f1>
c0017ee4:	83 ec 08             	sub    esp,0x8
c0017ee7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017eeb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017eef:	e8 ca fc ff ff       	call   c0017bbe <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0017ef4:	83 c4 10             	add    esp,0x10
c0017ef7:	8b 1d 88 d8 02 c0    	mov    ebx,DWORD PTR ds:0xc002d888
c0017efd:	83 ec 08             	sub    esp,0x8
c0017f00:	6a 01                	push   0x1
c0017f02:	68 ac a9 02 c0       	push   0xc002a9ac
c0017f07:	e8 04 4d 00 00       	call   c001cc10 <Thr::loadDLL(char const*, bool)>
c0017f0c:	83 c4 10             	add    esp,0x10
c0017f0f:	83 ec 08             	sub    esp,0x8
c0017f12:	53                   	push   ebx
c0017f13:	50                   	push   eax
c0017f14:	e8 06 4f 00 00       	call   c001ce1f <Thr::executeDLL(unsigned long, void*)>
c0017f19:	83 c4 10             	add    esp,0x10
c0017f1c:	8b 1d 88 d8 02 c0    	mov    ebx,DWORD PTR ds:0xc002d888
c0017f22:	83 ec 08             	sub    esp,0x8
c0017f25:	6a 01                	push   0x1
c0017f27:	68 c9 a9 02 c0       	push   0xc002a9c9
c0017f2c:	e8 df 4c 00 00       	call   c001cc10 <Thr::loadDLL(char const*, bool)>
c0017f31:	83 c4 10             	add    esp,0x10
c0017f34:	83 ec 08             	sub    esp,0x8
c0017f37:	53                   	push   ebx
c0017f38:	50                   	push   eax
c0017f39:	e8 e1 4e 00 00       	call   c001ce1f <Thr::executeDLL(unsigned long, void*)>
c0017f3e:	83 c4 10             	add    esp,0x10
c0017f41:	b8 00 00 00 00       	mov    eax,0x0
c0017f46:	83 c4 28             	add    esp,0x28
c0017f49:	5b                   	pop    ebx
c0017f4a:	c3                   	ret    
c0017f4b:	90                   	nop

c0017f4c <ACPI::sleep()>:
c0017f4c:	83 ec 0c             	sub    esp,0xc
c0017f4f:	a1 20 df 02 c0       	mov    eax,ds:0xc002df20
c0017f54:	85 c0                	test   eax,eax
c0017f56:	74 07                	je     c0017f5f <ACPI::sleep()+0x13>
c0017f58:	a1 20 df 02 c0       	mov    eax,ds:0xc002df20
c0017f5d:	ff d0                	call   eax
c0017f5f:	90                   	nop
c0017f60:	83 c4 0c             	add    esp,0xc
c0017f63:	c3                   	ret    

c0017f64 <CPU::close(int, int, void*)>:
c0017f64:	31 c0                	xor    eax,eax
c0017f66:	c3                   	ret    
c0017f67:	90                   	nop

c0017f68 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0017f68:	55                   	push   ebp
c0017f69:	57                   	push   edi
c0017f6a:	56                   	push   esi
c0017f6b:	53                   	push   ebx
c0017f6c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0017f70:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017f74:	89 ce                	mov    esi,ecx
c0017f76:	89 d5                	mov    ebp,edx
c0017f78:	80 f9 04             	cmp    cl,0x4
c0017f7b:	75 28                	jne    c0017fa5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0017f7d:	8d 42 f9             	lea    eax,[edx-0x7]
c0017f80:	3c 03                	cmp    al,0x3
c0017f82:	0f 86 63 01 00 00    	jbe    c00180eb <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0017f88:	80 fa 03             	cmp    dl,0x3
c0017f8b:	0f 84 5a 01 00 00    	je     c00180eb <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0017f91:	8d 7a f2             	lea    edi,[edx-0xe]
c0017f94:	b8 b0 cc 02 c0       	mov    eax,0xc002ccb0
c0017f99:	89 fb                	mov    ebx,edi
c0017f9b:	80 fb 01             	cmp    bl,0x1
c0017f9e:	77 4e                	ja     c0017fee <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0017fa0:	e9 52 01 00 00       	jmp    c00180f7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017fa5:	80 f9 05             	cmp    cl,0x5
c0017fa8:	75 4d                	jne    c0017ff7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0017faa:	b8 c0 cc 02 c0       	mov    eax,0xc002ccc0
c0017faf:	80 fa 03             	cmp    dl,0x3
c0017fb2:	0f 86 3f 01 00 00    	jbe    c00180f7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017fb8:	8d 7a fa             	lea    edi,[edx-0x6]
c0017fbb:	b8 d0 cc 02 c0       	mov    eax,0xc002ccd0
c0017fc0:	89 fb                	mov    ebx,edi
c0017fc2:	80 fb 01             	cmp    bl,0x1
c0017fc5:	0f 86 2c 01 00 00    	jbe    c00180f7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017fcb:	b8 e0 cc 02 c0       	mov    eax,0xc002cce0
c0017fd0:	80 fa 08             	cmp    dl,0x8
c0017fd3:	0f 84 1e 01 00 00    	je     c00180f7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017fd9:	89 d7                	mov    edi,edx
c0017fdb:	b8 f0 cc 02 c0       	mov    eax,0xc002ccf0
c0017fe0:	83 e7 fb             	and    edi,0xfffffffb
c0017fe3:	89 fb                	mov    ebx,edi
c0017fe5:	80 fb 09             	cmp    bl,0x9
c0017fe8:	0f 84 09 01 00 00    	je     c00180f7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017fee:	31 c0                	xor    eax,eax
c0017ff0:	89 eb                	mov    ebx,ebp
c0017ff2:	0f b6 fb             	movzx  edi,bl
c0017ff5:	eb 30                	jmp    c0018027 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0017ff7:	31 c0                	xor    eax,eax
c0017ff9:	80 f9 06             	cmp    cl,0x6
c0017ffc:	75 f2                	jne    c0017ff0 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0017ffe:	80 fa 0a             	cmp    dl,0xa
c0018001:	77 ed                	ja     c0017ff0 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018003:	bf de 05 00 00       	mov    edi,0x5de
c0018008:	0f a3 d7             	bt     edi,edx
c001800b:	73 e3                	jae    c0017ff0 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001800d:	b8 00 cd 02 c0       	mov    eax,0xc002cd00
c0018012:	e9 e0 00 00 00       	jmp    c00180f7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018017:	39 c7                	cmp    edi,eax
c0018019:	0f 84 d3 00 00 00    	je     c00180f2 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c001801f:	40                   	inc    eax
c0018020:	3d d0 00 00 00       	cmp    eax,0xd0
c0018025:	74 09                	je     c0018030 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0018027:	89 f3                	mov    ebx,esi
c0018029:	80 fb 0f             	cmp    bl,0xf
c001802c:	75 f1                	jne    c001801f <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c001802e:	eb e7                	jmp    c0018017 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0018030:	80 f9 10             	cmp    cl,0x10
c0018033:	75 14                	jne    c0018049 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0018035:	8d 42 fc             	lea    eax,[edx-0x4]
c0018038:	83 e0 fb             	and    eax,0xfffffffb
c001803b:	3c 02                	cmp    al,0x2
c001803d:	76 34                	jbe    c0018073 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c001803f:	b8 c6 ad 02 c0       	mov    eax,0xc002adc6
c0018044:	80 fa 02             	cmp    dl,0x2
c0018047:	eb 24                	jmp    c001806d <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0018049:	80 f9 11             	cmp    cl,0x11
c001804c:	75 13                	jne    c0018061 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c001804e:	b8 c6 ad 02 c0       	mov    eax,0xc002adc6
c0018053:	80 fa 03             	cmp    dl,0x3
c0018056:	0f 85 9b 00 00 00    	jne    c00180f7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001805c:	e9 91 00 00 00       	jmp    c00180f2 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018061:	80 f9 12             	cmp    cl,0x12
c0018064:	75 14                	jne    c001807a <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0018066:	b8 c6 ad 02 c0       	mov    eax,0xc002adc6
c001806b:	fe ca                	dec    dl
c001806d:	0f 85 84 00 00 00    	jne    c00180f7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018073:	b8 20 cd 02 c0       	mov    eax,0xc002cd20
c0018078:	eb 7d                	jmp    c00180f7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001807a:	80 f9 14             	cmp    cl,0x14
c001807d:	75 12                	jne    c0018091 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c001807f:	4a                   	dec    edx
c0018080:	b8 c6 ad 02 c0       	mov    eax,0xc002adc6
c0018085:	80 fa 01             	cmp    dl,0x1
c0018088:	77 6d                	ja     c00180f7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001808a:	b8 30 cd 02 c0       	mov    eax,0xc002cd30
c001808f:	eb 66                	jmp    c00180f7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018091:	80 f9 15             	cmp    cl,0x15
c0018094:	75 31                	jne    c00180c7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0018096:	b8 40 cd 02 c0       	mov    eax,0xc002cd40
c001809b:	80 fa 01             	cmp    dl,0x1
c001809e:	74 57                	je     c00180f7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00180a0:	b8 c6 ad 02 c0       	mov    eax,0xc002adc6
c00180a5:	80 fa 13             	cmp    dl,0x13
c00180a8:	76 0c                	jbe    c00180b6 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c00180aa:	80 fa 30             	cmp    dl,0x30
c00180ad:	75 48                	jne    c00180f7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00180af:	b8 60 cd 02 c0       	mov    eax,0xc002cd60
c00180b4:	eb 41                	jmp    c00180f7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00180b6:	b9 04 00 09 00       	mov    ecx,0x90004
c00180bb:	0f a3 d1             	bt     ecx,edx
c00180be:	73 37                	jae    c00180f7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00180c0:	b8 50 cd 02 c0       	mov    eax,0xc002cd50
c00180c5:	eb 30                	jmp    c00180f7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00180c7:	b8 c6 ad 02 c0       	mov    eax,0xc002adc6
c00180cc:	80 f9 16             	cmp    cl,0x16
c00180cf:	75 26                	jne    c00180f7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00180d1:	b8 70 cd 02 c0       	mov    eax,0xc002cd70
c00180d6:	84 d2                	test   dl,dl
c00180d8:	74 1d                	je     c00180f7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00180da:	b8 c6 ad 02 c0       	mov    eax,0xc002adc6
c00180df:	80 fa 30             	cmp    dl,0x30
c00180e2:	75 13                	jne    c00180f7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00180e4:	b8 80 cd 02 c0       	mov    eax,0xc002cd80
c00180e9:	eb 0c                	jmp    c00180f7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00180eb:	b8 a0 cc 02 c0       	mov    eax,0xc002cca0
c00180f0:	eb 05                	jmp    c00180f7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00180f2:	b8 10 cd 02 c0       	mov    eax,0xc002cd10
c00180f7:	5b                   	pop    ebx
c00180f8:	5e                   	pop    esi
c00180f9:	5f                   	pop    edi
c00180fa:	5d                   	pop    ebp
c00180fb:	c3                   	ret    

c00180fc <CPU::lookupIntelName(unsigned char, unsigned char)>:
c00180fc:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018100:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018104:	80 f9 04             	cmp    cl,0x4
c0018107:	75 6b                	jne    c0018174 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0018109:	b8 00 cb 02 c0       	mov    eax,0xc002cb00
c001810e:	80 fa 01             	cmp    dl,0x1
c0018111:	0f 86 92 02 00 00    	jbe    c00183a9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018117:	b8 10 cb 02 c0       	mov    eax,0xc002cb10
c001811c:	80 fa 02             	cmp    dl,0x2
c001811f:	0f 84 84 02 00 00    	je     c00183a9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018125:	b8 20 cb 02 c0       	mov    eax,0xc002cb20
c001812a:	80 fa 03             	cmp    dl,0x3
c001812d:	0f 84 76 02 00 00    	je     c00183a9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018133:	b8 30 cb 02 c0       	mov    eax,0xc002cb30
c0018138:	80 fa 04             	cmp    dl,0x4
c001813b:	0f 84 68 02 00 00    	je     c00183a9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018141:	b8 40 cb 02 c0       	mov    eax,0xc002cb40
c0018146:	80 fa 05             	cmp    dl,0x5
c0018149:	0f 84 5a 02 00 00    	je     c00183a9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001814f:	b8 20 cb 02 c0       	mov    eax,0xc002cb20
c0018154:	80 fa 07             	cmp    dl,0x7
c0018157:	0f 84 4c 02 00 00    	je     c00183a9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001815d:	83 ea 08             	sub    edx,0x8
c0018160:	b8 c6 ad 02 c0       	mov    eax,0xc002adc6
c0018165:	80 fa 01             	cmp    dl,0x1
c0018168:	0f 87 3b 02 00 00    	ja     c00183a9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001816e:	b8 50 cb 02 c0       	mov    eax,0xc002cb50
c0018173:	c3                   	ret    
c0018174:	80 f9 05             	cmp    cl,0x5
c0018177:	75 45                	jne    c00181be <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0018179:	8d 4a ff             	lea    ecx,[edx-0x1]
c001817c:	b8 60 cb 02 c0       	mov    eax,0xc002cb60
c0018181:	80 f9 02             	cmp    cl,0x2
c0018184:	0f 86 1f 02 00 00    	jbe    c00183a9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001818a:	80 fa 04             	cmp    dl,0x4
c001818d:	0f 84 f3 01 00 00    	je     c0018386 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0018193:	80 fa 07             	cmp    dl,0x7
c0018196:	0f 84 0d 02 00 00    	je     c00183a9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001819c:	b8 70 cb 02 c0       	mov    eax,0xc002cb70
c00181a1:	80 fa 08             	cmp    dl,0x8
c00181a4:	0f 84 ff 01 00 00    	je     c00183a9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00181aa:	b8 c6 ad 02 c0       	mov    eax,0xc002adc6
c00181af:	80 fa 09             	cmp    dl,0x9
c00181b2:	0f 85 f1 01 00 00    	jne    c00183a9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00181b8:	b8 80 cb 02 c0       	mov    eax,0xc002cb80
c00181bd:	c3                   	ret    
c00181be:	80 f9 06             	cmp    cl,0x6
c00181c1:	0f 85 85 01 00 00    	jne    c001834c <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c00181c7:	b8 90 cb 02 c0       	mov    eax,0xc002cb90
c00181cc:	80 fa 01             	cmp    dl,0x1
c00181cf:	0f 84 d4 01 00 00    	je     c00183a9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00181d5:	8d 42 fb             	lea    eax,[edx-0x5]
c00181d8:	3c 01                	cmp    al,0x1
c00181da:	0f 86 ac 01 00 00    	jbe    c001838c <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c00181e0:	80 fa 03             	cmp    dl,0x3
c00181e3:	0f 84 a3 01 00 00    	je     c001838c <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c00181e9:	8d 4a f9             	lea    ecx,[edx-0x7]
c00181ec:	b8 b0 cb 02 c0       	mov    eax,0xc002cbb0
c00181f1:	80 f9 01             	cmp    cl,0x1
c00181f4:	0f 86 af 01 00 00    	jbe    c00183a9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00181fa:	80 fa 09             	cmp    dl,0x9
c00181fd:	0f 84 8f 01 00 00    	je     c0018392 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0018203:	8d 4a f6             	lea    ecx,[edx-0xa]
c0018206:	80 f9 01             	cmp    cl,0x1
c0018209:	0f 86 9a 01 00 00    	jbe    c00183a9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001820f:	b8 c0 cb 02 c0       	mov    eax,0xc002cbc0
c0018214:	80 fa 0d             	cmp    dl,0xd
c0018217:	0f 84 8c 01 00 00    	je     c00183a9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001821d:	b8 d0 cb 02 c0       	mov    eax,0xc002cbd0
c0018222:	80 fa 0e             	cmp    dl,0xe
c0018225:	0f 84 7e 01 00 00    	je     c00183a9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001822b:	b8 e0 cb 02 c0       	mov    eax,0xc002cbe0
c0018230:	80 fa 0f             	cmp    dl,0xf
c0018233:	0f 84 70 01 00 00    	je     c00183a9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018239:	b8 c0 cb 02 c0       	mov    eax,0xc002cbc0
c001823e:	80 fa 15             	cmp    dl,0x15
c0018241:	0f 84 62 01 00 00    	je     c00183a9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018247:	8d 4a ea             	lea    ecx,[edx-0x16]
c001824a:	b8 e0 cb 02 c0       	mov    eax,0xc002cbe0
c001824f:	80 f9 01             	cmp    cl,0x1
c0018252:	0f 86 51 01 00 00    	jbe    c00183a9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018258:	80 fa 1a             	cmp    dl,0x1a
c001825b:	0f 84 37 01 00 00    	je     c0018398 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0018261:	80 fa 1c             	cmp    dl,0x1c
c0018264:	0f 84 34 01 00 00    	je     c001839e <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c001826a:	80 fa 1d             	cmp    dl,0x1d
c001826d:	0f 84 36 01 00 00    	je     c00183a9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018273:	b8 10 cc 02 c0       	mov    eax,0xc002cc10
c0018278:	80 fa 25             	cmp    dl,0x25
c001827b:	0f 84 28 01 00 00    	je     c00183a9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018281:	8d 4a da             	lea    ecx,[edx-0x26]
c0018284:	b8 00 cc 02 c0       	mov    eax,0xc002cc00
c0018289:	80 f9 01             	cmp    cl,0x1
c001828c:	0f 86 17 01 00 00    	jbe    c00183a9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018292:	b8 20 cc 02 c0       	mov    eax,0xc002cc20
c0018297:	80 fa 2a             	cmp    dl,0x2a
c001829a:	0f 84 09 01 00 00    	je     c00183a9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00182a0:	b8 10 cc 02 c0       	mov    eax,0xc002cc10
c00182a5:	80 fa 2c             	cmp    dl,0x2c
c00182a8:	0f 84 fb 00 00 00    	je     c00183a9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00182ae:	b8 20 cc 02 c0       	mov    eax,0xc002cc20
c00182b3:	80 fa 2d             	cmp    dl,0x2d
c00182b6:	0f 84 ed 00 00 00    	je     c00183a9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00182bc:	b8 f0 cb 02 c0       	mov    eax,0xc002cbf0
c00182c1:	80 fa 2e             	cmp    dl,0x2e
c00182c4:	0f 84 df 00 00 00    	je     c00183a9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00182ca:	b8 10 cc 02 c0       	mov    eax,0xc002cc10
c00182cf:	80 fa 2f             	cmp    dl,0x2f
c00182d2:	0f 84 d1 00 00 00    	je     c00183a9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00182d8:	8d 4a cb             	lea    ecx,[edx-0x35]
c00182db:	b8 00 cc 02 c0       	mov    eax,0xc002cc00
c00182e0:	80 f9 01             	cmp    cl,0x1
c00182e3:	0f 86 c0 00 00 00    	jbe    c00183a9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00182e9:	b8 30 cc 02 c0       	mov    eax,0xc002cc30
c00182ee:	80 fa 37             	cmp    dl,0x37
c00182f1:	0f 84 b2 00 00 00    	je     c00183a9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00182f7:	b8 40 cc 02 c0       	mov    eax,0xc002cc40
c00182fc:	80 fa 3a             	cmp    dl,0x3a
c00182ff:	0f 84 a4 00 00 00    	je     c00183a9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018305:	b8 50 cc 02 c0       	mov    eax,0xc002cc50
c001830a:	80 fa 3c             	cmp    dl,0x3c
c001830d:	0f 84 96 00 00 00    	je     c00183a9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018313:	b8 60 cc 02 c0       	mov    eax,0xc002cc60
c0018318:	80 fa 3d             	cmp    dl,0x3d
c001831b:	0f 84 88 00 00 00    	je     c00183a9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018321:	b8 40 cc 02 c0       	mov    eax,0xc002cc40
c0018326:	80 fa 3e             	cmp    dl,0x3e
c0018329:	74 7e                	je     c00183a9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001832b:	8d 42 bb             	lea    eax,[edx-0x45]
c001832e:	3c 01                	cmp    al,0x1
c0018330:	76 72                	jbe    c00183a4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018332:	80 fa 3f             	cmp    dl,0x3f
c0018335:	74 6d                	je     c00183a4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018337:	80 fa 4a             	cmp    dl,0x4a
c001833a:	74 0a                	je     c0018346 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c001833c:	b8 c6 ad 02 c0       	mov    eax,0xc002adc6
c0018341:	80 fa 4d             	cmp    dl,0x4d
c0018344:	75 63                	jne    c00183a9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018346:	b8 30 cc 02 c0       	mov    eax,0xc002cc30
c001834b:	c3                   	ret    
c001834c:	b8 c6 ad 02 c0       	mov    eax,0xc002adc6
c0018351:	80 f9 0b             	cmp    cl,0xb
c0018354:	75 0a                	jne    c0018360 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018356:	fe ca                	dec    dl
c0018358:	75 4f                	jne    c00183a9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001835a:	b8 70 cc 02 c0       	mov    eax,0xc002cc70
c001835f:	c3                   	ret    
c0018360:	80 f9 0f             	cmp    cl,0xf
c0018363:	75 44                	jne    c00183a9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018365:	b8 80 cc 02 c0       	mov    eax,0xc002cc80
c001836a:	80 fa 02             	cmp    dl,0x2
c001836d:	76 3a                	jbe    c00183a9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001836f:	8d 42 fd             	lea    eax,[edx-0x3]
c0018372:	3c 01                	cmp    al,0x1
c0018374:	76 0a                	jbe    c0018380 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018376:	b8 c6 ad 02 c0       	mov    eax,0xc002adc6
c001837b:	80 fa 06             	cmp    dl,0x6
c001837e:	75 29                	jne    c00183a9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018380:	b8 90 cc 02 c0       	mov    eax,0xc002cc90
c0018385:	c3                   	ret    
c0018386:	b8 70 cb 02 c0       	mov    eax,0xc002cb70
c001838b:	c3                   	ret    
c001838c:	b8 a0 cb 02 c0       	mov    eax,0xc002cba0
c0018391:	c3                   	ret    
c0018392:	b8 c0 cb 02 c0       	mov    eax,0xc002cbc0
c0018397:	c3                   	ret    
c0018398:	b8 f0 cb 02 c0       	mov    eax,0xc002cbf0
c001839d:	c3                   	ret    
c001839e:	b8 00 cc 02 c0       	mov    eax,0xc002cc00
c00183a3:	c3                   	ret    
c00183a4:	b8 50 cc 02 c0       	mov    eax,0xc002cc50
c00183a9:	c3                   	ret    

c00183aa <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c00183aa:	60                   	pusha  
c00183ab:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00183af:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00183b3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00183b7:	9c                   	pushf  
c00183b8:	fa                   	cli    
c00183b9:	0f 09                	wbinvd 
c00183bb:	0f 30                	wrmsr  
c00183bd:	9d                   	popf   
c00183be:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00183c2:	89 02                	mov    DWORD PTR [edx],eax
c00183c4:	61                   	popa   
c00183c5:	c3                   	ret    

c00183c6 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c00183c6:	60                   	pusha  
c00183c7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00183cb:	9c                   	pushf  
c00183cc:	fa                   	cli    
c00183cd:	0f 09                	wbinvd 
c00183cf:	31 c0                	xor    eax,eax
c00183d1:	31 d2                	xor    edx,edx
c00183d3:	0f 32                	rdmsr  
c00183d5:	9d                   	popf   
c00183d6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00183da:	89 02                	mov    DWORD PTR [edx],eax
c00183dc:	61                   	popa   
c00183dd:	c3                   	ret    

c00183de <CPU::AMD_K6_writeback(int, int, int)>:
c00183de:	56                   	push   esi
c00183df:	53                   	push   ebx
c00183e0:	83 ec 10             	sub    esp,0x10
c00183e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183e7:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c00183ec:	75 5d                	jne    c001844b <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00183ee:	83 f8 08             	cmp    eax,0x8
c00183f1:	75 09                	jne    c00183fc <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c00183f3:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c00183f8:	7e 13                	jle    c001840d <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c00183fa:	eb 30                	jmp    c001842c <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c00183fc:	83 f8 06             	cmp    eax,0x6
c00183ff:	7c 4a                	jl     c001844b <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018401:	83 f8 07             	cmp    eax,0x7
c0018404:	7e 07                	jle    c001840d <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018406:	83 f8 09             	cmp    eax,0x9
c0018409:	74 21                	je     c001842c <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001840b:	eb 3e                	jmp    c001844b <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001840d:	89 e6                	mov    esi,esp
c001840f:	8b 1d c4 d8 02 c0    	mov    ebx,DWORD PTR ds:0xc002d8c4
c0018415:	56                   	push   esi
c0018416:	c1 eb 15             	shr    ebx,0x15
c0018419:	68 82 00 00 c0       	push   0xc0000082
c001841e:	83 e3 7e             	and    ebx,0x7e
c0018421:	e8 a0 ff ff ff       	call   c00183c6 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018426:	56                   	push   esi
c0018427:	6a 00                	push   0x0
c0018429:	53                   	push   ebx
c001842a:	eb 12                	jmp    c001843e <CPU::AMD_K6_writeback(int, int, int)+0x60>
c001842c:	89 e3                	mov    ebx,esp
c001842e:	53                   	push   ebx
c001842f:	68 82 00 00 c0       	push   0xc0000082
c0018434:	e8 8d ff ff ff       	call   c00183c6 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018439:	53                   	push   ebx
c001843a:	6a 00                	push   0x0
c001843c:	6a 00                	push   0x0
c001843e:	68 82 00 00 c0       	push   0xc0000082
c0018443:	e8 62 ff ff ff       	call   c00183aa <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018448:	83 c4 18             	add    esp,0x18
c001844b:	83 c4 10             	add    esp,0x10
c001844e:	5b                   	pop    ebx
c001844f:	5e                   	pop    esi
c0018450:	c3                   	ret    
c0018451:	90                   	nop

c0018452 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018452:	55                   	push   ebp
c0018453:	57                   	push   edi
c0018454:	56                   	push   esi
c0018455:	53                   	push   ebx
c0018456:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001845a:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001845e:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018462:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018466:	39 05 a0 cd 02 c0    	cmp    DWORD PTR ds:0xc002cda0,eax
c001846c:	75 23                	jne    c0018491 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c001846e:	a1 ac e3 02 c0       	mov    eax,ds:0xc002e3ac
c0018473:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018477:	89 06                	mov    DWORD PTR [esi],eax
c0018479:	a1 a8 e3 02 c0       	mov    eax,ds:0xc002e3a8
c001847e:	89 07                	mov    DWORD PTR [edi],eax
c0018480:	a1 a4 e3 02 c0       	mov    eax,ds:0xc002e3a4
c0018485:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018488:	a1 a0 e3 02 c0       	mov    eax,ds:0xc002e3a0
c001848d:	89 02                	mov    DWORD PTR [edx],eax
c001848f:	eb 3f                	jmp    c00184d0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018491:	31 c9                	xor    ecx,ecx
c0018493:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018497:	0f a2                	cpuid  
c0018499:	89 06                	mov    DWORD PTR [esi],eax
c001849b:	89 1f                	mov    DWORD PTR [edi],ebx
c001849d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00184a1:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00184a4:	89 10                	mov    DWORD PTR [eax],edx
c00184a6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00184aa:	a3 a0 cd 02 c0       	mov    ds:0xc002cda0,eax
c00184af:	8b 06                	mov    eax,DWORD PTR [esi]
c00184b1:	a3 ac e3 02 c0       	mov    ds:0xc002e3ac,eax
c00184b6:	8b 07                	mov    eax,DWORD PTR [edi]
c00184b8:	a3 a8 e3 02 c0       	mov    ds:0xc002e3a8,eax
c00184bd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00184c0:	a3 a4 e3 02 c0       	mov    ds:0xc002e3a4,eax
c00184c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00184c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00184cb:	a3 a0 e3 02 c0       	mov    ds:0xc002e3a0,eax
c00184d0:	5b                   	pop    ebx
c00184d1:	5e                   	pop    esi
c00184d2:	5f                   	pop    edi
c00184d3:	5d                   	pop    ebp
c00184d4:	c3                   	ret    
c00184d5:	90                   	nop

c00184d6 <CPU::cpuidCheckEDX(unsigned int)>:
c00184d6:	83 ec 10             	sub    esp,0x10
c00184d9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00184dd:	50                   	push   eax
c00184de:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00184e2:	50                   	push   eax
c00184e3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00184e7:	50                   	push   eax
c00184e8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00184ec:	50                   	push   eax
c00184ed:	6a 01                	push   0x1
c00184ef:	e8 5e ff ff ff       	call   c0018452 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00184f4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00184f8:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c00184fc:	0f 95 c0             	setne  al
c00184ff:	83 c4 24             	add    esp,0x24
c0018502:	c3                   	ret    
c0018503:	90                   	nop

c0018504 <CPU::cpuidCheckECX(unsigned int)>:
c0018504:	83 ec 10             	sub    esp,0x10
c0018507:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001850b:	50                   	push   eax
c001850c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018510:	50                   	push   eax
c0018511:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018515:	50                   	push   eax
c0018516:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001851a:	50                   	push   eax
c001851b:	6a 01                	push   0x1
c001851d:	e8 30 ff ff ff       	call   c0018452 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018522:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018526:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001852a:	0f 95 c0             	setne  al
c001852d:	83 c4 24             	add    esp,0x24
c0018530:	c3                   	ret    
c0018531:	90                   	nop

c0018532 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018532:	83 ec 10             	sub    esp,0x10
c0018535:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018539:	50                   	push   eax
c001853a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001853e:	50                   	push   eax
c001853f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018543:	50                   	push   eax
c0018544:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018548:	50                   	push   eax
c0018549:	6a 07                	push   0x7
c001854b:	e8 02 ff ff ff       	call   c0018452 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018550:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018554:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018558:	0f 95 c0             	setne  al
c001855b:	83 c4 24             	add    esp,0x24
c001855e:	c3                   	ret    
c001855f:	90                   	nop

c0018560 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018560:	83 ec 10             	sub    esp,0x10
c0018563:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018567:	50                   	push   eax
c0018568:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001856c:	50                   	push   eax
c001856d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018571:	50                   	push   eax
c0018572:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018576:	50                   	push   eax
c0018577:	6a 07                	push   0x7
c0018579:	e8 d4 fe ff ff       	call   c0018452 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001857e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018582:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018586:	0f 95 c0             	setne  al
c0018589:	83 c4 24             	add    esp,0x24
c001858c:	c3                   	ret    
c001858d:	90                   	nop

c001858e <CPU::CPU()>:
c001858e:	83 ec 0c             	sub    esp,0xc
c0018591:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018595:	83 ec 08             	sub    esp,0x8
c0018598:	68 c6 ad 02 c0       	push   0xc002adc6
c001859d:	50                   	push   eax
c001859e:	e8 67 b9 ff ff       	call   c0013f0a <Device::Device(char const*)>
c00185a3:	83 c4 10             	add    esp,0x10
c00185a6:	ba a0 ae 02 c0       	mov    edx,0xc002aea0
c00185ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185af:	89 10                	mov    DWORD PTR [eax],edx
c00185b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185b5:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c00185bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185c3:	05 78 01 00 00       	add    eax,0x178
c00185c8:	83 ec 0c             	sub    esp,0xc
c00185cb:	50                   	push   eax
c00185cc:	e8 6b 68 ff ff       	call   c000ee3c <GDT::GDT()>
c00185d1:	83 c4 10             	add    esp,0x10
c00185d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185d8:	05 7c 09 00 00       	add    eax,0x97c
c00185dd:	83 ec 0c             	sub    esp,0xc
c00185e0:	50                   	push   eax
c00185e1:	e8 b8 6a ff ff       	call   c000f09e <IDT::IDT()>
c00185e6:	83 c4 10             	add    esp,0x10
c00185e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185ed:	05 7c 11 00 00       	add    eax,0x117c
c00185f2:	83 ec 0c             	sub    esp,0xc
c00185f5:	50                   	push   eax
c00185f6:	e8 39 8c ff ff       	call   c0011234 <TSS::TSS()>
c00185fb:	83 c4 10             	add    esp,0x10
c00185fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018602:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018609:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001860d:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018617:	90                   	nop
c0018618:	83 c4 0c             	add    esp,0xc
c001861b:	c3                   	ret    

c001861c <CPU::displayFeatures()>:
c001861c:	53                   	push   ebx
c001861d:	83 ec 10             	sub    esp,0x10
c0018620:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018624:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001862a:	68 d4 aa 02 c0       	push   0xc002aad4
c001862f:	e8 bf a2 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0018634:	59                   	pop    ecx
c0018635:	58                   	pop    eax
c0018636:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c001863c:	50                   	push   eax
c001863d:	68 e5 aa 02 c0       	push   0xc002aae5
c0018642:	e8 ac a2 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0018647:	58                   	pop    eax
c0018648:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001864e:	5a                   	pop    edx
c001864f:	c1 e8 0e             	shr    eax,0xe
c0018652:	0f b6 c0             	movzx  eax,al
c0018655:	50                   	push   eax
c0018656:	68 f6 aa 02 c0       	push   0xc002aaf6
c001865b:	e8 93 a2 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0018660:	59                   	pop    ecx
c0018661:	58                   	pop    eax
c0018662:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018668:	66 c1 e8 06          	shr    ax,0x6
c001866c:	0f b6 c0             	movzx  eax,al
c001866f:	50                   	push   eax
c0018670:	68 07 ab 02 c0       	push   0xc002ab07
c0018675:	e8 79 a2 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001867a:	c7 04 24 a3 af 02 c0 	mov    DWORD PTR [esp],0xc002afa3
c0018681:	e8 6d a2 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0018686:	83 c4 10             	add    esp,0x10
c0018689:	b8 b6 95 02 c0       	mov    eax,0xc00295b6
c001868e:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0018695:	74 05                	je     c001869c <CPU::displayFeatures()+0x80>
c0018697:	b8 b2 95 02 c0       	mov    eax,0xc00295b2
c001869c:	52                   	push   edx
c001869d:	52                   	push   edx
c001869e:	50                   	push   eax
c001869f:	68 18 ab 02 c0       	push   0xc002ab18
c00186a4:	e8 4a a2 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00186a9:	83 c4 10             	add    esp,0x10
c00186ac:	b8 b2 95 02 c0       	mov    eax,0xc00295b2
c00186b1:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c00186b8:	78 05                	js     c00186bf <CPU::displayFeatures()+0xa3>
c00186ba:	b8 b6 95 02 c0       	mov    eax,0xc00295b6
c00186bf:	51                   	push   ecx
c00186c0:	51                   	push   ecx
c00186c1:	50                   	push   eax
c00186c2:	68 2f ab 02 c0       	push   0xc002ab2f
c00186c7:	e8 27 a2 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00186cc:	83 c4 10             	add    esp,0x10
c00186cf:	b8 b2 95 02 c0       	mov    eax,0xc00295b2
c00186d4:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c00186db:	75 05                	jne    c00186e2 <CPU::displayFeatures()+0xc6>
c00186dd:	b8 b6 95 02 c0       	mov    eax,0xc00295b6
c00186e2:	52                   	push   edx
c00186e3:	52                   	push   edx
c00186e4:	50                   	push   eax
c00186e5:	68 46 ab 02 c0       	push   0xc002ab46
c00186ea:	e8 04 a2 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00186ef:	83 c4 10             	add    esp,0x10
c00186f2:	b8 b2 95 02 c0       	mov    eax,0xc00295b2
c00186f7:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c00186fe:	75 05                	jne    c0018705 <CPU::displayFeatures()+0xe9>
c0018700:	b8 b6 95 02 c0       	mov    eax,0xc00295b6
c0018705:	51                   	push   ecx
c0018706:	51                   	push   ecx
c0018707:	50                   	push   eax
c0018708:	68 5d ab 02 c0       	push   0xc002ab5d
c001870d:	e8 e1 a1 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0018712:	83 c4 10             	add    esp,0x10
c0018715:	b8 b2 95 02 c0       	mov    eax,0xc00295b2
c001871a:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0018721:	75 05                	jne    c0018728 <CPU::displayFeatures()+0x10c>
c0018723:	b8 b6 95 02 c0       	mov    eax,0xc00295b6
c0018728:	52                   	push   edx
c0018729:	52                   	push   edx
c001872a:	50                   	push   eax
c001872b:	68 74 ab 02 c0       	push   0xc002ab74
c0018730:	e8 be a1 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0018735:	83 c4 10             	add    esp,0x10
c0018738:	b8 b2 95 02 c0       	mov    eax,0xc00295b2
c001873d:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0018744:	75 05                	jne    c001874b <CPU::displayFeatures()+0x12f>
c0018746:	b8 b6 95 02 c0       	mov    eax,0xc00295b6
c001874b:	51                   	push   ecx
c001874c:	51                   	push   ecx
c001874d:	50                   	push   eax
c001874e:	68 8b ab 02 c0       	push   0xc002ab8b
c0018753:	e8 9b a1 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0018758:	83 c4 10             	add    esp,0x10
c001875b:	b8 b2 95 02 c0       	mov    eax,0xc00295b2
c0018760:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0018767:	75 05                	jne    c001876e <CPU::displayFeatures()+0x152>
c0018769:	b8 b6 95 02 c0       	mov    eax,0xc00295b6
c001876e:	52                   	push   edx
c001876f:	52                   	push   edx
c0018770:	50                   	push   eax
c0018771:	68 a2 ab 02 c0       	push   0xc002aba2
c0018776:	e8 78 a1 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001877b:	83 c4 10             	add    esp,0x10
c001877e:	b8 b2 95 02 c0       	mov    eax,0xc00295b2
c0018783:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c001878a:	75 05                	jne    c0018791 <CPU::displayFeatures()+0x175>
c001878c:	b8 b6 95 02 c0       	mov    eax,0xc00295b6
c0018791:	51                   	push   ecx
c0018792:	51                   	push   ecx
c0018793:	50                   	push   eax
c0018794:	68 b9 ab 02 c0       	push   0xc002abb9
c0018799:	e8 55 a1 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001879e:	83 c4 10             	add    esp,0x10
c00187a1:	b8 b2 95 02 c0       	mov    eax,0xc00295b2
c00187a6:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c00187ad:	75 05                	jne    c00187b4 <CPU::displayFeatures()+0x198>
c00187af:	b8 b6 95 02 c0       	mov    eax,0xc00295b6
c00187b4:	52                   	push   edx
c00187b5:	52                   	push   edx
c00187b6:	50                   	push   eax
c00187b7:	68 d0 ab 02 c0       	push   0xc002abd0
c00187bc:	e8 32 a1 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00187c1:	83 c4 10             	add    esp,0x10
c00187c4:	b8 b2 95 02 c0       	mov    eax,0xc00295b2
c00187c9:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c00187d0:	75 05                	jne    c00187d7 <CPU::displayFeatures()+0x1bb>
c00187d2:	b8 b6 95 02 c0       	mov    eax,0xc00295b6
c00187d7:	51                   	push   ecx
c00187d8:	51                   	push   ecx
c00187d9:	50                   	push   eax
c00187da:	68 e7 ab 02 c0       	push   0xc002abe7
c00187df:	e8 0f a1 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00187e4:	83 c4 10             	add    esp,0x10
c00187e7:	b8 b2 95 02 c0       	mov    eax,0xc00295b2
c00187ec:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c00187f3:	75 05                	jne    c00187fa <CPU::displayFeatures()+0x1de>
c00187f5:	b8 b6 95 02 c0       	mov    eax,0xc00295b6
c00187fa:	52                   	push   edx
c00187fb:	52                   	push   edx
c00187fc:	50                   	push   eax
c00187fd:	68 fe ab 02 c0       	push   0xc002abfe
c0018802:	e8 ec a0 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0018807:	83 c4 10             	add    esp,0x10
c001880a:	b8 b2 95 02 c0       	mov    eax,0xc00295b2
c001880f:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0018816:	75 05                	jne    c001881d <CPU::displayFeatures()+0x201>
c0018818:	b8 b6 95 02 c0       	mov    eax,0xc00295b6
c001881d:	51                   	push   ecx
c001881e:	51                   	push   ecx
c001881f:	50                   	push   eax
c0018820:	68 15 ac 02 c0       	push   0xc002ac15
c0018825:	e8 c9 a0 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001882a:	83 c4 10             	add    esp,0x10
c001882d:	b8 b2 95 02 c0       	mov    eax,0xc00295b2
c0018832:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0018839:	75 05                	jne    c0018840 <CPU::displayFeatures()+0x224>
c001883b:	b8 b6 95 02 c0       	mov    eax,0xc00295b6
c0018840:	52                   	push   edx
c0018841:	52                   	push   edx
c0018842:	50                   	push   eax
c0018843:	68 2c ac 02 c0       	push   0xc002ac2c
c0018848:	e8 a6 a0 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001884d:	83 c4 10             	add    esp,0x10
c0018850:	b8 b2 95 02 c0       	mov    eax,0xc00295b2
c0018855:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c001885c:	78 05                	js     c0018863 <CPU::displayFeatures()+0x247>
c001885e:	b8 b6 95 02 c0       	mov    eax,0xc00295b6
c0018863:	51                   	push   ecx
c0018864:	51                   	push   ecx
c0018865:	50                   	push   eax
c0018866:	68 43 ac 02 c0       	push   0xc002ac43
c001886b:	e8 83 a0 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0018870:	83 c4 10             	add    esp,0x10
c0018873:	b8 b2 95 02 c0       	mov    eax,0xc00295b2
c0018878:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c001887f:	75 05                	jne    c0018886 <CPU::displayFeatures()+0x26a>
c0018881:	b8 b6 95 02 c0       	mov    eax,0xc00295b6
c0018886:	52                   	push   edx
c0018887:	52                   	push   edx
c0018888:	50                   	push   eax
c0018889:	68 5a ac 02 c0       	push   0xc002ac5a
c001888e:	e8 60 a0 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0018893:	83 c4 18             	add    esp,0x18
c0018896:	5b                   	pop    ebx
c0018897:	c3                   	ret    

c0018898 <CPU::detectFeatures()>:
c0018898:	55                   	push   ebp
c0018899:	57                   	push   edi
c001889a:	56                   	push   esi
c001889b:	53                   	push   ebx
c001889c:	83 ec 50             	sub    esp,0x50
c001889f:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00188a3:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c00188ad:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c00188b4:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c00188ba:	6a 0d                	push   0xd
c00188bc:	6a 00                	push   0x0
c00188be:	57                   	push   edi
c00188bf:	e8 00 7e fe ff       	call   c00006c4 <memset>
c00188c4:	83 c4 10             	add    esp,0x10
c00188c7:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c00188cc:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c00188d3:	0f 84 20 09 00 00    	je     c00191f9 <CPU::detectFeatures()+0x961>
c00188d9:	83 ec 0c             	sub    esp,0xc
c00188dc:	6a 10                	push   0x10
c00188de:	e8 f3 fb ff ff       	call   c00184d6 <CPU::cpuidCheckEDX(unsigned int)>
c00188e3:	83 e0 01             	and    eax,0x1
c00188e6:	8d 14 00             	lea    edx,[eax+eax*1]
c00188e9:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00188ef:	83 e0 fd             	and    eax,0xfffffffd
c00188f2:	09 d0                	or     eax,edx
c00188f4:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00188fa:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0018901:	e8 d0 fb ff ff       	call   c00184d6 <CPU::cpuidCheckEDX(unsigned int)>
c0018906:	83 e0 01             	and    eax,0x1
c0018909:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018910:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018916:	83 e0 fb             	and    eax,0xfffffffb
c0018919:	09 d0                	or     eax,edx
c001891b:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018921:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0018928:	e8 a9 fb ff ff       	call   c00184d6 <CPU::cpuidCheckEDX(unsigned int)>
c001892d:	83 e0 01             	and    eax,0x1
c0018930:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018937:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001893d:	83 e0 f7             	and    eax,0xfffffff7
c0018940:	09 d0                	or     eax,edx
c0018942:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018948:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c001894f:	e8 82 fb ff ff       	call   c00184d6 <CPU::cpuidCheckEDX(unsigned int)>
c0018954:	83 e0 01             	and    eax,0x1
c0018957:	c1 e0 04             	shl    eax,0x4
c001895a:	88 c2                	mov    dl,al
c001895c:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018962:	83 e0 ef             	and    eax,0xffffffef
c0018965:	09 d0                	or     eax,edx
c0018967:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001896d:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0018974:	e8 5d fb ff ff       	call   c00184d6 <CPU::cpuidCheckEDX(unsigned int)>
c0018979:	83 e0 01             	and    eax,0x1
c001897c:	c1 e0 05             	shl    eax,0x5
c001897f:	88 c2                	mov    dl,al
c0018981:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018987:	83 e0 df             	and    eax,0xffffffdf
c001898a:	09 d0                	or     eax,edx
c001898c:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018992:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0018999:	e8 38 fb ff ff       	call   c00184d6 <CPU::cpuidCheckEDX(unsigned int)>
c001899e:	83 e0 01             	and    eax,0x1
c00189a1:	8d 14 00             	lea    edx,[eax+eax*1]
c00189a4:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00189aa:	83 e0 fd             	and    eax,0xfffffffd
c00189ad:	09 d0                	or     eax,edx
c00189af:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00189b5:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c00189bc:	e8 15 fb ff ff       	call   c00184d6 <CPU::cpuidCheckEDX(unsigned int)>
c00189c1:	83 e0 01             	and    eax,0x1
c00189c4:	c1 e0 06             	shl    eax,0x6
c00189c7:	88 c2                	mov    dl,al
c00189c9:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00189cf:	83 e0 bf             	and    eax,0xffffffbf
c00189d2:	09 d0                	or     eax,edx
c00189d4:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00189da:	58                   	pop    eax
c00189db:	8d 74 24 28          	lea    esi,[esp+0x28]
c00189df:	56                   	push   esi
c00189e0:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00189e4:	55                   	push   ebp
c00189e5:	8d 44 24 28          	lea    eax,[esp+0x28]
c00189e9:	50                   	push   eax
c00189ea:	8d 54 24 28          	lea    edx,[esp+0x28]
c00189ee:	52                   	push   edx
c00189ef:	6a 00                	push   0x0
c00189f1:	e8 5c fa ff ff       	call   c0018452 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00189f6:	83 c4 1c             	add    esp,0x1c
c00189f9:	6a 04                	push   0x4
c00189fb:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00189ff:	50                   	push   eax
c0018a00:	57                   	push   edi
c0018a01:	e8 9a 7c fe ff       	call   c00006a0 <memcpy>
c0018a06:	83 c4 0c             	add    esp,0xc
c0018a09:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c0018a0f:	6a 04                	push   0x4
c0018a11:	56                   	push   esi
c0018a12:	50                   	push   eax
c0018a13:	e8 88 7c fe ff       	call   c00006a0 <memcpy>
c0018a18:	83 c4 0c             	add    esp,0xc
c0018a1b:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c0018a21:	6a 04                	push   0x4
c0018a23:	55                   	push   ebp
c0018a24:	50                   	push   eax
c0018a25:	e8 76 7c fe ff       	call   c00006a0 <memcpy>
c0018a2a:	58                   	pop    eax
c0018a2b:	5a                   	pop    edx
c0018a2c:	68 71 ac 02 c0       	push   0xc002ac71
c0018a31:	57                   	push   edi
c0018a32:	e8 7d 7d fe ff       	call   c00007b4 <strcmp>
c0018a37:	83 c4 10             	add    esp,0x10
c0018a3a:	85 c0                	test   eax,eax
c0018a3c:	75 0f                	jne    c0018a4d <CPU::detectFeatures()+0x1b5>
c0018a3e:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0018a48:	e9 22 02 00 00       	jmp    c0018c6f <CPU::detectFeatures()+0x3d7>
c0018a4d:	50                   	push   eax
c0018a4e:	50                   	push   eax
c0018a4f:	68 7e ac 02 c0       	push   0xc002ac7e
c0018a54:	57                   	push   edi
c0018a55:	e8 5a 7d fe ff       	call   c00007b4 <strcmp>
c0018a5a:	83 c4 10             	add    esp,0x10
c0018a5d:	85 c0                	test   eax,eax
c0018a5f:	74 dd                	je     c0018a3e <CPU::detectFeatures()+0x1a6>
c0018a61:	51                   	push   ecx
c0018a62:	51                   	push   ecx
c0018a63:	68 8b ac 02 c0       	push   0xc002ac8b
c0018a68:	57                   	push   edi
c0018a69:	e8 46 7d fe ff       	call   c00007b4 <strcmp>
c0018a6e:	83 c4 10             	add    esp,0x10
c0018a71:	85 c0                	test   eax,eax
c0018a73:	74 2a                	je     c0018a9f <CPU::detectFeatures()+0x207>
c0018a75:	52                   	push   edx
c0018a76:	52                   	push   edx
c0018a77:	68 98 ac 02 c0       	push   0xc002ac98
c0018a7c:	57                   	push   edi
c0018a7d:	e8 32 7d fe ff       	call   c00007b4 <strcmp>
c0018a82:	83 c4 10             	add    esp,0x10
c0018a85:	85 c0                	test   eax,eax
c0018a87:	74 16                	je     c0018a9f <CPU::detectFeatures()+0x207>
c0018a89:	50                   	push   eax
c0018a8a:	50                   	push   eax
c0018a8b:	68 a5 ac 02 c0       	push   0xc002aca5
c0018a90:	57                   	push   edi
c0018a91:	e8 1e 7d fe ff       	call   c00007b4 <strcmp>
c0018a96:	83 c4 10             	add    esp,0x10
c0018a99:	85 c0                	test   eax,eax
c0018a9b:	74 48                	je     c0018ae5 <CPU::detectFeatures()+0x24d>
c0018a9d:	eb 0f                	jmp    c0018aae <CPU::detectFeatures()+0x216>
c0018a9f:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0018aa9:	e9 c1 01 00 00       	jmp    c0018c6f <CPU::detectFeatures()+0x3d7>
c0018aae:	50                   	push   eax
c0018aaf:	50                   	push   eax
c0018ab0:	68 b2 ac 02 c0       	push   0xc002acb2
c0018ab5:	57                   	push   edi
c0018ab6:	e8 f9 7c fe ff       	call   c00007b4 <strcmp>
c0018abb:	83 c4 10             	add    esp,0x10
c0018abe:	85 c0                	test   eax,eax
c0018ac0:	74 23                	je     c0018ae5 <CPU::detectFeatures()+0x24d>
c0018ac2:	50                   	push   eax
c0018ac3:	50                   	push   eax
c0018ac4:	68 bf ac 02 c0       	push   0xc002acbf
c0018ac9:	57                   	push   edi
c0018aca:	e8 e5 7c fe ff       	call   c00007b4 <strcmp>
c0018acf:	83 c4 10             	add    esp,0x10
c0018ad2:	85 c0                	test   eax,eax
c0018ad4:	75 1e                	jne    c0018af4 <CPU::detectFeatures()+0x25c>
c0018ad6:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0018ae0:	e9 8a 01 00 00       	jmp    c0018c6f <CPU::detectFeatures()+0x3d7>
c0018ae5:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0018aef:	e9 7b 01 00 00       	jmp    c0018c6f <CPU::detectFeatures()+0x3d7>
c0018af4:	50                   	push   eax
c0018af5:	50                   	push   eax
c0018af6:	68 cc ac 02 c0       	push   0xc002accc
c0018afb:	57                   	push   edi
c0018afc:	e8 b3 7c fe ff       	call   c00007b4 <strcmp>
c0018b01:	83 c4 10             	add    esp,0x10
c0018b04:	85 c0                	test   eax,eax
c0018b06:	75 0f                	jne    c0018b17 <CPU::detectFeatures()+0x27f>
c0018b08:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0018b12:	e9 58 01 00 00       	jmp    c0018c6f <CPU::detectFeatures()+0x3d7>
c0018b17:	50                   	push   eax
c0018b18:	50                   	push   eax
c0018b19:	68 8b ac 02 c0       	push   0xc002ac8b
c0018b1e:	57                   	push   edi
c0018b1f:	e8 90 7c fe ff       	call   c00007b4 <strcmp>
c0018b24:	83 c4 10             	add    esp,0x10
c0018b27:	85 c0                	test   eax,eax
c0018b29:	75 0f                	jne    c0018b3a <CPU::detectFeatures()+0x2a2>
c0018b2b:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0018b35:	e9 35 01 00 00       	jmp    c0018c6f <CPU::detectFeatures()+0x3d7>
c0018b3a:	50                   	push   eax
c0018b3b:	50                   	push   eax
c0018b3c:	68 d9 ac 02 c0       	push   0xc002acd9
c0018b41:	57                   	push   edi
c0018b42:	e8 6d 7c fe ff       	call   c00007b4 <strcmp>
c0018b47:	83 c4 10             	add    esp,0x10
c0018b4a:	85 c0                	test   eax,eax
c0018b4c:	75 0f                	jne    c0018b5d <CPU::detectFeatures()+0x2c5>
c0018b4e:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0018b58:	e9 12 01 00 00       	jmp    c0018c6f <CPU::detectFeatures()+0x3d7>
c0018b5d:	51                   	push   ecx
c0018b5e:	51                   	push   ecx
c0018b5f:	68 e6 ac 02 c0       	push   0xc002ace6
c0018b64:	57                   	push   edi
c0018b65:	e8 4a 7c fe ff       	call   c00007b4 <strcmp>
c0018b6a:	83 c4 10             	add    esp,0x10
c0018b6d:	85 c0                	test   eax,eax
c0018b6f:	75 0f                	jne    c0018b80 <CPU::detectFeatures()+0x2e8>
c0018b71:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0018b7b:	e9 ef 00 00 00       	jmp    c0018c6f <CPU::detectFeatures()+0x3d7>
c0018b80:	52                   	push   edx
c0018b81:	52                   	push   edx
c0018b82:	68 f3 ac 02 c0       	push   0xc002acf3
c0018b87:	57                   	push   edi
c0018b88:	e8 27 7c fe ff       	call   c00007b4 <strcmp>
c0018b8d:	83 c4 10             	add    esp,0x10
c0018b90:	85 c0                	test   eax,eax
c0018b92:	75 0f                	jne    c0018ba3 <CPU::detectFeatures()+0x30b>
c0018b94:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0018b9e:	e9 cc 00 00 00       	jmp    c0018c6f <CPU::detectFeatures()+0x3d7>
c0018ba3:	50                   	push   eax
c0018ba4:	50                   	push   eax
c0018ba5:	68 00 ad 02 c0       	push   0xc002ad00
c0018baa:	57                   	push   edi
c0018bab:	e8 04 7c fe ff       	call   c00007b4 <strcmp>
c0018bb0:	83 c4 10             	add    esp,0x10
c0018bb3:	85 c0                	test   eax,eax
c0018bb5:	75 0f                	jne    c0018bc6 <CPU::detectFeatures()+0x32e>
c0018bb7:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0018bc1:	e9 a9 00 00 00       	jmp    c0018c6f <CPU::detectFeatures()+0x3d7>
c0018bc6:	50                   	push   eax
c0018bc7:	50                   	push   eax
c0018bc8:	68 0d ad 02 c0       	push   0xc002ad0d
c0018bcd:	57                   	push   edi
c0018bce:	e8 e1 7b fe ff       	call   c00007b4 <strcmp>
c0018bd3:	83 c4 10             	add    esp,0x10
c0018bd6:	85 c0                	test   eax,eax
c0018bd8:	75 0f                	jne    c0018be9 <CPU::detectFeatures()+0x351>
c0018bda:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0018be4:	e9 86 00 00 00       	jmp    c0018c6f <CPU::detectFeatures()+0x3d7>
c0018be9:	50                   	push   eax
c0018bea:	50                   	push   eax
c0018beb:	68 1a ad 02 c0       	push   0xc002ad1a
c0018bf0:	57                   	push   edi
c0018bf1:	e8 be 7b fe ff       	call   c00007b4 <strcmp>
c0018bf6:	83 c4 10             	add    esp,0x10
c0018bf9:	85 c0                	test   eax,eax
c0018bfb:	75 0c                	jne    c0018c09 <CPU::detectFeatures()+0x371>
c0018bfd:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0018c07:	eb 66                	jmp    c0018c6f <CPU::detectFeatures()+0x3d7>
c0018c09:	50                   	push   eax
c0018c0a:	50                   	push   eax
c0018c0b:	68 27 ad 02 c0       	push   0xc002ad27
c0018c10:	57                   	push   edi
c0018c11:	e8 9e 7b fe ff       	call   c00007b4 <strcmp>
c0018c16:	83 c4 10             	add    esp,0x10
c0018c19:	85 c0                	test   eax,eax
c0018c1b:	75 0c                	jne    c0018c29 <CPU::detectFeatures()+0x391>
c0018c1d:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0018c27:	eb 46                	jmp    c0018c6f <CPU::detectFeatures()+0x3d7>
c0018c29:	50                   	push   eax
c0018c2a:	50                   	push   eax
c0018c2b:	68 34 ad 02 c0       	push   0xc002ad34
c0018c30:	57                   	push   edi
c0018c31:	e8 7e 7b fe ff       	call   c00007b4 <strcmp>
c0018c36:	83 c4 10             	add    esp,0x10
c0018c39:	85 c0                	test   eax,eax
c0018c3b:	74 e0                	je     c0018c1d <CPU::detectFeatures()+0x385>
c0018c3d:	50                   	push   eax
c0018c3e:	50                   	push   eax
c0018c3f:	68 41 ad 02 c0       	push   0xc002ad41
c0018c44:	57                   	push   edi
c0018c45:	e8 6a 7b fe ff       	call   c00007b4 <strcmp>
c0018c4a:	83 c4 10             	add    esp,0x10
c0018c4d:	85 c0                	test   eax,eax
c0018c4f:	74 cc                	je     c0018c1d <CPU::detectFeatures()+0x385>
c0018c51:	51                   	push   ecx
c0018c52:	51                   	push   ecx
c0018c53:	68 4e ad 02 c0       	push   0xc002ad4e
c0018c58:	57                   	push   edi
c0018c59:	e8 56 7b fe ff       	call   c00007b4 <strcmp>
c0018c5e:	83 c4 10             	add    esp,0x10
c0018c61:	85 c0                	test   eax,eax
c0018c63:	74 b8                	je     c0018c1d <CPU::detectFeatures()+0x385>
c0018c65:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0018c6f:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0018c74:	0f 86 be 00 00 00    	jbe    c0018d38 <CPU::detectFeatures()+0x4a0>
c0018c7a:	83 ec 0c             	sub    esp,0xc
c0018c7d:	68 80 00 00 00       	push   0x80
c0018c82:	e8 ab f8 ff ff       	call   c0018532 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018c87:	83 e0 01             	and    eax,0x1
c0018c8a:	c1 e0 06             	shl    eax,0x6
c0018c8d:	88 c2                	mov    dl,al
c0018c8f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018c95:	83 e0 bf             	and    eax,0xffffffbf
c0018c98:	09 d0                	or     eax,edx
c0018c9a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018ca0:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0018ca7:	e8 86 f8 ff ff       	call   c0018532 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018cac:	83 e0 01             	and    eax,0x1
c0018caf:	c1 e0 04             	shl    eax,0x4
c0018cb2:	88 c2                	mov    dl,al
c0018cb4:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018cba:	83 e0 ef             	and    eax,0xffffffef
c0018cbd:	09 d0                	or     eax,edx
c0018cbf:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018cc5:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0018ccc:	e8 61 f8 ff ff       	call   c0018532 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018cd1:	c1 e0 07             	shl    eax,0x7
c0018cd4:	88 c2                	mov    dl,al
c0018cd6:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018cdc:	83 e0 7f             	and    eax,0x7f
c0018cdf:	09 d0                	or     eax,edx
c0018ce1:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018ce7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018cee:	e8 6d f8 ff ff       	call   c0018560 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018cf3:	83 e0 01             	and    eax,0x1
c0018cf6:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018cfd:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018d03:	83 e0 f7             	and    eax,0xfffffff7
c0018d06:	09 d0                	or     eax,edx
c0018d08:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018d0e:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0018d15:	e8 46 f8 ff ff       	call   c0018560 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018d1a:	83 c4 10             	add    esp,0x10
c0018d1d:	83 e0 01             	and    eax,0x1
c0018d20:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018d27:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018d2d:	83 e0 fb             	and    eax,0xfffffffb
c0018d30:	09 d0                	or     eax,edx
c0018d32:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018d38:	83 ec 0c             	sub    esp,0xc
c0018d3b:	56                   	push   esi
c0018d3c:	55                   	push   ebp
c0018d3d:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0018d41:	57                   	push   edi
c0018d42:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018d46:	50                   	push   eax
c0018d47:	6a 01                	push   0x1
c0018d49:	e8 04 f7 ff ff       	call   c0018452 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d4e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0018d52:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0018d58:	88 ca                	mov    dl,cl
c0018d5a:	83 e0 f0             	and    eax,0xfffffff0
c0018d5d:	83 e2 0f             	and    edx,0xf
c0018d60:	09 d0                	or     eax,edx
c0018d62:	88 ca                	mov    dl,cl
c0018d64:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0018d6a:	c0 ea 04             	shr    dl,0x4
c0018d6d:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0018d71:	0f b6 c2             	movzx  eax,dl
c0018d74:	83 c4 20             	add    esp,0x20
c0018d77:	c1 e0 06             	shl    eax,0x6
c0018d7a:	89 c5                	mov    ebp,eax
c0018d7c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018d82:	66 25 3f c0          	and    ax,0xc03f
c0018d86:	09 e8                	or     eax,ebp
c0018d88:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0018d8f:	89 c8                	mov    eax,ecx
c0018d91:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0018d97:	c1 e8 08             	shr    eax,0x8
c0018d9a:	83 e2 3f             	and    edx,0x3f
c0018d9d:	83 e0 0f             	and    eax,0xf
c0018da0:	89 c5                	mov    ebp,eax
c0018da2:	c1 e5 06             	shl    ebp,0x6
c0018da5:	09 d5                	or     ebp,edx
c0018da7:	89 ea                	mov    edx,ebp
c0018da9:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0018daf:	88 c2                	mov    dl,al
c0018db1:	c0 ea 02             	shr    dl,0x2
c0018db4:	89 d5                	mov    ebp,edx
c0018db6:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0018dbc:	83 e2 c0             	and    edx,0xffffffc0
c0018dbf:	09 d5                	or     ebp,edx
c0018dc1:	89 ea                	mov    edx,ebp
c0018dc3:	89 cd                	mov    ebp,ecx
c0018dc5:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0018dcb:	c1 ed 0c             	shr    ebp,0xc
c0018dce:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0018dd4:	83 e5 03             	and    ebp,0x3
c0018dd7:	83 e2 cf             	and    edx,0xffffffcf
c0018dda:	c1 e5 04             	shl    ebp,0x4
c0018ddd:	09 d5                	or     ebp,edx
c0018ddf:	3c 06                	cmp    al,0x6
c0018de1:	89 ea                	mov    edx,ebp
c0018de3:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0018de9:	74 04                	je     c0018def <CPU::detectFeatures()+0x557>
c0018deb:	3c 0f                	cmp    al,0xf
c0018ded:	75 5c                	jne    c0018e4b <CPU::detectFeatures()+0x5b3>
c0018def:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018df3:	89 cd                	mov    ebp,ecx
c0018df5:	c1 ed 10             	shr    ebp,0x10
c0018df8:	c1 e5 04             	shl    ebp,0x4
c0018dfb:	09 ea                	or     edx,ebp
c0018dfd:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0018e03:	0f b6 d2             	movzx  edx,dl
c0018e06:	66 81 e5 3f c0       	and    bp,0xc03f
c0018e0b:	c1 e2 06             	shl    edx,0x6
c0018e0e:	09 ea                	or     edx,ebp
c0018e10:	3c 0f                	cmp    al,0xf
c0018e12:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0018e19:	75 30                	jne    c0018e4b <CPU::detectFeatures()+0x5b3>
c0018e1b:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0018e21:	c1 e9 14             	shr    ecx,0x14
c0018e24:	83 e0 3f             	and    eax,0x3f
c0018e27:	83 c1 0f             	add    ecx,0xf
c0018e2a:	88 ca                	mov    dl,cl
c0018e2c:	c0 e9 02             	shr    cl,0x2
c0018e2f:	c1 e2 06             	shl    edx,0x6
c0018e32:	09 d0                	or     eax,edx
c0018e34:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0018e3a:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0018e40:	83 e0 c0             	and    eax,0xffffffc0
c0018e43:	09 c1                	or     ecx,eax
c0018e45:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0018e4b:	83 ec 0c             	sub    esp,0xc
c0018e4e:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0018e55:	56                   	push   esi
c0018e56:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018e5a:	50                   	push   eax
c0018e5b:	57                   	push   edi
c0018e5c:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0018e60:	55                   	push   ebp
c0018e61:	68 00 00 00 80       	push   0x80000000
c0018e66:	e8 e7 f5 ff ff       	call   c0018452 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018e6b:	83 c4 20             	add    esp,0x20
c0018e6e:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0018e76:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018e7a:	76 1e                	jbe    c0018e9a <CPU::detectFeatures()+0x602>
c0018e7c:	83 ec 0c             	sub    esp,0xc
c0018e7f:	56                   	push   esi
c0018e80:	50                   	push   eax
c0018e81:	57                   	push   edi
c0018e82:	55                   	push   ebp
c0018e83:	68 01 00 00 80       	push   0x80000001
c0018e88:	e8 c5 f5 ff ff       	call   c0018452 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018e8d:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0018e97:	83 c4 20             	add    esp,0x20
c0018e9a:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0018ea0:	83 f8 01             	cmp    eax,0x1
c0018ea3:	75 6f                	jne    c0018f14 <CPU::detectFeatures()+0x67c>
c0018ea5:	51                   	push   ecx
c0018ea6:	51                   	push   ecx
c0018ea7:	68 5a ad 02 c0       	push   0xc002ad5a
c0018eac:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018eb0:	56                   	push   esi
c0018eb1:	e8 ad 78 fe ff       	call   c0000763 <strcpy>
c0018eb6:	5f                   	pop    edi
c0018eb7:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018ebd:	5d                   	pop    ebp
c0018ebe:	66 c1 e8 06          	shr    ax,0x6
c0018ec2:	0f b6 c0             	movzx  eax,al
c0018ec5:	50                   	push   eax
c0018ec6:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018ecc:	c1 e8 0e             	shr    eax,0xe
c0018ecf:	0f b6 c0             	movzx  eax,al
c0018ed2:	50                   	push   eax
c0018ed3:	e8 24 f2 ff ff       	call   c00180fc <CPU::lookupIntelName(unsigned char, unsigned char)>
c0018ed8:	5a                   	pop    edx
c0018ed9:	59                   	pop    ecx
c0018eda:	50                   	push   eax
c0018edb:	56                   	push   esi
c0018edc:	e8 39 79 fe ff       	call   c000081a <strcat>
c0018ee1:	5f                   	pop    edi
c0018ee2:	5d                   	pop    ebp
c0018ee3:	56                   	push   esi
c0018ee4:	53                   	push   ebx
c0018ee5:	e8 12 b0 ff ff       	call   c0013efc <Device::setName(char const*)>
c0018eea:	58                   	pop    eax
c0018eeb:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0018ef1:	5a                   	pop    edx
c0018ef2:	68 61 ad 02 c0       	push   0xc002ad61
c0018ef7:	50                   	push   eax
c0018ef8:	e8 b7 78 fe ff       	call   c00007b4 <strcmp>
c0018efd:	83 c4 10             	add    esp,0x10
c0018f00:	85 c0                	test   eax,eax
c0018f02:	0f 85 71 03 00 00    	jne    c0019279 <CPU::detectFeatures()+0x9e1>
c0018f08:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0018f0f:	e9 65 03 00 00       	jmp    c0019279 <CPU::detectFeatures()+0x9e1>
c0018f14:	83 f8 02             	cmp    eax,0x2
c0018f17:	0f 85 b5 00 00 00    	jne    c0018fd2 <CPU::detectFeatures()+0x73a>
c0018f1d:	57                   	push   edi
c0018f1e:	57                   	push   edi
c0018f1f:	68 73 ad 02 c0       	push   0xc002ad73
c0018f24:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018f28:	56                   	push   esi
c0018f29:	e8 35 78 fe ff       	call   c0000763 <strcpy>
c0018f2e:	5d                   	pop    ebp
c0018f2f:	58                   	pop    eax
c0018f30:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018f36:	66 c1 e8 06          	shr    ax,0x6
c0018f3a:	0f b6 c0             	movzx  eax,al
c0018f3d:	50                   	push   eax
c0018f3e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018f44:	c1 e8 0e             	shr    eax,0xe
c0018f47:	0f b6 c0             	movzx  eax,al
c0018f4a:	50                   	push   eax
c0018f4b:	e8 18 f0 ff ff       	call   c0017f68 <CPU::lookupAMDName(unsigned char, unsigned char)>
c0018f50:	5a                   	pop    edx
c0018f51:	59                   	pop    ecx
c0018f52:	50                   	push   eax
c0018f53:	56                   	push   esi
c0018f54:	e8 c1 78 fe ff       	call   c000081a <strcat>
c0018f59:	5f                   	pop    edi
c0018f5a:	5d                   	pop    ebp
c0018f5b:	56                   	push   esi
c0018f5c:	53                   	push   ebx
c0018f5d:	e8 9a af ff ff       	call   c0013efc <Device::setName(char const*)>
c0018f62:	58                   	pop    eax
c0018f63:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0018f69:	5a                   	pop    edx
c0018f6a:	68 78 ad 02 c0       	push   0xc002ad78
c0018f6f:	50                   	push   eax
c0018f70:	e8 3f 78 fe ff       	call   c00007b4 <strcmp>
c0018f75:	83 c4 10             	add    esp,0x10
c0018f78:	85 c0                	test   eax,eax
c0018f7a:	75 20                	jne    c0018f9c <CPU::detectFeatures()+0x704>
c0018f7c:	8b 15 88 d8 02 c0    	mov    edx,DWORD PTR ds:0xc002d888
c0018f82:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0018f88:	a8 01                	test   al,0x1
c0018f8a:	74 10                	je     c0018f9c <CPU::detectFeatures()+0x704>
c0018f8c:	83 e0 fe             	and    eax,0xfffffffe
c0018f8f:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0018f95:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0018f9c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018fa2:	c1 e8 0e             	shr    eax,0xe
c0018fa5:	3c 05                	cmp    al,0x5
c0018fa7:	0f 85 cc 02 00 00    	jne    c0019279 <CPU::detectFeatures()+0x9e1>
c0018fad:	56                   	push   esi
c0018fae:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0018fb4:	83 e0 0f             	and    eax,0xf
c0018fb7:	50                   	push   eax
c0018fb8:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018fbe:	66 c1 e8 06          	shr    ax,0x6
c0018fc2:	0f b6 c0             	movzx  eax,al
c0018fc5:	50                   	push   eax
c0018fc6:	6a 05                	push   0x5
c0018fc8:	e8 11 f4 ff ff       	call   c00183de <CPU::AMD_K6_writeback(int, int, int)>
c0018fcd:	e9 1f 02 00 00       	jmp    c00191f1 <CPU::detectFeatures()+0x959>
c0018fd2:	8d 50 fd             	lea    edx,[eax-0x3]
c0018fd5:	83 fa 01             	cmp    edx,0x1
c0018fd8:	76 09                	jbe    c0018fe3 <CPU::detectFeatures()+0x74b>
c0018fda:	83 f8 06             	cmp    eax,0x6
c0018fdd:	0f 85 91 01 00 00    	jne    c0019174 <CPU::detectFeatures()+0x8dc>
c0018fe3:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018fe9:	c1 ea 0e             	shr    edx,0xe
c0018fec:	80 fa 05             	cmp    dl,0x5
c0018fef:	75 7b                	jne    c001906c <CPU::detectFeatures()+0x7d4>
c0018ff1:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018ff7:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0018ffc:	66 81 fa 00 01       	cmp    dx,0x100
c0019001:	75 0c                	jne    c001900f <CPU::detectFeatures()+0x777>
c0019003:	51                   	push   ecx
c0019004:	51                   	push   ecx
c0019005:	68 7f ad 02 c0       	push   0xc002ad7f
c001900a:	e9 dc 01 00 00       	jmp    c00191eb <CPU::detectFeatures()+0x953>
c001900f:	66 81 fa 00 02       	cmp    dx,0x200
c0019014:	75 0c                	jne    c0019022 <CPU::detectFeatures()+0x78a>
c0019016:	52                   	push   edx
c0019017:	52                   	push   edx
c0019018:	68 92 ad 02 c0       	push   0xc002ad92
c001901d:	e9 c9 01 00 00       	jmp    c00191eb <CPU::detectFeatures()+0x953>
c0019022:	66 81 fa 40 02       	cmp    dx,0x240
c0019027:	75 0c                	jne    c0019035 <CPU::detectFeatures()+0x79d>
c0019029:	50                   	push   eax
c001902a:	50                   	push   eax
c001902b:	68 a4 ad 02 c0       	push   0xc002ada4
c0019030:	e9 b6 01 00 00       	jmp    c00191eb <CPU::detectFeatures()+0x953>
c0019035:	83 f8 06             	cmp    eax,0x6
c0019038:	75 0c                	jne    c0019046 <CPU::detectFeatures()+0x7ae>
c001903a:	50                   	push   eax
c001903b:	50                   	push   eax
c001903c:	68 b6 ad 02 c0       	push   0xc002adb6
c0019041:	e9 a5 01 00 00       	jmp    c00191eb <CPU::detectFeatures()+0x953>
c0019046:	83 f8 04             	cmp    eax,0x4
c0019049:	75 0c                	jne    c0019057 <CPU::detectFeatures()+0x7bf>
c001904b:	50                   	push   eax
c001904c:	50                   	push   eax
c001904d:	68 c2 ad 02 c0       	push   0xc002adc2
c0019052:	e9 94 01 00 00       	jmp    c00191eb <CPU::detectFeatures()+0x953>
c0019057:	83 f8 03             	cmp    eax,0x3
c001905a:	0f 85 19 02 00 00    	jne    c0019279 <CPU::detectFeatures()+0x9e1>
c0019060:	50                   	push   eax
c0019061:	50                   	push   eax
c0019062:	68 ca ad 02 c0       	push   0xc002adca
c0019067:	e9 7f 01 00 00       	jmp    c00191eb <CPU::detectFeatures()+0x953>
c001906c:	80 fa 06             	cmp    dl,0x6
c001906f:	0f 85 db 00 00 00    	jne    c0019150 <CPU::detectFeatures()+0x8b8>
c0019075:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001907b:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019080:	66 81 fa 80 01       	cmp    dx,0x180
c0019085:	75 0c                	jne    c0019093 <CPU::detectFeatures()+0x7fb>
c0019087:	50                   	push   eax
c0019088:	50                   	push   eax
c0019089:	68 d5 ad 02 c0       	push   0xc002add5
c001908e:	e9 58 01 00 00       	jmp    c00191eb <CPU::detectFeatures()+0x953>
c0019093:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0019099:	66 f7 c1 80 ff       	test   cx,0xff80
c001909e:	75 0c                	jne    c00190ac <CPU::detectFeatures()+0x814>
c00190a0:	50                   	push   eax
c00190a1:	50                   	push   eax
c00190a2:	68 e5 ad 02 c0       	push   0xc002ade5
c00190a7:	e9 3f 01 00 00       	jmp    c00191eb <CPU::detectFeatures()+0x953>
c00190ac:	66 81 fa 40 02       	cmp    dx,0x240
c00190b1:	75 0c                	jne    c00190bf <CPU::detectFeatures()+0x827>
c00190b3:	55                   	push   ebp
c00190b4:	55                   	push   ebp
c00190b5:	68 ec ad 02 c0       	push   0xc002adec
c00190ba:	e9 2c 01 00 00       	jmp    c00191eb <CPU::detectFeatures()+0x953>
c00190bf:	66 81 fa 80 02       	cmp    dx,0x280
c00190c4:	75 0c                	jne    c00190d2 <CPU::detectFeatures()+0x83a>
c00190c6:	57                   	push   edi
c00190c7:	57                   	push   edi
c00190c8:	68 f5 ad 02 c0       	push   0xc002adf5
c00190cd:	e9 19 01 00 00       	jmp    c00191eb <CPU::detectFeatures()+0x953>
c00190d2:	66 81 fa 40 03       	cmp    dx,0x340
c00190d7:	74 ed                	je     c00190c6 <CPU::detectFeatures()+0x82e>
c00190d9:	66 81 fa c0 03       	cmp    dx,0x3c0
c00190de:	75 0c                	jne    c00190ec <CPU::detectFeatures()+0x854>
c00190e0:	56                   	push   esi
c00190e1:	56                   	push   esi
c00190e2:	68 fc ad 02 c0       	push   0xc002adfc
c00190e7:	e9 ff 00 00 00       	jmp    c00191eb <CPU::detectFeatures()+0x953>
c00190ec:	83 f8 06             	cmp    eax,0x6
c00190ef:	0f 84 45 ff ff ff    	je     c001903a <CPU::detectFeatures()+0x7a2>
c00190f5:	83 f8 04             	cmp    eax,0x4
c00190f8:	0f 84 4d ff ff ff    	je     c001904b <CPU::detectFeatures()+0x7b3>
c00190fe:	83 f8 03             	cmp    eax,0x3
c0019101:	0f 85 72 01 00 00    	jne    c0019279 <CPU::detectFeatures()+0x9e1>
c0019107:	51                   	push   ecx
c0019108:	51                   	push   ecx
c0019109:	68 05 ae 02 c0       	push   0xc002ae05
c001910e:	53                   	push   ebx
c001910f:	e8 e8 ad ff ff       	call   c0013efc <Device::setName(char const*)>
c0019114:	b1 c1                	mov    cl,0xc1
c0019116:	88 c8                	mov    al,cl
c0019118:	e6 22                	out    0x22,al
c001911a:	e4 23                	in     al,0x23
c001911c:	88 c2                	mov    dl,al
c001911e:	88 c8                	mov    al,cl
c0019120:	e6 22                	out    0x22,al
c0019122:	88 d0                	mov    al,dl
c0019124:	83 c8 10             	or     eax,0x10
c0019127:	e6 23                	out    0x23,al
c0019129:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019130:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019133:	89 d0                	mov    eax,edx
c0019135:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c001913b:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c001913f:	40                   	inc    eax
c0019140:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0019146:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001914b:	e9 a1 00 00 00       	jmp    c00191f1 <CPU::detectFeatures()+0x959>
c0019150:	83 f8 06             	cmp    eax,0x6
c0019153:	0f 84 e1 fe ff ff    	je     c001903a <CPU::detectFeatures()+0x7a2>
c0019159:	83 f8 04             	cmp    eax,0x4
c001915c:	0f 84 e9 fe ff ff    	je     c001904b <CPU::detectFeatures()+0x7b3>
c0019162:	83 f8 03             	cmp    eax,0x3
c0019165:	0f 85 0e 01 00 00    	jne    c0019279 <CPU::detectFeatures()+0x9e1>
c001916b:	52                   	push   edx
c001916c:	52                   	push   edx
c001916d:	68 10 ae 02 c0       	push   0xc002ae10
c0019172:	eb 77                	jmp    c00191eb <CPU::detectFeatures()+0x953>
c0019174:	83 f8 07             	cmp    eax,0x7
c0019177:	75 09                	jne    c0019182 <CPU::detectFeatures()+0x8ea>
c0019179:	50                   	push   eax
c001917a:	50                   	push   eax
c001917b:	68 1a ae 02 c0       	push   0xc002ae1a
c0019180:	eb 69                	jmp    c00191eb <CPU::detectFeatures()+0x953>
c0019182:	83 f8 0a             	cmp    eax,0xa
c0019185:	75 09                	jne    c0019190 <CPU::detectFeatures()+0x8f8>
c0019187:	50                   	push   eax
c0019188:	50                   	push   eax
c0019189:	68 25 ae 02 c0       	push   0xc002ae25
c001918e:	eb 5b                	jmp    c00191eb <CPU::detectFeatures()+0x953>
c0019190:	83 f8 0b             	cmp    eax,0xb
c0019193:	75 09                	jne    c001919e <CPU::detectFeatures()+0x906>
c0019195:	50                   	push   eax
c0019196:	50                   	push   eax
c0019197:	68 2d ae 02 c0       	push   0xc002ae2d
c001919c:	eb 4d                	jmp    c00191eb <CPU::detectFeatures()+0x953>
c001919e:	83 f8 08             	cmp    eax,0x8
c00191a1:	75 09                	jne    c00191ac <CPU::detectFeatures()+0x914>
c00191a3:	50                   	push   eax
c00191a4:	50                   	push   eax
c00191a5:	68 36 ae 02 c0       	push   0xc002ae36
c00191aa:	eb 3f                	jmp    c00191eb <CPU::detectFeatures()+0x953>
c00191ac:	83 f8 09             	cmp    eax,0x9
c00191af:	75 09                	jne    c00191ba <CPU::detectFeatures()+0x922>
c00191b1:	50                   	push   eax
c00191b2:	50                   	push   eax
c00191b3:	68 3e ae 02 c0       	push   0xc002ae3e
c00191b8:	eb 31                	jmp    c00191eb <CPU::detectFeatures()+0x953>
c00191ba:	83 f8 05             	cmp    eax,0x5
c00191bd:	75 09                	jne    c00191c8 <CPU::detectFeatures()+0x930>
c00191bf:	50                   	push   eax
c00191c0:	50                   	push   eax
c00191c1:	68 46 ae 02 c0       	push   0xc002ae46
c00191c6:	eb 23                	jmp    c00191eb <CPU::detectFeatures()+0x953>
c00191c8:	83 f8 0c             	cmp    eax,0xc
c00191cb:	75 09                	jne    c00191d6 <CPU::detectFeatures()+0x93e>
c00191cd:	55                   	push   ebp
c00191ce:	55                   	push   ebp
c00191cf:	68 54 ae 02 c0       	push   0xc002ae54
c00191d4:	eb 15                	jmp    c00191eb <CPU::detectFeatures()+0x953>
c00191d6:	83 f8 0d             	cmp    eax,0xd
c00191d9:	75 09                	jne    c00191e4 <CPU::detectFeatures()+0x94c>
c00191db:	57                   	push   edi
c00191dc:	57                   	push   edi
c00191dd:	68 5f ae 02 c0       	push   0xc002ae5f
c00191e2:	eb 07                	jmp    c00191eb <CPU::detectFeatures()+0x953>
c00191e4:	56                   	push   esi
c00191e5:	56                   	push   esi
c00191e6:	68 73 ae 02 c0       	push   0xc002ae73
c00191eb:	53                   	push   ebx
c00191ec:	e8 0b ad ff ff       	call   c0013efc <Device::setName(char const*)>
c00191f1:	83 c4 10             	add    esp,0x10
c00191f4:	e9 80 00 00 00       	jmp    c0019279 <CPU::detectFeatures()+0x9e1>
c00191f9:	51                   	push   ecx
c00191fa:	51                   	push   ecx
c00191fb:	68 bf ac 02 c0       	push   0xc002acbf
c0019200:	57                   	push   edi
c0019201:	e8 5d 75 fe ff       	call   c0000763 <strcpy>
c0019206:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019210:	e8 99 70 fe ff       	call   c00002ae <is486>
c0019215:	83 c4 10             	add    esp,0x10
c0019218:	85 c0                	test   eax,eax
c001921a:	74 2b                	je     c0019247 <CPU::detectFeatures()+0x9af>
c001921c:	52                   	push   edx
c001921d:	52                   	push   edx
c001921e:	68 7f ae 02 c0       	push   0xc002ae7f
c0019223:	53                   	push   ebx
c0019224:	e8 d3 ac ff ff       	call   c0013efc <Device::setName(char const*)>
c0019229:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019230:	0f 20 c0             	mov    eax,cr0
c0019233:	83 e0 14             	and    eax,0x14
c0019236:	83 c4 10             	add    esp,0x10
c0019239:	83 f8 04             	cmp    eax,0x4
c001923c:	75 1f                	jne    c001925d <CPU::detectFeatures()+0x9c5>
c001923e:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0019245:	eb 32                	jmp    c0019279 <CPU::detectFeatures()+0x9e1>
c0019247:	50                   	push   eax
c0019248:	50                   	push   eax
c0019249:	68 8a ae 02 c0       	push   0xc002ae8a
c001924e:	53                   	push   ebx
c001924f:	e8 a8 ac ff ff       	call   c0013efc <Device::setName(char const*)>
c0019254:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c001925b:	eb d3                	jmp    c0019230 <CPU::detectFeatures()+0x998>
c001925d:	e8 27 70 fe ff       	call   c0000289 <hasLegacyFPU>
c0019262:	83 e0 01             	and    eax,0x1
c0019265:	8d 14 00             	lea    edx,[eax+eax*1]
c0019268:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001926e:	83 e0 fd             	and    eax,0xfffffffd
c0019271:	09 d0                	or     eax,edx
c0019273:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019279:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0019280:	83 c4 4c             	add    esp,0x4c
c0019283:	5b                   	pop    ebx
c0019284:	5e                   	pop    esi
c0019285:	5f                   	pop    edi
c0019286:	5d                   	pop    ebp
c0019287:	c3                   	ret    

c0019288 <CPU::setupSMEP()>:
c0019288:	0f 20 e0             	mov    eax,cr4
c001928b:	0d 00 00 10 00       	or     eax,0x100000
c0019290:	0f 22 e0             	mov    cr4,eax
c0019293:	c3                   	ret    

c0019294 <CPU::setupUMIP()>:
c0019294:	0f 20 e0             	mov    eax,cr4
c0019297:	80 cc 08             	or     ah,0x8
c001929a:	0f 22 e0             	mov    cr4,eax
c001929d:	c3                   	ret    

c001929e <CPU::setupTSC()>:
c001929e:	0f 20 e0             	mov    eax,cr4
c00192a1:	83 c8 04             	or     eax,0x4
c00192a4:	0f 22 e0             	mov    cr4,eax
c00192a7:	c3                   	ret    

c00192a8 <CPU::setupLargePages()>:
c00192a8:	0f 20 e0             	mov    eax,cr4
c00192ab:	83 c8 10             	or     eax,0x10
c00192ae:	0f 22 e0             	mov    cr4,eax
c00192b1:	c3                   	ret    

c00192b2 <CPU::setupPAT()>:
c00192b2:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c00192b7:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00192be:	74 2c                	je     c00192ec <CPU::setupPAT()+0x3a>
c00192c0:	53                   	push   ebx
c00192c1:	83 ec 10             	sub    esp,0x10
c00192c4:	68 77 02 00 00       	push   0x277
c00192c9:	50                   	push   eax
c00192ca:	e8 fd 58 ff ff       	call   c000ebcc <Computer::rdmsr(unsigned int)>
c00192cf:	83 e2 f8             	and    edx,0xfffffff8
c00192d2:	83 ca 01             	or     edx,0x1
c00192d5:	52                   	push   edx
c00192d6:	50                   	push   eax
c00192d7:	68 77 02 00 00       	push   0x277
c00192dc:	ff 35 88 d8 02 c0    	push   DWORD PTR ds:0xc002d888
c00192e2:	e8 11 59 ff ff       	call   c000ebf8 <Computer::wrmsr(unsigned int, unsigned long long)>
c00192e7:	83 c4 28             	add    esp,0x28
c00192ea:	5b                   	pop    ebx
c00192eb:	c3                   	ret    
c00192ec:	c3                   	ret    
c00192ed:	90                   	nop

c00192ee <CPU::setupMTRR()>:
c00192ee:	c3                   	ret    
c00192ef:	90                   	nop

c00192f0 <CPU::setupGlobalPages()>:
c00192f0:	0f 20 e0             	mov    eax,cr4
c00192f3:	0c 80                	or     al,0x80
c00192f5:	0f 22 e0             	mov    cr4,eax
c00192f8:	c3                   	ret    
c00192f9:	90                   	nop

c00192fa <CPU::allowUsermodeDataAccess()>:
c00192fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00192fe:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019305:	74 03                	je     c001930a <CPU::allowUsermodeDataAccess()+0x10>
c0019307:	0f 01 cb             	stac   
c001930a:	c3                   	ret    
c001930b:	90                   	nop

c001930c <CPU::prohibitUsermodeDataAccess()>:
c001930c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019310:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019317:	74 03                	je     c001931c <CPU::prohibitUsermodeDataAccess()+0x10>
c0019319:	0f 01 ca             	clac   
c001931c:	c3                   	ret    
c001931d:	90                   	nop

c001931e <CPU::setupSMAP()>:
c001931e:	0f 20 e0             	mov    eax,cr4
c0019321:	0d 00 00 20 00       	or     eax,0x200000
c0019326:	0f 22 e0             	mov    cr4,eax
c0019329:	eb e1                	jmp    c001930c <CPU::prohibitUsermodeDataAccess()>
c001932b:	90                   	nop

c001932c <CPU::setupFeatures()>:
c001932c:	83 ec 0c             	sub    esp,0xc
c001932f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019333:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c001933a:	74 07                	je     c0019343 <CPU::setupFeatures()+0x17>
c001933c:	52                   	push   edx
c001933d:	e8 46 ff ff ff       	call   c0019288 <CPU::setupSMEP()>
c0019342:	58                   	pop    eax
c0019343:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c001934a:	74 07                	je     c0019353 <CPU::setupFeatures()+0x27>
c001934c:	52                   	push   edx
c001934d:	e8 cc ff ff ff       	call   c001931e <CPU::setupSMAP()>
c0019352:	58                   	pop    eax
c0019353:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c001935a:	74 07                	je     c0019363 <CPU::setupFeatures()+0x37>
c001935c:	52                   	push   edx
c001935d:	e8 32 ff ff ff       	call   c0019294 <CPU::setupUMIP()>
c0019362:	58                   	pop    eax
c0019363:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c001936a:	74 07                	je     c0019373 <CPU::setupFeatures()+0x47>
c001936c:	52                   	push   edx
c001936d:	e8 2c ff ff ff       	call   c001929e <CPU::setupTSC()>
c0019372:	58                   	pop    eax
c0019373:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c001937a:	74 07                	je     c0019383 <CPU::setupFeatures()+0x57>
c001937c:	52                   	push   edx
c001937d:	e8 26 ff ff ff       	call   c00192a8 <CPU::setupLargePages()>
c0019382:	59                   	pop    ecx
c0019383:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c001938a:	74 07                	je     c0019393 <CPU::setupFeatures()+0x67>
c001938c:	52                   	push   edx
c001938d:	e8 5e ff ff ff       	call   c00192f0 <CPU::setupGlobalPages()>
c0019392:	58                   	pop    eax
c0019393:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c001939a:	74 0c                	je     c00193a8 <CPU::setupFeatures()+0x7c>
c001939c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00193a0:	83 c4 0c             	add    esp,0xc
c00193a3:	e9 0a ff ff ff       	jmp    c00192b2 <CPU::setupPAT()>
c00193a8:	83 c4 0c             	add    esp,0xc
c00193ab:	c3                   	ret    

c00193ac <CPU::open(int, int, void*)>:
c00193ac:	57                   	push   edi
c00193ad:	56                   	push   esi
c00193ae:	53                   	push   ebx
c00193af:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00193b3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00193b7:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c00193bd:	83 ec 0c             	sub    esp,0xc
c00193c0:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c00193c6:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c00193cc:	50                   	push   eax
c00193cd:	e8 e6 5a ff ff       	call   c000eeb8 <GDT::setup()>
c00193d2:	83 c4 0c             	add    esp,0xc
c00193d5:	6a 00                	push   0x0
c00193d7:	68 ef be ad de       	push   0xdeadbeef
c00193dc:	57                   	push   edi
c00193dd:	e8 92 7e ff ff       	call   c0011274 <TSS::setup(unsigned long, unsigned long)>
c00193e2:	89 3c 24             	mov    DWORD PTR [esp],edi
c00193e5:	e8 6a 7e ff ff       	call   c0011254 <TSS::flush()>
c00193ea:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c00193f0:	89 04 24             	mov    DWORD PTR [esp],eax
c00193f3:	e8 1c 5d ff ff       	call   c000f114 <IDT::setup()>
c00193f8:	b8 00 04 00 00       	mov    eax,0x400
c00193fd:	0f 23 f8             	mov    db7,eax
c0019400:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c001940a:	e8 b2 68 ff ff       	call   c000fcc1 <Phys::allocatePage()>
c001940f:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019415:	89 30                	mov    DWORD PTR [eax],esi
c0019417:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001941d:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019420:	58                   	pop    eax
c0019421:	5a                   	pop    edx
c0019422:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019428:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001942c:	e8 75 8e ff ff       	call   c00122a6 <VAS::setCPUSpecific(unsigned long)>
c0019431:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019434:	e8 5f f4 ff ff       	call   c0018898 <CPU::detectFeatures()>
c0019439:	e8 46 be ff ff       	call   c0015284 <setupInterruptController()>
c001943e:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019444:	a1 a0 d8 02 c0       	mov    eax,ds:0xc002d8a0
c0019449:	83 e0 10             	and    eax,0x10
c001944c:	83 f8 01             	cmp    eax,0x1
c001944f:	19 c0                	sbb    eax,eax
c0019451:	83 e0 46             	and    eax,0x46
c0019454:	83 c0 1e             	add    eax,0x1e
c0019457:	89 04 24             	mov    DWORD PTR [esp],eax
c001945a:	e8 05 d3 ff ff       	call   c0016764 <setupTimer(int)>
c001945f:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019465:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019468:	e8 bf fe ff ff       	call   c001932c <CPU::setupFeatures()>
c001946d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019470:	e8 a7 f1 ff ff       	call   c001861c <CPU::displayFeatures()>
c0019475:	83 c4 10             	add    esp,0x10
c0019478:	31 c0                	xor    eax,eax
c001947a:	5b                   	pop    ebx
c001947b:	5e                   	pop    esi
c001947c:	5f                   	pop    edi
c001947d:	c3                   	ret    

c001947e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c001947e:	57                   	push   edi
c001947f:	56                   	push   esi
c0019480:	53                   	push   ebx
c0019481:	51                   	push   ecx
c0019482:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019486:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019489:	0f 02 c0             	lar    eax,ax
c001948c:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c001948f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019493:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019496:	88 ca                	mov    dl,cl
c0019498:	c0 ea 06             	shr    dl,0x6
c001949b:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c001949f:	89 ca                	mov    edx,ecx
c00194a1:	66 c1 ea 03          	shr    dx,0x3
c00194a5:	83 e2 07             	and    edx,0x7
c00194a8:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c00194ad:	88 17                	mov    BYTE PTR [edi],dl
c00194af:	0f 84 a6 01 00 00    	je     c001965b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c00194b5:	83 e1 07             	and    ecx,0x7
c00194b8:	80 f9 04             	cmp    cl,0x4
c00194bb:	0f 84 98 00 00 00    	je     c0019559 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c00194c1:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00194c6:	0f 95 c0             	setne  al
c00194c9:	80 f9 05             	cmp    cl,0x5
c00194cc:	0f 95 c2             	setne  dl
c00194cf:	08 c2                	or     dl,al
c00194d1:	74 79                	je     c001954c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c00194d3:	84 c9                	test   cl,cl
c00194d5:	75 05                	jne    c00194dc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c00194d7:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c00194da:	eb 3c                	jmp    c0019518 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00194dc:	80 f9 01             	cmp    cl,0x1
c00194df:	75 05                	jne    c00194e6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c00194e1:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00194e4:	eb 32                	jmp    c0019518 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00194e6:	80 f9 02             	cmp    cl,0x2
c00194e9:	75 05                	jne    c00194f0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c00194eb:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00194ee:	eb 28                	jmp    c0019518 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00194f0:	31 c0                	xor    eax,eax
c00194f2:	80 f9 03             	cmp    cl,0x3
c00194f5:	75 05                	jne    c00194fc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c00194f7:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00194fa:	eb 1c                	jmp    c0019518 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00194fc:	80 f9 05             	cmp    cl,0x5
c00194ff:	75 05                	jne    c0019506 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019501:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019504:	eb 12                	jmp    c0019518 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019506:	80 f9 06             	cmp    cl,0x6
c0019509:	75 05                	jne    c0019510 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c001950b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001950e:	eb 08                	jmp    c0019518 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019510:	80 f9 07             	cmp    cl,0x7
c0019513:	75 03                	jne    c0019518 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019515:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019518:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c001951d:	75 10                	jne    c001952f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c001951f:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019523:	b9 03 00 00 00       	mov    ecx,0x3
c0019528:	01 d0                	add    eax,edx
c001952a:	e9 37 01 00 00       	jmp    c0019666 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001952f:	b9 02 00 00 00       	mov    ecx,0x2
c0019534:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019539:	0f 85 27 01 00 00    	jne    c0019666 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001953f:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019542:	b9 06 00 00 00       	mov    ecx,0x6
c0019547:	e9 1a 01 00 00       	jmp    c0019666 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001954c:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c001954f:	b9 06 00 00 00       	mov    ecx,0x6
c0019554:	e9 0f 01 00 00       	jmp    c0019668 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019559:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c001955c:	88 ca                	mov    dl,cl
c001955e:	c0 ea 06             	shr    dl,0x6
c0019561:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019565:	89 ca                	mov    edx,ecx
c0019567:	66 c1 ea 03          	shr    dx,0x3
c001956b:	83 e2 07             	and    edx,0x7
c001956e:	80 e1 07             	and    cl,0x7
c0019571:	75 05                	jne    c0019578 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019573:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019576:	eb 4c                	jmp    c00195c4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019578:	80 f9 01             	cmp    cl,0x1
c001957b:	75 05                	jne    c0019582 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c001957d:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019580:	eb 42                	jmp    c00195c4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019582:	80 f9 02             	cmp    cl,0x2
c0019585:	75 05                	jne    c001958c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019587:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001958a:	eb 38                	jmp    c00195c4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001958c:	80 f9 03             	cmp    cl,0x3
c001958f:	75 05                	jne    c0019596 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019591:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019594:	eb 2e                	jmp    c00195c4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019596:	80 f9 04             	cmp    cl,0x4
c0019599:	75 12                	jne    c00195ad <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c001959b:	f6 c4 60             	test   ah,0x60
c001959e:	75 08                	jne    c00195a8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c00195a0:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00195a3:	8d 78 14             	lea    edi,[eax+0x14]
c00195a6:	eb 1c                	jmp    c00195c4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00195a8:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c00195ab:	eb 17                	jmp    c00195c4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00195ad:	80 f9 05             	cmp    cl,0x5
c00195b0:	75 05                	jne    c00195b7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c00195b2:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00195b5:	eb 0d                	jmp    c00195c4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00195b7:	80 f9 06             	cmp    cl,0x6
c00195ba:	75 05                	jne    c00195c1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c00195bc:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00195bf:	eb 03                	jmp    c00195c4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00195c1:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c00195c4:	84 d2                	test   dl,dl
c00195c6:	75 05                	jne    c00195cd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c00195c8:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c00195cb:	eb 3c                	jmp    c0019609 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00195cd:	80 fa 01             	cmp    dl,0x1
c00195d0:	75 05                	jne    c00195d7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c00195d2:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00195d5:	eb 32                	jmp    c0019609 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00195d7:	80 fa 02             	cmp    dl,0x2
c00195da:	75 05                	jne    c00195e1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c00195dc:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00195df:	eb 28                	jmp    c0019609 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00195e1:	80 fa 03             	cmp    dl,0x3
c00195e4:	75 05                	jne    c00195eb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c00195e6:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00195e9:	eb 1e                	jmp    c0019609 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00195eb:	31 c0                	xor    eax,eax
c00195ed:	80 fa 04             	cmp    dl,0x4
c00195f0:	74 17                	je     c0019609 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00195f2:	80 fa 05             	cmp    dl,0x5
c00195f5:	75 05                	jne    c00195fc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c00195f7:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00195fa:	eb 0d                	jmp    c0019609 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00195fc:	80 fa 06             	cmp    dl,0x6
c00195ff:	75 05                	jne    c0019606 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019601:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019604:	eb 03                	jmp    c0019609 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019606:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019609:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001960e:	0f 94 c2             	sete   dl
c0019611:	80 f9 05             	cmp    cl,0x5
c0019614:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019618:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c001961d:	d3 e0                	shl    eax,cl
c001961f:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019623:	74 0a                	je     c001962f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019625:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019628:	b9 07 00 00 00       	mov    ecx,0x7
c001962d:	eb 37                	jmp    c0019666 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001962f:	01 f8                	add    eax,edi
c0019631:	b9 03 00 00 00       	mov    ecx,0x3
c0019636:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001963b:	74 2b                	je     c0019668 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001963d:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019642:	75 0d                	jne    c0019651 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019644:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019648:	01 c8                	add    eax,ecx
c001964a:	b9 04 00 00 00       	mov    ecx,0x4
c001964f:	eb 17                	jmp    c0019668 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019651:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019654:	b9 07 00 00 00       	mov    ecx,0x7
c0019659:	eb 0d                	jmp    c0019668 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001965b:	b9 02 00 00 00       	mov    ecx,0x2
c0019660:	b2 01                	mov    dl,0x1
c0019662:	31 c0                	xor    eax,eax
c0019664:	eb 02                	jmp    c0019668 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019666:	31 d2                	xor    edx,edx
c0019668:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001966c:	89 0b                	mov    DWORD PTR [ebx],ecx
c001966e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019672:	88 11                	mov    BYTE PTR [ecx],dl
c0019674:	5a                   	pop    edx
c0019675:	5b                   	pop    ebx
c0019676:	5e                   	pop    esi
c0019677:	5f                   	pop    edi
c0019678:	c3                   	ret    
c0019679:	90                   	nop

c001967a <EnvVarContainer::getEnv(char const*)>:
c001967a:	57                   	push   edi
c001967b:	56                   	push   esi
c001967c:	53                   	push   ebx
c001967d:	31 db                	xor    ebx,ebx
c001967f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019683:	39 1e                	cmp    DWORD PTR [esi],ebx
c0019685:	7e 2b                	jle    c00196b2 <EnvVarContainer::getEnv(char const*)+0x38>
c0019687:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001968e:	50                   	push   eax
c001968f:	50                   	push   eax
c0019690:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019693:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0019696:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001969a:	e8 15 71 fe ff       	call   c00007b4 <strcmp>
c001969f:	83 c4 10             	add    esp,0x10
c00196a2:	85 c0                	test   eax,eax
c00196a4:	75 09                	jne    c00196af <EnvVarContainer::getEnv(char const*)+0x35>
c00196a6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00196a9:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c00196ad:	eb 05                	jmp    c00196b4 <EnvVarContainer::getEnv(char const*)+0x3a>
c00196af:	43                   	inc    ebx
c00196b0:	eb d1                	jmp    c0019683 <EnvVarContainer::getEnv(char const*)+0x9>
c00196b2:	31 c0                	xor    eax,eax
c00196b4:	5b                   	pop    ebx
c00196b5:	5e                   	pop    esi
c00196b6:	5f                   	pop    edi
c00196b7:	c3                   	ret    

c00196b8 <EnvVarContainer::setEnv(char const*, char const*)>:
c00196b8:	57                   	push   edi
c00196b9:	56                   	push   esi
c00196ba:	53                   	push   ebx
c00196bb:	83 ec 1c             	sub    esp,0x1c
c00196be:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00196c2:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00196c6:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00196ca:	57                   	push   edi
c00196cb:	e8 11 70 fe ff       	call   c00006e1 <strlen>
c00196d0:	40                   	inc    eax
c00196d1:	89 04 24             	mov    DWORD PTR [esp],eax
c00196d4:	e8 4b 5f ff ff       	call   c000f624 <malloc>
c00196d9:	89 34 24             	mov    DWORD PTR [esp],esi
c00196dc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00196e0:	e8 fc 6f fe ff       	call   c00006e1 <strlen>
c00196e5:	40                   	inc    eax
c00196e6:	89 04 24             	mov    DWORD PTR [esp],eax
c00196e9:	e8 36 5f ff ff       	call   c000f624 <malloc>
c00196ee:	89 3c 24             	mov    DWORD PTR [esp],edi
c00196f1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00196f5:	e8 e7 6f fe ff       	call   c00006e1 <strlen>
c00196fa:	83 c4 0c             	add    esp,0xc
c00196fd:	40                   	inc    eax
c00196fe:	50                   	push   eax
c00196ff:	6a 00                	push   0x0
c0019701:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019705:	e8 ba 6f fe ff       	call   c00006c4 <memset>
c001970a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001970d:	e8 cf 6f fe ff       	call   c00006e1 <strlen>
c0019712:	83 c4 0c             	add    esp,0xc
c0019715:	40                   	inc    eax
c0019716:	50                   	push   eax
c0019717:	57                   	push   edi
c0019718:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001971c:	e8 7f 6f fe ff       	call   c00006a0 <memcpy>
c0019721:	89 34 24             	mov    DWORD PTR [esp],esi
c0019724:	e8 b8 6f fe ff       	call   c00006e1 <strlen>
c0019729:	83 c4 0c             	add    esp,0xc
c001972c:	40                   	inc    eax
c001972d:	50                   	push   eax
c001972e:	6a 00                	push   0x0
c0019730:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019734:	e8 8b 6f fe ff       	call   c00006c4 <memset>
c0019739:	89 34 24             	mov    DWORD PTR [esp],esi
c001973c:	e8 a0 6f fe ff       	call   c00006e1 <strlen>
c0019741:	83 c4 0c             	add    esp,0xc
c0019744:	40                   	inc    eax
c0019745:	50                   	push   eax
c0019746:	56                   	push   esi
c0019747:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001974b:	e8 50 6f fe ff       	call   c00006a0 <memcpy>
c0019750:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019752:	40                   	inc    eax
c0019753:	89 03                	mov    DWORD PTR [ebx],eax
c0019755:	c1 e0 03             	shl    eax,0x3
c0019758:	5a                   	pop    edx
c0019759:	59                   	pop    ecx
c001975a:	50                   	push   eax
c001975b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001975e:	e8 ad 5e ff ff       	call   c000f610 <realloc>
c0019763:	83 c4 0c             	add    esp,0xc
c0019766:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0019769:	6a 08                	push   0x8
c001976b:	8d 54 24 10          	lea    edx,[esp+0x10]
c001976f:	52                   	push   edx
c0019770:	8b 13                	mov    edx,DWORD PTR [ebx]
c0019772:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c0019776:	50                   	push   eax
c0019777:	e8 24 6f fe ff       	call   c00006a0 <memcpy>
c001977c:	83 c4 20             	add    esp,0x20
c001977f:	5b                   	pop    ebx
c0019780:	5e                   	pop    esi
c0019781:	5f                   	pop    edi
c0019782:	c3                   	ret    
c0019783:	90                   	nop

c0019784 <EnvVarContainer::deleteEnv(char const*)>:
c0019784:	c3                   	ret    
c0019785:	90                   	nop

c0019786 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0019786:	55                   	push   ebp
c0019787:	57                   	push   edi
c0019788:	56                   	push   esi
c0019789:	53                   	push   ebx
c001978a:	81 ec 38 01 00 00    	sub    esp,0x138
c0019790:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
c0019797:	8b ac 24 54 01 00 00 	mov    ebp,DWORD PTR [esp+0x154]
c001979e:	68 14 01 00 00       	push   0x114
c00197a3:	e8 7c 5e ff ff       	call   c000f624 <malloc>
c00197a8:	83 c4 0c             	add    esp,0xc
c00197ab:	89 c7                	mov    edi,eax
c00197ad:	ff 76 08             	push   DWORD PTR [esi+0x8]
c00197b0:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00197b7:	50                   	push   eax
c00197b8:	e8 8f 96 ff ff       	call   c0012e4c <File::File(char const*, Process*)>
c00197bd:	89 3c 24             	mov    DWORD PTR [esp],edi
c00197c0:	e8 59 99 ff ff       	call   c001311e <File::exists()>
c00197c5:	83 c4 10             	add    esp,0x10
c00197c8:	84 c0                	test   al,al
c00197ca:	75 31                	jne    c00197fd <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c00197cc:	51                   	push   ecx
c00197cd:	51                   	push   ecx
c00197ce:	6a 12                	push   0x12
c00197d0:	57                   	push   edi
c00197d1:	e8 da 96 ff ff       	call   c0012eb0 <File::open(FileOpenMode)>
c00197d6:	8b 07                	mov    eax,DWORD PTR [edi]
c00197d8:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c00197db:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00197de:	e8 fe 6e fe ff       	call   c00006e1 <strlen>
c00197e3:	5a                   	pop    edx
c00197e4:	31 d2                	xor    edx,edx
c00197e6:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00197ea:	51                   	push   ecx
c00197eb:	55                   	push   ebp
c00197ec:	52                   	push   edx
c00197ed:	50                   	push   eax
c00197ee:	57                   	push   edi
c00197ef:	ff d3                	call   ebx
c00197f1:	83 c4 14             	add    esp,0x14
c00197f4:	57                   	push   edi
c00197f5:	e8 14 97 ff ff       	call   c0012f0e <File::close()>
c00197fa:	83 c4 10             	add    esp,0x10
c00197fd:	31 db                	xor    ebx,ebx
c00197ff:	50                   	push   eax
c0019800:	31 ed                	xor    ebp,ebp
c0019802:	68 00 01 00 00       	push   0x100
c0019807:	6a 00                	push   0x0
c0019809:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001980d:	50                   	push   eax
c001980e:	e8 b1 6e fe ff       	call   c00006c4 <memset>
c0019813:	58                   	pop    eax
c0019814:	5a                   	pop    edx
c0019815:	6a 01                	push   0x1
c0019817:	57                   	push   edi
c0019818:	e8 93 96 ff ff       	call   c0012eb0 <File::open(FileOpenMode)>
c001981d:	83 c4 10             	add    esp,0x10
c0019820:	83 ec 0c             	sub    esp,0xc
c0019823:	8b 07                	mov    eax,DWORD PTR [edi]
c0019825:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019829:	51                   	push   ecx
c001982a:	8d 54 24 23          	lea    edx,[esp+0x23]
c001982e:	52                   	push   edx
c001982f:	6a 00                	push   0x0
c0019831:	6a 01                	push   0x1
c0019833:	57                   	push   edi
c0019834:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019837:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001983b:	83 c4 20             	add    esp,0x20
c001983e:	3c 0d                	cmp    al,0xd
c0019840:	0f 84 12 01 00 00    	je     c0019958 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c0019846:	85 db                	test   ebx,ebx
c0019848:	0f 84 fd 00 00 00    	je     c001994b <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001984e:	3c 0a                	cmp    al,0xa
c0019850:	74 13                	je     c0019865 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c0019852:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019857:	74 0c                	je     c0019865 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c0019859:	81 fd fe 00 00 00    	cmp    ebp,0xfe
c001985f:	0f 8e e6 00 00 00    	jle    c001994b <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c0019865:	83 ec 0c             	sub    esp,0xc
c0019868:	8d 53 01             	lea    edx,[ebx+0x1]
c001986b:	29 dd                	sub    ebp,ebx
c001986d:	52                   	push   edx
c001986e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0019872:	e8 ad 5d ff ff       	call   c000f624 <malloc>
c0019877:	8d 4d 04             	lea    ecx,[ebp+0x4]
c001987a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001987e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0019881:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0019885:	e8 9a 5d ff ff       	call   c000f624 <malloc>
c001988a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001988e:	83 c4 0c             	add    esp,0xc
c0019891:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019895:	52                   	push   edx
c0019896:	6a 00                	push   0x0
c0019898:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001989c:	e8 23 6e fe ff       	call   c00006c4 <memset>
c00198a1:	83 c4 0c             	add    esp,0xc
c00198a4:	53                   	push   ebx
c00198a5:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00198a9:	55                   	push   ebp
c00198aa:	01 eb                	add    ebx,ebp
c00198ac:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00198b0:	e8 eb 6d fe ff       	call   c00006a0 <memcpy>
c00198b5:	83 c4 0c             	add    esp,0xc
c00198b8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00198bc:	51                   	push   ecx
c00198bd:	6a 00                	push   0x0
c00198bf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00198c3:	e8 fc 6d fe ff       	call   c00006c4 <memset>
c00198c8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00198cb:	e8 11 6e fe ff       	call   c00006e1 <strlen>
c00198d0:	83 c4 0c             	add    esp,0xc
c00198d3:	50                   	push   eax
c00198d4:	53                   	push   ebx
c00198d5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00198d9:	e8 c2 6d fe ff       	call   c00006a0 <memcpy>
c00198de:	5b                   	pop    ebx
c00198df:	58                   	pop    eax
c00198e0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00198e4:	68 c4 ae 02 c0       	push   0xc002aec4
c00198e9:	e8 05 90 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00198ee:	8b 06                	mov    eax,DWORD PTR [esi]
c00198f0:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c00198f3:	40                   	inc    eax
c00198f4:	83 c4 10             	add    esp,0x10
c00198f7:	89 06                	mov    DWORD PTR [esi],eax
c00198f9:	85 d2                	test   edx,edx
c00198fb:	75 0c                	jne    c0019909 <EnvVarContainer::loadFrom(char const*, char const*)+0x183>
c00198fd:	83 ec 0c             	sub    esp,0xc
c0019900:	6a 08                	push   0x8
c0019902:	e8 1d 5d ff ff       	call   c000f624 <malloc>
c0019907:	eb 0c                	jmp    c0019915 <EnvVarContainer::loadFrom(char const*, char const*)+0x18f>
c0019909:	c1 e0 03             	shl    eax,0x3
c001990c:	51                   	push   ecx
c001990d:	51                   	push   ecx
c001990e:	50                   	push   eax
c001990f:	52                   	push   edx
c0019910:	e8 fb 5c ff ff       	call   c000f610 <realloc>
c0019915:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c0019918:	83 c4 10             	add    esp,0x10
c001991b:	31 db                	xor    ebx,ebx
c001991d:	52                   	push   edx
c001991e:	6a 08                	push   0x8
c0019920:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019924:	50                   	push   eax
c0019925:	8b 16                	mov    edx,DWORD PTR [esi]
c0019927:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001992a:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001992e:	50                   	push   eax
c001992f:	e8 6c 6d fe ff       	call   c00006a0 <memcpy>
c0019934:	83 c4 0c             	add    esp,0xc
c0019937:	68 00 01 00 00       	push   0x100
c001993c:	6a 00                	push   0x0
c001993e:	55                   	push   ebp
c001993f:	31 ed                	xor    ebp,ebp
c0019941:	e8 7e 6d fe ff       	call   c00006c4 <memset>
c0019946:	83 c4 10             	add    esp,0x10
c0019949:	eb 0d                	jmp    c0019958 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001994b:	3c 3d                	cmp    al,0x3d
c001994d:	74 07                	je     c0019956 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c001994f:	88 44 2c 20          	mov    BYTE PTR [esp+ebp*1+0x20],al
c0019953:	45                   	inc    ebp
c0019954:	eb 02                	jmp    c0019958 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c0019956:	89 eb                	mov    ebx,ebp
c0019958:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001995d:	0f 85 bd fe ff ff    	jne    c0019820 <EnvVarContainer::loadFrom(char const*, char const*)+0x9a>
c0019963:	50                   	push   eax
c0019964:	50                   	push   eax
c0019965:	ff 36                	push   DWORD PTR [esi]
c0019967:	68 d2 ae 02 c0       	push   0xc002aed2
c001996c:	e8 82 8f ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0019971:	81 c4 3c 01 00 00    	add    esp,0x13c
c0019977:	5b                   	pop    ebx
c0019978:	5e                   	pop    esi
c0019979:	5f                   	pop    edi
c001997a:	5d                   	pop    ebp
c001997b:	c3                   	ret    

c001997c <EnvVarContainer::__loadSystem()>:
c001997c:	83 ec 10             	sub    esp,0x10
c001997f:	68 c0 cd 02 c0       	push   0xc002cdc0
c0019984:	68 fd ae 02 c0       	push   0xc002aefd
c0019989:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001998d:	e8 f4 fd ff ff       	call   c0019786 <EnvVarContainer::loadFrom(char const*, char const*)>
c0019992:	83 c4 1c             	add    esp,0x1c
c0019995:	c3                   	ret    

c0019996 <EnvVarContainer::__loadUser()>:
c0019996:	c3                   	ret    
c0019997:	90                   	nop

c0019998 <EnvVarContainer::EnvVarContainer(Process*)>:
c0019998:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001999c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00199a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00199a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00199aa:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00199ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00199b1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00199b8:	90                   	nop
c00199b9:	c3                   	ret    

c00199ba <EnvVarContainer::~EnvVarContainer()>:
c00199ba:	83 ec 0c             	sub    esp,0xc
c00199bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00199c1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00199c4:	85 c0                	test   eax,eax
c00199c6:	74 1d                	je     c00199e5 <EnvVarContainer::~EnvVarContainer()+0x2b>
c00199c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00199cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00199ce:	85 c0                	test   eax,eax
c00199d0:	74 13                	je     c00199e5 <EnvVarContainer::~EnvVarContainer()+0x2b>
c00199d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00199d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00199d9:	83 ec 0c             	sub    esp,0xc
c00199dc:	50                   	push   eax
c00199dd:	e8 52 5c ff ff       	call   c000f634 <free>
c00199e2:	83 c4 10             	add    esp,0x10
c00199e5:	90                   	nop
c00199e6:	83 c4 0c             	add    esp,0xc
c00199e9:	c3                   	ret    

c00199ea <Krnl::getEnv(Process*, char const*)>:
c00199ea:	53                   	push   ebx
c00199eb:	83 ec 08             	sub    esp,0x8
c00199ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00199f2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00199f6:	39 05 d4 ed 02 c0    	cmp    DWORD PTR ds:0xc002edd4,eax
c00199fc:	74 04                	je     c0019a02 <Krnl::getEnv(Process*, char const*)+0x18>
c00199fe:	85 c0                	test   eax,eax
c0019a00:	75 0b                	jne    c0019a0d <Krnl::getEnv(Process*, char const*)+0x23>
c0019a02:	a1 b0 e3 02 c0       	mov    eax,ds:0xc002e3b0
c0019a07:	85 c0                	test   eax,eax
c0019a09:	75 19                	jne    c0019a24 <Krnl::getEnv(Process*, char const*)+0x3a>
c0019a0b:	eb 27                	jmp    c0019a34 <Krnl::getEnv(Process*, char const*)+0x4a>
c0019a0d:	52                   	push   edx
c0019a0e:	52                   	push   edx
c0019a0f:	53                   	push   ebx
c0019a10:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c0019a16:	e8 5f fc ff ff       	call   c001967a <EnvVarContainer::getEnv(char const*)>
c0019a1b:	83 c4 10             	add    esp,0x10
c0019a1e:	85 c0                	test   eax,eax
c0019a20:	75 28                	jne    c0019a4a <Krnl::getEnv(Process*, char const*)+0x60>
c0019a22:	eb de                	jmp    c0019a02 <Krnl::getEnv(Process*, char const*)+0x18>
c0019a24:	52                   	push   edx
c0019a25:	52                   	push   edx
c0019a26:	53                   	push   ebx
c0019a27:	50                   	push   eax
c0019a28:	e8 4d fc ff ff       	call   c001967a <EnvVarContainer::getEnv(char const*)>
c0019a2d:	83 c4 10             	add    esp,0x10
c0019a30:	85 c0                	test   eax,eax
c0019a32:	75 16                	jne    c0019a4a <Krnl::getEnv(Process*, char const*)+0x60>
c0019a34:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0019a38:	a1 b4 e3 02 c0       	mov    eax,ds:0xc002e3b4
c0019a3d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0019a41:	83 c4 08             	add    esp,0x8
c0019a44:	5b                   	pop    ebx
c0019a45:	e9 30 fc ff ff       	jmp    c001967a <EnvVarContainer::getEnv(char const*)>
c0019a4a:	83 c4 08             	add    esp,0x8
c0019a4d:	5b                   	pop    ebx
c0019a4e:	c3                   	ret    

c0019a4f <Krnl::setEnvSystem(char const*, char const*)>:
c0019a4f:	83 ec 10             	sub    esp,0x10
c0019a52:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019a56:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019a5a:	ff 35 b4 e3 02 c0    	push   DWORD PTR ds:0xc002e3b4
c0019a60:	e8 53 fc ff ff       	call   c00196b8 <EnvVarContainer::setEnv(char const*, char const*)>
c0019a65:	83 c4 1c             	add    esp,0x1c
c0019a68:	c3                   	ret    

c0019a69 <Krnl::setEnvUser(char const*, char const*)>:
c0019a69:	a1 b0 e3 02 c0       	mov    eax,ds:0xc002e3b0
c0019a6e:	85 c0                	test   eax,eax
c0019a70:	74 15                	je     c0019a87 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0019a72:	83 ec 10             	sub    esp,0x10
c0019a75:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019a79:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019a7d:	50                   	push   eax
c0019a7e:	e8 35 fc ff ff       	call   c00196b8 <EnvVarContainer::setEnv(char const*, char const*)>
c0019a83:	83 c4 1c             	add    esp,0x1c
c0019a86:	c3                   	ret    
c0019a87:	c3                   	ret    

c0019a88 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c0019a88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019a8c:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c0019a92:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019a96:	e9 1d fc ff ff       	jmp    c00196b8 <EnvVarContainer::setEnv(char const*, char const*)>

c0019a9b <Krnl::deleteEnvSystem(char const*)>:
c0019a9b:	c3                   	ret    

c0019a9c <Krnl::deleteEnvUser(char const*)>:
c0019a9c:	c3                   	ret    

c0019a9d <Krnl::deleteEnvProcess(Process*, char const*)>:
c0019a9d:	c3                   	ret    

c0019a9e <Krnl::newProcessEnv(Process*)>:
c0019a9e:	83 ec 28             	sub    esp,0x28
c0019aa1:	6a 0c                	push   0xc
c0019aa3:	e8 7c 5b ff ff       	call   c000f624 <malloc>
c0019aa8:	5a                   	pop    edx
c0019aa9:	59                   	pop    ecx
c0019aaa:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019aae:	50                   	push   eax
c0019aaf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019ab3:	e8 e0 fe ff ff       	call   c0019998 <EnvVarContainer::EnvVarContainer(Process*)>
c0019ab8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019abc:	83 c4 2c             	add    esp,0x2c
c0019abf:	c3                   	ret    

c0019ac0 <Krnl::copyProcessEnv(Process*, Process*)>:
c0019ac0:	56                   	push   esi
c0019ac1:	53                   	push   ebx
c0019ac2:	83 ec 10             	sub    esp,0x10
c0019ac5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019ac9:	8b b0 3a 07 00 00    	mov    esi,DWORD PTR [eax+0x73a]
c0019acf:	6a 0c                	push   0xc
c0019ad1:	e8 4e 5b ff ff       	call   c000f624 <malloc>
c0019ad6:	89 c3                	mov    ebx,eax
c0019ad8:	58                   	pop    eax
c0019ad9:	5a                   	pop    edx
c0019ada:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019ade:	53                   	push   ebx
c0019adf:	e8 b4 fe ff ff       	call   c0019998 <EnvVarContainer::EnvVarContainer(Process*)>
c0019ae4:	8b 06                	mov    eax,DWORD PTR [esi]
c0019ae6:	89 03                	mov    DWORD PTR [ebx],eax
c0019ae8:	c1 e0 03             	shl    eax,0x3
c0019aeb:	89 04 24             	mov    DWORD PTR [esp],eax
c0019aee:	e8 31 5b ff ff       	call   c000f624 <malloc>
c0019af3:	83 c4 0c             	add    esp,0xc
c0019af6:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0019af9:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0019afb:	8d 14 cd 00 00 00 00 	lea    edx,[ecx*8+0x0]
c0019b02:	52                   	push   edx
c0019b03:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0019b06:	50                   	push   eax
c0019b07:	e8 94 6b fe ff       	call   c00006a0 <memcpy>
c0019b0c:	89 d8                	mov    eax,ebx
c0019b0e:	83 c4 14             	add    esp,0x14
c0019b11:	5b                   	pop    ebx
c0019b12:	5e                   	pop    esi
c0019b13:	c3                   	ret    

c0019b14 <Krnl::loadSystemEnv()>:
c0019b14:	53                   	push   ebx
c0019b15:	83 ec 14             	sub    esp,0x14
c0019b18:	6a 0c                	push   0xc
c0019b1a:	e8 05 5b ff ff       	call   c000f624 <malloc>
c0019b1f:	89 c3                	mov    ebx,eax
c0019b21:	58                   	pop    eax
c0019b22:	5a                   	pop    edx
c0019b23:	ff 35 d4 ed 02 c0    	push   DWORD PTR ds:0xc002edd4
c0019b29:	53                   	push   ebx
c0019b2a:	e8 69 fe ff ff       	call   c0019998 <EnvVarContainer::EnvVarContainer(Process*)>
c0019b2f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019b32:	89 1d b4 e3 02 c0    	mov    DWORD PTR ds:0xc002e3b4,ebx
c0019b38:	e8 3f fe ff ff       	call   c001997c <EnvVarContainer::__loadSystem()>
c0019b3d:	83 c4 18             	add    esp,0x18
c0019b40:	5b                   	pop    ebx
c0019b41:	c3                   	ret    

c0019b42 <Krnl::loadUserEnv()>:
c0019b42:	53                   	push   ebx
c0019b43:	83 ec 14             	sub    esp,0x14
c0019b46:	6a 0c                	push   0xc
c0019b48:	e8 d7 5a ff ff       	call   c000f624 <malloc>
c0019b4d:	89 c3                	mov    ebx,eax
c0019b4f:	58                   	pop    eax
c0019b50:	5a                   	pop    edx
c0019b51:	ff 35 d4 ed 02 c0    	push   DWORD PTR ds:0xc002edd4
c0019b57:	53                   	push   ebx
c0019b58:	e8 3b fe ff ff       	call   c0019998 <EnvVarContainer::EnvVarContainer(Process*)>
c0019b5d:	89 1d b0 e3 02 c0    	mov    DWORD PTR ds:0xc002e3b0,ebx
c0019b63:	83 c4 18             	add    esp,0x18
c0019b66:	5b                   	pop    ebx
c0019b67:	c3                   	ret    

c0019b68 <Krnl::flushEnv()>:
c0019b68:	c3                   	ret    

c0019b69 <Krnl::getProcessTotalEnvCount(Process*)>:
c0019b69:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b6d:	8b 15 b0 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e3b0
c0019b73:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c0019b79:	a1 b4 e3 02 c0       	mov    eax,ds:0xc002e3b4
c0019b7e:	8b 00                	mov    eax,DWORD PTR [eax]
c0019b80:	03 01                	add    eax,DWORD PTR [ecx]
c0019b82:	85 d2                	test   edx,edx
c0019b84:	74 02                	je     c0019b88 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0019b86:	03 02                	add    eax,DWORD PTR [edx]
c0019b88:	c3                   	ret    

c0019b89 <Krnl::getProcessEnvPair(Process*, int)>:
c0019b89:	57                   	push   edi
c0019b8a:	8b 0d b0 e3 02 c0    	mov    ecx,DWORD PTR ds:0xc002e3b0
c0019b90:	56                   	push   esi
c0019b91:	85 c9                	test   ecx,ecx
c0019b93:	53                   	push   ebx
c0019b94:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0019b98:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019b9c:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c0019ba2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019ba6:	8b 02                	mov    eax,DWORD PTR [edx]
c0019ba8:	75 47                	jne    c0019bf1 <Krnl::getProcessEnvPair(Process*, int)+0x68>
c0019baa:	39 c3                	cmp    ebx,eax
c0019bac:	7c 47                	jl     c0019bf5 <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c0019bae:	8b 15 b4 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e3b4
c0019bb4:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019bb6:	01 c1                	add    ecx,eax
c0019bb8:	39 d9                	cmp    ecx,ebx
c0019bba:	7e 6c                	jle    c0019c28 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c0019bbc:	51                   	push   ecx
c0019bbd:	89 d9                	mov    ecx,ebx
c0019bbf:	29 c1                	sub    ecx,eax
c0019bc1:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0019bc4:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c0019bc8:	53                   	push   ebx
c0019bc9:	68 1f af 02 c0       	push   0xc002af1f
c0019bce:	e8 20 8d ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0019bd3:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c0019bd9:	2b 18                	sub    ebx,DWORD PTR [eax]
c0019bdb:	a1 b4 e3 02 c0       	mov    eax,ds:0xc002e3b4
c0019be0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019be3:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c0019be7:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0019bea:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0019bed:	89 06                	mov    DWORD PTR [esi],eax
c0019bef:	eb 51                	jmp    c0019c42 <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c0019bf1:	39 c3                	cmp    ebx,eax
c0019bf3:	7d 05                	jge    c0019bfa <Krnl::getProcessEnvPair(Process*, int)+0x71>
c0019bf5:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0019bf8:	eb 20                	jmp    c0019c1a <Krnl::getProcessEnvPair(Process*, int)+0x91>
c0019bfa:	8b 39                	mov    edi,DWORD PTR [ecx]
c0019bfc:	8d 14 07             	lea    edx,[edi+eax*1]
c0019bff:	39 da                	cmp    edx,ebx
c0019c01:	7e 04                	jle    c0019c07 <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c0019c03:	29 c3                	sub    ebx,eax
c0019c05:	eb 10                	jmp    c0019c17 <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c0019c07:	8b 0d b4 e3 02 c0    	mov    ecx,DWORD PTR ds:0xc002e3b4
c0019c0d:	03 11                	add    edx,DWORD PTR [ecx]
c0019c0f:	39 da                	cmp    edx,ebx
c0019c11:	7e 15                	jle    c0019c28 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c0019c13:	29 c3                	sub    ebx,eax
c0019c15:	29 fb                	sub    ebx,edi
c0019c17:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0019c1a:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c0019c1e:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0019c21:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0019c24:	89 06                	mov    DWORD PTR [esi],eax
c0019c26:	eb 1d                	jmp    c0019c45 <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c0019c28:	83 ec 0c             	sub    esp,0xc
c0019c2b:	68 33 af 02 c0       	push   0xc002af33
c0019c30:	e8 18 00 00 00       	call   c0019c4d <Krnl::panic(char const*)>
c0019c35:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0019c3b:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0019c42:	83 c4 10             	add    esp,0x10
c0019c45:	89 f0                	mov    eax,esi
c0019c47:	5b                   	pop    ebx
c0019c48:	5e                   	pop    esi
c0019c49:	5f                   	pop    edi
c0019c4a:	c2 04 00             	ret    0x4

c0019c4d <Krnl::panic(char const*)>:
c0019c4d:	55                   	push   ebp
c0019c4e:	89 e5                	mov    ebp,esp
c0019c50:	53                   	push   ebx
c0019c51:	83 ec 0c             	sub    esp,0xc
c0019c54:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0019c57:	fa                   	cli    
c0019c58:	c6 05 c0 e3 02 c0 01 	mov    BYTE PTR ds:0xc002e3c0,0x1
c0019c5f:	53                   	push   ebx
c0019c60:	c6 05 c4 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c7c4,0x0
c0019c67:	68 4d af 02 c0       	push   0xc002af4d
c0019c6c:	e8 82 8c ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0019c71:	58                   	pop    eax
c0019c72:	a1 d4 ed 02 c0       	mov    eax,ds:0xc002edd4
c0019c77:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019c7d:	e8 33 6e ff ff       	call   c0010ab5 <setActiveTerminal(VgaText*)>
c0019c82:	83 c4 0c             	add    esp,0xc
c0019c85:	a1 d4 ed 02 c0       	mov    eax,ds:0xc002edd4
c0019c8a:	6a 01                	push   0x1
c0019c8c:	6a 0f                	push   0xf
c0019c8e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019c94:	e8 4d 68 ff ff       	call   c00104e6 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0019c99:	58                   	pop    eax
c0019c9a:	a1 d4 ed 02 c0       	mov    eax,ds:0xc002edd4
c0019c9f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ca5:	e8 ac 70 ff ff       	call   c0010d56 <VgaText::clearScreen()>
c0019caa:	58                   	pop    eax
c0019cab:	a1 d4 ed 02 c0       	mov    eax,ds:0xc002edd4
c0019cb0:	5a                   	pop    edx
c0019cb1:	68 66 af 02 c0       	push   0xc002af66
c0019cb6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019cbc:	e8 13 72 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0019cc1:	59                   	pop    ecx
c0019cc2:	58                   	pop    eax
c0019cc3:	a1 d4 ed 02 c0       	mov    eax,ds:0xc002edd4
c0019cc8:	68 0c b0 02 c0       	push   0xc002b00c
c0019ccd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019cd3:	e8 fc 71 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0019cd8:	58                   	pop    eax
c0019cd9:	a1 d4 ed 02 c0       	mov    eax,ds:0xc002edd4
c0019cde:	5a                   	pop    edx
c0019cdf:	68 82 af 02 c0       	push   0xc002af82
c0019ce4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019cea:	e8 e5 71 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0019cef:	59                   	pop    ecx
c0019cf0:	58                   	pop    eax
c0019cf1:	a1 d4 ed 02 c0       	mov    eax,ds:0xc002edd4
c0019cf6:	53                   	push   ebx
c0019cf7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019cfd:	e8 d2 71 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0019d02:	58                   	pop    eax
c0019d03:	a1 d4 ed 02 c0       	mov    eax,ds:0xc002edd4
c0019d08:	5a                   	pop    edx
c0019d09:	68 a2 af 02 c0       	push   0xc002afa2
c0019d0e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019d14:	e8 bb 71 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0019d19:	a1 bc e3 02 c0       	mov    eax,ds:0xc002e3bc
c0019d1e:	83 c4 10             	add    esp,0x10
c0019d21:	85 c0                	test   eax,eax
c0019d23:	74 02                	je     c0019d27 <Krnl::panic(char const*)+0xda>
c0019d25:	ff d0                	call   eax
c0019d27:	83 ec 0c             	sub    esp,0xc
c0019d2a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019d2d:	e8 8d 2e 00 00       	call   c001cbbf <Thr::getDriverNameFromAddress(unsigned long)>
c0019d32:	83 c4 10             	add    esp,0x10
c0019d35:	89 c3                	mov    ebx,eax
c0019d37:	85 c0                	test   eax,eax
c0019d39:	0f 84 50 02 00 00    	je     c0019f8f <Krnl::panic(char const*)+0x342>
c0019d3f:	83 ec 08             	sub    esp,0x8
c0019d42:	8b 15 d4 ed 02 c0    	mov    edx,DWORD PTR ds:0xc002edd4
c0019d48:	68 48 b0 02 c0       	push   0xc002b048
c0019d4d:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c0019d53:	e8 7c 71 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0019d58:	58                   	pop    eax
c0019d59:	5a                   	pop    edx
c0019d5a:	8b 15 d4 ed 02 c0    	mov    edx,DWORD PTR ds:0xc002edd4
c0019d60:	68 82 af 02 c0       	push   0xc002af82
c0019d65:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c0019d6b:	e8 64 71 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0019d70:	59                   	pop    ecx
c0019d71:	58                   	pop    eax
c0019d72:	a1 d4 ed 02 c0       	mov    eax,ds:0xc002edd4
c0019d77:	53                   	push   ebx
c0019d78:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019d7e:	e8 51 71 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0019d83:	83 c4 10             	add    esp,0x10
c0019d86:	83 ec 08             	sub    esp,0x8
c0019d89:	a1 d4 ed 02 c0       	mov    eax,ds:0xc002edd4
c0019d8e:	68 a1 af 02 c0       	push   0xc002afa1
c0019d93:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019d99:	e8 36 71 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0019d9e:	58                   	pop    eax
c0019d9f:	a1 d4 ed 02 c0       	mov    eax,ds:0xc002edd4
c0019da4:	5a                   	pop    edx
c0019da5:	68 a0 b0 02 c0       	push   0xc002b0a0
c0019daa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019db0:	e8 1f 71 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0019db5:	59                   	pop    ecx
c0019db6:	a1 d4 ed 02 c0       	mov    eax,ds:0xc002edd4
c0019dbb:	5b                   	pop    ebx
c0019dbc:	68 e0 b0 02 c0       	push   0xc002b0e0
c0019dc1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019dc7:	e8 08 71 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0019dcc:	58                   	pop    eax
c0019dcd:	a1 d4 ed 02 c0       	mov    eax,ds:0xc002edd4
c0019dd2:	5a                   	pop    edx
c0019dd3:	68 8d af 02 c0       	push   0xc002af8d
c0019dd8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019dde:	e8 f1 70 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0019de3:	59                   	pop    ecx
c0019de4:	5b                   	pop    ebx
c0019de5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019de8:	68 a5 af 02 c0       	push   0xc002afa5
c0019ded:	e8 01 8b ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0019df2:	58                   	pop    eax
c0019df3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019df6:	5a                   	pop    edx
c0019df7:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0019dfa:	68 ae af 02 c0       	push   0xc002afae
c0019dff:	e8 ef 8a ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0019e04:	59                   	pop    ecx
c0019e05:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019e08:	5b                   	pop    ebx
c0019e09:	8b 00                	mov    eax,DWORD PTR [eax]
c0019e0b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0019e0e:	68 b7 af 02 c0       	push   0xc002afb7
c0019e13:	e8 db 8a ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0019e18:	58                   	pop    eax
c0019e19:	a1 d4 ed 02 c0       	mov    eax,ds:0xc002edd4
c0019e1e:	5a                   	pop    edx
c0019e1f:	68 24 b1 02 c0       	push   0xc002b124
c0019e24:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e2a:	e8 a5 70 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0019e2f:	59                   	pop    ecx
c0019e30:	a1 d4 ed 02 c0       	mov    eax,ds:0xc002edd4
c0019e35:	5b                   	pop    ebx
c0019e36:	68 c0 af 02 c0       	push   0xc002afc0
c0019e3b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e41:	e8 8e 70 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0019e46:	0f 20 c0             	mov    eax,cr0
c0019e49:	5a                   	pop    edx
c0019e4a:	59                   	pop    ecx
c0019e4b:	50                   	push   eax
c0019e4c:	a1 d4 ed 02 c0       	mov    eax,ds:0xc002edd4
c0019e51:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e57:	e8 9e 70 ff ff       	call   c0010efa <VgaText::putx(unsigned int)>
c0019e5c:	5b                   	pop    ebx
c0019e5d:	58                   	pop    eax
c0019e5e:	a1 d4 ed 02 c0       	mov    eax,ds:0xc002edd4
c0019e63:	68 ca af 02 c0       	push   0xc002afca
c0019e68:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e6e:	e8 61 70 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0019e73:	0f 20 d0             	mov    eax,cr2
c0019e76:	5a                   	pop    edx
c0019e77:	59                   	pop    ecx
c0019e78:	50                   	push   eax
c0019e79:	a1 d4 ed 02 c0       	mov    eax,ds:0xc002edd4
c0019e7e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e84:	e8 71 70 ff ff       	call   c0010efa <VgaText::putx(unsigned int)>
c0019e89:	5b                   	pop    ebx
c0019e8a:	58                   	pop    eax
c0019e8b:	a1 d4 ed 02 c0       	mov    eax,ds:0xc002edd4
c0019e90:	68 d4 af 02 c0       	push   0xc002afd4
c0019e95:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e9b:	e8 34 70 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0019ea0:	0f 20 d8             	mov    eax,cr3
c0019ea3:	5a                   	pop    edx
c0019ea4:	59                   	pop    ecx
c0019ea5:	50                   	push   eax
c0019ea6:	a1 d4 ed 02 c0       	mov    eax,ds:0xc002edd4
c0019eab:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019eb1:	e8 44 70 ff ff       	call   c0010efa <VgaText::putx(unsigned int)>
c0019eb6:	5b                   	pop    ebx
c0019eb7:	58                   	pop    eax
c0019eb8:	a1 d4 ed 02 c0       	mov    eax,ds:0xc002edd4
c0019ebd:	68 e7 af 02 c0       	push   0xc002afe7
c0019ec2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ec8:	e8 07 70 ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0019ecd:	0f 20 e0             	mov    eax,cr4
c0019ed0:	5a                   	pop    edx
c0019ed1:	59                   	pop    ecx
c0019ed2:	50                   	push   eax
c0019ed3:	a1 d4 ed 02 c0       	mov    eax,ds:0xc002edd4
c0019ed8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ede:	e8 17 70 ff ff       	call   c0010efa <VgaText::putx(unsigned int)>
c0019ee3:	5b                   	pop    ebx
c0019ee4:	58                   	pop    eax
c0019ee5:	a1 d4 ed 02 c0       	mov    eax,ds:0xc002edd4
c0019eea:	68 f1 af 02 c0       	push   0xc002aff1
c0019eef:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ef5:	e8 da 6f ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0019efa:	5a                   	pop    edx
c0019efb:	a1 d4 ed 02 c0       	mov    eax,ds:0xc002edd4
c0019f00:	59                   	pop    ecx
c0019f01:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019f07:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019f0a:	50                   	push   eax
c0019f0b:	e8 ea 6f ff ff       	call   c0010efa <VgaText::putx(unsigned int)>
c0019f10:	5b                   	pop    ebx
c0019f11:	58                   	pop    eax
c0019f12:	a1 d4 ed 02 c0       	mov    eax,ds:0xc002edd4
c0019f17:	68 08 b0 02 c0       	push   0xc002b008
c0019f1c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f22:	e8 ad 6f ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0019f27:	5a                   	pop    edx
c0019f28:	a1 d4 ed 02 c0       	mov    eax,ds:0xc002edd4
c0019f2d:	59                   	pop    ecx
c0019f2e:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019f34:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019f37:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0019f3a:	50                   	push   eax
c0019f3b:	e8 ba 6f ff ff       	call   c0010efa <VgaText::putx(unsigned int)>
c0019f40:	5b                   	pop    ebx
c0019f41:	58                   	pop    eax
c0019f42:	a1 d4 ed 02 c0       	mov    eax,ds:0xc002edd4
c0019f47:	68 08 b0 02 c0       	push   0xc002b008
c0019f4c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f52:	e8 7d 6f ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0019f57:	a1 d4 ed 02 c0       	mov    eax,ds:0xc002edd4
c0019f5c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019f5f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019f65:	8b 12                	mov    edx,DWORD PTR [edx]
c0019f67:	59                   	pop    ecx
c0019f68:	5b                   	pop    ebx
c0019f69:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0019f6c:	50                   	push   eax
c0019f6d:	e8 88 6f ff ff       	call   c0010efa <VgaText::putx(unsigned int)>
c0019f72:	83 c4 10             	add    esp,0x10
c0019f75:	b2 fe                	mov    dl,0xfe
c0019f77:	e4 60                	in     al,0x60
c0019f79:	3c 1c                	cmp    al,0x1c
c0019f7b:	74 04                	je     c0019f81 <Krnl::panic(char const*)+0x334>
c0019f7d:	3c 5a                	cmp    al,0x5a
c0019f7f:	75 f6                	jne    c0019f77 <Krnl::panic(char const*)+0x32a>
c0019f81:	e4 64                	in     al,0x64
c0019f83:	a8 02                	test   al,0x2
c0019f85:	75 fa                	jne    c0019f81 <Krnl::panic(char const*)+0x334>
c0019f87:	88 d0                	mov    al,dl
c0019f89:	e6 64                	out    0x64,al
c0019f8b:	fa                   	cli    
c0019f8c:	f4                   	hlt    
c0019f8d:	eb e8                	jmp    c0019f77 <Krnl::panic(char const*)+0x32a>
c0019f8f:	50                   	push   eax
c0019f90:	50                   	push   eax
c0019f91:	a1 d4 ed 02 c0       	mov    eax,ds:0xc002edd4
c0019f96:	68 74 b0 02 c0       	push   0xc002b074
c0019f9b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019fa1:	e8 2e 6f ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0019fa6:	58                   	pop    eax
c0019fa7:	a1 d4 ed 02 c0       	mov    eax,ds:0xc002edd4
c0019fac:	5a                   	pop    edx
c0019fad:	68 82 af 02 c0       	push   0xc002af82
c0019fb2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019fb8:	e8 17 6f ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0019fbd:	59                   	pop    ecx
c0019fbe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019fc3:	5b                   	pop    ebx
c0019fc4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019fc7:	83 c0 0c             	add    eax,0xc
c0019fca:	50                   	push   eax
c0019fcb:	a1 d4 ed 02 c0       	mov    eax,ds:0xc002edd4
c0019fd0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019fd6:	e8 f9 6e ff ff       	call   c0010ed4 <VgaText::puts(char const*)>
c0019fdb:	83 c4 10             	add    esp,0x10
c0019fde:	e9 a3 fd ff ff       	jmp    c0019d86 <Krnl::panic(char const*)+0x139>

c0019fe3 <Net::switchEndian16(unsigned short)>:
c0019fe3:	83 ec 04             	sub    esp,0x4
c0019fe6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019fea:	66 89 04 24          	mov    WORD PTR [esp],ax
c0019fee:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0019ff2:	c1 f8 08             	sar    eax,0x8
c0019ff5:	89 c2                	mov    edx,eax
c0019ff7:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0019ffb:	c1 e0 08             	shl    eax,0x8
c0019ffe:	09 d0                	or     eax,edx
c001a000:	83 c4 04             	add    esp,0x4
c001a003:	c3                   	ret    

c001a004 <Net::switchEndian32(unsigned int)>:
c001a004:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a008:	c1 e8 18             	shr    eax,0x18
c001a00b:	89 c2                	mov    edx,eax
c001a00d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a011:	c1 e0 08             	shl    eax,0x8
c001a014:	25 00 00 ff 00       	and    eax,0xff0000
c001a019:	09 c2                	or     edx,eax
c001a01b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a01f:	c1 e8 08             	shr    eax,0x8
c001a022:	25 00 ff 00 00       	and    eax,0xff00
c001a027:	09 c2                	or     edx,eax
c001a029:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a02d:	c1 e0 18             	shl    eax,0x18
c001a030:	09 d0                	or     eax,edx
c001a032:	c3                   	ret    

c001a033 <Net::crc32Calc(unsigned char*, int)>:
c001a033:	83 ec 10             	sub    esp,0x10
c001a036:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a03b:	75 07                	jne    c001a044 <Net::crc32Calc(unsigned char*, int)+0x11>
c001a03d:	b8 00 00 00 00       	mov    eax,0x0
c001a042:	eb 7c                	jmp    c001a0c0 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a044:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001a049:	7f 07                	jg     c001a052 <Net::crc32Calc(unsigned char*, int)+0x1f>
c001a04b:	b8 00 00 00 00       	mov    eax,0x0
c001a050:	eb 6e                	jmp    c001a0c0 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a052:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001a05a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a062:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a066:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001a06a:	7d 4e                	jge    c001a0ba <Net::crc32Calc(unsigned char*, int)+0x87>
c001a06c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a070:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a074:	01 d0                	add    eax,edx
c001a076:	8a 00                	mov    al,BYTE PTR [eax]
c001a078:	0f b6 c0             	movzx  eax,al
c001a07b:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001a07f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a087:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001a08c:	7f 26                	jg     c001a0b4 <Net::crc32Calc(unsigned char*, int)+0x81>
c001a08e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a092:	83 e0 01             	and    eax,0x1
c001a095:	74 0d                	je     c001a0a4 <Net::crc32Calc(unsigned char*, int)+0x71>
c001a097:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a09b:	d1 e8                	shr    eax,1
c001a09d:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001a0a2:	eb 06                	jmp    c001a0aa <Net::crc32Calc(unsigned char*, int)+0x77>
c001a0a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a0a8:	d1 e8                	shr    eax,1
c001a0aa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a0ae:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a0b2:	eb d3                	jmp    c001a087 <Net::crc32Calc(unsigned char*, int)+0x54>
c001a0b4:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001a0b8:	eb a8                	jmp    c001a062 <Net::crc32Calc(unsigned char*, int)+0x2f>
c001a0ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a0be:	f7 d0                	not    eax
c001a0c0:	83 c4 10             	add    esp,0x10
c001a0c3:	c3                   	ret    

c001a0c4 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001a0c4:	83 ec 1c             	sub    esp,0x1c
c001a0c7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a0cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a0cf:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a0d7:	83 7c 24 0c 06       	cmp    DWORD PTR [esp+0xc],0x6
c001a0dc:	7f 14                	jg     c001a0f2 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x2e>
c001a0de:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a0e2:	8d 50 01             	lea    edx,[eax+0x1]
c001a0e5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a0e9:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001a0ec:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a0f0:	eb e5                	jmp    c001a0d7 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x13>
c001a0f2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a0f6:	8d 50 01             	lea    edx,[eax+0x1]
c001a0f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a0fd:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001a100:	83 ec 04             	sub    esp,0x4
c001a103:	6a 06                	push   0x6
c001a105:	8d 44 24 36          	lea    eax,[esp+0x36]
c001a109:	50                   	push   eax
c001a10a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001a10e:	e8 8d 65 fe ff       	call   c00006a0 <memcpy>
c001a113:	83 c4 10             	add    esp,0x10
c001a116:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001a11b:	83 ec 04             	sub    esp,0x4
c001a11e:	6a 06                	push   0x6
c001a120:	8d 44 24 30          	lea    eax,[esp+0x30]
c001a124:	50                   	push   eax
c001a125:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001a129:	e8 72 65 fe ff       	call   c00006a0 <memcpy>
c001a12e:	83 c4 10             	add    esp,0x10
c001a131:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001a136:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a13a:	0f b7 c0             	movzx  eax,ax
c001a13d:	c1 f8 08             	sar    eax,0x8
c001a140:	89 c1                	mov    ecx,eax
c001a142:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a146:	8d 50 01             	lea    edx,[eax+0x1]
c001a149:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a14d:	88 ca                	mov    dl,cl
c001a14f:	88 10                	mov    BYTE PTR [eax],dl
c001a151:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a155:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a159:	8d 48 01             	lea    ecx,[eax+0x1]
c001a15c:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001a160:	88 10                	mov    BYTE PTR [eax],dl
c001a162:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001a166:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a16a:	83 ec 04             	sub    esp,0x4
c001a16d:	52                   	push   edx
c001a16e:	50                   	push   eax
c001a16f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001a173:	e8 28 65 fe ff       	call   c00006a0 <memcpy>
c001a178:	83 c4 10             	add    esp,0x10
c001a17b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a17f:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c001a183:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a187:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c001a18b:	83 ec 08             	sub    esp,0x8
c001a18e:	50                   	push   eax
c001a18f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a193:	e8 9b fe ff ff       	call   c001a033 <Net::crc32Calc(unsigned char*, int)>
c001a198:	83 c4 10             	add    esp,0x10
c001a19b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a19f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a1a3:	c1 e8 18             	shr    eax,0x18
c001a1a6:	89 c1                	mov    ecx,eax
c001a1a8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a1ac:	8d 50 01             	lea    edx,[eax+0x1]
c001a1af:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a1b3:	88 ca                	mov    dl,cl
c001a1b5:	88 10                	mov    BYTE PTR [eax],dl
c001a1b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a1bb:	c1 e8 10             	shr    eax,0x10
c001a1be:	89 c1                	mov    ecx,eax
c001a1c0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a1c4:	8d 50 01             	lea    edx,[eax+0x1]
c001a1c7:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a1cb:	88 ca                	mov    dl,cl
c001a1cd:	88 10                	mov    BYTE PTR [eax],dl
c001a1cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a1d3:	c1 e8 08             	shr    eax,0x8
c001a1d6:	89 c1                	mov    ecx,eax
c001a1d8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a1dc:	8d 50 01             	lea    edx,[eax+0x1]
c001a1df:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a1e3:	88 ca                	mov    dl,cl
c001a1e5:	88 10                	mov    BYTE PTR [eax],dl
c001a1e7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a1eb:	8d 50 01             	lea    edx,[eax+0x1]
c001a1ee:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a1f2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a1f6:	88 10                	mov    BYTE PTR [eax],dl
c001a1f8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a1fc:	83 c4 1c             	add    esp,0x1c
c001a1ff:	c3                   	ret    

c001a200 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001a200:	83 ec 2c             	sub    esp,0x2c
c001a203:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a207:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a20b:	83 44 24 34 08       	add    DWORD PTR [esp+0x34],0x8
c001a210:	83 ec 04             	sub    esp,0x4
c001a213:	6a 06                	push   0x6
c001a215:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a219:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a21d:	83 c0 0e             	add    eax,0xe
c001a220:	50                   	push   eax
c001a221:	e8 7a 64 fe ff       	call   c00006a0 <memcpy>
c001a226:	83 c4 10             	add    esp,0x10
c001a229:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001a22e:	83 ec 04             	sub    esp,0x4
c001a231:	6a 06                	push   0x6
c001a233:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a237:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a23b:	83 c0 08             	add    eax,0x8
c001a23e:	50                   	push   eax
c001a23f:	e8 5c 64 fe ff       	call   c00006a0 <memcpy>
c001a244:	83 c4 10             	add    esp,0x10
c001a247:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001a24c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a250:	8d 50 01             	lea    edx,[eax+0x1]
c001a253:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a257:	8a 00                	mov    al,BYTE PTR [eax]
c001a259:	0f b6 c0             	movzx  eax,al
c001a25c:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001a261:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a265:	8d 50 01             	lea    edx,[eax+0x1]
c001a268:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a26c:	8a 00                	mov    al,BYTE PTR [eax]
c001a26e:	0f b6 c0             	movzx  eax,al
c001a271:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c001a276:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c001a27b:	c1 e0 08             	shl    eax,0x8
c001a27e:	89 c2                	mov    edx,eax
c001a280:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a284:	09 d0                	or     eax,edx
c001a286:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a28a:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001a28e:	83 7c 24 38 ff       	cmp    DWORD PTR [esp+0x38],0xffffffff
c001a293:	75 3a                	jne    c001a2cf <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001a295:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a299:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a29c:	66 3d dc 05          	cmp    ax,0x5dc
c001a2a0:	77 10                	ja     c001a2b2 <Net::unwrapEthernetFrame(unsigned char*, int)+0xb2>
c001a2a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a2a6:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a2a9:	0f b7 c0             	movzx  eax,ax
c001a2ac:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a2b0:	eb 1d                	jmp    c001a2cf <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001a2b2:	83 ec 0c             	sub    esp,0xc
c001a2b5:	68 4c b1 02 c0       	push   0xc002b14c
c001a2ba:	e8 34 86 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001a2bf:	83 c4 10             	add    esp,0x10
c001a2c2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a2c6:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001a2ca:	e9 c0 00 00 00       	jmp    c001a38f <Net::unwrapEthernetFrame(unsigned char*, int)+0x18f>
c001a2cf:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001a2d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a2d7:	8b 00                	mov    eax,DWORD PTR [eax]
c001a2d9:	83 ec 04             	sub    esp,0x4
c001a2dc:	52                   	push   edx
c001a2dd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a2e1:	50                   	push   eax
c001a2e2:	e8 b9 63 fe ff       	call   c00006a0 <memcpy>
c001a2e7:	83 c4 10             	add    esp,0x10
c001a2ea:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a2ee:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001a2f2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a2f6:	8d 50 01             	lea    edx,[eax+0x1]
c001a2f9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a2fd:	8a 00                	mov    al,BYTE PTR [eax]
c001a2ff:	0f b6 c0             	movzx  eax,al
c001a302:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a306:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a30a:	8d 50 01             	lea    edx,[eax+0x1]
c001a30d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a311:	8a 00                	mov    al,BYTE PTR [eax]
c001a313:	0f b6 c0             	movzx  eax,al
c001a316:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a31a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a31e:	8d 50 01             	lea    edx,[eax+0x1]
c001a321:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a325:	8a 00                	mov    al,BYTE PTR [eax]
c001a327:	0f b6 c0             	movzx  eax,al
c001a32a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a32e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a332:	8d 50 01             	lea    edx,[eax+0x1]
c001a335:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a339:	8a 00                	mov    al,BYTE PTR [eax]
c001a33b:	0f b6 c0             	movzx  eax,al
c001a33e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a342:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a346:	c1 e0 18             	shl    eax,0x18
c001a349:	89 c2                	mov    edx,eax
c001a34b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a34f:	c1 e0 10             	shl    eax,0x10
c001a352:	09 c2                	or     edx,eax
c001a354:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a358:	c1 e0 08             	shl    eax,0x8
c001a35b:	09 d0                	or     eax,edx
c001a35d:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c001a361:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a365:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a369:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c001a36d:	83 e8 04             	sub    eax,0x4
c001a370:	83 ec 08             	sub    esp,0x8
c001a373:	50                   	push   eax
c001a374:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a378:	e8 b6 fc ff ff       	call   c001a033 <Net::crc32Calc(unsigned char*, int)>
c001a37d:	83 c4 10             	add    esp,0x10
c001a380:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001a384:	0f 94 c2             	sete   dl
c001a387:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a38b:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001a38e:	90                   	nop
c001a38f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a393:	83 c4 2c             	add    esp,0x2c
c001a396:	c2 04 00             	ret    0x4

c001a399 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001a399:	55                   	push   ebp
c001a39a:	57                   	push   edi
c001a39b:	56                   	push   esi
c001a39c:	53                   	push   ebx
c001a39d:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a3a3:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001a3aa:	8a 1e                	mov    bl,BYTE PTR [esi]
c001a3ac:	8d 6e 01             	lea    ebp,[esi+0x1]
c001a3af:	80 fb 40             	cmp    bl,0x40
c001a3b2:	75 1b                	jne    c001a3cf <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001a3b4:	8a 16                	mov    dl,BYTE PTR [esi]
c001a3b6:	84 d2                	test   dl,dl
c001a3b8:	0f 84 f1 00 00 00    	je     c001a4af <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a3be:	8d 46 01             	lea    eax,[esi+0x1]
c001a3c1:	80 fa 3a             	cmp    dl,0x3a
c001a3c4:	74 04                	je     c001a3ca <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001a3c6:	89 c6                	mov    esi,eax
c001a3c8:	eb ea                	jmp    c001a3b4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001a3ca:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a3cd:	89 c6                	mov    esi,eax
c001a3cf:	50                   	push   eax
c001a3d0:	6a 40                	push   0x40
c001a3d2:	6a 00                	push   0x0
c001a3d4:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a3d8:	50                   	push   eax
c001a3d9:	e8 e6 62 fe ff       	call   c00006c4 <memset>
c001a3de:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001a3e5:	31 c0                	xor    eax,eax
c001a3e7:	83 c4 10             	add    esp,0x10
c001a3ea:	8a 0f                	mov    cl,BYTE PTR [edi]
c001a3ec:	84 c9                	test   cl,cl
c001a3ee:	0f 84 bb 00 00 00    	je     c001a4af <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a3f4:	3d c7 00 00 00       	cmp    eax,0xc7
c001a3f9:	0f 8f b0 00 00 00    	jg     c001a4af <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a3ff:	80 f9 0a             	cmp    cl,0xa
c001a402:	0f 85 98 00 00 00    	jne    c001a4a0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001a408:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001a40d:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001a411:	a8 df                	test   al,0xdf
c001a413:	0f 94 c1             	sete   cl
c001a416:	3c 23                	cmp    al,0x23
c001a418:	0f 94 c2             	sete   dl
c001a41b:	08 d1                	or     cl,dl
c001a41d:	75 4a                	jne    c001a469 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a41f:	8d 50 f7             	lea    edx,[eax-0x9]
c001a422:	80 fa 01             	cmp    dl,0x1
c001a425:	76 42                	jbe    c001a469 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a427:	3c 5b                	cmp    al,0x5b
c001a429:	75 42                	jne    c001a46d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001a42b:	80 fb 40             	cmp    bl,0x40
c001a42e:	75 39                	jne    c001a469 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a430:	83 ec 0c             	sub    esp,0xc
c001a433:	8d 54 24 65          	lea    edx,[esp+0x65]
c001a437:	52                   	push   edx
c001a438:	e8 a4 62 fe ff       	call   c00006e1 <strlen>
c001a43d:	83 c4 10             	add    esp,0x10
c001a440:	83 f8 3f             	cmp    eax,0x3f
c001a443:	77 6a                	ja     c001a4af <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a445:	50                   	push   eax
c001a446:	50                   	push   eax
c001a447:	8d 54 24 61          	lea    edx,[esp+0x61]
c001a44b:	52                   	push   edx
c001a44c:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a450:	52                   	push   edx
c001a451:	e8 0d 63 fe ff       	call   c0000763 <strcpy>
c001a456:	58                   	pop    eax
c001a457:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a45b:	52                   	push   edx
c001a45c:	e8 80 62 fe ff       	call   c00006e1 <strlen>
c001a461:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001a466:	83 c4 10             	add    esp,0x10
c001a469:	31 d2                	xor    edx,edx
c001a46b:	eb 3a                	jmp    c001a4a7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001a46d:	80 fb 40             	cmp    bl,0x40
c001a470:	74 06                	je     c001a478 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001a472:	8d 44 24 58          	lea    eax,[esp+0x58]
c001a476:	eb 20                	jmp    c001a498 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001a478:	50                   	push   eax
c001a479:	50                   	push   eax
c001a47a:	55                   	push   ebp
c001a47b:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a47f:	50                   	push   eax
c001a480:	e8 2f 63 fe ff       	call   c00007b4 <strcmp>
c001a485:	83 c4 10             	add    esp,0x10
c001a488:	85 c0                	test   eax,eax
c001a48a:	75 dd                	jne    c001a469 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a48c:	eb e4                	jmp    c001a472 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001a48e:	8d 50 01             	lea    edx,[eax+0x1]
c001a491:	80 f9 3d             	cmp    cl,0x3d
c001a494:	74 1d                	je     c001a4b3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001a496:	89 d0                	mov    eax,edx
c001a498:	8a 08                	mov    cl,BYTE PTR [eax]
c001a49a:	84 c9                	test   cl,cl
c001a49c:	75 f0                	jne    c001a48e <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001a49e:	eb 0f                	jmp    c001a4af <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a4a0:	8d 50 01             	lea    edx,[eax+0x1]
c001a4a3:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001a4a7:	47                   	inc    edi
c001a4a8:	89 d0                	mov    eax,edx
c001a4aa:	e9 3b ff ff ff       	jmp    c001a3ea <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001a4af:	31 c0                	xor    eax,eax
c001a4b1:	eb 33                	jmp    c001a4e6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001a4b3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a4b7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001a4ba:	50                   	push   eax
c001a4bb:	50                   	push   eax
c001a4bc:	8d 44 24 60          	lea    eax,[esp+0x60]
c001a4c0:	50                   	push   eax
c001a4c1:	56                   	push   esi
c001a4c2:	e8 ed 62 fe ff       	call   c00007b4 <strcmp>
c001a4c7:	83 c4 10             	add    esp,0x10
c001a4ca:	85 c0                	test   eax,eax
c001a4cc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a4d0:	75 97                	jne    c001a469 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a4d2:	51                   	push   ecx
c001a4d3:	51                   	push   ecx
c001a4d4:	52                   	push   edx
c001a4d5:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001a4dc:	e8 82 62 fe ff       	call   c0000763 <strcpy>
c001a4e1:	83 c4 10             	add    esp,0x10
c001a4e4:	b0 01                	mov    al,0x1
c001a4e6:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a4ec:	5b                   	pop    ebx
c001a4ed:	5e                   	pop    esi
c001a4ee:	5f                   	pop    edi
c001a4ef:	5d                   	pop    ebp
c001a4f0:	c3                   	ret    

c001a4f1 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001a4f1:	57                   	push   edi
c001a4f2:	56                   	push   esi
c001a4f3:	53                   	push   ebx
c001a4f4:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a4fa:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001a501:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001a508:	53                   	push   ebx
c001a509:	e8 d3 61 fe ff       	call   c00006e1 <strlen>
c001a50e:	89 34 24             	mov    DWORD PTR [esp],esi
c001a511:	89 c7                	mov    edi,eax
c001a513:	e8 c9 61 fe ff       	call   c00006e1 <strlen>
c001a518:	83 c4 10             	add    esp,0x10
c001a51b:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001a51f:	3d ff 00 00 00       	cmp    eax,0xff
c001a524:	0f 87 d3 00 00 00    	ja     c001a5fd <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a52a:	57                   	push   edi
c001a52b:	57                   	push   edi
c001a52c:	56                   	push   esi
c001a52d:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001a531:	56                   	push   esi
c001a532:	e8 2c 62 fe ff       	call   c0000763 <strcpy>
c001a537:	58                   	pop    eax
c001a538:	5a                   	pop    edx
c001a539:	68 80 b5 02 c0       	push   0xc002b580
c001a53e:	56                   	push   esi
c001a53f:	e8 d6 62 fe ff       	call   c000081a <strcat>
c001a544:	59                   	pop    ecx
c001a545:	5f                   	pop    edi
c001a546:	53                   	push   ebx
c001a547:	56                   	push   esi
c001a548:	e8 cd 62 fe ff       	call   c000081a <strcat>
c001a54d:	58                   	pop    eax
c001a54e:	5a                   	pop    edx
c001a54f:	68 98 b1 02 c0       	push   0xc002b198
c001a554:	56                   	push   esi
c001a555:	e8 c0 62 fe ff       	call   c000081a <strcat>
c001a55a:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001a561:	e8 be 50 ff ff       	call   c000f624 <malloc>
c001a566:	83 c4 0c             	add    esp,0xc
c001a569:	89 c3                	mov    ebx,eax
c001a56b:	ff 35 d4 ed 02 c0    	push   DWORD PTR ds:0xc002edd4
c001a571:	56                   	push   esi
c001a572:	50                   	push   eax
c001a573:	e8 d4 88 ff ff       	call   c0012e4c <File::File(char const*, Process*)>
c001a578:	83 c4 10             	add    esp,0x10
c001a57b:	85 db                	test   ebx,ebx
c001a57d:	74 7e                	je     c001a5fd <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a57f:	51                   	push   ecx
c001a580:	51                   	push   ecx
c001a581:	6a 01                	push   0x1
c001a583:	53                   	push   ebx
c001a584:	e8 27 89 ff ff       	call   c0012eb0 <File::open(FileOpenMode)>
c001a589:	83 c4 10             	add    esp,0x10
c001a58c:	85 c0                	test   eax,eax
c001a58e:	74 08                	je     c001a598 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001a590:	83 ec 0c             	sub    esp,0xc
c001a593:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a595:	53                   	push   ebx
c001a596:	eb 5f                	jmp    c001a5f7 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001a598:	52                   	push   edx
c001a599:	8d 44 24 17          	lea    eax,[esp+0x17]
c001a59d:	50                   	push   eax
c001a59e:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a5a2:	50                   	push   eax
c001a5a3:	53                   	push   ebx
c001a5a4:	e8 b3 8b ff ff       	call   c001315c <File::stat(unsigned long long*, bool*)>
c001a5a9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a5ad:	83 c4 10             	add    esp,0x10
c001a5b0:	89 c1                	mov    ecx,eax
c001a5b2:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001a5b6:	74 31                	je     c001a5e9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a5b8:	83 ec 0c             	sub    esp,0xc
c001a5bb:	50                   	push   eax
c001a5bc:	e8 63 50 ff ff       	call   c000f624 <malloc>
c001a5c1:	89 c6                	mov    esi,eax
c001a5c3:	58                   	pop    eax
c001a5c4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a5c6:	8d 54 24 20          	lea    edx,[esp+0x20]
c001a5ca:	52                   	push   edx
c001a5cb:	56                   	push   esi
c001a5cc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a5d0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a5d4:	53                   	push   ebx
c001a5d5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a5d8:	83 c4 20             	add    esp,0x20
c001a5db:	85 c0                	test   eax,eax
c001a5dd:	75 0a                	jne    c001a5e9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a5df:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a5e3:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001a5e7:	74 18                	je     c001a601 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001a5e9:	83 ec 0c             	sub    esp,0xc
c001a5ec:	53                   	push   ebx
c001a5ed:	e8 1c 89 ff ff       	call   c0012f0e <File::close()>
c001a5f2:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a5f4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a5f7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a5fa:	83 c4 10             	add    esp,0x10
c001a5fd:	31 c0                	xor    eax,eax
c001a5ff:	eb 3b                	jmp    c001a63c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001a601:	83 ec 0c             	sub    esp,0xc
c001a604:	53                   	push   ebx
c001a605:	e8 04 89 ff ff       	call   c0012f0e <File::close()>
c001a60a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a60c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a60f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a612:	83 c4 0c             	add    esp,0xc
c001a615:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a61c:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a623:	56                   	push   esi
c001a624:	e8 70 fd ff ff       	call   c001a399 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001a629:	89 34 24             	mov    DWORD PTR [esp],esi
c001a62c:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001a630:	e8 ff 4f ff ff       	call   c000f634 <free>
c001a635:	83 c4 10             	add    esp,0x10
c001a638:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001a63c:	81 c4 20 01 00 00    	add    esp,0x120
c001a642:	5b                   	pop    ebx
c001a643:	5e                   	pop    esi
c001a644:	5f                   	pop    edi
c001a645:	c3                   	ret    

c001a646 <Reg::getLine(char*, char*, char*)>:
c001a646:	57                   	push   edi
c001a647:	56                   	push   esi
c001a648:	53                   	push   ebx
c001a649:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a64d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a651:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001a655:	57                   	push   edi
c001a656:	56                   	push   esi
c001a657:	53                   	push   ebx
c001a658:	68 9d b1 02 c0       	push   0xc002b19d
c001a65d:	e8 8f fe ff ff       	call   c001a4f1 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001a662:	83 c4 10             	add    esp,0x10
c001a665:	84 c0                	test   al,al
c001a667:	75 10                	jne    c001a679 <Reg::getLine(char*, char*, char*)+0x33>
c001a669:	57                   	push   edi
c001a66a:	56                   	push   esi
c001a66b:	53                   	push   ebx
c001a66c:	68 c2 b1 02 c0       	push   0xc002b1c2
c001a671:	e8 7b fe ff ff       	call   c001a4f1 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001a676:	83 c4 10             	add    esp,0x10
c001a679:	5b                   	pop    ebx
c001a67a:	5e                   	pop    esi
c001a67b:	5f                   	pop    edi
c001a67c:	c3                   	ret    

c001a67d <Reg::readInt(char*, char*, int*)>:
c001a67d:	55                   	push   ebp
c001a67e:	57                   	push   edi
c001a67f:	56                   	push   esi
c001a680:	53                   	push   ebx
c001a681:	81 ec f0 00 00 00    	sub    esp,0xf0
c001a687:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001a68b:	57                   	push   edi
c001a68c:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001a693:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001a69a:	e8 a7 ff ff ff       	call   c001a646 <Reg::getLine(char*, char*, char*)>
c001a69f:	83 c4 10             	add    esp,0x10
c001a6a2:	84 c0                	test   al,al
c001a6a4:	0f 84 b3 00 00 00    	je     c001a75d <Reg::readInt(char*, char*, int*)+0xe0>
c001a6aa:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001a6ae:	80 fa 2b             	cmp    dl,0x2b
c001a6b1:	74 0c                	je     c001a6bf <Reg::readInt(char*, char*, int*)+0x42>
c001a6b3:	80 fa 2d             	cmp    dl,0x2d
c001a6b6:	75 0e                	jne    c001a6c6 <Reg::readInt(char*, char*, int*)+0x49>
c001a6b8:	ba 01 00 00 00       	mov    edx,0x1
c001a6bd:	eb 0b                	jmp    c001a6ca <Reg::readInt(char*, char*, int*)+0x4d>
c001a6bf:	ba 01 00 00 00       	mov    edx,0x1
c001a6c4:	eb 02                	jmp    c001a6c8 <Reg::readInt(char*, char*, int*)+0x4b>
c001a6c6:	31 d2                	xor    edx,edx
c001a6c8:	31 c0                	xor    eax,eax
c001a6ca:	be 0a 00 00 00       	mov    esi,0xa
c001a6cf:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001a6d4:	75 20                	jne    c001a6f6 <Reg::readInt(char*, char*, int*)+0x79>
c001a6d6:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001a6da:	80 f9 78             	cmp    cl,0x78
c001a6dd:	75 0a                	jne    c001a6e9 <Reg::readInt(char*, char*, int*)+0x6c>
c001a6df:	83 c2 02             	add    edx,0x2
c001a6e2:	be 10 00 00 00       	mov    esi,0x10
c001a6e7:	eb 0d                	jmp    c001a6f6 <Reg::readInt(char*, char*, int*)+0x79>
c001a6e9:	80 f9 62             	cmp    cl,0x62
c001a6ec:	75 08                	jne    c001a6f6 <Reg::readInt(char*, char*, int*)+0x79>
c001a6ee:	83 c2 02             	add    edx,0x2
c001a6f1:	be 02 00 00 00       	mov    esi,0x2
c001a6f6:	01 d7                	add    edi,edx
c001a6f8:	31 d2                	xor    edx,edx
c001a6fa:	8a 1f                	mov    bl,BYTE PTR [edi]
c001a6fc:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001a700:	80 fb 0d             	cmp    bl,0xd
c001a703:	0f 94 c3             	sete   bl
c001a706:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001a70b:	0f 94 c1             	sete   cl
c001a70e:	08 cb                	or     bl,cl
c001a710:	75 3a                	jne    c001a74c <Reg::readInt(char*, char*, int*)+0xcf>
c001a712:	0f af d6             	imul   edx,esi
c001a715:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001a71a:	83 fe 10             	cmp    esi,0x10
c001a71d:	75 26                	jne    c001a745 <Reg::readInt(char*, char*, int*)+0xc8>
c001a71f:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001a723:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001a726:	89 e9                	mov    ecx,ebp
c001a728:	80 f9 05             	cmp    cl,0x5
c001a72b:	77 06                	ja     c001a733 <Reg::readInt(char*, char*, int*)+0xb6>
c001a72d:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001a731:	eb 16                	jmp    c001a749 <Reg::readInt(char*, char*, int*)+0xcc>
c001a733:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001a737:	83 e9 61             	sub    ecx,0x61
c001a73a:	80 f9 05             	cmp    cl,0x5
c001a73d:	77 06                	ja     c001a745 <Reg::readInt(char*, char*, int*)+0xc8>
c001a73f:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001a743:	eb 04                	jmp    c001a749 <Reg::readInt(char*, char*, int*)+0xcc>
c001a745:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001a749:	47                   	inc    edi
c001a74a:	eb ae                	jmp    c001a6fa <Reg::readInt(char*, char*, int*)+0x7d>
c001a74c:	84 c0                	test   al,al
c001a74e:	74 02                	je     c001a752 <Reg::readInt(char*, char*, int*)+0xd5>
c001a750:	f7 da                	neg    edx
c001a752:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001a759:	89 10                	mov    DWORD PTR [eax],edx
c001a75b:	88 d8                	mov    al,bl
c001a75d:	81 c4 ec 00 00 00    	add    esp,0xec
c001a763:	5b                   	pop    ebx
c001a764:	5e                   	pop    esi
c001a765:	5f                   	pop    edi
c001a766:	5d                   	pop    ebp
c001a767:	c3                   	ret    

c001a768 <Reg::readString(char*, char*, char*, int)>:
c001a768:	57                   	push   edi
c001a769:	56                   	push   esi
c001a76a:	53                   	push   ebx
c001a76b:	81 ec d4 00 00 00    	sub    esp,0xd4
c001a771:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001a778:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001a77c:	57                   	push   edi
c001a77d:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001a784:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001a78b:	e8 b6 fe ff ff       	call   c001a646 <Reg::getLine(char*, char*, char*)>
c001a790:	83 c4 10             	add    esp,0x10
c001a793:	89 c6                	mov    esi,eax
c001a795:	84 c0                	test   al,al
c001a797:	74 44                	je     c001a7dd <Reg::readString(char*, char*, char*, int)+0x75>
c001a799:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001a7a0:	31 c0                	xor    eax,eax
c001a7a2:	4a                   	dec    edx
c001a7a3:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001a7a6:	84 c9                	test   cl,cl
c001a7a8:	74 0f                	je     c001a7b9 <Reg::readString(char*, char*, char*, int)+0x51>
c001a7aa:	39 c2                	cmp    edx,eax
c001a7ac:	7e 0b                	jle    c001a7b9 <Reg::readString(char*, char*, char*, int)+0x51>
c001a7ae:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001a7b1:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001a7b6:	40                   	inc    eax
c001a7b7:	eb ea                	jmp    c001a7a3 <Reg::readString(char*, char*, char*, int)+0x3b>
c001a7b9:	83 ec 0c             	sub    esp,0xc
c001a7bc:	53                   	push   ebx
c001a7bd:	e8 1f 5f fe ff       	call   c00006e1 <strlen>
c001a7c2:	83 c4 10             	add    esp,0x10
c001a7c5:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001a7ca:	75 11                	jne    c001a7dd <Reg::readString(char*, char*, char*, int)+0x75>
c001a7cc:	83 ec 0c             	sub    esp,0xc
c001a7cf:	53                   	push   ebx
c001a7d0:	e8 0c 5f fe ff       	call   c00006e1 <strlen>
c001a7d5:	83 c4 10             	add    esp,0x10
c001a7d8:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001a7dd:	81 c4 d0 00 00 00    	add    esp,0xd0
c001a7e3:	89 f0                	mov    eax,esi
c001a7e5:	5b                   	pop    ebx
c001a7e6:	5e                   	pop    esi
c001a7e7:	5f                   	pop    edi
c001a7e8:	c3                   	ret    

c001a7e9 <Reg::readBool(char*, char*, bool*)>:
c001a7e9:	83 ec 20             	sub    esp,0x20
c001a7ec:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a7f0:	50                   	push   eax
c001a7f1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a7f5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a7f9:	e8 7f fe ff ff       	call   c001a67d <Reg::readInt(char*, char*, int*)>
c001a7fe:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001a803:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001a807:	0f 95 02             	setne  BYTE PTR [edx]
c001a80a:	83 c4 2c             	add    esp,0x2c
c001a80d:	c3                   	ret    

c001a80e <Reg::readBoolWithDefault(char*, char*, bool)>:
c001a80e:	53                   	push   ebx
c001a80f:	83 ec 1c             	sub    esp,0x1c
c001a812:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001a816:	8d 44 24 13          	lea    eax,[esp+0x13]
c001a81a:	50                   	push   eax
c001a81b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a81f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a823:	e8 c1 ff ff ff       	call   c001a7e9 <Reg::readBool(char*, char*, bool*)>
c001a828:	83 c4 10             	add    esp,0x10
c001a82b:	84 c0                	test   al,al
c001a82d:	74 04                	je     c001a833 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001a82f:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001a833:	88 d8                	mov    al,bl
c001a835:	83 c4 18             	add    esp,0x18
c001a838:	5b                   	pop    ebx
c001a839:	c3                   	ret    

c001a83a <Reg::readIntWithDefault(char*, char*, int)>:
c001a83a:	53                   	push   ebx
c001a83b:	83 ec 1c             	sub    esp,0x1c
c001a83e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a842:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a846:	50                   	push   eax
c001a847:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a84b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a84f:	e8 29 fe ff ff       	call   c001a67d <Reg::readInt(char*, char*, int*)>
c001a854:	83 c4 10             	add    esp,0x10
c001a857:	84 c0                	test   al,al
c001a859:	74 04                	je     c001a85f <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001a85b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001a85f:	89 d8                	mov    eax,ebx
c001a861:	83 c4 18             	add    esp,0x18
c001a864:	5b                   	pop    ebx
c001a865:	c3                   	ret    

c001a866 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001a866:	57                   	push   edi
c001a867:	56                   	push   esi
c001a868:	53                   	push   ebx
c001a869:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a86d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001a871:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001a875:	56                   	push   esi
c001a876:	53                   	push   ebx
c001a877:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a87b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a87f:	e8 e4 fe ff ff       	call   c001a768 <Reg::readString(char*, char*, char*, int)>
c001a884:	83 c4 10             	add    esp,0x10
c001a887:	84 c0                	test   al,al
c001a889:	75 1b                	jne    c001a8a6 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c001a88b:	50                   	push   eax
c001a88c:	56                   	push   esi
c001a88d:	4e                   	dec    esi
c001a88e:	6a 00                	push   0x0
c001a890:	53                   	push   ebx
c001a891:	e8 2e 5e fe ff       	call   c00006c4 <memset>
c001a896:	83 c4 0c             	add    esp,0xc
c001a899:	56                   	push   esi
c001a89a:	57                   	push   edi
c001a89b:	53                   	push   ebx
c001a89c:	89 fb                	mov    ebx,edi
c001a89e:	e8 fd 5d fe ff       	call   c00006a0 <memcpy>
c001a8a3:	83 c4 10             	add    esp,0x10
c001a8a6:	89 d8                	mov    eax,ebx
c001a8a8:	5b                   	pop    ebx
c001a8a9:	5e                   	pop    esi
c001a8aa:	5f                   	pop    edi
c001a8ab:	c3                   	ret    

c001a8ac <Sys::eject(regs*)>:
c001a8ac:	83 ec 18             	sub    esp,0x18
c001a8af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a8b3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001a8b6:	ff 34 85 9c dd 02 c0 	push   DWORD PTR [eax*4-0x3ffd2264]
c001a8bd:	e8 44 b7 ff ff       	call   c0016006 <LogicalDisk::eject()>
c001a8c2:	83 c4 1c             	add    esp,0x1c
c001a8c5:	99                   	cdq    
c001a8c6:	c3                   	ret    

c001a8c7 <Sys::exit(regs*)>:
c001a8c7:	83 ec 18             	sub    esp,0x18
c001a8ca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a8ce:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001a8d1:	e8 f1 33 00 00       	call   c001dcc7 <terminateTask(int)>
c001a8d6:	83 c8 ff             	or     eax,0xffffffff
c001a8d9:	83 c4 1c             	add    esp,0x1c
c001a8dc:	89 c2                	mov    edx,eax
c001a8de:	c3                   	ret    

c001a8df <Sys::getCwd(regs*)>:
c001a8df:	83 ec 10             	sub    esp,0x10
c001a8e2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a8e6:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001a8e9:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001a8ec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a8f1:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a8f4:	e8 55 83 ff ff       	call   c0012c4e <Fs::getcwd(Process*, char*, int)>
c001a8f9:	83 c4 1c             	add    esp,0x1c
c001a8fc:	99                   	cdq    
c001a8fd:	c3                   	ret    

c001a8fe <Sys::getPID(regs*)>:
c001a8fe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a903:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a906:	8b 00                	mov    eax,DWORD PTR [eax]
c001a908:	99                   	cdq    
c001a909:	c3                   	ret    

c001a90a <Sys::loadDLL(regs*)>:
c001a90a:	56                   	push   esi
c001a90b:	53                   	push   ebx
c001a90c:	31 d2                	xor    edx,edx
c001a90e:	51                   	push   ecx
c001a90f:	b8 01 00 00 00       	mov    eax,0x1
c001a914:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a918:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001a91c:	0f 84 8c 00 00 00    	je     c001a9ae <Sys::loadDLL(regs*)+0xa4>
c001a922:	83 ec 0c             	sub    esp,0xc
c001a925:	68 14 01 00 00       	push   0x114
c001a92a:	e8 f5 4c ff ff       	call   c000f624 <malloc>
c001a92f:	83 c4 0c             	add    esp,0xc
c001a932:	89 c3                	mov    ebx,eax
c001a934:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a939:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a93c:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001a93f:	53                   	push   ebx
c001a940:	e8 07 85 ff ff       	call   c0012e4c <File::File(char const*, Process*)>
c001a945:	83 c4 10             	add    esp,0x10
c001a948:	31 d2                	xor    edx,edx
c001a94a:	b8 02 00 00 00       	mov    eax,0x2
c001a94f:	85 db                	test   ebx,ebx
c001a951:	74 5b                	je     c001a9ae <Sys::loadDLL(regs*)+0xa4>
c001a953:	83 ec 0c             	sub    esp,0xc
c001a956:	53                   	push   ebx
c001a957:	e8 c2 87 ff ff       	call   c001311e <File::exists()>
c001a95c:	83 c4 10             	add    esp,0x10
c001a95f:	84 c0                	test   al,al
c001a961:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a963:	75 11                	jne    c001a976 <Sys::loadDLL(regs*)+0x6c>
c001a965:	83 ec 0c             	sub    esp,0xc
c001a968:	53                   	push   ebx
c001a969:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a96c:	83 c4 10             	add    esp,0x10
c001a96f:	b8 03 00 00 00       	mov    eax,0x3
c001a974:	eb 36                	jmp    c001a9ac <Sys::loadDLL(regs*)+0xa2>
c001a976:	83 ec 0c             	sub    esp,0xc
c001a979:	53                   	push   ebx
c001a97a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a97d:	58                   	pop    eax
c001a97e:	5a                   	pop    edx
c001a97f:	6a 00                	push   0x0
c001a981:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001a984:	e8 87 22 00 00       	call   c001cc10 <Thr::loadDLL(char const*, bool)>
c001a989:	83 c4 10             	add    esp,0x10
c001a98c:	89 c1                	mov    ecx,eax
c001a98e:	31 d2                	xor    edx,edx
c001a990:	b8 04 00 00 00       	mov    eax,0x4
c001a995:	85 c9                	test   ecx,ecx
c001a997:	74 15                	je     c001a9ae <Sys::loadDLL(regs*)+0xa4>
c001a999:	53                   	push   ebx
c001a99a:	53                   	push   ebx
c001a99b:	ff 35 88 d8 02 c0    	push   DWORD PTR ds:0xc002d888
c001a9a1:	51                   	push   ecx
c001a9a2:	e8 78 24 00 00       	call   c001ce1f <Thr::executeDLL(unsigned long, void*)>
c001a9a7:	83 c4 10             	add    esp,0x10
c001a9aa:	31 c0                	xor    eax,eax
c001a9ac:	31 d2                	xor    edx,edx
c001a9ae:	59                   	pop    ecx
c001a9af:	5b                   	pop    ebx
c001a9b0:	5e                   	pop    esi
c001a9b1:	c3                   	ret    

c001a9b2 <Sys::read(regs*)>:
c001a9b2:	57                   	push   edi
c001a9b3:	56                   	push   esi
c001a9b4:	53                   	push   ebx
c001a9b5:	83 ec 10             	sub    esp,0x10
c001a9b8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a9bc:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a9bf:	83 f8 02             	cmp    eax,0x2
c001a9c2:	77 10                	ja     c001a9d4 <Sys::read(regs*)+0x22>
c001a9c4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a9c9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a9cc:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001a9d2:	eb 0e                	jmp    c001a9e2 <Sys::read(regs*)+0x30>
c001a9d4:	83 ec 0c             	sub    esp,0xc
c001a9d7:	50                   	push   eax
c001a9d8:	e8 d0 6d ff ff       	call   c00117ad <getFromFileDescriptor(int)>
c001a9dd:	83 c4 10             	add    esp,0x10
c001a9e0:	89 c1                	mov    ecx,eax
c001a9e2:	83 c8 ff             	or     eax,0xffffffff
c001a9e5:	85 c9                	test   ecx,ecx
c001a9e7:	89 c2                	mov    edx,eax
c001a9e9:	74 28                	je     c001aa13 <Sys::read(regs*)+0x61>
c001a9eb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a9f3:	31 ff                	xor    edi,edi
c001a9f5:	83 ec 0c             	sub    esp,0xc
c001a9f8:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a9fa:	8d 54 24 18          	lea    edx,[esp+0x18]
c001a9fe:	52                   	push   edx
c001a9ff:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001aa02:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001aa05:	57                   	push   edi
c001aa06:	56                   	push   esi
c001aa07:	51                   	push   ecx
c001aa08:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001aa0b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001aa0f:	83 c4 20             	add    esp,0x20
c001aa12:	99                   	cdq    
c001aa13:	83 c4 10             	add    esp,0x10
c001aa16:	5b                   	pop    ebx
c001aa17:	5e                   	pop    esi
c001aa18:	5f                   	pop    edi
c001aa19:	c3                   	ret    

c001aa1a <Sys::sbrk(regs*)>:
c001aa1a:	56                   	push   esi
c001aa1b:	53                   	push   ebx
c001aa1c:	50                   	push   eax
c001aa1d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aa22:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001aa26:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001aa29:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001aa2c:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001aa32:	85 db                	test   ebx,ebx
c001aa34:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001aa37:	74 02                	je     c001aa3b <Sys::sbrk(regs*)+0x21>
c001aa39:	79 06                	jns    c001aa41 <Sys::sbrk(regs*)+0x27>
c001aa3b:	89 f0                	mov    eax,esi
c001aa3d:	31 d2                	xor    edx,edx
c001aa3f:	eb 2a                	jmp    c001aa6b <Sys::sbrk(regs*)+0x51>
c001aa41:	83 c8 ff             	or     eax,0xffffffff
c001aa44:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001aa4a:	89 c2                	mov    edx,eax
c001aa4c:	77 1d                	ja     c001aa6b <Sys::sbrk(regs*)+0x51>
c001aa4e:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001aa54:	50                   	push   eax
c001aa55:	c1 ea 0c             	shr    edx,0xc
c001aa58:	68 07 04 00 00       	push   0x407
c001aa5d:	52                   	push   edx
c001aa5e:	51                   	push   ecx
c001aa5f:	e8 6a 76 ff ff       	call   c00120ce <VAS::allocatePages(int, int)>
c001aa64:	89 f0                	mov    eax,esi
c001aa66:	31 d2                	xor    edx,edx
c001aa68:	83 c4 10             	add    esp,0x10
c001aa6b:	59                   	pop    ecx
c001aa6c:	5b                   	pop    ebx
c001aa6d:	5e                   	pop    esi
c001aa6e:	c3                   	ret    

c001aa6f <Sys::setCwd(regs*)>:
c001aa6f:	83 ec 14             	sub    esp,0x14
c001aa72:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001aa76:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001aa79:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aa7e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001aa81:	e8 37 87 ff ff       	call   c00131bd <Fs::setcwd(Process*, char*)>
c001aa86:	83 c4 1c             	add    esp,0x1c
c001aa89:	99                   	cdq    
c001aa8a:	c3                   	ret    

c001aa8b <Sys::setTime(regs*)>:
c001aa8b:	55                   	push   ebp
c001aa8c:	31 d2                	xor    edx,edx
c001aa8e:	57                   	push   edi
c001aa8f:	bf 18 00 00 00       	mov    edi,0x18
c001aa94:	56                   	push   esi
c001aa95:	53                   	push   ebx
c001aa96:	bb 3c 00 00 00       	mov    ebx,0x3c
c001aa9b:	83 ec 30             	sub    esp,0x30
c001aa9e:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001aaa2:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001aaa5:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001aaa8:	f7 f3                	div    ebx
c001aaaa:	89 d6                	mov    esi,edx
c001aaac:	31 d2                	xor    edx,edx
c001aaae:	f7 f3                	div    ebx
c001aab0:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001aab3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001aab7:	bb 10 0e 00 00       	mov    ebx,0xe10
c001aabc:	31 d2                	xor    edx,edx
c001aabe:	f7 f3                	div    ebx
c001aac0:	31 d2                	xor    edx,edx
c001aac2:	bb 0c 00 00 00       	mov    ebx,0xc
c001aac7:	f7 f7                	div    edi
c001aac9:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001aacc:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001aad0:	0f b7 cd             	movzx  ecx,bp
c001aad3:	56                   	push   esi
c001aad4:	89 c7                	mov    edi,eax
c001aad6:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001aada:	c1 e6 10             	shl    esi,0x10
c001aadd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001aae1:	83 e7 1f             	and    edi,0x1f
c001aae4:	51                   	push   ecx
c001aae5:	47                   	inc    edi
c001aae6:	c1 e8 05             	shr    eax,0x5
c001aae9:	31 d2                	xor    edx,edx
c001aaeb:	f7 f3                	div    ebx
c001aaed:	31 db                	xor    ebx,ebx
c001aaef:	52                   	push   edx
c001aaf0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001aaf4:	57                   	push   edi
c001aaf5:	68 dd b1 02 c0       	push   0xc002b1dd
c001aafa:	e8 f4 7d ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001aaff:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ab03:	89 f8                	mov    eax,edi
c001ab05:	31 c9                	xor    ecx,ecx
c001ab07:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001ab0b:	88 c1                	mov    cl,al
c001ab0d:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001ab13:	88 d5                	mov    ch,dl
c001ab15:	c1 e0 10             	shl    eax,0x10
c001ab18:	0f b7 d1             	movzx  edx,cx
c001ab1b:	09 c2                	or     edx,eax
c001ab1d:	89 d8                	mov    eax,ebx
c001ab1f:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001ab24:	09 f0                	or     eax,esi
c001ab26:	89 c3                	mov    ebx,eax
c001ab28:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001ab2c:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001ab30:	83 c4 18             	add    esp,0x18
c001ab33:	53                   	push   ebx
c001ab34:	52                   	push   edx
c001ab35:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001ab39:	8d 74 24 28          	lea    esi,[esp+0x28]
c001ab3d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001ab41:	e8 91 8d ff ff       	call   c00138d7 <datetimeToSeconds(datetime_t)>
c001ab46:	83 c4 0c             	add    esp,0xc
c001ab49:	52                   	push   edx
c001ab4a:	50                   	push   eax
c001ab4b:	56                   	push   esi
c001ab4c:	e8 0d 8f ff ff       	call   c0013a5e <secondsToDatetime(unsigned long long)>
c001ab51:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ab55:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ab59:	51                   	push   ecx
c001ab5a:	89 d6                	mov    esi,edx
c001ab5c:	51                   	push   ecx
c001ab5d:	c1 ee 10             	shr    esi,0x10
c001ab60:	89 f3                	mov    ebx,esi
c001ab62:	0f b6 f3             	movzx  esi,bl
c001ab65:	56                   	push   esi
c001ab66:	0f b6 f6             	movzx  esi,dh
c001ab69:	0f b6 d2             	movzx  edx,dl
c001ab6c:	56                   	push   esi
c001ab6d:	52                   	push   edx
c001ab6e:	89 c2                	mov    edx,eax
c001ab70:	c1 ea 10             	shr    edx,0x10
c001ab73:	52                   	push   edx
c001ab74:	0f b6 d4             	movzx  edx,ah
c001ab77:	0f b6 c0             	movzx  eax,al
c001ab7a:	52                   	push   edx
c001ab7b:	50                   	push   eax
c001ab7c:	68 f9 b1 02 c0       	push   0xc002b1f9
c001ab81:	e8 6d 7d ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001ab86:	83 c4 2c             	add    esp,0x2c
c001ab89:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c001ab8e:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001ab92:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001ab96:	53                   	push   ebx
c001ab97:	51                   	push   ecx
c001ab98:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001ab9e:	e8 5b 8e ff ff       	call   c00139fe <Clock::setTimeInDatetimeLocal(datetime_t)>
c001aba3:	83 f0 01             	xor    eax,0x1
c001aba6:	31 d2                	xor    edx,edx
c001aba8:	0f b6 c0             	movzx  eax,al
c001abab:	83 c4 3c             	add    esp,0x3c
c001abae:	5b                   	pop    ebx
c001abaf:	5e                   	pop    esi
c001abb0:	5f                   	pop    edi
c001abb1:	5d                   	pop    ebp
c001abb2:	c3                   	ret    

c001abb3 <Sys::timezone(regs*)>:
c001abb3:	53                   	push   ebx
c001abb4:	83 ec 08             	sub    esp,0x8
c001abb7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001abbb:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001abbf:	75 17                	jne    c001abd8 <Sys::timezone(regs*)+0x25>
c001abc1:	83 ec 0c             	sub    esp,0xc
c001abc4:	68 15 b2 02 c0       	push   0xc002b215
c001abc9:	e8 25 7d ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001abce:	83 c8 ff             	or     eax,0xffffffff
c001abd1:	83 c4 10             	add    esp,0x10
c001abd4:	89 c2                	mov    edx,eax
c001abd6:	eb 20                	jmp    c001abf8 <Sys::timezone(regs*)+0x45>
c001abd8:	83 ec 0c             	sub    esp,0xc
c001abdb:	68 4d b2 02 c0       	push   0xc002b24d
c001abe0:	e8 0e 7d ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001abe5:	58                   	pop    eax
c001abe6:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001abe9:	e8 72 8b ff ff       	call   c0013760 <User::loadClockSettings(int)>
c001abee:	83 c4 10             	add    esp,0x10
c001abf1:	b8 01 00 00 00       	mov    eax,0x1
c001abf6:	31 d2                	xor    edx,edx
c001abf8:	83 c4 08             	add    esp,0x8
c001abfb:	5b                   	pop    ebx
c001abfc:	c3                   	ret    

c001abfd <Sys::write(regs*)>:
c001abfd:	57                   	push   edi
c001abfe:	56                   	push   esi
c001abff:	53                   	push   ebx
c001ac00:	83 ec 10             	sub    esp,0x10
c001ac03:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ac07:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ac0a:	83 f8 02             	cmp    eax,0x2
c001ac0d:	77 10                	ja     c001ac1f <Sys::write(regs*)+0x22>
c001ac0f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ac14:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ac17:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001ac1d:	eb 0e                	jmp    c001ac2d <Sys::write(regs*)+0x30>
c001ac1f:	83 ec 0c             	sub    esp,0xc
c001ac22:	50                   	push   eax
c001ac23:	e8 85 6b ff ff       	call   c00117ad <getFromFileDescriptor(int)>
c001ac28:	83 c4 10             	add    esp,0x10
c001ac2b:	89 c1                	mov    ecx,eax
c001ac2d:	83 c8 ff             	or     eax,0xffffffff
c001ac30:	85 c9                	test   ecx,ecx
c001ac32:	89 c2                	mov    edx,eax
c001ac34:	74 28                	je     c001ac5e <Sys::write(regs*)+0x61>
c001ac36:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ac3e:	31 ff                	xor    edi,edi
c001ac40:	83 ec 0c             	sub    esp,0xc
c001ac43:	8b 01                	mov    eax,DWORD PTR [ecx]
c001ac45:	8d 54 24 18          	lea    edx,[esp+0x18]
c001ac49:	52                   	push   edx
c001ac4a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001ac4d:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001ac50:	57                   	push   edi
c001ac51:	56                   	push   esi
c001ac52:	51                   	push   ecx
c001ac53:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001ac56:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ac5a:	83 c4 20             	add    esp,0x20
c001ac5d:	99                   	cdq    
c001ac5e:	83 c4 10             	add    esp,0x10
c001ac61:	5b                   	pop    ebx
c001ac62:	5e                   	pop    esi
c001ac63:	5f                   	pop    edi
c001ac64:	c3                   	ret    

c001ac65 <Sys::yield(regs*)>:
c001ac65:	57                   	push   edi
c001ac66:	56                   	push   esi
c001ac67:	53                   	push   ebx
c001ac68:	e8 17 26 00 00       	call   c001d284 <lockScheduler()>
c001ac6d:	e8 4e 29 00 00       	call   c001d5c0 <schedule()>
c001ac72:	e8 0f 26 00 00       	call   c001d286 <unlockScheduler()>
c001ac77:	8b 35 10 df 02 c0    	mov    esi,DWORD PTR ds:0xc002df10
c001ac7d:	8b 3d 14 df 02 c0    	mov    edi,DWORD PTR ds:0xc002df14
c001ac83:	89 f0                	mov    eax,esi
c001ac85:	89 fb                	mov    ebx,edi
c001ac87:	89 f1                	mov    ecx,esi
c001ac89:	c1 e0 07             	shl    eax,0x7
c001ac8c:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001ac90:	25 80 30 0f 00       	and    eax,0xf3080
c001ac95:	c1 eb 17             	shr    ebx,0x17
c001ac98:	31 c8                	xor    eax,ecx
c001ac9a:	89 da                	mov    edx,ebx
c001ac9c:	5b                   	pop    ebx
c001ac9d:	5e                   	pop    esi
c001ac9e:	5f                   	pop    edi
c001ac9f:	c3                   	ret    

c001aca0 <sysCallSeekDir(regs*)>:
c001aca0:	31 c0                	xor    eax,eax
c001aca2:	31 d2                	xor    edx,edx
c001aca4:	c3                   	ret    

c001aca5 <sysCallTellDir(regs*)>:
c001aca5:	31 c0                	xor    eax,eax
c001aca7:	31 d2                	xor    edx,edx
c001aca9:	c3                   	ret    

c001acaa <sysCallVerify(regs*)>:
c001acaa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001acae:	31 d2                	xor    edx,edx
c001acb0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001acb3:	c3                   	ret    

c001acb4 <sysCallGetArgc(regs*)>:
c001acb4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001acb9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001acbc:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001acc2:	99                   	cdq    
c001acc3:	c3                   	ret    

c001acc4 <sysFormatDisk(regs*)>:
c001acc4:	56                   	push   esi
c001acc5:	53                   	push   ebx
c001acc6:	53                   	push   ebx
c001acc7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001accb:	8b 1d 08 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da08
c001acd1:	eb 25                	jmp    c001acf8 <sysFormatDisk(regs*)+0x34>
c001acd3:	83 ec 0c             	sub    esp,0xc
c001acd6:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001acd9:	8b 13                	mov    edx,DWORD PTR [ebx]
c001acdb:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001acde:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001ace1:	50                   	push   eax
c001ace2:	ff 34 85 a0 de 02 c0 	push   DWORD PTR [eax*4-0x3ffd2160]
c001ace9:	53                   	push   ebx
c001acea:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001aced:	83 c4 20             	add    esp,0x20
c001acf0:	83 f8 08             	cmp    eax,0x8
c001acf3:	75 12                	jne    c001ad07 <sysFormatDisk(regs*)+0x43>
c001acf5:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001acf8:	85 db                	test   ebx,ebx
c001acfa:	75 d7                	jne    c001acd3 <sysFormatDisk(regs*)+0xf>
c001acfc:	59                   	pop    ecx
c001acfd:	b8 03 00 00 00       	mov    eax,0x3
c001ad02:	31 d2                	xor    edx,edx
c001ad04:	5b                   	pop    ebx
c001ad05:	5e                   	pop    esi
c001ad06:	c3                   	ret    
c001ad07:	85 c0                	test   eax,eax
c001ad09:	74 1b                	je     c001ad26 <sysFormatDisk(regs*)+0x62>
c001ad0b:	83 f8 09             	cmp    eax,0x9
c001ad0e:	74 0b                	je     c001ad1b <sysFormatDisk(regs*)+0x57>
c001ad10:	59                   	pop    ecx
c001ad11:	b8 02 00 00 00       	mov    eax,0x2
c001ad16:	31 d2                	xor    edx,edx
c001ad18:	5b                   	pop    ebx
c001ad19:	5e                   	pop    esi
c001ad1a:	c3                   	ret    
c001ad1b:	59                   	pop    ecx
c001ad1c:	b8 01 00 00 00       	mov    eax,0x1
c001ad21:	31 d2                	xor    edx,edx
c001ad23:	5b                   	pop    ebx
c001ad24:	5e                   	pop    esi
c001ad25:	c3                   	ret    
c001ad26:	59                   	pop    ecx
c001ad27:	31 c0                	xor    eax,eax
c001ad29:	31 d2                	xor    edx,edx
c001ad2b:	5b                   	pop    ebx
c001ad2c:	5e                   	pop    esi
c001ad2d:	c3                   	ret    

c001ad2e <sysSetDiskVolumeLabel(regs*)>:
c001ad2e:	56                   	push   esi
c001ad2f:	53                   	push   ebx
c001ad30:	53                   	push   ebx
c001ad31:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ad35:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001ad38:	83 f8 19             	cmp    eax,0x19
c001ad3b:	77 29                	ja     c001ad66 <sysSetDiskVolumeLabel(regs*)+0x38>
c001ad3d:	8b 0c 85 a0 de 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd2160]
c001ad44:	85 c9                	test   ecx,ecx
c001ad46:	74 1e                	je     c001ad66 <sysSetDiskVolumeLabel(regs*)+0x38>
c001ad48:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001ad4b:	85 d2                	test   edx,edx
c001ad4d:	74 17                	je     c001ad66 <sysSetDiskVolumeLabel(regs*)+0x38>
c001ad4f:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001ad55:	8b 33                	mov    esi,DWORD PTR [ebx]
c001ad57:	52                   	push   edx
c001ad58:	50                   	push   eax
c001ad59:	51                   	push   ecx
c001ad5a:	53                   	push   ebx
c001ad5b:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001ad5e:	83 c4 10             	add    esp,0x10
c001ad61:	99                   	cdq    
c001ad62:	59                   	pop    ecx
c001ad63:	5b                   	pop    ebx
c001ad64:	5e                   	pop    esi
c001ad65:	c3                   	ret    
c001ad66:	59                   	pop    ecx
c001ad67:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001ad6c:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ad71:	5b                   	pop    ebx
c001ad72:	5e                   	pop    esi
c001ad73:	c3                   	ret    

c001ad74 <sysGetDiskVolumeLabel(regs*)>:
c001ad74:	57                   	push   edi
c001ad75:	56                   	push   esi
c001ad76:	53                   	push   ebx
c001ad77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad7b:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001ad7e:	83 fa 19             	cmp    edx,0x19
c001ad81:	77 34                	ja     c001adb7 <sysGetDiskVolumeLabel(regs*)+0x43>
c001ad83:	8b 0c 95 a0 de 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd2160]
c001ad8a:	85 c9                	test   ecx,ecx
c001ad8c:	74 29                	je     c001adb7 <sysGetDiskVolumeLabel(regs*)+0x43>
c001ad8e:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001ad91:	85 db                	test   ebx,ebx
c001ad93:	74 22                	je     c001adb7 <sysGetDiskVolumeLabel(regs*)+0x43>
c001ad95:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001ad98:	85 c0                	test   eax,eax
c001ad9a:	74 1b                	je     c001adb7 <sysGetDiskVolumeLabel(regs*)+0x43>
c001ad9c:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001ada2:	83 ec 0c             	sub    esp,0xc
c001ada5:	8b 3e                	mov    edi,DWORD PTR [esi]
c001ada7:	50                   	push   eax
c001ada8:	53                   	push   ebx
c001ada9:	52                   	push   edx
c001adaa:	51                   	push   ecx
c001adab:	56                   	push   esi
c001adac:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001adaf:	83 c4 20             	add    esp,0x20
c001adb2:	99                   	cdq    
c001adb3:	5b                   	pop    ebx
c001adb4:	5e                   	pop    esi
c001adb5:	5f                   	pop    edi
c001adb6:	c3                   	ret    
c001adb7:	5b                   	pop    ebx
c001adb8:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001adbd:	ba ff ff ff ff       	mov    edx,0xffffffff
c001adc2:	5e                   	pop    esi
c001adc3:	5f                   	pop    edi
c001adc4:	c3                   	ret    

c001adc5 <sysShutdown(regs*)>:
c001adc5:	83 ec 0c             	sub    esp,0xc
c001adc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001adcc:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001adcf:	85 c0                	test   eax,eax
c001add1:	74 18                	je     c001adeb <sysShutdown(regs*)+0x26>
c001add3:	83 f8 01             	cmp    eax,0x1
c001add6:	74 38                	je     c001ae10 <sysShutdown(regs*)+0x4b>
c001add8:	83 f8 02             	cmp    eax,0x2
c001addb:	74 24                	je     c001ae01 <sysShutdown(regs*)+0x3c>
c001addd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ade2:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ade7:	83 c4 0c             	add    esp,0xc
c001adea:	c3                   	ret    
c001adeb:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c001adf0:	8b 10                	mov    edx,DWORD PTR [eax]
c001adf2:	6a 00                	push   0x0
c001adf4:	6a 00                	push   0x0
c001adf6:	6a 00                	push   0x0
c001adf8:	50                   	push   eax
c001adf9:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001adfc:	83 c4 10             	add    esp,0x10
c001adff:	eb dc                	jmp    c001addd <sysShutdown(regs*)+0x18>
c001ae01:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c001ae06:	8b 10                	mov    edx,DWORD PTR [eax]
c001ae08:	6a 00                	push   0x0
c001ae0a:	6a 00                	push   0x0
c001ae0c:	6a 01                	push   0x1
c001ae0e:	eb e8                	jmp    c001adf8 <sysShutdown(regs*)+0x33>
c001ae10:	a1 20 df 02 c0       	mov    eax,ds:0xc002df20
c001ae15:	85 c0                	test   eax,eax
c001ae17:	74 02                	je     c001ae1b <sysShutdown(regs*)+0x56>
c001ae19:	ff d0                	call   eax
c001ae1b:	31 c0                	xor    eax,eax
c001ae1d:	31 d2                	xor    edx,edx
c001ae1f:	83 c4 0c             	add    esp,0xc
c001ae22:	c3                   	ret    

c001ae23 <sysCallRealpath(regs*)>:
c001ae23:	83 ec 0c             	sub    esp,0xc
c001ae26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae2a:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001ae2d:	85 d2                	test   edx,edx
c001ae2f:	74 07                	je     c001ae38 <sysCallRealpath(regs*)+0x15>
c001ae31:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001ae34:	85 c0                	test   eax,eax
c001ae36:	75 0b                	jne    c001ae43 <sysCallRealpath(regs*)+0x20>
c001ae38:	b8 01 00 00 00       	mov    eax,0x1
c001ae3d:	31 d2                	xor    edx,edx
c001ae3f:	83 c4 0c             	add    esp,0xc
c001ae42:	c3                   	ret    
c001ae43:	51                   	push   ecx
c001ae44:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001ae4a:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001ae4d:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001ae53:	51                   	push   ecx
c001ae54:	52                   	push   edx
c001ae55:	50                   	push   eax
c001ae56:	e8 47 7e ff ff       	call   c0012ca2 <Fs::standardiseFiles(char*, char const*, char const*)>
c001ae5b:	83 c4 10             	add    esp,0x10
c001ae5e:	31 c0                	xor    eax,eax
c001ae60:	31 d2                	xor    edx,edx
c001ae62:	83 c4 0c             	add    esp,0xc
c001ae65:	c3                   	ret    

c001ae66 <sysCallReadDir(regs*)>:
c001ae66:	53                   	push   ebx
c001ae67:	83 ec 18             	sub    esp,0x18
c001ae6a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ae6e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001ae71:	83 f8 02             	cmp    eax,0x2
c001ae74:	76 53                	jbe    c001aec9 <sysCallReadDir(regs*)+0x63>
c001ae76:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001ae79:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001ae7f:	77 4f                	ja     c001aed0 <sysCallReadDir(regs*)+0x6a>
c001ae81:	83 ec 0c             	sub    esp,0xc
c001ae84:	50                   	push   eax
c001ae85:	e8 23 69 ff ff       	call   c00117ad <getFromFileDescriptor(int)>
c001ae8a:	83 c4 10             	add    esp,0x10
c001ae8d:	85 c0                	test   eax,eax
c001ae8f:	74 50                	je     c001aee1 <sysCallReadDir(regs*)+0x7b>
c001ae91:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ae99:	83 ec 0c             	sub    esp,0xc
c001ae9c:	8b 10                	mov    edx,DWORD PTR [eax]
c001ae9e:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001aea2:	51                   	push   ecx
c001aea3:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001aea6:	6a 00                	push   0x0
c001aea8:	68 10 01 00 00       	push   0x110
c001aead:	50                   	push   eax
c001aeae:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001aeb1:	83 c4 20             	add    esp,0x20
c001aeb4:	85 c0                	test   eax,eax
c001aeb6:	74 38                	je     c001aef0 <sysCallReadDir(regs*)+0x8a>
c001aeb8:	83 f8 07             	cmp    eax,0x7
c001aebb:	74 0c                	je     c001aec9 <sysCallReadDir(regs*)+0x63>
c001aebd:	b8 02 00 00 00       	mov    eax,0x2
c001aec2:	31 d2                	xor    edx,edx
c001aec4:	83 c4 18             	add    esp,0x18
c001aec7:	5b                   	pop    ebx
c001aec8:	c3                   	ret    
c001aec9:	b8 01 00 00 00       	mov    eax,0x1
c001aece:	eb f2                	jmp    c001aec2 <sysCallReadDir(regs*)+0x5c>
c001aed0:	83 ec 08             	sub    esp,0x8
c001aed3:	52                   	push   edx
c001aed4:	68 8c b2 02 c0       	push   0xc002b28c
c001aed9:	e8 15 7a ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001aede:	83 c4 10             	add    esp,0x10
c001aee1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001aee6:	ba ff ff ff ff       	mov    edx,0xffffffff
c001aeeb:	83 c4 18             	add    esp,0x18
c001aeee:	5b                   	pop    ebx
c001aeef:	c3                   	ret    
c001aef0:	31 c0                	xor    eax,eax
c001aef2:	eb ce                	jmp    c001aec2 <sysCallReadDir(regs*)+0x5c>

c001aef4 <sysCallIsATTY(regs*)>:
c001aef4:	83 ec 0c             	sub    esp,0xc
c001aef7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aefb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001aefe:	83 f8 02             	cmp    eax,0x2
c001af01:	76 07                	jbe    c001af0a <sysCallIsATTY(regs*)+0x16>
c001af03:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001af08:	75 26                	jne    c001af30 <sysCallIsATTY(regs*)+0x3c>
c001af0a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001af0f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001af12:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001af18:	85 c0                	test   eax,eax
c001af1a:	74 24                	je     c001af40 <sysCallIsATTY(regs*)+0x4c>
c001af1c:	83 ec 0c             	sub    esp,0xc
c001af1f:	8b 10                	mov    edx,DWORD PTR [eax]
c001af21:	50                   	push   eax
c001af22:	ff 12                	call   DWORD PTR [edx]
c001af24:	31 d2                	xor    edx,edx
c001af26:	0f b6 c0             	movzx  eax,al
c001af29:	83 c4 10             	add    esp,0x10
c001af2c:	83 c4 0c             	add    esp,0xc
c001af2f:	c3                   	ret    
c001af30:	83 ec 0c             	sub    esp,0xc
c001af33:	50                   	push   eax
c001af34:	e8 74 68 ff ff       	call   c00117ad <getFromFileDescriptor(int)>
c001af39:	83 c4 10             	add    esp,0x10
c001af3c:	85 c0                	test   eax,eax
c001af3e:	75 dc                	jne    c001af1c <sysCallIsATTY(regs*)+0x28>
c001af40:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001af45:	ba ff ff ff ff       	mov    edx,0xffffffff
c001af4a:	83 c4 0c             	add    esp,0xc
c001af4d:	c3                   	ret    

c001af4e <sysCallSeek(regs*)>:
c001af4e:	53                   	push   ebx
c001af4f:	83 ec 08             	sub    esp,0x8
c001af52:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001af56:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001af59:	83 f8 02             	cmp    eax,0x2
c001af5c:	76 4a                	jbe    c001afa8 <sysCallSeek(regs*)+0x5a>
c001af5e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001af63:	77 32                	ja     c001af97 <sysCallSeek(regs*)+0x49>
c001af65:	83 ec 0c             	sub    esp,0xc
c001af68:	50                   	push   eax
c001af69:	e8 3f 68 ff ff       	call   c00117ad <getFromFileDescriptor(int)>
c001af6e:	83 c4 0c             	add    esp,0xc
c001af71:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001af74:	31 db                	xor    ebx,ebx
c001af76:	53                   	push   ebx
c001af77:	51                   	push   ecx
c001af78:	50                   	push   eax
c001af79:	e8 f0 7f ff ff       	call   c0012f6e <File::seek(unsigned long long)>
c001af7e:	83 c4 10             	add    esp,0x10
c001af81:	85 c0                	test   eax,eax
c001af83:	0f 95 c0             	setne  al
c001af86:	31 d2                	xor    edx,edx
c001af88:	0f b6 c0             	movzx  eax,al
c001af8b:	f7 d8                	neg    eax
c001af8d:	83 d2 00             	adc    edx,0x0
c001af90:	83 c4 08             	add    esp,0x8
c001af93:	f7 da                	neg    edx
c001af95:	5b                   	pop    ebx
c001af96:	c3                   	ret    
c001af97:	83 ec 08             	sub    esp,0x8
c001af9a:	50                   	push   eax
c001af9b:	68 fb b2 02 c0       	push   0xc002b2fb
c001afa0:	e8 4e 79 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001afa5:	83 c4 10             	add    esp,0x10
c001afa8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001afad:	ba ff ff ff ff       	mov    edx,0xffffffff
c001afb2:	83 c4 08             	add    esp,0x8
c001afb5:	5b                   	pop    ebx
c001afb6:	c3                   	ret    

c001afb7 <sysCallTell(regs*)>:
c001afb7:	53                   	push   ebx
c001afb8:	83 ec 08             	sub    esp,0x8
c001afbb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001afbf:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001afc2:	83 f8 02             	cmp    eax,0x2
c001afc5:	76 5e                	jbe    c001b025 <sysCallTell(regs*)+0x6e>
c001afc7:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001afcc:	77 2d                	ja     c001affb <sysCallTell(regs*)+0x44>
c001afce:	83 ec 0c             	sub    esp,0xc
c001afd1:	50                   	push   eax
c001afd2:	e8 d6 67 ff ff       	call   c00117ad <getFromFileDescriptor(int)>
c001afd7:	5a                   	pop    edx
c001afd8:	59                   	pop    ecx
c001afd9:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001afdc:	50                   	push   eax
c001afdd:	e8 e2 7f ff ff       	call   c0012fc4 <File::tell(unsigned long long*)>
c001afe2:	83 c4 10             	add    esp,0x10
c001afe5:	85 c0                	test   eax,eax
c001afe7:	0f 95 c0             	setne  al
c001afea:	31 d2                	xor    edx,edx
c001afec:	0f b6 c0             	movzx  eax,al
c001afef:	f7 d8                	neg    eax
c001aff1:	83 d2 00             	adc    edx,0x0
c001aff4:	83 c4 08             	add    esp,0x8
c001aff7:	f7 da                	neg    edx
c001aff9:	5b                   	pop    ebx
c001affa:	c3                   	ret    
c001affb:	83 ec 08             	sub    esp,0x8
c001affe:	50                   	push   eax
c001afff:	68 15 b3 02 c0       	push   0xc002b315
c001b004:	e8 ea 78 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001b009:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b00c:	83 c4 10             	add    esp,0x10
c001b00f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b015:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b01c:	31 d2                	xor    edx,edx
c001b01e:	31 c0                	xor    eax,eax
c001b020:	83 c4 08             	add    esp,0x8
c001b023:	5b                   	pop    ebx
c001b024:	c3                   	ret    
c001b025:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b02a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b02f:	83 c4 08             	add    esp,0x8
c001b032:	5b                   	pop    ebx
c001b033:	c3                   	ret    

c001b034 <sysCallSize(regs*)>:
c001b034:	53                   	push   ebx
c001b035:	83 ec 18             	sub    esp,0x18
c001b038:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b03c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b03f:	83 f8 02             	cmp    eax,0x2
c001b042:	76 64                	jbe    c001b0a8 <sysCallSize(regs*)+0x74>
c001b044:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b049:	77 33                	ja     c001b07e <sysCallSize(regs*)+0x4a>
c001b04b:	83 ec 0c             	sub    esp,0xc
c001b04e:	50                   	push   eax
c001b04f:	e8 59 67 ff ff       	call   c00117ad <getFromFileDescriptor(int)>
c001b054:	83 c4 0c             	add    esp,0xc
c001b057:	8d 54 24 13          	lea    edx,[esp+0x13]
c001b05b:	52                   	push   edx
c001b05c:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b05f:	50                   	push   eax
c001b060:	e8 f7 80 ff ff       	call   c001315c <File::stat(unsigned long long*, bool*)>
c001b065:	83 c4 10             	add    esp,0x10
c001b068:	85 c0                	test   eax,eax
c001b06a:	0f 95 c0             	setne  al
c001b06d:	31 d2                	xor    edx,edx
c001b06f:	0f b6 c0             	movzx  eax,al
c001b072:	f7 d8                	neg    eax
c001b074:	83 d2 00             	adc    edx,0x0
c001b077:	83 c4 18             	add    esp,0x18
c001b07a:	f7 da                	neg    edx
c001b07c:	5b                   	pop    ebx
c001b07d:	c3                   	ret    
c001b07e:	83 ec 08             	sub    esp,0x8
c001b081:	50                   	push   eax
c001b082:	68 2f b3 02 c0       	push   0xc002b32f
c001b087:	e8 67 78 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001b08c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b08f:	83 c4 10             	add    esp,0x10
c001b092:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b098:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b09f:	31 d2                	xor    edx,edx
c001b0a1:	31 c0                	xor    eax,eax
c001b0a3:	83 c4 18             	add    esp,0x18
c001b0a6:	5b                   	pop    ebx
c001b0a7:	c3                   	ret    
c001b0a8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b0ad:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b0b2:	83 c4 18             	add    esp,0x18
c001b0b5:	5b                   	pop    ebx
c001b0b6:	c3                   	ret    

c001b0b7 <sysCallSizeFromFilename(regs*)>:
c001b0b7:	57                   	push   edi
c001b0b8:	56                   	push   esi
c001b0b9:	53                   	push   ebx
c001b0ba:	83 ec 20             	sub    esp,0x20
c001b0bd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b0c1:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001b0c4:	83 fb 02             	cmp    ebx,0x2
c001b0c7:	0f 86 99 00 00 00    	jbe    c001b166 <sysCallSizeFromFilename(regs*)+0xaf>
c001b0cd:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001b0d3:	77 65                	ja     c001b13a <sysCallSizeFromFilename(regs*)+0x83>
c001b0d5:	83 ec 0c             	sub    esp,0xc
c001b0d8:	68 14 01 00 00       	push   0x114
c001b0dd:	e8 42 45 ff ff       	call   c000f624 <malloc>
c001b0e2:	83 c4 0c             	add    esp,0xc
c001b0e5:	89 c6                	mov    esi,eax
c001b0e7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b0ec:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b0ef:	53                   	push   ebx
c001b0f0:	56                   	push   esi
c001b0f1:	e8 56 7d ff ff       	call   c0012e4c <File::File(char const*, Process*)>
c001b0f6:	83 c4 0c             	add    esp,0xc
c001b0f9:	8d 44 24 23          	lea    eax,[esp+0x23]
c001b0fd:	50                   	push   eax
c001b0fe:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001b101:	56                   	push   esi
c001b102:	e8 55 80 ff ff       	call   c001315c <File::stat(unsigned long long*, bool*)>
c001b107:	83 c4 10             	add    esp,0x10
c001b10a:	85 f6                	test   esi,esi
c001b10c:	74 14                	je     c001b122 <sysCallSizeFromFilename(regs*)+0x6b>
c001b10e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b112:	8b 16                	mov    edx,DWORD PTR [esi]
c001b114:	83 ec 0c             	sub    esp,0xc
c001b117:	56                   	push   esi
c001b118:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b11b:	83 c4 10             	add    esp,0x10
c001b11e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b122:	85 c0                	test   eax,eax
c001b124:	0f 95 c0             	setne  al
c001b127:	31 d2                	xor    edx,edx
c001b129:	0f b6 c0             	movzx  eax,al
c001b12c:	f7 d8                	neg    eax
c001b12e:	83 d2 00             	adc    edx,0x0
c001b131:	83 c4 20             	add    esp,0x20
c001b134:	f7 da                	neg    edx
c001b136:	5b                   	pop    ebx
c001b137:	5e                   	pop    esi
c001b138:	5f                   	pop    edi
c001b139:	c3                   	ret    
c001b13a:	83 ec 08             	sub    esp,0x8
c001b13d:	53                   	push   ebx
c001b13e:	68 2f b3 02 c0       	push   0xc002b32f
c001b143:	e8 ab 77 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001b148:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001b14b:	83 c4 10             	add    esp,0x10
c001b14e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b154:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b15b:	31 d2                	xor    edx,edx
c001b15d:	83 c4 20             	add    esp,0x20
c001b160:	31 c0                	xor    eax,eax
c001b162:	5b                   	pop    ebx
c001b163:	5e                   	pop    esi
c001b164:	5f                   	pop    edi
c001b165:	c3                   	ret    
c001b166:	83 c4 20             	add    esp,0x20
c001b169:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b16e:	5b                   	pop    ebx
c001b16f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b174:	5e                   	pop    esi
c001b175:	5f                   	pop    edi
c001b176:	c3                   	ret    

c001b177 <sysCallClose(regs*)>:
c001b177:	53                   	push   ebx
c001b178:	83 ec 08             	sub    esp,0x8
c001b17b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b17f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b182:	83 f8 02             	cmp    eax,0x2
c001b185:	76 50                	jbe    c001b1d7 <sysCallClose(regs*)+0x60>
c001b187:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b18c:	74 58                	je     c001b1e6 <sysCallClose(regs*)+0x6f>
c001b18e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b193:	74 60                	je     c001b1f5 <sysCallClose(regs*)+0x7e>
c001b195:	77 2f                	ja     c001b1c6 <sysCallClose(regs*)+0x4f>
c001b197:	83 ec 0c             	sub    esp,0xc
c001b19a:	50                   	push   eax
c001b19b:	e8 0d 66 ff ff       	call   c00117ad <getFromFileDescriptor(int)>
c001b1a0:	89 c3                	mov    ebx,eax
c001b1a2:	89 04 24             	mov    DWORD PTR [esp],eax
c001b1a5:	e8 64 7d ff ff       	call   c0012f0e <File::close()>
c001b1aa:	83 c4 10             	add    esp,0x10
c001b1ad:	85 db                	test   ebx,ebx
c001b1af:	74 0c                	je     c001b1bd <sysCallClose(regs*)+0x46>
c001b1b1:	83 ec 0c             	sub    esp,0xc
c001b1b4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b1b6:	53                   	push   ebx
c001b1b7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b1ba:	83 c4 10             	add    esp,0x10
c001b1bd:	31 c0                	xor    eax,eax
c001b1bf:	31 d2                	xor    edx,edx
c001b1c1:	83 c4 08             	add    esp,0x8
c001b1c4:	5b                   	pop    ebx
c001b1c5:	c3                   	ret    
c001b1c6:	83 ec 08             	sub    esp,0x8
c001b1c9:	50                   	push   eax
c001b1ca:	68 b0 b2 02 c0       	push   0xc002b2b0
c001b1cf:	e8 1f 77 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001b1d4:	83 c4 10             	add    esp,0x10
c001b1d7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b1dc:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b1e1:	83 c4 08             	add    esp,0x8
c001b1e4:	5b                   	pop    ebx
c001b1e5:	c3                   	ret    
c001b1e6:	83 ec 0c             	sub    esp,0xc
c001b1e9:	68 4a b3 02 c0       	push   0xc002b34a
c001b1ee:	e8 00 77 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001b1f3:	eb c5                	jmp    c001b1ba <sysCallClose(regs*)+0x43>
c001b1f5:	83 ec 0c             	sub    esp,0xc
c001b1f8:	68 58 b3 02 c0       	push   0xc002b358
c001b1fd:	eb ef                	jmp    c001b1ee <sysCallClose(regs*)+0x77>

c001b1ff <sysCallOpenDir(regs*)>:
c001b1ff:	56                   	push   esi
c001b200:	53                   	push   ebx
c001b201:	53                   	push   ebx
c001b202:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b206:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001b209:	85 f6                	test   esi,esi
c001b20b:	74 59                	je     c001b266 <sysCallOpenDir(regs*)+0x67>
c001b20d:	83 ec 0c             	sub    esp,0xc
c001b210:	68 14 01 00 00       	push   0x114
c001b215:	e8 0a 44 ff ff       	call   c000f624 <malloc>
c001b21a:	83 c4 0c             	add    esp,0xc
c001b21d:	89 c6                	mov    esi,eax
c001b21f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b224:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b227:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b22a:	56                   	push   esi
c001b22b:	e8 c8 80 ff ff       	call   c00132f8 <Directory::Directory(char const*, Process*)>
c001b230:	83 c4 10             	add    esp,0x10
c001b233:	85 f6                	test   esi,esi
c001b235:	74 2f                	je     c001b266 <sysCallOpenDir(regs*)+0x67>
c001b237:	83 ec 0c             	sub    esp,0xc
c001b23a:	56                   	push   esi
c001b23b:	e8 1c 81 ff ff       	call   c001335c <Directory::open()>
c001b240:	83 c4 10             	add    esp,0x10
c001b243:	85 c0                	test   eax,eax
c001b245:	75 1f                	jne    c001b266 <sysCallOpenDir(regs*)+0x67>
c001b247:	83 ec 0c             	sub    esp,0xc
c001b24a:	56                   	push   esi
c001b24b:	e8 68 62 ff ff       	call   c00114b8 <UnixFile::getFileDescriptor()>
c001b250:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b253:	83 c4 10             	add    esp,0x10
c001b256:	89 02                	mov    DWORD PTR [edx],eax
c001b258:	c1 f8 1f             	sar    eax,0x1f
c001b25b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001b25e:	31 c0                	xor    eax,eax
c001b260:	59                   	pop    ecx
c001b261:	31 d2                	xor    edx,edx
c001b263:	5b                   	pop    ebx
c001b264:	5e                   	pop    esi
c001b265:	c3                   	ret    
c001b266:	59                   	pop    ecx
c001b267:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b26c:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b271:	5b                   	pop    ebx
c001b272:	5e                   	pop    esi
c001b273:	c3                   	ret    

c001b274 <sysCallCloseDir(regs*)>:
c001b274:	53                   	push   ebx
c001b275:	83 ec 08             	sub    esp,0x8
c001b278:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b27c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b27f:	83 f8 02             	cmp    eax,0x2
c001b282:	76 47                	jbe    c001b2cb <sysCallCloseDir(regs*)+0x57>
c001b284:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b289:	77 2f                	ja     c001b2ba <sysCallCloseDir(regs*)+0x46>
c001b28b:	83 ec 0c             	sub    esp,0xc
c001b28e:	50                   	push   eax
c001b28f:	e8 19 65 ff ff       	call   c00117ad <getFromFileDescriptor(int)>
c001b294:	89 c3                	mov    ebx,eax
c001b296:	89 04 24             	mov    DWORD PTR [esp],eax
c001b299:	e8 1a 81 ff ff       	call   c00133b8 <Directory::close()>
c001b29e:	83 c4 10             	add    esp,0x10
c001b2a1:	85 db                	test   ebx,ebx
c001b2a3:	74 0c                	je     c001b2b1 <sysCallCloseDir(regs*)+0x3d>
c001b2a5:	83 ec 0c             	sub    esp,0xc
c001b2a8:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b2aa:	53                   	push   ebx
c001b2ab:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b2ae:	83 c4 10             	add    esp,0x10
c001b2b1:	31 c0                	xor    eax,eax
c001b2b3:	31 d2                	xor    edx,edx
c001b2b5:	83 c4 08             	add    esp,0x8
c001b2b8:	5b                   	pop    ebx
c001b2b9:	c3                   	ret    
c001b2ba:	83 ec 08             	sub    esp,0x8
c001b2bd:	50                   	push   eax
c001b2be:	68 d8 b2 02 c0       	push   0xc002b2d8
c001b2c3:	e8 2b 76 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001b2c8:	83 c4 10             	add    esp,0x10
c001b2cb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b2d0:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b2d5:	83 c4 08             	add    esp,0x8
c001b2d8:	5b                   	pop    ebx
c001b2d9:	c3                   	ret    

c001b2da <sysCallMakeDir(regs*)>:
c001b2da:	56                   	push   esi
c001b2db:	53                   	push   ebx
c001b2dc:	83 ec 10             	sub    esp,0x10
c001b2df:	68 14 01 00 00       	push   0x114
c001b2e4:	e8 3b 43 ff ff       	call   c000f624 <malloc>
c001b2e9:	83 c4 0c             	add    esp,0xc
c001b2ec:	89 c3                	mov    ebx,eax
c001b2ee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b2f3:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b2f6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b2fa:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b2fd:	53                   	push   ebx
c001b2fe:	e8 f5 7f ff ff       	call   c00132f8 <Directory::Directory(char const*, Process*)>
c001b303:	83 c4 10             	add    esp,0x10
c001b306:	85 db                	test   ebx,ebx
c001b308:	74 32                	je     c001b33c <sysCallMakeDir(regs*)+0x62>
c001b30a:	83 ec 0c             	sub    esp,0xc
c001b30d:	53                   	push   ebx
c001b30e:	e8 29 82 ff ff       	call   c001353c <Directory::create()>
c001b313:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b316:	89 c6                	mov    esi,eax
c001b318:	e8 9b 80 ff ff       	call   c00133b8 <Directory::close()>
c001b31d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b31f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b322:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b325:	83 c4 10             	add    esp,0x10
c001b328:	31 c0                	xor    eax,eax
c001b32a:	59                   	pop    ecx
c001b32b:	85 f6                	test   esi,esi
c001b32d:	5b                   	pop    ebx
c001b32e:	0f 95 c0             	setne  al
c001b331:	5e                   	pop    esi
c001b332:	31 d2                	xor    edx,edx
c001b334:	f7 d8                	neg    eax
c001b336:	83 d2 00             	adc    edx,0x0
c001b339:	f7 da                	neg    edx
c001b33b:	c3                   	ret    
c001b33c:	59                   	pop    ecx
c001b33d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b342:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b347:	5b                   	pop    ebx
c001b348:	5e                   	pop    esi
c001b349:	c3                   	ret    

c001b34a <sysCallWait(regs*)>:
c001b34a:	83 ec 10             	sub    esp,0x10
c001b34d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b351:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b354:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b357:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b35a:	e8 dc 23 00 00       	call   c001d73b <waitTask(int, int*, int)>
c001b35f:	83 c4 1c             	add    esp,0x1c
c001b362:	99                   	cdq    
c001b363:	c3                   	ret    

c001b364 <sysCallNotImpl(regs*)>:
c001b364:	83 ec 18             	sub    esp,0x18
c001b367:	68 66 b3 02 c0       	push   0xc002b366
c001b36c:	e8 dc e8 ff ff       	call   c0019c4d <Krnl::panic(char const*)>
c001b371:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b376:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b37b:	83 c4 1c             	add    esp,0x1c
c001b37e:	c3                   	ret    

c001b37f <sysPanic(regs*)>:
c001b37f:	83 ec 18             	sub    esp,0x18
c001b382:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b386:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b389:	e8 bf e8 ff ff       	call   c0019c4d <Krnl::panic(char const*)>
c001b38e:	c7 04 24 80 b3 02 c0 	mov    DWORD PTR [esp],0xc002b380
c001b395:	e8 b3 e8 ff ff       	call   c0019c4d <Krnl::panic(char const*)>
c001b39a:	b8 01 00 00 00       	mov    eax,0x1
c001b39f:	31 d2                	xor    edx,edx
c001b3a1:	83 c4 1c             	add    esp,0x1c
c001b3a4:	c3                   	ret    

c001b3a5 <sysCallRmdir(regs*)>:
c001b3a5:	56                   	push   esi
c001b3a6:	53                   	push   ebx
c001b3a7:	83 ec 20             	sub    esp,0x20
c001b3aa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b3ae:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b3b1:	68 14 01 00 00       	push   0x114
c001b3b6:	e8 69 42 ff ff       	call   c000f624 <malloc>
c001b3bb:	83 c4 0c             	add    esp,0xc
c001b3be:	89 c3                	mov    ebx,eax
c001b3c0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b3c5:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b3c8:	56                   	push   esi
c001b3c9:	53                   	push   ebx
c001b3ca:	e8 7d 7a ff ff       	call   c0012e4c <File::File(char const*, Process*)>
c001b3cf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b3d2:	e8 51 7c ff ff       	call   c0013028 <File::unlink()>
c001b3d7:	83 c4 10             	add    esp,0x10
c001b3da:	85 db                	test   ebx,ebx
c001b3dc:	74 14                	je     c001b3f2 <sysCallRmdir(regs*)+0x4d>
c001b3de:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b3e2:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b3e4:	83 ec 0c             	sub    esp,0xc
c001b3e7:	53                   	push   ebx
c001b3e8:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b3eb:	83 c4 10             	add    esp,0x10
c001b3ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b3f2:	85 c0                	test   eax,eax
c001b3f4:	0f 95 c0             	setne  al
c001b3f7:	31 d2                	xor    edx,edx
c001b3f9:	0f b6 c0             	movzx  eax,al
c001b3fc:	f7 d8                	neg    eax
c001b3fe:	83 d2 00             	adc    edx,0x0
c001b401:	83 c4 14             	add    esp,0x14
c001b404:	f7 da                	neg    edx
c001b406:	5b                   	pop    ebx
c001b407:	5e                   	pop    esi
c001b408:	c3                   	ret    

c001b409 <sysCallUnlink(regs*)>:
c001b409:	56                   	push   esi
c001b40a:	53                   	push   ebx
c001b40b:	83 ec 20             	sub    esp,0x20
c001b40e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b412:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b415:	68 14 01 00 00       	push   0x114
c001b41a:	e8 05 42 ff ff       	call   c000f624 <malloc>
c001b41f:	83 c4 0c             	add    esp,0xc
c001b422:	89 c3                	mov    ebx,eax
c001b424:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b429:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b42c:	56                   	push   esi
c001b42d:	53                   	push   ebx
c001b42e:	e8 19 7a ff ff       	call   c0012e4c <File::File(char const*, Process*)>
c001b433:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b436:	e8 ed 7b ff ff       	call   c0013028 <File::unlink()>
c001b43b:	83 c4 10             	add    esp,0x10
c001b43e:	85 db                	test   ebx,ebx
c001b440:	74 14                	je     c001b456 <sysCallUnlink(regs*)+0x4d>
c001b442:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b446:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b448:	83 ec 0c             	sub    esp,0xc
c001b44b:	53                   	push   ebx
c001b44c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b44f:	83 c4 10             	add    esp,0x10
c001b452:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b456:	85 c0                	test   eax,eax
c001b458:	0f 95 c0             	setne  al
c001b45b:	31 d2                	xor    edx,edx
c001b45d:	0f b6 c0             	movzx  eax,al
c001b460:	f7 d8                	neg    eax
c001b462:	83 d2 00             	adc    edx,0x0
c001b465:	83 c4 14             	add    esp,0x14
c001b468:	f7 da                	neg    edx
c001b46a:	5b                   	pop    ebx
c001b46b:	5e                   	pop    esi
c001b46c:	c3                   	ret    

c001b46d <sysCallGetArgv(regs*)>:
c001b46d:	83 ec 0c             	sub    esp,0xc
c001b470:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b474:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b477:	85 c0                	test   eax,eax
c001b479:	78 2b                	js     c001b4a6 <sysCallGetArgv(regs*)+0x39>
c001b47b:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b481:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b484:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001b48a:	7d 1a                	jge    c001b4a6 <sysCallGetArgv(regs*)+0x39>
c001b48c:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001b493:	85 c0                	test   eax,eax
c001b495:	74 17                	je     c001b4ae <sysCallGetArgv(regs*)+0x41>
c001b497:	83 ec 08             	sub    esp,0x8
c001b49a:	50                   	push   eax
c001b49b:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001b49e:	e8 c0 52 fe ff       	call   c0000763 <strcpy>
c001b4a3:	83 c4 10             	add    esp,0x10
c001b4a6:	31 c0                	xor    eax,eax
c001b4a8:	31 d2                	xor    edx,edx
c001b4aa:	83 c4 0c             	add    esp,0xc
c001b4ad:	c3                   	ret    
c001b4ae:	b8 01 00 00 00       	mov    eax,0x1
c001b4b3:	31 d2                	xor    edx,edx
c001b4b5:	83 c4 0c             	add    esp,0xc
c001b4b8:	c3                   	ret    

c001b4b9 <sysCallTTYName(regs*)>:
c001b4b9:	56                   	push   esi
c001b4ba:	53                   	push   ebx
c001b4bb:	53                   	push   ebx
c001b4bc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b4c0:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001b4c3:	85 c0                	test   eax,eax
c001b4c5:	74 5f                	je     c001b526 <sysCallTTYName(regs*)+0x6d>
c001b4c7:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b4ca:	83 f8 02             	cmp    eax,0x2
c001b4cd:	77 3e                	ja     c001b50d <sysCallTTYName(regs*)+0x54>
c001b4cf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b4d4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b4d7:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001b4dd:	85 db                	test   ebx,ebx
c001b4df:	74 45                	je     c001b526 <sysCallTTYName(regs*)+0x6d>
c001b4e1:	83 ec 0c             	sub    esp,0xc
c001b4e4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b4e6:	53                   	push   ebx
c001b4e7:	ff 10                	call   DWORD PTR [eax]
c001b4e9:	83 c4 10             	add    esp,0x10
c001b4ec:	84 c0                	test   al,al
c001b4ee:	74 41                	je     c001b531 <sysCallTTYName(regs*)+0x78>
c001b4f0:	83 ec 08             	sub    esp,0x8
c001b4f3:	81 c3 1e 10 00 00    	add    ebx,0x101e
c001b4f9:	53                   	push   ebx
c001b4fa:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b4fd:	e8 61 52 fe ff       	call   c0000763 <strcpy>
c001b502:	83 c4 10             	add    esp,0x10
c001b505:	31 c0                	xor    eax,eax
c001b507:	59                   	pop    ecx
c001b508:	31 d2                	xor    edx,edx
c001b50a:	5b                   	pop    ebx
c001b50b:	5e                   	pop    esi
c001b50c:	c3                   	ret    
c001b50d:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b512:	74 bb                	je     c001b4cf <sysCallTTYName(regs*)+0x16>
c001b514:	83 ec 0c             	sub    esp,0xc
c001b517:	50                   	push   eax
c001b518:	e8 90 62 ff ff       	call   c00117ad <getFromFileDescriptor(int)>
c001b51d:	83 c4 10             	add    esp,0x10
c001b520:	89 c3                	mov    ebx,eax
c001b522:	85 db                	test   ebx,ebx
c001b524:	75 bb                	jne    c001b4e1 <sysCallTTYName(regs*)+0x28>
c001b526:	59                   	pop    ecx
c001b527:	b8 01 00 00 00       	mov    eax,0x1
c001b52c:	31 d2                	xor    edx,edx
c001b52e:	5b                   	pop    ebx
c001b52f:	5e                   	pop    esi
c001b530:	c3                   	ret    
c001b531:	59                   	pop    ecx
c001b532:	b8 02 00 00 00       	mov    eax,0x2
c001b537:	31 d2                	xor    edx,edx
c001b539:	5b                   	pop    ebx
c001b53a:	5e                   	pop    esi
c001b53b:	c3                   	ret    

c001b53c <sysCallUSleep(regs*)>:
c001b53c:	83 ec 14             	sub    esp,0x14
c001b53f:	b8 e8 03 00 00       	mov    eax,0x3e8
c001b544:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b548:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001b54f:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001b552:	01 ca                	add    edx,ecx
c001b554:	52                   	push   edx
c001b555:	50                   	push   eax
c001b556:	e8 79 22 00 00       	call   c001d7d4 <nanoSleep(unsigned long long)>
c001b55b:	31 c0                	xor    eax,eax
c001b55d:	31 d2                	xor    edx,edx
c001b55f:	83 c4 1c             	add    esp,0x1c
c001b562:	c3                   	ret    

c001b563 <sysCallSpawn(regs*)>:
c001b563:	56                   	push   esi
c001b564:	53                   	push   ebx
c001b565:	53                   	push   ebx
c001b566:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b56a:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001b56d:	85 f6                	test   esi,esi
c001b56f:	75 08                	jne    c001b579 <sysCallSpawn(regs*)+0x16>
c001b571:	59                   	pop    ecx
c001b572:	31 c0                	xor    eax,eax
c001b574:	31 d2                	xor    edx,edx
c001b576:	5b                   	pop    ebx
c001b577:	5e                   	pop    esi
c001b578:	c3                   	ret    
c001b579:	83 ec 0c             	sub    esp,0xc
c001b57c:	68 3f 07 00 00       	push   0x73f
c001b581:	e8 9e 40 ff ff       	call   c000f624 <malloc>
c001b586:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b589:	89 c6                	mov    esi,eax
c001b58b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b590:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b593:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b596:	56                   	push   esi
c001b597:	e8 38 19 00 00       	call   c001ced4 <Process::Process(char const*, Process*, char**)>
c001b59c:	83 c4 20             	add    esp,0x20
c001b59f:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001b5a6:	75 c9                	jne    c001b571 <sysCallSpawn(regs*)+0xe>
c001b5a8:	83 ec 0c             	sub    esp,0xc
c001b5ab:	56                   	push   esi
c001b5ac:	e8 e9 1e 00 00       	call   c001d49a <Process::createUserThread()>
c001b5b1:	8b 06                	mov    eax,DWORD PTR [esi]
c001b5b3:	83 c4 10             	add    esp,0x10
c001b5b6:	99                   	cdq    
c001b5b7:	59                   	pop    ecx
c001b5b8:	5b                   	pop    ebx
c001b5b9:	5e                   	pop    esi
c001b5ba:	c3                   	ret    

c001b5bb <sysCallGetEnv(regs*)>:
c001b5bb:	57                   	push   edi
c001b5bc:	56                   	push   esi
c001b5bd:	53                   	push   ebx
c001b5be:	83 ec 1c             	sub    esp,0x1c
c001b5c1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b5c5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b5ca:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001b5cd:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001b5d0:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b5d3:	e8 91 e5 ff ff       	call   c0019b69 <Krnl::getProcessTotalEnvCount(Process*)>
c001b5d8:	83 c4 10             	add    esp,0x10
c001b5db:	39 c7                	cmp    edi,eax
c001b5dd:	7c 14                	jl     c001b5f3 <sysCallGetEnv(regs*)+0x38>
c001b5df:	85 f6                	test   esi,esi
c001b5e1:	75 0b                	jne    c001b5ee <sysCallGetEnv(regs*)+0x33>
c001b5e3:	83 c4 10             	add    esp,0x10
c001b5e6:	31 c0                	xor    eax,eax
c001b5e8:	5b                   	pop    ebx
c001b5e9:	31 d2                	xor    edx,edx
c001b5eb:	5e                   	pop    esi
c001b5ec:	5f                   	pop    edi
c001b5ed:	c3                   	ret    
c001b5ee:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b5f1:	eb f0                	jmp    c001b5e3 <sysCallGetEnv(regs*)+0x28>
c001b5f3:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b5f7:	52                   	push   edx
c001b5f8:	57                   	push   edi
c001b5f9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001b5ff:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001b602:	50                   	push   eax
c001b603:	e8 81 e5 ff ff       	call   c0019b89 <Krnl::getProcessEnvPair(Process*, int)>
c001b608:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b60b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b60f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b613:	83 c4 0c             	add    esp,0xc
c001b616:	85 c9                	test   ecx,ecx
c001b618:	75 23                	jne    c001b63d <sysCallGetEnv(regs*)+0x82>
c001b61a:	83 ec 0c             	sub    esp,0xc
c001b61d:	50                   	push   eax
c001b61e:	e8 be 50 fe ff       	call   c00006e1 <strlen>
c001b623:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b626:	89 c3                	mov    ebx,eax
c001b628:	e8 b4 50 fe ff       	call   c00006e1 <strlen>
c001b62d:	83 c4 10             	add    esp,0x10
c001b630:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001b634:	83 c4 10             	add    esp,0x10
c001b637:	31 d2                	xor    edx,edx
c001b639:	5b                   	pop    ebx
c001b63a:	5e                   	pop    esi
c001b63b:	5f                   	pop    edi
c001b63c:	c3                   	ret    
c001b63d:	83 ec 08             	sub    esp,0x8
c001b640:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b643:	50                   	push   eax
c001b644:	56                   	push   esi
c001b645:	e8 19 51 fe ff       	call   c0000763 <strcpy>
c001b64a:	58                   	pop    eax
c001b64b:	5a                   	pop    edx
c001b64c:	68 8f b3 02 c0       	push   0xc002b38f
c001b651:	56                   	push   esi
c001b652:	e8 c3 51 fe ff       	call   c000081a <strcat>
c001b657:	59                   	pop    ecx
c001b658:	5b                   	pop    ebx
c001b659:	57                   	push   edi
c001b65a:	56                   	push   esi
c001b65b:	e8 ba 51 fe ff       	call   c000081a <strcat>
c001b660:	83 c4 10             	add    esp,0x10
c001b663:	e9 7b ff ff ff       	jmp    c001b5e3 <sysCallGetEnv(regs*)+0x28>

c001b668 <sysAppSettings(regs*)>:
c001b668:	53                   	push   ebx
c001b669:	83 ec 08             	sub    esp,0x8
c001b66c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b670:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b673:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001b679:	25 e0 1f 00 00       	and    eax,0x1fe0
c001b67e:	66 3d c0 09          	cmp    ax,0x9c0
c001b682:	75 2f                	jne    c001b6b3 <sysAppSettings(regs*)+0x4b>
c001b684:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001b68a:	83 e0 1f             	and    eax,0x1f
c001b68d:	3c 01                	cmp    al,0x1
c001b68f:	74 2e                	je     c001b6bf <sysAppSettings(regs*)+0x57>
c001b691:	3c 07                	cmp    al,0x7
c001b693:	0f 84 bd 00 00 00    	je     c001b756 <sysAppSettings(regs*)+0xee>
c001b699:	84 c0                	test   al,al
c001b69b:	0f 84 dc 00 00 00    	je     c001b77d <sysAppSettings(regs*)+0x115>
c001b6a1:	3c 08                	cmp    al,0x8
c001b6a3:	74 6d                	je     c001b712 <sysAppSettings(regs*)+0xaa>
c001b6a5:	0f b6 c0             	movzx  eax,al
c001b6a8:	83 c4 08             	add    esp,0x8
c001b6ab:	05 e8 03 00 00       	add    eax,0x3e8
c001b6b0:	5b                   	pop    ebx
c001b6b1:	99                   	cdq    
c001b6b2:	c3                   	ret    
c001b6b3:	b8 01 00 00 00       	mov    eax,0x1
c001b6b8:	31 d2                	xor    edx,edx
c001b6ba:	83 c4 08             	add    esp,0x8
c001b6bd:	5b                   	pop    ebx
c001b6be:	c3                   	ret    
c001b6bf:	51                   	push   ecx
c001b6c0:	68 00 01 00 00       	push   0x100
c001b6c5:	6a 00                	push   0x0
c001b6c7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b6cc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b6cf:	83 c0 0c             	add    eax,0xc
c001b6d2:	50                   	push   eax
c001b6d3:	e8 ec 4f fe ff       	call   c00006c4 <memset>
c001b6d8:	83 c4 0c             	add    esp,0xc
c001b6db:	68 ff 00 00 00       	push   0xff
c001b6e0:	53                   	push   ebx
c001b6e1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b6e6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b6e9:	83 c0 0c             	add    eax,0xc
c001b6ec:	50                   	push   eax
c001b6ed:	e8 ae 4f fe ff       	call   c00006a0 <memcpy>
c001b6f2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b6f7:	5b                   	pop    ebx
c001b6f8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b6fb:	5a                   	pop    edx
c001b6fc:	8d 50 0c             	lea    edx,[eax+0xc]
c001b6ff:	52                   	push   edx
c001b700:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b706:	e8 1d 52 ff ff       	call   c0010928 <VgaText::setTitle(char*)>
c001b70b:	83 c4 10             	add    esp,0x10
c001b70e:	31 c0                	xor    eax,eax
c001b710:	eb a6                	jmp    c001b6b8 <sysAppSettings(regs*)+0x50>
c001b712:	83 ec 08             	sub    esp,0x8
c001b715:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001b71b:	83 e0 0f             	and    eax,0xf
c001b71e:	50                   	push   eax
c001b71f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b724:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b727:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b72d:	e8 e6 51 ff ff       	call   c0010918 <VgaText::setTitleColour(VgaColour)>
c001b732:	58                   	pop    eax
c001b733:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001b739:	5a                   	pop    edx
c001b73a:	c1 e8 04             	shr    eax,0x4
c001b73d:	83 e0 0f             	and    eax,0xf
c001b740:	50                   	push   eax
c001b741:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b746:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b749:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b74f:	e8 b4 51 ff ff       	call   c0010908 <VgaText::setTitleTextColour(VgaColour)>
c001b754:	eb b5                	jmp    c001b70b <sysAppSettings(regs*)+0xa3>
c001b756:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b75b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b75e:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001b764:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001b76a:	c0 e8 06             	shr    al,0x6
c001b76d:	83 e0 01             	and    eax,0x1
c001b770:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c001b776:	31 c0                	xor    eax,eax
c001b778:	e9 3b ff ff ff       	jmp    c001b6b8 <sysAppSettings(regs*)+0x50>
c001b77d:	b8 02 00 00 00       	mov    eax,0x2
c001b782:	e9 31 ff ff ff       	jmp    c001b6b8 <sysAppSettings(regs*)+0x50>

c001b787 <sysSetFatAttrib(regs*)>:
c001b787:	57                   	push   edi
c001b788:	56                   	push   esi
c001b789:	53                   	push   ebx
c001b78a:	83 ec 1c             	sub    esp,0x1c
c001b78d:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001b791:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001b794:	68 14 01 00 00       	push   0x114
c001b799:	e8 86 3e ff ff       	call   c000f624 <malloc>
c001b79e:	83 c4 0c             	add    esp,0xc
c001b7a1:	89 c3                	mov    ebx,eax
c001b7a3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b7a8:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b7ab:	57                   	push   edi
c001b7ac:	53                   	push   ebx
c001b7ad:	e8 9a 76 ff ff       	call   c0012e4c <File::File(char const*, Process*)>
c001b7b2:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001b7b5:	83 c4 0c             	add    esp,0xc
c001b7b8:	0f b6 d4             	movzx  edx,ah
c001b7bb:	0f b6 c0             	movzx  eax,al
c001b7be:	52                   	push   edx
c001b7bf:	50                   	push   eax
c001b7c0:	53                   	push   ebx
c001b7c1:	e8 fc 78 ff ff       	call   c00130c2 <File::chfatattr(unsigned char, unsigned char)>
c001b7c6:	83 c4 10             	add    esp,0x10
c001b7c9:	85 db                	test   ebx,ebx
c001b7cb:	74 14                	je     c001b7e1 <sysSetFatAttrib(regs*)+0x5a>
c001b7cd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b7d1:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b7d3:	83 ec 0c             	sub    esp,0xc
c001b7d6:	53                   	push   ebx
c001b7d7:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b7da:	83 c4 10             	add    esp,0x10
c001b7dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b7e1:	85 c0                	test   eax,eax
c001b7e3:	0f 95 c0             	setne  al
c001b7e6:	31 d2                	xor    edx,edx
c001b7e8:	0f b6 c0             	movzx  eax,al
c001b7eb:	f7 d8                	neg    eax
c001b7ed:	83 d2 00             	adc    edx,0x0
c001b7f0:	83 c4 10             	add    esp,0x10
c001b7f3:	f7 da                	neg    edx
c001b7f5:	5b                   	pop    ebx
c001b7f6:	5e                   	pop    esi
c001b7f7:	5f                   	pop    edi
c001b7f8:	c3                   	ret    

c001b7f9 <sysPipe(regs*)>:
c001b7f9:	57                   	push   edi
c001b7fa:	56                   	push   esi
c001b7fb:	53                   	push   ebx
c001b7fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b800:	83 ec 0c             	sub    esp,0xc
c001b803:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001b806:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001b809:	6a 20                	push   0x20
c001b80b:	e8 14 3e ff ff       	call   c000f624 <malloc>
c001b810:	89 c3                	mov    ebx,eax
c001b812:	58                   	pop    eax
c001b813:	5a                   	pop    edx
c001b814:	68 00 50 00 00       	push   0x5000
c001b819:	53                   	push   ebx
c001b81a:	e8 39 4a ff ff       	call   c0010258 <Pipe::Pipe(int)>
c001b81f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b822:	e8 91 5c ff ff       	call   c00114b8 <UnixFile::getFileDescriptor()>
c001b827:	89 07                	mov    DWORD PTR [edi],eax
c001b829:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b82c:	e8 87 5c ff ff       	call   c00114b8 <UnixFile::getFileDescriptor()>
c001b831:	83 c4 10             	add    esp,0x10
c001b834:	89 06                	mov    DWORD PTR [esi],eax
c001b836:	31 d2                	xor    edx,edx
c001b838:	5b                   	pop    ebx
c001b839:	31 c0                	xor    eax,eax
c001b83b:	5e                   	pop    esi
c001b83c:	5f                   	pop    edi
c001b83d:	c3                   	ret    

c001b83e <sysGetUnixTime(regs*)>:
c001b83e:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c001b843:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b849:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b84d:	e9 e4 7f ff ff       	jmp    c0013836 <Clock::timeInSecondsLocal()>

c001b852 <string_ends_with(char const*, char const*)>:
c001b852:	57                   	push   edi
c001b853:	56                   	push   esi
c001b854:	53                   	push   ebx
c001b855:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b859:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b85d:	83 ec 0c             	sub    esp,0xc
c001b860:	53                   	push   ebx
c001b861:	e8 7b 4e fe ff       	call   c00006e1 <strlen>
c001b866:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b869:	89 c6                	mov    esi,eax
c001b86b:	e8 71 4e fe ff       	call   c00006e1 <strlen>
c001b870:	83 c4 10             	add    esp,0x10
c001b873:	39 c6                	cmp    esi,eax
c001b875:	7d 06                	jge    c001b87d <string_ends_with(char const*, char const*)+0x2b>
c001b877:	5b                   	pop    ebx
c001b878:	31 c0                	xor    eax,eax
c001b87a:	5e                   	pop    esi
c001b87b:	5f                   	pop    edi
c001b87c:	c3                   	ret    
c001b87d:	83 ec 08             	sub    esp,0x8
c001b880:	29 c6                	sub    esi,eax
c001b882:	57                   	push   edi
c001b883:	01 f3                	add    ebx,esi
c001b885:	53                   	push   ebx
c001b886:	e8 29 4f fe ff       	call   c00007b4 <strcmp>
c001b88b:	83 c4 10             	add    esp,0x10
c001b88e:	85 c0                	test   eax,eax
c001b890:	5b                   	pop    ebx
c001b891:	0f 94 c0             	sete   al
c001b894:	5e                   	pop    esi
c001b895:	0f b6 c0             	movzx  eax,al
c001b898:	5f                   	pop    edi
c001b899:	c3                   	ret    

c001b89a <sysCallOpen(regs*)>:
c001b89a:	56                   	push   esi
c001b89b:	53                   	push   ebx
c001b89c:	81 ec 04 01 00 00    	sub    esp,0x104
c001b8a2:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001b8a9:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001b8ac:	85 c9                	test   ecx,ecx
c001b8ae:	0f 84 b3 00 00 00    	je     c001b967 <sysCallOpen(regs*)+0xcd>
c001b8b4:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001b8b7:	85 c0                	test   eax,eax
c001b8b9:	0f 84 a8 00 00 00    	je     c001b967 <sysCallOpen(regs*)+0xcd>
c001b8bf:	52                   	push   edx
c001b8c0:	68 91 b3 02 c0       	push   0xc002b391
c001b8c5:	50                   	push   eax
c001b8c6:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001b8ca:	56                   	push   esi
c001b8cb:	e8 d2 73 ff ff       	call   c0012ca2 <Fs::standardiseFiles(char*, char const*, char const*)>
c001b8d0:	89 34 24             	mov    DWORD PTR [esp],esi
c001b8d3:	e8 09 4e fe ff       	call   c00006e1 <strlen>
c001b8d8:	83 c4 10             	add    esp,0x10
c001b8db:	48                   	dec    eax
c001b8dc:	74 1d                	je     c001b8fb <sysCallOpen(regs*)+0x61>
c001b8de:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001b8e1:	eb 0f                	jmp    c001b8f2 <sysCallOpen(regs*)+0x58>
c001b8e3:	80 fa 3a             	cmp    dl,0x3a
c001b8e6:	74 0f                	je     c001b8f7 <sysCallOpen(regs*)+0x5d>
c001b8e8:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001b8ec:	48                   	dec    eax
c001b8ed:	74 0c                	je     c001b8fb <sysCallOpen(regs*)+0x61>
c001b8ef:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001b8f2:	80 fa 2e             	cmp    dl,0x2e
c001b8f5:	75 ec                	jne    c001b8e3 <sysCallOpen(regs*)+0x49>
c001b8f7:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001b8fb:	83 ec 08             	sub    esp,0x8
c001b8fe:	68 95 b3 02 c0       	push   0xc002b395
c001b903:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b906:	e8 47 ff ff ff       	call   c001b852 <string_ends_with(char const*, char const*)>
c001b90b:	83 c4 10             	add    esp,0x10
c001b90e:	85 c0                	test   eax,eax
c001b910:	75 17                	jne    c001b929 <sysCallOpen(regs*)+0x8f>
c001b912:	83 ec 08             	sub    esp,0x8
c001b915:	68 b6 b3 02 c0       	push   0xc002b3b6
c001b91a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b91d:	e8 30 ff ff ff       	call   c001b852 <string_ends_with(char const*, char const*)>
c001b922:	83 c4 10             	add    esp,0x10
c001b925:	85 c0                	test   eax,eax
c001b927:	74 51                	je     c001b97a <sysCallOpen(regs*)+0xe0>
c001b929:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b92c:	83 ec 08             	sub    esp,0x8
c001b92f:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001b935:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b93c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b93f:	ff 30                	push   DWORD PTR [eax]
c001b941:	68 9a b3 02 c0       	push   0xc002b39a
c001b946:	e8 a8 6f ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001b94b:	c7 04 24 a9 b3 02 c0 	mov    DWORD PTR [esp],0xc002b3a9
c001b952:	e8 9c 6f ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001b957:	83 c4 10             	add    esp,0x10
c001b95a:	81 c4 04 01 00 00    	add    esp,0x104
c001b960:	31 c0                	xor    eax,eax
c001b962:	31 d2                	xor    edx,edx
c001b964:	5b                   	pop    ebx
c001b965:	5e                   	pop    esi
c001b966:	c3                   	ret    
c001b967:	81 c4 04 01 00 00    	add    esp,0x104
c001b96d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b972:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b977:	5b                   	pop    ebx
c001b978:	5e                   	pop    esi
c001b979:	c3                   	ret    
c001b97a:	83 ec 08             	sub    esp,0x8
c001b97d:	68 96 b3 02 c0       	push   0xc002b396
c001b982:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b985:	e8 2a 4e fe ff       	call   c00007b4 <strcmp>
c001b98a:	83 c4 10             	add    esp,0x10
c001b98d:	85 c0                	test   eax,eax
c001b98f:	74 98                	je     c001b929 <sysCallOpen(regs*)+0x8f>
c001b991:	83 ec 08             	sub    esp,0x8
c001b994:	68 95 b3 02 c0       	push   0xc002b395
c001b999:	56                   	push   esi
c001b99a:	e8 b3 fe ff ff       	call   c001b852 <string_ends_with(char const*, char const*)>
c001b99f:	83 c4 10             	add    esp,0x10
c001b9a2:	85 c0                	test   eax,eax
c001b9a4:	75 83                	jne    c001b929 <sysCallOpen(regs*)+0x8f>
c001b9a6:	83 ec 08             	sub    esp,0x8
c001b9a9:	68 bb b3 02 c0       	push   0xc002b3bb
c001b9ae:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b9b1:	e8 9c fe ff ff       	call   c001b852 <string_ends_with(char const*, char const*)>
c001b9b6:	83 c4 10             	add    esp,0x10
c001b9b9:	85 c0                	test   eax,eax
c001b9bb:	0f 85 d9 00 00 00    	jne    c001ba9a <sysCallOpen(regs*)+0x200>
c001b9c1:	83 ec 08             	sub    esp,0x8
c001b9c4:	68 c0 b3 02 c0       	push   0xc002b3c0
c001b9c9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b9cc:	e8 81 fe ff ff       	call   c001b852 <string_ends_with(char const*, char const*)>
c001b9d1:	83 c4 10             	add    esp,0x10
c001b9d4:	85 c0                	test   eax,eax
c001b9d6:	0f 85 be 00 00 00    	jne    c001ba9a <sysCallOpen(regs*)+0x200>
c001b9dc:	83 ec 08             	sub    esp,0x8
c001b9df:	68 bc b3 02 c0       	push   0xc002b3bc
c001b9e4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b9e7:	e8 c8 4d fe ff       	call   c00007b4 <strcmp>
c001b9ec:	83 c4 10             	add    esp,0x10
c001b9ef:	85 c0                	test   eax,eax
c001b9f1:	0f 84 a3 00 00 00    	je     c001ba9a <sysCallOpen(regs*)+0x200>
c001b9f7:	83 ec 08             	sub    esp,0x8
c001b9fa:	68 bb b3 02 c0       	push   0xc002b3bb
c001b9ff:	56                   	push   esi
c001ba00:	e8 4d fe ff ff       	call   c001b852 <string_ends_with(char const*, char const*)>
c001ba05:	83 c4 10             	add    esp,0x10
c001ba08:	85 c0                	test   eax,eax
c001ba0a:	0f 85 8a 00 00 00    	jne    c001ba9a <sysCallOpen(regs*)+0x200>
c001ba10:	83 ec 0c             	sub    esp,0xc
c001ba13:	68 14 01 00 00       	push   0x114
c001ba18:	e8 07 3c ff ff       	call   c000f624 <malloc>
c001ba1d:	83 c4 0c             	add    esp,0xc
c001ba20:	89 c6                	mov    esi,eax
c001ba22:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba27:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ba2a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001ba2d:	56                   	push   esi
c001ba2e:	e8 19 74 ff ff       	call   c0012e4c <File::File(char const*, Process*)>
c001ba33:	83 c4 10             	add    esp,0x10
c001ba36:	85 f6                	test   esi,esi
c001ba38:	0f 84 29 ff ff ff    	je     c001b967 <sysCallOpen(regs*)+0xcd>
c001ba3e:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001ba41:	0f b6 c2             	movzx  eax,dl
c001ba44:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001ba47:	89 d0                	mov    eax,edx
c001ba49:	83 e0 01             	and    eax,0x1
c001ba4c:	f6 c2 02             	test   dl,0x2
c001ba4f:	74 03                	je     c001ba54 <sysCallOpen(regs*)+0x1ba>
c001ba51:	83 c8 02             	or     eax,0x2
c001ba54:	f6 c2 04             	test   dl,0x4
c001ba57:	74 03                	je     c001ba5c <sysCallOpen(regs*)+0x1c2>
c001ba59:	83 c8 04             	or     eax,0x4
c001ba5c:	f6 c2 08             	test   dl,0x8
c001ba5f:	74 03                	je     c001ba64 <sysCallOpen(regs*)+0x1ca>
c001ba61:	83 c8 0a             	or     eax,0xa
c001ba64:	83 e2 10             	and    edx,0x10
c001ba67:	74 03                	je     c001ba6c <sysCallOpen(regs*)+0x1d2>
c001ba69:	83 c8 12             	or     eax,0x12
c001ba6c:	83 ec 08             	sub    esp,0x8
c001ba6f:	50                   	push   eax
c001ba70:	56                   	push   esi
c001ba71:	e8 3a 74 ff ff       	call   c0012eb0 <File::open(FileOpenMode)>
c001ba76:	83 c4 10             	add    esp,0x10
c001ba79:	85 c0                	test   eax,eax
c001ba7b:	0f 85 e6 fe ff ff    	jne    c001b967 <sysCallOpen(regs*)+0xcd>
c001ba81:	83 ec 0c             	sub    esp,0xc
c001ba84:	56                   	push   esi
c001ba85:	e8 2e 5a ff ff       	call   c00114b8 <UnixFile::getFileDescriptor()>
c001ba8a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001ba8d:	89 02                	mov    DWORD PTR [edx],eax
c001ba8f:	c1 f8 1f             	sar    eax,0x1f
c001ba92:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001ba95:	e9 bd fe ff ff       	jmp    c001b957 <sysCallOpen(regs*)+0xbd>
c001ba9a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ba9d:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001baa3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001baaa:	e9 ab fe ff ff       	jmp    c001b95a <sysCallOpen(regs*)+0xc0>

c001baaf <Sys::loadSyscalls()>:
c001baaf:	c7 05 e0 e3 02 c0 65 ac 01 c0 	mov    DWORD PTR ds:0xc002e3e0,0xc001ac65
c001bab9:	c7 05 e4 e3 02 c0 c7 a8 01 c0 	mov    DWORD PTR ds:0xc002e3e4,0xc001a8c7
c001bac3:	c7 05 e8 e3 02 c0 1a aa 01 c0 	mov    DWORD PTR ds:0xc002e3e8,0xc001aa1a
c001bacd:	c7 05 ec e3 02 c0 fd ab 01 c0 	mov    DWORD PTR ds:0xc002e3ec,0xc001abfd
c001bad7:	c7 05 f0 e3 02 c0 b2 a9 01 c0 	mov    DWORD PTR ds:0xc002e3f0,0xc001a9b2
c001bae1:	c7 05 f4 e3 02 c0 fe a8 01 c0 	mov    DWORD PTR ds:0xc002e3f4,0xc001a8fe
c001baeb:	c7 05 f8 e3 02 c0 df a8 01 c0 	mov    DWORD PTR ds:0xc002e3f8,0xc001a8df
c001baf5:	c7 05 fc e3 02 c0 6f aa 01 c0 	mov    DWORD PTR ds:0xc002e3fc,0xc001aa6f
c001baff:	c7 05 04 e4 02 c0 77 b1 01 c0 	mov    DWORD PTR ds:0xc002e404,0xc001b177
c001bb09:	c7 05 00 e4 02 c0 9a b8 01 c0 	mov    DWORD PTR ds:0xc002e400,0xc001b89a
c001bb13:	c7 05 08 e4 02 c0 ff b1 01 c0 	mov    DWORD PTR ds:0xc002e408,0xc001b1ff
c001bb1d:	c7 05 0c e4 02 c0 66 ae 01 c0 	mov    DWORD PTR ds:0xc002e40c,0xc001ae66
c001bb27:	c7 05 10 e4 02 c0 a0 ac 01 c0 	mov    DWORD PTR ds:0xc002e410,0xc001aca0
c001bb31:	c7 05 14 e4 02 c0 a5 ac 01 c0 	mov    DWORD PTR ds:0xc002e414,0xc001aca5
c001bb3b:	c7 05 18 e4 02 c0 da b2 01 c0 	mov    DWORD PTR ds:0xc002e418,0xc001b2da
c001bb45:	c7 05 1c e4 02 c0 74 b2 01 c0 	mov    DWORD PTR ds:0xc002e41c,0xc001b274
c001bb4f:	c7 05 20 e4 02 c0 4e af 01 c0 	mov    DWORD PTR ds:0xc002e420,0xc001af4e
c001bb59:	c7 05 24 e4 02 c0 b7 af 01 c0 	mov    DWORD PTR ds:0xc002e424,0xc001afb7
c001bb63:	c7 05 28 e4 02 c0 34 b0 01 c0 	mov    DWORD PTR ds:0xc002e428,0xc001b034
c001bb6d:	c7 05 2c e4 02 c0 aa ac 01 c0 	mov    DWORD PTR ds:0xc002e42c,0xc001acaa
c001bb77:	c7 05 30 e4 02 c0 4a b3 01 c0 	mov    DWORD PTR ds:0xc002e430,0xc001b34a
c001bb81:	c7 05 34 e4 02 c0 64 b3 01 c0 	mov    DWORD PTR ds:0xc002e434,0xc001b364
c001bb8b:	c7 05 38 e4 02 c0 64 b3 01 c0 	mov    DWORD PTR ds:0xc002e438,0xc001b364
c001bb95:	c7 05 3c e4 02 c0 a5 b3 01 c0 	mov    DWORD PTR ds:0xc002e43c,0xc001b3a5
c001bb9f:	c7 05 40 e4 02 c0 09 b4 01 c0 	mov    DWORD PTR ds:0xc002e440,0xc001b409
c001bba9:	c7 05 44 e4 02 c0 b4 ac 01 c0 	mov    DWORD PTR ds:0xc002e444,0xc001acb4
c001bbb3:	c7 05 48 e4 02 c0 6d b4 01 c0 	mov    DWORD PTR ds:0xc002e448,0xc001b46d
c001bbbd:	c7 05 4c e4 02 c0 23 ae 01 c0 	mov    DWORD PTR ds:0xc002e44c,0xc001ae23
c001bbc7:	c7 05 50 e4 02 c0 b9 b4 01 c0 	mov    DWORD PTR ds:0xc002e450,0xc001b4b9
c001bbd1:	c7 05 54 e4 02 c0 f4 ae 01 c0 	mov    DWORD PTR ds:0xc002e454,0xc001aef4
c001bbdb:	c7 05 58 e4 02 c0 3c b5 01 c0 	mov    DWORD PTR ds:0xc002e458,0xc001b53c
c001bbe5:	c7 05 5c e4 02 c0 b7 b0 01 c0 	mov    DWORD PTR ds:0xc002e45c,0xc001b0b7
c001bbef:	c7 05 60 e4 02 c0 63 b5 01 c0 	mov    DWORD PTR ds:0xc002e460,0xc001b563
c001bbf9:	c7 05 64 e4 02 c0 bb b5 01 c0 	mov    DWORD PTR ds:0xc002e464,0xc001b5bb
c001bc03:	c7 05 68 e4 02 c0 68 b6 01 c0 	mov    DWORD PTR ds:0xc002e468,0xc001b668
c001bc0d:	c7 05 6c e4 02 c0 c4 ac 01 c0 	mov    DWORD PTR ds:0xc002e46c,0xc001acc4
c001bc17:	c7 05 70 e4 02 c0 2e ad 01 c0 	mov    DWORD PTR ds:0xc002e470,0xc001ad2e
c001bc21:	c7 05 74 e4 02 c0 74 ad 01 c0 	mov    DWORD PTR ds:0xc002e474,0xc001ad74
c001bc2b:	c7 05 78 e4 02 c0 87 b7 01 c0 	mov    DWORD PTR ds:0xc002e478,0xc001b787
c001bc35:	c7 05 7c e4 02 c0 7f b3 01 c0 	mov    DWORD PTR ds:0xc002e47c,0xc001b37f
c001bc3f:	c7 05 80 e4 02 c0 c5 ad 01 c0 	mov    DWORD PTR ds:0xc002e480,0xc001adc5
c001bc49:	c7 05 84 e4 02 c0 f9 b7 01 c0 	mov    DWORD PTR ds:0xc002e484,0xc001b7f9
c001bc53:	c7 05 88 e4 02 c0 3e b8 01 c0 	mov    DWORD PTR ds:0xc002e488,0xc001b83e
c001bc5d:	c7 05 8c e4 02 c0 0a a9 01 c0 	mov    DWORD PTR ds:0xc002e48c,0xc001a90a
c001bc67:	c7 05 90 e4 02 c0 8b aa 01 c0 	mov    DWORD PTR ds:0xc002e490,0xc001aa8b
c001bc71:	c7 05 94 e4 02 c0 b3 ab 01 c0 	mov    DWORD PTR ds:0xc002e494,0xc001abb3
c001bc7b:	c7 05 98 e4 02 c0 ac a8 01 c0 	mov    DWORD PTR ds:0xc002e498,0xc001a8ac
c001bc85:	c3                   	ret    

c001bc86 <Sys::systemCall(regs*, void*)>:
c001bc86:	53                   	push   ebx
c001bc87:	83 ec 08             	sub    esp,0x8
c001bc8a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bc8e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001bc91:	83 f8 7f             	cmp    eax,0x7f
c001bc94:	77 16                	ja     c001bcac <Sys::systemCall(regs*, void*)+0x26>
c001bc96:	8b 14 85 e0 e3 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1c20]
c001bc9d:	85 d2                	test   edx,edx
c001bc9f:	74 0b                	je     c001bcac <Sys::systemCall(regs*, void*)+0x26>
c001bca1:	83 ec 0c             	sub    esp,0xc
c001bca4:	53                   	push   ebx
c001bca5:	ff d2                	call   edx
c001bca7:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001bcaa:	eb 0d                	jmp    c001bcb9 <Sys::systemCall(regs*, void*)+0x33>
c001bcac:	52                   	push   edx
c001bcad:	52                   	push   edx
c001bcae:	50                   	push   eax
c001bcaf:	68 c5 b3 02 c0       	push   0xc002b3c5
c001bcb4:	e8 3a 6c ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001bcb9:	83 c4 10             	add    esp,0x10
c001bcbc:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001bcc1:	31 d2                	xor    edx,edx
c001bcc3:	83 c4 08             	add    esp,0x8
c001bcc6:	5b                   	pop    ebx
c001bcc7:	c3                   	ret    

c001bcc8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001bcc8:	55                   	push   ebp
c001bcc9:	89 e5                	mov    ebp,esp
c001bccb:	57                   	push   edi
c001bccc:	56                   	push   esi
c001bccd:	53                   	push   ebx
c001bcce:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001bcd4:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c001bcd7:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c001bcda:	85 c0                	test   eax,eax
c001bcdc:	0f 95 c1             	setne  cl
c001bcdf:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001bce3:	0f 94 c2             	sete   dl
c001bce6:	84 d1                	test   cl,dl
c001bce8:	74 26                	je     c001bd10 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001bcea:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c001bcf1:	74 1d                	je     c001bd10 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001bcf3:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001bcf6:	8d 91 00 10 00 00    	lea    edx,[ecx+0x1000]
c001bcfc:	89 d6                	mov    esi,edx
c001bcfe:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001bd04:	81 ce 00 f0 ff ff    	or     esi,0xfffff000
c001bd0a:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001bd0d:	89 75 10             	mov    DWORD PTR [ebp+0x10],esi
c001bd10:	83 ec 0c             	sub    esp,0xc
c001bd13:	05 ff 0f 00 00       	add    eax,0xfff
c001bd18:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001bd1b:	6a 01                	push   0x1
c001bd1d:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c001bd23:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c001bd29:	e8 d5 5b ff ff       	call   c0011903 <Virt::allocateKernelVirtualPages(int)>
c001bd2e:	83 c4 10             	add    esp,0x10
c001bd31:	89 c6                	mov    esi,eax
c001bd33:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c001bd39:	0f 86 21 01 00 00    	jbe    c001be60 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c001bd3f:	c1 eb 0c             	shr    ebx,0xc
c001bd42:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c001bd4c:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c001bd52:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001bd55:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001bd58:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c001bd5e:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c001bd61:	29 d8                	sub    eax,ebx
c001bd63:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c001bd69:	0f 83 f4 00 00 00    	jae    c001be63 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x19b>
c001bd6f:	83 ec 0c             	sub    esp,0xc
c001bd72:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c001bd78:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001bd7b:	3d 00 10 00 00       	cmp    eax,0x1000
c001bd80:	8b 09                	mov    ecx,DWORD PTR [ecx]
c001bd82:	52                   	push   edx
c001bd83:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c001bd89:	52                   	push   edx
c001bd8a:	76 05                	jbe    c001bd91 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc9>
c001bd8c:	b8 00 10 00 00       	mov    eax,0x1000
c001bd91:	31 d2                	xor    edx,edx
c001bd93:	52                   	push   edx
c001bd94:	50                   	push   eax
c001bd95:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c001bd98:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001bd9b:	83 c4 20             	add    esp,0x20
c001bd9e:	85 c0                	test   eax,eax
c001bda0:	74 1f                	je     c001bdc1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf9>
c001bda2:	51                   	push   ecx
c001bda3:	51                   	push   ecx
c001bda4:	50                   	push   eax
c001bda5:	68 d9 b3 02 c0       	push   0xc002b3d9
c001bdaa:	e8 44 6b ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001bdaf:	89 34 24             	mov    DWORD PTR [esp],esi
c001bdb2:	e8 b0 5e ff ff       	call   c0011c67 <Virt::freeKernelVirtualPages(unsigned long)>
c001bdb7:	83 c4 10             	add    esp,0x10
c001bdba:	31 c0                	xor    eax,eax
c001bdbc:	e9 7c 01 00 00       	jmp    c001bf3d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c001bdc1:	e8 be 14 00 00       	call   c001d284 <lockScheduler()>
c001bdc6:	e8 f6 3e ff ff       	call   c000fcc1 <Phys::allocatePage()>
c001bdcb:	6a 07                	push   0x7
c001bdcd:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c001bdd3:	56                   	push   esi
c001bdd4:	50                   	push   eax
c001bdd5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001bddb:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001bdde:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001bde4:	e8 e5 61 ff ff       	call   c0011fce <VAS::mapPage(unsigned long, unsigned long, int)>
c001bde9:	83 c4 0c             	add    esp,0xc
c001bdec:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001bdf2:	6a 00                	push   0x0
c001bdf4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001bdfa:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001bdfd:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001be03:	e8 30 60 ff ff       	call   c0011e38 <VAS::mapOtherVASIn(bool, VAS*)>
c001be08:	58                   	pop    eax
c001be09:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c001be0f:	5a                   	pop    edx
c001be10:	68 07 04 00 00       	push   0x407
c001be15:	53                   	push   ebx
c001be16:	81 c3 00 10 00 00    	add    ebx,0x1000
c001be1c:	50                   	push   eax
c001be1d:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001be23:	6a 00                	push   0x0
c001be25:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be2a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001be2d:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001be33:	e8 50 65 ff ff       	call   c0012388 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001be38:	83 c4 1c             	add    esp,0x1c
c001be3b:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c001be41:	68 00 10 00 00       	push   0x1000
c001be46:	50                   	push   eax
c001be47:	56                   	push   esi
c001be48:	e8 53 48 fe ff       	call   c00006a0 <memcpy>
c001be4d:	e8 34 14 00 00       	call   c001d286 <unlockScheduler()>
c001be52:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c001be58:	83 c4 10             	add    esp,0x10
c001be5b:	e9 f5 fe ff ff       	jmp    c001bd55 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x8d>
c001be60:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001be63:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c001be6d:	0f 86 bc 00 00 00    	jbe    c001bf2f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x267>
c001be73:	e8 0c 14 00 00       	call   c001d284 <lockScheduler()>
c001be78:	51                   	push   ecx
c001be79:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001be7f:	6a 00                	push   0x0
c001be81:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be86:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001be89:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001be8f:	e8 a4 5f ff ff       	call   c0011e38 <VAS::mapOtherVASIn(bool, VAS*)>
c001be94:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c001be9a:	83 c4 10             	add    esp,0x10
c001be9d:	c1 e8 0c             	shr    eax,0xc
c001bea0:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c001beaa:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c001beb0:	e8 0c 3e ff ff       	call   c000fcc1 <Phys::allocatePage()>
c001beb5:	6a 07                	push   0x7
c001beb7:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c001bebd:	56                   	push   esi
c001bebe:	50                   	push   eax
c001bebf:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001bec5:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001bec8:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c001bece:	e8 fb 60 ff ff       	call   c0011fce <VAS::mapPage(unsigned long, unsigned long, int)>
c001bed3:	58                   	pop    eax
c001bed4:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c001beda:	5a                   	pop    edx
c001bedb:	68 07 04 00 00       	push   0x407
c001bee0:	53                   	push   ebx
c001bee1:	81 c3 00 10 00 00    	add    ebx,0x1000
c001bee7:	50                   	push   eax
c001bee8:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001beee:	6a 00                	push   0x0
c001bef0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bef5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bef8:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001befe:	e8 85 64 ff ff       	call   c0012388 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001bf03:	83 c4 1c             	add    esp,0x1c
c001bf06:	68 00 10 00 00       	push   0x1000
c001bf0b:	6a 00                	push   0x0
c001bf0d:	56                   	push   esi
c001bf0e:	e8 b1 47 fe ff       	call   c00006c4 <memset>
c001bf13:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c001bf19:	83 c4 10             	add    esp,0x10
c001bf1c:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c001bf22:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c001bf28:	77 86                	ja     c001beb0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e8>
c001bf2a:	e8 57 13 00 00       	call   c001d286 <unlockScheduler()>
c001bf2f:	83 ec 0c             	sub    esp,0xc
c001bf32:	56                   	push   esi
c001bf33:	e8 2f 5d ff ff       	call   c0011c67 <Virt::freeKernelVirtualPages(unsigned long)>
c001bf38:	83 c4 10             	add    esp,0x10
c001bf3b:	b0 01                	mov    al,0x1
c001bf3d:	8d 65 f4             	lea    esp,[ebp-0xc]
c001bf40:	5b                   	pop    ebx
c001bf41:	5e                   	pop    esi
c001bf42:	5f                   	pop    edi
c001bf43:	5d                   	pop    ebp
c001bf44:	c3                   	ret    

c001bf45 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001bf45:	55                   	push   ebp
c001bf46:	57                   	push   edi
c001bf47:	56                   	push   esi
c001bf48:	53                   	push   ebx
c001bf49:	83 ec 48             	sub    esp,0x48
c001bf4c:	68 14 01 00 00       	push   0x114
c001bf51:	e8 ce 36 ff ff       	call   c000f624 <malloc>
c001bf56:	83 c4 0c             	add    esp,0xc
c001bf59:	89 c6                	mov    esi,eax
c001bf5b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001bf5f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001bf63:	50                   	push   eax
c001bf64:	e8 e3 6e ff ff       	call   c0012e4c <File::File(char const*, Process*)>
c001bf69:	58                   	pop    eax
c001bf6a:	5a                   	pop    edx
c001bf6b:	6a 01                	push   0x1
c001bf6d:	56                   	push   esi
c001bf6e:	e8 3d 6f ff ff       	call   c0012eb0 <File::open(FileOpenMode)>
c001bf73:	83 c4 10             	add    esp,0x10
c001bf76:	85 c0                	test   eax,eax
c001bf78:	0f 85 47 01 00 00    	jne    c001c0c5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001bf7e:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001bf86:	83 ec 0c             	sub    esp,0xc
c001bf89:	6a 34                	push   0x34
c001bf8b:	e8 94 36 ff ff       	call   c000f624 <malloc>
c001bf90:	89 c3                	mov    ebx,eax
c001bf92:	58                   	pop    eax
c001bf93:	8b 06                	mov    eax,DWORD PTR [esi]
c001bf95:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001bf99:	57                   	push   edi
c001bf9a:	53                   	push   ebx
c001bf9b:	6a 00                	push   0x0
c001bf9d:	6a 34                	push   0x34
c001bf9f:	56                   	push   esi
c001bfa0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001bfa3:	83 c4 20             	add    esp,0x20
c001bfa6:	85 c0                	test   eax,eax
c001bfa8:	0f 85 17 01 00 00    	jne    c001c0c5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001bfae:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001bfb4:	0f 85 0b 01 00 00    	jne    c001c0c5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001bfba:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bfbd:	85 c0                	test   eax,eax
c001bfbf:	0f 84 00 01 00 00    	je     c001c0c5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001bfc5:	31 d2                	xor    edx,edx
c001bfc7:	55                   	push   ebp
c001bfc8:	52                   	push   edx
c001bfc9:	50                   	push   eax
c001bfca:	56                   	push   esi
c001bfcb:	e8 9e 6f ff ff       	call   c0012f6e <File::seek(unsigned long long)>
c001bfd0:	83 c4 10             	add    esp,0x10
c001bfd3:	85 c0                	test   eax,eax
c001bfd5:	0f 85 ea 00 00 00    	jne    c001c0c5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001bfdb:	83 ec 0c             	sub    esp,0xc
c001bfde:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001bfe1:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001bfe5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001bfe9:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001bfed:	0f af c2             	imul   eax,edx
c001bff0:	50                   	push   eax
c001bff1:	e8 2e 36 ff ff       	call   c000f624 <malloc>
c001bff6:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001bff8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001bffc:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bfff:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c003:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c007:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c00b:	0f af c2             	imul   eax,edx
c001c00e:	99                   	cdq    
c001c00f:	52                   	push   edx
c001c010:	50                   	push   eax
c001c011:	56                   	push   esi
c001c012:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c015:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001c018:	83 c4 20             	add    esp,0x20
c001c01b:	85 c0                	test   eax,eax
c001c01d:	0f 84 a2 00 00 00    	je     c001c0c5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c023:	31 d2                	xor    edx,edx
c001c025:	51                   	push   ecx
c001c026:	52                   	push   edx
c001c027:	50                   	push   eax
c001c028:	56                   	push   esi
c001c029:	e8 40 6f ff ff       	call   c0012f6e <File::seek(unsigned long long)>
c001c02e:	83 c4 10             	add    esp,0x10
c001c031:	85 c0                	test   eax,eax
c001c033:	0f 85 8c 00 00 00    	jne    c001c0c5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c039:	83 ec 0c             	sub    esp,0xc
c001c03c:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c040:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c044:	31 ed                	xor    ebp,ebp
c001c046:	0f af c2             	imul   eax,edx
c001c049:	50                   	push   eax
c001c04a:	e8 d5 35 ff ff       	call   c000f624 <malloc>
c001c04f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c051:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c055:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c058:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c05c:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c060:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c064:	0f af c2             	imul   eax,edx
c001c067:	99                   	cdq    
c001c068:	52                   	push   edx
c001c069:	50                   	push   eax
c001c06a:	56                   	push   esi
c001c06b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c06e:	83 c4 20             	add    esp,0x20
c001c071:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001c079:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001c07d:	0f 86 80 00 00 00    	jbe    c001c103 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001c083:	0f b7 fd             	movzx  edi,bp
c001c086:	c1 e7 05             	shl    edi,0x5
c001c089:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001c08d:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001c090:	75 6b                	jne    c001c0fd <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c092:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001c095:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c099:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001c09c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c0a0:	52                   	push   edx
c001c0a1:	31 d2                	xor    edx,edx
c001c0a3:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001c0a6:	52                   	push   edx
c001c0a7:	50                   	push   eax
c001c0a8:	56                   	push   esi
c001c0a9:	e8 c0 6e ff ff       	call   c0012f6e <File::seek(unsigned long long)>
c001c0ae:	83 c4 10             	add    esp,0x10
c001c0b1:	85 c0                	test   eax,eax
c001c0b3:	74 17                	je     c001c0cc <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001c0b5:	83 ec 0c             	sub    esp,0xc
c001c0b8:	68 04 b4 02 c0       	push   0xc002b404
c001c0bd:	e8 31 68 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001c0c2:	83 c4 10             	add    esp,0x10
c001c0c5:	31 c0                	xor    eax,eax
c001c0c7:	e9 87 00 00 00       	jmp    c001c153 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001c0cc:	83 ec 0c             	sub    esp,0xc
c001c0cf:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001c0d2:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001c0d5:	50                   	push   eax
c001c0d6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001c0da:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c0de:	56                   	push   esi
c001c0df:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001c0e3:	e8 e0 fb ff ff       	call   c001bcc8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001c0e8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c0ec:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001c0f0:	83 c4 20             	add    esp,0x20
c001c0f3:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001c0f7:	73 04                	jae    c001c0fd <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c0f9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c0fd:	45                   	inc    ebp
c001c0fe:	e9 76 ff ff ff       	jmp    c001c079 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001c103:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001c107:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c10b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c10f:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001c115:	83 ec 0c             	sub    esp,0xc
c001c118:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001c11e:	25 00 f0 ff ff       	and    eax,0xfffff000
c001c123:	05 00 10 00 00       	add    eax,0x1000
c001c128:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c12b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c12f:	e8 00 35 ff ff       	call   c000f634 <free>
c001c134:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c137:	e8 f8 34 ff ff       	call   c000f634 <free>
c001c13c:	58                   	pop    eax
c001c13d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c141:	e8 ee 34 ff ff       	call   c000f634 <free>
c001c146:	89 34 24             	mov    DWORD PTR [esp],esi
c001c149:	e8 c0 6d ff ff       	call   c0012f0e <File::close()>
c001c14e:	83 c4 10             	add    esp,0x10
c001c151:	b0 01                	mov    al,0x1
c001c153:	83 c4 3c             	add    esp,0x3c
c001c156:	5b                   	pop    ebx
c001c157:	5e                   	pop    esi
c001c158:	5f                   	pop    edi
c001c159:	5d                   	pop    ebp
c001c15a:	c3                   	ret    

c001c15b <Thr::runtimeReferenceHelper()>:
c001c15b:	83 ec 18             	sub    esp,0x18
c001c15e:	68 0c b4 02 c0       	push   0xc002b40c
c001c163:	e8 8b 67 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001c168:	fa                   	cli    
c001c169:	83 c4 10             	add    esp,0x10
c001c16c:	eb fe                	jmp    c001c16c <Thr::runtimeReferenceHelper()+0x11>

c001c16e <Thr::getAddressOfKernelSymbol(char const*)>:
c001c16e:	57                   	push   edi
c001c16f:	56                   	push   esi
c001c170:	53                   	push   ebx
c001c171:	31 db                	xor    ebx,ebx
c001c173:	39 1d 80 ed 02 c0    	cmp    DWORD PTR ds:0xc002ed80,ebx
c001c179:	7e 3c                	jle    c001c1b7 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001c17b:	8b 34 9d 00 ed 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd1300]
c001c182:	31 ff                	xor    edi,edi
c001c184:	39 3c 9d 00 ec 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd1400],edi
c001c18b:	7e 27                	jle    c001c1b4 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001c18d:	50                   	push   eax
c001c18e:	50                   	push   eax
c001c18f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c193:	8b 06                	mov    eax,DWORD PTR [esi]
c001c195:	03 04 9d 80 ec 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd1380]
c001c19c:	50                   	push   eax
c001c19d:	e8 12 46 fe ff       	call   c00007b4 <strcmp>
c001c1a2:	83 c4 10             	add    esp,0x10
c001c1a5:	85 c0                	test   eax,eax
c001c1a7:	75 05                	jne    c001c1ae <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001c1a9:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001c1ac:	eb 0b                	jmp    c001c1b9 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001c1ae:	83 c6 10             	add    esi,0x10
c001c1b1:	47                   	inc    edi
c001c1b2:	eb d0                	jmp    c001c184 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001c1b4:	43                   	inc    ebx
c001c1b5:	eb bc                	jmp    c001c173 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001c1b7:	31 c0                	xor    eax,eax
c001c1b9:	5b                   	pop    ebx
c001c1ba:	5e                   	pop    esi
c001c1bb:	5f                   	pop    edi
c001c1bc:	c3                   	ret    

c001c1bd <Thr::loadKernelSymbolTable(char const*)>:
c001c1bd:	55                   	push   ebp
c001c1be:	57                   	push   edi
c001c1bf:	56                   	push   esi
c001c1c0:	53                   	push   ebx
c001c1c1:	83 ec 68             	sub    esp,0x68
c001c1c4:	8b 35 d4 ed 02 c0    	mov    esi,DWORD PTR ds:0xc002edd4
c001c1ca:	68 14 01 00 00       	push   0x114
c001c1cf:	e8 50 34 ff ff       	call   c000f624 <malloc>
c001c1d4:	83 c4 0c             	add    esp,0xc
c001c1d7:	89 c3                	mov    ebx,eax
c001c1d9:	56                   	push   esi
c001c1da:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001c1de:	50                   	push   eax
c001c1df:	e8 68 6c ff ff       	call   c0012e4c <File::File(char const*, Process*)>
c001c1e4:	5e                   	pop    esi
c001c1e5:	5f                   	pop    edi
c001c1e6:	6a 01                	push   0x1
c001c1e8:	53                   	push   ebx
c001c1e9:	e8 c2 6c ff ff       	call   c0012eb0 <File::open(FileOpenMode)>
c001c1ee:	83 c4 10             	add    esp,0x10
c001c1f1:	85 c0                	test   eax,eax
c001c1f3:	74 17                	je     c001c20c <Thr::loadKernelSymbolTable(char const*)+0x4f>
c001c1f5:	83 ec 0c             	sub    esp,0xc
c001c1f8:	68 2e b4 02 c0       	push   0xc002b42e
c001c1fd:	e8 4b da ff ff       	call   c0019c4d <Krnl::panic(char const*)>
c001c202:	83 c4 10             	add    esp,0x10
c001c205:	31 c0                	xor    eax,eax
c001c207:	e9 5d 02 00 00       	jmp    c001c469 <Thr::loadKernelSymbolTable(char const*)+0x2ac>
c001c20c:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001c214:	83 ec 0c             	sub    esp,0xc
c001c217:	6a 34                	push   0x34
c001c219:	e8 06 34 ff ff       	call   c000f624 <malloc>
c001c21e:	59                   	pop    ecx
c001c21f:	89 c7                	mov    edi,eax
c001c221:	8d 74 24 34          	lea    esi,[esp+0x34]
c001c225:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c227:	56                   	push   esi
c001c228:	57                   	push   edi
c001c229:	6a 00                	push   0x0
c001c22b:	6a 34                	push   0x34
c001c22d:	53                   	push   ebx
c001c22e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c231:	83 c4 20             	add    esp,0x20
c001c234:	85 c0                	test   eax,eax
c001c236:	75 bd                	jne    c001c1f5 <Thr::loadKernelSymbolTable(char const*)+0x38>
c001c238:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001c23e:	75 b5                	jne    c001c1f5 <Thr::loadKernelSymbolTable(char const*)+0x38>
c001c240:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001c243:	85 c0                	test   eax,eax
c001c245:	74 ae                	je     c001c1f5 <Thr::loadKernelSymbolTable(char const*)+0x38>
c001c247:	52                   	push   edx
c001c248:	31 d2                	xor    edx,edx
c001c24a:	52                   	push   edx
c001c24b:	50                   	push   eax
c001c24c:	53                   	push   ebx
c001c24d:	e8 1c 6d ff ff       	call   c0012f6e <File::seek(unsigned long long)>
c001c252:	83 c4 10             	add    esp,0x10
c001c255:	85 c0                	test   eax,eax
c001c257:	75 9c                	jne    c001c1f5 <Thr::loadKernelSymbolTable(char const*)+0x38>
c001c259:	83 ec 0c             	sub    esp,0xc
c001c25c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c260:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c264:	31 ed                	xor    ebp,ebp
c001c266:	0f af c2             	imul   eax,edx
c001c269:	50                   	push   eax
c001c26a:	e8 b5 33 ff ff       	call   c000f624 <malloc>
c001c26f:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001c271:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c275:	89 34 24             	mov    DWORD PTR [esp],esi
c001c278:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c27c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c280:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c284:	0f af c2             	imul   eax,edx
c001c287:	99                   	cdq    
c001c288:	52                   	push   edx
c001c289:	50                   	push   eax
c001c28a:	53                   	push   ebx
c001c28b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c28e:	83 c4 20             	add    esp,0x20
c001c291:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001c299:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c2a1:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c2a9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c2b1:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001c2b5:	0f 86 aa 00 00 00    	jbe    c001c365 <Thr::loadKernelSymbolTable(char const*)+0x1a8>
c001c2bb:	0f b7 f5             	movzx  esi,bp
c001c2be:	6b f6 28             	imul   esi,esi,0x28
c001c2c1:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001c2c5:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001c2c8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c2cc:	50                   	push   eax
c001c2cd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c2d1:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001c2d5:	8b 16                	mov    edx,DWORD PTR [esi]
c001c2d7:	6b c0 28             	imul   eax,eax,0x28
c001c2da:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001c2de:	89 d0                	mov    eax,edx
c001c2e0:	31 d2                	xor    edx,edx
c001c2e2:	52                   	push   edx
c001c2e3:	50                   	push   eax
c001c2e4:	53                   	push   ebx
c001c2e5:	e8 84 6c ff ff       	call   c0012f6e <File::seek(unsigned long long)>
c001c2ea:	83 c4 0c             	add    esp,0xc
c001c2ed:	6a 20                	push   0x20
c001c2ef:	6a 00                	push   0x0
c001c2f1:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001c2f5:	52                   	push   edx
c001c2f6:	e8 c9 43 fe ff       	call   c00006c4 <memset>
c001c2fb:	58                   	pop    eax
c001c2fc:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c2fe:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001c302:	51                   	push   ecx
c001c303:	8d 54 24 40          	lea    edx,[esp+0x40]
c001c307:	52                   	push   edx
c001c308:	6a 00                	push   0x0
c001c30a:	6a 1f                	push   0x1f
c001c30c:	53                   	push   ebx
c001c30d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c310:	83 c4 18             	add    esp,0x18
c001c313:	68 45 b4 02 c0       	push   0xc002b445
c001c318:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001c31c:	52                   	push   edx
c001c31d:	e8 92 44 fe ff       	call   c00007b4 <strcmp>
c001c322:	83 c4 10             	add    esp,0x10
c001c325:	85 c0                	test   eax,eax
c001c327:	75 0f                	jne    c001c338 <Thr::loadKernelSymbolTable(char const*)+0x17b>
c001c329:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c32c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c330:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c334:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c338:	50                   	push   eax
c001c339:	50                   	push   eax
c001c33a:	68 4d b4 02 c0       	push   0xc002b44d
c001c33f:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001c343:	50                   	push   eax
c001c344:	e8 6b 44 fe ff       	call   c00007b4 <strcmp>
c001c349:	83 c4 10             	add    esp,0x10
c001c34c:	85 c0                	test   eax,eax
c001c34e:	75 0f                	jne    c001c35f <Thr::loadKernelSymbolTable(char const*)+0x1a2>
c001c350:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c353:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c357:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c35b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c35f:	45                   	inc    ebp
c001c360:	e9 4c ff ff ff       	jmp    c001c2b1 <Thr::loadKernelSymbolTable(char const*)+0xf4>
c001c365:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c36a:	75 10                	jne    c001c37c <Thr::loadKernelSymbolTable(char const*)+0x1bf>
c001c36c:	83 ec 0c             	sub    esp,0xc
c001c36f:	68 55 b4 02 c0       	push   0xc002b455
c001c374:	e8 d4 d8 ff ff       	call   c0019c4d <Krnl::panic(char const*)>
c001c379:	83 c4 10             	add    esp,0x10
c001c37c:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001c381:	75 10                	jne    c001c393 <Thr::loadKernelSymbolTable(char const*)+0x1d6>
c001c383:	83 ec 0c             	sub    esp,0xc
c001c386:	68 55 b4 02 c0       	push   0xc002b455
c001c38b:	e8 bd d8 ff ff       	call   c0019c4d <Krnl::panic(char const*)>
c001c390:	83 c4 10             	add    esp,0x10
c001c393:	31 d2                	xor    edx,edx
c001c395:	50                   	push   eax
c001c396:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c39a:	52                   	push   edx
c001c39b:	50                   	push   eax
c001c39c:	53                   	push   ebx
c001c39d:	e8 cc 6b ff ff       	call   c0012f6e <File::seek(unsigned long long)>
c001c3a2:	5a                   	pop    edx
c001c3a3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c3a7:	e8 78 32 ff ff       	call   c000f624 <malloc>
c001c3ac:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c3b0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c3b4:	31 c9                	xor    ecx,ecx
c001c3b6:	5e                   	pop    esi
c001c3b7:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c3b9:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001c3bd:	55                   	push   ebp
c001c3be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c3c2:	51                   	push   ecx
c001c3c3:	52                   	push   edx
c001c3c4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001c3c8:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001c3cc:	53                   	push   ebx
c001c3cd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c3d0:	83 c4 14             	add    esp,0x14
c001c3d3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c3d7:	e8 48 32 ff ff       	call   c000f624 <malloc>
c001c3dc:	89 c6                	mov    esi,eax
c001c3de:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c3e0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c3e3:	56                   	push   esi
c001c3e4:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c3e8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001c3ec:	51                   	push   ecx
c001c3ed:	52                   	push   edx
c001c3ee:	53                   	push   ebx
c001c3ef:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c3f2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c3f6:	8b 15 80 ed 02 c0    	mov    edx,DWORD PTR ds:0xc002ed80
c001c3fc:	83 c4 1c             	add    esp,0x1c
c001c3ff:	c1 e8 04             	shr    eax,0x4
c001c402:	89 04 95 00 ec 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1400],eax
c001c409:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c40d:	31 d2                	xor    edx,edx
c001c40f:	52                   	push   edx
c001c410:	50                   	push   eax
c001c411:	53                   	push   ebx
c001c412:	e8 57 6b ff ff       	call   c0012f6e <File::seek(unsigned long long)>
c001c417:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001c419:	31 d2                	xor    edx,edx
c001c41b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c41e:	56                   	push   esi
c001c41f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c423:	52                   	push   edx
c001c424:	50                   	push   eax
c001c425:	53                   	push   ebx
c001c426:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c429:	83 c4 14             	add    esp,0x14
c001c42c:	53                   	push   ebx
c001c42d:	e8 dc 6a ff ff       	call   c0012f0e <File::close()>
c001c432:	5d                   	pop    ebp
c001c433:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c437:	e8 f8 31 ff ff       	call   c000f634 <free>
c001c43c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c43f:	e8 f0 31 ff ff       	call   c000f634 <free>
c001c444:	a1 80 ed 02 c0       	mov    eax,ds:0xc002ed80
c001c449:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c44d:	8d 50 01             	lea    edx,[eax+0x1]
c001c450:	89 0c 85 00 ed 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1300],ecx
c001c457:	89 34 85 80 ec 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1380],esi
c001c45e:	89 15 80 ed 02 c0    	mov    DWORD PTR ds:0xc002ed80,edx
c001c464:	83 c4 10             	add    esp,0x10
c001c467:	b0 01                	mov    al,0x1
c001c469:	83 c4 5c             	add    esp,0x5c
c001c46c:	5b                   	pop    ebx
c001c46d:	5e                   	pop    esi
c001c46e:	5f                   	pop    edi
c001c46f:	5d                   	pop    ebp
c001c470:	c3                   	ret    

c001c471 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001c471:	55                   	push   ebp
c001c472:	57                   	push   edi
c001c473:	56                   	push   esi
c001c474:	53                   	push   ebx
c001c475:	81 ec 68 03 00 00    	sub    esp,0x368
c001c47b:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001c482:	8b 1d d4 ed 02 c0    	mov    ebx,DWORD PTR ds:0xc002edd4
c001c488:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001c48c:	68 14 01 00 00       	push   0x114
c001c491:	e8 8e 31 ff ff       	call   c000f624 <malloc>
c001c496:	83 c4 0c             	add    esp,0xc
c001c499:	89 c5                	mov    ebp,eax
c001c49b:	53                   	push   ebx
c001c49c:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001c4a3:	50                   	push   eax
c001c4a4:	e8 a3 69 ff ff       	call   c0012e4c <File::File(char const*, Process*)>
c001c4a9:	5e                   	pop    esi
c001c4aa:	5f                   	pop    edi
c001c4ab:	6a 01                	push   0x1
c001c4ad:	55                   	push   ebp
c001c4ae:	e8 fd 69 ff ff       	call   c0012eb0 <File::open(FileOpenMode)>
c001c4b3:	83 c4 10             	add    esp,0x10
c001c4b6:	85 c0                	test   eax,eax
c001c4b8:	0f 85 8d 06 00 00    	jne    c001cb4b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c4be:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001c4c6:	83 ec 0c             	sub    esp,0xc
c001c4c9:	6a 34                	push   0x34
c001c4cb:	e8 54 31 ff ff       	call   c000f624 <malloc>
c001c4d0:	5b                   	pop    ebx
c001c4d1:	89 c7                	mov    edi,eax
c001c4d3:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001c4d7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c4da:	53                   	push   ebx
c001c4db:	57                   	push   edi
c001c4dc:	6a 00                	push   0x0
c001c4de:	6a 34                	push   0x34
c001c4e0:	55                   	push   ebp
c001c4e1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c4e4:	83 c4 20             	add    esp,0x20
c001c4e7:	85 c0                	test   eax,eax
c001c4e9:	0f 85 5c 06 00 00    	jne    c001cb4b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c4ef:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001c4f5:	0f 85 50 06 00 00    	jne    c001cb4b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c4fb:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001c4fe:	85 c0                	test   eax,eax
c001c500:	0f 84 45 06 00 00    	je     c001cb4b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c506:	31 d2                	xor    edx,edx
c001c508:	51                   	push   ecx
c001c509:	52                   	push   edx
c001c50a:	50                   	push   eax
c001c50b:	55                   	push   ebp
c001c50c:	e8 5d 6a ff ff       	call   c0012f6e <File::seek(unsigned long long)>
c001c511:	83 c4 10             	add    esp,0x10
c001c514:	85 c0                	test   eax,eax
c001c516:	0f 85 2f 06 00 00    	jne    c001cb4b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c51c:	83 ec 0c             	sub    esp,0xc
c001c51f:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001c522:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c526:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001c52a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c52e:	0f af c2             	imul   eax,edx
c001c531:	50                   	push   eax
c001c532:	e8 ed 30 ff ff       	call   c000f624 <malloc>
c001c537:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c53a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c53e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c541:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c545:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c549:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c54d:	0f af c2             	imul   eax,edx
c001c550:	99                   	cdq    
c001c551:	52                   	push   edx
c001c552:	50                   	push   eax
c001c553:	55                   	push   ebp
c001c554:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c557:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001c55a:	83 c4 20             	add    esp,0x20
c001c55d:	85 c0                	test   eax,eax
c001c55f:	0f 84 e6 05 00 00    	je     c001cb4b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c565:	52                   	push   edx
c001c566:	31 d2                	xor    edx,edx
c001c568:	52                   	push   edx
c001c569:	50                   	push   eax
c001c56a:	55                   	push   ebp
c001c56b:	e8 fe 69 ff ff       	call   c0012f6e <File::seek(unsigned long long)>
c001c570:	83 c4 10             	add    esp,0x10
c001c573:	85 c0                	test   eax,eax
c001c575:	0f 85 d0 05 00 00    	jne    c001cb4b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c57b:	83 ec 0c             	sub    esp,0xc
c001c57e:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001c582:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001c586:	31 f6                	xor    esi,esi
c001c588:	0f af c2             	imul   eax,edx
c001c58b:	50                   	push   eax
c001c58c:	e8 93 30 ff ff       	call   c000f624 <malloc>
c001c591:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c594:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c598:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c59b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c59f:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001c5a3:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001c5a7:	0f af c2             	imul   eax,edx
c001c5aa:	99                   	cdq    
c001c5ab:	52                   	push   edx
c001c5ac:	50                   	push   eax
c001c5ad:	55                   	push   ebp
c001c5ae:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c5b1:	83 c4 20             	add    esp,0x20
c001c5b4:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001c5b8:	0f 86 8a 00 00 00    	jbe    c001c648 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001c5be:	0f b7 de             	movzx  ebx,si
c001c5c1:	c1 e3 05             	shl    ebx,0x5
c001c5c4:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001c5c8:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001c5cb:	75 75                	jne    c001c642 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001c5cd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001c5d0:	31 d2                	xor    edx,edx
c001c5d2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c5d6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001c5d9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c5dd:	50                   	push   eax
c001c5de:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001c5e1:	52                   	push   edx
c001c5e2:	50                   	push   eax
c001c5e3:	55                   	push   ebp
c001c5e4:	e8 85 69 ff ff       	call   c0012f6e <File::seek(unsigned long long)>
c001c5e9:	83 c4 10             	add    esp,0x10
c001c5ec:	85 c0                	test   eax,eax
c001c5ee:	0f 85 57 05 00 00    	jne    c001cb4b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c5f4:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001c5fb:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c5fe:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001c602:	31 d2                	xor    edx,edx
c001c604:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001c608:	83 ec 0c             	sub    esp,0xc
c001c60b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c60f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c616:	50                   	push   eax
c001c617:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c61b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c61f:	52                   	push   edx
c001c620:	50                   	push   eax
c001c621:	55                   	push   ebp
c001c622:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c625:	83 c4 1c             	add    esp,0x1c
c001c628:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001c62b:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001c62e:	50                   	push   eax
c001c62f:	6a 00                	push   0x0
c001c631:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c635:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001c639:	50                   	push   eax
c001c63a:	e8 85 40 fe ff       	call   c00006c4 <memset>
c001c63f:	83 c4 10             	add    esp,0x10
c001c642:	46                   	inc    esi
c001c643:	e9 6c ff ff ff       	jmp    c001c5b4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001c648:	53                   	push   ebx
c001c649:	31 db                	xor    ebx,ebx
c001c64b:	68 00 01 00 00       	push   0x100
c001c650:	6a 00                	push   0x0
c001c652:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001c656:	50                   	push   eax
c001c657:	e8 68 40 fe ff       	call   c00006c4 <memset>
c001c65c:	83 c4 0c             	add    esp,0xc
c001c65f:	68 00 01 00 00       	push   0x100
c001c664:	6a 00                	push   0x0
c001c666:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001c66d:	50                   	push   eax
c001c66e:	e8 51 40 fe ff       	call   c00006c4 <memset>
c001c673:	83 c4 10             	add    esp,0x10
c001c676:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c67e:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001c686:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001c68e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001c696:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001c69e:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001c6a2:	0f 86 30 01 00 00    	jbe    c001c7d8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001c6a8:	0f b7 f3             	movzx  esi,bx
c001c6ab:	6b f6 28             	imul   esi,esi,0x28
c001c6ae:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001c6b2:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001c6b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c6b9:	52                   	push   edx
c001c6ba:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c6be:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001c6c2:	8b 06                	mov    eax,DWORD PTR [esi]
c001c6c4:	6b d2 28             	imul   edx,edx,0x28
c001c6c7:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001c6cb:	31 d2                	xor    edx,edx
c001c6cd:	52                   	push   edx
c001c6ce:	50                   	push   eax
c001c6cf:	55                   	push   ebp
c001c6d0:	e8 99 68 ff ff       	call   c0012f6e <File::seek(unsigned long long)>
c001c6d5:	83 c4 0c             	add    esp,0xc
c001c6d8:	6a 20                	push   0x20
c001c6da:	6a 00                	push   0x0
c001c6dc:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001c6e3:	51                   	push   ecx
c001c6e4:	e8 db 3f fe ff       	call   c00006c4 <memset>
c001c6e9:	59                   	pop    ecx
c001c6ea:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c6ed:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c6f1:	52                   	push   edx
c001c6f2:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001c6f9:	51                   	push   ecx
c001c6fa:	6a 00                	push   0x0
c001c6fc:	6a 1f                	push   0x1f
c001c6fe:	55                   	push   ebp
c001c6ff:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c702:	83 c4 1c             	add    esp,0x1c
c001c705:	6a 09                	push   0x9
c001c707:	68 6f b4 02 c0       	push   0xc002b46f
c001c70c:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001c713:	51                   	push   ecx
c001c714:	e8 24 3f fe ff       	call   c000063d <memcmp>
c001c719:	83 c4 10             	add    esp,0x10
c001c71c:	85 c0                	test   eax,eax
c001c71e:	75 21                	jne    c001c741 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001c720:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c724:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c728:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001c72c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c730:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c733:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001c73a:	89 d0                	mov    eax,edx
c001c73c:	40                   	inc    eax
c001c73d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c741:	50                   	push   eax
c001c742:	6a 09                	push   0x9
c001c744:	68 79 b4 02 c0       	push   0xc002b479
c001c749:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c750:	50                   	push   eax
c001c751:	e8 e7 3e fe ff       	call   c000063d <memcmp>
c001c756:	83 c4 10             	add    esp,0x10
c001c759:	85 c0                	test   eax,eax
c001c75b:	75 21                	jne    c001c77e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001c75d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c761:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c765:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001c769:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c76d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c770:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001c777:	89 d0                	mov    eax,edx
c001c779:	40                   	inc    eax
c001c77a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c77e:	50                   	push   eax
c001c77f:	50                   	push   eax
c001c780:	68 45 b4 02 c0       	push   0xc002b445
c001c785:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c78c:	50                   	push   eax
c001c78d:	e8 22 40 fe ff       	call   c00007b4 <strcmp>
c001c792:	83 c4 10             	add    esp,0x10
c001c795:	85 c0                	test   eax,eax
c001c797:	75 0f                	jne    c001c7a8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001c799:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c79c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c7a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c7a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c7a8:	50                   	push   eax
c001c7a9:	50                   	push   eax
c001c7aa:	68 4d b4 02 c0       	push   0xc002b44d
c001c7af:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c7b6:	50                   	push   eax
c001c7b7:	e8 f8 3f fe ff       	call   c00007b4 <strcmp>
c001c7bc:	83 c4 10             	add    esp,0x10
c001c7bf:	85 c0                	test   eax,eax
c001c7c1:	75 0f                	jne    c001c7d2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001c7c3:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c7c6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c7ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c7ce:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001c7d2:	43                   	inc    ebx
c001c7d3:	e9 c6 fe ff ff       	jmp    c001c69e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001c7d8:	31 d2                	xor    edx,edx
c001c7da:	50                   	push   eax
c001c7db:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c7df:	52                   	push   edx
c001c7e0:	50                   	push   eax
c001c7e1:	55                   	push   ebp
c001c7e2:	e8 87 67 ff ff       	call   c0012f6e <File::seek(unsigned long long)>
c001c7e7:	58                   	pop    eax
c001c7e8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c7ec:	e8 33 2e ff ff       	call   c000f624 <malloc>
c001c7f1:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c7f4:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001c7f8:	31 d2                	xor    edx,edx
c001c7fa:	58                   	pop    eax
c001c7fb:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001c7ff:	53                   	push   ebx
c001c800:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001c804:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c808:	52                   	push   edx
c001c809:	50                   	push   eax
c001c80a:	55                   	push   ebp
c001c80b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c80e:	83 c4 14             	add    esp,0x14
c001c811:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c815:	e8 0a 2e ff ff       	call   c000f624 <malloc>
c001c81a:	31 d2                	xor    edx,edx
c001c81c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c820:	83 c4 0c             	add    esp,0xc
c001c823:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c827:	52                   	push   edx
c001c828:	50                   	push   eax
c001c829:	55                   	push   ebp
c001c82a:	e8 3f 67 ff ff       	call   c0012f6e <File::seek(unsigned long long)>
c001c82f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c832:	31 d2                	xor    edx,edx
c001c834:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c837:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001c83b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c83f:	52                   	push   edx
c001c840:	50                   	push   eax
c001c841:	55                   	push   ebp
c001c842:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c845:	83 c4 20             	add    esp,0x20
c001c848:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001c850:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001c854:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001c858:	0f 84 f1 02 00 00    	je     c001cb4f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6de>
c001c85e:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001c865:	31 d2                	xor    edx,edx
c001c867:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c86b:	c1 e8 03             	shr    eax,0x3
c001c86e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001c872:	51                   	push   ecx
c001c873:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c877:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001c87b:	52                   	push   edx
c001c87c:	50                   	push   eax
c001c87d:	55                   	push   ebp
c001c87e:	e8 eb 66 ff ff       	call   c0012f6e <File::seek(unsigned long long)>
c001c883:	5b                   	pop    ebx
c001c884:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c888:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001c88f:	e8 90 2d ff ff       	call   c000f624 <malloc>
c001c894:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c897:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c89b:	31 d2                	xor    edx,edx
c001c89d:	5e                   	pop    esi
c001c89e:	8d 44 24 58          	lea    eax,[esp+0x58]
c001c8a2:	50                   	push   eax
c001c8a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c8a7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c8ab:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001c8b2:	52                   	push   edx
c001c8b3:	50                   	push   eax
c001c8b4:	55                   	push   ebp
c001c8b5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c8b8:	83 c4 20             	add    esp,0x20
c001c8bb:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001c8c3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001c8c7:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001c8cb:	0f 8d 62 02 00 00    	jge    c001cb33 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c2>
c001c8d1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001c8d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c8d9:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001c8de:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001c8e1:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001c8e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c8e9:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001c8ed:	89 d8                	mov    eax,ebx
c001c8ef:	c1 e8 08             	shr    eax,0x8
c001c8f2:	89 c6                	mov    esi,eax
c001c8f4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001c8f8:	c1 e6 04             	shl    esi,0x4
c001c8fb:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001c8ff:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001c902:	85 d2                	test   edx,edx
c001c904:	0f 85 bf 00 00 00    	jne    c001c9c9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001c90a:	83 ec 0c             	sub    esp,0xc
c001c90d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c911:	03 06                	add    eax,DWORD PTR [esi]
c001c913:	50                   	push   eax
c001c914:	e8 55 f8 ff ff       	call   c001c16e <Thr::getAddressOfKernelSymbol(char const*)>
c001c919:	83 c4 10             	add    esp,0x10
c001c91c:	89 c2                	mov    edx,eax
c001c91e:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001c923:	85 c0                	test   eax,eax
c001c925:	0f 85 9e 00 00 00    	jne    c001c9c9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001c92b:	83 ec 0c             	sub    esp,0xc
c001c92e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c932:	03 06                	add    eax,DWORD PTR [esi]
c001c934:	50                   	push   eax
c001c935:	e8 a4 19 ff ff       	call   c000e2de <Krnl::resolveCompatibilitySymbol(char*)>
c001c93a:	83 c4 10             	add    esp,0x10
c001c93d:	89 c2                	mov    edx,eax
c001c93f:	85 c0                	test   eax,eax
c001c941:	0f 85 82 00 00 00    	jne    c001c9c9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001c947:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001c94b:	50                   	push   eax
c001c94c:	50                   	push   eax
c001c94d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c951:	03 06                	add    eax,DWORD PTR [esi]
c001c953:	50                   	push   eax
c001c954:	68 83 b4 02 c0       	push   0xc002b483
c001c959:	e8 95 5f ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001c95e:	58                   	pop    eax
c001c95f:	5a                   	pop    edx
c001c960:	68 9d b4 02 c0       	push   0xc002b49d
c001c965:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c96c:	50                   	push   eax
c001c96d:	e8 f1 3d fe ff       	call   c0000763 <strcpy>
c001c972:	59                   	pop    ecx
c001c973:	58                   	pop    eax
c001c974:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c978:	03 06                	add    eax,DWORD PTR [esi]
c001c97a:	50                   	push   eax
c001c97b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c982:	50                   	push   eax
c001c983:	e8 92 3e fe ff       	call   c000081a <strcat>
c001c988:	58                   	pop    eax
c001c989:	5a                   	pop    edx
c001c98a:	68 33 b5 02 c0       	push   0xc002b533
c001c98f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c996:	50                   	push   eax
c001c997:	e8 7e 3e fe ff       	call   c000081a <strcat>
c001c99c:	83 c4 10             	add    esp,0x10
c001c99f:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001c9a4:	0f 84 43 01 00 00    	je     c001caed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001c9aa:	83 ec 0c             	sub    esp,0xc
c001c9ad:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c9b4:	50                   	push   eax
c001c9b5:	e8 93 d2 ff ff       	call   c0019c4d <Krnl::panic(char const*)>
c001c9ba:	83 c4 10             	add    esp,0x10
c001c9bd:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001c9c1:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001c9c5:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001c9c9:	80 fb 01             	cmp    bl,0x1
c001c9cc:	75 7d                	jne    c001ca4b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5da>
c001c9ce:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001c9d5:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c9d9:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001c9dd:	01 ce                	add    esi,ecx
c001c9df:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001c9e5:	0f 94 c0             	sete   al
c001c9e8:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001c9ee:	0f 94 c3             	sete   bl
c001c9f1:	09 c3                	or     ebx,eax
c001c9f3:	8b 06                	mov    eax,DWORD PTR [esi]
c001c9f5:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001c9fa:	74 36                	je     c001ca32 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c1>
c001c9fc:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001c9ff:	84 db                	test   bl,bl
c001ca01:	75 0a                	jne    c001ca0d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x59c>
c001ca03:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ca07:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001ca0b:	76 37                	jbe    c001ca44 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001ca0d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001ca11:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001ca16:	0f 84 d1 00 00 00    	je     c001caed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001ca1c:	83 ec 0c             	sub    esp,0xc
c001ca1f:	68 b4 b4 02 c0       	push   0xc002b4b4
c001ca24:	e8 24 d2 ff ff       	call   c0019c4d <Krnl::panic(char const*)>
c001ca29:	83 c4 10             	add    esp,0x10
c001ca2c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001ca30:	eb 12                	jmp    c001ca44 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001ca32:	01 c1                	add    ecx,eax
c001ca34:	84 db                	test   bl,bl
c001ca36:	75 0c                	jne    c001ca44 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001ca38:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ca3c:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001ca40:	77 02                	ja     c001ca44 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001ca42:	01 d1                	add    ecx,edx
c001ca44:	89 0e                	mov    DWORD PTR [esi],ecx
c001ca46:	e9 df 00 00 00       	jmp    c001cb2a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001ca4b:	80 fb 02             	cmp    bl,0x2
c001ca4e:	75 71                	jne    c001cac1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x650>
c001ca50:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001ca57:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001ca5b:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001ca5f:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001ca65:	74 15                	je     c001ca7c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001ca67:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001ca6d:	74 0d                	je     c001ca7c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001ca6f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ca73:	83 e8 04             	sub    eax,0x4
c001ca76:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001ca7a:	76 1f                	jbe    c001ca9b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62a>
c001ca7c:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001ca80:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001ca85:	74 66                	je     c001caed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001ca87:	83 ec 0c             	sub    esp,0xc
c001ca8a:	68 d0 b4 02 c0       	push   0xc002b4d0
c001ca8f:	e8 b9 d1 ff ff       	call   c0019c4d <Krnl::panic(char const*)>
c001ca94:	83 c4 10             	add    esp,0x10
c001ca97:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ca9b:	8b 06                	mov    eax,DWORD PTR [esi]
c001ca9d:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001caa2:	74 13                	je     c001cab7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x646>
c001caa4:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001caa8:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001caaf:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001cab3:	01 c8                	add    eax,ecx
c001cab5:	eb 04                	jmp    c001cabb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c001cab7:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001cabb:	01 c2                	add    edx,eax
c001cabd:	89 16                	mov    DWORD PTR [esi],edx
c001cabf:	eb 69                	jmp    c001cb2a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001cac1:	0f b6 db             	movzx  ebx,bl
c001cac4:	50                   	push   eax
c001cac5:	50                   	push   eax
c001cac6:	53                   	push   ebx
c001cac7:	68 ec b4 02 c0       	push   0xc002b4ec
c001cacc:	e8 22 5e ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001cad1:	83 c4 10             	add    esp,0x10
c001cad4:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cad9:	74 12                	je     c001caed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001cadb:	83 ec 0c             	sub    esp,0xc
c001cade:	68 f7 b4 02 c0       	push   0xc002b4f7
c001cae3:	e8 65 d1 ff ff       	call   c0019c4d <Krnl::panic(char const*)>
c001cae8:	83 c4 10             	add    esp,0x10
c001caeb:	eb 3d                	jmp    c001cb2a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001caed:	83 ec 0c             	sub    esp,0xc
c001caf0:	55                   	push   ebp
c001caf1:	e8 18 64 ff ff       	call   c0012f0e <File::close()>
c001caf6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001caf9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cafc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001caff:	59                   	pop    ecx
c001cb00:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cb04:	e8 2b 2b ff ff       	call   c000f634 <free>
c001cb09:	5b                   	pop    ebx
c001cb0a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cb0e:	e8 21 2b ff ff       	call   c000f634 <free>
c001cb13:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cb16:	e8 19 2b ff ff       	call   c000f634 <free>
c001cb1b:	5e                   	pop    esi
c001cb1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb20:	e8 0f 2b ff ff       	call   c000f634 <free>
c001cb25:	83 c4 10             	add    esp,0x10
c001cb28:	eb 21                	jmp    c001cb4b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cb2a:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001cb2e:	e9 90 fd ff ff       	jmp    c001c8c3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001cb33:	83 ec 0c             	sub    esp,0xc
c001cb36:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cb3a:	e8 f5 2a ff ff       	call   c000f634 <free>
c001cb3f:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001cb43:	83 c4 10             	add    esp,0x10
c001cb46:	e9 05 fd ff ff       	jmp    c001c850 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001cb4b:	31 c0                	xor    eax,eax
c001cb4d:	eb 33                	jmp    c001cb82 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x711>
c001cb4f:	83 ec 0c             	sub    esp,0xc
c001cb52:	55                   	push   ebp
c001cb53:	e8 b6 63 ff ff       	call   c0012f0e <File::close()>
c001cb58:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cb5b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cb5e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001cb61:	58                   	pop    eax
c001cb62:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cb66:	e8 c9 2a ff ff       	call   c000f634 <free>
c001cb6b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cb6e:	e8 c1 2a ff ff       	call   c000f634 <free>
c001cb73:	5a                   	pop    edx
c001cb74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb78:	e8 b7 2a ff ff       	call   c000f634 <free>
c001cb7d:	83 c4 10             	add    esp,0x10
c001cb80:	b0 01                	mov    al,0x1
c001cb82:	81 c4 5c 03 00 00    	add    esp,0x35c
c001cb88:	5b                   	pop    ebx
c001cb89:	5e                   	pop    esi
c001cb8a:	5f                   	pop    edi
c001cb8b:	5d                   	pop    ebp
c001cb8c:	c3                   	ret    

c001cb8d <Thr::getDriverBaseFromAddress(unsigned long)>:
c001cb8d:	56                   	push   esi
c001cb8e:	31 d2                	xor    edx,edx
c001cb90:	53                   	push   ebx
c001cb91:	8b 1d e0 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e5e0
c001cb97:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cb9b:	39 d3                	cmp    ebx,edx
c001cb9d:	7e 1b                	jle    c001cbba <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001cb9f:	8b 04 95 00 e8 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1800]
c001cba6:	39 c8                	cmp    eax,ecx
c001cba8:	77 0d                	ja     c001cbb7 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001cbaa:	8b 34 95 00 e6 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd1a00]
c001cbb1:	01 c6                	add    esi,eax
c001cbb3:	39 ce                	cmp    esi,ecx
c001cbb5:	77 05                	ja     c001cbbc <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001cbb7:	42                   	inc    edx
c001cbb8:	eb e1                	jmp    c001cb9b <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001cbba:	31 c0                	xor    eax,eax
c001cbbc:	5b                   	pop    ebx
c001cbbd:	5e                   	pop    esi
c001cbbe:	c3                   	ret    

c001cbbf <Thr::getDriverNameFromAddress(unsigned long)>:
c001cbbf:	53                   	push   ebx
c001cbc0:	31 c0                	xor    eax,eax
c001cbc2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001cbc6:	8b 1d e0 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e5e0
c001cbcc:	39 c3                	cmp    ebx,eax
c001cbce:	7e 22                	jle    c001cbf2 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001cbd0:	8b 14 85 00 e8 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1800]
c001cbd7:	39 ca                	cmp    edx,ecx
c001cbd9:	77 14                	ja     c001cbef <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001cbdb:	03 14 85 00 e6 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd1a00]
c001cbe2:	39 ca                	cmp    edx,ecx
c001cbe4:	76 09                	jbe    c001cbef <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001cbe6:	8b 04 85 00 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1600]
c001cbed:	eb 05                	jmp    c001cbf4 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001cbef:	40                   	inc    eax
c001cbf0:	eb da                	jmp    c001cbcc <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001cbf2:	31 c0                	xor    eax,eax
c001cbf4:	5b                   	pop    ebx
c001cbf5:	c3                   	ret    

c001cbf6 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001cbf6:	53                   	push   ebx
c001cbf7:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001cbfb:	53                   	push   ebx
c001cbfc:	e8 8c ff ff ff       	call   c001cb8d <Thr::getDriverBaseFromAddress(unsigned long)>
c001cc01:	5a                   	pop    edx
c001cc02:	31 d2                	xor    edx,edx
c001cc04:	85 c0                	test   eax,eax
c001cc06:	74 04                	je     c001cc0c <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001cc08:	89 da                	mov    edx,ebx
c001cc0a:	29 c2                	sub    edx,eax
c001cc0c:	89 d0                	mov    eax,edx
c001cc0e:	5b                   	pop    ebx
c001cc0f:	c3                   	ret    

c001cc10 <Thr::loadDLL(char const*, bool)>:
c001cc10:	55                   	push   ebp
c001cc11:	57                   	push   edi
c001cc12:	56                   	push   esi
c001cc13:	53                   	push   ebx
c001cc14:	81 ec 34 01 00 00    	sub    esp,0x134
c001cc1a:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001cc21:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001cc28:	56                   	push   esi
c001cc29:	68 0f b5 02 c0       	push   0xc002b50f
c001cc2e:	e8 c0 5c ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001cc33:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001cc3a:	e8 e5 29 ff ff       	call   c000f624 <malloc>
c001cc3f:	83 c4 0c             	add    esp,0xc
c001cc42:	89 c3                	mov    ebx,eax
c001cc44:	ff 35 d4 ed 02 c0    	push   DWORD PTR ds:0xc002edd4
c001cc4a:	56                   	push   esi
c001cc4b:	50                   	push   eax
c001cc4c:	e8 fb 61 ff ff       	call   c0012e4c <File::File(char const*, Process*)>
c001cc51:	83 c4 10             	add    esp,0x10
c001cc54:	85 db                	test   ebx,ebx
c001cc56:	75 3c                	jne    c001cc94 <Thr::loadDLL(char const*, bool)+0x84>
c001cc58:	89 e8                	mov    eax,ebp
c001cc5a:	84 c0                	test   al,al
c001cc5c:	0f 84 b0 01 00 00    	je     c001ce12 <Thr::loadDLL(char const*, bool)+0x202>
c001cc62:	50                   	push   eax
c001cc63:	50                   	push   eax
c001cc64:	68 20 b5 02 c0       	push   0xc002b520
c001cc69:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001cc6d:	57                   	push   edi
c001cc6e:	e8 f0 3a fe ff       	call   c0000763 <strcpy>
c001cc73:	58                   	pop    eax
c001cc74:	5a                   	pop    edx
c001cc75:	56                   	push   esi
c001cc76:	57                   	push   edi
c001cc77:	e8 9e 3b fe ff       	call   c000081a <strcat>
c001cc7c:	59                   	pop    ecx
c001cc7d:	58                   	pop    eax
c001cc7e:	68 33 b5 02 c0       	push   0xc002b533
c001cc83:	57                   	push   edi
c001cc84:	e8 91 3b fe ff       	call   c000081a <strcat>
c001cc89:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cc8c:	e8 bc cf ff ff       	call   c0019c4d <Krnl::panic(char const*)>
c001cc91:	83 c4 10             	add    esp,0x10
c001cc94:	50                   	push   eax
c001cc95:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001cc99:	50                   	push   eax
c001cc9a:	8d 44 24 20          	lea    eax,[esp+0x20]
c001cc9e:	50                   	push   eax
c001cc9f:	53                   	push   ebx
c001cca0:	e8 b7 64 ff ff       	call   c001315c <File::stat(unsigned long long*, bool*)>
c001cca5:	83 c4 10             	add    esp,0x10
c001cca8:	85 db                	test   ebx,ebx
c001ccaa:	74 0c                	je     c001ccb8 <Thr::loadDLL(char const*, bool)+0xa8>
c001ccac:	83 ec 0c             	sub    esp,0xc
c001ccaf:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ccb1:	53                   	push   ebx
c001ccb2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ccb5:	83 c4 10             	add    esp,0x10
c001ccb8:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001ccbd:	75 0a                	jne    c001ccc9 <Thr::loadDLL(char const*, bool)+0xb9>
c001ccbf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ccc3:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001ccc7:	75 3c                	jne    c001cd05 <Thr::loadDLL(char const*, bool)+0xf5>
c001ccc9:	89 e8                	mov    eax,ebp
c001cccb:	84 c0                	test   al,al
c001cccd:	0f 84 3d 01 00 00    	je     c001ce10 <Thr::loadDLL(char const*, bool)+0x200>
c001ccd3:	50                   	push   eax
c001ccd4:	50                   	push   eax
c001ccd5:	68 20 b5 02 c0       	push   0xc002b520
c001ccda:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001ccde:	53                   	push   ebx
c001ccdf:	e8 7f 3a fe ff       	call   c0000763 <strcpy>
c001cce4:	58                   	pop    eax
c001cce5:	5a                   	pop    edx
c001cce6:	56                   	push   esi
c001cce7:	53                   	push   ebx
c001cce8:	e8 2d 3b fe ff       	call   c000081a <strcat>
c001cced:	59                   	pop    ecx
c001ccee:	5f                   	pop    edi
c001ccef:	68 33 b5 02 c0       	push   0xc002b533
c001ccf4:	53                   	push   ebx
c001ccf5:	e8 20 3b fe ff       	call   c000081a <strcat>
c001ccfa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ccfd:	e8 4b cf ff ff       	call   c0019c4d <Krnl::panic(char const*)>
c001cd02:	83 c4 10             	add    esp,0x10
c001cd05:	e8 89 4d ff ff       	call   c0011a93 <Virt::getAKernelVAS()>
c001cd0a:	51                   	push   ecx
c001cd0b:	6a 03                	push   0x3
c001cd0d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001cd11:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001cd15:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001cd1b:	83 d3 00             	adc    ebx,0x0
c001cd1e:	89 ca                	mov    edx,ecx
c001cd20:	89 d1                	mov    ecx,edx
c001cd22:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001cd26:	51                   	push   ecx
c001cd27:	50                   	push   eax
c001cd28:	e8 a1 53 ff ff       	call   c00120ce <VAS::allocatePages(int, int)>
c001cd2d:	89 34 24             	mov    DWORD PTR [esp],esi
c001cd30:	89 c3                	mov    ebx,eax
c001cd32:	e8 aa 39 fe ff       	call   c00006e1 <strlen>
c001cd37:	8b 3d e0 e5 02 c0    	mov    edi,DWORD PTR ds:0xc002e5e0
c001cd3d:	40                   	inc    eax
c001cd3e:	89 04 24             	mov    DWORD PTR [esp],eax
c001cd41:	e8 de 28 ff ff       	call   c000f624 <malloc>
c001cd46:	89 04 bd 00 ea 02 c0 	mov    DWORD PTR [edi*4-0x3ffd1600],eax
c001cd4d:	5f                   	pop    edi
c001cd4e:	58                   	pop    eax
c001cd4f:	a1 e0 e5 02 c0       	mov    eax,ds:0xc002e5e0
c001cd54:	56                   	push   esi
c001cd55:	ff 34 85 00 ea 02 c0 	push   DWORD PTR [eax*4-0x3ffd1600]
c001cd5c:	e8 02 3a fe ff       	call   c0000763 <strcpy>
c001cd61:	a1 e0 e5 02 c0       	mov    eax,ds:0xc002e5e0
c001cd66:	8d 50 01             	lea    edx,[eax+0x1]
c001cd69:	89 1c 85 00 e8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1800],ebx
c001cd70:	89 15 e0 e5 02 c0    	mov    DWORD PTR ds:0xc002e5e0,edx
c001cd76:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cd7a:	83 c4 0c             	add    esp,0xc
c001cd7d:	89 14 85 00 e6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1a00],edx
c001cd84:	6a 01                	push   0x1
c001cd86:	53                   	push   ebx
c001cd87:	56                   	push   esi
c001cd88:	e8 e4 f6 ff ff       	call   c001c471 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001cd8d:	83 c4 10             	add    esp,0x10
c001cd90:	89 c7                	mov    edi,eax
c001cd92:	fe c8                	dec    al
c001cd94:	74 16                	je     c001cdac <Thr::loadDLL(char const*, bool)+0x19c>
c001cd96:	89 e8                	mov    eax,ebp
c001cd98:	84 c0                	test   al,al
c001cd9a:	74 10                	je     c001cdac <Thr::loadDLL(char const*, bool)+0x19c>
c001cd9c:	83 ec 0c             	sub    esp,0xc
c001cd9f:	68 35 b5 02 c0       	push   0xc002b535
c001cda4:	e8 a4 ce ff ff       	call   c0019c4d <Krnl::panic(char const*)>
c001cda9:	83 c4 10             	add    esp,0x10
c001cdac:	31 f6                	xor    esi,esi
c001cdae:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cdb2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cdb6:	05 ff 0f 00 00       	add    eax,0xfff
c001cdbb:	83 d2 00             	adc    edx,0x0
c001cdbe:	0f ac d0 0c          	shrd   eax,edx,0xc
c001cdc2:	c1 ea 0c             	shr    edx,0xc
c001cdc5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cdc9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001cdcd:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001cdd1:	ba 00 00 00 00       	mov    edx,0x0
c001cdd6:	89 d0                	mov    eax,edx
c001cdd8:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001cddc:	73 2c                	jae    c001ce0a <Thr::loadDLL(char const*, bool)+0x1fa>
c001cdde:	e8 b0 4c ff ff       	call   c0011a93 <Virt::getAKernelVAS()>
c001cde3:	89 f5                	mov    ebp,esi
c001cde5:	c1 e5 0c             	shl    ebp,0xc
c001cde8:	52                   	push   edx
c001cde9:	01 dd                	add    ebp,ebx
c001cdeb:	52                   	push   edx
c001cdec:	55                   	push   ebp
c001cded:	50                   	push   eax
c001cdee:	e8 55 4e ff ff       	call   c0011c48 <VAS::getPageTableEntry(unsigned long)>
c001cdf3:	83 c4 10             	add    esp,0x10
c001cdf6:	f6 00 60             	test   BYTE PTR [eax],0x60
c001cdf9:	75 0c                	jne    c001ce07 <Thr::loadDLL(char const*, bool)+0x1f7>
c001cdfb:	83 ec 0c             	sub    esp,0xc
c001cdfe:	55                   	push   ebp
c001cdff:	e8 33 2e ff ff       	call   c000fc37 <Phys::freePage(unsigned long)>
c001ce04:	83 c4 10             	add    esp,0x10
c001ce07:	46                   	inc    esi
c001ce08:	eb a4                	jmp    c001cdae <Thr::loadDLL(char const*, bool)+0x19e>
c001ce0a:	89 f8                	mov    eax,edi
c001ce0c:	84 c0                	test   al,al
c001ce0e:	75 02                	jne    c001ce12 <Thr::loadDLL(char const*, bool)+0x202>
c001ce10:	31 db                	xor    ebx,ebx
c001ce12:	81 c4 2c 01 00 00    	add    esp,0x12c
c001ce18:	89 d8                	mov    eax,ebx
c001ce1a:	5b                   	pop    ebx
c001ce1b:	5e                   	pop    esi
c001ce1c:	5f                   	pop    edi
c001ce1d:	5d                   	pop    ebp
c001ce1e:	c3                   	ret    

c001ce1f <Thr::executeDLL(unsigned long, void*)>:
c001ce1f:	56                   	push   esi
c001ce20:	53                   	push   ebx
c001ce21:	51                   	push   ecx
c001ce22:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ce26:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001ce2a:	85 db                	test   ebx,ebx
c001ce2c:	75 10                	jne    c001ce3e <Thr::executeDLL(unsigned long, void*)+0x1f>
c001ce2e:	83 ec 0c             	sub    esp,0xc
c001ce31:	68 54 b5 02 c0       	push   0xc002b554
c001ce36:	e8 12 ce ff ff       	call   c0019c4d <Krnl::panic(char const*)>
c001ce3b:	83 c4 10             	add    esp,0x10
c001ce3e:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001ce42:	89 d8                	mov    eax,ebx
c001ce44:	5a                   	pop    edx
c001ce45:	5b                   	pop    ebx
c001ce46:	5e                   	pop    esi
c001ce47:	ff e0                	jmp    eax
c001ce49:	90                   	nop

c001ce4a <changeTSS>:
c001ce4a:	83 ec 14             	sub    esp,0x14
c001ce4d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ce52:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001ce55:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001ce5a:	c1 e2 15             	shl    edx,0x15
c001ce5d:	29 d0                	sub    eax,edx
c001ce5f:	50                   	push   eax
c001ce60:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c001ce65:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ce6b:	05 7c 11 00 00       	add    eax,0x117c
c001ce70:	50                   	push   eax
c001ce71:	e8 cc 43 ff ff       	call   c0011242 <TSS::setESP(unsigned long)>
c001ce76:	83 c4 1c             	add    esp,0x1c
c001ce79:	c3                   	ret    

c001ce7a <Process::addArgs(char**)>:
c001ce7a:	57                   	push   edi
c001ce7b:	56                   	push   esi
c001ce7c:	53                   	push   ebx
c001ce7d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ce81:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001ce85:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001ce8f:	85 ff                	test   edi,edi
c001ce91:	74 3d                	je     c001ced0 <Process::addArgs(char**)+0x56>
c001ce93:	8b 07                	mov    eax,DWORD PTR [edi]
c001ce95:	85 c0                	test   eax,eax
c001ce97:	74 37                	je     c001ced0 <Process::addArgs(char**)+0x56>
c001ce99:	31 db                	xor    ebx,ebx
c001ce9b:	83 ec 0c             	sub    esp,0xc
c001ce9e:	50                   	push   eax
c001ce9f:	e8 3d 38 fe ff       	call   c00006e1 <strlen>
c001cea4:	40                   	inc    eax
c001cea5:	89 04 24             	mov    DWORD PTR [esp],eax
c001cea8:	e8 77 27 ff ff       	call   c000f624 <malloc>
c001cead:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001ceb4:	5a                   	pop    edx
c001ceb5:	59                   	pop    ecx
c001ceb6:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001ceb9:	43                   	inc    ebx
c001ceba:	50                   	push   eax
c001cebb:	e8 a3 38 fe ff       	call   c0000763 <strcpy>
c001cec0:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001cec6:	83 c4 10             	add    esp,0x10
c001cec9:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001cecc:	85 c0                	test   eax,eax
c001cece:	75 cb                	jne    c001ce9b <Process::addArgs(char**)+0x21>
c001ced0:	5b                   	pop    ebx
c001ced1:	5e                   	pop    esi
c001ced2:	5f                   	pop    edi
c001ced3:	c3                   	ret    

c001ced4 <Process::Process(char const*, Process*, char**)>:
c001ced4:	56                   	push   esi
c001ced5:	53                   	push   ebx
c001ced6:	83 ec 14             	sub    esp,0x14
c001ced9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cedd:	05 0c 02 00 00       	add    eax,0x20c
c001cee2:	bb 07 00 00 00       	mov    ebx,0x7
c001cee7:	89 c6                	mov    esi,eax
c001cee9:	85 db                	test   ebx,ebx
c001ceeb:	78 12                	js     c001ceff <Process::Process(char const*, Process*, char**)+0x2b>
c001ceed:	83 ec 0c             	sub    esp,0xc
c001cef0:	56                   	push   esi
c001cef1:	e8 0c b3 00 00       	call   c0028202 <ThreadControlBlock::ThreadControlBlock()>
c001cef6:	83 c4 10             	add    esp,0x10
c001cef9:	83 c6 63             	add    esi,0x63
c001cefc:	4b                   	dec    ebx
c001cefd:	eb ea                	jmp    c001cee9 <Process::Process(char const*, Process*, char**)+0x15>
c001ceff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf03:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001cf0a:	83 ec 0c             	sub    esp,0xc
c001cf0d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cf11:	e8 88 cb ff ff       	call   c0019a9e <Krnl::newProcessEnv(Process*)>
c001cf16:	83 c4 10             	add    esp,0x10
c001cf19:	89 c2                	mov    edx,eax
c001cf1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf1f:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001cf25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf29:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001cf32:	a1 10 ce 02 c0       	mov    eax,ds:0xc002ce10
c001cf37:	8d 50 01             	lea    edx,[eax+0x1]
c001cf3a:	89 15 10 ce 02 c0    	mov    DWORD PTR ds:0xc002ce10,edx
c001cf40:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001cf44:	89 02                	mov    DWORD PTR [edx],eax
c001cf46:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c001cf4e:	83 ec 0c             	sub    esp,0xc
c001cf51:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cf55:	e8 ca 26 ff ff       	call   c000f624 <malloc>
c001cf5a:	83 c4 10             	add    esp,0x10
c001cf5d:	89 c3                	mov    ebx,eax
c001cf5f:	83 ec 08             	sub    esp,0x8
c001cf62:	6a 00                	push   0x0
c001cf64:	53                   	push   ebx
c001cf65:	e8 0c 55 ff ff       	call   c0012476 <VAS::VAS(bool)>
c001cf6a:	83 c4 10             	add    esp,0x10
c001cf6d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf71:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001cf77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf7b:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001cf85:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf89:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cf8d:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001cf93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf97:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001cf9d:	85 c0                	test   eax,eax
c001cf9f:	74 42                	je     c001cfe3 <Process::Process(char const*, Process*, char**)+0x10f>
c001cfa1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cfa5:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001cfab:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001cfb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cfb5:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001cfbb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cfbf:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001cfc5:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001cfcb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cfcf:	05 0c 01 00 00       	add    eax,0x10c
c001cfd4:	83 ec 08             	sub    esp,0x8
c001cfd7:	52                   	push   edx
c001cfd8:	50                   	push   eax
c001cfd9:	e8 85 37 fe ff       	call   c0000763 <strcpy>
c001cfde:	83 c4 10             	add    esp,0x10
c001cfe1:	eb 63                	jmp    c001d046 <Process::Process(char const*, Process*, char**)+0x172>
c001cfe3:	c7 44 24 04 60 12 00 00 	mov    DWORD PTR [esp+0x4],0x1260
c001cfeb:	83 ec 0c             	sub    esp,0xc
c001cfee:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001cff2:	e8 2d 26 ff ff       	call   c000f624 <malloc>
c001cff7:	83 c4 10             	add    esp,0x10
c001cffa:	89 c3                	mov    ebx,eax
c001cffc:	83 ec 08             	sub    esp,0x8
c001cfff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d003:	53                   	push   ebx
c001d004:	e8 37 3f ff ff       	call   c0010f40 <VgaText::VgaText(char const*)>
c001d009:	83 c4 10             	add    esp,0x10
c001d00c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d010:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001d016:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d01a:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d020:	83 ec 0c             	sub    esp,0xc
c001d023:	50                   	push   eax
c001d024:	e8 0a 33 ff ff       	call   c0010333 <addToTerminalCycle(VgaText*)>
c001d029:	83 c4 10             	add    esp,0x10
c001d02c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d030:	05 0c 01 00 00       	add    eax,0x10c
c001d035:	83 ec 08             	sub    esp,0x8
c001d038:	68 7e b5 02 c0       	push   0xc002b57e
c001d03d:	50                   	push   eax
c001d03e:	e8 20 37 fe ff       	call   c0000763 <strcpy>
c001d043:	83 c4 10             	add    esp,0x10
c001d046:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d04a:	83 c0 0c             	add    eax,0xc
c001d04d:	83 ec 08             	sub    esp,0x8
c001d050:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d054:	50                   	push   eax
c001d055:	e8 09 37 fe ff       	call   c0000763 <strcpy>
c001d05a:	83 c4 10             	add    esp,0x10
c001d05d:	83 ec 08             	sub    esp,0x8
c001d060:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001d064:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d068:	e8 0d fe ff ff       	call   c001ce7a <Process::addArgs(char**)>
c001d06d:	83 c4 10             	add    esp,0x10
c001d070:	83 ec 08             	sub    esp,0x8
c001d073:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d077:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d07b:	e8 c5 ee ff ff       	call   c001bf45 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001d080:	83 c4 10             	add    esp,0x10
c001d083:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d087:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d08b:	83 f0 01             	xor    eax,0x1
c001d08e:	88 c2                	mov    dl,al
c001d090:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d094:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001d09a:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001d09f:	83 ec 08             	sub    esp,0x8
c001d0a2:	50                   	push   eax
c001d0a3:	68 7c b6 02 c0       	push   0xc002b67c
c001d0a8:	e8 46 58 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001d0ad:	83 c4 10             	add    esp,0x10
c001d0b0:	90                   	nop
c001d0b1:	83 c4 14             	add    esp,0x14
c001d0b4:	5b                   	pop    ebx
c001d0b5:	5e                   	pop    esi
c001d0b6:	c3                   	ret    
c001d0b7:	90                   	nop

c001d0b8 <Process::Process(bool, char const*, Process*, char**)>:
c001d0b8:	56                   	push   esi
c001d0b9:	53                   	push   ebx
c001d0ba:	83 ec 24             	sub    esp,0x24
c001d0bd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d0c1:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d0c5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d0c9:	05 0c 02 00 00       	add    eax,0x20c
c001d0ce:	bb 07 00 00 00       	mov    ebx,0x7
c001d0d3:	89 c6                	mov    esi,eax
c001d0d5:	85 db                	test   ebx,ebx
c001d0d7:	78 12                	js     c001d0eb <Process::Process(bool, char const*, Process*, char**)+0x33>
c001d0d9:	83 ec 0c             	sub    esp,0xc
c001d0dc:	56                   	push   esi
c001d0dd:	e8 20 b1 00 00       	call   c0028202 <ThreadControlBlock::ThreadControlBlock()>
c001d0e2:	83 c4 10             	add    esp,0x10
c001d0e5:	83 c6 63             	add    esi,0x63
c001d0e8:	4b                   	dec    ebx
c001d0e9:	eb ea                	jmp    c001d0d5 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001d0eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d0ef:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d0f6:	83 ec 0c             	sub    esp,0xc
c001d0f9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d0fd:	e8 9c c9 ff ff       	call   c0019a9e <Krnl::newProcessEnv(Process*)>
c001d102:	83 c4 10             	add    esp,0x10
c001d105:	89 c2                	mov    edx,eax
c001d107:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d10b:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d111:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d115:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d11e:	a1 10 ce 02 c0       	mov    eax,ds:0xc002ce10
c001d123:	8d 50 01             	lea    edx,[eax+0x1]
c001d126:	89 15 10 ce 02 c0    	mov    DWORD PTR ds:0xc002ce10,edx
c001d12c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d130:	89 02                	mov    DWORD PTR [edx],eax
c001d132:	c7 44 24 1c 10 00 00 00 	mov    DWORD PTR [esp+0x1c],0x10
c001d13a:	83 ec 0c             	sub    esp,0xc
c001d13d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d141:	e8 de 24 ff ff       	call   c000f624 <malloc>
c001d146:	83 c4 10             	add    esp,0x10
c001d149:	89 c3                	mov    ebx,eax
c001d14b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d150:	83 ec 08             	sub    esp,0x8
c001d153:	50                   	push   eax
c001d154:	53                   	push   ebx
c001d155:	e8 1c 53 ff ff       	call   c0012476 <VAS::VAS(bool)>
c001d15a:	83 c4 10             	add    esp,0x10
c001d15d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d161:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d167:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d16b:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d175:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d179:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d17d:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d183:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d187:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d18d:	85 c0                	test   eax,eax
c001d18f:	74 42                	je     c001d1d3 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001d191:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d195:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d19b:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d1a1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d1a5:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d1ab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d1af:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d1b5:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d1bb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d1bf:	05 0c 01 00 00       	add    eax,0x10c
c001d1c4:	83 ec 08             	sub    esp,0x8
c001d1c7:	52                   	push   edx
c001d1c8:	50                   	push   eax
c001d1c9:	e8 95 35 fe ff       	call   c0000763 <strcpy>
c001d1ce:	83 c4 10             	add    esp,0x10
c001d1d1:	eb 63                	jmp    c001d236 <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001d1d3:	c7 44 24 18 60 12 00 00 	mov    DWORD PTR [esp+0x18],0x1260
c001d1db:	83 ec 0c             	sub    esp,0xc
c001d1de:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001d1e2:	e8 3d 24 ff ff       	call   c000f624 <malloc>
c001d1e7:	83 c4 10             	add    esp,0x10
c001d1ea:	89 c3                	mov    ebx,eax
c001d1ec:	83 ec 08             	sub    esp,0x8
c001d1ef:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d1f3:	53                   	push   ebx
c001d1f4:	e8 47 3d ff ff       	call   c0010f40 <VgaText::VgaText(char const*)>
c001d1f9:	83 c4 10             	add    esp,0x10
c001d1fc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d200:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001d206:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d20a:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d210:	83 ec 0c             	sub    esp,0xc
c001d213:	50                   	push   eax
c001d214:	e8 1a 31 ff ff       	call   c0010333 <addToTerminalCycle(VgaText*)>
c001d219:	83 c4 10             	add    esp,0x10
c001d21c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d220:	05 0c 01 00 00       	add    eax,0x10c
c001d225:	83 ec 08             	sub    esp,0x8
c001d228:	68 7e b5 02 c0       	push   0xc002b57e
c001d22d:	50                   	push   eax
c001d22e:	e8 30 35 fe ff       	call   c0000763 <strcpy>
c001d233:	83 c4 10             	add    esp,0x10
c001d236:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d23a:	83 c0 0c             	add    eax,0xc
c001d23d:	83 ec 08             	sub    esp,0x8
c001d240:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d244:	50                   	push   eax
c001d245:	e8 19 35 fe ff       	call   c0000763 <strcpy>
c001d24a:	83 c4 10             	add    esp,0x10
c001d24d:	83 ec 08             	sub    esp,0x8
c001d250:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001d254:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d258:	e8 1d fc ff ff       	call   c001ce7a <Process::addArgs(char**)>
c001d25d:	83 c4 10             	add    esp,0x10
c001d260:	90                   	nop
c001d261:	83 c4 24             	add    esp,0x24
c001d264:	5b                   	pop    ebx
c001d265:	5e                   	pop    esi
c001d266:	c3                   	ret    

c001d267 <disableIRQs()>:
c001d267:	fa                   	cli    
c001d268:	ff 05 ac ed 02 c0    	inc    DWORD PTR ds:0xc002edac
c001d26e:	c3                   	ret    

c001d26f <getIRQNestingLevel()>:
c001d26f:	a1 ac ed 02 c0       	mov    eax,ds:0xc002edac
c001d274:	c3                   	ret    

c001d275 <enableIRQs()>:
c001d275:	a1 ac ed 02 c0       	mov    eax,ds:0xc002edac
c001d27a:	48                   	dec    eax
c001d27b:	a3 ac ed 02 c0       	mov    ds:0xc002edac,eax
c001d280:	75 01                	jne    c001d283 <enableIRQs()+0xe>
c001d282:	fb                   	sti    
c001d283:	c3                   	ret    

c001d284 <lockScheduler()>:
c001d284:	eb e1                	jmp    c001d267 <disableIRQs()>

c001d286 <unlockScheduler()>:
c001d286:	eb ed                	jmp    c001d275 <enableIRQs()>

c001d288 <userModeEntryPoint(void*)>:
c001d288:	83 ec 0c             	sub    esp,0xc
c001d28b:	e8 f6 ff ff ff       	call   c001d286 <unlockScheduler()>
c001d290:	fb                   	sti    
c001d291:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d296:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001d299:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001d29f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d2a3:	83 c4 0c             	add    esp,0xc
c001d2a6:	e9 7f 30 fe ff       	jmp    c000032a <goToUsermode>

c001d2ab <lockStuff()>:
c001d2ab:	e8 b7 ff ff ff       	call   c001d267 <disableIRQs()>
c001d2b0:	ff 05 a8 ed 02 c0    	inc    DWORD PTR ds:0xc002eda8
c001d2b6:	c3                   	ret    

c001d2b7 <taskStartupFunction>:
c001d2b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d2bc:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001d2bf:	c3                   	ret    

c001d2c0 <updateTimeUsed()>:
c001d2c0:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c001d2c5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d2cb:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001d2d2:	74 50                	je     c001d324 <updateTimeUsed()+0x64>
c001d2d4:	57                   	push   edi
c001d2d5:	56                   	push   esi
c001d2d6:	53                   	push   ebx
c001d2d7:	0f 31                	rdtsc  
c001d2d9:	89 c1                	mov    ecx,eax
c001d2db:	a3 e8 ed 02 c0       	mov    ds:0xc002ede8,eax
c001d2e0:	2b 0d d8 ed 02 c0    	sub    ecx,DWORD PTR ds:0xc002edd8
c001d2e6:	89 d3                	mov    ebx,edx
c001d2e8:	89 0d e0 ed 02 c0    	mov    DWORD PTR ds:0xc002ede0,ecx
c001d2ee:	1b 1d dc ed 02 c0    	sbb    ebx,DWORD PTR ds:0xc002eddc
c001d2f4:	a3 d8 ed 02 c0       	mov    ds:0xc002edd8,eax
c001d2f9:	89 1d e4 ed 02 c0    	mov    DWORD PTR ds:0xc002ede4,ebx
c001d2ff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d304:	89 15 ec ed 02 c0    	mov    DWORD PTR ds:0xc002edec,edx
c001d30a:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001d30d:	89 15 dc ed 02 c0    	mov    DWORD PTR ds:0xc002eddc,edx
c001d313:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001d316:	01 f1                	add    ecx,esi
c001d318:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001d31b:	11 fb                	adc    ebx,edi
c001d31d:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001d320:	5b                   	pop    ebx
c001d321:	5e                   	pop    esi
c001d322:	5f                   	pop    edi
c001d323:	c3                   	ret    
c001d324:	c3                   	ret    

c001d325 <switchToThread(ThreadControlBlock*)>:
c001d325:	53                   	push   ebx
c001d326:	83 ec 08             	sub    esp,0x8
c001d329:	a1 a8 ed 02 c0       	mov    eax,ds:0xc002eda8
c001d32e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d332:	85 c0                	test   eax,eax
c001d334:	75 30                	jne    c001d366 <switchToThread(ThreadControlBlock*)+0x41>
c001d336:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001d339:	3c ff                	cmp    al,0xff
c001d33b:	74 25                	je     c001d362 <switchToThread(ThreadControlBlock*)+0x3d>
c001d33d:	0f b6 d0             	movzx  edx,al
c001d340:	b8 84 03 00 00       	mov    eax,0x384
c001d345:	29 d0                	sub    eax,edx
c001d347:	c1 e0 10             	shl    eax,0x10
c001d34a:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001d34d:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001d350:	e8 6b ff ff ff       	call   c001d2c0 <updateTimeUsed()>
c001d355:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001d359:	83 c4 08             	add    esp,0x8
c001d35c:	5b                   	pop    ebx
c001d35d:	e9 00 30 fe ff       	jmp    c0000362 <switchToThreadASM>
c001d362:	31 c0                	xor    eax,eax
c001d364:	eb e7                	jmp    c001d34d <switchToThread(ThreadControlBlock*)+0x28>
c001d366:	c7 05 a4 ed 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002eda4,0x1
c001d370:	83 c4 08             	add    esp,0x8
c001d373:	5b                   	pop    ebx
c001d374:	c3                   	ret    
c001d375:	90                   	nop

c001d376 <Semaphore::Semaphore(int)>:
c001d376:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d37a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d37e:	89 10                	mov    DWORD PTR [eax],edx
c001d380:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d384:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d38b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d38f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001d396:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d39a:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001d3a1:	90                   	nop
c001d3a2:	c3                   	ret    
c001d3a3:	90                   	nop

c001d3a4 <Mutex::Mutex()>:
c001d3a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d3a8:	6a 01                	push   0x1
c001d3aa:	50                   	push   eax
c001d3ab:	e8 c6 ff ff ff       	call   c001d376 <Semaphore::Semaphore(int)>
c001d3b0:	83 c4 08             	add    esp,0x8
c001d3b3:	90                   	nop
c001d3b4:	c3                   	ret    
c001d3b5:	90                   	nop

c001d3b6 <Process::createThread(void (*)(void*), void*, int)>:
c001d3b6:	55                   	push   ebp
c001d3b7:	31 c9                	xor    ecx,ecx
c001d3b9:	57                   	push   edi
c001d3ba:	56                   	push   esi
c001d3bb:	53                   	push   ebx
c001d3bc:	83 ec 1c             	sub    esp,0x1c
c001d3bf:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d3c3:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001d3ca:	89 f2                	mov    edx,esi
c001d3cc:	0f b7 c2             	movzx  eax,dx
c001d3cf:	83 e2 01             	and    edx,0x1
c001d3d2:	74 14                	je     c001d3e8 <Process::createThread(void (*)(void*), void*, int)+0x32>
c001d3d4:	d1 f8                	sar    eax,1
c001d3d6:	41                   	inc    ecx
c001d3d7:	89 c2                	mov    edx,eax
c001d3d9:	83 f9 10             	cmp    ecx,0x10
c001d3dc:	75 ee                	jne    c001d3cc <Process::createThread(void (*)(void*), void*, int)+0x16>
c001d3de:	83 c4 1c             	add    esp,0x1c
c001d3e1:	31 c0                	xor    eax,eax
c001d3e3:	5b                   	pop    ebx
c001d3e4:	5e                   	pop    esi
c001d3e5:	5f                   	pop    edi
c001d3e6:	5d                   	pop    ebp
c001d3e7:	c3                   	ret    
c001d3e8:	83 ec 08             	sub    esp,0x8
c001d3eb:	b8 01 00 00 00       	mov    eax,0x1
c001d3f0:	d3 e0                	shl    eax,cl
c001d3f2:	09 c6                	or     esi,eax
c001d3f4:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001d3fa:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001d401:	8d 34 09             	lea    esi,[ecx+ecx*1]
c001d404:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001d407:	01 ce                	add    esi,ecx
c001d409:	89 f0                	mov    eax,esi
c001d40b:	c1 e0 05             	shl    eax,0x5
c001d40e:	01 c6                	add    esi,eax
c001d410:	8d 04 33             	lea    eax,[ebx+esi*1]
c001d413:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001d419:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001d41f:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001d423:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001d429:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001d42f:	89 ca                	mov    edx,ecx
c001d431:	f7 da                	neg    edx
c001d433:	c1 e2 15             	shl    edx,0x15
c001d436:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001d43c:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001d442:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001d446:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001d450:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001d456:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d45a:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001d460:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001d46a:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001d474:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001d47b:	50                   	push   eax
c001d47c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d480:	68 c8 ed 02 c0       	push   0xc002edc8
c001d485:	e8 06 ac 00 00       	call   c0028090 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d48a:	83 c4 10             	add    esp,0x10
c001d48d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d491:	83 c4 1c             	add    esp,0x1c
c001d494:	5b                   	pop    ebx
c001d495:	5e                   	pop    esi
c001d496:	5f                   	pop    edi
c001d497:	5d                   	pop    ebp
c001d498:	c3                   	ret    
c001d499:	90                   	nop

c001d49a <Process::createUserThread()>:
c001d49a:	83 ec 0c             	sub    esp,0xc
c001d49d:	68 80 00 00 00       	push   0x80
c001d4a2:	6a 00                	push   0x0
c001d4a4:	68 88 d2 01 c0       	push   0xc001d288
c001d4a9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d4ad:	e8 04 ff ff ff       	call   c001d3b6 <Process::createThread(void (*)(void*), void*, int)>
c001d4b2:	83 c4 1c             	add    esp,0x1c
c001d4b5:	c3                   	ret    

c001d4b6 <setupMultitasking(void (*)())>:
c001d4b6:	56                   	push   esi
c001d4b7:	53                   	push   ebx
c001d4b8:	53                   	push   ebx
c001d4b9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d4bd:	eb 10                	jmp    c001d4cf <setupMultitasking(void (*)())+0x19>
c001d4bf:	83 ec 0c             	sub    esp,0xc
c001d4c2:	68 c8 ed 02 c0       	push   0xc002edc8
c001d4c7:	e8 16 ab 00 00       	call   c0027fe2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d4cc:	83 c4 10             	add    esp,0x10
c001d4cf:	83 ec 0c             	sub    esp,0xc
c001d4d2:	68 c8 ed 02 c0       	push   0xc002edc8
c001d4d7:	e8 ea aa 00 00       	call   c0027fc6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d4dc:	83 c4 10             	add    esp,0x10
c001d4df:	84 c0                	test   al,al
c001d4e1:	74 dc                	je     c001d4bf <setupMultitasking(void (*)())+0x9>
c001d4e3:	83 ec 0c             	sub    esp,0xc
c001d4e6:	68 3f 07 00 00       	push   0x73f
c001d4eb:	e8 34 21 ff ff       	call   c000f624 <malloc>
c001d4f0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d4f7:	89 c3                	mov    ebx,eax
c001d4f9:	6a 00                	push   0x0
c001d4fb:	68 82 b5 02 c0       	push   0xc002b582
c001d500:	6a 01                	push   0x1
c001d502:	50                   	push   eax
c001d503:	e8 b0 fb ff ff       	call   c001d0b8 <Process::Process(bool, char const*, Process*, char**)>
c001d508:	83 c4 18             	add    esp,0x18
c001d50b:	89 1d d4 ed 02 c0    	mov    DWORD PTR ds:0xc002edd4,ebx
c001d511:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001d517:	68 a4 b6 02 c0       	push   0xc002b6a4
c001d51c:	e8 d2 53 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001d521:	58                   	pop    eax
c001d522:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001d528:	e8 88 35 ff ff       	call   c0010ab5 <setActiveTerminal(VgaText*)>
c001d52d:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001d535:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001d53b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001d53e:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001d548:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001d54e:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001d554:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001d55e:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001d568:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001d572:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001d578:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001d57e:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001d588:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001d58e:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001d598:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001d59e:	5a                   	pop    edx
c001d59f:	59                   	pop    ecx
c001d5a0:	68 7e b5 02 c0       	push   0xc002b57e
c001d5a5:	50                   	push   eax
c001d5a6:	e8 b8 31 fe ff       	call   c0000763 <strcpy>
c001d5ab:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001d5b2:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d5b6:	83 c4 14             	add    esp,0x14
c001d5b9:	5b                   	pop    ebx
c001d5ba:	5e                   	pop    esi
c001d5bb:	e9 94 2d fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001d5c0 <schedule()>:
c001d5c0:	a1 a8 ed 02 c0       	mov    eax,ds:0xc002eda8
c001d5c5:	85 c0                	test   eax,eax
c001d5c7:	74 0b                	je     c001d5d4 <schedule()+0x14>
c001d5c9:	c7 05 a4 ed 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002eda4,0x1
c001d5d3:	c3                   	ret    
c001d5d4:	53                   	push   ebx
c001d5d5:	83 ec 14             	sub    esp,0x14
c001d5d8:	68 c8 ed 02 c0       	push   0xc002edc8
c001d5dd:	e8 e4 a9 00 00       	call   c0027fc6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d5e2:	83 c4 10             	add    esp,0x10
c001d5e5:	84 c0                	test   al,al
c001d5e7:	75 38                	jne    c001d621 <schedule()+0x61>
c001d5e9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d5ee:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d5f1:	4a                   	dec    edx
c001d5f2:	74 32                	je     c001d626 <schedule()+0x66>
c001d5f4:	83 ec 0c             	sub    esp,0xc
c001d5f7:	68 c8 ed 02 c0       	push   0xc002edc8
c001d5fc:	e8 bd a9 00 00       	call   c0027fbe <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d601:	c7 04 24 c8 ed 02 c0 	mov    DWORD PTR [esp],0xc002edc8
c001d608:	89 c3                	mov    ebx,eax
c001d60a:	e8 d3 a9 00 00       	call   c0027fe2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d60f:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001d616:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d619:	e8 07 fd ff ff       	call   c001d325 <switchToThread(ThreadControlBlock*)>
c001d61e:	83 c4 10             	add    esp,0x10
c001d621:	83 c4 08             	add    esp,0x8
c001d624:	5b                   	pop    ebx
c001d625:	c3                   	ret    
c001d626:	83 ec 08             	sub    esp,0x8
c001d629:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001d630:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001d636:	68 c8 ed 02 c0       	push   0xc002edc8
c001d63b:	e8 50 aa 00 00       	call   c0028090 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d640:	83 c4 10             	add    esp,0x10
c001d643:	eb af                	jmp    c001d5f4 <schedule()+0x34>

c001d645 <unlockStuff()>:
c001d645:	a1 a8 ed 02 c0       	mov    eax,ds:0xc002eda8
c001d64a:	48                   	dec    eax
c001d64b:	a3 a8 ed 02 c0       	mov    ds:0xc002eda8,eax
c001d650:	75 09                	jne    c001d65b <unlockStuff()+0x16>
c001d652:	a1 a4 ed 02 c0       	mov    eax,ds:0xc002eda4
c001d657:	85 c0                	test   eax,eax
c001d659:	75 05                	jne    c001d660 <unlockStuff()+0x1b>
c001d65b:	e9 15 fc ff ff       	jmp    c001d275 <enableIRQs()>
c001d660:	83 ec 0c             	sub    esp,0xc
c001d663:	c7 05 a4 ed 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002eda4,0x0
c001d66d:	e8 4e ff ff ff       	call   c001d5c0 <schedule()>
c001d672:	83 c4 0c             	add    esp,0xc
c001d675:	e9 fb fb ff ff       	jmp    c001d275 <enableIRQs()>

c001d67a <Semaphore::tryAcquire()>:
c001d67a:	83 ec 0c             	sub    esp,0xc
c001d67d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d681:	e8 25 fc ff ff       	call   c001d2ab <lockStuff()>
c001d686:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001d689:	3b 10                	cmp    edx,DWORD PTR [eax]
c001d68b:	7c 0b                	jl     c001d698 <Semaphore::tryAcquire()+0x1e>
c001d68d:	e8 b3 ff ff ff       	call   c001d645 <unlockStuff()>
c001d692:	31 c0                	xor    eax,eax
c001d694:	83 c4 0c             	add    esp,0xc
c001d697:	c3                   	ret    
c001d698:	42                   	inc    edx
c001d699:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001d69c:	e8 a4 ff ff ff       	call   c001d645 <unlockStuff()>
c001d6a1:	b0 01                	mov    al,0x1
c001d6a3:	83 c4 0c             	add    esp,0xc
c001d6a6:	c3                   	ret    
c001d6a7:	90                   	nop

c001d6a8 <Semaphore::assertLocked(char const*)>:
c001d6a8:	83 ec 0c             	sub    esp,0xc
c001d6ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d6af:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d6b3:	e8 f3 fb ff ff       	call   c001d2ab <lockStuff()>
c001d6b8:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d6ba:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001d6bd:	7c 05                	jl     c001d6c4 <Semaphore::assertLocked(char const*)+0x1c>
c001d6bf:	83 c4 0c             	add    esp,0xc
c001d6c2:	eb 81                	jmp    c001d645 <unlockStuff()>
c001d6c4:	83 ec 0c             	sub    esp,0xc
c001d6c7:	52                   	push   edx
c001d6c8:	e8 80 c5 ff ff       	call   c0019c4d <Krnl::panic(char const*)>
c001d6cd:	83 c4 10             	add    esp,0x10
c001d6d0:	83 c4 0c             	add    esp,0xc
c001d6d3:	e9 6d ff ff ff       	jmp    c001d645 <unlockStuff()>

c001d6d8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001d6d8:	83 ec 0c             	sub    esp,0xc
c001d6db:	e8 8f fb ff ff       	call   c001d26f <getIRQNestingLevel()>
c001d6e0:	83 ec 08             	sub    esp,0x8
c001d6e3:	50                   	push   eax
c001d6e4:	68 d8 b6 02 c0       	push   0xc002b6d8
c001d6e9:	e8 05 52 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001d6ee:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d6f2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d6f7:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d6fa:	e8 c1 fe ff ff       	call   c001d5c0 <schedule()>
c001d6ff:	e8 82 fb ff ff       	call   c001d286 <unlockScheduler()>
c001d704:	e8 66 fb ff ff       	call   c001d26f <getIRQNestingLevel()>
c001d709:	5a                   	pop    edx
c001d70a:	59                   	pop    ecx
c001d70b:	50                   	push   eax
c001d70c:	68 0c b7 02 c0       	push   0xc002b70c
c001d711:	e8 dd 51 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001d716:	83 c4 1c             	add    esp,0x1c
c001d719:	c3                   	ret    

c001d71a <blockTask(TaskState)>:
c001d71a:	83 ec 0c             	sub    esp,0xc
c001d71d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d721:	e8 5e fb ff ff       	call   c001d284 <lockScheduler()>
c001d726:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d72b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d72e:	e8 8d fe ff ff       	call   c001d5c0 <schedule()>
c001d733:	83 c4 0c             	add    esp,0xc
c001d736:	e9 4b fb ff ff       	jmp    c001d286 <unlockScheduler()>

c001d73b <waitTask(int, int*, int)>:
c001d73b:	83 ec 18             	sub    esp,0x18
c001d73e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d743:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d747:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001d74a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d74e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d753:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001d756:	6a 07                	push   0x7
c001d758:	e8 bd ff ff ff       	call   c001d71a <blockTask(TaskState)>
c001d75d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d762:	83 c4 10             	add    esp,0x10
c001d765:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001d768:	85 d2                	test   edx,edx
c001d76a:	74 0a                	je     c001d776 <waitTask(int, int*, int)+0x3b>
c001d76c:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001d76f:	89 02                	mov    DWORD PTR [edx],eax
c001d771:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d776:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001d779:	83 c4 0c             	add    esp,0xc
c001d77c:	c3                   	ret    

c001d77d <nanoSleepUntil(unsigned long long)>:
c001d77d:	83 ec 0c             	sub    esp,0xc
c001d780:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d784:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d788:	3b 05 10 df 02 c0    	cmp    eax,DWORD PTR ds:0xc002df10
c001d78e:	89 d1                	mov    ecx,edx
c001d790:	1b 0d 14 df 02 c0    	sbb    ecx,DWORD PTR ds:0xc002df14
c001d796:	73 04                	jae    c001d79c <nanoSleepUntil(unsigned long long)+0x1f>
c001d798:	83 c4 0c             	add    esp,0xc
c001d79b:	c3                   	ret    
c001d79c:	e8 0a fb ff ff       	call   c001d2ab <lockStuff()>
c001d7a1:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001d7a7:	83 ec 08             	sub    esp,0x8
c001d7aa:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001d7ad:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001d7b0:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001d7b6:	68 bc ed 02 c0       	push   0xc002edbc
c001d7bb:	e8 d0 a8 00 00       	call   c0028090 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d7c0:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001d7c7:	e8 4e ff ff ff       	call   c001d71a <blockTask(TaskState)>
c001d7cc:	83 c4 1c             	add    esp,0x1c
c001d7cf:	e9 71 fe ff ff       	jmp    c001d645 <unlockStuff()>

c001d7d4 <nanoSleep(unsigned long long)>:
c001d7d4:	a1 10 df 02 c0       	mov    eax,ds:0xc002df10
c001d7d9:	8b 15 14 df 02 c0    	mov    edx,DWORD PTR ds:0xc002df14
c001d7df:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001d7e3:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001d7e7:	eb 94                	jmp    c001d77d <nanoSleepUntil(unsigned long long)>

c001d7e9 <sleep(unsigned long long)>:
c001d7e9:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001d7f1:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001d7f6:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001d7fa:	01 ca                	add    edx,ecx
c001d7fc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d800:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001d804:	eb ce                	jmp    c001d7d4 <nanoSleep(unsigned long long)>

c001d806 <Semaphore::acquire()>:
c001d806:	83 ec 0c             	sub    esp,0xc
c001d809:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d80d:	e8 99 fa ff ff       	call   c001d2ab <lockStuff()>
c001d812:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001d815:	3b 10                	cmp    edx,DWORD PTR [eax]
c001d817:	7d 0c                	jge    c001d825 <Semaphore::acquire()+0x1f>
c001d819:	42                   	inc    edx
c001d81a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001d81d:	83 c4 0c             	add    esp,0xc
c001d820:	e9 20 fe ff ff       	jmp    c001d645 <unlockStuff()>
c001d825:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001d82b:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001d832:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001d835:	85 d2                	test   edx,edx
c001d837:	74 2a                	je     c001d863 <Semaphore::acquire()+0x5d>
c001d839:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001d83c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001d842:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001d845:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001d84b:	83 ec 0c             	sub    esp,0xc
c001d84e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001d851:	6a 05                	push   0x5
c001d853:	e8 c2 fe ff ff       	call   c001d71a <blockTask(TaskState)>
c001d858:	83 c4 10             	add    esp,0x10
c001d85b:	83 c4 0c             	add    esp,0xc
c001d85e:	e9 e2 fd ff ff       	jmp    c001d645 <unlockStuff()>
c001d863:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001d869:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001d86c:	eb d7                	jmp    c001d845 <Semaphore::acquire()+0x3f>

c001d86e <taskReturned>:
c001d86e:	83 ec 18             	sub    esp,0x18
c001d871:	68 40 b7 02 c0       	push   0xc002b740
c001d876:	e8 d2 c3 ff ff       	call   c0019c4d <Krnl::panic(char const*)>
c001d87b:	83 c4 10             	add    esp,0x10
c001d87e:	83 ec 0c             	sub    esp,0xc
c001d881:	6a 02                	push   0x2
c001d883:	e8 92 fe ff ff       	call   c001d71a <blockTask(TaskState)>
c001d888:	e8 f7 f9 ff ff       	call   c001d284 <lockScheduler()>
c001d88d:	e8 2e fd ff ff       	call   c001d5c0 <schedule()>
c001d892:	e8 ef f9 ff ff       	call   c001d286 <unlockScheduler()>
c001d897:	83 c4 10             	add    esp,0x10
c001d89a:	eb e2                	jmp    c001d87e <taskReturned+0x10>

c001d89c <unblockTask(ThreadControlBlock*)>:
c001d89c:	53                   	push   ebx
c001d89d:	83 ec 08             	sub    esp,0x8
c001d8a0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d8a4:	e8 db f9 ff ff       	call   c001d284 <lockScheduler()>
c001d8a9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001d8ac:	85 c0                	test   eax,eax
c001d8ae:	74 5c                	je     c001d90c <unblockTask(ThreadControlBlock*)+0x70>
c001d8b0:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001d8b3:	48                   	dec    eax
c001d8b4:	74 31                	je     c001d8e7 <unblockTask(ThreadControlBlock*)+0x4b>
c001d8b6:	83 ec 0c             	sub    esp,0xc
c001d8b9:	68 c8 ed 02 c0       	push   0xc002edc8
c001d8be:	e8 fb a6 00 00       	call   c0027fbe <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d8c3:	83 c4 10             	add    esp,0x10
c001d8c6:	85 c0                	test   eax,eax
c001d8c8:	75 17                	jne    c001d8e1 <unblockTask(ThreadControlBlock*)+0x45>
c001d8ca:	eb 65                	jmp    c001d931 <unblockTask(ThreadControlBlock*)+0x95>
c001d8cc:	83 ec 08             	sub    esp,0x8
c001d8cf:	50                   	push   eax
c001d8d0:	68 c8 ed 02 c0       	push   0xc002edc8
c001d8d5:	e8 be a9 00 00       	call   c0028298 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001d8da:	83 c4 10             	add    esp,0x10
c001d8dd:	85 c0                	test   eax,eax
c001d8df:	74 50                	je     c001d931 <unblockTask(ThreadControlBlock*)+0x95>
c001d8e1:	39 c3                	cmp    ebx,eax
c001d8e3:	75 e7                	jne    c001d8cc <unblockTask(ThreadControlBlock*)+0x30>
c001d8e5:	eb 1c                	jmp    c001d903 <unblockTask(ThreadControlBlock*)+0x67>
c001d8e7:	83 ec 0c             	sub    esp,0xc
c001d8ea:	68 30 b8 02 c0       	push   0xc002b830
c001d8ef:	e8 ff 4f ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001d8f4:	c7 04 24 bc b7 02 c0 	mov    DWORD PTR [esp],0xc002b7bc
c001d8fb:	e8 f3 4f ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001d900:	83 c4 10             	add    esp,0x10
c001d903:	83 c4 08             	add    esp,0x8
c001d906:	5b                   	pop    ebx
c001d907:	e9 7a f9 ff ff       	jmp    c001d286 <unlockScheduler()>
c001d90c:	83 ec 0c             	sub    esp,0xc
c001d90f:	68 74 b7 02 c0       	push   0xc002b774
c001d914:	e8 da 4f ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001d919:	c7 04 24 bc b7 02 c0 	mov    DWORD PTR [esp],0xc002b7bc
c001d920:	e8 ce 4f ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001d925:	83 c4 10             	add    esp,0x10
c001d928:	83 c4 08             	add    esp,0x8
c001d92b:	5b                   	pop    ebx
c001d92c:	e9 55 f9 ff ff       	jmp    c001d286 <unlockScheduler()>
c001d931:	83 ec 08             	sub    esp,0x8
c001d934:	53                   	push   ebx
c001d935:	68 c8 ed 02 c0       	push   0xc002edc8
c001d93a:	e8 51 a7 00 00       	call   c0028090 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d93f:	83 c4 10             	add    esp,0x10
c001d942:	83 c4 08             	add    esp,0x8
c001d945:	5b                   	pop    ebx
c001d946:	e9 3b f9 ff ff       	jmp    c001d286 <unlockScheduler()>

c001d94b <cleanupTerminatedTask(ThreadControlBlock*)>:
c001d94b:	55                   	push   ebp
c001d94c:	57                   	push   edi
c001d94d:	56                   	push   esi
c001d94e:	53                   	push   ebx
c001d94f:	83 ec 1c             	sub    esp,0x1c
c001d952:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d956:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d959:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001d95f:	85 ff                	test   edi,edi
c001d961:	7e 20                	jle    c001d983 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001d963:	31 f6                	xor    esi,esi
c001d965:	83 ec 0c             	sub    esp,0xc
c001d968:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001d96f:	46                   	inc    esi
c001d970:	e8 bf 1c ff ff       	call   c000f634 <free>
c001d975:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d978:	83 c4 10             	add    esp,0x10
c001d97b:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001d981:	7f e2                	jg     c001d965 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001d983:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d98d:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001d992:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001d995:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001d998:	d3 c0                	rol    eax,cl
c001d99a:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001d9a1:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001d9a4:	89 f7                	mov    edi,esi
c001d9a6:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001d9ae:	0f 85 74 01 00 00    	jne    c001db28 <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001d9b4:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001d9ba:	85 ed                	test   ebp,ebp
c001d9bc:	74 1b                	je     c001d9d9 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001d9be:	83 ec 0c             	sub    esp,0xc
c001d9c1:	55                   	push   ebp
c001d9c2:	e8 f3 bf ff ff       	call   c00199ba <EnvVarContainer::~EnvVarContainer()>
c001d9c7:	59                   	pop    ecx
c001d9c8:	5e                   	pop    esi
c001d9c9:	6a 0c                	push   0xc
c001d9cb:	55                   	push   ebp
c001d9cc:	e8 42 4e ff ff       	call   c0012813 <operator delete(void*, unsigned long)>
c001d9d1:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001d9d4:	83 c4 10             	add    esp,0x10
c001d9d7:	89 f7                	mov    edi,esi
c001d9d9:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001d9df:	85 c0                	test   eax,eax
c001d9e1:	0f 84 aa 00 00 00    	je     c001da91 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001d9e7:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001d9ea:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001d9ee:	31 c9                	xor    ecx,ecx
c001d9f0:	eb 10                	jmp    c001da02 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001d9f2:	41                   	inc    ecx
c001d9f3:	83 f9 10             	cmp    ecx,0x10
c001d9f6:	0f 84 95 00 00 00    	je     c001da91 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001d9fc:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001da02:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001da09:	d3 fa                	sar    edx,cl
c001da0b:	83 e2 01             	and    edx,0x1
c001da0e:	74 e2                	je     c001d9f2 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001da10:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001da13:	01 ca                	add    edx,ecx
c001da15:	89 d5                	mov    ebp,edx
c001da17:	c1 e5 05             	shl    ebp,0x5
c001da1a:	01 ea                	add    edx,ebp
c001da1c:	01 d0                	add    eax,edx
c001da1e:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001da24:	83 fd 07             	cmp    ebp,0x7
c001da27:	75 c9                	jne    c001d9f2 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001da29:	05 40 02 00 00       	add    eax,0x240
c001da2e:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001da31:	83 fd ff             	cmp    ebp,0xffffffff
c001da34:	0f 8c 08 01 00 00    	jl     c001db42 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001da3a:	0f 84 b9 01 00 00    	je     c001dbf9 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001da40:	85 ed                	test   ebp,ebp
c001da42:	0f 84 a0 01 00 00    	je     c001dbe8 <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001da48:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001da4a:	75 a6                	jne    c001d9f2 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001da4c:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001da52:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001da56:	01 d0                	add    eax,edx
c001da58:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001da5c:	83 ec 0c             	sub    esp,0xc
c001da5f:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001da65:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001da68:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001da6e:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001da75:	50                   	push   eax
c001da76:	e8 21 fe ff ff       	call   c001d89c <unblockTask(ThreadControlBlock*)>
c001da7b:	83 c4 10             	add    esp,0x10
c001da7e:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001da81:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001da85:	89 f7                	mov    edi,esi
c001da87:	41                   	inc    ecx
c001da88:	83 f9 10             	cmp    ecx,0x10
c001da8b:	0f 85 6b ff ff ff    	jne    c001d9fc <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001da91:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001da97:	85 c0                	test   eax,eax
c001da99:	74 5d                	je     c001daf8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001da9b:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001daa1:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001daa7:	74 4f                	je     c001daf8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001daa9:	83 ec 0c             	sub    esp,0xc
c001daac:	68 c8 ed 02 c0       	push   0xc002edc8
c001dab1:	e8 08 a5 00 00       	call   c0027fbe <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dab6:	c7 04 24 c8 ed 02 c0 	mov    DWORD PTR [esp],0xc002edc8
c001dabd:	89 c7                	mov    edi,eax
c001dabf:	e8 02 a5 00 00       	call   c0027fc6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001dac4:	83 c4 10             	add    esp,0x10
c001dac7:	84 c0                	test   al,al
c001dac9:	0f 84 e4 00 00 00    	je     c001dbb3 <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001dacf:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dad2:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001dad8:	85 d2                	test   edx,edx
c001dada:	74 0f                	je     c001daeb <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001dadc:	83 ec 0c             	sub    esp,0xc
c001dadf:	8b 02                	mov    eax,DWORD PTR [edx]
c001dae1:	52                   	push   edx
c001dae2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001dae5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dae8:	83 c4 10             	add    esp,0x10
c001daeb:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001daf5:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001daf8:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001dafe:	85 db                	test   ebx,ebx
c001db00:	74 16                	je     c001db18 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001db02:	83 ec 0c             	sub    esp,0xc
c001db05:	53                   	push   ebx
c001db06:	e8 57 43 ff ff       	call   c0011e62 <VAS::~VAS()>
c001db0b:	58                   	pop    eax
c001db0c:	5a                   	pop    edx
c001db0d:	6a 10                	push   0x10
c001db0f:	53                   	push   ebx
c001db10:	e8 fe 4c ff ff       	call   c0012813 <operator delete(void*, unsigned long)>
c001db15:	83 c4 10             	add    esp,0x10
c001db18:	83 ec 0c             	sub    esp,0xc
c001db1b:	68 89 b5 02 c0       	push   0xc002b589
c001db20:	e8 ce 4d ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001db25:	83 c4 10             	add    esp,0x10
c001db28:	83 ec 08             	sub    esp,0x8
c001db2b:	68 3f 07 00 00       	push   0x73f
c001db30:	68 97 b5 02 c0       	push   0xc002b597
c001db35:	e8 b9 4d ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001db3a:	83 c4 2c             	add    esp,0x2c
c001db3d:	5b                   	pop    ebx
c001db3e:	5e                   	pop    esi
c001db3f:	5f                   	pop    edi
c001db40:	5d                   	pop    ebp
c001db41:	c3                   	ret    
c001db42:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001db46:	83 ec 0c             	sub    esp,0xc
c001db49:	68 74 b8 02 c0       	push   0xc002b874
c001db4e:	e8 fa c0 ff ff       	call   c0019c4d <Krnl::panic(char const*)>
c001db53:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001db56:	83 c4 10             	add    esp,0x10
c001db59:	89 f7                	mov    edi,esi
c001db5b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001db5f:	e9 8e fe ff ff       	jmp    c001d9f2 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001db64:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001db6a:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001db70:	75 1c                	jne    c001db8e <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001db72:	83 ec 0c             	sub    esp,0xc
c001db75:	68 dc b8 02 c0       	push   0xc002b8dc
c001db7a:	e8 74 4d ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001db7f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001db86:	e8 8f fb ff ff       	call   c001d71a <blockTask(TaskState)>
c001db8b:	83 c4 10             	add    esp,0x10
c001db8e:	83 ec 08             	sub    esp,0x8
c001db91:	56                   	push   esi
c001db92:	68 c8 ed 02 c0       	push   0xc002edc8
c001db97:	e8 f4 a4 00 00       	call   c0028090 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001db9c:	c7 04 24 c8 ed 02 c0 	mov    DWORD PTR [esp],0xc002edc8
c001dba3:	e8 16 a4 00 00       	call   c0027fbe <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dba8:	83 c4 10             	add    esp,0x10
c001dbab:	39 f8                	cmp    eax,edi
c001dbad:	0f 84 1c ff ff ff    	je     c001dacf <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001dbb3:	83 ec 0c             	sub    esp,0xc
c001dbb6:	68 c8 ed 02 c0       	push   0xc002edc8
c001dbbb:	e8 fe a3 00 00       	call   c0027fbe <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dbc0:	c7 04 24 c8 ed 02 c0 	mov    DWORD PTR [esp],0xc002edc8
c001dbc7:	89 c6                	mov    esi,eax
c001dbc9:	e8 14 a4 00 00       	call   c0027fe2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001dbce:	83 c4 10             	add    esp,0x10
c001dbd1:	39 f3                	cmp    ebx,esi
c001dbd3:	74 b9                	je     c001db8e <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001dbd5:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001dbd8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dbdb:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001dbe1:	75 ab                	jne    c001db8e <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001dbe3:	e9 7c ff ff ff       	jmp    c001db64 <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001dbe8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001dbec:	83 ec 0c             	sub    esp,0xc
c001dbef:	68 a8 b8 02 c0       	push   0xc002b8a8
c001dbf4:	e9 55 ff ff ff       	jmp    c001db4e <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001dbf9:	8b 36                	mov    esi,DWORD PTR [esi]
c001dbfb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001dbff:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001dc02:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dc05:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001dc0b:	01 d7                	add    edi,edx
c001dc0d:	89 f8                	mov    eax,edi
c001dc0f:	e9 44 fe ff ff       	jmp    c001da58 <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001dc14 <cleanerTaskFunction(void*)>:
c001dc14:	53                   	push   ebx
c001dc15:	83 ec 08             	sub    esp,0x8
c001dc18:	e8 69 f6 ff ff       	call   c001d286 <unlockScheduler()>
c001dc1d:	e8 62 f6 ff ff       	call   c001d284 <lockScheduler()>
c001dc22:	80 3d 8c ed 02 c0 00 	cmp    BYTE PTR ds:0xc002ed8c,0x0
c001dc29:	0f 85 8e 00 00 00    	jne    c001dcbd <cleanerTaskFunction(void*)+0xa9>
c001dc2f:	83 ec 0c             	sub    esp,0xc
c001dc32:	6a 02                	push   0x2
c001dc34:	e8 9f fa ff ff       	call   c001d6d8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001dc39:	83 c4 10             	add    esp,0x10
c001dc3c:	c6 05 8c ed 02 c0 00 	mov    BYTE PTR ds:0xc002ed8c,0x0
c001dc43:	e8 63 f6 ff ff       	call   c001d2ab <lockStuff()>
c001dc48:	e8 37 f6 ff ff       	call   c001d284 <lockScheduler()>
c001dc4d:	83 ec 0c             	sub    esp,0xc
c001dc50:	68 b0 ed 02 c0       	push   0xc002edb0
c001dc55:	e8 6c a3 00 00       	call   c0027fc6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001dc5a:	83 c4 10             	add    esp,0x10
c001dc5d:	84 c0                	test   al,al
c001dc5f:	75 40                	jne    c001dca1 <cleanerTaskFunction(void*)+0x8d>
c001dc61:	83 ec 0c             	sub    esp,0xc
c001dc64:	68 b0 ed 02 c0       	push   0xc002edb0
c001dc69:	e8 50 a3 00 00       	call   c0027fbe <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dc6e:	c7 04 24 b0 ed 02 c0 	mov    DWORD PTR [esp],0xc002edb0
c001dc75:	89 c3                	mov    ebx,eax
c001dc77:	e8 66 a3 00 00       	call   c0027fe2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001dc7c:	c7 04 24 ad b5 02 c0 	mov    DWORD PTR [esp],0xc002b5ad
c001dc83:	e8 6b 4c ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001dc88:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dc8b:	e8 bb fc ff ff       	call   c001d94b <cleanupTerminatedTask(ThreadControlBlock*)>
c001dc90:	c7 04 24 c6 b5 02 c0 	mov    DWORD PTR [esp],0xc002b5c6
c001dc97:	e8 57 4c ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001dc9c:	83 c4 10             	add    esp,0x10
c001dc9f:	eb ac                	jmp    c001dc4d <cleanerTaskFunction(void*)+0x39>
c001dca1:	e8 e0 f5 ff ff       	call   c001d286 <unlockScheduler()>
c001dca6:	e8 9a f9 ff ff       	call   c001d645 <unlockStuff()>
c001dcab:	e8 d4 f5 ff ff       	call   c001d284 <lockScheduler()>
c001dcb0:	80 3d 8c ed 02 c0 00 	cmp    BYTE PTR ds:0xc002ed8c,0x0
c001dcb7:	0f 84 72 ff ff ff    	je     c001dc2f <cleanerTaskFunction(void*)+0x1b>
c001dcbd:	e8 c4 f5 ff ff       	call   c001d286 <unlockScheduler()>
c001dcc2:	e9 75 ff ff ff       	jmp    c001dc3c <cleanerTaskFunction(void*)+0x28>

c001dcc7 <terminateTask(int)>:
c001dcc7:	83 ec 14             	sub    esp,0x14
c001dcca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dccf:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001dcd2:	83 c0 0c             	add    eax,0xc
c001dcd5:	50                   	push   eax
c001dcd6:	68 04 b9 02 c0       	push   0xc002b904
c001dcdb:	e8 13 4c ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001dce0:	e8 c6 f5 ff ff       	call   c001d2ab <lockStuff()>
c001dce5:	e8 9a f5 ff ff       	call   c001d284 <lockScheduler()>
c001dcea:	c7 04 24 d9 b5 02 c0 	mov    DWORD PTR [esp],0xc002b5d9
c001dcf1:	e8 fd 4b ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001dcf6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001dcfa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dcff:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001dd02:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dd07:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001dd0a:	5a                   	pop    edx
c001dd0b:	59                   	pop    ecx
c001dd0c:	50                   	push   eax
c001dd0d:	68 b0 ed 02 c0       	push   0xc002edb0
c001dd12:	e8 79 a3 00 00       	call   c0028090 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001dd17:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dd1c:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001dd23:	c7 04 24 f3 b5 02 c0 	mov    DWORD PTR [esp],0xc002b5f3
c001dd2a:	e8 c4 4b ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001dd2f:	83 c4 10             	add    esp,0x10
c001dd32:	a1 88 ed 02 c0       	mov    eax,ds:0xc002ed88
c001dd37:	85 c0                	test   eax,eax
c001dd39:	74 5a                	je     c001dd95 <terminateTask(int)+0xce>
c001dd3b:	83 ec 0c             	sub    esp,0xc
c001dd3e:	68 0d b6 02 c0       	push   0xc002b60d
c001dd43:	e8 ab 4b ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001dd48:	58                   	pop    eax
c001dd49:	c6 05 8c ed 02 c0 01 	mov    BYTE PTR ds:0xc002ed8c,0x1
c001dd50:	ff 35 88 ed 02 c0    	push   DWORD PTR ds:0xc002ed88
c001dd56:	e8 41 fb ff ff       	call   c001d89c <unblockTask(ThreadControlBlock*)>
c001dd5b:	c7 04 24 27 b6 02 c0 	mov    DWORD PTR [esp],0xc002b627
c001dd62:	e8 8c 4b ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001dd67:	83 c4 10             	add    esp,0x10
c001dd6a:	e8 17 f5 ff ff       	call   c001d286 <unlockScheduler()>
c001dd6f:	e8 d1 f8 ff ff       	call   c001d645 <unlockStuff()>
c001dd74:	83 ec 0c             	sub    esp,0xc
c001dd77:	68 5f b6 02 c0       	push   0xc002b65f
c001dd7c:	e8 72 4b ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001dd81:	83 c4 10             	add    esp,0x10
c001dd84:	e8 fb f4 ff ff       	call   c001d284 <lockScheduler()>
c001dd89:	e8 32 f8 ff ff       	call   c001d5c0 <schedule()>
c001dd8e:	e8 f3 f4 ff ff       	call   c001d286 <unlockScheduler()>
c001dd93:	eb ef                	jmp    c001dd84 <terminateTask(int)+0xbd>
c001dd95:	83 ec 0c             	sub    esp,0xc
c001dd98:	68 41 b6 02 c0       	push   0xc002b641
c001dd9d:	e8 51 4b ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001dda2:	83 c4 10             	add    esp,0x10
c001dda5:	eb c3                	jmp    c001dd6a <terminateTask(int)+0xa3>

c001dda7 <Thr::terminateFromIRQ(int)>:
c001dda7:	83 ec 18             	sub    esp,0x18
c001ddaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ddae:	e8 14 ff ff ff       	call   c001dcc7 <terminateTask(int)>
c001ddb3:	90                   	nop

c001ddb4 <Semaphore::release()>:
c001ddb4:	83 ec 0c             	sub    esp,0xc
c001ddb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ddbb:	e8 eb f4 ff ff       	call   c001d2ab <lockStuff()>
c001ddc0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001ddc3:	85 d2                	test   edx,edx
c001ddc5:	74 1a                	je     c001dde1 <Semaphore::release()+0x2d>
c001ddc7:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001ddca:	83 ec 0c             	sub    esp,0xc
c001ddcd:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001ddd0:	52                   	push   edx
c001ddd1:	e8 c6 fa ff ff       	call   c001d89c <unblockTask(ThreadControlBlock*)>
c001ddd6:	83 c4 10             	add    esp,0x10
c001ddd9:	83 c4 0c             	add    esp,0xc
c001dddc:	e9 64 f8 ff ff       	jmp    c001d645 <unlockStuff()>
c001dde1:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001dde4:	83 c4 0c             	add    esp,0xc
c001dde7:	e9 59 f8 ff ff       	jmp    c001d645 <unlockStuff()>

c001ddec <__static_initialization_and_destruction_0(int, int)>:
c001ddec:	83 ec 0c             	sub    esp,0xc
c001ddef:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001ddf4:	0f 85 88 00 00 00    	jne    c001de82 <__static_initialization_and_destruction_0(int, int)+0x96>
c001ddfa:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001de02:	75 7e                	jne    c001de82 <__static_initialization_and_destruction_0(int, int)+0x96>
c001de04:	83 ec 0c             	sub    esp,0xc
c001de07:	68 c8 ed 02 c0       	push   0xc002edc8
c001de0c:	e8 2f a4 00 00       	call   c0028240 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001de11:	83 c4 10             	add    esp,0x10
c001de14:	83 ec 04             	sub    esp,0x4
c001de17:	68 a0 c7 02 c0       	push   0xc002c7a0
c001de1c:	68 c8 ed 02 c0       	push   0xc002edc8
c001de21:	68 00 82 02 c0       	push   0xc0028200
c001de26:	e8 62 49 ff ff       	call   c001278d <__cxa_atexit>
c001de2b:	83 c4 10             	add    esp,0x10
c001de2e:	83 ec 0c             	sub    esp,0xc
c001de31:	68 bc ed 02 c0       	push   0xc002edbc
c001de36:	e8 05 a4 00 00       	call   c0028240 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001de3b:	83 c4 10             	add    esp,0x10
c001de3e:	83 ec 04             	sub    esp,0x4
c001de41:	68 a0 c7 02 c0       	push   0xc002c7a0
c001de46:	68 bc ed 02 c0       	push   0xc002edbc
c001de4b:	68 00 82 02 c0       	push   0xc0028200
c001de50:	e8 38 49 ff ff       	call   c001278d <__cxa_atexit>
c001de55:	83 c4 10             	add    esp,0x10
c001de58:	83 ec 0c             	sub    esp,0xc
c001de5b:	68 b0 ed 02 c0       	push   0xc002edb0
c001de60:	e8 db a3 00 00       	call   c0028240 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001de65:	83 c4 10             	add    esp,0x10
c001de68:	83 ec 04             	sub    esp,0x4
c001de6b:	68 a0 c7 02 c0       	push   0xc002c7a0
c001de70:	68 b0 ed 02 c0       	push   0xc002edb0
c001de75:	68 00 82 02 c0       	push   0xc0028200
c001de7a:	e8 0e 49 ff ff       	call   c001278d <__cxa_atexit>
c001de7f:	83 c4 10             	add    esp,0x10
c001de82:	90                   	nop
c001de83:	83 c4 0c             	add    esp,0xc
c001de86:	c3                   	ret    

c001de87 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001de87:	83 ec 0c             	sub    esp,0xc
c001de8a:	83 ec 08             	sub    esp,0x8
c001de8d:	68 ff ff 00 00       	push   0xffff
c001de92:	6a 01                	push   0x1
c001de94:	e8 53 ff ff ff       	call   c001ddec <__static_initialization_and_destruction_0(int, int)>
c001de99:	83 c4 10             	add    esp,0x10
c001de9c:	83 c4 0c             	add    esp,0xc
c001de9f:	c3                   	ret    

c001dea0 <Vm::inbv(unsigned short)>:
c001dea0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001dea4:	66 81 fa fe fe       	cmp    dx,0xfefe
c001dea9:	75 06                	jne    c001deb1 <Vm::inbv(unsigned short)+0x11>
c001deab:	a0 0c ee 02 c0       	mov    al,ds:0xc002ee0c
c001deb0:	c3                   	ret    
c001deb1:	ec                   	in     al,dx
c001deb2:	c3                   	ret    

c001deb3 <Vm::outbv(unsigned short, unsigned char)>:
c001deb3:	53                   	push   ebx
c001deb4:	83 ec 08             	sub    esp,0x8
c001deb7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001debb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001debf:	66 81 fa fe fe       	cmp    dx,0xfefe
c001dec4:	75 38                	jne    c001defe <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001dec6:	0f b6 c3             	movzx  eax,bl
c001dec9:	51                   	push   ecx
c001deca:	51                   	push   ecx
c001decb:	50                   	push   eax
c001decc:	68 23 b9 02 c0       	push   0xc002b923
c001ded1:	e8 1d 4a ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001ded6:	8b 15 0c ee 02 c0    	mov    edx,DWORD PTR ds:0xc002ee0c
c001dedc:	83 c4 10             	add    esp,0x10
c001dedf:	8d 42 01             	lea    eax,[edx+0x1]
c001dee2:	88 9a 20 ee 02 c0    	mov    BYTE PTR [edx-0x3ffd11e0],bl
c001dee8:	a3 0c ee 02 c0       	mov    ds:0xc002ee0c,eax
c001deed:	83 f8 20             	cmp    eax,0x20
c001def0:	75 0f                	jne    c001df01 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001def2:	c7 05 0c ee 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002ee0c,0x1f
c001defc:	eb 03                	jmp    c001df01 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001defe:	88 d8                	mov    al,bl
c001df00:	ee                   	out    dx,al
c001df01:	83 c4 08             	add    esp,0x8
c001df04:	5b                   	pop    ebx
c001df05:	c3                   	ret    

c001df06 <Vm::realToLinear(unsigned short, unsigned short)>:
c001df06:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001df0b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001df10:	c1 e0 04             	shl    eax,0x4
c001df13:	01 d0                	add    eax,edx
c001df15:	c3                   	ret    

c001df16 <Vm::getSegment(unsigned int)>:
c001df16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df1a:	c1 e8 10             	shr    eax,0x10
c001df1d:	c3                   	ret    

c001df1e <Vm::getOffset(unsigned int)>:
c001df1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df22:	c3                   	ret    

c001df23 <Vm::mainloop2()>:
c001df23:	83 ec 0c             	sub    esp,0xc
c001df26:	e8 59 f3 ff ff       	call   c001d284 <lockScheduler()>
c001df2b:	83 ec 0c             	sub    esp,0xc
c001df2e:	c6 05 05 ee 02 c0 01 	mov    BYTE PTR ds:0xc002ee05,0x1
c001df35:	6a 02                	push   0x2
c001df37:	e8 9c f7 ff ff       	call   c001d6d8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001df3c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001df41:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001df45:	52                   	push   edx
c001df46:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001df4a:	52                   	push   edx
c001df4b:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001df4f:	52                   	push   edx
c001df50:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001df54:	50                   	push   eax
c001df55:	e8 a0 23 fe ff       	call   c00002fa <goToVM86>
c001df5a:	83 c4 2c             	add    esp,0x2c
c001df5d:	c3                   	ret    

c001df5e <Vm::mainVm8086Loop(void*)>:
c001df5e:	83 ec 0c             	sub    esp,0xc
c001df61:	e8 20 f3 ff ff       	call   c001d286 <unlockScheduler()>
c001df66:	83 c4 0c             	add    esp,0xc
c001df69:	eb b8                	jmp    c001df23 <Vm::mainloop2()>

c001df6b <Vm::mainloop3(unsigned long)>:
c001df6b:	53                   	push   ebx
c001df6c:	83 ec 08             	sub    esp,0x8
c001df6f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001df73:	e8 0c f3 ff ff       	call   c001d284 <lockScheduler()>
c001df78:	83 ec 0c             	sub    esp,0xc
c001df7b:	89 1d 00 ee 02 c0    	mov    DWORD PTR ds:0xc002ee00,ebx
c001df81:	6a 02                	push   0x2
c001df83:	c6 05 04 ee 02 c0 01 	mov    BYTE PTR ds:0xc002ee04,0x1
c001df8a:	e8 49 f7 ff ff       	call   c001d6d8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001df8f:	83 c4 18             	add    esp,0x18
c001df92:	5b                   	pop    ebx
c001df93:	eb 8e                	jmp    c001df23 <Vm::mainloop2()>

c001df95 <Vm::initialise8086()>:
c001df95:	83 ec 0c             	sub    esp,0xc
c001df98:	68 80 00 00 00       	push   0x80
c001df9d:	6a 00                	push   0x0
c001df9f:	68 5e df 01 c0       	push   0xc001df5e
c001dfa4:	ff 35 d4 ed 02 c0    	push   DWORD PTR ds:0xc002edd4
c001dfaa:	e8 07 f4 ff ff       	call   c001d3b6 <Process::createThread(void (*)(void*), void*, int)>
c001dfaf:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001dfb6:	a3 08 ee 02 c0       	mov    ds:0xc002ee08,eax
c001dfbb:	68 00 01 00 00       	push   0x100
c001dfc0:	a1 d4 ed 02 c0       	mov    eax,ds:0xc002edd4
c001dfc5:	6a 00                	push   0x0
c001dfc7:	6a 00                	push   0x0
c001dfc9:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001dfcf:	e8 ee 42 ff ff       	call   c00122c2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001dfd4:	83 c4 2c             	add    esp,0x2c
c001dfd7:	c3                   	ret    

c001dfd8 <Vm::finish8086()>:
c001dfd8:	53                   	push   ebx
c001dfd9:	83 ec 08             	sub    esp,0x8
c001dfdc:	e8 a3 f2 ff ff       	call   c001d284 <lockScheduler()>
c001dfe1:	80 3d 04 ee 02 c0 00 	cmp    BYTE PTR ds:0xc002ee04,0x0
c001dfe8:	75 0c                	jne    c001dff6 <Vm::finish8086()+0x1e>
c001dfea:	e8 d1 f5 ff ff       	call   c001d5c0 <schedule()>
c001dfef:	e8 92 f2 ff ff       	call   c001d286 <unlockScheduler()>
c001dff4:	eb e6                	jmp    c001dfdc <Vm::finish8086()+0x4>
c001dff6:	83 ec 0c             	sub    esp,0xc
c001dff9:	8b 1d 00 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002ee00
c001dfff:	ff 35 08 ee 02 c0    	push   DWORD PTR ds:0xc002ee08
c001e005:	c6 05 04 ee 02 c0 00 	mov    BYTE PTR ds:0xc002ee04,0x0
c001e00c:	e8 8b f8 ff ff       	call   c001d89c <unblockTask(ThreadControlBlock*)>
c001e011:	e8 70 f2 ff ff       	call   c001d286 <unlockScheduler()>
c001e016:	89 d8                	mov    eax,ebx
c001e018:	83 c4 18             	add    esp,0x18
c001e01b:	5b                   	pop    ebx
c001e01c:	c3                   	ret    

c001e01d <Vm::getOutput8086(unsigned char*)>:
c001e01d:	83 ec 10             	sub    esp,0x10
c001e020:	ff 35 0c ee 02 c0    	push   DWORD PTR ds:0xc002ee0c
c001e026:	68 20 ee 02 c0       	push   0xc002ee20
c001e02b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e02f:	e8 6c 26 fe ff       	call   c00006a0 <memcpy>
c001e034:	a1 0c ee 02 c0       	mov    eax,ds:0xc002ee0c
c001e039:	c7 05 0c ee 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ee0c,0x0
c001e043:	83 c4 1c             	add    esp,0x1c
c001e046:	c3                   	ret    

c001e047 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001e047:	55                   	push   ebp
c001e048:	57                   	push   edi
c001e049:	56                   	push   esi
c001e04a:	53                   	push   ebx
c001e04b:	83 ec 2c             	sub    esp,0x2c
c001e04e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001e052:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001e056:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001e05a:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001e05e:	e8 21 f2 ff ff       	call   c001d284 <lockScheduler()>
c001e063:	a0 05 ee 02 c0       	mov    al,ds:0xc002ee05
c001e068:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001e06c:	84 c0                	test   al,al
c001e06e:	75 0c                	jne    c001e07c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x35>
c001e070:	e8 4b f5 ff ff       	call   c001d5c0 <schedule()>
c001e075:	e8 0c f2 ff ff       	call   c001d286 <unlockScheduler()>
c001e07a:	eb e2                	jmp    c001e05e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001e07c:	a1 08 ee 02 c0       	mov    eax,ds:0xc002ee08
c001e081:	c7 05 0c ee 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ee0c,0x0
c001e08b:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c001e08f:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c001e093:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001e097:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c001e09b:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001e09f:	50                   	push   eax
c001e0a0:	6a 20                	push   0x20
c001e0a2:	6a 00                	push   0x0
c001e0a4:	68 20 ee 02 c0       	push   0xc002ee20
c001e0a9:	e8 16 26 fe ff       	call   c00006c4 <memset>
c001e0ae:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001e0b5:	e8 6a 15 ff ff       	call   c000f624 <malloc>
c001e0ba:	83 c4 0c             	add    esp,0xc
c001e0bd:	89 c7                	mov    edi,eax
c001e0bf:	ff 35 d4 ed 02 c0    	push   DWORD PTR ds:0xc002edd4
c001e0c5:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e0c9:	50                   	push   eax
c001e0ca:	e8 7d 4d ff ff       	call   c0012e4c <File::File(char const*, Process*)>
c001e0cf:	83 c4 10             	add    esp,0x10
c001e0d2:	85 ff                	test   edi,edi
c001e0d4:	75 0a                	jne    c001e0e0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x99>
c001e0d6:	83 ec 0c             	sub    esp,0xc
c001e0d9:	68 3f b9 02 c0       	push   0xc002b93f
c001e0de:	eb 27                	jmp    c001e107 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c001e0e0:	50                   	push   eax
c001e0e1:	8d 44 24 17          	lea    eax,[esp+0x17]
c001e0e5:	50                   	push   eax
c001e0e6:	8d 44 24 20          	lea    eax,[esp+0x20]
c001e0ea:	50                   	push   eax
c001e0eb:	57                   	push   edi
c001e0ec:	e8 6b 50 ff ff       	call   c001315c <File::stat(unsigned long long*, bool*)>
c001e0f1:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c001e0f6:	83 c4 10             	add    esp,0x10
c001e0f9:	89 e8                	mov    eax,ebp
c001e0fb:	84 c0                	test   al,al
c001e0fd:	74 19                	je     c001e118 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001e0ff:	83 ec 0c             	sub    esp,0xc
c001e102:	68 53 b9 02 c0       	push   0xc002b953
c001e107:	e8 41 bb ff ff       	call   c0019c4d <Krnl::panic(char const*)>
c001e10c:	31 ed                	xor    ebp,ebp
c001e10e:	e8 73 f1 ff ff       	call   c001d286 <unlockScheduler()>
c001e113:	83 c4 10             	add    esp,0x10
c001e116:	eb 75                	jmp    c001e18d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001e118:	50                   	push   eax
c001e119:	50                   	push   eax
c001e11a:	6a 01                	push   0x1
c001e11c:	57                   	push   edi
c001e11d:	e8 8e 4d ff ff       	call   c0012eb0 <File::open(FileOpenMode)>
c001e122:	83 c4 10             	add    esp,0x10
c001e125:	85 c0                	test   eax,eax
c001e127:	74 17                	je     c001e140 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf9>
c001e129:	83 ec 0c             	sub    esp,0xc
c001e12c:	68 6c b9 02 c0       	push   0xc002b96c
c001e131:	e8 17 bb ff ff       	call   c0019c4d <Krnl::panic(char const*)>
c001e136:	e8 4b f1 ff ff       	call   c001d286 <unlockScheduler()>
c001e13b:	83 c4 10             	add    esp,0x10
c001e13e:	eb 4d                	jmp    c001e18d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001e140:	0f b7 f6             	movzx  esi,si
c001e143:	50                   	push   eax
c001e144:	0f b7 db             	movzx  ebx,bx
c001e147:	50                   	push   eax
c001e148:	56                   	push   esi
c001e149:	53                   	push   ebx
c001e14a:	e8 b7 fd ff ff       	call   c001df06 <Vm::realToLinear(unsigned short, unsigned short)>
c001e14f:	5a                   	pop    edx
c001e150:	8b 17                	mov    edx,DWORD PTR [edi]
c001e152:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001e156:	51                   	push   ecx
c001e157:	50                   	push   eax
c001e158:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e15c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e160:	57                   	push   edi
c001e161:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001e164:	83 c4 14             	add    esp,0x14
c001e167:	57                   	push   edi
c001e168:	e8 a1 4d ff ff       	call   c0012f0e <File::close()>
c001e16d:	c6 05 05 ee 02 c0 00 	mov    BYTE PTR ds:0xc002ee05,0x0
c001e174:	e8 0d f1 ff ff       	call   c001d286 <unlockScheduler()>
c001e179:	59                   	pop    ecx
c001e17a:	ff 35 08 ee 02 c0    	push   DWORD PTR ds:0xc002ee08
c001e180:	e8 17 f7 ff ff       	call   c001d89c <unblockTask(ThreadControlBlock*)>
c001e185:	83 c4 10             	add    esp,0x10
c001e188:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001e18d:	83 c4 2c             	add    esp,0x2c
c001e190:	89 e8                	mov    eax,ebp
c001e192:	5b                   	pop    ebx
c001e193:	5e                   	pop    esi
c001e194:	5f                   	pop    edi
c001e195:	5d                   	pop    ebp
c001e196:	c3                   	ret    

c001e197 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001e197:	57                   	push   edi
c001e198:	56                   	push   esi
c001e199:	53                   	push   ebx
c001e19a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e19e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e1a2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e1a6:	83 e8 06             	sub    eax,0x6
c001e1a9:	0f b7 c0             	movzx  eax,ax
c001e1ac:	50                   	push   eax
c001e1ad:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001e1b2:	50                   	push   eax
c001e1b3:	e8 4e fd ff ff       	call   c001df06 <Vm::realToLinear(unsigned short, unsigned short)>
c001e1b8:	5a                   	pop    edx
c001e1b9:	5e                   	pop    esi
c001e1ba:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001e1bd:	8d 56 fa             	lea    edx,[esi-0x6]
c001e1c0:	81 e2 ff ff 00 00    	and    edx,0xffff
c001e1c6:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001e1c9:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001e1cc:	83 c2 02             	add    edx,0x2
c001e1cf:	66 89 10             	mov    WORD PTR [eax],dx
c001e1d2:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001e1d5:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001e1d9:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001e1dc:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001e1e0:	89 d6                	mov    esi,edx
c001e1e2:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001e1e8:	66 81 e6 ff fd       	and    si,0xfdff
c001e1ed:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001e1f1:	74 07                	je     c001e1fa <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001e1f3:	89 d6                	mov    esi,edx
c001e1f5:	66 81 ce 00 02       	or     si,0x200
c001e1fa:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001e1fe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e203:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001e207:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001e20f:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001e212:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001e21a:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001e21d:	5b                   	pop    ebx
c001e21e:	5e                   	pop    esi
c001e21f:	5f                   	pop    edi
c001e220:	c3                   	ret    

c001e221 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001e221:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e226:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e22b:	c1 e0 04             	shl    eax,0x4
c001e22e:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001e231:	c3                   	ret    

c001e232 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001e232:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e237:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e23c:	c1 e0 04             	shl    eax,0x4
c001e23f:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001e243:	c3                   	ret    

c001e244 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001e244:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e249:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e24e:	c1 e0 04             	shl    eax,0x4
c001e251:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001e254:	c3                   	ret    

c001e255 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001e255:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e25a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e25f:	c1 e0 04             	shl    eax,0x4
c001e262:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e266:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001e269:	c3                   	ret    

c001e26a <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001e26a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e26f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e274:	c1 e0 04             	shl    eax,0x4
c001e277:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e27b:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001e27f:	c3                   	ret    

c001e280 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001e280:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e285:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e28a:	c1 e0 04             	shl    eax,0x4
c001e28d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e291:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001e294:	c3                   	ret    

c001e295 <Vm::faultHandler(regs*)>:
c001e295:	55                   	push   ebp
c001e296:	57                   	push   edi
c001e297:	56                   	push   esi
c001e298:	53                   	push   ebx
c001e299:	83 ec 1c             	sub    esp,0x1c
c001e29c:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001e2a0:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001e2a3:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001e2a6:	0f b7 c1             	movzx  eax,cx
c001e2a9:	50                   	push   eax
c001e2aa:	0f b7 c3             	movzx  eax,bx
c001e2ad:	c1 e3 04             	shl    ebx,0x4
c001e2b0:	50                   	push   eax
c001e2b1:	e8 50 fc ff ff       	call   c001df06 <Vm::realToLinear(unsigned short, unsigned short)>
c001e2b6:	5a                   	pop    edx
c001e2b7:	89 c5                	mov    ebp,eax
c001e2b9:	5e                   	pop    esi
c001e2ba:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001e2be:	50                   	push   eax
c001e2bf:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001e2c3:	50                   	push   eax
c001e2c4:	e8 3d fc ff ff       	call   c001df06 <Vm::realToLinear(unsigned short, unsigned short)>
c001e2c9:	01 cb                	add    ebx,ecx
c001e2cb:	89 c6                	mov    esi,eax
c001e2cd:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001e2d1:	50                   	push   eax
c001e2d2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e2d6:	50                   	push   eax
c001e2d7:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001e2db:	50                   	push   eax
c001e2dc:	55                   	push   ebp
c001e2dd:	53                   	push   ebx
c001e2de:	b3 06                	mov    bl,0x6
c001e2e0:	68 85 b9 02 c0       	push   0xc002b985
c001e2e5:	e8 09 46 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001e2ea:	83 c4 20             	add    esp,0x20
c001e2ed:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001e2f2:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001e2f7:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001e2fb:	3c 9d                	cmp    al,0x9d
c001e2fd:	0f 84 d7 02 00 00    	je     c001e5da <Vm::faultHandler(regs*)+0x345>
c001e303:	0f 87 a3 00 00 00    	ja     c001e3ac <Vm::faultHandler(regs*)+0x117>
c001e309:	3c 66                	cmp    al,0x66
c001e30b:	0f 84 15 02 00 00    	je     c001e526 <Vm::faultHandler(regs*)+0x291>
c001e311:	77 5f                	ja     c001e372 <Vm::faultHandler(regs*)+0xdd>
c001e313:	3c 36                	cmp    al,0x36
c001e315:	0f 84 f1 01 00 00    	je     c001e50c <Vm::faultHandler(regs*)+0x277>
c001e31b:	77 28                	ja     c001e345 <Vm::faultHandler(regs*)+0xb0>
c001e31d:	3c 26                	cmp    al,0x26
c001e31f:	0f 84 99 01 00 00    	je     c001e4be <Vm::faultHandler(regs*)+0x229>
c001e325:	3c 2e                	cmp    al,0x2e
c001e327:	0f 85 3b 07 00 00    	jne    c001ea68 <Vm::faultHandler(regs*)+0x7d3>
c001e32d:	83 ec 0c             	sub    esp,0xc
c001e330:	31 db                	xor    ebx,ebx
c001e332:	68 9a b9 02 c0       	push   0xc002b99a
c001e337:	e8 b7 45 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001e33c:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e33f:	83 c4 10             	add    esp,0x10
c001e342:	45                   	inc    ebp
c001e343:	eb b2                	jmp    c001e2f7 <Vm::faultHandler(regs*)+0x62>
c001e345:	3c 64                	cmp    al,0x64
c001e347:	0f 84 8b 01 00 00    	je     c001e4d8 <Vm::faultHandler(regs*)+0x243>
c001e34d:	0f 87 9f 01 00 00    	ja     c001e4f2 <Vm::faultHandler(regs*)+0x25d>
c001e353:	3c 3e                	cmp    al,0x3e
c001e355:	0f 85 0d 07 00 00    	jne    c001ea68 <Vm::faultHandler(regs*)+0x7d3>
c001e35b:	83 ec 0c             	sub    esp,0xc
c001e35e:	b3 01                	mov    bl,0x1
c001e360:	68 9e b9 02 c0       	push   0xc002b99e
c001e365:	e8 89 45 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001e36a:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e36d:	83 c4 10             	add    esp,0x10
c001e370:	eb d0                	jmp    c001e342 <Vm::faultHandler(regs*)+0xad>
c001e372:	3c 6d                	cmp    al,0x6d
c001e374:	0f 84 af 03 00 00    	je     c001e729 <Vm::faultHandler(regs*)+0x494>
c001e37a:	77 15                	ja     c001e391 <Vm::faultHandler(regs*)+0xfc>
c001e37c:	3c 67                	cmp    al,0x67
c001e37e:	0f 84 bf 01 00 00    	je     c001e543 <Vm::faultHandler(regs*)+0x2ae>
c001e384:	3c 6c                	cmp    al,0x6c
c001e386:	0f 84 3f 03 00 00    	je     c001e6cb <Vm::faultHandler(regs*)+0x436>
c001e38c:	e9 d7 06 00 00       	jmp    c001ea68 <Vm::faultHandler(regs*)+0x7d3>
c001e391:	3c 6f                	cmp    al,0x6f
c001e393:	0f 84 a4 04 00 00    	je     c001e83d <Vm::faultHandler(regs*)+0x5a8>
c001e399:	0f 82 11 04 00 00    	jb     c001e7b0 <Vm::faultHandler(regs*)+0x51b>
c001e39f:	3c 9c                	cmp    al,0x9c
c001e3a1:	0f 84 ba 01 00 00    	je     c001e561 <Vm::faultHandler(regs*)+0x2cc>
c001e3a7:	e9 bc 06 00 00       	jmp    c001ea68 <Vm::faultHandler(regs*)+0x7d3>
c001e3ac:	3c ec                	cmp    al,0xec
c001e3ae:	0f 84 24 06 00 00    	je     c001e9d8 <Vm::faultHandler(regs*)+0x743>
c001e3b4:	0f 87 93 00 00 00    	ja     c001e44d <Vm::faultHandler(regs*)+0x1b8>
c001e3ba:	3c e4                	cmp    al,0xe4
c001e3bc:	0f 84 5c 05 00 00    	je     c001e91e <Vm::faultHandler(regs*)+0x689>
c001e3c2:	77 6a                	ja     c001e42e <Vm::faultHandler(regs*)+0x199>
c001e3c4:	3c cd                	cmp    al,0xcd
c001e3c6:	0f 84 7e 02 00 00    	je     c001e64a <Vm::faultHandler(regs*)+0x3b5>
c001e3cc:	3c cf                	cmp    al,0xcf
c001e3ce:	0f 85 94 06 00 00    	jne    c001ea68 <Vm::faultHandler(regs*)+0x7d3>
c001e3d4:	83 ec 0c             	sub    esp,0xc
c001e3d7:	68 e2 b9 02 c0       	push   0xc002b9e2
c001e3dc:	e8 12 45 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001e3e1:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001e3e4:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001e3e7:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001e3eb:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001e3ee:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001e3f2:	0d 00 02 02 00       	or     eax,0x20200
c001e3f7:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001e3fa:	56                   	push   esi
c001e3fb:	53                   	push   ebx
c001e3fc:	52                   	push   edx
c001e3fd:	68 e8 b9 02 c0       	push   0xc002b9e8
c001e402:	e8 ec 44 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001e407:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001e40b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e411:	66 c1 e8 09          	shr    ax,0x9
c001e415:	83 e0 01             	and    eax,0x1
c001e418:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001e41b:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001e41e:	83 c0 06             	add    eax,0x6
c001e421:	25 ff ff 00 00       	and    eax,0xffff
c001e426:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001e429:	e9 95 02 00 00       	jmp    c001e6c3 <Vm::faultHandler(regs*)+0x42e>
c001e42e:	3c e6                	cmp    al,0xe6
c001e430:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001e434:	0f 84 4e 05 00 00    	je     c001e988 <Vm::faultHandler(regs*)+0x6f3>
c001e43a:	0f 82 0a 05 00 00    	jb     c001e94a <Vm::faultHandler(regs*)+0x6b5>
c001e440:	3c e7                	cmp    al,0xe7
c001e442:	0f 84 69 05 00 00    	je     c001e9b1 <Vm::faultHandler(regs*)+0x71c>
c001e448:	e9 1b 06 00 00       	jmp    c001ea68 <Vm::faultHandler(regs*)+0x7d3>
c001e44d:	3c ef                	cmp    al,0xef
c001e44f:	0f 84 e6 05 00 00    	je     c001ea3b <Vm::faultHandler(regs*)+0x7a6>
c001e455:	77 37                	ja     c001e48e <Vm::faultHandler(regs*)+0x1f9>
c001e457:	3c ed                	cmp    al,0xed
c001e459:	0f 84 a3 05 00 00    	je     c001ea02 <Vm::faultHandler(regs*)+0x76d>
c001e45f:	3c ee                	cmp    al,0xee
c001e461:	0f 85 01 06 00 00    	jne    c001ea68 <Vm::faultHandler(regs*)+0x7d3>
c001e467:	52                   	push   edx
c001e468:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e46b:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001e46e:	68 83 ba 02 c0       	push   0xc002ba83
c001e473:	e8 7b 44 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001e478:	59                   	pop    ecx
c001e479:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001e47d:	5b                   	pop    ebx
c001e47e:	50                   	push   eax
c001e47f:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001e483:	50                   	push   eax
c001e484:	e8 2a fa ff ff       	call   c001deb3 <Vm::outbv(unsigned short, unsigned char)>
c001e489:	e9 a5 05 00 00       	jmp    c001ea33 <Vm::faultHandler(regs*)+0x79e>
c001e48e:	3c fa                	cmp    al,0xfa
c001e490:	0f 84 f7 01 00 00    	je     c001e68d <Vm::faultHandler(regs*)+0x3f8>
c001e496:	3c fb                	cmp    al,0xfb
c001e498:	0f 84 0a 02 00 00    	je     c001e6a8 <Vm::faultHandler(regs*)+0x413>
c001e49e:	3c f3                	cmp    al,0xf3
c001e4a0:	0f 85 c2 05 00 00    	jne    c001ea68 <Vm::faultHandler(regs*)+0x7d3>
c001e4a6:	83 ec 0c             	sub    esp,0xc
c001e4a9:	68 bb b9 02 c0       	push   0xc002b9bb
c001e4ae:	e8 40 44 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001e4b3:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e4b6:	83 c4 10             	add    esp,0x10
c001e4b9:	e9 84 fe ff ff       	jmp    c001e342 <Vm::faultHandler(regs*)+0xad>
c001e4be:	83 ec 0c             	sub    esp,0xc
c001e4c1:	b3 02                	mov    bl,0x2
c001e4c3:	68 96 b9 02 c0       	push   0xc002b996
c001e4c8:	e8 26 44 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001e4cd:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e4d0:	83 c4 10             	add    esp,0x10
c001e4d3:	e9 6a fe ff ff       	jmp    c001e342 <Vm::faultHandler(regs*)+0xad>
c001e4d8:	83 ec 0c             	sub    esp,0xc
c001e4db:	b3 03                	mov    bl,0x3
c001e4dd:	68 a2 b9 02 c0       	push   0xc002b9a2
c001e4e2:	e8 0c 44 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001e4e7:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e4ea:	83 c4 10             	add    esp,0x10
c001e4ed:	e9 50 fe ff ff       	jmp    c001e342 <Vm::faultHandler(regs*)+0xad>
c001e4f2:	83 ec 0c             	sub    esp,0xc
c001e4f5:	b3 04                	mov    bl,0x4
c001e4f7:	68 a6 b9 02 c0       	push   0xc002b9a6
c001e4fc:	e8 f2 43 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001e501:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e504:	83 c4 10             	add    esp,0x10
c001e507:	e9 36 fe ff ff       	jmp    c001e342 <Vm::faultHandler(regs*)+0xad>
c001e50c:	83 ec 0c             	sub    esp,0xc
c001e50f:	b3 05                	mov    bl,0x5
c001e511:	68 aa b9 02 c0       	push   0xc002b9aa
c001e516:	e8 d8 43 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001e51b:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e51e:	83 c4 10             	add    esp,0x10
c001e521:	e9 1c fe ff ff       	jmp    c001e342 <Vm::faultHandler(regs*)+0xad>
c001e526:	83 ec 0c             	sub    esp,0xc
c001e529:	68 ae b9 02 c0       	push   0xc002b9ae
c001e52e:	e8 c0 43 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001e533:	83 c4 10             	add    esp,0x10
c001e536:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e539:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001e53e:	e9 ff fd ff ff       	jmp    c001e342 <Vm::faultHandler(regs*)+0xad>
c001e543:	50                   	push   eax
c001e544:	50                   	push   eax
c001e545:	6a 01                	push   0x1
c001e547:	68 b3 b9 02 c0       	push   0xc002b9b3
c001e54c:	e8 a2 43 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001e551:	83 c4 10             	add    esp,0x10
c001e554:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e557:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001e55c:	e9 e1 fd ff ff       	jmp    c001e342 <Vm::faultHandler(regs*)+0xad>
c001e561:	83 ec 0c             	sub    esp,0xc
c001e564:	68 c1 b9 02 c0       	push   0xc002b9c1
c001e569:	e8 85 43 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001e56e:	83 c4 10             	add    esp,0x10
c001e571:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001e574:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e579:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001e57c:	74 2f                	je     c001e5ad <Vm::faultHandler(regs*)+0x318>
c001e57e:	83 ea 04             	sub    edx,0x4
c001e581:	25 ff 0d 00 00       	and    eax,0xdff
c001e586:	81 e2 ff ff 00 00    	and    edx,0xffff
c001e58c:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001e58f:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001e592:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e598:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001e59c:	0f 84 bf 04 00 00    	je     c001ea61 <Vm::faultHandler(regs*)+0x7cc>
c001e5a2:	80 cc 02             	or     ah,0x2
c001e5a5:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001e5a8:	e9 b4 04 00 00       	jmp    c001ea61 <Vm::faultHandler(regs*)+0x7cc>
c001e5ad:	83 ea 02             	sub    edx,0x2
c001e5b0:	81 e2 ff ff 00 00    	and    edx,0xffff
c001e5b6:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001e5b9:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001e5bd:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e5c3:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001e5c7:	74 05                	je     c001e5ce <Vm::faultHandler(regs*)+0x339>
c001e5c9:	80 cc 02             	or     ah,0x2
c001e5cc:	eb 03                	jmp    c001e5d1 <Vm::faultHandler(regs*)+0x33c>
c001e5ce:	80 e4 fd             	and    ah,0xfd
c001e5d1:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001e5d5:	e9 87 04 00 00       	jmp    c001ea61 <Vm::faultHandler(regs*)+0x7cc>
c001e5da:	83 ec 0c             	sub    esp,0xc
c001e5dd:	68 c8 b9 02 c0       	push   0xc002b9c8
c001e5e2:	e8 0c 43 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001e5e7:	83 c4 10             	add    esp,0x10
c001e5ea:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e5ef:	74 28                	je     c001e619 <Vm::faultHandler(regs*)+0x384>
c001e5f1:	8b 06                	mov    eax,DWORD PTR [esi]
c001e5f3:	25 ff 0d 00 00       	and    eax,0xdff
c001e5f8:	0d 00 02 02 00       	or     eax,0x20200
c001e5fd:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001e600:	8b 06                	mov    eax,DWORD PTR [esi]
c001e602:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e608:	c1 e8 09             	shr    eax,0x9
c001e60b:	83 e0 01             	and    eax,0x1
c001e60e:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001e611:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001e614:	83 c0 04             	add    eax,0x4
c001e617:	eb 24                	jmp    c001e63d <Vm::faultHandler(regs*)+0x3a8>
c001e619:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001e61c:	0d 00 02 02 00       	or     eax,0x20200
c001e621:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001e624:	66 8b 06             	mov    ax,WORD PTR [esi]
c001e627:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e62d:	66 c1 e8 09          	shr    ax,0x9
c001e631:	83 e0 01             	and    eax,0x1
c001e634:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001e637:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001e63a:	83 c0 02             	add    eax,0x2
c001e63d:	25 ff ff 00 00       	and    eax,0xffff
c001e642:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001e645:	e9 17 04 00 00       	jmp    c001ea61 <Vm::faultHandler(regs*)+0x7cc>
c001e64a:	53                   	push   ebx
c001e64b:	53                   	push   ebx
c001e64c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e650:	50                   	push   eax
c001e651:	68 ce b9 02 c0       	push   0xc002b9ce
c001e656:	e8 98 42 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001e65b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e65f:	83 c4 10             	add    esp,0x10
c001e662:	3c ee                	cmp    al,0xee
c001e664:	75 10                	jne    c001e676 <Vm::faultHandler(regs*)+0x3e1>
c001e666:	83 ec 0c             	sub    esp,0xc
c001e669:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e66c:	e8 fa f8 ff ff       	call   c001df6b <Vm::mainloop3(unsigned long)>
c001e671:	e9 c0 03 00 00       	jmp    c001ea36 <Vm::faultHandler(regs*)+0x7a1>
c001e676:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001e67a:	83 ec 0c             	sub    esp,0xc
c001e67d:	53                   	push   ebx
c001e67e:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001e682:	53                   	push   ebx
c001e683:	55                   	push   ebp
c001e684:	50                   	push   eax
c001e685:	57                   	push   edi
c001e686:	e8 0c fb ff ff       	call   c001e197 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001e68b:	eb 36                	jmp    c001e6c3 <Vm::faultHandler(regs*)+0x42e>
c001e68d:	83 ec 0c             	sub    esp,0xc
c001e690:	68 d8 b9 02 c0       	push   0xc002b9d8
c001e695:	e8 59 42 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001e69a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e69f:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001e6a3:	e9 8b 03 00 00       	jmp    c001ea33 <Vm::faultHandler(regs*)+0x79e>
c001e6a8:	83 ec 0c             	sub    esp,0xc
c001e6ab:	68 dd b9 02 c0       	push   0xc002b9dd
c001e6b0:	e8 3e 42 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001e6b5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e6ba:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001e6be:	e9 70 03 00 00       	jmp    c001ea33 <Vm::faultHandler(regs*)+0x79e>
c001e6c3:	83 c4 20             	add    esp,0x20
c001e6c6:	e9 99 03 00 00       	jmp    c001ea64 <Vm::faultHandler(regs*)+0x7cf>
c001e6cb:	83 ec 0c             	sub    esp,0xc
c001e6ce:	68 1b ba 02 c0       	push   0xc002ba1b
c001e6d3:	e8 1b 42 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001e6d8:	83 c4 10             	add    esp,0x10
c001e6db:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001e6de:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e6e3:	74 0d                	je     c001e6f2 <Vm::faultHandler(regs*)+0x45d>
c001e6e5:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001e6ec:	0f 87 9e 01 00 00    	ja     c001e890 <Vm::faultHandler(regs*)+0x5fb>
c001e6f2:	83 ec 0c             	sub    esp,0xc
c001e6f5:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001e6f9:	0f b7 db             	movzx  ebx,bx
c001e6fc:	50                   	push   eax
c001e6fd:	e8 9e f7 ff ff       	call   c001dea0 <Vm::inbv(unsigned short)>
c001e702:	83 c4 0c             	add    esp,0xc
c001e705:	0f b6 c0             	movzx  eax,al
c001e708:	50                   	push   eax
c001e709:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001e70d:	50                   	push   eax
c001e70e:	53                   	push   ebx
c001e70f:	e8 41 fb ff ff       	call   c001e255 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001e714:	83 c4 10             	add    esp,0x10
c001e717:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001e71a:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001e71e:	74 03                	je     c001e723 <Vm::faultHandler(regs*)+0x48e>
c001e720:	48                   	dec    eax
c001e721:	eb 01                	jmp    c001e724 <Vm::faultHandler(regs*)+0x48f>
c001e723:	40                   	inc    eax
c001e724:	0f b7 c0             	movzx  eax,ax
c001e727:	eb 7f                	jmp    c001e7a8 <Vm::faultHandler(regs*)+0x513>
c001e729:	83 ec 0c             	sub    esp,0xc
c001e72c:	68 4d ba 02 c0       	push   0xc002ba4d
c001e731:	e8 bd 41 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001e736:	83 c4 10             	add    esp,0x10
c001e739:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001e73c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e741:	74 0d                	je     c001e750 <Vm::faultHandler(regs*)+0x4bb>
c001e743:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001e74a:	0f 87 40 01 00 00    	ja     c001e890 <Vm::faultHandler(regs*)+0x5fb>
c001e750:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001e753:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001e757:	0f b7 db             	movzx  ebx,bx
c001e75a:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e75f:	74 20                	je     c001e781 <Vm::faultHandler(regs*)+0x4ec>
c001e761:	ed                   	in     eax,dx
c001e762:	51                   	push   ecx
c001e763:	50                   	push   eax
c001e764:	56                   	push   esi
c001e765:	53                   	push   ebx
c001e766:	e8 15 fb ff ff       	call   c001e280 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001e76b:	83 c4 10             	add    esp,0x10
c001e76e:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001e771:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001e775:	74 05                	je     c001e77c <Vm::faultHandler(regs*)+0x4e7>
c001e777:	83 e8 04             	sub    eax,0x4
c001e77a:	eb 27                	jmp    c001e7a3 <Vm::faultHandler(regs*)+0x50e>
c001e77c:	83 c0 04             	add    eax,0x4
c001e77f:	eb 22                	jmp    c001e7a3 <Vm::faultHandler(regs*)+0x50e>
c001e781:	66 ed                	in     ax,dx
c001e783:	0f b7 c0             	movzx  eax,ax
c001e786:	52                   	push   edx
c001e787:	50                   	push   eax
c001e788:	56                   	push   esi
c001e789:	53                   	push   ebx
c001e78a:	e8 db fa ff ff       	call   c001e26a <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001e78f:	83 c4 10             	add    esp,0x10
c001e792:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001e795:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001e799:	74 05                	je     c001e7a0 <Vm::faultHandler(regs*)+0x50b>
c001e79b:	83 e8 02             	sub    eax,0x2
c001e79e:	eb 03                	jmp    c001e7a3 <Vm::faultHandler(regs*)+0x50e>
c001e7a0:	83 c0 02             	add    eax,0x2
c001e7a3:	25 ff ff 00 00       	and    eax,0xffff
c001e7a8:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001e7ab:	e9 b1 02 00 00       	jmp    c001ea61 <Vm::faultHandler(regs*)+0x7cc>
c001e7b0:	83 ec 0c             	sub    esp,0xc
c001e7b3:	4b                   	dec    ebx
c001e7b4:	68 53 ba 02 c0       	push   0xc002ba53
c001e7b9:	e8 35 41 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001e7be:	83 c4 10             	add    esp,0x10
c001e7c1:	80 fb 05             	cmp    bl,0x5
c001e7c4:	77 0a                	ja     c001e7d0 <Vm::faultHandler(regs*)+0x53b>
c001e7c6:	0f b6 db             	movzx  ebx,bl
c001e7c9:	ff 24 9d c4 ba 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd453c]
c001e7d0:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001e7d4:	eb 1b                	jmp    c001e7f1 <Vm::faultHandler(regs*)+0x55c>
c001e7d6:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001e7da:	eb 15                	jmp    c001e7f1 <Vm::faultHandler(regs*)+0x55c>
c001e7dc:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001e7e0:	eb 0f                	jmp    c001e7f1 <Vm::faultHandler(regs*)+0x55c>
c001e7e2:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001e7e6:	eb 09                	jmp    c001e7f1 <Vm::faultHandler(regs*)+0x55c>
c001e7e8:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001e7eb:	eb 04                	jmp    c001e7f1 <Vm::faultHandler(regs*)+0x55c>
c001e7ed:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001e7f1:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e7f6:	74 0d                	je     c001e805 <Vm::faultHandler(regs*)+0x570>
c001e7f8:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001e7ff:	0f 87 8b 00 00 00    	ja     c001e890 <Vm::faultHandler(regs*)+0x5fb>
c001e805:	53                   	push   ebx
c001e806:	53                   	push   ebx
c001e807:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001e80b:	52                   	push   edx
c001e80c:	50                   	push   eax
c001e80d:	e8 0f fa ff ff       	call   c001e221 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001e812:	5e                   	pop    esi
c001e813:	0f b6 c0             	movzx  eax,al
c001e816:	5d                   	pop    ebp
c001e817:	50                   	push   eax
c001e818:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001e81c:	50                   	push   eax
c001e81d:	e8 91 f6 ff ff       	call   c001deb3 <Vm::outbv(unsigned short, unsigned char)>
c001e822:	83 c4 10             	add    esp,0x10
c001e825:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001e828:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001e82c:	74 03                	je     c001e831 <Vm::faultHandler(regs*)+0x59c>
c001e82e:	48                   	dec    eax
c001e82f:	eb 01                	jmp    c001e832 <Vm::faultHandler(regs*)+0x59d>
c001e831:	40                   	inc    eax
c001e832:	0f b7 c0             	movzx  eax,ax
c001e835:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001e838:	e9 24 02 00 00       	jmp    c001ea61 <Vm::faultHandler(regs*)+0x7cc>
c001e83d:	83 ec 0c             	sub    esp,0xc
c001e840:	4b                   	dec    ebx
c001e841:	68 53 ba 02 c0       	push   0xc002ba53
c001e846:	e8 a8 40 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001e84b:	83 c4 10             	add    esp,0x10
c001e84e:	80 fb 05             	cmp    bl,0x5
c001e851:	77 0a                	ja     c001e85d <Vm::faultHandler(regs*)+0x5c8>
c001e853:	0f b6 db             	movzx  ebx,bl
c001e856:	ff 24 9d dc ba 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd4524]
c001e85d:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001e861:	eb 1b                	jmp    c001e87e <Vm::faultHandler(regs*)+0x5e9>
c001e863:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001e867:	eb 15                	jmp    c001e87e <Vm::faultHandler(regs*)+0x5e9>
c001e869:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001e86d:	eb 0f                	jmp    c001e87e <Vm::faultHandler(regs*)+0x5e9>
c001e86f:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001e873:	eb 09                	jmp    c001e87e <Vm::faultHandler(regs*)+0x5e9>
c001e875:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001e878:	eb 04                	jmp    c001e87e <Vm::faultHandler(regs*)+0x5e9>
c001e87a:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001e87e:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001e881:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e886:	74 39                	je     c001e8c1 <Vm::faultHandler(regs*)+0x62c>
c001e888:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001e88e:	76 31                	jbe    c001e8c1 <Vm::faultHandler(regs*)+0x62c>
c001e890:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001e894:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001e898:	51                   	push   ecx
c001e899:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001e89d:	51                   	push   ecx
c001e89e:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001e8a2:	51                   	push   ecx
c001e8a3:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001e8a7:	51                   	push   ecx
c001e8a8:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e8ac:	52                   	push   edx
c001e8ad:	50                   	push   eax
c001e8ae:	50                   	push   eax
c001e8af:	68 20 ba 02 c0       	push   0xc002ba20
c001e8b4:	e8 3a 40 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001e8b9:	83 c4 20             	add    esp,0x20
c001e8bc:	e9 fb 01 00 00       	jmp    c001eabc <Vm::faultHandler(regs*)+0x827>
c001e8c1:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001e8c4:	0f b7 d3             	movzx  edx,bx
c001e8c7:	81 e6 00 04 00 00    	and    esi,0x400
c001e8cd:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001e8d0:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e8d5:	74 1d                	je     c001e8f4 <Vm::faultHandler(regs*)+0x65f>
c001e8d7:	51                   	push   ecx
c001e8d8:	51                   	push   ecx
c001e8d9:	52                   	push   edx
c001e8da:	50                   	push   eax
c001e8db:	e8 64 f9 ff ff       	call   c001e244 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001e8e0:	83 c4 10             	add    esp,0x10
c001e8e3:	89 ea                	mov    edx,ebp
c001e8e5:	ef                   	out    dx,eax
c001e8e6:	85 f6                	test   esi,esi
c001e8e8:	74 05                	je     c001e8ef <Vm::faultHandler(regs*)+0x65a>
c001e8ea:	83 eb 04             	sub    ebx,0x4
c001e8ed:	eb 21                	jmp    c001e910 <Vm::faultHandler(regs*)+0x67b>
c001e8ef:	83 c3 04             	add    ebx,0x4
c001e8f2:	eb 1c                	jmp    c001e910 <Vm::faultHandler(regs*)+0x67b>
c001e8f4:	51                   	push   ecx
c001e8f5:	51                   	push   ecx
c001e8f6:	52                   	push   edx
c001e8f7:	50                   	push   eax
c001e8f8:	e8 35 f9 ff ff       	call   c001e232 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001e8fd:	83 c4 10             	add    esp,0x10
c001e900:	89 ea                	mov    edx,ebp
c001e902:	66 ef                	out    dx,ax
c001e904:	85 f6                	test   esi,esi
c001e906:	74 05                	je     c001e90d <Vm::faultHandler(regs*)+0x678>
c001e908:	83 eb 02             	sub    ebx,0x2
c001e90b:	eb 03                	jmp    c001e910 <Vm::faultHandler(regs*)+0x67b>
c001e90d:	83 c3 02             	add    ebx,0x2
c001e910:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001e916:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001e919:	e9 43 01 00 00       	jmp    c001ea61 <Vm::faultHandler(regs*)+0x7cc>
c001e91e:	53                   	push   ebx
c001e91f:	53                   	push   ebx
c001e920:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e924:	50                   	push   eax
c001e925:	68 59 ba 02 c0       	push   0xc002ba59
c001e92a:	e8 c4 3f ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001e92f:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001e936:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e93a:	89 04 24             	mov    DWORD PTR [esp],eax
c001e93d:	e8 5e f5 ff ff       	call   c001dea0 <Vm::inbv(unsigned short)>
c001e942:	0f b6 c0             	movzx  eax,al
c001e945:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001e948:	eb 5e                	jmp    c001e9a8 <Vm::faultHandler(regs*)+0x713>
c001e94a:	51                   	push   ecx
c001e94b:	51                   	push   ecx
c001e94c:	53                   	push   ebx
c001e94d:	68 5f ba 02 c0       	push   0xc002ba5f
c001e952:	e8 9c 3f ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001e957:	83 c4 10             	add    esp,0x10
c001e95a:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e95f:	74 07                	je     c001e968 <Vm::faultHandler(regs*)+0x6d3>
c001e961:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e965:	ed                   	in     eax,dx
c001e966:	eb 14                	jmp    c001e97c <Vm::faultHandler(regs*)+0x6e7>
c001e968:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001e96b:	66 31 db             	xor    bx,bx
c001e96e:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001e971:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e975:	66 ed                	in     ax,dx
c001e977:	0f b7 c0             	movzx  eax,ax
c001e97a:	09 d8                	or     eax,ebx
c001e97c:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001e97f:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001e983:	e9 dc 00 00 00       	jmp    c001ea64 <Vm::faultHandler(regs*)+0x7cf>
c001e988:	50                   	push   eax
c001e989:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e98c:	53                   	push   ebx
c001e98d:	68 65 ba 02 c0       	push   0xc002ba65
c001e992:	e8 5c 3f ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001e997:	58                   	pop    eax
c001e998:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001e99c:	5a                   	pop    edx
c001e99d:	50                   	push   eax
c001e99e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e9a2:	50                   	push   eax
c001e9a3:	e8 0b f5 ff ff       	call   c001deb3 <Vm::outbv(unsigned short, unsigned char)>
c001e9a8:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001e9ac:	e9 85 00 00 00       	jmp    c001ea36 <Vm::faultHandler(regs*)+0x7a1>
c001e9b1:	50                   	push   eax
c001e9b2:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e9b5:	53                   	push   ebx
c001e9b6:	68 6e ba 02 c0       	push   0xc002ba6e
c001e9bb:	e8 33 3f ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001e9c0:	83 c4 10             	add    esp,0x10
c001e9c3:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e9c7:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e9cc:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001e9cf:	74 03                	je     c001e9d4 <Vm::faultHandler(regs*)+0x73f>
c001e9d1:	ef                   	out    dx,eax
c001e9d2:	eb ab                	jmp    c001e97f <Vm::faultHandler(regs*)+0x6ea>
c001e9d4:	66 ef                	out    dx,ax
c001e9d6:	eb a7                	jmp    c001e97f <Vm::faultHandler(regs*)+0x6ea>
c001e9d8:	55                   	push   ebp
c001e9d9:	55                   	push   ebp
c001e9da:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001e9dd:	68 77 ba 02 c0       	push   0xc002ba77
c001e9e2:	e8 0c 3f ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001e9e7:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001e9ee:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001e9f2:	89 04 24             	mov    DWORD PTR [esp],eax
c001e9f5:	e8 a6 f4 ff ff       	call   c001dea0 <Vm::inbv(unsigned short)>
c001e9fa:	0f b6 c0             	movzx  eax,al
c001e9fd:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001ea00:	eb 31                	jmp    c001ea33 <Vm::faultHandler(regs*)+0x79e>
c001ea02:	56                   	push   esi
c001ea03:	56                   	push   esi
c001ea04:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001ea07:	68 7d ba 02 c0       	push   0xc002ba7d
c001ea0c:	e8 e2 3e ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001ea11:	83 c4 10             	add    esp,0x10
c001ea14:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001ea17:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001ea1c:	74 03                	je     c001ea21 <Vm::faultHandler(regs*)+0x78c>
c001ea1e:	ed                   	in     eax,dx
c001ea1f:	eb 0d                	jmp    c001ea2e <Vm::faultHandler(regs*)+0x799>
c001ea21:	66 ed                	in     ax,dx
c001ea23:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001ea26:	0f b7 c0             	movzx  eax,ax
c001ea29:	66 31 d2             	xor    dx,dx
c001ea2c:	09 d0                	or     eax,edx
c001ea2e:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001ea31:	eb 2e                	jmp    c001ea61 <Vm::faultHandler(regs*)+0x7cc>
c001ea33:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ea36:	83 c4 10             	add    esp,0x10
c001ea39:	eb 29                	jmp    c001ea64 <Vm::faultHandler(regs*)+0x7cf>
c001ea3b:	50                   	push   eax
c001ea3c:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001ea3f:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001ea42:	68 8c ba 02 c0       	push   0xc002ba8c
c001ea47:	e8 a7 3e ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001ea4c:	83 c4 10             	add    esp,0x10
c001ea4f:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001ea52:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001ea57:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001ea5a:	74 03                	je     c001ea5f <Vm::faultHandler(regs*)+0x7ca>
c001ea5c:	ef                   	out    dx,eax
c001ea5d:	eb 02                	jmp    c001ea61 <Vm::faultHandler(regs*)+0x7cc>
c001ea5f:	66 ef                	out    dx,ax
c001ea61:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ea64:	b0 01                	mov    al,0x1
c001ea66:	eb 56                	jmp    c001eabe <Vm::faultHandler(regs*)+0x829>
c001ea68:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001ea6c:	51                   	push   ecx
c001ea6d:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001ea71:	51                   	push   ecx
c001ea72:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001ea76:	51                   	push   ecx
c001ea77:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001ea7b:	51                   	push   ecx
c001ea7c:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001ea80:	52                   	push   edx
c001ea81:	50                   	push   eax
c001ea82:	50                   	push   eax
c001ea83:	68 95 ba 02 c0       	push   0xc002ba95
c001ea88:	e8 66 3e ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001ea8d:	83 c4 20             	add    esp,0x20
c001ea90:	83 ec 0c             	sub    esp,0xc
c001ea93:	6a 60                	push   0x60
c001ea95:	e8 06 f4 ff ff       	call   c001dea0 <Vm::inbv(unsigned short)>
c001ea9a:	83 c4 10             	add    esp,0x10
c001ea9d:	3c 1c                	cmp    al,0x1c
c001ea9f:	74 04                	je     c001eaa5 <Vm::faultHandler(regs*)+0x810>
c001eaa1:	3c 5a                	cmp    al,0x5a
c001eaa3:	75 eb                	jne    c001ea90 <Vm::faultHandler(regs*)+0x7fb>
c001eaa5:	3c 1c                	cmp    al,0x1c
c001eaa7:	74 04                	je     c001eaad <Vm::faultHandler(regs*)+0x818>
c001eaa9:	3c 5a                	cmp    al,0x5a
c001eaab:	75 0f                	jne    c001eabc <Vm::faultHandler(regs*)+0x827>
c001eaad:	83 ec 0c             	sub    esp,0xc
c001eab0:	6a 60                	push   0x60
c001eab2:	e8 e9 f3 ff ff       	call   c001dea0 <Vm::inbv(unsigned short)>
c001eab7:	83 c4 10             	add    esp,0x10
c001eaba:	eb e9                	jmp    c001eaa5 <Vm::faultHandler(regs*)+0x810>
c001eabc:	31 c0                	xor    eax,eax
c001eabe:	83 c4 1c             	add    esp,0x1c
c001eac1:	5b                   	pop    ebx
c001eac2:	5e                   	pop    esi
c001eac3:	5f                   	pop    edi
c001eac4:	5d                   	pop    ebp
c001eac5:	c3                   	ret    

c001eac6 <Vm::fpuInternalTo32(unsigned long long)>:
c001eac6:	57                   	push   edi
c001eac7:	56                   	push   esi
c001eac8:	53                   	push   ebx
c001eac9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eacd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ead1:	89 d6                	mov    esi,edx
c001ead3:	89 d7                	mov    edi,edx
c001ead5:	89 c1                	mov    ecx,eax
c001ead7:	c1 ef 14             	shr    edi,0x14
c001eada:	89 d3                	mov    ebx,edx
c001eadc:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001eae2:	31 d2                	xor    edx,edx
c001eae4:	89 f8                	mov    eax,edi
c001eae6:	81 e6 00 00 00 80    	and    esi,0x80000000
c001eaec:	bf ff 00 00 00       	mov    edi,0xff
c001eaf1:	05 80 fc ff ff       	add    eax,0xfffffc80
c001eaf6:	83 d2 ff             	adc    edx,0xffffffff
c001eaf9:	39 c7                	cmp    edi,eax
c001eafb:	bf 00 00 00 00       	mov    edi,0x0
c001eb00:	19 d7                	sbb    edi,edx
c001eb02:	72 15                	jb     c001eb19 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001eb04:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001eb08:	c1 e0 17             	shl    eax,0x17
c001eb0b:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001eb11:	09 f1                	or     ecx,esi
c001eb13:	09 c1                	or     ecx,eax
c001eb15:	89 cf                	mov    edi,ecx
c001eb17:	eb 02                	jmp    c001eb1b <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001eb19:	31 ff                	xor    edi,edi
c001eb1b:	89 f8                	mov    eax,edi
c001eb1d:	5b                   	pop    ebx
c001eb1e:	5e                   	pop    esi
c001eb1f:	5f                   	pop    edi
c001eb20:	c3                   	ret    

c001eb21 <Vm::fpuInternalTo64(unsigned long long)>:
c001eb21:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb25:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001eb29:	c3                   	ret    

c001eb2a <Vm::fpu32ToInternal(unsigned int)>:
c001eb2a:	57                   	push   edi
c001eb2b:	31 ff                	xor    edi,edi
c001eb2d:	56                   	push   esi
c001eb2e:	53                   	push   ebx
c001eb2f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001eb33:	89 cb                	mov    ebx,ecx
c001eb35:	89 ce                	mov    esi,ecx
c001eb37:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001eb3d:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001eb43:	c1 e9 17             	shr    ecx,0x17
c001eb46:	89 f0                	mov    eax,esi
c001eb48:	0f b6 d1             	movzx  edx,cl
c001eb4b:	81 c2 80 03 00 00    	add    edx,0x380
c001eb51:	89 d1                	mov    ecx,edx
c001eb53:	89 fa                	mov    edx,edi
c001eb55:	c1 e1 14             	shl    ecx,0x14
c001eb58:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001eb5c:	c1 e0 1d             	shl    eax,0x1d
c001eb5f:	89 d7                	mov    edi,edx
c001eb61:	89 c6                	mov    esi,eax
c001eb63:	89 ca                	mov    edx,ecx
c001eb65:	89 f0                	mov    eax,esi
c001eb67:	09 fa                	or     edx,edi
c001eb69:	09 da                	or     edx,ebx
c001eb6b:	5b                   	pop    ebx
c001eb6c:	5e                   	pop    esi
c001eb6d:	5f                   	pop    edi
c001eb6e:	c3                   	ret    

c001eb6f <Vm::fpu64ToInternal(unsigned long long)>:
c001eb6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb73:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001eb77:	c3                   	ret    

c001eb78 <Vm::fpuFloatToLong(unsigned long long)>:
c001eb78:	57                   	push   edi
c001eb79:	31 c0                	xor    eax,eax
c001eb7b:	56                   	push   esi
c001eb7c:	31 d2                	xor    edx,edx
c001eb7e:	53                   	push   ebx
c001eb7f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001eb83:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001eb87:	89 d9                	mov    ecx,ebx
c001eb89:	c1 e9 14             	shr    ecx,0x14
c001eb8c:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001eb92:	89 cf                	mov    edi,ecx
c001eb94:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001eb9a:	78 33                	js     c001ebcf <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001eb9c:	89 d9                	mov    ecx,ebx
c001eb9e:	89 f0                	mov    eax,esi
c001eba0:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001eba6:	81 c9 00 00 10 00    	or     ecx,0x100000
c001ebac:	89 ca                	mov    edx,ecx
c001ebae:	b9 34 00 00 00       	mov    ecx,0x34
c001ebb3:	29 f9                	sub    ecx,edi
c001ebb5:	0f ad d0             	shrd   eax,edx,cl
c001ebb8:	d3 fa                	sar    edx,cl
c001ebba:	f6 c1 20             	test   cl,0x20
c001ebbd:	74 05                	je     c001ebc4 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001ebbf:	89 d0                	mov    eax,edx
c001ebc1:	c1 fa 1f             	sar    edx,0x1f
c001ebc4:	85 db                	test   ebx,ebx
c001ebc6:	79 07                	jns    c001ebcf <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001ebc8:	f7 d8                	neg    eax
c001ebca:	83 d2 00             	adc    edx,0x0
c001ebcd:	f7 da                	neg    edx
c001ebcf:	5b                   	pop    ebx
c001ebd0:	5e                   	pop    esi
c001ebd1:	5f                   	pop    edi
c001ebd2:	c3                   	ret    

c001ebd3 <Vm::fpuULongToFloat(unsigned long long)>:
c001ebd3:	57                   	push   edi
c001ebd4:	31 c9                	xor    ecx,ecx
c001ebd6:	56                   	push   esi
c001ebd7:	53                   	push   ebx
c001ebd8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ebdc:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001ebe0:	0f ba e7 14          	bt     edi,0x14
c001ebe4:	72 07                	jb     c001ebed <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001ebe6:	01 f6                	add    esi,esi
c001ebe8:	11 ff                	adc    edi,edi
c001ebea:	41                   	inc    ecx
c001ebeb:	eb f3                	jmp    c001ebe0 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001ebed:	89 fa                	mov    edx,edi
c001ebef:	89 f0                	mov    eax,esi
c001ebf1:	bb 33 04 00 00       	mov    ebx,0x433
c001ebf6:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001ebfc:	29 cb                	sub    ebx,ecx
c001ebfe:	89 d9                	mov    ecx,ebx
c001ec00:	5b                   	pop    ebx
c001ec01:	c1 e1 14             	shl    ecx,0x14
c001ec04:	5e                   	pop    esi
c001ec05:	09 ca                	or     edx,ecx
c001ec07:	5f                   	pop    edi
c001ec08:	c3                   	ret    

c001ec09 <Vm::fpuLongToFloat(long long)>:
c001ec09:	56                   	push   esi
c001ec0a:	31 c0                	xor    eax,eax
c001ec0c:	53                   	push   ebx
c001ec0d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ec11:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ec15:	39 c8                	cmp    eax,ecx
c001ec17:	19 d8                	sbb    eax,ebx
c001ec19:	7d 04                	jge    c001ec1f <Vm::fpuLongToFloat(long long)+0x16>
c001ec1b:	31 f6                	xor    esi,esi
c001ec1d:	eb 0c                	jmp    c001ec2b <Vm::fpuLongToFloat(long long)+0x22>
c001ec1f:	f7 d9                	neg    ecx
c001ec21:	be 01 00 00 00       	mov    esi,0x1
c001ec26:	83 d3 00             	adc    ebx,0x0
c001ec29:	f7 db                	neg    ebx
c001ec2b:	31 c0                	xor    eax,eax
c001ec2d:	0f ba e3 14          	bt     ebx,0x14
c001ec31:	72 07                	jb     c001ec3a <Vm::fpuLongToFloat(long long)+0x31>
c001ec33:	01 c9                	add    ecx,ecx
c001ec35:	11 db                	adc    ebx,ebx
c001ec37:	40                   	inc    eax
c001ec38:	eb f3                	jmp    c001ec2d <Vm::fpuLongToFloat(long long)+0x24>
c001ec3a:	ba 33 04 00 00       	mov    edx,0x433
c001ec3f:	29 c2                	sub    edx,eax
c001ec41:	89 c8                	mov    eax,ecx
c001ec43:	c1 e2 14             	shl    edx,0x14
c001ec46:	89 d9                	mov    ecx,ebx
c001ec48:	89 f3                	mov    ebx,esi
c001ec4a:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001ec50:	09 ca                	or     edx,ecx
c001ec52:	84 db                	test   bl,bl
c001ec54:	74 06                	je     c001ec5c <Vm::fpuLongToFloat(long long)+0x53>
c001ec56:	81 ca 00 00 00 80    	or     edx,0x80000000
c001ec5c:	5b                   	pop    ebx
c001ec5d:	5e                   	pop    esi
c001ec5e:	c3                   	ret    

c001ec5f <Vm::fpuGet0()>:
c001ec5f:	31 c0                	xor    eax,eax
c001ec61:	31 d2                	xor    edx,edx
c001ec63:	c3                   	ret    

c001ec64 <Vm::fpuGet1()>:
c001ec64:	b8 01 00 00 00       	mov    eax,0x1
c001ec69:	31 d2                	xor    edx,edx
c001ec6b:	c3                   	ret    

c001ec6c <Vm::fpuGetPi()>:
c001ec6c:	b8 03 00 00 00       	mov    eax,0x3
c001ec71:	31 d2                	xor    edx,edx
c001ec73:	c3                   	ret    

c001ec74 <Vm::fpuGetLog2E()>:
c001ec74:	83 ec 18             	sub    esp,0x18
c001ec77:	68 f4 ba 02 c0       	push   0xc002baf4
c001ec7c:	e8 cc af ff ff       	call   c0019c4d <Krnl::panic(char const*)>
c001ec81:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001ec86:	31 d2                	xor    edx,edx
c001ec88:	83 c4 1c             	add    esp,0x1c
c001ec8b:	c3                   	ret    

c001ec8c <Vm::fpuGetLogE2()>:
c001ec8c:	83 ec 18             	sub    esp,0x18
c001ec8f:	68 00 bb 02 c0       	push   0xc002bb00
c001ec94:	e8 b4 af ff ff       	call   c0019c4d <Krnl::panic(char const*)>
c001ec99:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001ec9e:	31 d2                	xor    edx,edx
c001eca0:	83 c4 1c             	add    esp,0x1c
c001eca3:	c3                   	ret    

c001eca4 <Vm::fpuGetLog210()>:
c001eca4:	83 ec 18             	sub    esp,0x18
c001eca7:	68 0c bb 02 c0       	push   0xc002bb0c
c001ecac:	e8 9c af ff ff       	call   c0019c4d <Krnl::panic(char const*)>
c001ecb1:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001ecb6:	31 d2                	xor    edx,edx
c001ecb8:	83 c4 1c             	add    esp,0x1c
c001ecbb:	c3                   	ret    

c001ecbc <Vm::fpuGetLog102()>:
c001ecbc:	83 ec 18             	sub    esp,0x18
c001ecbf:	68 19 bb 02 c0       	push   0xc002bb19
c001ecc4:	e8 84 af ff ff       	call   c0019c4d <Krnl::panic(char const*)>
c001ecc9:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001ecce:	31 d2                	xor    edx,edx
c001ecd0:	83 c4 1c             	add    esp,0x1c
c001ecd3:	c3                   	ret    

c001ecd4 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001ecd4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ecd8:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001ecdc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ece0:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001ece4:	0f 92 c0             	setb   al
c001ece7:	c3                   	ret    

c001ece8 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001ece8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ecec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecf0:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001ecf4:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001ecf8:	09 c2                	or     edx,eax
c001ecfa:	0f 94 c0             	sete   al
c001ecfd:	c3                   	ret    

c001ecfe <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001ecfe:	57                   	push   edi
c001ecff:	56                   	push   esi
c001ed00:	53                   	push   ebx
c001ed01:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ed05:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ed09:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001ed0d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001ed11:	57                   	push   edi
c001ed12:	56                   	push   esi
c001ed13:	53                   	push   ebx
c001ed14:	51                   	push   ecx
c001ed15:	e8 ce ff ff ff       	call   c001ece8 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001ed1a:	83 c4 10             	add    esp,0x10
c001ed1d:	88 c2                	mov    dl,al
c001ed1f:	31 c0                	xor    eax,eax
c001ed21:	84 d2                	test   dl,dl
c001ed23:	75 0c                	jne    c001ed31 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001ed25:	57                   	push   edi
c001ed26:	56                   	push   esi
c001ed27:	53                   	push   ebx
c001ed28:	51                   	push   ecx
c001ed29:	e8 a6 ff ff ff       	call   c001ecd4 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001ed2e:	83 c4 10             	add    esp,0x10
c001ed31:	83 e0 01             	and    eax,0x1
c001ed34:	5b                   	pop    ebx
c001ed35:	88 c1                	mov    cl,al
c001ed37:	83 e2 01             	and    edx,0x1
c001ed3a:	a0 41 ee 02 c0       	mov    al,ds:0xc002ee41
c001ed3f:	c1 e2 06             	shl    edx,0x6
c001ed42:	83 e0 ba             	and    eax,0xffffffba
c001ed45:	5e                   	pop    esi
c001ed46:	09 c8                	or     eax,ecx
c001ed48:	5f                   	pop    edi
c001ed49:	09 d0                	or     eax,edx
c001ed4b:	a2 41 ee 02 c0       	mov    ds:0xc002ee41,al
c001ed50:	c3                   	ret    

c001ed51 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001ed51:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ed55:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ed59:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001ed5d:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001ed61:	c3                   	ret    

c001ed62 <Vm::fpuAbs(unsigned long long)>:
c001ed62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ed66:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ed6a:	c3                   	ret    

c001ed6b <Vm::fpuChs(unsigned long long)>:
c001ed6b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ed6f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ed73:	f7 d8                	neg    eax
c001ed75:	83 d2 00             	adc    edx,0x0
c001ed78:	f7 da                	neg    edx
c001ed7a:	c3                   	ret    

c001ed7b <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001ed7b:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001ed7f:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001ed84:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001ed88:	eb c7                	jmp    c001ed51 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001ed8a <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001ed8a:	53                   	push   ebx
c001ed8b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ed8f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ed93:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ed97:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ed9b:	0f af ca             	imul   ecx,edx
c001ed9e:	0f af d8             	imul   ebx,eax
c001eda1:	f7 e2                	mul    edx
c001eda3:	01 d9                	add    ecx,ebx
c001eda5:	5b                   	pop    ebx
c001eda6:	01 ca                	add    edx,ecx
c001eda8:	c3                   	ret    

c001eda9 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001eda9:	83 ec 0c             	sub    esp,0xc
c001edac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001edb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001edb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001edb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001edbc:	e8 8b 71 00 00       	call   c0025f4c <__udivdi3>
c001edc1:	83 c4 1c             	add    esp,0x1c
c001edc4:	c3                   	ret    

c001edc5 <Vm::fpuSquare(unsigned long long)>:
c001edc5:	50                   	push   eax
c001edc6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001edca:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001edce:	52                   	push   edx
c001edcf:	50                   	push   eax
c001edd0:	52                   	push   edx
c001edd1:	50                   	push   eax
c001edd2:	e8 b3 ff ff ff       	call   c001ed8a <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001edd7:	83 c4 14             	add    esp,0x14
c001edda:	c3                   	ret    

c001eddb <Vm::fpuGetReg(int)>:
c001eddb:	83 ec 0c             	sub    esp,0xc
c001edde:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001ede3:	76 10                	jbe    c001edf5 <Vm::fpuGetReg(int)+0x1a>
c001ede5:	83 ec 0c             	sub    esp,0xc
c001ede8:	68 26 bb 02 c0       	push   0xc002bb26
c001eded:	e8 5b ae ff ff       	call   c0019c4d <Krnl::panic(char const*)>
c001edf2:	83 c4 10             	add    esp,0x10
c001edf5:	a0 41 ee 02 c0       	mov    al,ds:0xc002ee41
c001edfa:	b9 08 00 00 00       	mov    ecx,0x8
c001edff:	c0 e8 03             	shr    al,0x3
c001ee02:	83 e0 07             	and    eax,0x7
c001ee05:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001ee09:	99                   	cdq    
c001ee0a:	f7 f9                	idiv   ecx
c001ee0c:	8b 04 d5 44 ee 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd11bc]
c001ee13:	8b 14 d5 48 ee 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd11b8]
c001ee1a:	83 c4 0c             	add    esp,0xc
c001ee1d:	c3                   	ret    

c001ee1e <Vm::fpuSetReg(int, unsigned long long)>:
c001ee1e:	57                   	push   edi
c001ee1f:	56                   	push   esi
c001ee20:	52                   	push   edx
c001ee21:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001ee25:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001ee29:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001ee2e:	76 10                	jbe    c001ee40 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001ee30:	83 ec 0c             	sub    esp,0xc
c001ee33:	68 39 bb 02 c0       	push   0xc002bb39
c001ee38:	e8 10 ae ff ff       	call   c0019c4d <Krnl::panic(char const*)>
c001ee3d:	83 c4 10             	add    esp,0x10
c001ee40:	a0 41 ee 02 c0       	mov    al,ds:0xc002ee41
c001ee45:	b9 08 00 00 00       	mov    ecx,0x8
c001ee4a:	c0 e8 03             	shr    al,0x3
c001ee4d:	83 e0 07             	and    eax,0x7
c001ee50:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001ee54:	99                   	cdq    
c001ee55:	f7 f9                	idiv   ecx
c001ee57:	89 34 d5 44 ee 02 c0 	mov    DWORD PTR [edx*8-0x3ffd11bc],esi
c001ee5e:	89 3c d5 48 ee 02 c0 	mov    DWORD PTR [edx*8-0x3ffd11b8],edi
c001ee65:	58                   	pop    eax
c001ee66:	5e                   	pop    esi
c001ee67:	5f                   	pop    edi
c001ee68:	c3                   	ret    

c001ee69 <Vm::fpuPush(unsigned long long)>:
c001ee69:	a0 41 ee 02 c0       	mov    al,ds:0xc002ee41
c001ee6e:	c0 e8 03             	shr    al,0x3
c001ee71:	83 e0 07             	and    eax,0x7
c001ee74:	83 c0 07             	add    eax,0x7
c001ee77:	88 c2                	mov    dl,al
c001ee79:	83 e0 07             	and    eax,0x7
c001ee7c:	83 e2 07             	and    edx,0x7
c001ee7f:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001ee86:	8a 15 41 ee 02 c0    	mov    dl,BYTE PTR ds:0xc002ee41
c001ee8c:	83 e2 c7             	and    edx,0xffffffc7
c001ee8f:	09 ca                	or     edx,ecx
c001ee91:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ee95:	88 15 41 ee 02 c0    	mov    BYTE PTR ds:0xc002ee41,dl
c001ee9b:	89 0c c5 48 ee 02 c0 	mov    DWORD PTR [eax*8-0x3ffd11b8],ecx
c001eea2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001eea6:	89 14 c5 44 ee 02 c0 	mov    DWORD PTR [eax*8-0x3ffd11bc],edx
c001eead:	a1 84 ee 02 c0       	mov    eax,ds:0xc002ee84
c001eeb2:	83 f8 08             	cmp    eax,0x8
c001eeb5:	75 08                	jne    c001eebf <Vm::fpuPush(unsigned long long)+0x56>
c001eeb7:	80 0d 40 ee 02 c0 40 	or     BYTE PTR ds:0xc002ee40,0x40
c001eebe:	c3                   	ret    
c001eebf:	40                   	inc    eax
c001eec0:	a3 84 ee 02 c0       	mov    ds:0xc002ee84,eax
c001eec5:	c3                   	ret    

c001eec6 <Vm::fpuPop()>:
c001eec6:	8a 0d 41 ee 02 c0    	mov    cl,BYTE PTR ds:0xc002ee41
c001eecc:	53                   	push   ebx
c001eecd:	c0 e9 03             	shr    cl,0x3
c001eed0:	8a 1d 41 ee 02 c0    	mov    bl,BYTE PTR ds:0xc002ee41
c001eed6:	83 e1 07             	and    ecx,0x7
c001eed9:	83 e3 c7             	and    ebx,0xffffffc7
c001eedc:	8b 04 cd 44 ee 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd11bc]
c001eee3:	8b 14 cd 48 ee 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd11b8]
c001eeea:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001eef1:	83 e1 38             	and    ecx,0x38
c001eef4:	09 d9                	or     ecx,ebx
c001eef6:	88 0d 41 ee 02 c0    	mov    BYTE PTR ds:0xc002ee41,cl
c001eefc:	8b 0d 84 ee 02 c0    	mov    ecx,DWORD PTR ds:0xc002ee84
c001ef02:	85 c9                	test   ecx,ecx
c001ef04:	74 09                	je     c001ef0f <Vm::fpuPop()+0x49>
c001ef06:	49                   	dec    ecx
c001ef07:	89 0d 84 ee 02 c0    	mov    DWORD PTR ds:0xc002ee84,ecx
c001ef0d:	eb 07                	jmp    c001ef16 <Vm::fpuPop()+0x50>
c001ef0f:	80 0d 40 ee 02 c0 40 	or     BYTE PTR ds:0xc002ee40,0x40
c001ef16:	5b                   	pop    ebx
c001ef17:	c3                   	ret    

c001ef18 <Vm::x87Handler(regs*)>:
c001ef18:	55                   	push   ebp
c001ef19:	57                   	push   edi
c001ef1a:	56                   	push   esi
c001ef1b:	53                   	push   ebx
c001ef1c:	83 ec 1c             	sub    esp,0x1c
c001ef1f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ef23:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001ef28:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001ef2b:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001ef33:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001ef37:	50                   	push   eax
c001ef38:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001ef3c:	50                   	push   eax
c001ef3d:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ef41:	50                   	push   eax
c001ef42:	53                   	push   ebx
c001ef43:	e8 36 a5 ff ff       	call   c001947e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001ef48:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001ef4b:	83 c4 10             	add    esp,0x10
c001ef4e:	89 c6                	mov    esi,eax
c001ef50:	80 fa d9             	cmp    dl,0xd9
c001ef53:	0f 85 52 01 00 00    	jne    c001f0ab <Vm::x87Handler(regs*)+0x193>
c001ef59:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ef5d:	8d 50 20             	lea    edx,[eax+0x20]
c001ef60:	80 fa 0e             	cmp    dl,0xe
c001ef63:	0f 87 86 00 00 00    	ja     c001efef <Vm::x87Handler(regs*)+0xd7>
c001ef69:	0f b6 d2             	movzx  edx,dl
c001ef6c:	ff 24 95 4c bb 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd44b4]
c001ef73:	e8 e7 fc ff ff       	call   c001ec5f <Vm::fpuGet0()>
c001ef78:	eb 05                	jmp    c001ef7f <Vm::x87Handler(regs*)+0x67>
c001ef7a:	e8 e5 fc ff ff       	call   c001ec64 <Vm::fpuGet1()>
c001ef7f:	57                   	push   edi
c001ef80:	57                   	push   edi
c001ef81:	52                   	push   edx
c001ef82:	50                   	push   eax
c001ef83:	e8 e1 fe ff ff       	call   c001ee69 <Vm::fpuPush(unsigned long long)>
c001ef88:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ef8c:	83 c4 10             	add    esp,0x10
c001ef8f:	b0 01                	mov    al,0x1
c001ef91:	e9 e3 09 00 00       	jmp    c001f979 <Vm::x87Handler(regs*)+0xa61>
c001ef96:	83 ec 0c             	sub    esp,0xc
c001ef99:	6a 00                	push   0x0
c001ef9b:	e8 3b fe ff ff       	call   c001eddb <Vm::fpuGetReg(int)>
c001efa0:	59                   	pop    ecx
c001efa1:	5e                   	pop    esi
c001efa2:	52                   	push   edx
c001efa3:	50                   	push   eax
c001efa4:	e8 c2 fd ff ff       	call   c001ed6b <Vm::fpuChs(unsigned long long)>
c001efa9:	eb 13                	jmp    c001efbe <Vm::x87Handler(regs*)+0xa6>
c001efab:	83 ec 0c             	sub    esp,0xc
c001efae:	6a 00                	push   0x0
c001efb0:	e8 26 fe ff ff       	call   c001eddb <Vm::fpuGetReg(int)>
c001efb5:	5f                   	pop    edi
c001efb6:	5d                   	pop    ebp
c001efb7:	52                   	push   edx
c001efb8:	50                   	push   eax
c001efb9:	e8 a4 fd ff ff       	call   c001ed62 <Vm::fpuAbs(unsigned long long)>
c001efbe:	83 c4 0c             	add    esp,0xc
c001efc1:	52                   	push   edx
c001efc2:	50                   	push   eax
c001efc3:	6a 00                	push   0x0
c001efc5:	e8 54 fe ff ff       	call   c001ee1e <Vm::fpuSetReg(int, unsigned long long)>
c001efca:	eb bc                	jmp    c001ef88 <Vm::x87Handler(regs*)+0x70>
c001efcc:	e8 d3 fc ff ff       	call   c001eca4 <Vm::fpuGetLog210()>
c001efd1:	eb ac                	jmp    c001ef7f <Vm::x87Handler(regs*)+0x67>
c001efd3:	e8 9c fc ff ff       	call   c001ec74 <Vm::fpuGetLog2E()>
c001efd8:	eb a5                	jmp    c001ef7f <Vm::x87Handler(regs*)+0x67>
c001efda:	e8 8d fc ff ff       	call   c001ec6c <Vm::fpuGetPi()>
c001efdf:	eb 9e                	jmp    c001ef7f <Vm::x87Handler(regs*)+0x67>
c001efe1:	e8 d6 fc ff ff       	call   c001ecbc <Vm::fpuGetLog102()>
c001efe6:	eb 97                	jmp    c001ef7f <Vm::x87Handler(regs*)+0x67>
c001efe8:	e8 9f fc ff ff       	call   c001ec8c <Vm::fpuGetLogE2()>
c001efed:	eb 90                	jmp    c001ef7f <Vm::x87Handler(regs*)+0x67>
c001efef:	8d 50 40             	lea    edx,[eax+0x40]
c001eff2:	80 fa 07             	cmp    dl,0x7
c001eff5:	77 15                	ja     c001f00c <Vm::x87Handler(regs*)+0xf4>
c001eff7:	83 ec 0c             	sub    esp,0xc
c001effa:	2d c0 00 00 00       	sub    eax,0xc0
c001efff:	50                   	push   eax
c001f000:	e8 d6 fd ff ff       	call   c001eddb <Vm::fpuGetReg(int)>
c001f005:	59                   	pop    ecx
c001f006:	5e                   	pop    esi
c001f007:	e9 75 ff ff ff       	jmp    c001ef81 <Vm::x87Handler(regs*)+0x69>
c001f00c:	8d 50 38             	lea    edx,[eax+0x38]
c001f00f:	80 fa 07             	cmp    dl,0x7
c001f012:	77 3c                	ja     c001f050 <Vm::x87Handler(regs*)+0x138>
c001f014:	83 ec 0c             	sub    esp,0xc
c001f017:	2d c8 00 00 00       	sub    eax,0xc8
c001f01c:	50                   	push   eax
c001f01d:	e8 b9 fd ff ff       	call   c001eddb <Vm::fpuGetReg(int)>
c001f022:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f029:	89 c6                	mov    esi,eax
c001f02b:	89 d7                	mov    edi,edx
c001f02d:	e8 a9 fd ff ff       	call   c001eddb <Vm::fpuGetReg(int)>
c001f032:	83 c4 0c             	add    esp,0xc
c001f035:	52                   	push   edx
c001f036:	50                   	push   eax
c001f037:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f03b:	2d c8 00 00 00       	sub    eax,0xc8
c001f040:	50                   	push   eax
c001f041:	e8 d8 fd ff ff       	call   c001ee1e <Vm::fpuSetReg(int, unsigned long long)>
c001f046:	83 c4 0c             	add    esp,0xc
c001f049:	57                   	push   edi
c001f04a:	56                   	push   esi
c001f04b:	e9 73 ff ff ff       	jmp    c001efc3 <Vm::x87Handler(regs*)+0xab>
c001f050:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f054:	84 d2                	test   dl,dl
c001f056:	75 0f                	jne    c001f067 <Vm::x87Handler(regs*)+0x14f>
c001f058:	83 ec 0c             	sub    esp,0xc
c001f05b:	ff 36                	push   DWORD PTR [esi]
c001f05d:	e8 c8 fa ff ff       	call   c001eb2a <Vm::fpu32ToInternal(unsigned int)>
c001f062:	e9 bf 00 00 00       	jmp    c001f126 <Vm::x87Handler(regs*)+0x20e>
c001f067:	80 fa 03             	cmp    dl,0x3
c001f06a:	75 13                	jne    c001f07f <Vm::x87Handler(regs*)+0x167>
c001f06c:	e8 55 fe ff ff       	call   c001eec6 <Vm::fpuPop()>
c001f071:	55                   	push   ebp
c001f072:	55                   	push   ebp
c001f073:	52                   	push   edx
c001f074:	50                   	push   eax
c001f075:	e8 4c fa ff ff       	call   c001eac6 <Vm::fpuInternalTo32(unsigned long long)>
c001f07a:	e9 88 00 00 00       	jmp    c001f107 <Vm::x87Handler(regs*)+0x1ef>
c001f07f:	80 fa 05             	cmp    dl,0x5
c001f082:	75 0e                	jne    c001f092 <Vm::x87Handler(regs*)+0x17a>
c001f084:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f087:	66 a3 42 ee 02 c0    	mov    ds:0xc002ee42,ax
c001f08d:	e9 df 00 00 00       	jmp    c001f171 <Vm::x87Handler(regs*)+0x259>
c001f092:	31 c0                	xor    eax,eax
c001f094:	80 fa 07             	cmp    dl,0x7
c001f097:	0f 85 dc 08 00 00    	jne    c001f979 <Vm::x87Handler(regs*)+0xa61>
c001f09d:	66 a1 42 ee 02 c0    	mov    ax,ds:0xc002ee42
c001f0a3:	66 89 06             	mov    WORD PTR [esi],ax
c001f0a6:	e9 c6 00 00 00       	jmp    c001f171 <Vm::x87Handler(regs*)+0x259>
c001f0ab:	80 fa d8             	cmp    dl,0xd8
c001f0ae:	0f 84 c9 00 00 00    	je     c001f17d <Vm::x87Handler(regs*)+0x265>
c001f0b4:	80 fa dc             	cmp    dl,0xdc
c001f0b7:	0f 84 0d 02 00 00    	je     c001f2ca <Vm::x87Handler(regs*)+0x3b2>
c001f0bd:	80 fa de             	cmp    dl,0xde
c001f0c0:	0f 84 cd 02 00 00    	je     c001f393 <Vm::x87Handler(regs*)+0x47b>
c001f0c6:	80 fa dd             	cmp    dl,0xdd
c001f0c9:	0f 84 5f 04 00 00    	je     c001f52e <Vm::x87Handler(regs*)+0x616>
c001f0cf:	80 fa da             	cmp    dl,0xda
c001f0d2:	0f 84 24 05 00 00    	je     c001f5fc <Vm::x87Handler(regs*)+0x6e4>
c001f0d8:	80 fa df             	cmp    dl,0xdf
c001f0db:	0f 84 68 05 00 00    	je     c001f649 <Vm::x87Handler(regs*)+0x731>
c001f0e1:	31 c0                	xor    eax,eax
c001f0e3:	80 fa db             	cmp    dl,0xdb
c001f0e6:	0f 85 8d 08 00 00    	jne    c001f979 <Vm::x87Handler(regs*)+0xa61>
c001f0ec:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f0f0:	80 fa 03             	cmp    dl,0x3
c001f0f3:	0f 85 70 06 00 00    	jne    c001f769 <Vm::x87Handler(regs*)+0x851>
c001f0f9:	e8 c8 fd ff ff       	call   c001eec6 <Vm::fpuPop()>
c001f0fe:	55                   	push   ebp
c001f0ff:	55                   	push   ebp
c001f100:	52                   	push   edx
c001f101:	50                   	push   eax
c001f102:	e8 71 fa ff ff       	call   c001eb78 <Vm::fpuFloatToLong(unsigned long long)>
c001f107:	83 c4 10             	add    esp,0x10
c001f10a:	89 06                	mov    DWORD PTR [esi],eax
c001f10c:	eb 63                	jmp    c001f171 <Vm::x87Handler(regs*)+0x259>
c001f10e:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f112:	84 d2                	test   dl,dl
c001f114:	0f 85 e6 05 00 00    	jne    c001f700 <Vm::x87Handler(regs*)+0x7e8>
c001f11a:	57                   	push   edi
c001f11b:	57                   	push   edi
c001f11c:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f11f:	ff 36                	push   DWORD PTR [esi]
c001f121:	e8 49 fa ff ff       	call   c001eb6f <Vm::fpu64ToInternal(unsigned long long)>
c001f126:	5e                   	pop    esi
c001f127:	5f                   	pop    edi
c001f128:	52                   	push   edx
c001f129:	50                   	push   eax
c001f12a:	e8 3a fd ff ff       	call   c001ee69 <Vm::fpuPush(unsigned long long)>
c001f12f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f133:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f136:	e9 51 fe ff ff       	jmp    c001ef8c <Vm::x87Handler(regs*)+0x74>
c001f13b:	80 fa 03             	cmp    dl,0x3
c001f13e:	0f 85 d7 06 00 00    	jne    c001f81b <Vm::x87Handler(regs*)+0x903>
c001f144:	57                   	push   edi
c001f145:	57                   	push   edi
c001f146:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f149:	ff 36                	push   DWORD PTR [esi]
c001f14b:	e8 1f fa ff ff       	call   c001eb6f <Vm::fpu64ToInternal(unsigned long long)>
c001f150:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f157:	89 c6                	mov    esi,eax
c001f159:	89 d7                	mov    edi,edx
c001f15b:	e8 7b fc ff ff       	call   c001eddb <Vm::fpuGetReg(int)>
c001f160:	57                   	push   edi
c001f161:	56                   	push   esi
c001f162:	52                   	push   edx
c001f163:	50                   	push   eax
c001f164:	e8 95 fb ff ff       	call   c001ecfe <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f169:	83 c4 20             	add    esp,0x20
c001f16c:	e8 55 fd ff ff       	call   c001eec6 <Vm::fpuPop()>
c001f171:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f175:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f178:	e9 12 fe ff ff       	jmp    c001ef8f <Vm::x87Handler(regs*)+0x77>
c001f17d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f181:	8d 50 40             	lea    edx,[eax+0x40]
c001f184:	80 fa 07             	cmp    dl,0x7
c001f187:	77 29                	ja     c001f1b2 <Vm::x87Handler(regs*)+0x29a>
c001f189:	83 ec 0c             	sub    esp,0xc
c001f18c:	2d c0 00 00 00       	sub    eax,0xc0
c001f191:	50                   	push   eax
c001f192:	e8 44 fc ff ff       	call   c001eddb <Vm::fpuGetReg(int)>
c001f197:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f19e:	89 c6                	mov    esi,eax
c001f1a0:	89 d7                	mov    edi,edx
c001f1a2:	e8 34 fc ff ff       	call   c001eddb <Vm::fpuGetReg(int)>
c001f1a7:	57                   	push   edi
c001f1a8:	56                   	push   esi
c001f1a9:	52                   	push   edx
c001f1aa:	50                   	push   eax
c001f1ab:	e8 a1 fb ff ff       	call   c001ed51 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f1b0:	eb 2f                	jmp    c001f1e1 <Vm::x87Handler(regs*)+0x2c9>
c001f1b2:	8d 50 38             	lea    edx,[eax+0x38]
c001f1b5:	80 fa 07             	cmp    dl,0x7
c001f1b8:	77 2f                	ja     c001f1e9 <Vm::x87Handler(regs*)+0x2d1>
c001f1ba:	83 ec 0c             	sub    esp,0xc
c001f1bd:	2d c8 00 00 00       	sub    eax,0xc8
c001f1c2:	50                   	push   eax
c001f1c3:	e8 13 fc ff ff       	call   c001eddb <Vm::fpuGetReg(int)>
c001f1c8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f1cf:	89 c6                	mov    esi,eax
c001f1d1:	89 d7                	mov    edi,edx
c001f1d3:	e8 03 fc ff ff       	call   c001eddb <Vm::fpuGetReg(int)>
c001f1d8:	57                   	push   edi
c001f1d9:	56                   	push   esi
c001f1da:	52                   	push   edx
c001f1db:	50                   	push   eax
c001f1dc:	e8 a9 fb ff ff       	call   c001ed8a <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f1e1:	83 c4 1c             	add    esp,0x1c
c001f1e4:	e9 d8 fd ff ff       	jmp    c001efc1 <Vm::x87Handler(regs*)+0xa9>
c001f1e9:	8d 50 30             	lea    edx,[eax+0x30]
c001f1ec:	80 fa 07             	cmp    dl,0x7
c001f1ef:	77 0d                	ja     c001f1fe <Vm::x87Handler(regs*)+0x2e6>
c001f1f1:	83 ec 0c             	sub    esp,0xc
c001f1f4:	2d d0 00 00 00       	sub    eax,0xd0
c001f1f9:	e9 99 03 00 00       	jmp    c001f597 <Vm::x87Handler(regs*)+0x67f>
c001f1fe:	8d 50 28             	lea    edx,[eax+0x28]
c001f201:	80 fa 07             	cmp    dl,0x7
c001f204:	77 0d                	ja     c001f213 <Vm::x87Handler(regs*)+0x2fb>
c001f206:	83 ec 0c             	sub    esp,0xc
c001f209:	2d d8 00 00 00       	sub    eax,0xd8
c001f20e:	e9 c0 03 00 00       	jmp    c001f5d3 <Vm::x87Handler(regs*)+0x6bb>
c001f213:	8d 50 20             	lea    edx,[eax+0x20]
c001f216:	80 fa 07             	cmp    dl,0x7
c001f219:	77 1b                	ja     c001f236 <Vm::x87Handler(regs*)+0x31e>
c001f21b:	83 ec 0c             	sub    esp,0xc
c001f21e:	2d e0 00 00 00       	sub    eax,0xe0
c001f223:	50                   	push   eax
c001f224:	e8 b2 fb ff ff       	call   c001eddb <Vm::fpuGetReg(int)>
c001f229:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f230:	89 c6                	mov    esi,eax
c001f232:	89 d7                	mov    edi,edx
c001f234:	eb 22                	jmp    c001f258 <Vm::x87Handler(regs*)+0x340>
c001f236:	8d 50 18             	lea    edx,[eax+0x18]
c001f239:	80 fa 07             	cmp    dl,0x7
c001f23c:	77 2d                	ja     c001f26b <Vm::x87Handler(regs*)+0x353>
c001f23e:	83 ec 0c             	sub    esp,0xc
c001f241:	6a 00                	push   0x0
c001f243:	e8 93 fb ff ff       	call   c001eddb <Vm::fpuGetReg(int)>
c001f248:	89 c6                	mov    esi,eax
c001f24a:	89 d7                	mov    edi,edx
c001f24c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f250:	2d e8 00 00 00       	sub    eax,0xe8
c001f255:	89 04 24             	mov    DWORD PTR [esp],eax
c001f258:	e8 7e fb ff ff       	call   c001eddb <Vm::fpuGetReg(int)>
c001f25d:	57                   	push   edi
c001f25e:	56                   	push   esi
c001f25f:	52                   	push   edx
c001f260:	50                   	push   eax
c001f261:	e8 15 fb ff ff       	call   c001ed7b <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f266:	e9 76 ff ff ff       	jmp    c001f1e1 <Vm::x87Handler(regs*)+0x2c9>
c001f26b:	8d 50 10             	lea    edx,[eax+0x10]
c001f26e:	80 fa 07             	cmp    dl,0x7
c001f271:	77 1b                	ja     c001f28e <Vm::x87Handler(regs*)+0x376>
c001f273:	83 ec 0c             	sub    esp,0xc
c001f276:	2d f0 00 00 00       	sub    eax,0xf0
c001f27b:	50                   	push   eax
c001f27c:	e8 5a fb ff ff       	call   c001eddb <Vm::fpuGetReg(int)>
c001f281:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f288:	89 c6                	mov    esi,eax
c001f28a:	89 d7                	mov    edi,edx
c001f28c:	eb 22                	jmp    c001f2b0 <Vm::x87Handler(regs*)+0x398>
c001f28e:	3c f7                	cmp    al,0xf7
c001f290:	0f 86 d1 03 00 00    	jbe    c001f667 <Vm::x87Handler(regs*)+0x74f>
c001f296:	83 ec 0c             	sub    esp,0xc
c001f299:	6a 00                	push   0x0
c001f29b:	e8 3b fb ff ff       	call   c001eddb <Vm::fpuGetReg(int)>
c001f2a0:	89 c6                	mov    esi,eax
c001f2a2:	89 d7                	mov    edi,edx
c001f2a4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f2a8:	2d f8 00 00 00       	sub    eax,0xf8
c001f2ad:	89 04 24             	mov    DWORD PTR [esp],eax
c001f2b0:	e8 26 fb ff ff       	call   c001eddb <Vm::fpuGetReg(int)>
c001f2b5:	57                   	push   edi
c001f2b6:	56                   	push   esi
c001f2b7:	52                   	push   edx
c001f2b8:	50                   	push   eax
c001f2b9:	e8 eb fa ff ff       	call   c001eda9 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f2be:	83 c4 1c             	add    esp,0x1c
c001f2c1:	52                   	push   edx
c001f2c2:	50                   	push   eax
c001f2c3:	6a 00                	push   0x0
c001f2c5:	e9 51 02 00 00       	jmp    c001f51b <Vm::x87Handler(regs*)+0x603>
c001f2ca:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f2ce:	8d 50 40             	lea    edx,[eax+0x40]
c001f2d1:	80 fa 07             	cmp    dl,0x7
c001f2d4:	77 37                	ja     c001f30d <Vm::x87Handler(regs*)+0x3f5>
c001f2d6:	83 ec 0c             	sub    esp,0xc
c001f2d9:	2d c0 00 00 00       	sub    eax,0xc0
c001f2de:	50                   	push   eax
c001f2df:	e8 f7 fa ff ff       	call   c001eddb <Vm::fpuGetReg(int)>
c001f2e4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f2eb:	89 c6                	mov    esi,eax
c001f2ed:	89 d7                	mov    edi,edx
c001f2ef:	e8 e7 fa ff ff       	call   c001eddb <Vm::fpuGetReg(int)>
c001f2f4:	57                   	push   edi
c001f2f5:	56                   	push   esi
c001f2f6:	52                   	push   edx
c001f2f7:	50                   	push   eax
c001f2f8:	e8 54 fa ff ff       	call   c001ed51 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f2fd:	83 c4 1c             	add    esp,0x1c
c001f300:	52                   	push   edx
c001f301:	50                   	push   eax
c001f302:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f306:	2d c0 00 00 00       	sub    eax,0xc0
c001f30b:	eb 3d                	jmp    c001f34a <Vm::x87Handler(regs*)+0x432>
c001f30d:	8d 50 38             	lea    edx,[eax+0x38]
c001f310:	80 fa 07             	cmp    dl,0x7
c001f313:	77 3b                	ja     c001f350 <Vm::x87Handler(regs*)+0x438>
c001f315:	83 ec 0c             	sub    esp,0xc
c001f318:	2d c8 00 00 00       	sub    eax,0xc8
c001f31d:	50                   	push   eax
c001f31e:	e8 b8 fa ff ff       	call   c001eddb <Vm::fpuGetReg(int)>
c001f323:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f32a:	89 c6                	mov    esi,eax
c001f32c:	89 d7                	mov    edi,edx
c001f32e:	e8 a8 fa ff ff       	call   c001eddb <Vm::fpuGetReg(int)>
c001f333:	57                   	push   edi
c001f334:	56                   	push   esi
c001f335:	52                   	push   edx
c001f336:	50                   	push   eax
c001f337:	e8 4e fa ff ff       	call   c001ed8a <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f33c:	83 c4 1c             	add    esp,0x1c
c001f33f:	52                   	push   edx
c001f340:	50                   	push   eax
c001f341:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f345:	2d c8 00 00 00       	sub    eax,0xc8
c001f34a:	50                   	push   eax
c001f34b:	e9 75 fc ff ff       	jmp    c001efc5 <Vm::x87Handler(regs*)+0xad>
c001f350:	83 c0 18             	add    eax,0x18
c001f353:	3c 07                	cmp    al,0x7
c001f355:	0f 87 3b 04 00 00    	ja     c001f796 <Vm::x87Handler(regs*)+0x87e>
c001f35b:	83 ec 0c             	sub    esp,0xc
c001f35e:	6a 00                	push   0x0
c001f360:	e8 76 fa ff ff       	call   c001eddb <Vm::fpuGetReg(int)>
c001f365:	89 c6                	mov    esi,eax
c001f367:	89 d7                	mov    edi,edx
c001f369:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f36d:	2d e8 00 00 00       	sub    eax,0xe8
c001f372:	89 04 24             	mov    DWORD PTR [esp],eax
c001f375:	e8 61 fa ff ff       	call   c001eddb <Vm::fpuGetReg(int)>
c001f37a:	57                   	push   edi
c001f37b:	56                   	push   esi
c001f37c:	52                   	push   edx
c001f37d:	50                   	push   eax
c001f37e:	e8 f8 f9 ff ff       	call   c001ed7b <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f383:	83 c4 1c             	add    esp,0x1c
c001f386:	52                   	push   edx
c001f387:	50                   	push   eax
c001f388:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f38c:	2d e8 00 00 00       	sub    eax,0xe8
c001f391:	eb b7                	jmp    c001f34a <Vm::x87Handler(regs*)+0x432>
c001f393:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f397:	8d 50 40             	lea    edx,[eax+0x40]
c001f39a:	80 fa 07             	cmp    dl,0x7
c001f39d:	77 3a                	ja     c001f3d9 <Vm::x87Handler(regs*)+0x4c1>
c001f39f:	83 ec 0c             	sub    esp,0xc
c001f3a2:	2d c0 00 00 00       	sub    eax,0xc0
c001f3a7:	50                   	push   eax
c001f3a8:	e8 2e fa ff ff       	call   c001eddb <Vm::fpuGetReg(int)>
c001f3ad:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f3b4:	89 c6                	mov    esi,eax
c001f3b6:	89 d7                	mov    edi,edx
c001f3b8:	e8 1e fa ff ff       	call   c001eddb <Vm::fpuGetReg(int)>
c001f3bd:	57                   	push   edi
c001f3be:	56                   	push   esi
c001f3bf:	52                   	push   edx
c001f3c0:	50                   	push   eax
c001f3c1:	e8 8b f9 ff ff       	call   c001ed51 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f3c6:	83 c4 1c             	add    esp,0x1c
c001f3c9:	52                   	push   edx
c001f3ca:	50                   	push   eax
c001f3cb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f3cf:	2d c0 00 00 00       	sub    eax,0xc0
c001f3d4:	e9 9e 01 00 00       	jmp    c001f577 <Vm::x87Handler(regs*)+0x65f>
c001f3d9:	8d 50 20             	lea    edx,[eax+0x20]
c001f3dc:	80 fa 07             	cmp    dl,0x7
c001f3df:	77 3a                	ja     c001f41b <Vm::x87Handler(regs*)+0x503>
c001f3e1:	83 ec 0c             	sub    esp,0xc
c001f3e4:	2d e0 00 00 00       	sub    eax,0xe0
c001f3e9:	50                   	push   eax
c001f3ea:	e8 ec f9 ff ff       	call   c001eddb <Vm::fpuGetReg(int)>
c001f3ef:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f3f6:	89 c6                	mov    esi,eax
c001f3f8:	89 d7                	mov    edi,edx
c001f3fa:	e8 dc f9 ff ff       	call   c001eddb <Vm::fpuGetReg(int)>
c001f3ff:	57                   	push   edi
c001f400:	56                   	push   esi
c001f401:	52                   	push   edx
c001f402:	50                   	push   eax
c001f403:	e8 73 f9 ff ff       	call   c001ed7b <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f408:	83 c4 1c             	add    esp,0x1c
c001f40b:	52                   	push   edx
c001f40c:	50                   	push   eax
c001f40d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f411:	2d e0 00 00 00       	sub    eax,0xe0
c001f416:	e9 5c 01 00 00       	jmp    c001f577 <Vm::x87Handler(regs*)+0x65f>
c001f41b:	8d 50 18             	lea    edx,[eax+0x18]
c001f41e:	80 fa 07             	cmp    dl,0x7
c001f421:	77 3b                	ja     c001f45e <Vm::x87Handler(regs*)+0x546>
c001f423:	83 ec 0c             	sub    esp,0xc
c001f426:	6a 00                	push   0x0
c001f428:	e8 ae f9 ff ff       	call   c001eddb <Vm::fpuGetReg(int)>
c001f42d:	89 c6                	mov    esi,eax
c001f42f:	89 d7                	mov    edi,edx
c001f431:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f435:	2d e8 00 00 00       	sub    eax,0xe8
c001f43a:	89 04 24             	mov    DWORD PTR [esp],eax
c001f43d:	e8 99 f9 ff ff       	call   c001eddb <Vm::fpuGetReg(int)>
c001f442:	57                   	push   edi
c001f443:	56                   	push   esi
c001f444:	52                   	push   edx
c001f445:	50                   	push   eax
c001f446:	e8 30 f9 ff ff       	call   c001ed7b <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f44b:	83 c4 1c             	add    esp,0x1c
c001f44e:	52                   	push   edx
c001f44f:	50                   	push   eax
c001f450:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f454:	2d e8 00 00 00       	sub    eax,0xe8
c001f459:	e9 19 01 00 00       	jmp    c001f577 <Vm::x87Handler(regs*)+0x65f>
c001f45e:	8d 50 38             	lea    edx,[eax+0x38]
c001f461:	80 fa 07             	cmp    dl,0x7
c001f464:	77 37                	ja     c001f49d <Vm::x87Handler(regs*)+0x585>
c001f466:	83 ec 0c             	sub    esp,0xc
c001f469:	2d c8 00 00 00       	sub    eax,0xc8
c001f46e:	50                   	push   eax
c001f46f:	e8 67 f9 ff ff       	call   c001eddb <Vm::fpuGetReg(int)>
c001f474:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f47b:	89 c6                	mov    esi,eax
c001f47d:	89 d7                	mov    edi,edx
c001f47f:	e8 57 f9 ff ff       	call   c001eddb <Vm::fpuGetReg(int)>
c001f484:	57                   	push   edi
c001f485:	56                   	push   esi
c001f486:	52                   	push   edx
c001f487:	50                   	push   eax
c001f488:	e8 fd f8 ff ff       	call   c001ed8a <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f48d:	83 c4 1c             	add    esp,0x1c
c001f490:	52                   	push   edx
c001f491:	50                   	push   eax
c001f492:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f496:	2d c8 00 00 00       	sub    eax,0xc8
c001f49b:	eb 7d                	jmp    c001f51a <Vm::x87Handler(regs*)+0x602>
c001f49d:	3c f7                	cmp    al,0xf7
c001f49f:	76 38                	jbe    c001f4d9 <Vm::x87Handler(regs*)+0x5c1>
c001f4a1:	83 ec 0c             	sub    esp,0xc
c001f4a4:	6a 00                	push   0x0
c001f4a6:	e8 30 f9 ff ff       	call   c001eddb <Vm::fpuGetReg(int)>
c001f4ab:	89 c6                	mov    esi,eax
c001f4ad:	89 d7                	mov    edi,edx
c001f4af:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f4b3:	2d f8 00 00 00       	sub    eax,0xf8
c001f4b8:	89 04 24             	mov    DWORD PTR [esp],eax
c001f4bb:	e8 1b f9 ff ff       	call   c001eddb <Vm::fpuGetReg(int)>
c001f4c0:	57                   	push   edi
c001f4c1:	56                   	push   esi
c001f4c2:	52                   	push   edx
c001f4c3:	50                   	push   eax
c001f4c4:	e8 e0 f8 ff ff       	call   c001eda9 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f4c9:	83 c4 1c             	add    esp,0x1c
c001f4cc:	52                   	push   edx
c001f4cd:	50                   	push   eax
c001f4ce:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f4d2:	2d f8 00 00 00       	sub    eax,0xf8
c001f4d7:	eb 41                	jmp    c001f51a <Vm::x87Handler(regs*)+0x602>
c001f4d9:	8d 50 10             	lea    edx,[eax+0x10]
c001f4dc:	80 fa 07             	cmp    dl,0x7
c001f4df:	0f 87 5a 01 00 00    	ja     c001f63f <Vm::x87Handler(regs*)+0x727>
c001f4e5:	83 ec 0c             	sub    esp,0xc
c001f4e8:	2d f0 00 00 00       	sub    eax,0xf0
c001f4ed:	50                   	push   eax
c001f4ee:	e8 e8 f8 ff ff       	call   c001eddb <Vm::fpuGetReg(int)>
c001f4f3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f4fa:	89 c6                	mov    esi,eax
c001f4fc:	89 d7                	mov    edi,edx
c001f4fe:	e8 d8 f8 ff ff       	call   c001eddb <Vm::fpuGetReg(int)>
c001f503:	57                   	push   edi
c001f504:	56                   	push   esi
c001f505:	52                   	push   edx
c001f506:	50                   	push   eax
c001f507:	e8 9d f8 ff ff       	call   c001eda9 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f50c:	83 c4 1c             	add    esp,0x1c
c001f50f:	52                   	push   edx
c001f510:	50                   	push   eax
c001f511:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f515:	2d f0 00 00 00       	sub    eax,0xf0
c001f51a:	50                   	push   eax
c001f51b:	e8 fe f8 ff ff       	call   c001ee1e <Vm::fpuSetReg(int, unsigned long long)>
c001f520:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f524:	e8 9d f9 ff ff       	call   c001eec6 <Vm::fpuPop()>
c001f529:	e9 5e fa ff ff       	jmp    c001ef8c <Vm::x87Handler(regs*)+0x74>
c001f52e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f532:	8d 50 30             	lea    edx,[eax+0x30]
c001f535:	80 fa 07             	cmp    dl,0x7
c001f538:	77 1d                	ja     c001f557 <Vm::x87Handler(regs*)+0x63f>
c001f53a:	83 ec 0c             	sub    esp,0xc
c001f53d:	6a 00                	push   0x0
c001f53f:	e8 97 f8 ff ff       	call   c001eddb <Vm::fpuGetReg(int)>
c001f544:	83 c4 0c             	add    esp,0xc
c001f547:	52                   	push   edx
c001f548:	50                   	push   eax
c001f549:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f54d:	2d d0 00 00 00       	sub    eax,0xd0
c001f552:	e9 f3 fd ff ff       	jmp    c001f34a <Vm::x87Handler(regs*)+0x432>
c001f557:	8d 50 28             	lea    edx,[eax+0x28]
c001f55a:	80 fa 07             	cmp    dl,0x7
c001f55d:	77 28                	ja     c001f587 <Vm::x87Handler(regs*)+0x66f>
c001f55f:	83 ec 0c             	sub    esp,0xc
c001f562:	6a 00                	push   0x0
c001f564:	e8 72 f8 ff ff       	call   c001eddb <Vm::fpuGetReg(int)>
c001f569:	83 c4 0c             	add    esp,0xc
c001f56c:	52                   	push   edx
c001f56d:	50                   	push   eax
c001f56e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f572:	2d d8 00 00 00       	sub    eax,0xd8
c001f577:	50                   	push   eax
c001f578:	e8 a1 f8 ff ff       	call   c001ee1e <Vm::fpuSetReg(int, unsigned long long)>
c001f57d:	e8 44 f9 ff ff       	call   c001eec6 <Vm::fpuPop()>
c001f582:	e9 01 fa ff ff       	jmp    c001ef88 <Vm::x87Handler(regs*)+0x70>
c001f587:	8d 50 20             	lea    edx,[eax+0x20]
c001f58a:	80 fa 07             	cmp    dl,0x7
c001f58d:	77 30                	ja     c001f5bf <Vm::x87Handler(regs*)+0x6a7>
c001f58f:	83 ec 0c             	sub    esp,0xc
c001f592:	2d e0 00 00 00       	sub    eax,0xe0
c001f597:	50                   	push   eax
c001f598:	e8 3e f8 ff ff       	call   c001eddb <Vm::fpuGetReg(int)>
c001f59d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f5a4:	89 c6                	mov    esi,eax
c001f5a6:	89 d7                	mov    edi,edx
c001f5a8:	e8 2e f8 ff ff       	call   c001eddb <Vm::fpuGetReg(int)>
c001f5ad:	57                   	push   edi
c001f5ae:	56                   	push   esi
c001f5af:	52                   	push   edx
c001f5b0:	50                   	push   eax
c001f5b1:	e8 48 f7 ff ff       	call   c001ecfe <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f5b6:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f5ba:	e9 54 02 00 00       	jmp    c001f813 <Vm::x87Handler(regs*)+0x8fb>
c001f5bf:	8d 50 18             	lea    edx,[eax+0x18]
c001f5c2:	80 fa 07             	cmp    dl,0x7
c001f5c5:	0f 87 43 fb ff ff    	ja     c001f10e <Vm::x87Handler(regs*)+0x1f6>
c001f5cb:	83 ec 0c             	sub    esp,0xc
c001f5ce:	2d e8 00 00 00       	sub    eax,0xe8
c001f5d3:	50                   	push   eax
c001f5d4:	e8 02 f8 ff ff       	call   c001eddb <Vm::fpuGetReg(int)>
c001f5d9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f5e0:	89 c6                	mov    esi,eax
c001f5e2:	89 d7                	mov    edi,edx
c001f5e4:	e8 f2 f7 ff ff       	call   c001eddb <Vm::fpuGetReg(int)>
c001f5e9:	57                   	push   edi
c001f5ea:	56                   	push   esi
c001f5eb:	52                   	push   edx
c001f5ec:	50                   	push   eax
c001f5ed:	e8 0c f7 ff ff       	call   c001ecfe <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f5f2:	83 c4 20             	add    esp,0x20
c001f5f5:	e8 cc f8 ff ff       	call   c001eec6 <Vm::fpuPop()>
c001f5fa:	eb 62                	jmp    c001f65e <Vm::x87Handler(regs*)+0x746>
c001f5fc:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001f600:	0f 85 0f 01 00 00    	jne    c001f715 <Vm::x87Handler(regs*)+0x7fd>
c001f606:	83 ec 0c             	sub    esp,0xc
c001f609:	6a 01                	push   0x1
c001f60b:	e8 cb f7 ff ff       	call   c001eddb <Vm::fpuGetReg(int)>
c001f610:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f617:	89 c6                	mov    esi,eax
c001f619:	89 d7                	mov    edi,edx
c001f61b:	e8 bb f7 ff ff       	call   c001eddb <Vm::fpuGetReg(int)>
c001f620:	57                   	push   edi
c001f621:	56                   	push   esi
c001f622:	52                   	push   edx
c001f623:	50                   	push   eax
c001f624:	e8 d5 f6 ff ff       	call   c001ecfe <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f629:	83 c4 20             	add    esp,0x20
c001f62c:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f630:	e8 91 f8 ff ff       	call   c001eec6 <Vm::fpuPop()>
c001f635:	e8 8c f8 ff ff       	call   c001eec6 <Vm::fpuPop()>
c001f63a:	e9 50 f9 ff ff       	jmp    c001ef8f <Vm::x87Handler(regs*)+0x77>
c001f63f:	3c d9                	cmp    al,0xd9
c001f641:	0f 85 b5 02 00 00    	jne    c001f8fc <Vm::x87Handler(regs*)+0x9e4>
c001f647:	eb bd                	jmp    c001f606 <Vm::x87Handler(regs*)+0x6ee>
c001f649:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001f64d:	0f 85 ea 02 00 00    	jne    c001f93d <Vm::x87Handler(regs*)+0xa25>
c001f653:	0f b7 05 40 ee 02 c0 	movzx  eax,WORD PTR ds:0xc002ee40
c001f65a:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001f65e:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f662:	e9 28 f9 ff ff       	jmp    c001ef8f <Vm::x87Handler(regs*)+0x77>
c001f667:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f66b:	84 d2                	test   dl,dl
c001f66d:	75 0f                	jne    c001f67e <Vm::x87Handler(regs*)+0x766>
c001f66f:	83 ec 0c             	sub    esp,0xc
c001f672:	ff 36                	push   DWORD PTR [esi]
c001f674:	e8 b1 f4 ff ff       	call   c001eb2a <Vm::fpu32ToInternal(unsigned int)>
c001f679:	e9 2c 01 00 00       	jmp    c001f7aa <Vm::x87Handler(regs*)+0x892>
c001f67e:	80 fa 01             	cmp    dl,0x1
c001f681:	75 0f                	jne    c001f692 <Vm::x87Handler(regs*)+0x77a>
c001f683:	83 ec 0c             	sub    esp,0xc
c001f686:	ff 36                	push   DWORD PTR [esi]
c001f688:	e8 9d f4 ff ff       	call   c001eb2a <Vm::fpu32ToInternal(unsigned int)>
c001f68d:	e9 81 02 00 00       	jmp    c001f913 <Vm::x87Handler(regs*)+0x9fb>
c001f692:	80 fa 04             	cmp    dl,0x4
c001f695:	75 0f                	jne    c001f6a6 <Vm::x87Handler(regs*)+0x78e>
c001f697:	83 ec 0c             	sub    esp,0xc
c001f69a:	ff 36                	push   DWORD PTR [esi]
c001f69c:	e8 89 f4 ff ff       	call   c001eb2a <Vm::fpu32ToInternal(unsigned int)>
c001f6a1:	e9 86 01 00 00       	jmp    c001f82c <Vm::x87Handler(regs*)+0x914>
c001f6a6:	80 fa 05             	cmp    dl,0x5
c001f6a9:	75 1b                	jne    c001f6c6 <Vm::x87Handler(regs*)+0x7ae>
c001f6ab:	83 ec 0c             	sub    esp,0xc
c001f6ae:	6a 00                	push   0x0
c001f6b0:	e8 26 f7 ff ff       	call   c001eddb <Vm::fpuGetReg(int)>
c001f6b5:	89 c7                	mov    edi,eax
c001f6b7:	89 d5                	mov    ebp,edx
c001f6b9:	58                   	pop    eax
c001f6ba:	ff 36                	push   DWORD PTR [esi]
c001f6bc:	e8 69 f4 ff ff       	call   c001eb2a <Vm::fpu32ToInternal(unsigned int)>
c001f6c1:	e9 a3 01 00 00       	jmp    c001f869 <Vm::x87Handler(regs*)+0x951>
c001f6c6:	80 fa 06             	cmp    dl,0x6
c001f6c9:	75 0f                	jne    c001f6da <Vm::x87Handler(regs*)+0x7c2>
c001f6cb:	83 ec 0c             	sub    esp,0xc
c001f6ce:	ff 36                	push   DWORD PTR [esi]
c001f6d0:	e8 55 f4 ff ff       	call   c001eb2a <Vm::fpu32ToInternal(unsigned int)>
c001f6d5:	e9 ae 01 00 00       	jmp    c001f888 <Vm::x87Handler(regs*)+0x970>
c001f6da:	31 c0                	xor    eax,eax
c001f6dc:	80 fa 07             	cmp    dl,0x7
c001f6df:	0f 85 94 02 00 00    	jne    c001f979 <Vm::x87Handler(regs*)+0xa61>
c001f6e5:	83 ec 0c             	sub    esp,0xc
c001f6e8:	6a 00                	push   0x0
c001f6ea:	e8 ec f6 ff ff       	call   c001eddb <Vm::fpuGetReg(int)>
c001f6ef:	89 c7                	mov    edi,eax
c001f6f1:	89 d5                	mov    ebp,edx
c001f6f3:	58                   	pop    eax
c001f6f4:	ff 36                	push   DWORD PTR [esi]
c001f6f6:	e8 2f f4 ff ff       	call   c001eb2a <Vm::fpu32ToInternal(unsigned int)>
c001f6fb:	e9 cb 01 00 00       	jmp    c001f8cb <Vm::x87Handler(regs*)+0x9b3>
c001f700:	80 fa 03             	cmp    dl,0x3
c001f703:	0f 85 d3 01 00 00    	jne    c001f8dc <Vm::x87Handler(regs*)+0x9c4>
c001f709:	e8 b8 f7 ff ff       	call   c001eec6 <Vm::fpuPop()>
c001f70e:	51                   	push   ecx
c001f70f:	51                   	push   ecx
c001f710:	e9 de 01 00 00       	jmp    c001f8f3 <Vm::x87Handler(regs*)+0x9db>
c001f715:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f719:	80 fa 01             	cmp    dl,0x1
c001f71c:	75 09                	jne    c001f727 <Vm::x87Handler(regs*)+0x80f>
c001f71e:	57                   	push   edi
c001f71f:	57                   	push   edi
c001f720:	8b 06                	mov    eax,DWORD PTR [esi]
c001f722:	e9 e3 01 00 00       	jmp    c001f90a <Vm::x87Handler(regs*)+0x9f2>
c001f727:	80 fa 04             	cmp    dl,0x4
c001f72a:	75 12                	jne    c001f73e <Vm::x87Handler(regs*)+0x826>
c001f72c:	31 d2                	xor    edx,edx
c001f72e:	51                   	push   ecx
c001f72f:	51                   	push   ecx
c001f730:	8b 06                	mov    eax,DWORD PTR [esi]
c001f732:	52                   	push   edx
c001f733:	50                   	push   eax
c001f734:	e8 d0 f4 ff ff       	call   c001ec09 <Vm::fpuLongToFloat(long long)>
c001f739:	e9 ee 00 00 00       	jmp    c001f82c <Vm::x87Handler(regs*)+0x914>
c001f73e:	31 c0                	xor    eax,eax
c001f740:	80 fa 07             	cmp    dl,0x7
c001f743:	0f 85 30 02 00 00    	jne    c001f979 <Vm::x87Handler(regs*)+0xa61>
c001f749:	83 ec 0c             	sub    esp,0xc
c001f74c:	6a 00                	push   0x0
c001f74e:	e8 88 f6 ff ff       	call   c001eddb <Vm::fpuGetReg(int)>
c001f753:	89 c7                	mov    edi,eax
c001f755:	89 d5                	mov    ebp,edx
c001f757:	58                   	pop    eax
c001f758:	8b 06                	mov    eax,DWORD PTR [esi]
c001f75a:	5a                   	pop    edx
c001f75b:	31 d2                	xor    edx,edx
c001f75d:	52                   	push   edx
c001f75e:	50                   	push   eax
c001f75f:	e8 a5 f4 ff ff       	call   c001ec09 <Vm::fpuLongToFloat(long long)>
c001f764:	e9 62 01 00 00       	jmp    c001f8cb <Vm::x87Handler(regs*)+0x9b3>
c001f769:	84 d2                	test   dl,dl
c001f76b:	75 0d                	jne    c001f77a <Vm::x87Handler(regs*)+0x862>
c001f76d:	31 d2                	xor    edx,edx
c001f76f:	55                   	push   ebp
c001f770:	55                   	push   ebp
c001f771:	8b 06                	mov    eax,DWORD PTR [esi]
c001f773:	52                   	push   edx
c001f774:	50                   	push   eax
c001f775:	e9 d3 01 00 00       	jmp    c001f94d <Vm::x87Handler(regs*)+0xa35>
c001f77a:	31 c0                	xor    eax,eax
c001f77c:	80 fa 02             	cmp    dl,0x2
c001f77f:	0f 85 f4 01 00 00    	jne    c001f979 <Vm::x87Handler(regs*)+0xa61>
c001f785:	83 ec 0c             	sub    esp,0xc
c001f788:	6a 00                	push   0x0
c001f78a:	e8 4c f6 ff ff       	call   c001eddb <Vm::fpuGetReg(int)>
c001f78f:	59                   	pop    ecx
c001f790:	5f                   	pop    edi
c001f791:	e9 6a f9 ff ff       	jmp    c001f100 <Vm::x87Handler(regs*)+0x1e8>
c001f796:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f79a:	84 d2                	test   dl,dl
c001f79c:	75 2a                	jne    c001f7c8 <Vm::x87Handler(regs*)+0x8b0>
c001f79e:	50                   	push   eax
c001f79f:	50                   	push   eax
c001f7a0:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f7a3:	ff 36                	push   DWORD PTR [esi]
c001f7a5:	e8 c5 f3 ff ff       	call   c001eb6f <Vm::fpu64ToInternal(unsigned long long)>
c001f7aa:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f7b1:	89 c6                	mov    esi,eax
c001f7b3:	89 d7                	mov    edi,edx
c001f7b5:	e8 21 f6 ff ff       	call   c001eddb <Vm::fpuGetReg(int)>
c001f7ba:	57                   	push   edi
c001f7bb:	56                   	push   esi
c001f7bc:	52                   	push   edx
c001f7bd:	50                   	push   eax
c001f7be:	e8 8e f5 ff ff       	call   c001ed51 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f7c3:	e9 64 01 00 00       	jmp    c001f92c <Vm::x87Handler(regs*)+0xa14>
c001f7c8:	80 fa 01             	cmp    dl,0x1
c001f7cb:	75 11                	jne    c001f7de <Vm::x87Handler(regs*)+0x8c6>
c001f7cd:	50                   	push   eax
c001f7ce:	50                   	push   eax
c001f7cf:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f7d2:	ff 36                	push   DWORD PTR [esi]
c001f7d4:	e8 96 f3 ff ff       	call   c001eb6f <Vm::fpu64ToInternal(unsigned long long)>
c001f7d9:	e9 35 01 00 00       	jmp    c001f913 <Vm::x87Handler(regs*)+0x9fb>
c001f7de:	80 fa 02             	cmp    dl,0x2
c001f7e1:	0f 85 54 f9 ff ff    	jne    c001f13b <Vm::x87Handler(regs*)+0x223>
c001f7e7:	55                   	push   ebp
c001f7e8:	55                   	push   ebp
c001f7e9:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f7ec:	ff 36                	push   DWORD PTR [esi]
c001f7ee:	e8 7c f3 ff ff       	call   c001eb6f <Vm::fpu64ToInternal(unsigned long long)>
c001f7f3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f7fa:	89 c6                	mov    esi,eax
c001f7fc:	89 d7                	mov    edi,edx
c001f7fe:	e8 d8 f5 ff ff       	call   c001eddb <Vm::fpuGetReg(int)>
c001f803:	57                   	push   edi
c001f804:	56                   	push   esi
c001f805:	52                   	push   edx
c001f806:	50                   	push   eax
c001f807:	e8 f2 f4 ff ff       	call   c001ecfe <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f80c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001f810:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f813:	83 c4 20             	add    esp,0x20
c001f816:	e9 74 f7 ff ff       	jmp    c001ef8f <Vm::x87Handler(regs*)+0x77>
c001f81b:	80 fa 04             	cmp    dl,0x4
c001f81e:	75 2a                	jne    c001f84a <Vm::x87Handler(regs*)+0x932>
c001f820:	51                   	push   ecx
c001f821:	51                   	push   ecx
c001f822:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f825:	ff 36                	push   DWORD PTR [esi]
c001f827:	e8 43 f3 ff ff       	call   c001eb6f <Vm::fpu64ToInternal(unsigned long long)>
c001f82c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f833:	89 c6                	mov    esi,eax
c001f835:	89 d7                	mov    edi,edx
c001f837:	e8 9f f5 ff ff       	call   c001eddb <Vm::fpuGetReg(int)>
c001f83c:	57                   	push   edi
c001f83d:	56                   	push   esi
c001f83e:	52                   	push   edx
c001f83f:	50                   	push   eax
c001f840:	e8 36 f5 ff ff       	call   c001ed7b <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f845:	e9 e2 00 00 00       	jmp    c001f92c <Vm::x87Handler(regs*)+0xa14>
c001f84a:	80 fa 05             	cmp    dl,0x5
c001f84d:	75 28                	jne    c001f877 <Vm::x87Handler(regs*)+0x95f>
c001f84f:	83 ec 0c             	sub    esp,0xc
c001f852:	6a 00                	push   0x0
c001f854:	e8 82 f5 ff ff       	call   c001eddb <Vm::fpuGetReg(int)>
c001f859:	89 c7                	mov    edi,eax
c001f85b:	89 d5                	mov    ebp,edx
c001f85d:	58                   	pop    eax
c001f85e:	5a                   	pop    edx
c001f85f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f862:	ff 36                	push   DWORD PTR [esi]
c001f864:	e8 06 f3 ff ff       	call   c001eb6f <Vm::fpu64ToInternal(unsigned long long)>
c001f869:	83 c4 10             	add    esp,0x10
c001f86c:	55                   	push   ebp
c001f86d:	57                   	push   edi
c001f86e:	52                   	push   edx
c001f86f:	50                   	push   eax
c001f870:	e8 06 f5 ff ff       	call   c001ed7b <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f875:	eb 60                	jmp    c001f8d7 <Vm::x87Handler(regs*)+0x9bf>
c001f877:	80 fa 06             	cmp    dl,0x6
c001f87a:	75 2a                	jne    c001f8a6 <Vm::x87Handler(regs*)+0x98e>
c001f87c:	51                   	push   ecx
c001f87d:	51                   	push   ecx
c001f87e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f881:	ff 36                	push   DWORD PTR [esi]
c001f883:	e8 e7 f2 ff ff       	call   c001eb6f <Vm::fpu64ToInternal(unsigned long long)>
c001f888:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f88f:	89 c6                	mov    esi,eax
c001f891:	89 d7                	mov    edi,edx
c001f893:	e8 43 f5 ff ff       	call   c001eddb <Vm::fpuGetReg(int)>
c001f898:	57                   	push   edi
c001f899:	56                   	push   esi
c001f89a:	52                   	push   edx
c001f89b:	50                   	push   eax
c001f89c:	e8 08 f5 ff ff       	call   c001eda9 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f8a1:	e9 86 00 00 00       	jmp    c001f92c <Vm::x87Handler(regs*)+0xa14>
c001f8a6:	31 c0                	xor    eax,eax
c001f8a8:	80 fa 07             	cmp    dl,0x7
c001f8ab:	0f 85 c8 00 00 00    	jne    c001f979 <Vm::x87Handler(regs*)+0xa61>
c001f8b1:	83 ec 0c             	sub    esp,0xc
c001f8b4:	6a 00                	push   0x0
c001f8b6:	e8 20 f5 ff ff       	call   c001eddb <Vm::fpuGetReg(int)>
c001f8bb:	89 c7                	mov    edi,eax
c001f8bd:	89 d5                	mov    ebp,edx
c001f8bf:	58                   	pop    eax
c001f8c0:	5a                   	pop    edx
c001f8c1:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f8c4:	ff 36                	push   DWORD PTR [esi]
c001f8c6:	e8 a4 f2 ff ff       	call   c001eb6f <Vm::fpu64ToInternal(unsigned long long)>
c001f8cb:	83 c4 10             	add    esp,0x10
c001f8ce:	55                   	push   ebp
c001f8cf:	57                   	push   edi
c001f8d0:	52                   	push   edx
c001f8d1:	50                   	push   eax
c001f8d2:	e8 d2 f4 ff ff       	call   c001eda9 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f8d7:	83 c4 0c             	add    esp,0xc
c001f8da:	eb 53                	jmp    c001f92f <Vm::x87Handler(regs*)+0xa17>
c001f8dc:	31 c0                	xor    eax,eax
c001f8de:	80 fa 02             	cmp    dl,0x2
c001f8e1:	0f 85 92 00 00 00    	jne    c001f979 <Vm::x87Handler(regs*)+0xa61>
c001f8e7:	83 ec 0c             	sub    esp,0xc
c001f8ea:	6a 00                	push   0x0
c001f8ec:	e8 ea f4 ff ff       	call   c001eddb <Vm::fpuGetReg(int)>
c001f8f1:	59                   	pop    ecx
c001f8f2:	5f                   	pop    edi
c001f8f3:	52                   	push   edx
c001f8f4:	50                   	push   eax
c001f8f5:	e8 27 f2 ff ff       	call   c001eb21 <Vm::fpuInternalTo64(unsigned long long)>
c001f8fa:	eb 70                	jmp    c001f96c <Vm::x87Handler(regs*)+0xa54>
c001f8fc:	31 c0                	xor    eax,eax
c001f8fe:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001f903:	75 74                	jne    c001f979 <Vm::x87Handler(regs*)+0xa61>
c001f905:	50                   	push   eax
c001f906:	50                   	push   eax
c001f907:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001f90a:	31 d2                	xor    edx,edx
c001f90c:	52                   	push   edx
c001f90d:	50                   	push   eax
c001f90e:	e8 f6 f2 ff ff       	call   c001ec09 <Vm::fpuLongToFloat(long long)>
c001f913:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f91a:	89 c6                	mov    esi,eax
c001f91c:	89 d7                	mov    edi,edx
c001f91e:	e8 b8 f4 ff ff       	call   c001eddb <Vm::fpuGetReg(int)>
c001f923:	57                   	push   edi
c001f924:	56                   	push   esi
c001f925:	52                   	push   edx
c001f926:	50                   	push   eax
c001f927:	e8 5e f4 ff ff       	call   c001ed8a <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f92c:	83 c4 1c             	add    esp,0x1c
c001f92f:	52                   	push   edx
c001f930:	50                   	push   eax
c001f931:	6a 00                	push   0x0
c001f933:	e8 e6 f4 ff ff       	call   c001ee1e <Vm::fpuSetReg(int, unsigned long long)>
c001f938:	e9 f2 f7 ff ff       	jmp    c001f12f <Vm::x87Handler(regs*)+0x217>
c001f93d:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f941:	80 fa 05             	cmp    dl,0x5
c001f944:	75 11                	jne    c001f957 <Vm::x87Handler(regs*)+0xa3f>
c001f946:	55                   	push   ebp
c001f947:	55                   	push   ebp
c001f948:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f94b:	ff 36                	push   DWORD PTR [esi]
c001f94d:	e8 81 f2 ff ff       	call   c001ebd3 <Vm::fpuULongToFloat(unsigned long long)>
c001f952:	e9 cf f7 ff ff       	jmp    c001f126 <Vm::x87Handler(regs*)+0x20e>
c001f957:	31 c0                	xor    eax,eax
c001f959:	80 fa 07             	cmp    dl,0x7
c001f95c:	75 1b                	jne    c001f979 <Vm::x87Handler(regs*)+0xa61>
c001f95e:	e8 63 f5 ff ff       	call   c001eec6 <Vm::fpuPop()>
c001f963:	51                   	push   ecx
c001f964:	51                   	push   ecx
c001f965:	52                   	push   edx
c001f966:	50                   	push   eax
c001f967:	e8 0c f2 ff ff       	call   c001eb78 <Vm::fpuFloatToLong(unsigned long long)>
c001f96c:	83 c4 10             	add    esp,0x10
c001f96f:	89 06                	mov    DWORD PTR [esi],eax
c001f971:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001f974:	e9 f8 f7 ff ff       	jmp    c001f171 <Vm::x87Handler(regs*)+0x259>
c001f979:	83 c4 1c             	add    esp,0x1c
c001f97c:	5b                   	pop    ebx
c001f97d:	5e                   	pop    esi
c001f97e:	5f                   	pop    edi
c001f97f:	5d                   	pop    ebp
c001f980:	c3                   	ret    

c001f981 <__static_initialization_and_destruction_0(int, int)>:
c001f981:	83 ec 0c             	sub    esp,0xc
c001f984:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001f989:	75 1a                	jne    c001f9a5 <__static_initialization_and_destruction_0(int, int)+0x24>
c001f98b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001f993:	75 10                	jne    c001f9a5 <__static_initialization_and_destruction_0(int, int)+0x24>
c001f995:	83 ec 0c             	sub    esp,0xc
c001f998:	68 40 ee 02 c0       	push   0xc002ee40
c001f99d:	e8 fe 88 00 00       	call   c00282a0 <Vm::_FPUState::_FPUState()>
c001f9a2:	83 c4 10             	add    esp,0x10
c001f9a5:	90                   	nop
c001f9a6:	83 c4 0c             	add    esp,0xc
c001f9a9:	c3                   	ret    

c001f9aa <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001f9aa:	83 ec 0c             	sub    esp,0xc
c001f9ad:	83 ec 08             	sub    esp,0x8
c001f9b0:	68 ff ff 00 00       	push   0xffff
c001f9b5:	6a 01                	push   0x1
c001f9b7:	e8 c5 ff ff ff       	call   c001f981 <__static_initialization_and_destruction_0(int, int)>
c001f9bc:	83 c4 10             	add    esp,0x10
c001f9bf:	83 c4 0c             	add    esp,0xc
c001f9c2:	c3                   	ret    
c001f9c3:	90                   	nop

c001f9c4 <FAT::getName()>:
c001f9c4:	b8 88 bb 02 c0       	mov    eax,0xc002bb88
c001f9c9:	c3                   	ret    

c001f9ca <FAT::tell(void*, unsigned long long*)>:
c001f9ca:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001f9cf:	75 06                	jne    c001f9d7 <FAT::tell(void*, unsigned long long*)+0xd>
c001f9d1:	b8 04 00 00 00       	mov    eax,0x4
c001f9d6:	c3                   	ret    
c001f9d7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001f9dc:	75 06                	jne    c001f9e4 <FAT::tell(void*, unsigned long long*)+0x1a>
c001f9de:	b8 04 00 00 00       	mov    eax,0x4
c001f9e3:	c3                   	ret    
c001f9e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f9e8:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001f9eb:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001f9ee:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f9f2:	89 01                	mov    DWORD PTR [ecx],eax
c001f9f4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001f9f7:	b8 00 00 00 00       	mov    eax,0x0
c001f9fc:	c3                   	ret    
c001f9fd:	90                   	nop

c001f9fe <FAT::stat(void*, unsigned long long*)>:
c001f9fe:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001fa03:	75 06                	jne    c001fa0b <FAT::stat(void*, unsigned long long*)+0xd>
c001fa05:	b8 04 00 00 00       	mov    eax,0x4
c001fa0a:	c3                   	ret    
c001fa0b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001fa10:	75 06                	jne    c001fa18 <FAT::stat(void*, unsigned long long*)+0x1a>
c001fa12:	b8 04 00 00 00       	mov    eax,0x4
c001fa17:	c3                   	ret    
c001fa18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fa1c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001fa1f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001fa22:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001fa26:	89 01                	mov    DWORD PTR [ecx],eax
c001fa28:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001fa2b:	b8 00 00 00 00       	mov    eax,0x0
c001fa30:	c3                   	ret    
c001fa31:	90                   	nop

c001fa32 <FAT::~FAT()>:
c001fa32:	83 ec 0c             	sub    esp,0xc
c001fa35:	ba 0c bc 02 c0       	mov    edx,0xc002bc0c
c001fa3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa3e:	89 10                	mov    DWORD PTR [eax],edx
c001fa40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa44:	83 ec 0c             	sub    esp,0xc
c001fa47:	50                   	push   eax
c001fa48:	e8 cf 31 ff ff       	call   c0012c1c <Filesystem::~Filesystem()>
c001fa4d:	83 c4 10             	add    esp,0x10
c001fa50:	90                   	nop
c001fa51:	83 c4 0c             	add    esp,0xc
c001fa54:	c3                   	ret    
c001fa55:	90                   	nop

c001fa56 <FAT::~FAT()>:
c001fa56:	83 ec 0c             	sub    esp,0xc
c001fa59:	83 ec 0c             	sub    esp,0xc
c001fa5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa60:	e8 cd ff ff ff       	call   c001fa32 <FAT::~FAT()>
c001fa65:	83 c4 10             	add    esp,0x10
c001fa68:	83 ec 08             	sub    esp,0x8
c001fa6b:	6a 08                	push   0x8
c001fa6d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa71:	e8 9d 2d ff ff       	call   c0012813 <operator delete(void*, unsigned long)>
c001fa76:	83 c4 10             	add    esp,0x10
c001fa79:	83 c4 0c             	add    esp,0xc
c001fa7c:	c3                   	ret    
c001fa7d:	90                   	nop

c001fa7e <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001fa7e:	83 ec 1c             	sub    esp,0x1c
c001fa81:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001fa88:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001fa8d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001fa91:	8b 04 85 c0 ee 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1140]
c001fa98:	83 f8 ff             	cmp    eax,0xffffffff
c001fa9b:	75 34                	jne    c001fad1 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c001fa9d:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001faa1:	88 c2                	mov    dl,al
c001faa3:	a1 a0 ee 02 c0       	mov    eax,ds:0xc002eea0
c001faa8:	01 d0                	add    eax,edx
c001faaa:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001faae:	8b 15 a0 ee 02 c0    	mov    edx,DWORD PTR ds:0xc002eea0
c001fab4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001fab8:	89 14 85 c0 ee 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1140],edx
c001fabf:	a1 a0 ee 02 c0       	mov    eax,ds:0xc002eea0
c001fac4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001fac8:	89 14 85 40 ef 02 c0 	mov    DWORD PTR [eax*4-0x3ffd10c0],edx
c001facf:	eb 17                	jmp    c001fae8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c001fad1:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001fad5:	88 c2                	mov    dl,al
c001fad7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001fadb:	8b 04 85 c0 ee 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1140]
c001fae2:	01 d0                	add    eax,edx
c001fae4:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001fae8:	83 ec 04             	sub    esp,0x4
c001faeb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001faef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001faf3:	8d 44 24 15          	lea    eax,[esp+0x15]
c001faf7:	50                   	push   eax
c001faf8:	e8 24 70 fe ff       	call   c0006b21 <f_getlabel>
c001fafd:	83 c4 10             	add    esp,0x10
c001fb00:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fb04:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001fb09:	75 07                	jne    c001fb12 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c001fb0b:	b8 00 00 00 00       	mov    eax,0x0
c001fb10:	eb 05                	jmp    c001fb17 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c001fb12:	b8 01 00 00 00       	mov    eax,0x1
c001fb17:	83 c4 1c             	add    esp,0x1c
c001fb1a:	c3                   	ret    
c001fb1b:	90                   	nop

c001fb1c <FAT::setlabel(LogicalDisk*, int, char*)>:
c001fb1c:	57                   	push   edi
c001fb1d:	83 ec 58             	sub    esp,0x58
c001fb20:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001fb28:	8d 54 24 10          	lea    edx,[esp+0x10]
c001fb2c:	b9 0f 00 00 00       	mov    ecx,0xf
c001fb31:	b8 00 00 00 00       	mov    eax,0x0
c001fb36:	fc                   	cld    
c001fb37:	89 d7                	mov    edi,edx
c001fb39:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001fb3b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001fb3f:	8b 04 85 c0 ee 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1140]
c001fb46:	83 f8 ff             	cmp    eax,0xffffffff
c001fb49:	75 34                	jne    c001fb7f <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c001fb4b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001fb4f:	88 c2                	mov    dl,al
c001fb51:	a1 a0 ee 02 c0       	mov    eax,ds:0xc002eea0
c001fb56:	01 d0                	add    eax,edx
c001fb58:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001fb5c:	8b 15 a0 ee 02 c0    	mov    edx,DWORD PTR ds:0xc002eea0
c001fb62:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001fb66:	89 14 85 c0 ee 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1140],edx
c001fb6d:	a1 a0 ee 02 c0       	mov    eax,ds:0xc002eea0
c001fb72:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001fb76:	89 14 85 40 ef 02 c0 	mov    DWORD PTR [eax*4-0x3ffd10c0],edx
c001fb7d:	eb 17                	jmp    c001fb96 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c001fb7f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001fb83:	88 c2                	mov    dl,al
c001fb85:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001fb89:	8b 04 85 c0 ee 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1140]
c001fb90:	01 d0                	add    eax,edx
c001fb92:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001fb96:	83 ec 08             	sub    esp,0x8
c001fb99:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001fb9d:	8d 44 24 18          	lea    eax,[esp+0x18]
c001fba1:	50                   	push   eax
c001fba2:	e8 73 0c fe ff       	call   c000081a <strcat>
c001fba7:	83 c4 10             	add    esp,0x10
c001fbaa:	83 ec 0c             	sub    esp,0xc
c001fbad:	8d 44 24 18          	lea    eax,[esp+0x18]
c001fbb1:	50                   	push   eax
c001fbb2:	e8 58 71 fe ff       	call   c0006d0f <f_setlabel>
c001fbb7:	83 c4 10             	add    esp,0x10
c001fbba:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001fbbe:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001fbc3:	75 07                	jne    c001fbcc <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c001fbc5:	b8 00 00 00 00       	mov    eax,0x0
c001fbca:	eb 05                	jmp    c001fbd1 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c001fbcc:	b8 01 00 00 00       	mov    eax,0x1
c001fbd1:	83 c4 58             	add    esp,0x58
c001fbd4:	5f                   	pop    edi
c001fbd5:	c3                   	ret    

c001fbd6 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001fbd6:	83 ec 2c             	sub    esp,0x2c
c001fbd9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001fbe1:	83 ec 08             	sub    esp,0x8
c001fbe4:	68 ac bb 02 c0       	push   0xc002bbac
c001fbe9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001fbed:	e8 c2 0b fe ff       	call   c00007b4 <strcmp>
c001fbf2:	83 c4 10             	add    esp,0x10
c001fbf5:	85 c0                	test   eax,eax
c001fbf7:	0f 94 c0             	sete   al
c001fbfa:	84 c0                	test   al,al
c001fbfc:	74 0d                	je     c001fc0b <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c001fbfe:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001fc06:	e9 a6 00 00 00       	jmp    c001fcb1 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001fc0b:	83 ec 08             	sub    esp,0x8
c001fc0e:	68 9e bb 02 c0       	push   0xc002bb9e
c001fc13:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001fc17:	e8 98 0b fe ff       	call   c00007b4 <strcmp>
c001fc1c:	83 c4 10             	add    esp,0x10
c001fc1f:	85 c0                	test   eax,eax
c001fc21:	0f 94 c0             	sete   al
c001fc24:	84 c0                	test   al,al
c001fc26:	74 0a                	je     c001fc32 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c001fc28:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001fc30:	eb 7f                	jmp    c001fcb1 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001fc32:	83 ec 08             	sub    esp,0x8
c001fc35:	68 a4 bb 02 c0       	push   0xc002bba4
c001fc3a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001fc3e:	e8 71 0b fe ff       	call   c00007b4 <strcmp>
c001fc43:	83 c4 10             	add    esp,0x10
c001fc46:	85 c0                	test   eax,eax
c001fc48:	0f 94 c0             	sete   al
c001fc4b:	84 c0                	test   al,al
c001fc4d:	74 0a                	je     c001fc59 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c001fc4f:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001fc57:	eb 58                	jmp    c001fcb1 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001fc59:	83 ec 08             	sub    esp,0x8
c001fc5c:	68 0c 8a 02 c0       	push   0xc0028a0c
c001fc61:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001fc65:	e8 4a 0b fe ff       	call   c00007b4 <strcmp>
c001fc6a:	83 c4 10             	add    esp,0x10
c001fc6d:	85 c0                	test   eax,eax
c001fc6f:	0f 94 c0             	sete   al
c001fc72:	84 c0                	test   al,al
c001fc74:	74 0a                	je     c001fc80 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c001fc76:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001fc7e:	eb 31                	jmp    c001fcb1 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001fc80:	83 ec 08             	sub    esp,0x8
c001fc83:	68 aa bb 02 c0       	push   0xc002bbaa
c001fc88:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001fc8c:	e8 23 0b fe ff       	call   c00007b4 <strcmp>
c001fc91:	83 c4 10             	add    esp,0x10
c001fc94:	85 c0                	test   eax,eax
c001fc96:	0f 94 c0             	sete   al
c001fc99:	84 c0                	test   al,al
c001fc9b:	74 0a                	je     c001fca7 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c001fc9d:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001fca5:	eb 0a                	jmp    c001fcb1 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001fca7:	b8 08 00 00 00       	mov    eax,0x8
c001fcac:	e9 04 01 00 00       	jmp    c001fdb5 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001fcb1:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001fcb8:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001fcbd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001fcc1:	8b 04 85 c0 ee 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1140]
c001fcc8:	83 f8 ff             	cmp    eax,0xffffffff
c001fccb:	75 34                	jne    c001fd01 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c001fccd:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001fcd1:	88 c2                	mov    dl,al
c001fcd3:	a1 a0 ee 02 c0       	mov    eax,ds:0xc002eea0
c001fcd8:	01 d0                	add    eax,edx
c001fcda:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001fcde:	8b 15 a0 ee 02 c0    	mov    edx,DWORD PTR ds:0xc002eea0
c001fce4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001fce8:	89 14 85 c0 ee 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1140],edx
c001fcef:	a1 a0 ee 02 c0       	mov    eax,ds:0xc002eea0
c001fcf4:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001fcf8:	89 14 85 40 ef 02 c0 	mov    DWORD PTR [eax*4-0x3ffd10c0],edx
c001fcff:	eb 17                	jmp    c001fd18 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c001fd01:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001fd05:	88 c2                	mov    dl,al
c001fd07:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001fd0b:	8b 04 85 c0 ee 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1140]
c001fd12:	01 d0                	add    eax,edx
c001fd14:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001fd18:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fd1c:	88 04 24             	mov    BYTE PTR [esp],al
c001fd1f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001fd23:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fd27:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001fd2f:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001fd34:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001fd3c:	83 ec 0c             	sub    esp,0xc
c001fd3f:	68 00 20 00 00       	push   0x2000
c001fd44:	e8 db f8 fe ff       	call   c000f624 <malloc>
c001fd49:	83 c4 10             	add    esp,0x10
c001fd4c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001fd50:	68 00 20 00 00       	push   0x2000
c001fd55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd59:	8d 44 24 08          	lea    eax,[esp+0x8]
c001fd5d:	50                   	push   eax
c001fd5e:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001fd62:	50                   	push   eax
c001fd63:	e8 f2 73 fe ff       	call   c000715a <f_mkfs>
c001fd68:	83 c4 10             	add    esp,0x10
c001fd6b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001fd6f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fd74:	75 07                	jne    c001fd7d <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c001fd76:	b8 00 00 00 00       	mov    eax,0x0
c001fd7b:	eb 38                	jmp    c001fdb5 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001fd7d:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001fd82:	75 17                	jne    c001fd9b <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c001fd84:	83 ec 0c             	sub    esp,0xc
c001fd87:	68 dc bb 02 c0       	push   0xc002bbdc
c001fd8c:	e8 62 2b ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001fd91:	83 c4 10             	add    esp,0x10
c001fd94:	b8 09 00 00 00       	mov    eax,0x9
c001fd99:	eb 1a                	jmp    c001fdb5 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001fd9b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fd9f:	83 ec 08             	sub    esp,0x8
c001fda2:	50                   	push   eax
c001fda3:	68 b0 bb 02 c0       	push   0xc002bbb0
c001fda8:	e8 46 2b ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c001fdad:	83 c4 10             	add    esp,0x10
c001fdb0:	b8 01 00 00 00       	mov    eax,0x1
c001fdb5:	83 c4 2c             	add    esp,0x2c
c001fdb8:	c3                   	ret    
c001fdb9:	90                   	nop

c001fdba <FAT::tryMount(LogicalDisk*, int)>:
c001fdba:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001fdc0:	a1 a0 ee 02 c0       	mov    eax,ds:0xc002eea0
c001fdc5:	83 f8 14             	cmp    eax,0x14
c001fdc8:	75 17                	jne    c001fde1 <FAT::tryMount(LogicalDisk*, int)+0x27>
c001fdca:	83 ec 0c             	sub    esp,0xc
c001fdcd:	68 c2 bb 02 c0       	push   0xc002bbc2
c001fdd2:	e8 76 9e ff ff       	call   c0019c4d <Krnl::panic(char const*)>
c001fdd7:	83 c4 10             	add    esp,0x10
c001fdda:	b0 00                	mov    al,0x0
c001fddc:	e9 d7 01 00 00       	jmp    c001ffb8 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001fde1:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001fde8:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001fdee:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001fdf4:	3d 00 02 00 00       	cmp    eax,0x200
c001fdf9:	74 07                	je     c001fe02 <FAT::tryMount(LogicalDisk*, int)+0x48>
c001fdfb:	b0 00                	mov    al,0x0
c001fdfd:	e9 b6 01 00 00       	jmp    c001ffb8 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001fe02:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001fe0a:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001fe11:	8b 04 85 c0 ee 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1140]
c001fe18:	83 f8 ff             	cmp    eax,0xffffffff
c001fe1b:	74 07                	je     c001fe24 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c001fe1d:	b0 01                	mov    al,0x1
c001fe1f:	e9 94 01 00 00       	jmp    c001ffb8 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001fe24:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001fe2e:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001fe36:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001fe3d:	88 c2                	mov    dl,al
c001fe3f:	a1 a0 ee 02 c0       	mov    eax,ds:0xc002eea0
c001fe44:	01 d0                	add    eax,edx
c001fe46:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001fe4d:	8b 15 a0 ee 02 c0    	mov    edx,DWORD PTR ds:0xc002eea0
c001fe53:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001fe5a:	89 14 85 c0 ee 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1140],edx
c001fe61:	a1 a0 ee 02 c0       	mov    eax,ds:0xc002eea0
c001fe66:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001fe6d:	89 14 85 40 ef 02 c0 	mov    DWORD PTR [eax*4-0x3ffd10c0],edx
c001fe74:	83 ec 0c             	sub    esp,0xc
c001fe77:	68 54 02 00 00       	push   0x254
c001fe7c:	e8 a3 f7 fe ff       	call   c000f624 <malloc>
c001fe81:	83 c4 10             	add    esp,0x10
c001fe84:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001fe8b:	83 ec 04             	sub    esp,0x4
c001fe8e:	6a 00                	push   0x0
c001fe90:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001fe97:	50                   	push   eax
c001fe98:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001fe9f:	e8 74 4e fe ff       	call   c0004d18 <f_mount>
c001fea4:	83 c4 10             	add    esp,0x10
c001fea7:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001feae:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001feb6:	74 19                	je     c001fed1 <FAT::tryMount(LogicalDisk*, int)+0x117>
c001feb8:	83 ec 0c             	sub    esp,0xc
c001febb:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001fec2:	e8 7d f7 fe ff       	call   c000f644 <rfree>
c001fec7:	83 c4 10             	add    esp,0x10
c001feca:	b0 00                	mov    al,0x0
c001fecc:	e9 e7 00 00 00       	jmp    c001ffb8 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001fed1:	83 ec 04             	sub    esp,0x4
c001fed4:	68 00 01 00 00       	push   0x100
c001fed9:	6a 00                	push   0x0
c001fedb:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001fee2:	50                   	push   eax
c001fee3:	e8 dc 07 fe ff       	call   c00006c4 <memset>
c001fee8:	83 c4 10             	add    esp,0x10
c001feeb:	83 ec 08             	sub    esp,0x8
c001feee:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001fef5:	50                   	push   eax
c001fef6:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001fefd:	50                   	push   eax
c001fefe:	e8 17 09 fe ff       	call   c000081a <strcat>
c001ff03:	83 c4 10             	add    esp,0x10
c001ff06:	83 ec 08             	sub    esp,0x8
c001ff09:	68 d0 bb 02 c0       	push   0xc002bbd0
c001ff0e:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001ff15:	50                   	push   eax
c001ff16:	e8 ff 08 fe ff       	call   c000081a <strcat>
c001ff1b:	83 c4 10             	add    esp,0x10
c001ff1e:	83 ec 04             	sub    esp,0x4
c001ff21:	6a 01                	push   0x1
c001ff23:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001ff2a:	50                   	push   eax
c001ff2b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ff2f:	50                   	push   eax
c001ff30:	e8 45 4e fe ff       	call   c0004d7a <f_open>
c001ff35:	83 c4 10             	add    esp,0x10
c001ff38:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001ff3f:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001ff46:	85 c0                	test   eax,eax
c001ff48:	74 0a                	je     c001ff54 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c001ff4a:	78 2d                	js     c001ff79 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001ff4c:	83 e8 04             	sub    eax,0x4
c001ff4f:	83 f8 01             	cmp    eax,0x1
c001ff52:	77 25                	ja     c001ff79 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001ff54:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001ff5c:	83 ec 0c             	sub    esp,0xc
c001ff5f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ff63:	50                   	push   eax
c001ff64:	e8 63 59 fe ff       	call   c00058cc <f_close>
c001ff69:	83 c4 10             	add    esp,0x10
c001ff6c:	90                   	nop
c001ff6d:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001ff75:	74 3a                	je     c001ffb1 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c001ff77:	eb 2d                	jmp    c001ffa6 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c001ff79:	83 ec 0c             	sub    esp,0xc
c001ff7c:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001ff83:	e8 bc f6 fe ff       	call   c000f644 <rfree>
c001ff88:	83 c4 10             	add    esp,0x10
c001ff8b:	83 ec 04             	sub    esp,0x4
c001ff8e:	6a 00                	push   0x0
c001ff90:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001ff97:	50                   	push   eax
c001ff98:	6a 00                	push   0x0
c001ff9a:	e8 79 4d fe ff       	call   c0004d18 <f_mount>
c001ff9f:	83 c4 10             	add    esp,0x10
c001ffa2:	b0 00                	mov    al,0x0
c001ffa4:	eb 12                	jmp    c001ffb8 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001ffa6:	a1 a0 ee 02 c0       	mov    eax,ds:0xc002eea0
c001ffab:	40                   	inc    eax
c001ffac:	a3 a0 ee 02 c0       	mov    ds:0xc002eea0,eax
c001ffb1:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001ffb8:	81 c4 6c 03 00 00    	add    esp,0x36c
c001ffbe:	c3                   	ret    
c001ffbf:	90                   	nop

c001ffc0 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001ffc0:	81 ec 3c 02 00 00    	sub    esp,0x23c
c001ffc6:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c001ffce:	74 0a                	je     c001ffda <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c001ffd0:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c001ffd8:	75 0a                	jne    c001ffe4 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c001ffda:	b8 04 00 00 00       	mov    eax,0x4
c001ffdf:	e9 db 00 00 00       	jmp    c00200bf <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001ffe4:	83 ec 08             	sub    esp,0x8
c001ffe7:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001ffee:	50                   	push   eax
c001ffef:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c001fff6:	e8 db 5e fe ff       	call   c0005ed6 <f_readdir>
c001fffb:	83 c4 10             	add    esp,0x10
c001fffe:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c0020005:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c002000b:	83 ec 0c             	sub    esp,0xc
c002000e:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020015:	83 c0 1a             	add    eax,0x1a
c0020018:	50                   	push   eax
c0020019:	e8 c3 06 fe ff       	call   c00006e1 <strlen>
c002001e:	83 c4 10             	add    esp,0x10
c0020021:	ba 00 00 00 00       	mov    edx,0x0
c0020026:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002002a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002002e:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c0020035:	0f b6 c0             	movzx  eax,al
c0020038:	83 e0 10             	and    eax,0x10
c002003b:	74 07                	je     c0020044 <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c002003d:	b8 02 00 00 00       	mov    eax,0x2
c0020042:	eb 05                	jmp    c0020049 <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c0020044:	b8 01 00 00 00       	mov    eax,0x1
c0020049:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002004d:	83 ec 08             	sub    esp,0x8
c0020050:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020057:	83 c0 1a             	add    eax,0x1a
c002005a:	50                   	push   eax
c002005b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002005f:	83 c0 10             	add    eax,0x10
c0020062:	50                   	push   eax
c0020063:	e8 fb 06 fe ff       	call   c0000763 <strcpy>
c0020068:	83 c4 10             	add    esp,0x10
c002006b:	83 ec 04             	sub    esp,0x4
c002006e:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c0020075:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020079:	50                   	push   eax
c002007a:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c0020081:	e8 1a 06 fe ff       	call   c00006a0 <memcpy>
c0020086:	83 c4 10             	add    esp,0x10
c0020089:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c0020090:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020096:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c002009d:	84 c0                	test   al,al
c002009f:	75 07                	jne    c00200a8 <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c00200a1:	b8 07 00 00 00       	mov    eax,0x7
c00200a6:	eb 17                	jmp    c00200bf <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c00200a8:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c00200af:	85 c0                	test   eax,eax
c00200b1:	75 07                	jne    c00200ba <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c00200b3:	b8 00 00 00 00       	mov    eax,0x0
c00200b8:	eb 05                	jmp    c00200bf <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c00200ba:	b8 01 00 00 00       	mov    eax,0x1
c00200bf:	81 c4 3c 02 00 00    	add    esp,0x23c
c00200c5:	c3                   	ret    

c00200c6 <FAT::read(void*, unsigned long, void*, int*)>:
c00200c6:	83 ec 1c             	sub    esp,0x1c
c00200c9:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00200ce:	74 07                	je     c00200d7 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c00200d0:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00200d5:	75 07                	jne    c00200de <FAT::read(void*, unsigned long, void*, int*)+0x18>
c00200d7:	b8 04 00 00 00       	mov    eax,0x4
c00200dc:	eb 3d                	jmp    c002011b <FAT::read(void*, unsigned long, void*, int*)+0x55>
c00200de:	8d 44 24 08          	lea    eax,[esp+0x8]
c00200e2:	50                   	push   eax
c00200e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00200e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00200eb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00200ef:	e8 c2 50 fe ff       	call   c00051b6 <f_read>
c00200f4:	83 c4 10             	add    esp,0x10
c00200f7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00200fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00200ff:	89 c2                	mov    edx,eax
c0020101:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020105:	89 10                	mov    DWORD PTR [eax],edx
c0020107:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002010b:	85 c0                	test   eax,eax
c002010d:	75 07                	jne    c0020116 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c002010f:	b8 00 00 00 00       	mov    eax,0x0
c0020114:	eb 05                	jmp    c002011b <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020116:	b8 01 00 00 00       	mov    eax,0x1
c002011b:	83 c4 1c             	add    esp,0x1c
c002011e:	c3                   	ret    
c002011f:	90                   	nop

c0020120 <FAT::write(void*, unsigned long, void*, int*)>:
c0020120:	83 ec 1c             	sub    esp,0x1c
c0020123:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020128:	74 07                	je     c0020131 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c002012a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c002012f:	75 07                	jne    c0020138 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0020131:	b8 04 00 00 00       	mov    eax,0x4
c0020136:	eb 3d                	jmp    c0020175 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020138:	8d 44 24 08          	lea    eax,[esp+0x8]
c002013c:	50                   	push   eax
c002013d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020141:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020145:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020149:	e8 e8 52 fe ff       	call   c0005436 <f_write>
c002014e:	83 c4 10             	add    esp,0x10
c0020151:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020155:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020159:	89 c2                	mov    edx,eax
c002015b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002015f:	89 10                	mov    DWORD PTR [eax],edx
c0020161:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020165:	85 c0                	test   eax,eax
c0020167:	75 07                	jne    c0020170 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0020169:	b8 00 00 00 00       	mov    eax,0x0
c002016e:	eb 05                	jmp    c0020175 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020170:	b8 01 00 00 00       	mov    eax,0x1
c0020175:	83 c4 1c             	add    esp,0x1c
c0020178:	c3                   	ret    
c0020179:	90                   	nop

c002017a <FAT::close(void*)>:
c002017a:	83 ec 1c             	sub    esp,0x1c
c002017d:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020182:	75 07                	jne    c002018b <FAT::close(void*)+0x11>
c0020184:	b8 04 00 00 00       	mov    eax,0x4
c0020189:	eb 36                	jmp    c00201c1 <FAT::close(void*)+0x47>
c002018b:	83 ec 0c             	sub    esp,0xc
c002018e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020192:	e8 35 57 fe ff       	call   c00058cc <f_close>
c0020197:	83 c4 10             	add    esp,0x10
c002019a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002019e:	83 ec 0c             	sub    esp,0xc
c00201a1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00201a5:	e8 8a f4 fe ff       	call   c000f634 <free>
c00201aa:	83 c4 10             	add    esp,0x10
c00201ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00201b1:	85 c0                	test   eax,eax
c00201b3:	75 07                	jne    c00201bc <FAT::close(void*)+0x42>
c00201b5:	b8 00 00 00 00       	mov    eax,0x0
c00201ba:	eb 05                	jmp    c00201c1 <FAT::close(void*)+0x47>
c00201bc:	b8 01 00 00 00       	mov    eax,0x1
c00201c1:	83 c4 1c             	add    esp,0x1c
c00201c4:	c3                   	ret    
c00201c5:	90                   	nop

c00201c6 <FAT::closeDir(void*)>:
c00201c6:	83 ec 1c             	sub    esp,0x1c
c00201c9:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00201ce:	75 07                	jne    c00201d7 <FAT::closeDir(void*)+0x11>
c00201d0:	b8 04 00 00 00       	mov    eax,0x4
c00201d5:	eb 36                	jmp    c002020d <FAT::closeDir(void*)+0x47>
c00201d7:	83 ec 0c             	sub    esp,0xc
c00201da:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00201de:	e8 d1 5c fe ff       	call   c0005eb4 <f_closedir>
c00201e3:	83 c4 10             	add    esp,0x10
c00201e6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00201ea:	83 ec 0c             	sub    esp,0xc
c00201ed:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00201f1:	e8 3e f4 fe ff       	call   c000f634 <free>
c00201f6:	83 c4 10             	add    esp,0x10
c00201f9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00201fd:	85 c0                	test   eax,eax
c00201ff:	75 07                	jne    c0020208 <FAT::closeDir(void*)+0x42>
c0020201:	b8 00 00 00 00       	mov    eax,0x0
c0020206:	eb 05                	jmp    c002020d <FAT::closeDir(void*)+0x47>
c0020208:	b8 01 00 00 00       	mov    eax,0x1
c002020d:	83 c4 1c             	add    esp,0x1c
c0020210:	c3                   	ret    
c0020211:	90                   	nop

c0020212 <FAT::seek(void*, unsigned long long)>:
c0020212:	83 ec 2c             	sub    esp,0x2c
c0020215:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020219:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002021d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020221:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020225:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c002022a:	75 07                	jne    c0020233 <FAT::seek(void*, unsigned long long)+0x21>
c002022c:	b8 04 00 00 00       	mov    eax,0x4
c0020231:	eb 2f                	jmp    c0020262 <FAT::seek(void*, unsigned long long)+0x50>
c0020233:	83 ec 04             	sub    esp,0x4
c0020236:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002023a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002023e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0020242:	e8 b4 56 fe ff       	call   c00058fb <f_lseek>
c0020247:	83 c4 10             	add    esp,0x10
c002024a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002024e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020252:	85 c0                	test   eax,eax
c0020254:	75 07                	jne    c002025d <FAT::seek(void*, unsigned long long)+0x4b>
c0020256:	b8 00 00 00 00       	mov    eax,0x0
c002025b:	eb 05                	jmp    c0020262 <FAT::seek(void*, unsigned long long)+0x50>
c002025d:	b8 01 00 00 00       	mov    eax,0x1
c0020262:	83 c4 2c             	add    esp,0x2c
c0020265:	c3                   	ret    

c0020266 <fatWrapperReadDisk>:
c0020266:	83 ec 1c             	sub    esp,0x1c
c0020269:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002026d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020271:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020275:	89 04 24             	mov    DWORD PTR [esp],eax
c0020278:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002027c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020280:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020285:	8b 04 85 a0 de 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2160]
c002028c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020290:	83 ec 0c             	sub    esp,0xc
c0020293:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020297:	52                   	push   edx
c0020298:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002029c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00202a0:	50                   	push   eax
c00202a1:	e8 ca 5d ff ff       	call   c0016070 <LogicalDisk::read(unsigned long long, int, void*)>
c00202a6:	83 c4 20             	add    esp,0x20
c00202a9:	83 c4 1c             	add    esp,0x1c
c00202ac:	c3                   	ret    

c00202ad <fatWrapperWriteDisk>:
c00202ad:	83 ec 1c             	sub    esp,0x1c
c00202b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00202b4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00202b8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00202bc:	89 04 24             	mov    DWORD PTR [esp],eax
c00202bf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00202c3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00202c7:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00202cc:	8b 04 85 a0 de 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2160]
c00202d3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00202d7:	83 ec 0c             	sub    esp,0xc
c00202da:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00202de:	52                   	push   edx
c00202df:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00202e3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00202e7:	50                   	push   eax
c00202e8:	e8 ef 5d ff ff       	call   c00160dc <LogicalDisk::write(unsigned long long, int, void*)>
c00202ed:	83 c4 20             	add    esp,0x20
c00202f0:	83 c4 1c             	add    esp,0x1c
c00202f3:	c3                   	ret    

c00202f4 <fatWrapperIoctl>:
c00202f4:	53                   	push   ebx
c00202f5:	83 ec 28             	sub    esp,0x28
c00202f8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00202fc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0020300:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020304:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020308:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c002030d:	75 31                	jne    c0020340 <fatWrapperIoctl+0x4c>
c002030f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020313:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020317:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002031c:	8b 04 85 a0 de 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2160]
c0020323:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020329:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002032f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020333:	66 89 02             	mov    WORD PTR [edx],ax
c0020336:	b8 00 00 00 00       	mov    eax,0x0
c002033b:	e9 b2 00 00 00       	jmp    c00203f2 <fatWrapperIoctl+0xfe>
c0020340:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0020345:	75 6a                	jne    c00203b1 <fatWrapperIoctl+0xbd>
c0020347:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002034b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002034f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020354:	8b 04 85 a0 de 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2160]
c002035b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020361:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0020367:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c002036d:	89 c8                	mov    eax,ecx
c002036f:	89 da                	mov    edx,ebx
c0020371:	0f a4 c2 0a          	shld   edx,eax,0xa
c0020375:	c1 e0 0a             	shl    eax,0xa
c0020378:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c002037d:	8b 0c 8d a0 de 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2160]
c0020384:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c002038a:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0020390:	89 cb                	mov    ebx,ecx
c0020392:	c1 fb 1f             	sar    ebx,0x1f
c0020395:	53                   	push   ebx
c0020396:	51                   	push   ecx
c0020397:	52                   	push   edx
c0020398:	50                   	push   eax
c0020399:	e8 ae 5b 00 00       	call   c0025f4c <__udivdi3>
c002039e:	83 c4 10             	add    esp,0x10
c00203a1:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00203a5:	89 01                	mov    DWORD PTR [ecx],eax
c00203a7:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00203aa:	b8 00 00 00 00       	mov    eax,0x0
c00203af:	eb 41                	jmp    c00203f2 <fatWrapperIoctl+0xfe>
c00203b1:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00203b6:	75 07                	jne    c00203bf <fatWrapperIoctl+0xcb>
c00203b8:	b8 00 00 00 00       	mov    eax,0x0
c00203bd:	eb 33                	jmp    c00203f2 <fatWrapperIoctl+0xfe>
c00203bf:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c00203c4:	75 19                	jne    c00203df <fatWrapperIoctl+0xeb>
c00203c6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00203ca:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00203ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00203d2:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00203d8:	b8 00 00 00 00       	mov    eax,0x0
c00203dd:	eb 13                	jmp    c00203f2 <fatWrapperIoctl+0xfe>
c00203df:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c00203e4:	75 07                	jne    c00203ed <fatWrapperIoctl+0xf9>
c00203e6:	b8 00 00 00 00       	mov    eax,0x0
c00203eb:	eb 05                	jmp    c00203f2 <fatWrapperIoctl+0xfe>
c00203ed:	b8 04 00 00 00       	mov    eax,0x4
c00203f2:	83 c4 28             	add    esp,0x28
c00203f5:	5b                   	pop    ebx
c00203f6:	c3                   	ret    
c00203f7:	90                   	nop

c00203f8 <FAT::FAT()>:
c00203f8:	83 ec 1c             	sub    esp,0x1c
c00203fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00203ff:	83 ec 0c             	sub    esp,0xc
c0020402:	50                   	push   eax
c0020403:	e8 f0 27 ff ff       	call   c0012bf8 <Filesystem::Filesystem()>
c0020408:	83 c4 10             	add    esp,0x10
c002040b:	ba 0c bc 02 c0       	mov    edx,0xc002bc0c
c0020410:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020414:	89 10                	mov    DWORD PTR [eax],edx
c0020416:	c7 05 a0 ee 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002eea0,0x0
c0020420:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020428:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c002042d:	7f 15                	jg     c0020444 <FAT::FAT()+0x4c>
c002042f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020433:	c7 04 85 c0 ee 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd1140],0xffffffff
c002043e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0020442:	eb e4                	jmp    c0020428 <FAT::FAT()+0x30>
c0020444:	90                   	nop
c0020445:	83 c4 1c             	add    esp,0x1c
c0020448:	c3                   	ret    
c0020449:	90                   	nop

c002044a <FAT::fixFilepath(char*)>:
c002044a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002044e:	8a 00                	mov    al,BYTE PTR [eax]
c0020450:	3c 40                	cmp    al,0x40
c0020452:	7e 2c                	jle    c0020480 <FAT::fixFilepath(char*)+0x36>
c0020454:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020458:	8a 00                	mov    al,BYTE PTR [eax]
c002045a:	83 e8 41             	sub    eax,0x41
c002045d:	88 c2                	mov    dl,al
c002045f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020463:	88 10                	mov    BYTE PTR [eax],dl
c0020465:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020469:	8a 00                	mov    al,BYTE PTR [eax]
c002046b:	0f be c0             	movsx  eax,al
c002046e:	8b 04 85 c0 ee 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1140]
c0020475:	83 c0 30             	add    eax,0x30
c0020478:	88 c2                	mov    dl,al
c002047a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002047e:	88 10                	mov    BYTE PTR [eax],dl
c0020480:	90                   	nop
c0020481:	c3                   	ret    

c0020482 <FAT::open(char const*, void**, FileOpenMode)>:
c0020482:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020488:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020490:	74 0a                	je     c002049c <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0020492:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c002049a:	75 0a                	jne    c00204a6 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c002049c:	b8 04 00 00 00       	mov    eax,0x4
c00204a1:	e9 fd 00 00 00       	jmp    c00205a3 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00204a6:	83 ec 08             	sub    esp,0x8
c00204a9:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00204b0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00204b4:	50                   	push   eax
c00204b5:	e8 a9 02 fe ff       	call   c0000763 <strcpy>
c00204ba:	83 c4 10             	add    esp,0x10
c00204bd:	83 ec 08             	sub    esp,0x8
c00204c0:	8d 44 24 10          	lea    eax,[esp+0x10]
c00204c4:	50                   	push   eax
c00204c5:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00204cc:	e8 79 ff ff ff       	call   c002044a <FAT::fixFilepath(char*)>
c00204d1:	83 c4 10             	add    esp,0x10
c00204d4:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c00204dc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00204e3:	83 e0 01             	and    eax,0x1
c00204e6:	74 08                	je     c00204f0 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c00204e8:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c00204f0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00204f7:	83 e0 04             	and    eax,0x4
c00204fa:	74 10                	je     c002050c <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c00204fc:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0020504:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c002050c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020513:	83 e0 02             	and    eax,0x2
c0020516:	74 08                	je     c0020520 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0020518:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020520:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020527:	83 e0 08             	and    eax,0x8
c002052a:	74 08                	je     c0020534 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c002052c:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0020534:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002053b:	83 e0 10             	and    eax,0x10
c002053e:	74 08                	je     c0020548 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0020540:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0020548:	83 ec 0c             	sub    esp,0xc
c002054b:	68 50 02 00 00       	push   0x250
c0020550:	e8 cf f0 fe ff       	call   c000f624 <malloc>
c0020555:	83 c4 10             	add    esp,0x10
c0020558:	89 c2                	mov    edx,eax
c002055a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020561:	89 10                	mov    DWORD PTR [eax],edx
c0020563:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c002056b:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020572:	8b 00                	mov    eax,DWORD PTR [eax]
c0020574:	83 ec 04             	sub    esp,0x4
c0020577:	52                   	push   edx
c0020578:	8d 54 24 10          	lea    edx,[esp+0x10]
c002057c:	52                   	push   edx
c002057d:	50                   	push   eax
c002057e:	e8 f7 47 fe ff       	call   c0004d7a <f_open>
c0020583:	83 c4 10             	add    esp,0x10
c0020586:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c002058d:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0020595:	74 07                	je     c002059e <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0020597:	b8 01 00 00 00       	mov    eax,0x1
c002059c:	eb 05                	jmp    c00205a3 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c002059e:	b8 00 00 00 00       	mov    eax,0x0
c00205a3:	81 c4 1c 01 00 00    	add    esp,0x11c
c00205a9:	c3                   	ret    

c00205aa <FAT::openDir(char const*, void**)>:
c00205aa:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00205b0:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00205b8:	74 0a                	je     c00205c4 <FAT::openDir(char const*, void**)+0x1a>
c00205ba:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00205c2:	75 07                	jne    c00205cb <FAT::openDir(char const*, void**)+0x21>
c00205c4:	b8 04 00 00 00       	mov    eax,0x4
c00205c9:	eb 7d                	jmp    c0020648 <FAT::openDir(char const*, void**)+0x9e>
c00205cb:	83 ec 08             	sub    esp,0x8
c00205ce:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00205d5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00205d9:	50                   	push   eax
c00205da:	e8 84 01 fe ff       	call   c0000763 <strcpy>
c00205df:	83 c4 10             	add    esp,0x10
c00205e2:	83 ec 08             	sub    esp,0x8
c00205e5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00205e9:	50                   	push   eax
c00205ea:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00205f1:	e8 54 fe ff ff       	call   c002044a <FAT::fixFilepath(char*)>
c00205f6:	83 c4 10             	add    esp,0x10
c00205f9:	83 ec 0c             	sub    esp,0xc
c00205fc:	6a 4c                	push   0x4c
c00205fe:	e8 21 f0 fe ff       	call   c000f624 <malloc>
c0020603:	83 c4 10             	add    esp,0x10
c0020606:	89 c2                	mov    edx,eax
c0020608:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002060f:	89 10                	mov    DWORD PTR [eax],edx
c0020611:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020618:	8b 00                	mov    eax,DWORD PTR [eax]
c002061a:	83 ec 08             	sub    esp,0x8
c002061d:	8d 54 24 14          	lea    edx,[esp+0x14]
c0020621:	52                   	push   edx
c0020622:	50                   	push   eax
c0020623:	e8 8a 57 fe ff       	call   c0005db2 <f_opendir>
c0020628:	83 c4 10             	add    esp,0x10
c002062b:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020632:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c002063a:	74 07                	je     c0020643 <FAT::openDir(char const*, void**)+0x99>
c002063c:	b8 01 00 00 00       	mov    eax,0x1
c0020641:	eb 05                	jmp    c0020648 <FAT::openDir(char const*, void**)+0x9e>
c0020643:	b8 00 00 00 00       	mov    eax,0x0
c0020648:	81 c4 1c 01 00 00    	add    esp,0x11c
c002064e:	c3                   	ret    
c002064f:	90                   	nop

c0020650 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0020650:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0020656:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c002065e:	75 0a                	jne    c002066a <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0020660:	b8 04 00 00 00       	mov    eax,0x4
c0020665:	e9 c9 00 00 00       	jmp    c0020733 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002066a:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0020672:	75 0a                	jne    c002067e <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0020674:	b8 04 00 00 00       	mov    eax,0x4
c0020679:	e9 b5 00 00 00       	jmp    c0020733 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002067e:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0020686:	75 0a                	jne    c0020692 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0020688:	b8 04 00 00 00       	mov    eax,0x4
c002068d:	e9 a1 00 00 00       	jmp    c0020733 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020692:	83 ec 08             	sub    esp,0x8
c0020695:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002069c:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00206a3:	50                   	push   eax
c00206a4:	e8 ba 00 fe ff       	call   c0000763 <strcpy>
c00206a9:	83 c4 10             	add    esp,0x10
c00206ac:	83 ec 08             	sub    esp,0x8
c00206af:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00206b6:	50                   	push   eax
c00206b7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00206be:	e8 87 fd ff ff       	call   c002044a <FAT::fixFilepath(char*)>
c00206c3:	83 c4 10             	add    esp,0x10
c00206c6:	83 ec 08             	sub    esp,0x8
c00206c9:	8d 44 24 08          	lea    eax,[esp+0x8]
c00206cd:	50                   	push   eax
c00206ce:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00206d5:	50                   	push   eax
c00206d6:	e8 96 58 fe ff       	call   c0005f71 <f_stat>
c00206db:	83 c4 10             	add    esp,0x10
c00206de:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00206e5:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00206ec:	85 c0                	test   eax,eax
c00206ee:	74 07                	je     c00206f7 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c00206f0:	83 f8 04             	cmp    eax,0x4
c00206f3:	74 32                	je     c0020727 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c00206f5:	eb 37                	jmp    c002072e <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c00206f7:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00206fb:	0f b6 c0             	movzx  eax,al
c00206fe:	83 e0 10             	and    eax,0x10
c0020701:	0f 95 c2             	setne  dl
c0020704:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c002070b:	88 10                	mov    BYTE PTR [eax],dl
c002070d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020710:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020714:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c002071b:	89 01                	mov    DWORD PTR [ecx],eax
c002071d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020720:	b8 00 00 00 00       	mov    eax,0x0
c0020725:	eb 0c                	jmp    c0020733 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020727:	b8 02 00 00 00       	mov    eax,0x2
c002072c:	eb 05                	jmp    c0020733 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002072e:	b8 01 00 00 00       	mov    eax,0x1
c0020733:	81 c4 2c 02 00 00    	add    esp,0x22c
c0020739:	c3                   	ret    

c002073a <FAT::unlink(char const*)>:
c002073a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020740:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020748:	75 07                	jne    c0020751 <FAT::unlink(char const*)+0x17>
c002074a:	b8 04 00 00 00       	mov    eax,0x4
c002074f:	eb 5c                	jmp    c00207ad <FAT::unlink(char const*)+0x73>
c0020751:	83 ec 08             	sub    esp,0x8
c0020754:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002075b:	8d 44 24 18          	lea    eax,[esp+0x18]
c002075f:	50                   	push   eax
c0020760:	e8 fe ff fd ff       	call   c0000763 <strcpy>
c0020765:	83 c4 10             	add    esp,0x10
c0020768:	83 ec 08             	sub    esp,0x8
c002076b:	8d 44 24 14          	lea    eax,[esp+0x14]
c002076f:	50                   	push   eax
c0020770:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020777:	e8 ce fc ff ff       	call   c002044a <FAT::fixFilepath(char*)>
c002077c:	83 c4 10             	add    esp,0x10
c002077f:	83 ec 0c             	sub    esp,0xc
c0020782:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020786:	50                   	push   eax
c0020787:	e8 37 5b fe ff       	call   c00062c3 <f_unlink>
c002078c:	83 c4 10             	add    esp,0x10
c002078f:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020796:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c002079d:	85 c0                	test   eax,eax
c002079f:	75 07                	jne    c00207a8 <FAT::unlink(char const*)+0x6e>
c00207a1:	b8 00 00 00 00       	mov    eax,0x0
c00207a6:	eb 05                	jmp    c00207ad <FAT::unlink(char const*)+0x73>
c00207a8:	b8 01 00 00 00       	mov    eax,0x1
c00207ad:	81 c4 1c 01 00 00    	add    esp,0x11c
c00207b3:	c3                   	ret    

c00207b4 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c00207b4:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00207ba:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c00207c1:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c00207c8:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00207cc:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00207d0:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c00207d8:	75 0a                	jne    c00207e4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c00207da:	b8 04 00 00 00       	mov    eax,0x4
c00207df:	e9 1c 01 00 00       	jmp    c0020900 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c00207e4:	83 ec 08             	sub    esp,0x8
c00207e7:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00207ee:	8d 44 24 24          	lea    eax,[esp+0x24]
c00207f2:	50                   	push   eax
c00207f3:	e8 6b ff fd ff       	call   c0000763 <strcpy>
c00207f8:	83 c4 10             	add    esp,0x10
c00207fb:	83 ec 08             	sub    esp,0x8
c00207fe:	8d 44 24 20          	lea    eax,[esp+0x20]
c0020802:	50                   	push   eax
c0020803:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c002080a:	e8 3b fc ff ff       	call   c002044a <FAT::fixFilepath(char*)>
c002080f:	83 c4 10             	add    esp,0x10
c0020812:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c002081a:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0020822:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020827:	83 e0 01             	and    eax,0x1
c002082a:	74 08                	je     c0020834 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c002082c:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0020834:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020839:	83 e0 02             	and    eax,0x2
c002083c:	74 08                	je     c0020846 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c002083e:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0020846:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002084b:	83 e0 04             	and    eax,0x4
c002084e:	74 08                	je     c0020858 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0020850:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0020858:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002085d:	83 e0 08             	and    eax,0x8
c0020860:	74 08                	je     c002086a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0020862:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c002086a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002086f:	83 e0 01             	and    eax,0x1
c0020872:	74 08                	je     c002087c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0020874:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c002087c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020881:	83 e0 02             	and    eax,0x2
c0020884:	74 08                	je     c002088e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0020886:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c002088e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020893:	83 e0 04             	and    eax,0x4
c0020896:	74 08                	je     c00208a0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0020898:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c00208a0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00208a5:	83 e0 08             	and    eax,0x8
c00208a8:	74 08                	je     c00208b2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c00208aa:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c00208b2:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00208b9:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c00208c0:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c00208c8:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c00208d0:	83 ec 04             	sub    esp,0x4
c00208d3:	52                   	push   edx
c00208d4:	50                   	push   eax
c00208d5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00208d9:	50                   	push   eax
c00208da:	e8 86 60 fe ff       	call   c0006965 <f_chmod>
c00208df:	83 c4 10             	add    esp,0x10
c00208e2:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c00208e9:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c00208f0:	85 c0                	test   eax,eax
c00208f2:	75 07                	jne    c00208fb <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c00208f4:	b8 00 00 00 00       	mov    eax,0x0
c00208f9:	eb 05                	jmp    c0020900 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c00208fb:	b8 01 00 00 00       	mov    eax,0x1
c0020900:	81 c4 2c 01 00 00    	add    esp,0x12c
c0020906:	c3                   	ret    
c0020907:	90                   	nop

c0020908 <FAT::rename(char const*, char const*)>:
c0020908:	81 ec 1c 02 00 00    	sub    esp,0x21c
c002090e:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0020916:	74 0a                	je     c0020922 <FAT::rename(char const*, char const*)+0x1a>
c0020918:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0020920:	75 0a                	jne    c002092c <FAT::rename(char const*, char const*)+0x24>
c0020922:	b8 04 00 00 00       	mov    eax,0x4
c0020927:	e9 98 00 00 00       	jmp    c00209c4 <FAT::rename(char const*, char const*)+0xbc>
c002092c:	83 ec 08             	sub    esp,0x8
c002092f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020936:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c002093d:	50                   	push   eax
c002093e:	e8 20 fe fd ff       	call   c0000763 <strcpy>
c0020943:	83 c4 10             	add    esp,0x10
c0020946:	83 ec 08             	sub    esp,0x8
c0020949:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0020950:	50                   	push   eax
c0020951:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020958:	e8 ed fa ff ff       	call   c002044a <FAT::fixFilepath(char*)>
c002095d:	83 c4 10             	add    esp,0x10
c0020960:	83 ec 08             	sub    esp,0x8
c0020963:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c002096a:	8d 44 24 18          	lea    eax,[esp+0x18]
c002096e:	50                   	push   eax
c002096f:	e8 ef fd fd ff       	call   c0000763 <strcpy>
c0020974:	83 c4 10             	add    esp,0x10
c0020977:	83 ec 08             	sub    esp,0x8
c002097a:	8d 44 24 14          	lea    eax,[esp+0x14]
c002097e:	50                   	push   eax
c002097f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020986:	e8 bf fa ff ff       	call   c002044a <FAT::fixFilepath(char*)>
c002098b:	83 c4 10             	add    esp,0x10
c002098e:	83 ec 08             	sub    esp,0x8
c0020991:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020995:	50                   	push   eax
c0020996:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c002099d:	50                   	push   eax
c002099e:	e8 cf 5c fe ff       	call   c0006672 <f_rename>
c00209a3:	83 c4 10             	add    esp,0x10
c00209a6:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c00209ad:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c00209b4:	85 c0                	test   eax,eax
c00209b6:	75 07                	jne    c00209bf <FAT::rename(char const*, char const*)+0xb7>
c00209b8:	b8 00 00 00 00       	mov    eax,0x0
c00209bd:	eb 05                	jmp    c00209c4 <FAT::rename(char const*, char const*)+0xbc>
c00209bf:	b8 01 00 00 00       	mov    eax,0x1
c00209c4:	81 c4 1c 02 00 00    	add    esp,0x21c
c00209ca:	c3                   	ret    
c00209cb:	90                   	nop

c00209cc <FAT::mkdir(char const*)>:
c00209cc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00209d2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00209da:	75 07                	jne    c00209e3 <FAT::mkdir(char const*)+0x17>
c00209dc:	b8 04 00 00 00       	mov    eax,0x4
c00209e1:	eb 5c                	jmp    c0020a3f <FAT::mkdir(char const*)+0x73>
c00209e3:	83 ec 08             	sub    esp,0x8
c00209e6:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00209ed:	8d 44 24 18          	lea    eax,[esp+0x18]
c00209f1:	50                   	push   eax
c00209f2:	e8 6c fd fd ff       	call   c0000763 <strcpy>
c00209f7:	83 c4 10             	add    esp,0x10
c00209fa:	83 ec 08             	sub    esp,0x8
c00209fd:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020a01:	50                   	push   eax
c0020a02:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020a09:	e8 3c fa ff ff       	call   c002044a <FAT::fixFilepath(char*)>
c0020a0e:	83 c4 10             	add    esp,0x10
c0020a11:	83 ec 0c             	sub    esp,0xc
c0020a14:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020a18:	50                   	push   eax
c0020a19:	e8 28 5a fe ff       	call   c0006446 <f_mkdir>
c0020a1e:	83 c4 10             	add    esp,0x10
c0020a21:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020a28:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0020a2f:	85 c0                	test   eax,eax
c0020a31:	75 07                	jne    c0020a3a <FAT::mkdir(char const*)+0x6e>
c0020a33:	b8 00 00 00 00       	mov    eax,0x0
c0020a38:	eb 05                	jmp    c0020a3f <FAT::mkdir(char const*)+0x73>
c0020a3a:	b8 01 00 00 00       	mov    eax,0x1
c0020a3f:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020a45:	c3                   	ret    

c0020a46 <FAT::exists(char const*)>:
c0020a46:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0020a4c:	83 ec 08             	sub    esp,0x8
c0020a4f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020a56:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020a5a:	50                   	push   eax
c0020a5b:	e8 03 fd fd ff       	call   c0000763 <strcpy>
c0020a60:	83 c4 10             	add    esp,0x10
c0020a63:	83 ec 08             	sub    esp,0x8
c0020a66:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020a6a:	50                   	push   eax
c0020a6b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020a72:	e8 d3 f9 ff ff       	call   c002044a <FAT::fixFilepath(char*)>
c0020a77:	83 c4 10             	add    esp,0x10
c0020a7a:	83 ec 08             	sub    esp,0x8
c0020a7d:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0020a84:	50                   	push   eax
c0020a85:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020a89:	50                   	push   eax
c0020a8a:	e8 e2 54 fe ff       	call   c0005f71 <f_stat>
c0020a8f:	83 c4 10             	add    esp,0x10
c0020a92:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0020a99:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0020aa0:	85 c0                	test   eax,eax
c0020aa2:	75 04                	jne    c0020aa8 <FAT::exists(char const*)+0x62>
c0020aa4:	b0 01                	mov    al,0x1
c0020aa6:	eb 02                	jmp    c0020aaa <FAT::exists(char const*)+0x64>
c0020aa8:	b0 00                	mov    al,0x0
c0020aaa:	81 c4 2c 02 00 00    	add    esp,0x22c
c0020ab0:	c3                   	ret    
c0020ab1:	90                   	nop

c0020ab2 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0020ab2:	b8 08 00 00 00       	mov    eax,0x8
c0020ab7:	c3                   	ret    

c0020ab8 <ISO9660::seek(void*, unsigned long long)>:
c0020ab8:	53                   	push   ebx
c0020ab9:	b8 04 00 00 00       	mov    eax,0x4
c0020abe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020ac2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020ac6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020aca:	85 d2                	test   edx,edx
c0020acc:	74 17                	je     c0020ae5 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0020ace:	89 c8                	mov    eax,ecx
c0020ad0:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0020ad3:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0020ad6:	b8 01 00 00 00       	mov    eax,0x1
c0020adb:	73 08                	jae    c0020ae5 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0020add:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0020ae0:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0020ae3:	31 c0                	xor    eax,eax
c0020ae5:	5b                   	pop    ebx
c0020ae6:	c3                   	ret    
c0020ae7:	90                   	nop

c0020ae8 <ISO9660::tell(void*, unsigned long long*)>:
c0020ae8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020aec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020af0:	85 d2                	test   edx,edx
c0020af2:	74 12                	je     c0020b06 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0020af4:	85 c0                	test   eax,eax
c0020af6:	74 0e                	je     c0020b06 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0020af8:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0020afb:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0020afe:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0020b01:	89 10                	mov    DWORD PTR [eax],edx
c0020b03:	31 c0                	xor    eax,eax
c0020b05:	c3                   	ret    
c0020b06:	b8 04 00 00 00       	mov    eax,0x4
c0020b0b:	c3                   	ret    

c0020b0c <ISO9660::getName()>:
c0020b0c:	b8 68 bc 02 c0       	mov    eax,0xc002bc68
c0020b11:	c3                   	ret    

c0020b12 <ISO9660::stat(void*, unsigned long long*)>:
c0020b12:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020b16:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020b1a:	85 d2                	test   edx,edx
c0020b1c:	74 12                	je     c0020b30 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0020b1e:	85 c0                	test   eax,eax
c0020b20:	74 0e                	je     c0020b30 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0020b22:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0020b25:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0020b28:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0020b2b:	89 10                	mov    DWORD PTR [eax],edx
c0020b2d:	31 c0                	xor    eax,eax
c0020b2f:	c3                   	ret    
c0020b30:	b8 04 00 00 00       	mov    eax,0x4
c0020b35:	c3                   	ret    

c0020b36 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0020b36:	b8 01 00 00 00       	mov    eax,0x1
c0020b3b:	c3                   	ret    

c0020b3c <ISO9660::unlink(char const*)>:
c0020b3c:	b8 01 00 00 00       	mov    eax,0x1
c0020b41:	c3                   	ret    

c0020b42 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0020b42:	b8 01 00 00 00       	mov    eax,0x1
c0020b47:	c3                   	ret    

c0020b48 <ISO9660::rename(char const*, char const*)>:
c0020b48:	b8 01 00 00 00       	mov    eax,0x1
c0020b4d:	c3                   	ret    

c0020b4e <ISO9660::mkdir(char const*)>:
c0020b4e:	b8 01 00 00 00       	mov    eax,0x1
c0020b53:	c3                   	ret    

c0020b54 <ISO9660::close(void*)>:
c0020b54:	83 ec 0c             	sub    esp,0xc
c0020b57:	b8 04 00 00 00       	mov    eax,0x4
c0020b5c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020b60:	85 d2                	test   edx,edx
c0020b62:	74 0e                	je     c0020b72 <ISO9660::close(void*)+0x1e>
c0020b64:	83 ec 0c             	sub    esp,0xc
c0020b67:	52                   	push   edx
c0020b68:	e8 c7 ea fe ff       	call   c000f634 <free>
c0020b6d:	83 c4 10             	add    esp,0x10
c0020b70:	31 c0                	xor    eax,eax
c0020b72:	83 c4 0c             	add    esp,0xc
c0020b75:	c3                   	ret    

c0020b76 <ISO9660::closeDir(void*)>:
c0020b76:	83 ec 0c             	sub    esp,0xc
c0020b79:	b8 04 00 00 00       	mov    eax,0x4
c0020b7e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020b82:	85 d2                	test   edx,edx
c0020b84:	74 0e                	je     c0020b94 <ISO9660::closeDir(void*)+0x1e>
c0020b86:	83 ec 0c             	sub    esp,0xc
c0020b89:	52                   	push   edx
c0020b8a:	e8 a5 ea fe ff       	call   c000f634 <free>
c0020b8f:	83 c4 10             	add    esp,0x10
c0020b92:	31 c0                	xor    eax,eax
c0020b94:	83 c4 0c             	add    esp,0xc
c0020b97:	c3                   	ret    

c0020b98 <ISO9660::~ISO9660()>:
c0020b98:	83 ec 0c             	sub    esp,0xc
c0020b9b:	ba cc bc 02 c0       	mov    edx,0xc002bccc
c0020ba0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020ba4:	89 10                	mov    DWORD PTR [eax],edx
c0020ba6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020baa:	83 ec 0c             	sub    esp,0xc
c0020bad:	50                   	push   eax
c0020bae:	e8 69 20 ff ff       	call   c0012c1c <Filesystem::~Filesystem()>
c0020bb3:	83 c4 10             	add    esp,0x10
c0020bb6:	90                   	nop
c0020bb7:	83 c4 0c             	add    esp,0xc
c0020bba:	c3                   	ret    
c0020bbb:	90                   	nop

c0020bbc <ISO9660::~ISO9660()>:
c0020bbc:	83 ec 0c             	sub    esp,0xc
c0020bbf:	83 ec 0c             	sub    esp,0xc
c0020bc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020bc6:	e8 cd ff ff ff       	call   c0020b98 <ISO9660::~ISO9660()>
c0020bcb:	83 c4 10             	add    esp,0x10
c0020bce:	83 ec 08             	sub    esp,0x8
c0020bd1:	6a 08                	push   0x8
c0020bd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020bd7:	e8 37 1c ff ff       	call   c0012813 <operator delete(void*, unsigned long)>
c0020bdc:	83 c4 10             	add    esp,0x10
c0020bdf:	83 c4 0c             	add    esp,0xc
c0020be2:	c3                   	ret    

c0020be3 <__memmem(unsigned char*, int, unsigned char*, int)>:
c0020be3:	55                   	push   ebp
c0020be4:	31 c9                	xor    ecx,ecx
c0020be6:	57                   	push   edi
c0020be7:	56                   	push   esi
c0020be8:	53                   	push   ebx
c0020be9:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0020bed:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0020bf1:	89 eb                	mov    ebx,ebp
c0020bf3:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0020bf7:	39 ce                	cmp    esi,ecx
c0020bf9:	7e 17                	jle    c0020c12 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0020bfb:	31 d2                	xor    edx,edx
c0020bfd:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0020c01:	7d 13                	jge    c0020c16 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0020c03:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0020c07:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0020c0a:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0020c0d:	75 0d                	jne    c0020c1c <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0020c0f:	42                   	inc    edx
c0020c10:	eb eb                	jmp    c0020bfd <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0020c12:	31 c0                	xor    eax,eax
c0020c14:	eb 0a                	jmp    c0020c20 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0020c16:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0020c1a:	eb 04                	jmp    c0020c20 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0020c1c:	41                   	inc    ecx
c0020c1d:	43                   	inc    ebx
c0020c1e:	eb d7                	jmp    c0020bf7 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0020c20:	5b                   	pop    ebx
c0020c21:	5e                   	pop    esi
c0020c22:	5f                   	pop    edi
c0020c23:	5d                   	pop    ebp
c0020c24:	c3                   	ret    

c0020c25 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0020c25:	56                   	push   esi
c0020c26:	53                   	push   ebx
c0020c27:	52                   	push   edx
c0020c28:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020c2c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0020c30:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020c34:	39 0d a0 ef 02 c0    	cmp    DWORD PTR ds:0xc002efa0,ecx
c0020c3a:	75 08                	jne    c0020c44 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0020c3c:	38 05 14 ce 02 c0    	cmp    BYTE PTR ds:0xc002ce14,al
c0020c42:	74 2b                	je     c0020c6f <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c0020c44:	83 ec 0c             	sub    esp,0xc
c0020c47:	a2 14 ce 02 c0       	mov    ds:0xc002ce14,al
c0020c4c:	68 c0 ef 02 c0       	push   0xc002efc0
c0020c51:	0f be c0             	movsx  eax,al
c0020c54:	6a 01                	push   0x1
c0020c56:	89 0d a0 ef 02 c0    	mov    DWORD PTR ds:0xc002efa0,ecx
c0020c5c:	31 db                	xor    ebx,ebx
c0020c5e:	53                   	push   ebx
c0020c5f:	51                   	push   ecx
c0020c60:	ff 34 85 9c dd 02 c0 	push   DWORD PTR [eax*4-0x3ffd2264]
c0020c67:	e8 04 54 ff ff       	call   c0016070 <LogicalDisk::read(unsigned long long, int, void*)>
c0020c6c:	83 c4 20             	add    esp,0x20
c0020c6f:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c0020c77:	c7 44 24 14 c0 ef 02 c0 	mov    DWORD PTR [esp+0x14],0xc002efc0
c0020c7f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0020c83:	58                   	pop    eax
c0020c84:	5b                   	pop    ebx
c0020c85:	5e                   	pop    esi
c0020c86:	e9 15 fa fd ff       	jmp    c00006a0 <memcpy>
c0020c8b:	90                   	nop

c0020c8c <ISO9660::tryMount(LogicalDisk*, int)>:
c0020c8c:	81 ec 10 08 00 00    	sub    esp,0x810
c0020c92:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0020c99:	83 c0 41             	add    eax,0x41
c0020c9c:	0f be c0             	movsx  eax,al
c0020c9f:	50                   	push   eax
c0020ca0:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020ca4:	50                   	push   eax
c0020ca5:	6a 10                	push   0x10
c0020ca7:	e8 79 ff ff ff       	call   c0020c25 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020cac:	83 c4 10             	add    esp,0x10
c0020caf:	31 c0                	xor    eax,eax
c0020cb1:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0020cb6:	75 1d                	jne    c0020cd5 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0020cb8:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0020cbd:	75 16                	jne    c0020cd5 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0020cbf:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0020cc4:	75 0f                	jne    c0020cd5 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0020cc6:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0020ccb:	75 08                	jne    c0020cd5 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0020ccd:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0020cd2:	0f 94 c0             	sete   al
c0020cd5:	81 c4 0c 08 00 00    	add    esp,0x80c
c0020cdb:	c3                   	ret    

c0020cdc <ISO9660::read(void*, unsigned long, void*, int*)>:
c0020cdc:	55                   	push   ebp
c0020cdd:	57                   	push   edi
c0020cde:	56                   	push   esi
c0020cdf:	53                   	push   ebx
c0020ce0:	81 ec 2c 08 00 00    	sub    esp,0x82c
c0020ce6:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c0020ced:	85 ed                	test   ebp,ebp
c0020cef:	0f 84 d6 01 00 00    	je     c0020ecb <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0020cf5:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0020cfd:	0f 84 c8 01 00 00    	je     c0020ecb <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0020d03:	b8 01 00 00 00       	mov    eax,0x1
c0020d08:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c0020d0c:	0f 85 be 01 00 00    	jne    c0020ed0 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0020d12:	31 d2                	xor    edx,edx
c0020d14:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0020d1b:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0020d1e:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0020d21:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0020d25:	8b 7d 14             	mov    edi,DWORD PTR [ebp+0x14]
c0020d28:	89 04 24             	mov    DWORD PTR [esp],eax
c0020d2b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0020d2f:	01 f0                	add    eax,esi
c0020d31:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0020d34:	11 fa                	adc    edx,edi
c0020d36:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0020d3a:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0020d3e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020d42:	19 d1                	sbb    ecx,edx
c0020d44:	72 0a                	jb     c0020d50 <ISO9660::read(void*, unsigned long, void*, int*)+0x74>
c0020d46:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020d4a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020d4e:	eb 13                	jmp    c0020d63 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c0020d50:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020d54:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020d58:	29 f0                	sub    eax,esi
c0020d5a:	19 fa                	sbb    edx,edi
c0020d5c:	89 04 24             	mov    DWORD PTR [esp],eax
c0020d5f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0020d63:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0020d66:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0020d69:	0f a4 c2 0b          	shld   edx,eax,0xb
c0020d6d:	51                   	push   ecx
c0020d6e:	c1 e0 0b             	shl    eax,0xb
c0020d71:	01 c6                	add    esi,eax
c0020d73:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0020d77:	11 d7                	adc    edi,edx
c0020d79:	50                   	push   eax
c0020d7a:	89 fa                	mov    edx,edi
c0020d7c:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c0020d80:	89 f0                	mov    eax,esi
c0020d82:	53                   	push   ebx
c0020d83:	0f ac d0 0b          	shrd   eax,edx,0xb
c0020d87:	50                   	push   eax
c0020d88:	e8 98 fe ff ff       	call   c0020c25 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020d8d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020d91:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0020d94:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0020d98:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0020d9e:	83 c4 10             	add    esp,0x10
c0020da1:	b8 00 08 00 00       	mov    eax,0x800
c0020da6:	29 d0                	sub    eax,edx
c0020da8:	39 c1                	cmp    ecx,eax
c0020daa:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0020dae:	83 d9 00             	sbb    ecx,0x0
c0020db1:	7d 1c                	jge    c0020dcf <ISO9660::read(void*, unsigned long, void*, int*)+0xf3>
c0020db3:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0020db8:	75 12                	jne    c0020dcc <ISO9660::read(void*, unsigned long, void*, int*)+0xf0>
c0020dba:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0020dc1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020dc7:	e9 fb 00 00 00       	jmp    c0020ec7 <ISO9660::read(void*, unsigned long, void*, int*)+0x1eb>
c0020dcc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020dcf:	8d 0c 13             	lea    ecx,[ebx+edx*1]
c0020dd2:	31 d2                	xor    edx,edx
c0020dd4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0020dd8:	39 c2                	cmp    edx,eax
c0020dda:	7d 14                	jge    c0020df0 <ISO9660::read(void*, unsigned long, void*, int*)+0x114>
c0020ddc:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c0020de3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020de7:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0020dea:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0020ded:	42                   	inc    edx
c0020dee:	eb e8                	jmp    c0020dd8 <ISO9660::read(void*, unsigned long, void*, int*)+0xfc>
c0020df0:	89 c3                	mov    ebx,eax
c0020df2:	85 c0                	test   eax,eax
c0020df4:	79 02                	jns    c0020df8 <ISO9660::read(void*, unsigned long, void*, int*)+0x11c>
c0020df6:	31 db                	xor    ebx,ebx
c0020df8:	99                   	cdq    
c0020df9:	01 c3                	add    ebx,eax
c0020dfb:	03 9c 24 4c 08 00 00 	add    ebx,DWORD PTR [esp+0x84c]
c0020e02:	01 c6                	add    esi,eax
c0020e04:	11 d7                	adc    edi,edx
c0020e06:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0020e0a:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0020e0e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0020e11:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0020e15:	29 c6                	sub    esi,eax
c0020e17:	19 d7                	sbb    edi,edx
c0020e19:	89 34 24             	mov    DWORD PTR [esp],esi
c0020e1c:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0020e20:	b8 ff 07 00 00       	mov    eax,0x7ff
c0020e25:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0020e28:	b8 00 00 00 00       	mov    eax,0x0
c0020e2d:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0020e31:	7d 3e                	jge    c0020e71 <ISO9660::read(void*, unsigned long, void*, int*)+0x195>
c0020e33:	52                   	push   edx
c0020e34:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0020e38:	50                   	push   eax
c0020e39:	53                   	push   ebx
c0020e3a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020e3e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0020e42:	0f ac d0 0b          	shrd   eax,edx,0xb
c0020e46:	50                   	push   eax
c0020e47:	e8 d9 fd ff ff       	call   c0020c25 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020e4c:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0020e54:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c0020e59:	81 c3 00 08 00 00    	add    ebx,0x800
c0020e5f:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0020e67:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c0020e6c:	83 c4 10             	add    esp,0x10
c0020e6f:	eb af                	jmp    c0020e20 <ISO9660::read(void*, unsigned long, void*, int*)+0x144>
c0020e71:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020e75:	0b 04 24             	or     eax,DWORD PTR [esp]
c0020e78:	74 32                	je     c0020eac <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c0020e7a:	50                   	push   eax
c0020e7b:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0020e7f:	50                   	push   eax
c0020e80:	8d 44 24 28          	lea    eax,[esp+0x28]
c0020e84:	50                   	push   eax
c0020e85:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0020e89:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0020e8d:	0f ac fe 0b          	shrd   esi,edi,0xb
c0020e91:	56                   	push   esi
c0020e92:	e8 8e fd ff ff       	call   c0020c25 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020e97:	83 c4 0c             	add    esp,0xc
c0020e9a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0020e9e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0020ea2:	50                   	push   eax
c0020ea3:	53                   	push   ebx
c0020ea4:	e8 f7 f7 fd ff       	call   c00006a0 <memcpy>
c0020ea9:	83 c4 10             	add    esp,0x10
c0020eac:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0020eb3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0020eb7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020ebb:	89 38                	mov    DWORD PTR [eax],edi
c0020ebd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020ec1:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0020ec4:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0020ec7:	31 c0                	xor    eax,eax
c0020ec9:	eb 05                	jmp    c0020ed0 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0020ecb:	b8 04 00 00 00       	mov    eax,0x4
c0020ed0:	81 c4 2c 08 00 00    	add    esp,0x82c
c0020ed6:	5b                   	pop    ebx
c0020ed7:	5e                   	pop    esi
c0020ed8:	5f                   	pop    edi
c0020ed9:	5d                   	pop    ebp
c0020eda:	c3                   	ret    
c0020edb:	90                   	nop

c0020edc <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0020edc:	55                   	push   ebp
c0020edd:	57                   	push   edi
c0020ede:	56                   	push   esi
c0020edf:	53                   	push   ebx
c0020ee0:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0020ee6:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c0020eed:	85 f6                	test   esi,esi
c0020eef:	0f 84 64 02 00 00    	je     c0021159 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0020ef5:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0020efd:	0f 84 56 02 00 00    	je     c0021159 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0020f03:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0020f06:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c0020f09:	75 0a                	jne    c0020f15 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0020f0b:	b8 07 00 00 00       	mov    eax,0x7
c0020f10:	e9 49 02 00 00       	jmp    c002115e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0020f15:	50                   	push   eax
c0020f16:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0020f1a:	50                   	push   eax
c0020f1b:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0020f22:	53                   	push   ebx
c0020f23:	8b 06                	mov    eax,DWORD PTR [esi]
c0020f25:	c1 e0 0b             	shl    eax,0xb
c0020f28:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0020f2b:	c1 e8 0b             	shr    eax,0xb
c0020f2e:	50                   	push   eax
c0020f2f:	e8 f1 fc ff ff       	call   c0020c25 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020f34:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0020f37:	83 c4 10             	add    esp,0x10
c0020f3a:	89 c1                	mov    ecx,eax
c0020f3c:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c0020f3f:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0020f45:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0020f48:	84 db                	test   bl,bl
c0020f4a:	0f 85 90 00 00 00    	jne    c0020fe0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c0020f50:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c0020f56:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0020f5c:	29 c7                	sub    edi,eax
c0020f5e:	89 fb                	mov    ebx,edi
c0020f60:	c1 fb 1f             	sar    ebx,0x1f
c0020f63:	01 f8                	add    eax,edi
c0020f65:	11 da                	adc    edx,ebx
c0020f67:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020f6b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020f6f:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0020f72:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c0020f75:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0020f78:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0020f7b:	89 04 24             	mov    DWORD PTR [esp],eax
c0020f7e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0020f82:	89 d8                	mov    eax,ebx
c0020f84:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0020f87:	ba 00 00 00 00       	mov    edx,0x0
c0020f8c:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0020f90:	b8 00 00 00 00       	mov    eax,0x0
c0020f95:	73 0b                	jae    c0020fa2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0020f97:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020f9a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020f9e:	29 f8                	sub    eax,edi
c0020fa0:	19 da                	sbb    edx,ebx
c0020fa2:	89 d3                	mov    ebx,edx
c0020fa4:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0020fa7:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0020faa:	09 c3                	or     ebx,eax
c0020fac:	0f 84 59 ff ff ff    	je     c0020f0b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0020fb2:	55                   	push   ebp
c0020fb3:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0020fb7:	50                   	push   eax
c0020fb8:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0020fbf:	53                   	push   ebx
c0020fc0:	8b 06                	mov    eax,DWORD PTR [esi]
c0020fc2:	c1 e0 0b             	shl    eax,0xb
c0020fc5:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0020fc9:	c1 e8 0b             	shr    eax,0xb
c0020fcc:	50                   	push   eax
c0020fcd:	e8 53 fc ff ff       	call   c0020c25 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020fd2:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0020fd5:	83 c4 10             	add    esp,0x10
c0020fd8:	25 ff 07 00 00       	and    eax,0x7ff
c0020fdd:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0020fe0:	57                   	push   edi
c0020fe1:	6a 28                	push   0x28
c0020fe3:	6a 00                	push   0x0
c0020fe5:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020fe9:	50                   	push   eax
c0020fea:	e8 d5 f6 fd ff       	call   c00006c4 <memset>
c0020fef:	31 d2                	xor    edx,edx
c0020ff1:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0020ff4:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0020ffa:	89 f8                	mov    eax,edi
c0020ffc:	83 c0 21             	add    eax,0x21
c0020fff:	83 d2 00             	adc    edx,0x0
c0021002:	89 c7                	mov    edi,eax
c0021004:	89 d5                	mov    ebp,edx
c0021006:	83 c4 10             	add    esp,0x10
c0021009:	31 c9                	xor    ecx,ecx
c002100b:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c0021012:	83 f9 28             	cmp    ecx,0x28
c0021015:	88 04 24             	mov    BYTE PTR [esp],al
c0021018:	0f 94 c2             	sete   dl
c002101b:	88 d0                	mov    al,dl
c002101d:	ba ff 07 00 00       	mov    edx,0x7ff
c0021022:	39 fa                	cmp    edx,edi
c0021024:	ba 00 00 00 00       	mov    edx,0x0
c0021029:	19 ea                	sbb    edx,ebp
c002102b:	0f 92 c2             	setb   dl
c002102e:	09 c2                	or     edx,eax
c0021030:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0021034:	0f 94 c0             	sete   al
c0021037:	08 d0                	or     al,dl
c0021039:	75 16                	jne    c0021051 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c002103b:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c002103f:	74 10                	je     c0021051 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021041:	8a 04 24             	mov    al,BYTE PTR [esp]
c0021044:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0021048:	41                   	inc    ecx
c0021049:	83 c7 01             	add    edi,0x1
c002104c:	83 d5 00             	adc    ebp,0x0
c002104f:	eb ba                	jmp    c002100b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c0021051:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0021058:	83 ec 0c             	sub    esp,0xc
c002105b:	8d 7c 24 24          	lea    edi,[esp+0x24]
c002105f:	57                   	push   edi
c0021060:	e8 7c f6 fd ff       	call   c00006e1 <strlen>
c0021065:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c002106d:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021071:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c0021078:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c002107b:	5a                   	pop    edx
c002107c:	25 ff 07 00 00       	and    eax,0x7ff
c0021081:	01 c8                	add    eax,ecx
c0021083:	59                   	pop    ecx
c0021084:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c002108a:	83 e0 02             	and    eax,0x2
c002108d:	3c 01                	cmp    al,0x1
c002108f:	19 c0                	sbb    eax,eax
c0021091:	83 c0 02             	add    eax,0x2
c0021094:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021098:	57                   	push   edi
c0021099:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c002109d:	50                   	push   eax
c002109e:	e8 c0 f6 fd ff       	call   c0000763 <strcpy>
c00210a3:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c00210a7:	83 c4 10             	add    esp,0x10
c00210aa:	84 c0                	test   al,al
c00210ac:	75 21                	jne    c00210cf <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c00210ae:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c00210b6:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00210be:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c00210c6:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c00210cd:	eb 28                	jmp    c00210f7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c00210cf:	fe c8                	dec    al
c00210d1:	75 24                	jne    c00210f7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c00210d3:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c00210db:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00210e3:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c00210eb:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c00210f2:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c00210f7:	0f b6 fb             	movzx  edi,bl
c00210fa:	31 db                	xor    ebx,ebx
c00210fc:	50                   	push   eax
c00210fd:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c0021104:	8d 44 24 48          	lea    eax,[esp+0x48]
c0021108:	50                   	push   eax
c0021109:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c0021110:	e8 8b f5 fd ff       	call   c00006a0 <memcpy>
c0021115:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c002111c:	89 f9                	mov    ecx,edi
c002111e:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021124:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c0021127:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c002112a:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c002112d:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021130:	83 c4 10             	add    esp,0x10
c0021133:	39 c7                	cmp    edi,eax
c0021135:	89 df                	mov    edi,ebx
c0021137:	19 d7                	sbb    edi,edx
c0021139:	72 10                	jb     c002114b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c002113b:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0021142:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0021149:	eb 0a                	jmp    c0021155 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c002114b:	29 c8                	sub    eax,ecx
c002114d:	19 da                	sbb    edx,ebx
c002114f:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021152:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021155:	31 c0                	xor    eax,eax
c0021157:	eb 05                	jmp    c002115e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021159:	b8 04 00 00 00       	mov    eax,0x4
c002115e:	81 c4 5c 09 00 00    	add    esp,0x95c
c0021164:	5b                   	pop    ebx
c0021165:	5e                   	pop    esi
c0021166:	5f                   	pop    edi
c0021167:	5d                   	pop    ebp
c0021168:	c3                   	ret    

c0021169 <readRoot(unsigned int*, unsigned int*, char)>:
c0021169:	81 ec 40 08 00 00    	sub    esp,0x840
c002116f:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0021177:	50                   	push   eax
c0021178:	8d 44 24 38          	lea    eax,[esp+0x38]
c002117c:	50                   	push   eax
c002117d:	6a 10                	push   0x10
c002117f:	e8 a1 fa ff ff       	call   c0020c25 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021184:	83 c4 0c             	add    esp,0xc
c0021187:	6a 22                	push   0x22
c0021189:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c0021190:	50                   	push   eax
c0021191:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0021195:	50                   	push   eax
c0021196:	e8 05 f5 fd ff       	call   c00006a0 <memcpy>
c002119b:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00211a2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00211a6:	89 10                	mov    DWORD PTR [eax],edx
c00211a8:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c00211af:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00211b3:	89 10                	mov    DWORD PTR [eax],edx
c00211b5:	b0 01                	mov    al,0x1
c00211b7:	81 c4 4c 08 00 00    	add    esp,0x84c
c00211bd:	c3                   	ret    

c00211be <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c00211be:	55                   	push   ebp
c00211bf:	57                   	push   edi
c00211c0:	56                   	push   esi
c00211c1:	53                   	push   ebx
c00211c2:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00211c8:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c00211cf:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c00211d6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00211da:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c00211de:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00211e2:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00211e6:	75 03                	jne    c00211eb <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c00211e8:	83 c3 02             	add    ebx,0x2
c00211eb:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c00211ee:	75 03                	jne    c00211f3 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c00211f0:	43                   	inc    ebx
c00211f1:	eb f8                	jmp    c00211eb <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c00211f3:	51                   	push   ecx
c00211f4:	68 00 01 00 00       	push   0x100
c00211f9:	6a 00                	push   0x0
c00211fb:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00211ff:	50                   	push   eax
c0021200:	e8 bf f4 fd ff       	call   c00006c4 <memset>
c0021205:	83 c4 10             	add    esp,0x10
c0021208:	31 d2                	xor    edx,edx
c002120a:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c002120d:	84 c0                	test   al,al
c002120f:	74 21                	je     c0021232 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0021211:	3c 2f                	cmp    al,0x2f
c0021213:	75 0b                	jne    c0021220 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0021215:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0021219:	bd 01 00 00 00       	mov    ebp,0x1
c002121e:	eb 14                	jmp    c0021234 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0021220:	8d 48 9f             	lea    ecx,[eax-0x61]
c0021223:	80 f9 19             	cmp    cl,0x19
c0021226:	77 03                	ja     c002122b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021228:	83 e8 20             	sub    eax,0x20
c002122b:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c002122f:	42                   	inc    edx
c0021230:	eb d8                	jmp    c002120a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0021232:	31 ed                	xor    ebp,ebp
c0021234:	83 ec 0c             	sub    esp,0xc
c0021237:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c002123e:	e8 e1 e3 fe ff       	call   c000f624 <malloc>
c0021243:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c002124a:	89 c6                	mov    esi,eax
c002124c:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0021252:	c1 ef 0b             	shr    edi,0xb
c0021255:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c002125c:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0021260:	83 c4 10             	add    esp,0x10
c0021263:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0021268:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002126c:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0021273:	74 28                	je     c002129d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0021275:	52                   	push   edx
c0021276:	57                   	push   edi
c0021277:	50                   	push   eax
c0021278:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002127c:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0021283:	e8 9d f9 ff ff       	call   c0020c25 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021288:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002128c:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0021293:	05 00 08 00 00       	add    eax,0x800
c0021298:	83 c4 10             	add    esp,0x10
c002129b:	eb cb                	jmp    c0021268 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c002129d:	83 ec 0c             	sub    esp,0xc
c00212a0:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c00212a4:	57                   	push   edi
c00212a5:	e8 37 f4 fd ff       	call   c00006e1 <strlen>
c00212aa:	50                   	push   eax
c00212ab:	57                   	push   edi
c00212ac:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c00212b3:	56                   	push   esi
c00212b4:	e8 2a f9 ff ff       	call   c0020be3 <__memmem(unsigned char*, int, unsigned char*, int)>
c00212b9:	83 c4 20             	add    esp,0x20
c00212bc:	85 c0                	test   eax,eax
c00212be:	75 13                	jne    c00212d3 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c00212c0:	83 ec 0c             	sub    esp,0xc
c00212c3:	56                   	push   esi
c00212c4:	e8 6b e3 fe ff       	call   c000f634 <free>
c00212c9:	83 c4 10             	add    esp,0x10
c00212cc:	31 c0                	xor    eax,eax
c00212ce:	e9 b3 00 00 00       	jmp    c0021386 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c00212d3:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c00212d7:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c00212db:	c1 e7 08             	shl    edi,0x8
c00212de:	c1 e2 10             	shl    edx,0x10
c00212e1:	09 d7                	or     edi,edx
c00212e3:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c00212e7:	09 d7                	or     edi,edx
c00212e9:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c00212ed:	c1 e2 18             	shl    edx,0x18
c00212f0:	09 d7                	or     edi,edx
c00212f2:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c00212f6:	89 d1                	mov    ecx,edx
c00212f8:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c00212fc:	c1 e1 08             	shl    ecx,0x8
c00212ff:	c1 e2 10             	shl    edx,0x10
c0021302:	09 ca                	or     edx,ecx
c0021304:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0021308:	09 ca                	or     edx,ecx
c002130a:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c002130e:	c1 e1 18             	shl    ecx,0x18
c0021311:	09 ca                	or     edx,ecx
c0021313:	89 e9                	mov    ecx,ebp
c0021315:	84 c9                	test   cl,cl
c0021317:	74 3c                	je     c0021355 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0021319:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002131d:	83 ec 0c             	sub    esp,0xc
c0021320:	56                   	push   esi
c0021321:	e8 0e e3 fe ff       	call   c000f634 <free>
c0021326:	83 c4 0c             	add    esp,0xc
c0021329:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021330:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0021335:	50                   	push   eax
c0021336:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c002133d:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021344:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021348:	52                   	push   edx
c0021349:	57                   	push   edi
c002134a:	53                   	push   ebx
c002134b:	e8 6e fe ff ff       	call   c00211be <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021350:	83 c4 20             	add    esp,0x20
c0021353:	eb 31                	jmp    c0021386 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021355:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0021358:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c002135f:	d0 e8                	shr    al,1
c0021361:	89 3b                	mov    DWORD PTR [ebx],edi
c0021363:	83 e0 01             	and    eax,0x1
c0021366:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c002136d:	83 ec 0c             	sub    esp,0xc
c0021370:	89 13                	mov    DWORD PTR [ebx],edx
c0021372:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0021379:	89 03                	mov    DWORD PTR [ebx],eax
c002137b:	56                   	push   esi
c002137c:	e8 b3 e2 fe ff       	call   c000f634 <free>
c0021381:	83 c4 10             	add    esp,0x10
c0021384:	b0 01                	mov    al,0x1
c0021386:	81 c4 1c 01 00 00    	add    esp,0x11c
c002138c:	5b                   	pop    ebx
c002138d:	5e                   	pop    esi
c002138e:	5f                   	pop    edi
c002138f:	5d                   	pop    ebp
c0021390:	c3                   	ret    

c0021391 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0021391:	55                   	push   ebp
c0021392:	57                   	push   edi
c0021393:	56                   	push   esi
c0021394:	53                   	push   ebx
c0021395:	83 ec 20             	sub    esp,0x20
c0021398:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002139c:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00213a0:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00213a4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00213ac:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00213b4:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c00213b9:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c00213bf:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c00213c5:	57                   	push   edi
c00213c6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00213ca:	50                   	push   eax
c00213cb:	8d 44 24 14          	lea    eax,[esp+0x14]
c00213cf:	50                   	push   eax
c00213d0:	e8 94 fd ff ff       	call   c0021169 <readRoot(unsigned int*, unsigned int*, char)>
c00213d5:	5a                   	pop    edx
c00213d6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00213da:	e8 02 f3 fd ff       	call   c00006e1 <strlen>
c00213df:	83 c4 10             	add    esp,0x10
c00213e2:	83 f8 03             	cmp    eax,0x3
c00213e5:	77 17                	ja     c00213fe <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c00213e7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00213eb:	89 03                	mov    DWORD PTR [ebx],eax
c00213ed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00213f1:	89 06                	mov    DWORD PTR [esi],eax
c00213f3:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c00213fa:	b0 01                	mov    al,0x1
c00213fc:	eb 19                	jmp    c0021417 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c00213fe:	50                   	push   eax
c00213ff:	55                   	push   ebp
c0021400:	57                   	push   edi
c0021401:	56                   	push   esi
c0021402:	53                   	push   ebx
c0021403:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021407:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002140b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002140f:	e8 aa fd ff ff       	call   c00211be <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021414:	83 c4 20             	add    esp,0x20
c0021417:	83 c4 1c             	add    esp,0x1c
c002141a:	5b                   	pop    ebx
c002141b:	5e                   	pop    esi
c002141c:	5f                   	pop    edi
c002141d:	5d                   	pop    ebp
c002141e:	c3                   	ret    
c002141f:	90                   	nop

c0021420 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0021420:	57                   	push   edi
c0021421:	56                   	push   esi
c0021422:	53                   	push   ebx
c0021423:	83 ec 10             	sub    esp,0x10
c0021426:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002142a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002142e:	85 ff                	test   edi,edi
c0021430:	0f 84 9d 00 00 00    	je     c00214d3 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0021436:	85 f6                	test   esi,esi
c0021438:	0f 84 95 00 00 00    	je     c00214d3 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c002143e:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0021443:	74 17                	je     c002145c <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c0021445:	83 ec 0c             	sub    esp,0xc
c0021448:	68 83 bc 02 c0       	push   0xc002bc83
c002144d:	e8 a1 14 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0021452:	83 c4 10             	add    esp,0x10
c0021455:	b8 03 00 00 00       	mov    eax,0x3
c002145a:	eb 7c                	jmp    c00214d8 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c002145c:	83 ec 0c             	sub    esp,0xc
c002145f:	6a 1c                	push   0x1c
c0021461:	e8 be e1 fe ff       	call   c000f624 <malloc>
c0021466:	89 07                	mov    DWORD PTR [edi],eax
c0021468:	89 c3                	mov    ebx,eax
c002146a:	58                   	pop    eax
c002146b:	8d 44 24 18          	lea    eax,[esp+0x18]
c002146f:	50                   	push   eax
c0021470:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021473:	50                   	push   eax
c0021474:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021478:	50                   	push   eax
c0021479:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002147d:	50                   	push   eax
c002147e:	56                   	push   esi
c002147f:	e8 0d ff ff ff       	call   c0021391 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021484:	83 c4 20             	add    esp,0x20
c0021487:	84 c0                	test   al,al
c0021489:	74 07                	je     c0021492 <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c002148b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021490:	74 0b                	je     c002149d <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c0021492:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021496:	b8 01 00 00 00       	mov    eax,0x1
c002149b:	eb 3b                	jmp    c00214d8 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c002149d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00214a1:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00214a5:	89 03                	mov    DWORD PTR [ebx],eax
c00214a7:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00214ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00214b2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00214b9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00214c0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00214c3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00214ca:	8a 06                	mov    al,BYTE PTR [esi]
c00214cc:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c00214cf:	31 c0                	xor    eax,eax
c00214d1:	eb 05                	jmp    c00214d8 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c00214d3:	b8 04 00 00 00       	mov    eax,0x4
c00214d8:	83 c4 10             	add    esp,0x10
c00214db:	5b                   	pop    ebx
c00214dc:	5e                   	pop    esi
c00214dd:	5f                   	pop    edi
c00214de:	c3                   	ret    
c00214df:	90                   	nop

c00214e0 <ISO9660::exists(char const*)>:
c00214e0:	83 ec 28             	sub    esp,0x28
c00214e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00214e7:	8d 54 24 18          	lea    edx,[esp+0x18]
c00214eb:	52                   	push   edx
c00214ec:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00214ef:	52                   	push   edx
c00214f0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00214f4:	52                   	push   edx
c00214f5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00214f9:	52                   	push   edx
c00214fa:	50                   	push   eax
c00214fb:	e8 91 fe ff ff       	call   c0021391 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021500:	83 c4 3c             	add    esp,0x3c
c0021503:	c3                   	ret    

c0021504 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0021504:	56                   	push   esi
c0021505:	53                   	push   ebx
c0021506:	83 ec 14             	sub    esp,0x14
c0021509:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c002150d:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0021511:	85 db                	test   ebx,ebx
c0021513:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0021517:	0f 94 c2             	sete   dl
c002151a:	85 f6                	test   esi,esi
c002151c:	0f 94 c0             	sete   al
c002151f:	08 c2                	or     dl,al
c0021521:	75 68                	jne    c002158b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021523:	85 c9                	test   ecx,ecx
c0021525:	74 64                	je     c002158b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021527:	83 ec 0c             	sub    esp,0xc
c002152a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c002152d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021531:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021537:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002153e:	50                   	push   eax
c002153f:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0021542:	50                   	push   eax
c0021543:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021547:	50                   	push   eax
c0021548:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002154c:	50                   	push   eax
c002154d:	51                   	push   ecx
c002154e:	e8 3e fe ff ff       	call   c0021391 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021553:	83 c4 20             	add    esp,0x20
c0021556:	ba 01 00 00 00       	mov    edx,0x1
c002155b:	84 c0                	test   al,al
c002155d:	74 31                	je     c0021590 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002155f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021563:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002156a:	89 03                	mov    DWORD PTR [ebx],eax
c002156c:	ba 00 00 00 00       	mov    edx,0x0
c0021571:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021575:	85 c0                	test   eax,eax
c0021577:	0f 95 06             	setne  BYTE PTR [esi]
c002157a:	74 14                	je     c0021590 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002157c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021582:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021589:	eb 05                	jmp    c0021590 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002158b:	ba 04 00 00 00       	mov    edx,0x4
c0021590:	83 c4 14             	add    esp,0x14
c0021593:	89 d0                	mov    eax,edx
c0021595:	5b                   	pop    ebx
c0021596:	5e                   	pop    esi
c0021597:	c3                   	ret    

c0021598 <ISO9660::openDir(char const*, void**)>:
c0021598:	57                   	push   edi
c0021599:	56                   	push   esi
c002159a:	53                   	push   ebx
c002159b:	83 ec 10             	sub    esp,0x10
c002159e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00215a2:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00215a6:	85 ff                	test   edi,edi
c00215a8:	0f 84 95 00 00 00    	je     c0021643 <ISO9660::openDir(char const*, void**)+0xab>
c00215ae:	85 f6                	test   esi,esi
c00215b0:	0f 84 8d 00 00 00    	je     c0021643 <ISO9660::openDir(char const*, void**)+0xab>
c00215b6:	83 ec 0c             	sub    esp,0xc
c00215b9:	6a 1c                	push   0x1c
c00215bb:	e8 64 e0 fe ff       	call   c000f624 <malloc>
c00215c0:	89 07                	mov    DWORD PTR [edi],eax
c00215c2:	89 c3                	mov    ebx,eax
c00215c4:	59                   	pop    ecx
c00215c5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00215c9:	50                   	push   eax
c00215ca:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00215cd:	50                   	push   eax
c00215ce:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00215d2:	50                   	push   eax
c00215d3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00215d7:	50                   	push   eax
c00215d8:	56                   	push   esi
c00215d9:	e8 b3 fd ff ff       	call   c0021391 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00215de:	83 c4 20             	add    esp,0x20
c00215e1:	84 c0                	test   al,al
c00215e3:	74 07                	je     c00215ec <ISO9660::openDir(char const*, void**)+0x54>
c00215e5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00215ea:	75 21                	jne    c002160d <ISO9660::openDir(char const*, void**)+0x75>
c00215ec:	0f b6 c0             	movzx  eax,al
c00215ef:	52                   	push   edx
c00215f0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00215f4:	50                   	push   eax
c00215f5:	68 a9 bc 02 c0       	push   0xc002bca9
c00215fa:	e8 f4 12 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00215ff:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021603:	83 c4 10             	add    esp,0x10
c0021606:	b8 01 00 00 00       	mov    eax,0x1
c002160b:	eb 3b                	jmp    c0021648 <ISO9660::openDir(char const*, void**)+0xb0>
c002160d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021611:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021615:	89 03                	mov    DWORD PTR [ebx],eax
c0021617:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c002161e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021622:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0021629:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021630:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021633:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002163a:	8a 06                	mov    al,BYTE PTR [esi]
c002163c:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c002163f:	31 c0                	xor    eax,eax
c0021641:	eb 05                	jmp    c0021648 <ISO9660::openDir(char const*, void**)+0xb0>
c0021643:	b8 04 00 00 00       	mov    eax,0x4
c0021648:	83 c4 10             	add    esp,0x10
c002164b:	5b                   	pop    ebx
c002164c:	5e                   	pop    esi
c002164d:	5f                   	pop    edi
c002164e:	c3                   	ret    
c002164f:	90                   	nop

c0021650 <ISO9660::ISO9660()>:
c0021650:	83 ec 0c             	sub    esp,0xc
c0021653:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021657:	83 ec 0c             	sub    esp,0xc
c002165a:	50                   	push   eax
c002165b:	e8 98 15 ff ff       	call   c0012bf8 <Filesystem::Filesystem()>
c0021660:	83 c4 10             	add    esp,0x10
c0021663:	ba cc bc 02 c0       	mov    edx,0xc002bccc
c0021668:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002166c:	89 10                	mov    DWORD PTR [eax],edx
c002166e:	90                   	nop
c002166f:	83 c4 0c             	add    esp,0xc
c0021672:	c3                   	ret    
c0021673:	90                   	nop

c0021674 <SoundChannel::~SoundChannel()>:
c0021674:	83 ec 0c             	sub    esp,0xc
c0021677:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002167b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c002167e:	83 ec 0c             	sub    esp,0xc
c0021681:	50                   	push   eax
c0021682:	e8 ad df fe ff       	call   c000f634 <free>
c0021687:	83 c4 10             	add    esp,0x10
c002168a:	90                   	nop
c002168b:	83 c4 0c             	add    esp,0xc
c002168e:	c3                   	ret    
c002168f:	90                   	nop

c0021690 <SoundChannel::setSpeed(float)>:
c0021690:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021694:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021698:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c002169b:	c3                   	ret    

c002169c <SoundChannel::getSpeed()>:
c002169c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00216a0:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00216a3:	c3                   	ret    

c00216a4 <SoundChannel::setVolume(int)>:
c00216a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00216a8:	83 f8 64             	cmp    eax,0x64
c00216ab:	7e 05                	jle    c00216b2 <SoundChannel::setVolume(int)+0xe>
c00216ad:	b8 64 00 00 00       	mov    eax,0x64
c00216b2:	85 c0                	test   eax,eax
c00216b4:	79 02                	jns    c00216b8 <SoundChannel::setVolume(int)+0x14>
c00216b6:	31 c0                	xor    eax,eax
c00216b8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00216bc:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c00216bf:	c3                   	ret    

c00216c0 <SoundChannel::getVolume()>:
c00216c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00216c4:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00216c7:	c3                   	ret    

c00216c8 <SoundChannel::pause()>:
c00216c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00216cc:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c00216d0:	c3                   	ret    
c00216d1:	90                   	nop

c00216d2 <SoundChannel::SoundChannel(int, int, int, int)>:
c00216d2:	83 ec 1c             	sub    esp,0x1c
c00216d5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00216d9:	e8 ea ff ff ff       	call   c00216c8 <SoundChannel::pause()>
c00216de:	83 c4 04             	add    esp,0x4
c00216e1:	6a 50                	push   0x50
c00216e3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00216e7:	e8 b8 ff ff ff       	call   c00216a4 <SoundChannel::setVolume(int)>
c00216ec:	83 c4 08             	add    esp,0x8
c00216ef:	a1 44 bd 02 c0       	mov    eax,ds:0xc002bd44
c00216f4:	50                   	push   eax
c00216f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00216f9:	e8 92 ff ff ff       	call   c0021690 <SoundChannel::setSpeed(float)>
c00216fe:	83 c4 08             	add    esp,0x8
c0021701:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021705:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0021709:	89 10                	mov    DWORD PTR [eax],edx
c002170b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002170f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021713:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021716:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002171a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002171e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021721:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0021726:	75 23                	jne    c002174b <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c0021728:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002172c:	8b 10                	mov    edx,DWORD PTR [eax]
c002172e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021732:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021735:	0f af c2             	imul   eax,edx
c0021738:	85 c0                	test   eax,eax
c002173a:	79 03                	jns    c002173f <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c002173c:	83 c0 03             	add    eax,0x3
c002173f:	c1 f8 02             	sar    eax,0x2
c0021742:	05 a0 0f 00 00       	add    eax,0xfa0
c0021747:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002174b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002174f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021753:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0021756:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002175a:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0021761:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021765:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c002176c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021770:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021773:	c1 e0 02             	shl    eax,0x2
c0021776:	83 ec 0c             	sub    esp,0xc
c0021779:	50                   	push   eax
c002177a:	e8 a5 de fe ff       	call   c000f624 <malloc>
c002177f:	83 c4 10             	add    esp,0x10
c0021782:	89 c2                	mov    edx,eax
c0021784:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021788:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c002178b:	83 ec 04             	sub    esp,0x4
c002178e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021792:	50                   	push   eax
c0021793:	6a 01                	push   0x1
c0021795:	6a 04                	push   0x4
c0021797:	e8 ec 71 fe ff       	call   c0008988 <src_new>
c002179c:	83 c4 10             	add    esp,0x10
c002179f:	89 c2                	mov    edx,eax
c00217a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00217a5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00217a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00217ac:	85 c0                	test   eax,eax
c00217ae:	74 10                	je     c00217c0 <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c00217b0:	83 ec 0c             	sub    esp,0xc
c00217b3:	68 28 bd 02 c0       	push   0xc002bd28
c00217b8:	e8 90 84 ff ff       	call   c0019c4d <Krnl::panic(char const*)>
c00217bd:	83 c4 10             	add    esp,0x10
c00217c0:	a0 c0 fb 02 c0       	mov    al,ds:0xc002fbc0
c00217c5:	83 f0 01             	xor    eax,0x1
c00217c8:	84 c0                	test   al,al
c00217ca:	74 57                	je     c0021823 <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c00217cc:	a1 48 bd 02 c0       	mov    eax,ds:0xc002bd48
c00217d1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00217d5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00217dd:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00217e5:	7f 35                	jg     c002181c <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c00217e7:	83 ec 0c             	sub    esp,0xc
c00217ea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00217ee:	e8 84 50 00 00       	call   c0026877 <__floatsisf>
c00217f3:	83 c4 10             	add    esp,0x10
c00217f6:	8b 15 48 bd 02 c0    	mov    edx,DWORD PTR ds:0xc002bd48
c00217fc:	83 ec 08             	sub    esp,0x8
c00217ff:	52                   	push   edx
c0021800:	50                   	push   eax
c0021801:	e8 83 4c 00 00       	call   c0026489 <__mulsf3>
c0021806:	83 c4 10             	add    esp,0x10
c0021809:	89 c2                	mov    edx,eax
c002180b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002180f:	89 14 85 c0 f7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0840],edx
c0021816:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002181a:	eb c1                	jmp    c00217dd <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c002181c:	c6 05 c0 fb 02 c0 01 	mov    BYTE PTR ds:0xc002fbc0,0x1
c0021823:	90                   	nop
c0021824:	83 c4 1c             	add    esp,0x1c
c0021827:	c3                   	ret    

c0021828 <SoundChannel::play()>:
c0021828:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002182c:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c0021830:	c3                   	ret    
c0021831:	90                   	nop

c0021832 <SoundChannel::paused()>:
c0021832:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021836:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0021839:	c3                   	ret    

c002183a <SoundChannel::getSampleRate()>:
c002183a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002183e:	8b 00                	mov    eax,DWORD PTR [eax]
c0021840:	c3                   	ret    
c0021841:	90                   	nop

c0021842 <SoundChannel::getBits()>:
c0021842:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021846:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021849:	c3                   	ret    

c002184a <SoundChannel::getBufferUsed()>:
c002184a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002184e:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0021851:	c3                   	ret    

c0021852 <SoundChannel::getBufferSize()>:
c0021852:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021856:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021859:	c3                   	ret    

c002185a <SoundChannel::unbuffer(float*, int, int)>:
c002185a:	56                   	push   esi
c002185b:	53                   	push   ebx
c002185c:	83 ec 40             	sub    esp,0x40
c002185f:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0021863:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0021866:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002186a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c002186d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0021871:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0021875:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0021879:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002187d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021881:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0021885:	e8 ed 4f 00 00       	call   c0026877 <__floatsisf>
c002188a:	5a                   	pop    edx
c002188b:	89 c6                	mov    esi,eax
c002188d:	ff 33                	push   DWORD PTR [ebx]
c002188f:	e8 e3 4f 00 00       	call   c0026877 <__floatsisf>
c0021894:	59                   	pop    ecx
c0021895:	5a                   	pop    edx
c0021896:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0021899:	50                   	push   eax
c002189a:	e8 ea 4b 00 00       	call   c0026489 <__mulsf3>
c002189f:	59                   	pop    ecx
c00218a0:	5a                   	pop    edx
c00218a1:	50                   	push   eax
c00218a2:	56                   	push   esi
c00218a3:	e8 a4 4d 00 00       	call   c002664c <__divsf3>
c00218a8:	89 04 24             	mov    DWORD PTR [esp],eax
c00218ab:	e8 97 62 00 00       	call   c0027b47 <__extendsfdf2>
c00218b0:	59                   	pop    ecx
c00218b1:	5e                   	pop    esi
c00218b2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00218b6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00218ba:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00218c2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00218c6:	50                   	push   eax
c00218c7:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c00218ca:	e8 ae 6c fe ff       	call   c000857d <src_process>
c00218cf:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00218d3:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00218d6:	83 c4 0c             	add    esp,0xc
c00218d9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00218dc:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c00218df:	29 d0                	sub    eax,edx
c00218e1:	c1 e0 02             	shl    eax,0x2
c00218e4:	50                   	push   eax
c00218e5:	8d 04 91             	lea    eax,[ecx+edx*4]
c00218e8:	50                   	push   eax
c00218e9:	51                   	push   ecx
c00218ea:	e8 79 ed fd ff       	call   c0000668 <memmove>
c00218ef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00218f3:	83 c4 44             	add    esp,0x44
c00218f6:	5b                   	pop    ebx
c00218f7:	5e                   	pop    esi
c00218f8:	c3                   	ret    
c00218f9:	90                   	nop

c00218fa <SoundChannel::buffer8(unsigned char*, int)>:
c00218fa:	55                   	push   ebp
c00218fb:	57                   	push   edi
c00218fc:	56                   	push   esi
c00218fd:	53                   	push   ebx
c00218fe:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021902:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0021906:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0021909:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002190d:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0021910:	74 7a                	je     c002198c <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0021912:	85 ff                	test   edi,edi
c0021914:	7e 76                	jle    c002198c <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0021916:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c002191a:	8d 70 01             	lea    esi,[eax+0x1]
c002191d:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0021920:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021923:	8b 1c 9d c0 f7 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd0840]
c002192a:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c002192d:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0021930:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0021933:	74 5e                	je     c0021993 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0021935:	83 ff 01             	cmp    edi,0x1
c0021938:	74 4b                	je     c0021985 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c002193a:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c002193e:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0021941:	8d 70 01             	lea    esi,[eax+0x1]
c0021944:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021947:	8b 1c 9d c0 f7 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd0840]
c002194e:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0021951:	b8 02 00 00 00       	mov    eax,0x2
c0021956:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0021959:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c002195c:	75 23                	jne    c0021981 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c002195e:	eb 27                	jmp    c0021987 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0021960:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0021965:	8d 71 01             	lea    esi,[ecx+0x1]
c0021968:	40                   	inc    eax
c0021969:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c002196c:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c002196f:	8b 1c 9d c0 f7 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd0840]
c0021976:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0021979:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c002197c:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c002197f:	74 06                	je     c0021987 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0021981:	39 c7                	cmp    edi,eax
c0021983:	75 db                	jne    c0021960 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0021985:	89 f8                	mov    eax,edi
c0021987:	5b                   	pop    ebx
c0021988:	5e                   	pop    esi
c0021989:	5f                   	pop    edi
c002198a:	5d                   	pop    ebp
c002198b:	c3                   	ret    
c002198c:	5b                   	pop    ebx
c002198d:	31 c0                	xor    eax,eax
c002198f:	5e                   	pop    esi
c0021990:	5f                   	pop    edi
c0021991:	5d                   	pop    ebp
c0021992:	c3                   	ret    
c0021993:	b8 01 00 00 00       	mov    eax,0x1
c0021998:	eb ed                	jmp    c0021987 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c002199a <SoundDevice::SoundDevice(char const*)>:
c002199a:	83 ec 1c             	sub    esp,0x1c
c002199d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00219a1:	83 ec 08             	sub    esp,0x8
c00219a4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00219a8:	50                   	push   eax
c00219a9:	e8 5c 25 ff ff       	call   c0013f0a <Device::Device(char const*)>
c00219ae:	83 c4 10             	add    esp,0x10
c00219b1:	ba 54 bd 02 c0       	mov    edx,0xc002bd54
c00219b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00219ba:	89 10                	mov    DWORD PTR [eax],edx
c00219bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00219c0:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c00219ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00219ce:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00219d8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00219e0:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00219e5:	7f 19                	jg     c0021a00 <SoundDevice::SoundDevice(char const*)+0x66>
c00219e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00219eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00219ef:	83 c2 54             	add    edx,0x54
c00219f2:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c00219fa:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00219fe:	eb e0                	jmp    c00219e0 <SoundDevice::SoundDevice(char const*)+0x46>
c0021a00:	90                   	nop
c0021a01:	83 c4 1c             	add    esp,0x1c
c0021a04:	c3                   	ret    
c0021a05:	90                   	nop

c0021a06 <SoundDevice::~SoundDevice()>:
c0021a06:	53                   	push   ebx
c0021a07:	83 ec 18             	sub    esp,0x18
c0021a0a:	ba 54 bd 02 c0       	mov    edx,0xc002bd54
c0021a0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021a13:	89 10                	mov    DWORD PTR [eax],edx
c0021a15:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021a1d:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0021a22:	7f 46                	jg     c0021a6a <SoundDevice::~SoundDevice()+0x64>
c0021a24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021a28:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021a2c:	83 c2 54             	add    edx,0x54
c0021a2f:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0021a33:	85 c0                	test   eax,eax
c0021a35:	74 2d                	je     c0021a64 <SoundDevice::~SoundDevice()+0x5e>
c0021a37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021a3b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021a3f:	83 c2 54             	add    edx,0x54
c0021a42:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0021a46:	85 db                	test   ebx,ebx
c0021a48:	74 1a                	je     c0021a64 <SoundDevice::~SoundDevice()+0x5e>
c0021a4a:	83 ec 0c             	sub    esp,0xc
c0021a4d:	53                   	push   ebx
c0021a4e:	e8 21 fc ff ff       	call   c0021674 <SoundChannel::~SoundChannel()>
c0021a53:	83 c4 10             	add    esp,0x10
c0021a56:	83 ec 08             	sub    esp,0x8
c0021a59:	6a 2c                	push   0x2c
c0021a5b:	53                   	push   ebx
c0021a5c:	e8 b2 0d ff ff       	call   c0012813 <operator delete(void*, unsigned long)>
c0021a61:	83 c4 10             	add    esp,0x10
c0021a64:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021a68:	eb b3                	jmp    c0021a1d <SoundDevice::~SoundDevice()+0x17>
c0021a6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021a6e:	83 ec 0c             	sub    esp,0xc
c0021a71:	50                   	push   eax
c0021a72:	e8 75 21 ff ff       	call   c0013bec <Device::~Device()>
c0021a77:	83 c4 10             	add    esp,0x10
c0021a7a:	90                   	nop
c0021a7b:	83 c4 18             	add    esp,0x18
c0021a7e:	5b                   	pop    ebx
c0021a7f:	c3                   	ret    

c0021a80 <SoundDevice::~SoundDevice()>:
c0021a80:	83 ec 0c             	sub    esp,0xc
c0021a83:	83 ec 0c             	sub    esp,0xc
c0021a86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021a8a:	e8 77 ff ff ff       	call   c0021a06 <SoundDevice::~SoundDevice()>
c0021a8f:	83 c4 10             	add    esp,0x10
c0021a92:	83 ec 08             	sub    esp,0x8
c0021a95:	68 e4 01 00 00       	push   0x1e4
c0021a9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021a9e:	e8 70 0d ff ff       	call   c0012813 <operator delete(void*, unsigned long)>
c0021aa3:	83 c4 10             	add    esp,0x10
c0021aa6:	83 c4 0c             	add    esp,0xc
c0021aa9:	c3                   	ret    

c0021aaa <SoundDevice::getFreeChannelNum()>:
c0021aaa:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021aae:	31 c0                	xor    eax,eax
c0021ab0:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0021ab8:	74 09                	je     c0021ac3 <SoundDevice::getFreeChannelNum()+0x19>
c0021aba:	40                   	inc    eax
c0021abb:	83 f8 20             	cmp    eax,0x20
c0021abe:	75 f0                	jne    c0021ab0 <SoundDevice::getFreeChannelNum()+0x6>
c0021ac0:	83 c8 ff             	or     eax,0xffffffff
c0021ac3:	c3                   	ret    

c0021ac4 <SoundDevice::addChannel(SoundChannel*)>:
c0021ac4:	56                   	push   esi
c0021ac5:	53                   	push   ebx
c0021ac6:	51                   	push   ecx
c0021ac7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021acb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0021acf:	53                   	push   ebx
c0021ad0:	e8 d5 ff ff ff       	call   c0021aaa <SoundDevice::getFreeChannelNum()>
c0021ad5:	5a                   	pop    edx
c0021ad6:	83 f8 ff             	cmp    eax,0xffffffff
c0021ad9:	74 51                	je     c0021b2c <SoundDevice::addChannel(SoundChannel*)+0x68>
c0021adb:	85 f6                	test   esi,esi
c0021add:	74 4d                	je     c0021b2c <SoundDevice::addChannel(SoundChannel*)+0x68>
c0021adf:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c0021ae6:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c0021aed:	75 30                	jne    c0021b1f <SoundDevice::addChannel(SoundChannel*)+0x5b>
c0021aef:	83 ec 0c             	sub    esp,0xc
c0021af2:	56                   	push   esi
c0021af3:	e8 42 fd ff ff       	call   c002183a <SoundChannel::getSampleRate()>
c0021af8:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c0021afe:	89 34 24             	mov    DWORD PTR [esp],esi
c0021b01:	e8 3c fd ff ff       	call   c0021842 <SoundChannel::getBits()>
c0021b06:	83 c4 0c             	add    esp,0xc
c0021b09:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0021b0f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0021b11:	50                   	push   eax
c0021b12:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0021b18:	53                   	push   ebx
c0021b19:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0021b1c:	83 c4 10             	add    esp,0x10
c0021b1f:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c0021b25:	b8 01 00 00 00       	mov    eax,0x1
c0021b2a:	eb 03                	jmp    c0021b2f <SoundDevice::addChannel(SoundChannel*)+0x6b>
c0021b2c:	83 c8 ff             	or     eax,0xffffffff
c0021b2f:	5a                   	pop    edx
c0021b30:	5b                   	pop    ebx
c0021b31:	5e                   	pop    esi
c0021b32:	c3                   	ret    
c0021b33:	90                   	nop

c0021b34 <SoundDevice::removeChannel(int)>:
c0021b34:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021b38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021b3c:	83 fa 1f             	cmp    edx,0x1f
c0021b3f:	77 23                	ja     c0021b64 <SoundDevice::removeChannel(int)+0x30>
c0021b41:	8d 14 90             	lea    edx,[eax+edx*4]
c0021b44:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c0021b4b:	74 17                	je     c0021b64 <SoundDevice::removeChannel(int)+0x30>
c0021b4d:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c0021b57:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c0021b5d:	75 05                	jne    c0021b64 <SoundDevice::removeChannel(int)+0x30>
c0021b5f:	8b 00                	mov    eax,DWORD PTR [eax]
c0021b61:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c0021b64:	c3                   	ret    
c0021b65:	90                   	nop

c0021b66 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c0021b66:	57                   	push   edi
c0021b67:	56                   	push   esi
c0021b68:	53                   	push   ebx
c0021b69:	31 db                	xor    ebx,ebx
c0021b6b:	83 ec 10             	sub    esp,0x10
c0021b6e:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0021b72:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0021b76:	0f 8d cb 00 00 00    	jge    c0021c47 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c0021b7c:	83 ec 0c             	sub    esp,0xc
c0021b7f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021b83:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0021b86:	e8 bc 5f 00 00       	call   c0027b47 <__extendsfdf2>
c0021b8b:	83 c4 10             	add    esp,0x10
c0021b8e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021b92:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021b96:	68 00 00 f0 3f       	push   0x3ff00000
c0021b9b:	6a 00                	push   0x0
c0021b9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021ba1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021ba5:	e8 29 4f 00 00       	call   c0026ad3 <__adddf3>
c0021baa:	83 c4 10             	add    esp,0x10
c0021bad:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021bb1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021bb5:	68 00 00 e0 3f       	push   0x3fe00000
c0021bba:	6a 00                	push   0x0
c0021bbc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021bc0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021bc4:	e8 87 55 00 00       	call   c0027150 <__muldf3>
c0021bc9:	83 c4 10             	add    esp,0x10
c0021bcc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021bd0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021bd4:	68 00 00 60 40       	push   0x40600000
c0021bd9:	6a 00                	push   0x0
c0021bdb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021bdf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021be3:	e8 68 55 00 00       	call   c0027150 <__muldf3>
c0021be8:	59                   	pop    ecx
c0021be9:	5f                   	pop    edi
c0021bea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0021bee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0021bf2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021bf6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021bfa:	e8 24 5e 00 00       	call   c0027a23 <__truncdfsf2>
c0021bff:	5a                   	pop    edx
c0021c00:	89 c7                	mov    edi,eax
c0021c02:	59                   	pop    ecx
c0021c03:	68 00 00 fe 42       	push   0x42fe0000
c0021c08:	50                   	push   eax
c0021c09:	e8 bf 4e 00 00       	call   c0026acd <__gesf2>
c0021c0e:	83 c4 10             	add    esp,0x10
c0021c11:	85 c0                	test   eax,eax
c0021c13:	78 06                	js     c0021c1b <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0021c15:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c0021c19:	eb 26                	jmp    c0021c41 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0021c1b:	50                   	push   eax
c0021c1c:	50                   	push   eax
c0021c1d:	6a 00                	push   0x0
c0021c1f:	57                   	push   edi
c0021c20:	e8 ac 4e 00 00       	call   c0026ad1 <__lesf2>
c0021c25:	83 c4 10             	add    esp,0x10
c0021c28:	85 c0                	test   eax,eax
c0021c2a:	7f 06                	jg     c0021c32 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c0021c2c:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c0021c30:	eb 0f                	jmp    c0021c41 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0021c32:	83 ec 0c             	sub    esp,0xc
c0021c35:	57                   	push   edi
c0021c36:	e8 a1 5f 00 00       	call   c0027bdc <lrintf>
c0021c3b:	83 c4 10             	add    esp,0x10
c0021c3e:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0021c41:	43                   	inc    ebx
c0021c42:	e9 2b ff ff ff       	jmp    c0021b72 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c0021c47:	83 c4 10             	add    esp,0x10
c0021c4a:	5b                   	pop    ebx
c0021c4b:	5e                   	pop    esi
c0021c4c:	5f                   	pop    edi
c0021c4d:	c3                   	ret    

c0021c4e <SoundDevice::getAudio(int, float*, float*)>:
c0021c4e:	55                   	push   ebp
c0021c4f:	57                   	push   edi
c0021c50:	56                   	push   esi
c0021c51:	53                   	push   ebx
c0021c52:	31 db                	xor    ebx,ebx
c0021c54:	83 ec 20             	sub    esp,0x20
c0021c57:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021c5b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0021c5f:	c1 e0 02             	shl    eax,0x2
c0021c62:	50                   	push   eax
c0021c63:	6a 00                	push   0x0
c0021c65:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0021c69:	e8 56 ea fd ff       	call   c00006c4 <memset>
c0021c6e:	83 c4 10             	add    esp,0x10
c0021c71:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0021c75:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c0021c7c:	85 c0                	test   eax,eax
c0021c7e:	0f 84 d7 00 00 00    	je     c0021d5b <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0021c84:	83 ec 0c             	sub    esp,0xc
c0021c87:	50                   	push   eax
c0021c88:	e8 a5 fb ff ff       	call   c0021832 <SoundChannel::paused()>
c0021c8d:	83 c4 10             	add    esp,0x10
c0021c90:	84 c0                	test   al,al
c0021c92:	0f 85 c3 00 00 00    	jne    c0021d5b <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0021c98:	83 ec 0c             	sub    esp,0xc
c0021c9b:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0021ca2:	e8 19 fa ff ff       	call   c00216c0 <SoundChannel::getVolume()>
c0021ca7:	83 c4 10             	add    esp,0x10
c0021caa:	85 c0                	test   eax,eax
c0021cac:	0f 84 a9 00 00 00    	je     c0021d5b <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0021cb2:	83 ec 0c             	sub    esp,0xc
c0021cb5:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0021cbc:	e8 ff f9 ff ff       	call   c00216c0 <SoundChannel::getVolume()>
c0021cc1:	83 ec 0c             	sub    esp,0xc
c0021cc4:	50                   	push   eax
c0021cc5:	e8 ad 4b 00 00       	call   c0026877 <__floatsisf>
c0021cca:	59                   	pop    ecx
c0021ccb:	5d                   	pop    ebp
c0021ccc:	31 ed                	xor    ebp,ebp
c0021cce:	68 00 00 c8 42       	push   0x42c80000
c0021cd3:	50                   	push   eax
c0021cd4:	e8 73 49 00 00       	call   c002664c <__divsf3>
c0021cd9:	83 c4 10             	add    esp,0x10
c0021cdc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021ce0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0021ce4:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c0021cea:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0021cee:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0021cf5:	e8 60 fb ff ff       	call   c002185a <SoundChannel::unbuffer(float*, int, int)>
c0021cfa:	83 c4 20             	add    esp,0x20
c0021cfd:	89 c1                	mov    ecx,eax
c0021cff:	39 cd                	cmp    ebp,ecx
c0021d01:	7d 52                	jge    c0021d55 <SoundDevice::getAudio(int, float*, float*)+0x107>
c0021d03:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0021d07:	50                   	push   eax
c0021d08:	50                   	push   eax
c0021d09:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0021d0d:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0021d10:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0021d14:	e8 70 47 00 00       	call   c0026489 <__mulsf3>
c0021d19:	5a                   	pop    edx
c0021d1a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021d1e:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c0021d24:	e8 4e 4b 00 00       	call   c0026877 <__floatsisf>
c0021d29:	59                   	pop    ecx
c0021d2a:	5a                   	pop    edx
c0021d2b:	50                   	push   eax
c0021d2c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021d30:	e8 17 49 00 00       	call   c002664c <__divsf3>
c0021d35:	59                   	pop    ecx
c0021d36:	5a                   	pop    edx
c0021d37:	50                   	push   eax
c0021d38:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0021d3c:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0021d3f:	e8 22 44 00 00       	call   c0026166 <__addsf3>
c0021d44:	83 c4 10             	add    esp,0x10
c0021d47:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0021d4b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0021d4f:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c0021d52:	45                   	inc    ebp
c0021d53:	eb aa                	jmp    c0021cff <SoundDevice::getAudio(int, float*, float*)+0xb1>
c0021d55:	39 cf                	cmp    edi,ecx
c0021d57:	7e 02                	jle    c0021d5b <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0021d59:	89 cf                	mov    edi,ecx
c0021d5b:	43                   	inc    ebx
c0021d5c:	83 fb 20             	cmp    ebx,0x20
c0021d5f:	0f 85 10 ff ff ff    	jne    c0021c75 <SoundDevice::getAudio(int, float*, float*)+0x27>
c0021d65:	83 c4 1c             	add    esp,0x1c
c0021d68:	89 f8                	mov    eax,edi
c0021d6a:	5b                   	pop    ebx
c0021d6b:	5e                   	pop    esi
c0021d6c:	5f                   	pop    edi
c0021d6d:	5d                   	pop    ebp
c0021d6e:	c3                   	ret    
c0021d6f:	90                   	nop

c0021d70 <PCI::open(int, int, void*)>:
c0021d70:	83 ec 18             	sub    esp,0x18
c0021d73:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021d77:	8b 10                	mov    edx,DWORD PTR [eax]
c0021d79:	50                   	push   eax
c0021d7a:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0021d7d:	31 c0                	xor    eax,eax
c0021d7f:	83 c4 1c             	add    esp,0x1c
c0021d82:	c3                   	ret    
c0021d83:	90                   	nop

c0021d84 <PCI::close(int, int, void*)>:
c0021d84:	31 c0                	xor    eax,eax
c0021d86:	c3                   	ret    
c0021d87:	90                   	nop

c0021d88 <PCI::PCI()>:
c0021d88:	83 ec 0c             	sub    esp,0xc
c0021d8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d8f:	83 ec 08             	sub    esp,0x8
c0021d92:	68 84 bd 02 c0       	push   0xc002bd84
c0021d97:	50                   	push   eax
c0021d98:	e8 f1 17 ff ff       	call   c001358e <Bus::Bus(char const*)>
c0021d9d:	83 c4 10             	add    esp,0x10
c0021da0:	ba f0 bd 02 c0       	mov    edx,0xc002bdf0
c0021da5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021da9:	89 10                	mov    DWORD PTR [eax],edx
c0021dab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021daf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021db5:	0f b6 d0             	movzx  edx,al
c0021db8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021dbc:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0021dc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021dc7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021dcd:	0f b6 d0             	movzx  edx,al
c0021dd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021dd4:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0021dd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ddd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021de3:	8d 50 01             	lea    edx,[eax+0x1]
c0021de6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021dea:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0021df0:	0f b6 d0             	movzx  edx,al
c0021df3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021df7:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0021dfb:	83 c9 c0             	or     ecx,0xffffffc0
c0021dfe:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0021e02:	90                   	nop
c0021e03:	83 c4 0c             	add    esp,0xc
c0021e06:	c3                   	ret    
c0021e07:	90                   	nop

c0021e08 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0021e08:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0021e0c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021e11:	89 ca                	mov    edx,ecx
c0021e13:	c1 e0 10             	shl    eax,0x10
c0021e16:	81 e2 fc 00 00 00    	and    edx,0xfc
c0021e1c:	09 d0                	or     eax,edx
c0021e1e:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0021e23:	c1 e2 08             	shl    edx,0x8
c0021e26:	09 d0                	or     eax,edx
c0021e28:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c0021e2d:	c1 e2 0b             	shl    edx,0xb
c0021e30:	09 d0                	or     eax,edx
c0021e32:	ba f8 0c 00 00       	mov    edx,0xcf8
c0021e37:	0d 00 00 00 80       	or     eax,0x80000000
c0021e3c:	ef                   	out    dx,eax
c0021e3d:	ba fc 0c 00 00       	mov    edx,0xcfc
c0021e42:	ed                   	in     eax,dx
c0021e43:	83 e1 02             	and    ecx,0x2
c0021e46:	0f b6 c9             	movzx  ecx,cl
c0021e49:	c1 e1 03             	shl    ecx,0x3
c0021e4c:	d3 e8                	shr    eax,cl
c0021e4e:	c3                   	ret    
c0021e4f:	90                   	nop

c0021e50 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0021e50:	6a 00                	push   0x0
c0021e52:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021e57:	50                   	push   eax
c0021e58:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021e5d:	50                   	push   eax
c0021e5e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021e63:	50                   	push   eax
c0021e64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021e68:	e8 9b ff ff ff       	call   c0021e08 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021e6d:	83 c4 14             	add    esp,0x14
c0021e70:	c3                   	ret    
c0021e71:	90                   	nop

c0021e72 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0021e72:	6a 0e                	push   0xe
c0021e74:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021e79:	50                   	push   eax
c0021e7a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021e7f:	50                   	push   eax
c0021e80:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021e85:	50                   	push   eax
c0021e86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021e8a:	e8 79 ff ff ff       	call   c0021e08 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021e8f:	83 c4 14             	add    esp,0x14
c0021e92:	0f b6 c0             	movzx  eax,al
c0021e95:	c3                   	ret    

c0021e96 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0021e96:	55                   	push   ebp
c0021e97:	57                   	push   edi
c0021e98:	56                   	push   esi
c0021e99:	53                   	push   ebx
c0021e9a:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c0021e9f:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c0021ea4:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c0021ea9:	6a 0a                	push   0xa
c0021eab:	56                   	push   esi
c0021eac:	55                   	push   ebp
c0021ead:	57                   	push   edi
c0021eae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0021eb2:	e8 51 ff ff ff       	call   c0021e08 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021eb7:	6a 0a                	push   0xa
c0021eb9:	89 c3                	mov    ebx,eax
c0021ebb:	56                   	push   esi
c0021ebc:	0f b6 db             	movzx  ebx,bl
c0021ebf:	55                   	push   ebp
c0021ec0:	57                   	push   edi
c0021ec1:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0021ec5:	e8 3e ff ff ff       	call   c0021e08 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021eca:	83 c4 28             	add    esp,0x28
c0021ecd:	25 00 ff 00 00       	and    eax,0xff00
c0021ed2:	09 d8                	or     eax,ebx
c0021ed4:	5b                   	pop    ebx
c0021ed5:	5e                   	pop    esi
c0021ed6:	5f                   	pop    edi
c0021ed7:	5d                   	pop    ebp
c0021ed8:	c3                   	ret    
c0021ed9:	90                   	nop

c0021eda <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0021eda:	6a 08                	push   0x8
c0021edc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021ee1:	50                   	push   eax
c0021ee2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021ee7:	50                   	push   eax
c0021ee8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021eed:	50                   	push   eax
c0021eee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021ef2:	e8 11 ff ff ff       	call   c0021e08 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021ef7:	83 c4 14             	add    esp,0x14
c0021efa:	0f b6 c4             	movzx  eax,ah
c0021efd:	c3                   	ret    

c0021efe <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0021efe:	6a 08                	push   0x8
c0021f00:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021f05:	50                   	push   eax
c0021f06:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021f0b:	50                   	push   eax
c0021f0c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021f11:	50                   	push   eax
c0021f12:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021f16:	e8 ed fe ff ff       	call   c0021e08 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021f1b:	83 c4 14             	add    esp,0x14
c0021f1e:	c3                   	ret    
c0021f1f:	90                   	nop

c0021f20 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0021f20:	6a 3c                	push   0x3c
c0021f22:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021f27:	50                   	push   eax
c0021f28:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021f2d:	50                   	push   eax
c0021f2e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021f33:	50                   	push   eax
c0021f34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021f38:	e8 cb fe ff ff       	call   c0021e08 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021f3d:	83 c4 14             	add    esp,0x14
c0021f40:	c3                   	ret    
c0021f41:	90                   	nop

c0021f42 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0021f42:	6a 18                	push   0x18
c0021f44:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021f49:	50                   	push   eax
c0021f4a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021f4f:	50                   	push   eax
c0021f50:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021f55:	50                   	push   eax
c0021f56:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021f5a:	e8 a9 fe ff ff       	call   c0021e08 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021f5f:	83 c4 14             	add    esp,0x14
c0021f62:	0f b6 c4             	movzx  eax,ah
c0021f65:	c3                   	ret    

c0021f66 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0021f66:	55                   	push   ebp
c0021f67:	57                   	push   edi
c0021f68:	56                   	push   esi
c0021f69:	53                   	push   ebx
c0021f6a:	50                   	push   eax
c0021f6b:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0021f6f:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c0021f74:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0021f79:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c0021f7e:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0021f85:	8d 43 12             	lea    eax,[ebx+0x12]
c0021f88:	83 c3 10             	add    ebx,0x10
c0021f8b:	0f b6 c0             	movzx  eax,al
c0021f8e:	0f b6 db             	movzx  ebx,bl
c0021f91:	50                   	push   eax
c0021f92:	51                   	push   ecx
c0021f93:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0021f97:	57                   	push   edi
c0021f98:	55                   	push   ebp
c0021f99:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0021f9d:	e8 66 fe ff ff       	call   c0021e08 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021fa2:	53                   	push   ebx
c0021fa3:	89 c6                	mov    esi,eax
c0021fa5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0021fa9:	c1 e6 10             	shl    esi,0x10
c0021fac:	51                   	push   ecx
c0021fad:	57                   	push   edi
c0021fae:	55                   	push   ebp
c0021faf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021fb3:	e8 50 fe ff ff       	call   c0021e08 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021fb8:	83 c4 2c             	add    esp,0x2c
c0021fbb:	0f b7 c0             	movzx  eax,ax
c0021fbe:	5b                   	pop    ebx
c0021fbf:	09 f0                	or     eax,esi
c0021fc1:	5e                   	pop    esi
c0021fc2:	5f                   	pop    edi
c0021fc3:	5d                   	pop    ebp
c0021fc4:	c3                   	ret    
c0021fc5:	90                   	nop

c0021fc6 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0021fc6:	53                   	push   ebx
c0021fc7:	ba f8 0c 00 00       	mov    edx,0xcf8
c0021fcc:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0021fd1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021fd5:	c1 e1 10             	shl    ecx,0x10
c0021fd8:	25 fc 00 00 00       	and    eax,0xfc
c0021fdd:	09 c1                	or     ecx,eax
c0021fdf:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021fe4:	c1 e0 08             	shl    eax,0x8
c0021fe7:	09 c1                	or     ecx,eax
c0021fe9:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0021fee:	c1 e0 0b             	shl    eax,0xb
c0021ff1:	09 c1                	or     ecx,eax
c0021ff3:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0021ff9:	89 c8                	mov    eax,ecx
c0021ffb:	ef                   	out    dx,eax
c0021ffc:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022001:	ed                   	in     eax,dx
c0022002:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0022007:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c002200c:	74 0a                	je     c0022018 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c002200e:	0f b7 d8             	movzx  ebx,ax
c0022011:	89 d0                	mov    eax,edx
c0022013:	c1 e0 10             	shl    eax,0x10
c0022016:	eb 05                	jmp    c002201d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0022018:	66 31 c0             	xor    ax,ax
c002201b:	89 d3                	mov    ebx,edx
c002201d:	09 c3                	or     ebx,eax
c002201f:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022024:	89 c8                	mov    eax,ecx
c0022026:	ef                   	out    dx,eax
c0022027:	ba fc 0c 00 00       	mov    edx,0xcfc
c002202c:	89 d8                	mov    eax,ebx
c002202e:	ef                   	out    dx,eax
c002202f:	5b                   	pop    ebx
c0022030:	c3                   	ret    
c0022031:	90                   	nop

c0022032 <PCI::checkBus(unsigned char)>:
c0022032:	56                   	push   esi
c0022033:	53                   	push   ebx
c0022034:	31 db                	xor    ebx,ebx
c0022036:	51                   	push   ecx
c0022037:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c002203c:	52                   	push   edx
c002203d:	53                   	push   ebx
c002203e:	43                   	inc    ebx
c002203f:	56                   	push   esi
c0022040:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022044:	e8 2b 03 00 00       	call   c0022374 <PCI::checkDevice(unsigned char, unsigned char)>
c0022049:	83 c4 10             	add    esp,0x10
c002204c:	83 fb 20             	cmp    ebx,0x20
c002204f:	75 eb                	jne    c002203c <PCI::checkBus(unsigned char)+0xa>
c0022051:	58                   	pop    eax
c0022052:	5b                   	pop    ebx
c0022053:	5e                   	pop    esi
c0022054:	c3                   	ret    
c0022055:	90                   	nop

c0022056 <PCI::foundDevice(PCIDeviceInfo)>:
c0022056:	55                   	push   ebp
c0022057:	57                   	push   edi
c0022058:	56                   	push   esi
c0022059:	53                   	push   ebx
c002205a:	83 ec 1c             	sub    esp,0x1c
c002205d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022061:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0022067:	0f 84 52 01 00 00    	je     c00221bf <PCI::foundDevice(PCIDeviceInfo)+0x169>
c002206d:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0022071:	66 81 f9 06 04       	cmp    cx,0x406
c0022076:	75 2c                	jne    c00220a4 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0022078:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c002207d:	50                   	push   eax
c002207e:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0022083:	50                   	push   eax
c0022084:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0022089:	50                   	push   eax
c002208a:	56                   	push   esi
c002208b:	e8 b2 fe ff ff       	call   c0021f42 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0022090:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022094:	0f b6 c0             	movzx  eax,al
c0022097:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c002209b:	83 c4 2c             	add    esp,0x2c
c002209e:	5b                   	pop    ebx
c002209f:	5e                   	pop    esi
c00220a0:	5f                   	pop    edi
c00220a1:	5d                   	pop    ebp
c00220a2:	eb 8e                	jmp    c0022032 <PCI::checkBus(unsigned char)>
c00220a4:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00220a8:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00220ae:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00220b2:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00220b6:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c00220ba:	88 d3                	mov    bl,dl
c00220bc:	85 c0                	test   eax,eax
c00220be:	74 33                	je     c00220f3 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c00220c0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00220c3:	85 d2                	test   edx,edx
c00220c5:	74 28                	je     c00220ef <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00220c7:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c00220cd:	31 ef                	xor    edi,ebp
c00220cf:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c00220d5:	75 18                	jne    c00220ef <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00220d7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00220db:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c00220e1:	75 0c                	jne    c00220ef <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00220e3:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c00220e9:	0f 84 d0 00 00 00    	je     c00221bf <PCI::foundDevice(PCIDeviceInfo)+0x169>
c00220ef:	8b 00                	mov    eax,DWORD PTR [eax]
c00220f1:	eb c9                	jmp    c00220bc <PCI::foundDevice(PCIDeviceInfo)+0x66>
c00220f3:	66 81 f9 01 06       	cmp    cx,0x601
c00220f8:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c00220fc:	75 19                	jne    c0022117 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c00220fe:	83 ec 0c             	sub    esp,0xc
c0022101:	68 64 01 00 00       	push   0x164
c0022106:	e8 19 d5 fe ff       	call   c000f624 <malloc>
c002210b:	89 c5                	mov    ebp,eax
c002210d:	89 04 24             	mov    DWORD PTR [esp],eax
c0022110:	e8 95 0f 00 00       	call   c00230aa <SATABus::SATABus()>
c0022115:	eb 1e                	jmp    c0022135 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0022117:	66 81 f9 01 01       	cmp    cx,0x101
c002211c:	75 60                	jne    c002217e <PCI::foundDevice(PCIDeviceInfo)+0x128>
c002211e:	83 ec 0c             	sub    esp,0xc
c0022121:	68 70 02 00 00       	push   0x270
c0022126:	e8 f9 d4 fe ff       	call   c000f624 <malloc>
c002212b:	89 c5                	mov    ebp,eax
c002212d:	89 04 24             	mov    DWORD PTR [esp],eax
c0022130:	e8 03 03 00 00       	call   c0022438 <IDE::IDE()>
c0022135:	58                   	pop    eax
c0022136:	5a                   	pop    edx
c0022137:	55                   	push   ebp
c0022138:	56                   	push   esi
c0022139:	e8 dc 1b ff ff       	call   c0013d1a <Device::addChild(Device*)>
c002213e:	83 ec 1c             	sub    esp,0x1c
c0022141:	b9 09 00 00 00       	mov    ecx,0x9
c0022146:	fc                   	cld    
c0022147:	89 e7                	mov    edi,esp
c0022149:	89 de                	mov    esi,ebx
c002214b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002214d:	55                   	push   ebp
c002214e:	e8 d1 1a ff ff       	call   c0013c24 <Device::preOpenPCI(PCIDeviceInfo)>
c0022153:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022156:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c002215a:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0022162:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c002216a:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0022172:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022175:	83 c4 4c             	add    esp,0x4c
c0022178:	5b                   	pop    ebx
c0022179:	5e                   	pop    esi
c002217a:	5f                   	pop    edi
c002217b:	5d                   	pop    ebp
c002217c:	ff e0                	jmp    eax
c002217e:	83 ec 0c             	sub    esp,0xc
c0022181:	68 58 01 00 00       	push   0x158
c0022186:	e8 99 d4 fe ff       	call   c000f624 <malloc>
c002218b:	89 c5                	mov    ebp,eax
c002218d:	58                   	pop    eax
c002218e:	5a                   	pop    edx
c002218f:	68 8c bd 02 c0       	push   0xc002bd8c
c0022194:	55                   	push   ebp
c0022195:	e8 76 1e ff ff       	call   c0014010 <DriverlessDevice::DriverlessDevice(char const*)>
c002219a:	59                   	pop    ecx
c002219b:	5f                   	pop    edi
c002219c:	55                   	push   ebp
c002219d:	56                   	push   esi
c002219e:	e8 77 1b ff ff       	call   c0013d1a <Device::addChild(Device*)>
c00221a3:	b9 09 00 00 00       	mov    ecx,0x9
c00221a8:	fc                   	cld    
c00221a9:	89 df                	mov    edi,ebx
c00221ab:	89 de                	mov    esi,ebx
c00221ad:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00221af:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c00221b3:	83 c4 2c             	add    esp,0x2c
c00221b6:	5b                   	pop    ebx
c00221b7:	5e                   	pop    esi
c00221b8:	5f                   	pop    edi
c00221b9:	5d                   	pop    ebp
c00221ba:	e9 65 1a ff ff       	jmp    c0013c24 <Device::preOpenPCI(PCIDeviceInfo)>
c00221bf:	83 c4 1c             	add    esp,0x1c
c00221c2:	5b                   	pop    ebx
c00221c3:	5e                   	pop    esi
c00221c4:	5f                   	pop    edi
c00221c5:	5d                   	pop    ebp
c00221c6:	c3                   	ret    
c00221c7:	90                   	nop

c00221c8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c00221c8:	55                   	push   ebp
c00221c9:	57                   	push   edi
c00221ca:	56                   	push   esi
c00221cb:	53                   	push   ebx
c00221cc:	83 ec 5c             	sub    esp,0x5c
c00221cf:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00221d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00221d7:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00221db:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c00221e0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00221e4:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c00221e8:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c00221ed:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00221f1:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c00221f6:	6a 0c                	push   0xc
c00221f8:	55                   	push   ebp
c00221f9:	53                   	push   ebx
c00221fa:	57                   	push   edi
c00221fb:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0022202:	e8 01 fc ff ff       	call   c0021e08 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022207:	55                   	push   ebp
c0022208:	53                   	push   ebx
c0022209:	57                   	push   edi
c002220a:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022211:	e8 80 fc ff ff       	call   c0021e96 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0022216:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c002221b:	83 c4 24             	add    esp,0x24
c002221e:	55                   	push   ebp
c002221f:	53                   	push   ebx
c0022220:	57                   	push   edi
c0022221:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022225:	e8 f6 fc ff ff       	call   c0021f20 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c002222a:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c002222e:	6a 3c                	push   0x3c
c0022230:	55                   	push   ebp
c0022231:	53                   	push   ebx
c0022232:	57                   	push   edi
c0022233:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c002223a:	e8 c9 fb ff ff       	call   c0021e08 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002223f:	0f b6 c4             	movzx  eax,ah
c0022242:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022246:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c002224a:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c002224e:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c0022253:	83 c4 24             	add    esp,0x24
c0022256:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c002225c:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0022263:	74 6c                	je     c00222d1 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022265:	31 f6                	xor    esi,esi
c0022267:	8b 15 88 d8 02 c0    	mov    edx,DWORD PTR ds:0xc002d888
c002226d:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022273:	39 b2 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],esi
c0022279:	7e 56                	jle    c00222d1 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c002227b:	8d 14 f2             	lea    edx,[edx+esi*8]
c002227e:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0022285:	39 cb                	cmp    ebx,ecx
c0022287:	75 45                	jne    c00222ce <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022289:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0022290:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c0022294:	75 38                	jne    c00222ce <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022296:	83 ec 0c             	sub    esp,0xc
c0022299:	68 a6 bd 02 c0       	push   0xc002bda6
c002229e:	e8 50 06 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00222a3:	8b 15 88 d8 02 c0    	mov    edx,DWORD PTR ds:0xc002d888
c00222a9:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c00222af:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c00222b7:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c00222bb:	52                   	push   edx
c00222bc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00222c0:	53                   	push   ebx
c00222c1:	68 cb bd 02 c0       	push   0xc002bdcb
c00222c6:	e8 28 06 ff ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00222cb:	83 c4 20             	add    esp,0x20
c00222ce:	46                   	inc    esi
c00222cf:	eb 96                	jmp    c0022267 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c00222d1:	31 d2                	xor    edx,edx
c00222d3:	83 ec 0c             	sub    esp,0xc
c00222d6:	55                   	push   ebp
c00222d7:	53                   	push   ebx
c00222d8:	57                   	push   edi
c00222d9:	52                   	push   edx
c00222da:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00222de:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c00222e5:	e8 7c fc ff ff       	call   c0021f66 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c00222ea:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c00222ee:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00222f2:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c00222f6:	42                   	inc    edx
c00222f7:	83 c4 20             	add    esp,0x20
c00222fa:	83 fa 06             	cmp    edx,0x6
c00222fd:	75 d4                	jne    c00222d3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c00222ff:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0022303:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0022307:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c002230b:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c002230f:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0022313:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0022317:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c002231c:	86 e0                	xchg   al,ah
c002231e:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0022323:	55                   	push   ebp
c0022324:	53                   	push   ebx
c0022325:	57                   	push   edi
c0022326:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c002232a:	e8 ab fb ff ff       	call   c0021eda <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c002232f:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0022333:	55                   	push   ebp
c0022334:	53                   	push   ebx
c0022335:	57                   	push   edi
c0022336:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c002233d:	e8 0e fb ff ff       	call   c0021e50 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022342:	83 ec 0c             	sub    esp,0xc
c0022345:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c002234a:	b9 09 00 00 00       	mov    ecx,0x9
c002234f:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c0022353:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0022357:	fc                   	cld    
c0022358:	89 e7                	mov    edi,esp
c002235a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002235c:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022363:	e8 ee fc ff ff       	call   c0022056 <PCI::foundDevice(PCIDeviceInfo)>
c0022368:	81 c4 8c 00 00 00    	add    esp,0x8c
c002236e:	5b                   	pop    ebx
c002236f:	5e                   	pop    esi
c0022370:	5f                   	pop    edi
c0022371:	5d                   	pop    ebp
c0022372:	c3                   	ret    
c0022373:	90                   	nop

c0022374 <PCI::checkDevice(unsigned char, unsigned char)>:
c0022374:	55                   	push   ebp
c0022375:	57                   	push   edi
c0022376:	56                   	push   esi
c0022377:	53                   	push   ebx
c0022378:	83 ec 0c             	sub    esp,0xc
c002237b:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c002237f:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0022384:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022389:	6a 00                	push   0x0
c002238b:	56                   	push   esi
c002238c:	57                   	push   edi
c002238d:	55                   	push   ebp
c002238e:	e8 bd fa ff ff       	call   c0021e50 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022393:	6a 00                	push   0x0
c0022395:	56                   	push   esi
c0022396:	57                   	push   edi
c0022397:	55                   	push   ebp
c0022398:	e8 2b fe ff ff       	call   c00221c8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c002239d:	83 c4 20             	add    esp,0x20
c00223a0:	6a 00                	push   0x0
c00223a2:	56                   	push   esi
c00223a3:	57                   	push   edi
c00223a4:	55                   	push   ebp
c00223a5:	e8 c8 fa ff ff       	call   c0021e72 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c00223aa:	83 c4 10             	add    esp,0x10
c00223ad:	84 c0                	test   al,al
c00223af:	79 27                	jns    c00223d8 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c00223b1:	bb 01 00 00 00       	mov    ebx,0x1
c00223b6:	53                   	push   ebx
c00223b7:	56                   	push   esi
c00223b8:	57                   	push   edi
c00223b9:	55                   	push   ebp
c00223ba:	e8 91 fa ff ff       	call   c0021e50 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00223bf:	83 c4 10             	add    esp,0x10
c00223c2:	66 40                	inc    ax
c00223c4:	74 0c                	je     c00223d2 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c00223c6:	53                   	push   ebx
c00223c7:	56                   	push   esi
c00223c8:	57                   	push   edi
c00223c9:	55                   	push   ebp
c00223ca:	e8 f9 fd ff ff       	call   c00221c8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c00223cf:	83 c4 10             	add    esp,0x10
c00223d2:	43                   	inc    ebx
c00223d3:	83 fb 08             	cmp    ebx,0x8
c00223d6:	75 de                	jne    c00223b6 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c00223d8:	83 c4 0c             	add    esp,0xc
c00223db:	5b                   	pop    ebx
c00223dc:	5e                   	pop    esi
c00223dd:	5f                   	pop    edi
c00223de:	5d                   	pop    ebp
c00223df:	c3                   	ret    

c00223e0 <PCI::detect()>:
c00223e0:	56                   	push   esi
c00223e1:	53                   	push   ebx
c00223e2:	53                   	push   ebx
c00223e3:	31 db                	xor    ebx,ebx
c00223e5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00223e9:	6a 00                	push   0x0
c00223eb:	6a 00                	push   0x0
c00223ed:	6a 00                	push   0x0
c00223ef:	56                   	push   esi
c00223f0:	e8 7d fa ff ff       	call   c0021e72 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c00223f5:	83 c4 10             	add    esp,0x10
c00223f8:	a8 80                	test   al,0x80
c00223fa:	75 21                	jne    c002241d <PCI::detect()+0x3d>
c00223fc:	51                   	push   ecx
c00223fd:	51                   	push   ecx
c00223fe:	6a 00                	push   0x0
c0022400:	56                   	push   esi
c0022401:	e8 2c fc ff ff       	call   c0022032 <PCI::checkBus(unsigned char)>
c0022406:	83 c4 10             	add    esp,0x10
c0022409:	eb 24                	jmp    c002242f <PCI::detect()+0x4f>
c002240b:	52                   	push   edx
c002240c:	52                   	push   edx
c002240d:	53                   	push   ebx
c002240e:	43                   	inc    ebx
c002240f:	56                   	push   esi
c0022410:	e8 1d fc ff ff       	call   c0022032 <PCI::checkBus(unsigned char)>
c0022415:	83 c4 10             	add    esp,0x10
c0022418:	83 fb 08             	cmp    ebx,0x8
c002241b:	74 12                	je     c002242f <PCI::detect()+0x4f>
c002241d:	53                   	push   ebx
c002241e:	6a 00                	push   0x0
c0022420:	6a 00                	push   0x0
c0022422:	56                   	push   esi
c0022423:	e8 28 fa ff ff       	call   c0021e50 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022428:	83 c4 10             	add    esp,0x10
c002242b:	66 40                	inc    ax
c002242d:	74 dc                	je     c002240b <PCI::detect()+0x2b>
c002242f:	58                   	pop    eax
c0022430:	5b                   	pop    ebx
c0022431:	5e                   	pop    esi
c0022432:	c3                   	ret    
c0022433:	90                   	nop

c0022434 <IDE::close(int, int, void*)>:
c0022434:	83 c8 ff             	or     eax,0xffffffff
c0022437:	c3                   	ret    

c0022438 <IDE::IDE()>:
c0022438:	83 ec 0c             	sub    esp,0xc
c002243b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002243f:	83 ec 08             	sub    esp,0x8
c0022442:	68 14 be 02 c0       	push   0xc002be14
c0022447:	50                   	push   eax
c0022448:	e8 59 1c ff ff       	call   c00140a6 <HardDiskController::HardDiskController(char const*)>
c002244d:	83 c4 10             	add    esp,0x10
c0022450:	ba 54 c0 02 c0       	mov    edx,0xc002c054
c0022455:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022459:	89 10                	mov    DWORD PTR [eax],edx
c002245b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002245f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0022466:	90                   	nop
c0022467:	83 c4 0c             	add    esp,0xc
c002246a:	c3                   	ret    
c002246b:	90                   	nop

c002246c <IDE::prepareInterrupt(unsigned char)>:
c002246c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022471:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022475:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c002247d:	c3                   	ret    

c002247e <selectDrive(unsigned char, unsigned char)>:
c002247e:	c3                   	ret    
c002247f:	90                   	nop

c0022480 <IDE::getBase(unsigned char)>:
c0022480:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0022485:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022489:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0022491:	c3                   	ret    

c0022492 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0022492:	55                   	push   ebp
c0022493:	57                   	push   edi
c0022494:	56                   	push   esi
c0022495:	53                   	push   ebx
c0022496:	83 ec 1c             	sub    esp,0x1c
c0022499:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002249d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00224a1:	8d 4b f8             	lea    ecx,[ebx-0x8]
c00224a4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00224a8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00224ac:	80 f9 03             	cmp    cl,0x3
c00224af:	77 51                	ja     c0022502 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c00224b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00224b5:	0f b6 f2             	movzx  esi,dl
c00224b8:	0f b6 db             	movzx  ebx,bl
c00224bb:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00224be:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c00224c2:	83 ca 80             	or     edx,0xffffff80
c00224c5:	0f b6 d2             	movzx  edx,dl
c00224c8:	52                   	push   edx
c00224c9:	6a 0c                	push   0xc
c00224cb:	56                   	push   esi
c00224cc:	57                   	push   edi
c00224cd:	e8 c0 ff ff ff       	call   c0022492 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00224d2:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c00224d7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00224db:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c00224df:	ee                   	out    dx,al
c00224e0:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c00224e5:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c00224e9:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00224ed:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00224f1:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00224f9:	83 c4 2c             	add    esp,0x2c
c00224fc:	5b                   	pop    ebx
c00224fd:	5e                   	pop    esi
c00224fe:	5f                   	pop    edi
c00224ff:	5d                   	pop    ebp
c0022500:	eb 90                	jmp    c0022492 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022502:	80 fb 07             	cmp    bl,0x7
c0022505:	77 12                	ja     c0022519 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0022507:	0f b6 d2             	movzx  edx,dl
c002250a:	0f b6 db             	movzx  ebx,bl
c002250d:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0022515:	89 da                	mov    edx,ebx
c0022517:	eb 2f                	jmp    c0022548 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0022519:	80 fb 0d             	cmp    bl,0xd
c002251c:	77 13                	ja     c0022531 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c002251e:	0f b6 d2             	movzx  edx,dl
c0022521:	0f b6 db             	movzx  ebx,bl
c0022524:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c002252b:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c002252f:	eb 17                	jmp    c0022548 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0022531:	80 fb 15             	cmp    bl,0x15
c0022534:	77 13                	ja     c0022549 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0022536:	0f b6 d2             	movzx  edx,dl
c0022539:	0f b6 db             	movzx  ebx,bl
c002253c:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0022544:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0022548:	ee                   	out    dx,al
c0022549:	83 c4 1c             	add    esp,0x1c
c002254c:	5b                   	pop    ebx
c002254d:	5e                   	pop    esi
c002254e:	5f                   	pop    edi
c002254f:	5d                   	pop    ebp
c0022550:	c3                   	ret    
c0022551:	90                   	nop

c0022552 <IDE::read(unsigned char, unsigned char)>:
c0022552:	55                   	push   ebp
c0022553:	57                   	push   edi
c0022554:	56                   	push   esi
c0022555:	53                   	push   ebx
c0022556:	83 ec 1c             	sub    esp,0x1c
c0022559:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002255d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022561:	8d 43 f8             	lea    eax,[ebx-0x8]
c0022564:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022568:	3c 03                	cmp    al,0x3
c002256a:	77 43                	ja     c00225af <IDE::read(unsigned char, unsigned char)+0x5d>
c002256c:	0f b6 f2             	movzx  esi,dl
c002256f:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0022572:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0022576:	83 c8 80             	or     eax,0xffffff80
c0022579:	0f b6 c0             	movzx  eax,al
c002257c:	50                   	push   eax
c002257d:	6a 0c                	push   0xc
c002257f:	56                   	push   esi
c0022580:	57                   	push   edi
c0022581:	e8 0c ff ff ff       	call   c0022492 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022586:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c002258b:	0f b6 c3             	movzx  eax,bl
c002258e:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0022592:	ec                   	in     al,dx
c0022593:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0022597:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c002259c:	52                   	push   edx
c002259d:	6a 0c                	push   0xc
c002259f:	56                   	push   esi
c00225a0:	57                   	push   edi
c00225a1:	e8 ec fe ff ff       	call   c0022492 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00225a6:	83 c4 20             	add    esp,0x20
c00225a9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00225ad:	eb 49                	jmp    c00225f8 <IDE::read(unsigned char, unsigned char)+0xa6>
c00225af:	80 fb 07             	cmp    bl,0x7
c00225b2:	77 12                	ja     c00225c6 <IDE::read(unsigned char, unsigned char)+0x74>
c00225b4:	0f b6 d2             	movzx  edx,dl
c00225b7:	0f b6 c3             	movzx  eax,bl
c00225ba:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c00225c2:	89 c2                	mov    edx,eax
c00225c4:	eb 31                	jmp    c00225f7 <IDE::read(unsigned char, unsigned char)+0xa5>
c00225c6:	80 fb 0d             	cmp    bl,0xd
c00225c9:	77 13                	ja     c00225de <IDE::read(unsigned char, unsigned char)+0x8c>
c00225cb:	0f b6 d2             	movzx  edx,dl
c00225ce:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c00225d5:	0f b6 d3             	movzx  edx,bl
c00225d8:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c00225dc:	eb 19                	jmp    c00225f7 <IDE::read(unsigned char, unsigned char)+0xa5>
c00225de:	31 c0                	xor    eax,eax
c00225e0:	80 fb 15             	cmp    bl,0x15
c00225e3:	77 13                	ja     c00225f8 <IDE::read(unsigned char, unsigned char)+0xa6>
c00225e5:	0f b6 d2             	movzx  edx,dl
c00225e8:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c00225f0:	0f b6 d3             	movzx  edx,bl
c00225f3:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c00225f7:	ec                   	in     al,dx
c00225f8:	83 c4 1c             	add    esp,0x1c
c00225fb:	5b                   	pop    ebx
c00225fc:	5e                   	pop    esi
c00225fd:	5f                   	pop    edi
c00225fe:	5d                   	pop    ebp
c00225ff:	c3                   	ret    

c0022600 <IDE::waitInterrupt(unsigned char)>:
c0022600:	55                   	push   ebp
c0022601:	57                   	push   edi
c0022602:	56                   	push   esi
c0022603:	53                   	push   ebx
c0022604:	31 db                	xor    ebx,ebx
c0022606:	83 ec 0c             	sub    esp,0xc
c0022609:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c002260d:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0022612:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c002261a:	89 e8                	mov    eax,ebp
c002261c:	84 c0                	test   al,al
c002261e:	75 34                	jne    c0022654 <IDE::waitInterrupt(unsigned char)+0x54>
c0022620:	52                   	push   edx
c0022621:	6a 0c                	push   0xc
c0022623:	56                   	push   esi
c0022624:	57                   	push   edi
c0022625:	e8 28 ff ff ff       	call   c0022552 <IDE::read(unsigned char, unsigned char)>
c002262a:	83 c4 10             	add    esp,0x10
c002262d:	a8 01                	test   al,0x1
c002262f:	75 2b                	jne    c002265c <IDE::waitInterrupt(unsigned char)+0x5c>
c0022631:	f6 c3 04             	test   bl,0x4
c0022634:	75 16                	jne    c002264c <IDE::waitInterrupt(unsigned char)+0x4c>
c0022636:	83 fb 32             	cmp    ebx,0x32
c0022639:	7e 11                	jle    c002264c <IDE::waitInterrupt(unsigned char)+0x4c>
c002263b:	50                   	push   eax
c002263c:	50                   	push   eax
c002263d:	6a 00                	push   0x0
c002263f:	68 80 96 98 00       	push   0x989680
c0022644:	e8 8b b1 ff ff       	call   c001d7d4 <nanoSleep(unsigned long long)>
c0022649:	83 c4 10             	add    esp,0x10
c002264c:	83 fb 3c             	cmp    ebx,0x3c
c002264f:	74 0b                	je     c002265c <IDE::waitInterrupt(unsigned char)+0x5c>
c0022651:	43                   	inc    ebx
c0022652:	eb be                	jmp    c0022612 <IDE::waitInterrupt(unsigned char)+0x12>
c0022654:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c002265c:	83 c4 0c             	add    esp,0xc
c002265f:	89 e8                	mov    eax,ebp
c0022661:	5b                   	pop    ebx
c0022662:	5e                   	pop    esi
c0022663:	5f                   	pop    edi
c0022664:	5d                   	pop    ebp
c0022665:	c3                   	ret    

c0022666 <ideChannel0IRQHandler(regs*, void*)>:
c0022666:	83 ec 10             	sub    esp,0x10
c0022669:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002266d:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0022674:	6a 07                	push   0x7
c0022676:	6a 00                	push   0x0
c0022678:	50                   	push   eax
c0022679:	e8 d4 fe ff ff       	call   c0022552 <IDE::read(unsigned char, unsigned char)>
c002267e:	83 c4 1c             	add    esp,0x1c
c0022681:	c3                   	ret    

c0022682 <ideChannel1IRQHandler(regs*, void*)>:
c0022682:	83 ec 10             	sub    esp,0x10
c0022685:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022689:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0022690:	6a 07                	push   0x7
c0022692:	6a 01                	push   0x1
c0022694:	50                   	push   eax
c0022695:	e8 b8 fe ff ff       	call   c0022552 <IDE::read(unsigned char, unsigned char)>
c002269a:	83 c4 1c             	add    esp,0x1c
c002269d:	c3                   	ret    

c002269e <IDE::enableIRQs(unsigned char, bool)>:
c002269e:	57                   	push   edi
c002269f:	56                   	push   esi
c00226a0:	be 04 00 00 00       	mov    esi,0x4
c00226a5:	53                   	push   ebx
c00226a6:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00226ab:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00226af:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c00226b4:	0f 94 c0             	sete   al
c00226b7:	d1 e0                	shl    eax,1
c00226b9:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c00226c0:	0f b6 c0             	movzx  eax,al
c00226c3:	50                   	push   eax
c00226c4:	6a 0c                	push   0xc
c00226c6:	57                   	push   edi
c00226c7:	53                   	push   ebx
c00226c8:	e8 c5 fd ff ff       	call   c0022492 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00226cd:	83 c4 10             	add    esp,0x10
c00226d0:	50                   	push   eax
c00226d1:	6a 0c                	push   0xc
c00226d3:	57                   	push   edi
c00226d4:	53                   	push   ebx
c00226d5:	e8 78 fe ff ff       	call   c0022552 <IDE::read(unsigned char, unsigned char)>
c00226da:	83 c4 10             	add    esp,0x10
c00226dd:	4e                   	dec    esi
c00226de:	75 f0                	jne    c00226d0 <IDE::enableIRQs(unsigned char, bool)+0x32>
c00226e0:	5b                   	pop    ebx
c00226e1:	5e                   	pop    esi
c00226e2:	5f                   	pop    edi
c00226e3:	c3                   	ret    

c00226e4 <IDE::open(int, int, void*)>:
c00226e4:	55                   	push   ebp
c00226e5:	57                   	push   edi
c00226e6:	56                   	push   esi
c00226e7:	53                   	push   ebx
c00226e8:	83 ec 1c             	sub    esp,0x1c
c00226eb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00226ef:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c00226f8:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0022701:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0022708:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c002270f:	0f 85 b0 02 00 00    	jne    c00229c5 <IDE::open(int, int, void*)+0x2e1>
c0022715:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c002271b:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c002271f:	83 e0 7f             	and    eax,0x7f
c0022722:	3c 05                	cmp    al,0x5
c0022724:	74 04                	je     c002272a <IDE::open(int, int, void*)+0x46>
c0022726:	3c 0f                	cmp    al,0xf
c0022728:	75 32                	jne    c002275c <IDE::open(int, int, void*)+0x78>
c002272a:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0022730:	83 e0 fc             	and    eax,0xfffffffc
c0022733:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c002273a:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0022740:	83 e0 fc             	and    eax,0xfffffffc
c0022743:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c002274a:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0022750:	83 e0 fc             	and    eax,0xfffffffc
c0022753:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002275a:	eb 14                	jmp    c0022770 <IDE::open(int, int, void*)+0x8c>
c002275c:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0022766:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0022770:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0022777:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c002277e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0022782:	89 c6                	mov    esi,eax
c0022784:	bf f8 0c 00 00       	mov    edi,0xcf8
c0022789:	c1 e6 10             	shl    esi,0x10
c002278c:	89 e8                	mov    eax,ebp
c002278e:	89 fa                	mov    edx,edi
c0022790:	c1 e0 0b             	shl    eax,0xb
c0022793:	09 f0                	or     eax,esi
c0022795:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c002279c:	c1 e6 08             	shl    esi,0x8
c002279f:	09 c6                	or     esi,eax
c00227a1:	89 f0                	mov    eax,esi
c00227a3:	0d 08 00 00 80       	or     eax,0x80000008
c00227a8:	ef                   	out    dx,eax
c00227a9:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c00227ae:	89 ca                	mov    edx,ecx
c00227b0:	ed                   	in     eax,dx
c00227b1:	c1 e8 10             	shr    eax,0x10
c00227b4:	3d ff ff 00 00       	cmp    eax,0xffff
c00227b9:	0f 84 f5 00 00 00    	je     c00228b4 <IDE::open(int, int, void*)+0x1d0>
c00227bf:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c00227c5:	89 fa                	mov    edx,edi
c00227c7:	89 f0                	mov    eax,esi
c00227c9:	ef                   	out    dx,eax
c00227ca:	b0 fe                	mov    al,0xfe
c00227cc:	89 ca                	mov    edx,ecx
c00227ce:	ee                   	out    dx,al
c00227cf:	89 f0                	mov    eax,esi
c00227d1:	89 fa                	mov    edx,edi
c00227d3:	ef                   	out    dx,eax
c00227d4:	89 ca                	mov    edx,ecx
c00227d6:	ed                   	in     eax,dx
c00227d7:	3c fe                	cmp    al,0xfe
c00227d9:	0f 85 a9 00 00 00    	jne    c0022888 <IDE::open(int, int, void*)+0x1a4>
c00227df:	8b 15 88 d8 02 c0    	mov    edx,DWORD PTR ds:0xc002d888
c00227e5:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c00227ec:	74 33                	je     c0022821 <IDE::open(int, int, void*)+0x13d>
c00227ee:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c00227f4:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c00227f8:	40                   	inc    eax
c00227f9:	83 ec 0c             	sub    esp,0xc
c00227fc:	0f b6 c0             	movzx  eax,al
c00227ff:	50                   	push   eax
c0022800:	55                   	push   ebp
c0022801:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0022805:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c002280b:	51                   	push   ecx
c002280c:	e8 ff 51 ff ff       	call   c0017a10 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0022811:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0022816:	83 c4 1c             	add    esp,0x1c
c0022819:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002281f:	eb 0a                	jmp    c002282b <IDE::open(int, int, void*)+0x147>
c0022821:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c002282b:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0022832:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0022839:	c1 e1 10             	shl    ecx,0x10
c002283c:	c1 e0 08             	shl    eax,0x8
c002283f:	bf f8 0c 00 00       	mov    edi,0xcf8
c0022844:	09 c1                	or     ecx,eax
c0022846:	89 fa                	mov    edx,edi
c0022848:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c002284f:	c1 e0 0b             	shl    eax,0xb
c0022852:	09 c1                	or     ecx,eax
c0022854:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c002285a:	89 c8                	mov    eax,ecx
c002285c:	ef                   	out    dx,eax
c002285d:	be fc 0c 00 00       	mov    esi,0xcfc
c0022862:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0022868:	89 f2                	mov    edx,esi
c002286a:	ee                   	out    dx,al
c002286b:	89 c8                	mov    eax,ecx
c002286d:	89 fa                	mov    edx,edi
c002286f:	ef                   	out    dx,eax
c0022870:	89 f2                	mov    edx,esi
c0022872:	ed                   	in     eax,dx
c0022873:	0f b6 c0             	movzx  eax,al
c0022876:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c002287c:	74 46                	je     c00228c4 <IDE::open(int, int, void*)+0x1e0>
c002287e:	83 ec 0c             	sub    esp,0xc
c0022881:	68 2c be 02 c0       	push   0xc002be2c
c0022886:	eb 34                	jmp    c00228bc <IDE::open(int, int, void*)+0x1d8>
c0022888:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0022891:	75 17                	jne    c00228aa <IDE::open(int, int, void*)+0x1c6>
c0022893:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0022898:	74 07                	je     c00228a1 <IDE::open(int, int, void*)+0x1bd>
c002289a:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c002289f:	75 09                	jne    c00228aa <IDE::open(int, int, void*)+0x1c6>
c00228a1:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00228a8:	eb 1a                	jmp    c00228c4 <IDE::open(int, int, void*)+0x1e0>
c00228aa:	83 ec 0c             	sub    esp,0xc
c00228ad:	68 34 be 02 c0       	push   0xc002be34
c00228b2:	eb 08                	jmp    c00228bc <IDE::open(int, int, void*)+0x1d8>
c00228b4:	83 ec 0c             	sub    esp,0xc
c00228b7:	68 65 be 02 c0       	push   0xc002be65
c00228bc:	e8 8c 73 ff ff       	call   c0019c4d <Krnl::panic(char const*)>
c00228c1:	83 c4 10             	add    esp,0x10
c00228c4:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c00228cb:	79 1a                	jns    c00228e7 <IDE::open(int, int, void*)+0x203>
c00228cd:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c00228d3:	83 e0 fc             	and    eax,0xfffffffc
c00228d6:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c00228dd:	83 c0 08             	add    eax,0x8
c00228e0:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c00228e7:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00228ed:	89 c2                	mov    edx,eax
c00228ef:	83 e2 0f             	and    edx,0xf
c00228f2:	66 83 fa 08          	cmp    dx,0x8
c00228f6:	75 0a                	jne    c0022902 <IDE::open(int, int, void*)+0x21e>
c00228f8:	83 e8 02             	sub    eax,0x2
c00228fb:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0022902:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0022908:	89 c2                	mov    edx,eax
c002290a:	83 e2 0f             	and    edx,0xf
c002290d:	66 83 fa 08          	cmp    dx,0x8
c0022911:	75 0a                	jne    c002291d <IDE::open(int, int, void*)+0x239>
c0022913:	83 e8 02             	sub    eax,0x2
c0022916:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c002291d:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0022924:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c002292b:	89 d0                	mov    eax,edx
c002292d:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0022930:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0022934:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0022938:	8d 4a 01             	lea    ecx,[edx+0x1]
c002293b:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0022940:	0f b6 c9             	movzx  ecx,cl
c0022943:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c002294a:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002294d:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0022951:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0022955:	8d 50 02             	lea    edx,[eax+0x2]
c0022958:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c002295d:	0f b6 d2             	movzx  edx,dl
c0022960:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0022966:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0022969:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002296d:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0022971:	8d 48 03             	lea    ecx,[eax+0x3]
c0022974:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0022979:	0f b6 c9             	movzx  ecx,cl
c002297c:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0022982:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0022985:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0022989:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c002298d:	8d 50 04             	lea    edx,[eax+0x4]
c0022990:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0022996:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c002299b:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c00229a2:	66 85 f6             	test   si,si
c00229a5:	74 3e                	je     c00229e5 <IDE::open(int, int, void*)+0x301>
c00229a7:	0f b6 d2             	movzx  edx,dl
c00229aa:	83 c0 05             	add    eax,0x5
c00229ad:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00229b0:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00229b4:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c00229b8:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00229be:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00229c3:	eb 20                	jmp    c00229e5 <IDE::open(int, int, void*)+0x301>
c00229c5:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00229cf:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00229d9:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00229e0:	e9 02 ff ff ff       	jmp    c00228e7 <IDE::open(int, int, void*)+0x203>
c00229e5:	52                   	push   edx
c00229e6:	52                   	push   edx
c00229e7:	6a 00                	push   0x0
c00229e9:	53                   	push   ebx
c00229ea:	e8 7d fa ff ff       	call   c002246c <IDE::prepareInterrupt(unsigned char)>
c00229ef:	59                   	pop    ecx
c00229f0:	5e                   	pop    esi
c00229f1:	6a 01                	push   0x1
c00229f3:	53                   	push   ebx
c00229f4:	e8 73 fa ff ff       	call   c002246c <IDE::prepareInterrupt(unsigned char)>
c00229f9:	83 c4 0c             	add    esp,0xc
c00229fc:	6a 00                	push   0x0
c00229fe:	6a 00                	push   0x0
c0022a00:	53                   	push   ebx
c0022a01:	e8 98 fc ff ff       	call   c002269e <IDE::enableIRQs(unsigned char, bool)>
c0022a06:	83 c4 0c             	add    esp,0xc
c0022a09:	6a 00                	push   0x0
c0022a0b:	6a 01                	push   0x1
c0022a0d:	53                   	push   ebx
c0022a0e:	e8 8b fc ff ff       	call   c002269e <IDE::enableIRQs(unsigned char, bool)>
c0022a13:	83 c4 10             	add    esp,0x10
c0022a16:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0022a1d:	74 40                	je     c0022a5f <IDE::open(int, int, void*)+0x37b>
c0022a1f:	83 ec 0c             	sub    esp,0xc
c0022a22:	68 8f be 02 c0       	push   0xc002be8f
c0022a27:	e8 c7 fe fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0022a2c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0022a2f:	6a 01                	push   0x1
c0022a31:	68 66 26 02 c0       	push   0xc0022666
c0022a36:	6a 0e                	push   0xe
c0022a38:	53                   	push   ebx
c0022a39:	e8 60 12 ff ff       	call   c0013c9e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022a3e:	83 c4 14             	add    esp,0x14
c0022a41:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0022a47:	53                   	push   ebx
c0022a48:	6a 01                	push   0x1
c0022a4a:	68 82 26 02 c0       	push   0xc0022682
c0022a4f:	6a 0f                	push   0xf
c0022a51:	53                   	push   ebx
c0022a52:	e8 47 12 ff ff       	call   c0013c9e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022a57:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0022a5d:	eb 4a                	jmp    c0022aa9 <IDE::open(int, int, void*)+0x3c5>
c0022a5f:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0022a69:	50                   	push   eax
c0022a6a:	6a 0f                	push   0xf
c0022a6c:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0022a72:	68 ab be 02 c0       	push   0xc002beab
c0022a77:	e8 77 fe fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0022a7c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0022a7f:	6a 00                	push   0x0
c0022a81:	68 66 26 02 c0       	push   0xc0022666
c0022a86:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0022a8c:	53                   	push   ebx
c0022a8d:	e8 0c 12 ff ff       	call   c0013c9e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022a92:	83 c4 14             	add    esp,0x14
c0022a95:	53                   	push   ebx
c0022a96:	6a 00                	push   0x0
c0022a98:	68 82 26 02 c0       	push   0xc0022682
c0022a9d:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0022aa3:	53                   	push   ebx
c0022aa4:	e8 f5 11 ff ff       	call   c0013c9e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022aa9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022aab:	83 c4 20             	add    esp,0x20
c0022aae:	83 ec 0c             	sub    esp,0xc
c0022ab1:	53                   	push   ebx
c0022ab2:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0022ab5:	83 c4 0c             	add    esp,0xc
c0022ab8:	6a 07                	push   0x7
c0022aba:	6a 00                	push   0x0
c0022abc:	53                   	push   ebx
c0022abd:	e8 90 fa ff ff       	call   c0022552 <IDE::read(unsigned char, unsigned char)>
c0022ac2:	83 c4 0c             	add    esp,0xc
c0022ac5:	6a 07                	push   0x7
c0022ac7:	6a 01                	push   0x1
c0022ac9:	53                   	push   ebx
c0022aca:	e8 83 fa ff ff       	call   c0022552 <IDE::read(unsigned char, unsigned char)>
c0022acf:	83 c4 0c             	add    esp,0xc
c0022ad2:	6a 01                	push   0x1
c0022ad4:	6a 00                	push   0x0
c0022ad6:	53                   	push   ebx
c0022ad7:	e8 c2 fb ff ff       	call   c002269e <IDE::enableIRQs(unsigned char, bool)>
c0022adc:	83 c4 0c             	add    esp,0xc
c0022adf:	6a 01                	push   0x1
c0022ae1:	6a 01                	push   0x1
c0022ae3:	53                   	push   ebx
c0022ae4:	e8 b5 fb ff ff       	call   c002269e <IDE::enableIRQs(unsigned char, bool)>
c0022ae9:	83 c4 2c             	add    esp,0x2c
c0022aec:	31 c0                	xor    eax,eax
c0022aee:	5b                   	pop    ebx
c0022aef:	5e                   	pop    esi
c0022af0:	5f                   	pop    edi
c0022af1:	5d                   	pop    ebp
c0022af2:	c3                   	ret    
c0022af3:	90                   	nop

c0022af4 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0022af4:	55                   	push   ebp
c0022af5:	57                   	push   edi
c0022af6:	56                   	push   esi
c0022af7:	53                   	push   ebx
c0022af8:	83 ec 1c             	sub    esp,0x1c
c0022afb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0022aff:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022b03:	8d 50 f8             	lea    edx,[eax-0x8]
c0022b06:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022b0a:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0022b0e:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0022b12:	80 fa 03             	cmp    dl,0x3
c0022b15:	77 5d                	ja     c0022b74 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0022b17:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0022b1b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022b1f:	0f b6 db             	movzx  ebx,bl
c0022b22:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0022b25:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0022b29:	83 ca 80             	or     edx,0xffffff80
c0022b2c:	0f b6 d2             	movzx  edx,dl
c0022b2f:	52                   	push   edx
c0022b30:	6a 0c                	push   0xc
c0022b32:	53                   	push   ebx
c0022b33:	56                   	push   esi
c0022b34:	e8 59 f9 ff ff       	call   c0022492 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022b39:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0022b3e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022b42:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0022b46:	0f b6 c0             	movzx  eax,al
c0022b49:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0022b4d:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0022b4f:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0022b54:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0022b58:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022b5c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0022b60:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0022b68:	83 c4 2c             	add    esp,0x2c
c0022b6b:	5b                   	pop    ebx
c0022b6c:	5e                   	pop    esi
c0022b6d:	5f                   	pop    edi
c0022b6e:	5d                   	pop    ebp
c0022b6f:	e9 1e f9 ff ff       	jmp    c0022492 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022b74:	3c 07                	cmp    al,0x7
c0022b76:	77 10                	ja     c0022b88 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0022b78:	0f b6 db             	movzx  ebx,bl
c0022b7b:	0f b6 d0             	movzx  edx,al
c0022b7e:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0022b86:	eb 2d                	jmp    c0022bb5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0022b88:	3c 0d                	cmp    al,0xd
c0022b8a:	77 13                	ja     c0022b9f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0022b8c:	0f b6 db             	movzx  ebx,bl
c0022b8f:	0f b6 c0             	movzx  eax,al
c0022b92:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0022b99:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0022b9d:	eb 16                	jmp    c0022bb5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0022b9f:	3c 15                	cmp    al,0x15
c0022ba1:	77 14                	ja     c0022bb7 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0022ba3:	0f b6 db             	movzx  ebx,bl
c0022ba6:	0f b6 c0             	movzx  eax,al
c0022ba9:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0022bb1:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0022bb5:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0022bb7:	83 c4 1c             	add    esp,0x1c
c0022bba:	5b                   	pop    ebx
c0022bbb:	5e                   	pop    esi
c0022bbc:	5f                   	pop    edi
c0022bbd:	5d                   	pop    ebp
c0022bbe:	c3                   	ret    
c0022bbf:	90                   	nop

c0022bc0 <IDE::detect()>:
c0022bc0:	55                   	push   ebp
c0022bc1:	57                   	push   edi
c0022bc2:	56                   	push   esi
c0022bc3:	53                   	push   ebx
c0022bc4:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0022bca:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0022bd1:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0022bd8:	0f 85 be 02 00 00    	jne    c0022e9c <IDE::detect()+0x2dc>
c0022bde:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0022be5:	31 f6                	xor    esi,esi
c0022be7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0022bef:	31 ed                	xor    ebp,ebp
c0022bf1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022bf5:	c1 e0 06             	shl    eax,0x6
c0022bf8:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0022c00:	89 e8                	mov    eax,ebp
c0022c02:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0022c06:	c1 e0 04             	shl    eax,0x4
c0022c09:	83 c8 a0             	or     eax,0xffffffa0
c0022c0c:	0f b6 c0             	movzx  eax,al
c0022c0f:	50                   	push   eax
c0022c10:	6a 06                	push   0x6
c0022c12:	56                   	push   esi
c0022c13:	53                   	push   ebx
c0022c14:	e8 79 f8 ff ff       	call   c0022492 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022c19:	83 c4 0c             	add    esp,0xc
c0022c1c:	6a 0c                	push   0xc
c0022c1e:	56                   	push   esi
c0022c1f:	53                   	push   ebx
c0022c20:	e8 2d f9 ff ff       	call   c0022552 <IDE::read(unsigned char, unsigned char)>
c0022c25:	83 c4 0c             	add    esp,0xc
c0022c28:	6a 0c                	push   0xc
c0022c2a:	56                   	push   esi
c0022c2b:	53                   	push   ebx
c0022c2c:	e8 21 f9 ff ff       	call   c0022552 <IDE::read(unsigned char, unsigned char)>
c0022c31:	83 c4 0c             	add    esp,0xc
c0022c34:	6a 0c                	push   0xc
c0022c36:	56                   	push   esi
c0022c37:	53                   	push   ebx
c0022c38:	e8 15 f9 ff ff       	call   c0022552 <IDE::read(unsigned char, unsigned char)>
c0022c3d:	83 c4 0c             	add    esp,0xc
c0022c40:	6a 0c                	push   0xc
c0022c42:	56                   	push   esi
c0022c43:	53                   	push   ebx
c0022c44:	e8 09 f9 ff ff       	call   c0022552 <IDE::read(unsigned char, unsigned char)>
c0022c49:	68 ec 00 00 00       	push   0xec
c0022c4e:	6a 07                	push   0x7
c0022c50:	56                   	push   esi
c0022c51:	53                   	push   ebx
c0022c52:	e8 3b f8 ff ff       	call   c0022492 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022c57:	83 c4 1c             	add    esp,0x1c
c0022c5a:	6a 0c                	push   0xc
c0022c5c:	56                   	push   esi
c0022c5d:	53                   	push   ebx
c0022c5e:	e8 ef f8 ff ff       	call   c0022552 <IDE::read(unsigned char, unsigned char)>
c0022c63:	83 c4 0c             	add    esp,0xc
c0022c66:	6a 0c                	push   0xc
c0022c68:	56                   	push   esi
c0022c69:	53                   	push   ebx
c0022c6a:	e8 e3 f8 ff ff       	call   c0022552 <IDE::read(unsigned char, unsigned char)>
c0022c6f:	83 c4 0c             	add    esp,0xc
c0022c72:	6a 0c                	push   0xc
c0022c74:	56                   	push   esi
c0022c75:	53                   	push   ebx
c0022c76:	e8 d7 f8 ff ff       	call   c0022552 <IDE::read(unsigned char, unsigned char)>
c0022c7b:	83 c4 0c             	add    esp,0xc
c0022c7e:	6a 0c                	push   0xc
c0022c80:	56                   	push   esi
c0022c81:	53                   	push   ebx
c0022c82:	e8 cb f8 ff ff       	call   c0022552 <IDE::read(unsigned char, unsigned char)>
c0022c87:	83 c4 0c             	add    esp,0xc
c0022c8a:	6a 0c                	push   0xc
c0022c8c:	56                   	push   esi
c0022c8d:	53                   	push   ebx
c0022c8e:	e8 bf f8 ff ff       	call   c0022552 <IDE::read(unsigned char, unsigned char)>
c0022c93:	83 c4 10             	add    esp,0x10
c0022c96:	84 c0                	test   al,al
c0022c98:	0f 84 8b 01 00 00    	je     c0022e29 <IDE::detect()+0x269>
c0022c9e:	31 ff                	xor    edi,edi
c0022ca0:	50                   	push   eax
c0022ca1:	6a 0c                	push   0xc
c0022ca3:	56                   	push   esi
c0022ca4:	53                   	push   ebx
c0022ca5:	e8 a8 f8 ff ff       	call   c0022552 <IDE::read(unsigned char, unsigned char)>
c0022caa:	83 c4 10             	add    esp,0x10
c0022cad:	a8 01                	test   al,0x1
c0022caf:	0f 85 8e 01 00 00    	jne    c0022e43 <IDE::detect()+0x283>
c0022cb5:	84 c0                	test   al,al
c0022cb7:	78 04                	js     c0022cbd <IDE::detect()+0xfd>
c0022cb9:	a8 08                	test   al,0x8
c0022cbb:	75 27                	jne    c0022ce4 <IDE::detect()+0x124>
c0022cbd:	47                   	inc    edi
c0022cbe:	81 ff 17 01 00 00    	cmp    edi,0x117
c0022cc4:	7e da                	jle    c0022ca0 <IDE::detect()+0xe0>
c0022cc6:	50                   	push   eax
c0022cc7:	50                   	push   eax
c0022cc8:	6a 00                	push   0x0
c0022cca:	68 40 4b 4c 00       	push   0x4c4b40
c0022ccf:	e8 00 ab ff ff       	call   c001d7d4 <nanoSleep(unsigned long long)>
c0022cd4:	83 c4 10             	add    esp,0x10
c0022cd7:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0022cdd:	75 c1                	jne    c0022ca0 <IDE::detect()+0xe0>
c0022cdf:	e9 5f 01 00 00       	jmp    c0022e43 <IDE::detect()+0x283>
c0022ce4:	31 c9                	xor    ecx,ecx
c0022ce6:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0022cea:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0022cee:	83 ec 0c             	sub    esp,0xc
c0022cf1:	68 80 00 00 00       	push   0x80
c0022cf6:	57                   	push   edi
c0022cf7:	6a 00                	push   0x0
c0022cf9:	56                   	push   esi
c0022cfa:	53                   	push   ebx
c0022cfb:	e8 f4 fd ff ff       	call   c0022af4 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0022d00:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0022d05:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0022d09:	89 d1                	mov    ecx,edx
c0022d0b:	c1 e0 06             	shl    eax,0x6
c0022d0e:	01 d8                	add    eax,ebx
c0022d10:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0022d17:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0022d1e:	89 f2                	mov    edx,esi
c0022d20:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0022d26:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0022d2a:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0022d30:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0022d34:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0022d3b:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0022d43:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0022d4a:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0022d52:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0022d58:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0022d5f:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0022d65:	8d 54 24 58          	lea    edx,[esp+0x58]
c0022d69:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0022d6d:	83 c4 20             	add    esp,0x20
c0022d70:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0022d73:	83 c0 02             	add    eax,0x2
c0022d76:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0022d7c:	83 c7 02             	add    edi,0x2
c0022d7f:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0022d82:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0022d88:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0022d8c:	75 e2                	jne    c0022d70 <IDE::detect()+0x1b0>
c0022d8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022d92:	c1 e0 06             	shl    eax,0x6
c0022d95:	01 d8                	add    eax,ebx
c0022d97:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0022d9d:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0022da4:	66 c1 ea 09          	shr    dx,0x9
c0022da8:	83 e2 01             	and    edx,0x1
c0022dab:	84 c9                	test   cl,cl
c0022dad:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0022db3:	75 2f                	jne    c0022de4 <IDE::detect()+0x224>
c0022db5:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c0022dbb:	85 c0                	test   eax,eax
c0022dbd:	74 66                	je     c0022e25 <IDE::detect()+0x265>
c0022dbf:	50                   	push   eax
c0022dc0:	55                   	push   ebp
c0022dc1:	56                   	push   esi
c0022dc2:	68 c7 be 02 c0       	push   0xc002bec7
c0022dc7:	e8 27 fb fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0022dcc:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0022dd3:	e8 4c c8 fe ff       	call   c000f624 <malloc>
c0022dd8:	89 c7                	mov    edi,eax
c0022dda:	89 04 24             	mov    DWORD PTR [esp],eax
c0022ddd:	e8 78 06 00 00       	call   c002345a <ATA::ATA()>
c0022de2:	eb 28                	jmp    c0022e0c <IDE::detect()+0x24c>
c0022de4:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c0022dea:	55                   	push   ebp
c0022deb:	56                   	push   esi
c0022dec:	68 f6 be 02 c0       	push   0xc002bef6
c0022df1:	e8 fd fa fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0022df6:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0022dfd:	e8 22 c8 fe ff       	call   c000f624 <malloc>
c0022e02:	89 c7                	mov    edi,eax
c0022e04:	89 04 24             	mov    DWORD PTR [esp],eax
c0022e07:	e8 84 0c 00 00       	call   c0023a90 <ATAPI::ATAPI()>
c0022e0c:	5a                   	pop    edx
c0022e0d:	59                   	pop    ecx
c0022e0e:	57                   	push   edi
c0022e0f:	53                   	push   ebx
c0022e10:	e8 05 0f ff ff       	call   c0013d1a <Device::addChild(Device*)>
c0022e15:	8b 07                	mov    eax,DWORD PTR [edi]
c0022e17:	53                   	push   ebx
c0022e18:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0022e1c:	6a 00                	push   0x0
c0022e1e:	57                   	push   edi
c0022e1f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0022e22:	83 c4 20             	add    esp,0x20
c0022e25:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0022e29:	4d                   	dec    ebp
c0022e2a:	74 0a                	je     c0022e36 <IDE::detect()+0x276>
c0022e2c:	bd 01 00 00 00       	mov    ebp,0x1
c0022e31:	e9 bb fd ff ff       	jmp    c0022bf1 <IDE::detect()+0x31>
c0022e36:	4e                   	dec    esi
c0022e37:	74 63                	je     c0022e9c <IDE::detect()+0x2dc>
c0022e39:	be 01 00 00 00       	mov    esi,0x1
c0022e3e:	e9 ac fd ff ff       	jmp    c0022bef <IDE::detect()+0x2f>
c0022e43:	50                   	push   eax
c0022e44:	6a 04                	push   0x4
c0022e46:	56                   	push   esi
c0022e47:	53                   	push   ebx
c0022e48:	e8 05 f7 ff ff       	call   c0022552 <IDE::read(unsigned char, unsigned char)>
c0022e4d:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0022e51:	83 c4 0c             	add    esp,0xc
c0022e54:	6a 05                	push   0x5
c0022e56:	56                   	push   esi
c0022e57:	53                   	push   ebx
c0022e58:	e8 f5 f6 ff ff       	call   c0022552 <IDE::read(unsigned char, unsigned char)>
c0022e5d:	83 c4 10             	add    esp,0x10
c0022e60:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0022e64:	80 fa 14             	cmp    dl,0x14
c0022e67:	75 04                	jne    c0022e6d <IDE::detect()+0x2ad>
c0022e69:	3c eb                	cmp    al,0xeb
c0022e6b:	eb 07                	jmp    c0022e74 <IDE::detect()+0x2b4>
c0022e6d:	3c 96                	cmp    al,0x96
c0022e6f:	75 b8                	jne    c0022e29 <IDE::detect()+0x269>
c0022e71:	80 fa 69             	cmp    dl,0x69
c0022e74:	75 b3                	jne    c0022e29 <IDE::detect()+0x269>
c0022e76:	68 a1 00 00 00       	push   0xa1
c0022e7b:	6a 07                	push   0x7
c0022e7d:	56                   	push   esi
c0022e7e:	53                   	push   ebx
c0022e7f:	e8 0e f6 ff ff       	call   c0022492 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022e84:	5f                   	pop    edi
c0022e85:	58                   	pop    eax
c0022e86:	6a 00                	push   0x0
c0022e88:	68 40 42 0f 00       	push   0xf4240
c0022e8d:	e8 42 a9 ff ff       	call   c001d7d4 <nanoSleep(unsigned long long)>
c0022e92:	83 c4 10             	add    esp,0x10
c0022e95:	b1 01                	mov    cl,0x1
c0022e97:	e9 4a fe ff ff       	jmp    c0022ce6 <IDE::detect()+0x126>
c0022e9c:	81 c4 1c 02 00 00    	add    esp,0x21c
c0022ea2:	5b                   	pop    ebx
c0022ea3:	5e                   	pop    esi
c0022ea4:	5f                   	pop    edi
c0022ea5:	5d                   	pop    ebp
c0022ea6:	c3                   	ret    
c0022ea7:	90                   	nop

c0022ea8 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0022ea8:	55                   	push   ebp
c0022ea9:	57                   	push   edi
c0022eaa:	56                   	push   esi
c0022eab:	53                   	push   ebx
c0022eac:	83 ec 1c             	sub    esp,0x1c
c0022eaf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0022eb3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022eb7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0022ebb:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0022ebf:	88 c3                	mov    bl,al
c0022ec1:	84 c0                	test   al,al
c0022ec3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022ec7:	0f 84 67 01 00 00    	je     c0023034 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c0022ecd:	83 ec 0c             	sub    esp,0xc
c0022ed0:	68 27 bf 02 c0       	push   0xc002bf27
c0022ed5:	e8 19 fa fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0022eda:	83 c4 10             	add    esp,0x10
c0022edd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022ee1:	3c 01                	cmp    al,0x1
c0022ee3:	75 17                	jne    c0022efc <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c0022ee5:	83 ec 0c             	sub    esp,0xc
c0022ee8:	b3 13                	mov    bl,0x13
c0022eea:	68 33 bf 02 c0       	push   0xc002bf33
c0022eef:	e8 ff f9 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0022ef4:	83 c4 10             	add    esp,0x10
c0022ef7:	e9 25 01 00 00       	jmp    c0023021 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0022efc:	3c 02                	cmp    al,0x2
c0022efe:	0f 85 ef 00 00 00    	jne    c0022ff3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c0022f04:	d1 e6                	shl    esi,1
c0022f06:	09 ee                	or     esi,ebp
c0022f08:	52                   	push   edx
c0022f09:	89 f0                	mov    eax,esi
c0022f0b:	6a 01                	push   0x1
c0022f0d:	0f b6 f0             	movzx  esi,al
c0022f10:	c1 e6 06             	shl    esi,0x6
c0022f13:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0022f1b:	50                   	push   eax
c0022f1c:	57                   	push   edi
c0022f1d:	e8 30 f6 ff ff       	call   c0022552 <IDE::read(unsigned char, unsigned char)>
c0022f22:	83 c4 10             	add    esp,0x10
c0022f25:	89 c6                	mov    esi,eax
c0022f27:	a8 01                	test   al,0x1
c0022f29:	74 12                	je     c0022f3d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c0022f2b:	83 ec 0c             	sub    esp,0xc
c0022f2e:	b3 07                	mov    bl,0x7
c0022f30:	68 48 bf 02 c0       	push   0xc002bf48
c0022f35:	e8 b9 f9 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0022f3a:	83 c4 10             	add    esp,0x10
c0022f3d:	f7 c6 02 00 00 00    	test   esi,0x2
c0022f43:	74 12                	je     c0022f57 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c0022f45:	83 ec 0c             	sub    esp,0xc
c0022f48:	b3 03                	mov    bl,0x3
c0022f4a:	68 66 bf 02 c0       	push   0xc002bf66
c0022f4f:	e8 9f f9 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0022f54:	83 c4 10             	add    esp,0x10
c0022f57:	f7 c6 04 00 00 00    	test   esi,0x4
c0022f5d:	74 12                	je     c0022f71 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0022f5f:	83 ec 0c             	sub    esp,0xc
c0022f62:	b3 14                	mov    bl,0x14
c0022f64:	68 86 bf 02 c0       	push   0xc002bf86
c0022f69:	e8 85 f9 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0022f6e:	83 c4 10             	add    esp,0x10
c0022f71:	f7 c6 08 00 00 00    	test   esi,0x8
c0022f77:	74 12                	je     c0022f8b <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c0022f79:	83 ec 0c             	sub    esp,0xc
c0022f7c:	b3 03                	mov    bl,0x3
c0022f7e:	68 66 bf 02 c0       	push   0xc002bf66
c0022f83:	e8 6b f9 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0022f88:	83 c4 10             	add    esp,0x10
c0022f8b:	f7 c6 10 00 00 00    	test   esi,0x10
c0022f91:	74 12                	je     c0022fa5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c0022f93:	83 ec 0c             	sub    esp,0xc
c0022f96:	b3 15                	mov    bl,0x15
c0022f98:	68 9e bf 02 c0       	push   0xc002bf9e
c0022f9d:	e8 51 f9 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0022fa2:	83 c4 10             	add    esp,0x10
c0022fa5:	f7 c6 20 00 00 00    	test   esi,0x20
c0022fab:	74 12                	je     c0022fbf <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c0022fad:	83 ec 0c             	sub    esp,0xc
c0022fb0:	b3 03                	mov    bl,0x3
c0022fb2:	68 66 bf 02 c0       	push   0xc002bf66
c0022fb7:	e8 37 f9 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0022fbc:	83 c4 10             	add    esp,0x10
c0022fbf:	f7 c6 40 00 00 00    	test   esi,0x40
c0022fc5:	74 12                	je     c0022fd9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c0022fc7:	83 ec 0c             	sub    esp,0xc
c0022fca:	b3 16                	mov    bl,0x16
c0022fcc:	68 b8 bf 02 c0       	push   0xc002bfb8
c0022fd1:	e8 1d f9 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0022fd6:	83 c4 10             	add    esp,0x10
c0022fd9:	89 f0                	mov    eax,esi
c0022fdb:	84 c0                	test   al,al
c0022fdd:	79 42                	jns    c0023021 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0022fdf:	83 ec 0c             	sub    esp,0xc
c0022fe2:	b3 0d                	mov    bl,0xd
c0022fe4:	68 d9 bf 02 c0       	push   0xc002bfd9
c0022fe9:	e8 05 f9 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0022fee:	83 c4 10             	add    esp,0x10
c0022ff1:	eb 2e                	jmp    c0023021 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0022ff3:	3c 03                	cmp    al,0x3
c0022ff5:	75 14                	jne    c002300b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0022ff7:	83 ec 0c             	sub    esp,0xc
c0022ffa:	b3 17                	mov    bl,0x17
c0022ffc:	68 ed bf 02 c0       	push   0xc002bfed
c0023001:	e8 ed f8 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0023006:	83 c4 10             	add    esp,0x10
c0023009:	eb 16                	jmp    c0023021 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c002300b:	3c 04                	cmp    al,0x4
c002300d:	75 12                	jne    c0023021 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c002300f:	83 ec 0c             	sub    esp,0xc
c0023012:	b3 08                	mov    bl,0x8
c0023014:	68 03 c0 02 c0       	push   0xc002c003
c0023019:	e8 d5 f8 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c002301e:	83 c4 10             	add    esp,0x10
c0023021:	50                   	push   eax
c0023022:	50                   	push   eax
c0023023:	0f b6 c3             	movzx  eax,bl
c0023026:	50                   	push   eax
c0023027:	68 1b c0 02 c0       	push   0xc002c01b
c002302c:	e8 c2 f8 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0023031:	83 c4 10             	add    esp,0x10
c0023034:	83 c4 1c             	add    esp,0x1c
c0023037:	88 d8                	mov    al,bl
c0023039:	5b                   	pop    ebx
c002303a:	5e                   	pop    esi
c002303b:	5f                   	pop    edi
c002303c:	5d                   	pop    ebp
c002303d:	c3                   	ret    

c002303e <IDE::polling(unsigned char, unsigned int)>:
c002303e:	57                   	push   edi
c002303f:	56                   	push   esi
c0023040:	53                   	push   ebx
c0023041:	bb 04 00 00 00       	mov    ebx,0x4
c0023046:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c002304a:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c002304f:	52                   	push   edx
c0023050:	6a 0c                	push   0xc
c0023052:	56                   	push   esi
c0023053:	57                   	push   edi
c0023054:	e8 f9 f4 ff ff       	call   c0022552 <IDE::read(unsigned char, unsigned char)>
c0023059:	83 c4 10             	add    esp,0x10
c002305c:	4b                   	dec    ebx
c002305d:	75 f0                	jne    c002304f <IDE::polling(unsigned char, unsigned int)+0x11>
c002305f:	bb a0 86 01 00       	mov    ebx,0x186a0
c0023064:	50                   	push   eax
c0023065:	6a 0c                	push   0xc
c0023067:	56                   	push   esi
c0023068:	57                   	push   edi
c0023069:	e8 e4 f4 ff ff       	call   c0022552 <IDE::read(unsigned char, unsigned char)>
c002306e:	83 c4 10             	add    esp,0x10
c0023071:	a8 01                	test   al,0x1
c0023073:	74 12                	je     c0023087 <IDE::polling(unsigned char, unsigned int)+0x49>
c0023075:	83 ec 0c             	sub    esp,0xc
c0023078:	68 35 c0 02 c0       	push   0xc002c035
c002307d:	e8 71 f8 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0023082:	83 c4 10             	add    esp,0x10
c0023085:	eb 17                	jmp    c002309e <IDE::polling(unsigned char, unsigned int)+0x60>
c0023087:	a8 20                	test   al,0x20
c0023089:	75 0f                	jne    c002309a <IDE::polling(unsigned char, unsigned int)+0x5c>
c002308b:	4b                   	dec    ebx
c002308c:	74 10                	je     c002309e <IDE::polling(unsigned char, unsigned int)+0x60>
c002308e:	84 c0                	test   al,al
c0023090:	78 d2                	js     c0023064 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023092:	a8 08                	test   al,0x8
c0023094:	74 ce                	je     c0023064 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023096:	31 c0                	xor    eax,eax
c0023098:	eb 06                	jmp    c00230a0 <IDE::polling(unsigned char, unsigned int)+0x62>
c002309a:	b0 01                	mov    al,0x1
c002309c:	eb 02                	jmp    c00230a0 <IDE::polling(unsigned char, unsigned int)+0x62>
c002309e:	b0 02                	mov    al,0x2
c00230a0:	5b                   	pop    ebx
c00230a1:	5e                   	pop    esi
c00230a2:	5f                   	pop    edi
c00230a3:	c3                   	ret    

c00230a4 <SATABus::close(int, int, void*)>:
c00230a4:	31 c0                	xor    eax,eax
c00230a6:	c3                   	ret    
c00230a7:	90                   	nop

c00230a8 <SATABus::detect()>:
c00230a8:	c3                   	ret    
c00230a9:	90                   	nop

c00230aa <SATABus::SATABus()>:
c00230aa:	83 ec 0c             	sub    esp,0xc
c00230ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230b1:	83 ec 08             	sub    esp,0x8
c00230b4:	68 78 c0 02 c0       	push   0xc002c078
c00230b9:	50                   	push   eax
c00230ba:	e8 e7 0f ff ff       	call   c00140a6 <HardDiskController::HardDiskController(char const*)>
c00230bf:	83 c4 10             	add    esp,0x10
c00230c2:	ba 34 c1 02 c0       	mov    edx,0xc002c134
c00230c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230cb:	89 10                	mov    DWORD PTR [eax],edx
c00230cd:	83 ec 0c             	sub    esp,0xc
c00230d0:	6a 50                	push   0x50
c00230d2:	e8 b2 cc fe ff       	call   c000fd89 <Phys::allocateContiguousPages(int)>
c00230d7:	83 c4 10             	add    esp,0x10
c00230da:	89 c2                	mov    edx,eax
c00230dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230e0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00230e6:	83 ec 0c             	sub    esp,0xc
c00230e9:	6a 50                	push   0x50
c00230eb:	e8 13 e8 fe ff       	call   c0011903 <Virt::allocateKernelVirtualPages(int)>
c00230f0:	83 c4 10             	add    esp,0x10
c00230f3:	89 c2                	mov    edx,eax
c00230f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230f9:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00230ff:	e8 8f e9 fe ff       	call   c0011a93 <Virt::getAKernelVAS()>
c0023104:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023108:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c002310e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023112:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0023118:	83 ec 0c             	sub    esp,0xc
c002311b:	6a 03                	push   0x3
c002311d:	6a 50                	push   0x50
c002311f:	51                   	push   ecx
c0023120:	52                   	push   edx
c0023121:	50                   	push   eax
c0023122:	e8 9b f1 fe ff       	call   c00122c2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0023127:	83 c4 20             	add    esp,0x20
c002312a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002312e:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c0023134:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023138:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002313e:	83 ec 04             	sub    esp,0x4
c0023141:	52                   	push   edx
c0023142:	50                   	push   eax
c0023143:	68 9c c0 02 c0       	push   0xc002c09c
c0023148:	e8 a6 f7 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c002314d:	83 c4 10             	add    esp,0x10
c0023150:	90                   	nop
c0023151:	83 c4 0c             	add    esp,0xc
c0023154:	c3                   	ret    
c0023155:	90                   	nop

c0023156 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0023156:	83 ec 0c             	sub    esp,0xc
c0023159:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002315d:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0023160:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0023163:	09 c2                	or     edx,eax
c0023165:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023169:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002316f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023171:	31 c0                	xor    eax,eax
c0023173:	c1 e9 08             	shr    ecx,0x8
c0023176:	83 e1 0f             	and    ecx,0xf
c0023179:	39 c8                	cmp    eax,ecx
c002317b:	74 0a                	je     c0023187 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c002317d:	f6 c2 01             	test   dl,0x1
c0023180:	74 18                	je     c002319a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0023182:	d1 ea                	shr    edx,1
c0023184:	40                   	inc    eax
c0023185:	eb f2                	jmp    c0023179 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0023187:	83 ec 0c             	sub    esp,0xc
c002318a:	68 c0 c0 02 c0       	push   0xc002c0c0
c002318f:	e8 b9 6a ff ff       	call   c0019c4d <Krnl::panic(char const*)>
c0023194:	83 c4 10             	add    esp,0x10
c0023197:	83 c8 ff             	or     eax,0xffffffff
c002319a:	83 c4 0c             	add    esp,0xc
c002319d:	c3                   	ret    

c002319e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c002319e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00231a2:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c00231a5:	89 c2                	mov    edx,eax
c00231a7:	c1 ea 08             	shr    edx,0x8
c00231aa:	83 e2 0f             	and    edx,0xf
c00231ad:	fe ca                	dec    dl
c00231af:	75 31                	jne    c00231e2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c00231b1:	83 e0 0f             	and    eax,0xf
c00231b4:	3c 03                	cmp    al,0x3
c00231b6:	75 2a                	jne    c00231e2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c00231b8:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c00231bb:	b8 02 00 00 00       	mov    eax,0x2
c00231c0:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c00231c6:	74 1c                	je     c00231e4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c00231c8:	b8 04 00 00 00       	mov    eax,0x4
c00231cd:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c00231d3:	74 0f                	je     c00231e4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c00231d5:	31 c0                	xor    eax,eax
c00231d7:	83 fa 03             	cmp    edx,0x3
c00231da:	0f 94 c0             	sete   al
c00231dd:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c00231e1:	c3                   	ret    
c00231e2:	31 c0                	xor    eax,eax
c00231e4:	c3                   	ret    
c00231e5:	90                   	nop

c00231e6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c00231e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00231ea:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00231ed:	0f ba e2 0f          	bt     edx,0xf
c00231f1:	72 f7                	jb     c00231ea <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c00231f3:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00231f6:	83 ca 10             	or     edx,0x10
c00231f9:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00231fc:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00231ff:	83 ca 01             	or     edx,0x1
c0023202:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023205:	c3                   	ret    

c0023206 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0023206:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002320a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002320d:	83 e2 fe             	and    edx,0xfffffffe
c0023210:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023213:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023216:	83 e2 ef             	and    edx,0xffffffef
c0023219:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002321c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002321f:	0f ba e2 0e          	bt     edx,0xe
c0023223:	72 f7                	jb     c002321c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023225:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023228:	0f ba e2 0f          	bt     edx,0xf
c002322c:	72 ee                	jb     c002321c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c002322e:	c3                   	ret    
c002322f:	90                   	nop

c0023230 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0023230:	55                   	push   ebp
c0023231:	57                   	push   edi
c0023232:	56                   	push   esi
c0023233:	53                   	push   ebx
c0023234:	83 ec 1c             	sub    esp,0x1c
c0023237:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002323b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002323f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0023243:	53                   	push   ebx
c0023244:	89 fd                	mov    ebp,edi
c0023246:	56                   	push   esi
c0023247:	c1 e5 0a             	shl    ebp,0xa
c002324a:	e8 b7 ff ff ff       	call   c0023206 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c002324f:	83 ec 0c             	sub    esp,0xc
c0023252:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0023258:	01 e8                	add    eax,ebp
c002325a:	89 03                	mov    DWORD PTR [ebx],eax
c002325c:	8b 03                	mov    eax,DWORD PTR [ebx]
c002325e:	68 00 04 00 00       	push   0x400
c0023263:	6a 00                	push   0x0
c0023265:	50                   	push   eax
c0023266:	e8 59 d4 fd ff       	call   c00006c4 <memset>
c002326b:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0023271:	89 fa                	mov    edx,edi
c0023273:	01 e8                	add    eax,ebp
c0023275:	c1 e7 0d             	shl    edi,0xd
c0023278:	89 03                	mov    DWORD PTR [ebx],eax
c002327a:	c1 e2 08             	shl    edx,0x8
c002327d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0023284:	81 c2 00 80 00 00    	add    edx,0x8000
c002328a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c002328e:	89 d0                	mov    eax,edx
c0023290:	83 c4 1c             	add    esp,0x1c
c0023293:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023299:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c002329c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c002329f:	68 00 01 00 00       	push   0x100
c00232a4:	6a 00                	push   0x0
c00232a6:	50                   	push   eax
c00232a7:	e8 18 d4 fd ff       	call   c00006c4 <memset>
c00232ac:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00232b0:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c00232b6:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c00232bc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00232c0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00232c3:	83 c4 10             	add    esp,0x10
c00232c6:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00232cd:	31 ff                	xor    edi,edi
c00232cf:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c00232d5:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c00232db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00232df:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00232e5:	83 c5 20             	add    ebp,0x20
c00232e8:	01 f8                	add    eax,edi
c00232ea:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00232ed:	52                   	push   edx
c00232ee:	68 00 01 00 00       	push   0x100
c00232f3:	6a 00                	push   0x0
c00232f5:	50                   	push   eax
c00232f6:	e8 c9 d3 fd ff       	call   c00006c4 <memset>
c00232fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00232ff:	83 c4 10             	add    esp,0x10
c0023302:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0023308:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c002330f:	01 f8                	add    eax,edi
c0023311:	81 c7 00 01 00 00    	add    edi,0x100
c0023317:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002331a:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0023320:	75 b3                	jne    c00232d5 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0023322:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0023326:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c002332a:	83 c4 1c             	add    esp,0x1c
c002332d:	5b                   	pop    ebx
c002332e:	5e                   	pop    esi
c002332f:	5f                   	pop    edi
c0023330:	5d                   	pop    ebp
c0023331:	e9 b0 fe ff ff       	jmp    c00231e6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0023336 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0023336:	55                   	push   ebp
c0023337:	57                   	push   edi
c0023338:	56                   	push   esi
c0023339:	53                   	push   ebx
c002333a:	31 db                	xor    ebx,ebx
c002333c:	83 ec 0c             	sub    esp,0xc
c002333f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023343:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0023347:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c002334a:	f7 c7 01 00 00 00    	test   edi,0x1
c0023350:	0f 84 aa 00 00 00    	je     c0023400 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023356:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002335a:	89 d8                	mov    eax,ebx
c002335c:	c1 e0 07             	shl    eax,0x7
c002335f:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0023366:	55                   	push   ebp
c0023367:	56                   	push   esi
c0023368:	e8 31 fe ff ff       	call   c002319e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c002336d:	5a                   	pop    edx
c002336e:	83 f8 01             	cmp    eax,0x1
c0023371:	59                   	pop    ecx
c0023372:	75 30                	jne    c00233a4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c0023374:	50                   	push   eax
c0023375:	50                   	push   eax
c0023376:	53                   	push   ebx
c0023377:	68 e5 c0 02 c0       	push   0xc002c0e5
c002337c:	e8 72 f5 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0023381:	83 c4 0c             	add    esp,0xc
c0023384:	53                   	push   ebx
c0023385:	55                   	push   ebp
c0023386:	56                   	push   esi
c0023387:	e8 a4 fe ff ff       	call   c0023230 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c002338c:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023393:	e8 8c c2 fe ff       	call   c000f624 <malloc>
c0023398:	89 c5                	mov    ebp,eax
c002339a:	89 04 24             	mov    DWORD PTR [esp],eax
c002339d:	e8 62 0d 00 00       	call   c0024104 <SATA::SATA()>
c00233a2:	eb 33                	jmp    c00233d7 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c00233a4:	83 f8 04             	cmp    eax,0x4
c00233a7:	75 47                	jne    c00233f0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c00233a9:	50                   	push   eax
c00233aa:	50                   	push   eax
c00233ab:	53                   	push   ebx
c00233ac:	68 fc c0 02 c0       	push   0xc002c0fc
c00233b1:	e8 3d f5 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00233b6:	83 c4 0c             	add    esp,0xc
c00233b9:	53                   	push   ebx
c00233ba:	55                   	push   ebp
c00233bb:	56                   	push   esi
c00233bc:	e8 6f fe ff ff       	call   c0023230 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c00233c1:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c00233c8:	e8 57 c2 fe ff       	call   c000f624 <malloc>
c00233cd:	89 c5                	mov    ebp,eax
c00233cf:	89 04 24             	mov    DWORD PTR [esp],eax
c00233d2:	e8 55 11 00 00       	call   c002452c <SATAPI::SATAPI()>
c00233d7:	5a                   	pop    edx
c00233d8:	59                   	pop    ecx
c00233d9:	55                   	push   ebp
c00233da:	56                   	push   esi
c00233db:	e8 3a 09 ff ff       	call   c0013d1a <Device::addChild(Device*)>
c00233e0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00233e3:	56                   	push   esi
c00233e4:	6a 00                	push   0x0
c00233e6:	53                   	push   ebx
c00233e7:	55                   	push   ebp
c00233e8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00233eb:	83 c4 20             	add    esp,0x20
c00233ee:	eb 10                	jmp    c0023400 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c00233f0:	50                   	push   eax
c00233f1:	50                   	push   eax
c00233f2:	53                   	push   ebx
c00233f3:	68 15 c1 02 c0       	push   0xc002c115
c00233f8:	e8 f6 f4 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00233fd:	83 c4 10             	add    esp,0x10
c0023400:	d1 ef                	shr    edi,1
c0023402:	43                   	inc    ebx
c0023403:	83 fb 20             	cmp    ebx,0x20
c0023406:	0f 85 3e ff ff ff    	jne    c002334a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c002340c:	83 c4 0c             	add    esp,0xc
c002340f:	5b                   	pop    ebx
c0023410:	5e                   	pop    esi
c0023411:	5f                   	pop    edi
c0023412:	5d                   	pop    ebp
c0023413:	c3                   	ret    

c0023414 <SATABus::open(int, int, void*)>:
c0023414:	83 ec 14             	sub    esp,0x14
c0023417:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002341b:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0023421:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0023427:	52                   	push   edx
c0023428:	50                   	push   eax
c0023429:	e8 08 ff ff ff       	call   c0023336 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c002342e:	31 c0                	xor    eax,eax
c0023430:	83 c4 1c             	add    esp,0x1c
c0023433:	c3                   	ret    

c0023434 <ATA::close(int, int, void*)>:
c0023434:	83 ec 0c             	sub    esp,0xc
c0023437:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002343b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023441:	85 c0                	test   eax,eax
c0023443:	74 0c                	je     c0023451 <ATA::close(int, int, void*)+0x1d>
c0023445:	83 ec 0c             	sub    esp,0xc
c0023448:	8b 10                	mov    edx,DWORD PTR [eax]
c002344a:	50                   	push   eax
c002344b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002344e:	83 c4 10             	add    esp,0x10
c0023451:	31 c0                	xor    eax,eax
c0023453:	83 c4 0c             	add    esp,0xc
c0023456:	c3                   	ret    
c0023457:	90                   	nop

c0023458 <ATA::powerSaving(PowerSavingLevel)>:
c0023458:	c3                   	ret    
c0023459:	90                   	nop

c002345a <ATA::ATA()>:
c002345a:	83 ec 0c             	sub    esp,0xc
c002345d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023461:	83 ec 04             	sub    esp,0x4
c0023464:	68 00 02 00 00       	push   0x200
c0023469:	68 0c c2 02 c0       	push   0xc002c20c
c002346e:	50                   	push   eax
c002346f:	e8 ca 0c ff ff       	call   c001413e <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023474:	83 c4 10             	add    esp,0x10
c0023477:	ba 74 c1 02 c0       	mov    edx,0xc002c174
c002347c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023480:	89 10                	mov    DWORD PTR [eax],edx
c0023482:	90                   	nop
c0023483:	83 c4 0c             	add    esp,0xc
c0023486:	c3                   	ret    
c0023487:	90                   	nop

c0023488 <ATA::flush(bool)>:
c0023488:	53                   	push   ebx
c0023489:	83 ec 08             	sub    esp,0x8
c002348c:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0023491:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023495:	19 c0                	sbb    eax,eax
c0023497:	83 e0 fd             	and    eax,0xfffffffd
c002349a:	05 ea 00 00 00       	add    eax,0xea
c002349f:	50                   	push   eax
c00234a0:	6a 07                	push   0x7
c00234a2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00234a9:	50                   	push   eax
c00234aa:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00234b0:	e8 dd ef ff ff       	call   c0022492 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00234b5:	83 c4 0c             	add    esp,0xc
c00234b8:	6a 00                	push   0x0
c00234ba:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00234c1:	50                   	push   eax
c00234c2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00234c8:	e8 71 fb ff ff       	call   c002303e <IDE::polling(unsigned char, unsigned int)>
c00234cd:	83 c4 18             	add    esp,0x18
c00234d0:	5b                   	pop    ebx
c00234d1:	c3                   	ret    

c00234d2 <ATA::readyForCommand()>:
c00234d2:	56                   	push   esi
c00234d3:	53                   	push   ebx
c00234d4:	31 db                	xor    ebx,ebx
c00234d6:	50                   	push   eax
c00234d7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00234db:	50                   	push   eax
c00234dc:	6a 0c                	push   0xc
c00234de:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00234e5:	50                   	push   eax
c00234e6:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00234ec:	e8 61 f0 ff ff       	call   c0022552 <IDE::read(unsigned char, unsigned char)>
c00234f1:	83 c4 10             	add    esp,0x10
c00234f4:	a8 88                	test   al,0x88
c00234f6:	74 23                	je     c002351b <ATA::readyForCommand()+0x49>
c00234f8:	43                   	inc    ebx
c00234f9:	83 fb 63             	cmp    ebx,0x63
c00234fc:	7e dd                	jle    c00234db <ATA::readyForCommand()+0x9>
c00234fe:	51                   	push   ecx
c00234ff:	51                   	push   ecx
c0023500:	6a 00                	push   0x0
c0023502:	68 40 42 0f 00       	push   0xf4240
c0023507:	e8 c8 a2 ff ff       	call   c001d7d4 <nanoSleep(unsigned long long)>
c002350c:	83 c4 10             	add    esp,0x10
c002350f:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0023515:	75 c4                	jne    c00234db <ATA::readyForCommand()+0x9>
c0023517:	31 c0                	xor    eax,eax
c0023519:	eb 02                	jmp    c002351d <ATA::readyForCommand()+0x4b>
c002351b:	b0 01                	mov    al,0x1
c002351d:	5a                   	pop    edx
c002351e:	5b                   	pop    ebx
c002351f:	5e                   	pop    esi
c0023520:	c3                   	ret    
c0023521:	90                   	nop

c0023522 <ATA::access(unsigned long long, int, void*, bool)>:
c0023522:	55                   	push   ebp
c0023523:	57                   	push   edi
c0023524:	56                   	push   esi
c0023525:	53                   	push   ebx
c0023526:	83 ec 2c             	sub    esp,0x2c
c0023529:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002352d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0023531:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0023535:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023539:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c002353d:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0023541:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0023545:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c002354b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002354f:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0023555:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023559:	c1 e0 06             	shl    eax,0x6
c002355c:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0023564:	74 5d                	je     c00235c3 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0023566:	89 fa                	mov    edx,edi
c0023568:	89 f0                	mov    eax,esi
c002356a:	0f ac d0 1c          	shrd   eax,edx,0x1c
c002356e:	c1 ea 1c             	shr    edx,0x1c
c0023571:	89 d1                	mov    ecx,edx
c0023573:	09 c1                	or     ecx,eax
c0023575:	74 25                	je     c002359c <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0023577:	31 ed                	xor    ebp,ebp
c0023579:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0023580:	89 fa                	mov    edx,edi
c0023582:	89 f0                	mov    eax,esi
c0023584:	0f ad d0             	shrd   eax,edx,cl
c0023587:	d3 ea                	shr    edx,cl
c0023589:	f6 c1 20             	test   cl,0x20
c002358c:	74 02                	je     c0023590 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c002358e:	89 d0                	mov    eax,edx
c0023590:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0023594:	45                   	inc    ebp
c0023595:	83 fd 06             	cmp    ebp,0x6
c0023598:	75 df                	jne    c0023579 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c002359a:	eb 76                	jmp    c0023612 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c002359c:	89 f0                	mov    eax,esi
c002359e:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c00235a3:	89 fa                	mov    edx,edi
c00235a5:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c00235ac:	0f ac d0 10          	shrd   eax,edx,0x10
c00235b0:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00235b5:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00235b9:	c1 ee 18             	shr    esi,0x18
c00235bc:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c00235c1:	eb 56                	jmp    c0023619 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c00235c3:	6a 00                	push   0x0
c00235c5:	6a 3f                	push   0x3f
c00235c7:	57                   	push   edi
c00235c8:	56                   	push   esi
c00235c9:	e8 7e 2a 00 00       	call   c002604c <__umoddi3>
c00235ce:	83 c4 10             	add    esp,0x10
c00235d1:	40                   	inc    eax
c00235d2:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c00235d6:	6a 00                	push   0x0
c00235d8:	68 f0 03 00 00       	push   0x3f0
c00235dd:	57                   	push   edi
c00235de:	56                   	push   esi
c00235df:	e8 68 29 00 00       	call   c0025f4c <__udivdi3>
c00235e4:	83 c4 10             	add    esp,0x10
c00235e7:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c00235ec:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c00235f3:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00235f8:	6a 00                	push   0x0
c00235fa:	6a 3f                	push   0x3f
c00235fc:	57                   	push   edi
c00235fd:	56                   	push   esi
c00235fe:	e8 49 29 00 00       	call   c0025f4c <__udivdi3>
c0023603:	83 c4 10             	add    esp,0x10
c0023606:	89 c6                	mov    esi,eax
c0023608:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c002360d:	83 e6 0f             	and    esi,0xf
c0023610:	eb 07                	jmp    c0023619 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0023612:	31 f6                	xor    esi,esi
c0023614:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0023619:	bf 01 00 00 00       	mov    edi,0x1
c002361e:	50                   	push   eax
c002361f:	6a 00                	push   0x0
c0023621:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023628:	50                   	push   eax
c0023629:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002362d:	e8 6c f0 ff ff       	call   c002269e <IDE::enableIRQs(unsigned char, bool)>
c0023632:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023635:	e8 98 fe ff ff       	call   c00234d2 <ATA::readyForCommand()>
c002363a:	83 c4 10             	add    esp,0x10
c002363d:	84 c0                	test   al,al
c002363f:	0f 84 50 02 00 00    	je     c0023895 <ATA::access(unsigned long long, int, void*, bool)+0x373>
c0023645:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c002364b:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0023651:	c1 e0 04             	shl    eax,0x4
c0023654:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c002365b:	09 c6                	or     esi,eax
c002365d:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0023662:	75 05                	jne    c0023669 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0023664:	83 ce a0             	or     esi,0xffffffa0
c0023667:	eb 03                	jmp    c002366c <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0023669:	83 ce e0             	or     esi,0xffffffe0
c002366c:	89 f0                	mov    eax,esi
c002366e:	0f b6 f0             	movzx  esi,al
c0023671:	56                   	push   esi
c0023672:	6a 06                	push   0x6
c0023674:	51                   	push   ecx
c0023675:	52                   	push   edx
c0023676:	e8 17 ee ff ff       	call   c0022492 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002367b:	83 c4 10             	add    esp,0x10
c002367e:	6a 00                	push   0x0
c0023680:	6a 01                	push   0x1
c0023682:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023689:	50                   	push   eax
c002368a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023690:	e8 fd ed ff ff       	call   c0022492 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023695:	83 c4 10             	add    esp,0x10
c0023698:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c002369d:	75 6e                	jne    c002370d <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c002369f:	6a 00                	push   0x0
c00236a1:	6a 08                	push   0x8
c00236a3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00236aa:	50                   	push   eax
c00236ab:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00236b1:	e8 dc ed ff ff       	call   c0022492 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00236b6:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00236bb:	50                   	push   eax
c00236bc:	6a 09                	push   0x9
c00236be:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00236c5:	50                   	push   eax
c00236c6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00236cc:	e8 c1 ed ff ff       	call   c0022492 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00236d1:	83 c4 20             	add    esp,0x20
c00236d4:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c00236d9:	50                   	push   eax
c00236da:	6a 0a                	push   0xa
c00236dc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00236e3:	50                   	push   eax
c00236e4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00236ea:	e8 a3 ed ff ff       	call   c0022492 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00236ef:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c00236f4:	50                   	push   eax
c00236f5:	6a 0b                	push   0xb
c00236f7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00236fe:	50                   	push   eax
c00236ff:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023705:	e8 88 ed ff ff       	call   c0022492 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002370a:	83 c4 20             	add    esp,0x20
c002370d:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0023712:	50                   	push   eax
c0023713:	6a 02                	push   0x2
c0023715:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002371c:	50                   	push   eax
c002371d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023723:	e8 6a ed ff ff       	call   c0022492 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023728:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c002372d:	50                   	push   eax
c002372e:	6a 03                	push   0x3
c0023730:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023737:	50                   	push   eax
c0023738:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002373e:	e8 4f ed ff ff       	call   c0022492 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023743:	83 c4 20             	add    esp,0x20
c0023746:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c002374b:	50                   	push   eax
c002374c:	6a 04                	push   0x4
c002374e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023755:	50                   	push   eax
c0023756:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002375c:	e8 31 ed ff ff       	call   c0022492 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023761:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0023766:	50                   	push   eax
c0023767:	6a 05                	push   0x5
c0023769:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023770:	50                   	push   eax
c0023771:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023777:	e8 16 ed ff ff       	call   c0022492 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002377c:	83 c4 20             	add    esp,0x20
c002377f:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0023784:	0f 94 c0             	sete   al
c0023787:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002378c:	74 09                	je     c0023797 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c002378e:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0023795:	eb 07                	jmp    c002379e <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0023797:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c002379e:	0f b6 c0             	movzx  eax,al
c00237a1:	50                   	push   eax
c00237a2:	6a 07                	push   0x7
c00237a4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00237ab:	50                   	push   eax
c00237ac:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00237b2:	e8 db ec ff ff       	call   c0022492 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00237b7:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c00237bb:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c00237bf:	83 c4 10             	add    esp,0x10
c00237c2:	85 f6                	test   esi,esi
c00237c4:	0f 84 ac 00 00 00    	je     c0023876 <ATA::access(unsigned long long, int, void*, bool)+0x354>
c00237ca:	50                   	push   eax
c00237cb:	6a 01                	push   0x1
c00237cd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00237d4:	50                   	push   eax
c00237d5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00237db:	e8 5e f8 ff ff       	call   c002303e <IDE::polling(unsigned char, unsigned int)>
c00237e0:	83 c4 10             	add    esp,0x10
c00237e3:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c00237e9:	84 c0                	test   al,al
c00237eb:	74 20                	je     c002380d <ATA::access(unsigned long long, int, void*, bool)+0x2eb>
c00237ed:	0f b6 f8             	movzx  edi,al
c00237f0:	0f b6 d2             	movzx  edx,dl
c00237f3:	57                   	push   edi
c00237f4:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c00237fb:	50                   	push   eax
c00237fc:	52                   	push   edx
c00237fd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023803:	e8 a0 f6 ff ff       	call   c0022ea8 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0023808:	e9 85 00 00 00       	jmp    c0023892 <ATA::access(unsigned long long, int, void*, bool)+0x370>
c002380d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0023812:	74 41                	je     c0023855 <ATA::access(unsigned long long, int, void*, bool)+0x333>
c0023814:	31 c9                	xor    ecx,ecx
c0023816:	66 8b 2c 4f          	mov    bp,WORD PTR [edi+ecx*2]
c002381a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002381e:	50                   	push   eax
c002381f:	50                   	push   eax
c0023820:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023827:	50                   	push   eax
c0023828:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002382e:	e8 4d ec ff ff       	call   c0022480 <IDE::getBase(unsigned char)>
c0023833:	89 c2                	mov    edx,eax
c0023835:	89 e8                	mov    eax,ebp
c0023837:	66 ef                	out    dx,ax
c0023839:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c002383d:	83 c4 10             	add    esp,0x10
c0023840:	41                   	inc    ecx
c0023841:	81 f9 00 01 00 00    	cmp    ecx,0x100
c0023847:	75 cd                	jne    c0023816 <ATA::access(unsigned long long, int, void*, bool)+0x2f4>
c0023849:	4e                   	dec    esi
c002384a:	81 c7 00 02 00 00    	add    edi,0x200
c0023850:	e9 6d ff ff ff       	jmp    c00237c2 <ATA::access(unsigned long long, int, void*, bool)+0x2a0>
c0023855:	0f b6 d2             	movzx  edx,dl
c0023858:	51                   	push   ecx
c0023859:	51                   	push   ecx
c002385a:	52                   	push   edx
c002385b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023861:	e8 1a ec ff ff       	call   c0022480 <IDE::getBase(unsigned char)>
c0023866:	b9 00 01 00 00       	mov    ecx,0x100
c002386b:	89 c2                	mov    edx,eax
c002386d:	fc                   	cld    
c002386e:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0023871:	83 c4 10             	add    esp,0x10
c0023874:	eb d3                	jmp    c0023849 <ATA::access(unsigned long long, int, void*, bool)+0x327>
c0023876:	31 ff                	xor    edi,edi
c0023878:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002387d:	74 16                	je     c0023895 <ATA::access(unsigned long long, int, void*, bool)+0x373>
c002387f:	50                   	push   eax
c0023880:	50                   	push   eax
c0023881:	31 c0                	xor    eax,eax
c0023883:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0023888:	0f 94 c0             	sete   al
c002388b:	50                   	push   eax
c002388c:	53                   	push   ebx
c002388d:	e8 f6 fb ff ff       	call   c0023488 <ATA::flush(bool)>
c0023892:	83 c4 10             	add    esp,0x10
c0023895:	83 c4 2c             	add    esp,0x2c
c0023898:	89 f8                	mov    eax,edi
c002389a:	5b                   	pop    ebx
c002389b:	5e                   	pop    esi
c002389c:	5f                   	pop    edi
c002389d:	5d                   	pop    ebp
c002389e:	c3                   	ret    
c002389f:	90                   	nop

c00238a0 <ATA::read(unsigned long long, int, void*)>:
c00238a0:	57                   	push   edi
c00238a1:	b8 04 00 00 00       	mov    eax,0x4
c00238a6:	56                   	push   esi
c00238a7:	53                   	push   ebx
c00238a8:	83 ec 10             	sub    esp,0x10
c00238ab:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00238af:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00238b3:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00238b6:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00238ba:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00238be:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00238c4:	77 3b                	ja     c0023901 <ATA::read(unsigned long long, int, void*)+0x61>
c00238c6:	b8 06 00 00 00       	mov    eax,0x6
c00238cb:	85 d2                	test   edx,edx
c00238cd:	74 32                	je     c0023901 <ATA::read(unsigned long long, int, void*)+0x61>
c00238cf:	50                   	push   eax
c00238d0:	50                   	push   eax
c00238d1:	6a 00                	push   0x0
c00238d3:	52                   	push   edx
c00238d4:	53                   	push   ebx
c00238d5:	57                   	push   edi
c00238d6:	56                   	push   esi
c00238d7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00238db:	e8 42 fc ff ff       	call   c0023522 <ATA::access(unsigned long long, int, void*, bool)>
c00238e0:	83 c4 20             	add    esp,0x20
c00238e3:	85 c0                	test   eax,eax
c00238e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00238e9:	75 11                	jne    c00238fc <ATA::read(unsigned long long, int, void*)+0x5c>
c00238eb:	01 1d c8 fb 02 c0    	add    DWORD PTR ds:0xc002fbc8,ebx
c00238f1:	e8 62 ce fe ff       	call   c0010758 <VgaText::updateDiskUsage()>
c00238f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00238fa:	eb 05                	jmp    c0023901 <ATA::read(unsigned long long, int, void*)+0x61>
c00238fc:	b8 01 00 00 00       	mov    eax,0x1
c0023901:	83 c4 10             	add    esp,0x10
c0023904:	5b                   	pop    ebx
c0023905:	5e                   	pop    esi
c0023906:	5f                   	pop    edi
c0023907:	c3                   	ret    

c0023908 <ATA::write(unsigned long long, int, void*)>:
c0023908:	57                   	push   edi
c0023909:	b8 04 00 00 00       	mov    eax,0x4
c002390e:	56                   	push   esi
c002390f:	53                   	push   ebx
c0023910:	83 ec 10             	sub    esp,0x10
c0023913:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0023917:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002391b:	8d 4b ff             	lea    ecx,[ebx-0x1]
c002391e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0023922:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023926:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c002392c:	77 3b                	ja     c0023969 <ATA::write(unsigned long long, int, void*)+0x61>
c002392e:	b8 06 00 00 00       	mov    eax,0x6
c0023933:	85 d2                	test   edx,edx
c0023935:	74 32                	je     c0023969 <ATA::write(unsigned long long, int, void*)+0x61>
c0023937:	50                   	push   eax
c0023938:	50                   	push   eax
c0023939:	6a 01                	push   0x1
c002393b:	52                   	push   edx
c002393c:	53                   	push   ebx
c002393d:	57                   	push   edi
c002393e:	56                   	push   esi
c002393f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0023943:	e8 da fb ff ff       	call   c0023522 <ATA::access(unsigned long long, int, void*, bool)>
c0023948:	83 c4 20             	add    esp,0x20
c002394b:	85 c0                	test   eax,eax
c002394d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023951:	75 11                	jne    c0023964 <ATA::write(unsigned long long, int, void*)+0x5c>
c0023953:	01 1d c4 fb 02 c0    	add    DWORD PTR ds:0xc002fbc4,ebx
c0023959:	e8 fa cd fe ff       	call   c0010758 <VgaText::updateDiskUsage()>
c002395e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023962:	eb 05                	jmp    c0023969 <ATA::write(unsigned long long, int, void*)+0x61>
c0023964:	b8 01 00 00 00       	mov    eax,0x1
c0023969:	83 c4 10             	add    esp,0x10
c002396c:	5b                   	pop    ebx
c002396d:	5e                   	pop    esi
c002396e:	5f                   	pop    edi
c002396f:	c3                   	ret    

c0023970 <ATA::detectCHS()>:
c0023970:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0023974:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c002397a:	c1 e0 06             	shl    eax,0x6
c002397d:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0023983:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c002398d:	c7 44 24 04 58 c1 02 c0 	mov    DWORD PTR [esp+0x4],0xc002c158
c0023995:	e9 b3 62 ff ff       	jmp    c0019c4d <Krnl::panic(char const*)>

c002399a <ATA::open(int, int, void*)>:
c002399a:	53                   	push   ebx
c002399b:	83 ec 08             	sub    esp,0x8
c002399e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00239a2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00239a6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00239aa:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00239b0:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00239b6:	c1 e0 06             	shl    eax,0x6
c00239b9:	01 d0                	add    eax,edx
c00239bb:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c00239c2:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c00239c8:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c00239cf:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00239d9:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c00239df:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c00239e6:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c00239ed:	75 0c                	jne    c00239fb <ATA::open(int, int, void*)+0x61>
c00239ef:	83 ec 0c             	sub    esp,0xc
c00239f2:	53                   	push   ebx
c00239f3:	e8 78 ff ff ff       	call   c0023970 <ATA::detectCHS()>
c00239f8:	83 c4 10             	add    esp,0x10
c00239fb:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0023a01:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0023a07:	c1 e0 06             	shl    eax,0x6
c0023a0a:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0023a11:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0023a1b:	d1 e8                	shr    eax,1
c0023a1d:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0023a23:	6a 04                	push   0x4
c0023a25:	6a 0c                	push   0xc
c0023a27:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023a2e:	50                   	push   eax
c0023a2f:	52                   	push   edx
c0023a30:	e8 5d ea ff ff       	call   c0022492 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023a35:	90                   	nop
c0023a36:	90                   	nop
c0023a37:	6a 00                	push   0x0
c0023a39:	6a 0c                	push   0xc
c0023a3b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023a42:	50                   	push   eax
c0023a43:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023a49:	e8 44 ea ff ff       	call   c0022492 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023a4e:	83 c4 14             	add    esp,0x14
c0023a51:	53                   	push   ebx
c0023a52:	e8 4f 07 ff ff       	call   c00141a6 <PhysicalDisk::startCache()>
c0023a57:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023a5a:	e8 29 28 ff ff       	call   c0016288 <createPartitionsForDisk(PhysicalDisk*)>
c0023a5f:	31 c0                	xor    eax,eax
c0023a61:	83 c4 18             	add    esp,0x18
c0023a64:	5b                   	pop    ebx
c0023a65:	c3                   	ret    

c0023a66 <ATAPI::write(unsigned long long, int, void*)>:
c0023a66:	b8 03 00 00 00       	mov    eax,0x3
c0023a6b:	c3                   	ret    

c0023a6c <ATAPI::close(int, int, void*)>:
c0023a6c:	83 ec 0c             	sub    esp,0xc
c0023a6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a73:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023a79:	85 c0                	test   eax,eax
c0023a7b:	74 0c                	je     c0023a89 <ATAPI::close(int, int, void*)+0x1d>
c0023a7d:	83 ec 0c             	sub    esp,0xc
c0023a80:	8b 10                	mov    edx,DWORD PTR [eax]
c0023a82:	50                   	push   eax
c0023a83:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023a86:	83 c4 10             	add    esp,0x10
c0023a89:	31 c0                	xor    eax,eax
c0023a8b:	83 c4 0c             	add    esp,0xc
c0023a8e:	c3                   	ret    
c0023a8f:	90                   	nop

c0023a90 <ATAPI::ATAPI()>:
c0023a90:	83 ec 0c             	sub    esp,0xc
c0023a93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a97:	83 ec 04             	sub    esp,0x4
c0023a9a:	68 00 08 00 00       	push   0x800
c0023a9f:	68 e9 c2 02 c0       	push   0xc002c2e9
c0023aa4:	50                   	push   eax
c0023aa5:	e8 94 06 ff ff       	call   c001413e <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023aaa:	83 c4 10             	add    esp,0x10
c0023aad:	ba ac c1 02 c0       	mov    edx,0xc002c1ac
c0023ab2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ab6:	89 10                	mov    DWORD PTR [eax],edx
c0023ab8:	90                   	nop
c0023ab9:	83 c4 0c             	add    esp,0xc
c0023abc:	c3                   	ret    
c0023abd:	90                   	nop

c0023abe <ATAPI::readyForCommand()>:
c0023abe:	56                   	push   esi
c0023abf:	53                   	push   ebx
c0023ac0:	31 db                	xor    ebx,ebx
c0023ac2:	50                   	push   eax
c0023ac3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023ac7:	50                   	push   eax
c0023ac8:	6a 0c                	push   0xc
c0023aca:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0023ad1:	50                   	push   eax
c0023ad2:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0023ad8:	e8 75 ea ff ff       	call   c0022552 <IDE::read(unsigned char, unsigned char)>
c0023add:	83 c4 10             	add    esp,0x10
c0023ae0:	a8 88                	test   al,0x88
c0023ae2:	74 23                	je     c0023b07 <ATAPI::readyForCommand()+0x49>
c0023ae4:	43                   	inc    ebx
c0023ae5:	83 fb 63             	cmp    ebx,0x63
c0023ae8:	7e dd                	jle    c0023ac7 <ATAPI::readyForCommand()+0x9>
c0023aea:	51                   	push   ecx
c0023aeb:	51                   	push   ecx
c0023aec:	6a 00                	push   0x0
c0023aee:	68 40 42 0f 00       	push   0xf4240
c0023af3:	e8 dc 9c ff ff       	call   c001d7d4 <nanoSleep(unsigned long long)>
c0023af8:	83 c4 10             	add    esp,0x10
c0023afb:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0023b01:	75 c4                	jne    c0023ac7 <ATAPI::readyForCommand()+0x9>
c0023b03:	31 c0                	xor    eax,eax
c0023b05:	eb 02                	jmp    c0023b09 <ATAPI::readyForCommand()+0x4b>
c0023b07:	b0 01                	mov    al,0x1
c0023b09:	5a                   	pop    edx
c0023b0a:	5b                   	pop    ebx
c0023b0b:	5e                   	pop    esi
c0023b0c:	c3                   	ret    
c0023b0d:	90                   	nop

c0023b0e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0023b0e:	55                   	push   ebp
c0023b0f:	57                   	push   edi
c0023b10:	56                   	push   esi
c0023b11:	53                   	push   ebx
c0023b12:	83 ec 20             	sub    esp,0x20
c0023b15:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0023b19:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0023b1d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0023b21:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0023b25:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0023b29:	6a 01                	push   0x1
c0023b2b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023b32:	50                   	push   eax
c0023b33:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023b39:	e8 60 eb ff ff       	call   c002269e <IDE::enableIRQs(unsigned char, bool)>
c0023b3e:	5e                   	pop    esi
c0023b3f:	58                   	pop    eax
c0023b40:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023b47:	50                   	push   eax
c0023b48:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023b4e:	e8 19 e9 ff ff       	call   c002246c <IDE::prepareInterrupt(unsigned char)>
c0023b53:	89 3c 24             	mov    DWORD PTR [esp],edi
c0023b56:	e8 63 ff ff ff       	call   c0023abe <ATAPI::readyForCommand()>
c0023b5b:	83 c4 10             	add    esp,0x10
c0023b5e:	84 c0                	test   al,al
c0023b60:	75 0a                	jne    c0023b6c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0023b62:	bb 01 00 00 00       	mov    ebx,0x1
c0023b67:	e9 57 02 00 00       	jmp    c0023dc3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0023b6c:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0023b72:	c1 e0 04             	shl    eax,0x4
c0023b75:	0f b6 c0             	movzx  eax,al
c0023b78:	50                   	push   eax
c0023b79:	6a 06                	push   0x6
c0023b7b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023b82:	50                   	push   eax
c0023b83:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023b89:	e8 04 e9 ff ff       	call   c0022492 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023b8e:	6a 00                	push   0x0
c0023b90:	6a 01                	push   0x1
c0023b92:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023b99:	50                   	push   eax
c0023b9a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023ba0:	e8 ed e8 ff ff       	call   c0022492 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023ba5:	83 c4 20             	add    esp,0x20
c0023ba8:	0f b6 c3             	movzx  eax,bl
c0023bab:	0f b6 df             	movzx  ebx,bh
c0023bae:	50                   	push   eax
c0023baf:	6a 04                	push   0x4
c0023bb1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023bb8:	50                   	push   eax
c0023bb9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023bbf:	e8 ce e8 ff ff       	call   c0022492 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023bc4:	53                   	push   ebx
c0023bc5:	6a 05                	push   0x5
c0023bc7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023bce:	50                   	push   eax
c0023bcf:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023bd5:	e8 b8 e8 ff ff       	call   c0022492 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023bda:	83 c4 20             	add    esp,0x20
c0023bdd:	68 a0 00 00 00       	push   0xa0
c0023be2:	6a 07                	push   0x7
c0023be4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023beb:	50                   	push   eax
c0023bec:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023bf2:	e8 9b e8 ff ff       	call   c0022492 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023bf7:	83 c4 0c             	add    esp,0xc
c0023bfa:	6a 01                	push   0x1
c0023bfc:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023c03:	50                   	push   eax
c0023c04:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023c0a:	e8 2f f4 ff ff       	call   c002303e <IDE::polling(unsigned char, unsigned int)>
c0023c0f:	83 c4 10             	add    esp,0x10
c0023c12:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0023c18:	84 c0                	test   al,al
c0023c1a:	74 23                	je     c0023c3f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0023c1c:	0f b6 d8             	movzx  ebx,al
c0023c1f:	0f b6 d2             	movzx  edx,dl
c0023c22:	53                   	push   ebx
c0023c23:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0023c2a:	50                   	push   eax
c0023c2b:	52                   	push   edx
c0023c2c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023c32:	e8 71 f2 ff ff       	call   c0022ea8 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0023c37:	83 c4 10             	add    esp,0x10
c0023c3a:	e9 84 01 00 00       	jmp    c0023dc3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0023c3f:	0f b6 d2             	movzx  edx,dl
c0023c42:	53                   	push   ebx
c0023c43:	53                   	push   ebx
c0023c44:	52                   	push   edx
c0023c45:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023c4b:	e8 30 e8 ff ff       	call   c0022480 <IDE::getBase(unsigned char)>
c0023c50:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0023c54:	b9 06 00 00 00       	mov    ecx,0x6
c0023c59:	89 c2                	mov    edx,eax
c0023c5b:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0023c5e:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0023c62:	83 c4 10             	add    esp,0x10
c0023c65:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0023c6b:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0023c72:	85 db                	test   ebx,ebx
c0023c74:	0f 84 ec 00 00 00    	je     c0023d66 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0023c7a:	51                   	push   ecx
c0023c7b:	51                   	push   ecx
c0023c7c:	52                   	push   edx
c0023c7d:	50                   	push   eax
c0023c7e:	e8 7d e9 ff ff       	call   c0022600 <IDE::waitInterrupt(unsigned char)>
c0023c83:	83 c4 10             	add    esp,0x10
c0023c86:	84 c0                	test   al,al
c0023c88:	0f 84 d4 fe ff ff    	je     c0023b62 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0023c8e:	56                   	push   esi
c0023c8f:	56                   	push   esi
c0023c90:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023c97:	50                   	push   eax
c0023c98:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023c9e:	e8 c9 e7 ff ff       	call   c002246c <IDE::prepareInterrupt(unsigned char)>
c0023ca3:	83 c4 0c             	add    esp,0xc
c0023ca6:	6a 04                	push   0x4
c0023ca8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023caf:	50                   	push   eax
c0023cb0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023cb6:	e8 97 e8 ff ff       	call   c0022552 <IDE::read(unsigned char, unsigned char)>
c0023cbb:	83 c4 0c             	add    esp,0xc
c0023cbe:	89 c6                	mov    esi,eax
c0023cc0:	6a 05                	push   0x5
c0023cc2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023cc9:	50                   	push   eax
c0023cca:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023cd0:	e8 7d e8 ff ff       	call   c0022552 <IDE::read(unsigned char, unsigned char)>
c0023cd5:	89 f1                	mov    ecx,esi
c0023cd7:	0f b6 c0             	movzx  eax,al
c0023cda:	0f b6 f1             	movzx  esi,cl
c0023cdd:	c1 e0 08             	shl    eax,0x8
c0023ce0:	09 c6                	or     esi,eax
c0023ce2:	d1 fe                	sar    esi,1
c0023ce4:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0023ce8:	83 c4 10             	add    esp,0x10
c0023ceb:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0023cf0:	74 41                	je     c0023d33 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0023cf2:	31 c9                	xor    ecx,ecx
c0023cf4:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0023cfa:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0023d01:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0023d05:	75 0a                	jne    c0023d11 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0023d07:	01 c9                	add    ecx,ecx
c0023d09:	01 cd                	add    ebp,ecx
c0023d0b:	4b                   	dec    ebx
c0023d0c:	e9 54 ff ff ff       	jmp    c0023c65 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0023d11:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0023d16:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0023d1a:	51                   	push   ecx
c0023d1b:	51                   	push   ecx
c0023d1c:	52                   	push   edx
c0023d1d:	50                   	push   eax
c0023d1e:	e8 5d e7 ff ff       	call   c0022480 <IDE::getBase(unsigned char)>
c0023d23:	89 c2                	mov    edx,eax
c0023d25:	89 f0                	mov    eax,esi
c0023d27:	66 ef                	out    dx,ax
c0023d29:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0023d2d:	83 c4 10             	add    esp,0x10
c0023d30:	41                   	inc    ecx
c0023d31:	eb c1                	jmp    c0023cf4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0023d33:	31 f6                	xor    esi,esi
c0023d35:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0023d3b:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0023d42:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0023d46:	75 06                	jne    c0023d4e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0023d48:	01 f6                	add    esi,esi
c0023d4a:	01 f5                	add    ebp,esi
c0023d4c:	eb bd                	jmp    c0023d0b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0023d4e:	51                   	push   ecx
c0023d4f:	51                   	push   ecx
c0023d50:	52                   	push   edx
c0023d51:	50                   	push   eax
c0023d52:	e8 29 e7 ff ff       	call   c0022480 <IDE::getBase(unsigned char)>
c0023d57:	89 c2                	mov    edx,eax
c0023d59:	66 ed                	in     ax,dx
c0023d5b:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0023d60:	83 c4 10             	add    esp,0x10
c0023d63:	46                   	inc    esi
c0023d64:	eb cf                	jmp    c0023d35 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0023d66:	51                   	push   ecx
c0023d67:	51                   	push   ecx
c0023d68:	52                   	push   edx
c0023d69:	50                   	push   eax
c0023d6a:	e8 91 e8 ff ff       	call   c0022600 <IDE::waitInterrupt(unsigned char)>
c0023d6f:	83 c4 10             	add    esp,0x10
c0023d72:	84 c0                	test   al,al
c0023d74:	0f 84 e8 fd ff ff    	je     c0023b62 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0023d7a:	bb a0 86 01 00       	mov    ebx,0x186a0
c0023d7f:	52                   	push   edx
c0023d80:	52                   	push   edx
c0023d81:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023d88:	50                   	push   eax
c0023d89:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023d8f:	e8 d8 e6 ff ff       	call   c002246c <IDE::prepareInterrupt(unsigned char)>
c0023d94:	83 c4 10             	add    esp,0x10
c0023d97:	50                   	push   eax
c0023d98:	50                   	push   eax
c0023d99:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023da0:	50                   	push   eax
c0023da1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023da7:	e8 d4 e6 ff ff       	call   c0022480 <IDE::getBase(unsigned char)>
c0023dac:	8d 50 07             	lea    edx,[eax+0x7]
c0023daf:	ec                   	in     al,dx
c0023db0:	83 c4 10             	add    esp,0x10
c0023db3:	a8 88                	test   al,0x88
c0023db5:	74 0a                	je     c0023dc1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0023db7:	4b                   	dec    ebx
c0023db8:	75 dd                	jne    c0023d97 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0023dba:	bb 02 00 00 00       	mov    ebx,0x2
c0023dbf:	eb 02                	jmp    c0023dc3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0023dc1:	31 db                	xor    ebx,ebx
c0023dc3:	83 c4 1c             	add    esp,0x1c
c0023dc6:	89 d8                	mov    eax,ebx
c0023dc8:	5b                   	pop    ebx
c0023dc9:	5e                   	pop    esi
c0023dca:	5f                   	pop    edi
c0023dcb:	5d                   	pop    ebp
c0023dcc:	c3                   	ret    
c0023dcd:	90                   	nop

c0023dce <ATAPI::diskRemoved()>:
c0023dce:	83 ec 18             	sub    esp,0x18
c0023dd1:	68 f5 c2 02 c0       	push   0xc002c2f5
c0023dd6:	e8 18 eb fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0023ddb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0023ddf:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c0023de6:	83 c4 1c             	add    esp,0x1c
c0023de9:	c3                   	ret    

c0023dea <ATAPI::eject()>:
c0023dea:	57                   	push   edi
c0023deb:	b9 03 00 00 00       	mov    ecx,0x3
c0023df0:	53                   	push   ebx
c0023df1:	83 ec 14             	sub    esp,0x14
c0023df4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0023df8:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0023dfc:	fc                   	cld    
c0023dfd:	31 c0                	xor    eax,eax
c0023dff:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0023e01:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0023e06:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0023e0b:	50                   	push   eax
c0023e0c:	50                   	push   eax
c0023e0d:	6a 00                	push   0x0
c0023e0f:	6a 00                	push   0x0
c0023e11:	6a 00                	push   0x0
c0023e13:	6a 02                	push   0x2
c0023e15:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0023e19:	50                   	push   eax
c0023e1a:	53                   	push   ebx
c0023e1b:	e8 ee fc ff ff       	call   c0023b0e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0023e20:	83 c4 14             	add    esp,0x14
c0023e23:	53                   	push   ebx
c0023e24:	e8 a5 ff ff ff       	call   c0023dce <ATAPI::diskRemoved()>
c0023e29:	83 c4 24             	add    esp,0x24
c0023e2c:	31 c0                	xor    eax,eax
c0023e2e:	5b                   	pop    ebx
c0023e2f:	5f                   	pop    edi
c0023e30:	c3                   	ret    
c0023e31:	90                   	nop

c0023e32 <ATAPI::diskInserted()>:
c0023e32:	53                   	push   ebx
c0023e33:	83 ec 14             	sub    esp,0x14
c0023e36:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0023e3a:	68 0c c3 02 c0       	push   0xc002c30c
c0023e3f:	e8 af ea fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0023e44:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0023e4b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023e4e:	e8 53 03 ff ff       	call   c00141a6 <PhysicalDisk::startCache()>
c0023e53:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0023e57:	83 c4 18             	add    esp,0x18
c0023e5a:	5b                   	pop    ebx
c0023e5b:	e9 28 24 ff ff       	jmp    c0016288 <createPartitionsForDisk(PhysicalDisk*)>

c0023e60 <ATAPI::detectMedia()>:
c0023e60:	56                   	push   esi
c0023e61:	53                   	push   ebx
c0023e62:	83 ec 28             	sub    esp,0x28
c0023e65:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023e69:	6a 0c                	push   0xc
c0023e6b:	6a 00                	push   0x0
c0023e6d:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0023e71:	56                   	push   esi
c0023e72:	e8 4d c8 fd ff       	call   c00006c4 <memset>
c0023e77:	58                   	pop    eax
c0023e78:	5a                   	pop    edx
c0023e79:	6a 00                	push   0x0
c0023e7b:	6a 00                	push   0x0
c0023e7d:	6a 00                	push   0x0
c0023e7f:	6a 00                	push   0x0
c0023e81:	56                   	push   esi
c0023e82:	53                   	push   ebx
c0023e83:	e8 86 fc ff ff       	call   c0023b0e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0023e88:	83 c4 1c             	add    esp,0x1c
c0023e8b:	6a 0c                	push   0xc
c0023e8d:	6a 00                	push   0x0
c0023e8f:	56                   	push   esi
c0023e90:	e8 2f c8 fd ff       	call   c00006c4 <memset>
c0023e95:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0023e9a:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0023e9f:	59                   	pop    ecx
c0023ea0:	58                   	pop    eax
c0023ea1:	6a 01                	push   0x1
c0023ea3:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0023ea7:	50                   	push   eax
c0023ea8:	6a 00                	push   0x0
c0023eaa:	6a 12                	push   0x12
c0023eac:	56                   	push   esi
c0023ead:	53                   	push   ebx
c0023eae:	e8 5b fc ff ff       	call   c0023b0e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0023eb3:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0023eb7:	83 c4 20             	add    esp,0x20
c0023eba:	83 e0 7f             	and    eax,0x7f
c0023ebd:	3c 70                	cmp    al,0x70
c0023ebf:	74 15                	je     c0023ed6 <ATAPI::detectMedia()+0x76>
c0023ec1:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0023ec8:	75 0c                	jne    c0023ed6 <ATAPI::detectMedia()+0x76>
c0023eca:	83 ec 0c             	sub    esp,0xc
c0023ecd:	53                   	push   ebx
c0023ece:	e8 5f ff ff ff       	call   c0023e32 <ATAPI::diskInserted()>
c0023ed3:	83 c4 10             	add    esp,0x10
c0023ed6:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0023eda:	83 e0 0f             	and    eax,0xf
c0023edd:	3c 02                	cmp    al,0x2
c0023edf:	75 1b                	jne    c0023efc <ATAPI::detectMedia()+0x9c>
c0023ee1:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0023ee6:	75 2d                	jne    c0023f15 <ATAPI::detectMedia()+0xb5>
c0023ee8:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0023eef:	74 24                	je     c0023f15 <ATAPI::detectMedia()+0xb5>
c0023ef1:	83 ec 0c             	sub    esp,0xc
c0023ef4:	53                   	push   ebx
c0023ef5:	e8 d4 fe ff ff       	call   c0023dce <ATAPI::diskRemoved()>
c0023efa:	eb 16                	jmp    c0023f12 <ATAPI::detectMedia()+0xb2>
c0023efc:	84 c0                	test   al,al
c0023efe:	75 15                	jne    c0023f15 <ATAPI::detectMedia()+0xb5>
c0023f00:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0023f07:	75 0c                	jne    c0023f15 <ATAPI::detectMedia()+0xb5>
c0023f09:	83 ec 0c             	sub    esp,0xc
c0023f0c:	53                   	push   ebx
c0023f0d:	e8 20 ff ff ff       	call   c0023e32 <ATAPI::diskInserted()>
c0023f12:	83 c4 10             	add    esp,0x10
c0023f15:	83 c4 24             	add    esp,0x24
c0023f18:	5b                   	pop    ebx
c0023f19:	5e                   	pop    esi
c0023f1a:	c3                   	ret    
c0023f1b:	90                   	nop

c0023f1c <ATAPI::open(int, int, void*)>:
c0023f1c:	53                   	push   ebx
c0023f1d:	83 ec 08             	sub    esp,0x8
c0023f20:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023f24:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023f28:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023f2c:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0023f32:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0023f38:	c1 e0 06             	shl    eax,0x6
c0023f3b:	01 d0                	add    eax,edx
c0023f3d:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0023f44:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0023f4a:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0023f51:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0023f5b:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0023f61:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0023f68:	6a 04                	push   0x4
c0023f6a:	6a 0c                	push   0xc
c0023f6c:	51                   	push   ecx
c0023f6d:	52                   	push   edx
c0023f6e:	e8 1f e5 ff ff       	call   c0022492 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f73:	90                   	nop
c0023f74:	90                   	nop
c0023f75:	6a 00                	push   0x0
c0023f77:	6a 0c                	push   0xc
c0023f79:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023f80:	50                   	push   eax
c0023f81:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023f87:	e8 06 e5 ff ff       	call   c0022492 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f8c:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0023f93:	83 c4 14             	add    esp,0x14
c0023f96:	53                   	push   ebx
c0023f97:	e8 c4 fe ff ff       	call   c0023e60 <ATAPI::detectMedia()>
c0023f9c:	31 c0                	xor    eax,eax
c0023f9e:	83 c4 18             	add    esp,0x18
c0023fa1:	5b                   	pop    ebx
c0023fa2:	c3                   	ret    
c0023fa3:	90                   	nop

c0023fa4 <ATAPI::read(unsigned long long, int, void*)>:
c0023fa4:	55                   	push   ebp
c0023fa5:	57                   	push   edi
c0023fa6:	56                   	push   esi
c0023fa7:	53                   	push   ebx
c0023fa8:	83 ec 1c             	sub    esp,0x1c
c0023fab:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023faf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023fb3:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0023fb7:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0023fbe:	74 41                	je     c0024001 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0023fc0:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0023fc4:	b9 03 00 00 00       	mov    ecx,0x3
c0023fc9:	fc                   	cld    
c0023fca:	31 c0                	xor    eax,eax
c0023fcc:	86 fb                	xchg   bl,bh
c0023fce:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0023fd0:	c1 c3 10             	rol    ebx,0x10
c0023fd3:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0023fd8:	89 e8                	mov    eax,ebp
c0023fda:	86 fb                	xchg   bl,bh
c0023fdc:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0023fe0:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0023fe4:	50                   	push   eax
c0023fe5:	50                   	push   eax
c0023fe6:	55                   	push   ebp
c0023fe7:	c1 e5 0b             	shl    ebp,0xb
c0023fea:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0023fee:	6a 00                	push   0x0
c0023ff0:	55                   	push   ebp
c0023ff1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0023ff5:	50                   	push   eax
c0023ff6:	56                   	push   esi
c0023ff7:	e8 12 fb ff ff       	call   c0023b0e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0023ffc:	83 c4 20             	add    esp,0x20
c0023fff:	eb 1a                	jmp    c002401b <ATAPI::read(unsigned long long, int, void*)+0x77>
c0024001:	83 ec 0c             	sub    esp,0xc
c0024004:	56                   	push   esi
c0024005:	e8 56 fe ff ff       	call   c0023e60 <ATAPI::detectMedia()>
c002400a:	83 c4 10             	add    esp,0x10
c002400d:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024014:	75 aa                	jne    c0023fc0 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0024016:	b8 02 00 00 00       	mov    eax,0x2
c002401b:	83 c4 1c             	add    esp,0x1c
c002401e:	5b                   	pop    ebx
c002401f:	5e                   	pop    esi
c0024020:	5f                   	pop    edi
c0024021:	5d                   	pop    ebp
c0024022:	c3                   	ret    
c0024023:	90                   	nop

c0024024 <SATA::close(int, int, void*)>:
c0024024:	83 ec 0c             	sub    esp,0xc
c0024027:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002402b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024031:	85 c0                	test   eax,eax
c0024033:	74 0c                	je     c0024041 <SATA::close(int, int, void*)+0x1d>
c0024035:	83 ec 0c             	sub    esp,0xc
c0024038:	8b 10                	mov    edx,DWORD PTR [eax]
c002403a:	50                   	push   eax
c002403b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002403e:	83 c4 10             	add    esp,0x10
c0024041:	31 c0                	xor    eax,eax
c0024043:	83 c4 0c             	add    esp,0xc
c0024046:	c3                   	ret    
c0024047:	90                   	nop

c0024048 <SATA::powerSaving(PowerSavingLevel)>:
c0024048:	c3                   	ret    
c0024049:	90                   	nop

c002404a <SATA::open(int, int, void*)>:
c002404a:	56                   	push   esi
c002404b:	53                   	push   ebx
c002404c:	50                   	push   eax
c002404d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024051:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024055:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002405f:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024065:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002406f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024073:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002407d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024083:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002408a:	e8 32 bc fe ff       	call   c000fcc1 <Phys::allocatePage()>
c002408f:	89 c6                	mov    esi,eax
c0024091:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024097:	81 c6 00 10 00 00    	add    esi,0x1000
c002409d:	e8 1f bc fe ff       	call   c000fcc1 <Phys::allocatePage()>
c00240a2:	39 c6                	cmp    esi,eax
c00240a4:	74 10                	je     c00240b6 <SATA::open(int, int, void*)+0x6c>
c00240a6:	83 ec 0c             	sub    esp,0xc
c00240a9:	68 dc c1 02 c0       	push   0xc002c1dc
c00240ae:	e8 9a 5b ff ff       	call   c0019c4d <Krnl::panic(char const*)>
c00240b3:	83 c4 10             	add    esp,0x10
c00240b6:	83 ec 0c             	sub    esp,0xc
c00240b9:	6a 02                	push   0x2
c00240bb:	e8 43 d8 fe ff       	call   c0011903 <Virt::allocateKernelVirtualPages(int)>
c00240c0:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00240c6:	e8 c8 d9 fe ff       	call   c0011a93 <Virt::getAKernelVAS()>
c00240cb:	6a 03                	push   0x3
c00240cd:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c00240d3:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c00240d9:	50                   	push   eax
c00240da:	e8 ef de fe ff       	call   c0011fce <VAS::mapPage(unsigned long, unsigned long, int)>
c00240df:	83 c4 14             	add    esp,0x14
c00240e2:	68 f0 c1 02 c0       	push   0xc002c1f0
c00240e7:	e8 07 e8 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00240ec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00240ef:	e8 b2 00 ff ff       	call   c00141a6 <PhysicalDisk::startCache()>
c00240f4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00240f7:	e8 8c 21 ff ff       	call   c0016288 <createPartitionsForDisk(PhysicalDisk*)>
c00240fc:	83 c4 14             	add    esp,0x14
c00240ff:	31 c0                	xor    eax,eax
c0024101:	5b                   	pop    ebx
c0024102:	5e                   	pop    esi
c0024103:	c3                   	ret    

c0024104 <SATA::SATA()>:
c0024104:	83 ec 0c             	sub    esp,0xc
c0024107:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002410b:	83 ec 04             	sub    esp,0x4
c002410e:	68 00 02 00 00       	push   0x200
c0024113:	68 0b c2 02 c0       	push   0xc002c20b
c0024118:	50                   	push   eax
c0024119:	e8 20 00 ff ff       	call   c001413e <PhysicalDisk::PhysicalDisk(char const*, int)>
c002411e:	83 c4 10             	add    esp,0x10
c0024121:	ba b8 c2 02 c0       	mov    edx,0xc002c2b8
c0024126:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002412a:	89 10                	mov    DWORD PTR [eax],edx
c002412c:	90                   	nop
c002412d:	83 c4 0c             	add    esp,0xc
c0024130:	c3                   	ret    
c0024131:	90                   	nop

c0024132 <SATA::access(unsigned long long, int, void*, bool)>:
c0024132:	55                   	push   ebp
c0024133:	57                   	push   edi
c0024134:	56                   	push   esi
c0024135:	53                   	push   ebx
c0024136:	83 ec 2c             	sub    esp,0x2c
c0024139:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c002413d:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0024141:	89 04 24             	mov    DWORD PTR [esp],eax
c0024144:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0024148:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002414c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0024150:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024154:	b8 21 c2 02 c0       	mov    eax,0xc002c221
c0024159:	0f b6 5c 24 0c       	movzx  ebx,BYTE PTR [esp+0xc]
c002415e:	84 db                	test   bl,bl
c0024160:	74 05                	je     c0024167 <SATA::access(unsigned long long, int, void*, bool)+0x35>
c0024162:	b8 1b c2 02 c0       	mov    eax,0xc002c21b
c0024167:	83 ec 0c             	sub    esp,0xc
c002416a:	50                   	push   eax
c002416b:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c002416f:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0024173:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0024177:	68 26 c2 02 c0       	push   0xc002c226
c002417c:	e8 72 e7 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0024181:	83 c4 20             	add    esp,0x20
c0024184:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0024189:	7e 30                	jle    c00241bb <SATA::access(unsigned long long, int, void*, bool)+0x89>
c002418b:	51                   	push   ecx
c002418c:	51                   	push   ecx
c002418d:	53                   	push   ebx
c002418e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0024192:	6a 10                	push   0x10
c0024194:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0024198:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002419c:	55                   	push   ebp
c002419d:	e8 90 ff ff ff       	call   c0024132 <SATA::access(unsigned long long, int, void*, bool)>
c00241a2:	83 6c 24 6c 10       	sub    DWORD PTR [esp+0x6c],0x10
c00241a7:	83 44 24 20 10       	add    DWORD PTR [esp+0x20],0x10
c00241ac:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c00241b1:	81 44 24 70 00 20 00 00 	add    DWORD PTR [esp+0x70],0x2000
c00241b9:	eb c6                	jmp    c0024181 <SATA::access(unsigned long long, int, void*, bool)+0x4f>
c00241bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00241bf:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00241c2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00241c6:	8b 9d 6c 01 00 00    	mov    ebx,DWORD PTR [ebp+0x16c]
c00241cc:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c00241d2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00241d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00241dc:	89 d8                	mov    eax,ebx
c00241de:	c1 e0 07             	shl    eax,0x7
c00241e1:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00241e5:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c00241ef:	57                   	push   edi
c00241f0:	8d 43 02             	lea    eax,[ebx+0x2]
c00241f3:	57                   	push   edi
c00241f4:	c1 e0 07             	shl    eax,0x7
c00241f7:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00241fb:	50                   	push   eax
c00241fc:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0024202:	e8 4f ef ff ff       	call   c0023156 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024207:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c002420b:	58                   	pop    eax
c002420c:	5a                   	pop    edx
c002420d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024211:	68 58 c2 02 c0       	push   0xc002c258
c0024216:	e8 d8 e6 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c002421b:	83 c4 10             	add    esp,0x10
c002421e:	b9 01 00 00 00       	mov    ecx,0x1
c0024223:	83 7c 24 14 ff       	cmp    DWORD PTR [esp+0x14],0xffffffff
c0024228:	0f 84 e7 01 00 00    	je     c0024415 <SATA::access(unsigned long long, int, void*, bool)+0x2e3>
c002422e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024232:	c1 e0 09             	shl    eax,0x9
c0024235:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c002423a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002423e:	74 17                	je     c0024257 <SATA::access(unsigned long long, int, void*, bool)+0x125>
c0024240:	51                   	push   ecx
c0024241:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024245:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0024249:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c002424f:	e8 4c c4 fd ff       	call   c00006a0 <memcpy>
c0024254:	83 c4 10             	add    esp,0x10
c0024257:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c002425d:	8d 43 02             	lea    eax,[ebx+0x2]
c0024260:	c1 e0 07             	shl    eax,0x7
c0024263:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0024267:	8b 00                	mov    eax,DWORD PTR [eax]
c0024269:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c002426f:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024275:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024279:	c1 e1 05             	shl    ecx,0x5
c002427c:	01 c8                	add    eax,ecx
c002427e:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0024282:	8b 38                	mov    edi,DWORD PTR [eax]
c0024284:	83 e1 01             	and    ecx,0x1
c0024287:	83 e7 bf             	and    edi,0xffffffbf
c002428a:	c1 e1 06             	shl    ecx,0x6
c002428d:	09 f9                	or     ecx,edi
c002428f:	88 08                	mov    BYTE PTR [eax],cl
c0024291:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024293:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0024299:	81 c9 05 00 01 00    	or     ecx,0x10005
c002429f:	89 08                	mov    DWORD PTR [eax],ecx
c00242a1:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c00242a7:	8b b9 58 01 00 00    	mov    edi,DWORD PTR [ecx+0x158]
c00242ad:	2b b9 5c 01 00 00    	sub    edi,DWORD PTR [ecx+0x15c]
c00242b3:	03 78 08             	add    edi,DWORD PTR [eax+0x8]
c00242b6:	52                   	push   edx
c00242b7:	68 90 00 00 00       	push   0x90
c00242bc:	6a 00                	push   0x0
c00242be:	57                   	push   edi
c00242bf:	e8 00 c4 fd ff       	call   c00006c4 <memset>
c00242c4:	8b 85 74 01 00 00    	mov    eax,DWORD PTR [ebp+0x174]
c00242ca:	c6 47 07 40          	mov    BYTE PTR [edi+0x7],0x40
c00242ce:	89 87 80 00 00 00    	mov    DWORD PTR [edi+0x80],eax
c00242d4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00242d8:	83 c4 10             	add    esp,0x10
c00242db:	8d 48 ff             	lea    ecx,[eax-0x1]
c00242de:	8b 87 8c 00 00 00    	mov    eax,DWORD PTR [edi+0x8c]
c00242e4:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c00242ea:	25 00 00 c0 ff       	and    eax,0xffc00000
c00242ef:	09 c8                	or     eax,ecx
c00242f1:	89 87 8c 00 00 00    	mov    DWORD PTR [edi+0x8c],eax
c00242f7:	66 8b 07             	mov    ax,WORD PTR [edi]
c00242fa:	80 8f 8f 00 00 00 80 	or     BYTE PTR [edi+0x8f],0x80
c0024301:	66 25 00 7f          	and    ax,0x7f00
c0024305:	66 0d 27 80          	or     ax,0x8027
c0024309:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c002430e:	66 89 07             	mov    WORD PTR [edi],ax
c0024311:	19 c0                	sbb    eax,eax
c0024313:	83 e0 f0             	and    eax,0xfffffff0
c0024316:	83 c0 35             	add    eax,0x35
c0024319:	88 47 02             	mov    BYTE PTR [edi+0x2],al
c002431c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002431f:	66 89 47 04          	mov    WORD PTR [edi+0x4],ax
c0024323:	89 f0                	mov    eax,esi
c0024325:	c1 e8 10             	shr    eax,0x10
c0024328:	88 47 06             	mov    BYTE PTR [edi+0x6],al
c002432b:	89 f0                	mov    eax,esi
c002432d:	89 de                	mov    esi,ebx
c002432f:	c1 e8 18             	shr    eax,0x18
c0024332:	c1 e6 07             	shl    esi,0x7
c0024335:	88 47 08             	mov    BYTE PTR [edi+0x8],al
c0024338:	03 74 24 10          	add    esi,DWORD PTR [esp+0x10]
c002433c:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0024340:	88 47 09             	mov    BYTE PTR [edi+0x9],al
c0024343:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024347:	88 67 0a             	mov    BYTE PTR [edi+0xa],ah
c002434a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002434e:	66 89 47 0c          	mov    WORD PTR [edi+0xc],ax
c0024352:	31 c0                	xor    eax,eax
c0024354:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c002435a:	80 e1 88             	and    cl,0x88
c002435d:	74 0a                	je     c0024369 <SATA::access(unsigned long long, int, void*, bool)+0x237>
c002435f:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024364:	74 0a                	je     c0024370 <SATA::access(unsigned long long, int, void*, bool)+0x23e>
c0024366:	40                   	inc    eax
c0024367:	eb eb                	jmp    c0024354 <SATA::access(unsigned long long, int, void*, bool)+0x222>
c0024369:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002436e:	75 0a                	jne    c002437a <SATA::access(unsigned long long, int, void*, bool)+0x248>
c0024370:	83 ec 0c             	sub    esp,0xc
c0024373:	68 61 c2 02 c0       	push   0xc002c261
c0024378:	eb 56                	jmp    c00243d0 <SATA::access(unsigned long long, int, void*, bool)+0x29e>
c002437a:	b8 01 00 00 00       	mov    eax,0x1
c002437f:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
c0024383:	c1 e3 07             	shl    ebx,0x7
c0024386:	d3 e0                	shl    eax,cl
c0024388:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c002438c:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c0024392:	8b 8b 38 01 00 00    	mov    ecx,DWORD PTR [ebx+0x138]
c0024398:	85 c8                	test   eax,ecx
c002439a:	74 20                	je     c00243bc <SATA::access(unsigned long long, int, void*, bool)+0x28a>
c002439c:	8b 8b 10 01 00 00    	mov    ecx,DWORD PTR [ebx+0x110]
c00243a2:	0f ba e1 1e          	bt     ecx,0x1e
c00243a6:	73 ea                	jae    c0024392 <SATA::access(unsigned long long, int, void*, bool)+0x260>
c00243a8:	83 ec 0c             	sub    esp,0xc
c00243ab:	68 6f c2 02 c0       	push   0xc002c26f
c00243b0:	e8 98 58 ff ff       	call   c0019c4d <Krnl::panic(char const*)>
c00243b5:	83 c4 10             	add    esp,0x10
c00243b8:	31 c9                	xor    ecx,ecx
c00243ba:	eb 59                	jmp    c0024415 <SATA::access(unsigned long long, int, void*, bool)+0x2e3>
c00243bc:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c00243c2:	0f ba e0 1e          	bt     eax,0x1e
c00243c6:	73 17                	jae    c00243df <SATA::access(unsigned long long, int, void*, bool)+0x2ad>
c00243c8:	83 ec 0c             	sub    esp,0xc
c00243cb:	68 6f c2 02 c0       	push   0xc002c26f
c00243d0:	e8 78 58 ff ff       	call   c0019c4d <Krnl::panic(char const*)>
c00243d5:	83 c4 10             	add    esp,0x10
c00243d8:	b9 01 00 00 00       	mov    ecx,0x1
c00243dd:	eb 36                	jmp    c0024415 <SATA::access(unsigned long long, int, void*, bool)+0x2e3>
c00243df:	83 ec 0c             	sub    esp,0xc
c00243e2:	68 80 c2 02 c0       	push   0xc002c280
c00243e7:	e8 07 e5 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00243ec:	83 c4 10             	add    esp,0x10
c00243ef:	31 c9                	xor    ecx,ecx
c00243f1:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00243f6:	75 1d                	jne    c0024415 <SATA::access(unsigned long long, int, void*, bool)+0x2e3>
c00243f8:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00243fb:	50                   	push   eax
c00243fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024400:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024406:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c002440a:	e8 91 c2 fd ff       	call   c00006a0 <memcpy>
c002440f:	83 c4 10             	add    esp,0x10
c0024412:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0024415:	83 c4 2c             	add    esp,0x2c
c0024418:	89 c8                	mov    eax,ecx
c002441a:	5b                   	pop    ebx
c002441b:	5e                   	pop    esi
c002441c:	5f                   	pop    edi
c002441d:	5d                   	pop    ebp
c002441e:	c3                   	ret    
c002441f:	90                   	nop

c0024420 <SATA::read(unsigned long long, int, void*)>:
c0024420:	55                   	push   ebp
c0024421:	b8 04 00 00 00       	mov    eax,0x4
c0024426:	57                   	push   edi
c0024427:	56                   	push   esi
c0024428:	53                   	push   ebx
c0024429:	83 ec 1c             	sub    esp,0x1c
c002442c:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024430:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0024434:	8d 55 ff             	lea    edx,[ebp-0x1]
c0024437:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002443b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002443f:	81 fa fe 00 00 00    	cmp    edx,0xfe
c0024445:	77 4b                	ja     c0024492 <SATA::read(unsigned long long, int, void*)+0x72>
c0024447:	b8 06 00 00 00       	mov    eax,0x6
c002444c:	85 db                	test   ebx,ebx
c002444e:	74 42                	je     c0024492 <SATA::read(unsigned long long, int, void*)+0x72>
c0024450:	52                   	push   edx
c0024451:	52                   	push   edx
c0024452:	6a 00                	push   0x0
c0024454:	53                   	push   ebx
c0024455:	55                   	push   ebp
c0024456:	57                   	push   edi
c0024457:	56                   	push   esi
c0024458:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002445c:	e8 d1 fc ff ff       	call   c0024132 <SATA::access(unsigned long long, int, void*, bool)>
c0024461:	83 c4 20             	add    esp,0x20
c0024464:	85 c0                	test   eax,eax
c0024466:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002446a:	75 21                	jne    c002448d <SATA::read(unsigned long long, int, void*)+0x6d>
c002446c:	01 2d c8 fb 02 c0    	add    DWORD PTR ds:0xc002fbc8,ebp
c0024472:	e8 e1 c2 fe ff       	call   c0010758 <VgaText::updateDiskUsage()>
c0024477:	50                   	push   eax
c0024478:	50                   	push   eax
c0024479:	53                   	push   ebx
c002447a:	68 98 c2 02 c0       	push   0xc002c298
c002447f:	e8 6f e4 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0024484:	83 c4 10             	add    esp,0x10
c0024487:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002448b:	eb 05                	jmp    c0024492 <SATA::read(unsigned long long, int, void*)+0x72>
c002448d:	b8 01 00 00 00       	mov    eax,0x1
c0024492:	83 c4 1c             	add    esp,0x1c
c0024495:	5b                   	pop    ebx
c0024496:	5e                   	pop    esi
c0024497:	5f                   	pop    edi
c0024498:	5d                   	pop    ebp
c0024499:	c3                   	ret    

c002449a <SATA::write(unsigned long long, int, void*)>:
c002449a:	57                   	push   edi
c002449b:	b8 04 00 00 00       	mov    eax,0x4
c00244a0:	56                   	push   esi
c00244a1:	53                   	push   ebx
c00244a2:	83 ec 10             	sub    esp,0x10
c00244a5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00244a9:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00244ad:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00244b0:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00244b4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00244b8:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00244be:	77 3b                	ja     c00244fb <SATA::write(unsigned long long, int, void*)+0x61>
c00244c0:	b8 06 00 00 00       	mov    eax,0x6
c00244c5:	85 d2                	test   edx,edx
c00244c7:	74 32                	je     c00244fb <SATA::write(unsigned long long, int, void*)+0x61>
c00244c9:	50                   	push   eax
c00244ca:	50                   	push   eax
c00244cb:	6a 01                	push   0x1
c00244cd:	52                   	push   edx
c00244ce:	53                   	push   ebx
c00244cf:	57                   	push   edi
c00244d0:	56                   	push   esi
c00244d1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00244d5:	e8 58 fc ff ff       	call   c0024132 <SATA::access(unsigned long long, int, void*, bool)>
c00244da:	83 c4 20             	add    esp,0x20
c00244dd:	85 c0                	test   eax,eax
c00244df:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00244e3:	75 11                	jne    c00244f6 <SATA::write(unsigned long long, int, void*)+0x5c>
c00244e5:	01 1d c4 fb 02 c0    	add    DWORD PTR ds:0xc002fbc4,ebx
c00244eb:	e8 68 c2 fe ff       	call   c0010758 <VgaText::updateDiskUsage()>
c00244f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00244f4:	eb 05                	jmp    c00244fb <SATA::write(unsigned long long, int, void*)+0x61>
c00244f6:	b8 01 00 00 00       	mov    eax,0x1
c00244fb:	83 c4 10             	add    esp,0x10
c00244fe:	5b                   	pop    ebx
c00244ff:	5e                   	pop    esi
c0024500:	5f                   	pop    edi
c0024501:	c3                   	ret    

c0024502 <SATAPI::write(unsigned long long, int, void*)>:
c0024502:	b8 03 00 00 00       	mov    eax,0x3
c0024507:	c3                   	ret    

c0024508 <SATAPI::close(int, int, void*)>:
c0024508:	83 ec 0c             	sub    esp,0xc
c002450b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002450f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024515:	85 c0                	test   eax,eax
c0024517:	74 0c                	je     c0024525 <SATAPI::close(int, int, void*)+0x1d>
c0024519:	83 ec 0c             	sub    esp,0xc
c002451c:	8b 10                	mov    edx,DWORD PTR [eax]
c002451e:	50                   	push   eax
c002451f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024522:	83 c4 10             	add    esp,0x10
c0024525:	31 c0                	xor    eax,eax
c0024527:	83 c4 0c             	add    esp,0xc
c002452a:	c3                   	ret    
c002452b:	90                   	nop

c002452c <SATAPI::SATAPI()>:
c002452c:	83 ec 0c             	sub    esp,0xc
c002452f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024533:	83 ec 04             	sub    esp,0x4
c0024536:	68 00 08 00 00       	push   0x800
c002453b:	68 e8 c2 02 c0       	push   0xc002c2e8
c0024540:	50                   	push   eax
c0024541:	e8 f8 fb fe ff       	call   c001413e <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024546:	83 c4 10             	add    esp,0x10
c0024549:	ba 2c c4 02 c0       	mov    edx,0xc002c42c
c002454e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024552:	89 10                	mov    DWORD PTR [eax],edx
c0024554:	90                   	nop
c0024555:	83 c4 0c             	add    esp,0xc
c0024558:	c3                   	ret    
c0024559:	90                   	nop

c002455a <SATAPI::diskRemoved()>:
c002455a:	83 ec 18             	sub    esp,0x18
c002455d:	68 f4 c2 02 c0       	push   0xc002c2f4
c0024562:	e8 8c e3 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0024567:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002456b:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0024572:	83 c4 1c             	add    esp,0x1c
c0024575:	c3                   	ret    

c0024576 <SATAPI::diskInserted()>:
c0024576:	53                   	push   ebx
c0024577:	83 ec 14             	sub    esp,0x14
c002457a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002457e:	68 0b c3 02 c0       	push   0xc002c30b
c0024583:	e8 6b e3 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0024588:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c002458f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024592:	e8 0f fc fe ff       	call   c00141a6 <PhysicalDisk::startCache()>
c0024597:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c002459b:	83 c4 18             	add    esp,0x18
c002459e:	5b                   	pop    ebx
c002459f:	e9 e4 1c ff ff       	jmp    c0016288 <createPartitionsForDisk(PhysicalDisk*)>

c00245a4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c00245a4:	55                   	push   ebp
c00245a5:	57                   	push   edi
c00245a6:	56                   	push   esi
c00245a7:	53                   	push   ebx
c00245a8:	83 ec 38             	sub    esp,0x38
c00245ab:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c00245af:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00245b3:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00245b7:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c00245bb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00245bf:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00245c3:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00245c7:	52                   	push   edx
c00245c8:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00245cc:	55                   	push   ebp
c00245cd:	68 23 c3 02 c0       	push   0xc002c323
c00245d2:	e8 1c e3 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00245d7:	8b be 6c 01 00 00    	mov    edi,DWORD PTR [esi+0x16c]
c00245dd:	8b 86 70 01 00 00    	mov    eax,DWORD PTR [esi+0x170]
c00245e3:	8d 5f 02             	lea    ebx,[edi+0x2]
c00245e6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00245ec:	c1 e3 07             	shl    ebx,0x7
c00245ef:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00245f3:	89 f8                	mov    eax,edi
c00245f5:	c1 e0 07             	shl    eax,0x7
c00245f8:	03 44 24 2c          	add    eax,DWORD PTR [esp+0x2c]
c00245fc:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0024600:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c002460a:	83 c4 18             	add    esp,0x18
c002460d:	03 5c 24 14          	add    ebx,DWORD PTR [esp+0x14]
c0024611:	53                   	push   ebx
c0024612:	ff b6 70 01 00 00    	push   DWORD PTR [esi+0x170]
c0024618:	e8 39 eb ff ff       	call   c0023156 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c002461d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0024621:	83 c4 10             	add    esp,0x10
c0024624:	b8 01 00 00 00       	mov    eax,0x1
c0024629:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c002462e:	0f 84 c6 01 00 00    	je     c00247fa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x256>
c0024634:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c002463a:	8b 03                	mov    eax,DWORD PTR [ebx]
c002463c:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024642:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024648:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002464c:	c1 e1 05             	shl    ecx,0x5
c002464f:	01 c8                	add    eax,ecx
c0024651:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024653:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0024659:	81 c9 25 00 01 00    	or     ecx,0x10025
c002465f:	89 08                	mov    DWORD PTR [eax],ecx
c0024661:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c0024667:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c002466d:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0024673:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0024676:	50                   	push   eax
c0024677:	68 90 00 00 00       	push   0x90
c002467c:	6a 00                	push   0x0
c002467e:	53                   	push   ebx
c002467f:	e8 40 c0 fd ff       	call   c00006c4 <memset>
c0024684:	c7 04 24 5d c3 02 c0 	mov    DWORD PTR [esp],0xc002c35d
c002468b:	e8 63 e2 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0024690:	83 c4 0c             	add    esp,0xc
c0024693:	8d 43 40             	lea    eax,[ebx+0x40]
c0024696:	6a 0c                	push   0xc
c0024698:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002469c:	50                   	push   eax
c002469d:	e8 fe bf fd ff       	call   c00006a0 <memcpy>
c00246a2:	c7 04 24 67 c3 02 c0 	mov    DWORD PTR [esp],0xc002c367
c00246a9:	e8 45 e2 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00246ae:	8b 86 78 01 00 00    	mov    eax,DWORD PTR [esi+0x178]
c00246b4:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00246b7:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c00246bd:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c00246c3:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c00246c9:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c00246cd:	25 00 00 c0 ff       	and    eax,0xffc00000
c00246d2:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c00246d6:	09 c8                	or     eax,ecx
c00246d8:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c00246de:	66 8b 03             	mov    ax,WORD PTR [ebx]
c00246e1:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c00246e8:	66 25 00 7f          	and    ax,0x7f00
c00246ec:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00246f0:	66 0d 27 80          	or     ax,0x8027
c00246f4:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c00246f8:	66 89 03             	mov    WORD PTR [ebx],ax
c00246fb:	89 d0                	mov    eax,edx
c00246fd:	c1 ea 18             	shr    edx,0x18
c0024700:	c1 e8 10             	shr    eax,0x10
c0024703:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0024706:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024709:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c002470d:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0024710:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024714:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024717:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002471b:	83 c4 10             	add    esp,0x10
c002471e:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0024722:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0024726:	31 c0                	xor    eax,eax
c0024728:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c002472e:	80 e1 88             	and    cl,0x88
c0024731:	74 0a                	je     c002473d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x199>
c0024733:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024738:	74 0a                	je     c0024744 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1a0>
c002473a:	40                   	inc    eax
c002473b:	eb eb                	jmp    c0024728 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x184>
c002473d:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024742:	75 0f                	jne    c0024753 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1af>
c0024744:	83 ec 0c             	sub    esp,0xc
c0024747:	68 61 c2 02 c0       	push   0xc002c261
c002474c:	e8 fc 54 ff ff       	call   c0019c4d <Krnl::panic(char const*)>
c0024751:	eb 3b                	jmp    c002478e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ea>
c0024753:	b8 01 00 00 00       	mov    eax,0x1
c0024758:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c002475c:	c1 e7 07             	shl    edi,0x7
c002475f:	d3 e0                	shl    eax,cl
c0024761:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0024765:	89 82 38 01 00 00    	mov    DWORD PTR [edx+0x138],eax
c002476b:	8b 97 38 01 00 00    	mov    edx,DWORD PTR [edi+0x138]
c0024771:	85 d0                	test   eax,edx
c0024773:	74 23                	je     c0024798 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f4>
c0024775:	8b 97 10 01 00 00    	mov    edx,DWORD PTR [edi+0x110]
c002477b:	0f ba e2 1e          	bt     edx,0x1e
c002477f:	73 ea                	jae    c002476b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c7>
c0024781:	83 ec 0c             	sub    esp,0xc
c0024784:	68 72 c3 02 c0       	push   0xc002c372
c0024789:	e8 65 e1 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c002478e:	83 c4 10             	add    esp,0x10
c0024791:	b8 01 00 00 00       	mov    eax,0x1
c0024796:	eb 62                	jmp    c00247fa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x256>
c0024798:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c002479e:	0f ba e0 1e          	bt     eax,0x1e
c00247a2:	73 0a                	jae    c00247ae <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20a>
c00247a4:	83 ec 0c             	sub    esp,0xc
c00247a7:	68 85 c3 02 c0       	push   0xc002c385
c00247ac:	eb db                	jmp    c0024789 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e5>
c00247ae:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c00247b3:	74 33                	je     c00247e8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x244>
c00247b5:	85 ed                	test   ebp,ebp
c00247b7:	74 2f                	je     c00247e8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x244>
c00247b9:	83 ec 0c             	sub    esp,0xc
c00247bc:	68 9a c3 02 c0       	push   0xc002c39a
c00247c1:	e8 2d e1 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00247c6:	83 c4 0c             	add    esp,0xc
c00247c9:	55                   	push   ebp
c00247ca:	ff b6 7c 01 00 00    	push   DWORD PTR [esi+0x17c]
c00247d0:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c00247d4:	e8 c7 be fd ff       	call   c00006a0 <memcpy>
c00247d9:	c7 04 24 a4 c3 02 c0 	mov    DWORD PTR [esp],0xc002c3a4
c00247e0:	e8 0e e1 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00247e5:	83 c4 10             	add    esp,0x10
c00247e8:	83 ec 0c             	sub    esp,0xc
c00247eb:	68 af c3 02 c0       	push   0xc002c3af
c00247f0:	e8 fe e0 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00247f5:	83 c4 10             	add    esp,0x10
c00247f8:	31 c0                	xor    eax,eax
c00247fa:	83 c4 2c             	add    esp,0x2c
c00247fd:	5b                   	pop    ebx
c00247fe:	5e                   	pop    esi
c00247ff:	5f                   	pop    edi
c0024800:	5d                   	pop    ebp
c0024801:	c3                   	ret    

c0024802 <SATAPI::eject()>:
c0024802:	57                   	push   edi
c0024803:	b9 03 00 00 00       	mov    ecx,0x3
c0024808:	53                   	push   ebx
c0024809:	83 ec 14             	sub    esp,0x14
c002480c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0024810:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024814:	fc                   	cld    
c0024815:	31 c0                	xor    eax,eax
c0024817:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024819:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002481e:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0024823:	50                   	push   eax
c0024824:	6a 00                	push   0x0
c0024826:	6a 00                	push   0x0
c0024828:	6a 00                	push   0x0
c002482a:	6a 00                	push   0x0
c002482c:	6a 02                	push   0x2
c002482e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024832:	50                   	push   eax
c0024833:	53                   	push   ebx
c0024834:	e8 6b fd ff ff       	call   c00245a4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0024839:	83 c4 14             	add    esp,0x14
c002483c:	53                   	push   ebx
c002483d:	e8 18 fd ff ff       	call   c002455a <SATAPI::diskRemoved()>
c0024842:	83 c4 24             	add    esp,0x24
c0024845:	31 c0                	xor    eax,eax
c0024847:	5b                   	pop    ebx
c0024848:	5f                   	pop    edi
c0024849:	c3                   	ret    

c002484a <SATAPI::detectMedia()>:
c002484a:	56                   	push   esi
c002484b:	53                   	push   ebx
c002484c:	83 ec 28             	sub    esp,0x28
c002484f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024853:	6a 0c                	push   0xc
c0024855:	6a 00                	push   0x0
c0024857:	8d 74 24 0e          	lea    esi,[esp+0xe]
c002485b:	56                   	push   esi
c002485c:	e8 63 be fd ff       	call   c00006c4 <memset>
c0024861:	83 c4 0c             	add    esp,0xc
c0024864:	6a 00                	push   0x0
c0024866:	6a 00                	push   0x0
c0024868:	6a 00                	push   0x0
c002486a:	6a 00                	push   0x0
c002486c:	6a 00                	push   0x0
c002486e:	56                   	push   esi
c002486f:	53                   	push   ebx
c0024870:	e8 2f fd ff ff       	call   c00245a4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0024875:	83 c4 1c             	add    esp,0x1c
c0024878:	6a 0c                	push   0xc
c002487a:	6a 00                	push   0x0
c002487c:	56                   	push   esi
c002487d:	e8 42 be fd ff       	call   c00006c4 <memset>
c0024882:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0024887:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c002488c:	83 c4 0c             	add    esp,0xc
c002488f:	6a 01                	push   0x1
c0024891:	8d 44 24 16          	lea    eax,[esp+0x16]
c0024895:	50                   	push   eax
c0024896:	6a 00                	push   0x0
c0024898:	6a 00                	push   0x0
c002489a:	6a 12                	push   0x12
c002489c:	56                   	push   esi
c002489d:	53                   	push   ebx
c002489e:	e8 01 fd ff ff       	call   c00245a4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00248a3:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c00248a7:	83 c4 20             	add    esp,0x20
c00248aa:	83 e0 7f             	and    eax,0x7f
c00248ad:	3c 70                	cmp    al,0x70
c00248af:	74 15                	je     c00248c6 <SATAPI::detectMedia()+0x7c>
c00248b1:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00248b8:	75 0c                	jne    c00248c6 <SATAPI::detectMedia()+0x7c>
c00248ba:	83 ec 0c             	sub    esp,0xc
c00248bd:	53                   	push   ebx
c00248be:	e8 b3 fc ff ff       	call   c0024576 <SATAPI::diskInserted()>
c00248c3:	83 c4 10             	add    esp,0x10
c00248c6:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00248ca:	83 e0 0f             	and    eax,0xf
c00248cd:	3c 02                	cmp    al,0x2
c00248cf:	75 1b                	jne    c00248ec <SATAPI::detectMedia()+0xa2>
c00248d1:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00248d6:	75 2d                	jne    c0024905 <SATAPI::detectMedia()+0xbb>
c00248d8:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00248df:	74 24                	je     c0024905 <SATAPI::detectMedia()+0xbb>
c00248e1:	83 ec 0c             	sub    esp,0xc
c00248e4:	53                   	push   ebx
c00248e5:	e8 70 fc ff ff       	call   c002455a <SATAPI::diskRemoved()>
c00248ea:	eb 16                	jmp    c0024902 <SATAPI::detectMedia()+0xb8>
c00248ec:	84 c0                	test   al,al
c00248ee:	75 15                	jne    c0024905 <SATAPI::detectMedia()+0xbb>
c00248f0:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00248f7:	75 0c                	jne    c0024905 <SATAPI::detectMedia()+0xbb>
c00248f9:	83 ec 0c             	sub    esp,0xc
c00248fc:	53                   	push   ebx
c00248fd:	e8 74 fc ff ff       	call   c0024576 <SATAPI::diskInserted()>
c0024902:	83 c4 10             	add    esp,0x10
c0024905:	83 c4 24             	add    esp,0x24
c0024908:	5b                   	pop    ebx
c0024909:	5e                   	pop    esi
c002490a:	c3                   	ret    
c002490b:	90                   	nop

c002490c <SATAPI::open(int, int, void*)>:
c002490c:	56                   	push   esi
c002490d:	53                   	push   ebx
c002490e:	50                   	push   eax
c002490f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024913:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024917:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024921:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024927:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024931:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024935:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002493f:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024945:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002494c:	e8 70 b3 fe ff       	call   c000fcc1 <Phys::allocatePage()>
c0024951:	89 c6                	mov    esi,eax
c0024953:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024959:	81 c6 00 10 00 00    	add    esi,0x1000
c002495f:	e8 5d b3 fe ff       	call   c000fcc1 <Phys::allocatePage()>
c0024964:	39 c6                	cmp    esi,eax
c0024966:	74 10                	je     c0024978 <SATAPI::open(int, int, void*)+0x6c>
c0024968:	83 ec 0c             	sub    esp,0xc
c002496b:	68 c4 c3 02 c0       	push   0xc002c3c4
c0024970:	e8 d8 52 ff ff       	call   c0019c4d <Krnl::panic(char const*)>
c0024975:	83 c4 10             	add    esp,0x10
c0024978:	83 ec 0c             	sub    esp,0xc
c002497b:	6a 02                	push   0x2
c002497d:	e8 81 cf fe ff       	call   c0011903 <Virt::allocateKernelVirtualPages(int)>
c0024982:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0024988:	e8 06 d1 fe ff       	call   c0011a93 <Virt::getAKernelVAS()>
c002498d:	6a 03                	push   0x3
c002498f:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c0024995:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c002499b:	50                   	push   eax
c002499c:	e8 2d d6 fe ff       	call   c0011fce <VAS::mapPage(unsigned long, unsigned long, int)>
c00249a1:	83 c4 14             	add    esp,0x14
c00249a4:	68 da c3 02 c0       	push   0xc002c3da
c00249a9:	e8 45 df fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00249ae:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c00249b5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00249b8:	e8 8d fe ff ff       	call   c002484a <SATAPI::detectMedia()>
c00249bd:	83 c4 14             	add    esp,0x14
c00249c0:	31 c0                	xor    eax,eax
c00249c2:	5b                   	pop    ebx
c00249c3:	5e                   	pop    esi
c00249c4:	c3                   	ret    
c00249c5:	90                   	nop

c00249c6 <SATAPI::read(unsigned long long, int, void*)>:
c00249c6:	55                   	push   ebp
c00249c7:	57                   	push   edi
c00249c8:	56                   	push   esi
c00249c9:	53                   	push   ebx
c00249ca:	83 ec 1c             	sub    esp,0x1c
c00249cd:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00249d1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00249d5:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00249d9:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c00249e0:	74 19                	je     c00249fb <SATAPI::read(unsigned long long, int, void*)+0x35>
c00249e2:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c00249e7:	7e 2e                	jle    c0024a17 <SATAPI::read(unsigned long long, int, void*)+0x51>
c00249e9:	83 ec 0c             	sub    esp,0xc
c00249ec:	68 f7 c3 02 c0       	push   0xc002c3f7
c00249f1:	e8 57 52 ff ff       	call   c0019c4d <Krnl::panic(char const*)>
c00249f6:	83 c4 10             	add    esp,0x10
c00249f9:	eb 1c                	jmp    c0024a17 <SATAPI::read(unsigned long long, int, void*)+0x51>
c00249fb:	83 ec 0c             	sub    esp,0xc
c00249fe:	55                   	push   ebp
c00249ff:	e8 46 fe ff ff       	call   c002484a <SATAPI::detectMedia()>
c0024a04:	83 c4 10             	add    esp,0x10
c0024a07:	b8 02 00 00 00       	mov    eax,0x2
c0024a0c:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0024a13:	75 cd                	jne    c00249e2 <SATAPI::read(unsigned long long, int, void*)+0x1c>
c0024a15:	eb 49                	jmp    c0024a60 <SATAPI::read(unsigned long long, int, void*)+0x9a>
c0024a17:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024a1b:	b9 03 00 00 00       	mov    ecx,0x3
c0024a20:	fc                   	cld    
c0024a21:	31 c0                	xor    eax,eax
c0024a23:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024a25:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0024a2a:	89 d8                	mov    eax,ebx
c0024a2c:	86 e0                	xchg   al,ah
c0024a2e:	c1 c0 10             	rol    eax,0x10
c0024a31:	86 e0                	xchg   al,ah
c0024a33:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c0024a37:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c0024a3b:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0024a3f:	50                   	push   eax
c0024a40:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0024a44:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0024a48:	56                   	push   esi
c0024a49:	53                   	push   ebx
c0024a4a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0024a4e:	c1 e0 0b             	shl    eax,0xb
c0024a51:	50                   	push   eax
c0024a52:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024a56:	50                   	push   eax
c0024a57:	55                   	push   ebp
c0024a58:	e8 47 fb ff ff       	call   c00245a4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0024a5d:	83 c4 20             	add    esp,0x20
c0024a60:	83 c4 1c             	add    esp,0x1c
c0024a63:	5b                   	pop    ebx
c0024a64:	5e                   	pop    esi
c0024a65:	5f                   	pop    edi
c0024a66:	5d                   	pop    ebp
c0024a67:	c3                   	ret    

c0024a68 <AVX::open(int, int, void*)>:
c0024a68:	83 ec 0c             	sub    esp,0xc
c0024a6b:	e8 48 11 00 00       	call   c0025bb8 <avxInit>
c0024a70:	b8 00 00 00 00       	mov    eax,0x0
c0024a75:	83 c4 0c             	add    esp,0xc
c0024a78:	c3                   	ret    
c0024a79:	90                   	nop

c0024a7a <AVX::close(int, int, void*)>:
c0024a7a:	83 ec 0c             	sub    esp,0xc
c0024a7d:	e8 37 11 00 00       	call   c0025bb9 <avxClose>
c0024a82:	b8 00 00 00 00       	mov    eax,0x0
c0024a87:	83 c4 0c             	add    esp,0xc
c0024a8a:	c3                   	ret    
c0024a8b:	90                   	nop

c0024a8c <AVX::available()>:
c0024a8c:	83 ec 0c             	sub    esp,0xc
c0024a8f:	e8 1c 11 00 00       	call   c0025bb0 <avxDetect>
c0024a94:	85 c0                	test   eax,eax
c0024a96:	0f 95 c0             	setne  al
c0024a99:	83 c4 0c             	add    esp,0xc
c0024a9c:	c3                   	ret    
c0024a9d:	90                   	nop

c0024a9e <AVX::save(void*)>:
c0024a9e:	83 ec 0c             	sub    esp,0xc
c0024aa1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024aa5:	83 ec 0c             	sub    esp,0xc
c0024aa8:	50                   	push   eax
c0024aa9:	e8 08 11 00 00       	call   c0025bb6 <avxSave>
c0024aae:	83 c4 10             	add    esp,0x10
c0024ab1:	90                   	nop
c0024ab2:	83 c4 0c             	add    esp,0xc
c0024ab5:	c3                   	ret    

c0024ab6 <AVX::load(void*)>:
c0024ab6:	83 ec 0c             	sub    esp,0xc
c0024ab9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024abd:	83 ec 0c             	sub    esp,0xc
c0024ac0:	50                   	push   eax
c0024ac1:	e8 f1 10 00 00       	call   c0025bb7 <avxLoad>
c0024ac6:	83 c4 10             	add    esp,0x10
c0024ac9:	90                   	nop
c0024aca:	83 c4 0c             	add    esp,0xc
c0024acd:	c3                   	ret    

c0024ace <AVX::AVX()>:
c0024ace:	83 ec 0c             	sub    esp,0xc
c0024ad1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024ad5:	83 ec 08             	sub    esp,0x8
c0024ad8:	68 5c c4 02 c0       	push   0xc002c45c
c0024add:	50                   	push   eax
c0024ade:	e8 39 f7 fe ff       	call   c001421c <FPU::FPU(char const*)>
c0024ae3:	83 c4 10             	add    esp,0x10
c0024ae6:	ba 6c c4 02 c0       	mov    edx,0xc002c46c
c0024aeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024aef:	89 10                	mov    DWORD PTR [eax],edx
c0024af1:	90                   	nop
c0024af2:	83 c4 0c             	add    esp,0xc
c0024af5:	c3                   	ret    

c0024af6 <MMX::available()>:
c0024af6:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c0024afb:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0024b01:	83 e0 20             	and    eax,0x20
c0024b04:	84 c0                	test   al,al
c0024b06:	0f 95 c0             	setne  al
c0024b09:	c3                   	ret    

c0024b0a <MMX::open(int, int, void*)>:
c0024b0a:	83 ec 0c             	sub    esp,0xc
c0024b0d:	e8 2a 11 00 00       	call   c0025c3c <x87Init>
c0024b12:	b8 00 00 00 00       	mov    eax,0x0
c0024b17:	83 c4 0c             	add    esp,0xc
c0024b1a:	c3                   	ret    
c0024b1b:	90                   	nop

c0024b1c <MMX::close(int, int, void*)>:
c0024b1c:	83 ec 0c             	sub    esp,0xc
c0024b1f:	e8 32 11 00 00       	call   c0025c56 <x87Close>
c0024b24:	b8 00 00 00 00       	mov    eax,0x0
c0024b29:	83 c4 0c             	add    esp,0xc
c0024b2c:	c3                   	ret    
c0024b2d:	90                   	nop

c0024b2e <MMX::save(void*)>:
c0024b2e:	83 ec 0c             	sub    esp,0xc
c0024b31:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024b35:	83 ec 0c             	sub    esp,0xc
c0024b38:	50                   	push   eax
c0024b39:	e8 f3 10 00 00       	call   c0025c31 <x87Save>
c0024b3e:	83 c4 10             	add    esp,0x10
c0024b41:	90                   	nop
c0024b42:	83 c4 0c             	add    esp,0xc
c0024b45:	c3                   	ret    

c0024b46 <MMX::load(void*)>:
c0024b46:	83 ec 0c             	sub    esp,0xc
c0024b49:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024b4d:	83 ec 0c             	sub    esp,0xc
c0024b50:	50                   	push   eax
c0024b51:	e8 e1 10 00 00       	call   c0025c37 <x87Load>
c0024b56:	83 c4 10             	add    esp,0x10
c0024b59:	90                   	nop
c0024b5a:	83 c4 0c             	add    esp,0xc
c0024b5d:	c3                   	ret    

c0024b5e <MMX::MMX()>:
c0024b5e:	83 ec 0c             	sub    esp,0xc
c0024b61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024b65:	83 ec 08             	sub    esp,0x8
c0024b68:	68 9c c4 02 c0       	push   0xc002c49c
c0024b6d:	50                   	push   eax
c0024b6e:	e8 a9 f6 fe ff       	call   c001421c <FPU::FPU(char const*)>
c0024b73:	83 c4 10             	add    esp,0x10
c0024b76:	ba ac c4 02 c0       	mov    edx,0xc002c4ac
c0024b7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024b7f:	89 10                	mov    DWORD PTR [eax],edx
c0024b81:	90                   	nop
c0024b82:	83 c4 0c             	add    esp,0xc
c0024b85:	c3                   	ret    

c0024b86 <SSE::open(int, int, void*)>:
c0024b86:	83 ec 0c             	sub    esp,0xc
c0024b89:	e8 66 10 00 00       	call   c0025bf4 <sseInit>
c0024b8e:	b8 00 00 00 00       	mov    eax,0x0
c0024b93:	83 c4 0c             	add    esp,0xc
c0024b96:	c3                   	ret    
c0024b97:	90                   	nop

c0024b98 <SSE::close(int, int, void*)>:
c0024b98:	83 ec 0c             	sub    esp,0xc
c0024b9b:	e8 64 10 00 00       	call   c0025c04 <sseClose>
c0024ba0:	b8 00 00 00 00       	mov    eax,0x0
c0024ba5:	83 c4 0c             	add    esp,0xc
c0024ba8:	c3                   	ret    
c0024ba9:	90                   	nop

c0024baa <SSE::available()>:
c0024baa:	83 ec 1c             	sub    esp,0x1c
c0024bad:	e8 1e 10 00 00       	call   c0025bd0 <absolutelyNoChanceInHell>
c0024bb2:	85 c0                	test   eax,eax
c0024bb4:	0f 95 c0             	setne  al
c0024bb7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024bbb:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0024bbf:	83 c4 1c             	add    esp,0x1c
c0024bc2:	c3                   	ret    
c0024bc3:	90                   	nop

c0024bc4 <SSE::save(void*)>:
c0024bc4:	83 ec 0c             	sub    esp,0xc
c0024bc7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024bcb:	83 ec 0c             	sub    esp,0xc
c0024bce:	50                   	push   eax
c0024bcf:	e8 14 10 00 00       	call   c0025be8 <sseSave>
c0024bd4:	83 c4 10             	add    esp,0x10
c0024bd7:	90                   	nop
c0024bd8:	83 c4 0c             	add    esp,0xc
c0024bdb:	c3                   	ret    

c0024bdc <SSE::load(void*)>:
c0024bdc:	83 ec 0c             	sub    esp,0xc
c0024bdf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024be3:	83 ec 0c             	sub    esp,0xc
c0024be6:	50                   	push   eax
c0024be7:	e8 02 10 00 00       	call   c0025bee <sseLoad>
c0024bec:	83 c4 10             	add    esp,0x10
c0024bef:	90                   	nop
c0024bf0:	83 c4 0c             	add    esp,0xc
c0024bf3:	c3                   	ret    

c0024bf4 <SSE::SSE()>:
c0024bf4:	83 ec 0c             	sub    esp,0xc
c0024bf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024bfb:	83 ec 08             	sub    esp,0x8
c0024bfe:	68 dc c4 02 c0       	push   0xc002c4dc
c0024c03:	50                   	push   eax
c0024c04:	e8 13 f6 fe ff       	call   c001421c <FPU::FPU(char const*)>
c0024c09:	83 c4 10             	add    esp,0x10
c0024c0c:	ba ec c4 02 c0       	mov    edx,0xc002c4ec
c0024c11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c15:	89 10                	mov    DWORD PTR [eax],edx
c0024c17:	90                   	nop
c0024c18:	83 c4 0c             	add    esp,0xc
c0024c1b:	c3                   	ret    

c0024c1c <x87::open(int, int, void*)>:
c0024c1c:	83 ec 0c             	sub    esp,0xc
c0024c1f:	e8 18 10 00 00       	call   c0025c3c <x87Init>
c0024c24:	b8 00 00 00 00       	mov    eax,0x0
c0024c29:	83 c4 0c             	add    esp,0xc
c0024c2c:	c3                   	ret    
c0024c2d:	90                   	nop

c0024c2e <x87::close(int, int, void*)>:
c0024c2e:	83 ec 0c             	sub    esp,0xc
c0024c31:	e8 20 10 00 00       	call   c0025c56 <x87Close>
c0024c36:	b8 00 00 00 00       	mov    eax,0x0
c0024c3b:	83 c4 0c             	add    esp,0xc
c0024c3e:	c3                   	ret    
c0024c3f:	90                   	nop

c0024c40 <x87::available()>:
c0024c40:	83 ec 0c             	sub    esp,0xc
c0024c43:	e8 ce 0f 00 00       	call   c0025c16 <x87Detect>
c0024c48:	85 c0                	test   eax,eax
c0024c4a:	0f 95 c0             	setne  al
c0024c4d:	83 c4 0c             	add    esp,0xc
c0024c50:	c3                   	ret    
c0024c51:	90                   	nop

c0024c52 <x87::save(void*)>:
c0024c52:	83 ec 0c             	sub    esp,0xc
c0024c55:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024c59:	83 ec 0c             	sub    esp,0xc
c0024c5c:	50                   	push   eax
c0024c5d:	e8 cf 0f 00 00       	call   c0025c31 <x87Save>
c0024c62:	83 c4 10             	add    esp,0x10
c0024c65:	90                   	nop
c0024c66:	83 c4 0c             	add    esp,0xc
c0024c69:	c3                   	ret    

c0024c6a <x87::load(void*)>:
c0024c6a:	83 ec 0c             	sub    esp,0xc
c0024c6d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024c71:	83 ec 0c             	sub    esp,0xc
c0024c74:	50                   	push   eax
c0024c75:	e8 bd 0f 00 00       	call   c0025c37 <x87Load>
c0024c7a:	83 c4 10             	add    esp,0x10
c0024c7d:	90                   	nop
c0024c7e:	83 c4 0c             	add    esp,0xc
c0024c81:	c3                   	ret    

c0024c82 <x87::x87()>:
c0024c82:	83 ec 0c             	sub    esp,0xc
c0024c85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c89:	83 ec 08             	sub    esp,0x8
c0024c8c:	68 1c c5 02 c0       	push   0xc002c51c
c0024c91:	50                   	push   eax
c0024c92:	e8 85 f5 fe ff       	call   c001421c <FPU::FPU(char const*)>
c0024c97:	83 c4 10             	add    esp,0x10
c0024c9a:	ba 2c c5 02 c0       	mov    edx,0xc002c52c
c0024c9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024ca3:	89 10                	mov    DWORD PTR [eax],edx
c0024ca5:	90                   	nop
c0024ca6:	83 c4 0c             	add    esp,0xc
c0024ca9:	c3                   	ret    

c0024caa <APIC::disable()>:
c0024caa:	90                   	nop
c0024cab:	c3                   	ret    

c0024cac <APIC::close(int, int, void*)>:
c0024cac:	55                   	push   ebp
c0024cad:	89 e5                	mov    ebp,esp
c0024caf:	83 ec 08             	sub    esp,0x8
c0024cb2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024cb5:	8b 00                	mov    eax,DWORD PTR [eax]
c0024cb7:	83 c0 3c             	add    eax,0x3c
c0024cba:	8b 00                	mov    eax,DWORD PTR [eax]
c0024cbc:	83 ec 0c             	sub    esp,0xc
c0024cbf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024cc2:	ff d0                	call   eax
c0024cc4:	83 c4 10             	add    esp,0x10
c0024cc7:	b8 00 00 00 00       	mov    eax,0x0
c0024ccc:	c9                   	leave  
c0024ccd:	c3                   	ret    

c0024cce <IOAPIC::close(int, int, void*)>:
c0024cce:	b8 00 00 00 00       	mov    eax,0x0
c0024cd3:	c3                   	ret    

c0024cd4 <APIC::io_wait()>:
c0024cd4:	eb 00                	jmp    c0024cd6 <APIC::io_wait()+0x2>
c0024cd6:	eb 00                	jmp    c0024cd8 <APIC::io_wait()+0x4>
c0024cd8:	90                   	nop
c0024cd9:	c3                   	ret    

c0024cda <APIC::getBase()>:
c0024cda:	55                   	push   ebp
c0024cdb:	89 e5                	mov    ebp,esp
c0024cdd:	83 ec 18             	sub    esp,0x18
c0024ce0:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c0024ce5:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0024ceb:	83 e0 08             	and    eax,0x8
c0024cee:	84 c0                	test   al,al
c0024cf0:	75 07                	jne    c0024cf9 <APIC::getBase()+0x1f>
c0024cf2:	b8 00 00 00 00       	mov    eax,0x0
c0024cf7:	eb 21                	jmp    c0024d1a <APIC::getBase()+0x40>
c0024cf9:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c0024cfe:	83 ec 08             	sub    esp,0x8
c0024d01:	6a 1b                	push   0x1b
c0024d03:	50                   	push   eax
c0024d04:	e8 c3 9e fe ff       	call   c000ebcc <Computer::rdmsr(unsigned int)>
c0024d09:	83 c4 10             	add    esp,0x10
c0024d0c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0024d0f:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0024d12:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0024d15:	25 00 f0 ff ff       	and    eax,0xfffff000
c0024d1a:	c9                   	leave  
c0024d1b:	c3                   	ret    

c0024d1c <APIC::eoi(unsigned char)>:
c0024d1c:	55                   	push   ebp
c0024d1d:	89 e5                	mov    ebp,esp
c0024d1f:	83 ec 28             	sub    esp,0x28
c0024d22:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024d25:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0024d28:	83 ec 0c             	sub    esp,0xc
c0024d2b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024d2e:	e8 a7 ff ff ff       	call   c0024cda <APIC::getBase()>
c0024d33:	83 c4 10             	add    esp,0x10
c0024d36:	05 b0 00 00 00       	add    eax,0xb0
c0024d3b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0024d3e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0024d41:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0024d47:	90                   	nop
c0024d48:	c9                   	leave  
c0024d49:	c3                   	ret    

c0024d4a <APIC::open(int, int, void*)>:
c0024d4a:	55                   	push   ebp
c0024d4b:	89 e5                	mov    ebp,esp
c0024d4d:	57                   	push   edi
c0024d4e:	56                   	push   esi
c0024d4f:	53                   	push   ebx
c0024d50:	83 ec 2c             	sub    esp,0x2c
c0024d53:	83 ec 0c             	sub    esp,0xc
c0024d56:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024d59:	e8 7c ff ff ff       	call   c0024cda <APIC::getBase()>
c0024d5e:	83 c4 10             	add    esp,0x10
c0024d61:	89 c2                	mov    edx,eax
c0024d63:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024d66:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0024d6c:	0f b6 f8             	movzx  edi,al
c0024d6f:	89 d0                	mov    eax,edx
c0024d71:	ba 00 00 00 00       	mov    edx,0x0
c0024d76:	89 c1                	mov    ecx,eax
c0024d78:	80 e5 ff             	and    ch,0xff
c0024d7b:	89 cb                	mov    ebx,ecx
c0024d7d:	0f b6 f2             	movzx  esi,dl
c0024d80:	89 d8                	mov    eax,ebx
c0024d82:	89 f2                	mov    edx,esi
c0024d84:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0024d87:	8d 5f 08             	lea    ebx,[edi+0x8]
c0024d8a:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0024d8e:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0024d92:	83 e0 00             	and    eax,0x0
c0024d95:	09 d0                	or     eax,edx
c0024d97:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0024d9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024d9e:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0024da4:	8d 50 01             	lea    edx,[eax+0x1]
c0024da7:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0024daa:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0024db0:	0f b6 d0             	movzx  edx,al
c0024db3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024db6:	83 c2 08             	add    edx,0x8
c0024db9:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0024dbd:	0f b6 c9             	movzx  ecx,cl
c0024dc0:	81 c9 00 00 01 00    	or     ecx,0x10000
c0024dc6:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0024dca:	83 ec 0c             	sub    esp,0xc
c0024dcd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024dd0:	e8 05 ff ff ff       	call   c0024cda <APIC::getBase()>
c0024dd5:	83 c4 10             	add    esp,0x10
c0024dd8:	05 f0 00 00 00       	add    eax,0xf0
c0024ddd:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0024de0:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0024de3:	8b 00                	mov    eax,DWORD PTR [eax]
c0024de5:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0024de8:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0024def:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0024df6:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0024df9:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0024dfc:	89 10                	mov    DWORD PTR [eax],edx
c0024dfe:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0024e05:	a1 50 e1 02 c0       	mov    eax,ds:0xc002e150
c0024e0a:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0024e0d:	7d 7c                	jge    c0024e8b <APIC::open(int, int, void*)+0x141>
c0024e0f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0024e12:	8b 04 85 60 e1 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1ea0]
c0024e19:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0024e1c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0024e1f:	8b 04 85 60 e1 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1ea0]
c0024e26:	c1 e8 08             	shr    eax,0x8
c0024e29:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c0024e2d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0024e30:	8b 04 85 60 e1 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1ea0]
c0024e37:	c1 e8 18             	shr    eax,0x18
c0024e3a:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0024e3d:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c0024e41:	75 40                	jne    c0024e83 <APIC::open(int, int, void*)+0x139>
c0024e43:	83 ec 0c             	sub    esp,0xc
c0024e46:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024e49:	e8 8c fe ff ff       	call   c0024cda <APIC::getBase()>
c0024e4e:	83 c4 10             	add    esp,0x10
c0024e51:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0024e55:	75 07                	jne    c0024e5e <APIC::open(int, int, void*)+0x114>
c0024e57:	ba 60 03 00 00       	mov    edx,0x360
c0024e5c:	eb 05                	jmp    c0024e63 <APIC::open(int, int, void*)+0x119>
c0024e5e:	ba 50 03 00 00       	mov    edx,0x350
c0024e63:	01 d0                	add    eax,edx
c0024e65:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0024e68:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0024e6b:	8b 00                	mov    eax,DWORD PTR [eax]
c0024e6d:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0024e70:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0024e77:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0024e7b:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0024e7e:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0024e81:	89 10                	mov    DWORD PTR [eax],edx
c0024e83:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c0024e86:	e9 7a ff ff ff       	jmp    c0024e05 <APIC::open(int, int, void*)+0xbb>
c0024e8b:	b8 00 00 00 00       	mov    eax,0x0
c0024e90:	8d 65 f4             	lea    esp,[ebp-0xc]
c0024e93:	5b                   	pop    ebx
c0024e94:	5e                   	pop    esi
c0024e95:	5f                   	pop    edi
c0024e96:	5d                   	pop    ebp
c0024e97:	c3                   	ret    

c0024e98 <IOAPIC::IOAPIC()>:
c0024e98:	83 ec 0c             	sub    esp,0xc
c0024e9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e9f:	83 ec 08             	sub    esp,0x8
c0024ea2:	68 5c c5 02 c0       	push   0xc002c55c
c0024ea7:	50                   	push   eax
c0024ea8:	e8 5d f0 fe ff       	call   c0013f0a <Device::Device(char const*)>
c0024ead:	83 c4 10             	add    esp,0x10
c0024eb0:	ba 84 c6 02 c0       	mov    edx,0xc002c684
c0024eb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024eb9:	89 10                	mov    DWORD PTR [eax],edx
c0024ebb:	90                   	nop
c0024ebc:	83 c4 0c             	add    esp,0xc
c0024ebf:	c3                   	ret    

c0024ec0 <APIC::APIC()>:
c0024ec0:	53                   	push   ebx
c0024ec1:	83 ec 18             	sub    esp,0x18
c0024ec4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024ec8:	83 ec 08             	sub    esp,0x8
c0024ecb:	68 64 c5 02 c0       	push   0xc002c564
c0024ed0:	50                   	push   eax
c0024ed1:	e8 a0 f7 fe ff       	call   c0014676 <InterruptController::InterruptController(char const*)>
c0024ed6:	83 c4 10             	add    esp,0x10
c0024ed9:	ba 3c c6 02 c0       	mov    edx,0xc002c63c
c0024ede:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024ee2:	89 10                	mov    DWORD PTR [eax],edx
c0024ee4:	a0 20 fc 02 c0       	mov    al,ds:0xc002fc20
c0024ee9:	83 f0 01             	xor    eax,0x1
c0024eec:	84 c0                	test   al,al
c0024eee:	0f 84 a1 00 00 00    	je     c0024f95 <APIC::APIC()+0xd5>
c0024ef4:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0024ef9:	a0 00 e2 02 c0       	mov    al,ds:0xc002e200
c0024efe:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0024f02:	0f 83 86 00 00 00    	jae    c0024f8e <APIC::APIC()+0xce>
c0024f08:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c0024f10:	83 ec 0c             	sub    esp,0xc
c0024f13:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0024f17:	e8 08 a7 fe ff       	call   c000f624 <malloc>
c0024f1c:	83 c4 10             	add    esp,0x10
c0024f1f:	89 c3                	mov    ebx,eax
c0024f21:	83 ec 0c             	sub    esp,0xc
c0024f24:	53                   	push   ebx
c0024f25:	e8 6e ff ff ff       	call   c0024e98 <IOAPIC::IOAPIC()>
c0024f2a:	83 c4 10             	add    esp,0x10
c0024f2d:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0024f31:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0024f36:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0024f3a:	89 14 85 00 fc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0400],edx
c0024f41:	a1 e0 fb 02 c0       	mov    eax,ds:0xc002fbe0
c0024f46:	40                   	inc    eax
c0024f47:	a3 e0 fb 02 c0       	mov    ds:0xc002fbe0,eax
c0024f4c:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c0024f51:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0024f57:	83 ec 08             	sub    esp,0x8
c0024f5a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0024f5e:	50                   	push   eax
c0024f5f:	e8 b6 ed fe ff       	call   c0013d1a <Device::addChild(Device*)>
c0024f64:	83 c4 10             	add    esp,0x10
c0024f67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0024f6b:	8b 00                	mov    eax,DWORD PTR [eax]
c0024f6d:	83 c0 08             	add    eax,0x8
c0024f70:	8b 00                	mov    eax,DWORD PTR [eax]
c0024f72:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0024f77:	6a 00                	push   0x0
c0024f79:	6a 00                	push   0x0
c0024f7b:	52                   	push   edx
c0024f7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024f80:	ff d0                	call   eax
c0024f82:	83 c4 10             	add    esp,0x10
c0024f85:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0024f89:	e9 6b ff ff ff       	jmp    c0024ef9 <APIC::APIC()+0x39>
c0024f8e:	c6 05 20 fc 02 c0 01 	mov    BYTE PTR ds:0xc002fc20,0x1
c0024f95:	90                   	nop
c0024f96:	83 c4 18             	add    esp,0x18
c0024f99:	5b                   	pop    ebx
c0024f9a:	c3                   	ret    
c0024f9b:	90                   	nop

c0024f9c <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0024f9c:	55                   	push   ebp
c0024f9d:	89 e5                	mov    ebp,esp
c0024f9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024fa2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024fa8:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0024fab:	72 1d                	jb     c0024fca <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0024fad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024fb0:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0024fb6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024fb9:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0024fbf:	01 d0                	add    eax,edx
c0024fc1:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0024fc4:	73 04                	jae    c0024fca <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0024fc6:	b0 01                	mov    al,0x1
c0024fc8:	eb 02                	jmp    c0024fcc <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0024fca:	b0 00                	mov    al,0x0
c0024fcc:	5d                   	pop    ebp
c0024fcd:	c3                   	ret    

c0024fce <IOAPIC::read(int)>:
c0024fce:	55                   	push   ebp
c0024fcf:	89 e5                	mov    ebp,esp
c0024fd1:	83 ec 10             	sub    esp,0x10
c0024fd4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024fd7:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0024fdd:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0024fe0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024fe3:	0f b6 d0             	movzx  edx,al
c0024fe6:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0024fe9:	89 10                	mov    DWORD PTR [eax],edx
c0024feb:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0024fee:	83 c0 10             	add    eax,0x10
c0024ff1:	8b 00                	mov    eax,DWORD PTR [eax]
c0024ff3:	c9                   	leave  
c0024ff4:	c3                   	ret    
c0024ff5:	90                   	nop

c0024ff6 <IOAPIC::open(int, int, void*)>:
c0024ff6:	55                   	push   ebp
c0024ff7:	89 e5                	mov    ebp,esp
c0024ff9:	57                   	push   edi
c0024ffa:	56                   	push   esi
c0024ffb:	53                   	push   ebx
c0024ffc:	83 ec 0c             	sub    esp,0xc
c0024fff:	83 ec 0c             	sub    esp,0xc
c0025002:	68 8f c5 02 c0       	push   0xc002c58f
c0025007:	e8 e7 d8 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c002500c:	83 c4 10             	add    esp,0x10
c002500f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025012:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025015:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002501b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002501e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025024:	8b 14 85 40 e2 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1dc0]
c002502b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002502e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0025034:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025037:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002503d:	8b 14 85 c0 e2 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1d40]
c0025044:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025047:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c002504d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025050:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0025056:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025059:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002505f:	0f b6 f8             	movzx  edi,al
c0025062:	89 d0                	mov    eax,edx
c0025064:	ba 00 00 00 00       	mov    edx,0x0
c0025069:	89 c1                	mov    ecx,eax
c002506b:	80 e5 ff             	and    ch,0xff
c002506e:	89 cb                	mov    ebx,ecx
c0025070:	0f b6 f2             	movzx  esi,dl
c0025073:	89 d8                	mov    eax,ebx
c0025075:	89 f2                	mov    edx,esi
c0025077:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002507a:	8d 5f 08             	lea    ebx,[edi+0x8]
c002507d:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025081:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025085:	83 e0 00             	and    eax,0x0
c0025088:	09 d0                	or     eax,edx
c002508a:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002508e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025091:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025097:	8d 50 01             	lea    edx,[eax+0x1]
c002509a:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002509d:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00250a3:	0f b6 d0             	movzx  edx,al
c00250a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00250a9:	83 c2 08             	add    edx,0x8
c00250ac:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00250b0:	0f b6 c9             	movzx  ecx,cl
c00250b3:	81 c9 00 ad de 00    	or     ecx,0xdead00
c00250b9:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00250bd:	83 ec 08             	sub    esp,0x8
c00250c0:	6a 01                	push   0x1
c00250c2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00250c5:	e8 04 ff ff ff       	call   c0024fce <IOAPIC::read(int)>
c00250ca:	83 c4 10             	add    esp,0x10
c00250cd:	c1 f8 10             	sar    eax,0x10
c00250d0:	0f b6 c0             	movzx  eax,al
c00250d3:	8d 50 01             	lea    edx,[eax+0x1]
c00250d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00250d9:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c00250df:	b8 00 00 00 00       	mov    eax,0x0
c00250e4:	8d 65 f4             	lea    esp,[ebp-0xc]
c00250e7:	5b                   	pop    ebx
c00250e8:	5e                   	pop    esi
c00250e9:	5f                   	pop    edi
c00250ea:	5d                   	pop    ebp
c00250eb:	c3                   	ret    

c00250ec <IOAPIC::write(int, int)>:
c00250ec:	55                   	push   ebp
c00250ed:	89 e5                	mov    ebp,esp
c00250ef:	83 ec 10             	sub    esp,0x10
c00250f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00250f5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00250fb:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00250fe:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025101:	0f b6 d0             	movzx  edx,al
c0025104:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025107:	89 10                	mov    DWORD PTR [eax],edx
c0025109:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002510c:	8d 50 10             	lea    edx,[eax+0x10]
c002510f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025112:	89 02                	mov    DWORD PTR [edx],eax
c0025114:	90                   	nop
c0025115:	c9                   	leave  
c0025116:	c3                   	ret    
c0025117:	90                   	nop

c0025118 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0025118:	55                   	push   ebp
c0025119:	89 e5                	mov    ebp,esp
c002511b:	53                   	push   ebx
c002511c:	83 ec 2c             	sub    esp,0x2c
c002511f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025122:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0025125:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0025128:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c002512b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c002512e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025131:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025134:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025137:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002513a:	88 d8                	mov    al,bl
c002513c:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c002513f:	88 c8                	mov    al,cl
c0025141:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025144:	88 d0                	mov    al,dl
c0025146:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0025149:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002514d:	83 c0 08             	add    eax,0x8
c0025150:	01 c0                	add    eax,eax
c0025152:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025155:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025159:	83 c0 08             	add    eax,0x8
c002515c:	01 c0                	add    eax,eax
c002515e:	40                   	inc    eax
c002515f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025162:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025165:	50                   	push   eax
c0025166:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025169:	e8 60 fe ff ff       	call   c0024fce <IOAPIC::read(int)>
c002516e:	83 c4 08             	add    esp,0x8
c0025171:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0025174:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c002517b:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002517e:	c1 e0 18             	shl    eax,0x18
c0025181:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0025184:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025187:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002518a:	52                   	push   edx
c002518b:	50                   	push   eax
c002518c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002518f:	e8 58 ff ff ff       	call   c00250ec <IOAPIC::write(int, int)>
c0025194:	83 c4 0c             	add    esp,0xc
c0025197:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002519a:	50                   	push   eax
c002519b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002519e:	e8 2b fe ff ff       	call   c0024fce <IOAPIC::read(int)>
c00251a3:	83 c4 08             	add    esp,0x8
c00251a6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00251a9:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c00251b0:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c00251b7:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c00251be:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00251c2:	74 09                	je     c00251cd <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c00251c4:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c00251cb:	eb 07                	jmp    c00251d4 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c00251cd:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c00251d4:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c00251d8:	74 09                	je     c00251e3 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c00251da:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c00251e1:	eb 07                	jmp    c00251ea <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c00251e3:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c00251ea:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c00251f1:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c00251f5:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c00251f8:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00251fb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00251fe:	52                   	push   edx
c00251ff:	50                   	push   eax
c0025200:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025203:	e8 e4 fe ff ff       	call   c00250ec <IOAPIC::write(int, int)>
c0025208:	83 c4 0c             	add    esp,0xc
c002520b:	90                   	nop
c002520c:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c002520f:	c9                   	leave  
c0025210:	c3                   	ret    
c0025211:	90                   	nop

c0025212 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0025212:	55                   	push   ebp
c0025213:	89 e5                	mov    ebp,esp
c0025215:	57                   	push   edi
c0025216:	56                   	push   esi
c0025217:	53                   	push   ebx
c0025218:	83 ec 2c             	sub    esp,0x2c
c002521b:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002521e:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025221:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025225:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0025229:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c002522d:	74 5a                	je     c0025289 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c002522f:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0025233:	7f 44                	jg     c0025279 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0025235:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025238:	05 e0 ca 02 c0       	add    eax,0xc002cae0
c002523d:	8a 00                	mov    al,BYTE PTR [eax]
c002523f:	0f b6 c0             	movzx  eax,al
c0025242:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0025245:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025248:	66 8b 84 00 e0 e1 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd1e20]
c0025250:	0f b7 c0             	movzx  eax,ax
c0025253:	83 e0 02             	and    eax,0x2
c0025256:	85 c0                	test   eax,eax
c0025258:	74 04                	je     c002525e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c002525a:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c002525e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025261:	66 8b 84 00 e0 e1 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd1e20]
c0025269:	0f b7 c0             	movzx  eax,ax
c002526c:	83 e0 08             	and    eax,0x8
c002526f:	85 c0                	test   eax,eax
c0025271:	74 16                	je     c0025289 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025273:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025277:	eb 10                	jmp    c0025289 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025279:	83 ec 0c             	sub    esp,0xc
c002527c:	68 a0 c5 02 c0       	push   0xc002c5a0
c0025281:	e8 c7 49 ff ff       	call   c0019c4d <Krnl::panic(char const*)>
c0025286:	83 c4 10             	add    esp,0x10
c0025289:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c002528d:	a1 e0 fb 02 c0       	mov    eax,ds:0xc002fbe0
c0025292:	83 ec 08             	sub    esp,0x8
c0025295:	50                   	push   eax
c0025296:	68 d8 c5 02 c0       	push   0xc002c5d8
c002529b:	e8 53 d6 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c00252a0:	83 c4 10             	add    esp,0x10
c00252a3:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c00252aa:	a1 e0 fb 02 c0       	mov    eax,ds:0xc002fbe0
c00252af:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c00252b2:	7d 67                	jge    c002531b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c00252b4:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00252b7:	8b 04 85 00 fc 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0400]
c00252be:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00252c1:	83 ec 08             	sub    esp,0x8
c00252c4:	52                   	push   edx
c00252c5:	50                   	push   eax
c00252c6:	e8 d1 fc ff ff       	call   c0024f9c <IOAPIC::handlesGSIWithNumber(unsigned int)>
c00252cb:	83 c4 10             	add    esp,0x10
c00252ce:	84 c0                	test   al,al
c00252d0:	74 44                	je     c0025316 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c00252d2:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00252d5:	8b 1c 85 00 fc 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd0400]
c00252dc:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c00252e0:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00252e3:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c00252e7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00252ea:	83 c0 20             	add    eax,0x20
c00252ed:	0f b6 f0             	movzx  esi,al
c00252f0:	b8 00 00 00 00       	mov    eax,0x0
c00252f5:	99                   	cdq    
c00252f6:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00252f9:	0f b6 c9             	movzx  ecx,cl
c00252fc:	83 ec 04             	sub    esp,0x4
c00252ff:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0025302:	57                   	push   edi
c0025303:	56                   	push   esi
c0025304:	52                   	push   edx
c0025305:	50                   	push   eax
c0025306:	51                   	push   ecx
c0025307:	53                   	push   ebx
c0025308:	e8 0b fe ff ff       	call   c0025118 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c002530d:	83 c4 20             	add    esp,0x20
c0025310:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0025314:	eb 05                	jmp    c002531b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025316:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0025319:	eb 8f                	jmp    c00252aa <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c002531b:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c002531e:	83 f0 01             	xor    eax,0x1
c0025321:	84 c0                	test   al,al
c0025323:	74 10                	je     c0025335 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0025325:	83 ec 0c             	sub    esp,0xc
c0025328:	68 ef c5 02 c0       	push   0xc002c5ef
c002532d:	e8 1b 49 ff ff       	call   c0019c4d <Krnl::panic(char const*)>
c0025332:	83 c4 10             	add    esp,0x10
c0025335:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0025339:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0025340:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0025344:	7f 65                	jg     c00253ab <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0025346:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025349:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002534c:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025353:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025356:	01 ca                	add    edx,ecx
c0025358:	83 c2 54             	add    edx,0x54
c002535b:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c002535f:	85 c0                	test   eax,eax
c0025361:	75 43                	jne    c00253a6 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0025363:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025366:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025369:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025370:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025373:	01 ca                	add    edx,ecx
c0025375:	8d 4a 54             	lea    ecx,[edx+0x54]
c0025378:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c002537b:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c002537f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025382:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025385:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c002538c:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002538f:	01 ca                	add    edx,ecx
c0025391:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0025397:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c002539a:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c002539e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00253a1:	83 e8 20             	sub    eax,0x20
c00253a4:	eb 1a                	jmp    c00253c0 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c00253a6:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c00253a9:	eb 95                	jmp    c0025340 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c00253ab:	83 ec 0c             	sub    esp,0xc
c00253ae:	68 fc c5 02 c0       	push   0xc002c5fc
c00253b3:	e8 95 48 ff ff       	call   c0019c4d <Krnl::panic(char const*)>
c00253b8:	83 c4 10             	add    esp,0x10
c00253bb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00253c0:	8d 65 f4             	lea    esp,[ebp-0xc]
c00253c3:	5b                   	pop    ebx
c00253c4:	5e                   	pop    esi
c00253c5:	5f                   	pop    edi
c00253c6:	5d                   	pop    ebp
c00253c7:	c3                   	ret    

c00253c8 <PIC::disable()>:
c00253c8:	55                   	push   ebp
c00253c9:	89 e5                	mov    ebp,esp
c00253cb:	83 ec 10             	sub    esp,0x10
c00253ce:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c00253d4:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c00253d8:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00253db:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c00253df:	ee                   	out    dx,al
c00253e0:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c00253e6:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c00253ea:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c00253ed:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00253f1:	ee                   	out    dx,al
c00253f2:	90                   	nop
c00253f3:	c9                   	leave  
c00253f4:	c3                   	ret    
c00253f5:	90                   	nop

c00253f6 <PIC::close(int, int, void*)>:
c00253f6:	55                   	push   ebp
c00253f7:	89 e5                	mov    ebp,esp
c00253f9:	83 ec 08             	sub    esp,0x8
c00253fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00253ff:	8b 00                	mov    eax,DWORD PTR [eax]
c0025401:	83 c0 3c             	add    eax,0x3c
c0025404:	8b 00                	mov    eax,DWORD PTR [eax]
c0025406:	83 ec 0c             	sub    esp,0xc
c0025409:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002540c:	ff d0                	call   eax
c002540e:	83 c4 10             	add    esp,0x10
c0025411:	b8 00 00 00 00       	mov    eax,0x0
c0025416:	c9                   	leave  
c0025417:	c3                   	ret    

c0025418 <PIC::PIC()>:
c0025418:	83 ec 0c             	sub    esp,0xc
c002541b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002541f:	83 ec 08             	sub    esp,0x8
c0025422:	68 a8 c6 02 c0       	push   0xc002c6a8
c0025427:	50                   	push   eax
c0025428:	e8 49 f2 fe ff       	call   c0014676 <InterruptController::InterruptController(char const*)>
c002542d:	83 c4 10             	add    esp,0x10
c0025430:	ba d4 c6 02 c0       	mov    edx,0xc002c6d4
c0025435:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025439:	89 10                	mov    DWORD PTR [eax],edx
c002543b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002543f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025445:	0f b6 d0             	movzx  edx,al
c0025448:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002544c:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0025453:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025457:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002545d:	0f b6 d0             	movzx  edx,al
c0025460:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025464:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025469:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002546d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025473:	8d 50 01             	lea    edx,[eax+0x1]
c0025476:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002547a:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025480:	0f b6 d0             	movzx  edx,al
c0025483:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025487:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002548b:	83 e1 3f             	and    ecx,0x3f
c002548e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025492:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025496:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002549c:	0f b6 d0             	movzx  edx,al
c002549f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254a3:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c00254aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254ae:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00254b4:	0f b6 d0             	movzx  edx,al
c00254b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254bb:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00254c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254c4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00254ca:	8d 50 01             	lea    edx,[eax+0x1]
c00254cd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00254d1:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00254d7:	0f b6 d0             	movzx  edx,al
c00254da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254de:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00254e2:	83 e1 3f             	and    ecx,0x3f
c00254e5:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00254e9:	90                   	nop
c00254ea:	83 c4 0c             	add    esp,0xc
c00254ed:	c3                   	ret    

c00254ee <PIC::ioWait()>:
c00254ee:	eb 00                	jmp    c00254f0 <PIC::ioWait()+0x2>
c00254f0:	eb 00                	jmp    c00254f2 <PIC::ioWait()+0x4>
c00254f2:	90                   	nop
c00254f3:	c3                   	ret    

c00254f4 <PIC::getIRQReg(int)>:
c00254f4:	55                   	push   ebp
c00254f5:	89 e5                	mov    ebp,esp
c00254f7:	83 ec 10             	sub    esp,0x10
c00254fa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00254fd:	0f b6 c0             	movzx  eax,al
c0025500:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025506:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0025509:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c002550c:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025510:	ee                   	out    dx,al
c0025511:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025514:	0f b6 c0             	movzx  eax,al
c0025517:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c002551d:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0025520:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025523:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025527:	ee                   	out    dx,al
c0025528:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c002552e:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0025532:	89 c2                	mov    edx,eax
c0025534:	ec                   	in     al,dx
c0025535:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0025538:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c002553b:	0f b6 c0             	movzx  eax,al
c002553e:	c1 e0 08             	shl    eax,0x8
c0025541:	89 c1                	mov    ecx,eax
c0025543:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0025549:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c002554d:	89 c2                	mov    edx,eax
c002554f:	ec                   	in     al,dx
c0025550:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0025553:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025556:	0f b6 c0             	movzx  eax,al
c0025559:	09 c8                	or     eax,ecx
c002555b:	c9                   	leave  
c002555c:	c3                   	ret    
c002555d:	90                   	nop

c002555e <PIC::eoi(unsigned char)>:
c002555e:	55                   	push   ebp
c002555f:	89 e5                	mov    ebp,esp
c0025561:	83 ec 14             	sub    esp,0x14
c0025564:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025567:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c002556a:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c002556e:	75 1e                	jne    c002558e <PIC::eoi(unsigned char)+0x30>
c0025570:	6a 0b                	push   0xb
c0025572:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025575:	e8 7a ff ff ff       	call   c00254f4 <PIC::getIRQReg(int)>
c002557a:	83 c4 08             	add    esp,0x8
c002557d:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0025581:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0025585:	25 80 00 00 00       	and    eax,0x80
c002558a:	85 c0                	test   eax,eax
c002558c:	74 5f                	je     c00255ed <PIC::eoi(unsigned char)+0x8f>
c002558e:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0025592:	75 2d                	jne    c00255c1 <PIC::eoi(unsigned char)+0x63>
c0025594:	6a 0b                	push   0xb
c0025596:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025599:	e8 56 ff ff ff       	call   c00254f4 <PIC::getIRQReg(int)>
c002559e:	83 c4 08             	add    esp,0x8
c00255a1:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c00255a5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00255a8:	66 85 c0             	test   ax,ax
c00255ab:	78 14                	js     c00255c1 <PIC::eoi(unsigned char)+0x63>
c00255ad:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c00255b3:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c00255b7:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00255ba:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c00255be:	ee                   	out    dx,al
c00255bf:	eb 2d                	jmp    c00255ee <PIC::eoi(unsigned char)+0x90>
c00255c1:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c00255c5:	76 12                	jbe    c00255d9 <PIC::eoi(unsigned char)+0x7b>
c00255c7:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c00255cd:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c00255d1:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00255d4:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00255d8:	ee                   	out    dx,al
c00255d9:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c00255df:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c00255e3:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00255e6:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00255ea:	ee                   	out    dx,al
c00255eb:	eb 01                	jmp    c00255ee <PIC::eoi(unsigned char)+0x90>
c00255ed:	90                   	nop
c00255ee:	c9                   	leave  
c00255ef:	c3                   	ret    

c00255f0 <PIC::remap()>:
c00255f0:	55                   	push   ebp
c00255f1:	89 e5                	mov    ebp,esp
c00255f3:	83 ec 48             	sub    esp,0x48
c00255f6:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c00255fd:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0025604:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c002560a:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c002560d:	89 c2                	mov    edx,eax
c002560f:	ec                   	in     al,dx
c0025610:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0025613:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0025616:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0025619:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c002561f:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0025622:	89 c2                	mov    edx,eax
c0025624:	ec                   	in     al,dx
c0025625:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0025628:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c002562b:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c002562e:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0025634:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0025638:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c002563b:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c002563e:	ee                   	out    dx,al
c002563f:	83 ec 0c             	sub    esp,0xc
c0025642:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025645:	e8 a4 fe ff ff       	call   c00254ee <PIC::ioWait()>
c002564a:	83 c4 10             	add    esp,0x10
c002564d:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0025653:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0025657:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c002565a:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c002565d:	ee                   	out    dx,al
c002565e:	83 ec 0c             	sub    esp,0xc
c0025661:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025664:	e8 85 fe ff ff       	call   c00254ee <PIC::ioWait()>
c0025669:	83 c4 10             	add    esp,0x10
c002566c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c002566f:	0f b6 c0             	movzx  eax,al
c0025672:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0025678:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c002567b:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c002567e:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0025681:	ee                   	out    dx,al
c0025682:	83 ec 0c             	sub    esp,0xc
c0025685:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025688:	e8 61 fe ff ff       	call   c00254ee <PIC::ioWait()>
c002568d:	83 c4 10             	add    esp,0x10
c0025690:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025693:	0f b6 c0             	movzx  eax,al
c0025696:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c002569c:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c002569f:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c00256a2:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00256a5:	ee                   	out    dx,al
c00256a6:	83 ec 0c             	sub    esp,0xc
c00256a9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00256ac:	e8 3d fe ff ff       	call   c00254ee <PIC::ioWait()>
c00256b1:	83 c4 10             	add    esp,0x10
c00256b4:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c00256ba:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c00256be:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c00256c1:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c00256c4:	ee                   	out    dx,al
c00256c5:	83 ec 0c             	sub    esp,0xc
c00256c8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00256cb:	e8 1e fe ff ff       	call   c00254ee <PIC::ioWait()>
c00256d0:	83 c4 10             	add    esp,0x10
c00256d3:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c00256d9:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c00256dd:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c00256e0:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00256e3:	ee                   	out    dx,al
c00256e4:	83 ec 0c             	sub    esp,0xc
c00256e7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00256ea:	e8 ff fd ff ff       	call   c00254ee <PIC::ioWait()>
c00256ef:	83 c4 10             	add    esp,0x10
c00256f2:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c00256f8:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c00256fc:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c00256ff:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0025702:	ee                   	out    dx,al
c0025703:	83 ec 0c             	sub    esp,0xc
c0025706:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025709:	e8 e0 fd ff ff       	call   c00254ee <PIC::ioWait()>
c002570e:	83 c4 10             	add    esp,0x10
c0025711:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0025717:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c002571b:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c002571e:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0025721:	ee                   	out    dx,al
c0025722:	83 ec 0c             	sub    esp,0xc
c0025725:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025728:	e8 c1 fd ff ff       	call   c00254ee <PIC::ioWait()>
c002572d:	83 c4 10             	add    esp,0x10
c0025730:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0025734:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c002573a:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c002573d:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0025740:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025743:	ee                   	out    dx,al
c0025744:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0025748:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c002574e:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0025751:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0025754:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0025757:	ee                   	out    dx,al
c0025758:	90                   	nop
c0025759:	c9                   	leave  
c002575a:	c3                   	ret    
c002575b:	90                   	nop

c002575c <PIC::open(int, int, void*)>:
c002575c:	55                   	push   ebp
c002575d:	89 e5                	mov    ebp,esp
c002575f:	83 ec 18             	sub    esp,0x18
c0025762:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0025768:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c002576c:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c002576f:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025773:	ee                   	out    dx,al
c0025774:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c002577a:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c002577e:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025781:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025785:	ee                   	out    dx,al
c0025786:	83 ec 0c             	sub    esp,0xc
c0025789:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002578c:	e8 5f fe ff ff       	call   c00255f0 <PIC::remap()>
c0025791:	83 c4 10             	add    esp,0x10
c0025794:	b8 00 00 00 00       	mov    eax,0x0
c0025799:	c9                   	leave  
c002579a:	c3                   	ret    
c002579b:	90                   	nop

c002579c <APICTimer::close(int, int, void*)>:
c002579c:	b8 00 00 00 00       	mov    eax,0x0
c00257a1:	c3                   	ret    

c00257a2 <apicTimerHandler(regs*, void*)>:
c00257a2:	83 ec 0c             	sub    esp,0xc
c00257a5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00257a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00257ab:	99                   	cdq    
c00257ac:	52                   	push   edx
c00257ad:	50                   	push   eax
c00257ae:	6a 00                	push   0x0
c00257b0:	68 00 ca 9a 3b       	push   0x3b9aca00
c00257b5:	e8 92 07 00 00       	call   c0025f4c <__udivdi3>
c00257ba:	83 c4 10             	add    esp,0x10
c00257bd:	83 ec 08             	sub    esp,0x8
c00257c0:	52                   	push   edx
c00257c1:	50                   	push   eax
c00257c2:	e8 66 0e ff ff       	call   c001662d <timerHandler(unsigned long long)>
c00257c7:	83 c4 10             	add    esp,0x10
c00257ca:	90                   	nop
c00257cb:	83 c4 0c             	add    esp,0xc
c00257ce:	c3                   	ret    
c00257cf:	90                   	nop

c00257d0 <APICTimer::write(int)>:
c00257d0:	53                   	push   ebx
c00257d1:	83 ec 28             	sub    esp,0x28
c00257d4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00257d8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00257dc:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00257e2:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c00257e7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00257ed:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00257f3:	83 ec 0c             	sub    esp,0xc
c00257f6:	50                   	push   eax
c00257f7:	e8 de f4 ff ff       	call   c0024cda <APIC::getBase()>
c00257fc:	83 c4 10             	add    esp,0x10
c00257ff:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0025803:	a1 10 df 02 c0       	mov    eax,ds:0xc002df10
c0025808:	8b 15 14 df 02 c0    	mov    edx,DWORD PTR ds:0xc002df14
c002580e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0025812:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0025816:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002581a:	05 e0 03 00 00       	add    eax,0x3e0
c002581f:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0025825:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025829:	05 80 03 00 00       	add    eax,0x380
c002582e:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0025834:	fb                   	sti    
c0025835:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025839:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002583d:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0025842:	83 d2 00             	adc    edx,0x0
c0025845:	89 c1                	mov    ecx,eax
c0025847:	89 d3                	mov    ebx,edx
c0025849:	a1 10 df 02 c0       	mov    eax,ds:0xc002df10
c002584e:	8b 15 14 df 02 c0    	mov    edx,DWORD PTR ds:0xc002df14
c0025854:	39 c8                	cmp    eax,ecx
c0025856:	89 d0                	mov    eax,edx
c0025858:	19 d8                	sbb    eax,ebx
c002585a:	73 02                	jae    c002585e <APICTimer::write(int)+0x8e>
c002585c:	eb d7                	jmp    c0025835 <APICTimer::write(int)+0x65>
c002585e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025862:	05 20 03 00 00       	add    eax,0x320
c0025867:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c002586d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025871:	05 90 03 00 00       	add    eax,0x390
c0025876:	8b 00                	mov    eax,DWORD PTR [eax]
c0025878:	f7 d0                	not    eax
c002587a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002587e:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025882:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025886:	ba 00 00 00 00       	mov    edx,0x0
c002588b:	f7 f3                	div    ebx
c002588d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025891:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025895:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002589b:	0d 00 00 02 00       	or     eax,0x20000
c00258a0:	89 c2                	mov    edx,eax
c00258a2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00258a6:	05 20 03 00 00       	add    eax,0x320
c00258ab:	89 10                	mov    DWORD PTR [eax],edx
c00258ad:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00258b1:	05 e0 03 00 00       	add    eax,0x3e0
c00258b6:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c00258bc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00258c0:	05 80 03 00 00       	add    eax,0x380
c00258c5:	89 c2                	mov    edx,eax
c00258c7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00258cb:	89 02                	mov    DWORD PTR [edx],eax
c00258cd:	90                   	nop
c00258ce:	83 c4 28             	add    esp,0x28
c00258d1:	5b                   	pop    ebx
c00258d2:	c3                   	ret    
c00258d3:	90                   	nop

c00258d4 <APICTimer::open(int, int, void*)>:
c00258d4:	57                   	push   edi
c00258d5:	56                   	push   esi
c00258d6:	53                   	push   ebx
c00258d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00258db:	8b 00                	mov    eax,DWORD PTR [eax]
c00258dd:	83 c0 24             	add    eax,0x24
c00258e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00258e2:	83 ec 08             	sub    esp,0x8
c00258e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00258e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00258ed:	ff d0                	call   eax
c00258ef:	83 c4 10             	add    esp,0x10
c00258f2:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c00258f7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00258fd:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0025903:	83 ec 0c             	sub    esp,0xc
c0025906:	50                   	push   eax
c0025907:	e8 ce f3 ff ff       	call   c0024cda <APIC::getBase()>
c002590c:	83 c4 10             	add    esp,0x10
c002590f:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0025915:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025919:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002591f:	0f b6 f8             	movzx  edi,al
c0025922:	89 d0                	mov    eax,edx
c0025924:	ba 00 00 00 00       	mov    edx,0x0
c0025929:	89 c1                	mov    ecx,eax
c002592b:	80 e5 ff             	and    ch,0xff
c002592e:	89 cb                	mov    ebx,ecx
c0025930:	0f b6 f2             	movzx  esi,dl
c0025933:	89 d8                	mov    eax,ebx
c0025935:	89 f2                	mov    edx,esi
c0025937:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002593b:	8d 5f 08             	lea    ebx,[edi+0x8]
c002593e:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025942:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025946:	83 e0 00             	and    eax,0x0
c0025949:	09 d0                	or     eax,edx
c002594b:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002594f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025953:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025959:	8d 50 01             	lea    edx,[eax+0x1]
c002595c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025960:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025966:	0f b6 d0             	movzx  edx,al
c0025969:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002596d:	83 c2 08             	add    edx,0x8
c0025970:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025974:	0f b6 c9             	movzx  ecx,cl
c0025977:	81 c9 00 00 01 00    	or     ecx,0x10000
c002597d:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025981:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025985:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0025989:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002598f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025993:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0025997:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c002599d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00259a1:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c00259a7:	83 ec 0c             	sub    esp,0xc
c00259aa:	51                   	push   ecx
c00259ab:	6a 01                	push   0x1
c00259ad:	68 a2 57 02 c0       	push   0xc00257a2
c00259b2:	52                   	push   edx
c00259b3:	50                   	push   eax
c00259b4:	e8 e5 e2 fe ff       	call   c0013c9e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00259b9:	83 c4 20             	add    esp,0x20
c00259bc:	89 c2                	mov    edx,eax
c00259be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259c2:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00259c8:	b8 00 00 00 00       	mov    eax,0x0
c00259cd:	5b                   	pop    ebx
c00259ce:	5e                   	pop    esi
c00259cf:	5f                   	pop    edi
c00259d0:	c3                   	ret    
c00259d1:	90                   	nop

c00259d2 <APICTimer::APICTimer()>:
c00259d2:	83 ec 0c             	sub    esp,0xc
c00259d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259d9:	83 ec 08             	sub    esp,0x8
c00259dc:	68 14 c7 02 c0       	push   0xc002c714
c00259e1:	50                   	push   eax
c00259e2:	e8 b7 0b ff ff       	call   c001659e <Timer::Timer(char const*)>
c00259e7:	83 c4 10             	add    esp,0x10
c00259ea:	ba 28 c7 02 c0       	mov    edx,0xc002c728
c00259ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259f3:	89 10                	mov    DWORD PTR [eax],edx
c00259f5:	90                   	nop
c00259f6:	83 c4 0c             	add    esp,0xc
c00259f9:	c3                   	ret    

c00259fa <PIT::write(int)>:
c00259fa:	83 ec 10             	sub    esp,0x10
c00259fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025a01:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0025a05:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025a0b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0025a0f:	a3 24 fc 02 c0       	mov    ds:0xc002fc24,eax
c0025a14:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0025a19:	99                   	cdq    
c0025a1a:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0025a1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025a22:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0025a29:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0025a2e:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0025a32:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0025a37:	ee                   	out    dx,al
c0025a38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025a3c:	0f b6 c0             	movzx  eax,al
c0025a3f:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0025a46:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0025a4a:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0025a4e:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0025a53:	ee                   	out    dx,al
c0025a54:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025a58:	c1 f8 08             	sar    eax,0x8
c0025a5b:	0f b6 c0             	movzx  eax,al
c0025a5e:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0025a65:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0025a69:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0025a6d:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0025a72:	ee                   	out    dx,al
c0025a73:	90                   	nop
c0025a74:	83 c4 10             	add    esp,0x10
c0025a77:	c3                   	ret    

c0025a78 <pitHandler(regs*, void*)>:
c0025a78:	83 ec 0c             	sub    esp,0xc
c0025a7b:	a1 24 fc 02 c0       	mov    eax,ds:0xc002fc24
c0025a80:	99                   	cdq    
c0025a81:	52                   	push   edx
c0025a82:	50                   	push   eax
c0025a83:	6a 00                	push   0x0
c0025a85:	68 00 ca 9a 3b       	push   0x3b9aca00
c0025a8a:	e8 bd 04 00 00       	call   c0025f4c <__udivdi3>
c0025a8f:	83 c4 10             	add    esp,0x10
c0025a92:	83 ec 08             	sub    esp,0x8
c0025a95:	52                   	push   edx
c0025a96:	50                   	push   eax
c0025a97:	e8 91 0b ff ff       	call   c001662d <timerHandler(unsigned long long)>
c0025a9c:	83 c4 10             	add    esp,0x10
c0025a9f:	90                   	nop
c0025aa0:	83 c4 0c             	add    esp,0xc
c0025aa3:	c3                   	ret    

c0025aa4 <PIT::open(int, int, void*)>:
c0025aa4:	83 ec 0c             	sub    esp,0xc
c0025aa7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025aab:	8b 00                	mov    eax,DWORD PTR [eax]
c0025aad:	83 c0 24             	add    eax,0x24
c0025ab0:	8b 00                	mov    eax,DWORD PTR [eax]
c0025ab2:	83 ec 08             	sub    esp,0x8
c0025ab5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025ab9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025abd:	ff d0                	call   eax
c0025abf:	83 c4 10             	add    esp,0x10
c0025ac2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ac6:	83 ec 0c             	sub    esp,0xc
c0025ac9:	6a 00                	push   0x0
c0025acb:	6a 01                	push   0x1
c0025acd:	68 78 5a 02 c0       	push   0xc0025a78
c0025ad2:	6a 00                	push   0x0
c0025ad4:	50                   	push   eax
c0025ad5:	e8 c4 e1 fe ff       	call   c0013c9e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0025ada:	83 c4 20             	add    esp,0x20
c0025add:	89 c2                	mov    edx,eax
c0025adf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ae3:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0025ae9:	b8 00 00 00 00       	mov    eax,0x0
c0025aee:	83 c4 0c             	add    esp,0xc
c0025af1:	c3                   	ret    

c0025af2 <PIT::close(int, int, void*)>:
c0025af2:	83 ec 0c             	sub    esp,0xc
c0025af5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025af9:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0025b03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b07:	6a 01                	push   0x1
c0025b09:	68 78 5a 02 c0       	push   0xc0025a78
c0025b0e:	6a 00                	push   0x0
c0025b10:	50                   	push   eax
c0025b11:	e8 c6 e1 fe ff       	call   c0013cdc <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0025b16:	83 c4 10             	add    esp,0x10
c0025b19:	b8 00 00 00 00       	mov    eax,0x0
c0025b1e:	83 c4 0c             	add    esp,0xc
c0025b21:	c3                   	ret    

c0025b22 <PIT::PIT()>:
c0025b22:	83 ec 0c             	sub    esp,0xc
c0025b25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b29:	83 ec 08             	sub    esp,0x8
c0025b2c:	68 50 c7 02 c0       	push   0xc002c750
c0025b31:	50                   	push   eax
c0025b32:	e8 67 0a ff ff       	call   c001659e <Timer::Timer(char const*)>
c0025b37:	83 c4 10             	add    esp,0x10
c0025b3a:	ba 78 c7 02 c0       	mov    edx,0xc002c778
c0025b3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b43:	89 10                	mov    DWORD PTR [eax],edx
c0025b45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b49:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025b4f:	0f b6 d0             	movzx  edx,al
c0025b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b56:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0025b5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b61:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025b67:	0f b6 d0             	movzx  edx,al
c0025b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b6e:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0025b73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b77:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025b7d:	8d 50 01             	lea    edx,[eax+0x1]
c0025b80:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025b84:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025b8a:	0f b6 d0             	movzx  edx,al
c0025b8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b91:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025b95:	83 e1 3f             	and    ecx,0x3f
c0025b98:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025b9c:	90                   	nop
c0025b9d:	83 c4 0c             	add    esp,0xc
c0025ba0:	c3                   	ret    
c0025ba1:	66 90                	xchg   ax,ax
c0025ba3:	66 90                	xchg   ax,ax
c0025ba5:	66 90                	xchg   ax,ax
c0025ba7:	66 90                	xchg   ax,ax
c0025ba9:	66 90                	xchg   ax,ax
c0025bab:	66 90                	xchg   ax,ax
c0025bad:	66 90                	xchg   ax,ax
c0025baf:	90                   	nop

c0025bb0 <avxDetect>:
c0025bb0:	b8 00 00 00 00       	mov    eax,0x0
c0025bb5:	c3                   	ret    

c0025bb6 <avxSave>:
c0025bb6:	c3                   	ret    

c0025bb7 <avxLoad>:
c0025bb7:	c3                   	ret    

c0025bb8 <avxInit>:
c0025bb8:	c3                   	ret    

c0025bb9 <avxClose>:
c0025bb9:	c3                   	ret    

c0025bba <wouldSheSayYes>:
c0025bba:	c3                   	ret    
c0025bbb:	49                   	dec    ecx
c0025bbc:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0025bc0:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0025bc4:	75 20                	jne    c0025be6 <sseDetect.noSSE+0x1>
c0025bc6:	4e                   	dec    esi
c0025bc7:	79 61                	jns    c0025c2a <x87Detect+0x14>
c0025bc9:	68 2e 2e 2e 00       	push   0x2e2e2e
c0025bce:	66 90                	xchg   ax,ax

c0025bd0 <absolutelyNoChanceInHell>:
c0025bd0:	b8 01 00 00 00       	mov    eax,0x1
c0025bd5:	0f a2                	cpuid  
c0025bd7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c0025bdd:	74 06                	je     c0025be5 <sseDetect.noSSE>
c0025bdf:	b8 01 00 00 00       	mov    eax,0x1
c0025be4:	c3                   	ret    

c0025be5 <sseDetect.noSSE>:
c0025be5:	31 c0                	xor    eax,eax
c0025be7:	c3                   	ret    

c0025be8 <sseSave>:
c0025be8:	0f ae 44 24 08       	fxsave [esp+0x8]
c0025bed:	c3                   	ret    

c0025bee <sseLoad>:
c0025bee:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c0025bf3:	c3                   	ret    

c0025bf4 <sseInit>:
c0025bf4:	e8 43 00 00 00       	call   c0025c3c <x87Init>
c0025bf9:	0f 20 e0             	mov    eax,cr4
c0025bfc:	66 0d 00 06          	or     ax,0x600
c0025c00:	0f 22 e0             	mov    cr4,eax
c0025c03:	c3                   	ret    

c0025c04 <sseClose>:
c0025c04:	c3                   	ret    
c0025c05:	66 90                	xchg   ax,ax
c0025c07:	66 90                	xchg   ax,ax
c0025c09:	66 90                	xchg   ax,ax
c0025c0b:	66 90                	xchg   ax,ax
c0025c0d:	66 90                	xchg   ax,ax
c0025c0f:	90                   	nop

c0025c10 <value_37F>:
c0025c10:	7f 03                	jg     c0025c15 <value_37A+0x1>

c0025c12 <value_37E>:
c0025c12:	7e 03                	jle    c0025c17 <x87Detect+0x1>

c0025c14 <value_37A>:
c0025c14:	7a 03                	jp     c0025c19 <x87Detect+0x3>

c0025c16 <x87Detect>:
c0025c16:	b8 01 00 00 00       	mov    eax,0x1
c0025c1b:	0f a2                	cpuid  
c0025c1d:	f7 c2 01 00 00 00    	test   edx,0x1
c0025c23:	74 06                	je     c0025c2b <x87Detect.nox87>
c0025c25:	b8 01 00 00 00       	mov    eax,0x1
c0025c2a:	c3                   	ret    

c0025c2b <x87Detect.nox87>:
c0025c2b:	b8 00 00 00 00       	mov    eax,0x0
c0025c30:	c3                   	ret    

c0025c31 <x87Save>:
c0025c31:	9b dd 74 24 08       	fsave  [esp+0x8]
c0025c36:	c3                   	ret    

c0025c37 <x87Load>:
c0025c37:	dd 64 24 08          	frstor [esp+0x8]
c0025c3b:	c3                   	ret    

c0025c3c <x87Init>:
c0025c3c:	9b db e3             	finit  
c0025c3f:	0f 20 c0             	mov    eax,cr0
c0025c42:	66 25 fb ff          	and    ax,0xfffb
c0025c46:	66 0d 22 00          	or     ax,0x22
c0025c4a:	0f 22 c0             	mov    cr0,eax
c0025c4d:	0f 06                	clts   
c0025c4f:	d9 2d 14 5c 02 c0    	fldcw  WORD PTR ds:0xc0025c14
c0025c55:	c3                   	ret    

c0025c56 <x87Close>:
c0025c56:	c3                   	ret    
c0025c57:	90                   	nop

c0025c58 <__do_global_ctors_aux>:
c0025c58:	a1 9c 87 02 c0       	mov    eax,ds:0xc002879c
c0025c5d:	83 f8 ff             	cmp    eax,0xffffffff
c0025c60:	74 1a                	je     c0025c7c <__do_global_ctors_aux+0x24>
c0025c62:	55                   	push   ebp
c0025c63:	89 e5                	mov    ebp,esp
c0025c65:	53                   	push   ebx
c0025c66:	52                   	push   edx
c0025c67:	bb 9c 87 02 c0       	mov    ebx,0xc002879c
c0025c6c:	ff d0                	call   eax
c0025c6e:	83 eb 04             	sub    ebx,0x4
c0025c71:	8b 03                	mov    eax,DWORD PTR [ebx]
c0025c73:	83 f8 ff             	cmp    eax,0xffffffff
c0025c76:	75 f4                	jne    c0025c6c <__do_global_ctors_aux+0x14>
c0025c78:	58                   	pop    eax
c0025c79:	5b                   	pop    ebx
c0025c7a:	5d                   	pop    ebp
c0025c7b:	c3                   	ret    
c0025c7c:	c3                   	ret    
c0025c7d:	66 90                	xchg   ax,ax
c0025c7f:	90                   	nop

c0025c80 <__divdi3>:
c0025c80:	55                   	push   ebp
c0025c81:	57                   	push   edi
c0025c82:	56                   	push   esi
c0025c83:	53                   	push   ebx
c0025c84:	83 ec 1c             	sub    esp,0x1c
c0025c87:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0025c8b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025c8f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0025c92:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0025c96:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0025c9a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0025c9e:	85 db                	test   ebx,ebx
c0025ca0:	0f 88 8e 00 00 00    	js     c0025d34 <__divdi3+0xb4>
c0025ca6:	89 dd                	mov    ebp,ebx
c0025ca8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0025cb0:	89 d3                	mov    ebx,edx
c0025cb2:	85 d2                	test   edx,edx
c0025cb4:	79 0d                	jns    c0025cc3 <__divdi3+0x43>
c0025cb6:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0025cba:	f7 d8                	neg    eax
c0025cbc:	83 d2 00             	adc    edx,0x0
c0025cbf:	f7 da                	neg    edx
c0025cc1:	89 d3                	mov    ebx,edx
c0025cc3:	89 c7                	mov    edi,eax
c0025cc5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0025cc8:	85 db                	test   ebx,ebx
c0025cca:	75 48                	jne    c0025d14 <__divdi3+0x94>
c0025ccc:	39 ef                	cmp    edi,ebp
c0025cce:	76 24                	jbe    c0025cf4 <__divdi3+0x74>
c0025cd0:	89 ea                	mov    edx,ebp
c0025cd2:	f7 f7                	div    edi
c0025cd4:	89 c1                	mov    ecx,eax
c0025cd6:	31 f6                	xor    esi,esi
c0025cd8:	89 c8                	mov    eax,ecx
c0025cda:	89 f2                	mov    edx,esi
c0025cdc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0025ce0:	85 c9                	test   ecx,ecx
c0025ce2:	74 07                	je     c0025ceb <__divdi3+0x6b>
c0025ce4:	f7 d8                	neg    eax
c0025ce6:	83 d2 00             	adc    edx,0x0
c0025ce9:	f7 da                	neg    edx
c0025ceb:	83 c4 1c             	add    esp,0x1c
c0025cee:	5b                   	pop    ebx
c0025cef:	5e                   	pop    esi
c0025cf0:	5f                   	pop    edi
c0025cf1:	5d                   	pop    ebp
c0025cf2:	c3                   	ret    
c0025cf3:	90                   	nop
c0025cf4:	85 ff                	test   edi,edi
c0025cf6:	75 0b                	jne    c0025d03 <__divdi3+0x83>
c0025cf8:	b8 01 00 00 00       	mov    eax,0x1
c0025cfd:	31 d2                	xor    edx,edx
c0025cff:	f7 f3                	div    ebx
c0025d01:	89 c7                	mov    edi,eax
c0025d03:	31 d2                	xor    edx,edx
c0025d05:	89 e8                	mov    eax,ebp
c0025d07:	f7 f7                	div    edi
c0025d09:	89 c6                	mov    esi,eax
c0025d0b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0025d0e:	f7 f7                	div    edi
c0025d10:	89 c1                	mov    ecx,eax
c0025d12:	eb c4                	jmp    c0025cd8 <__divdi3+0x58>
c0025d14:	39 eb                	cmp    ebx,ebp
c0025d16:	77 3c                	ja     c0025d54 <__divdi3+0xd4>
c0025d18:	0f bd f3             	bsr    esi,ebx
c0025d1b:	83 f6 1f             	xor    esi,0x1f
c0025d1e:	75 40                	jne    c0025d60 <__divdi3+0xe0>
c0025d20:	39 eb                	cmp    ebx,ebp
c0025d22:	72 09                	jb     c0025d2d <__divdi3+0xad>
c0025d24:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0025d27:	0f 87 97 00 00 00    	ja     c0025dc4 <__divdi3+0x144>
c0025d2d:	b9 01 00 00 00       	mov    ecx,0x1
c0025d32:	eb a4                	jmp    c0025cd8 <__divdi3+0x58>
c0025d34:	f7 d9                	neg    ecx
c0025d36:	83 d3 00             	adc    ebx,0x0
c0025d39:	f7 db                	neg    ebx
c0025d3b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0025d3e:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0025d42:	89 dd                	mov    ebp,ebx
c0025d44:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0025d4c:	e9 5f ff ff ff       	jmp    c0025cb0 <__divdi3+0x30>
c0025d51:	8d 76 00             	lea    esi,[esi+0x0]
c0025d54:	31 f6                	xor    esi,esi
c0025d56:	31 c9                	xor    ecx,ecx
c0025d58:	e9 7b ff ff ff       	jmp    c0025cd8 <__divdi3+0x58>
c0025d5d:	8d 76 00             	lea    esi,[esi+0x0]
c0025d60:	b8 20 00 00 00       	mov    eax,0x20
c0025d65:	29 f0                	sub    eax,esi
c0025d67:	89 f1                	mov    ecx,esi
c0025d69:	d3 e3                	shl    ebx,cl
c0025d6b:	89 fa                	mov    edx,edi
c0025d6d:	88 c1                	mov    cl,al
c0025d6f:	d3 ea                	shr    edx,cl
c0025d71:	09 da                	or     edx,ebx
c0025d73:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0025d77:	89 f1                	mov    ecx,esi
c0025d79:	d3 e7                	shl    edi,cl
c0025d7b:	89 eb                	mov    ebx,ebp
c0025d7d:	88 c1                	mov    cl,al
c0025d7f:	d3 eb                	shr    ebx,cl
c0025d81:	89 f1                	mov    ecx,esi
c0025d83:	d3 e5                	shl    ebp,cl
c0025d85:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0025d88:	88 c1                	mov    cl,al
c0025d8a:	d3 ea                	shr    edx,cl
c0025d8c:	09 d5                	or     ebp,edx
c0025d8e:	89 e8                	mov    eax,ebp
c0025d90:	89 da                	mov    edx,ebx
c0025d92:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0025d96:	89 d3                	mov    ebx,edx
c0025d98:	89 c5                	mov    ebp,eax
c0025d9a:	f7 e7                	mul    edi
c0025d9c:	39 d3                	cmp    ebx,edx
c0025d9e:	72 18                	jb     c0025db8 <__divdi3+0x138>
c0025da0:	74 0a                	je     c0025dac <__divdi3+0x12c>
c0025da2:	89 e9                	mov    ecx,ebp
c0025da4:	31 f6                	xor    esi,esi
c0025da6:	e9 2d ff ff ff       	jmp    c0025cd8 <__divdi3+0x58>
c0025dab:	90                   	nop
c0025dac:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0025daf:	89 f1                	mov    ecx,esi
c0025db1:	d3 e7                	shl    edi,cl
c0025db3:	39 c7                	cmp    edi,eax
c0025db5:	73 eb                	jae    c0025da2 <__divdi3+0x122>
c0025db7:	90                   	nop
c0025db8:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0025dbb:	31 f6                	xor    esi,esi
c0025dbd:	e9 16 ff ff ff       	jmp    c0025cd8 <__divdi3+0x58>
c0025dc2:	66 90                	xchg   ax,ax
c0025dc4:	31 c9                	xor    ecx,ecx
c0025dc6:	e9 0d ff ff ff       	jmp    c0025cd8 <__divdi3+0x58>
c0025dcb:	90                   	nop

c0025dcc <__moddi3>:
c0025dcc:	55                   	push   ebp
c0025dcd:	57                   	push   edi
c0025dce:	56                   	push   esi
c0025dcf:	53                   	push   ebx
c0025dd0:	83 ec 2c             	sub    esp,0x2c
c0025dd3:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0025dd7:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0025ddb:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0025ddf:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0025de3:	85 db                	test   ebx,ebx
c0025de5:	0f 88 85 00 00 00    	js     c0025e70 <__moddi3+0xa4>
c0025deb:	89 de                	mov    esi,ebx
c0025ded:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0025df5:	89 d7                	mov    edi,edx
c0025df7:	85 d2                	test   edx,edx
c0025df9:	79 09                	jns    c0025e04 <__moddi3+0x38>
c0025dfb:	f7 d8                	neg    eax
c0025dfd:	83 d2 00             	adc    edx,0x0
c0025e00:	f7 da                	neg    edx
c0025e02:	89 d7                	mov    edi,edx
c0025e04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025e08:	89 cd                	mov    ebp,ecx
c0025e0a:	85 ff                	test   edi,edi
c0025e0c:	75 52                	jne    c0025e60 <__moddi3+0x94>
c0025e0e:	89 c3                	mov    ebx,eax
c0025e10:	39 f0                	cmp    eax,esi
c0025e12:	76 24                	jbe    c0025e38 <__moddi3+0x6c>
c0025e14:	89 c8                	mov    eax,ecx
c0025e16:	89 f2                	mov    edx,esi
c0025e18:	f7 f3                	div    ebx
c0025e1a:	89 d6                	mov    esi,edx
c0025e1c:	89 f0                	mov    eax,esi
c0025e1e:	31 d2                	xor    edx,edx
c0025e20:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025e24:	85 c9                	test   ecx,ecx
c0025e26:	74 07                	je     c0025e2f <__moddi3+0x63>
c0025e28:	f7 d8                	neg    eax
c0025e2a:	83 d2 00             	adc    edx,0x0
c0025e2d:	f7 da                	neg    edx
c0025e2f:	83 c4 2c             	add    esp,0x2c
c0025e32:	5b                   	pop    ebx
c0025e33:	5e                   	pop    esi
c0025e34:	5f                   	pop    edi
c0025e35:	5d                   	pop    ebp
c0025e36:	c3                   	ret    
c0025e37:	90                   	nop
c0025e38:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0025e3c:	85 db                	test   ebx,ebx
c0025e3e:	75 0d                	jne    c0025e4d <__moddi3+0x81>
c0025e40:	b8 01 00 00 00       	mov    eax,0x1
c0025e45:	31 d2                	xor    edx,edx
c0025e47:	f7 f7                	div    edi
c0025e49:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025e4d:	89 f0                	mov    eax,esi
c0025e4f:	31 d2                	xor    edx,edx
c0025e51:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0025e55:	f7 f7                	div    edi
c0025e57:	89 e8                	mov    eax,ebp
c0025e59:	f7 f7                	div    edi
c0025e5b:	89 d6                	mov    esi,edx
c0025e5d:	eb bd                	jmp    c0025e1c <__moddi3+0x50>
c0025e5f:	90                   	nop
c0025e60:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0025e64:	39 f7                	cmp    edi,esi
c0025e66:	76 20                	jbe    c0025e88 <__moddi3+0xbc>
c0025e68:	89 c8                	mov    eax,ecx
c0025e6a:	89 f2                	mov    edx,esi
c0025e6c:	eb b2                	jmp    c0025e20 <__moddi3+0x54>
c0025e6e:	66 90                	xchg   ax,ax
c0025e70:	f7 d9                	neg    ecx
c0025e72:	83 d3 00             	adc    ebx,0x0
c0025e75:	f7 db                	neg    ebx
c0025e77:	89 de                	mov    esi,ebx
c0025e79:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0025e81:	e9 6f ff ff ff       	jmp    c0025df5 <__moddi3+0x29>
c0025e86:	66 90                	xchg   ax,ax
c0025e88:	0f bd c7             	bsr    eax,edi
c0025e8b:	83 f0 1f             	xor    eax,0x1f
c0025e8e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0025e92:	75 24                	jne    c0025eb8 <__moddi3+0xec>
c0025e94:	39 f7                	cmp    edi,esi
c0025e96:	72 06                	jb     c0025e9e <__moddi3+0xd2>
c0025e98:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0025e9c:	77 0c                	ja     c0025eaa <__moddi3+0xde>
c0025e9e:	89 e9                	mov    ecx,ebp
c0025ea0:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0025ea4:	19 fe                	sbb    esi,edi
c0025ea6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0025eaa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025eae:	89 f2                	mov    edx,esi
c0025eb0:	e9 6b ff ff ff       	jmp    c0025e20 <__moddi3+0x54>
c0025eb5:	8d 76 00             	lea    esi,[esi+0x0]
c0025eb8:	b8 20 00 00 00       	mov    eax,0x20
c0025ebd:	89 c2                	mov    edx,eax
c0025ebf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0025ec3:	29 da                	sub    edx,ebx
c0025ec5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0025ec9:	88 d9                	mov    cl,bl
c0025ecb:	d3 e7                	shl    edi,cl
c0025ecd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025ed1:	88 d1                	mov    cl,dl
c0025ed3:	d3 e8                	shr    eax,cl
c0025ed5:	09 c7                	or     edi,eax
c0025ed7:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0025edb:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0025edf:	89 d8                	mov    eax,ebx
c0025ee1:	88 d9                	mov    cl,bl
c0025ee3:	d3 e7                	shl    edi,cl
c0025ee5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0025ee9:	89 f3                	mov    ebx,esi
c0025eeb:	88 d1                	mov    cl,dl
c0025eed:	d3 eb                	shr    ebx,cl
c0025eef:	89 c7                	mov    edi,eax
c0025ef1:	88 c1                	mov    cl,al
c0025ef3:	d3 e6                	shl    esi,cl
c0025ef5:	89 e8                	mov    eax,ebp
c0025ef7:	88 d1                	mov    cl,dl
c0025ef9:	d3 e8                	shr    eax,cl
c0025efb:	09 f0                	or     eax,esi
c0025efd:	89 f9                	mov    ecx,edi
c0025eff:	d3 e5                	shl    ebp,cl
c0025f01:	89 da                	mov    edx,ebx
c0025f03:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0025f07:	89 d3                	mov    ebx,edx
c0025f09:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0025f0d:	89 c6                	mov    esi,eax
c0025f0f:	89 d1                	mov    ecx,edx
c0025f11:	39 d3                	cmp    ebx,edx
c0025f13:	72 27                	jb     c0025f3c <__moddi3+0x170>
c0025f15:	74 21                	je     c0025f38 <__moddi3+0x16c>
c0025f17:	29 f5                	sub    ebp,esi
c0025f19:	19 cb                	sbb    ebx,ecx
c0025f1b:	89 de                	mov    esi,ebx
c0025f1d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0025f21:	d3 e6                	shl    esi,cl
c0025f23:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0025f27:	89 f9                	mov    ecx,edi
c0025f29:	d3 ed                	shr    ebp,cl
c0025f2b:	09 ee                	or     esi,ebp
c0025f2d:	89 f0                	mov    eax,esi
c0025f2f:	d3 eb                	shr    ebx,cl
c0025f31:	89 da                	mov    edx,ebx
c0025f33:	e9 e8 fe ff ff       	jmp    c0025e20 <__moddi3+0x54>
c0025f38:	39 c5                	cmp    ebp,eax
c0025f3a:	73 db                	jae    c0025f17 <__moddi3+0x14b>
c0025f3c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0025f40:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0025f44:	89 d1                	mov    ecx,edx
c0025f46:	89 c6                	mov    esi,eax
c0025f48:	eb cd                	jmp    c0025f17 <__moddi3+0x14b>
c0025f4a:	66 90                	xchg   ax,ax

c0025f4c <__udivdi3>:
c0025f4c:	55                   	push   ebp
c0025f4d:	57                   	push   edi
c0025f4e:	56                   	push   esi
c0025f4f:	53                   	push   ebx
c0025f50:	83 ec 1c             	sub    esp,0x1c
c0025f53:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0025f57:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0025f5b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0025f5f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0025f63:	85 d2                	test   edx,edx
c0025f65:	75 41                	jne    c0025fa8 <__udivdi3+0x5c>
c0025f67:	39 f7                	cmp    edi,esi
c0025f69:	76 15                	jbe    c0025f80 <__udivdi3+0x34>
c0025f6b:	89 e8                	mov    eax,ebp
c0025f6d:	89 f2                	mov    edx,esi
c0025f6f:	f7 f7                	div    edi
c0025f71:	31 db                	xor    ebx,ebx
c0025f73:	89 da                	mov    edx,ebx
c0025f75:	83 c4 1c             	add    esp,0x1c
c0025f78:	5b                   	pop    ebx
c0025f79:	5e                   	pop    esi
c0025f7a:	5f                   	pop    edi
c0025f7b:	5d                   	pop    ebp
c0025f7c:	c3                   	ret    
c0025f7d:	8d 76 00             	lea    esi,[esi+0x0]
c0025f80:	89 f9                	mov    ecx,edi
c0025f82:	85 ff                	test   edi,edi
c0025f84:	75 0b                	jne    c0025f91 <__udivdi3+0x45>
c0025f86:	b8 01 00 00 00       	mov    eax,0x1
c0025f8b:	31 d2                	xor    edx,edx
c0025f8d:	f7 f7                	div    edi
c0025f8f:	89 c1                	mov    ecx,eax
c0025f91:	31 d2                	xor    edx,edx
c0025f93:	89 f0                	mov    eax,esi
c0025f95:	f7 f1                	div    ecx
c0025f97:	89 c3                	mov    ebx,eax
c0025f99:	89 e8                	mov    eax,ebp
c0025f9b:	f7 f1                	div    ecx
c0025f9d:	89 da                	mov    edx,ebx
c0025f9f:	83 c4 1c             	add    esp,0x1c
c0025fa2:	5b                   	pop    ebx
c0025fa3:	5e                   	pop    esi
c0025fa4:	5f                   	pop    edi
c0025fa5:	5d                   	pop    ebp
c0025fa6:	c3                   	ret    
c0025fa7:	90                   	nop
c0025fa8:	39 f2                	cmp    edx,esi
c0025faa:	77 1c                	ja     c0025fc8 <__udivdi3+0x7c>
c0025fac:	0f bd da             	bsr    ebx,edx
c0025faf:	83 f3 1f             	xor    ebx,0x1f
c0025fb2:	75 24                	jne    c0025fd8 <__udivdi3+0x8c>
c0025fb4:	39 f2                	cmp    edx,esi
c0025fb6:	72 08                	jb     c0025fc0 <__udivdi3+0x74>
c0025fb8:	39 ef                	cmp    edi,ebp
c0025fba:	0f 87 84 00 00 00    	ja     c0026044 <__udivdi3+0xf8>
c0025fc0:	b8 01 00 00 00       	mov    eax,0x1
c0025fc5:	eb ac                	jmp    c0025f73 <__udivdi3+0x27>
c0025fc7:	90                   	nop
c0025fc8:	31 db                	xor    ebx,ebx
c0025fca:	31 c0                	xor    eax,eax
c0025fcc:	89 da                	mov    edx,ebx
c0025fce:	83 c4 1c             	add    esp,0x1c
c0025fd1:	5b                   	pop    ebx
c0025fd2:	5e                   	pop    esi
c0025fd3:	5f                   	pop    edi
c0025fd4:	5d                   	pop    ebp
c0025fd5:	c3                   	ret    
c0025fd6:	66 90                	xchg   ax,ax
c0025fd8:	b8 20 00 00 00       	mov    eax,0x20
c0025fdd:	29 d8                	sub    eax,ebx
c0025fdf:	88 d9                	mov    cl,bl
c0025fe1:	d3 e2                	shl    edx,cl
c0025fe3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0025fe7:	89 fa                	mov    edx,edi
c0025fe9:	88 c1                	mov    cl,al
c0025feb:	d3 ea                	shr    edx,cl
c0025fed:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0025ff1:	09 d1                	or     ecx,edx
c0025ff3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0025ff7:	88 d9                	mov    cl,bl
c0025ff9:	d3 e7                	shl    edi,cl
c0025ffb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0025fff:	89 f7                	mov    edi,esi
c0026001:	88 c1                	mov    cl,al
c0026003:	d3 ef                	shr    edi,cl
c0026005:	88 d9                	mov    cl,bl
c0026007:	d3 e6                	shl    esi,cl
c0026009:	89 ea                	mov    edx,ebp
c002600b:	88 c1                	mov    cl,al
c002600d:	d3 ea                	shr    edx,cl
c002600f:	09 d6                	or     esi,edx
c0026011:	89 f0                	mov    eax,esi
c0026013:	89 fa                	mov    edx,edi
c0026015:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026019:	89 d7                	mov    edi,edx
c002601b:	89 c6                	mov    esi,eax
c002601d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026021:	39 d7                	cmp    edi,edx
c0026023:	72 13                	jb     c0026038 <__udivdi3+0xec>
c0026025:	74 09                	je     c0026030 <__udivdi3+0xe4>
c0026027:	89 f0                	mov    eax,esi
c0026029:	31 db                	xor    ebx,ebx
c002602b:	e9 43 ff ff ff       	jmp    c0025f73 <__udivdi3+0x27>
c0026030:	88 d9                	mov    cl,bl
c0026032:	d3 e5                	shl    ebp,cl
c0026034:	39 c5                	cmp    ebp,eax
c0026036:	73 ef                	jae    c0026027 <__udivdi3+0xdb>
c0026038:	8d 46 ff             	lea    eax,[esi-0x1]
c002603b:	31 db                	xor    ebx,ebx
c002603d:	e9 31 ff ff ff       	jmp    c0025f73 <__udivdi3+0x27>
c0026042:	66 90                	xchg   ax,ax
c0026044:	31 c0                	xor    eax,eax
c0026046:	e9 28 ff ff ff       	jmp    c0025f73 <__udivdi3+0x27>
c002604b:	90                   	nop

c002604c <__umoddi3>:
c002604c:	55                   	push   ebp
c002604d:	57                   	push   edi
c002604e:	56                   	push   esi
c002604f:	53                   	push   ebx
c0026050:	83 ec 1c             	sub    esp,0x1c
c0026053:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0026057:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002605b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002605f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0026063:	89 da                	mov    edx,ebx
c0026065:	85 c0                	test   eax,eax
c0026067:	75 37                	jne    c00260a0 <__umoddi3+0x54>
c0026069:	39 df                	cmp    edi,ebx
c002606b:	76 13                	jbe    c0026080 <__umoddi3+0x34>
c002606d:	89 f0                	mov    eax,esi
c002606f:	f7 f7                	div    edi
c0026071:	89 d0                	mov    eax,edx
c0026073:	31 d2                	xor    edx,edx
c0026075:	83 c4 1c             	add    esp,0x1c
c0026078:	5b                   	pop    ebx
c0026079:	5e                   	pop    esi
c002607a:	5f                   	pop    edi
c002607b:	5d                   	pop    ebp
c002607c:	c3                   	ret    
c002607d:	8d 76 00             	lea    esi,[esi+0x0]
c0026080:	89 fd                	mov    ebp,edi
c0026082:	85 ff                	test   edi,edi
c0026084:	75 0b                	jne    c0026091 <__umoddi3+0x45>
c0026086:	b8 01 00 00 00       	mov    eax,0x1
c002608b:	31 d2                	xor    edx,edx
c002608d:	f7 f7                	div    edi
c002608f:	89 c5                	mov    ebp,eax
c0026091:	89 d8                	mov    eax,ebx
c0026093:	31 d2                	xor    edx,edx
c0026095:	f7 f5                	div    ebp
c0026097:	89 f0                	mov    eax,esi
c0026099:	f7 f5                	div    ebp
c002609b:	89 d0                	mov    eax,edx
c002609d:	eb d4                	jmp    c0026073 <__umoddi3+0x27>
c002609f:	90                   	nop
c00260a0:	89 f1                	mov    ecx,esi
c00260a2:	39 d8                	cmp    eax,ebx
c00260a4:	76 0a                	jbe    c00260b0 <__umoddi3+0x64>
c00260a6:	89 f0                	mov    eax,esi
c00260a8:	83 c4 1c             	add    esp,0x1c
c00260ab:	5b                   	pop    ebx
c00260ac:	5e                   	pop    esi
c00260ad:	5f                   	pop    edi
c00260ae:	5d                   	pop    ebp
c00260af:	c3                   	ret    
c00260b0:	0f bd e8             	bsr    ebp,eax
c00260b3:	83 f5 1f             	xor    ebp,0x1f
c00260b6:	75 1c                	jne    c00260d4 <__umoddi3+0x88>
c00260b8:	39 d8                	cmp    eax,ebx
c00260ba:	72 04                	jb     c00260c0 <__umoddi3+0x74>
c00260bc:	39 f7                	cmp    edi,esi
c00260be:	77 08                	ja     c00260c8 <__umoddi3+0x7c>
c00260c0:	89 da                	mov    edx,ebx
c00260c2:	29 fe                	sub    esi,edi
c00260c4:	19 c2                	sbb    edx,eax
c00260c6:	89 f1                	mov    ecx,esi
c00260c8:	89 c8                	mov    eax,ecx
c00260ca:	83 c4 1c             	add    esp,0x1c
c00260cd:	5b                   	pop    ebx
c00260ce:	5e                   	pop    esi
c00260cf:	5f                   	pop    edi
c00260d0:	5d                   	pop    ebp
c00260d1:	c3                   	ret    
c00260d2:	66 90                	xchg   ax,ax
c00260d4:	ba 20 00 00 00       	mov    edx,0x20
c00260d9:	29 ea                	sub    edx,ebp
c00260db:	89 e9                	mov    ecx,ebp
c00260dd:	d3 e0                	shl    eax,cl
c00260df:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00260e3:	89 f8                	mov    eax,edi
c00260e5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00260e9:	88 d1                	mov    cl,dl
c00260eb:	d3 e8                	shr    eax,cl
c00260ed:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00260f1:	09 c1                	or     ecx,eax
c00260f3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00260f7:	89 e9                	mov    ecx,ebp
c00260f9:	d3 e7                	shl    edi,cl
c00260fb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00260ff:	89 d8                	mov    eax,ebx
c0026101:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0026105:	88 d1                	mov    cl,dl
c0026107:	d3 e8                	shr    eax,cl
c0026109:	89 c7                	mov    edi,eax
c002610b:	89 e9                	mov    ecx,ebp
c002610d:	d3 e3                	shl    ebx,cl
c002610f:	89 f0                	mov    eax,esi
c0026111:	88 d1                	mov    cl,dl
c0026113:	d3 e8                	shr    eax,cl
c0026115:	09 d8                	or     eax,ebx
c0026117:	89 e9                	mov    ecx,ebp
c0026119:	d3 e6                	shl    esi,cl
c002611b:	89 f3                	mov    ebx,esi
c002611d:	89 fa                	mov    edx,edi
c002611f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026123:	89 d1                	mov    ecx,edx
c0026125:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026129:	89 c6                	mov    esi,eax
c002612b:	89 d7                	mov    edi,edx
c002612d:	39 d1                	cmp    ecx,edx
c002612f:	72 27                	jb     c0026158 <__umoddi3+0x10c>
c0026131:	74 21                	je     c0026154 <__umoddi3+0x108>
c0026133:	89 ca                	mov    edx,ecx
c0026135:	29 f3                	sub    ebx,esi
c0026137:	19 fa                	sbb    edx,edi
c0026139:	89 d0                	mov    eax,edx
c002613b:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c002613f:	d3 e0                	shl    eax,cl
c0026141:	89 e9                	mov    ecx,ebp
c0026143:	d3 eb                	shr    ebx,cl
c0026145:	09 d8                	or     eax,ebx
c0026147:	d3 ea                	shr    edx,cl
c0026149:	83 c4 1c             	add    esp,0x1c
c002614c:	5b                   	pop    ebx
c002614d:	5e                   	pop    esi
c002614e:	5f                   	pop    edi
c002614f:	5d                   	pop    ebp
c0026150:	c3                   	ret    
c0026151:	8d 76 00             	lea    esi,[esi+0x0]
c0026154:	39 c3                	cmp    ebx,eax
c0026156:	73 db                	jae    c0026133 <__umoddi3+0xe7>
c0026158:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c002615c:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0026160:	89 d7                	mov    edi,edx
c0026162:	89 c6                	mov    esi,eax
c0026164:	eb cd                	jmp    c0026133 <__umoddi3+0xe7>

c0026166 <__addsf3>:
c0026166:	55                   	push   ebp
c0026167:	89 e5                	mov    ebp,esp
c0026169:	57                   	push   edi
c002616a:	56                   	push   esi
c002616b:	53                   	push   ebx
c002616c:	83 ec 08             	sub    esp,0x8
c002616f:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026172:	89 fa                	mov    edx,edi
c0026174:	89 f8                	mov    eax,edi
c0026176:	c1 f8 17             	sar    eax,0x17
c0026179:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002617c:	c1 e2 08             	shl    edx,0x8
c002617f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026185:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026188:	89 de                	mov    esi,ebx
c002618a:	c1 fe 17             	sar    esi,0x17
c002618d:	c1 e3 08             	shl    ebx,0x8
c0026190:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026196:	31 f0                	xor    eax,esi
c0026198:	0f 88 3b 01 00 00    	js     c00262d9 <__addsf3+0x173>
c002619e:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00261a1:	29 f1                	sub    ecx,esi
c00261a3:	85 c9                	test   ecx,ecx
c00261a5:	7e 54                	jle    c00261fb <__addsf3+0x95>
c00261a7:	89 f0                	mov    eax,esi
c00261a9:	84 c0                	test   al,al
c00261ab:	75 10                	jne    c00261bd <__addsf3+0x57>
c00261ad:	85 db                	test   ebx,ebx
c00261af:	0f 84 aa 02 00 00    	je     c002645f <__addsf3+0x2f9>
c00261b5:	49                   	dec    ecx
c00261b6:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00261b9:	74 38                	je     c00261f3 <__addsf3+0x8d>
c00261bb:	eb 13                	jmp    c00261d0 <__addsf3+0x6a>
c00261bd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00261c0:	f7 d0                	not    eax
c00261c2:	84 c0                	test   al,al
c00261c4:	0f 84 95 02 00 00    	je     c002645f <__addsf3+0x2f9>
c00261ca:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00261d0:	83 f9 1f             	cmp    ecx,0x1f
c00261d3:	0f 8f 86 02 00 00    	jg     c002645f <__addsf3+0x2f9>
c00261d9:	89 de                	mov    esi,ebx
c00261db:	d3 ee                	shr    esi,cl
c00261dd:	b8 20 00 00 00       	mov    eax,0x20
c00261e2:	29 c8                	sub    eax,ecx
c00261e4:	89 c1                	mov    ecx,eax
c00261e6:	d3 e3                	shl    ebx,cl
c00261e8:	31 c0                	xor    eax,eax
c00261ea:	85 db                	test   ebx,ebx
c00261ec:	0f 95 c0             	setne  al
c00261ef:	09 f0                	or     eax,esi
c00261f1:	01 d0                	add    eax,edx
c00261f3:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00261f6:	e9 b6 00 00 00       	jmp    c00262b1 <__addsf3+0x14b>
c00261fb:	74 5c                	je     c0026259 <__addsf3+0xf3>
c00261fd:	89 f1                	mov    ecx,esi
c00261ff:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0026202:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026205:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026209:	75 14                	jne    c002621f <__addsf3+0xb9>
c002620b:	85 d2                	test   edx,edx
c002620d:	0f 84 4c 02 00 00    	je     c002645f <__addsf3+0x2f9>
c0026213:	49                   	dec    ecx
c0026214:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026217:	0f 84 94 00 00 00    	je     c00262b1 <__addsf3+0x14b>
c002621d:	eb 12                	jmp    c0026231 <__addsf3+0xcb>
c002621f:	89 f0                	mov    eax,esi
c0026221:	f7 d0                	not    eax
c0026223:	84 c0                	test   al,al
c0026225:	0f 84 34 02 00 00    	je     c002645f <__addsf3+0x2f9>
c002622b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026231:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026234:	83 f9 1f             	cmp    ecx,0x1f
c0026237:	0f 8f 22 02 00 00    	jg     c002645f <__addsf3+0x2f9>
c002623d:	89 d7                	mov    edi,edx
c002623f:	d3 ef                	shr    edi,cl
c0026241:	b8 20 00 00 00       	mov    eax,0x20
c0026246:	29 c8                	sub    eax,ecx
c0026248:	89 c1                	mov    ecx,eax
c002624a:	d3 e2                	shl    edx,cl
c002624c:	31 c0                	xor    eax,eax
c002624e:	85 d2                	test   edx,edx
c0026250:	0f 95 c0             	setne  al
c0026253:	09 f8                	or     eax,edi
c0026255:	01 d8                	add    eax,ebx
c0026257:	eb 58                	jmp    c00262b1 <__addsf3+0x14b>
c0026259:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002625c:	8d 70 01             	lea    esi,[eax+0x1]
c002625f:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0026265:	75 32                	jne    c0026299 <__addsf3+0x133>
c0026267:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c002626b:	75 1f                	jne    c002628c <__addsf3+0x126>
c002626d:	85 d2                	test   edx,edx
c002626f:	0f 84 e0 01 00 00    	je     c0026455 <__addsf3+0x2ef>
c0026275:	85 db                	test   ebx,ebx
c0026277:	0f 84 e2 01 00 00    	je     c002645f <__addsf3+0x2f9>
c002627d:	89 d0                	mov    eax,edx
c002627f:	01 d8                	add    eax,ebx
c0026281:	0f 89 a9 01 00 00    	jns    c0026430 <__addsf3+0x2ca>
c0026287:	e9 9d 01 00 00       	jmp    c0026429 <__addsf3+0x2c3>
c002628c:	85 d2                	test   edx,edx
c002628e:	0f 85 cb 01 00 00    	jne    c002645f <__addsf3+0x2f9>
c0026294:	e9 bc 01 00 00       	jmp    c0026455 <__addsf3+0x2ef>
c0026299:	31 c0                	xor    eax,eax
c002629b:	89 f1                	mov    ecx,esi
c002629d:	f7 d1                	not    ecx
c002629f:	84 c9                	test   cl,cl
c00262a1:	0f 84 90 01 00 00    	je     c0026437 <__addsf3+0x2d1>
c00262a7:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00262aa:	d1 e8                	shr    eax,1
c00262ac:	e9 86 01 00 00       	jmp    c0026437 <__addsf3+0x2d1>
c00262b1:	85 c0                	test   eax,eax
c00262b3:	0f 89 7e 01 00 00    	jns    c0026437 <__addsf3+0x2d1>
c00262b9:	46                   	inc    esi
c00262ba:	89 f2                	mov    edx,esi
c00262bc:	f7 d2                	not    edx
c00262be:	84 d2                	test   dl,dl
c00262c0:	0f 84 6f 01 00 00    	je     c0026435 <__addsf3+0x2cf>
c00262c6:	89 c2                	mov    edx,eax
c00262c8:	83 e2 01             	and    edx,0x1
c00262cb:	d1 e8                	shr    eax,1
c00262cd:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00262d2:	09 d0                	or     eax,edx
c00262d4:	e9 5e 01 00 00       	jmp    c0026437 <__addsf3+0x2d1>
c00262d9:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c00262dd:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00262e0:	89 f0                	mov    eax,esi
c00262e2:	0f b6 c0             	movzx  eax,al
c00262e5:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00262e8:	29 c1                	sub    ecx,eax
c00262ea:	85 c9                	test   ecx,ecx
c00262ec:	7e 55                	jle    c0026343 <__addsf3+0x1dd>
c00262ee:	85 c0                	test   eax,eax
c00262f0:	75 11                	jne    c0026303 <__addsf3+0x19d>
c00262f2:	85 db                	test   ebx,ebx
c00262f4:	0f 84 65 01 00 00    	je     c002645f <__addsf3+0x2f9>
c00262fa:	49                   	dec    ecx
c00262fb:	75 19                	jne    c0026316 <__addsf3+0x1b0>
c00262fd:	89 d0                	mov    eax,edx
c00262ff:	29 d8                	sub    eax,ebx
c0026301:	eb 38                	jmp    c002633b <__addsf3+0x1d5>
c0026303:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026306:	f7 d0                	not    eax
c0026308:	84 c0                	test   al,al
c002630a:	0f 84 4f 01 00 00    	je     c002645f <__addsf3+0x2f9>
c0026310:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026316:	83 f9 1f             	cmp    ecx,0x1f
c0026319:	0f 8f 40 01 00 00    	jg     c002645f <__addsf3+0x2f9>
c002631f:	89 de                	mov    esi,ebx
c0026321:	d3 ee                	shr    esi,cl
c0026323:	b8 20 00 00 00       	mov    eax,0x20
c0026328:	29 c8                	sub    eax,ecx
c002632a:	89 c1                	mov    ecx,eax
c002632c:	d3 e3                	shl    ebx,cl
c002632e:	31 c0                	xor    eax,eax
c0026330:	85 db                	test   ebx,ebx
c0026332:	0f 95 c0             	setne  al
c0026335:	09 f0                	or     eax,esi
c0026337:	29 c2                	sub    edx,eax
c0026339:	89 d0                	mov    eax,edx
c002633b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002633e:	e9 af 00 00 00       	jmp    c00263f2 <__addsf3+0x28c>
c0026343:	74 5c                	je     c00263a1 <__addsf3+0x23b>
c0026345:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0026348:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002634b:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c002634f:	75 14                	jne    c0026365 <__addsf3+0x1ff>
c0026351:	85 d2                	test   edx,edx
c0026353:	0f 84 06 01 00 00    	je     c002645f <__addsf3+0x2f9>
c0026359:	48                   	dec    eax
c002635a:	75 1b                	jne    c0026377 <__addsf3+0x211>
c002635c:	89 d8                	mov    eax,ebx
c002635e:	29 d0                	sub    eax,edx
c0026360:	e9 8d 00 00 00       	jmp    c00263f2 <__addsf3+0x28c>
c0026365:	89 f1                	mov    ecx,esi
c0026367:	f7 d1                	not    ecx
c0026369:	84 c9                	test   cl,cl
c002636b:	0f 84 ee 00 00 00    	je     c002645f <__addsf3+0x2f9>
c0026371:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026377:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002637a:	83 f8 1f             	cmp    eax,0x1f
c002637d:	0f 8f dc 00 00 00    	jg     c002645f <__addsf3+0x2f9>
c0026383:	89 d7                	mov    edi,edx
c0026385:	88 c1                	mov    cl,al
c0026387:	d3 ef                	shr    edi,cl
c0026389:	b9 20 00 00 00       	mov    ecx,0x20
c002638e:	29 c1                	sub    ecx,eax
c0026390:	d3 e2                	shl    edx,cl
c0026392:	31 c0                	xor    eax,eax
c0026394:	85 d2                	test   edx,edx
c0026396:	0f 95 c0             	setne  al
c0026399:	09 f8                	or     eax,edi
c002639b:	29 c3                	sub    ebx,eax
c002639d:	89 d8                	mov    eax,ebx
c002639f:	eb 51                	jmp    c00263f2 <__addsf3+0x28c>
c00263a1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00263a4:	40                   	inc    eax
c00263a5:	a8 fe                	test   al,0xfe
c00263a7:	75 3d                	jne    c00263e6 <__addsf3+0x280>
c00263a9:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c00263ad:	0f 85 a7 00 00 00    	jne    c002645a <__addsf3+0x2f4>
c00263b3:	85 d2                	test   edx,edx
c00263b5:	75 12                	jne    c00263c9 <__addsf3+0x263>
c00263b7:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00263ba:	85 db                	test   ebx,ebx
c00263bc:	0f 85 9d 00 00 00    	jne    c002645f <__addsf3+0x2f9>
c00263c2:	31 ff                	xor    edi,edi
c00263c4:	e9 96 00 00 00       	jmp    c002645f <__addsf3+0x2f9>
c00263c9:	85 db                	test   ebx,ebx
c00263cb:	0f 84 8e 00 00 00    	je     c002645f <__addsf3+0x2f9>
c00263d1:	89 d0                	mov    eax,edx
c00263d3:	29 d8                	sub    eax,ebx
c00263d5:	79 06                	jns    c00263dd <__addsf3+0x277>
c00263d7:	89 d8                	mov    eax,ebx
c00263d9:	29 d0                	sub    eax,edx
c00263db:	eb 5a                	jmp    c0026437 <__addsf3+0x2d1>
c00263dd:	bf 00 00 00 00       	mov    edi,0x0
c00263e2:	74 7b                	je     c002645f <__addsf3+0x2f9>
c00263e4:	eb 4a                	jmp    c0026430 <__addsf3+0x2ca>
c00263e6:	89 d0                	mov    eax,edx
c00263e8:	29 d8                	sub    eax,ebx
c00263ea:	79 12                	jns    c00263fe <__addsf3+0x298>
c00263ec:	89 d8                	mov    eax,ebx
c00263ee:	29 d0                	sub    eax,edx
c00263f0:	eb 09                	jmp    c00263fb <__addsf3+0x295>
c00263f2:	85 c0                	test   eax,eax
c00263f4:	79 41                	jns    c0026437 <__addsf3+0x2d1>
c00263f6:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00263fb:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c00263fe:	31 f6                	xor    esi,esi
c0026400:	85 c0                	test   eax,eax
c0026402:	74 33                	je     c0026437 <__addsf3+0x2d1>
c0026404:	0f bd c8             	bsr    ecx,eax
c0026407:	83 f1 1f             	xor    ecx,0x1f
c002640a:	d3 e0                	shl    eax,cl
c002640c:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0026410:	39 ca                	cmp    edx,ecx
c0026412:	7f 10                	jg     c0026424 <__addsf3+0x2be>
c0026414:	29 d1                	sub    ecx,edx
c0026416:	41                   	inc    ecx
c0026417:	d3 e8                	shr    eax,cl
c0026419:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002641c:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0026422:	eb 13                	jmp    c0026437 <__addsf3+0x2d1>
c0026424:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026427:	29 ce                	sub    esi,ecx
c0026429:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002642e:	eb 07                	jmp    c0026437 <__addsf3+0x2d1>
c0026430:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026433:	eb 02                	jmp    c0026437 <__addsf3+0x2d1>
c0026435:	31 c0                	xor    eax,eax
c0026437:	89 c2                	mov    edx,eax
c0026439:	c1 ea 08             	shr    edx,0x8
c002643c:	a8 7f                	test   al,0x7f
c002643e:	0f 95 c1             	setne  cl
c0026441:	09 d1                	or     ecx,edx
c0026443:	83 e1 01             	and    ecx,0x1
c0026446:	c1 e8 07             	shr    eax,0x7
c0026449:	21 c8                	and    eax,ecx
c002644b:	c1 e6 17             	shl    esi,0x17
c002644e:	09 d6                	or     esi,edx
c0026450:	8d 3c 30             	lea    edi,[eax+esi*1]
c0026453:	eb 0a                	jmp    c002645f <__addsf3+0x2f9>
c0026455:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026458:	eb 05                	jmp    c002645f <__addsf3+0x2f9>
c002645a:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c002645f:	89 f8                	mov    eax,edi
c0026461:	5a                   	pop    edx
c0026462:	59                   	pop    ecx
c0026463:	5b                   	pop    ebx
c0026464:	5e                   	pop    esi
c0026465:	5f                   	pop    edi
c0026466:	5d                   	pop    ebp
c0026467:	c3                   	ret    

c0026468 <__subsf3>:
c0026468:	55                   	push   ebp
c0026469:	89 e5                	mov    ebp,esp
c002646b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002646e:	05 00 00 00 80       	add    eax,0x80000000
c0026473:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026476:	5d                   	pop    ebp
c0026477:	e9 ea fc ff ff       	jmp    c0026166 <__addsf3>

c002647c <__negsf2>:
c002647c:	55                   	push   ebp
c002647d:	89 e5                	mov    ebp,esp
c002647f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026482:	05 00 00 00 80       	add    eax,0x80000000
c0026487:	5d                   	pop    ebp
c0026488:	c3                   	ret    

c0026489 <__mulsf3>:
c0026489:	55                   	push   ebp
c002648a:	89 e5                	mov    ebp,esp
c002648c:	57                   	push   edi
c002648d:	56                   	push   esi
c002648e:	53                   	push   ebx
c002648f:	83 ec 1c             	sub    esp,0x1c
c0026492:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0026495:	89 f0                	mov    eax,esi
c0026497:	89 f1                	mov    ecx,esi
c0026499:	c1 f9 17             	sar    ecx,0x17
c002649c:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c002649f:	c1 e0 08             	shl    eax,0x8
c00264a2:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00264a7:	89 c1                	mov    ecx,eax
c00264a9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00264ac:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00264af:	89 c7                	mov    edi,eax
c00264b1:	c1 ff 17             	sar    edi,0x17
c00264b4:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00264b8:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00264bb:	89 f8                	mov    eax,edi
c00264bd:	0f b6 c0             	movzx  eax,al
c00264c0:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00264c3:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c00264c7:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00264ca:	42                   	inc    edx
c00264cb:	80 e2 fe             	and    dl,0xfe
c00264ce:	75 7b                	jne    c002654b <__mulsf3+0xc2>
c00264d0:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00264d4:	74 54                	je     c002652a <__mulsf3+0xa1>
c00264d6:	85 c9                	test   ecx,ecx
c00264d8:	0f 85 64 01 00 00    	jne    c0026642 <__mulsf3+0x1b9>
c00264de:	8d 57 01             	lea    edx,[edi+0x1]
c00264e1:	80 e2 fe             	and    dl,0xfe
c00264e4:	75 1f                	jne    c0026505 <__mulsf3+0x7c>
c00264e6:	85 c0                	test   eax,eax
c00264e8:	b8 00 00 00 00       	mov    eax,0x0
c00264ed:	74 29                	je     c0026518 <__mulsf3+0x8f>
c00264ef:	53                   	push   ebx
c00264f0:	53                   	push   ebx
c00264f1:	50                   	push   eax
c00264f2:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00264f5:	e8 96 05 00 00       	call   c0026a90 <__nesf2>
c00264fa:	83 c4 10             	add    esp,0x10
c00264fd:	85 c0                	test   eax,eax
c00264ff:	0f 85 3a 01 00 00    	jne    c002663f <__mulsf3+0x1b6>
c0026505:	85 ff                	test   edi,edi
c0026507:	0f 89 35 01 00 00    	jns    c0026642 <__mulsf3+0x1b9>
c002650d:	81 c6 00 00 00 80    	add    esi,0x80000000
c0026513:	e9 2a 01 00 00       	jmp    c0026642 <__mulsf3+0x1b9>
c0026518:	51                   	push   ecx
c0026519:	51                   	push   ecx
c002651a:	50                   	push   eax
c002651b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002651e:	e8 6d 05 00 00       	call   c0026a90 <__nesf2>
c0026523:	83 c4 10             	add    esp,0x10
c0026526:	85 c0                	test   eax,eax
c0026528:	eb 15                	jmp    c002653f <__mulsf3+0xb6>
c002652a:	85 c9                	test   ecx,ecx
c002652c:	74 0b                	je     c0026539 <__mulsf3+0xb0>
c002652e:	8d 53 ff             	lea    edx,[ebx-0x1]
c0026531:	01 c9                	add    ecx,ecx
c0026533:	78 16                	js     c002654b <__mulsf3+0xc2>
c0026535:	89 d3                	mov    ebx,edx
c0026537:	eb f5                	jmp    c002652e <__mulsf3+0xa5>
c0026539:	89 f8                	mov    eax,edi
c002653b:	f7 d0                	not    eax
c002653d:	84 c0                	test   al,al
c002653f:	75 c4                	jne    c0026505 <__mulsf3+0x7c>
c0026541:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0026546:	e9 f7 00 00 00       	jmp    c0026642 <__mulsf3+0x1b9>
c002654b:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002654e:	c1 e6 08             	shl    esi,0x8
c0026551:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0026557:	8d 57 01             	lea    edx,[edi+0x1]
c002655a:	80 e2 fe             	and    dl,0xfe
c002655d:	75 63                	jne    c00265c2 <__mulsf3+0x139>
c002655f:	85 c0                	test   eax,eax
c0026561:	74 2f                	je     c0026592 <__mulsf3+0x109>
c0026563:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026567:	0f 89 d2 00 00 00    	jns    c002663f <__mulsf3+0x1b6>
c002656d:	52                   	push   edx
c002656e:	52                   	push   edx
c002656f:	6a 00                	push   0x0
c0026571:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026574:	e8 dc 04 00 00       	call   c0026a55 <__eqsf2>
c0026579:	83 c4 10             	add    esp,0x10
c002657c:	85 c0                	test   eax,eax
c002657e:	0f 85 bb 00 00 00    	jne    c002663f <__mulsf3+0x1b6>
c0026584:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026587:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c002658d:	e9 b0 00 00 00       	jmp    c0026642 <__mulsf3+0x1b9>
c0026592:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026595:	50                   	push   eax
c0026596:	50                   	push   eax
c0026597:	6a 00                	push   0x0
c0026599:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002659c:	e8 b4 04 00 00       	call   c0026a55 <__eqsf2>
c00265a1:	83 c4 10             	add    esp,0x10
c00265a4:	85 c0                	test   eax,eax
c00265a6:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00265a9:	75 0c                	jne    c00265b7 <__mulsf3+0x12e>
c00265ab:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00265af:	0f 89 8a 00 00 00    	jns    c002663f <__mulsf3+0x1b6>
c00265b5:	eb cd                	jmp    c0026584 <__mulsf3+0xfb>
c00265b7:	8d 43 ff             	lea    eax,[ebx-0x1]
c00265ba:	01 f6                	add    esi,esi
c00265bc:	78 04                	js     c00265c2 <__mulsf3+0x139>
c00265be:	89 c3                	mov    ebx,eax
c00265c0:	eb f5                	jmp    c00265b7 <__mulsf3+0x12e>
c00265c2:	89 c8                	mov    eax,ecx
c00265c4:	0d 00 00 00 80       	or     eax,0x80000000
c00265c9:	81 ce 00 00 00 80    	or     esi,0x80000000
c00265cf:	f7 e6                	mul    esi
c00265d1:	85 c0                	test   eax,eax
c00265d3:	0f 95 c0             	setne  al
c00265d6:	0f b6 c0             	movzx  eax,al
c00265d9:	09 c2                	or     edx,eax
c00265db:	78 03                	js     c00265e0 <__mulsf3+0x157>
c00265dd:	01 d2                	add    edx,edx
c00265df:	4b                   	dec    ebx
c00265e0:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c00265e6:	7f 22                	jg     c002660a <__mulsf3+0x181>
c00265e8:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00265ee:	85 db                	test   ebx,ebx
c00265f0:	7f 23                	jg     c0026615 <__mulsf3+0x18c>
c00265f2:	83 fb e9             	cmp    ebx,0xffffffe9
c00265f5:	7c 1a                	jl     c0026611 <__mulsf3+0x188>
c00265f7:	81 ca 00 00 00 80    	or     edx,0x80000000
c00265fd:	b9 01 00 00 00       	mov    ecx,0x1
c0026602:	29 d9                	sub    ecx,ebx
c0026604:	d3 ea                	shr    edx,cl
c0026606:	31 db                	xor    ebx,ebx
c0026608:	eb 0b                	jmp    c0026615 <__mulsf3+0x18c>
c002660a:	bb ff 00 00 00       	mov    ebx,0xff
c002660f:	eb 02                	jmp    c0026613 <__mulsf3+0x18a>
c0026611:	31 db                	xor    ebx,ebx
c0026613:	31 d2                	xor    edx,edx
c0026615:	89 d0                	mov    eax,edx
c0026617:	c1 e8 08             	shr    eax,0x8
c002661a:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c002661d:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0026623:	09 fb                	or     ebx,edi
c0026625:	c1 e3 17             	shl    ebx,0x17
c0026628:	09 c3                	or     ebx,eax
c002662a:	f6 c2 7f             	test   dl,0x7f
c002662d:	0f 95 c1             	setne  cl
c0026630:	09 c8                	or     eax,ecx
c0026632:	83 e0 01             	and    eax,0x1
c0026635:	c1 ea 07             	shr    edx,0x7
c0026638:	21 c2                	and    edx,eax
c002663a:	8d 34 13             	lea    esi,[ebx+edx*1]
c002663d:	eb 03                	jmp    c0026642 <__mulsf3+0x1b9>
c002663f:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0026642:	89 f0                	mov    eax,esi
c0026644:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026647:	5b                   	pop    ebx
c0026648:	5e                   	pop    esi
c0026649:	5f                   	pop    edi
c002664a:	5d                   	pop    ebp
c002664b:	c3                   	ret    

c002664c <__divsf3>:
c002664c:	55                   	push   ebp
c002664d:	89 e5                	mov    ebp,esp
c002664f:	57                   	push   edi
c0026650:	56                   	push   esi
c0026651:	53                   	push   ebx
c0026652:	83 ec 1c             	sub    esp,0x1c
c0026655:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026658:	89 d8                	mov    eax,ebx
c002665a:	89 d9                	mov    ecx,ebx
c002665c:	c1 f9 17             	sar    ecx,0x17
c002665f:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026662:	c1 e0 08             	shl    eax,0x8
c0026665:	25 00 ff ff 7f       	and    eax,0x7fffff00
c002666a:	89 c1                	mov    ecx,eax
c002666c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002666f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026672:	89 c7                	mov    edi,eax
c0026674:	c1 ff 17             	sar    edi,0x17
c0026677:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002667b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002667e:	89 f8                	mov    eax,edi
c0026680:	0f b6 c0             	movzx  eax,al
c0026683:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0026686:	29 c6                	sub    esi,eax
c0026688:	83 c6 7f             	add    esi,0x7f
c002668b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002668e:	42                   	inc    edx
c002668f:	80 e2 fe             	and    dl,0xfe
c0026692:	0f 85 9c 00 00 00    	jne    c0026734 <__divsf3+0xe8>
c0026698:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002669c:	74 33                	je     c00266d1 <__divsf3+0x85>
c002669e:	85 c9                	test   ecx,ecx
c00266a0:	0f 85 c7 01 00 00    	jne    c002686d <__divsf3+0x221>
c00266a6:	8d 57 01             	lea    edx,[edi+0x1]
c00266a9:	80 e2 fe             	and    dl,0xfe
c00266ac:	75 2f                	jne    c00266dd <__divsf3+0x91>
c00266ae:	85 c0                	test   eax,eax
c00266b0:	74 2b                	je     c00266dd <__divsf3+0x91>
c00266b2:	51                   	push   ecx
c00266b3:	51                   	push   ecx
c00266b4:	6a 00                	push   0x0
c00266b6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00266b9:	e8 d2 03 00 00       	call   c0026a90 <__nesf2>
c00266be:	83 c4 10             	add    esp,0x10
c00266c1:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00266c4:	85 c0                	test   eax,eax
c00266c6:	0f 85 a1 01 00 00    	jne    c002686d <__divsf3+0x221>
c00266cc:	e9 92 01 00 00       	jmp    c0026863 <__divsf3+0x217>
c00266d1:	85 c9                	test   ecx,ecx
c00266d3:	75 1b                	jne    c00266f0 <__divsf3+0xa4>
c00266d5:	8d 57 01             	lea    edx,[edi+0x1]
c00266d8:	80 e2 fe             	and    dl,0xfe
c00266db:	74 1e                	je     c00266fb <__divsf3+0xaf>
c00266dd:	85 ff                	test   edi,edi
c00266df:	0f 89 88 01 00 00    	jns    c002686d <__divsf3+0x221>
c00266e5:	81 c3 00 00 00 80    	add    ebx,0x80000000
c00266eb:	e9 7d 01 00 00       	jmp    c002686d <__divsf3+0x221>
c00266f0:	8d 56 ff             	lea    edx,[esi-0x1]
c00266f3:	01 c9                	add    ecx,ecx
c00266f5:	78 3d                	js     c0026734 <__divsf3+0xe8>
c00266f7:	89 d6                	mov    esi,edx
c00266f9:	eb f5                	jmp    c00266f0 <__divsf3+0xa4>
c00266fb:	85 c0                	test   eax,eax
c00266fd:	b8 00 00 00 00       	mov    eax,0x0
c0026702:	74 18                	je     c002671c <__divsf3+0xd0>
c0026704:	52                   	push   edx
c0026705:	52                   	push   edx
c0026706:	50                   	push   eax
c0026707:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002670a:	e8 81 03 00 00       	call   c0026a90 <__nesf2>
c002670f:	83 c4 10             	add    esp,0x10
c0026712:	85 c0                	test   eax,eax
c0026714:	0f 85 50 01 00 00    	jne    c002686a <__divsf3+0x21e>
c002671a:	eb c1                	jmp    c00266dd <__divsf3+0x91>
c002671c:	56                   	push   esi
c002671d:	56                   	push   esi
c002671e:	50                   	push   eax
c002671f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026722:	e8 69 03 00 00       	call   c0026a90 <__nesf2>
c0026727:	83 c4 10             	add    esp,0x10
c002672a:	85 c0                	test   eax,eax
c002672c:	0f 84 31 01 00 00    	je     c0026863 <__divsf3+0x217>
c0026732:	eb a9                	jmp    c00266dd <__divsf3+0x91>
c0026734:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0026737:	c1 e3 08             	shl    ebx,0x8
c002673a:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026740:	8d 57 01             	lea    edx,[edi+0x1]
c0026743:	80 e2 fe             	and    dl,0xfe
c0026746:	75 71                	jne    c00267b9 <__divsf3+0x16d>
c0026748:	85 c0                	test   eax,eax
c002674a:	ba 00 00 00 00       	mov    edx,0x0
c002674f:	74 2f                	je     c0026780 <__divsf3+0x134>
c0026751:	51                   	push   ecx
c0026752:	51                   	push   ecx
c0026753:	52                   	push   edx
c0026754:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026757:	e8 f9 02 00 00       	call   c0026a55 <__eqsf2>
c002675c:	83 c4 10             	add    esp,0x10
c002675f:	85 c0                	test   eax,eax
c0026761:	0f 85 03 01 00 00    	jne    c002686a <__divsf3+0x21e>
c0026767:	31 d2                	xor    edx,edx
c0026769:	89 d3                	mov    ebx,edx
c002676b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002676e:	31 f8                	xor    eax,edi
c0026770:	0f 89 f7 00 00 00    	jns    c002686d <__divsf3+0x221>
c0026776:	bb 00 00 00 80       	mov    ebx,0x80000000
c002677b:	e9 ed 00 00 00       	jmp    c002686d <__divsf3+0x221>
c0026780:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026783:	50                   	push   eax
c0026784:	50                   	push   eax
c0026785:	52                   	push   edx
c0026786:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026789:	e8 c7 02 00 00       	call   c0026a55 <__eqsf2>
c002678e:	83 c4 10             	add    esp,0x10
c0026791:	85 c0                	test   eax,eax
c0026793:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026796:	75 16                	jne    c00267ae <__divsf3+0x162>
c0026798:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002679b:	31 fb                	xor    ebx,edi
c002679d:	81 e3 00 00 00 80    	and    ebx,0x80000000
c00267a3:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c00267a9:	e9 bf 00 00 00       	jmp    c002686d <__divsf3+0x221>
c00267ae:	8d 46 01             	lea    eax,[esi+0x1]
c00267b1:	01 db                	add    ebx,ebx
c00267b3:	78 04                	js     c00267b9 <__divsf3+0x16d>
c00267b5:	89 c6                	mov    esi,eax
c00267b7:	eb f5                	jmp    c00267ae <__divsf3+0x162>
c00267b9:	89 c8                	mov    eax,ecx
c00267bb:	0d 00 00 00 80       	or     eax,0x80000000
c00267c0:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00267c6:	31 d2                	xor    edx,edx
c00267c8:	39 d8                	cmp    eax,ebx
c00267ca:	72 07                	jb     c00267d3 <__divsf3+0x187>
c00267cc:	29 d8                	sub    eax,ebx
c00267ce:	ba 01 00 00 00       	mov    edx,0x1
c00267d3:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c00267da:	01 d2                	add    edx,edx
c00267dc:	89 c1                	mov    ecx,eax
c00267de:	01 c0                	add    eax,eax
c00267e0:	85 c9                	test   ecx,ecx
c00267e2:	78 04                	js     c00267e8 <__divsf3+0x19c>
c00267e4:	39 c3                	cmp    ebx,eax
c00267e6:	77 05                	ja     c00267ed <__divsf3+0x1a1>
c00267e8:	29 d8                	sub    eax,ebx
c00267ea:	83 ca 01             	or     edx,0x1
c00267ed:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c00267f0:	75 e8                	jne    c00267da <__divsf3+0x18e>
c00267f2:	85 c0                	test   eax,eax
c00267f4:	0f 95 c0             	setne  al
c00267f7:	0f b6 c0             	movzx  eax,al
c00267fa:	c1 e2 06             	shl    edx,0x6
c00267fd:	09 c2                	or     edx,eax
c00267ff:	78 03                	js     c0026804 <__divsf3+0x1b8>
c0026801:	01 d2                	add    edx,edx
c0026803:	4e                   	dec    esi
c0026804:	81 fe fe 00 00 00    	cmp    esi,0xfe
c002680a:	7f 22                	jg     c002682e <__divsf3+0x1e2>
c002680c:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026812:	85 f6                	test   esi,esi
c0026814:	7f 23                	jg     c0026839 <__divsf3+0x1ed>
c0026816:	83 fe e9             	cmp    esi,0xffffffe9
c0026819:	7c 1a                	jl     c0026835 <__divsf3+0x1e9>
c002681b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026821:	b9 01 00 00 00       	mov    ecx,0x1
c0026826:	29 f1                	sub    ecx,esi
c0026828:	d3 ea                	shr    edx,cl
c002682a:	31 f6                	xor    esi,esi
c002682c:	eb 0b                	jmp    c0026839 <__divsf3+0x1ed>
c002682e:	be ff 00 00 00       	mov    esi,0xff
c0026833:	eb 02                	jmp    c0026837 <__divsf3+0x1eb>
c0026835:	31 f6                	xor    esi,esi
c0026837:	31 d2                	xor    edx,edx
c0026839:	89 d0                	mov    eax,edx
c002683b:	c1 e8 08             	shr    eax,0x8
c002683e:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0026841:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0026847:	09 fe                	or     esi,edi
c0026849:	c1 e6 17             	shl    esi,0x17
c002684c:	09 c6                	or     esi,eax
c002684e:	f6 c2 7f             	test   dl,0x7f
c0026851:	0f 95 c1             	setne  cl
c0026854:	09 c8                	or     eax,ecx
c0026856:	83 e0 01             	and    eax,0x1
c0026859:	c1 ea 07             	shr    edx,0x7
c002685c:	21 c2                	and    edx,eax
c002685e:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0026861:	eb 0a                	jmp    c002686d <__divsf3+0x221>
c0026863:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0026868:	eb 03                	jmp    c002686d <__divsf3+0x221>
c002686a:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c002686d:	89 d8                	mov    eax,ebx
c002686f:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026872:	5b                   	pop    ebx
c0026873:	5e                   	pop    esi
c0026874:	5f                   	pop    edi
c0026875:	5d                   	pop    ebp
c0026876:	c3                   	ret    

c0026877 <__floatsisf>:
c0026877:	55                   	push   ebp
c0026878:	89 e5                	mov    ebp,esp
c002687a:	53                   	push   ebx
c002687b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002687e:	85 d2                	test   edx,edx
c0026880:	7e 2b                	jle    c00268ad <__floatsisf+0x36>
c0026882:	0f bd ca             	bsr    ecx,edx
c0026885:	83 f1 1f             	xor    ecx,0x1f
c0026888:	d3 e2                	shl    edx,cl
c002688a:	89 d0                	mov    eax,edx
c002688c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026891:	89 c3                	mov    ebx,eax
c0026893:	c1 eb 08             	shr    ebx,0x8
c0026896:	80 e2 7f             	and    dl,0x7f
c0026899:	0f 95 c2             	setne  dl
c002689c:	09 da                	or     edx,ebx
c002689e:	83 e2 01             	and    edx,0x1
c00268a1:	c1 e8 07             	shr    eax,0x7
c00268a4:	21 c2                	and    edx,eax
c00268a6:	b8 9e 00 00 00       	mov    eax,0x9e
c00268ab:	eb 32                	jmp    c00268df <__floatsisf+0x68>
c00268ad:	b8 00 00 00 00       	mov    eax,0x0
c00268b2:	74 34                	je     c00268e8 <__floatsisf+0x71>
c00268b4:	f7 da                	neg    edx
c00268b6:	0f bd ca             	bsr    ecx,edx
c00268b9:	83 f1 1f             	xor    ecx,0x1f
c00268bc:	d3 e2                	shl    edx,cl
c00268be:	89 d0                	mov    eax,edx
c00268c0:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00268c5:	89 c3                	mov    ebx,eax
c00268c7:	c1 eb 08             	shr    ebx,0x8
c00268ca:	80 e2 7f             	and    dl,0x7f
c00268cd:	0f 95 c2             	setne  dl
c00268d0:	09 da                	or     edx,ebx
c00268d2:	83 e2 01             	and    edx,0x1
c00268d5:	c1 e8 07             	shr    eax,0x7
c00268d8:	21 c2                	and    edx,eax
c00268da:	b8 9e 01 00 00       	mov    eax,0x19e
c00268df:	29 c8                	sub    eax,ecx
c00268e1:	c1 e0 17             	shl    eax,0x17
c00268e4:	09 d8                	or     eax,ebx
c00268e6:	01 d0                	add    eax,edx
c00268e8:	5b                   	pop    ebx
c00268e9:	5d                   	pop    ebp
c00268ea:	c3                   	ret    

c00268eb <__floatunsisf>:
c00268eb:	55                   	push   ebp
c00268ec:	89 e5                	mov    ebp,esp
c00268ee:	53                   	push   ebx
c00268ef:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00268f2:	31 c0                	xor    eax,eax
c00268f4:	85 d2                	test   edx,edx
c00268f6:	74 32                	je     c002692a <__floatunsisf+0x3f>
c00268f8:	0f bd ca             	bsr    ecx,edx
c00268fb:	83 f1 1f             	xor    ecx,0x1f
c00268fe:	d3 e2                	shl    edx,cl
c0026900:	89 d0                	mov    eax,edx
c0026902:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026907:	89 c3                	mov    ebx,eax
c0026909:	c1 eb 08             	shr    ebx,0x8
c002690c:	80 e2 7f             	and    dl,0x7f
c002690f:	0f 95 c2             	setne  dl
c0026912:	09 da                	or     edx,ebx
c0026914:	83 e2 01             	and    edx,0x1
c0026917:	c1 e8 07             	shr    eax,0x7
c002691a:	21 c2                	and    edx,eax
c002691c:	b8 9e 00 00 00       	mov    eax,0x9e
c0026921:	29 c8                	sub    eax,ecx
c0026923:	c1 e0 17             	shl    eax,0x17
c0026926:	09 d8                	or     eax,ebx
c0026928:	01 d0                	add    eax,edx
c002692a:	5b                   	pop    ebx
c002692b:	5d                   	pop    ebp
c002692c:	c3                   	ret    

c002692d <__fixsfsi>:
c002692d:	55                   	push   ebp
c002692e:	89 e5                	mov    ebp,esp
c0026930:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026933:	89 d1                	mov    ecx,edx
c0026935:	c1 e1 08             	shl    ecx,0x8
c0026938:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c002693e:	c1 fa 17             	sar    edx,0x17
c0026941:	78 1c                	js     c002695f <__fixsfsi+0x32>
c0026943:	83 ea 7f             	sub    edx,0x7f
c0026946:	31 c0                	xor    eax,eax
c0026948:	83 fa 1e             	cmp    edx,0x1e
c002694b:	77 40                	ja     c002698d <__fixsfsi+0x60>
c002694d:	89 c8                	mov    eax,ecx
c002694f:	0d 00 00 00 80       	or     eax,0x80000000
c0026954:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026959:	29 d1                	sub    ecx,edx
c002695b:	d3 e8                	shr    eax,cl
c002695d:	eb 2e                	jmp    c002698d <__fixsfsi+0x60>
c002695f:	31 c0                	xor    eax,eax
c0026961:	81 c2 81 00 00 00    	add    edx,0x81
c0026967:	78 24                	js     c002698d <__fixsfsi+0x60>
c0026969:	83 fa 1e             	cmp    edx,0x1e
c002696c:	7e 09                	jle    c0026977 <__fixsfsi+0x4a>
c002696e:	83 fa 1f             	cmp    edx,0x1f
c0026971:	75 18                	jne    c002698b <__fixsfsi+0x5e>
c0026973:	85 c9                	test   ecx,ecx
c0026975:	75 14                	jne    c002698b <__fixsfsi+0x5e>
c0026977:	89 c8                	mov    eax,ecx
c0026979:	0d 00 00 00 80       	or     eax,0x80000000
c002697e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026983:	29 d1                	sub    ecx,edx
c0026985:	d3 e8                	shr    eax,cl
c0026987:	f7 d8                	neg    eax
c0026989:	eb 02                	jmp    c002698d <__fixsfsi+0x60>
c002698b:	31 c0                	xor    eax,eax
c002698d:	5d                   	pop    ebp
c002698e:	c3                   	ret    

c002698f <__fixunssfsi>:
c002698f:	55                   	push   ebp
c0026990:	89 e5                	mov    ebp,esp
c0026992:	53                   	push   ebx
c0026993:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026996:	89 d3                	mov    ebx,edx
c0026998:	c1 fb 17             	sar    ebx,0x17
c002699b:	83 eb 7f             	sub    ebx,0x7f
c002699e:	31 c0                	xor    eax,eax
c00269a0:	83 fb 1f             	cmp    ebx,0x1f
c00269a3:	77 18                	ja     c00269bd <__fixunssfsi+0x2e>
c00269a5:	89 d0                	mov    eax,edx
c00269a7:	c1 e0 08             	shl    eax,0x8
c00269aa:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00269af:	0d 00 00 00 80       	or     eax,0x80000000
c00269b4:	b9 1f 00 00 00       	mov    ecx,0x1f
c00269b9:	29 d9                	sub    ecx,ebx
c00269bb:	d3 e8                	shr    eax,cl
c00269bd:	5b                   	pop    ebx
c00269be:	5d                   	pop    ebp
c00269bf:	c3                   	ret    

c00269c0 <__cmpsf2>:
c00269c0:	55                   	push   ebp
c00269c1:	89 e5                	mov    ebp,esp
c00269c3:	57                   	push   edi
c00269c4:	56                   	push   esi
c00269c5:	53                   	push   ebx
c00269c6:	83 ec 24             	sub    esp,0x24
c00269c9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00269cc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00269cf:	e8 4f 10 00 00       	call   c0027a23 <__truncdfsf2>
c00269d4:	5a                   	pop    edx
c00269d5:	59                   	pop    ecx
c00269d6:	89 c3                	mov    ebx,eax
c00269d8:	c1 e8 17             	shr    eax,0x17
c00269db:	0f b6 f0             	movzx  esi,al
c00269de:	89 d8                	mov    eax,ebx
c00269e0:	c1 e8 1f             	shr    eax,0x1f
c00269e3:	31 c6                	xor    esi,eax
c00269e5:	c1 e3 08             	shl    ebx,0x8
c00269e8:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00269eb:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00269ee:	e8 30 10 00 00       	call   c0027a23 <__truncdfsf2>
c00269f3:	83 c4 10             	add    esp,0x10
c00269f6:	89 c1                	mov    ecx,eax
c00269f8:	c1 e9 17             	shr    ecx,0x17
c00269fb:	0f b6 c9             	movzx  ecx,cl
c00269fe:	89 c7                	mov    edi,eax
c0026a00:	c1 ef 1f             	shr    edi,0x1f
c0026a03:	89 ca                	mov    edx,ecx
c0026a05:	31 fa                	xor    edx,edi
c0026a07:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0026a0a:	c1 e0 08             	shl    eax,0x8
c0026a0d:	89 c2                	mov    edx,eax
c0026a0f:	89 d8                	mov    eax,ebx
c0026a11:	09 d0                	or     eax,edx
c0026a13:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026a18:	09 f0                	or     eax,esi
c0026a1a:	75 08                	jne    c0026a24 <__cmpsf2+0x64>
c0026a1c:	31 c0                	xor    eax,eax
c0026a1e:	39 f9                	cmp    ecx,edi
c0026a20:	75 0c                	jne    c0026a2e <__cmpsf2+0x6e>
c0026a22:	eb 29                	jmp    c0026a4d <__cmpsf2+0x8d>
c0026a24:	b8 01 00 00 00       	mov    eax,0x1
c0026a29:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0026a2c:	7f 1f                	jg     c0026a4d <__cmpsf2+0x8d>
c0026a2e:	83 c8 ff             	or     eax,0xffffffff
c0026a31:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0026a34:	7c 17                	jl     c0026a4d <__cmpsf2+0x8d>
c0026a36:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026a3c:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026a42:	b8 01 00 00 00       	mov    eax,0x1
c0026a47:	39 d3                	cmp    ebx,edx
c0026a49:	77 02                	ja     c0026a4d <__cmpsf2+0x8d>
c0026a4b:	19 c0                	sbb    eax,eax
c0026a4d:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026a50:	5b                   	pop    ebx
c0026a51:	5e                   	pop    esi
c0026a52:	5f                   	pop    edi
c0026a53:	5d                   	pop    ebp
c0026a54:	c3                   	ret    

c0026a55 <__eqsf2>:
c0026a55:	55                   	push   ebp
c0026a56:	89 e5                	mov    ebp,esp
c0026a58:	83 ec 24             	sub    esp,0x24
c0026a5b:	6a 01                	push   0x1
c0026a5d:	83 ec 0c             	sub    esp,0xc
c0026a60:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026a63:	e8 df 10 00 00       	call   c0027b47 <__extendsfdf2>
c0026a68:	83 c4 10             	add    esp,0x10
c0026a6b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026a6e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0026a71:	52                   	push   edx
c0026a72:	50                   	push   eax
c0026a73:	50                   	push   eax
c0026a74:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026a77:	e8 cb 10 00 00       	call   c0027b47 <__extendsfdf2>
c0026a7c:	59                   	pop    ecx
c0026a7d:	59                   	pop    ecx
c0026a7e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026a81:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0026a84:	52                   	push   edx
c0026a85:	50                   	push   eax
c0026a86:	e8 35 ff ff ff       	call   c00269c0 <__cmpsf2>
c0026a8b:	83 c4 20             	add    esp,0x20
c0026a8e:	c9                   	leave  
c0026a8f:	c3                   	ret    

c0026a90 <__nesf2>:
c0026a90:	eb c3                	jmp    c0026a55 <__eqsf2>

c0026a92 <__gtsf2>:
c0026a92:	55                   	push   ebp
c0026a93:	89 e5                	mov    ebp,esp
c0026a95:	83 ec 24             	sub    esp,0x24
c0026a98:	6a ff                	push   0xffffffff
c0026a9a:	83 ec 0c             	sub    esp,0xc
c0026a9d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026aa0:	e8 a2 10 00 00       	call   c0027b47 <__extendsfdf2>
c0026aa5:	83 c4 10             	add    esp,0x10
c0026aa8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026aab:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0026aae:	52                   	push   edx
c0026aaf:	50                   	push   eax
c0026ab0:	50                   	push   eax
c0026ab1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026ab4:	e8 8e 10 00 00       	call   c0027b47 <__extendsfdf2>
c0026ab9:	59                   	pop    ecx
c0026aba:	59                   	pop    ecx
c0026abb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026abe:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0026ac1:	52                   	push   edx
c0026ac2:	50                   	push   eax
c0026ac3:	e8 f8 fe ff ff       	call   c00269c0 <__cmpsf2>
c0026ac8:	83 c4 20             	add    esp,0x20
c0026acb:	c9                   	leave  
c0026acc:	c3                   	ret    

c0026acd <__gesf2>:
c0026acd:	eb c3                	jmp    c0026a92 <__gtsf2>

c0026acf <__ltsf2>:
c0026acf:	eb 84                	jmp    c0026a55 <__eqsf2>

c0026ad1 <__lesf2>:
c0026ad1:	eb 82                	jmp    c0026a55 <__eqsf2>

c0026ad3 <__adddf3>:
c0026ad3:	55                   	push   ebp
c0026ad4:	89 e5                	mov    ebp,esp
c0026ad6:	57                   	push   edi
c0026ad7:	56                   	push   esi
c0026ad8:	53                   	push   ebx
c0026ad9:	83 ec 24             	sub    esp,0x24
c0026adc:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026adf:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0026ae2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0026ae5:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026ae8:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0026aeb:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0026aee:	89 c8                	mov    eax,ecx
c0026af0:	89 ce                	mov    esi,ecx
c0026af2:	c1 fe 14             	sar    esi,0x14
c0026af5:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0026af8:	89 fb                	mov    ebx,edi
c0026afa:	89 fa                	mov    edx,edi
c0026afc:	c1 e2 0b             	shl    edx,0xb
c0026aff:	c1 e0 0b             	shl    eax,0xb
c0026b02:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0026b07:	c1 eb 15             	shr    ebx,0x15
c0026b0a:	09 d8                	or     eax,ebx
c0026b0c:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0026b0f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0026b12:	c1 fe 14             	sar    esi,0x14
c0026b15:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0026b18:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0026b1b:	89 f3                	mov    ebx,esi
c0026b1d:	c1 e3 0b             	shl    ebx,0xb
c0026b20:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0026b23:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0026b26:	c1 e3 0b             	shl    ebx,0xb
c0026b29:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c0026b2f:	c1 ee 15             	shr    esi,0x15
c0026b32:	09 f3                	or     ebx,esi
c0026b34:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0026b37:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0026b3a:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c0026b3d:	0f 88 5f 02 00 00    	js     c0026da2 <__adddf3+0x2cf>
c0026b43:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0026b46:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0026b49:	85 db                	test   ebx,ebx
c0026b4b:	0f 8e c7 00 00 00    	jle    c0026c18 <__adddf3+0x145>
c0026b51:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0026b58:	75 1a                	jne    c0026b74 <__adddf3+0xa1>
c0026b5a:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0026b5d:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0026b60:	0f 84 b2 05 00 00    	je     c0027118 <__adddf3+0x645>
c0026b66:	4b                   	dec    ebx
c0026b67:	75 23                	jne    c0026b8c <__adddf3+0xb9>
c0026b69:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0026b6c:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0026b6f:	e9 99 00 00 00       	jmp    c0026c0d <__adddf3+0x13a>
c0026b74:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0026b77:	f7 d6                	not    esi
c0026b79:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0026b7f:	0f 84 93 05 00 00    	je     c0027118 <__adddf3+0x645>
c0026b85:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0026b8c:	83 fb 1f             	cmp    ebx,0x1f
c0026b8f:	7e 42                	jle    c0026bd3 <__adddf3+0x100>
c0026b91:	83 fb 3f             	cmp    ebx,0x3f
c0026b94:	0f 8f 7e 05 00 00    	jg     c0027118 <__adddf3+0x645>
c0026b9a:	83 e3 1f             	and    ebx,0x1f
c0026b9d:	89 d9                	mov    ecx,ebx
c0026b9f:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0026ba2:	d3 ef                	shr    edi,cl
c0026ba4:	31 db                	xor    ebx,ebx
c0026ba6:	85 c9                	test   ecx,ecx
c0026ba8:	74 15                	je     c0026bbf <__adddf3+0xec>
c0026baa:	be 20 00 00 00       	mov    esi,0x20
c0026baf:	29 ce                	sub    esi,ecx
c0026bb1:	89 f1                	mov    ecx,esi
c0026bb3:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026bb6:	d3 e6                	shl    esi,cl
c0026bb8:	31 db                	xor    ebx,ebx
c0026bba:	85 f6                	test   esi,esi
c0026bbc:	0f 95 c3             	setne  bl
c0026bbf:	31 c9                	xor    ecx,ecx
c0026bc1:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026bc5:	0f 95 c1             	setne  cl
c0026bc8:	09 cf                	or     edi,ecx
c0026bca:	09 fb                	or     ebx,edi
c0026bcc:	01 da                	add    edx,ebx
c0026bce:	83 d0 00             	adc    eax,0x0
c0026bd1:	eb 3a                	jmp    c0026c0d <__adddf3+0x13a>
c0026bd3:	bf 20 00 00 00       	mov    edi,0x20
c0026bd8:	29 df                	sub    edi,ebx
c0026bda:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0026bdd:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026be0:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0026be3:	d3 e6                	shl    esi,cl
c0026be5:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0026be8:	88 d9                	mov    cl,bl
c0026bea:	d3 ef                	shr    edi,cl
c0026bec:	09 fe                	or     esi,edi
c0026bee:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0026bf1:	88 d9                	mov    cl,bl
c0026bf3:	d3 ef                	shr    edi,cl
c0026bf5:	89 fb                	mov    ebx,edi
c0026bf7:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0026bfa:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0026bfd:	d3 e7                	shl    edi,cl
c0026bff:	85 ff                	test   edi,edi
c0026c01:	0f 95 c1             	setne  cl
c0026c04:	0f b6 c9             	movzx  ecx,cl
c0026c07:	09 ce                	or     esi,ecx
c0026c09:	01 f2                	add    edx,esi
c0026c0b:	11 d8                	adc    eax,ebx
c0026c0d:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026c10:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0026c13:	e9 52 01 00 00       	jmp    c0026d6a <__adddf3+0x297>
c0026c18:	0f 84 d5 00 00 00    	je     c0026cf3 <__adddf3+0x220>
c0026c1e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0026c21:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0026c24:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0026c27:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0026c2a:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0026c31:	75 20                	jne    c0026c53 <__adddf3+0x180>
c0026c33:	89 d6                	mov    esi,edx
c0026c35:	09 c6                	or     esi,eax
c0026c37:	0f 84 db 04 00 00    	je     c0027118 <__adddf3+0x645>
c0026c3d:	4b                   	dec    ebx
c0026c3e:	75 29                	jne    c0026c69 <__adddf3+0x196>
c0026c40:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026c43:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026c46:	01 d1                	add    ecx,edx
c0026c48:	11 c6                	adc    esi,eax
c0026c4a:	89 f0                	mov    eax,esi
c0026c4c:	89 ca                	mov    edx,ecx
c0026c4e:	e9 17 01 00 00       	jmp    c0026d6a <__adddf3+0x297>
c0026c53:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0026c56:	f7 d6                	not    esi
c0026c58:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0026c5e:	0f 84 b4 04 00 00    	je     c0027118 <__adddf3+0x645>
c0026c64:	0d 00 00 00 80       	or     eax,0x80000000
c0026c69:	83 fb 1f             	cmp    ebx,0x1f
c0026c6c:	7e 48                	jle    c0026cb6 <__adddf3+0x1e3>
c0026c6e:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0026c71:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0026c74:	83 fb 3f             	cmp    ebx,0x3f
c0026c77:	0f 8f 9b 04 00 00    	jg     c0027118 <__adddf3+0x645>
c0026c7d:	83 e3 1f             	and    ebx,0x1f
c0026c80:	89 d9                	mov    ecx,ebx
c0026c82:	89 c7                	mov    edi,eax
c0026c84:	d3 ef                	shr    edi,cl
c0026c86:	31 db                	xor    ebx,ebx
c0026c88:	85 c9                	test   ecx,ecx
c0026c8a:	74 12                	je     c0026c9e <__adddf3+0x1cb>
c0026c8c:	be 20 00 00 00       	mov    esi,0x20
c0026c91:	29 ce                	sub    esi,ecx
c0026c93:	89 f1                	mov    ecx,esi
c0026c95:	d3 e0                	shl    eax,cl
c0026c97:	31 db                	xor    ebx,ebx
c0026c99:	85 c0                	test   eax,eax
c0026c9b:	0f 95 c3             	setne  bl
c0026c9e:	31 c0                	xor    eax,eax
c0026ca0:	85 d2                	test   edx,edx
c0026ca2:	0f 95 c0             	setne  al
c0026ca5:	09 c7                	or     edi,eax
c0026ca7:	09 fb                	or     ebx,edi
c0026ca9:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026cac:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0026caf:	01 da                	add    edx,ebx
c0026cb1:	83 d6 00             	adc    esi,0x0
c0026cb4:	eb 39                	jmp    c0026cef <__adddf3+0x21c>
c0026cb6:	be 20 00 00 00       	mov    esi,0x20
c0026cbb:	29 de                	sub    esi,ebx
c0026cbd:	89 c7                	mov    edi,eax
c0026cbf:	89 f1                	mov    ecx,esi
c0026cc1:	d3 e7                	shl    edi,cl
c0026cc3:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0026cc6:	89 d7                	mov    edi,edx
c0026cc8:	88 d9                	mov    cl,bl
c0026cca:	d3 ef                	shr    edi,cl
c0026ccc:	89 f9                	mov    ecx,edi
c0026cce:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026cd1:	09 cf                	or     edi,ecx
c0026cd3:	88 d9                	mov    cl,bl
c0026cd5:	d3 e8                	shr    eax,cl
c0026cd7:	89 f1                	mov    ecx,esi
c0026cd9:	d3 e2                	shl    edx,cl
c0026cdb:	85 d2                	test   edx,edx
c0026cdd:	0f 95 c2             	setne  dl
c0026ce0:	0f b6 d2             	movzx  edx,dl
c0026ce3:	09 d7                	or     edi,edx
c0026ce5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026ce8:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0026ceb:	01 fa                	add    edx,edi
c0026ced:	11 c6                	adc    esi,eax
c0026cef:	89 f0                	mov    eax,esi
c0026cf1:	eb 77                	jmp    c0026d6a <__adddf3+0x297>
c0026cf3:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0026cf6:	46                   	inc    esi
c0026cf7:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0026cfa:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0026d00:	75 41                	jne    c0026d43 <__adddf3+0x270>
c0026d02:	89 d3                	mov    ebx,edx
c0026d04:	09 c3                	or     ebx,eax
c0026d06:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0026d0d:	75 27                	jne    c0026d36 <__adddf3+0x263>
c0026d0f:	85 db                	test   ebx,ebx
c0026d11:	0f 84 fb 03 00 00    	je     c0027112 <__adddf3+0x63f>
c0026d17:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0026d1a:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0026d1d:	0f 84 f5 03 00 00    	je     c0027118 <__adddf3+0x645>
c0026d23:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0026d26:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0026d29:	85 c0                	test   eax,eax
c0026d2b:	0f 89 91 03 00 00    	jns    c00270c2 <__adddf3+0x5ef>
c0026d31:	e9 85 03 00 00       	jmp    c00270bb <__adddf3+0x5e8>
c0026d36:	85 db                	test   ebx,ebx
c0026d38:	0f 85 da 03 00 00    	jne    c0027118 <__adddf3+0x645>
c0026d3e:	e9 cf 03 00 00       	jmp    c0027112 <__adddf3+0x63f>
c0026d43:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0026d46:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0026d49:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026d4c:	f7 d1                	not    ecx
c0026d4e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0026d54:	0f 84 70 03 00 00    	je     c00270ca <__adddf3+0x5f7>
c0026d5a:	d1 ea                	shr    edx,1
c0026d5c:	89 c1                	mov    ecx,eax
c0026d5e:	c1 e1 1f             	shl    ecx,0x1f
c0026d61:	09 ca                	or     edx,ecx
c0026d63:	d1 e8                	shr    eax,1
c0026d65:	e9 6f 03 00 00       	jmp    c00270d9 <__adddf3+0x606>
c0026d6a:	85 c0                	test   eax,eax
c0026d6c:	0f 89 67 03 00 00    	jns    c00270d9 <__adddf3+0x606>
c0026d72:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c0026d75:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026d78:	f7 d1                	not    ecx
c0026d7a:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0026d80:	0f 84 44 03 00 00    	je     c00270ca <__adddf3+0x5f7>
c0026d86:	89 d1                	mov    ecx,edx
c0026d88:	d1 e9                	shr    ecx,1
c0026d8a:	83 e2 01             	and    edx,0x1
c0026d8d:	09 ca                	or     edx,ecx
c0026d8f:	89 c1                	mov    ecx,eax
c0026d91:	c1 e1 1f             	shl    ecx,0x1f
c0026d94:	09 ca                	or     edx,ecx
c0026d96:	d1 e8                	shr    eax,1
c0026d98:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0026d9d:	e9 37 03 00 00       	jmp    c00270d9 <__adddf3+0x606>
c0026da2:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0026da5:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0026dab:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c0026dae:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0026db1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0026db7:	29 de                	sub    esi,ebx
c0026db9:	85 f6                	test   esi,esi
c0026dbb:	0f 8e bd 00 00 00    	jle    c0026e7e <__adddf3+0x3ab>
c0026dc1:	85 db                	test   ebx,ebx
c0026dc3:	75 17                	jne    c0026ddc <__adddf3+0x309>
c0026dc5:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026dc8:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0026dcb:	0f 84 47 03 00 00    	je     c0027118 <__adddf3+0x645>
c0026dd1:	4e                   	dec    esi
c0026dd2:	75 20                	jne    c0026df4 <__adddf3+0x321>
c0026dd4:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0026dd7:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0026dda:	eb 5b                	jmp    c0026e37 <__adddf3+0x364>
c0026ddc:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0026ddf:	f7 d3                	not    ebx
c0026de1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0026de7:	0f 84 2b 03 00 00    	je     c0027118 <__adddf3+0x645>
c0026ded:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0026df4:	83 fe 1f             	cmp    esi,0x1f
c0026df7:	7e 49                	jle    c0026e42 <__adddf3+0x36f>
c0026df9:	83 fe 3f             	cmp    esi,0x3f
c0026dfc:	0f 8f 16 03 00 00    	jg     c0027118 <__adddf3+0x645>
c0026e02:	83 e6 1f             	and    esi,0x1f
c0026e05:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0026e08:	89 f1                	mov    ecx,esi
c0026e0a:	d3 ef                	shr    edi,cl
c0026e0c:	31 db                	xor    ebx,ebx
c0026e0e:	85 f6                	test   esi,esi
c0026e10:	74 13                	je     c0026e25 <__adddf3+0x352>
c0026e12:	b9 20 00 00 00       	mov    ecx,0x20
c0026e17:	29 f1                	sub    ecx,esi
c0026e19:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026e1c:	d3 e6                	shl    esi,cl
c0026e1e:	31 db                	xor    ebx,ebx
c0026e20:	85 f6                	test   esi,esi
c0026e22:	0f 95 c3             	setne  bl
c0026e25:	31 c9                	xor    ecx,ecx
c0026e27:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026e2b:	0f 95 c1             	setne  cl
c0026e2e:	09 cf                	or     edi,ecx
c0026e30:	09 fb                	or     ebx,edi
c0026e32:	29 da                	sub    edx,ebx
c0026e34:	83 d8 00             	sbb    eax,0x0
c0026e37:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026e3a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0026e3d:	e9 aa 01 00 00       	jmp    c0026fec <__adddf3+0x519>
c0026e42:	bf 20 00 00 00       	mov    edi,0x20
c0026e47:	29 f7                	sub    edi,esi
c0026e49:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0026e4c:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0026e4f:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0026e52:	d3 e3                	shl    ebx,cl
c0026e54:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0026e57:	89 f1                	mov    ecx,esi
c0026e59:	d3 ef                	shr    edi,cl
c0026e5b:	09 fb                	or     ebx,edi
c0026e5d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0026e60:	89 f1                	mov    ecx,esi
c0026e62:	d3 ef                	shr    edi,cl
c0026e64:	89 fe                	mov    esi,edi
c0026e66:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0026e69:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0026e6c:	d3 e7                	shl    edi,cl
c0026e6e:	85 ff                	test   edi,edi
c0026e70:	0f 95 c1             	setne  cl
c0026e73:	0f b6 c9             	movzx  ecx,cl
c0026e76:	09 cb                	or     ebx,ecx
c0026e78:	29 da                	sub    edx,ebx
c0026e7a:	19 f0                	sbb    eax,esi
c0026e7c:	eb b9                	jmp    c0026e37 <__adddf3+0x364>
c0026e7e:	0f 84 cd 00 00 00    	je     c0026f51 <__adddf3+0x47e>
c0026e84:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c0026e87:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0026e8a:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0026e8d:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0026e91:	75 1b                	jne    c0026eae <__adddf3+0x3db>
c0026e93:	89 d6                	mov    esi,edx
c0026e95:	09 c6                	or     esi,eax
c0026e97:	0f 84 7b 02 00 00    	je     c0027118 <__adddf3+0x645>
c0026e9d:	4b                   	dec    ebx
c0026e9e:	75 24                	jne    c0026ec4 <__adddf3+0x3f1>
c0026ea0:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026ea3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026ea6:	29 d1                	sub    ecx,edx
c0026ea8:	19 c6                	sbb    esi,eax
c0026eaa:	89 ca                	mov    edx,ecx
c0026eac:	eb 61                	jmp    c0026f0f <__adddf3+0x43c>
c0026eae:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0026eb1:	f7 d6                	not    esi
c0026eb3:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0026eb9:	0f 84 59 02 00 00    	je     c0027118 <__adddf3+0x645>
c0026ebf:	0d 00 00 00 80       	or     eax,0x80000000
c0026ec4:	83 fb 1f             	cmp    ebx,0x1f
c0026ec7:	7e 4d                	jle    c0026f16 <__adddf3+0x443>
c0026ec9:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0026ecc:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0026ecf:	83 fb 3f             	cmp    ebx,0x3f
c0026ed2:	0f 8f 40 02 00 00    	jg     c0027118 <__adddf3+0x645>
c0026ed8:	83 e3 1f             	and    ebx,0x1f
c0026edb:	89 d9                	mov    ecx,ebx
c0026edd:	89 c7                	mov    edi,eax
c0026edf:	d3 ef                	shr    edi,cl
c0026ee1:	31 db                	xor    ebx,ebx
c0026ee3:	85 c9                	test   ecx,ecx
c0026ee5:	74 12                	je     c0026ef9 <__adddf3+0x426>
c0026ee7:	be 20 00 00 00       	mov    esi,0x20
c0026eec:	29 ce                	sub    esi,ecx
c0026eee:	89 f1                	mov    ecx,esi
c0026ef0:	d3 e0                	shl    eax,cl
c0026ef2:	31 db                	xor    ebx,ebx
c0026ef4:	85 c0                	test   eax,eax
c0026ef6:	0f 95 c3             	setne  bl
c0026ef9:	31 c0                	xor    eax,eax
c0026efb:	85 d2                	test   edx,edx
c0026efd:	0f 95 c0             	setne  al
c0026f00:	09 c7                	or     edi,eax
c0026f02:	09 fb                	or     ebx,edi
c0026f04:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026f07:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0026f0a:	29 da                	sub    edx,ebx
c0026f0c:	83 de 00             	sbb    esi,0x0
c0026f0f:	89 f0                	mov    eax,esi
c0026f11:	e9 d6 00 00 00       	jmp    c0026fec <__adddf3+0x519>
c0026f16:	be 20 00 00 00       	mov    esi,0x20
c0026f1b:	29 de                	sub    esi,ebx
c0026f1d:	89 c7                	mov    edi,eax
c0026f1f:	89 f1                	mov    ecx,esi
c0026f21:	d3 e7                	shl    edi,cl
c0026f23:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0026f26:	89 d7                	mov    edi,edx
c0026f28:	88 d9                	mov    cl,bl
c0026f2a:	d3 ef                	shr    edi,cl
c0026f2c:	89 f9                	mov    ecx,edi
c0026f2e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026f31:	09 cf                	or     edi,ecx
c0026f33:	88 d9                	mov    cl,bl
c0026f35:	d3 e8                	shr    eax,cl
c0026f37:	89 f1                	mov    ecx,esi
c0026f39:	d3 e2                	shl    edx,cl
c0026f3b:	85 d2                	test   edx,edx
c0026f3d:	0f 95 c2             	setne  dl
c0026f40:	0f b6 d2             	movzx  edx,dl
c0026f43:	09 d7                	or     edi,edx
c0026f45:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026f48:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0026f4b:	29 fa                	sub    edx,edi
c0026f4d:	19 c6                	sbb    esi,eax
c0026f4f:	eb be                	jmp    c0026f0f <__adddf3+0x43c>
c0026f51:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0026f54:	8d 5e 01             	lea    ebx,[esi+0x1]
c0026f57:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c0026f5d:	75 6a                	jne    c0026fc9 <__adddf3+0x4f6>
c0026f5f:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0026f63:	75 58                	jne    c0026fbd <__adddf3+0x4ea>
c0026f65:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026f68:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0026f6b:	89 d6                	mov    esi,edx
c0026f6d:	09 c6                	or     esi,eax
c0026f6f:	75 17                	jne    c0026f88 <__adddf3+0x4b5>
c0026f71:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0026f74:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0026f77:	85 db                	test   ebx,ebx
c0026f79:	0f 85 99 01 00 00    	jne    c0027118 <__adddf3+0x645>
c0026f7f:	31 ff                	xor    edi,edi
c0026f81:	31 c9                	xor    ecx,ecx
c0026f83:	e9 90 01 00 00       	jmp    c0027118 <__adddf3+0x645>
c0026f88:	85 db                	test   ebx,ebx
c0026f8a:	0f 84 88 01 00 00    	je     c0027118 <__adddf3+0x645>
c0026f90:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0026f93:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0026f96:	85 c0                	test   eax,eax
c0026f98:	79 10                	jns    c0026faa <__adddf3+0x4d7>
c0026f9a:	31 c9                	xor    ecx,ecx
c0026f9c:	f7 da                	neg    edx
c0026f9e:	0f 95 c1             	setne  cl
c0026fa1:	01 c8                	add    eax,ecx
c0026fa3:	f7 d8                	neg    eax
c0026fa5:	e9 2f 01 00 00       	jmp    c00270d9 <__adddf3+0x606>
c0026faa:	31 ff                	xor    edi,edi
c0026fac:	31 c9                	xor    ecx,ecx
c0026fae:	89 c3                	mov    ebx,eax
c0026fb0:	09 d3                	or     ebx,edx
c0026fb2:	0f 84 60 01 00 00    	je     c0027118 <__adddf3+0x645>
c0026fb8:	e9 05 01 00 00       	jmp    c00270c2 <__adddf3+0x5ef>
c0026fbd:	31 ff                	xor    edi,edi
c0026fbf:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0026fc4:	e9 4f 01 00 00       	jmp    c0027118 <__adddf3+0x645>
c0026fc9:	89 c1                	mov    ecx,eax
c0026fcb:	89 d0                	mov    eax,edx
c0026fcd:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0026fd0:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c0026fd3:	89 ca                	mov    edx,ecx
c0026fd5:	85 c9                	test   ecx,ecx
c0026fd7:	79 2c                	jns    c0027005 <__adddf3+0x532>
c0026fd9:	31 c9                	xor    ecx,ecx
c0026fdb:	f7 d8                	neg    eax
c0026fdd:	0f 95 c1             	setne  cl
c0026fe0:	01 ca                	add    edx,ecx
c0026fe2:	f7 da                	neg    edx
c0026fe4:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0026fe7:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0026fea:	eb 19                	jmp    c0027005 <__adddf3+0x532>
c0026fec:	85 c0                	test   eax,eax
c0026fee:	0f 89 e5 00 00 00    	jns    c00270d9 <__adddf3+0x606>
c0026ff4:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026ff9:	89 c1                	mov    ecx,eax
c0026ffb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0026ffe:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027001:	89 d0                	mov    eax,edx
c0027003:	89 ca                	mov    edx,ecx
c0027005:	85 d2                	test   edx,edx
c0027007:	74 59                	je     c0027062 <__adddf3+0x58f>
c0027009:	0f bd da             	bsr    ebx,edx
c002700c:	83 f3 1f             	xor    ebx,0x1f
c002700f:	88 d9                	mov    cl,bl
c0027011:	d3 e2                	shl    edx,cl
c0027013:	bf 20 00 00 00       	mov    edi,0x20
c0027018:	89 f9                	mov    ecx,edi
c002701a:	29 d9                	sub    ecx,ebx
c002701c:	89 c6                	mov    esi,eax
c002701e:	d3 ee                	shr    esi,cl
c0027020:	09 d6                	or     esi,edx
c0027022:	88 d9                	mov    cl,bl
c0027024:	d3 e0                	shl    eax,cl
c0027026:	89 c2                	mov    edx,eax
c0027028:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002702b:	25 ff 07 00 00       	and    eax,0x7ff
c0027030:	39 d8                	cmp    eax,ebx
c0027032:	7f 22                	jg     c0027056 <__adddf3+0x583>
c0027034:	29 c3                	sub    ebx,eax
c0027036:	43                   	inc    ebx
c0027037:	88 d9                	mov    cl,bl
c0027039:	d3 ea                	shr    edx,cl
c002703b:	29 df                	sub    edi,ebx
c002703d:	89 f9                	mov    ecx,edi
c002703f:	89 f0                	mov    eax,esi
c0027041:	d3 e0                	shl    eax,cl
c0027043:	09 c2                	or     edx,eax
c0027045:	89 f0                	mov    eax,esi
c0027047:	88 d9                	mov    cl,bl
c0027049:	d3 e8                	shr    eax,cl
c002704b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002704e:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0027054:	eb 6f                	jmp    c00270c5 <__adddf3+0x5f2>
c0027056:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027059:	29 d8                	sub    eax,ebx
c002705b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002705e:	89 f0                	mov    eax,esi
c0027060:	eb 59                	jmp    c00270bb <__adddf3+0x5e8>
c0027062:	85 c0                	test   eax,eax
c0027064:	74 6a                	je     c00270d0 <__adddf3+0x5fd>
c0027066:	0f bd c8             	bsr    ecx,eax
c0027069:	83 f1 1f             	xor    ecx,0x1f
c002706c:	d3 e0                	shl    eax,cl
c002706e:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027071:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027077:	83 c1 20             	add    ecx,0x20
c002707a:	39 cb                	cmp    ebx,ecx
c002707c:	7f 35                	jg     c00270b3 <__adddf3+0x5e0>
c002707e:	29 d9                	sub    ecx,ebx
c0027080:	8d 71 01             	lea    esi,[ecx+0x1]
c0027083:	83 fe 1f             	cmp    esi,0x1f
c0027086:	7e 09                	jle    c0027091 <__adddf3+0x5be>
c0027088:	83 e9 1f             	sub    ecx,0x1f
c002708b:	d3 e8                	shr    eax,cl
c002708d:	89 c3                	mov    ebx,eax
c002708f:	eb 11                	jmp    c00270a2 <__adddf3+0x5cf>
c0027091:	b9 20 00 00 00       	mov    ecx,0x20
c0027096:	29 f1                	sub    ecx,esi
c0027098:	89 c3                	mov    ebx,eax
c002709a:	d3 e3                	shl    ebx,cl
c002709c:	89 f1                	mov    ecx,esi
c002709e:	d3 e8                	shr    eax,cl
c00270a0:	89 c2                	mov    edx,eax
c00270a2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00270a5:	25 00 f8 ff ff       	and    eax,0xfffff800
c00270aa:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00270ad:	89 d0                	mov    eax,edx
c00270af:	89 da                	mov    edx,ebx
c00270b1:	eb 26                	jmp    c00270d9 <__adddf3+0x606>
c00270b3:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00270b6:	29 cf                	sub    edi,ecx
c00270b8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00270bb:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00270c0:	eb 17                	jmp    c00270d9 <__adddf3+0x606>
c00270c2:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00270c5:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00270c8:	eb 0f                	jmp    c00270d9 <__adddf3+0x606>
c00270ca:	31 d2                	xor    edx,edx
c00270cc:	31 c0                	xor    eax,eax
c00270ce:	eb 09                	jmp    c00270d9 <__adddf3+0x606>
c00270d0:	89 c2                	mov    edx,eax
c00270d2:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c00270d9:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00270dc:	c1 e1 14             	shl    ecx,0x14
c00270df:	89 c3                	mov    ebx,eax
c00270e1:	c1 eb 0b             	shr    ebx,0xb
c00270e4:	09 d9                	or     ecx,ebx
c00270e6:	89 d3                	mov    ebx,edx
c00270e8:	c1 eb 0b             	shr    ebx,0xb
c00270eb:	c1 e0 15             	shl    eax,0x15
c00270ee:	09 d8                	or     eax,ebx
c00270f0:	89 c7                	mov    edi,eax
c00270f2:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c00270f8:	0f 95 c0             	setne  al
c00270fb:	89 c6                	mov    esi,eax
c00270fd:	09 f3                	or     ebx,esi
c00270ff:	83 e3 01             	and    ebx,0x1
c0027102:	c1 ea 0a             	shr    edx,0xa
c0027105:	21 da                	and    edx,ebx
c0027107:	89 f8                	mov    eax,edi
c0027109:	01 d0                	add    eax,edx
c002710b:	83 d1 00             	adc    ecx,0x0
c002710e:	89 c7                	mov    edi,eax
c0027110:	eb 06                	jmp    c0027118 <__adddf3+0x645>
c0027112:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027115:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027118:	89 f8                	mov    eax,edi
c002711a:	89 ca                	mov    edx,ecx
c002711c:	83 c4 24             	add    esp,0x24
c002711f:	5b                   	pop    ebx
c0027120:	5e                   	pop    esi
c0027121:	5f                   	pop    edi
c0027122:	5d                   	pop    ebp
c0027123:	c3                   	ret    

c0027124 <__subdf3>:
c0027124:	55                   	push   ebp
c0027125:	89 e5                	mov    ebp,esp
c0027127:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002712a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c002712d:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027133:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0027136:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0027139:	5d                   	pop    ebp
c002713a:	e9 94 f9 ff ff       	jmp    c0026ad3 <__adddf3>

c002713f <__negdf2>:
c002713f:	55                   	push   ebp
c0027140:	89 e5                	mov    ebp,esp
c0027142:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027145:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027148:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c002714e:	5d                   	pop    ebp
c002714f:	c3                   	ret    

c0027150 <__muldf3>:
c0027150:	55                   	push   ebp
c0027151:	89 e5                	mov    ebp,esp
c0027153:	57                   	push   edi
c0027154:	56                   	push   esi
c0027155:	53                   	push   ebx
c0027156:	83 ec 24             	sub    esp,0x24
c0027159:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002715c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002715f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027162:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027165:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027168:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c002716b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002716e:	89 c8                	mov    eax,ecx
c0027170:	c1 f8 14             	sar    eax,0x14
c0027173:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027176:	89 f8                	mov    eax,edi
c0027178:	89 fb                	mov    ebx,edi
c002717a:	c1 e3 0b             	shl    ebx,0xb
c002717d:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027180:	c1 e1 0b             	shl    ecx,0xb
c0027183:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027189:	c1 e8 15             	shr    eax,0x15
c002718c:	09 c1                	or     ecx,eax
c002718e:	89 d6                	mov    esi,edx
c0027190:	89 d0                	mov    eax,edx
c0027192:	c1 f8 14             	sar    eax,0x14
c0027195:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0027198:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002719b:	89 c3                	mov    ebx,eax
c002719d:	c1 e3 0b             	shl    ebx,0xb
c00271a0:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c00271a3:	c1 e6 0b             	shl    esi,0xb
c00271a6:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c00271ac:	c1 e8 15             	shr    eax,0x15
c00271af:	09 c6                	or     esi,eax
c00271b1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00271b4:	25 ff 07 00 00       	and    eax,0x7ff
c00271b9:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00271bc:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00271bf:	25 ff 07 00 00       	and    eax,0x7ff
c00271c4:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c00271c7:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00271ca:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c00271cd:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c00271d4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00271d7:	40                   	inc    eax
c00271d8:	a9 fe 07 00 00       	test   eax,0x7fe
c00271dd:	0f 85 8d 00 00 00    	jne    c0027270 <__muldf3+0x120>
c00271e3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00271e6:	09 c8                	or     eax,ecx
c00271e8:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c00271ec:	74 44                	je     c0027232 <__muldf3+0xe2>
c00271ee:	85 c0                	test   eax,eax
c00271f0:	0f 85 31 02 00 00    	jne    c0027427 <__muldf3+0x2d7>
c00271f6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00271f9:	40                   	inc    eax
c00271fa:	a9 fe 07 00 00       	test   eax,0x7fe
c00271ff:	75 13                	jne    c0027214 <__muldf3+0xc4>
c0027201:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027204:	09 f1                	or     ecx,esi
c0027206:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002720a:	74 22                	je     c002722e <__muldf3+0xde>
c002720c:	85 c9                	test   ecx,ecx
c002720e:	0f 85 0d 02 00 00    	jne    c0027421 <__muldf3+0x2d1>
c0027214:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0027218:	0f 89 09 02 00 00    	jns    c0027427 <__muldf3+0x2d7>
c002721e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027221:	05 00 00 00 80       	add    eax,0x80000000
c0027226:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027229:	e9 f9 01 00 00       	jmp    c0027427 <__muldf3+0x2d7>
c002722e:	85 c9                	test   ecx,ecx
c0027230:	eb 2e                	jmp    c0027260 <__muldf3+0x110>
c0027232:	85 c0                	test   eax,eax
c0027234:	74 20                	je     c0027256 <__muldf3+0x106>
c0027236:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0027239:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002723c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002723f:	c1 ef 1f             	shr    edi,0x1f
c0027242:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0027245:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0027248:	8d 43 ff             	lea    eax,[ebx-0x1]
c002724b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002724e:	09 f9                	or     ecx,edi
c0027250:	78 1e                	js     c0027270 <__muldf3+0x120>
c0027252:	89 c3                	mov    ebx,eax
c0027254:	eb e0                	jmp    c0027236 <__muldf3+0xe6>
c0027256:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027259:	f7 d0                	not    eax
c002725b:	a9 ff 07 00 00       	test   eax,0x7ff
c0027260:	75 b2                	jne    c0027214 <__muldf3+0xc4>
c0027262:	31 ff                	xor    edi,edi
c0027264:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c002726b:	e9 b7 01 00 00       	jmp    c0027427 <__muldf3+0x2d7>
c0027270:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027273:	40                   	inc    eax
c0027274:	a9 fe 07 00 00       	test   eax,0x7fe
c0027279:	75 57                	jne    c00272d2 <__muldf3+0x182>
c002727b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002727e:	09 f0                	or     eax,esi
c0027280:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027284:	74 23                	je     c00272a9 <__muldf3+0x159>
c0027286:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c002728a:	0f 89 91 01 00 00    	jns    c0027421 <__muldf3+0x2d1>
c0027290:	85 c0                	test   eax,eax
c0027292:	0f 85 89 01 00 00    	jne    c0027421 <__muldf3+0x2d1>
c0027298:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c002729b:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c00272a1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00272a4:	e9 7e 01 00 00       	jmp    c0027427 <__muldf3+0x2d7>
c00272a9:	85 c0                	test   eax,eax
c00272ab:	75 0c                	jne    c00272b9 <__muldf3+0x169>
c00272ad:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c00272b1:	0f 89 6a 01 00 00    	jns    c0027421 <__muldf3+0x2d1>
c00272b7:	eb df                	jmp    c0027298 <__muldf3+0x148>
c00272b9:	01 f6                	add    esi,esi
c00272bb:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00272be:	c1 ea 1f             	shr    edx,0x1f
c00272c1:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00272c4:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c00272c7:	8d 43 ff             	lea    eax,[ebx-0x1]
c00272ca:	09 d6                	or     esi,edx
c00272cc:	78 04                	js     c00272d2 <__muldf3+0x182>
c00272ce:	89 c3                	mov    ebx,eax
c00272d0:	eb e7                	jmp    c00272b9 <__muldf3+0x169>
c00272d2:	81 c9 00 00 00 80    	or     ecx,0x80000000
c00272d8:	81 ce 00 00 00 80    	or     esi,0x80000000
c00272de:	89 c8                	mov    eax,ecx
c00272e0:	f7 e6                	mul    esi
c00272e2:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c00272e5:	89 c7                	mov    edi,eax
c00272e7:	89 c8                	mov    eax,ecx
c00272e9:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c00272ec:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00272ef:	89 c1                	mov    ecx,eax
c00272f1:	89 f0                	mov    eax,esi
c00272f3:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c00272f6:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c00272f9:	89 c6                	mov    esi,eax
c00272fb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00272fe:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027301:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027304:	31 c0                	xor    eax,eax
c0027306:	01 f1                	add    ecx,esi
c0027308:	0f 92 c0             	setb   al
c002730b:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c002730e:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027311:	83 d6 00             	adc    esi,0x0
c0027314:	01 c7                	add    edi,eax
c0027316:	83 d6 00             	adc    esi,0x0
c0027319:	01 ca                	add    edx,ecx
c002731b:	0f 92 c1             	setb   cl
c002731e:	0f b6 c9             	movzx  ecx,cl
c0027321:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0027324:	83 d6 00             	adc    esi,0x0
c0027327:	01 cf                	add    edi,ecx
c0027329:	83 d6 00             	adc    esi,0x0
c002732c:	31 c9                	xor    ecx,ecx
c002732e:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0027331:	0f 95 c1             	setne  cl
c0027334:	09 cf                	or     edi,ecx
c0027336:	85 f6                	test   esi,esi
c0027338:	78 0c                	js     c0027346 <__muldf3+0x1f6>
c002733a:	01 f6                	add    esi,esi
c002733c:	89 f8                	mov    eax,edi
c002733e:	c1 e8 1f             	shr    eax,0x1f
c0027341:	09 c6                	or     esi,eax
c0027343:	01 ff                	add    edi,edi
c0027345:	4b                   	dec    ebx
c0027346:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c002734c:	0f 8f 85 00 00 00    	jg     c00273d7 <__muldf3+0x287>
c0027352:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0027358:	85 db                	test   ebx,ebx
c002735a:	0f 8f 84 00 00 00    	jg     c00273e4 <__muldf3+0x294>
c0027360:	83 fb cc             	cmp    ebx,0xffffffcc
c0027363:	7c 79                	jl     c00273de <__muldf3+0x28e>
c0027365:	ba 01 00 00 00       	mov    edx,0x1
c002736a:	29 da                	sub    edx,ebx
c002736c:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027372:	83 fa 1f             	cmp    edx,0x1f
c0027375:	7e 30                	jle    c00273a7 <__muldf3+0x257>
c0027377:	83 fa 20             	cmp    edx,0x20
c002737a:	75 0b                	jne    c0027387 <__muldf3+0x237>
c002737c:	31 c0                	xor    eax,eax
c002737e:	85 ff                	test   edi,edi
c0027380:	0f 95 c0             	setne  al
c0027383:	89 c7                	mov    edi,eax
c0027385:	eb 1a                	jmp    c00273a1 <__muldf3+0x251>
c0027387:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c002738a:	89 f0                	mov    eax,esi
c002738c:	d3 e0                	shl    eax,cl
c002738e:	09 f8                	or     eax,edi
c0027390:	0f 95 c0             	setne  al
c0027393:	0f b6 c0             	movzx  eax,al
c0027396:	89 c7                	mov    edi,eax
c0027398:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c002739d:	29 d9                	sub    ecx,ebx
c002739f:	d3 ee                	shr    esi,cl
c00273a1:	09 f7                	or     edi,esi
c00273a3:	31 db                	xor    ebx,ebx
c00273a5:	eb 3b                	jmp    c00273e2 <__muldf3+0x292>
c00273a7:	83 c3 1f             	add    ebx,0x1f
c00273aa:	89 f0                	mov    eax,esi
c00273ac:	88 d9                	mov    cl,bl
c00273ae:	d3 e0                	shl    eax,cl
c00273b0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00273b3:	89 f8                	mov    eax,edi
c00273b5:	88 d1                	mov    cl,dl
c00273b7:	d3 e8                	shr    eax,cl
c00273b9:	89 c1                	mov    ecx,eax
c00273bb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00273be:	09 c8                	or     eax,ecx
c00273c0:	88 d9                	mov    cl,bl
c00273c2:	d3 e7                	shl    edi,cl
c00273c4:	31 db                	xor    ebx,ebx
c00273c6:	85 ff                	test   edi,edi
c00273c8:	0f 95 c3             	setne  bl
c00273cb:	89 df                	mov    edi,ebx
c00273cd:	09 c7                	or     edi,eax
c00273cf:	88 d1                	mov    cl,dl
c00273d1:	d3 ee                	shr    esi,cl
c00273d3:	31 db                	xor    ebx,ebx
c00273d5:	eb 0d                	jmp    c00273e4 <__muldf3+0x294>
c00273d7:	bb ff 07 00 00       	mov    ebx,0x7ff
c00273dc:	eb 02                	jmp    c00273e0 <__muldf3+0x290>
c00273de:	31 db                	xor    ebx,ebx
c00273e0:	31 ff                	xor    edi,edi
c00273e2:	31 f6                	xor    esi,esi
c00273e4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00273e7:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c00273ea:	25 00 f8 ff ff       	and    eax,0xfffff800
c00273ef:	09 c3                	or     ebx,eax
c00273f1:	c1 e3 14             	shl    ebx,0x14
c00273f4:	89 f0                	mov    eax,esi
c00273f6:	c1 e8 0b             	shr    eax,0xb
c00273f9:	09 c3                	or     ebx,eax
c00273fb:	89 f8                	mov    eax,edi
c00273fd:	c1 e8 0b             	shr    eax,0xb
c0027400:	c1 e6 15             	shl    esi,0x15
c0027403:	09 c6                	or     esi,eax
c0027405:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c002740b:	0f 95 c1             	setne  cl
c002740e:	09 c8                	or     eax,ecx
c0027410:	83 e0 01             	and    eax,0x1
c0027413:	c1 ef 0a             	shr    edi,0xa
c0027416:	21 c7                	and    edi,eax
c0027418:	01 f7                	add    edi,esi
c002741a:	83 d3 00             	adc    ebx,0x0
c002741d:	89 da                	mov    edx,ebx
c002741f:	eb 03                	jmp    c0027424 <__muldf3+0x2d4>
c0027421:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027424:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027427:	89 f8                	mov    eax,edi
c0027429:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002742c:	83 c4 24             	add    esp,0x24
c002742f:	5b                   	pop    ebx
c0027430:	5e                   	pop    esi
c0027431:	5f                   	pop    edi
c0027432:	5d                   	pop    ebp
c0027433:	c3                   	ret    

c0027434 <__divdf3>:
c0027434:	55                   	push   ebp
c0027435:	89 e5                	mov    ebp,esp
c0027437:	57                   	push   edi
c0027438:	56                   	push   esi
c0027439:	53                   	push   ebx
c002743a:	83 ec 2c             	sub    esp,0x2c
c002743d:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027440:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027443:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027446:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027449:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002744c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002744f:	89 ce                	mov    esi,ecx
c0027451:	89 c8                	mov    eax,ecx
c0027453:	c1 f8 14             	sar    eax,0x14
c0027456:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027459:	89 f8                	mov    eax,edi
c002745b:	89 fb                	mov    ebx,edi
c002745d:	c1 e3 0b             	shl    ebx,0xb
c0027460:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0027463:	c1 e6 0b             	shl    esi,0xb
c0027466:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c002746c:	c1 e8 15             	shr    eax,0x15
c002746f:	09 c6                	or     esi,eax
c0027471:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0027474:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027477:	89 c2                	mov    edx,eax
c0027479:	c1 fa 14             	sar    edx,0x14
c002747c:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c002747f:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027482:	89 de                	mov    esi,ebx
c0027484:	c1 e6 0b             	shl    esi,0xb
c0027487:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c002748a:	c1 e0 0b             	shl    eax,0xb
c002748d:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027492:	c1 eb 15             	shr    ebx,0x15
c0027495:	09 d8                	or     eax,ebx
c0027497:	89 c2                	mov    edx,eax
c0027499:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002749c:	25 ff 07 00 00       	and    eax,0x7ff
c00274a1:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00274a4:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00274a7:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00274ad:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c00274b0:	29 d8                	sub    eax,ebx
c00274b2:	05 ff 03 00 00       	add    eax,0x3ff
c00274b7:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00274ba:	46                   	inc    esi
c00274bb:	81 e6 fe 07 00 00    	and    esi,0x7fe
c00274c1:	0f 85 a5 00 00 00    	jne    c002756c <__divdf3+0x138>
c00274c7:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00274ca:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c00274cd:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c00274d1:	74 2a                	je     c00274fd <__divdf3+0xc9>
c00274d3:	85 f6                	test   esi,esi
c00274d5:	0f 85 cc 02 00 00    	jne    c00277a7 <__divdf3+0x373>
c00274db:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00274de:	40                   	inc    eax
c00274df:	a9 fe 07 00 00       	test   eax,0x7fe
c00274e4:	75 26                	jne    c002750c <__divdf3+0xd8>
c00274e6:	85 db                	test   ebx,ebx
c00274e8:	74 22                	je     c002750c <__divdf3+0xd8>
c00274ea:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00274ed:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00274f0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00274f3:	09 d0                	or     eax,edx
c00274f5:	0f 85 ac 02 00 00    	jne    c00277a7 <__divdf3+0x373>
c00274fb:	eb 63                	jmp    c0027560 <__divdf3+0x12c>
c00274fd:	85 f6                	test   esi,esi
c00274ff:	75 22                	jne    c0027523 <__divdf3+0xef>
c0027501:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027504:	40                   	inc    eax
c0027505:	a9 fe 07 00 00       	test   eax,0x7fe
c002750a:	74 36                	je     c0027542 <__divdf3+0x10e>
c002750c:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027510:	0f 89 91 02 00 00    	jns    c00277a7 <__divdf3+0x373>
c0027516:	89 f8                	mov    eax,edi
c0027518:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c002751e:	e9 80 02 00 00       	jmp    c00277a3 <__divdf3+0x36f>
c0027523:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027526:	01 f6                	add    esi,esi
c0027528:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002752b:	c1 ef 1f             	shr    edi,0x1f
c002752e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027531:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0027534:	8d 48 ff             	lea    ecx,[eax-0x1]
c0027537:	09 f7                	or     edi,esi
c0027539:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c002753c:	78 2e                	js     c002756c <__divdf3+0x138>
c002753e:	89 c8                	mov    eax,ecx
c0027540:	eb e1                	jmp    c0027523 <__divdf3+0xef>
c0027542:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027545:	09 d0                	or     eax,edx
c0027547:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c002754b:	74 0f                	je     c002755c <__divdf3+0x128>
c002754d:	85 c0                	test   eax,eax
c002754f:	74 bb                	je     c002750c <__divdf3+0xd8>
c0027551:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027554:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027557:	e9 4b 02 00 00       	jmp    c00277a7 <__divdf3+0x373>
c002755c:	85 c0                	test   eax,eax
c002755e:	75 ac                	jne    c002750c <__divdf3+0xd8>
c0027560:	31 ff                	xor    edi,edi
c0027562:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027567:	e9 3b 02 00 00       	jmp    c00277a7 <__divdf3+0x373>
c002756c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002756f:	8d 4f 01             	lea    ecx,[edi+0x1]
c0027572:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0027578:	75 6b                	jne    c00275e5 <__divdf3+0x1b1>
c002757a:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002757d:	09 d6                	or     esi,edx
c002757f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027583:	74 28                	je     c00275ad <__divdf3+0x179>
c0027585:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027588:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c002758b:	85 f6                	test   esi,esi
c002758d:	0f 85 14 02 00 00    	jne    c00277a7 <__divdf3+0x373>
c0027593:	31 ff                	xor    edi,edi
c0027595:	31 c9                	xor    ecx,ecx
c0027597:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002759a:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c002759d:	0f 89 04 02 00 00    	jns    c00277a7 <__divdf3+0x373>
c00275a3:	b9 00 00 00 80       	mov    ecx,0x80000000
c00275a8:	e9 fa 01 00 00       	jmp    c00277a7 <__divdf3+0x373>
c00275ad:	85 f6                	test   esi,esi
c00275af:	75 1b                	jne    c00275cc <__divdf3+0x198>
c00275b1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00275b4:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c00275b7:	25 00 00 00 80       	and    eax,0x80000000
c00275bc:	31 c9                	xor    ecx,ecx
c00275be:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c00275c3:	89 cf                	mov    edi,ecx
c00275c5:	89 c1                	mov    ecx,eax
c00275c7:	e9 db 01 00 00       	jmp    c00277a7 <__divdf3+0x373>
c00275cc:	01 d2                	add    edx,edx
c00275ce:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00275d1:	c1 eb 1f             	shr    ebx,0x1f
c00275d4:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00275d7:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c00275da:	8d 48 01             	lea    ecx,[eax+0x1]
c00275dd:	09 da                	or     edx,ebx
c00275df:	78 04                	js     c00275e5 <__divdf3+0x1b1>
c00275e1:	89 c8                	mov    eax,ecx
c00275e3:	eb e7                	jmp    c00275cc <__divdf3+0x198>
c00275e5:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00275e8:	81 ce 00 00 00 80    	or     esi,0x80000000
c00275ee:	81 ca 00 00 00 80    	or     edx,0x80000000
c00275f4:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c00275f7:	39 d6                	cmp    esi,edx
c00275f9:	77 0d                	ja     c0027608 <__divdf3+0x1d4>
c00275fb:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00275fe:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0027601:	72 1b                	jb     c002761e <__divdf3+0x1ea>
c0027603:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0027606:	75 16                	jne    c002761e <__divdf3+0x1ea>
c0027608:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c002760b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002760e:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0027611:	83 de 00             	sbb    esi,0x0
c0027614:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0027617:	ba 01 00 00 00       	mov    edx,0x1
c002761c:	eb 02                	jmp    c0027620 <__divdf3+0x1ec>
c002761e:	31 d2                	xor    edx,edx
c0027620:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0027627:	31 ff                	xor    edi,edi
c0027629:	01 ff                	add    edi,edi
c002762b:	89 d1                	mov    ecx,edx
c002762d:	c1 e9 1f             	shr    ecx,0x1f
c0027630:	09 cf                	or     edi,ecx
c0027632:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0027635:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0027638:	89 da                	mov    edx,ebx
c002763a:	89 f3                	mov    ebx,esi
c002763c:	8d 34 36             	lea    esi,[esi+esi*1]
c002763f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027642:	c1 e9 1f             	shr    ecx,0x1f
c0027645:	09 ce                	or     esi,ecx
c0027647:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002764a:	01 c9                	add    ecx,ecx
c002764c:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c002764f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0027652:	85 db                	test   ebx,ebx
c0027654:	78 29                	js     c002767f <__divdf3+0x24b>
c0027656:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0027659:	72 07                	jb     c0027662 <__divdf3+0x22e>
c002765b:	75 3c                	jne    c0027699 <__divdf3+0x265>
c002765d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027660:	77 37                	ja     c0027699 <__divdf3+0x265>
c0027662:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027665:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0027668:	31 d2                	xor    edx,edx
c002766a:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c002766d:	0f 97 c2             	seta   dl
c0027670:	29 d6                	sub    esi,edx
c0027672:	89 d9                	mov    ecx,ebx
c0027674:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0027677:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c002767a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c002767d:	eb 17                	jmp    c0027696 <__divdf3+0x262>
c002767f:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027682:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027685:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027688:	0f 97 c1             	seta   cl
c002768b:	0f b6 c9             	movzx  ecx,cl
c002768e:	29 ce                	sub    esi,ecx
c0027690:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0027693:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0027696:	83 ca 01             	or     edx,0x1
c0027699:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c002769c:	75 8b                	jne    c0027629 <__divdf3+0x1f5>
c002769e:	c1 e7 09             	shl    edi,0x9
c00276a1:	89 d1                	mov    ecx,edx
c00276a3:	c1 e9 17             	shr    ecx,0x17
c00276a6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00276a9:	09 f3                	or     ebx,esi
c00276ab:	0f 95 c3             	setne  bl
c00276ae:	0f b6 db             	movzx  ebx,bl
c00276b1:	c1 e2 09             	shl    edx,0x9
c00276b4:	09 d3                	or     ebx,edx
c00276b6:	89 ca                	mov    edx,ecx
c00276b8:	09 fa                	or     edx,edi
c00276ba:	78 0c                	js     c00276c8 <__divdf3+0x294>
c00276bc:	01 d2                	add    edx,edx
c00276be:	89 d9                	mov    ecx,ebx
c00276c0:	c1 e9 1f             	shr    ecx,0x1f
c00276c3:	09 ca                	or     edx,ecx
c00276c5:	01 db                	add    ebx,ebx
c00276c7:	48                   	dec    eax
c00276c8:	3d fe 07 00 00       	cmp    eax,0x7fe
c00276cd:	0f 8f 83 00 00 00    	jg     c0027756 <__divdf3+0x322>
c00276d3:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00276d9:	85 c0                	test   eax,eax
c00276db:	0f 8f 82 00 00 00    	jg     c0027763 <__divdf3+0x32f>
c00276e1:	83 f8 cc             	cmp    eax,0xffffffcc
c00276e4:	7c 77                	jl     c002775d <__divdf3+0x329>
c00276e6:	be 01 00 00 00       	mov    esi,0x1
c00276eb:	29 c6                	sub    esi,eax
c00276ed:	81 ca 00 00 00 80    	or     edx,0x80000000
c00276f3:	83 fe 1f             	cmp    esi,0x1f
c00276f6:	7e 2f                	jle    c0027727 <__divdf3+0x2f3>
c00276f8:	83 fe 20             	cmp    esi,0x20
c00276fb:	75 0a                	jne    c0027707 <__divdf3+0x2d3>
c00276fd:	85 db                	test   ebx,ebx
c00276ff:	0f 95 c3             	setne  bl
c0027702:	0f b6 db             	movzx  ebx,bl
c0027705:	eb 1a                	jmp    c0027721 <__divdf3+0x2ed>
c0027707:	8d 48 3f             	lea    ecx,[eax+0x3f]
c002770a:	89 d7                	mov    edi,edx
c002770c:	d3 e7                	shl    edi,cl
c002770e:	89 f9                	mov    ecx,edi
c0027710:	09 d9                	or     ecx,ebx
c0027712:	0f 95 c3             	setne  bl
c0027715:	0f b6 db             	movzx  ebx,bl
c0027718:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c002771d:	29 c1                	sub    ecx,eax
c002771f:	d3 ea                	shr    edx,cl
c0027721:	09 d3                	or     ebx,edx
c0027723:	31 c0                	xor    eax,eax
c0027725:	eb 3a                	jmp    c0027761 <__divdf3+0x32d>
c0027727:	83 c0 1f             	add    eax,0x1f
c002772a:	89 d7                	mov    edi,edx
c002772c:	88 c1                	mov    cl,al
c002772e:	d3 e7                	shl    edi,cl
c0027730:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027733:	89 df                	mov    edi,ebx
c0027735:	89 f1                	mov    ecx,esi
c0027737:	d3 ef                	shr    edi,cl
c0027739:	89 f9                	mov    ecx,edi
c002773b:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002773e:	09 cf                	or     edi,ecx
c0027740:	88 c1                	mov    cl,al
c0027742:	d3 e3                	shl    ebx,cl
c0027744:	85 db                	test   ebx,ebx
c0027746:	0f 95 c3             	setne  bl
c0027749:	0f b6 db             	movzx  ebx,bl
c002774c:	09 fb                	or     ebx,edi
c002774e:	89 f1                	mov    ecx,esi
c0027750:	d3 ea                	shr    edx,cl
c0027752:	31 c0                	xor    eax,eax
c0027754:	eb 0d                	jmp    c0027763 <__divdf3+0x32f>
c0027756:	b8 ff 07 00 00       	mov    eax,0x7ff
c002775b:	eb 02                	jmp    c002775f <__divdf3+0x32b>
c002775d:	31 c0                	xor    eax,eax
c002775f:	31 db                	xor    ebx,ebx
c0027761:	31 d2                	xor    edx,edx
c0027763:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0027766:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0027769:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c002776f:	09 c8                	or     eax,ecx
c0027771:	c1 e0 14             	shl    eax,0x14
c0027774:	89 d1                	mov    ecx,edx
c0027776:	c1 e9 0b             	shr    ecx,0xb
c0027779:	09 c8                	or     eax,ecx
c002777b:	89 c6                	mov    esi,eax
c002777d:	89 d9                	mov    ecx,ebx
c002777f:	c1 e9 0b             	shr    ecx,0xb
c0027782:	c1 e2 15             	shl    edx,0x15
c0027785:	09 ca                	or     edx,ecx
c0027787:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c002778d:	0f 95 c0             	setne  al
c0027790:	09 c1                	or     ecx,eax
c0027792:	83 e1 01             	and    ecx,0x1
c0027795:	c1 eb 0a             	shr    ebx,0xa
c0027798:	21 cb                	and    ebx,ecx
c002779a:	01 d3                	add    ebx,edx
c002779c:	89 d8                	mov    eax,ebx
c002779e:	83 d6 00             	adc    esi,0x0
c00277a1:	89 f2                	mov    edx,esi
c00277a3:	89 c7                	mov    edi,eax
c00277a5:	89 d1                	mov    ecx,edx
c00277a7:	89 f8                	mov    eax,edi
c00277a9:	89 ca                	mov    edx,ecx
c00277ab:	83 c4 2c             	add    esp,0x2c
c00277ae:	5b                   	pop    ebx
c00277af:	5e                   	pop    esi
c00277b0:	5f                   	pop    edi
c00277b1:	5d                   	pop    ebp
c00277b2:	c3                   	ret    

c00277b3 <__floatsidf>:
c00277b3:	55                   	push   ebp
c00277b4:	89 e5                	mov    ebp,esp
c00277b6:	56                   	push   esi
c00277b7:	53                   	push   ebx
c00277b8:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00277bb:	85 db                	test   ebx,ebx
c00277bd:	7e 15                	jle    c00277d4 <__floatsidf+0x21>
c00277bf:	0f bd cb             	bsr    ecx,ebx
c00277c2:	83 f1 1f             	xor    ecx,0x1f
c00277c5:	d3 e3                	shl    ebx,cl
c00277c7:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00277cd:	b8 1e 04 00 00       	mov    eax,0x41e
c00277d2:	eb 21                	jmp    c00277f5 <__floatsidf+0x42>
c00277d4:	b8 00 00 00 00       	mov    eax,0x0
c00277d9:	ba 00 00 00 00       	mov    edx,0x0
c00277de:	74 2a                	je     c002780a <__floatsidf+0x57>
c00277e0:	f7 db                	neg    ebx
c00277e2:	0f bd cb             	bsr    ecx,ebx
c00277e5:	83 f1 1f             	xor    ecx,0x1f
c00277e8:	d3 e3                	shl    ebx,cl
c00277ea:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00277f0:	b8 1e 0c 00 00       	mov    eax,0xc1e
c00277f5:	29 c8                	sub    eax,ecx
c00277f7:	c1 e0 14             	shl    eax,0x14
c00277fa:	89 c1                	mov    ecx,eax
c00277fc:	89 de                	mov    esi,ebx
c00277fe:	c1 ee 0b             	shr    esi,0xb
c0027801:	09 f1                	or     ecx,esi
c0027803:	89 ca                	mov    edx,ecx
c0027805:	c1 e3 15             	shl    ebx,0x15
c0027808:	89 d8                	mov    eax,ebx
c002780a:	5b                   	pop    ebx
c002780b:	5e                   	pop    esi
c002780c:	5d                   	pop    ebp
c002780d:	c3                   	ret    

c002780e <__floatunsidf>:
c002780e:	55                   	push   ebp
c002780f:	89 e5                	mov    ebp,esp
c0027811:	56                   	push   esi
c0027812:	53                   	push   ebx
c0027813:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027816:	85 db                	test   ebx,ebx
c0027818:	74 2a                	je     c0027844 <__floatunsidf+0x36>
c002781a:	0f bd cb             	bsr    ecx,ebx
c002781d:	83 f1 1f             	xor    ecx,0x1f
c0027820:	d3 e3                	shl    ebx,cl
c0027822:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027828:	b8 1e 04 00 00       	mov    eax,0x41e
c002782d:	29 c8                	sub    eax,ecx
c002782f:	c1 e0 14             	shl    eax,0x14
c0027832:	89 c1                	mov    ecx,eax
c0027834:	89 de                	mov    esi,ebx
c0027836:	c1 ee 0b             	shr    esi,0xb
c0027839:	09 f1                	or     ecx,esi
c002783b:	89 ca                	mov    edx,ecx
c002783d:	c1 e3 15             	shl    ebx,0x15
c0027840:	89 d8                	mov    eax,ebx
c0027842:	eb 04                	jmp    c0027848 <__floatunsidf+0x3a>
c0027844:	31 c0                	xor    eax,eax
c0027846:	31 d2                	xor    edx,edx
c0027848:	5b                   	pop    ebx
c0027849:	5e                   	pop    esi
c002784a:	5d                   	pop    ebp
c002784b:	c3                   	ret    

c002784c <__fixdfsi>:
c002784c:	55                   	push   ebp
c002784d:	89 e5                	mov    ebp,esp
c002784f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0027852:	89 d1                	mov    ecx,edx
c0027854:	c1 e1 0b             	shl    ecx,0xb
c0027857:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c002785d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027860:	c1 e8 15             	shr    eax,0x15
c0027863:	09 c1                	or     ecx,eax
c0027865:	c1 fa 14             	sar    edx,0x14
c0027868:	78 1f                	js     c0027889 <__fixdfsi+0x3d>
c002786a:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0027870:	31 c0                	xor    eax,eax
c0027872:	83 fa 1e             	cmp    edx,0x1e
c0027875:	77 40                	ja     c00278b7 <__fixdfsi+0x6b>
c0027877:	89 c8                	mov    eax,ecx
c0027879:	0d 00 00 00 80       	or     eax,0x80000000
c002787e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027883:	29 d1                	sub    ecx,edx
c0027885:	d3 e8                	shr    eax,cl
c0027887:	eb 2e                	jmp    c00278b7 <__fixdfsi+0x6b>
c0027889:	31 c0                	xor    eax,eax
c002788b:	81 c2 01 04 00 00    	add    edx,0x401
c0027891:	78 24                	js     c00278b7 <__fixdfsi+0x6b>
c0027893:	83 fa 1e             	cmp    edx,0x1e
c0027896:	7e 09                	jle    c00278a1 <__fixdfsi+0x55>
c0027898:	83 fa 1f             	cmp    edx,0x1f
c002789b:	75 18                	jne    c00278b5 <__fixdfsi+0x69>
c002789d:	85 c9                	test   ecx,ecx
c002789f:	75 14                	jne    c00278b5 <__fixdfsi+0x69>
c00278a1:	89 c8                	mov    eax,ecx
c00278a3:	0d 00 00 00 80       	or     eax,0x80000000
c00278a8:	b9 1f 00 00 00       	mov    ecx,0x1f
c00278ad:	29 d1                	sub    ecx,edx
c00278af:	d3 e8                	shr    eax,cl
c00278b1:	f7 d8                	neg    eax
c00278b3:	eb 02                	jmp    c00278b7 <__fixdfsi+0x6b>
c00278b5:	31 c0                	xor    eax,eax
c00278b7:	5d                   	pop    ebp
c00278b8:	c3                   	ret    

c00278b9 <__fixunsdfsi>:
c00278b9:	55                   	push   ebp
c00278ba:	89 e5                	mov    ebp,esp
c00278bc:	53                   	push   ebx
c00278bd:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00278c0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00278c3:	89 d3                	mov    ebx,edx
c00278c5:	c1 fb 14             	sar    ebx,0x14
c00278c8:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c00278ce:	31 c0                	xor    eax,eax
c00278d0:	83 fb 1f             	cmp    ebx,0x1f
c00278d3:	77 1d                	ja     c00278f2 <__fixunsdfsi+0x39>
c00278d5:	89 d0                	mov    eax,edx
c00278d7:	c1 e0 0b             	shl    eax,0xb
c00278da:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00278df:	c1 e9 15             	shr    ecx,0x15
c00278e2:	09 c8                	or     eax,ecx
c00278e4:	0d 00 00 00 80       	or     eax,0x80000000
c00278e9:	b9 1f 00 00 00       	mov    ecx,0x1f
c00278ee:	29 d9                	sub    ecx,ebx
c00278f0:	d3 e8                	shr    eax,cl
c00278f2:	5b                   	pop    ebx
c00278f3:	5d                   	pop    ebp
c00278f4:	c3                   	ret    

c00278f5 <__cmpdf2>:
c00278f5:	55                   	push   ebp
c00278f6:	89 e5                	mov    ebp,esp
c00278f8:	57                   	push   edi
c00278f9:	56                   	push   esi
c00278fa:	53                   	push   ebx
c00278fb:	83 ec 0c             	sub    esp,0xc
c00278fe:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0027901:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027904:	89 ca                	mov    edx,ecx
c0027906:	c1 ea 14             	shr    edx,0x14
c0027909:	81 e2 ff 07 00 00    	and    edx,0x7ff
c002790f:	89 cb                	mov    ebx,ecx
c0027911:	c1 fb 1f             	sar    ebx,0x1f
c0027914:	31 da                	xor    edx,ebx
c0027916:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027919:	89 df                	mov    edi,ebx
c002791b:	c1 e7 0b             	shl    edi,0xb
c002791e:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027921:	c1 e1 0b             	shl    ecx,0xb
c0027924:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c002792a:	c1 eb 15             	shr    ebx,0x15
c002792d:	09 d9                	or     ecx,ebx
c002792f:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0027932:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027935:	89 ce                	mov    esi,ecx
c0027937:	c1 ee 14             	shr    esi,0x14
c002793a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027940:	89 cb                	mov    ebx,ecx
c0027942:	c1 fb 1f             	sar    ebx,0x1f
c0027945:	31 de                	xor    esi,ebx
c0027947:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c002794a:	89 df                	mov    edi,ebx
c002794c:	c1 e7 0b             	shl    edi,0xb
c002794f:	c1 e1 0b             	shl    ecx,0xb
c0027952:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027958:	c1 eb 15             	shr    ebx,0x15
c002795b:	09 d9                	or     ecx,ebx
c002795d:	89 d3                	mov    ebx,edx
c002795f:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0027965:	43                   	inc    ebx
c0027966:	83 fb 01             	cmp    ebx,0x1
c0027969:	77 08                	ja     c0027973 <__cmpdf2+0x7e>
c002796b:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c002796e:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027971:	75 68                	jne    c00279db <__cmpdf2+0xe6>
c0027973:	89 f3                	mov    ebx,esi
c0027975:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c002797b:	43                   	inc    ebx
c002797c:	83 fb 01             	cmp    ebx,0x1
c002797f:	77 06                	ja     c0027987 <__cmpdf2+0x92>
c0027981:	89 fb                	mov    ebx,edi
c0027983:	09 cb                	or     ebx,ecx
c0027985:	75 54                	jne    c00279db <__cmpdf2+0xe6>
c0027987:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002798a:	09 f8                	or     eax,edi
c002798c:	09 c8                	or     eax,ecx
c002798e:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0027991:	75 12                	jne    c00279a5 <__cmpdf2+0xb0>
c0027993:	8d 42 01             	lea    eax,[edx+0x1]
c0027996:	83 f8 01             	cmp    eax,0x1
c0027999:	77 0a                	ja     c00279a5 <__cmpdf2+0xb0>
c002799b:	8d 5e 01             	lea    ebx,[esi+0x1]
c002799e:	31 c0                	xor    eax,eax
c00279a0:	83 fb 01             	cmp    ebx,0x1
c00279a3:	76 36                	jbe    c00279db <__cmpdf2+0xe6>
c00279a5:	b8 01 00 00 00       	mov    eax,0x1
c00279aa:	39 f2                	cmp    edx,esi
c00279ac:	7f 2d                	jg     c00279db <__cmpdf2+0xe6>
c00279ae:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00279b3:	7c 26                	jl     c00279db <__cmpdf2+0xe6>
c00279b5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00279b8:	77 07                	ja     c00279c1 <__cmpdf2+0xcc>
c00279ba:	72 16                	jb     c00279d2 <__cmpdf2+0xdd>
c00279bc:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c00279bf:	76 0a                	jbe    c00279cb <__cmpdf2+0xd6>
c00279c1:	89 d0                	mov    eax,edx
c00279c3:	c1 f8 1f             	sar    eax,0x1f
c00279c6:	83 c8 01             	or     eax,0x1
c00279c9:	eb 10                	jmp    c00279db <__cmpdf2+0xe6>
c00279cb:	b8 00 00 00 00       	mov    eax,0x0
c00279d0:	73 09                	jae    c00279db <__cmpdf2+0xe6>
c00279d2:	89 d0                	mov    eax,edx
c00279d4:	c1 f8 1f             	sar    eax,0x1f
c00279d7:	83 e0 02             	and    eax,0x2
c00279da:	48                   	dec    eax
c00279db:	83 c4 0c             	add    esp,0xc
c00279de:	5b                   	pop    ebx
c00279df:	5e                   	pop    esi
c00279e0:	5f                   	pop    edi
c00279e1:	5d                   	pop    ebp
c00279e2:	c3                   	ret    

c00279e3 <__eqdf2>:
c00279e3:	55                   	push   ebp
c00279e4:	89 e5                	mov    ebp,esp
c00279e6:	50                   	push   eax
c00279e7:	6a 01                	push   0x1
c00279e9:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00279ec:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00279ef:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00279f2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00279f5:	e8 fb fe ff ff       	call   c00278f5 <__cmpdf2>
c00279fa:	83 c4 18             	add    esp,0x18
c00279fd:	c9                   	leave  
c00279fe:	c3                   	ret    

c00279ff <__nedf2>:
c00279ff:	eb e2                	jmp    c00279e3 <__eqdf2>

c0027a01 <__gtdf2>:
c0027a01:	55                   	push   ebp
c0027a02:	89 e5                	mov    ebp,esp
c0027a04:	50                   	push   eax
c0027a05:	6a ff                	push   0xffffffff
c0027a07:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0027a0a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0027a0d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027a10:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027a13:	e8 dd fe ff ff       	call   c00278f5 <__cmpdf2>
c0027a18:	83 c4 18             	add    esp,0x18
c0027a1b:	c9                   	leave  
c0027a1c:	c3                   	ret    

c0027a1d <__gedf2>:
c0027a1d:	eb e2                	jmp    c0027a01 <__gtdf2>

c0027a1f <__ltdf2>:
c0027a1f:	eb c2                	jmp    c00279e3 <__eqdf2>

c0027a21 <__ledf2>:
c0027a21:	eb c0                	jmp    c00279e3 <__eqdf2>

c0027a23 <__truncdfsf2>:
c0027a23:	55                   	push   ebp
c0027a24:	89 e5                	mov    ebp,esp
c0027a26:	57                   	push   edi
c0027a27:	56                   	push   esi
c0027a28:	53                   	push   ebx
c0027a29:	83 ec 0c             	sub    esp,0xc
c0027a2c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0027a2f:	89 d1                	mov    ecx,edx
c0027a31:	c1 f9 14             	sar    ecx,0x14
c0027a34:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027a37:	89 df                	mov    edi,ebx
c0027a39:	c1 e7 0b             	shl    edi,0xb
c0027a3c:	89 d0                	mov    eax,edx
c0027a3e:	c1 e0 0b             	shl    eax,0xb
c0027a41:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027a46:	c1 eb 15             	shr    ebx,0x15
c0027a49:	09 d8                	or     eax,ebx
c0027a4b:	89 cb                	mov    ebx,ecx
c0027a4d:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027a53:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0027a59:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0027a5f:	0f 86 9e 00 00 00    	jbe    c0027b03 <__truncdfsf2+0xe0>
c0027a65:	85 db                	test   ebx,ebx
c0027a67:	75 0a                	jne    c0027a73 <__truncdfsf2+0x50>
c0027a69:	c1 fa 17             	sar    edx,0x17
c0027a6c:	30 d2                	xor    dl,dl
c0027a6e:	e9 84 00 00 00       	jmp    c0027af7 <__truncdfsf2+0xd4>
c0027a73:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0027a79:	83 fe 83             	cmp    esi,0xffffff83
c0027a7c:	7d 4b                	jge    c0027ac9 <__truncdfsf2+0xa6>
c0027a7e:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c0027a83:	29 f1                	sub    ecx,esi
c0027a85:	83 f9 1f             	cmp    ecx,0x1f
c0027a88:	7f 6b                	jg     c0027af5 <__truncdfsf2+0xd2>
c0027a8a:	0d 00 00 00 80       	or     eax,0x80000000
c0027a8f:	89 c3                	mov    ebx,eax
c0027a91:	d3 eb                	shr    ebx,cl
c0027a93:	be 01 00 00 00       	mov    esi,0x1
c0027a98:	d3 e6                	shl    esi,cl
c0027a9a:	4e                   	dec    esi
c0027a9b:	21 f0                	and    eax,esi
c0027a9d:	09 f8                	or     eax,edi
c0027a9f:	0f 95 c0             	setne  al
c0027aa2:	0f b6 c0             	movzx  eax,al
c0027aa5:	09 c3                	or     ebx,eax
c0027aa7:	89 d9                	mov    ecx,ebx
c0027aa9:	c1 e9 08             	shr    ecx,0x8
c0027aac:	f6 c3 7f             	test   bl,0x7f
c0027aaf:	0f 95 c0             	setne  al
c0027ab2:	09 c8                	or     eax,ecx
c0027ab4:	83 e0 01             	and    eax,0x1
c0027ab7:	c1 eb 07             	shr    ebx,0x7
c0027aba:	21 c3                	and    ebx,eax
c0027abc:	81 e2 00 00 00 80    	and    edx,0x80000000
c0027ac2:	09 d1                	or     ecx,edx
c0027ac4:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c0027ac7:	eb 76                	jmp    c0027b3f <__truncdfsf2+0x11c>
c0027ac9:	83 c6 80             	add    esi,0xffffff80
c0027acc:	7e 1d                	jle    c0027aeb <__truncdfsf2+0xc8>
c0027ace:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0027ad4:	75 0b                	jne    c0027ae1 <__truncdfsf2+0xbe>
c0027ad6:	09 f8                	or     eax,edi
c0027ad8:	74 09                	je     c0027ae3 <__truncdfsf2+0xc0>
c0027ada:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c0027adf:	eb 02                	jmp    c0027ae3 <__truncdfsf2+0xc0>
c0027ae1:	31 c0                	xor    eax,eax
c0027ae3:	c1 fa 17             	sar    edx,0x17
c0027ae6:	80 ca ff             	or     dl,0xff
c0027ae9:	eb 0e                	jmp    c0027af9 <__truncdfsf2+0xd6>
c0027aeb:	c1 fa 1f             	sar    edx,0x1f
c0027aee:	c1 e2 08             	shl    edx,0x8
c0027af1:	09 ca                	or     edx,ecx
c0027af3:	eb 04                	jmp    c0027af9 <__truncdfsf2+0xd6>
c0027af5:	31 d2                	xor    edx,edx
c0027af7:	31 c0                	xor    eax,eax
c0027af9:	c1 e2 17             	shl    edx,0x17
c0027afc:	c1 e8 08             	shr    eax,0x8
c0027aff:	09 d0                	or     eax,edx
c0027b01:	eb 3c                	jmp    c0027b3f <__truncdfsf2+0x11c>
c0027b03:	81 e9 80 03 00 00    	sub    ecx,0x380
c0027b09:	89 ca                	mov    edx,ecx
c0027b0b:	c1 fa 0b             	sar    edx,0xb
c0027b0e:	c1 e2 08             	shl    edx,0x8
c0027b11:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027b14:	31 db                	xor    ebx,ebx
c0027b16:	85 ff                	test   edi,edi
c0027b18:	0f 95 c3             	setne  bl
c0027b1b:	09 d8                	or     eax,ebx
c0027b1d:	89 c3                	mov    ebx,eax
c0027b1f:	c1 eb 08             	shr    ebx,0x8
c0027b22:	a8 7f                	test   al,0x7f
c0027b24:	0f 95 c2             	setne  dl
c0027b27:	89 d6                	mov    esi,edx
c0027b29:	09 de                	or     esi,ebx
c0027b2b:	83 e6 01             	and    esi,0x1
c0027b2e:	c1 e8 07             	shr    eax,0x7
c0027b31:	21 f0                	and    eax,esi
c0027b33:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0027b36:	09 ca                	or     edx,ecx
c0027b38:	c1 e2 17             	shl    edx,0x17
c0027b3b:	09 da                	or     edx,ebx
c0027b3d:	01 d0                	add    eax,edx
c0027b3f:	83 c4 0c             	add    esp,0xc
c0027b42:	5b                   	pop    ebx
c0027b43:	5e                   	pop    esi
c0027b44:	5f                   	pop    edi
c0027b45:	5d                   	pop    ebp
c0027b46:	c3                   	ret    

c0027b47 <__extendsfdf2>:
c0027b47:	55                   	push   ebp
c0027b48:	89 e5                	mov    ebp,esp
c0027b4a:	57                   	push   edi
c0027b4b:	56                   	push   esi
c0027b4c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027b4f:	89 d1                	mov    ecx,edx
c0027b51:	c1 f9 17             	sar    ecx,0x17
c0027b54:	c1 e2 08             	shl    edx,0x8
c0027b57:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0027b5d:	89 c8                	mov    eax,ecx
c0027b5f:	80 e4 f8             	and    ah,0xf8
c0027b62:	8d 71 01             	lea    esi,[ecx+0x1]
c0027b65:	81 e6 fe 00 00 00    	and    esi,0xfe
c0027b6b:	75 27                	jne    c0027b94 <__extendsfdf2+0x4d>
c0027b6d:	81 e1 ff 00 00 00    	and    ecx,0xff
c0027b73:	75 18                	jne    c0027b8d <__extendsfdf2+0x46>
c0027b75:	85 d2                	test   edx,edx
c0027b77:	74 20                	je     c0027b99 <__extendsfdf2+0x52>
c0027b79:	41                   	inc    ecx
c0027b7a:	01 d2                	add    edx,edx
c0027b7c:	79 fb                	jns    c0027b79 <__extendsfdf2+0x32>
c0027b7e:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027b84:	29 c8                	sub    eax,ecx
c0027b86:	05 81 03 00 00       	add    eax,0x381
c0027b8b:	eb 0c                	jmp    c0027b99 <__extendsfdf2+0x52>
c0027b8d:	05 00 07 00 00       	add    eax,0x700
c0027b92:	eb 05                	jmp    c0027b99 <__extendsfdf2+0x52>
c0027b94:	05 80 03 00 00       	add    eax,0x380
c0027b99:	c1 e0 14             	shl    eax,0x14
c0027b9c:	89 c1                	mov    ecx,eax
c0027b9e:	89 d0                	mov    eax,edx
c0027ba0:	c1 e8 0b             	shr    eax,0xb
c0027ba3:	09 c1                	or     ecx,eax
c0027ba5:	c1 e2 15             	shl    edx,0x15
c0027ba8:	89 d0                	mov    eax,edx
c0027baa:	89 ca                	mov    edx,ecx
c0027bac:	5e                   	pop    esi
c0027bad:	5f                   	pop    edi
c0027bae:	5d                   	pop    ebp
c0027baf:	c3                   	ret    

c0027bb0 <fabs>:
c0027bb0:	83 ec 0c             	sub    esp,0xc
c0027bb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027bb7:	89 04 24             	mov    DWORD PTR [esp],eax
c0027bba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0027bbe:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027bc3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0027bc7:	dd 04 24             	fld    QWORD PTR [esp]
c0027bca:	83 c4 0c             	add    esp,0xc
c0027bcd:	c3                   	ret    
c0027bce:	66 90                	xchg   ax,ax

c0027bd0 <lrint>:
c0027bd0:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0027bd4:	83 ec 04             	sub    esp,0x4
c0027bd7:	db 1c 24             	fistp  DWORD PTR [esp]
c0027bda:	58                   	pop    eax
c0027bdb:	c3                   	ret    

c0027bdc <lrintf>:
c0027bdc:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0027be0:	83 ec 04             	sub    esp,0x4
c0027be3:	db 1c 24             	fistp  DWORD PTR [esp]
c0027be6:	58                   	pop    eax
c0027be7:	c3                   	ret    

Disassembly of section .init:

c0027be8 <_init>:
c0027be8:	55                   	push   ebp
c0027be9:	89 e5                	mov    ebp,esp
c0027beb:	e8 28 85 fd ff       	call   c0000118 <frame_dummy>
c0027bf0:	e8 63 e0 ff ff       	call   c0025c58 <__do_global_ctors_aux>
c0027bf5:	5d                   	pop    ebp
c0027bf6:	c3                   	ret    

Disassembly of section .fini:

c0027bf7 <_fini>:
c0027bf7:	55                   	push   ebp
c0027bf8:	89 e5                	mov    ebp,esp
c0027bfa:	e8 a9 84 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c0027bff:	5d                   	pop    ebp
c0027c00:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0027c02 <Computer::~Computer()>:
c0027c02:	83 ec 0c             	sub    esp,0xc
c0027c05:	ba 48 97 02 c0       	mov    edx,0xc0029748
c0027c0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027c0e:	89 10                	mov    DWORD PTR [eax],edx
c0027c10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027c14:	83 ec 0c             	sub    esp,0xc
c0027c17:	50                   	push   eax
c0027c18:	e8 cf bf fe ff       	call   c0013bec <Device::~Device()>
c0027c1d:	83 c4 10             	add    esp,0x10
c0027c20:	90                   	nop
c0027c21:	83 c4 0c             	add    esp,0xc
c0027c24:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0027c26 <Computer::~Computer()>:
c0027c26:	83 ec 0c             	sub    esp,0xc
c0027c29:	83 ec 0c             	sub    esp,0xc
c0027c2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027c30:	e8 cd ff ff ff       	call   c0027c02 <Computer::~Computer()>
c0027c35:	83 c4 10             	add    esp,0x10
c0027c38:	83 ec 08             	sub    esp,0x8
c0027c3b:	68 ec 01 00 00       	push   0x1ec
c0027c40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027c44:	e8 ca ab fe ff       	call   c0012813 <operator delete(void*, unsigned long)>
c0027c49:	83 c4 10             	add    esp,0x10
c0027c4c:	83 c4 0c             	add    esp,0xc
c0027c4f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0027c50 <idleCommon()>:
c0027c50:	83 ec 0c             	sub    esp,0xc
c0027c53:	e8 2c 56 ff ff       	call   c001d284 <lockScheduler()>
c0027c58:	e8 63 59 ff ff       	call   c001d5c0 <schedule()>
c0027c5d:	83 c4 0c             	add    esp,0xc
c0027c60:	e9 21 56 ff ff       	jmp    c001d286 <unlockScheduler()>

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0027c66 <LinkedList<UnixFile>::~LinkedList()>:
c0027c66:	90                   	nop
c0027c67:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0027c68 <LinkedList<UnixFile>::LinkedList()>:
c0027c68:	83 ec 0c             	sub    esp,0xc
c0027c6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027c6f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027c75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027c79:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0027c80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027c84:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027c8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027c8f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027c95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027c99:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0027ca0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ca4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027cab:	83 ec 0c             	sub    esp,0xc
c0027cae:	68 06 9a 02 c0       	push   0xc0029a06
c0027cb3:	e8 3b ac fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0027cb8:	83 c4 10             	add    esp,0x10
c0027cbb:	90                   	nop
c0027cbc:	83 c4 0c             	add    esp,0xc
c0027cbf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0027cc0 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0027cc0:	83 ec 0c             	sub    esp,0xc
c0027cc3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0027cc8:	75 10                	jne    c0027cda <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0027cca:	83 ec 0c             	sub    esp,0xc
c0027ccd:	68 20 9a 02 c0       	push   0xc0029a20
c0027cd2:	e8 76 1f ff ff       	call   c0019c4d <Krnl::panic(char const*)>
c0027cd7:	83 c4 10             	add    esp,0x10
c0027cda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027cde:	8b 00                	mov    eax,DWORD PTR [eax]
c0027ce0:	85 c0                	test   eax,eax
c0027ce2:	74 34                	je     c0027d18 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0027ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ce8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027ceb:	85 c0                	test   eax,eax
c0027ced:	74 29                	je     c0027d18 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0027cef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027cf3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027cf6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027cfa:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0027cfd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027d01:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027d05:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027d08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027d0c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027d0f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027d16:	eb 65                	jmp    c0027d7d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0027d18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027d1c:	8b 00                	mov    eax,DWORD PTR [eax]
c0027d1e:	85 c0                	test   eax,eax
c0027d20:	75 4b                	jne    c0027d6d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0027d22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027d26:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027d29:	85 c0                	test   eax,eax
c0027d2b:	75 40                	jne    c0027d6d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0027d2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027d31:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027d35:	89 10                	mov    DWORD PTR [eax],edx
c0027d37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027d3b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027d3f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027d42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027d46:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027d49:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027d50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027d54:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027d57:	85 c0                	test   eax,eax
c0027d59:	74 22                	je     c0027d7d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0027d5b:	83 ec 0c             	sub    esp,0xc
c0027d5e:	68 42 9a 02 c0       	push   0xc0029a42
c0027d63:	e8 e5 1e ff ff       	call   c0019c4d <Krnl::panic(char const*)>
c0027d68:	83 c4 10             	add    esp,0x10
c0027d6b:	eb 10                	jmp    c0027d7d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0027d6d:	83 ec 0c             	sub    esp,0xc
c0027d70:	68 4c 9a 02 c0       	push   0xc0029a4c
c0027d75:	e8 d3 1e ff ff       	call   c0019c4d <Krnl::panic(char const*)>
c0027d7a:	83 c4 10             	add    esp,0x10
c0027d7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027d81:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027d84:	8d 50 01             	lea    edx,[eax+0x1]
c0027d87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027d8b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0027d8e:	90                   	nop
c0027d8f:	83 c4 0c             	add    esp,0xc
c0027d92:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0027d94 <LinkedList<UnixFile>::getFirstElement()>:
c0027d94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027d98:	8b 00                	mov    eax,DWORD PTR [eax]
c0027d9a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0027d9c <LinkedList<UnixFile>::removeFirst()>:
c0027d9c:	83 ec 0c             	sub    esp,0xc
c0027d9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027da3:	8b 00                	mov    eax,DWORD PTR [eax]
c0027da5:	85 c0                	test   eax,eax
c0027da7:	75 12                	jne    c0027dbb <LinkedList<UnixFile>::removeFirst()+0x1f>
c0027da9:	83 ec 0c             	sub    esp,0xc
c0027dac:	68 58 9a 02 c0       	push   0xc0029a58
c0027db1:	e8 97 1e ff ff       	call   c0019c4d <Krnl::panic(char const*)>
c0027db6:	83 c4 10             	add    esp,0x10
c0027db9:	eb 7e                	jmp    c0027e39 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0027dbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027dbf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027dc2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027dc5:	85 c0                	test   eax,eax
c0027dc7:	74 10                	je     c0027dd9 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0027dc9:	83 ec 0c             	sub    esp,0xc
c0027dcc:	68 a3 9a 02 c0       	push   0xc0029aa3
c0027dd1:	e8 77 1e ff ff       	call   c0019c4d <Krnl::panic(char const*)>
c0027dd6:	83 c4 10             	add    esp,0x10
c0027dd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ddd:	8b 00                	mov    eax,DWORD PTR [eax]
c0027ddf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027de2:	85 c0                	test   eax,eax
c0027de4:	75 33                	jne    c0027e19 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0027de6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027dea:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027df0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027df4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0027dfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027dff:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027e02:	83 f8 01             	cmp    eax,0x1
c0027e05:	74 21                	je     c0027e28 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0027e07:	83 ec 0c             	sub    esp,0xc
c0027e0a:	68 7c 9a 02 c0       	push   0xc0029a7c
c0027e0f:	e8 39 1e ff ff       	call   c0019c4d <Krnl::panic(char const*)>
c0027e14:	83 c4 10             	add    esp,0x10
c0027e17:	eb 0f                	jmp    c0027e28 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0027e19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027e1d:	8b 00                	mov    eax,DWORD PTR [eax]
c0027e1f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0027e22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027e26:	89 10                	mov    DWORD PTR [eax],edx
c0027e28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027e2c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027e2f:	8d 50 ff             	lea    edx,[eax-0x1]
c0027e32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027e36:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0027e39:	83 c4 0c             	add    esp,0xc
c0027e3c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c0027e3e <LinkedList<UnixFile>::getNext(UnixFile*)>:
c0027e3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027e42:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027e45:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0027e46 <DriverlessDevice::~DriverlessDevice()>:
c0027e46:	ba 84 a1 02 c0       	mov    edx,0xc002a184
c0027e4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027e4f:	89 10                	mov    DWORD PTR [eax],edx
c0027e51:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027e55:	50                   	push   eax
c0027e56:	e8 91 bd fe ff       	call   c0013bec <Device::~Device()>
c0027e5b:	83 c4 04             	add    esp,0x4
c0027e5e:	90                   	nop
c0027e5f:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0027e60 <DriverlessDevice::~DriverlessDevice()>:
c0027e60:	83 ec 0c             	sub    esp,0xc
c0027e63:	83 ec 0c             	sub    esp,0xc
c0027e66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027e6a:	e8 d7 ff ff ff       	call   c0027e46 <DriverlessDevice::~DriverlessDevice()>
c0027e6f:	83 c4 10             	add    esp,0x10
c0027e72:	83 ec 08             	sub    esp,0x8
c0027e75:	68 58 01 00 00       	push   0x158
c0027e7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027e7e:	e8 90 a9 fe ff       	call   c0012813 <operator delete(void*, unsigned long)>
c0027e83:	83 c4 10             	add    esp,0x10
c0027e86:	83 c4 0c             	add    esp,0xc
c0027e89:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0027e8a <LinkedList<Device>::addElement(Device*)>:
c0027e8a:	83 ec 0c             	sub    esp,0xc
c0027e8d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0027e92:	75 10                	jne    c0027ea4 <LinkedList<Device>::addElement(Device*)+0x1a>
c0027e94:	83 ec 0c             	sub    esp,0xc
c0027e97:	68 20 9a 02 c0       	push   0xc0029a20
c0027e9c:	e8 ac 1d ff ff       	call   c0019c4d <Krnl::panic(char const*)>
c0027ea1:	83 c4 10             	add    esp,0x10
c0027ea4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ea8:	8b 00                	mov    eax,DWORD PTR [eax]
c0027eaa:	85 c0                	test   eax,eax
c0027eac:	74 3a                	je     c0027ee8 <LinkedList<Device>::addElement(Device*)+0x5e>
c0027eae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027eb2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027eb5:	85 c0                	test   eax,eax
c0027eb7:	74 2f                	je     c0027ee8 <LinkedList<Device>::addElement(Device*)+0x5e>
c0027eb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ebd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027ec0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027ec4:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0027eca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ece:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027ed2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027ed5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ed9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027edc:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0027ee6:	eb 68                	jmp    c0027f50 <LinkedList<Device>::addElement(Device*)+0xc6>
c0027ee8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027eec:	8b 00                	mov    eax,DWORD PTR [eax]
c0027eee:	85 c0                	test   eax,eax
c0027ef0:	75 4e                	jne    c0027f40 <LinkedList<Device>::addElement(Device*)+0xb6>
c0027ef2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ef6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027ef9:	85 c0                	test   eax,eax
c0027efb:	75 43                	jne    c0027f40 <LinkedList<Device>::addElement(Device*)+0xb6>
c0027efd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027f01:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027f05:	89 10                	mov    DWORD PTR [eax],edx
c0027f07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027f0b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027f0f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027f12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027f16:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027f19:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0027f23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027f27:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027f2a:	85 c0                	test   eax,eax
c0027f2c:	74 22                	je     c0027f50 <LinkedList<Device>::addElement(Device*)+0xc6>
c0027f2e:	83 ec 0c             	sub    esp,0xc
c0027f31:	68 42 9a 02 c0       	push   0xc0029a42
c0027f36:	e8 12 1d ff ff       	call   c0019c4d <Krnl::panic(char const*)>
c0027f3b:	83 c4 10             	add    esp,0x10
c0027f3e:	eb 10                	jmp    c0027f50 <LinkedList<Device>::addElement(Device*)+0xc6>
c0027f40:	83 ec 0c             	sub    esp,0xc
c0027f43:	68 4c 9a 02 c0       	push   0xc0029a4c
c0027f48:	e8 00 1d ff ff       	call   c0019c4d <Krnl::panic(char const*)>
c0027f4d:	83 c4 10             	add    esp,0x10
c0027f50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027f54:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027f57:	8d 50 01             	lea    edx,[eax+0x1]
c0027f5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027f5e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0027f61:	90                   	nop
c0027f62:	83 c4 0c             	add    esp,0xc
c0027f65:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0027f66 <LinkedList<Device>::LinkedList()>:
c0027f66:	83 ec 0c             	sub    esp,0xc
c0027f69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027f6d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027f73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027f77:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0027f7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027f82:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027f89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027f8d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027f93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027f97:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0027f9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027fa2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027fa9:	83 ec 0c             	sub    esp,0xc
c0027fac:	68 06 9a 02 c0       	push   0xc0029a06
c0027fb1:	e8 3d a9 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0027fb6:	83 c4 10             	add    esp,0x10
c0027fb9:	90                   	nop
c0027fba:	83 c4 0c             	add    esp,0xc
c0027fbd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0027fbe <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0027fbe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027fc2:	8b 00                	mov    eax,DWORD PTR [eax]
c0027fc4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0027fc6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0027fc6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027fca:	8b 00                	mov    eax,DWORD PTR [eax]
c0027fcc:	85 c0                	test   eax,eax
c0027fce:	75 0e                	jne    c0027fde <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0027fd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027fd4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027fd7:	85 c0                	test   eax,eax
c0027fd9:	75 03                	jne    c0027fde <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0027fdb:	b0 01                	mov    al,0x1
c0027fdd:	c3                   	ret    
c0027fde:	b0 00                	mov    al,0x0
c0027fe0:	90                   	nop
c0027fe1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0027fe2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0027fe2:	83 ec 0c             	sub    esp,0xc
c0027fe5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027fe9:	8b 00                	mov    eax,DWORD PTR [eax]
c0027feb:	85 c0                	test   eax,eax
c0027fed:	75 15                	jne    c0028004 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c0027fef:	83 ec 0c             	sub    esp,0xc
c0027ff2:	68 58 9a 02 c0       	push   0xc0029a58
c0027ff7:	e8 51 1c ff ff       	call   c0019c4d <Krnl::panic(char const*)>
c0027ffc:	83 c4 10             	add    esp,0x10
c0027fff:	e9 88 00 00 00       	jmp    c002808c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0028004:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028008:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002800b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002800e:	85 c0                	test   eax,eax
c0028010:	0f 95 c0             	setne  al
c0028013:	84 c0                	test   al,al
c0028015:	74 10                	je     c0028027 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0028017:	83 ec 0c             	sub    esp,0xc
c002801a:	68 a3 9a 02 c0       	push   0xc0029aa3
c002801f:	e8 29 1c ff ff       	call   c0019c4d <Krnl::panic(char const*)>
c0028024:	83 c4 10             	add    esp,0x10
c0028027:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002802b:	8b 00                	mov    eax,DWORD PTR [eax]
c002802d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028030:	85 c0                	test   eax,eax
c0028032:	0f 94 c0             	sete   al
c0028035:	84 c0                	test   al,al
c0028037:	74 33                	je     c002806c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0028039:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002803d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028043:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028047:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002804e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028052:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028055:	83 f8 01             	cmp    eax,0x1
c0028058:	74 21                	je     c002807b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002805a:	83 ec 0c             	sub    esp,0xc
c002805d:	68 7c 9a 02 c0       	push   0xc0029a7c
c0028062:	e8 e6 1b ff ff       	call   c0019c4d <Krnl::panic(char const*)>
c0028067:	83 c4 10             	add    esp,0x10
c002806a:	eb 0f                	jmp    c002807b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002806c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028070:	8b 00                	mov    eax,DWORD PTR [eax]
c0028072:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0028075:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028079:	89 10                	mov    DWORD PTR [eax],edx
c002807b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002807f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028082:	8d 50 ff             	lea    edx,[eax-0x1]
c0028085:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028089:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002808c:	83 c4 0c             	add    esp,0xc
c002808f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0028090 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0028090:	83 ec 0c             	sub    esp,0xc
c0028093:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028098:	75 10                	jne    c00280aa <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c002809a:	83 ec 0c             	sub    esp,0xc
c002809d:	68 20 9a 02 c0       	push   0xc0029a20
c00280a2:	e8 a6 1b ff ff       	call   c0019c4d <Krnl::panic(char const*)>
c00280a7:	83 c4 10             	add    esp,0x10
c00280aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00280ae:	8b 00                	mov    eax,DWORD PTR [eax]
c00280b0:	85 c0                	test   eax,eax
c00280b2:	74 34                	je     c00280e8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c00280b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00280b8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00280bb:	85 c0                	test   eax,eax
c00280bd:	74 29                	je     c00280e8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c00280bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00280c3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00280c6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00280ca:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00280cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00280d1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00280d5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00280d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00280dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00280df:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00280e6:	eb 65                	jmp    c002814d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00280e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00280ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00280ee:	85 c0                	test   eax,eax
c00280f0:	75 4b                	jne    c002813d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00280f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00280f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00280f9:	85 c0                	test   eax,eax
c00280fb:	75 40                	jne    c002813d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00280fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028101:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028105:	89 10                	mov    DWORD PTR [eax],edx
c0028107:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002810b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002810f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028112:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028116:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028119:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028120:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028124:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028127:	85 c0                	test   eax,eax
c0028129:	74 22                	je     c002814d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c002812b:	83 ec 0c             	sub    esp,0xc
c002812e:	68 42 9a 02 c0       	push   0xc0029a42
c0028133:	e8 15 1b ff ff       	call   c0019c4d <Krnl::panic(char const*)>
c0028138:	83 c4 10             	add    esp,0x10
c002813b:	eb 10                	jmp    c002814d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c002813d:	83 ec 0c             	sub    esp,0xc
c0028140:	68 4c 9a 02 c0       	push   0xc0029a4c
c0028145:	e8 03 1b ff ff       	call   c0019c4d <Krnl::panic(char const*)>
c002814a:	83 c4 10             	add    esp,0x10
c002814d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028151:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028154:	8d 50 01             	lea    edx,[eax+0x1]
c0028157:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002815b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002815e:	90                   	nop
c002815f:	83 c4 0c             	add    esp,0xc
c0028162:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0028164 <ACPI::~ACPI()>:
c0028164:	83 ec 0c             	sub    esp,0xc
c0028167:	ba b0 aa 02 c0       	mov    edx,0xc002aab0
c002816c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028170:	89 10                	mov    DWORD PTR [eax],edx
c0028172:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028176:	83 ec 0c             	sub    esp,0xc
c0028179:	50                   	push   eax
c002817a:	e8 6d ba fe ff       	call   c0013bec <Device::~Device()>
c002817f:	83 c4 10             	add    esp,0x10
c0028182:	90                   	nop
c0028183:	83 c4 0c             	add    esp,0xc
c0028186:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028188 <ACPI::~ACPI()>:
c0028188:	83 ec 0c             	sub    esp,0xc
c002818b:	83 ec 0c             	sub    esp,0xc
c002818e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028192:	e8 cd ff ff ff       	call   c0028164 <ACPI::~ACPI()>
c0028197:	83 c4 10             	add    esp,0x10
c002819a:	83 ec 08             	sub    esp,0x8
c002819d:	68 68 12 00 00       	push   0x1268
c00281a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00281a6:	e8 68 a6 fe ff       	call   c0012813 <operator delete(void*, unsigned long)>
c00281ab:	83 c4 10             	add    esp,0x10
c00281ae:	83 c4 0c             	add    esp,0xc
c00281b1:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c00281b2 <CPU::~CPU()>:
c00281b2:	83 ec 0c             	sub    esp,0xc
c00281b5:	ba a0 ae 02 c0       	mov    edx,0xc002aea0
c00281ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00281be:	89 10                	mov    DWORD PTR [eax],edx
c00281c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00281c4:	83 ec 0c             	sub    esp,0xc
c00281c7:	50                   	push   eax
c00281c8:	e8 1f ba fe ff       	call   c0013bec <Device::~Device()>
c00281cd:	83 c4 10             	add    esp,0x10
c00281d0:	90                   	nop
c00281d1:	83 c4 0c             	add    esp,0xc
c00281d4:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c00281d6 <CPU::~CPU()>:
c00281d6:	83 ec 0c             	sub    esp,0xc
c00281d9:	83 ec 0c             	sub    esp,0xc
c00281dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00281e0:	e8 cd ff ff ff       	call   c00281b2 <CPU::~CPU()>
c00281e5:	83 c4 10             	add    esp,0x10
c00281e8:	83 ec 08             	sub    esp,0x8
c00281eb:	68 98 11 00 00       	push   0x1198
c00281f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00281f4:	e8 1a a6 fe ff       	call   c0012813 <operator delete(void*, unsigned long)>
c00281f9:	83 c4 10             	add    esp,0x10
c00281fc:	83 c4 0c             	add    esp,0xc
c00281ff:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0028200 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0028200:	90                   	nop
c0028201:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0028202 <ThreadControlBlock::ThreadControlBlock()>:
c0028202:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028206:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002820d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028211:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0028218:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002821c:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0028223:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028227:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c002822e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028232:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0028236:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002823a:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c002823e:	90                   	nop
c002823f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0028240 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0028240:	83 ec 0c             	sub    esp,0xc
c0028243:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028247:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002824d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028251:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028258:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002825c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028263:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028267:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002826d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028271:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028278:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002827c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028283:	83 ec 0c             	sub    esp,0xc
c0028286:	68 06 9a 02 c0       	push   0xc0029a06
c002828b:	e8 63 a6 fe ff       	call   c00128f3 <Dbg::kprintf(char const*, ...)>
c0028290:	83 c4 10             	add    esp,0x10
c0028293:	90                   	nop
c0028294:	83 c4 0c             	add    esp,0xc
c0028297:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0028298 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0028298:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002829c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002829f:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c00282a0 <Vm::_FPUState::_FPUState()>:
c00282a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00282a4:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c00282ab:	90                   	nop
c00282ac:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c00282ae <PCI::~PCI()>:
c00282ae:	83 ec 0c             	sub    esp,0xc
c00282b1:	ba f0 bd 02 c0       	mov    edx,0xc002bdf0
c00282b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282ba:	89 10                	mov    DWORD PTR [eax],edx
c00282bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282c0:	83 ec 0c             	sub    esp,0xc
c00282c3:	50                   	push   eax
c00282c4:	e8 fb b2 fe ff       	call   c00135c4 <Bus::~Bus()>
c00282c9:	83 c4 10             	add    esp,0x10
c00282cc:	90                   	nop
c00282cd:	83 c4 0c             	add    esp,0xc
c00282d0:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c00282d2 <PCI::~PCI()>:
c00282d2:	83 ec 0c             	sub    esp,0xc
c00282d5:	83 ec 0c             	sub    esp,0xc
c00282d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00282dc:	e8 cd ff ff ff       	call   c00282ae <PCI::~PCI()>
c00282e1:	83 c4 10             	add    esp,0x10
c00282e4:	83 ec 08             	sub    esp,0x8
c00282e7:	68 58 01 00 00       	push   0x158
c00282ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00282f0:	e8 1e a5 fe ff       	call   c0012813 <operator delete(void*, unsigned long)>
c00282f5:	83 c4 10             	add    esp,0x10
c00282f8:	83 c4 0c             	add    esp,0xc
c00282fb:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c00282fc <IDE::~IDE()>:
c00282fc:	83 ec 0c             	sub    esp,0xc
c00282ff:	ba 54 c0 02 c0       	mov    edx,0xc002c054
c0028304:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028308:	89 10                	mov    DWORD PTR [eax],edx
c002830a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002830e:	83 ec 0c             	sub    esp,0xc
c0028311:	50                   	push   eax
c0028312:	e8 c5 bd fe ff       	call   c00140dc <HardDiskController::~HardDiskController()>
c0028317:	83 c4 10             	add    esp,0x10
c002831a:	90                   	nop
c002831b:	83 c4 0c             	add    esp,0xc
c002831e:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0028320 <IDE::~IDE()>:
c0028320:	83 ec 0c             	sub    esp,0xc
c0028323:	83 ec 0c             	sub    esp,0xc
c0028326:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002832a:	e8 cd ff ff ff       	call   c00282fc <IDE::~IDE()>
c002832f:	83 c4 10             	add    esp,0x10
c0028332:	83 ec 08             	sub    esp,0x8
c0028335:	68 70 02 00 00       	push   0x270
c002833a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002833e:	e8 d0 a4 fe ff       	call   c0012813 <operator delete(void*, unsigned long)>
c0028343:	83 c4 10             	add    esp,0x10
c0028346:	83 c4 0c             	add    esp,0xc
c0028349:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c002834a <SATABus::~SATABus()>:
c002834a:	83 ec 0c             	sub    esp,0xc
c002834d:	ba 34 c1 02 c0       	mov    edx,0xc002c134
c0028352:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028356:	89 10                	mov    DWORD PTR [eax],edx
c0028358:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002835c:	83 ec 0c             	sub    esp,0xc
c002835f:	50                   	push   eax
c0028360:	e8 77 bd fe ff       	call   c00140dc <HardDiskController::~HardDiskController()>
c0028365:	83 c4 10             	add    esp,0x10
c0028368:	90                   	nop
c0028369:	83 c4 0c             	add    esp,0xc
c002836c:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c002836e <SATABus::~SATABus()>:
c002836e:	83 ec 0c             	sub    esp,0xc
c0028371:	83 ec 0c             	sub    esp,0xc
c0028374:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028378:	e8 cd ff ff ff       	call   c002834a <SATABus::~SATABus()>
c002837d:	83 c4 10             	add    esp,0x10
c0028380:	83 ec 08             	sub    esp,0x8
c0028383:	68 64 01 00 00       	push   0x164
c0028388:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002838c:	e8 82 a4 fe ff       	call   c0012813 <operator delete(void*, unsigned long)>
c0028391:	83 c4 10             	add    esp,0x10
c0028394:	83 c4 0c             	add    esp,0xc
c0028397:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0028398 <ATA::~ATA()>:
c0028398:	83 ec 0c             	sub    esp,0xc
c002839b:	ba 74 c1 02 c0       	mov    edx,0xc002c174
c00283a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283a4:	89 10                	mov    DWORD PTR [eax],edx
c00283a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283aa:	83 ec 0c             	sub    esp,0xc
c00283ad:	50                   	push   eax
c00283ae:	e8 1b be fe ff       	call   c00141ce <PhysicalDisk::~PhysicalDisk()>
c00283b3:	83 c4 10             	add    esp,0x10
c00283b6:	90                   	nop
c00283b7:	83 c4 0c             	add    esp,0xc
c00283ba:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c00283bc <ATA::~ATA()>:
c00283bc:	83 ec 0c             	sub    esp,0xc
c00283bf:	83 ec 0c             	sub    esp,0xc
c00283c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00283c6:	e8 cd ff ff ff       	call   c0028398 <ATA::~ATA()>
c00283cb:	83 c4 10             	add    esp,0x10
c00283ce:	83 ec 08             	sub    esp,0x8
c00283d1:	68 7c 01 00 00       	push   0x17c
c00283d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00283da:	e8 34 a4 fe ff       	call   c0012813 <operator delete(void*, unsigned long)>
c00283df:	83 c4 10             	add    esp,0x10
c00283e2:	83 c4 0c             	add    esp,0xc
c00283e5:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c00283e6 <ATAPI::~ATAPI()>:
c00283e6:	83 ec 0c             	sub    esp,0xc
c00283e9:	ba ac c1 02 c0       	mov    edx,0xc002c1ac
c00283ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283f2:	89 10                	mov    DWORD PTR [eax],edx
c00283f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283f8:	83 ec 0c             	sub    esp,0xc
c00283fb:	50                   	push   eax
c00283fc:	e8 cd bd fe ff       	call   c00141ce <PhysicalDisk::~PhysicalDisk()>
c0028401:	83 c4 10             	add    esp,0x10
c0028404:	90                   	nop
c0028405:	83 c4 0c             	add    esp,0xc
c0028408:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c002840a <ATAPI::~ATAPI()>:
c002840a:	83 ec 0c             	sub    esp,0xc
c002840d:	83 ec 0c             	sub    esp,0xc
c0028410:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028414:	e8 cd ff ff ff       	call   c00283e6 <ATAPI::~ATAPI()>
c0028419:	83 c4 10             	add    esp,0x10
c002841c:	83 ec 08             	sub    esp,0x8
c002841f:	68 80 01 00 00       	push   0x180
c0028424:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028428:	e8 e6 a3 fe ff       	call   c0012813 <operator delete(void*, unsigned long)>
c002842d:	83 c4 10             	add    esp,0x10
c0028430:	83 c4 0c             	add    esp,0xc
c0028433:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0028434 <SATA::~SATA()>:
c0028434:	83 ec 0c             	sub    esp,0xc
c0028437:	ba b8 c2 02 c0       	mov    edx,0xc002c2b8
c002843c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028440:	89 10                	mov    DWORD PTR [eax],edx
c0028442:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028446:	83 ec 0c             	sub    esp,0xc
c0028449:	50                   	push   eax
c002844a:	e8 7f bd fe ff       	call   c00141ce <PhysicalDisk::~PhysicalDisk()>
c002844f:	83 c4 10             	add    esp,0x10
c0028452:	90                   	nop
c0028453:	83 c4 0c             	add    esp,0xc
c0028456:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0028458 <SATA::~SATA()>:
c0028458:	83 ec 0c             	sub    esp,0xc
c002845b:	83 ec 0c             	sub    esp,0xc
c002845e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028462:	e8 cd ff ff ff       	call   c0028434 <SATA::~SATA()>
c0028467:	83 c4 10             	add    esp,0x10
c002846a:	83 ec 08             	sub    esp,0x8
c002846d:	68 7c 01 00 00       	push   0x17c
c0028472:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028476:	e8 98 a3 fe ff       	call   c0012813 <operator delete(void*, unsigned long)>
c002847b:	83 c4 10             	add    esp,0x10
c002847e:	83 c4 0c             	add    esp,0xc
c0028481:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0028482 <SATAPI::~SATAPI()>:
c0028482:	83 ec 0c             	sub    esp,0xc
c0028485:	ba 2c c4 02 c0       	mov    edx,0xc002c42c
c002848a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002848e:	89 10                	mov    DWORD PTR [eax],edx
c0028490:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028494:	83 ec 0c             	sub    esp,0xc
c0028497:	50                   	push   eax
c0028498:	e8 31 bd fe ff       	call   c00141ce <PhysicalDisk::~PhysicalDisk()>
c002849d:	83 c4 10             	add    esp,0x10
c00284a0:	90                   	nop
c00284a1:	83 c4 0c             	add    esp,0xc
c00284a4:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c00284a6 <SATAPI::~SATAPI()>:
c00284a6:	83 ec 0c             	sub    esp,0xc
c00284a9:	83 ec 0c             	sub    esp,0xc
c00284ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00284b0:	e8 cd ff ff ff       	call   c0028482 <SATAPI::~SATAPI()>
c00284b5:	83 c4 10             	add    esp,0x10
c00284b8:	83 ec 08             	sub    esp,0x8
c00284bb:	68 80 01 00 00       	push   0x180
c00284c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00284c4:	e8 4a a3 fe ff       	call   c0012813 <operator delete(void*, unsigned long)>
c00284c9:	83 c4 10             	add    esp,0x10
c00284cc:	83 c4 0c             	add    esp,0xc
c00284cf:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c00284d0 <AVX::~AVX()>:
c00284d0:	83 ec 0c             	sub    esp,0xc
c00284d3:	ba 6c c4 02 c0       	mov    edx,0xc002c46c
c00284d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284dc:	89 10                	mov    DWORD PTR [eax],edx
c00284de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284e2:	83 ec 0c             	sub    esp,0xc
c00284e5:	50                   	push   eax
c00284e6:	e8 67 bd fe ff       	call   c0014252 <FPU::~FPU()>
c00284eb:	83 c4 10             	add    esp,0x10
c00284ee:	90                   	nop
c00284ef:	83 c4 0c             	add    esp,0xc
c00284f2:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c00284f4 <AVX::~AVX()>:
c00284f4:	83 ec 0c             	sub    esp,0xc
c00284f7:	83 ec 0c             	sub    esp,0xc
c00284fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00284fe:	e8 cd ff ff ff       	call   c00284d0 <AVX::~AVX()>
c0028503:	83 c4 10             	add    esp,0x10
c0028506:	83 ec 08             	sub    esp,0x8
c0028509:	68 58 01 00 00       	push   0x158
c002850e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028512:	e8 fc a2 fe ff       	call   c0012813 <operator delete(void*, unsigned long)>
c0028517:	83 c4 10             	add    esp,0x10
c002851a:	83 c4 0c             	add    esp,0xc
c002851d:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c002851e <MMX::~MMX()>:
c002851e:	83 ec 0c             	sub    esp,0xc
c0028521:	ba ac c4 02 c0       	mov    edx,0xc002c4ac
c0028526:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002852a:	89 10                	mov    DWORD PTR [eax],edx
c002852c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028530:	83 ec 0c             	sub    esp,0xc
c0028533:	50                   	push   eax
c0028534:	e8 19 bd fe ff       	call   c0014252 <FPU::~FPU()>
c0028539:	83 c4 10             	add    esp,0x10
c002853c:	90                   	nop
c002853d:	83 c4 0c             	add    esp,0xc
c0028540:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0028542 <MMX::~MMX()>:
c0028542:	83 ec 0c             	sub    esp,0xc
c0028545:	83 ec 0c             	sub    esp,0xc
c0028548:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002854c:	e8 cd ff ff ff       	call   c002851e <MMX::~MMX()>
c0028551:	83 c4 10             	add    esp,0x10
c0028554:	83 ec 08             	sub    esp,0x8
c0028557:	68 58 01 00 00       	push   0x158
c002855c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028560:	e8 ae a2 fe ff       	call   c0012813 <operator delete(void*, unsigned long)>
c0028565:	83 c4 10             	add    esp,0x10
c0028568:	83 c4 0c             	add    esp,0xc
c002856b:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c002856c <SSE::~SSE()>:
c002856c:	83 ec 0c             	sub    esp,0xc
c002856f:	ba ec c4 02 c0       	mov    edx,0xc002c4ec
c0028574:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028578:	89 10                	mov    DWORD PTR [eax],edx
c002857a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002857e:	83 ec 0c             	sub    esp,0xc
c0028581:	50                   	push   eax
c0028582:	e8 cb bc fe ff       	call   c0014252 <FPU::~FPU()>
c0028587:	83 c4 10             	add    esp,0x10
c002858a:	90                   	nop
c002858b:	83 c4 0c             	add    esp,0xc
c002858e:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0028590 <SSE::~SSE()>:
c0028590:	83 ec 0c             	sub    esp,0xc
c0028593:	83 ec 0c             	sub    esp,0xc
c0028596:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002859a:	e8 cd ff ff ff       	call   c002856c <SSE::~SSE()>
c002859f:	83 c4 10             	add    esp,0x10
c00285a2:	83 ec 08             	sub    esp,0x8
c00285a5:	68 58 01 00 00       	push   0x158
c00285aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00285ae:	e8 60 a2 fe ff       	call   c0012813 <operator delete(void*, unsigned long)>
c00285b3:	83 c4 10             	add    esp,0x10
c00285b6:	83 c4 0c             	add    esp,0xc
c00285b9:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c00285ba <x87::~x87()>:
c00285ba:	83 ec 0c             	sub    esp,0xc
c00285bd:	ba 2c c5 02 c0       	mov    edx,0xc002c52c
c00285c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285c6:	89 10                	mov    DWORD PTR [eax],edx
c00285c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285cc:	83 ec 0c             	sub    esp,0xc
c00285cf:	50                   	push   eax
c00285d0:	e8 7d bc fe ff       	call   c0014252 <FPU::~FPU()>
c00285d5:	83 c4 10             	add    esp,0x10
c00285d8:	90                   	nop
c00285d9:	83 c4 0c             	add    esp,0xc
c00285dc:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c00285de <x87::~x87()>:
c00285de:	83 ec 0c             	sub    esp,0xc
c00285e1:	83 ec 0c             	sub    esp,0xc
c00285e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00285e8:	e8 cd ff ff ff       	call   c00285ba <x87::~x87()>
c00285ed:	83 c4 10             	add    esp,0x10
c00285f0:	83 ec 08             	sub    esp,0x8
c00285f3:	68 58 01 00 00       	push   0x158
c00285f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00285fc:	e8 12 a2 fe ff       	call   c0012813 <operator delete(void*, unsigned long)>
c0028601:	83 c4 10             	add    esp,0x10
c0028604:	83 c4 0c             	add    esp,0xc
c0028607:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0028608 <IOAPIC::~IOAPIC()>:
c0028608:	83 ec 0c             	sub    esp,0xc
c002860b:	ba 84 c6 02 c0       	mov    edx,0xc002c684
c0028610:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028614:	89 10                	mov    DWORD PTR [eax],edx
c0028616:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002861a:	83 ec 0c             	sub    esp,0xc
c002861d:	50                   	push   eax
c002861e:	e8 c9 b5 fe ff       	call   c0013bec <Device::~Device()>
c0028623:	83 c4 10             	add    esp,0x10
c0028626:	90                   	nop
c0028627:	83 c4 0c             	add    esp,0xc
c002862a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002862c <IOAPIC::~IOAPIC()>:
c002862c:	83 ec 0c             	sub    esp,0xc
c002862f:	83 ec 0c             	sub    esp,0xc
c0028632:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028636:	e8 cd ff ff ff       	call   c0028608 <IOAPIC::~IOAPIC()>
c002863b:	83 c4 10             	add    esp,0x10
c002863e:	83 ec 08             	sub    esp,0x8
c0028641:	68 68 01 00 00       	push   0x168
c0028646:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002864a:	e8 c4 a1 fe ff       	call   c0012813 <operator delete(void*, unsigned long)>
c002864f:	83 c4 10             	add    esp,0x10
c0028652:	83 c4 0c             	add    esp,0xc
c0028655:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0028656 <APIC::~APIC()>:
c0028656:	83 ec 0c             	sub    esp,0xc
c0028659:	ba 3c c6 02 c0       	mov    edx,0xc002c63c
c002865e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028662:	89 10                	mov    DWORD PTR [eax],edx
c0028664:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028668:	83 ec 0c             	sub    esp,0xc
c002866b:	50                   	push   eax
c002866c:	e8 ab c0 fe ff       	call   c001471c <InterruptController::~InterruptController()>
c0028671:	83 c4 10             	add    esp,0x10
c0028674:	90                   	nop
c0028675:	83 c4 0c             	add    esp,0xc
c0028678:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c002867a <APIC::~APIC()>:
c002867a:	83 ec 0c             	sub    esp,0xc
c002867d:	83 ec 0c             	sub    esp,0xc
c0028680:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028684:	e8 cd ff ff ff       	call   c0028656 <APIC::~APIC()>
c0028689:	83 c4 10             	add    esp,0x10
c002868c:	83 ec 08             	sub    esp,0x8
c002868f:	68 58 21 00 00       	push   0x2158
c0028694:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028698:	e8 76 a1 fe ff       	call   c0012813 <operator delete(void*, unsigned long)>
c002869d:	83 c4 10             	add    esp,0x10
c00286a0:	83 c4 0c             	add    esp,0xc
c00286a3:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c00286a4 <PIC::~PIC()>:
c00286a4:	83 ec 0c             	sub    esp,0xc
c00286a7:	ba d4 c6 02 c0       	mov    edx,0xc002c6d4
c00286ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286b0:	89 10                	mov    DWORD PTR [eax],edx
c00286b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286b6:	83 ec 0c             	sub    esp,0xc
c00286b9:	50                   	push   eax
c00286ba:	e8 5d c0 fe ff       	call   c001471c <InterruptController::~InterruptController()>
c00286bf:	83 c4 10             	add    esp,0x10
c00286c2:	90                   	nop
c00286c3:	83 c4 0c             	add    esp,0xc
c00286c6:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c00286c8 <PIC::~PIC()>:
c00286c8:	83 ec 0c             	sub    esp,0xc
c00286cb:	83 ec 0c             	sub    esp,0xc
c00286ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00286d2:	e8 cd ff ff ff       	call   c00286a4 <PIC::~PIC()>
c00286d7:	83 c4 10             	add    esp,0x10
c00286da:	83 ec 08             	sub    esp,0x8
c00286dd:	68 58 21 00 00       	push   0x2158
c00286e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00286e6:	e8 28 a1 fe ff       	call   c0012813 <operator delete(void*, unsigned long)>
c00286eb:	83 c4 10             	add    esp,0x10
c00286ee:	83 c4 0c             	add    esp,0xc
c00286f1:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c00286f2 <APICTimer::~APICTimer()>:
c00286f2:	83 ec 0c             	sub    esp,0xc
c00286f5:	ba 28 c7 02 c0       	mov    edx,0xc002c728
c00286fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286fe:	89 10                	mov    DWORD PTR [eax],edx
c0028700:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028704:	83 ec 0c             	sub    esp,0xc
c0028707:	50                   	push   eax
c0028708:	e8 c7 de fe ff       	call   c00165d4 <Timer::~Timer()>
c002870d:	83 c4 10             	add    esp,0x10
c0028710:	90                   	nop
c0028711:	83 c4 0c             	add    esp,0xc
c0028714:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0028716 <APICTimer::~APICTimer()>:
c0028716:	83 ec 0c             	sub    esp,0xc
c0028719:	83 ec 0c             	sub    esp,0xc
c002871c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028720:	e8 cd ff ff ff       	call   c00286f2 <APICTimer::~APICTimer()>
c0028725:	83 c4 10             	add    esp,0x10
c0028728:	83 ec 08             	sub    esp,0x8
c002872b:	68 60 01 00 00       	push   0x160
c0028730:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028734:	e8 da a0 fe ff       	call   c0012813 <operator delete(void*, unsigned long)>
c0028739:	83 c4 10             	add    esp,0x10
c002873c:	83 c4 0c             	add    esp,0xc
c002873f:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0028740 <PIT::~PIT()>:
c0028740:	83 ec 0c             	sub    esp,0xc
c0028743:	ba 78 c7 02 c0       	mov    edx,0xc002c778
c0028748:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002874c:	89 10                	mov    DWORD PTR [eax],edx
c002874e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028752:	83 ec 0c             	sub    esp,0xc
c0028755:	50                   	push   eax
c0028756:	e8 79 de fe ff       	call   c00165d4 <Timer::~Timer()>
c002875b:	83 c4 10             	add    esp,0x10
c002875e:	90                   	nop
c002875f:	83 c4 0c             	add    esp,0xc
c0028762:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0028764 <PIT::~PIT()>:
c0028764:	83 ec 0c             	sub    esp,0xc
c0028767:	83 ec 0c             	sub    esp,0xc
c002876a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002876e:	e8 cd ff ff ff       	call   c0028740 <PIT::~PIT()>
c0028773:	83 c4 10             	add    esp,0x10
c0028776:	83 ec 08             	sub    esp,0x8
c0028779:	68 5c 01 00 00       	push   0x15c
c002877e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028782:	e8 8c a0 fe ff       	call   c0012813 <operator delete(void*, unsigned long)>
c0028787:	83 c4 10             	add    esp,0x10
c002878a:	83 c4 0c             	add    esp,0xc
c002878d:	c3                   	ret    
