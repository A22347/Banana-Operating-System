
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 f0 7a 00 00       	call   c0007b10 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 64 42 02 c0       	mov    eax,0xc0024264
c0000025:	3d 64 42 02 c0       	cmp    eax,0xc0024264
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 64 42 02 c0       	push   0xc0024264
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 64 42 02 c0       	mov    eax,0xc0024264
c0000051:	2d 64 42 02 c0       	sub    eax,0xc0024264
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 64 42 02 c0       	push   0xc0024264
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 60 02 c0 00 	cmp    BYTE PTR ds:0xc00260c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 8c 04 02 c0       	mov    ebx,0xc002048c
c0000097:	81 eb 88 04 02 c0    	sub    ebx,0xc0020488
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 88 04 02 c0       	mov    esi,0xc0020488
c00000a6:	a1 c4 60 02 c0       	mov    eax,ds:0xc00260c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 60 02 c0       	mov    ds:0xc00260c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 60 02 c0       	mov    eax,ds:0xc00260c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 64 42 02 c0       	push   0xc0024264
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 60 02 c0 01 	mov    BYTE PTR ds:0xc00260c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 60 02 c0       	push   0xc00260c8
c0000108:	68 64 42 02 c0       	push   0xc0024264
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 d7 56 01 00       	call   c0015984 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 08 a4 00 00       	call   c000a6cd <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 b5 56 01 00       	call   c0015984 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 c2 5b 01 00       	call   c0015eb0 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 81 62 01 00       	call   c0016578 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 6e 02 c0 	lgdtd  ds:0xc0026ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 1b 13 01 00       	jmp    c001169a <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	31 c0                	xor    eax,eax
c00003b5:	5b                   	pop    ebx
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 0c             	cmp    esi,0xc
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	83 eb 01             	sub    ebx,0x1
c0000499:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004d8:	83 c3 01             	add    ebx,0x1
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000504:	89 f7                	mov    edi,esi
c0000506:	83 fa 04             	cmp    edx,0x4
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 03             	and    edx,0x3
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	89 f0                	mov    eax,esi
c000051e:	5b                   	pop    ebx
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 12                	jne    c0000556 <memset+0x66>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 14                	jne    c0000560 <memset+0x70>
c000054c:	89 d1                	mov    ecx,edx
c000054e:	c1 e9 02             	shr    ecx,0x2
c0000551:	fc                   	cld    
c0000552:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000554:	eb b5                	jmp    c000050b <memset+0x1b>
c0000556:	88 06                	mov    BYTE PTR [esi],al
c0000558:	8d 7e 01             	lea    edi,[esi+0x1]
c000055b:	83 ea 01             	sub    edx,0x1
c000055e:	eb e4                	jmp    c0000544 <memset+0x54>
c0000560:	66 89 07             	mov    WORD PTR [edi],ax
c0000563:	83 ea 02             	sub    edx,0x2
c0000566:	83 c7 02             	add    edi,0x2
c0000569:	eb e1                	jmp    c000054c <memset+0x5c>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0000570 <strlen>:
c0000570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000574:	31 c0                	xor    eax,eax
c0000576:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000579:	74 15                	je     c0000590 <strlen+0x20>
c000057b:	90                   	nop
c000057c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000580:	83 c0 01             	add    eax,0x1
c0000583:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000587:	75 f7                	jne    c0000580 <strlen+0x10>
c0000589:	c3                   	ret    
c000058a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000590:	c3                   	ret    
c0000591:	eb 0d                	jmp    c00005a0 <strpbrk>
c0000593:	90                   	nop
c0000594:	90                   	nop
c0000595:	90                   	nop
c0000596:	90                   	nop
c0000597:	90                   	nop
c0000598:	90                   	nop
c0000599:	90                   	nop
c000059a:	90                   	nop
c000059b:	90                   	nop
c000059c:	90                   	nop
c000059d:	90                   	nop
c000059e:	90                   	nop
c000059f:	90                   	nop

c00005a0 <strpbrk>:
c00005a0:	57                   	push   edi
c00005a1:	56                   	push   esi
c00005a2:	53                   	push   ebx
c00005a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005ab:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005ae:	85 db                	test   ebx,ebx
c00005b0:	74 36                	je     c00005e8 <strpbrk+0x48>
c00005b2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005b5:	85 f6                	test   esi,esi
c00005b7:	74 25                	je     c00005de <strpbrk+0x3e>
c00005b9:	39 de                	cmp    esi,ebx
c00005bb:	74 2d                	je     c00005ea <strpbrk+0x4a>
c00005bd:	89 fa                	mov    edx,edi
c00005bf:	eb 13                	jmp    c00005d4 <strpbrk+0x34>
c00005c1:	eb 0d                	jmp    c00005d0 <strpbrk+0x30>
c00005c3:	90                   	nop
c00005c4:	90                   	nop
c00005c5:	90                   	nop
c00005c6:	90                   	nop
c00005c7:	90                   	nop
c00005c8:	90                   	nop
c00005c9:	90                   	nop
c00005ca:	90                   	nop
c00005cb:	90                   	nop
c00005cc:	90                   	nop
c00005cd:	90                   	nop
c00005ce:	90                   	nop
c00005cf:	90                   	nop
c00005d0:	39 d9                	cmp    ecx,ebx
c00005d2:	74 16                	je     c00005ea <strpbrk+0x4a>
c00005d4:	83 c2 01             	add    edx,0x1
c00005d7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005da:	85 c9                	test   ecx,ecx
c00005dc:	75 f2                	jne    c00005d0 <strpbrk+0x30>
c00005de:	83 c0 01             	add    eax,0x1
c00005e1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005e4:	85 db                	test   ebx,ebx
c00005e6:	75 cd                	jne    c00005b5 <strpbrk+0x15>
c00005e8:	31 c0                	xor    eax,eax
c00005ea:	5b                   	pop    ebx
c00005eb:	5e                   	pop    esi
c00005ec:	5f                   	pop    edi
c00005ed:	c3                   	ret    
c00005ee:	66 90                	xchg   ax,ax

c00005f0 <strtok>:
c00005f0:	56                   	push   esi
c00005f1:	53                   	push   ebx
c00005f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005fa:	85 db                	test   ebx,ebx
c00005fc:	75 09                	jne    c0000607 <strtok+0x17>
c00005fe:	eb 30                	jmp    c0000630 <strtok+0x40>
c0000600:	83 c3 01             	add    ebx,0x1
c0000603:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000607:	56                   	push   esi
c0000608:	53                   	push   ebx
c0000609:	e8 92 ff ff ff       	call   c00005a0 <strpbrk>
c000060e:	5a                   	pop    edx
c000060f:	a3 e0 60 02 c0       	mov    ds:0xc00260e0,eax
c0000614:	59                   	pop    ecx
c0000615:	39 d8                	cmp    eax,ebx
c0000617:	74 e7                	je     c0000600 <strtok+0x10>
c0000619:	85 c0                	test   eax,eax
c000061b:	74 1d                	je     c000063a <strtok+0x4a>
c000061d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000620:	8d 50 01             	lea    edx,[eax+0x1]
c0000623:	89 d8                	mov    eax,ebx
c0000625:	89 15 e0 60 02 c0    	mov    DWORD PTR ds:0xc00260e0,edx
c000062b:	5b                   	pop    ebx
c000062c:	5e                   	pop    esi
c000062d:	c3                   	ret    
c000062e:	66 90                	xchg   ax,ax
c0000630:	8b 1d e0 60 02 c0    	mov    ebx,DWORD PTR ds:0xc00260e0
c0000636:	85 db                	test   ebx,ebx
c0000638:	75 cd                	jne    c0000607 <strtok+0x17>
c000063a:	31 c0                	xor    eax,eax
c000063c:	5b                   	pop    ebx
c000063d:	5e                   	pop    esi
c000063e:	c3                   	ret    
c000063f:	90                   	nop

c0000640 <strcpy>:
c0000640:	53                   	push   ebx
c0000641:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000645:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000649:	89 c3                	mov    ebx,eax
c000064b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000064d:	84 d2                	test   dl,dl
c000064f:	74 1d                	je     c000066e <strcpy+0x2e>
c0000651:	eb 0d                	jmp    c0000660 <strcpy+0x20>
c0000653:	90                   	nop
c0000654:	90                   	nop
c0000655:	90                   	nop
c0000656:	90                   	nop
c0000657:	90                   	nop
c0000658:	90                   	nop
c0000659:	90                   	nop
c000065a:	90                   	nop
c000065b:	90                   	nop
c000065c:	90                   	nop
c000065d:	90                   	nop
c000065e:	90                   	nop
c000065f:	90                   	nop
c0000660:	88 13                	mov    BYTE PTR [ebx],dl
c0000662:	83 c1 01             	add    ecx,0x1
c0000665:	83 c3 01             	add    ebx,0x1
c0000668:	8a 11                	mov    dl,BYTE PTR [ecx]
c000066a:	84 d2                	test   dl,dl
c000066c:	75 f2                	jne    c0000660 <strcpy+0x20>
c000066e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000671:	5b                   	pop    ebx
c0000672:	c3                   	ret    
c0000673:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000679:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000680 <strncpy>:
c0000680:	57                   	push   edi
c0000681:	56                   	push   esi
c0000682:	53                   	push   ebx
c0000683:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000687:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000068b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000068f:	85 f6                	test   esi,esi
c0000691:	74 44                	je     c00006d7 <strncpy+0x57>
c0000693:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000695:	8d 46 ff             	lea    eax,[esi-0x1]
c0000698:	8d 7a 01             	lea    edi,[edx+0x1]
c000069b:	88 0a                	mov    BYTE PTR [edx],cl
c000069d:	84 c9                	test   cl,cl
c000069f:	74 3f                	je     c00006e0 <strncpy+0x60>
c00006a1:	85 c0                	test   eax,eax
c00006a3:	74 32                	je     c00006d7 <strncpy+0x57>
c00006a5:	8d 4b 02             	lea    ecx,[ebx+0x2]
c00006a8:	8d 46 fe             	lea    eax,[esi-0x2]
c00006ab:	8a 5b 01             	mov    bl,BYTE PTR [ebx+0x1]
c00006ae:	8d 7a 02             	lea    edi,[edx+0x2]
c00006b1:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006b4:	84 db                	test   bl,bl
c00006b6:	75 1b                	jne    c00006d3 <strncpy+0x53>
c00006b8:	eb 26                	jmp    c00006e0 <strncpy+0x60>
c00006ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00006c0:	83 c1 01             	add    ecx,0x1
c00006c3:	83 c7 01             	add    edi,0x1
c00006c6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006c9:	83 e8 01             	sub    eax,0x1
c00006cc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006cf:	84 db                	test   bl,bl
c00006d1:	74 0d                	je     c00006e0 <strncpy+0x60>
c00006d3:	85 c0                	test   eax,eax
c00006d5:	75 e9                	jne    c00006c0 <strncpy+0x40>
c00006d7:	5b                   	pop    ebx
c00006d8:	89 d0                	mov    eax,edx
c00006da:	5e                   	pop    esi
c00006db:	5f                   	pop    edi
c00006dc:	c3                   	ret    
c00006dd:	8d 76 00             	lea    esi,[esi+0x0]
c00006e0:	85 c0                	test   eax,eax
c00006e2:	74 f3                	je     c00006d7 <strncpy+0x57>
c00006e4:	89 c3                	mov    ebx,eax
c00006e6:	83 f8 04             	cmp    eax,0x4
c00006e9:	73 25                	jae    c0000710 <strncpy+0x90>
c00006eb:	f6 c3 02             	test   bl,0x2
c00006ee:	74 08                	je     c00006f8 <strncpy+0x78>
c00006f0:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c00006f5:	83 c7 02             	add    edi,0x2
c00006f8:	80 e3 01             	and    bl,0x1
c00006fb:	74 da                	je     c00006d7 <strncpy+0x57>
c00006fd:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0000700:	89 d0                	mov    eax,edx
c0000702:	5b                   	pop    ebx
c0000703:	5e                   	pop    esi
c0000704:	5f                   	pop    edi
c0000705:	c3                   	ret    
c0000706:	8d 76 00             	lea    esi,[esi+0x0]
c0000709:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000710:	f7 c7 01 00 00 00    	test   edi,0x1
c0000716:	75 14                	jne    c000072c <strncpy+0xac>
c0000718:	f7 c7 02 00 00 00    	test   edi,0x2
c000071e:	75 17                	jne    c0000737 <strncpy+0xb7>
c0000720:	89 d9                	mov    ecx,ebx
c0000722:	c1 e9 02             	shr    ecx,0x2
c0000725:	fc                   	cld    
c0000726:	31 c0                	xor    eax,eax
c0000728:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000072a:	eb bf                	jmp    c00006eb <strncpy+0x6b>
c000072c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000072f:	83 eb 01             	sub    ebx,0x1
c0000732:	83 c7 01             	add    edi,0x1
c0000735:	eb e1                	jmp    c0000718 <strncpy+0x98>
c0000737:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c000073c:	83 eb 02             	sub    ebx,0x2
c000073f:	83 c7 02             	add    edi,0x2
c0000742:	eb dc                	jmp    c0000720 <strncpy+0xa0>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000750 <strcmp>:
c0000750:	57                   	push   edi
c0000751:	56                   	push   esi
c0000752:	53                   	push   ebx
c0000753:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000757:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000075b:	8a 17                	mov    dl,BYTE PTR [edi]
c000075d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000760:	38 c2                	cmp    dl,al
c0000762:	75 32                	jne    c0000796 <strcmp+0x46>
c0000764:	85 c0                	test   eax,eax
c0000766:	74 28                	je     c0000790 <strcmp+0x40>
c0000768:	b8 01 00 00 00       	mov    eax,0x1
c000076d:	eb 08                	jmp    c0000777 <strcmp+0x27>
c000076f:	90                   	nop
c0000770:	83 c0 01             	add    eax,0x1
c0000773:	85 db                	test   ebx,ebx
c0000775:	74 19                	je     c0000790 <strcmp+0x40>
c0000777:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c000077b:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c000077e:	89 da                	mov    edx,ebx
c0000780:	38 d9                	cmp    cl,bl
c0000782:	74 ec                	je     c0000770 <strcmp+0x20>
c0000784:	5b                   	pop    ebx
c0000785:	0f b6 c2             	movzx  eax,dl
c0000788:	0f b6 c9             	movzx  ecx,cl
c000078b:	5e                   	pop    esi
c000078c:	29 c8                	sub    eax,ecx
c000078e:	5f                   	pop    edi
c000078f:	c3                   	ret    
c0000790:	5b                   	pop    ebx
c0000791:	31 c0                	xor    eax,eax
c0000793:	5e                   	pop    esi
c0000794:	5f                   	pop    edi
c0000795:	c3                   	ret    
c0000796:	89 c1                	mov    ecx,eax
c0000798:	eb ea                	jmp    c0000784 <strcmp+0x34>
c000079a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007a0 <strchr>:
c00007a0:	53                   	push   ebx
c00007a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007a5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007a8:	85 db                	test   ebx,ebx
c00007aa:	74 22                	je     c00007ce <strchr+0x2e>
c00007ac:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007b1:	39 d3                	cmp    ebx,edx
c00007b3:	74 1b                	je     c00007d0 <strchr+0x30>
c00007b5:	89 d1                	mov    ecx,edx
c00007b7:	eb 0b                	jmp    c00007c4 <strchr+0x24>
c00007b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007c0:	39 ca                	cmp    edx,ecx
c00007c2:	74 0c                	je     c00007d0 <strchr+0x30>
c00007c4:	83 c0 01             	add    eax,0x1
c00007c7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007ca:	85 d2                	test   edx,edx
c00007cc:	75 f2                	jne    c00007c0 <strchr+0x20>
c00007ce:	31 c0                	xor    eax,eax
c00007d0:	5b                   	pop    ebx
c00007d1:	c3                   	ret    
c00007d2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00007e0 <strncmp>:
c00007e0:	55                   	push   ebp
c00007e1:	57                   	push   edi
c00007e2:	56                   	push   esi
c00007e3:	53                   	push   ebx
c00007e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00007e8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00007f0:	85 f6                	test   esi,esi
c00007f2:	74 35                	je     c0000829 <strncmp+0x49>
c00007f4:	8a 17                	mov    dl,BYTE PTR [edi]
c00007f6:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00007f9:	89 e9                	mov    ecx,ebp
c00007fb:	38 ca                	cmp    dl,cl
c00007fd:	75 31                	jne    c0000830 <strncmp+0x50>
c00007ff:	8d 47 01             	lea    eax,[edi+0x1]
c0000802:	85 ed                	test   ebp,ebp
c0000804:	74 23                	je     c0000829 <strncmp+0x49>
c0000806:	01 f7                	add    edi,esi
c0000808:	eb 18                	jmp    c0000822 <strncmp+0x42>
c000080a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000810:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000813:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000815:	89 f2                	mov    edx,esi
c0000817:	38 d1                	cmp    cl,dl
c0000819:	75 15                	jne    c0000830 <strncmp+0x50>
c000081b:	83 c0 01             	add    eax,0x1
c000081e:	85 f6                	test   esi,esi
c0000820:	74 07                	je     c0000829 <strncmp+0x49>
c0000822:	83 c3 01             	add    ebx,0x1
c0000825:	39 c7                	cmp    edi,eax
c0000827:	75 e7                	jne    c0000810 <strncmp+0x30>
c0000829:	5b                   	pop    ebx
c000082a:	31 c0                	xor    eax,eax
c000082c:	5e                   	pop    esi
c000082d:	5f                   	pop    edi
c000082e:	5d                   	pop    ebp
c000082f:	c3                   	ret    
c0000830:	5b                   	pop    ebx
c0000831:	0f b6 c2             	movzx  eax,dl
c0000834:	5e                   	pop    esi
c0000835:	0f b6 c9             	movzx  ecx,cl
c0000838:	5f                   	pop    edi
c0000839:	29 c8                	sub    eax,ecx
c000083b:	5d                   	pop    ebp
c000083c:	c3                   	ret    
c000083d:	8d 76 00             	lea    esi,[esi+0x0]

c0000840 <strcat>:
c0000840:	56                   	push   esi
c0000841:	53                   	push   ebx
c0000842:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000846:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000084a:	89 c3                	mov    ebx,eax
c000084c:	eb 04                	jmp    c0000852 <strcat+0x12>
c000084e:	66 90                	xchg   ax,ax
c0000850:	89 d3                	mov    ebx,edx
c0000852:	8d 53 01             	lea    edx,[ebx+0x1]
c0000855:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000859:	75 f5                	jne    c0000850 <strcat+0x10>
c000085b:	31 d2                	xor    edx,edx
c000085d:	8d 76 00             	lea    esi,[esi+0x0]
c0000860:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000863:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000866:	83 c2 01             	add    edx,0x1
c0000869:	84 c9                	test   cl,cl
c000086b:	75 f3                	jne    c0000860 <strcat+0x20>
c000086d:	5b                   	pop    ebx
c000086e:	5e                   	pop    esi
c000086f:	c3                   	ret    

c0000870 <strncat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000876:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000087a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000087e:	85 f6                	test   esi,esi
c0000880:	74 32                	je     c00008b4 <strncat+0x44>
c0000882:	89 c2                	mov    edx,eax
c0000884:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000088a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000890:	83 c2 01             	add    edx,0x1
c0000893:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000897:	75 f7                	jne    c0000890 <strncat+0x20>
c0000899:	01 ce                	add    esi,ecx
c000089b:	eb 0a                	jmp    c00008a7 <strncat+0x37>
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	39 f1                	cmp    ecx,esi
c00008a2:	74 1c                	je     c00008c0 <strncat+0x50>
c00008a4:	83 c2 01             	add    edx,0x1
c00008a7:	83 c1 01             	add    ecx,0x1
c00008aa:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008ad:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008b0:	84 db                	test   bl,bl
c00008b2:	75 ec                	jne    c00008a0 <strncat+0x30>
c00008b4:	5b                   	pop    ebx
c00008b5:	5e                   	pop    esi
c00008b6:	c3                   	ret    
c00008b7:	89 f6                	mov    esi,esi
c00008b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008c0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008c3:	5b                   	pop    ebx
c00008c4:	5e                   	pop    esi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <strstr>:
c00008d0:	57                   	push   edi
c00008d1:	56                   	push   esi
c00008d2:	53                   	push   ebx
c00008d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008db:	57                   	push   edi
c00008dc:	e8 8f fc ff ff       	call   c0000570 <strlen>
c00008e1:	59                   	pop    ecx
c00008e2:	85 c0                	test   eax,eax
c00008e4:	74 3a                	je     c0000920 <strstr+0x50>
c00008e6:	89 c6                	mov    esi,eax
c00008e8:	eb 18                	jmp    c0000902 <strstr+0x32>
c00008ea:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008f0:	56                   	push   esi
c00008f1:	57                   	push   edi
c00008f2:	53                   	push   ebx
c00008f3:	e8 88 fa ff ff       	call   c0000380 <memcmp>
c00008f8:	83 c4 0c             	add    esp,0xc
c00008fb:	85 c0                	test   eax,eax
c00008fd:	74 21                	je     c0000920 <strstr+0x50>
c00008ff:	83 c3 01             	add    ebx,0x1
c0000902:	53                   	push   ebx
c0000903:	e8 68 fc ff ff       	call   c0000570 <strlen>
c0000908:	5a                   	pop    edx
c0000909:	39 f0                	cmp    eax,esi
c000090b:	73 e3                	jae    c00008f0 <strstr+0x20>
c000090d:	5b                   	pop    ebx
c000090e:	31 c0                	xor    eax,eax
c0000910:	5e                   	pop    esi
c0000911:	5f                   	pop    edi
c0000912:	c3                   	ret    
c0000913:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	89 d8                	mov    eax,ebx
c0000922:	5b                   	pop    ebx
c0000923:	5e                   	pop    esi
c0000924:	5f                   	pop    edi
c0000925:	c3                   	ret    
c0000926:	8d 76 00             	lea    esi,[esi+0x0]
c0000929:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000930 <toupper>:
c0000930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000934:	0f b6 d0             	movzx  edx,al
c0000937:	f6 82 a0 04 02 c0 02 	test   BYTE PTR [edx-0x3ffdfb60],0x2
c000093e:	74 03                	je     c0000943 <toupper+0x13>
c0000940:	83 e8 20             	sub    eax,0x20
c0000943:	c3                   	ret    
c0000944:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000094a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000950 <tolower>:
c0000950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000954:	0f b6 d0             	movzx  edx,al
c0000957:	f6 82 a0 04 02 c0 01 	test   BYTE PTR [edx-0x3ffdfb60],0x1
c000095e:	74 03                	je     c0000963 <tolower+0x13>
c0000960:	83 c0 20             	add    eax,0x20
c0000963:	c3                   	ret    
c0000964:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000096a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000970 <simple_strtoul>:
c0000970:	55                   	push   ebp
c0000971:	57                   	push   edi
c0000972:	56                   	push   esi
c0000973:	53                   	push   ebx
c0000974:	83 ec 08             	sub    esp,0x8
c0000977:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000097b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000097f:	eb 12                	jmp    c0000993 <simple_strtoul+0x23>
c0000981:	eb 0d                	jmp    c0000990 <simple_strtoul+0x20>
c0000983:	90                   	nop
c0000984:	90                   	nop
c0000985:	90                   	nop
c0000986:	90                   	nop
c0000987:	90                   	nop
c0000988:	90                   	nop
c0000989:	90                   	nop
c000098a:	90                   	nop
c000098b:	90                   	nop
c000098c:	90                   	nop
c000098d:	90                   	nop
c000098e:	90                   	nop
c000098f:	90                   	nop
c0000990:	83 c3 01             	add    ebx,0x1
c0000993:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c0000996:	f6 82 a0 04 02 c0 08 	test   BYTE PTR [edx-0x3ffdfb60],0x8
c000099d:	75 f1                	jne    c0000990 <simple_strtoul+0x20>
c000099f:	0f be c2             	movsx  eax,dl
c00009a2:	83 f8 09             	cmp    eax,0x9
c00009a5:	74 e9                	je     c0000990 <simple_strtoul+0x20>
c00009a7:	83 f8 2d             	cmp    eax,0x2d
c00009aa:	0f 84 60 01 00 00    	je     c0000b10 <simple_strtoul+0x1a0>
c00009b0:	83 f8 2b             	cmp    eax,0x2b
c00009b3:	0f 84 e7 00 00 00    	je     c0000aa0 <simple_strtoul+0x130>
c00009b9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009c1:	85 f6                	test   esi,esi
c00009c3:	0f 85 ea 00 00 00    	jne    c0000ab3 <simple_strtoul+0x143>
c00009c9:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c00009cc:	89 d1                	mov    ecx,edx
c00009ce:	83 fa 30             	cmp    edx,0x30
c00009d1:	0f 84 90 01 00 00    	je     c0000b67 <simple_strtoul+0x1f7>
c00009d7:	be 0a 00 00 00       	mov    esi,0xa
c00009dc:	85 d2                	test   edx,edx
c00009de:	0f 84 c5 01 00 00    	je     c0000ba9 <simple_strtoul+0x239>
c00009e4:	31 ed                	xor    ebp,ebp
c00009e6:	31 ff                	xor    edi,edi
c00009e8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009ef:	eb 3e                	jmp    c0000a2f <simple_strtoul+0xbf>
c00009f1:	eb 0d                	jmp    c0000a00 <simple_strtoul+0x90>
c00009f3:	90                   	nop
c00009f4:	90                   	nop
c00009f5:	90                   	nop
c00009f6:	90                   	nop
c00009f7:	90                   	nop
c00009f8:	90                   	nop
c00009f9:	90                   	nop
c00009fa:	90                   	nop
c00009fb:	90                   	nop
c00009fc:	90                   	nop
c00009fd:	90                   	nop
c00009fe:	90                   	nop
c00009ff:	90                   	nop
c0000a00:	83 e9 30             	sub    ecx,0x30
c0000a03:	39 f1                	cmp    ecx,esi
c0000a05:	73 59                	jae    c0000a60 <simple_strtoul+0xf0>
c0000a07:	31 d2                	xor    edx,edx
c0000a09:	89 c8                	mov    eax,ecx
c0000a0b:	f7 d0                	not    eax
c0000a0d:	f7 f6                	div    esi
c0000a0f:	39 f8                	cmp    eax,edi
c0000a11:	0f 82 d9 00 00 00    	jb     c0000af0 <simple_strtoul+0x180>
c0000a17:	0f af fe             	imul   edi,esi
c0000a1a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a21:	01 cf                	add    edi,ecx
c0000a23:	83 c3 01             	add    ebx,0x1
c0000a26:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a29:	89 d1                	mov    ecx,edx
c0000a2b:	85 d2                	test   edx,edx
c0000a2d:	74 31                	je     c0000a60 <simple_strtoul+0xf0>
c0000a2f:	0f b6 c9             	movzx  ecx,cl
c0000a32:	f6 81 a0 04 02 c0 04 	test   BYTE PTR [ecx-0x3ffdfb60],0x4
c0000a39:	75 c5                	jne    c0000a00 <simple_strtoul+0x90>
c0000a3b:	52                   	push   edx
c0000a3c:	e8 ef fe ff ff       	call   c0000930 <toupper>
c0000a41:	59                   	pop    ecx
c0000a42:	0f b6 d0             	movzx  edx,al
c0000a45:	f6 82 a0 04 02 c0 01 	test   BYTE PTR [edx-0x3ffdfb60],0x1
c0000a4c:	74 12                	je     c0000a60 <simple_strtoul+0xf0>
c0000a4e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a51:	39 f1                	cmp    ecx,esi
c0000a53:	72 b2                	jb     c0000a07 <simple_strtoul+0x97>
c0000a55:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a59:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	85 c0                	test   eax,eax
c0000a66:	74 18                	je     c0000a80 <simple_strtoul+0x110>
c0000a68:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a6b:	09 f8                	or     eax,edi
c0000a6d:	0f 85 8d 00 00 00    	jne    c0000b00 <simple_strtoul+0x190>
c0000a73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a77:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a7b:	31 ff                	xor    edi,edi
c0000a7d:	89 30                	mov    DWORD PTR [eax],esi
c0000a7f:	90                   	nop
c0000a80:	83 fd 01             	cmp    ebp,0x1
c0000a83:	75 05                	jne    c0000a8a <simple_strtoul+0x11a>
c0000a85:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a8a:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a8f:	75 02                	jne    c0000a93 <simple_strtoul+0x123>
c0000a91:	f7 df                	neg    edi
c0000a93:	83 c4 08             	add    esp,0x8
c0000a96:	89 f8                	mov    eax,edi
c0000a98:	5b                   	pop    ebx
c0000a99:	5e                   	pop    esi
c0000a9a:	5f                   	pop    edi
c0000a9b:	5d                   	pop    ebp
c0000a9c:	c3                   	ret    
c0000a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0000aa0:	83 c3 01             	add    ebx,0x1
c0000aa3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000aab:	85 f6                	test   esi,esi
c0000aad:	0f 84 16 ff ff ff    	je     c00009c9 <simple_strtoul+0x59>
c0000ab3:	8d 46 fe             	lea    eax,[esi-0x2]
c0000ab6:	83 f8 22             	cmp    eax,0x22
c0000ab9:	0f 87 8b 00 00 00    	ja     c0000b4a <simple_strtoul+0x1da>
c0000abf:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000ac1:	83 fe 08             	cmp    esi,0x8
c0000ac4:	0f 84 c8 00 00 00    	je     c0000b92 <simple_strtoul+0x222>
c0000aca:	83 fe 10             	cmp    esi,0x10
c0000acd:	0f 85 0d 01 00 00    	jne    c0000be0 <simple_strtoul+0x270>
c0000ad3:	0f be d1             	movsx  edx,cl
c0000ad6:	83 fa 30             	cmp    edx,0x30
c0000ad9:	74 45                	je     c0000b20 <simple_strtoul+0x1b0>
c0000adb:	be 10 00 00 00       	mov    esi,0x10
c0000ae0:	e9 f7 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000ae5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000ae9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000af0:	bd 01 00 00 00       	mov    ebp,0x1
c0000af5:	31 ff                	xor    edi,edi
c0000af7:	e9 27 ff ff ff       	jmp    c0000a23 <simple_strtoul+0xb3>
c0000afc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	89 18                	mov    DWORD PTR [eax],ebx
c0000b06:	e9 75 ff ff ff       	jmp    c0000a80 <simple_strtoul+0x110>
c0000b0b:	90                   	nop
c0000b0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b10:	83 c3 01             	add    ebx,0x1
c0000b13:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b1b:	e9 a1 fe ff ff       	jmp    c00009c1 <simple_strtoul+0x51>
c0000b20:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b24:	52                   	push   edx
c0000b25:	89 d1                	mov    ecx,edx
c0000b27:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b2b:	e8 20 fe ff ff       	call   c0000950 <tolower>
c0000b30:	5e                   	pop    esi
c0000b31:	83 f8 78             	cmp    eax,0x78
c0000b34:	0f 84 93 00 00 00    	je     c0000bcd <simple_strtoul+0x25d>
c0000b3a:	83 c3 01             	add    ebx,0x1
c0000b3d:	be 10 00 00 00       	mov    esi,0x10
c0000b42:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b45:	e9 92 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b4a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000b4e:	85 ff                	test   edi,edi
c0000b50:	74 69                	je     c0000bbb <simple_strtoul+0x24b>
c0000b52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b56:	85 db                	test   ebx,ebx
c0000b58:	75 5b                	jne    c0000bb5 <simple_strtoul+0x245>
c0000b5a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000b60:	31 ff                	xor    edi,edi
c0000b62:	e9 23 ff ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000b67:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b6b:	52                   	push   edx
c0000b6c:	89 d1                	mov    ecx,edx
c0000b6e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b72:	e8 d9 fd ff ff       	call   c0000950 <tolower>
c0000b77:	5d                   	pop    ebp
c0000b78:	83 f8 78             	cmp    eax,0x78
c0000b7b:	74 45                	je     c0000bc2 <simple_strtoul+0x252>
c0000b7d:	83 c3 01             	add    ebx,0x1
c0000b80:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b83:	83 fa 30             	cmp    edx,0x30
c0000b86:	74 16                	je     c0000b9e <simple_strtoul+0x22e>
c0000b88:	be 08 00 00 00       	mov    esi,0x8
c0000b8d:	e9 4a fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b92:	0f be d1             	movsx  edx,cl
c0000b95:	83 fa 30             	cmp    edx,0x30
c0000b98:	0f 85 3e fe ff ff    	jne    c00009dc <simple_strtoul+0x6c>
c0000b9e:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000ba2:	83 c3 01             	add    ebx,0x1
c0000ba5:	89 d1                	mov    ecx,edx
c0000ba7:	eb df                	jmp    c0000b88 <simple_strtoul+0x218>
c0000ba9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bad:	85 d2                	test   edx,edx
c0000baf:	74 0a                	je     c0000bbb <simple_strtoul+0x24b>
c0000bb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bb5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000bb9:	89 30                	mov    DWORD PTR [eax],esi
c0000bbb:	31 ff                	xor    edi,edi
c0000bbd:	e9 c8 fe ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000bc2:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bc5:	83 c3 02             	add    ebx,0x2
c0000bc8:	e9 06 ff ff ff       	jmp    c0000ad3 <simple_strtoul+0x163>
c0000bcd:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000bd1:	be 10 00 00 00       	mov    esi,0x10
c0000bd6:	89 d1                	mov    ecx,edx
c0000bd8:	83 c3 02             	add    ebx,0x2
c0000bdb:	e9 fc fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000be0:	0f be d1             	movsx  edx,cl
c0000be3:	e9 f4 fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>

c0000be8 <largebin_index>:
c0000be8:	89 c2                	mov    edx,eax
c0000bea:	c1 ea 08             	shr    edx,0x8
c0000bed:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000bf3:	77 10                	ja     c0000c05 <largebin_index+0x1d>
c0000bf5:	0f bd d2             	bsr    edx,edx
c0000bf8:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000bfb:	d3 e8                	shr    eax,cl
c0000bfd:	83 e0 03             	and    eax,0x3
c0000c00:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c04:	c3                   	ret    
c0000c05:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c0a:	c3                   	ret    

c0000c0b <malloc_init_state>:
c0000c0b:	53                   	push   ebx
c0000c0c:	8d 50 34             	lea    edx,[eax+0x34]
c0000c0f:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c15:	89 d1                	mov    ecx,edx
c0000c17:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c1a:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c1d:	83 c2 08             	add    edx,0x8
c0000c20:	39 da                	cmp    edx,ebx
c0000c22:	75 f3                	jne    c0000c17 <malloc_init_state+0xc>
c0000c24:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c26:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c30:	83 e2 03             	and    edx,0x3
c0000c33:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c3d:	83 ca 48             	or     edx,0x48
c0000c40:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c4a:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c54:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c5b:	89 10                	mov    DWORD PTR [eax],edx
c0000c5d:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c60:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c6a:	5b                   	pop    ebx
c0000c6b:	c3                   	ret    

c0000c6c <malloc_consolidate>:
c0000c6c:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c6e:	85 d2                	test   edx,edx
c0000c70:	0f 84 d8 00 00 00    	je     c0000d4e <malloc_consolidate+0xe2>
c0000c76:	55                   	push   ebp
c0000c77:	83 e2 fd             	and    edx,0xfffffffd
c0000c7a:	57                   	push   edi
c0000c7b:	89 c5                	mov    ebp,eax
c0000c7d:	56                   	push   esi
c0000c7e:	8d 78 34             	lea    edi,[eax+0x34]
c0000c81:	53                   	push   ebx
c0000c82:	83 ec 10             	sub    esp,0x10
c0000c85:	89 10                	mov    DWORD PTR [eax],edx
c0000c87:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c8b:	c1 ea 03             	shr    edx,0x3
c0000c8e:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c92:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c96:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c99:	85 d2                	test   edx,edx
c0000c9b:	0f 84 98 00 00 00    	je     c0000d39 <malloc_consolidate+0xcd>
c0000ca1:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ca8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cab:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cb2:	89 f9                	mov    ecx,edi
c0000cb4:	83 e1 fe             	and    ecx,0xfffffffe
c0000cb7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cba:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cbd:	83 e3 fc             	and    ebx,0xfffffffc
c0000cc0:	83 e7 01             	and    edi,0x1
c0000cc3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cc6:	75 14                	jne    c0000cdc <malloc_consolidate+0x70>
c0000cc8:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cca:	29 fa                	sub    edx,edi
c0000ccc:	01 f9                	add    ecx,edi
c0000cce:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000cd1:	89 fb                	mov    ebx,edi
c0000cd3:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000cd6:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000cd9:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000cdc:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000cdf:	74 40                	je     c0000d21 <malloc_consolidate+0xb5>
c0000ce1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000ce4:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000ce7:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000ceb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000cee:	83 e7 01             	and    edi,0x1
c0000cf1:	75 0e                	jne    c0000d01 <malloc_consolidate+0x95>
c0000cf3:	01 d9                	add    ecx,ebx
c0000cf5:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000cf8:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000cfb:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000cfe:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d01:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d04:	89 ce                	mov    esi,ecx
c0000d06:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d09:	83 ce 01             	or     esi,0x1
c0000d0c:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d0f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d12:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d15:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d19:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d1c:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d1f:	eb 0c                	jmp    c0000d2d <malloc_consolidate+0xc1>
c0000d21:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d24:	83 c9 01             	or     ecx,0x1
c0000d27:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d2a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d2d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d31:	85 d2                	test   edx,edx
c0000d33:	0f 85 6f ff ff ff    	jne    c0000ca8 <malloc_consolidate+0x3c>
c0000d39:	83 c5 04             	add    ebp,0x4
c0000d3c:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d40:	0f 85 50 ff ff ff    	jne    c0000c96 <malloc_consolidate+0x2a>
c0000d46:	83 c4 10             	add    esp,0x10
c0000d49:	5b                   	pop    ebx
c0000d4a:	5e                   	pop    esi
c0000d4b:	5f                   	pop    edi
c0000d4c:	5d                   	pop    ebp
c0000d4d:	c3                   	ret    
c0000d4e:	e9 b8 fe ff ff       	jmp    c0000c0b <malloc_init_state>

c0000d53 <dlfree>:
c0000d53:	57                   	push   edi
c0000d54:	56                   	push   esi
c0000d55:	53                   	push   ebx
c0000d56:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d5a:	85 db                	test   ebx,ebx
c0000d5c:	0f 84 e2 00 00 00    	je     c0000e44 <dlfree+0xf1>
c0000d62:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000d65:	8b 0d 00 61 02 c0    	mov    ecx,DWORD PTR ds:0xc0026100
c0000d6b:	89 f0                	mov    eax,esi
c0000d6d:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000d70:	83 e0 fc             	and    eax,0xfffffffc
c0000d73:	39 c1                	cmp    ecx,eax
c0000d75:	72 24                	jb     c0000d9b <dlfree+0x48>
c0000d77:	83 c9 03             	or     ecx,0x3
c0000d7a:	c1 e8 03             	shr    eax,0x3
c0000d7d:	89 0d 00 61 02 c0    	mov    DWORD PTR ds:0xc0026100,ecx
c0000d83:	83 e8 02             	sub    eax,0x2
c0000d86:	8b 0c 85 04 61 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9efc]
c0000d8d:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000d8f:	89 14 85 04 61 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9efc],edx
c0000d96:	e9 a9 00 00 00       	jmp    c0000e44 <dlfree+0xf1>
c0000d9b:	83 e6 02             	and    esi,0x2
c0000d9e:	0f 85 a0 00 00 00    	jne    c0000e44 <dlfree+0xf1>
c0000da4:	83 c9 01             	or     ecx,0x1
c0000da7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000daa:	89 0d 00 61 02 c0    	mov    DWORD PTR ds:0xc0026100,ecx
c0000db0:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000db3:	83 e1 fc             	and    ecx,0xfffffffc
c0000db6:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dba:	75 13                	jne    c0000dcf <dlfree+0x7c>
c0000dbc:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000dbf:	29 da                	sub    edx,ebx
c0000dc1:	01 d8                	add    eax,ebx
c0000dc3:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000dc6:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000dc9:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dcc:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000dcf:	39 35 2c 61 02 c0    	cmp    DWORD PTR ds:0xc002612c,esi
c0000dd5:	74 40                	je     c0000e17 <dlfree+0xc4>
c0000dd7:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000ddb:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000dde:	80 e3 01             	and    bl,0x1
c0000de1:	75 0e                	jne    c0000df1 <dlfree+0x9e>
c0000de3:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000de6:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000de9:	01 c8                	add    eax,ecx
c0000deb:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dee:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000df1:	8b 0d 3c 61 02 c0    	mov    ecx,DWORD PTR ds:0xc002613c
c0000df7:	c7 42 0c 34 61 02 c0 	mov    DWORD PTR [edx+0xc],0xc0026134
c0000dfe:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e01:	89 15 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,edx
c0000e07:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e0a:	89 c1                	mov    ecx,eax
c0000e0c:	83 c9 01             	or     ecx,0x1
c0000e0f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e12:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e15:	eb 10                	jmp    c0000e27 <dlfree+0xd4>
c0000e17:	01 c8                	add    eax,ecx
c0000e19:	89 c1                	mov    ecx,eax
c0000e1b:	83 c9 01             	or     ecx,0x1
c0000e1e:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e21:	89 15 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,edx
c0000e27:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e2c:	76 16                	jbe    c0000e44 <dlfree+0xf1>
c0000e2e:	f6 05 00 61 02 c0 02 	test   BYTE PTR ds:0xc0026100,0x2
c0000e35:	74 0d                	je     c0000e44 <dlfree+0xf1>
c0000e37:	5b                   	pop    ebx
c0000e38:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0000e3d:	5e                   	pop    esi
c0000e3e:	5f                   	pop    edi
c0000e3f:	e9 28 fe ff ff       	jmp    c0000c6c <malloc_consolidate>
c0000e44:	5b                   	pop    ebx
c0000e45:	5e                   	pop    esi
c0000e46:	5f                   	pop    edi
c0000e47:	c3                   	ret    

c0000e48 <sYSMALLOc>:
c0000e48:	55                   	push   ebp
c0000e49:	57                   	push   edi
c0000e4a:	56                   	push   esi
c0000e4b:	53                   	push   ebx
c0000e4c:	89 d3                	mov    ebx,edx
c0000e4e:	83 ec 2c             	sub    esp,0x2c
c0000e51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e55:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e5b:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e5e:	8d 42 ff             	lea    eax,[edx-0x1]
c0000e61:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000e65:	74 1f                	je     c0000e86 <sYSMALLOc+0x3e>
c0000e67:	89 d8                	mov    eax,ebx
c0000e69:	e8 fe fd ff ff       	call   c0000c6c <malloc_consolidate>
c0000e6e:	83 ec 0c             	sub    esp,0xc
c0000e71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000e75:	83 e8 07             	sub    eax,0x7
c0000e78:	50                   	push   eax
c0000e79:	e8 2d 02 00 00       	call   c00010ab <dlmalloc>
c0000e7e:	83 c4 10             	add    esp,0x10
c0000e81:	e9 1d 02 00 00       	jmp    c00010a3 <sYSMALLOc+0x25b>
c0000e86:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000e89:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000e8f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000e92:	83 e0 fc             	and    eax,0xfffffffc
c0000e95:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e9d:	83 c0 10             	add    eax,0x10
c0000ea0:	01 c1                	add    ecx,eax
c0000ea2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0000ea6:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000ead:	74 04                	je     c0000eb3 <sYSMALLOc+0x6b>
c0000eaf:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000eb3:	f7 da                	neg    edx
c0000eb5:	03 4c 24 14          	add    ecx,DWORD PTR [esp+0x14]
c0000eb9:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0000ebd:	21 d1                	and    ecx,edx
c0000ebf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000ec3:	7f 07                	jg     c0000ecc <sYSMALLOc+0x84>
c0000ec5:	31 c0                	xor    eax,eax
c0000ec7:	e9 d7 01 00 00       	jmp    c00010a3 <sYSMALLOc+0x25b>
c0000ecc:	83 ec 0c             	sub    esp,0xc
c0000ecf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000ed3:	e8 b0 6a 00 00       	call   c0007988 <sbrk>
c0000ed8:	83 c4 10             	add    esp,0x10
c0000edb:	89 c6                	mov    esi,eax
c0000edd:	83 f8 ff             	cmp    eax,0xffffffff
c0000ee0:	74 e3                	je     c0000ec5 <sYSMALLOc+0x7d>
c0000ee2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000ee6:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000ee9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000eed:	03 83 68 03 00 00    	add    eax,DWORD PTR [ebx+0x368]
c0000ef3:	39 f1                	cmp    ecx,esi
c0000ef5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ef9:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000eff:	75 13                	jne    c0000f14 <sYSMALLOc+0xcc>
c0000f01:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f05:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f09:	83 c8 01             	or     eax,0x1
c0000f0c:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f0f:	e9 37 01 00 00       	jmp    c000104b <sYSMALLOc+0x203>
c0000f14:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f1a:	89 d5                	mov    ebp,edx
c0000f1c:	83 e5 01             	and    ebp,0x1
c0000f1f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f24:	0f 95 c0             	setne  al
c0000f27:	21 e8                	and    eax,ebp
c0000f29:	39 f1                	cmp    ecx,esi
c0000f2b:	76 12                	jbe    c0000f3f <sYSMALLOc+0xf7>
c0000f2d:	85 c0                	test   eax,eax
c0000f2f:	74 0e                	je     c0000f3f <sYSMALLOc+0xf7>
c0000f31:	83 e2 fe             	and    edx,0xfffffffe
c0000f34:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f3a:	e9 82 00 00 00       	jmp    c0000fc1 <sYSMALLOc+0x179>
c0000f3f:	85 ed                	test   ebp,ebp
c0000f41:	74 7e                	je     c0000fc1 <sYSMALLOc+0x179>
c0000f43:	85 c0                	test   eax,eax
c0000f45:	74 0e                	je     c0000f55 <sYSMALLOc+0x10d>
c0000f47:	89 f0                	mov    eax,esi
c0000f49:	29 c8                	sub    eax,ecx
c0000f4b:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0000f4f:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f55:	89 f2                	mov    edx,esi
c0000f57:	83 e2 07             	and    edx,0x7
c0000f5a:	74 0c                	je     c0000f68 <sYSMALLOc+0x120>
c0000f5c:	b8 08 00 00 00       	mov    eax,0x8
c0000f61:	29 d0                	sub    eax,edx
c0000f63:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000f66:	eb 04                	jmp    c0000f6c <sYSMALLOc+0x124>
c0000f68:	89 f5                	mov    ebp,esi
c0000f6a:	31 c0                	xor    eax,eax
c0000f6c:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f70:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f74:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0000f78:	01 c1                	add    ecx,eax
c0000f7a:	83 ec 0c             	sub    esp,0xc
c0000f7d:	01 f1                	add    ecx,esi
c0000f7f:	01 ca                	add    edx,ecx
c0000f81:	29 c8                	sub    eax,ecx
c0000f83:	23 54 24 24          	and    edx,DWORD PTR [esp+0x24]
c0000f87:	01 c2                	add    edx,eax
c0000f89:	52                   	push   edx
c0000f8a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000f8e:	e8 f5 69 00 00       	call   c0007988 <sbrk>
c0000f93:	83 c4 10             	add    esp,0x10
c0000f96:	83 f8 ff             	cmp    eax,0xffffffff
c0000f99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f9d:	75 0f                	jne    c0000fae <sYSMALLOc+0x166>
c0000f9f:	83 ec 0c             	sub    esp,0xc
c0000fa2:	6a 00                	push   0x0
c0000fa4:	e8 df 69 00 00       	call   c0007988 <sbrk>
c0000fa9:	83 c4 10             	add    esp,0x10
c0000fac:	eb 30                	jmp    c0000fde <sYSMALLOc+0x196>
c0000fae:	39 c6                	cmp    esi,eax
c0000fb0:	76 33                	jbe    c0000fe5 <sYSMALLOc+0x19d>
c0000fb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000fb6:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000fbd:	01 f0                	add    eax,esi
c0000fbf:	eb 1d                	jmp    c0000fde <sYSMALLOc+0x196>
c0000fc1:	83 ec 0c             	sub    esp,0xc
c0000fc4:	89 f5                	mov    ebp,esi
c0000fc6:	6a 00                	push   0x0
c0000fc8:	e8 bb 69 00 00       	call   c0007988 <sbrk>
c0000fcd:	89 c2                	mov    edx,eax
c0000fcf:	29 f2                	sub    edx,esi
c0000fd1:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000fd5:	83 c4 10             	add    esp,0x10
c0000fd8:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000fde:	31 d2                	xor    edx,edx
c0000fe0:	83 f8 ff             	cmp    eax,0xffffffff
c0000fe3:	74 66                	je     c000104b <sYSMALLOc+0x203>
c0000fe5:	29 e8                	sub    eax,ebp
c0000fe7:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000fea:	01 d0                	add    eax,edx
c0000fec:	83 c8 01             	or     eax,0x1
c0000fef:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000ff2:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000ff8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000ffd:	74 4c                	je     c000104b <sYSMALLOc+0x203>
c0000fff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001003:	83 e8 0c             	sub    eax,0xc
c0001006:	83 e0 f8             	and    eax,0xfffffff8
c0001009:	89 c2                	mov    edx,eax
c000100b:	83 ca 01             	or     edx,0x1
c000100e:	83 f8 0f             	cmp    eax,0xf
c0001011:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001014:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c000101c:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001024:	76 25                	jbe    c000104b <sYSMALLOc+0x203>
c0001026:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c000102c:	83 ec 0c             	sub    esp,0xc
c000102f:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0001039:	83 c7 08             	add    edi,0x8
c000103c:	57                   	push   edi
c000103d:	e8 11 fd ff ff       	call   c0000d53 <dlfree>
c0001042:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0001048:	83 c4 10             	add    esp,0x10
c000104b:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001051:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001057:	73 06                	jae    c000105f <sYSMALLOc+0x217>
c0001059:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c000105f:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0001065:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c000106b:	73 06                	jae    c0001073 <sYSMALLOc+0x22b>
c000106d:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0001073:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0001076:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001079:	83 e2 fc             	and    edx,0xfffffffc
c000107c:	3b 54 24 1c          	cmp    edx,DWORD PTR [esp+0x1c]
c0001080:	0f 82 3f fe ff ff    	jb     c0000ec5 <sYSMALLOc+0x7d>
c0001086:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000108a:	8d 0c 38             	lea    ecx,[eax+edi*1]
c000108d:	29 fa                	sub    edx,edi
c000108f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001092:	83 ca 01             	or     edx,0x1
c0001095:	89 fb                	mov    ebx,edi
c0001097:	83 c0 08             	add    eax,0x8
c000109a:	83 cb 01             	or     ebx,0x1
c000109d:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010a0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010a3:	83 c4 2c             	add    esp,0x2c
c00010a6:	5b                   	pop    ebx
c00010a7:	5e                   	pop    esi
c00010a8:	5f                   	pop    edi
c00010a9:	5d                   	pop    ebp
c00010aa:	c3                   	ret    

c00010ab <dlmalloc>:
c00010ab:	55                   	push   ebp
c00010ac:	57                   	push   edi
c00010ad:	56                   	push   esi
c00010ae:	53                   	push   ebx
c00010af:	83 ec 1c             	sub    esp,0x1c
c00010b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010b6:	83 f8 df             	cmp    eax,0xffffffdf
c00010b9:	0f 87 70 03 00 00    	ja     c000142f <dlmalloc+0x384>
c00010bf:	83 c0 0b             	add    eax,0xb
c00010c2:	be 10 00 00 00       	mov    esi,0x10
c00010c7:	83 f8 0f             	cmp    eax,0xf
c00010ca:	76 05                	jbe    c00010d1 <dlmalloc+0x26>
c00010cc:	83 e0 f8             	and    eax,0xfffffff8
c00010cf:	89 c6                	mov    esi,eax
c00010d1:	8b 3d 00 61 02 c0    	mov    edi,DWORD PTR ds:0xc0026100
c00010d7:	f7 c7 01 00 00 00    	test   edi,0x1
c00010dd:	75 17                	jne    c00010f6 <dlmalloc+0x4b>
c00010df:	85 ff                	test   edi,edi
c00010e1:	0f 85 05 03 00 00    	jne    c00013ec <dlmalloc+0x341>
c00010e7:	b8 00 61 02 c0       	mov    eax,0xc0026100
c00010ec:	e8 7b fb ff ff       	call   c0000c6c <malloc_consolidate>
c00010f1:	e9 f6 02 00 00       	jmp    c00013ec <dlmalloc+0x341>
c00010f6:	39 f7                	cmp    edi,esi
c00010f8:	72 1f                	jb     c0001119 <dlmalloc+0x6e>
c00010fa:	89 f2                	mov    edx,esi
c00010fc:	c1 ea 03             	shr    edx,0x3
c00010ff:	83 ea 02             	sub    edx,0x2
c0001102:	8b 04 95 04 61 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9efc]
c0001109:	85 c0                	test   eax,eax
c000110b:	74 0c                	je     c0001119 <dlmalloc+0x6e>
c000110d:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001110:	89 0c 95 04 61 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9efc],ecx
c0001117:	eb 30                	jmp    c0001149 <dlmalloc+0x9e>
c0001119:	89 f0                	mov    eax,esi
c000111b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001121:	77 2e                	ja     c0001151 <dlmalloc+0xa6>
c0001123:	c1 e8 03             	shr    eax,0x3
c0001126:	8d 14 c5 34 61 02 c0 	lea    edx,[eax*8-0x3ffd9ecc]
c000112d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001131:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001134:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001137:	39 c3                	cmp    ebx,eax
c0001139:	74 2e                	je     c0001169 <dlmalloc+0xbe>
c000113b:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000113e:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001143:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0001146:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001149:	83 c0 08             	add    eax,0x8
c000114c:	e9 e0 02 00 00       	jmp    c0001431 <dlmalloc+0x386>
c0001151:	e8 92 fa ff ff       	call   c0000be8 <largebin_index>
c0001156:	83 e7 02             	and    edi,0x2
c0001159:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000115d:	74 0a                	je     c0001169 <dlmalloc+0xbe>
c000115f:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001164:	e8 03 fb ff ff       	call   c0000c6c <malloc_consolidate>
c0001169:	8d 46 10             	lea    eax,[esi+0x10]
c000116c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001170:	8b 1d 40 61 02 c0    	mov    ebx,DWORD PTR ds:0xc0026140
c0001176:	81 fb 34 61 02 c0    	cmp    ebx,0xc0026134
c000117c:	0f 84 13 01 00 00    	je     c0001295 <dlmalloc+0x1ea>
c0001182:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0001185:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001188:	83 e7 fc             	and    edi,0xfffffffc
c000118b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001191:	77 4c                	ja     c00011df <dlmalloc+0x134>
c0001193:	3d 34 61 02 c0       	cmp    eax,0xc0026134
c0001198:	75 45                	jne    c00011df <dlmalloc+0x134>
c000119a:	39 1d 30 61 02 c0    	cmp    DWORD PTR ds:0xc0026130,ebx
c00011a0:	75 3d                	jne    c00011df <dlmalloc+0x134>
c00011a2:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011a6:	73 37                	jae    c00011df <dlmalloc+0x134>
c00011a8:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ab:	89 fa                	mov    edx,edi
c00011ad:	a3 3c 61 02 c0       	mov    ds:0xc002613c,eax
c00011b2:	a3 40 61 02 c0       	mov    ds:0xc0026140,eax
c00011b7:	a3 30 61 02 c0       	mov    ds:0xc0026130,eax
c00011bc:	29 f2                	sub    edx,esi
c00011be:	c7 40 08 34 61 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026134
c00011c5:	c7 40 0c 34 61 02 c0 	mov    DWORD PTR [eax+0xc],0xc0026134
c00011cc:	83 ce 01             	or     esi,0x1
c00011cf:	89 d1                	mov    ecx,edx
c00011d1:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c00011d4:	83 c9 01             	or     ecx,0x1
c00011d7:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00011da:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c00011dd:	eb 15                	jmp    c00011f4 <dlmalloc+0x149>
c00011df:	a3 40 61 02 c0       	mov    ds:0xc0026140,eax
c00011e4:	39 fe                	cmp    esi,edi
c00011e6:	c7 40 08 34 61 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026134
c00011ed:	75 0d                	jne    c00011fc <dlmalloc+0x151>
c00011ef:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c00011f4:	8d 43 08             	lea    eax,[ebx+0x8]
c00011f7:	e9 35 02 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00011fc:	89 f8                	mov    eax,edi
c00011fe:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001204:	77 19                	ja     c000121f <dlmalloc+0x174>
c0001206:	c1 e8 03             	shr    eax,0x3
c0001209:	8d 14 00             	lea    edx,[eax+eax*1]
c000120c:	83 c2 0d             	add    edx,0xd
c000120f:	8d 2c 95 f8 60 02 c0 	lea    ebp,[edx*4-0x3ffd9f08]
c0001216:	8b 14 95 00 61 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9f00]
c000121d:	eb 46                	jmp    c0001265 <dlmalloc+0x1ba>
c000121f:	e8 c4 f9 ff ff       	call   c0000be8 <largebin_index>
c0001224:	8d 14 00             	lea    edx,[eax+eax*1]
c0001227:	83 c2 0d             	add    edx,0xd
c000122a:	8d 0c 95 00 61 02 c0 	lea    ecx,[edx*4-0x3ffd9f00]
c0001231:	8b 14 95 00 61 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9f00]
c0001238:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000123b:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000123f:	89 d5                	mov    ebp,edx
c0001241:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001245:	74 1e                	je     c0001265 <dlmalloc+0x1ba>
c0001247:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000124a:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c000124d:	77 12                	ja     c0001261 <dlmalloc+0x1b6>
c000124f:	83 cf 01             	or     edi,0x1
c0001252:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001255:	76 05                	jbe    c000125c <dlmalloc+0x1b1>
c0001257:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000125a:	eb f6                	jmp    c0001252 <dlmalloc+0x1a7>
c000125c:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c000125f:	eb 04                	jmp    c0001265 <dlmalloc+0x1ba>
c0001261:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001265:	89 c7                	mov    edi,eax
c0001267:	88 c1                	mov    cl,al
c0001269:	c1 ff 05             	sar    edi,0x5
c000126c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0001270:	bf 01 00 00 00       	mov    edi,0x1
c0001275:	d3 e7                	shl    edi,cl
c0001277:	89 f8                	mov    eax,edi
c0001279:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000127d:	09 04 bd 34 64 02 c0 	or     DWORD PTR [edi*4-0x3ffd9bcc],eax
c0001284:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001287:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000128a:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c000128d:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001290:	e9 db fe ff ff       	jmp    c0001170 <dlmalloc+0xc5>
c0001295:	81 fe ff 00 00 00    	cmp    esi,0xff
c000129b:	76 78                	jbe    c0001315 <dlmalloc+0x26a>
c000129d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012a1:	8d 04 c5 34 61 02 c0 	lea    eax,[eax*8-0x3ffd9ecc]
c00012a8:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ab:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012ae:	39 ca                	cmp    edx,ecx
c00012b0:	74 63                	je     c0001315 <dlmalloc+0x26a>
c00012b2:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012b5:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012b8:	83 e3 fc             	and    ebx,0xfffffffc
c00012bb:	39 de                	cmp    esi,ebx
c00012bd:	77 52                	ja     c0001311 <dlmalloc+0x266>
c00012bf:	89 df                	mov    edi,ebx
c00012c1:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00012c4:	29 f7                	sub    edi,esi
c00012c6:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00012c9:	01 d3                	add    ebx,edx
c00012cb:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c00012ce:	83 ff 0f             	cmp    edi,0xf
c00012d1:	8d 42 08             	lea    eax,[edx+0x8]
c00012d4:	77 09                	ja     c00012df <dlmalloc+0x234>
c00012d6:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c00012da:	e9 52 01 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00012df:	8d 0c 32             	lea    ecx,[edx+esi*1]
c00012e2:	83 ce 01             	or     esi,0x1
c00012e5:	89 0d 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,ecx
c00012eb:	89 0d 40 61 02 c0    	mov    DWORD PTR ds:0xc0026140,ecx
c00012f1:	c7 41 08 34 61 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0026134
c00012f8:	c7 41 0c 34 61 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0026134
c00012ff:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001302:	89 fa                	mov    edx,edi
c0001304:	83 ca 01             	or     edx,0x1
c0001307:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000130a:	89 3b                	mov    DWORD PTR [ebx],edi
c000130c:	e9 20 01 00 00       	jmp    c0001431 <dlmalloc+0x386>
c0001311:	89 c2                	mov    edx,eax
c0001313:	eb 99                	jmp    c00012ae <dlmalloc+0x203>
c0001315:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001319:	b8 01 00 00 00       	mov    eax,0x1
c000131e:	41                   	inc    ecx
c000131f:	89 cb                	mov    ebx,ecx
c0001321:	8d 14 cd 2c 61 02 c0 	lea    edx,[ecx*8-0x3ffd9ed4]
c0001328:	c1 eb 05             	shr    ebx,0x5
c000132b:	d3 e0                	shl    eax,cl
c000132d:	8b 3c 9d 34 64 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9bcc]
c0001334:	39 f8                	cmp    eax,edi
c0001336:	77 04                	ja     c000133c <dlmalloc+0x291>
c0001338:	85 c0                	test   eax,eax
c000133a:	75 26                	jne    c0001362 <dlmalloc+0x2b7>
c000133c:	43                   	inc    ebx
c000133d:	83 fb 02             	cmp    ebx,0x2
c0001340:	0f 87 a6 00 00 00    	ja     c00013ec <dlmalloc+0x341>
c0001346:	8b 3c 9d 34 64 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9bcc]
c000134d:	85 ff                	test   edi,edi
c000134f:	74 eb                	je     c000133c <dlmalloc+0x291>
c0001351:	89 d8                	mov    eax,ebx
c0001353:	c1 e0 06             	shl    eax,0x6
c0001356:	8d 14 85 2c 61 02 c0 	lea    edx,[eax*4-0x3ffd9ed4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	85 f8                	test   eax,edi
c0001364:	75 07                	jne    c000136d <dlmalloc+0x2c2>
c0001366:	83 c2 08             	add    edx,0x8
c0001369:	01 c0                	add    eax,eax
c000136b:	eb f5                	jmp    c0001362 <dlmalloc+0x2b7>
c000136d:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0001370:	39 ca                	cmp    edx,ecx
c0001372:	75 14                	jne    c0001388 <dlmalloc+0x2dd>
c0001374:	89 c1                	mov    ecx,eax
c0001376:	83 c2 08             	add    edx,0x8
c0001379:	f7 d1                	not    ecx
c000137b:	01 c0                	add    eax,eax
c000137d:	21 cf                	and    edi,ecx
c000137f:	89 3c 9d 34 64 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9bcc],edi
c0001386:	eb ac                	jmp    c0001334 <dlmalloc+0x289>
c0001388:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000138b:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000138e:	83 e0 fc             	and    eax,0xfffffffc
c0001391:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001394:	89 c3                	mov    ebx,eax
c0001396:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001399:	29 f3                	sub    ebx,esi
c000139b:	8d 14 01             	lea    edx,[ecx+eax*1]
c000139e:	83 fb 0f             	cmp    ebx,0xf
c00013a1:	8d 41 08             	lea    eax,[ecx+0x8]
c00013a4:	77 09                	ja     c00013af <dlmalloc+0x304>
c00013a6:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013aa:	e9 82 00 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00013af:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013b2:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013b8:	89 3d 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,edi
c00013be:	89 3d 40 61 02 c0    	mov    DWORD PTR ds:0xc0026140,edi
c00013c4:	c7 47 08 34 61 02 c0 	mov    DWORD PTR [edi+0x8],0xc0026134
c00013cb:	c7 47 0c 34 61 02 c0 	mov    DWORD PTR [edi+0xc],0xc0026134
c00013d2:	77 06                	ja     c00013da <dlmalloc+0x32f>
c00013d4:	89 3d 30 61 02 c0    	mov    DWORD PTR ds:0xc0026130,edi
c00013da:	83 ce 01             	or     esi,0x1
c00013dd:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c00013e0:	89 d9                	mov    ecx,ebx
c00013e2:	83 c9 01             	or     ecx,0x1
c00013e5:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c00013e8:	89 1a                	mov    DWORD PTR [edx],ebx
c00013ea:	eb 45                	jmp    c0001431 <dlmalloc+0x386>
c00013ec:	a1 2c 61 02 c0       	mov    eax,ds:0xc002612c
c00013f1:	8d 4e 10             	lea    ecx,[esi+0x10]
c00013f4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00013f7:	83 e2 fc             	and    edx,0xfffffffc
c00013fa:	39 d1                	cmp    ecx,edx
c00013fc:	77 1e                	ja     c000141c <dlmalloc+0x371>
c00013fe:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001401:	89 f3                	mov    ebx,esi
c0001403:	89 0d 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,ecx
c0001409:	83 cb 01             	or     ebx,0x1
c000140c:	29 f2                	sub    edx,esi
c000140e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001411:	83 ca 01             	or     edx,0x1
c0001414:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001417:	e9 2d fd ff ff       	jmp    c0001149 <dlmalloc+0x9e>
c000141c:	83 c4 1c             	add    esp,0x1c
c000141f:	89 f0                	mov    eax,esi
c0001421:	5b                   	pop    ebx
c0001422:	ba 00 61 02 c0       	mov    edx,0xc0026100
c0001427:	5e                   	pop    esi
c0001428:	5f                   	pop    edi
c0001429:	5d                   	pop    ebp
c000142a:	e9 19 fa ff ff       	jmp    c0000e48 <sYSMALLOc>
c000142f:	31 c0                	xor    eax,eax
c0001431:	83 c4 1c             	add    esp,0x1c
c0001434:	5b                   	pop    ebx
c0001435:	5e                   	pop    esi
c0001436:	5f                   	pop    edi
c0001437:	5d                   	pop    ebp
c0001438:	c3                   	ret    

c0001439 <iALLOc>:
c0001439:	55                   	push   ebp
c000143a:	89 c5                	mov    ebp,eax
c000143c:	57                   	push   edi
c000143d:	56                   	push   esi
c000143e:	53                   	push   ebx
c000143f:	83 ec 2c             	sub    esp,0x2c
c0001442:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001446:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000144a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000144e:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c0001455:	75 12                	jne    c0001469 <iALLOc+0x30>
c0001457:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000145b:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001460:	e8 07 f8 ff ff       	call   c0000c6c <malloc_consolidate>
c0001465:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001469:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000146e:	74 12                	je     c0001482 <iALLOc+0x49>
c0001470:	85 ed                	test   ebp,ebp
c0001472:	0f 84 64 01 00 00    	je     c00015dc <iALLOc+0x1a3>
c0001478:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0001480:	eb 33                	jmp    c00014b5 <iALLOc+0x7c>
c0001482:	85 ed                	test   ebp,ebp
c0001484:	75 14                	jne    c000149a <iALLOc+0x61>
c0001486:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000148e:	83 c4 2c             	add    esp,0x2c
c0001491:	5b                   	pop    ebx
c0001492:	5e                   	pop    esi
c0001493:	5f                   	pop    edi
c0001494:	5d                   	pop    ebp
c0001495:	e9 11 fc ff ff       	jmp    c00010ab <dlmalloc>
c000149a:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014a1:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014a9:	83 f8 0f             	cmp    eax,0xf
c00014ac:	76 07                	jbe    c00014b5 <iALLOc+0x7c>
c00014ae:	83 e0 f8             	and    eax,0xfffffff8
c00014b1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014b5:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014ba:	75 09                	jne    c00014c5 <iALLOc+0x8c>
c00014bc:	89 d0                	mov    eax,edx
c00014be:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00014c1:	31 f6                	xor    esi,esi
c00014c3:	eb 3b                	jmp    c0001500 <iALLOc+0xc7>
c00014c5:	8b 02                	mov    eax,DWORD PTR [edx]
c00014c7:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c00014cf:	83 c0 0b             	add    eax,0xb
c00014d2:	83 f8 0f             	cmp    eax,0xf
c00014d5:	76 07                	jbe    c00014de <iALLOc+0xa5>
c00014d7:	83 e0 f8             	and    eax,0xfffffff8
c00014da:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00014de:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00014e2:	0f af f5             	imul   esi,ebp
c00014e5:	eb 25                	jmp    c000150c <iALLOc+0xd3>
c00014e7:	8b 18                	mov    ebx,DWORD PTR [eax]
c00014e9:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c00014ec:	bb 10 00 00 00       	mov    ebx,0x10
c00014f1:	83 f9 0f             	cmp    ecx,0xf
c00014f4:	76 05                	jbe    c00014fb <iALLOc+0xc2>
c00014f6:	83 e1 f8             	and    ecx,0xfffffff8
c00014f9:	89 cb                	mov    ebx,ecx
c00014fb:	01 de                	add    esi,ebx
c00014fd:	83 c0 04             	add    eax,0x4
c0001500:	39 c7                	cmp    edi,eax
c0001502:	75 e3                	jne    c00014e7 <iALLOc+0xae>
c0001504:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000150c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001510:	8b 1d 54 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026454
c0001516:	83 ec 0c             	sub    esp,0xc
c0001519:	c7 05 54 64 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026454,0x0
c0001523:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001527:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000152b:	50                   	push   eax
c000152c:	e8 7a fb ff ff       	call   c00010ab <dlmalloc>
c0001531:	83 c4 10             	add    esp,0x10
c0001534:	89 1d 54 64 02 c0    	mov    DWORD PTR ds:0xc0026454,ebx
c000153a:	85 c0                	test   eax,eax
c000153c:	0f 84 92 00 00 00    	je     c00015d4 <iALLOc+0x19b>
c0001542:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001545:	8d 78 f8             	lea    edi,[eax-0x8]
c0001548:	83 e3 fc             	and    ebx,0xfffffffc
c000154b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000154f:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001554:	74 1e                	je     c0001574 <iALLOc+0x13b>
c0001556:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000155a:	89 d9                	mov    ecx,ebx
c000155c:	52                   	push   edx
c000155d:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0001561:	83 e9 04             	sub    ecx,0x4
c0001564:	51                   	push   ecx
c0001565:	6a 00                	push   0x0
c0001567:	50                   	push   eax
c0001568:	e8 83 ef ff ff       	call   c00004f0 <memset>
c000156d:	83 c4 10             	add    esp,0x10
c0001570:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001574:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001579:	75 14                	jne    c000158f <iALLOc+0x156>
c000157b:	8d 04 37             	lea    eax,[edi+esi*1]
c000157e:	29 f3                	sub    ebx,esi
c0001580:	8d 48 08             	lea    ecx,[eax+0x8]
c0001583:	83 cb 01             	or     ebx,0x1
c0001586:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000158a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000158d:	89 f3                	mov    ebx,esi
c000158f:	31 c0                	xor    eax,eax
c0001591:	4d                   	dec    ebp
c0001592:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001595:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001599:	39 c5                	cmp    ebp,eax
c000159b:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000159e:	74 2c                	je     c00015cc <iALLOc+0x193>
c00015a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015a4:	85 c9                	test   ecx,ecx
c00015a6:	75 15                	jne    c00015bd <iALLOc+0x184>
c00015a8:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ab:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015ae:	b9 10 00 00 00       	mov    ecx,0x10
c00015b3:	83 fe 0f             	cmp    esi,0xf
c00015b6:	76 05                	jbe    c00015bd <iALLOc+0x184>
c00015b8:	83 e6 f8             	and    esi,0xfffffff8
c00015bb:	89 f1                	mov    ecx,esi
c00015bd:	89 ce                	mov    esi,ecx
c00015bf:	29 cb                	sub    ebx,ecx
c00015c1:	83 ce 01             	or     esi,0x1
c00015c4:	40                   	inc    eax
c00015c5:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00015c8:	01 cf                	add    edi,ecx
c00015ca:	eb c6                	jmp    c0001592 <iALLOc+0x159>
c00015cc:	83 cb 01             	or     ebx,0x1
c00015cf:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c00015d2:	eb 08                	jmp    c00015dc <iALLOc+0x1a3>
c00015d4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00015dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015e0:	83 c4 2c             	add    esp,0x2c
c00015e3:	5b                   	pop    ebx
c00015e4:	5e                   	pop    esi
c00015e5:	5f                   	pop    edi
c00015e6:	5d                   	pop    ebp
c00015e7:	c3                   	ret    

c00015e8 <dlrealloc>:
c00015e8:	55                   	push   ebp
c00015e9:	57                   	push   edi
c00015ea:	56                   	push   esi
c00015eb:	53                   	push   ebx
c00015ec:	83 ec 1c             	sub    esp,0x1c
c00015ef:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00015f3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00015f7:	85 db                	test   ebx,ebx
c00015f9:	75 10                	jne    c000160b <dlrealloc+0x23>
c00015fb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00015ff:	83 c4 1c             	add    esp,0x1c
c0001602:	5b                   	pop    ebx
c0001603:	5e                   	pop    esi
c0001604:	5f                   	pop    edi
c0001605:	5d                   	pop    ebp
c0001606:	e9 a0 fa ff ff       	jmp    c00010ab <dlmalloc>
c000160b:	83 f8 df             	cmp    eax,0xffffffdf
c000160e:	76 07                	jbe    c0001617 <dlrealloc+0x2f>
c0001610:	31 db                	xor    ebx,ebx
c0001612:	e9 6a 01 00 00       	jmp    c0001781 <dlrealloc+0x199>
c0001617:	83 c0 0b             	add    eax,0xb
c000161a:	bd 10 00 00 00       	mov    ebp,0x10
c000161f:	83 f8 0f             	cmp    eax,0xf
c0001622:	76 05                	jbe    c0001629 <dlrealloc+0x41>
c0001624:	83 e0 f8             	and    eax,0xfffffff8
c0001627:	89 c5                	mov    ebp,eax
c0001629:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c000162c:	8d 7b f8             	lea    edi,[ebx-0x8]
c000162f:	89 c6                	mov    esi,eax
c0001631:	83 e6 fc             	and    esi,0xfffffffc
c0001634:	a8 02                	test   al,0x2
c0001636:	75 d8                	jne    c0001610 <dlrealloc+0x28>
c0001638:	39 f5                	cmp    ebp,esi
c000163a:	0f 86 04 01 00 00    	jbe    c0001744 <dlrealloc+0x15c>
c0001640:	8d 14 37             	lea    edx,[edi+esi*1]
c0001643:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0001646:	39 15 2c 61 02 c0    	cmp    DWORD PTR ds:0xc002612c,edx
c000164c:	75 33                	jne    c0001681 <dlrealloc+0x99>
c000164e:	83 e1 fc             	and    ecx,0xfffffffc
c0001651:	01 f1                	add    ecx,esi
c0001653:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001657:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000165a:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000165e:	77 49                	ja     c00016a9 <dlrealloc+0xc1>
c0001660:	01 ef                	add    edi,ebp
c0001662:	83 e0 01             	and    eax,0x1
c0001665:	09 e8                	or     eax,ebp
c0001667:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c000166a:	89 3d 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,edi
c0001670:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001674:	29 e8                	sub    eax,ebp
c0001676:	83 c8 01             	or     eax,0x1
c0001679:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c000167c:	e9 00 01 00 00       	jmp    c0001781 <dlrealloc+0x199>
c0001681:	89 c8                	mov    eax,ecx
c0001683:	83 e0 fe             	and    eax,0xfffffffe
c0001686:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c000168b:	75 1c                	jne    c00016a9 <dlrealloc+0xc1>
c000168d:	83 e1 fc             	and    ecx,0xfffffffc
c0001690:	01 f1                	add    ecx,esi
c0001692:	39 cd                	cmp    ebp,ecx
c0001694:	77 13                	ja     c00016a9 <dlrealloc+0xc1>
c0001696:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001699:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000169c:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000169f:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016a2:	89 ce                	mov    esi,ecx
c00016a4:	e9 9b 00 00 00       	jmp    c0001744 <dlrealloc+0x15c>
c00016a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016ad:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016b0:	83 ec 0c             	sub    esp,0xc
c00016b3:	50                   	push   eax
c00016b4:	e8 f2 f9 ff ff       	call   c00010ab <dlmalloc>
c00016b9:	83 c4 10             	add    esp,0x10
c00016bc:	85 c0                	test   eax,eax
c00016be:	0f 84 4c ff ff ff    	je     c0001610 <dlrealloc+0x28>
c00016c4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00016c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00016cb:	39 ca                	cmp    edx,ecx
c00016cd:	75 0a                	jne    c00016d9 <dlrealloc+0xf1>
c00016cf:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c00016d2:	83 e0 fc             	and    eax,0xfffffffc
c00016d5:	01 c6                	add    esi,eax
c00016d7:	eb 6b                	jmp    c0001744 <dlrealloc+0x15c>
c00016d9:	8d 4e fc             	lea    ecx,[esi-0x4]
c00016dc:	83 f9 27             	cmp    ecx,0x27
c00016df:	76 08                	jbe    c00016e9 <dlrealloc+0x101>
c00016e1:	89 de                	mov    esi,ebx
c00016e3:	89 c7                	mov    edi,eax
c00016e5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00016e7:	eb 43                	jmp    c000172c <dlrealloc+0x144>
c00016e9:	8b 13                	mov    edx,DWORD PTR [ebx]
c00016eb:	83 f9 13             	cmp    ecx,0x13
c00016ee:	89 10                	mov    DWORD PTR [eax],edx
c00016f0:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00016f3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00016f6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00016f9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00016fc:	76 2e                	jbe    c000172c <dlrealloc+0x144>
c00016fe:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001701:	83 f9 1b             	cmp    ecx,0x1b
c0001704:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001707:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000170a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000170d:	76 1d                	jbe    c000172c <dlrealloc+0x144>
c000170f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001712:	83 f9 23             	cmp    ecx,0x23
c0001715:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001718:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000171b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000171e:	76 0c                	jbe    c000172c <dlrealloc+0x144>
c0001720:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001723:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001726:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001729:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000172c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001730:	83 ec 0c             	sub    esp,0xc
c0001733:	53                   	push   ebx
c0001734:	e8 1a f6 ff ff       	call   c0000d53 <dlfree>
c0001739:	83 c4 10             	add    esp,0x10
c000173c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001740:	89 c3                	mov    ebx,eax
c0001742:	eb 3d                	jmp    c0001781 <dlrealloc+0x199>
c0001744:	89 f2                	mov    edx,esi
c0001746:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001749:	29 ea                	sub    edx,ebp
c000174b:	83 e1 01             	and    ecx,0x1
c000174e:	8d 04 37             	lea    eax,[edi+esi*1]
c0001751:	83 fa 0f             	cmp    edx,0xf
c0001754:	77 0b                	ja     c0001761 <dlrealloc+0x179>
c0001756:	09 ce                	or     esi,ecx
c0001758:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000175b:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000175f:	eb 20                	jmp    c0001781 <dlrealloc+0x199>
c0001761:	01 ef                	add    edi,ebp
c0001763:	83 ec 0c             	sub    esp,0xc
c0001766:	09 cd                	or     ebp,ecx
c0001768:	83 ca 01             	or     edx,0x1
c000176b:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c000176e:	83 c7 08             	add    edi,0x8
c0001771:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c0001774:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001778:	57                   	push   edi
c0001779:	e8 d5 f5 ff ff       	call   c0000d53 <dlfree>
c000177e:	83 c4 10             	add    esp,0x10
c0001781:	83 c4 1c             	add    esp,0x1c
c0001784:	89 d8                	mov    eax,ebx
c0001786:	5b                   	pop    ebx
c0001787:	5e                   	pop    esi
c0001788:	5f                   	pop    edi
c0001789:	5d                   	pop    ebp
c000178a:	c3                   	ret    

c000178b <dlmemalign>:
c000178b:	55                   	push   ebp
c000178c:	57                   	push   edi
c000178d:	56                   	push   esi
c000178e:	53                   	push   ebx
c000178f:	83 ec 0c             	sub    esp,0xc
c0001792:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001796:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000179a:	83 fa 08             	cmp    edx,0x8
c000179d:	77 10                	ja     c00017af <dlmemalign+0x24>
c000179f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017a3:	83 c4 0c             	add    esp,0xc
c00017a6:	5b                   	pop    ebx
c00017a7:	5e                   	pop    esi
c00017a8:	5f                   	pop    edi
c00017a9:	5d                   	pop    ebp
c00017aa:	e9 fc f8 ff ff       	jmp    c00010ab <dlmalloc>
c00017af:	bf 10 00 00 00       	mov    edi,0x10
c00017b4:	83 fa 0f             	cmp    edx,0xf
c00017b7:	76 13                	jbe    c00017cc <dlmemalign+0x41>
c00017b9:	8d 4a ff             	lea    ecx,[edx-0x1]
c00017bc:	85 d1                	test   ecx,edx
c00017be:	75 04                	jne    c00017c4 <dlmemalign+0x39>
c00017c0:	89 d7                	mov    edi,edx
c00017c2:	eb 08                	jmp    c00017cc <dlmemalign+0x41>
c00017c4:	39 d7                	cmp    edi,edx
c00017c6:	73 04                	jae    c00017cc <dlmemalign+0x41>
c00017c8:	01 ff                	add    edi,edi
c00017ca:	eb f8                	jmp    c00017c4 <dlmemalign+0x39>
c00017cc:	83 f8 df             	cmp    eax,0xffffffdf
c00017cf:	76 07                	jbe    c00017d8 <dlmemalign+0x4d>
c00017d1:	31 c0                	xor    eax,eax
c00017d3:	e9 ce 00 00 00       	jmp    c00018a6 <dlmemalign+0x11b>
c00017d8:	83 c0 0b             	add    eax,0xb
c00017db:	bd 10 00 00 00       	mov    ebp,0x10
c00017e0:	83 f8 0f             	cmp    eax,0xf
c00017e3:	76 05                	jbe    c00017ea <dlmemalign+0x5f>
c00017e5:	83 e0 f8             	and    eax,0xfffffff8
c00017e8:	89 c5                	mov    ebp,eax
c00017ea:	83 ec 0c             	sub    esp,0xc
c00017ed:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c00017f1:	50                   	push   eax
c00017f2:	e8 b4 f8 ff ff       	call   c00010ab <dlmalloc>
c00017f7:	83 c4 10             	add    esp,0x10
c00017fa:	89 c1                	mov    ecx,eax
c00017fc:	85 c0                	test   eax,eax
c00017fe:	74 d1                	je     c00017d1 <dlmemalign+0x46>
c0001800:	31 d2                	xor    edx,edx
c0001802:	8d 70 f8             	lea    esi,[eax-0x8]
c0001805:	f7 f7                	div    edi
c0001807:	85 d2                	test   edx,edx
c0001809:	74 62                	je     c000186d <dlmemalign+0xe2>
c000180b:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000180f:	89 f8                	mov    eax,edi
c0001811:	f7 d8                	neg    eax
c0001813:	21 c3                	and    ebx,eax
c0001815:	83 eb 08             	sub    ebx,0x8
c0001818:	89 d8                	mov    eax,ebx
c000181a:	29 f0                	sub    eax,esi
c000181c:	83 f8 0f             	cmp    eax,0xf
c000181f:	77 02                	ja     c0001823 <dlmemalign+0x98>
c0001821:	01 fb                	add    ebx,edi
c0001823:	89 d8                	mov    eax,ebx
c0001825:	29 f0                	sub    eax,esi
c0001827:	89 c6                	mov    esi,eax
c0001829:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000182c:	89 c2                	mov    edx,eax
c000182e:	83 e2 fc             	and    edx,0xfffffffc
c0001831:	29 f2                	sub    edx,esi
c0001833:	a8 02                	test   al,0x2
c0001835:	74 10                	je     c0001847 <dlmemalign+0xbc>
c0001837:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000183a:	83 ca 02             	or     edx,0x2
c000183d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001840:	89 33                	mov    DWORD PTR [ebx],esi
c0001842:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001845:	eb 5f                	jmp    c00018a6 <dlmemalign+0x11b>
c0001847:	83 ec 0c             	sub    esp,0xc
c000184a:	89 d0                	mov    eax,edx
c000184c:	83 c8 01             	or     eax,0x1
c000184f:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001852:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001857:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000185a:	83 e0 01             	and    eax,0x1
c000185d:	09 f0                	or     eax,esi
c000185f:	89 de                	mov    esi,ebx
c0001861:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001864:	51                   	push   ecx
c0001865:	e8 e9 f4 ff ff       	call   c0000d53 <dlfree>
c000186a:	83 c4 10             	add    esp,0x10
c000186d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001870:	a8 02                	test   al,0x2
c0001872:	75 2f                	jne    c00018a3 <dlmemalign+0x118>
c0001874:	83 e0 fc             	and    eax,0xfffffffc
c0001877:	8d 55 10             	lea    edx,[ebp+0x10]
c000187a:	39 c2                	cmp    edx,eax
c000187c:	73 25                	jae    c00018a3 <dlmemalign+0x118>
c000187e:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001881:	83 ec 0c             	sub    esp,0xc
c0001884:	29 e8                	sub    eax,ebp
c0001886:	83 c2 08             	add    edx,0x8
c0001889:	83 c8 01             	or     eax,0x1
c000188c:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000188f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001892:	83 e0 01             	and    eax,0x1
c0001895:	09 c5                	or     ebp,eax
c0001897:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c000189a:	52                   	push   edx
c000189b:	e8 b3 f4 ff ff       	call   c0000d53 <dlfree>
c00018a0:	83 c4 10             	add    esp,0x10
c00018a3:	8d 46 08             	lea    eax,[esi+0x8]
c00018a6:	83 c4 0c             	add    esp,0xc
c00018a9:	5b                   	pop    ebx
c00018aa:	5e                   	pop    esi
c00018ab:	5f                   	pop    edi
c00018ac:	5d                   	pop    ebp
c00018ad:	c3                   	ret    

c00018ae <dlcalloc>:
c00018ae:	53                   	push   ebx
c00018af:	83 ec 14             	sub    esp,0x14
c00018b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018b6:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018bb:	50                   	push   eax
c00018bc:	e8 ea f7 ff ff       	call   c00010ab <dlmalloc>
c00018c1:	83 c4 10             	add    esp,0x10
c00018c4:	89 c3                	mov    ebx,eax
c00018c6:	85 c0                	test   eax,eax
c00018c8:	74 77                	je     c0001941 <dlcalloc+0x93>
c00018ca:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c00018cd:	89 d0                	mov    eax,edx
c00018cf:	83 e0 fc             	and    eax,0xfffffffc
c00018d2:	80 e2 02             	and    dl,0x2
c00018d5:	75 5a                	jne    c0001931 <dlcalloc+0x83>
c00018d7:	83 e8 04             	sub    eax,0x4
c00018da:	83 f8 27             	cmp    eax,0x27
c00018dd:	76 03                	jbe    c00018e2 <dlcalloc+0x34>
c00018df:	51                   	push   ecx
c00018e0:	eb 53                	jmp    c0001935 <dlcalloc+0x87>
c00018e2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00018e8:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00018ef:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00018f6:	83 f8 13             	cmp    eax,0x13
c00018f9:	76 46                	jbe    c0001941 <dlcalloc+0x93>
c00018fb:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001902:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001909:	83 f8 1b             	cmp    eax,0x1b
c000190c:	76 33                	jbe    c0001941 <dlcalloc+0x93>
c000190e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001915:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000191c:	83 f8 23             	cmp    eax,0x23
c000191f:	76 20                	jbe    c0001941 <dlcalloc+0x93>
c0001921:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001928:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000192f:	eb 10                	jmp    c0001941 <dlcalloc+0x93>
c0001931:	83 e8 08             	sub    eax,0x8
c0001934:	52                   	push   edx
c0001935:	50                   	push   eax
c0001936:	6a 00                	push   0x0
c0001938:	53                   	push   ebx
c0001939:	e8 b2 eb ff ff       	call   c00004f0 <memset>
c000193e:	83 c4 10             	add    esp,0x10
c0001941:	89 d8                	mov    eax,ebx
c0001943:	83 c4 08             	add    esp,0x8
c0001946:	5b                   	pop    ebx
c0001947:	c3                   	ret    

c0001948 <dlcfree>:
c0001948:	e9 06 f4 ff ff       	jmp    c0000d53 <dlfree>

c000194d <dlindependent_calloc>:
c000194d:	83 ec 28             	sub    esp,0x28
c0001950:	b9 03 00 00 00       	mov    ecx,0x3
c0001955:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001959:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000195d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001961:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001965:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001969:	e8 cb fa ff ff       	call   c0001439 <iALLOc>
c000196e:	83 c4 2c             	add    esp,0x2c
c0001971:	c3                   	ret    

c0001972 <dlindependent_comalloc>:
c0001972:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001976:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000197a:	31 c9                	xor    ecx,ecx
c000197c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001980:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001984:	e9 b0 fa ff ff       	jmp    c0001439 <iALLOc>

c0001989 <dlvalloc>:
c0001989:	83 ec 0c             	sub    esp,0xc
c000198c:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c0001993:	75 0a                	jne    c000199f <dlvalloc+0x16>
c0001995:	b8 00 61 02 c0       	mov    eax,0xc0026100
c000199a:	e8 cd f2 ff ff       	call   c0000c6c <malloc_consolidate>
c000199f:	50                   	push   eax
c00019a0:	50                   	push   eax
c00019a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019a5:	ff 35 5c 64 02 c0    	push   DWORD PTR ds:0xc002645c
c00019ab:	e8 db fd ff ff       	call   c000178b <dlmemalign>
c00019b0:	83 c4 1c             	add    esp,0x1c
c00019b3:	c3                   	ret    

c00019b4 <dlpvalloc>:
c00019b4:	83 ec 0c             	sub    esp,0xc
c00019b7:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c00019be:	75 0a                	jne    c00019ca <dlpvalloc+0x16>
c00019c0:	b8 00 61 02 c0       	mov    eax,0xc0026100
c00019c5:	e8 a2 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c00019ca:	a1 5c 64 02 c0       	mov    eax,ds:0xc002645c
c00019cf:	89 c1                	mov    ecx,eax
c00019d1:	52                   	push   edx
c00019d2:	f7 d9                	neg    ecx
c00019d4:	52                   	push   edx
c00019d5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00019d9:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c00019dd:	21 ca                	and    edx,ecx
c00019df:	52                   	push   edx
c00019e0:	50                   	push   eax
c00019e1:	e8 a5 fd ff ff       	call   c000178b <dlmemalign>
c00019e6:	83 c4 1c             	add    esp,0x1c
c00019e9:	c3                   	ret    

c00019ea <dlmalloc_trim>:
c00019ea:	b8 00 61 02 c0       	mov    eax,0xc0026100
c00019ef:	e8 78 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c00019f4:	31 c0                	xor    eax,eax
c00019f6:	c3                   	ret    

c00019f7 <dlmalloc_usable_size>:
c00019f7:	53                   	push   ebx
c00019f8:	31 c0                	xor    eax,eax
c00019fa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00019fe:	85 c9                	test   ecx,ecx
c0001a00:	74 24                	je     c0001a26 <dlmalloc_usable_size+0x2f>
c0001a02:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a05:	f6 c2 02             	test   dl,0x2
c0001a08:	74 08                	je     c0001a12 <dlmalloc_usable_size+0x1b>
c0001a0a:	83 e2 fc             	and    edx,0xfffffffc
c0001a0d:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a10:	eb 14                	jmp    c0001a26 <dlmalloc_usable_size+0x2f>
c0001a12:	89 d3                	mov    ebx,edx
c0001a14:	31 c0                	xor    eax,eax
c0001a16:	83 e3 fe             	and    ebx,0xfffffffe
c0001a19:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a1e:	74 06                	je     c0001a26 <dlmalloc_usable_size+0x2f>
c0001a20:	83 e2 fc             	and    edx,0xfffffffc
c0001a23:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a26:	5b                   	pop    ebx
c0001a27:	c3                   	ret    

c0001a28 <dlmallinfo>:
c0001a28:	55                   	push   ebp
c0001a29:	57                   	push   edi
c0001a2a:	56                   	push   esi
c0001a2b:	53                   	push   ebx
c0001a2c:	83 ec 08             	sub    esp,0x8
c0001a2f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a33:	83 3d 2c 61 02 c0 00 	cmp    DWORD PTR ds:0xc002612c,0x0
c0001a3a:	75 0a                	jne    c0001a46 <dlmallinfo+0x1e>
c0001a3c:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001a41:	e8 26 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c0001a46:	a1 2c 61 02 c0       	mov    eax,ds:0xc002612c
c0001a4b:	31 ed                	xor    ebp,ebp
c0001a4d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a50:	31 c9                	xor    ecx,ecx
c0001a52:	83 e0 fc             	and    eax,0xfffffffc
c0001a55:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a59:	31 c0                	xor    eax,eax
c0001a5b:	8b 14 85 04 61 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9efc]
c0001a62:	85 d2                	test   edx,edx
c0001a64:	74 0e                	je     c0001a74 <dlmallinfo+0x4c>
c0001a66:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001a69:	45                   	inc    ebp
c0001a6a:	83 e6 fc             	and    esi,0xfffffffc
c0001a6d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001a70:	01 f1                	add    ecx,esi
c0001a72:	eb ee                	jmp    c0001a62 <dlmallinfo+0x3a>
c0001a74:	40                   	inc    eax
c0001a75:	83 f8 0a             	cmp    eax,0xa
c0001a78:	75 e1                	jne    c0001a5b <dlmallinfo+0x33>
c0001a7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a7e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001a85:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001a88:	b8 34 61 02 c0       	mov    eax,0xc0026134
c0001a8d:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001a90:	39 f0                	cmp    eax,esi
c0001a92:	74 10                	je     c0001aa4 <dlmallinfo+0x7c>
c0001a94:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a97:	ff 04 24             	inc    DWORD PTR [esp]
c0001a9a:	83 e7 fc             	and    edi,0xfffffffc
c0001a9d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001aa0:	01 fa                	add    edx,edi
c0001aa2:	eb ec                	jmp    c0001a90 <dlmallinfo+0x68>
c0001aa4:	83 c0 08             	add    eax,0x8
c0001aa7:	3d 2c 64 02 c0       	cmp    eax,0xc002642c
c0001aac:	75 df                	jne    c0001a8d <dlmallinfo+0x65>
c0001aae:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001ab1:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001ab4:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001ab7:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c0001abc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001abf:	89 03                	mov    DWORD PTR [ebx],eax
c0001ac1:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001ac4:	8b 35 50 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026450
c0001aca:	29 d0                	sub    eax,edx
c0001acc:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001acf:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001ad2:	8b 35 64 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026464
c0001ad8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001adc:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001adf:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001ae2:	8b 35 74 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026474
c0001ae8:	89 d8                	mov    eax,ebx
c0001aea:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001aed:	83 c4 08             	add    esp,0x8
c0001af0:	5b                   	pop    ebx
c0001af1:	5e                   	pop    esi
c0001af2:	5f                   	pop    edi
c0001af3:	5d                   	pop    ebp
c0001af4:	c2 04 00             	ret    0x4

c0001af7 <dlmalloc_stats>:
c0001af7:	83 ec 30             	sub    esp,0x30
c0001afa:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001afe:	50                   	push   eax
c0001aff:	e8 24 ff ff ff       	call   c0001a28 <dlmallinfo>
c0001b04:	83 c4 30             	add    esp,0x30
c0001b07:	c3                   	ret    

c0001b08 <dlmallopt>:
c0001b08:	56                   	push   esi
c0001b09:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001b0e:	53                   	push   ebx
c0001b0f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b13:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b17:	e8 50 f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b1c:	8d 46 04             	lea    eax,[esi+0x4]
c0001b1f:	83 f8 05             	cmp    eax,0x5
c0001b22:	77 67                	ja     c0001b8b <dlmallopt+0x83>
c0001b24:	ff 24 85 a4 05 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdfa5c]
c0001b2b:	83 fb 50             	cmp    ebx,0x50
c0001b2e:	77 5b                	ja     c0001b8b <dlmallopt+0x83>
c0001b30:	ba 08 00 00 00       	mov    edx,0x8
c0001b35:	85 db                	test   ebx,ebx
c0001b37:	74 12                	je     c0001b4b <dlmallopt+0x43>
c0001b39:	83 c3 0b             	add    ebx,0xb
c0001b3c:	ba 10 00 00 00       	mov    edx,0x10
c0001b41:	83 fb 0f             	cmp    ebx,0xf
c0001b44:	76 05                	jbe    c0001b4b <dlmallopt+0x43>
c0001b46:	89 da                	mov    edx,ebx
c0001b48:	83 e2 f8             	and    edx,0xfffffff8
c0001b4b:	a1 00 61 02 c0       	mov    eax,ds:0xc0026100
c0001b50:	83 e0 03             	and    eax,0x3
c0001b53:	09 d0                	or     eax,edx
c0001b55:	a3 00 61 02 c0       	mov    ds:0xc0026100,eax
c0001b5a:	eb 31                	jmp    c0001b8d <dlmallopt+0x85>
c0001b5c:	89 1d 44 64 02 c0    	mov    DWORD PTR ds:0xc0026444,ebx
c0001b62:	eb 06                	jmp    c0001b6a <dlmallopt+0x62>
c0001b64:	89 1d 48 64 02 c0    	mov    DWORD PTR ds:0xc0026448,ebx
c0001b6a:	be 01 00 00 00       	mov    esi,0x1
c0001b6f:	eb 1c                	jmp    c0001b8d <dlmallopt+0x85>
c0001b71:	89 1d 4c 64 02 c0    	mov    DWORD PTR ds:0xc002644c,ebx
c0001b77:	eb f1                	jmp    c0001b6a <dlmallopt+0x62>
c0001b79:	31 f6                	xor    esi,esi
c0001b7b:	85 db                	test   ebx,ebx
c0001b7d:	75 0e                	jne    c0001b8d <dlmallopt+0x85>
c0001b7f:	c7 05 54 64 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026454,0x0
c0001b89:	eb df                	jmp    c0001b6a <dlmallopt+0x62>
c0001b8b:	31 f6                	xor    esi,esi
c0001b8d:	89 f0                	mov    eax,esi
c0001b8f:	5b                   	pop    ebx
c0001b90:	5e                   	pop    esi
c0001b91:	c3                   	ret    
c0001b92:	66 90                	xchg   ax,ax

c0001b94 <isblank>:
c0001b94:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b99:	74 09                	je     c0001ba4 <isblank+0x10>
c0001b9b:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001ba0:	75 0a                	jne    c0001bac <isblank+0x18>
c0001ba2:	66 90                	xchg   ax,ax
c0001ba4:	b8 01 00 00 00       	mov    eax,0x1
c0001ba9:	c3                   	ret    
c0001baa:	66 90                	xchg   ax,ax
c0001bac:	b8 00 00 00 00       	mov    eax,0x0
c0001bb1:	c3                   	ret    
c0001bb2:	66 90                	xchg   ax,ax

c0001bb4 <iscntrl>:
c0001bb4:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001bb9:	7e 09                	jle    c0001bc4 <iscntrl+0x10>
c0001bbb:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001bc0:	75 0a                	jne    c0001bcc <iscntrl+0x18>
c0001bc2:	66 90                	xchg   ax,ax
c0001bc4:	b8 01 00 00 00       	mov    eax,0x1
c0001bc9:	c3                   	ret    
c0001bca:	66 90                	xchg   ax,ax
c0001bcc:	b8 00 00 00 00       	mov    eax,0x0
c0001bd1:	c3                   	ret    
c0001bd2:	66 90                	xchg   ax,ax

c0001bd4 <isdigit>:
c0001bd4:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001bd9:	7e 0d                	jle    c0001be8 <isdigit+0x14>
c0001bdb:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001be0:	7f 06                	jg     c0001be8 <isdigit+0x14>
c0001be2:	b8 01 00 00 00       	mov    eax,0x1
c0001be7:	c3                   	ret    
c0001be8:	b8 00 00 00 00       	mov    eax,0x0
c0001bed:	c3                   	ret    
c0001bee:	66 90                	xchg   ax,ax

c0001bf0 <islower>:
c0001bf0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001bf5:	7e 0d                	jle    c0001c04 <islower+0x14>
c0001bf7:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001bfc:	7f 06                	jg     c0001c04 <islower+0x14>
c0001bfe:	b8 01 00 00 00       	mov    eax,0x1
c0001c03:	c3                   	ret    
c0001c04:	b8 00 00 00 00       	mov    eax,0x0
c0001c09:	c3                   	ret    
c0001c0a:	66 90                	xchg   ax,ax

c0001c0c <isspace>:
c0001c0c:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001c11:	7c 19                	jl     c0001c2c <isspace+0x20>
c0001c13:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001c18:	7e 0a                	jle    c0001c24 <isspace+0x18>
c0001c1a:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c1f:	75 0b                	jne    c0001c2c <isspace+0x20>
c0001c21:	8d 76 00             	lea    esi,[esi+0x0]
c0001c24:	b8 01 00 00 00       	mov    eax,0x1
c0001c29:	c3                   	ret    
c0001c2a:	66 90                	xchg   ax,ax
c0001c2c:	b8 00 00 00 00       	mov    eax,0x0
c0001c31:	c3                   	ret    
c0001c32:	66 90                	xchg   ax,ax

c0001c34 <isupper>:
c0001c34:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001c39:	7e 0d                	jle    c0001c48 <isupper+0x14>
c0001c3b:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001c40:	7f 06                	jg     c0001c48 <isupper+0x14>
c0001c42:	b8 01 00 00 00       	mov    eax,0x1
c0001c47:	c3                   	ret    
c0001c48:	b8 00 00 00 00       	mov    eax,0x0
c0001c4d:	c3                   	ret    
c0001c4e:	66 90                	xchg   ax,ax

c0001c50 <isalpha>:
c0001c50:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c54:	e8 db ff ff ff       	call   c0001c34 <isupper>
c0001c59:	83 c4 04             	add    esp,0x4
c0001c5c:	85 c0                	test   eax,eax
c0001c5e:	75 10                	jne    c0001c70 <isalpha+0x20>
c0001c60:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c64:	e8 87 ff ff ff       	call   c0001bf0 <islower>
c0001c69:	83 c4 04             	add    esp,0x4
c0001c6c:	85 c0                	test   eax,eax
c0001c6e:	74 08                	je     c0001c78 <isalpha+0x28>
c0001c70:	b8 01 00 00 00       	mov    eax,0x1
c0001c75:	c3                   	ret    
c0001c76:	66 90                	xchg   ax,ax
c0001c78:	b8 00 00 00 00       	mov    eax,0x0
c0001c7d:	c3                   	ret    
c0001c7e:	66 90                	xchg   ax,ax

c0001c80 <isalnum>:
c0001c80:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c84:	e8 c7 ff ff ff       	call   c0001c50 <isalpha>
c0001c89:	83 c4 04             	add    esp,0x4
c0001c8c:	85 c0                	test   eax,eax
c0001c8e:	75 10                	jne    c0001ca0 <isalnum+0x20>
c0001c90:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c94:	e8 3b ff ff ff       	call   c0001bd4 <isdigit>
c0001c99:	83 c4 04             	add    esp,0x4
c0001c9c:	85 c0                	test   eax,eax
c0001c9e:	74 08                	je     c0001ca8 <isalnum+0x28>
c0001ca0:	b8 01 00 00 00       	mov    eax,0x1
c0001ca5:	c3                   	ret    
c0001ca6:	66 90                	xchg   ax,ax
c0001ca8:	b8 00 00 00 00       	mov    eax,0x0
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax

c0001cb0 <ispunct>:
c0001cb0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cb4:	e8 c7 ff ff ff       	call   c0001c80 <isalnum>
c0001cb9:	83 c4 04             	add    esp,0x4
c0001cbc:	85 c0                	test   eax,eax
c0001cbe:	75 28                	jne    c0001ce8 <ispunct+0x38>
c0001cc0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cc4:	e8 43 ff ff ff       	call   c0001c0c <isspace>
c0001cc9:	83 c4 04             	add    esp,0x4
c0001ccc:	85 c0                	test   eax,eax
c0001cce:	75 18                	jne    c0001ce8 <ispunct+0x38>
c0001cd0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cd4:	e8 db fe ff ff       	call   c0001bb4 <iscntrl>
c0001cd9:	83 c4 04             	add    esp,0x4
c0001cdc:	85 c0                	test   eax,eax
c0001cde:	75 08                	jne    c0001ce8 <ispunct+0x38>
c0001ce0:	b8 01 00 00 00       	mov    eax,0x1
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax
c0001ce8:	b8 00 00 00 00       	mov    eax,0x0
c0001ced:	c3                   	ret    
c0001cee:	66 90                	xchg   ax,ax

c0001cf0 <isgraph>:
c0001cf0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cf4:	e8 87 ff ff ff       	call   c0001c80 <isalnum>
c0001cf9:	83 c4 04             	add    esp,0x4
c0001cfc:	85 c0                	test   eax,eax
c0001cfe:	75 10                	jne    c0001d10 <isgraph+0x20>
c0001d00:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d04:	e8 a7 ff ff ff       	call   c0001cb0 <ispunct>
c0001d09:	83 c4 04             	add    esp,0x4
c0001d0c:	85 c0                	test   eax,eax
c0001d0e:	74 08                	je     c0001d18 <isgraph+0x28>
c0001d10:	b8 01 00 00 00       	mov    eax,0x1
c0001d15:	c3                   	ret    
c0001d16:	66 90                	xchg   ax,ax
c0001d18:	b8 00 00 00 00       	mov    eax,0x0
c0001d1d:	c3                   	ret    
c0001d1e:	66 90                	xchg   ax,ax

c0001d20 <isprint>:
c0001d20:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d24:	e8 c7 ff ff ff       	call   c0001cf0 <isgraph>
c0001d29:	83 c4 04             	add    esp,0x4
c0001d2c:	85 c0                	test   eax,eax
c0001d2e:	75 08                	jne    c0001d38 <isprint+0x18>
c0001d30:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d35:	75 09                	jne    c0001d40 <isprint+0x20>
c0001d37:	90                   	nop
c0001d38:	b8 01 00 00 00       	mov    eax,0x1
c0001d3d:	c3                   	ret    
c0001d3e:	66 90                	xchg   ax,ax
c0001d40:	b8 00 00 00 00       	mov    eax,0x0
c0001d45:	c3                   	ret    
c0001d46:	66 90                	xchg   ax,ax

c0001d48 <isxdigit>:
c0001d48:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d4c:	e8 83 fe ff ff       	call   c0001bd4 <isdigit>
c0001d51:	83 c4 04             	add    esp,0x4
c0001d54:	85 c0                	test   eax,eax
c0001d56:	75 20                	jne    c0001d78 <isxdigit+0x30>
c0001d58:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001d5d:	7e 09                	jle    c0001d68 <isxdigit+0x20>
c0001d5f:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001d64:	7e 12                	jle    c0001d78 <isxdigit+0x30>
c0001d66:	66 90                	xchg   ax,ax
c0001d68:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001d6d:	7e 11                	jle    c0001d80 <isxdigit+0x38>
c0001d6f:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001d74:	7f 0a                	jg     c0001d80 <isxdigit+0x38>
c0001d76:	66 90                	xchg   ax,ax
c0001d78:	b8 01 00 00 00       	mov    eax,0x1
c0001d7d:	c3                   	ret    
c0001d7e:	66 90                	xchg   ax,ax
c0001d80:	b8 00 00 00 00       	mov    eax,0x0
c0001d85:	c3                   	ret    

c0001d86 <disk_status>:
c0001d86:	31 c0                	xor    eax,eax
c0001d88:	c3                   	ret    

c0001d89 <disk_initialize>:
c0001d89:	31 c0                	xor    eax,eax
c0001d8b:	c3                   	ret    

c0001d8c <disk_read>:
c0001d8c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d91:	0f b6 04 85 20 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37e0]
c0001d99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d9d:	e9 7e 7d 01 00       	jmp    c0019b20 <fatWrapperReadDisk>

c0001da2 <disk_write>:
c0001da2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001da7:	0f b6 04 85 20 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37e0]
c0001daf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001db3:	e9 a8 7d 01 00       	jmp    c0019b60 <fatWrapperWriteDisk>

c0001db8 <disk_ioctl>:
c0001db8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001dbd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001dc1:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dc6:	0f b6 04 85 20 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37e0]
c0001dce:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001dd2:	e9 c9 7d 01 00       	jmp    c0019ba0 <fatWrapperIoctl>

c0001dd7 <ld_word>:
c0001dd7:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001ddb:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001dde:	c1 e2 08             	shl    edx,0x8
c0001de1:	09 d0                	or     eax,edx
c0001de3:	c3                   	ret    

c0001de4 <ld_dword>:
c0001de4:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001de8:	89 d1                	mov    ecx,edx
c0001dea:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001dee:	c1 e1 08             	shl    ecx,0x8
c0001df1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001df4:	09 ca                	or     edx,ecx
c0001df6:	c1 e2 08             	shl    edx,0x8
c0001df9:	09 d0                	or     eax,edx
c0001dfb:	c3                   	ret    

c0001dfc <st_word>:
c0001dfc:	66 89 10             	mov    WORD PTR [eax],dx
c0001dff:	c3                   	ret    

c0001e00 <st_dword>:
c0001e00:	89 10                	mov    DWORD PTR [eax],edx
c0001e02:	c3                   	ret    

c0001e03 <mem_cpy>:
c0001e03:	85 c9                	test   ecx,ecx
c0001e05:	74 10                	je     c0001e17 <mem_cpy+0x14>
c0001e07:	57                   	push   edi
c0001e08:	01 c1                	add    ecx,eax
c0001e0a:	56                   	push   esi
c0001e0b:	89 c7                	mov    edi,eax
c0001e0d:	89 d6                	mov    esi,edx
c0001e0f:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001e10:	39 f9                	cmp    ecx,edi
c0001e12:	75 fb                	jne    c0001e0f <mem_cpy+0xc>
c0001e14:	5e                   	pop    esi
c0001e15:	5f                   	pop    edi
c0001e16:	c3                   	ret    
c0001e17:	c3                   	ret    

c0001e18 <mem_set>:
c0001e18:	01 c1                	add    ecx,eax
c0001e1a:	40                   	inc    eax
c0001e1b:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001e1e:	39 c8                	cmp    eax,ecx
c0001e20:	75 f8                	jne    c0001e1a <mem_set+0x2>
c0001e22:	c3                   	ret    

c0001e23 <mem_cmp>:
c0001e23:	57                   	push   edi
c0001e24:	56                   	push   esi
c0001e25:	89 c6                	mov    esi,eax
c0001e27:	53                   	push   ebx
c0001e28:	46                   	inc    esi
c0001e29:	42                   	inc    edx
c0001e2a:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001e2e:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001e32:	29 fb                	sub    ebx,edi
c0001e34:	89 cf                	mov    edi,ecx
c0001e36:	29 f7                	sub    edi,esi
c0001e38:	01 c7                	add    edi,eax
c0001e3a:	74 04                	je     c0001e40 <mem_cmp+0x1d>
c0001e3c:	85 db                	test   ebx,ebx
c0001e3e:	74 e8                	je     c0001e28 <mem_cmp+0x5>
c0001e40:	89 d8                	mov    eax,ebx
c0001e42:	5b                   	pop    ebx
c0001e43:	5e                   	pop    esi
c0001e44:	5f                   	pop    edi
c0001e45:	c3                   	ret    

c0001e46 <chk_chr>:
c0001e46:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001e49:	85 c9                	test   ecx,ecx
c0001e4b:	74 07                	je     c0001e54 <chk_chr+0xe>
c0001e4d:	39 d1                	cmp    ecx,edx
c0001e4f:	74 03                	je     c0001e54 <chk_chr+0xe>
c0001e51:	40                   	inc    eax
c0001e52:	eb f2                	jmp    c0001e46 <chk_chr>
c0001e54:	89 c8                	mov    eax,ecx
c0001e56:	c3                   	ret    

c0001e57 <dbc_1st>:
c0001e57:	31 c0                	xor    eax,eax
c0001e59:	c3                   	ret    

c0001e5a <dbc_2nd>:
c0001e5a:	31 c0                	xor    eax,eax
c0001e5c:	c3                   	ret    

c0001e5d <tchar2uni>:
c0001e5d:	57                   	push   edi
c0001e5e:	56                   	push   esi
c0001e5f:	53                   	push   ebx
c0001e60:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001e62:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001e64:	8d 73 01             	lea    esi,[ebx+0x1]
c0001e67:	f6 c1 80             	test   cl,0x80
c0001e6a:	75 0a                	jne    c0001e76 <tchar2uni+0x19>
c0001e6c:	0f b6 d1             	movzx  edx,cl
c0001e6f:	89 f3                	mov    ebx,esi
c0001e71:	e9 b2 00 00 00       	jmp    c0001f28 <tchar2uni+0xcb>
c0001e76:	89 ca                	mov    edx,ecx
c0001e78:	81 e2 e0 00 00 00    	and    edx,0xe0
c0001e7e:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0001e84:	89 ca                	mov    edx,ecx
c0001e86:	75 0a                	jne    c0001e92 <tchar2uni+0x35>
c0001e88:	83 e2 1f             	and    edx,0x1f
c0001e8b:	b9 01 00 00 00       	mov    ecx,0x1
c0001e90:	eb 37                	jmp    c0001ec9 <tchar2uni+0x6c>
c0001e92:	81 e2 f0 00 00 00    	and    edx,0xf0
c0001e98:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0001e9e:	75 0c                	jne    c0001eac <tchar2uni+0x4f>
c0001ea0:	89 ca                	mov    edx,ecx
c0001ea2:	b9 02 00 00 00       	mov    ecx,0x2
c0001ea7:	83 e2 0f             	and    edx,0xf
c0001eaa:	eb 1d                	jmp    c0001ec9 <tchar2uni+0x6c>
c0001eac:	89 cf                	mov    edi,ecx
c0001eae:	83 ca ff             	or     edx,0xffffffff
c0001eb1:	81 e7 f8 00 00 00    	and    edi,0xf8
c0001eb7:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0001ebd:	75 70                	jne    c0001f2f <tchar2uni+0xd2>
c0001ebf:	89 ca                	mov    edx,ecx
c0001ec1:	b9 03 00 00 00       	mov    ecx,0x3
c0001ec6:	83 e2 07             	and    edx,0x7
c0001ec9:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001ecd:	46                   	inc    esi
c0001ece:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001ed1:	89 cf                	mov    edi,ecx
c0001ed3:	81 e7 c0 00 00 00    	and    edi,0xc0
c0001ed9:	83 c7 80             	add    edi,0xffffff80
c0001edc:	75 4e                	jne    c0001f2c <tchar2uni+0xcf>
c0001ede:	c1 e2 06             	shl    edx,0x6
c0001ee1:	83 e1 3f             	and    ecx,0x3f
c0001ee4:	09 ca                	or     edx,ecx
c0001ee6:	39 de                	cmp    esi,ebx
c0001ee8:	75 e3                	jne    c0001ecd <tchar2uni+0x70>
c0001eea:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001eed:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001ef3:	77 37                	ja     c0001f2c <tchar2uni+0xcf>
c0001ef5:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001efb:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f01:	76 29                	jbe    c0001f2c <tchar2uni+0xcf>
c0001f03:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001f09:	76 1d                	jbe    c0001f28 <tchar2uni+0xcb>
c0001f0b:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001f11:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001f17:	c1 e1 06             	shl    ecx,0x6
c0001f1a:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001f20:	09 ca                	or     edx,ecx
c0001f22:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001f28:	89 18                	mov    DWORD PTR [eax],ebx
c0001f2a:	eb 03                	jmp    c0001f2f <tchar2uni+0xd2>
c0001f2c:	83 ca ff             	or     edx,0xffffffff
c0001f2f:	5b                   	pop    ebx
c0001f30:	89 d0                	mov    eax,edx
c0001f32:	5e                   	pop    esi
c0001f33:	5f                   	pop    edi
c0001f34:	c3                   	ret    

c0001f35 <put_utf>:
c0001f35:	53                   	push   ebx
c0001f36:	83 f8 7f             	cmp    eax,0x7f
c0001f39:	89 c3                	mov    ebx,eax
c0001f3b:	b0 00                	mov    al,0x0
c0001f3d:	77 11                	ja     c0001f50 <put_utf+0x1b>
c0001f3f:	85 c9                	test   ecx,ecx
c0001f41:	0f 84 e5 00 00 00    	je     c000202c <put_utf+0xf7>
c0001f47:	88 1a                	mov    BYTE PTR [edx],bl
c0001f49:	b0 01                	mov    al,0x1
c0001f4b:	e9 dc 00 00 00       	jmp    c000202c <put_utf+0xf7>
c0001f50:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001f56:	77 23                	ja     c0001f7b <put_utf+0x46>
c0001f58:	83 f9 01             	cmp    ecx,0x1
c0001f5b:	0f 86 cb 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f61:	89 d8                	mov    eax,ebx
c0001f63:	83 e3 3f             	and    ebx,0x3f
c0001f66:	c1 e8 06             	shr    eax,0x6
c0001f69:	83 cb 80             	or     ebx,0xffffff80
c0001f6c:	83 c8 c0             	or     eax,0xffffffc0
c0001f6f:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001f72:	88 02                	mov    BYTE PTR [edx],al
c0001f74:	b0 02                	mov    al,0x2
c0001f76:	e9 b1 00 00 00       	jmp    c000202c <put_utf+0xf7>
c0001f7b:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001f81:	77 40                	ja     c0001fc3 <put_utf+0x8e>
c0001f83:	83 f9 02             	cmp    ecx,0x2
c0001f86:	0f 86 a0 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f8c:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001f92:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f98:	0f 86 8e 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f9e:	89 d8                	mov    eax,ebx
c0001fa0:	c1 e8 0c             	shr    eax,0xc
c0001fa3:	83 c8 e0             	or     eax,0xffffffe0
c0001fa6:	88 02                	mov    BYTE PTR [edx],al
c0001fa8:	89 d8                	mov    eax,ebx
c0001faa:	83 e3 3f             	and    ebx,0x3f
c0001fad:	c1 e8 06             	shr    eax,0x6
c0001fb0:	83 cb 80             	or     ebx,0xffffff80
c0001fb3:	83 e0 3f             	and    eax,0x3f
c0001fb6:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001fb9:	83 c8 80             	or     eax,0xffffff80
c0001fbc:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001fbf:	b0 03                	mov    al,0x3
c0001fc1:	eb 69                	jmp    c000202c <put_utf+0xf7>
c0001fc3:	83 f9 03             	cmp    ecx,0x3
c0001fc6:	76 64                	jbe    c000202c <put_utf+0xf7>
c0001fc8:	89 d9                	mov    ecx,ebx
c0001fca:	0f b7 c3             	movzx  eax,bx
c0001fcd:	66 31 c9             	xor    cx,cx
c0001fd0:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001fd6:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001fdc:	c1 e9 06             	shr    ecx,0x6
c0001fdf:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001fe5:	77 43                	ja     c000202a <put_utf+0xf5>
c0001fe7:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001fed:	77 3b                	ja     c000202a <put_utf+0xf5>
c0001fef:	09 cb                	or     ebx,ecx
c0001ff1:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ff7:	89 d8                	mov    eax,ebx
c0001ff9:	c1 e8 12             	shr    eax,0x12
c0001ffc:	83 c8 f0             	or     eax,0xfffffff0
c0001fff:	88 02                	mov    BYTE PTR [edx],al
c0002001:	89 d8                	mov    eax,ebx
c0002003:	c1 e8 0c             	shr    eax,0xc
c0002006:	83 e0 3f             	and    eax,0x3f
c0002009:	83 c8 80             	or     eax,0xffffff80
c000200c:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c000200f:	89 d8                	mov    eax,ebx
c0002011:	83 e3 3f             	and    ebx,0x3f
c0002014:	c1 e8 06             	shr    eax,0x6
c0002017:	83 cb 80             	or     ebx,0xffffff80
c000201a:	83 e0 3f             	and    eax,0x3f
c000201d:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002020:	83 c8 80             	or     eax,0xffffff80
c0002023:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0002026:	b0 04                	mov    al,0x4
c0002028:	eb 02                	jmp    c000202c <put_utf+0xf7>
c000202a:	31 c0                	xor    eax,eax
c000202c:	5b                   	pop    ebx
c000202d:	c3                   	ret    

c000202e <clst2sect>:
c000202e:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002031:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0002034:	83 ea 02             	sub    edx,0x2
c0002037:	39 ca                	cmp    edx,ecx
c0002039:	76 0d                	jbe    c0002048 <clst2sect+0x1a>
c000203b:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000203f:	0f af d1             	imul   edx,ecx
c0002042:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0002045:	89 d0                	mov    eax,edx
c0002047:	c3                   	ret    
c0002048:	31 c0                	xor    eax,eax
c000204a:	c3                   	ret    

c000204b <pick_lfn>:
c000204b:	55                   	push   ebp
c000204c:	57                   	push   edi
c000204d:	89 c7                	mov    edi,eax
c000204f:	56                   	push   esi
c0002050:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002053:	53                   	push   ebx
c0002054:	89 d3                	mov    ebx,edx
c0002056:	e8 7c fd ff ff       	call   c0001dd7 <ld_word>
c000205b:	66 85 c0             	test   ax,ax
c000205e:	74 04                	je     c0002064 <pick_lfn+0x19>
c0002060:	31 c0                	xor    eax,eax
c0002062:	eb 62                	jmp    c00020c6 <pick_lfn+0x7b>
c0002064:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0002067:	bd 01 00 00 00       	mov    ebp,0x1
c000206c:	83 e1 bf             	and    ecx,0xffffffbf
c000206f:	31 f6                	xor    esi,esi
c0002071:	49                   	dec    ecx
c0002072:	6b c9 0d             	imul   ecx,ecx,0xd
c0002075:	0f b6 86 00 07 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffdf900]
c000207c:	01 d8                	add    eax,ebx
c000207e:	e8 54 fd ff ff       	call   c0001dd7 <ld_word>
c0002083:	66 85 ed             	test   bp,bp
c0002086:	74 11                	je     c0002099 <pick_lfn+0x4e>
c0002088:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c000208e:	77 d0                	ja     c0002060 <pick_lfn+0x15>
c0002090:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c0002094:	89 c5                	mov    ebp,eax
c0002096:	41                   	inc    ecx
c0002097:	eb 0a                	jmp    c00020a3 <pick_lfn+0x58>
c0002099:	0f b7 c0             	movzx  eax,ax
c000209c:	3d ff ff 00 00       	cmp    eax,0xffff
c00020a1:	75 bd                	jne    c0002060 <pick_lfn+0x15>
c00020a3:	46                   	inc    esi
c00020a4:	83 fe 0d             	cmp    esi,0xd
c00020a7:	75 cc                	jne    c0002075 <pick_lfn+0x2a>
c00020a9:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00020ac:	74 13                	je     c00020c1 <pick_lfn+0x76>
c00020ae:	66 85 ed             	test   bp,bp
c00020b1:	74 0e                	je     c00020c1 <pick_lfn+0x76>
c00020b3:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020b9:	77 a5                	ja     c0002060 <pick_lfn+0x15>
c00020bb:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00020c1:	b8 01 00 00 00       	mov    eax,0x1
c00020c6:	5b                   	pop    ebx
c00020c7:	5e                   	pop    esi
c00020c8:	5f                   	pop    edi
c00020c9:	5d                   	pop    ebp
c00020ca:	c3                   	ret    

c00020cb <put_lfn>:
c00020cb:	55                   	push   ebp
c00020cc:	57                   	push   edi
c00020cd:	89 d7                	mov    edi,edx
c00020cf:	56                   	push   esi
c00020d0:	31 f6                	xor    esi,esi
c00020d2:	53                   	push   ebx
c00020d3:	83 ec 0c             	sub    esp,0xc
c00020d6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00020da:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00020de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00020e2:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00020e8:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c00020eb:	8d 42 1a             	lea    eax,[edx+0x1a]
c00020ee:	31 d2                	xor    edx,edx
c00020f0:	e8 07 fd ff ff       	call   c0001dfc <st_word>
c00020f5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00020fc:	0f b6 d9             	movzx  ebx,cl
c00020ff:	4b                   	dec    ebx
c0002100:	6b db 0d             	imul   ebx,ebx,0xd
c0002103:	0f b7 c6             	movzx  eax,si
c0002106:	3d ff ff 00 00       	cmp    eax,0xffff
c000210b:	74 09                	je     c0002116 <put_lfn+0x4b>
c000210d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002111:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c0002115:	43                   	inc    ebx
c0002116:	0f b7 ee             	movzx  ebp,si
c0002119:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000211c:	89 ea                	mov    edx,ebp
c000211e:	0f b6 80 00 07 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdf900]
c0002125:	01 f8                	add    eax,edi
c0002127:	e8 d0 fc ff ff       	call   c0001dfc <st_word>
c000212c:	85 ed                	test   ebp,ebp
c000212e:	75 05                	jne    c0002135 <put_lfn+0x6a>
c0002130:	be ff ff 00 00       	mov    esi,0xffff
c0002135:	ff 04 24             	inc    DWORD PTR [esp]
c0002138:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c000213c:	75 c5                	jne    c0002103 <put_lfn+0x38>
c000213e:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002144:	74 0b                	je     c0002151 <put_lfn+0x86>
c0002146:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000214a:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000214f:	75 07                	jne    c0002158 <put_lfn+0x8d>
c0002151:	83 c9 40             	or     ecx,0x40
c0002154:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002158:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000215c:	88 07                	mov    BYTE PTR [edi],al
c000215e:	83 c4 0c             	add    esp,0xc
c0002161:	5b                   	pop    ebx
c0002162:	5e                   	pop    esi
c0002163:	5f                   	pop    edi
c0002164:	5d                   	pop    ebp
c0002165:	c3                   	ret    

c0002166 <gen_numname>:
c0002166:	57                   	push   edi
c0002167:	89 cf                	mov    edi,ecx
c0002169:	56                   	push   esi
c000216a:	b9 0b 00 00 00       	mov    ecx,0xb
c000216f:	53                   	push   ebx
c0002170:	89 c6                	mov    esi,eax
c0002172:	83 ec 10             	sub    esp,0x10
c0002175:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002179:	e8 85 fc ff ff       	call   c0001e03 <mem_cpy>
c000217e:	83 fb 05             	cmp    ebx,0x5
c0002181:	76 30                	jbe    c00021b3 <gen_numname+0x4d>
c0002183:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002186:	66 85 c0             	test   ax,ax
c0002189:	74 28                	je     c00021b3 <gen_numname+0x4d>
c000218b:	83 c7 02             	add    edi,0x2
c000218e:	ba 10 00 00 00       	mov    edx,0x10
c0002193:	01 db                	add    ebx,ebx
c0002195:	89 c1                	mov    ecx,eax
c0002197:	c1 e0 10             	shl    eax,0x10
c000219a:	83 e1 01             	and    ecx,0x1
c000219d:	c1 e8 11             	shr    eax,0x11
c00021a0:	01 cb                	add    ebx,ecx
c00021a2:	0f ba e3 10          	bt     ebx,0x10
c00021a6:	73 06                	jae    c00021ae <gen_numname+0x48>
c00021a8:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00021ae:	4a                   	dec    edx
c00021af:	75 e2                	jne    c0002193 <gen_numname+0x2d>
c00021b1:	eb d0                	jmp    c0002183 <gen_numname+0x1d>
c00021b3:	b8 07 00 00 00       	mov    eax,0x7
c00021b8:	89 d9                	mov    ecx,ebx
c00021ba:	83 e1 0f             	and    ecx,0xf
c00021bd:	8d 79 30             	lea    edi,[ecx+0x30]
c00021c0:	89 fa                	mov    edx,edi
c00021c2:	83 ff 39             	cmp    edi,0x39
c00021c5:	76 03                	jbe    c00021ca <gen_numname+0x64>
c00021c7:	8d 51 37             	lea    edx,[ecx+0x37]
c00021ca:	8d 48 ff             	lea    ecx,[eax-0x1]
c00021cd:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00021d1:	89 da                	mov    edx,ebx
c00021d3:	c1 ea 04             	shr    edx,0x4
c00021d6:	83 fb 0f             	cmp    ebx,0xf
c00021d9:	76 06                	jbe    c00021e1 <gen_numname+0x7b>
c00021db:	89 c8                	mov    eax,ecx
c00021dd:	89 d3                	mov    ebx,edx
c00021df:	eb d7                	jmp    c00021b8 <gen_numname+0x52>
c00021e1:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00021e6:	31 d2                	xor    edx,edx
c00021e8:	8d 58 fe             	lea    ebx,[eax-0x2]
c00021eb:	8d 04 16             	lea    eax,[esi+edx*1]
c00021ee:	39 ca                	cmp    edx,ecx
c00021f0:	73 19                	jae    c000220b <gen_numname+0xa5>
c00021f2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00021f5:	83 f8 20             	cmp    eax,0x20
c00021f8:	74 11                	je     c000220b <gen_numname+0xa5>
c00021fa:	e8 58 fc ff ff       	call   c0001e57 <dbc_1st>
c00021ff:	85 c0                	test   eax,eax
c0002201:	74 05                	je     c0002208 <gen_numname+0xa2>
c0002203:	39 d3                	cmp    ebx,edx
c0002205:	74 04                	je     c000220b <gen_numname+0xa5>
c0002207:	42                   	inc    edx
c0002208:	42                   	inc    edx
c0002209:	eb e0                	jmp    c00021eb <gen_numname+0x85>
c000220b:	b0 20                	mov    al,0x20
c000220d:	83 f9 07             	cmp    ecx,0x7
c0002210:	77 05                	ja     c0002217 <gen_numname+0xb1>
c0002212:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002216:	41                   	inc    ecx
c0002217:	42                   	inc    edx
c0002218:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c000221c:	83 fa 07             	cmp    edx,0x7
c000221f:	76 ea                	jbe    c000220b <gen_numname+0xa5>
c0002221:	83 c4 10             	add    esp,0x10
c0002224:	5b                   	pop    ebx
c0002225:	5e                   	pop    esi
c0002226:	5f                   	pop    edi
c0002227:	c3                   	ret    

c0002228 <sum_sfn>:
c0002228:	53                   	push   ebx
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	31 db                	xor    ebx,ebx
c000222d:	0f b6 d1             	movzx  edx,cl
c0002230:	c1 e1 07             	shl    ecx,0x7
c0002233:	d1 ea                	shr    edx,1
c0002235:	09 ca                	or     edx,ecx
c0002237:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c000223a:	43                   	inc    ebx
c000223b:	01 ca                	add    edx,ecx
c000223d:	83 fb 0b             	cmp    ebx,0xb
c0002240:	88 d1                	mov    cl,dl
c0002242:	75 e9                	jne    c000222d <sum_sfn+0x5>
c0002244:	88 d0                	mov    al,dl
c0002246:	5b                   	pop    ebx
c0002247:	c3                   	ret    

c0002248 <get_ldnumber>:
c0002248:	8b 10                	mov    edx,DWORD PTR [eax]
c000224a:	85 d2                	test   edx,edx
c000224c:	74 14                	je     c0002262 <get_ldnumber+0x1a>
c000224e:	56                   	push   esi
c000224f:	53                   	push   ebx
c0002250:	89 d3                	mov    ebx,edx
c0002252:	43                   	inc    ebx
c0002253:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002256:	80 f9 1f             	cmp    cl,0x1f
c0002259:	76 0d                	jbe    c0002268 <get_ldnumber+0x20>
c000225b:	80 f9 3a             	cmp    cl,0x3a
c000225e:	75 f2                	jne    c0002252 <get_ldnumber+0xa>
c0002260:	eb 0a                	jmp    c000226c <get_ldnumber+0x24>
c0002262:	83 c9 ff             	or     ecx,0xffffffff
c0002265:	89 c8                	mov    eax,ecx
c0002267:	c3                   	ret    
c0002268:	31 c9                	xor    ecx,ecx
c000226a:	eb 24                	jmp    c0002290 <get_ldnumber+0x48>
c000226c:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000226f:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002272:	80 f9 09             	cmp    cl,0x9
c0002275:	77 16                	ja     c000228d <get_ldnumber+0x45>
c0002277:	83 c2 02             	add    edx,0x2
c000227a:	83 c9 ff             	or     ecx,0xffffffff
c000227d:	39 d3                	cmp    ebx,edx
c000227f:	75 0f                	jne    c0002290 <get_ldnumber+0x48>
c0002281:	89 f2                	mov    edx,esi
c0002283:	89 18                	mov    DWORD PTR [eax],ebx
c0002285:	0f be ca             	movsx  ecx,dl
c0002288:	83 e9 30             	sub    ecx,0x30
c000228b:	eb 03                	jmp    c0002290 <get_ldnumber+0x48>
c000228d:	83 c9 ff             	or     ecx,0xffffffff
c0002290:	89 c8                	mov    eax,ecx
c0002292:	5b                   	pop    ebx
c0002293:	5e                   	pop    esi
c0002294:	c3                   	ret    

c0002295 <validate>:
c0002295:	56                   	push   esi
c0002296:	53                   	push   ebx
c0002297:	89 d6                	mov    esi,edx
c0002299:	51                   	push   ecx
c000229a:	85 c0                	test   eax,eax
c000229c:	75 09                	jne    c00022a7 <validate+0x12>
c000229e:	b8 09 00 00 00       	mov    eax,0x9
c00022a3:	31 c9                	xor    ecx,ecx
c00022a5:	eb 2e                	jmp    c00022d5 <validate+0x40>
c00022a7:	89 c3                	mov    ebx,eax
c00022a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00022ab:	85 c0                	test   eax,eax
c00022ad:	74 ef                	je     c000229e <validate+0x9>
c00022af:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00022b2:	74 ea                	je     c000229e <validate+0x9>
c00022b4:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00022b7:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00022bb:	75 e1                	jne    c000229e <validate+0x9>
c00022bd:	83 ec 0c             	sub    esp,0xc
c00022c0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022c4:	50                   	push   eax
c00022c5:	e8 bc fa ff ff       	call   c0001d86 <disk_status>
c00022ca:	83 c4 10             	add    esp,0x10
c00022cd:	a8 01                	test   al,0x1
c00022cf:	75 cd                	jne    c000229e <validate+0x9>
c00022d1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00022d3:	31 c0                	xor    eax,eax
c00022d5:	89 0e                	mov    DWORD PTR [esi],ecx
c00022d7:	5a                   	pop    edx
c00022d8:	5b                   	pop    ebx
c00022d9:	5e                   	pop    esi
c00022da:	c3                   	ret    

c00022db <sync_window>:
c00022db:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00022df:	74 58                	je     c0002339 <sync_window+0x5e>
c00022e1:	56                   	push   esi
c00022e2:	53                   	push   ebx
c00022e3:	8d 70 34             	lea    esi,[eax+0x34]
c00022e6:	51                   	push   ecx
c00022e7:	89 c3                	mov    ebx,eax
c00022e9:	6a 01                	push   0x1
c00022eb:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00022ee:	56                   	push   esi
c00022ef:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022f3:	50                   	push   eax
c00022f4:	e8 a9 fa ff ff       	call   c0001da2 <disk_write>
c00022f9:	83 c4 10             	add    esp,0x10
c00022fc:	ba 01 00 00 00       	mov    edx,0x1
c0002301:	85 c0                	test   eax,eax
c0002303:	75 2e                	jne    c0002333 <sync_window+0x58>
c0002305:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002308:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000230b:	89 c1                	mov    ecx,eax
c000230d:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002311:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c0002314:	39 d1                	cmp    ecx,edx
c0002316:	73 19                	jae    c0002331 <sync_window+0x56>
c0002318:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000231c:	75 13                	jne    c0002331 <sync_window+0x56>
c000231e:	6a 01                	push   0x1
c0002320:	01 d0                	add    eax,edx
c0002322:	50                   	push   eax
c0002323:	56                   	push   esi
c0002324:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002328:	50                   	push   eax
c0002329:	e8 74 fa ff ff       	call   c0001da2 <disk_write>
c000232e:	83 c4 10             	add    esp,0x10
c0002331:	31 d2                	xor    edx,edx
c0002333:	89 d0                	mov    eax,edx
c0002335:	5a                   	pop    edx
c0002336:	5b                   	pop    ebx
c0002337:	5e                   	pop    esi
c0002338:	c3                   	ret    
c0002339:	31 d2                	xor    edx,edx
c000233b:	89 d0                	mov    eax,edx
c000233d:	c3                   	ret    

c000233e <move_window>:
c000233e:	57                   	push   edi
c000233f:	56                   	push   esi
c0002340:	31 f6                	xor    esi,esi
c0002342:	53                   	push   ebx
c0002343:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002346:	74 32                	je     c000237a <move_window+0x3c>
c0002348:	89 c3                	mov    ebx,eax
c000234a:	89 d7                	mov    edi,edx
c000234c:	e8 8a ff ff ff       	call   c00022db <sync_window>
c0002351:	89 c6                	mov    esi,eax
c0002353:	85 c0                	test   eax,eax
c0002355:	75 23                	jne    c000237a <move_window+0x3c>
c0002357:	6a 01                	push   0x1
c0002359:	8d 43 34             	lea    eax,[ebx+0x34]
c000235c:	57                   	push   edi
c000235d:	50                   	push   eax
c000235e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002362:	50                   	push   eax
c0002363:	e8 24 fa ff ff       	call   c0001d8c <disk_read>
c0002368:	83 c4 10             	add    esp,0x10
c000236b:	85 c0                	test   eax,eax
c000236d:	74 08                	je     c0002377 <move_window+0x39>
c000236f:	be 01 00 00 00       	mov    esi,0x1
c0002374:	83 cf ff             	or     edi,0xffffffff
c0002377:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c000237a:	89 f0                	mov    eax,esi
c000237c:	5b                   	pop    ebx
c000237d:	5e                   	pop    esi
c000237e:	5f                   	pop    edi
c000237f:	c3                   	ret    

c0002380 <check_fs>:
c0002380:	53                   	push   ebx
c0002381:	89 c3                	mov    ebx,eax
c0002383:	83 ec 08             	sub    esp,0x8
c0002386:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000238a:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002391:	e8 a8 ff ff ff       	call   c000233e <move_window>
c0002396:	ba 04 00 00 00       	mov    edx,0x4
c000239b:	85 c0                	test   eax,eax
c000239d:	75 68                	jne    c0002407 <check_fs+0x87>
c000239f:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00023a5:	e8 2d fa ff ff       	call   c0001dd7 <ld_word>
c00023aa:	ba 03 00 00 00       	mov    edx,0x3
c00023af:	66 3d 55 aa          	cmp    ax,0xaa55
c00023b3:	75 52                	jne    c0002407 <check_fs+0x87>
c00023b5:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00023b8:	8d 50 18             	lea    edx,[eax+0x18]
c00023bb:	80 fa 01             	cmp    dl,0x1
c00023be:	76 09                	jbe    c00023c9 <check_fs+0x49>
c00023c0:	ba 02 00 00 00       	mov    edx,0x2
c00023c5:	3c eb                	cmp    al,0xeb
c00023c7:	75 3e                	jne    c0002407 <check_fs+0x87>
c00023c9:	ba 84 2e 02 c0       	mov    edx,0xc0022e84
c00023ce:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00023d1:	b9 03 00 00 00       	mov    ecx,0x3
c00023d6:	e8 48 fa ff ff       	call   c0001e23 <mem_cmp>
c00023db:	31 d2                	xor    edx,edx
c00023dd:	85 c0                	test   eax,eax
c00023df:	74 26                	je     c0002407 <check_fs+0x87>
c00023e1:	ba bc 05 02 c0       	mov    edx,0xc00205bc
c00023e6:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00023ec:	b9 05 00 00 00       	mov    ecx,0x5
c00023f1:	e8 2d fa ff ff       	call   c0001e23 <mem_cmp>
c00023f6:	31 d2                	xor    edx,edx
c00023f8:	85 c0                	test   eax,eax
c00023fa:	74 0b                	je     c0002407 <check_fs+0x87>
c00023fc:	31 d2                	xor    edx,edx
c00023fe:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002402:	0f 95 c2             	setne  dl
c0002405:	01 d2                	add    edx,edx
c0002407:	89 d0                	mov    eax,edx
c0002409:	83 c4 08             	add    esp,0x8
c000240c:	5b                   	pop    ebx
c000240d:	c3                   	ret    

c000240e <find_volume>:
c000240e:	55                   	push   ebp
c000240f:	57                   	push   edi
c0002410:	56                   	push   esi
c0002411:	89 c6                	mov    esi,eax
c0002413:	53                   	push   ebx
c0002414:	89 d3                	mov    ebx,edx
c0002416:	83 ec 2c             	sub    esp,0x2c
c0002419:	31 d2                	xor    edx,edx
c000241b:	e8 60 ff ff ff       	call   c0002380 <check_fs>
c0002420:	83 f8 02             	cmp    eax,0x2
c0002423:	74 06                	je     c000242b <find_volume+0x1d>
c0002425:	77 62                	ja     c0002489 <find_volume+0x7b>
c0002427:	85 db                	test   ebx,ebx
c0002429:	74 5e                	je     c0002489 <find_volume+0x7b>
c000242b:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c000242f:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002435:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c000243b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000243f:	89 cf                	mov    edi,ecx
c0002441:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002445:	89 e8                	mov    eax,ebp
c0002447:	83 c5 10             	add    ebp,0x10
c000244a:	e8 95 f9 ff ff       	call   c0001de4 <ld_dword>
c000244f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002453:	89 01                	mov    DWORD PTR [ecx],eax
c0002455:	83 c1 04             	add    ecx,0x4
c0002458:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000245c:	75 e3                	jne    c0002441 <find_volume+0x33>
c000245e:	31 ed                	xor    ebp,ebp
c0002460:	85 db                	test   ebx,ebx
c0002462:	74 03                	je     c0002467 <find_volume+0x59>
c0002464:	8d 6b ff             	lea    ebp,[ebx-0x1]
c0002467:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c000246a:	b8 03 00 00 00       	mov    eax,0x3
c000246f:	85 d2                	test   edx,edx
c0002471:	74 0c                	je     c000247f <find_volume+0x71>
c0002473:	89 f0                	mov    eax,esi
c0002475:	e8 06 ff ff ff       	call   c0002380 <check_fs>
c000247a:	83 f8 01             	cmp    eax,0x1
c000247d:	76 0a                	jbe    c0002489 <find_volume+0x7b>
c000247f:	85 db                	test   ebx,ebx
c0002481:	75 06                	jne    c0002489 <find_volume+0x7b>
c0002483:	45                   	inc    ebp
c0002484:	83 fd 03             	cmp    ebp,0x3
c0002487:	76 de                	jbe    c0002467 <find_volume+0x59>
c0002489:	83 c4 2c             	add    esp,0x2c
c000248c:	5b                   	pop    ebx
c000248d:	5e                   	pop    esi
c000248e:	5f                   	pop    edi
c000248f:	5d                   	pop    ebp
c0002490:	c3                   	ret    

c0002491 <mount_volume>:
c0002491:	55                   	push   ebp
c0002492:	89 d5                	mov    ebp,edx
c0002494:	57                   	push   edi
c0002495:	89 cf                	mov    edi,ecx
c0002497:	56                   	push   esi
c0002498:	53                   	push   ebx
c0002499:	bb 0b 00 00 00       	mov    ebx,0xb
c000249e:	83 ec 1c             	sub    esp,0x1c
c00024a1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024a7:	e8 9c fd ff ff       	call   c0002248 <get_ldnumber>
c00024ac:	85 c0                	test   eax,eax
c00024ae:	0f 88 c4 02 00 00    	js     c0002778 <mount_volume+0x2e7>
c00024b4:	8b 34 85 a0 64 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9b60]
c00024bb:	89 c2                	mov    edx,eax
c00024bd:	bb 0c 00 00 00       	mov    ebx,0xc
c00024c2:	85 f6                	test   esi,esi
c00024c4:	0f 84 ae 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c00024ca:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00024cd:	83 e7 fe             	and    edi,0xfffffffe
c00024d0:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00024d3:	74 3a                	je     c000250f <mount_volume+0x7e>
c00024d5:	89 04 24             	mov    DWORD PTR [esp],eax
c00024d8:	83 ec 0c             	sub    esp,0xc
c00024db:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00024df:	50                   	push   eax
c00024e0:	e8 a1 f8 ff ff       	call   c0001d86 <disk_status>
c00024e5:	83 c4 10             	add    esp,0x10
c00024e8:	a8 01                	test   al,0x1
c00024ea:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00024ed:	75 20                	jne    c000250f <mount_volume+0x7e>
c00024ef:	31 db                	xor    ebx,ebx
c00024f1:	81 e7 fe 00 00 00    	and    edi,0xfe
c00024f7:	0f 84 7b 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c00024fd:	a8 04                	test   al,0x4
c00024ff:	0f 84 73 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c0002505:	bb 0a 00 00 00       	mov    ebx,0xa
c000250a:	e9 69 02 00 00       	jmp    c0002778 <mount_volume+0x2e7>
c000250f:	83 ec 0c             	sub    esp,0xc
c0002512:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002515:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c0002518:	0f b6 c2             	movzx  eax,dl
c000251b:	bb 03 00 00 00       	mov    ebx,0x3
c0002520:	50                   	push   eax
c0002521:	e8 63 f8 ff ff       	call   c0001d89 <disk_initialize>
c0002526:	83 c4 10             	add    esp,0x10
c0002529:	a8 01                	test   al,0x1
c000252b:	0f 85 47 02 00 00    	jne    c0002778 <mount_volume+0x2e7>
c0002531:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002537:	74 04                	je     c000253d <mount_volume+0xac>
c0002539:	a8 04                	test   al,0x4
c000253b:	75 c8                	jne    c0002505 <mount_volume+0x74>
c000253d:	31 d2                	xor    edx,edx
c000253f:	89 f0                	mov    eax,esi
c0002541:	bb 01 00 00 00       	mov    ebx,0x1
c0002546:	e8 c3 fe ff ff       	call   c000240e <find_volume>
c000254b:	83 f8 04             	cmp    eax,0x4
c000254e:	0f 84 24 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c0002554:	83 f8 01             	cmp    eax,0x1
c0002557:	76 0a                	jbe    c0002563 <mount_volume+0xd2>
c0002559:	bb 0d 00 00 00       	mov    ebx,0xd
c000255e:	e9 15 02 00 00       	jmp    c0002778 <mount_volume+0x2e7>
c0002563:	8d 46 3f             	lea    eax,[esi+0x3f]
c0002566:	e8 6c f8 ff ff       	call   c0001dd7 <ld_word>
c000256b:	66 3d 00 02          	cmp    ax,0x200
c000256f:	75 e8                	jne    c0002559 <mount_volume+0xc8>
c0002571:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002574:	e8 5e f8 ff ff       	call   c0001dd7 <ld_word>
c0002579:	0f b7 c0             	movzx  eax,ax
c000257c:	89 04 24             	mov    DWORD PTR [esp],eax
c000257f:	85 c0                	test   eax,eax
c0002581:	75 0b                	jne    c000258e <mount_volume+0xfd>
c0002583:	8d 46 58             	lea    eax,[esi+0x58]
c0002586:	e8 59 f8 ff ff       	call   c0001de4 <ld_dword>
c000258b:	89 04 24             	mov    DWORD PTR [esp],eax
c000258e:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c0002591:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002595:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002598:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c000259b:	8a 46 44             	mov    al,BYTE PTR [esi+0x44]
c000259e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00025a2:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00025a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00025a9:	48                   	dec    eax
c00025aa:	3c 01                	cmp    al,0x1
c00025ac:	77 ab                	ja     c0002559 <mount_volume+0xc8>
c00025ae:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00025b2:	89 c3                	mov    ebx,eax
c00025b4:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00025b8:	66 85 c0             	test   ax,ax
c00025bb:	74 9c                	je     c0002559 <mount_volume+0xc8>
c00025bd:	8d 40 ff             	lea    eax,[eax-0x1]
c00025c0:	85 d8                	test   eax,ebx
c00025c2:	75 95                	jne    c0002559 <mount_volume+0xc8>
c00025c4:	8d 46 45             	lea    eax,[esi+0x45]
c00025c7:	e8 0b f8 ff ff       	call   c0001dd7 <ld_word>
c00025cc:	89 c7                	mov    edi,eax
c00025ce:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00025d2:	a8 0f                	test   al,0xf
c00025d4:	75 83                	jne    c0002559 <mount_volume+0xc8>
c00025d6:	8d 46 47             	lea    eax,[esi+0x47]
c00025d9:	e8 f9 f7 ff ff       	call   c0001dd7 <ld_word>
c00025de:	0f b7 e8             	movzx  ebp,ax
c00025e1:	85 ed                	test   ebp,ebp
c00025e3:	75 0a                	jne    c00025ef <mount_volume+0x15e>
c00025e5:	8d 46 54             	lea    eax,[esi+0x54]
c00025e8:	e8 f7 f7 ff ff       	call   c0001de4 <ld_dword>
c00025ed:	89 c5                	mov    ebp,eax
c00025ef:	8d 46 42             	lea    eax,[esi+0x42]
c00025f2:	e8 e0 f7 ff ff       	call   c0001dd7 <ld_word>
c00025f7:	0f b7 c8             	movzx  ecx,ax
c00025fa:	85 c9                	test   ecx,ecx
c00025fc:	0f 84 57 ff ff ff    	je     c0002559 <mount_volume+0xc8>
c0002602:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002607:	0f af 04 24          	imul   eax,DWORD PTR [esp]
c000260b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000260f:	0f b7 c7             	movzx  eax,di
c0002612:	c1 e8 04             	shr    eax,0x4
c0002615:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0002619:	01 c8                	add    eax,ecx
c000261b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000261f:	39 c5                	cmp    ebp,eax
c0002621:	0f 82 32 ff ff ff    	jb     c0002559 <mount_volume+0xc8>
c0002627:	29 c5                	sub    ebp,eax
c0002629:	31 d2                	xor    edx,edx
c000262b:	89 e8                	mov    eax,ebp
c000262d:	f7 f3                	div    ebx
c000262f:	39 dd                	cmp    ebp,ebx
c0002631:	0f 82 22 ff ff ff    	jb     c0002559 <mount_volume+0xc8>
c0002637:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c000263c:	0f 87 17 ff ff ff    	ja     c0002559 <mount_volume+0xc8>
c0002642:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002647:	0f 86 1c 01 00 00    	jbe    c0002769 <mount_volume+0x2d8>
c000264d:	bb 03 00 00 00       	mov    ebx,0x3
c0002652:	8d 68 02             	lea    ebp,[eax+0x2]
c0002655:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002659:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000265d:	03 54 24 04          	add    edx,DWORD PTR [esp+0x4]
c0002661:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002664:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002667:	01 c8                	add    eax,ecx
c0002669:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c000266c:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000266f:	83 fb 03             	cmp    ebx,0x3
c0002672:	75 23                	jne    c0002697 <mount_volume+0x206>
c0002674:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002677:	e8 5b f7 ff ff       	call   c0001dd7 <ld_word>
c000267c:	09 c7                	or     edi,eax
c000267e:	66 85 ff             	test   di,di
c0002681:	0f 85 d2 fe ff ff    	jne    c0002559 <mount_volume+0xc8>
c0002687:	8d 46 60             	lea    eax,[esi+0x60]
c000268a:	c1 e5 02             	shl    ebp,0x2
c000268d:	e8 52 f7 ff ff       	call   c0001de4 <ld_dword>
c0002692:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002695:	eb 24                	jmp    c00026bb <mount_volume+0x22a>
c0002697:	66 85 ff             	test   di,di
c000269a:	0f 84 b9 fe ff ff    	je     c0002559 <mount_volume+0xc8>
c00026a0:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00026a4:	83 fb 02             	cmp    ebx,0x2
c00026a7:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026aa:	75 04                	jne    c00026b0 <mount_volume+0x21f>
c00026ac:	01 ed                	add    ebp,ebp
c00026ae:	eb 0b                	jmp    c00026bb <mount_volume+0x22a>
c00026b0:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00026b4:	83 e5 01             	and    ebp,0x1
c00026b7:	d1 e8                	shr    eax,1
c00026b9:	01 c5                	add    ebp,eax
c00026bb:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00026c1:	c1 ed 09             	shr    ebp,0x9
c00026c4:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c00026c7:	0f 87 8c fe ff ff    	ja     c0002559 <mount_volume+0xc8>
c00026cd:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00026d4:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00026db:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00026df:	83 fb 03             	cmp    ebx,0x3
c00026e2:	75 6e                	jne    c0002752 <mount_volume+0x2c1>
c00026e4:	8d 46 64             	lea    eax,[esi+0x64]
c00026e7:	e8 eb f6 ff ff       	call   c0001dd7 <ld_word>
c00026ec:	66 48                	dec    ax
c00026ee:	75 62                	jne    c0002752 <mount_volume+0x2c1>
c00026f0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00026f4:	89 f0                	mov    eax,esi
c00026f6:	42                   	inc    edx
c00026f7:	e8 42 fc ff ff       	call   c000233e <move_window>
c00026fc:	85 c0                	test   eax,eax
c00026fe:	75 52                	jne    c0002752 <mount_volume+0x2c1>
c0002700:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002704:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c000270a:	e8 c8 f6 ff ff       	call   c0001dd7 <ld_word>
c000270f:	66 3d 55 aa          	cmp    ax,0xaa55
c0002713:	75 3d                	jne    c0002752 <mount_volume+0x2c1>
c0002715:	8d 46 34             	lea    eax,[esi+0x34]
c0002718:	e8 c7 f6 ff ff       	call   c0001de4 <ld_dword>
c000271d:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002722:	75 2e                	jne    c0002752 <mount_volume+0x2c1>
c0002724:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c000272a:	e8 b5 f6 ff ff       	call   c0001de4 <ld_dword>
c000272f:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002734:	75 1c                	jne    c0002752 <mount_volume+0x2c1>
c0002736:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c000273c:	e8 a3 f6 ff ff       	call   c0001de4 <ld_dword>
c0002741:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002744:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c000274a:	e8 95 f6 ff ff       	call   c0001de4 <ld_dword>
c000274f:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0002752:	66 a1 80 64 02 c0    	mov    ax,ds:0xc0026480
c0002758:	88 1e                	mov    BYTE PTR [esi],bl
c000275a:	40                   	inc    eax
c000275b:	31 db                	xor    ebx,ebx
c000275d:	66 a3 80 64 02 c0    	mov    ds:0xc0026480,ax
c0002763:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002767:	eb 0f                	jmp    c0002778 <mount_volume+0x2e7>
c0002769:	3d f6 0f 00 00       	cmp    eax,0xff6
c000276e:	19 db                	sbb    ebx,ebx
c0002770:	83 c3 02             	add    ebx,0x2
c0002773:	e9 da fe ff ff       	jmp    c0002652 <mount_volume+0x1c1>
c0002778:	83 c4 1c             	add    esp,0x1c
c000277b:	89 d8                	mov    eax,ebx
c000277d:	5b                   	pop    ebx
c000277e:	5e                   	pop    esi
c000277f:	5f                   	pop    edi
c0002780:	5d                   	pop    ebp
c0002781:	c3                   	ret    

c0002782 <put_fat>:
c0002782:	55                   	push   ebp
c0002783:	bd 02 00 00 00       	mov    ebp,0x2
c0002788:	57                   	push   edi
c0002789:	56                   	push   esi
c000278a:	53                   	push   ebx
c000278b:	83 ec 1c             	sub    esp,0x1c
c000278e:	83 fa 01             	cmp    edx,0x1
c0002791:	0f 86 38 01 00 00    	jbe    c00028cf <put_fat+0x14d>
c0002797:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c000279a:	0f 86 2f 01 00 00    	jbe    c00028cf <put_fat+0x14d>
c00027a0:	89 c6                	mov    esi,eax
c00027a2:	89 cf                	mov    edi,ecx
c00027a4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00027a7:	89 d3                	mov    ebx,edx
c00027a9:	83 f8 02             	cmp    eax,0x2
c00027ac:	0f 84 b1 00 00 00    	je     c0002863 <put_fat+0xe1>
c00027b2:	83 f8 03             	cmp    eax,0x3
c00027b5:	0f 84 d5 00 00 00    	je     c0002890 <put_fat+0x10e>
c00027bb:	48                   	dec    eax
c00027bc:	0f 85 0d 01 00 00    	jne    c00028cf <put_fat+0x14d>
c00027c2:	89 d1                	mov    ecx,edx
c00027c4:	89 f0                	mov    eax,esi
c00027c6:	d1 e9                	shr    ecx,1
c00027c8:	01 d1                	add    ecx,edx
c00027ca:	89 ca                	mov    edx,ecx
c00027cc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00027d0:	c1 ea 09             	shr    edx,0x9
c00027d3:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027d6:	e8 63 fb ff ff       	call   c000233e <move_window>
c00027db:	89 c5                	mov    ebp,eax
c00027dd:	85 c0                	test   eax,eax
c00027df:	0f 85 ea 00 00 00    	jne    c00028cf <put_fat+0x14d>
c00027e5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00027e9:	8d 46 34             	lea    eax,[esi+0x34]
c00027ec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027f0:	8d 41 01             	lea    eax,[ecx+0x1]
c00027f3:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00027f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027fd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002801:	89 f8                	mov    eax,edi
c0002803:	83 e3 01             	and    ebx,0x1
c0002806:	74 11                	je     c0002819 <put_fat+0x97>
c0002808:	8a 11                	mov    dl,BYTE PTR [ecx]
c000280a:	89 f8                	mov    eax,edi
c000280c:	83 e2 0f             	and    edx,0xf
c000280f:	c1 e0 04             	shl    eax,0x4
c0002812:	25 f0 0f 00 00       	and    eax,0xff0
c0002817:	09 d0                	or     eax,edx
c0002819:	88 01                	mov    BYTE PTR [ecx],al
c000281b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000281f:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002823:	c1 ea 09             	shr    edx,0x9
c0002826:	89 f0                	mov    eax,esi
c0002828:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000282b:	e8 0e fb ff ff       	call   c000233e <move_window>
c0002830:	89 c5                	mov    ebp,eax
c0002832:	85 c0                	test   eax,eax
c0002834:	0f 85 95 00 00 00    	jne    c00028cf <put_fat+0x14d>
c000283a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000283e:	25 ff 01 00 00       	and    eax,0x1ff
c0002843:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002847:	85 db                	test   ebx,ebx
c0002849:	74 07                	je     c0002852 <put_fat+0xd0>
c000284b:	c1 ef 04             	shr    edi,0x4
c000284e:	89 f9                	mov    ecx,edi
c0002850:	eb 0d                	jmp    c000285f <put_fat+0xdd>
c0002852:	8a 08                	mov    cl,BYTE PTR [eax]
c0002854:	c1 ef 08             	shr    edi,0x8
c0002857:	83 e1 f0             	and    ecx,0xfffffff0
c000285a:	83 e7 0f             	and    edi,0xf
c000285d:	09 f9                	or     ecx,edi
c000285f:	88 08                	mov    BYTE PTR [eax],cl
c0002861:	eb 27                	jmp    c000288a <put_fat+0x108>
c0002863:	c1 ea 08             	shr    edx,0x8
c0002866:	89 f0                	mov    eax,esi
c0002868:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000286b:	e8 ce fa ff ff       	call   c000233e <move_window>
c0002870:	89 c5                	mov    ebp,eax
c0002872:	85 c0                	test   eax,eax
c0002874:	75 59                	jne    c00028cf <put_fat+0x14d>
c0002876:	01 db                	add    ebx,ebx
c0002878:	0f b7 d7             	movzx  edx,di
c000287b:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002881:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002885:	e8 72 f5 ff ff       	call   c0001dfc <st_word>
c000288a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c000288e:	eb 3f                	jmp    c00028cf <put_fat+0x14d>
c0002890:	c1 ea 07             	shr    edx,0x7
c0002893:	89 f0                	mov    eax,esi
c0002895:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002898:	e8 a1 fa ff ff       	call   c000233e <move_window>
c000289d:	89 c5                	mov    ebp,eax
c000289f:	85 c0                	test   eax,eax
c00028a1:	75 2c                	jne    c00028cf <put_fat+0x14d>
c00028a3:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00028a9:	c1 e3 02             	shl    ebx,0x2
c00028ac:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00028b2:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00028b6:	89 d8                	mov    eax,ebx
c00028b8:	e8 27 f5 ff ff       	call   c0001de4 <ld_dword>
c00028bd:	25 00 00 00 f0       	and    eax,0xf0000000
c00028c2:	09 f8                	or     eax,edi
c00028c4:	89 c2                	mov    edx,eax
c00028c6:	89 d8                	mov    eax,ebx
c00028c8:	e8 33 f5 ff ff       	call   c0001e00 <st_dword>
c00028cd:	eb bb                	jmp    c000288a <put_fat+0x108>
c00028cf:	83 c4 1c             	add    esp,0x1c
c00028d2:	89 e8                	mov    eax,ebp
c00028d4:	5b                   	pop    ebx
c00028d5:	5e                   	pop    esi
c00028d6:	5f                   	pop    edi
c00028d7:	5d                   	pop    ebp
c00028d8:	c3                   	ret    

c00028d9 <dir_clear>:
c00028d9:	55                   	push   ebp
c00028da:	57                   	push   edi
c00028db:	56                   	push   esi
c00028dc:	89 c6                	mov    esi,eax
c00028de:	53                   	push   ebx
c00028df:	83 ec 1c             	sub    esp,0x1c
c00028e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00028e6:	e8 f0 f9 ff ff       	call   c00022db <sync_window>
c00028eb:	85 c0                	test   eax,eax
c00028ed:	0f 85 c0 00 00 00    	jne    c00029b3 <dir_clear+0xda>
c00028f3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028f7:	89 f0                	mov    eax,esi
c00028f9:	e8 30 f7 ff ff       	call   c000202e <clst2sect>
c00028fe:	31 d2                	xor    edx,edx
c0002900:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002903:	89 c5                	mov    ebp,eax
c0002905:	b9 00 02 00 00       	mov    ecx,0x200
c000290a:	8d 46 34             	lea    eax,[esi+0x34]
c000290d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002911:	e8 02 f5 ff ff       	call   c0001e18 <mem_set>
c0002916:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000291a:	c1 e3 09             	shl    ebx,0x9
c000291d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002923:	76 1b                	jbe    c0002940 <dir_clear+0x67>
c0002925:	bb 00 80 00 00       	mov    ebx,0x8000
c000292a:	eb 14                	jmp    c0002940 <dir_clear+0x67>
c000292c:	83 ec 0c             	sub    esp,0xc
c000292f:	53                   	push   ebx
c0002930:	e8 eb 32 00 00       	call   c0005c20 <ff_memalloc>
c0002935:	83 c4 10             	add    esp,0x10
c0002938:	89 c7                	mov    edi,eax
c000293a:	85 c0                	test   eax,eax
c000293c:	75 7c                	jne    c00029ba <dir_clear+0xe1>
c000293e:	d1 eb                	shr    ebx,1
c0002940:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002946:	77 e4                	ja     c000292c <dir_clear+0x53>
c0002948:	31 db                	xor    ebx,ebx
c000294a:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000294e:	39 d8                	cmp    eax,ebx
c0002950:	76 53                	jbe    c00029a5 <dir_clear+0xcc>
c0002952:	6a 01                	push   0x1
c0002954:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002957:	50                   	push   eax
c0002958:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000295c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002960:	50                   	push   eax
c0002961:	e8 3c f4 ff ff       	call   c0001da2 <disk_write>
c0002966:	83 c4 10             	add    esp,0x10
c0002969:	85 c0                	test   eax,eax
c000296b:	75 38                	jne    c00029a5 <dir_clear+0xcc>
c000296d:	43                   	inc    ebx
c000296e:	eb da                	jmp    c000294a <dir_clear+0x71>
c0002970:	52                   	push   edx
c0002971:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002974:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002978:	50                   	push   eax
c0002979:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000297d:	57                   	push   edi
c000297e:	50                   	push   eax
c000297f:	e8 1e f4 ff ff       	call   c0001da2 <disk_write>
c0002984:	83 c4 10             	add    esp,0x10
c0002987:	85 c0                	test   eax,eax
c0002989:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000298d:	75 0a                	jne    c0002999 <dir_clear+0xc0>
c000298f:	01 d3                	add    ebx,edx
c0002991:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002995:	39 d8                	cmp    eax,ebx
c0002997:	77 d7                	ja     c0002970 <dir_clear+0x97>
c0002999:	83 ec 0c             	sub    esp,0xc
c000299c:	57                   	push   edi
c000299d:	e8 96 32 00 00       	call   c0005c38 <ff_memfree>
c00029a2:	83 c4 10             	add    esp,0x10
c00029a5:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029a9:	39 d8                	cmp    eax,ebx
c00029ab:	0f 95 c0             	setne  al
c00029ae:	0f b6 c0             	movzx  eax,al
c00029b1:	eb 19                	jmp    c00029cc <dir_clear+0xf3>
c00029b3:	b8 01 00 00 00       	mov    eax,0x1
c00029b8:	eb 12                	jmp    c00029cc <dir_clear+0xf3>
c00029ba:	89 d9                	mov    ecx,ebx
c00029bc:	31 d2                	xor    edx,edx
c00029be:	e8 55 f4 ff ff       	call   c0001e18 <mem_set>
c00029c3:	89 da                	mov    edx,ebx
c00029c5:	31 db                	xor    ebx,ebx
c00029c7:	c1 ea 09             	shr    edx,0x9
c00029ca:	eb c5                	jmp    c0002991 <dir_clear+0xb8>
c00029cc:	83 c4 1c             	add    esp,0x1c
c00029cf:	5b                   	pop    ebx
c00029d0:	5e                   	pop    esi
c00029d1:	5f                   	pop    edi
c00029d2:	5d                   	pop    ebp
c00029d3:	c3                   	ret    

c00029d4 <create_name>:
c00029d4:	55                   	push   ebp
c00029d5:	57                   	push   edi
c00029d6:	89 d7                	mov    edi,edx
c00029d8:	56                   	push   esi
c00029d9:	31 f6                	xor    esi,esi
c00029db:	53                   	push   ebx
c00029dc:	83 ec 3c             	sub    esp,0x3c
c00029df:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00029e3:	8b 02                	mov    eax,DWORD PTR [edx]
c00029e5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00029e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00029ef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00029f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00029f6:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00029fa:	e8 5e f4 ff ff       	call   c0001e5d <tchar2uni>
c00029ff:	89 c3                	mov    ebx,eax
c0002a01:	83 f8 ff             	cmp    eax,0xffffffff
c0002a04:	75 0a                	jne    c0002a10 <create_name+0x3c>
c0002a06:	b8 06 00 00 00       	mov    eax,0x6
c0002a0b:	e9 93 02 00 00       	jmp    c0002ca3 <create_name+0x2cf>
c0002a10:	3d ff ff 00 00       	cmp    eax,0xffff
c0002a15:	76 0c                	jbe    c0002a23 <create_name+0x4f>
c0002a17:	c1 e8 10             	shr    eax,0x10
c0002a1a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a1e:	66 89 04 72          	mov    WORD PTR [edx+esi*2],ax
c0002a22:	46                   	inc    esi
c0002a23:	0f b7 d3             	movzx  edx,bx
c0002a26:	83 fa 1f             	cmp    edx,0x1f
c0002a29:	76 4a                	jbe    c0002a75 <create_name+0xa1>
c0002a2b:	83 fa 5c             	cmp    edx,0x5c
c0002a2e:	74 30                	je     c0002a60 <create_name+0x8c>
c0002a30:	83 fa 2f             	cmp    edx,0x2f
c0002a33:	74 2b                	je     c0002a60 <create_name+0x8c>
c0002a35:	83 fa 7f             	cmp    edx,0x7f
c0002a38:	77 0e                	ja     c0002a48 <create_name+0x74>
c0002a3a:	b8 c2 05 02 c0       	mov    eax,0xc00205c2
c0002a3f:	e8 02 f4 ff ff       	call   c0001e46 <chk_chr>
c0002a44:	85 c0                	test   eax,eax
c0002a46:	75 be                	jne    c0002a06 <create_name+0x32>
c0002a48:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002a4e:	77 b6                	ja     c0002a06 <create_name+0x32>
c0002a50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a54:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002a58:	46                   	inc    esi
c0002a59:	eb 9b                	jmp    c00029f6 <create_name+0x22>
c0002a5b:	40                   	inc    eax
c0002a5c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a60:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002a64:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002a67:	83 fa 2f             	cmp    edx,0x2f
c0002a6a:	74 ef                	je     c0002a5b <create_name+0x87>
c0002a6c:	83 fa 5c             	cmp    edx,0x5c
c0002a6f:	74 ea                	je     c0002a5b <create_name+0x87>
c0002a71:	31 db                	xor    ebx,ebx
c0002a73:	eb 02                	jmp    c0002a77 <create_name+0xa3>
c0002a75:	b3 04                	mov    bl,0x4
c0002a77:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002a7b:	89 07                	mov    DWORD PTR [edi],eax
c0002a7d:	85 f6                	test   esi,esi
c0002a7f:	74 16                	je     c0002a97 <create_name+0xc3>
c0002a81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a85:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002a8a:	83 f8 20             	cmp    eax,0x20
c0002a8d:	74 05                	je     c0002a94 <create_name+0xc0>
c0002a8f:	83 f8 2e             	cmp    eax,0x2e
c0002a92:	75 03                	jne    c0002a97 <create_name+0xc3>
c0002a94:	4e                   	dec    esi
c0002a95:	eb e6                	jmp    c0002a7d <create_name+0xa9>
c0002a97:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a9b:	31 ff                	xor    edi,edi
c0002a9d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002aa3:	85 f6                	test   esi,esi
c0002aa5:	0f 84 5b ff ff ff    	je     c0002a06 <create_name+0x32>
c0002aab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aaf:	8d 57 01             	lea    edx,[edi+0x1]
c0002ab2:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002ab6:	83 f8 20             	cmp    eax,0x20
c0002ab9:	75 04                	jne    c0002abf <create_name+0xeb>
c0002abb:	89 d7                	mov    edi,edx
c0002abd:	eb ec                	jmp    c0002aab <create_name+0xd7>
c0002abf:	85 ff                	test   edi,edi
c0002ac1:	75 05                	jne    c0002ac8 <create_name+0xf4>
c0002ac3:	83 f8 2e             	cmp    eax,0x2e
c0002ac6:	75 08                	jne    c0002ad0 <create_name+0xfc>
c0002ac8:	83 cb 03             	or     ebx,0x3
c0002acb:	eb 03                	jmp    c0002ad0 <create_name+0xfc>
c0002acd:	4e                   	dec    esi
c0002ace:	74 0c                	je     c0002adc <create_name+0x108>
c0002ad0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ad4:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002ada:	75 f1                	jne    c0002acd <create_name+0xf9>
c0002adc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002ae0:	b9 0b 00 00 00       	mov    ecx,0xb
c0002ae5:	83 c0 20             	add    eax,0x20
c0002ae8:	ba 20 00 00 00       	mov    edx,0x20
c0002aed:	31 ed                	xor    ebp,ebp
c0002aef:	e8 24 f3 ff ff       	call   c0001e18 <mem_set>
c0002af4:	b9 08 00 00 00       	mov    ecx,0x8
c0002af9:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002afe:	8d 47 01             	lea    eax,[edi+0x1]
c0002b01:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002b05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b09:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b0d:	89 c7                	mov    edi,eax
c0002b0f:	85 c0                	test   eax,eax
c0002b11:	0f 84 25 01 00 00    	je     c0002c3c <create_name+0x268>
c0002b17:	83 f8 20             	cmp    eax,0x20
c0002b1a:	74 0f                	je     c0002b2b <create_name+0x157>
c0002b1c:	83 f8 2e             	cmp    eax,0x2e
c0002b1f:	75 13                	jne    c0002b34 <create_name+0x160>
c0002b21:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b25:	0f 84 6a 01 00 00    	je     c0002c95 <create_name+0x2c1>
c0002b2b:	83 cb 03             	or     ebx,0x3
c0002b2e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0002b32:	eb ca                	jmp    c0002afe <create_name+0x12a>
c0002b34:	39 cd                	cmp    ebp,ecx
c0002b36:	73 0b                	jae    c0002b43 <create_name+0x16f>
c0002b38:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b3c:	75 3f                	jne    c0002b7d <create_name+0x1a9>
c0002b3e:	e9 52 01 00 00       	jmp    c0002c95 <create_name+0x2c1>
c0002b43:	83 f9 0b             	cmp    ecx,0xb
c0002b46:	75 0d                	jne    c0002b55 <create_name+0x181>
c0002b48:	83 cb 03             	or     ebx,0x3
c0002b4b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b50:	e9 e7 00 00 00       	jmp    c0002c3c <create_name+0x268>
c0002b55:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b59:	74 0d                	je     c0002b68 <create_name+0x194>
c0002b5b:	83 cb 03             	or     ebx,0x3
c0002b5e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b62:	0f 87 d4 00 00 00    	ja     c0002c3c <create_name+0x268>
c0002b68:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002b6d:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002b71:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b76:	bd 08 00 00 00       	mov    ebp,0x8
c0002b7b:	eb b1                	jmp    c0002b2e <create_name+0x15a>
c0002b7d:	83 f8 7f             	cmp    eax,0x7f
c0002b80:	76 66                	jbe    c0002be8 <create_name+0x214>
c0002b82:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002b86:	89 d9                	mov    ecx,ebx
c0002b88:	83 c9 02             	or     ecx,0x2
c0002b8b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b8f:	52                   	push   edx
c0002b90:	52                   	push   edx
c0002b91:	68 b5 01 00 00       	push   0x1b5
c0002b96:	50                   	push   eax
c0002b97:	e8 b4 30 00 00       	call   c0005c50 <ff_uni2oem>
c0002b9c:	83 c4 10             	add    esp,0x10
c0002b9f:	89 c7                	mov    edi,eax
c0002ba1:	a8 80                	test   al,0x80
c0002ba3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002ba7:	74 0c                	je     c0002bb5 <create_name+0x1e1>
c0002ba9:	83 e7 7f             	and    edi,0x7f
c0002bac:	0f b6 bf 80 06 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffdf980]
c0002bb3:	eb 2a                	jmp    c0002bdf <create_name+0x20b>
c0002bb5:	0f b7 c0             	movzx  eax,ax
c0002bb8:	3d ff 00 00 00       	cmp    eax,0xff
c0002bbd:	76 20                	jbe    c0002bdf <create_name+0x20b>
c0002bbf:	8d 51 ff             	lea    edx,[ecx-0x1]
c0002bc2:	39 ea                	cmp    edx,ebp
c0002bc4:	77 0a                	ja     c0002bd0 <create_name+0x1fc>
c0002bc6:	83 cb 03             	or     ebx,0x3
c0002bc9:	89 cd                	mov    ebp,ecx
c0002bcb:	e9 5e ff ff ff       	jmp    c0002b2e <create_name+0x15a>
c0002bd0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0002bd4:	88 64 2b 20          	mov    BYTE PTR [ebx+ebp*1+0x20],ah
c0002bd8:	45                   	inc    ebp
c0002bd9:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002bdd:	eb 4d                	jmp    c0002c2c <create_name+0x258>
c0002bdf:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002be3:	66 85 ff             	test   di,di
c0002be6:	74 19                	je     c0002c01 <create_name+0x22d>
c0002be8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002bec:	0f b7 d7             	movzx  edx,di
c0002bef:	b8 cb 05 02 c0       	mov    eax,0xc00205cb
c0002bf4:	e8 4d f2 ff ff       	call   c0001e46 <chk_chr>
c0002bf9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002bfd:	85 c0                	test   eax,eax
c0002bff:	74 0a                	je     c0002c0b <create_name+0x237>
c0002c01:	83 cb 03             	or     ebx,0x3
c0002c04:	bf 5f 00 00 00       	mov    edi,0x5f
c0002c09:	eb 21                	jmp    c0002c2c <create_name+0x258>
c0002c0b:	8d 47 bf             	lea    eax,[edi-0x41]
c0002c0e:	66 83 f8 19          	cmp    ax,0x19
c0002c12:	77 07                	ja     c0002c1b <create_name+0x247>
c0002c14:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002c19:	eb 11                	jmp    c0002c2c <create_name+0x258>
c0002c1b:	8d 47 9f             	lea    eax,[edi-0x61]
c0002c1e:	66 83 f8 19          	cmp    ax,0x19
c0002c22:	77 08                	ja     c0002c2c <create_name+0x258>
c0002c24:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002c29:	83 ef 20             	sub    edi,0x20
c0002c2c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002c30:	89 f8                	mov    eax,edi
c0002c32:	88 44 2a 20          	mov    BYTE PTR [edx+ebp*1+0x20],al
c0002c36:	45                   	inc    ebp
c0002c37:	e9 f2 fe ff ff       	jmp    c0002b2e <create_name+0x15a>
c0002c3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002c40:	80 78 20 e5          	cmp    BYTE PTR [eax+0x20],0xe5
c0002c44:	75 04                	jne    c0002c4a <create_name+0x276>
c0002c46:	c6 40 20 05          	mov    BYTE PTR [eax+0x20],0x5
c0002c4a:	83 f9 08             	cmp    ecx,0x8
c0002c4d:	75 05                	jne    c0002c54 <create_name+0x280>
c0002c4f:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002c54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c58:	83 e0 0c             	and    eax,0xc
c0002c5b:	83 f8 0c             	cmp    eax,0xc
c0002c5e:	74 0c                	je     c0002c6c <create_name+0x298>
c0002c60:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c64:	83 e0 03             	and    eax,0x3
c0002c67:	83 f8 03             	cmp    eax,0x3
c0002c6a:	75 05                	jne    c0002c71 <create_name+0x29d>
c0002c6c:	83 cb 02             	or     ebx,0x2
c0002c6f:	eb 19                	jmp    c0002c8a <create_name+0x2b6>
c0002c71:	f6 c3 02             	test   bl,0x2
c0002c74:	75 14                	jne    c0002c8a <create_name+0x2b6>
c0002c76:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002c7b:	74 03                	je     c0002c80 <create_name+0x2ac>
c0002c7d:	83 cb 10             	or     ebx,0x10
c0002c80:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002c85:	74 03                	je     c0002c8a <create_name+0x2b6>
c0002c87:	83 cb 08             	or     ebx,0x8
c0002c8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002c8e:	88 58 2b             	mov    BYTE PTR [eax+0x2b],bl
c0002c91:	31 c0                	xor    eax,eax
c0002c93:	eb 0e                	jmp    c0002ca3 <create_name+0x2cf>
c0002c95:	83 f9 0b             	cmp    ecx,0xb
c0002c98:	0f 85 ca fe ff ff    	jne    c0002b68 <create_name+0x194>
c0002c9e:	e9 a5 fe ff ff       	jmp    c0002b48 <create_name+0x174>
c0002ca3:	83 c4 3c             	add    esp,0x3c
c0002ca6:	5b                   	pop    ebx
c0002ca7:	5e                   	pop    esi
c0002ca8:	5f                   	pop    edi
c0002ca9:	5d                   	pop    ebp
c0002caa:	c3                   	ret    

c0002cab <cmp_lfn>:
c0002cab:	55                   	push   ebp
c0002cac:	57                   	push   edi
c0002cad:	89 d7                	mov    edi,edx
c0002caf:	56                   	push   esi
c0002cb0:	53                   	push   ebx
c0002cb1:	83 ec 1c             	sub    esp,0x1c
c0002cb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cb8:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002cbb:	e8 17 f1 ff ff       	call   c0001dd7 <ld_word>
c0002cc0:	66 85 c0             	test   ax,ax
c0002cc3:	74 07                	je     c0002ccc <cmp_lfn+0x21>
c0002cc5:	31 c0                	xor    eax,eax
c0002cc7:	e9 a1 00 00 00       	jmp    c0002d6d <cmp_lfn+0xc2>
c0002ccc:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002cce:	bd 01 00 00 00       	mov    ebp,0x1
c0002cd3:	83 e3 3f             	and    ebx,0x3f
c0002cd6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002cde:	4b                   	dec    ebx
c0002cdf:	6b db 0d             	imul   ebx,ebx,0xd
c0002ce2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ce6:	0f b6 80 00 07 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdf900]
c0002ced:	01 f8                	add    eax,edi
c0002cef:	e8 e3 f0 ff ff       	call   c0001dd7 <ld_word>
c0002cf4:	66 85 ed             	test   bp,bp
c0002cf7:	89 c6                	mov    esi,eax
c0002cf9:	74 3c                	je     c0002d37 <cmp_lfn+0x8c>
c0002cfb:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002d01:	77 c2                	ja     c0002cc5 <cmp_lfn+0x1a>
c0002d03:	83 ec 0c             	sub    esp,0xc
c0002d06:	0f b7 c0             	movzx  eax,ax
c0002d09:	50                   	push   eax
c0002d0a:	e8 59 30 00 00       	call   c0005d68 <ff_wtoupper>
c0002d0f:	89 c5                	mov    ebp,eax
c0002d11:	8d 43 01             	lea    eax,[ebx+0x1]
c0002d14:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002d18:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002d1c:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002d20:	89 04 24             	mov    DWORD PTR [esp],eax
c0002d23:	e8 40 30 00 00       	call   c0005d68 <ff_wtoupper>
c0002d28:	83 c4 10             	add    esp,0x10
c0002d2b:	39 c5                	cmp    ebp,eax
c0002d2d:	75 96                	jne    c0002cc5 <cmp_lfn+0x1a>
c0002d2f:	89 f5                	mov    ebp,esi
c0002d31:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002d35:	eb 0b                	jmp    c0002d42 <cmp_lfn+0x97>
c0002d37:	0f b7 c8             	movzx  ecx,ax
c0002d3a:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0002d40:	75 83                	jne    c0002cc5 <cmp_lfn+0x1a>
c0002d42:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002d46:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002d4b:	75 95                	jne    c0002ce2 <cmp_lfn+0x37>
c0002d4d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002d50:	74 16                	je     c0002d68 <cmp_lfn+0xbd>
c0002d52:	66 85 ed             	test   bp,bp
c0002d55:	74 11                	je     c0002d68 <cmp_lfn+0xbd>
c0002d57:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d5b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002d60:	0f 94 c0             	sete   al
c0002d63:	0f b6 c0             	movzx  eax,al
c0002d66:	eb 05                	jmp    c0002d6d <cmp_lfn+0xc2>
c0002d68:	b8 01 00 00 00       	mov    eax,0x1
c0002d6d:	83 c4 1c             	add    esp,0x1c
c0002d70:	5b                   	pop    ebx
c0002d71:	5e                   	pop    esi
c0002d72:	5f                   	pop    edi
c0002d73:	5d                   	pop    ebp
c0002d74:	c3                   	ret    

c0002d75 <sync_fs>:
c0002d75:	56                   	push   esi
c0002d76:	53                   	push   ebx
c0002d77:	53                   	push   ebx
c0002d78:	89 c3                	mov    ebx,eax
c0002d7a:	e8 5c f5 ff ff       	call   c00022db <sync_window>
c0002d7f:	85 c0                	test   eax,eax
c0002d81:	0f 85 9a 00 00 00    	jne    c0002e21 <sync_fs+0xac>
c0002d87:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002d8a:	75 7b                	jne    c0002e07 <sync_fs+0x92>
c0002d8c:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002d90:	75 75                	jne    c0002e07 <sync_fs+0x92>
c0002d92:	b9 00 02 00 00       	mov    ecx,0x200
c0002d97:	8d 73 34             	lea    esi,[ebx+0x34]
c0002d9a:	31 d2                	xor    edx,edx
c0002d9c:	89 f0                	mov    eax,esi
c0002d9e:	e8 75 f0 ff ff       	call   c0001e18 <mem_set>
c0002da3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002da9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002dae:	e8 49 f0 ff ff       	call   c0001dfc <st_word>
c0002db3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002db8:	89 f0                	mov    eax,esi
c0002dba:	e8 41 f0 ff ff       	call   c0001e00 <st_dword>
c0002dbf:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002dc5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002dca:	e8 31 f0 ff ff       	call   c0001e00 <st_dword>
c0002dcf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002dd2:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002dd8:	e8 23 f0 ff ff       	call   c0001e00 <st_dword>
c0002ddd:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002de0:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002de6:	e8 15 f0 ff ff       	call   c0001e00 <st_dword>
c0002deb:	6a 01                	push   0x1
c0002ded:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002df0:	40                   	inc    eax
c0002df1:	50                   	push   eax
c0002df2:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002df5:	56                   	push   esi
c0002df6:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002dfa:	50                   	push   eax
c0002dfb:	e8 a2 ef ff ff       	call   c0001da2 <disk_write>
c0002e00:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002e04:	83 c4 10             	add    esp,0x10
c0002e07:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e0b:	51                   	push   ecx
c0002e0c:	6a 00                	push   0x0
c0002e0e:	6a 00                	push   0x0
c0002e10:	50                   	push   eax
c0002e11:	e8 a2 ef ff ff       	call   c0001db8 <disk_ioctl>
c0002e16:	83 c4 10             	add    esp,0x10
c0002e19:	85 c0                	test   eax,eax
c0002e1b:	0f 95 c0             	setne  al
c0002e1e:	0f b6 c0             	movzx  eax,al
c0002e21:	5a                   	pop    edx
c0002e22:	5b                   	pop    ebx
c0002e23:	5e                   	pop    esi
c0002e24:	c3                   	ret    

c0002e25 <create_partition>:
c0002e25:	55                   	push   ebp
c0002e26:	0f b6 c0             	movzx  eax,al
c0002e29:	57                   	push   edi
c0002e2a:	56                   	push   esi
c0002e2b:	53                   	push   ebx
c0002e2c:	83 ec 40             	sub    esp,0x40
c0002e2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002e33:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002e37:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002e3b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002e3f:	50                   	push   eax
c0002e40:	6a 01                	push   0x1
c0002e42:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002e46:	e8 6d ef ff ff       	call   c0001db8 <disk_ioctl>
c0002e4b:	83 c4 10             	add    esp,0x10
c0002e4e:	85 c0                	test   eax,eax
c0002e50:	0f 85 6a 01 00 00    	jne    c0002fc0 <create_partition+0x19b>
c0002e56:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002e5a:	b9 05 00 00 00       	mov    ecx,0x5
c0002e5f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002e63:	be 08 00 00 00       	mov    esi,0x8
c0002e68:	89 f0                	mov    eax,esi
c0002e6a:	31 d2                	xor    edx,edx
c0002e6c:	0f b6 d8             	movzx  ebx,al
c0002e6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e73:	f7 f3                	div    ebx
c0002e75:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002e7a:	76 0a                	jbe    c0002e86 <create_partition+0x61>
c0002e7c:	d1 e6                	shl    esi,1
c0002e7e:	49                   	dec    ecx
c0002e7f:	75 e7                	jne    c0002e68 <create_partition+0x43>
c0002e81:	be ff ff ff ff       	mov    esi,0xffffffff
c0002e86:	b9 00 02 00 00       	mov    ecx,0x200
c0002e8b:	31 d2                	xor    edx,edx
c0002e8d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002e91:	e8 82 ef ff ff       	call   c0001e18 <mem_set>
c0002e96:	b9 64 00 00 00       	mov    ecx,0x64
c0002e9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e9f:	31 d2                	xor    edx,edx
c0002ea1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002ea9:	f7 f1                	div    ecx
c0002eab:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002eb0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002eb4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002eb8:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002ebe:	89 f0                	mov    eax,esi
c0002ec0:	0f b6 c0             	movzx  eax,al
c0002ec3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ec7:	85 c9                	test   ecx,ecx
c0002ec9:	75 34                	jne    c0002eff <create_partition+0xda>
c0002ecb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002ecf:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002ed4:	05 fe 01 00 00       	add    eax,0x1fe
c0002ed9:	e8 1e ef ff ff       	call   c0001dfc <st_word>
c0002ede:	6a 01                	push   0x1
c0002ee0:	6a 00                	push   0x0
c0002ee2:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002ee6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002eea:	e8 b3 ee ff ff       	call   c0001da2 <disk_write>
c0002eef:	83 c4 10             	add    esp,0x10
c0002ef2:	85 c0                	test   eax,eax
c0002ef4:	0f 95 c0             	setne  al
c0002ef7:	0f b6 c0             	movzx  eax,al
c0002efa:	e9 c6 00 00 00       	jmp    c0002fc5 <create_partition+0x1a0>
c0002eff:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002f03:	76 c6                	jbe    c0002ecb <create_partition+0xa6>
c0002f05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f09:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0002f0d:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002f10:	83 fe 64             	cmp    esi,0x64
c0002f13:	77 0d                	ja     c0002f22 <create_partition+0xfd>
c0002f15:	74 07                	je     c0002f1e <create_partition+0xf9>
c0002f17:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002f1c:	eb 04                	jmp    c0002f22 <create_partition+0xfd>
c0002f1e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002f22:	31 c0                	xor    eax,eax
c0002f24:	89 f2                	mov    edx,esi
c0002f26:	01 ca                	add    edx,ecx
c0002f28:	0f 92 c0             	setb   al
c0002f2b:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002f2f:	77 04                	ja     c0002f35 <create_partition+0x110>
c0002f31:	85 c0                	test   eax,eax
c0002f33:	74 08                	je     c0002f3d <create_partition+0x118>
c0002f35:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002f39:	29 ce                	sub    esi,ecx
c0002f3b:	eb 04                	jmp    c0002f41 <create_partition+0x11c>
c0002f3d:	85 f6                	test   esi,esi
c0002f3f:	74 8a                	je     c0002ecb <create_partition+0xa6>
c0002f41:	89 ca                	mov    edx,ecx
c0002f43:	89 d8                	mov    eax,ebx
c0002f45:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f4a:	e8 b1 ee ff ff       	call   c0001e00 <st_dword>
c0002f4f:	8d 43 04             	lea    eax,[ebx+0x4]
c0002f52:	89 f2                	mov    edx,esi
c0002f54:	83 c3 10             	add    ebx,0x10
c0002f57:	e8 a4 ee ff ff       	call   c0001e00 <st_dword>
c0002f5c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002f60:	31 d2                	xor    edx,edx
c0002f62:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002f65:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002f69:	89 c8                	mov    eax,ecx
c0002f6b:	01 f1                	add    ecx,esi
c0002f6d:	f7 f7                	div    edi
c0002f6f:	89 d5                	mov    ebp,edx
c0002f71:	31 d2                	xor    edx,edx
c0002f73:	45                   	inc    ebp
c0002f74:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f78:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002f7b:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002f7e:	89 c2                	mov    edx,eax
c0002f80:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002f83:	c1 ea 02             	shr    edx,0x2
c0002f86:	83 e2 c0             	and    edx,0xffffffc0
c0002f89:	09 ea                	or     edx,ebp
c0002f8b:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002f8e:	31 d2                	xor    edx,edx
c0002f90:	f7 f7                	div    edi
c0002f92:	89 d6                	mov    esi,edx
c0002f94:	31 d2                	xor    edx,edx
c0002f96:	46                   	inc    esi
c0002f97:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f9b:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002f9e:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002fa1:	89 c7                	mov    edi,eax
c0002fa3:	c1 ef 02             	shr    edi,0x2
c0002fa6:	83 e7 c0             	and    edi,0xffffffc0
c0002fa9:	09 fe                	or     esi,edi
c0002fab:	89 f2                	mov    edx,esi
c0002fad:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002fb0:	83 7c 24 08 04       	cmp    DWORD PTR [esp+0x8],0x4
c0002fb5:	0f 85 0c ff ff ff    	jne    c0002ec7 <create_partition+0xa2>
c0002fbb:	e9 0b ff ff ff       	jmp    c0002ecb <create_partition+0xa6>
c0002fc0:	b8 01 00 00 00       	mov    eax,0x1
c0002fc5:	83 c4 3c             	add    esp,0x3c
c0002fc8:	5b                   	pop    ebx
c0002fc9:	5e                   	pop    esi
c0002fca:	5f                   	pop    edi
c0002fcb:	5d                   	pop    ebp
c0002fcc:	c3                   	ret    

c0002fcd <get_fileinfo>:
c0002fcd:	55                   	push   ebp
c0002fce:	57                   	push   edi
c0002fcf:	56                   	push   esi
c0002fd0:	53                   	push   ebx
c0002fd1:	83 ec 1c             	sub    esp,0x1c
c0002fd4:	8b 30                	mov    esi,DWORD PTR [eax]
c0002fd6:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002fda:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002fde:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002fe2:	0f 84 d3 01 00 00    	je     c00031bb <get_fileinfo+0x1ee>
c0002fe8:	89 d3                	mov    ebx,edx
c0002fea:	89 c6                	mov    esi,eax
c0002fec:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002ff0:	74 72                	je     c0003064 <get_fileinfo+0x97>
c0002ff2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002ffa:	31 ed                	xor    ebp,ebp
c0002ffc:	31 ff                	xor    edi,edi
c0002ffe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003002:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0003006:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003009:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c000300d:	89 c2                	mov    edx,eax
c000300f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003013:	85 c0                	test   eax,eax
c0003015:	74 41                	je     c0003058 <get_fileinfo+0x8b>
c0003017:	0f b7 c5             	movzx  eax,bp
c000301a:	85 c0                	test   eax,eax
c000301c:	75 0d                	jne    c000302b <get_fileinfo+0x5e>
c000301e:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c0003024:	66 81 f9 ff 07       	cmp    cx,0x7ff
c0003029:	76 22                	jbe    c000304d <get_fileinfo+0x80>
c000302b:	c1 e0 10             	shl    eax,0x10
c000302e:	b9 ff 00 00 00       	mov    ecx,0xff
c0003033:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0003037:	29 f9                	sub    ecx,edi
c0003039:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c000303d:	e8 f3 ee ff ff       	call   c0001f35 <put_utf>
c0003042:	0f b6 c0             	movzx  eax,al
c0003045:	85 c0                	test   eax,eax
c0003047:	74 0d                	je     c0003056 <get_fileinfo+0x89>
c0003049:	01 c7                	add    edi,eax
c000304b:	31 d2                	xor    edx,edx
c000304d:	83 44 24 04 02       	add    DWORD PTR [esp+0x4],0x2
c0003052:	89 d5                	mov    ebp,edx
c0003054:	eb a8                	jmp    c0002ffe <get_fileinfo+0x31>
c0003056:	31 ff                	xor    edi,edi
c0003058:	66 85 ed             	test   bp,bp
c000305b:	74 02                	je     c000305f <get_fileinfo+0x92>
c000305d:	31 ff                	xor    edi,edi
c000305f:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0003064:	31 ff                	xor    edi,edi
c0003066:	31 c9                	xor    ecx,ecx
c0003068:	83 f9 0a             	cmp    ecx,0xa
c000306b:	0f 87 ac 00 00 00    	ja     c000311d <get_fileinfo+0x150>
c0003071:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003074:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003077:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c000307b:	89 c2                	mov    edx,eax
c000307d:	83 f8 20             	cmp    eax,0x20
c0003080:	0f 84 90 00 00 00    	je     c0003116 <get_fileinfo+0x149>
c0003086:	83 f8 05             	cmp    eax,0x5
c0003089:	75 05                	jne    c0003090 <get_fileinfo+0xc3>
c000308b:	ba e5 00 00 00       	mov    edx,0xe5
c0003090:	83 ff 0b             	cmp    edi,0xb
c0003093:	77 0b                	ja     c00030a0 <get_fileinfo+0xd3>
c0003095:	83 fd 09             	cmp    ebp,0x9
c0003098:	75 06                	jne    c00030a0 <get_fileinfo+0xd3>
c000309a:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c000309f:	47                   	inc    edi
c00030a0:	0f b7 c2             	movzx  eax,dx
c00030a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00030a7:	e8 ab ed ff ff       	call   c0001e57 <dbc_1st>
c00030ac:	85 c0                	test   eax,eax
c00030ae:	74 2f                	je     c00030df <get_fileinfo+0x112>
c00030b0:	83 fd 08             	cmp    ebp,0x8
c00030b3:	74 2a                	je     c00030df <get_fileinfo+0x112>
c00030b5:	83 fd 0b             	cmp    ebp,0xb
c00030b8:	74 25                	je     c00030df <get_fileinfo+0x112>
c00030ba:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030bd:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00030c1:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00030c5:	e8 90 ed ff ff       	call   c0001e5a <dbc_2nd>
c00030ca:	85 c0                	test   eax,eax
c00030cc:	74 11                	je     c00030df <get_fileinfo+0x112>
c00030ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00030d2:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00030d7:	c1 e0 08             	shl    eax,0x8
c00030da:	8d 69 02             	lea    ebp,[ecx+0x2]
c00030dd:	09 c2                	or     edx,eax
c00030df:	0f b7 d2             	movzx  edx,dx
c00030e2:	50                   	push   eax
c00030e3:	50                   	push   eax
c00030e4:	68 b5 01 00 00       	push   0x1b5
c00030e9:	52                   	push   edx
c00030ea:	e8 01 2c 00 00       	call   c0005cf0 <ff_oem2uni>
c00030ef:	83 c4 10             	add    esp,0x10
c00030f2:	0f b7 c0             	movzx  eax,ax
c00030f5:	85 c0                	test   eax,eax
c00030f7:	75 04                	jne    c00030fd <get_fileinfo+0x130>
c00030f9:	31 ff                	xor    edi,edi
c00030fb:	eb 20                	jmp    c000311d <get_fileinfo+0x150>
c00030fd:	b9 0c 00 00 00       	mov    ecx,0xc
c0003102:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c0003106:	29 f9                	sub    ecx,edi
c0003108:	e8 28 ee ff ff       	call   c0001f35 <put_utf>
c000310d:	0f b6 c0             	movzx  eax,al
c0003110:	85 c0                	test   eax,eax
c0003112:	74 e5                	je     c00030f9 <get_fileinfo+0x12c>
c0003114:	01 c7                	add    edi,eax
c0003116:	89 e9                	mov    ecx,ebp
c0003118:	e9 4b ff ff ff       	jmp    c0003068 <get_fileinfo+0x9b>
c000311d:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c0003122:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003126:	75 5f                	jne    c0003187 <get_fileinfo+0x1ba>
c0003128:	85 ff                	test   edi,edi
c000312a:	75 0b                	jne    c0003137 <get_fileinfo+0x16a>
c000312c:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003130:	ba 01 00 00 00       	mov    edx,0x1
c0003135:	eb 3e                	jmp    c0003175 <get_fileinfo+0x1a8>
c0003137:	bf 08 00 00 00       	mov    edi,0x8
c000313c:	31 d2                	xor    edx,edx
c000313e:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003144:	84 c0                	test   al,al
c0003146:	74 2d                	je     c0003175 <get_fileinfo+0x1a8>
c0003148:	66 83 f8 2e          	cmp    ax,0x2e
c000314c:	74 1b                	je     c0003169 <get_fileinfo+0x19c>
c000314e:	8d 48 bf             	lea    ecx,[eax-0x41]
c0003151:	66 83 f9 19          	cmp    cx,0x19
c0003155:	77 17                	ja     c000316e <get_fileinfo+0x1a1>
c0003157:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000315a:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000315d:	21 f9                	and    ecx,edi
c000315f:	80 e1 18             	and    cl,0x18
c0003162:	74 0a                	je     c000316e <get_fileinfo+0x1a1>
c0003164:	83 c0 20             	add    eax,0x20
c0003167:	eb 05                	jmp    c000316e <get_fileinfo+0x1a1>
c0003169:	bf 10 00 00 00       	mov    edi,0x10
c000316e:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c0003172:	42                   	inc    edx
c0003173:	eb c9                	jmp    c000313e <get_fileinfo+0x171>
c0003175:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c000317a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000317d:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0003181:	75 04                	jne    c0003187 <get_fileinfo+0x1ba>
c0003183:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003187:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000318a:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000318d:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0003190:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003193:	83 c0 1c             	add    eax,0x1c
c0003196:	e8 49 ec ff ff       	call   c0001de4 <ld_dword>
c000319b:	89 03                	mov    DWORD PTR [ebx],eax
c000319d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031a0:	83 c0 16             	add    eax,0x16
c00031a3:	e8 2f ec ff ff       	call   c0001dd7 <ld_word>
c00031a8:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00031ac:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031af:	83 c0 18             	add    eax,0x18
c00031b2:	e8 20 ec ff ff       	call   c0001dd7 <ld_word>
c00031b7:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00031bb:	83 c4 1c             	add    esp,0x1c
c00031be:	5b                   	pop    ebx
c00031bf:	5e                   	pop    esi
c00031c0:	5f                   	pop    edi
c00031c1:	5d                   	pop    ebp
c00031c2:	c3                   	ret    

c00031c3 <ld_clust.isra.0>:
c00031c3:	56                   	push   esi
c00031c4:	89 c6                	mov    esi,eax
c00031c6:	53                   	push   ebx
c00031c7:	8d 42 1a             	lea    eax,[edx+0x1a]
c00031ca:	89 d3                	mov    ebx,edx
c00031cc:	e8 06 ec ff ff       	call   c0001dd7 <ld_word>
c00031d1:	0f b7 c8             	movzx  ecx,ax
c00031d4:	89 f0                	mov    eax,esi
c00031d6:	3c 03                	cmp    al,0x3
c00031d8:	75 0d                	jne    c00031e7 <ld_clust.isra.0+0x24>
c00031da:	8d 43 14             	lea    eax,[ebx+0x14]
c00031dd:	e8 f5 eb ff ff       	call   c0001dd7 <ld_word>
c00031e2:	c1 e0 10             	shl    eax,0x10
c00031e5:	09 c1                	or     ecx,eax
c00031e7:	89 c8                	mov    eax,ecx
c00031e9:	5b                   	pop    ebx
c00031ea:	5e                   	pop    esi
c00031eb:	c3                   	ret    

c00031ec <st_clust.isra.1>:
c00031ec:	56                   	push   esi
c00031ed:	89 c6                	mov    esi,eax
c00031ef:	53                   	push   ebx
c00031f0:	89 d3                	mov    ebx,edx
c00031f2:	0f b7 d1             	movzx  edx,cx
c00031f5:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00031f8:	e8 ff eb ff ff       	call   c0001dfc <st_word>
c00031fd:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0003200:	75 0f                	jne    c0003211 <st_clust.isra.1+0x25>
c0003202:	c1 e9 10             	shr    ecx,0x10
c0003205:	8d 43 14             	lea    eax,[ebx+0x14]
c0003208:	89 ca                	mov    edx,ecx
c000320a:	5b                   	pop    ebx
c000320b:	5e                   	pop    esi
c000320c:	e9 eb eb ff ff       	jmp    c0001dfc <st_word>
c0003211:	5b                   	pop    ebx
c0003212:	5e                   	pop    esi
c0003213:	c3                   	ret    

c0003214 <get_fat.isra.2>:
c0003214:	b9 01 00 00 00       	mov    ecx,0x1
c0003219:	83 fa 01             	cmp    edx,0x1
c000321c:	0f 86 f3 00 00 00    	jbe    c0003315 <get_fat.isra.2+0x101>
c0003222:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003225:	0f 83 ea 00 00 00    	jae    c0003315 <get_fat.isra.2+0x101>
c000322b:	55                   	push   ebp
c000322c:	57                   	push   edi
c000322d:	89 c7                	mov    edi,eax
c000322f:	56                   	push   esi
c0003230:	89 d6                	mov    esi,edx
c0003232:	53                   	push   ebx
c0003233:	83 ec 0c             	sub    esp,0xc
c0003236:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003239:	83 f8 02             	cmp    eax,0x2
c000323c:	74 78                	je     c00032b6 <get_fat.isra.2+0xa2>
c000323e:	83 f8 03             	cmp    eax,0x3
c0003241:	0f 84 96 00 00 00    	je     c00032dd <get_fat.isra.2+0xc9>
c0003247:	48                   	dec    eax
c0003248:	0f 85 bd 00 00 00    	jne    c000330b <get_fat.isra.2+0xf7>
c000324e:	89 d3                	mov    ebx,edx
c0003250:	89 f8                	mov    eax,edi
c0003252:	d1 eb                	shr    ebx,1
c0003254:	01 d3                	add    ebx,edx
c0003256:	89 da                	mov    edx,ebx
c0003258:	c1 ea 09             	shr    edx,0x9
c000325b:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000325e:	e8 db f0 ff ff       	call   c000233e <move_window>
c0003263:	85 c0                	test   eax,eax
c0003265:	74 08                	je     c000326f <get_fat.isra.2+0x5b>
c0003267:	83 c9 ff             	or     ecx,0xffffffff
c000326a:	e9 9c 00 00 00       	jmp    c000330b <get_fat.isra.2+0xf7>
c000326f:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003272:	89 f8                	mov    eax,edi
c0003274:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000327a:	89 ea                	mov    edx,ebp
c000327c:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c0003280:	c1 ea 09             	shr    edx,0x9
c0003283:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003286:	e8 b3 f0 ff ff       	call   c000233e <move_window>
c000328b:	85 c0                	test   eax,eax
c000328d:	75 d8                	jne    c0003267 <get_fat.isra.2+0x53>
c000328f:	0f b6 c3             	movzx  eax,bl
c0003292:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003298:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c000329d:	c1 e3 08             	shl    ebx,0x8
c00032a0:	09 c3                	or     ebx,eax
c00032a2:	89 d9                	mov    ecx,ebx
c00032a4:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00032aa:	83 e6 01             	and    esi,0x1
c00032ad:	74 5c                	je     c000330b <get_fat.isra.2+0xf7>
c00032af:	89 d9                	mov    ecx,ebx
c00032b1:	c1 e9 04             	shr    ecx,0x4
c00032b4:	eb 55                	jmp    c000330b <get_fat.isra.2+0xf7>
c00032b6:	c1 ea 08             	shr    edx,0x8
c00032b9:	89 f8                	mov    eax,edi
c00032bb:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032be:	e8 7b f0 ff ff       	call   c000233e <move_window>
c00032c3:	85 c0                	test   eax,eax
c00032c5:	75 a0                	jne    c0003267 <get_fat.isra.2+0x53>
c00032c7:	01 f6                	add    esi,esi
c00032c9:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00032cf:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00032d3:	e8 ff ea ff ff       	call   c0001dd7 <ld_word>
c00032d8:	0f b7 c8             	movzx  ecx,ax
c00032db:	eb 2e                	jmp    c000330b <get_fat.isra.2+0xf7>
c00032dd:	c1 ea 07             	shr    edx,0x7
c00032e0:	89 f8                	mov    eax,edi
c00032e2:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032e5:	e8 54 f0 ff ff       	call   c000233e <move_window>
c00032ea:	85 c0                	test   eax,eax
c00032ec:	0f 85 75 ff ff ff    	jne    c0003267 <get_fat.isra.2+0x53>
c00032f2:	c1 e6 02             	shl    esi,0x2
c00032f5:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00032fb:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00032ff:	e8 e0 ea ff ff       	call   c0001de4 <ld_dword>
c0003304:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003309:	89 c1                	mov    ecx,eax
c000330b:	83 c4 0c             	add    esp,0xc
c000330e:	89 c8                	mov    eax,ecx
c0003310:	5b                   	pop    ebx
c0003311:	5e                   	pop    esi
c0003312:	5f                   	pop    edi
c0003313:	5d                   	pop    ebp
c0003314:	c3                   	ret    
c0003315:	89 c8                	mov    eax,ecx
c0003317:	c3                   	ret    

c0003318 <dir_sdi>:
c0003318:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000331e:	0f 87 b6 00 00 00    	ja     c00033da <dir_sdi+0xc2>
c0003324:	55                   	push   ebp
c0003325:	57                   	push   edi
c0003326:	56                   	push   esi
c0003327:	53                   	push   ebx
c0003328:	89 d3                	mov    ebx,edx
c000332a:	83 ec 1c             	sub    esp,0x1c
c000332d:	f6 c2 1f             	test   dl,0x1f
c0003330:	74 0a                	je     c000333c <dir_sdi+0x24>
c0003332:	b8 02 00 00 00       	mov    eax,0x2
c0003337:	e9 96 00 00 00       	jmp    c00033d2 <dir_sdi+0xba>
c000333c:	89 c6                	mov    esi,eax
c000333e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003340:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003343:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003346:	85 c9                	test   ecx,ecx
c0003348:	75 23                	jne    c000336d <dir_sdi+0x55>
c000334a:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000334d:	76 07                	jbe    c0003356 <dir_sdi+0x3e>
c000334f:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003352:	85 c0                	test   eax,eax
c0003354:	75 15                	jne    c000336b <dir_sdi+0x53>
c0003356:	89 da                	mov    edx,ebx
c0003358:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c000335c:	c1 ea 05             	shr    edx,0x5
c000335f:	39 c2                	cmp    edx,eax
c0003361:	73 cf                	jae    c0003332 <dir_sdi+0x1a>
c0003363:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003366:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003369:	eb 3d                	jmp    c00033a8 <dir_sdi+0x90>
c000336b:	89 c1                	mov    ecx,eax
c000336d:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003371:	c1 e5 09             	shl    ebp,0x9
c0003374:	89 ca                	mov    edx,ecx
c0003376:	39 eb                	cmp    ebx,ebp
c0003378:	72 1c                	jb     c0003396 <dir_sdi+0x7e>
c000337a:	8b 06                	mov    eax,DWORD PTR [esi]
c000337c:	e8 93 fe ff ff       	call   c0003214 <get_fat.isra.2>
c0003381:	89 c1                	mov    ecx,eax
c0003383:	83 f8 ff             	cmp    eax,0xffffffff
c0003386:	74 45                	je     c00033cd <dir_sdi+0xb5>
c0003388:	83 f8 01             	cmp    eax,0x1
c000338b:	76 a5                	jbe    c0003332 <dir_sdi+0x1a>
c000338d:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c0003390:	76 a0                	jbe    c0003332 <dir_sdi+0x1a>
c0003392:	29 eb                	sub    ebx,ebp
c0003394:	eb de                	jmp    c0003374 <dir_sdi+0x5c>
c0003396:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000339a:	89 f8                	mov    eax,edi
c000339c:	e8 8d ec ff ff       	call   c000202e <clst2sect>
c00033a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033a5:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033a8:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00033ab:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00033ae:	85 d2                	test   edx,edx
c00033b0:	74 80                	je     c0003332 <dir_sdi+0x1a>
c00033b2:	89 d8                	mov    eax,ebx
c00033b4:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00033ba:	c1 e8 09             	shr    eax,0x9
c00033bd:	01 d0                	add    eax,edx
c00033bf:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033c2:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00033c6:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00033c9:	31 c0                	xor    eax,eax
c00033cb:	eb 05                	jmp    c00033d2 <dir_sdi+0xba>
c00033cd:	b8 01 00 00 00       	mov    eax,0x1
c00033d2:	83 c4 1c             	add    esp,0x1c
c00033d5:	5b                   	pop    ebx
c00033d6:	5e                   	pop    esi
c00033d7:	5f                   	pop    edi
c00033d8:	5d                   	pop    ebp
c00033d9:	c3                   	ret    
c00033da:	b8 02 00 00 00       	mov    eax,0x2
c00033df:	c3                   	ret    

c00033e0 <create_chain>:
c00033e0:	55                   	push   ebp
c00033e1:	89 c5                	mov    ebp,eax
c00033e3:	57                   	push   edi
c00033e4:	89 d7                	mov    edi,edx
c00033e6:	56                   	push   esi
c00033e7:	53                   	push   ebx
c00033e8:	83 ec 1c             	sub    esp,0x1c
c00033eb:	85 d2                	test   edx,edx
c00033ed:	8b 30                	mov    esi,DWORD PTR [eax]
c00033ef:	75 0e                	jne    c00033ff <create_chain+0x1f>
c00033f1:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00033f4:	85 c9                	test   ecx,ecx
c00033f6:	74 34                	je     c000342c <create_chain+0x4c>
c00033f8:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00033fb:	77 34                	ja     c0003431 <create_chain+0x51>
c00033fd:	eb 2d                	jmp    c000342c <create_chain+0x4c>
c00033ff:	89 f0                	mov    eax,esi
c0003401:	e8 0e fe ff ff       	call   c0003214 <get_fat.isra.2>
c0003406:	89 c3                	mov    ebx,eax
c0003408:	83 f8 01             	cmp    eax,0x1
c000340b:	77 0a                	ja     c0003417 <create_chain+0x37>
c000340d:	bb 01 00 00 00       	mov    ebx,0x1
c0003412:	e9 fe 00 00 00       	jmp    c0003515 <create_chain+0x135>
c0003417:	83 f8 ff             	cmp    eax,0xffffffff
c000341a:	0f 84 f2 00 00 00    	je     c0003512 <create_chain+0x132>
c0003420:	89 f9                	mov    ecx,edi
c0003422:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003425:	76 0a                	jbe    c0003431 <create_chain+0x51>
c0003427:	e9 e9 00 00 00       	jmp    c0003515 <create_chain+0x135>
c000342c:	b9 01 00 00 00       	mov    ecx,0x1
c0003431:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003435:	75 07                	jne    c000343e <create_chain+0x5e>
c0003437:	31 db                	xor    ebx,ebx
c0003439:	e9 d7 00 00 00       	jmp    c0003515 <create_chain+0x135>
c000343e:	39 f9                	cmp    ecx,edi
c0003440:	75 46                	jne    c0003488 <create_chain+0xa8>
c0003442:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003445:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003448:	77 05                	ja     c000344f <create_chain+0x6f>
c000344a:	bb 02 00 00 00       	mov    ebx,0x2
c000344f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003453:	89 da                	mov    edx,ebx
c0003455:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003458:	e8 b7 fd ff ff       	call   c0003214 <get_fat.isra.2>
c000345d:	83 f8 01             	cmp    eax,0x1
c0003460:	74 ab                	je     c000340d <create_chain+0x2d>
c0003462:	83 f8 ff             	cmp    eax,0xffffffff
c0003465:	0f 84 a7 00 00 00    	je     c0003512 <create_chain+0x132>
c000346b:	85 c0                	test   eax,eax
c000346d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003471:	74 11                	je     c0003484 <create_chain+0xa4>
c0003473:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003476:	83 f8 01             	cmp    eax,0x1
c0003479:	76 0d                	jbe    c0003488 <create_chain+0xa8>
c000347b:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c000347e:	73 08                	jae    c0003488 <create_chain+0xa8>
c0003480:	89 c1                	mov    ecx,eax
c0003482:	eb 04                	jmp    c0003488 <create_chain+0xa8>
c0003484:	85 db                	test   ebx,ebx
c0003486:	75 3d                	jne    c00034c5 <create_chain+0xe5>
c0003488:	89 cb                	mov    ebx,ecx
c000348a:	43                   	inc    ebx
c000348b:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c000348e:	77 0a                	ja     c000349a <create_chain+0xba>
c0003490:	83 f9 01             	cmp    ecx,0x1
c0003493:	76 a2                	jbe    c0003437 <create_chain+0x57>
c0003495:	bb 02 00 00 00       	mov    ebx,0x2
c000349a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000349e:	89 da                	mov    edx,ebx
c00034a0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00034a3:	e8 6c fd ff ff       	call   c0003214 <get_fat.isra.2>
c00034a8:	85 c0                	test   eax,eax
c00034aa:	74 19                	je     c00034c5 <create_chain+0xe5>
c00034ac:	83 f8 01             	cmp    eax,0x1
c00034af:	0f 84 58 ff ff ff    	je     c000340d <create_chain+0x2d>
c00034b5:	40                   	inc    eax
c00034b6:	74 5a                	je     c0003512 <create_chain+0x132>
c00034b8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034bc:	39 cb                	cmp    ebx,ecx
c00034be:	75 ca                	jne    c000348a <create_chain+0xaa>
c00034c0:	e9 72 ff ff ff       	jmp    c0003437 <create_chain+0x57>
c00034c5:	83 c9 ff             	or     ecx,0xffffffff
c00034c8:	89 da                	mov    edx,ebx
c00034ca:	89 f0                	mov    eax,esi
c00034cc:	e8 b1 f2 ff ff       	call   c0002782 <put_fat>
c00034d1:	85 c0                	test   eax,eax
c00034d3:	75 36                	jne    c000350b <create_chain+0x12b>
c00034d5:	85 ff                	test   edi,edi
c00034d7:	75 16                	jne    c00034ef <create_chain+0x10f>
c00034d9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00034dc:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00034df:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00034e2:	8d 57 fe             	lea    edx,[edi-0x2]
c00034e5:	39 d0                	cmp    eax,edx
c00034e7:	77 17                	ja     c0003500 <create_chain+0x120>
c00034e9:	48                   	dec    eax
c00034ea:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00034ed:	eb 11                	jmp    c0003500 <create_chain+0x120>
c00034ef:	89 d9                	mov    ecx,ebx
c00034f1:	89 fa                	mov    edx,edi
c00034f3:	89 f0                	mov    eax,esi
c00034f5:	e8 88 f2 ff ff       	call   c0002782 <put_fat>
c00034fa:	85 c0                	test   eax,eax
c00034fc:	74 db                	je     c00034d9 <create_chain+0xf9>
c00034fe:	eb 0b                	jmp    c000350b <create_chain+0x12b>
c0003500:	8a 46 04             	mov    al,BYTE PTR [esi+0x4]
c0003503:	83 c8 01             	or     eax,0x1
c0003506:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0003509:	eb 0a                	jmp    c0003515 <create_chain+0x135>
c000350b:	48                   	dec    eax
c000350c:	0f 85 fb fe ff ff    	jne    c000340d <create_chain+0x2d>
c0003512:	83 cb ff             	or     ebx,0xffffffff
c0003515:	83 c4 1c             	add    esp,0x1c
c0003518:	89 d8                	mov    eax,ebx
c000351a:	5b                   	pop    ebx
c000351b:	5e                   	pop    esi
c000351c:	5f                   	pop    edi
c000351d:	5d                   	pop    ebp
c000351e:	c3                   	ret    

c000351f <remove_chain>:
c000351f:	55                   	push   ebp
c0003520:	57                   	push   edi
c0003521:	56                   	push   esi
c0003522:	89 d6                	mov    esi,edx
c0003524:	53                   	push   ebx
c0003525:	83 ec 0c             	sub    esp,0xc
c0003528:	83 fa 01             	cmp    edx,0x1
c000352b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000352d:	76 6a                	jbe    c0003599 <remove_chain+0x7a>
c000352f:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003532:	76 65                	jbe    c0003599 <remove_chain+0x7a>
c0003534:	89 c5                	mov    ebp,eax
c0003536:	89 ca                	mov    edx,ecx
c0003538:	85 c9                	test   ecx,ecx
c000353a:	74 0e                	je     c000354a <remove_chain+0x2b>
c000353c:	83 c9 ff             	or     ecx,0xffffffff
c000353f:	89 d8                	mov    eax,ebx
c0003541:	e8 3c f2 ff ff       	call   c0002782 <put_fat>
c0003546:	85 c0                	test   eax,eax
c0003548:	75 5b                	jne    c00035a5 <remove_chain+0x86>
c000354a:	89 f2                	mov    edx,esi
c000354c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000354f:	e8 c0 fc ff ff       	call   c0003214 <get_fat.isra.2>
c0003554:	89 c7                	mov    edi,eax
c0003556:	85 c0                	test   eax,eax
c0003558:	75 04                	jne    c000355e <remove_chain+0x3f>
c000355a:	31 c0                	xor    eax,eax
c000355c:	eb 47                	jmp    c00035a5 <remove_chain+0x86>
c000355e:	83 f8 01             	cmp    eax,0x1
c0003561:	74 36                	je     c0003599 <remove_chain+0x7a>
c0003563:	83 f8 ff             	cmp    eax,0xffffffff
c0003566:	74 38                	je     c00035a0 <remove_chain+0x81>
c0003568:	31 c9                	xor    ecx,ecx
c000356a:	89 f2                	mov    edx,esi
c000356c:	89 d8                	mov    eax,ebx
c000356e:	e8 0f f2 ff ff       	call   c0002782 <put_fat>
c0003573:	85 c0                	test   eax,eax
c0003575:	75 2e                	jne    c00035a5 <remove_chain+0x86>
c0003577:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000357a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000357d:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003580:	39 c8                	cmp    eax,ecx
c0003582:	73 0d                	jae    c0003591 <remove_chain+0x72>
c0003584:	40                   	inc    eax
c0003585:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003588:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000358b:	83 c8 01             	or     eax,0x1
c000358e:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003591:	89 fe                	mov    esi,edi
c0003593:	39 fa                	cmp    edx,edi
c0003595:	77 b3                	ja     c000354a <remove_chain+0x2b>
c0003597:	eb c1                	jmp    c000355a <remove_chain+0x3b>
c0003599:	b8 02 00 00 00       	mov    eax,0x2
c000359e:	eb 05                	jmp    c00035a5 <remove_chain+0x86>
c00035a0:	b8 01 00 00 00       	mov    eax,0x1
c00035a5:	83 c4 0c             	add    esp,0xc
c00035a8:	5b                   	pop    ebx
c00035a9:	5e                   	pop    esi
c00035aa:	5f                   	pop    edi
c00035ab:	5d                   	pop    ebp
c00035ac:	c3                   	ret    

c00035ad <dir_next>:
c00035ad:	55                   	push   ebp
c00035ae:	57                   	push   edi
c00035af:	56                   	push   esi
c00035b0:	53                   	push   ebx
c00035b1:	83 ec 1c             	sub    esp,0x1c
c00035b4:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00035b7:	8b 28                	mov    ebp,DWORD PTR [eax]
c00035b9:	83 c7 20             	add    edi,0x20
c00035bc:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00035c2:	76 07                	jbe    c00035cb <dir_next+0x1e>
c00035c4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00035cb:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00035ce:	b9 04 00 00 00       	mov    ecx,0x4
c00035d3:	85 f6                	test   esi,esi
c00035d5:	0f 84 cd 00 00 00    	je     c00036a8 <dir_next+0xfb>
c00035db:	89 c3                	mov    ebx,eax
c00035dd:	89 d1                	mov    ecx,edx
c00035df:	89 f8                	mov    eax,edi
c00035e1:	25 ff 01 00 00       	and    eax,0x1ff
c00035e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035ea:	0f 85 a8 00 00 00    	jne    c0003698 <dir_next+0xeb>
c00035f0:	46                   	inc    esi
c00035f1:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00035f4:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00035f7:	85 d2                	test   edx,edx
c00035f9:	75 22                	jne    c000361d <dir_next+0x70>
c00035fb:	89 fa                	mov    edx,edi
c00035fd:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003601:	c1 ea 05             	shr    edx,0x5
c0003604:	39 c2                	cmp    edx,eax
c0003606:	0f 82 8c 00 00 00    	jb     c0003698 <dir_next+0xeb>
c000360c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003613:	b9 04 00 00 00       	mov    ecx,0x4
c0003618:	e9 8b 00 00 00       	jmp    c00036a8 <dir_next+0xfb>
c000361d:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003621:	89 fe                	mov    esi,edi
c0003623:	48                   	dec    eax
c0003624:	c1 ee 09             	shr    esi,0x9
c0003627:	85 f0                	test   eax,esi
c0003629:	75 6d                	jne    c0003698 <dir_next+0xeb>
c000362b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000362f:	89 e8                	mov    eax,ebp
c0003631:	e8 de fb ff ff       	call   c0003214 <get_fat.isra.2>
c0003636:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000363a:	89 c6                	mov    esi,eax
c000363c:	83 f8 01             	cmp    eax,0x1
c000363f:	77 07                	ja     c0003648 <dir_next+0x9b>
c0003641:	b9 02 00 00 00       	mov    ecx,0x2
c0003646:	eb 60                	jmp    c00036a8 <dir_next+0xfb>
c0003648:	83 f8 ff             	cmp    eax,0xffffffff
c000364b:	75 07                	jne    c0003654 <dir_next+0xa7>
c000364d:	b9 01 00 00 00       	mov    ecx,0x1
c0003652:	eb 54                	jmp    c00036a8 <dir_next+0xfb>
c0003654:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003657:	77 30                	ja     c0003689 <dir_next+0xdc>
c0003659:	85 c9                	test   ecx,ecx
c000365b:	74 af                	je     c000360c <dir_next+0x5f>
c000365d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003660:	89 d8                	mov    eax,ebx
c0003662:	e8 79 fd ff ff       	call   c00033e0 <create_chain>
c0003667:	b9 07 00 00 00       	mov    ecx,0x7
c000366c:	89 c6                	mov    esi,eax
c000366e:	85 c0                	test   eax,eax
c0003670:	74 36                	je     c00036a8 <dir_next+0xfb>
c0003672:	83 f8 01             	cmp    eax,0x1
c0003675:	74 ca                	je     c0003641 <dir_next+0x94>
c0003677:	83 f8 ff             	cmp    eax,0xffffffff
c000367a:	74 d1                	je     c000364d <dir_next+0xa0>
c000367c:	89 c2                	mov    edx,eax
c000367e:	89 e8                	mov    eax,ebp
c0003680:	e8 54 f2 ff ff       	call   c00028d9 <dir_clear>
c0003685:	85 c0                	test   eax,eax
c0003687:	75 c4                	jne    c000364d <dir_next+0xa0>
c0003689:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000368c:	89 f2                	mov    edx,esi
c000368e:	89 e8                	mov    eax,ebp
c0003690:	e8 99 e9 ff ff       	call   c000202e <clst2sect>
c0003695:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003698:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000369c:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000369f:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00036a3:	31 c9                	xor    ecx,ecx
c00036a5:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00036a8:	83 c4 1c             	add    esp,0x1c
c00036ab:	89 c8                	mov    eax,ecx
c00036ad:	5b                   	pop    ebx
c00036ae:	5e                   	pop    esi
c00036af:	5f                   	pop    edi
c00036b0:	5d                   	pop    ebp
c00036b1:	c3                   	ret    

c00036b2 <dir_alloc>:
c00036b2:	55                   	push   ebp
c00036b3:	89 c5                	mov    ebp,eax
c00036b5:	57                   	push   edi
c00036b6:	89 d7                	mov    edi,edx
c00036b8:	56                   	push   esi
c00036b9:	31 d2                	xor    edx,edx
c00036bb:	53                   	push   ebx
c00036bc:	83 ec 0c             	sub    esp,0xc
c00036bf:	8b 30                	mov    esi,DWORD PTR [eax]
c00036c1:	e8 52 fc ff ff       	call   c0003318 <dir_sdi>
c00036c6:	85 c0                	test   eax,eax
c00036c8:	75 3b                	jne    c0003705 <dir_alloc+0x53>
c00036ca:	31 db                	xor    ebx,ebx
c00036cc:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00036cf:	89 f0                	mov    eax,esi
c00036d1:	e8 68 ec ff ff       	call   c000233e <move_window>
c00036d6:	85 c0                	test   eax,eax
c00036d8:	75 2b                	jne    c0003705 <dir_alloc+0x53>
c00036da:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00036dd:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00036e0:	85 d2                	test   edx,edx
c00036e2:	74 08                	je     c00036ec <dir_alloc+0x3a>
c00036e4:	81 fa e5 00 00 00    	cmp    edx,0xe5
c00036ea:	75 07                	jne    c00036f3 <dir_alloc+0x41>
c00036ec:	43                   	inc    ebx
c00036ed:	39 fb                	cmp    ebx,edi
c00036ef:	75 04                	jne    c00036f5 <dir_alloc+0x43>
c00036f1:	eb 1c                	jmp    c000370f <dir_alloc+0x5d>
c00036f3:	31 db                	xor    ebx,ebx
c00036f5:	ba 01 00 00 00       	mov    edx,0x1
c00036fa:	89 e8                	mov    eax,ebp
c00036fc:	e8 ac fe ff ff       	call   c00035ad <dir_next>
c0003701:	85 c0                	test   eax,eax
c0003703:	74 c7                	je     c00036cc <dir_alloc+0x1a>
c0003705:	83 f8 04             	cmp    eax,0x4
c0003708:	75 05                	jne    c000370f <dir_alloc+0x5d>
c000370a:	b8 07 00 00 00       	mov    eax,0x7
c000370f:	83 c4 0c             	add    esp,0xc
c0003712:	5b                   	pop    ebx
c0003713:	5e                   	pop    esi
c0003714:	5f                   	pop    edi
c0003715:	5d                   	pop    ebp
c0003716:	c3                   	ret    

c0003717 <dir_read>:
c0003717:	55                   	push   ebp
c0003718:	57                   	push   edi
c0003719:	bf ff ff ff ff       	mov    edi,0xffffffff
c000371e:	56                   	push   esi
c000371f:	be 04 00 00 00       	mov    esi,0x4
c0003724:	53                   	push   ebx
c0003725:	89 c3                	mov    ebx,eax
c0003727:	83 ec 1c             	sub    esp,0x1c
c000372a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000372e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003730:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003735:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003738:	85 d2                	test   edx,edx
c000373a:	0f 84 e3 00 00 00    	je     c0003823 <dir_read+0x10c>
c0003740:	89 e8                	mov    eax,ebp
c0003742:	e8 f7 eb ff ff       	call   c000233e <move_window>
c0003747:	89 c6                	mov    esi,eax
c0003749:	85 c0                	test   eax,eax
c000374b:	0f 85 dd 00 00 00    	jne    c000382e <dir_read+0x117>
c0003751:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003754:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003757:	88 04 24             	mov    BYTE PTR [esp],al
c000375a:	85 c0                	test   eax,eax
c000375c:	0f 84 c7 00 00 00    	je     c0003829 <dir_read+0x112>
c0003762:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c0003765:	83 e1 3f             	and    ecx,0x3f
c0003768:	83 f8 2e             	cmp    eax,0x2e
c000376b:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c000376e:	0f 84 95 00 00 00    	je     c0003809 <dir_read+0xf2>
c0003774:	3d e5 00 00 00       	cmp    eax,0xe5
c0003779:	0f 84 8a 00 00 00    	je     c0003809 <dir_read+0xf2>
c000377f:	0f b6 c9             	movzx  ecx,cl
c0003782:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003786:	83 e1 df             	and    ecx,0xffffffdf
c0003789:	83 f9 08             	cmp    ecx,0x8
c000378c:	0f 94 c1             	sete   cl
c000378f:	0f b6 c9             	movzx  ecx,cl
c0003792:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0003796:	75 71                	jne    c0003809 <dir_read+0xf2>
c0003798:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c000379d:	75 4a                	jne    c00037e9 <dir_read+0xd2>
c000379f:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00037a3:	74 16                	je     c00037bb <dir_read+0xa4>
c00037a5:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037a8:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00037af:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037b3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00037b6:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00037b9:	eb 0e                	jmp    c00037c9 <dir_read+0xb2>
c00037bb:	89 f9                	mov    ecx,edi
c00037bd:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037c2:	0f b6 c9             	movzx  ecx,cl
c00037c5:	39 c1                	cmp    ecx,eax
c00037c7:	75 45                	jne    c000380e <dir_read+0xf7>
c00037c9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00037cd:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037d2:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00037d5:	75 37                	jne    c000380e <dir_read+0xf7>
c00037d7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00037da:	e8 6c e8 ff ff       	call   c000204b <pick_lfn>
c00037df:	85 c0                	test   eax,eax
c00037e1:	74 2b                	je     c000380e <dir_read+0xf7>
c00037e3:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00037e6:	4f                   	dec    edi
c00037e7:	eb 25                	jmp    c000380e <dir_read+0xf7>
c00037e9:	89 f8                	mov    eax,edi
c00037eb:	84 c0                	test   al,al
c00037ed:	75 11                	jne    c0003800 <dir_read+0xe9>
c00037ef:	89 d0                	mov    eax,edx
c00037f1:	e8 32 ea ff ff       	call   c0002228 <sum_sfn>
c00037f6:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00037fa:	75 04                	jne    c0003800 <dir_read+0xe9>
c00037fc:	31 f6                	xor    esi,esi
c00037fe:	eb 35                	jmp    c0003835 <dir_read+0x11e>
c0003800:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003807:	eb 2c                	jmp    c0003835 <dir_read+0x11e>
c0003809:	bf ff ff ff ff       	mov    edi,0xffffffff
c000380e:	31 d2                	xor    edx,edx
c0003810:	89 d8                	mov    eax,ebx
c0003812:	e8 96 fd ff ff       	call   c00035ad <dir_next>
c0003817:	89 c6                	mov    esi,eax
c0003819:	85 c0                	test   eax,eax
c000381b:	0f 84 14 ff ff ff    	je     c0003735 <dir_read+0x1e>
c0003821:	eb 0b                	jmp    c000382e <dir_read+0x117>
c0003823:	85 f6                	test   esi,esi
c0003825:	74 d5                	je     c00037fc <dir_read+0xe5>
c0003827:	eb 05                	jmp    c000382e <dir_read+0x117>
c0003829:	be 04 00 00 00       	mov    esi,0x4
c000382e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003835:	83 c4 1c             	add    esp,0x1c
c0003838:	89 f0                	mov    eax,esi
c000383a:	5b                   	pop    ebx
c000383b:	5e                   	pop    esi
c000383c:	5f                   	pop    edi
c000383d:	5d                   	pop    ebp
c000383e:	c3                   	ret    

c000383f <dir_remove>:
c000383f:	57                   	push   edi
c0003840:	56                   	push   esi
c0003841:	53                   	push   ebx
c0003842:	89 c3                	mov    ebx,eax
c0003844:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003847:	8b 30                	mov    esi,DWORD PTR [eax]
c0003849:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000384c:	83 fa ff             	cmp    edx,0xffffffff
c000384f:	74 09                	je     c000385a <dir_remove+0x1b>
c0003851:	e8 c2 fa ff ff       	call   c0003318 <dir_sdi>
c0003856:	85 c0                	test   eax,eax
c0003858:	75 34                	jne    c000388e <dir_remove+0x4f>
c000385a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000385d:	89 f0                	mov    eax,esi
c000385f:	e8 da ea ff ff       	call   c000233e <move_window>
c0003864:	85 c0                	test   eax,eax
c0003866:	75 1c                	jne    c0003884 <dir_remove+0x45>
c0003868:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000386b:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c000386e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003872:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003875:	73 17                	jae    c000388e <dir_remove+0x4f>
c0003877:	31 d2                	xor    edx,edx
c0003879:	89 d8                	mov    eax,ebx
c000387b:	e8 2d fd ff ff       	call   c00035ad <dir_next>
c0003880:	85 c0                	test   eax,eax
c0003882:	74 d6                	je     c000385a <dir_remove+0x1b>
c0003884:	83 f8 04             	cmp    eax,0x4
c0003887:	75 05                	jne    c000388e <dir_remove+0x4f>
c0003889:	b8 02 00 00 00       	mov    eax,0x2
c000388e:	5b                   	pop    ebx
c000388f:	5e                   	pop    esi
c0003890:	5f                   	pop    edi
c0003891:	c3                   	ret    

c0003892 <dir_find>:
c0003892:	55                   	push   ebp
c0003893:	31 d2                	xor    edx,edx
c0003895:	57                   	push   edi
c0003896:	56                   	push   esi
c0003897:	53                   	push   ebx
c0003898:	89 c3                	mov    ebx,eax
c000389a:	83 ec 1c             	sub    esp,0x1c
c000389d:	8b 00                	mov    eax,DWORD PTR [eax]
c000389f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038a3:	89 d8                	mov    eax,ebx
c00038a5:	e8 6e fa ff ff       	call   c0003318 <dir_sdi>
c00038aa:	89 c6                	mov    esi,eax
c00038ac:	85 c0                	test   eax,eax
c00038ae:	0f 85 1d 01 00 00    	jne    c00039d1 <dir_find+0x13f>
c00038b4:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00038bb:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c00038c0:	bf ff ff ff ff       	mov    edi,0xffffffff
c00038c5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00038c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038cc:	e8 6d ea ff ff       	call   c000233e <move_window>
c00038d1:	89 c6                	mov    esi,eax
c00038d3:	85 c0                	test   eax,eax
c00038d5:	0f 85 f6 00 00 00    	jne    c00039d1 <dir_find+0x13f>
c00038db:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00038de:	0f b6 4d 00          	movzx  ecx,BYTE PTR [ebp+0x0]
c00038e2:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c00038e6:	85 c9                	test   ecx,ecx
c00038e8:	0f 84 de 00 00 00    	je     c00039cc <dir_find+0x13a>
c00038ee:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00038f1:	89 d0                	mov    eax,edx
c00038f3:	83 e0 3f             	and    eax,0x3f
c00038f6:	81 f9 e5 00 00 00    	cmp    ecx,0xe5
c00038fc:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00038ff:	0f 84 a6 00 00 00    	je     c00039ab <dir_find+0x119>
c0003905:	80 e2 08             	and    dl,0x8
c0003908:	0f b6 c0             	movzx  eax,al
c000390b:	74 0b                	je     c0003918 <dir_find+0x86>
c000390d:	83 f8 0f             	cmp    eax,0xf
c0003910:	0f 85 95 00 00 00    	jne    c00039ab <dir_find+0x119>
c0003916:	eb 05                	jmp    c000391d <dir_find+0x8b>
c0003918:	83 f8 0f             	cmp    eax,0xf
c000391b:	75 62                	jne    c000397f <dir_find+0xed>
c000391d:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003921:	0f 85 90 00 00 00    	jne    c00039b7 <dir_find+0x125>
c0003927:	f6 44 24 04 40       	test   BYTE PTR [esp+0x4],0x40
c000392c:	74 17                	je     c0003945 <dir_find+0xb3>
c000392e:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003931:	81 64 24 04 bf 00 00 00 	and    DWORD PTR [esp+0x4],0xbf
c0003939:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000393d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003940:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003943:	eb 13                	jmp    c0003958 <dir_find+0xc6>
c0003945:	89 f8                	mov    eax,edi
c0003947:	bf ff ff ff ff       	mov    edi,0xffffffff
c000394c:	0f b6 d0             	movzx  edx,al
c000394f:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0003954:	39 c2                	cmp    edx,eax
c0003956:	75 5f                	jne    c00039b7 <dir_find+0x125>
c0003958:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000395c:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003961:	3a 45 0d             	cmp    al,BYTE PTR [ebp+0xd]
c0003964:	75 51                	jne    c00039b7 <dir_find+0x125>
c0003966:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000396a:	89 ea                	mov    edx,ebp
c000396c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000396f:	e8 37 f3 ff ff       	call   c0002cab <cmp_lfn>
c0003974:	85 c0                	test   eax,eax
c0003976:	74 3f                	je     c00039b7 <dir_find+0x125>
c0003978:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000397c:	4f                   	dec    edi
c000397d:	eb 38                	jmp    c00039b7 <dir_find+0x125>
c000397f:	89 f8                	mov    eax,edi
c0003981:	84 c0                	test   al,al
c0003983:	75 0d                	jne    c0003992 <dir_find+0x100>
c0003985:	89 e8                	mov    eax,ebp
c0003987:	e8 9c e8 ff ff       	call   c0002228 <sum_sfn>
c000398c:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0003990:	74 3f                	je     c00039d1 <dir_find+0x13f>
c0003992:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003996:	75 13                	jne    c00039ab <dir_find+0x119>
c0003998:	8d 53 20             	lea    edx,[ebx+0x20]
c000399b:	b9 0b 00 00 00       	mov    ecx,0xb
c00039a0:	89 e8                	mov    eax,ebp
c00039a2:	e8 7c e4 ff ff       	call   c0001e23 <mem_cmp>
c00039a7:	85 c0                	test   eax,eax
c00039a9:	74 26                	je     c00039d1 <dir_find+0x13f>
c00039ab:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039b2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039b7:	31 d2                	xor    edx,edx
c00039b9:	89 d8                	mov    eax,ebx
c00039bb:	e8 ed fb ff ff       	call   c00035ad <dir_next>
c00039c0:	89 c6                	mov    esi,eax
c00039c2:	85 c0                	test   eax,eax
c00039c4:	0f 84 fb fe ff ff    	je     c00038c5 <dir_find+0x33>
c00039ca:	eb 05                	jmp    c00039d1 <dir_find+0x13f>
c00039cc:	be 04 00 00 00       	mov    esi,0x4
c00039d1:	83 c4 1c             	add    esp,0x1c
c00039d4:	89 f0                	mov    eax,esi
c00039d6:	5b                   	pop    ebx
c00039d7:	5e                   	pop    esi
c00039d8:	5f                   	pop    edi
c00039d9:	5d                   	pop    ebp
c00039da:	c3                   	ret    

c00039db <follow_path>:
c00039db:	56                   	push   esi
c00039dc:	53                   	push   ebx
c00039dd:	89 c3                	mov    ebx,eax
c00039df:	83 ec 14             	sub    esp,0x14
c00039e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039e6:	8b 30                	mov    esi,DWORD PTR [eax]
c00039e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039ec:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00039ef:	83 fa 5c             	cmp    edx,0x5c
c00039f2:	75 07                	jne    c00039fb <follow_path+0x20>
c00039f4:	40                   	inc    eax
c00039f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00039f9:	eb ed                	jmp    c00039e8 <follow_path+0xd>
c00039fb:	83 fa 2f             	cmp    edx,0x2f
c00039fe:	74 f4                	je     c00039f4 <follow_path+0x19>
c0003a00:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003a07:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003a0a:	77 3e                	ja     c0003a4a <follow_path+0x6f>
c0003a0c:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003a10:	31 d2                	xor    edx,edx
c0003a12:	89 d8                	mov    eax,ebx
c0003a14:	e8 ff f8 ff ff       	call   c0003318 <dir_sdi>
c0003a19:	eb 4f                	jmp    c0003a6a <follow_path+0x8f>
c0003a1b:	89 d8                	mov    eax,ebx
c0003a1d:	e8 70 fe ff ff       	call   c0003892 <dir_find>
c0003a22:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003a25:	85 c0                	test   eax,eax
c0003a27:	75 32                	jne    c0003a5b <follow_path+0x80>
c0003a29:	80 e2 04             	and    dl,0x4
c0003a2c:	75 3c                	jne    c0003a6a <follow_path+0x8f>
c0003a2e:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003a32:	74 31                	je     c0003a65 <follow_path+0x8a>
c0003a34:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003a37:	25 ff 01 00 00       	and    eax,0x1ff
c0003a3c:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003a40:	8a 06                	mov    al,BYTE PTR [esi]
c0003a42:	e8 7c f7 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003a47:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003a4a:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003a4e:	89 d8                	mov    eax,ebx
c0003a50:	e8 7f ef ff ff       	call   c00029d4 <create_name>
c0003a55:	85 c0                	test   eax,eax
c0003a57:	74 c2                	je     c0003a1b <follow_path+0x40>
c0003a59:	eb 0f                	jmp    c0003a6a <follow_path+0x8f>
c0003a5b:	83 f8 04             	cmp    eax,0x4
c0003a5e:	75 0a                	jne    c0003a6a <follow_path+0x8f>
c0003a60:	80 e2 04             	and    dl,0x4
c0003a63:	75 05                	jne    c0003a6a <follow_path+0x8f>
c0003a65:	b8 05 00 00 00       	mov    eax,0x5
c0003a6a:	83 c4 14             	add    esp,0x14
c0003a6d:	5b                   	pop    ebx
c0003a6e:	5e                   	pop    esi
c0003a6f:	c3                   	ret    

c0003a70 <dir_register>:
c0003a70:	55                   	push   ebp
c0003a71:	57                   	push   edi
c0003a72:	56                   	push   esi
c0003a73:	be 06 00 00 00       	mov    esi,0x6
c0003a78:	53                   	push   ebx
c0003a79:	83 ec 2c             	sub    esp,0x2c
c0003a7c:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003a7f:	80 e2 a0             	and    dl,0xa0
c0003a82:	0f 85 66 01 00 00    	jne    c0003bee <dir_register+0x17e>
c0003a88:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a8a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003a92:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003a95:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003a99:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003a9e:	74 06                	je     c0003aa6 <dir_register+0x36>
c0003aa0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003aa4:	eb ef                	jmp    c0003a95 <dir_register+0x25>
c0003aa6:	89 c3                	mov    ebx,eax
c0003aa8:	b9 0c 00 00 00       	mov    ecx,0xc
c0003aad:	8d 40 20             	lea    eax,[eax+0x20]
c0003ab0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003ab4:	89 c2                	mov    edx,eax
c0003ab6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003aba:	e8 44 e3 ff ff       	call   c0001e03 <mem_cpy>
c0003abf:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003ac4:	74 48                	je     c0003b0e <dir_register+0x9e>
c0003ac6:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003aca:	bd 01 00 00 00       	mov    ebp,0x1
c0003acf:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003ad2:	55                   	push   ebp
c0003ad3:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003ad7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003adb:	e8 86 e6 ff ff       	call   c0002166 <gen_numname>
c0003ae0:	58                   	pop    eax
c0003ae1:	89 d8                	mov    eax,ebx
c0003ae3:	e8 aa fd ff ff       	call   c0003892 <dir_find>
c0003ae8:	89 c6                	mov    esi,eax
c0003aea:	85 c0                	test   eax,eax
c0003aec:	75 10                	jne    c0003afe <dir_register+0x8e>
c0003aee:	45                   	inc    ebp
c0003aef:	83 fd 64             	cmp    ebp,0x64
c0003af2:	75 db                	jne    c0003acf <dir_register+0x5f>
c0003af4:	be 07 00 00 00       	mov    esi,0x7
c0003af9:	e9 f0 00 00 00       	jmp    c0003bee <dir_register+0x17e>
c0003afe:	83 f8 04             	cmp    eax,0x4
c0003b01:	0f 85 e7 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b07:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003b0b:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003b0e:	bd 01 00 00 00       	mov    ebp,0x1
c0003b13:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003b18:	74 13                	je     c0003b2d <dir_register+0xbd>
c0003b1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b1e:	b9 0d 00 00 00       	mov    ecx,0xd
c0003b23:	83 c0 0c             	add    eax,0xc
c0003b26:	31 d2                	xor    edx,edx
c0003b28:	f7 f1                	div    ecx
c0003b2a:	8d 68 01             	lea    ebp,[eax+0x1]
c0003b2d:	89 ea                	mov    edx,ebp
c0003b2f:	89 d8                	mov    eax,ebx
c0003b31:	e8 7c fb ff ff       	call   c00036b2 <dir_alloc>
c0003b36:	89 c6                	mov    esi,eax
c0003b38:	85 c0                	test   eax,eax
c0003b3a:	0f 85 ae 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b40:	4d                   	dec    ebp
c0003b41:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003b45:	74 67                	je     c0003bae <dir_register+0x13e>
c0003b47:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003b4a:	89 e8                	mov    eax,ebp
c0003b4c:	c1 e0 05             	shl    eax,0x5
c0003b4f:	29 c2                	sub    edx,eax
c0003b51:	89 d8                	mov    eax,ebx
c0003b53:	e8 c0 f7 ff ff       	call   c0003318 <dir_sdi>
c0003b58:	89 c6                	mov    esi,eax
c0003b5a:	85 c0                	test   eax,eax
c0003b5c:	0f 85 8c 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003b66:	e8 bd e6 ff ff       	call   c0002228 <sum_sfn>
c0003b6b:	0f b6 e8             	movzx  ebp,al
c0003b6e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003b71:	89 f8                	mov    eax,edi
c0003b73:	e8 c6 e7 ff ff       	call   c000233e <move_window>
c0003b78:	89 c6                	mov    esi,eax
c0003b7a:	85 c0                	test   eax,eax
c0003b7c:	75 70                	jne    c0003bee <dir_register+0x17e>
c0003b7e:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0003b83:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003b86:	83 ec 0c             	sub    esp,0xc
c0003b89:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003b8c:	55                   	push   ebp
c0003b8d:	e8 39 e5 ff ff       	call   c00020cb <put_lfn>
c0003b92:	31 d2                	xor    edx,edx
c0003b94:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003b98:	89 d8                	mov    eax,ebx
c0003b9a:	e8 0e fa ff ff       	call   c00035ad <dir_next>
c0003b9f:	83 c4 10             	add    esp,0x10
c0003ba2:	89 c6                	mov    esi,eax
c0003ba4:	85 c0                	test   eax,eax
c0003ba6:	75 46                	jne    c0003bee <dir_register+0x17e>
c0003ba8:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0003bac:	75 c0                	jne    c0003b6e <dir_register+0xfe>
c0003bae:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bb1:	89 f8                	mov    eax,edi
c0003bb3:	e8 86 e7 ff ff       	call   c000233e <move_window>
c0003bb8:	89 c6                	mov    esi,eax
c0003bba:	85 c0                	test   eax,eax
c0003bbc:	75 30                	jne    c0003bee <dir_register+0x17e>
c0003bbe:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003bc1:	b9 20 00 00 00       	mov    ecx,0x20
c0003bc6:	31 d2                	xor    edx,edx
c0003bc8:	e8 4b e2 ff ff       	call   c0001e18 <mem_set>
c0003bcd:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003bd0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003bd4:	b9 0b 00 00 00       	mov    ecx,0xb
c0003bd9:	e8 25 e2 ff ff       	call   c0001e03 <mem_cpy>
c0003bde:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003be1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003be4:	83 e0 18             	and    eax,0x18
c0003be7:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003bea:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003bee:	83 c4 2c             	add    esp,0x2c
c0003bf1:	89 f0                	mov    eax,esi
c0003bf3:	5b                   	pop    ebx
c0003bf4:	5e                   	pop    esi
c0003bf5:	5f                   	pop    edi
c0003bf6:	5d                   	pop    ebp
c0003bf7:	c3                   	ret    

c0003bf8 <f_mount>:
c0003bf8:	53                   	push   ebx
c0003bf9:	83 ec 18             	sub    esp,0x18
c0003bfc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003c00:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003c04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c08:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003c0c:	e8 37 e6 ff ff       	call   c0002248 <get_ldnumber>
c0003c11:	89 c2                	mov    edx,eax
c0003c13:	b8 0b 00 00 00       	mov    eax,0xb
c0003c18:	85 d2                	test   edx,edx
c0003c1a:	78 39                	js     c0003c55 <f_mount+0x5d>
c0003c1c:	8b 04 95 a0 64 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9b60]
c0003c23:	85 c0                	test   eax,eax
c0003c25:	74 03                	je     c0003c2a <f_mount+0x32>
c0003c27:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c2e:	85 c0                	test   eax,eax
c0003c30:	74 03                	je     c0003c35 <f_mount+0x3d>
c0003c32:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c39:	89 04 95 a0 64 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9b60],eax
c0003c40:	31 c0                	xor    eax,eax
c0003c42:	84 db                	test   bl,bl
c0003c44:	74 0f                	je     c0003c55 <f_mount+0x5d>
c0003c46:	31 c9                	xor    ecx,ecx
c0003c48:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003c4c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003c50:	e8 3c e8 ff ff       	call   c0002491 <mount_volume>
c0003c55:	83 c4 18             	add    esp,0x18
c0003c58:	5b                   	pop    ebx
c0003c59:	c3                   	ret    

c0003c5a <f_open>:
c0003c5a:	55                   	push   ebp
c0003c5b:	b8 09 00 00 00       	mov    eax,0x9
c0003c60:	57                   	push   edi
c0003c61:	56                   	push   esi
c0003c62:	53                   	push   ebx
c0003c63:	83 ec 5c             	sub    esp,0x5c
c0003c66:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003c6a:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003c6e:	85 db                	test   ebx,ebx
c0003c70:	0f 84 9f 02 00 00    	je     c0003f15 <f_open+0x2bb>
c0003c76:	89 fd                	mov    ebp,edi
c0003c78:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003c7c:	83 e5 3f             	and    ebp,0x3f
c0003c7f:	89 e8                	mov    eax,ebp
c0003c81:	89 ee                	mov    esi,ebp
c0003c83:	0f b6 c8             	movzx  ecx,al
c0003c86:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003c8a:	e8 02 e8 ff ff       	call   c0002491 <mount_volume>
c0003c8f:	85 c0                	test   eax,eax
c0003c91:	0f 85 78 02 00 00    	jne    c0003f0f <f_open+0x2b5>
c0003c97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c9b:	83 ec 0c             	sub    esp,0xc
c0003c9e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ca2:	68 00 02 00 00       	push   0x200
c0003ca7:	e8 74 1f 00 00       	call   c0005c20 <ff_memalloc>
c0003cac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003cb0:	83 c4 10             	add    esp,0x10
c0003cb3:	b8 11 00 00 00       	mov    eax,0x11
c0003cb8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003cbd:	0f 84 52 02 00 00    	je     c0003f15 <f_open+0x2bb>
c0003cc3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003cc7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003ccb:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003ccf:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003cd2:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003cd6:	e8 00 fd ff ff       	call   c00039db <follow_path>
c0003cdb:	85 c0                	test   eax,eax
c0003cdd:	75 0c                	jne    c0003ceb <f_open+0x91>
c0003cdf:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003ce4:	74 05                	je     c0003ceb <f_open+0x91>
c0003ce6:	b8 06 00 00 00       	mov    eax,0x6
c0003ceb:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003cf1:	0f 84 d5 00 00 00    	je     c0003dcc <f_open+0x172>
c0003cf7:	85 c0                	test   eax,eax
c0003cf9:	74 21                	je     c0003d1c <f_open+0xc2>
c0003cfb:	83 f8 04             	cmp    eax,0x4
c0003cfe:	0f 85 f0 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d04:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d08:	e8 63 fd ff ff       	call   c0003a70 <dir_register>
c0003d0d:	85 c0                	test   eax,eax
c0003d0f:	0f 85 df 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d15:	83 cd 08             	or     ebp,0x8
c0003d18:	89 ee                	mov    esi,ebp
c0003d1a:	eb 2c                	jmp    c0003d48 <f_open+0xee>
c0003d1c:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003d20:	b8 07 00 00 00       	mov    eax,0x7
c0003d25:	80 e2 11             	and    dl,0x11
c0003d28:	0f 85 c6 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d2e:	b8 08 00 00 00       	mov    eax,0x8
c0003d33:	f7 c7 04 00 00 00    	test   edi,0x4
c0003d39:	0f 85 b5 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d3f:	83 e7 08             	and    edi,0x8
c0003d42:	0f 84 b1 00 00 00    	je     c0003df9 <f_open+0x19f>
c0003d48:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003d4c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d50:	89 ea                	mov    edx,ebp
c0003d52:	8a 00                	mov    al,BYTE PTR [eax]
c0003d54:	e8 6a f4 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003d59:	ba 00 00 21 50       	mov    edx,0x50210000
c0003d5e:	89 c7                	mov    edi,eax
c0003d60:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003d63:	e8 98 e0 ff ff       	call   c0001e00 <st_dword>
c0003d68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003d6c:	31 c9                	xor    ecx,ecx
c0003d6e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003d72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d76:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003d7a:	e8 6d f4 ff ff       	call   c00031ec <st_clust.isra.1>
c0003d7f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003d83:	31 d2                	xor    edx,edx
c0003d85:	83 c0 1c             	add    eax,0x1c
c0003d88:	e8 73 e0 ff ff       	call   c0001e00 <st_dword>
c0003d8d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d91:	85 ff                	test   edi,edi
c0003d93:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003d97:	74 60                	je     c0003df9 <f_open+0x19f>
c0003d99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d9d:	31 c9                	xor    ecx,ecx
c0003d9f:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003da2:	89 fa                	mov    edx,edi
c0003da4:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003da8:	e8 72 f7 ff ff       	call   c000351f <remove_chain>
c0003dad:	85 c0                	test   eax,eax
c0003daf:	0f 85 3f 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003db5:	89 ea                	mov    edx,ebp
c0003db7:	4f                   	dec    edi
c0003db8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dbc:	e8 7d e5 ff ff       	call   c000233e <move_window>
c0003dc1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003dc5:	85 c0                	test   eax,eax
c0003dc7:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003dca:	eb 27                	jmp    c0003df3 <f_open+0x199>
c0003dcc:	85 c0                	test   eax,eax
c0003dce:	0f 85 20 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003dd4:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003dd8:	b8 04 00 00 00       	mov    eax,0x4
c0003ddd:	f6 c2 10             	test   dl,0x10
c0003de0:	0f 85 0e 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003de6:	83 e7 02             	and    edi,0x2
c0003de9:	74 0e                	je     c0003df9 <f_open+0x19f>
c0003deb:	b8 07 00 00 00       	mov    eax,0x7
c0003df0:	80 e2 01             	and    dl,0x1
c0003df3:	0f 85 fb 00 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003df9:	f7 c6 08 00 00 00    	test   esi,0x8
c0003dff:	74 03                	je     c0003e04 <f_open+0x1aa>
c0003e01:	83 ce 40             	or     esi,0x40
c0003e04:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003e08:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003e0c:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003e0f:	89 fa                	mov    edx,edi
c0003e11:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003e14:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003e17:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003e1a:	e8 a4 f3 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003e1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003e22:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003e25:	8d 7b 28             	lea    edi,[ebx+0x28]
c0003e28:	e8 b7 df ff ff       	call   c0001de4 <ld_dword>
c0003e2d:	89 2b                	mov    DWORD PTR [ebx],ebp
c0003e2f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003e32:	31 d2                	xor    edx,edx
c0003e34:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0003e38:	b9 00 02 00 00       	mov    ecx,0x200
c0003e3d:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003e41:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003e45:	89 f0                	mov    eax,esi
c0003e47:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003e4e:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003e51:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003e58:	89 f8                	mov    eax,edi
c0003e5a:	e8 b9 df ff ff       	call   c0001e18 <mem_set>
c0003e5f:	83 e6 20             	and    esi,0x20
c0003e62:	75 07                	jne    c0003e6b <f_open+0x211>
c0003e64:	31 c0                	xor    eax,eax
c0003e66:	e9 89 00 00 00       	jmp    c0003ef4 <f_open+0x29a>
c0003e6b:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0003e6e:	85 ed                	test   ebp,ebp
c0003e70:	74 f2                	je     c0003e64 <f_open+0x20a>
c0003e72:	89 6b 14             	mov    DWORD PTR [ebx+0x14],ebp
c0003e75:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e79:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003e7c:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003e80:	c1 e6 09             	shl    esi,0x9
c0003e83:	39 ee                	cmp    esi,ebp
c0003e85:	73 1c                	jae    c0003ea3 <f_open+0x249>
c0003e87:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003e89:	29 f5                	sub    ebp,esi
c0003e8b:	e8 84 f3 ff ff       	call   c0003214 <get_fat.isra.2>
c0003e90:	89 c2                	mov    edx,eax
c0003e92:	83 f8 01             	cmp    eax,0x1
c0003e95:	76 10                	jbe    c0003ea7 <f_open+0x24d>
c0003e97:	83 f8 ff             	cmp    eax,0xffffffff
c0003e9a:	75 e7                	jne    c0003e83 <f_open+0x229>
c0003e9c:	b8 01 00 00 00       	mov    eax,0x1
c0003ea1:	eb 09                	jmp    c0003eac <f_open+0x252>
c0003ea3:	31 c0                	xor    eax,eax
c0003ea5:	eb 05                	jmp    c0003eac <f_open+0x252>
c0003ea7:	b8 02 00 00 00       	mov    eax,0x2
c0003eac:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003eaf:	85 c0                	test   eax,eax
c0003eb1:	75 41                	jne    c0003ef4 <f_open+0x29a>
c0003eb3:	f7 c5 ff 01 00 00    	test   ebp,0x1ff
c0003eb9:	74 a9                	je     c0003e64 <f_open+0x20a>
c0003ebb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003ebf:	89 f0                	mov    eax,esi
c0003ec1:	e8 68 e1 ff ff       	call   c000202e <clst2sect>
c0003ec6:	89 c2                	mov    edx,eax
c0003ec8:	b8 02 00 00 00       	mov    eax,0x2
c0003ecd:	85 d2                	test   edx,edx
c0003ecf:	74 23                	je     c0003ef4 <f_open+0x29a>
c0003ed1:	c1 ed 09             	shr    ebp,0x9
c0003ed4:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
c0003ed8:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003edb:	6a 01                	push   0x1
c0003edd:	50                   	push   eax
c0003ede:	57                   	push   edi
c0003edf:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003ee3:	50                   	push   eax
c0003ee4:	e8 a3 de ff ff       	call   c0001d8c <disk_read>
c0003ee9:	83 c4 10             	add    esp,0x10
c0003eec:	85 c0                	test   eax,eax
c0003eee:	0f 95 c0             	setne  al
c0003ef1:	0f b6 c0             	movzx  eax,al
c0003ef4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003ef8:	83 ec 0c             	sub    esp,0xc
c0003efb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003eff:	e8 34 1d 00 00       	call   c0005c38 <ff_memfree>
c0003f04:	83 c4 10             	add    esp,0x10
c0003f07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003f0b:	85 c0                	test   eax,eax
c0003f0d:	74 06                	je     c0003f15 <f_open+0x2bb>
c0003f0f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003f15:	83 c4 5c             	add    esp,0x5c
c0003f18:	5b                   	pop    ebx
c0003f19:	5e                   	pop    esi
c0003f1a:	5f                   	pop    edi
c0003f1b:	5d                   	pop    ebp
c0003f1c:	c3                   	ret    

c0003f1d <f_read>:
c0003f1d:	55                   	push   ebp
c0003f1e:	57                   	push   edi
c0003f1f:	56                   	push   esi
c0003f20:	53                   	push   ebx
c0003f21:	83 ec 2c             	sub    esp,0x2c
c0003f24:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003f28:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003f2c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003f32:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003f36:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003f3a:	89 d8                	mov    eax,ebx
c0003f3c:	e8 54 e3 ff ff       	call   c0002295 <validate>
c0003f41:	89 c5                	mov    ebp,eax
c0003f43:	85 c0                	test   eax,eax
c0003f45:	0f 85 c7 01 00 00    	jne    c0004112 <f_read+0x1f5>
c0003f4b:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003f4f:	85 ed                	test   ebp,ebp
c0003f51:	0f 85 bb 01 00 00    	jne    c0004112 <f_read+0x1f5>
c0003f57:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003f5b:	0f 84 ac 01 00 00    	je     c000410d <f_read+0x1f0>
c0003f61:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003f64:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003f67:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f6b:	39 f0                	cmp    eax,esi
c0003f6d:	0f 86 b0 00 00 00    	jbe    c0004023 <f_read+0x106>
c0003f73:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0003f77:	e9 a7 00 00 00       	jmp    c0004023 <f_read+0x106>
c0003f7c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003f7f:	a9 ff 01 00 00       	test   eax,0x1ff
c0003f84:	0f 85 56 01 00 00    	jne    c00040e0 <f_read+0x1c3>
c0003f8a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003f8e:	0f b7 7a 0a          	movzx  edi,WORD PTR [edx+0xa]
c0003f92:	89 c2                	mov    edx,eax
c0003f94:	4f                   	dec    edi
c0003f95:	c1 ea 09             	shr    edx,0x9
c0003f98:	21 d7                	and    edi,edx
c0003f9a:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0003f9e:	0f 84 8f 00 00 00    	je     c0004033 <f_read+0x116>
c0003fa4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003fa8:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003fab:	89 c8                	mov    eax,ecx
c0003fad:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003fb1:	e8 78 e0 ff ff       	call   c000202e <clst2sect>
c0003fb6:	85 c0                	test   eax,eax
c0003fb8:	0f 84 8d 00 00 00    	je     c000404b <f_read+0x12e>
c0003fbe:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003fc2:	81 7c 24 04 ff 01 00 00 	cmp    DWORD PTR [esp+0x4],0x1ff
c0003fca:	8d 3c 01             	lea    edi,[ecx+eax*1]
c0003fcd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003fd1:	0f 86 bf 00 00 00    	jbe    c0004096 <f_read+0x179>
c0003fd7:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0003fdb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003fdf:	c1 ee 09             	shr    esi,0x9
c0003fe2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fe6:	01 f2                	add    edx,esi
c0003fe8:	39 c2                	cmp    edx,eax
c0003fea:	76 06                	jbe    c0003ff2 <f_read+0xd5>
c0003fec:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003ff0:	89 c6                	mov    esi,eax
c0003ff2:	56                   	push   esi
c0003ff3:	57                   	push   edi
c0003ff4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ff8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ffc:	50                   	push   eax
c0003ffd:	e8 8a dd ff ff       	call   c0001d8c <disk_read>
c0004002:	83 c4 10             	add    esp,0x10
c0004005:	85 c0                	test   eax,eax
c0004007:	75 55                	jne    c000405e <f_read+0x141>
c0004009:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000400d:	75 65                	jne    c0004074 <f_read+0x157>
c000400f:	c1 e6 09             	shl    esi,0x9
c0004012:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004016:	29 74 24 04          	sub    DWORD PTR [esp+0x4],esi
c000401a:	01 30                	add    DWORD PTR [eax],esi
c000401c:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004020:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004023:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0004028:	0f 85 4e ff ff ff    	jne    c0003f7c <f_read+0x5f>
c000402e:	e9 df 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c0004033:	85 c0                	test   eax,eax
c0004035:	75 05                	jne    c000403c <f_read+0x11f>
c0004037:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000403a:	eb 0a                	jmp    c0004046 <f_read+0x129>
c000403c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000403f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004041:	e8 ce f1 ff ff       	call   c0003214 <get_fat.isra.2>
c0004046:	83 f8 01             	cmp    eax,0x1
c0004049:	77 0e                	ja     c0004059 <f_read+0x13c>
c000404b:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000404f:	bd 02 00 00 00       	mov    ebp,0x2
c0004054:	e9 b9 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c0004059:	83 f8 ff             	cmp    eax,0xffffffff
c000405c:	75 0e                	jne    c000406c <f_read+0x14f>
c000405e:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004062:	bd 01 00 00 00       	mov    ebp,0x1
c0004067:	e9 a6 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c000406c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000406f:	e9 30 ff ff ff       	jmp    c0003fa4 <f_read+0x87>
c0004074:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004077:	29 f8                	sub    eax,edi
c0004079:	39 f0                	cmp    eax,esi
c000407b:	73 92                	jae    c000400f <f_read+0xf2>
c000407d:	c1 e0 09             	shl    eax,0x9
c0004080:	8d 53 28             	lea    edx,[ebx+0x28]
c0004083:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0004087:	b9 00 02 00 00       	mov    ecx,0x200
c000408c:	e8 72 dd ff ff       	call   c0001e03 <mem_cpy>
c0004091:	e9 79 ff ff ff       	jmp    c000400f <f_read+0xf2>
c0004096:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004099:	39 f8                	cmp    eax,edi
c000409b:	74 40                	je     c00040dd <f_read+0x1c0>
c000409d:	8d 73 28             	lea    esi,[ebx+0x28]
c00040a0:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00040a4:	74 1e                	je     c00040c4 <f_read+0x1a7>
c00040a6:	6a 01                	push   0x1
c00040a8:	50                   	push   eax
c00040a9:	56                   	push   esi
c00040aa:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040ae:	50                   	push   eax
c00040af:	e8 ee dc ff ff       	call   c0001da2 <disk_write>
c00040b4:	83 c4 10             	add    esp,0x10
c00040b7:	85 c0                	test   eax,eax
c00040b9:	75 a3                	jne    c000405e <f_read+0x141>
c00040bb:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00040be:	83 e0 7f             	and    eax,0x7f
c00040c1:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00040c4:	6a 01                	push   0x1
c00040c6:	57                   	push   edi
c00040c7:	56                   	push   esi
c00040c8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00040cc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00040d0:	50                   	push   eax
c00040d1:	e8 b6 dc ff ff       	call   c0001d8c <disk_read>
c00040d6:	83 c4 10             	add    esp,0x10
c00040d9:	85 c0                	test   eax,eax
c00040db:	75 81                	jne    c000405e <f_read+0x141>
c00040dd:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00040e0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00040e3:	ba 00 02 00 00       	mov    edx,0x200
c00040e8:	25 ff 01 00 00       	and    eax,0x1ff
c00040ed:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00040f1:	29 c2                	sub    edx,eax
c00040f3:	39 d6                	cmp    esi,edx
c00040f5:	76 02                	jbe    c00040f9 <f_read+0x1dc>
c00040f7:	89 d6                	mov    esi,edx
c00040f9:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00040fd:	89 f1                	mov    ecx,esi
c00040ff:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004103:	e8 fb dc ff ff       	call   c0001e03 <mem_cpy>
c0004108:	e9 05 ff ff ff       	jmp    c0004012 <f_read+0xf5>
c000410d:	bd 07 00 00 00       	mov    ebp,0x7
c0004112:	83 c4 2c             	add    esp,0x2c
c0004115:	89 e8                	mov    eax,ebp
c0004117:	5b                   	pop    ebx
c0004118:	5e                   	pop    esi
c0004119:	5f                   	pop    edi
c000411a:	5d                   	pop    ebp
c000411b:	c3                   	ret    

c000411c <f_write>:
c000411c:	55                   	push   ebp
c000411d:	57                   	push   edi
c000411e:	56                   	push   esi
c000411f:	53                   	push   ebx
c0004120:	83 ec 2c             	sub    esp,0x2c
c0004123:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004127:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000412b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0004131:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004135:	89 d8                	mov    eax,ebx
c0004137:	e8 59 e1 ff ff       	call   c0002295 <validate>
c000413c:	89 c5                	mov    ebp,eax
c000413e:	85 c0                	test   eax,eax
c0004140:	0f 85 14 02 00 00    	jne    c000435a <f_write+0x23e>
c0004146:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c000414a:	85 ed                	test   ebp,ebp
c000414c:	0f 85 08 02 00 00    	jne    c000435a <f_write+0x23e>
c0004152:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004156:	0f 84 f9 01 00 00    	je     c0004355 <f_write+0x239>
c000415c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000415f:	89 c7                	mov    edi,eax
c0004161:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004165:	0f 83 ef 00 00 00    	jae    c000425a <f_write+0x13e>
c000416b:	f7 d0                	not    eax
c000416d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0004171:	e9 e4 00 00 00       	jmp    c000425a <f_write+0x13e>
c0004176:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004179:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000417f:	0f 85 9a 01 00 00    	jne    c000431f <f_write+0x203>
c0004185:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004189:	89 d1                	mov    ecx,edx
c000418b:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000418f:	c1 e9 09             	shr    ecx,0x9
c0004192:	48                   	dec    eax
c0004193:	21 c8                	and    eax,ecx
c0004195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004199:	0f 84 c8 00 00 00    	je     c0004267 <f_write+0x14b>
c000419f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041a3:	0f 85 22 01 00 00    	jne    c00042cb <f_write+0x1af>
c00041a9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00041ad:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041b0:	89 c8                	mov    eax,ecx
c00041b2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041b6:	e8 73 de ff ff       	call   c000202e <clst2sect>
c00041bb:	85 c0                	test   eax,eax
c00041bd:	0f 84 d2 00 00 00    	je     c0004295 <f_write+0x179>
c00041c3:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00041c7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041cb:	01 c7                	add    edi,eax
c00041cd:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00041d5:	0f 86 1c 01 00 00    	jbe    c00042f7 <f_write+0x1db>
c00041db:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00041df:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00041e3:	c1 ee 09             	shr    esi,0x9
c00041e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00041ea:	01 f2                	add    edx,esi
c00041ec:	39 c2                	cmp    edx,eax
c00041ee:	76 06                	jbe    c00041f6 <f_write+0xda>
c00041f0:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00041f4:	89 c6                	mov    esi,eax
c00041f6:	56                   	push   esi
c00041f7:	57                   	push   edi
c00041f8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00041fc:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004200:	50                   	push   eax
c0004201:	e8 9c db ff ff       	call   c0001da2 <disk_write>
c0004206:	83 c4 10             	add    esp,0x10
c0004209:	85 c0                	test   eax,eax
c000420b:	0f 85 97 00 00 00    	jne    c00042a8 <f_write+0x18c>
c0004211:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004214:	29 fa                	sub    edx,edi
c0004216:	39 f2                	cmp    edx,esi
c0004218:	73 1d                	jae    c0004237 <f_write+0x11b>
c000421a:	8d 43 28             	lea    eax,[ebx+0x28]
c000421d:	c1 e2 09             	shl    edx,0x9
c0004220:	b9 00 02 00 00       	mov    ecx,0x200
c0004225:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c0004229:	e8 d5 db ff ff       	call   c0001e03 <mem_cpy>
c000422e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004231:	83 e0 7f             	and    eax,0x7f
c0004234:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004237:	c1 e6 09             	shl    esi,0x9
c000423a:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000423e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004242:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004246:	01 30                	add    DWORD PTR [eax],esi
c0004248:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000424b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000424e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004251:	39 f0                	cmp    eax,esi
c0004253:	73 02                	jae    c0004257 <f_write+0x13b>
c0004255:	89 f0                	mov    eax,esi
c0004257:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000425a:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000425f:	0f 85 11 ff ff ff    	jne    c0004176 <f_write+0x5a>
c0004265:	eb 1b                	jmp    c0004282 <f_write+0x166>
c0004267:	85 d2                	test   edx,edx
c0004269:	75 09                	jne    c0004274 <f_write+0x158>
c000426b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000426e:	85 c0                	test   eax,eax
c0004270:	75 1e                	jne    c0004290 <f_write+0x174>
c0004272:	eb 03                	jmp    c0004277 <f_write+0x15b>
c0004274:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004277:	89 d8                	mov    eax,ebx
c0004279:	e8 62 f1 ff ff       	call   c00033e0 <create_chain>
c000427e:	85 c0                	test   eax,eax
c0004280:	75 0e                	jne    c0004290 <f_write+0x174>
c0004282:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004285:	83 c8 40             	or     eax,0x40
c0004288:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000428b:	e9 ca 00 00 00       	jmp    c000435a <f_write+0x23e>
c0004290:	83 f8 01             	cmp    eax,0x1
c0004293:	75 0e                	jne    c00042a3 <f_write+0x187>
c0004295:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004299:	bd 02 00 00 00       	mov    ebp,0x2
c000429e:	e9 b7 00 00 00       	jmp    c000435a <f_write+0x23e>
c00042a3:	83 f8 ff             	cmp    eax,0xffffffff
c00042a6:	75 0e                	jne    c00042b6 <f_write+0x19a>
c00042a8:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00042ac:	bd 01 00 00 00       	mov    ebp,0x1
c00042b1:	e9 a4 00 00 00       	jmp    c000435a <f_write+0x23e>
c00042b6:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00042b9:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00042bd:	0f 85 dc fe ff ff    	jne    c000419f <f_write+0x83>
c00042c3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00042c6:	e9 d4 fe ff ff       	jmp    c000419f <f_write+0x83>
c00042cb:	6a 01                	push   0x1
c00042cd:	8d 43 28             	lea    eax,[ebx+0x28]
c00042d0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00042d3:	50                   	push   eax
c00042d4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042d8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042dc:	50                   	push   eax
c00042dd:	e8 c0 da ff ff       	call   c0001da2 <disk_write>
c00042e2:	83 c4 10             	add    esp,0x10
c00042e5:	85 c0                	test   eax,eax
c00042e7:	75 bf                	jne    c00042a8 <f_write+0x18c>
c00042e9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042ec:	83 e0 7f             	and    eax,0x7f
c00042ef:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042f2:	e9 b2 fe ff ff       	jmp    c00041a9 <f_write+0x8d>
c00042f7:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00042fa:	74 20                	je     c000431c <f_write+0x200>
c00042fc:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042ff:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0004302:	76 18                	jbe    c000431c <f_write+0x200>
c0004304:	6a 01                	push   0x1
c0004306:	8d 43 28             	lea    eax,[ebx+0x28]
c0004309:	57                   	push   edi
c000430a:	50                   	push   eax
c000430b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000430f:	50                   	push   eax
c0004310:	e8 77 da ff ff       	call   c0001d8c <disk_read>
c0004315:	83 c4 10             	add    esp,0x10
c0004318:	85 c0                	test   eax,eax
c000431a:	75 8c                	jne    c00042a8 <f_write+0x18c>
c000431c:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c000431f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004322:	ba 00 02 00 00       	mov    edx,0x200
c0004327:	25 ff 01 00 00       	and    eax,0x1ff
c000432c:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004330:	29 c2                	sub    edx,eax
c0004332:	39 d6                	cmp    esi,edx
c0004334:	76 02                	jbe    c0004338 <f_write+0x21c>
c0004336:	89 d6                	mov    esi,edx
c0004338:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c000433c:	89 f1                	mov    ecx,esi
c000433e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004342:	e8 bc da ff ff       	call   c0001e03 <mem_cpy>
c0004347:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000434a:	83 c8 80             	or     eax,0xffffff80
c000434d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004350:	e9 e5 fe ff ff       	jmp    c000423a <f_write+0x11e>
c0004355:	bd 07 00 00 00       	mov    ebp,0x7
c000435a:	83 c4 2c             	add    esp,0x2c
c000435d:	89 e8                	mov    eax,ebp
c000435f:	5b                   	pop    ebx
c0004360:	5e                   	pop    esi
c0004361:	5f                   	pop    edi
c0004362:	5d                   	pop    ebp
c0004363:	c3                   	ret    

c0004364 <f_sync>:
c0004364:	56                   	push   esi
c0004365:	53                   	push   ebx
c0004366:	83 ec 14             	sub    esp,0x14
c0004369:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000436d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004371:	89 d8                	mov    eax,ebx
c0004373:	e8 1d df ff ff       	call   c0002295 <validate>
c0004378:	85 c0                	test   eax,eax
c000437a:	0f 85 a3 00 00 00    	jne    c0004423 <f_sync+0xbf>
c0004380:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004383:	f6 c2 40             	test   dl,0x40
c0004386:	0f 84 97 00 00 00    	je     c0004423 <f_sync+0xbf>
c000438c:	80 e2 80             	and    dl,0x80
c000438f:	74 2e                	je     c00043bf <f_sync+0x5b>
c0004391:	6a 01                	push   0x1
c0004393:	8d 43 28             	lea    eax,[ebx+0x28]
c0004396:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004399:	50                   	push   eax
c000439a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000439e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00043a2:	50                   	push   eax
c00043a3:	e8 fa d9 ff ff       	call   c0001da2 <disk_write>
c00043a8:	83 c4 10             	add    esp,0x10
c00043ab:	89 c2                	mov    edx,eax
c00043ad:	b8 01 00 00 00       	mov    eax,0x1
c00043b2:	85 d2                	test   edx,edx
c00043b4:	75 6d                	jne    c0004423 <f_sync+0xbf>
c00043b6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00043b9:	83 e0 7f             	and    eax,0x7f
c00043bc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00043bf:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00043c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00043c6:	e8 73 df ff ff       	call   c000233e <move_window>
c00043cb:	85 c0                	test   eax,eax
c00043cd:	75 54                	jne    c0004423 <f_sync+0xbf>
c00043cf:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00043d2:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00043d5:	89 f2                	mov    edx,esi
c00043d7:	83 c8 20             	or     eax,0x20
c00043da:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00043dd:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00043e0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00043e2:	e8 05 ee ff ff       	call   c00031ec <st_clust.isra.1>
c00043e7:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043ea:	8d 46 1c             	lea    eax,[esi+0x1c]
c00043ed:	e8 0e da ff ff       	call   c0001e00 <st_dword>
c00043f2:	8d 46 16             	lea    eax,[esi+0x16]
c00043f5:	ba 00 00 21 50       	mov    edx,0x50210000
c00043fa:	e8 01 da ff ff       	call   c0001e00 <st_dword>
c00043ff:	31 d2                	xor    edx,edx
c0004401:	8d 46 12             	lea    eax,[esi+0x12]
c0004404:	e8 f3 d9 ff ff       	call   c0001dfc <st_word>
c0004409:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000440d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004411:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004415:	e8 5b e9 ff ff       	call   c0002d75 <sync_fs>
c000441a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000441d:	83 e2 bf             	and    edx,0xffffffbf
c0004420:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004423:	83 c4 14             	add    esp,0x14
c0004426:	5b                   	pop    ebx
c0004427:	5e                   	pop    esi
c0004428:	c3                   	ret    

c0004429 <f_close>:
c0004429:	53                   	push   ebx
c000442a:	83 ec 24             	sub    esp,0x24
c000442d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004431:	53                   	push   ebx
c0004432:	e8 2d ff ff ff       	call   c0004364 <f_sync>
c0004437:	83 c4 10             	add    esp,0x10
c000443a:	85 c0                	test   eax,eax
c000443c:	75 15                	jne    c0004453 <f_close+0x2a>
c000443e:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004442:	89 d8                	mov    eax,ebx
c0004444:	e8 4c de ff ff       	call   c0002295 <validate>
c0004449:	85 c0                	test   eax,eax
c000444b:	75 06                	jne    c0004453 <f_close+0x2a>
c000444d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004453:	83 c4 18             	add    esp,0x18
c0004456:	5b                   	pop    ebx
c0004457:	c3                   	ret    

c0004458 <f_lseek>:
c0004458:	55                   	push   ebp
c0004459:	57                   	push   edi
c000445a:	56                   	push   esi
c000445b:	53                   	push   ebx
c000445c:	83 ec 2c             	sub    esp,0x2c
c000445f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004463:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004467:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000446b:	89 d8                	mov    eax,ebx
c000446d:	e8 23 de ff ff       	call   c0002295 <validate>
c0004472:	89 c5                	mov    ebp,eax
c0004474:	85 c0                	test   eax,eax
c0004476:	0f 85 83 01 00 00    	jne    c00045ff <f_lseek+0x1a7>
c000447c:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004480:	85 ed                	test   ebp,ebp
c0004482:	0f 85 77 01 00 00    	jne    c00045ff <f_lseek+0x1a7>
c0004488:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000448b:	39 f0                	cmp    eax,esi
c000448d:	73 08                	jae    c0004497 <f_lseek+0x3f>
c000448f:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004493:	75 02                	jne    c0004497 <f_lseek+0x3f>
c0004495:	89 c6                	mov    esi,eax
c0004497:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000449a:	85 f6                	test   esi,esi
c000449c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00044a3:	75 07                	jne    c00044ac <f_lseek+0x54>
c00044a5:	31 f6                	xor    esi,esi
c00044a7:	e9 e2 00 00 00       	jmp    c000458e <f_lseek+0x136>
c00044ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044b0:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00044b4:	c1 e7 09             	shl    edi,0x9
c00044b7:	85 c9                	test   ecx,ecx
c00044b9:	74 28                	je     c00044e3 <f_lseek+0x8b>
c00044bb:	49                   	dec    ecx
c00044bc:	31 d2                	xor    edx,edx
c00044be:	8d 46 ff             	lea    eax,[esi-0x1]
c00044c1:	f7 f7                	div    edi
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00044c9:	89 c8                	mov    eax,ecx
c00044cb:	f7 f7                	div    edi
c00044cd:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00044d1:	72 10                	jb     c00044e3 <f_lseek+0x8b>
c00044d3:	89 f8                	mov    eax,edi
c00044d5:	f7 d8                	neg    eax
c00044d7:	21 c1                	and    ecx,eax
c00044d9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00044dc:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00044df:	29 ce                	sub    esi,ecx
c00044e1:	eb 3c                	jmp    c000451f <f_lseek+0xc7>
c00044e3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00044e6:	85 c0                	test   eax,eax
c00044e8:	75 32                	jne    c000451c <f_lseek+0xc4>
c00044ea:	31 d2                	xor    edx,edx
c00044ec:	89 d8                	mov    eax,ebx
c00044ee:	e8 ed ee ff ff       	call   c00033e0 <create_chain>
c00044f3:	83 f8 01             	cmp    eax,0x1
c00044f6:	75 0e                	jne    c0004506 <f_lseek+0xae>
c00044f8:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00044fc:	bd 02 00 00 00       	mov    ebp,0x2
c0004501:	e9 f9 00 00 00       	jmp    c00045ff <f_lseek+0x1a7>
c0004506:	83 f8 ff             	cmp    eax,0xffffffff
c0004509:	75 0e                	jne    c0004519 <f_lseek+0xc1>
c000450b:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000450f:	bd 01 00 00 00       	mov    ebp,0x1
c0004514:	e9 e6 00 00 00       	jmp    c00045ff <f_lseek+0x1a7>
c0004519:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000451c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000451f:	85 c0                	test   eax,eax
c0004521:	74 82                	je     c00044a5 <f_lseek+0x4d>
c0004523:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004526:	39 fe                	cmp    esi,edi
c0004528:	76 3d                	jbe    c0004567 <f_lseek+0x10f>
c000452a:	01 fa                	add    edx,edi
c000452c:	29 fe                	sub    esi,edi
c000452e:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c0004531:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004535:	89 c2                	mov    edx,eax
c0004537:	74 0d                	je     c0004546 <f_lseek+0xee>
c0004539:	89 d8                	mov    eax,ebx
c000453b:	e8 a0 ee ff ff       	call   c00033e0 <create_chain>
c0004540:	85 c0                	test   eax,eax
c0004542:	75 09                	jne    c000454d <f_lseek+0xf5>
c0004544:	eb 1f                	jmp    c0004565 <f_lseek+0x10d>
c0004546:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004548:	e8 c7 ec ff ff       	call   c0003214 <get_fat.isra.2>
c000454d:	83 f8 ff             	cmp    eax,0xffffffff
c0004550:	74 b9                	je     c000450b <f_lseek+0xb3>
c0004552:	83 f8 01             	cmp    eax,0x1
c0004555:	76 a1                	jbe    c00044f8 <f_lseek+0xa0>
c0004557:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000455b:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c000455e:	76 98                	jbe    c00044f8 <f_lseek+0xa0>
c0004560:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004563:	eb be                	jmp    c0004523 <f_lseek+0xcb>
c0004565:	31 f6                	xor    esi,esi
c0004567:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000456a:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004570:	0f 84 2f ff ff ff    	je     c00044a5 <f_lseek+0x4d>
c0004576:	89 c2                	mov    edx,eax
c0004578:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000457c:	e8 ad da ff ff       	call   c000202e <clst2sect>
c0004581:	85 c0                	test   eax,eax
c0004583:	0f 84 6f ff ff ff    	je     c00044f8 <f_lseek+0xa0>
c0004589:	c1 ee 09             	shr    esi,0x9
c000458c:	01 c6                	add    esi,eax
c000458e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004591:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004594:	76 0c                	jbe    c00045a2 <f_lseek+0x14a>
c0004596:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004599:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000459c:	83 ca 40             	or     edx,0x40
c000459f:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00045a2:	a9 ff 01 00 00       	test   eax,0x1ff
c00045a7:	74 56                	je     c00045ff <f_lseek+0x1a7>
c00045a9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00045ac:	39 f0                	cmp    eax,esi
c00045ae:	74 4f                	je     c00045ff <f_lseek+0x1a7>
c00045b0:	8d 7b 28             	lea    edi,[ebx+0x28]
c00045b3:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00045b7:	74 26                	je     c00045df <f_lseek+0x187>
c00045b9:	6a 01                	push   0x1
c00045bb:	50                   	push   eax
c00045bc:	57                   	push   edi
c00045bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045c1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045c5:	50                   	push   eax
c00045c6:	e8 d7 d7 ff ff       	call   c0001da2 <disk_write>
c00045cb:	83 c4 10             	add    esp,0x10
c00045ce:	85 c0                	test   eax,eax
c00045d0:	0f 85 35 ff ff ff    	jne    c000450b <f_lseek+0xb3>
c00045d6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045d9:	83 e0 7f             	and    eax,0x7f
c00045dc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045df:	6a 01                	push   0x1
c00045e1:	56                   	push   esi
c00045e2:	57                   	push   edi
c00045e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045eb:	50                   	push   eax
c00045ec:	e8 9b d7 ff ff       	call   c0001d8c <disk_read>
c00045f1:	83 c4 10             	add    esp,0x10
c00045f4:	85 c0                	test   eax,eax
c00045f6:	0f 85 0f ff ff ff    	jne    c000450b <f_lseek+0xb3>
c00045fc:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00045ff:	83 c4 2c             	add    esp,0x2c
c0004602:	89 e8                	mov    eax,ebp
c0004604:	5b                   	pop    ebx
c0004605:	5e                   	pop    esi
c0004606:	5f                   	pop    edi
c0004607:	5d                   	pop    ebp
c0004608:	c3                   	ret    

c0004609 <f_opendir>:
c0004609:	56                   	push   esi
c000460a:	b8 09 00 00 00       	mov    eax,0x9
c000460f:	53                   	push   ebx
c0004610:	83 ec 24             	sub    esp,0x24
c0004613:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004617:	85 db                	test   ebx,ebx
c0004619:	0f 84 af 00 00 00    	je     c00046ce <f_opendir+0xc5>
c000461f:	31 c9                	xor    ecx,ecx
c0004621:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004625:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004629:	e8 63 de ff ff       	call   c0002491 <mount_volume>
c000462e:	85 c0                	test   eax,eax
c0004630:	0f 85 92 00 00 00    	jne    c00046c8 <f_opendir+0xbf>
c0004636:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000463a:	83 ec 0c             	sub    esp,0xc
c000463d:	89 03                	mov    DWORD PTR [ebx],eax
c000463f:	68 00 02 00 00       	push   0x200
c0004644:	e8 d7 15 00 00       	call   c0005c20 <ff_memalloc>
c0004649:	83 c4 10             	add    esp,0x10
c000464c:	89 c6                	mov    esi,eax
c000464e:	b8 11 00 00 00       	mov    eax,0x11
c0004653:	85 f6                	test   esi,esi
c0004655:	74 77                	je     c00046ce <f_opendir+0xc5>
c0004657:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000465b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000465f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004662:	89 d8                	mov    eax,ebx
c0004664:	e8 72 f3 ff ff       	call   c00039db <follow_path>
c0004669:	85 c0                	test   eax,eax
c000466b:	75 37                	jne    c00046a4 <f_opendir+0x9b>
c000466d:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004671:	75 1c                	jne    c000468f <f_opendir+0x86>
c0004673:	b8 05 00 00 00       	mov    eax,0x5
c0004678:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000467c:	74 26                	je     c00046a4 <f_opendir+0x9b>
c000467e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004681:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004685:	8a 00                	mov    al,BYTE PTR [eax]
c0004687:	e8 37 eb ff ff       	call   c00031c3 <ld_clust.isra.0>
c000468c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000468f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004693:	31 d2                	xor    edx,edx
c0004695:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004699:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000469d:	89 d8                	mov    eax,ebx
c000469f:	e8 74 ec ff ff       	call   c0003318 <dir_sdi>
c00046a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046a8:	83 ec 0c             	sub    esp,0xc
c00046ab:	56                   	push   esi
c00046ac:	e8 87 15 00 00       	call   c0005c38 <ff_memfree>
c00046b1:	83 c4 10             	add    esp,0x10
c00046b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00046b8:	83 f8 04             	cmp    eax,0x4
c00046bb:	74 06                	je     c00046c3 <f_opendir+0xba>
c00046bd:	85 c0                	test   eax,eax
c00046bf:	74 0d                	je     c00046ce <f_opendir+0xc5>
c00046c1:	eb 05                	jmp    c00046c8 <f_opendir+0xbf>
c00046c3:	b8 05 00 00 00       	mov    eax,0x5
c00046c8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046ce:	83 c4 24             	add    esp,0x24
c00046d1:	5b                   	pop    ebx
c00046d2:	5e                   	pop    esi
c00046d3:	c3                   	ret    

c00046d4 <f_closedir>:
c00046d4:	53                   	push   ebx
c00046d5:	83 ec 18             	sub    esp,0x18
c00046d8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00046dc:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00046e0:	89 d8                	mov    eax,ebx
c00046e2:	e8 ae db ff ff       	call   c0002295 <validate>
c00046e7:	85 c0                	test   eax,eax
c00046e9:	75 06                	jne    c00046f1 <f_closedir+0x1d>
c00046eb:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046f1:	83 c4 18             	add    esp,0x18
c00046f4:	5b                   	pop    ebx
c00046f5:	c3                   	ret    

c00046f6 <f_readdir>:
c00046f6:	57                   	push   edi
c00046f7:	56                   	push   esi
c00046f8:	53                   	push   ebx
c00046f9:	83 ec 20             	sub    esp,0x20
c00046fc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004700:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0004704:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004708:	89 d8                	mov    eax,ebx
c000470a:	e8 86 db ff ff       	call   c0002295 <validate>
c000470f:	85 c0                	test   eax,eax
c0004711:	75 6e                	jne    c0004781 <f_readdir+0x8b>
c0004713:	85 ff                	test   edi,edi
c0004715:	75 0b                	jne    c0004722 <f_readdir+0x2c>
c0004717:	31 d2                	xor    edx,edx
c0004719:	89 d8                	mov    eax,ebx
c000471b:	e8 f8 eb ff ff       	call   c0003318 <dir_sdi>
c0004720:	eb 5f                	jmp    c0004781 <f_readdir+0x8b>
c0004722:	83 ec 0c             	sub    esp,0xc
c0004725:	68 00 02 00 00       	push   0x200
c000472a:	e8 f1 14 00 00       	call   c0005c20 <ff_memalloc>
c000472f:	83 c4 10             	add    esp,0x10
c0004732:	89 c6                	mov    esi,eax
c0004734:	b8 11 00 00 00       	mov    eax,0x11
c0004739:	85 f6                	test   esi,esi
c000473b:	74 44                	je     c0004781 <f_readdir+0x8b>
c000473d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004741:	31 d2                	xor    edx,edx
c0004743:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004746:	89 d8                	mov    eax,ebx
c0004748:	e8 ca ef ff ff       	call   c0003717 <dir_read>
c000474d:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004752:	75 19                	jne    c000476d <f_readdir+0x77>
c0004754:	89 fa                	mov    edx,edi
c0004756:	89 d8                	mov    eax,ebx
c0004758:	e8 70 e8 ff ff       	call   c0002fcd <get_fileinfo>
c000475d:	31 d2                	xor    edx,edx
c000475f:	89 d8                	mov    eax,ebx
c0004761:	e8 47 ee ff ff       	call   c00035ad <dir_next>
c0004766:	83 f8 04             	cmp    eax,0x4
c0004769:	75 02                	jne    c000476d <f_readdir+0x77>
c000476b:	31 c0                	xor    eax,eax
c000476d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004771:	83 ec 0c             	sub    esp,0xc
c0004774:	56                   	push   esi
c0004775:	e8 be 14 00 00       	call   c0005c38 <ff_memfree>
c000477a:	83 c4 10             	add    esp,0x10
c000477d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004781:	83 c4 20             	add    esp,0x20
c0004784:	5b                   	pop    ebx
c0004785:	5e                   	pop    esi
c0004786:	5f                   	pop    edi
c0004787:	c3                   	ret    

c0004788 <f_stat>:
c0004788:	57                   	push   edi
c0004789:	31 c9                	xor    ecx,ecx
c000478b:	56                   	push   esi
c000478c:	53                   	push   ebx
c000478d:	83 ec 30             	sub    esp,0x30
c0004790:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004794:	89 e2                	mov    edx,esp
c0004796:	8d 44 24 40          	lea    eax,[esp+0x40]
c000479a:	e8 f2 dc ff ff       	call   c0002491 <mount_volume>
c000479f:	89 c3                	mov    ebx,eax
c00047a1:	85 c0                	test   eax,eax
c00047a3:	75 59                	jne    c00047fe <f_stat+0x76>
c00047a5:	83 ec 0c             	sub    esp,0xc
c00047a8:	bb 11 00 00 00       	mov    ebx,0x11
c00047ad:	68 00 02 00 00       	push   0x200
c00047b2:	e8 69 14 00 00       	call   c0005c20 <ff_memalloc>
c00047b7:	83 c4 10             	add    esp,0x10
c00047ba:	89 c6                	mov    esi,eax
c00047bc:	85 c0                	test   eax,eax
c00047be:	74 3e                	je     c00047fe <f_stat+0x76>
c00047c0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047c3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00047c7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00047ca:	89 e0                	mov    eax,esp
c00047cc:	e8 0a f2 ff ff       	call   c00039db <follow_path>
c00047d1:	89 c3                	mov    ebx,eax
c00047d3:	85 c0                	test   eax,eax
c00047d5:	75 1b                	jne    c00047f2 <f_stat+0x6a>
c00047d7:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00047dc:	75 0f                	jne    c00047ed <f_stat+0x65>
c00047de:	85 ff                	test   edi,edi
c00047e0:	74 10                	je     c00047f2 <f_stat+0x6a>
c00047e2:	89 fa                	mov    edx,edi
c00047e4:	89 e0                	mov    eax,esp
c00047e6:	e8 e2 e7 ff ff       	call   c0002fcd <get_fileinfo>
c00047eb:	eb 05                	jmp    c00047f2 <f_stat+0x6a>
c00047ed:	bb 06 00 00 00       	mov    ebx,0x6
c00047f2:	83 ec 0c             	sub    esp,0xc
c00047f5:	56                   	push   esi
c00047f6:	e8 3d 14 00 00       	call   c0005c38 <ff_memfree>
c00047fb:	83 c4 10             	add    esp,0x10
c00047fe:	83 c4 30             	add    esp,0x30
c0004801:	89 d8                	mov    eax,ebx
c0004803:	5b                   	pop    ebx
c0004804:	5e                   	pop    esi
c0004805:	5f                   	pop    edi
c0004806:	c3                   	ret    

c0004807 <f_getfree>:
c0004807:	55                   	push   ebp
c0004808:	31 c9                	xor    ecx,ecx
c000480a:	57                   	push   edi
c000480b:	56                   	push   esi
c000480c:	53                   	push   ebx
c000480d:	83 ec 2c             	sub    esp,0x2c
c0004810:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004814:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004818:	e8 74 dc ff ff       	call   c0002491 <mount_volume>
c000481d:	89 c7                	mov    edi,eax
c000481f:	85 c0                	test   eax,eax
c0004821:	0f 85 df 00 00 00    	jne    c0004906 <f_getfree+0xff>
c0004827:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000482b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000482f:	89 30                	mov    DWORD PTR [eax],esi
c0004831:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0004834:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c0004837:	8d 55 fe             	lea    edx,[ebp-0x2]
c000483a:	39 d0                	cmp    eax,edx
c000483c:	77 0b                	ja     c0004849 <f_getfree+0x42>
c000483e:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004842:	89 01                	mov    DWORD PTR [ecx],eax
c0004844:	e9 bd 00 00 00       	jmp    c0004906 <f_getfree+0xff>
c0004849:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c000484c:	75 29                	jne    c0004877 <f_getfree+0x70>
c000484e:	bd 02 00 00 00       	mov    ebp,0x2
c0004853:	31 db                	xor    ebx,ebx
c0004855:	89 ea                	mov    edx,ebp
c0004857:	89 f0                	mov    eax,esi
c0004859:	e8 b6 e9 ff ff       	call   c0003214 <get_fat.isra.2>
c000485e:	83 f8 ff             	cmp    eax,0xffffffff
c0004861:	74 7d                	je     c00048e0 <f_getfree+0xd9>
c0004863:	83 f8 01             	cmp    eax,0x1
c0004866:	74 7f                	je     c00048e7 <f_getfree+0xe0>
c0004868:	83 d3 00             	adc    ebx,0x0
c000486b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000486f:	45                   	inc    ebp
c0004870:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004873:	77 e0                	ja     c0004855 <f_getfree+0x4e>
c0004875:	eb 79                	jmp    c00048f0 <f_getfree+0xe9>
c0004877:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c000487a:	31 db                	xor    ebx,ebx
c000487c:	31 f6                	xor    esi,esi
c000487e:	85 f6                	test   esi,esi
c0004880:	75 18                	jne    c000489a <f_getfree+0x93>
c0004882:	8d 42 01             	lea    eax,[edx+0x1]
c0004885:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004889:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000488d:	e8 ac da ff ff       	call   c000233e <move_window>
c0004892:	85 c0                	test   eax,eax
c0004894:	75 58                	jne    c00048ee <f_getfree+0xe7>
c0004896:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000489a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000489e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00048a2:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c00048a6:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c00048a9:	75 13                	jne    c00048be <f_getfree+0xb7>
c00048ab:	e8 27 d5 ff ff       	call   c0001dd7 <ld_word>
c00048b0:	0f b7 c0             	movzx  eax,ax
c00048b3:	83 f8 01             	cmp    eax,0x1
c00048b6:	83 d3 00             	adc    ebx,0x0
c00048b9:	83 c6 02             	add    esi,0x2
c00048bc:	eb 13                	jmp    c00048d1 <f_getfree+0xca>
c00048be:	e8 21 d5 ff ff       	call   c0001de4 <ld_dword>
c00048c3:	25 ff ff ff 0f       	and    eax,0xfffffff
c00048c8:	83 f8 01             	cmp    eax,0x1
c00048cb:	83 d3 00             	adc    ebx,0x0
c00048ce:	83 c6 04             	add    esi,0x4
c00048d1:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00048d7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00048db:	4d                   	dec    ebp
c00048dc:	75 a0                	jne    c000487e <f_getfree+0x77>
c00048de:	eb 10                	jmp    c00048f0 <f_getfree+0xe9>
c00048e0:	bf 01 00 00 00       	mov    edi,0x1
c00048e5:	eb 09                	jmp    c00048f0 <f_getfree+0xe9>
c00048e7:	bf 02 00 00 00       	mov    edi,0x2
c00048ec:	eb 02                	jmp    c00048f0 <f_getfree+0xe9>
c00048ee:	89 c7                	mov    edi,eax
c00048f0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00048f4:	89 18                	mov    DWORD PTR [eax],ebx
c00048f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048fa:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c00048fd:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004900:	83 ca 01             	or     edx,0x1
c0004903:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004906:	83 c4 2c             	add    esp,0x2c
c0004909:	89 f8                	mov    eax,edi
c000490b:	5b                   	pop    ebx
c000490c:	5e                   	pop    esi
c000490d:	5f                   	pop    edi
c000490e:	5d                   	pop    ebp
c000490f:	c3                   	ret    

c0004910 <f_truncate>:
c0004910:	56                   	push   esi
c0004911:	53                   	push   ebx
c0004912:	83 ec 14             	sub    esp,0x14
c0004915:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004919:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000491d:	89 d8                	mov    eax,ebx
c000491f:	e8 71 d9 ff ff       	call   c0002295 <validate>
c0004924:	89 c6                	mov    esi,eax
c0004926:	85 c0                	test   eax,eax
c0004928:	0f 85 c4 00 00 00    	jne    c00049f2 <f_truncate+0xe2>
c000492e:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004932:	85 f6                	test   esi,esi
c0004934:	0f 85 b8 00 00 00    	jne    c00049f2 <f_truncate+0xe2>
c000493a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000493e:	0f 84 a9 00 00 00    	je     c00049ed <f_truncate+0xdd>
c0004944:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004947:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000494a:	0f 83 a2 00 00 00    	jae    c00049f2 <f_truncate+0xe2>
c0004950:	85 c0                	test   eax,eax
c0004952:	75 15                	jne    c0004969 <f_truncate+0x59>
c0004954:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004957:	31 c9                	xor    ecx,ecx
c0004959:	89 d8                	mov    eax,ebx
c000495b:	e8 bf eb ff ff       	call   c000351f <remove_chain>
c0004960:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004967:	eb 35                	jmp    c000499e <f_truncate+0x8e>
c0004969:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000496c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000496e:	e8 a1 e8 ff ff       	call   c0003214 <get_fat.isra.2>
c0004973:	89 c2                	mov    edx,eax
c0004975:	b8 01 00 00 00       	mov    eax,0x1
c000497a:	83 fa ff             	cmp    edx,0xffffffff
c000497d:	74 1f                	je     c000499e <f_truncate+0x8e>
c000497f:	b8 02 00 00 00       	mov    eax,0x2
c0004984:	83 fa 01             	cmp    edx,0x1
c0004987:	74 15                	je     c000499e <f_truncate+0x8e>
c0004989:	31 c0                	xor    eax,eax
c000498b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000498f:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004992:	76 0a                	jbe    c000499e <f_truncate+0x8e>
c0004994:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004997:	89 d8                	mov    eax,ebx
c0004999:	e8 81 eb ff ff       	call   c000351f <remove_chain>
c000499e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00049a1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00049a4:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00049a7:	83 ca 40             	or     edx,0x40
c00049aa:	85 c0                	test   eax,eax
c00049ac:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00049af:	75 35                	jne    c00049e6 <f_truncate+0xd6>
c00049b1:	80 e2 80             	and    dl,0x80
c00049b4:	74 3c                	je     c00049f2 <f_truncate+0xe2>
c00049b6:	6a 01                	push   0x1
c00049b8:	8d 43 28             	lea    eax,[ebx+0x28]
c00049bb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00049be:	50                   	push   eax
c00049bf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00049c3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00049c7:	50                   	push   eax
c00049c8:	e8 d5 d3 ff ff       	call   c0001da2 <disk_write>
c00049cd:	83 c4 10             	add    esp,0x10
c00049d0:	85 c0                	test   eax,eax
c00049d2:	75 0d                	jne    c00049e1 <f_truncate+0xd1>
c00049d4:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00049d7:	31 f6                	xor    esi,esi
c00049d9:	83 e0 7f             	and    eax,0x7f
c00049dc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00049df:	eb 11                	jmp    c00049f2 <f_truncate+0xe2>
c00049e1:	b8 01 00 00 00       	mov    eax,0x1
c00049e6:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c00049e9:	89 c6                	mov    esi,eax
c00049eb:	eb 05                	jmp    c00049f2 <f_truncate+0xe2>
c00049ed:	be 07 00 00 00       	mov    esi,0x7
c00049f2:	89 f0                	mov    eax,esi
c00049f4:	83 c4 14             	add    esp,0x14
c00049f7:	5b                   	pop    ebx
c00049f8:	5e                   	pop    esi
c00049f9:	c3                   	ret    

c00049fa <f_unlink>:
c00049fa:	55                   	push   ebp
c00049fb:	b9 02 00 00 00       	mov    ecx,0x2
c0004a00:	57                   	push   edi
c0004a01:	56                   	push   esi
c0004a02:	53                   	push   ebx
c0004a03:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004a09:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a0d:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004a14:	e8 78 da ff ff       	call   c0002491 <mount_volume>
c0004a19:	85 c0                	test   eax,eax
c0004a1b:	0f 85 f0 00 00 00    	jne    c0004b11 <f_unlink+0x117>
c0004a21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a25:	83 ec 0c             	sub    esp,0xc
c0004a28:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004a2c:	68 00 02 00 00       	push   0x200
c0004a31:	e8 ea 11 00 00       	call   c0005c20 <ff_memalloc>
c0004a36:	83 c4 10             	add    esp,0x10
c0004a39:	89 c3                	mov    ebx,eax
c0004a3b:	b8 11 00 00 00       	mov    eax,0x11
c0004a40:	85 db                	test   ebx,ebx
c0004a42:	0f 84 c9 00 00 00    	je     c0004b11 <f_unlink+0x117>
c0004a48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a4c:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004a53:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004a56:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a5a:	e8 7c ef ff ff       	call   c00039db <follow_path>
c0004a5f:	85 c0                	test   eax,eax
c0004a61:	0f 85 96 00 00 00    	jne    c0004afd <f_unlink+0x103>
c0004a67:	b8 06 00 00 00       	mov    eax,0x6
c0004a6c:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004a71:	0f 85 86 00 00 00    	jne    c0004afd <f_unlink+0x103>
c0004a77:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004a7c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004a82:	74 07                	je     c0004a8b <f_unlink+0x91>
c0004a84:	b8 07 00 00 00       	mov    eax,0x7
c0004a89:	eb 72                	jmp    c0004afd <f_unlink+0x103>
c0004a8b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004a8f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004a93:	8a 07                	mov    al,BYTE PTR [edi]
c0004a95:	e8 29 e7 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0004a9a:	83 e5 10             	and    ebp,0x10
c0004a9d:	89 c6                	mov    esi,eax
c0004a9f:	75 0f                	jne    c0004ab0 <f_unlink+0xb6>
c0004aa1:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004aa5:	e8 95 ed ff ff       	call   c000383f <dir_remove>
c0004aaa:	85 c0                	test   eax,eax
c0004aac:	74 2f                	je     c0004add <f_unlink+0xe3>
c0004aae:	eb 4d                	jmp    c0004afd <f_unlink+0x103>
c0004ab0:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004ab4:	31 d2                	xor    edx,edx
c0004ab6:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004aba:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004abe:	e8 55 e8 ff ff       	call   c0003318 <dir_sdi>
c0004ac3:	85 c0                	test   eax,eax
c0004ac5:	75 36                	jne    c0004afd <f_unlink+0x103>
c0004ac7:	31 d2                	xor    edx,edx
c0004ac9:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004acd:	e8 45 ec ff ff       	call   c0003717 <dir_read>
c0004ad2:	85 c0                	test   eax,eax
c0004ad4:	74 ae                	je     c0004a84 <f_unlink+0x8a>
c0004ad6:	83 f8 04             	cmp    eax,0x4
c0004ad9:	75 22                	jne    c0004afd <f_unlink+0x103>
c0004adb:	eb c4                	jmp    c0004aa1 <f_unlink+0xa7>
c0004add:	85 f6                	test   esi,esi
c0004adf:	75 0b                	jne    c0004aec <f_unlink+0xf2>
c0004ae1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ae5:	e8 8b e2 ff ff       	call   c0002d75 <sync_fs>
c0004aea:	eb 11                	jmp    c0004afd <f_unlink+0x103>
c0004aec:	31 c9                	xor    ecx,ecx
c0004aee:	89 f2                	mov    edx,esi
c0004af0:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004af4:	e8 26 ea ff ff       	call   c000351f <remove_chain>
c0004af9:	85 c0                	test   eax,eax
c0004afb:	74 e4                	je     c0004ae1 <f_unlink+0xe7>
c0004afd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004b01:	83 ec 0c             	sub    esp,0xc
c0004b04:	53                   	push   ebx
c0004b05:	e8 2e 11 00 00       	call   c0005c38 <ff_memfree>
c0004b0a:	83 c4 10             	add    esp,0x10
c0004b0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b11:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004b17:	5b                   	pop    ebx
c0004b18:	5e                   	pop    esi
c0004b19:	5f                   	pop    edi
c0004b1a:	5d                   	pop    ebp
c0004b1b:	c3                   	ret    

c0004b1c <f_mkdir>:
c0004b1c:	57                   	push   edi
c0004b1d:	b9 02 00 00 00       	mov    ecx,0x2
c0004b22:	56                   	push   esi
c0004b23:	53                   	push   ebx
c0004b24:	83 ec 50             	sub    esp,0x50
c0004b27:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b2b:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b2f:	e8 5d d9 ff ff       	call   c0002491 <mount_volume>
c0004b34:	89 c3                	mov    ebx,eax
c0004b36:	85 c0                	test   eax,eax
c0004b38:	0f 85 70 01 00 00    	jne    c0004cae <f_mkdir+0x192>
c0004b3e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b42:	bb 11 00 00 00       	mov    ebx,0x11
c0004b47:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004b4b:	83 ec 0c             	sub    esp,0xc
c0004b4e:	68 00 02 00 00       	push   0x200
c0004b53:	e8 c8 10 00 00       	call   c0005c20 <ff_memalloc>
c0004b58:	83 c4 10             	add    esp,0x10
c0004b5b:	89 c7                	mov    edi,eax
c0004b5d:	85 c0                	test   eax,eax
c0004b5f:	0f 84 49 01 00 00    	je     c0004cae <f_mkdir+0x192>
c0004b65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b69:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b6d:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004b70:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b74:	e8 62 ee ff ff       	call   c00039db <follow_path>
c0004b79:	89 c3                	mov    ebx,eax
c0004b7b:	85 c0                	test   eax,eax
c0004b7d:	74 3e                	je     c0004bbd <f_mkdir+0xa1>
c0004b7f:	83 f8 04             	cmp    eax,0x4
c0004b82:	75 3e                	jne    c0004bc2 <f_mkdir+0xa6>
c0004b84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b88:	31 d2                	xor    edx,edx
c0004b8a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004b8e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004b92:	e8 49 e8 ff ff       	call   c00033e0 <create_chain>
c0004b97:	89 c6                	mov    esi,eax
c0004b99:	85 c0                	test   eax,eax
c0004b9b:	74 0c                	je     c0004ba9 <f_mkdir+0x8d>
c0004b9d:	bb 02 00 00 00       	mov    ebx,0x2
c0004ba2:	83 f8 01             	cmp    eax,0x1
c0004ba5:	74 07                	je     c0004bae <f_mkdir+0x92>
c0004ba7:	eb 2a                	jmp    c0004bd3 <f_mkdir+0xb7>
c0004ba9:	bb 07 00 00 00       	mov    ebx,0x7
c0004bae:	31 c9                	xor    ecx,ecx
c0004bb0:	89 f2                	mov    edx,esi
c0004bb2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bb6:	e8 64 e9 ff ff       	call   c000351f <remove_chain>
c0004bbb:	eb 05                	jmp    c0004bc2 <f_mkdir+0xa6>
c0004bbd:	bb 08 00 00 00       	mov    ebx,0x8
c0004bc2:	83 ec 0c             	sub    esp,0xc
c0004bc5:	57                   	push   edi
c0004bc6:	e8 6d 10 00 00       	call   c0005c38 <ff_memfree>
c0004bcb:	83 c4 10             	add    esp,0x10
c0004bce:	e9 db 00 00 00       	jmp    c0004cae <f_mkdir+0x192>
c0004bd3:	bb 01 00 00 00       	mov    ebx,0x1
c0004bd8:	83 f8 ff             	cmp    eax,0xffffffff
c0004bdb:	74 d1                	je     c0004bae <f_mkdir+0x92>
c0004bdd:	89 f2                	mov    edx,esi
c0004bdf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004be3:	e8 f1 dc ff ff       	call   c00028d9 <dir_clear>
c0004be8:	89 c3                	mov    ebx,eax
c0004bea:	85 c0                	test   eax,eax
c0004bec:	75 c0                	jne    c0004bae <f_mkdir+0x92>
c0004bee:	b9 0b 00 00 00       	mov    ecx,0xb
c0004bf3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bf7:	ba 20 00 00 00       	mov    edx,0x20
c0004bfc:	83 c0 34             	add    eax,0x34
c0004bff:	e8 14 d2 ff ff       	call   c0001e18 <mem_set>
c0004c04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c08:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c0d:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004c11:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004c15:	83 c0 4a             	add    eax,0x4a
c0004c18:	e8 e3 d1 ff ff       	call   c0001e00 <st_dword>
c0004c1d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c21:	89 f1                	mov    ecx,esi
c0004c23:	8d 50 34             	lea    edx,[eax+0x34]
c0004c26:	e8 c1 e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c2f:	b9 20 00 00 00       	mov    ecx,0x20
c0004c34:	8d 50 34             	lea    edx,[eax+0x34]
c0004c37:	83 c0 54             	add    eax,0x54
c0004c3a:	e8 c4 d1 ff ff       	call   c0001e03 <mem_cpy>
c0004c3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c43:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004c47:	8d 50 54             	lea    edx,[eax+0x54]
c0004c4a:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004c4e:	e8 99 e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c53:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c57:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c5b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c5f:	e8 0c ee ff ff       	call   c0003a70 <dir_register>
c0004c64:	89 c3                	mov    ebx,eax
c0004c66:	85 c0                	test   eax,eax
c0004c68:	0f 85 40 ff ff ff    	jne    c0004bae <f_mkdir+0x92>
c0004c6e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c72:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c77:	83 c0 16             	add    eax,0x16
c0004c7a:	e8 81 d1 ff ff       	call   c0001e00 <st_dword>
c0004c7f:	89 f1                	mov    ecx,esi
c0004c81:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c89:	e8 5e e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c8e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c92:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004c96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c9a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c9e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ca2:	e8 ce e0 ff ff       	call   c0002d75 <sync_fs>
c0004ca7:	89 c3                	mov    ebx,eax
c0004ca9:	e9 14 ff ff ff       	jmp    c0004bc2 <f_mkdir+0xa6>
c0004cae:	83 c4 50             	add    esp,0x50
c0004cb1:	89 d8                	mov    eax,ebx
c0004cb3:	5b                   	pop    ebx
c0004cb4:	5e                   	pop    esi
c0004cb5:	5f                   	pop    edi
c0004cb6:	c3                   	ret    

c0004cb7 <f_rename>:
c0004cb7:	57                   	push   edi
c0004cb8:	56                   	push   esi
c0004cb9:	53                   	push   ebx
c0004cba:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004cc0:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004cc7:	e8 7c d5 ff ff       	call   c0002248 <get_ldnumber>
c0004ccc:	b9 02 00 00 00       	mov    ecx,0x2
c0004cd1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004cd5:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004cdc:	e8 b0 d7 ff ff       	call   c0002491 <mount_volume>
c0004ce1:	85 c0                	test   eax,eax
c0004ce3:	0f 85 7c 01 00 00    	jne    c0004e65 <f_rename+0x1ae>
c0004ce9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ced:	83 ec 0c             	sub    esp,0xc
c0004cf0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004cf4:	68 00 02 00 00       	push   0x200
c0004cf9:	e8 22 0f 00 00       	call   c0005c20 <ff_memalloc>
c0004cfe:	83 c4 10             	add    esp,0x10
c0004d01:	89 c6                	mov    esi,eax
c0004d03:	b8 11 00 00 00       	mov    eax,0x11
c0004d08:	85 f6                	test   esi,esi
c0004d0a:	0f 84 55 01 00 00    	je     c0004e65 <f_rename+0x1ae>
c0004d10:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d14:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004d1b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d1e:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004d22:	e8 b4 ec ff ff       	call   c00039db <follow_path>
c0004d27:	85 c0                	test   eax,eax
c0004d29:	0f 85 22 01 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d2f:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004d33:	b8 06 00 00 00       	mov    eax,0x6
c0004d38:	80 e2 a0             	and    dl,0xa0
c0004d3b:	0f 85 10 01 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d41:	b9 20 00 00 00       	mov    ecx,0x20
c0004d46:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004d4a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d4e:	e8 b0 d0 ff ff       	call   c0001e03 <mem_cpy>
c0004d53:	b9 30 00 00 00       	mov    ecx,0x30
c0004d58:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004d5c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d60:	e8 9e d0 ff ff       	call   c0001e03 <mem_cpy>
c0004d65:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004d6c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d70:	e8 66 ec ff ff       	call   c00039db <follow_path>
c0004d75:	85 c0                	test   eax,eax
c0004d77:	75 20                	jne    c0004d99 <f_rename+0xe2>
c0004d79:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004d7d:	b8 08 00 00 00       	mov    eax,0x8
c0004d82:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004d86:	0f 85 c5 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d8c:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004d90:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004d97:	eb 03                	jmp    c0004d9c <f_rename+0xe5>
c0004d99:	83 f8 04             	cmp    eax,0x4
c0004d9c:	0f 85 af 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004da2:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004da6:	e8 c5 ec ff ff       	call   c0003a70 <dir_register>
c0004dab:	85 c0                	test   eax,eax
c0004dad:	0f 85 9e 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004db3:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004dba:	b9 13 00 00 00       	mov    ecx,0x13
c0004dbf:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004dc2:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004dc6:	e8 38 d0 ff ff       	call   c0001e03 <mem_cpy>
c0004dcb:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004dcf:	a8 10                	test   al,0x10
c0004dd1:	75 03                	jne    c0004dd6 <f_rename+0x11f>
c0004dd3:	83 c8 20             	or     eax,0x20
c0004dd6:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004dd9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ddd:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004de1:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004de5:	74 54                	je     c0004e3b <f_rename+0x184>
c0004de7:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004deb:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004def:	74 4a                	je     c0004e3b <f_rename+0x184>
c0004df1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004df5:	89 da                	mov    edx,ebx
c0004df7:	8a 07                	mov    al,BYTE PTR [edi]
c0004df9:	e8 c5 e3 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0004dfe:	89 c2                	mov    edx,eax
c0004e00:	89 f8                	mov    eax,edi
c0004e02:	e8 27 d2 ff ff       	call   c000202e <clst2sect>
c0004e07:	89 c2                	mov    edx,eax
c0004e09:	b8 02 00 00 00       	mov    eax,0x2
c0004e0e:	85 d2                	test   edx,edx
c0004e10:	74 3f                	je     c0004e51 <f_rename+0x19a>
c0004e12:	89 f8                	mov    eax,edi
c0004e14:	e8 25 d5 ff ff       	call   c000233e <move_window>
c0004e19:	85 c0                	test   eax,eax
c0004e1b:	75 34                	jne    c0004e51 <f_rename+0x19a>
c0004e1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e21:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004e25:	75 14                	jne    c0004e3b <f_rename+0x184>
c0004e27:	8d 50 54             	lea    edx,[eax+0x54]
c0004e2a:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004e2e:	e8 b9 e3 ff ff       	call   c00031ec <st_clust.isra.1>
c0004e33:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e37:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e3b:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004e3f:	e8 fb e9 ff ff       	call   c000383f <dir_remove>
c0004e44:	85 c0                	test   eax,eax
c0004e46:	75 09                	jne    c0004e51 <f_rename+0x19a>
c0004e48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e4c:	e8 24 df ff ff       	call   c0002d75 <sync_fs>
c0004e51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e55:	83 ec 0c             	sub    esp,0xc
c0004e58:	56                   	push   esi
c0004e59:	e8 da 0d 00 00       	call   c0005c38 <ff_memfree>
c0004e5e:	83 c4 10             	add    esp,0x10
c0004e61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e65:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004e6b:	5b                   	pop    ebx
c0004e6c:	5e                   	pop    esi
c0004e6d:	5f                   	pop    edi
c0004e6e:	c3                   	ret    

c0004e6f <f_chmod>:
c0004e6f:	57                   	push   edi
c0004e70:	b9 02 00 00 00       	mov    ecx,0x2
c0004e75:	56                   	push   esi
c0004e76:	53                   	push   ebx
c0004e77:	83 ec 50             	sub    esp,0x50
c0004e7a:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0004e7e:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0004e82:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e86:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004e8a:	e8 02 d6 ff ff       	call   c0002491 <mount_volume>
c0004e8f:	85 c0                	test   eax,eax
c0004e91:	0f 85 81 00 00 00    	jne    c0004f18 <f_chmod+0xa9>
c0004e97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e9b:	83 ec 0c             	sub    esp,0xc
c0004e9e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004ea2:	68 00 02 00 00       	push   0x200
c0004ea7:	e8 74 0d 00 00       	call   c0005c20 <ff_memalloc>
c0004eac:	83 c4 10             	add    esp,0x10
c0004eaf:	89 c6                	mov    esi,eax
c0004eb1:	b8 11 00 00 00       	mov    eax,0x11
c0004eb6:	85 f6                	test   esi,esi
c0004eb8:	74 5e                	je     c0004f18 <f_chmod+0xa9>
c0004eba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ebe:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004ec2:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004ec5:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ec9:	e8 0d eb ff ff       	call   c00039db <follow_path>
c0004ece:	85 c0                	test   eax,eax
c0004ed0:	75 32                	jne    c0004f04 <f_chmod+0x95>
c0004ed2:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004ed6:	b8 06 00 00 00       	mov    eax,0x6
c0004edb:	80 e2 a0             	and    dl,0xa0
c0004ede:	75 24                	jne    c0004f04 <f_chmod+0x95>
c0004ee0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004ee4:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0004ee7:	31 d7                	xor    edi,edx
c0004ee9:	21 fb                	and    ebx,edi
c0004eeb:	83 e3 27             	and    ebx,0x27
c0004eee:	31 d3                	xor    ebx,edx
c0004ef0:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004ef3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ef7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004efb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004eff:	e8 71 de ff ff       	call   c0002d75 <sync_fs>
c0004f04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f08:	83 ec 0c             	sub    esp,0xc
c0004f0b:	56                   	push   esi
c0004f0c:	e8 27 0d 00 00       	call   c0005c38 <ff_memfree>
c0004f11:	83 c4 10             	add    esp,0x10
c0004f14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f18:	83 c4 50             	add    esp,0x50
c0004f1b:	5b                   	pop    ebx
c0004f1c:	5e                   	pop    esi
c0004f1d:	5f                   	pop    edi
c0004f1e:	c3                   	ret    

c0004f1f <f_utime>:
c0004f1f:	56                   	push   esi
c0004f20:	b9 02 00 00 00       	mov    ecx,0x2
c0004f25:	53                   	push   ebx
c0004f26:	83 ec 54             	sub    esp,0x54
c0004f29:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004f2d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f31:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004f35:	e8 57 d5 ff ff       	call   c0002491 <mount_volume>
c0004f3a:	85 c0                	test   eax,eax
c0004f3c:	0f 85 87 00 00 00    	jne    c0004fc9 <f_utime+0xaa>
c0004f42:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f46:	83 ec 0c             	sub    esp,0xc
c0004f49:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004f4d:	68 00 02 00 00       	push   0x200
c0004f52:	e8 c9 0c 00 00       	call   c0005c20 <ff_memalloc>
c0004f57:	83 c4 10             	add    esp,0x10
c0004f5a:	89 c3                	mov    ebx,eax
c0004f5c:	b8 11 00 00 00       	mov    eax,0x11
c0004f61:	85 db                	test   ebx,ebx
c0004f63:	74 64                	je     c0004fc9 <f_utime+0xaa>
c0004f65:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f69:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004f6d:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004f70:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f74:	e8 62 ea ff ff       	call   c00039db <follow_path>
c0004f79:	85 c0                	test   eax,eax
c0004f7b:	75 38                	jne    c0004fb5 <f_utime+0x96>
c0004f7d:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004f81:	b8 06 00 00 00       	mov    eax,0x6
c0004f86:	80 e2 a0             	and    dl,0xa0
c0004f89:	75 2a                	jne    c0004fb5 <f_utime+0x96>
c0004f8b:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004f8f:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004f93:	c1 e2 10             	shl    edx,0x10
c0004f96:	09 c2                	or     edx,eax
c0004f98:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f9c:	83 c0 16             	add    eax,0x16
c0004f9f:	e8 5c ce ff ff       	call   c0001e00 <st_dword>
c0004fa4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fa8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fb0:	e8 c0 dd ff ff       	call   c0002d75 <sync_fs>
c0004fb5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004fb9:	83 ec 0c             	sub    esp,0xc
c0004fbc:	53                   	push   ebx
c0004fbd:	e8 76 0c 00 00       	call   c0005c38 <ff_memfree>
c0004fc2:	83 c4 10             	add    esp,0x10
c0004fc5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fc9:	83 c4 54             	add    esp,0x54
c0004fcc:	5b                   	pop    ebx
c0004fcd:	5e                   	pop    esi
c0004fce:	c3                   	ret    

c0004fcf <f_getlabel>:
c0004fcf:	55                   	push   ebp
c0004fd0:	31 c9                	xor    ecx,ecx
c0004fd2:	57                   	push   edi
c0004fd3:	56                   	push   esi
c0004fd4:	53                   	push   ebx
c0004fd5:	83 ec 5c             	sub    esp,0x5c
c0004fd8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004fdc:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004fe0:	e8 ac d4 ff ff       	call   c0002491 <mount_volume>
c0004fe5:	89 c6                	mov    esi,eax
c0004fe7:	85 c0                	test   eax,eax
c0004fe9:	0f 85 27 01 00 00    	jne    c0005116 <f_getlabel+0x147>
c0004fef:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004ff4:	0f 84 d0 00 00 00    	je     c00050ca <f_getlabel+0xfb>
c0004ffa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ffe:	31 d2                	xor    edx,edx
c0005000:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005004:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000500c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005010:	e8 03 e3 ff ff       	call   c0003318 <dir_sdi>
c0005015:	85 c0                	test   eax,eax
c0005017:	0f 85 a1 00 00 00    	jne    c00050be <f_getlabel+0xef>
c000501d:	ba 01 00 00 00       	mov    edx,0x1
c0005022:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005026:	e8 ec e6 ff ff       	call   c0003717 <dir_read>
c000502b:	85 c0                	test   eax,eax
c000502d:	0f 85 8b 00 00 00    	jne    c00050be <f_getlabel+0xef>
c0005033:	31 db                	xor    ebx,ebx
c0005035:	31 c9                	xor    ecx,ecx
c0005037:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000503b:	8d 79 01             	lea    edi,[ecx+0x1]
c000503e:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0005043:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0005048:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000504c:	e8 06 ce ff ff       	call   c0001e57 <dbc_1st>
c0005051:	85 c0                	test   eax,eax
c0005053:	74 16                	je     c000506b <f_getlabel+0x9c>
c0005055:	83 ff 0b             	cmp    edi,0xb
c0005058:	74 11                	je     c000506b <f_getlabel+0x9c>
c000505a:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c000505f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005063:	8d 79 02             	lea    edi,[ecx+0x2]
c0005066:	c1 e0 08             	shl    eax,0x8
c0005069:	09 c2                	or     edx,eax
c000506b:	0f b7 d2             	movzx  edx,dx
c000506e:	50                   	push   eax
c000506f:	50                   	push   eax
c0005070:	68 b5 01 00 00       	push   0x1b5
c0005075:	52                   	push   edx
c0005076:	e8 75 0c 00 00       	call   c0005cf0 <ff_oem2uni>
c000507b:	83 c4 10             	add    esp,0x10
c000507e:	0f b7 c0             	movzx  eax,ax
c0005081:	85 c0                	test   eax,eax
c0005083:	74 22                	je     c00050a7 <f_getlabel+0xd8>
c0005085:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0005089:	b9 04 00 00 00       	mov    ecx,0x4
c000508e:	01 da                	add    edx,ebx
c0005090:	e8 a0 ce ff ff       	call   c0001f35 <put_utf>
c0005095:	0f b6 c0             	movzx  eax,al
c0005098:	85 c0                	test   eax,eax
c000509a:	74 0b                	je     c00050a7 <f_getlabel+0xd8>
c000509c:	01 c3                	add    ebx,eax
c000509e:	83 ff 0b             	cmp    edi,0xb
c00050a1:	74 06                	je     c00050a9 <f_getlabel+0xda>
c00050a3:	89 f9                	mov    ecx,edi
c00050a5:	eb 90                	jmp    c0005037 <f_getlabel+0x68>
c00050a7:	31 db                	xor    ebx,ebx
c00050a9:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c00050ad:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00050b0:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c00050b4:	74 14                	je     c00050ca <f_getlabel+0xfb>
c00050b6:	4b                   	dec    ebx
c00050b7:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c00050ba:	74 f1                	je     c00050ad <f_getlabel+0xde>
c00050bc:	eb 0c                	jmp    c00050ca <f_getlabel+0xfb>
c00050be:	83 f8 04             	cmp    eax,0x4
c00050c1:	75 51                	jne    c0005114 <f_getlabel+0x145>
c00050c3:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00050c7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00050ca:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00050cf:	74 45                	je     c0005116 <f_getlabel+0x147>
c00050d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050d5:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00050d8:	e8 61 d2 ff ff       	call   c000233e <move_window>
c00050dd:	89 c6                	mov    esi,eax
c00050df:	85 c0                	test   eax,eax
c00050e1:	75 33                	jne    c0005116 <f_getlabel+0x147>
c00050e3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00050e7:	b8 43 00 00 00       	mov    eax,0x43
c00050ec:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00050ef:	83 f9 03             	cmp    ecx,0x3
c00050f2:	74 0f                	je     c0005103 <f_getlabel+0x134>
c00050f4:	31 c0                	xor    eax,eax
c00050f6:	83 f9 04             	cmp    ecx,0x4
c00050f9:	0f 94 c0             	sete   al
c00050fc:	48                   	dec    eax
c00050fd:	83 e0 c3             	and    eax,0xffffffc3
c0005100:	83 c0 64             	add    eax,0x64
c0005103:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005107:	e8 d8 cc ff ff       	call   c0001de4 <ld_dword>
c000510c:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0005110:	89 07                	mov    DWORD PTR [edi],eax
c0005112:	eb 02                	jmp    c0005116 <f_getlabel+0x147>
c0005114:	89 c6                	mov    esi,eax
c0005116:	83 c4 5c             	add    esp,0x5c
c0005119:	89 f0                	mov    eax,esi
c000511b:	5b                   	pop    ebx
c000511c:	5e                   	pop    esi
c000511d:	5f                   	pop    edi
c000511e:	5d                   	pop    ebp
c000511f:	c3                   	ret    

c0005120 <f_setlabel>:
c0005120:	57                   	push   edi
c0005121:	b9 02 00 00 00       	mov    ecx,0x2
c0005126:	56                   	push   esi
c0005127:	53                   	push   ebx
c0005128:	83 ec 50             	sub    esp,0x50
c000512b:	8d 54 24 04          	lea    edx,[esp+0x4]
c000512f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005133:	e8 59 d3 ff ff       	call   c0002491 <mount_volume>
c0005138:	89 c6                	mov    esi,eax
c000513a:	85 c0                	test   eax,eax
c000513c:	0f 85 65 01 00 00    	jne    c00052a7 <f_setlabel+0x187>
c0005142:	b9 0b 00 00 00       	mov    ecx,0xb
c0005147:	ba 20 00 00 00       	mov    edx,0x20
c000514c:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005150:	31 db                	xor    ebx,ebx
c0005152:	e8 c1 cc ff ff       	call   c0001e18 <mem_set>
c0005157:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000515b:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c000515e:	76 5d                	jbe    c00051bd <f_setlabel+0x9d>
c0005160:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005164:	e8 f4 cc ff ff       	call   c0001e5d <tchar2uni>
c0005169:	3d ff ff 00 00       	cmp    eax,0xffff
c000516e:	76 0a                	jbe    c000517a <f_setlabel+0x5a>
c0005170:	be 06 00 00 00       	mov    esi,0x6
c0005175:	e9 2d 01 00 00       	jmp    c00052a7 <f_setlabel+0x187>
c000517a:	83 ec 0c             	sub    esp,0xc
c000517d:	50                   	push   eax
c000517e:	e8 e5 0b 00 00       	call   c0005d68 <ff_wtoupper>
c0005183:	5a                   	pop    edx
c0005184:	59                   	pop    ecx
c0005185:	68 b5 01 00 00       	push   0x1b5
c000518a:	50                   	push   eax
c000518b:	e8 c0 0a 00 00       	call   c0005c50 <ff_uni2oem>
c0005190:	83 c4 10             	add    esp,0x10
c0005193:	0f b7 f0             	movzx  esi,ax
c0005196:	89 f7                	mov    edi,esi
c0005198:	85 f6                	test   esi,esi
c000519a:	74 d4                	je     c0005170 <f_setlabel+0x50>
c000519c:	89 f2                	mov    edx,esi
c000519e:	b8 50 06 02 c0       	mov    eax,0xc0020650
c00051a3:	e8 9e cc ff ff       	call   c0001e46 <chk_chr>
c00051a8:	85 c0                	test   eax,eax
c00051aa:	75 c4                	jne    c0005170 <f_setlabel+0x50>
c00051ac:	81 fe ff 00 00 00    	cmp    esi,0xff
c00051b2:	0f 87 c9 00 00 00    	ja     c0005281 <f_setlabel+0x161>
c00051b8:	e9 e0 00 00 00       	jmp    c000529d <f_setlabel+0x17d>
c00051bd:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00051c2:	74 ac                	je     c0005170 <f_setlabel+0x50>
c00051c4:	85 db                	test   ebx,ebx
c00051c6:	74 0e                	je     c00051d6 <f_setlabel+0xb6>
c00051c8:	8d 43 ff             	lea    eax,[ebx-0x1]
c00051cb:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00051d0:	75 04                	jne    c00051d6 <f_setlabel+0xb6>
c00051d2:	89 c3                	mov    ebx,eax
c00051d4:	eb ee                	jmp    c00051c4 <f_setlabel+0xa4>
c00051d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00051da:	31 d2                	xor    edx,edx
c00051dc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00051e0:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00051e8:	8d 44 24 20          	lea    eax,[esp+0x20]
c00051ec:	e8 27 e1 ff ff       	call   c0003318 <dir_sdi>
c00051f1:	89 c6                	mov    esi,eax
c00051f3:	85 c0                	test   eax,eax
c00051f5:	0f 85 ac 00 00 00    	jne    c00052a7 <f_setlabel+0x187>
c00051fb:	ba 01 00 00 00       	mov    edx,0x1
c0005200:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005204:	e8 0e e5 ff ff       	call   c0003717 <dir_read>
c0005209:	85 c0                	test   eax,eax
c000520b:	75 18                	jne    c0005225 <f_setlabel+0x105>
c000520d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005211:	85 db                	test   ebx,ebx
c0005213:	74 0b                	je     c0005220 <f_setlabel+0x100>
c0005215:	b9 0b 00 00 00       	mov    ecx,0xb
c000521a:	8d 54 24 0a          	lea    edx,[esp+0xa]
c000521e:	eb 47                	jmp    c0005267 <f_setlabel+0x147>
c0005220:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0005223:	eb 47                	jmp    c000526c <f_setlabel+0x14c>
c0005225:	83 f8 04             	cmp    eax,0x4
c0005228:	75 53                	jne    c000527d <f_setlabel+0x15d>
c000522a:	85 db                	test   ebx,ebx
c000522c:	74 79                	je     c00052a7 <f_setlabel+0x187>
c000522e:	ba 01 00 00 00       	mov    edx,0x1
c0005233:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005237:	e8 76 e4 ff ff       	call   c00036b2 <dir_alloc>
c000523c:	89 c6                	mov    esi,eax
c000523e:	85 c0                	test   eax,eax
c0005240:	75 65                	jne    c00052a7 <f_setlabel+0x187>
c0005242:	b9 20 00 00 00       	mov    ecx,0x20
c0005247:	31 d2                	xor    edx,edx
c0005249:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000524d:	e8 c6 cb ff ff       	call   c0001e18 <mem_set>
c0005252:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005256:	b9 0b 00 00 00       	mov    ecx,0xb
c000525b:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000525f:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005263:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005267:	e8 97 cb ff ff       	call   c0001e03 <mem_cpy>
c000526c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005270:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005274:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005278:	e8 f8 da ff ff       	call   c0002d75 <sync_fs>
c000527d:	89 c6                	mov    esi,eax
c000527f:	eb 26                	jmp    c00052a7 <f_setlabel+0x187>
c0005281:	83 fb 09             	cmp    ebx,0x9
c0005284:	0f 87 e6 fe ff ff    	ja     c0005170 <f_setlabel+0x50>
c000528a:	89 f0                	mov    eax,esi
c000528c:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005290:	43                   	inc    ebx
c0005291:	89 f8                	mov    eax,edi
c0005293:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005297:	43                   	inc    ebx
c0005298:	e9 ba fe ff ff       	jmp    c0005157 <f_setlabel+0x37>
c000529d:	83 fb 0a             	cmp    ebx,0xa
c00052a0:	76 ef                	jbe    c0005291 <f_setlabel+0x171>
c00052a2:	e9 c9 fe ff ff       	jmp    c0005170 <f_setlabel+0x50>
c00052a7:	83 c4 50             	add    esp,0x50
c00052aa:	89 f0                	mov    eax,esi
c00052ac:	5b                   	pop    ebx
c00052ad:	5e                   	pop    esi
c00052ae:	5f                   	pop    edi
c00052af:	c3                   	ret    

c00052b0 <f_expand>:
c00052b0:	55                   	push   ebp
c00052b1:	57                   	push   edi
c00052b2:	56                   	push   esi
c00052b3:	53                   	push   ebx
c00052b4:	83 ec 2c             	sub    esp,0x2c
c00052b7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00052bb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052c3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052c7:	89 d8                	mov    eax,ebx
c00052c9:	e8 c7 cf ff ff       	call   c0002295 <validate>
c00052ce:	89 c6                	mov    esi,eax
c00052d0:	85 c0                	test   eax,eax
c00052d2:	0f 85 3b 01 00 00    	jne    c0005413 <f_expand+0x163>
c00052d8:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00052dc:	85 f6                	test   esi,esi
c00052de:	0f 85 2f 01 00 00    	jne    c0005413 <f_expand+0x163>
c00052e4:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00052e9:	75 0a                	jne    c00052f5 <f_expand+0x45>
c00052eb:	be 07 00 00 00       	mov    esi,0x7
c00052f0:	e9 1e 01 00 00       	jmp    c0005413 <f_expand+0x163>
c00052f5:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c00052f9:	75 f0                	jne    c00052eb <f_expand+0x3b>
c00052fb:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00052ff:	74 ea                	je     c00052eb <f_expand+0x3b>
c0005301:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0005305:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c0005309:	c1 e1 09             	shl    ecx,0x9
c000530c:	8d 41 ff             	lea    eax,[ecx-0x1]
c000530f:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0005313:	0f 95 c0             	setne  al
c0005316:	31 d2                	xor    edx,edx
c0005318:	0f b6 c0             	movzx  eax,al
c000531b:	89 c7                	mov    edi,eax
c000531d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005321:	f7 f1                	div    ecx
c0005323:	01 f8                	add    eax,edi
c0005325:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c0005328:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000532c:	83 ff 01             	cmp    edi,0x1
c000532f:	76 05                	jbe    c0005336 <f_expand+0x86>
c0005331:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c0005334:	77 05                	ja     c000533b <f_expand+0x8b>
c0005336:	bf 02 00 00 00       	mov    edi,0x2
c000533b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000533e:	89 fd                	mov    ebp,edi
c0005340:	31 c9                	xor    ecx,ecx
c0005342:	89 ea                	mov    edx,ebp
c0005344:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005348:	8b 03                	mov    eax,DWORD PTR [ebx]
c000534a:	45                   	inc    ebp
c000534b:	e8 c4 de ff ff       	call   c0003214 <get_fat.isra.2>
c0005350:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005354:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005358:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c000535b:	77 05                	ja     c0005362 <f_expand+0xb2>
c000535d:	bd 02 00 00 00       	mov    ebp,0x2
c0005362:	83 f8 01             	cmp    eax,0x1
c0005365:	74 20                	je     c0005387 <f_expand+0xd7>
c0005367:	83 f8 ff             	cmp    eax,0xffffffff
c000536a:	74 25                	je     c0005391 <f_expand+0xe1>
c000536c:	85 c0                	test   eax,eax
c000536e:	75 09                	jne    c0005379 <f_expand+0xc9>
c0005370:	41                   	inc    ecx
c0005371:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0005375:	75 07                	jne    c000537e <f_expand+0xce>
c0005377:	eb 1f                	jmp    c0005398 <f_expand+0xe8>
c0005379:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000537c:	31 c9                	xor    ecx,ecx
c000537e:	39 fd                	cmp    ebp,edi
c0005380:	75 c0                	jne    c0005342 <f_expand+0x92>
c0005382:	e9 64 ff ff ff       	jmp    c00052eb <f_expand+0x3b>
c0005387:	be 02 00 00 00       	mov    esi,0x2
c000538c:	e9 82 00 00 00       	jmp    c0005413 <f_expand+0x163>
c0005391:	be 01 00 00 00       	mov    esi,0x1
c0005396:	eb 7b                	jmp    c0005413 <f_expand+0x163>
c0005398:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000539d:	74 2b                	je     c00053ca <f_expand+0x11a>
c000539f:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00053a2:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00053a6:	85 ed                	test   ebp,ebp
c00053a8:	74 24                	je     c00053ce <f_expand+0x11e>
c00053aa:	83 c9 ff             	or     ecx,0xffffffff
c00053ad:	83 fd 01             	cmp    ebp,0x1
c00053b0:	74 03                	je     c00053b5 <f_expand+0x105>
c00053b2:	8d 4f 01             	lea    ecx,[edi+0x1]
c00053b5:	89 fa                	mov    edx,edi
c00053b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053bb:	e8 c2 d3 ff ff       	call   c0002782 <put_fat>
c00053c0:	85 c0                	test   eax,eax
c00053c2:	75 4d                	jne    c0005411 <f_expand+0x161>
c00053c4:	89 f8                	mov    eax,edi
c00053c6:	4d                   	dec    ebp
c00053c7:	47                   	inc    edi
c00053c8:	eb dc                	jmp    c00053a6 <f_expand+0xf6>
c00053ca:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053cd:	48                   	dec    eax
c00053ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00053d2:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053d7:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00053da:	74 37                	je     c0005413 <f_expand+0x163>
c00053dc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053df:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00053e2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00053e6:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00053e9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00053ec:	83 c8 40             	or     eax,0x40
c00053ef:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00053f2:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00053f5:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00053f8:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00053fb:	39 c8                	cmp    eax,ecx
c00053fd:	77 14                	ja     c0005413 <f_expand+0x163>
c00053ff:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0005403:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005406:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005409:	83 c8 01             	or     eax,0x1
c000540c:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c000540f:	eb 02                	jmp    c0005413 <f_expand+0x163>
c0005411:	89 c6                	mov    esi,eax
c0005413:	83 c4 2c             	add    esp,0x2c
c0005416:	89 f0                	mov    eax,esi
c0005418:	5b                   	pop    ebx
c0005419:	5e                   	pop    esi
c000541a:	5f                   	pop    edi
c000541b:	5d                   	pop    ebp
c000541c:	c3                   	ret    

c000541d <f_mkfs>:
c000541d:	55                   	push   ebp
c000541e:	57                   	push   edi
c000541f:	56                   	push   esi
c0005420:	be 0b 00 00 00       	mov    esi,0xb
c0005425:	53                   	push   ebx
c0005426:	83 ec 5c             	sub    esp,0x5c
c0005429:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000542d:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c0005431:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005435:	e8 0e ce ff ff       	call   c0002248 <get_ldnumber>
c000543a:	85 c0                	test   eax,eax
c000543c:	0f 88 d1 07 00 00    	js     c0005c13 <f_mkfs+0x7f6>
c0005442:	8b 14 85 a0 64 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9b60]
c0005449:	85 d2                	test   edx,edx
c000544b:	74 03                	je     c0005450 <f_mkfs+0x33>
c000544d:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005450:	85 db                	test   ebx,ebx
c0005452:	75 05                	jne    c0005459 <f_mkfs+0x3c>
c0005454:	bb 40 06 02 c0       	mov    ebx,0xc0020640
c0005459:	83 ec 0c             	sub    esp,0xc
c000545c:	0f b6 c0             	movzx  eax,al
c000545f:	be 03 00 00 00       	mov    esi,0x3
c0005464:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005468:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000546c:	e8 18 c9 ff ff       	call   c0001d89 <disk_initialize>
c0005471:	83 c4 10             	add    esp,0x10
c0005474:	a8 01                	test   al,0x1
c0005476:	0f 85 97 07 00 00    	jne    c0005c13 <f_mkfs+0x7f6>
c000547c:	be 0a 00 00 00       	mov    esi,0xa
c0005481:	a8 04                	test   al,0x4
c0005483:	0f 85 8a 07 00 00    	jne    c0005c13 <f_mkfs+0x7f6>
c0005489:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000548c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005490:	85 c0                	test   eax,eax
c0005492:	75 20                	jne    c00054b4 <f_mkfs+0x97>
c0005494:	51                   	push   ecx
c0005495:	8d 44 24 44          	lea    eax,[esp+0x44]
c0005499:	50                   	push   eax
c000549a:	6a 03                	push   0x3
c000549c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00054a0:	e8 13 c9 ff ff       	call   c0001db8 <disk_ioctl>
c00054a5:	83 c4 10             	add    esp,0x10
c00054a8:	85 c0                	test   eax,eax
c00054aa:	74 08                	je     c00054b4 <f_mkfs+0x97>
c00054ac:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054b4:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00054b8:	8d 42 ff             	lea    eax,[edx-0x1]
c00054bb:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054c0:	77 04                	ja     c00054c6 <f_mkfs+0xa9>
c00054c2:	85 c2                	test   edx,eax
c00054c4:	74 08                	je     c00054ce <f_mkfs+0xb1>
c00054c6:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054ce:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00054d1:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00054d5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00054d9:	48                   	dec    eax
c00054da:	3c 01                	cmp    al,0x1
c00054dc:	76 05                	jbe    c00054e3 <f_mkfs+0xc6>
c00054de:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00054e3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054e6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00054ea:	48                   	dec    eax
c00054eb:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054f0:	77 07                	ja     c00054f9 <f_mkfs+0xdc>
c00054f2:	f6 44 24 14 0f       	test   BYTE PTR [esp+0x14],0xf
c00054f7:	74 08                	je     c0005501 <f_mkfs+0xe4>
c00054f9:	c7 44 24 14 00 02 00 00 	mov    DWORD PTR [esp+0x14],0x200
c0005501:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005504:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000550a:	77 07                	ja     c0005513 <f_mkfs+0xf6>
c000550c:	8d 47 ff             	lea    eax,[edi-0x1]
c000550f:	85 f8                	test   eax,edi
c0005511:	74 02                	je     c0005515 <f_mkfs+0xf8>
c0005513:	31 ff                	xor    edi,edi
c0005515:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000551d:	77 0a                	ja     c0005529 <f_mkfs+0x10c>
c000551f:	be 11 00 00 00       	mov    esi,0x11
c0005524:	e9 ea 06 00 00       	jmp    c0005c13 <f_mkfs+0x7f6>
c0005529:	8b 33                	mov    esi,DWORD PTR [ebx]
c000552b:	85 ed                	test   ebp,ebp
c000552d:	89 eb                	mov    ebx,ebp
c000552f:	75 1e                	jne    c000554f <f_mkfs+0x132>
c0005531:	83 ec 0c             	sub    esp,0xc
c0005534:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c000553b:	25 00 fe ff ff       	and    eax,0xfffffe00
c0005540:	50                   	push   eax
c0005541:	e8 da 06 00 00       	call   c0005c20 <ff_memalloc>
c0005546:	83 c4 10             	add    esp,0x10
c0005549:	89 c3                	mov    ebx,eax
c000554b:	85 c0                	test   eax,eax
c000554d:	74 d0                	je     c000551f <f_mkfs+0x102>
c000554f:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005557:	52                   	push   edx
c0005558:	8d 44 24 48          	lea    eax,[esp+0x48]
c000555c:	50                   	push   eax
c000555d:	6a 01                	push   0x1
c000555f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005563:	e8 50 c8 ff ff       	call   c0001db8 <disk_ioctl>
c0005568:	83 c4 10             	add    esp,0x10
c000556b:	85 c0                	test   eax,eax
c000556d:	0f 85 49 06 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005573:	89 f0                	mov    eax,esi
c0005575:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000557d:	83 e0 08             	and    eax,0x8
c0005580:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0005584:	75 18                	jne    c000559e <f_mkfs+0x181>
c0005586:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000558a:	83 f8 3f             	cmp    eax,0x3f
c000558d:	76 0f                	jbe    c000559e <f_mkfs+0x181>
c000558f:	83 e8 3f             	sub    eax,0x3f
c0005592:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c000559a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000559e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055a2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00055a6:	83 f8 7f             	cmp    eax,0x7f
c00055a9:	0f 86 5b 02 00 00    	jbe    c000580a <f_mkfs+0x3ed>
c00055af:	b9 80 00 00 00       	mov    ecx,0x80
c00055b4:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00055ba:	77 05                	ja     c00055c1 <f_mkfs+0x1a4>
c00055bc:	c1 ef 09             	shr    edi,0x9
c00055bf:	89 f9                	mov    ecx,edi
c00055c1:	89 f0                	mov    eax,esi
c00055c3:	89 f7                	mov    edi,esi
c00055c5:	83 e0 01             	and    eax,0x1
c00055c8:	83 e7 02             	and    edi,0x2
c00055cb:	0f b6 c0             	movzx  eax,al
c00055ce:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00055d2:	74 0a                	je     c00055de <f_mkfs+0x1c1>
c00055d4:	85 c0                	test   eax,eax
c00055d6:	0f 84 4f 01 00 00    	je     c000572b <f_mkfs+0x30e>
c00055dc:	eb 37                	jmp    c0005615 <f_mkfs+0x1f8>
c00055de:	be 13 00 00 00       	mov    esi,0x13
c00055e3:	85 c0                	test   eax,eax
c00055e5:	75 2e                	jne    c0005615 <f_mkfs+0x1f8>
c00055e7:	e9 e7 05 00 00       	jmp    c0005bd3 <f_mkfs+0x7b6>
c00055ec:	83 f8 02             	cmp    eax,0x2
c00055ef:	0f 85 0d 02 00 00    	jne    c0005802 <f_mkfs+0x3e5>
c00055f5:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00055fb:	0f 86 e4 01 00 00    	jbe    c00057e5 <f_mkfs+0x3c8>
c0005601:	85 c9                	test   ecx,ecx
c0005603:	0f 85 dc 05 00 00    	jne    c0005be5 <f_mkfs+0x7c8>
c0005609:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000560c:	83 f9 40             	cmp    ecx,0x40
c000560f:	0f 87 e0 05 00 00    	ja     c0005bf5 <f_mkfs+0x7d8>
c0005615:	89 cf                	mov    edi,ecx
c0005617:	85 c9                	test   ecx,ecx
c0005619:	75 1c                	jne    c0005637 <f_mkfs+0x21a>
c000561b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000561f:	b8 20 06 02 c0       	mov    eax,0xc0020620
c0005624:	c1 ee 0c             	shr    esi,0xc
c0005627:	bf 01 00 00 00       	mov    edi,0x1
c000562c:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000562f:	85 d2                	test   edx,edx
c0005631:	0f 85 63 01 00 00    	jne    c000579a <f_mkfs+0x37d>
c0005637:	31 d2                	xor    edx,edx
c0005639:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000563d:	f7 f7                	div    edi
c000563f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005644:	0f 86 62 01 00 00    	jbe    c00057ac <f_mkfs+0x38f>
c000564a:	83 c0 02             	add    eax,0x2
c000564d:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c0005652:	01 c0                	add    eax,eax
c0005654:	05 ff 01 00 00       	add    eax,0x1ff
c0005659:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005661:	c1 e8 09             	shr    eax,0x9
c0005664:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005668:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000566c:	c1 e0 05             	shl    eax,0x5
c000566f:	c1 e8 09             	shr    eax,0x9
c0005672:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005676:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000567b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000567f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005683:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005687:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000568b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000568f:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005694:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0005698:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c000569c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00056a0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00056a4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056a8:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00056ac:	f7 d8                	neg    eax
c00056ae:	21 c6                	and    esi,eax
c00056b0:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00056b5:	29 d6                	sub    esi,edx
c00056b7:	83 f8 03             	cmp    eax,0x3
c00056ba:	0f 85 ff 00 00 00    	jne    c00057bf <f_mkfs+0x3a2>
c00056c0:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00056c4:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00056c8:	89 f8                	mov    eax,edi
c00056ca:	c1 e0 04             	shl    eax,0x4
c00056cd:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c00056d1:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00056d5:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00056d9:	0f 82 2b 01 00 00    	jb     c000580a <f_mkfs+0x3ed>
c00056df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056e3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00056e7:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00056eb:	0f af 54 24 28       	imul   edx,DWORD PTR [esp+0x28]
c00056f0:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00056f4:	29 d0                	sub    eax,edx
c00056f6:	31 d2                	xor    edx,edx
c00056f8:	f7 f7                	div    edi
c00056fa:	89 c6                	mov    esi,eax
c00056fc:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005701:	83 f8 03             	cmp    eax,0x3
c0005704:	0f 85 e2 fe ff ff    	jne    c00055ec <f_mkfs+0x1cf>
c000570a:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005710:	0f 87 03 01 00 00    	ja     c0005819 <f_mkfs+0x3fc>
c0005716:	85 c9                	test   ecx,ecx
c0005718:	0f 85 ec 00 00 00    	jne    c000580a <f_mkfs+0x3ed>
c000571e:	83 ff 01             	cmp    edi,0x1
c0005721:	0f 86 e3 00 00 00    	jbe    c000580a <f_mkfs+0x3ed>
c0005727:	d1 ef                	shr    edi,1
c0005729:	89 f9                	mov    ecx,edi
c000572b:	89 ce                	mov    esi,ecx
c000572d:	85 c9                	test   ecx,ecx
c000572f:	75 25                	jne    c0005756 <f_mkfs+0x339>
c0005731:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005735:	b8 30 06 02 c0       	mov    eax,0xc0020630
c000573a:	c1 ee 11             	shr    esi,0x11
c000573d:	b9 01 00 00 00       	mov    ecx,0x1
c0005742:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005745:	85 d2                	test   edx,edx
c0005747:	74 0b                	je     c0005754 <f_mkfs+0x337>
c0005749:	83 c0 02             	add    eax,0x2
c000574c:	39 f2                	cmp    edx,esi
c000574e:	77 04                	ja     c0005754 <f_mkfs+0x337>
c0005750:	01 c9                	add    ecx,ecx
c0005752:	eb ee                	jmp    c0005742 <f_mkfs+0x325>
c0005754:	31 f6                	xor    esi,esi
c0005756:	31 d2                	xor    edx,edx
c0005758:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000575c:	f7 f1                	div    ecx
c000575e:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0005765:	2d f6 ff 00 00       	sub    eax,0xfff6
c000576a:	c1 ea 09             	shr    edx,0x9
c000576d:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005772:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0005776:	0f 87 8e 00 00 00    	ja     c000580a <f_mkfs+0x3ed>
c000577c:	89 cf                	mov    edi,ecx
c000577e:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c0005786:	89 f1                	mov    ecx,esi
c0005788:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c0005790:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c0005795:	e9 dc fe ff ff       	jmp    c0005676 <f_mkfs+0x259>
c000579a:	83 c0 02             	add    eax,0x2
c000579d:	39 f2                	cmp    edx,esi
c000579f:	0f 87 92 fe ff ff    	ja     c0005637 <f_mkfs+0x21a>
c00057a5:	01 ff                	add    edi,edi
c00057a7:	e9 80 fe ff ff       	jmp    c000562c <f_mkfs+0x20f>
c00057ac:	8d 04 40             	lea    eax,[eax+eax*2]
c00057af:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00057b4:	40                   	inc    eax
c00057b5:	d1 e8                	shr    eax,1
c00057b7:	83 c0 03             	add    eax,0x3
c00057ba:	e9 95 fe ff ff       	jmp    c0005654 <f_mkfs+0x237>
c00057bf:	31 d2                	xor    edx,edx
c00057c1:	89 f0                	mov    eax,esi
c00057c3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00057c7:	85 d2                	test   edx,edx
c00057c9:	74 09                	je     c00057d4 <f_mkfs+0x3b7>
c00057cb:	4e                   	dec    esi
c00057cc:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00057d0:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00057d4:	89 f0                	mov    eax,esi
c00057d6:	31 d2                	xor    edx,edx
c00057d8:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00057dc:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c00057e0:	e9 e3 fe ff ff       	jmp    c00056c8 <f_mkfs+0x2ab>
c00057e5:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00057eb:	77 2c                	ja     c0005819 <f_mkfs+0x3fc>
c00057ed:	85 c9                	test   ecx,ecx
c00057ef:	75 19                	jne    c000580a <f_mkfs+0x3ed>
c00057f1:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00057f4:	81 f9 80 00 00 00    	cmp    ecx,0x80
c00057fa:	0f 86 15 fe ff ff    	jbe    c0005615 <f_mkfs+0x1f8>
c0005800:	eb 08                	jmp    c000580a <f_mkfs+0x3ed>
c0005802:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005808:	76 0a                	jbe    c0005814 <f_mkfs+0x3f7>
c000580a:	be 0e 00 00 00       	mov    esi,0xe
c000580f:	e9 bf 03 00 00       	jmp    c0005bd3 <f_mkfs+0x7b6>
c0005814:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005819:	31 d2                	xor    edx,edx
c000581b:	b9 00 02 00 00       	mov    ecx,0x200
c0005820:	89 d8                	mov    eax,ebx
c0005822:	e8 f1 c5 ff ff       	call   c0001e18 <mem_set>
c0005827:	b9 0b 00 00 00       	mov    ecx,0xb
c000582c:	ba d2 05 02 c0       	mov    edx,0xc00205d2
c0005831:	89 d8                	mov    eax,ebx
c0005833:	e8 cb c5 ff ff       	call   c0001e03 <mem_cpy>
c0005838:	8d 43 0b             	lea    eax,[ebx+0xb]
c000583b:	ba 00 02 00 00       	mov    edx,0x200
c0005840:	e8 b7 c5 ff ff       	call   c0001dfc <st_word>
c0005845:	89 f8                	mov    eax,edi
c0005847:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000584c:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c000584f:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005852:	e8 a5 c5 ff ff       	call   c0001dfc <st_word>
c0005857:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c000585b:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000585e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005863:	83 f8 03             	cmp    eax,0x3
c0005866:	75 08                	jne    c0005870 <f_mkfs+0x453>
c0005868:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005870:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005874:	8d 43 11             	lea    eax,[ebx+0x11]
c0005877:	e8 80 c5 ff ff       	call   c0001dfc <st_word>
c000587c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005880:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005886:	77 0a                	ja     c0005892 <f_mkfs+0x475>
c0005888:	8d 43 13             	lea    eax,[ebx+0x13]
c000588b:	e8 6c c5 ff ff       	call   c0001dfc <st_word>
c0005890:	eb 08                	jmp    c000589a <f_mkfs+0x47d>
c0005892:	8d 43 20             	lea    eax,[ebx+0x20]
c0005895:	e8 66 c5 ff ff       	call   c0001e00 <st_dword>
c000589a:	8d 43 18             	lea    eax,[ebx+0x18]
c000589d:	ba 3f 00 00 00       	mov    edx,0x3f
c00058a2:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c00058a6:	e8 51 c5 ff ff       	call   c0001dfc <st_word>
c00058ab:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00058ae:	ba ff 00 00 00       	mov    edx,0xff
c00058b3:	e8 44 c5 ff ff       	call   c0001dfc <st_word>
c00058b8:	8d 43 1c             	lea    eax,[ebx+0x1c]
c00058bb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00058bf:	e8 3c c5 ff ff       	call   c0001e00 <st_dword>
c00058c4:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058c9:	83 f8 03             	cmp    eax,0x3
c00058cc:	75 57                	jne    c0005925 <f_mkfs+0x508>
c00058ce:	8d 43 43             	lea    eax,[ebx+0x43]
c00058d1:	ba 00 00 21 50       	mov    edx,0x50210000
c00058d6:	e8 25 c5 ff ff       	call   c0001e00 <st_dword>
c00058db:	8d 43 24             	lea    eax,[ebx+0x24]
c00058de:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00058e2:	e8 19 c5 ff ff       	call   c0001e00 <st_dword>
c00058e7:	8d 43 2c             	lea    eax,[ebx+0x2c]
c00058ea:	ba 02 00 00 00       	mov    edx,0x2
c00058ef:	e8 0c c5 ff ff       	call   c0001e00 <st_dword>
c00058f4:	8d 43 30             	lea    eax,[ebx+0x30]
c00058f7:	ba 01 00 00 00       	mov    edx,0x1
c00058fc:	e8 fb c4 ff ff       	call   c0001dfc <st_word>
c0005901:	8d 43 32             	lea    eax,[ebx+0x32]
c0005904:	ba 06 00 00 00       	mov    edx,0x6
c0005909:	e8 ee c4 ff ff       	call   c0001dfc <st_word>
c000590e:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005912:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005916:	8d 43 47             	lea    eax,[ebx+0x47]
c0005919:	b9 13 00 00 00       	mov    ecx,0x13
c000591e:	ba de 05 02 c0       	mov    edx,0xc00205de
c0005923:	eb 2f                	jmp    c0005954 <f_mkfs+0x537>
c0005925:	8d 43 27             	lea    eax,[ebx+0x27]
c0005928:	ba 00 00 21 50       	mov    edx,0x50210000
c000592d:	e8 ce c4 ff ff       	call   c0001e00 <st_dword>
c0005932:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005937:	8d 43 16             	lea    eax,[ebx+0x16]
c000593a:	e8 bd c4 ff ff       	call   c0001dfc <st_word>
c000593f:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005943:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005947:	8d 43 2b             	lea    eax,[ebx+0x2b]
c000594a:	b9 13 00 00 00       	mov    ecx,0x13
c000594f:	ba f2 05 02 c0       	mov    edx,0xc00205f2
c0005954:	e8 aa c4 ff ff       	call   c0001e03 <mem_cpy>
c0005959:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c000595f:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005964:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005968:	e8 8f c4 ff ff       	call   c0001dfc <st_word>
c000596d:	6a 01                	push   0x1
c000596f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005973:	53                   	push   ebx
c0005974:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005978:	e8 25 c4 ff ff       	call   c0001da2 <disk_write>
c000597d:	83 c4 10             	add    esp,0x10
c0005980:	85 c0                	test   eax,eax
c0005982:	0f 85 34 02 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005988:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000598d:	83 f8 03             	cmp    eax,0x3
c0005990:	0f 85 98 00 00 00    	jne    c0005a2e <f_mkfs+0x611>
c0005996:	6a 01                	push   0x1
c0005998:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000599c:	83 c0 06             	add    eax,0x6
c000599f:	50                   	push   eax
c00059a0:	53                   	push   ebx
c00059a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059a5:	e8 f8 c3 ff ff       	call   c0001da2 <disk_write>
c00059aa:	b9 00 02 00 00       	mov    ecx,0x200
c00059af:	31 d2                	xor    edx,edx
c00059b1:	89 d8                	mov    eax,ebx
c00059b3:	e8 60 c4 ff ff       	call   c0001e18 <mem_set>
c00059b8:	ba 52 52 61 41       	mov    edx,0x41615252
c00059bd:	89 d8                	mov    eax,ebx
c00059bf:	e8 3c c4 ff ff       	call   c0001e00 <st_dword>
c00059c4:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c00059ca:	ba 72 72 41 61       	mov    edx,0x61417272
c00059cf:	e8 2c c4 ff ff       	call   c0001e00 <st_dword>
c00059d4:	8d 56 ff             	lea    edx,[esi-0x1]
c00059d7:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c00059dd:	e8 1e c4 ff ff       	call   c0001e00 <st_dword>
c00059e2:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c00059e8:	ba 02 00 00 00       	mov    edx,0x2
c00059ed:	e8 0e c4 ff ff       	call   c0001e00 <st_dword>
c00059f2:	ba 55 aa 00 00       	mov    edx,0xaa55
c00059f7:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00059fd:	e8 fa c3 ff ff       	call   c0001dfc <st_word>
c0005a02:	6a 01                	push   0x1
c0005a04:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005a08:	83 c0 07             	add    eax,0x7
c0005a0b:	50                   	push   eax
c0005a0c:	53                   	push   ebx
c0005a0d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005a11:	e8 8c c3 ff ff       	call   c0001da2 <disk_write>
c0005a16:	83 c4 20             	add    esp,0x20
c0005a19:	6a 01                	push   0x1
c0005a1b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005a1f:	40                   	inc    eax
c0005a20:	50                   	push   eax
c0005a21:	53                   	push   ebx
c0005a22:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005a26:	e8 77 c3 ff ff       	call   c0001da2 <disk_write>
c0005a2b:	83 c4 10             	add    esp,0x10
c0005a2e:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005a32:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005a36:	c1 e8 09             	shr    eax,0x9
c0005a39:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005a3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a43:	31 d2                	xor    edx,edx
c0005a45:	89 d8                	mov    eax,ebx
c0005a47:	e8 cc c3 ff ff       	call   c0001e18 <mem_set>
c0005a4c:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a51:	31 c9                	xor    ecx,ecx
c0005a53:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0005a5b:	83 f8 01             	cmp    eax,0x1
c0005a5e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005a62:	0f 94 c1             	sete   cl
c0005a65:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0005a69:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0005a6d:	81 64 24 14 00 00 00 ff 	and    DWORD PTR [esp+0x14],0xff000000
c0005a75:	81 44 24 14 f8 ff ff 00 	add    DWORD PTR [esp+0x14],0xfffff8
c0005a7d:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005a82:	75 21                	jne    c0005aa5 <f_mkfs+0x688>
c0005a84:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005a89:	89 d8                	mov    eax,ebx
c0005a8b:	e8 70 c3 ff ff       	call   c0001e00 <st_dword>
c0005a90:	8d 43 04             	lea    eax,[ebx+0x4]
c0005a93:	83 ca ff             	or     edx,0xffffffff
c0005a96:	e8 65 c3 ff ff       	call   c0001e00 <st_dword>
c0005a9b:	8d 43 08             	lea    eax,[ebx+0x8]
c0005a9e:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005aa3:	eb 06                	jmp    c0005aab <f_mkfs+0x68e>
c0005aa5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005aa9:	89 d8                	mov    eax,ebx
c0005aab:	e8 50 c3 ff ff       	call   c0001e00 <st_dword>
c0005ab0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ab4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005ab8:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005abc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ac0:	39 ce                	cmp    esi,ecx
c0005ac2:	76 02                	jbe    c0005ac6 <f_mkfs+0x6a9>
c0005ac4:	89 ce                	mov    esi,ecx
c0005ac6:	56                   	push   esi
c0005ac7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005acb:	53                   	push   ebx
c0005acc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005ad0:	e8 cd c2 ff ff       	call   c0001da2 <disk_write>
c0005ad5:	83 c4 10             	add    esp,0x10
c0005ad8:	85 c0                	test   eax,eax
c0005ada:	0f 85 dc 00 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005ae0:	31 d2                	xor    edx,edx
c0005ae2:	b9 00 02 00 00       	mov    ecx,0x200
c0005ae7:	89 d8                	mov    eax,ebx
c0005ae9:	e8 2a c3 ff ff       	call   c0001e18 <mem_set>
c0005aee:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005af2:	29 74 24 1c          	sub    DWORD PTR [esp+0x1c],esi
c0005af6:	75 c0                	jne    c0005ab8 <f_mkfs+0x69b>
c0005af8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005afc:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005b04:	40                   	inc    eax
c0005b05:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005b09:	0f 87 6e ff ff ff    	ja     c0005a7d <f_mkfs+0x660>
c0005b0f:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b14:	83 f8 03             	cmp    eax,0x3
c0005b17:	74 04                	je     c0005b1d <f_mkfs+0x700>
c0005b19:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0005b1d:	89 fe                	mov    esi,edi
c0005b1f:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005b23:	76 04                	jbe    c0005b29 <f_mkfs+0x70c>
c0005b25:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b29:	56                   	push   esi
c0005b2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b2e:	53                   	push   ebx
c0005b2f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b33:	e8 6a c2 ff ff       	call   c0001da2 <disk_write>
c0005b38:	83 c4 10             	add    esp,0x10
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	75 7d                	jne    c0005bbc <f_mkfs+0x79f>
c0005b3f:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005b43:	29 f7                	sub    edi,esi
c0005b45:	75 d6                	jne    c0005b1d <f_mkfs+0x700>
c0005b47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b4c:	b9 0c 00 00 00       	mov    ecx,0xc
c0005b51:	83 f8 03             	cmp    eax,0x3
c0005b54:	74 1e                	je     c0005b74 <f_mkfs+0x757>
c0005b56:	b9 06 00 00 00       	mov    ecx,0x6
c0005b5b:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005b63:	77 0f                	ja     c0005b74 <f_mkfs+0x757>
c0005b65:	b9 04 00 00 00       	mov    ecx,0x4
c0005b6a:	83 f8 02             	cmp    eax,0x2
c0005b6d:	74 05                	je     c0005b74 <f_mkfs+0x757>
c0005b6f:	b9 01 00 00 00       	mov    ecx,0x1
c0005b74:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005b79:	75 2a                	jne    c0005ba5 <f_mkfs+0x788>
c0005b7b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005b7f:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005b87:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005b8b:	83 ec 0c             	sub    esp,0xc
c0005b8e:	53                   	push   ebx
c0005b8f:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005b93:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005b97:	e8 89 d2 ff ff       	call   c0002e25 <create_partition>
c0005b9c:	83 c4 10             	add    esp,0x10
c0005b9f:	89 c6                	mov    esi,eax
c0005ba1:	85 c0                	test   eax,eax
c0005ba3:	75 2e                	jne    c0005bd3 <f_mkfs+0x7b6>
c0005ba5:	31 f6                	xor    esi,esi
c0005ba7:	50                   	push   eax
c0005ba8:	6a 00                	push   0x0
c0005baa:	6a 00                	push   0x0
c0005bac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005bb0:	e8 03 c2 ff ff       	call   c0001db8 <disk_ioctl>
c0005bb5:	83 c4 10             	add    esp,0x10
c0005bb8:	85 c0                	test   eax,eax
c0005bba:	74 17                	je     c0005bd3 <f_mkfs+0x7b6>
c0005bbc:	85 ed                	test   ebp,ebp
c0005bbe:	75 0c                	jne    c0005bcc <f_mkfs+0x7af>
c0005bc0:	83 ec 0c             	sub    esp,0xc
c0005bc3:	53                   	push   ebx
c0005bc4:	e8 6f 00 00 00       	call   c0005c38 <ff_memfree>
c0005bc9:	83 c4 10             	add    esp,0x10
c0005bcc:	be 01 00 00 00       	mov    esi,0x1
c0005bd1:	eb 40                	jmp    c0005c13 <f_mkfs+0x7f6>
c0005bd3:	85 ed                	test   ebp,ebp
c0005bd5:	75 3c                	jne    c0005c13 <f_mkfs+0x7f6>
c0005bd7:	83 ec 0c             	sub    esp,0xc
c0005bda:	53                   	push   ebx
c0005bdb:	e8 58 00 00 00       	call   c0005c38 <ff_memfree>
c0005be0:	83 c4 10             	add    esp,0x10
c0005be3:	eb 2e                	jmp    c0005c13 <f_mkfs+0x7f6>
c0005be5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005bea:	0f 85 3b fb ff ff    	jne    c000572b <f_mkfs+0x30e>
c0005bf0:	e9 15 fc ff ff       	jmp    c000580a <f_mkfs+0x3ed>
c0005bf5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005bfa:	0f 85 31 fb ff ff    	jne    c0005731 <f_mkfs+0x314>
c0005c00:	89 cf                	mov    edi,ecx
c0005c02:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005c08:	0f 86 29 fa ff ff    	jbe    c0005637 <f_mkfs+0x21a>
c0005c0e:	e9 f7 fb ff ff       	jmp    c000580a <f_mkfs+0x3ed>
c0005c13:	83 c4 5c             	add    esp,0x5c
c0005c16:	89 f0                	mov    eax,esi
c0005c18:	5b                   	pop    ebx
c0005c19:	5e                   	pop    esi
c0005c1a:	5f                   	pop    edi
c0005c1b:	5d                   	pop    ebp
c0005c1c:	c3                   	ret    
c0005c1d:	66 90                	xchg   ax,ax
c0005c1f:	90                   	nop

c0005c20 <ff_memalloc>:
c0005c20:	83 ec 0c             	sub    esp,0xc
c0005c23:	83 ec 0c             	sub    esp,0xc
c0005c26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c2a:	e8 87 1e 00 00       	call   c0007ab6 <malloc>
c0005c2f:	83 c4 10             	add    esp,0x10
c0005c32:	83 c4 0c             	add    esp,0xc
c0005c35:	c3                   	ret    
c0005c36:	66 90                	xchg   ax,ax

c0005c38 <ff_memfree>:
c0005c38:	83 ec 0c             	sub    esp,0xc
c0005c3b:	83 ec 0c             	sub    esp,0xc
c0005c3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c42:	e8 7f 1e 00 00       	call   c0007ac6 <free>
c0005c47:	83 c4 10             	add    esp,0x10
c0005c4a:	90                   	nop
c0005c4b:	83 c4 0c             	add    esp,0xc
c0005c4e:	c3                   	ret    
c0005c4f:	90                   	nop

c0005c50 <ff_uni2oem>:
c0005c50:	83 ec 14             	sub    esp,0x14
c0005c53:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005c57:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005c5b:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c62:	c7 44 24 0c 20 0a 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020a20
c0005c6a:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005c6f:	77 0b                	ja     c0005c7c <ff_uni2oem+0x2c>
c0005c71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c75:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005c7a:	eb 68                	jmp    c0005ce4 <ff_uni2oem+0x94>
c0005c7c:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005c84:	77 5e                	ja     c0005ce4 <ff_uni2oem+0x94>
c0005c86:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005c8a:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005c8f:	75 53                	jne    c0005ce4 <ff_uni2oem+0x94>
c0005c91:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c98:	eb 12                	jmp    c0005cac <ff_uni2oem+0x5c>
c0005c9a:	66 90                	xchg   ax,ax
c0005c9c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ca1:	83 c0 01             	add    eax,0x1
c0005ca4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ca9:	8d 76 00             	lea    esi,[esi+0x0]
c0005cac:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cb1:	83 f8 7f             	cmp    eax,0x7f
c0005cb4:	77 1e                	ja     c0005cd4 <ff_uni2oem+0x84>
c0005cb6:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cbb:	01 c0                	add    eax,eax
c0005cbd:	89 c2                	mov    edx,eax
c0005cbf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cc3:	01 d0                	add    eax,edx
c0005cc5:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cc8:	0f b7 c0             	movzx  eax,ax
c0005ccb:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005ccf:	75 cb                	jne    c0005c9c <ff_uni2oem+0x4c>
c0005cd1:	8d 76 00             	lea    esi,[esi+0x0]
c0005cd4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005cd9:	83 e8 80             	sub    eax,0xffffff80
c0005cdc:	0f b6 c0             	movzx  eax,al
c0005cdf:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ce4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ce9:	83 c4 14             	add    esp,0x14
c0005cec:	c3                   	ret    
c0005ced:	8d 76 00             	lea    esi,[esi+0x0]

c0005cf0 <ff_oem2uni>:
c0005cf0:	83 ec 18             	sub    esp,0x18
c0005cf3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005cf7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005cfb:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005d00:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005d04:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005d0b:	c7 44 24 10 20 0a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020a20
c0005d13:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d18:	83 f8 7f             	cmp    eax,0x7f
c0005d1b:	77 0b                	ja     c0005d28 <ff_oem2uni+0x38>
c0005d1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005d21:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d26:	eb 34                	jmp    c0005d5c <ff_oem2uni+0x6c>
c0005d28:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005d2c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005d31:	75 29                	jne    c0005d5c <ff_oem2uni+0x6c>
c0005d33:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d38:	3d ff 00 00 00       	cmp    eax,0xff
c0005d3d:	77 1d                	ja     c0005d5c <ff_oem2uni+0x6c>
c0005d3f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d44:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005d49:	01 c0                	add    eax,eax
c0005d4b:	89 c2                	mov    edx,eax
c0005d4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d51:	01 d0                	add    eax,edx
c0005d53:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005d56:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d5b:	90                   	nop
c0005d5c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005d61:	83 c4 18             	add    esp,0x18
c0005d64:	c3                   	ret    
c0005d65:	8d 76 00             	lea    esi,[esi+0x0]

c0005d68 <ff_wtoupper>:
c0005d68:	83 ec 10             	sub    esp,0x10
c0005d6b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005d73:	0f 87 ab 01 00 00    	ja     c0005f24 <ff_wtoupper+0x1bc>
c0005d79:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d7d:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005d82:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005d87:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005d8c:	77 0a                	ja     c0005d98 <ff_wtoupper+0x30>
c0005d8e:	b8 20 08 02 c0       	mov    eax,0xc0020820
c0005d93:	eb 0b                	jmp    c0005da0 <ff_wtoupper+0x38>
c0005d95:	8d 76 00             	lea    esi,[esi+0x0]
c0005d98:	b8 60 07 02 c0       	mov    eax,0xc0020760
c0005d9d:	8d 76 00             	lea    esi,[esi+0x0]
c0005da0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005da4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005da8:	8d 50 02             	lea    edx,[eax+0x2]
c0005dab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005daf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005db2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005db7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dbc:	85 c0                	test   eax,eax
c0005dbe:	0f 84 54 01 00 00    	je     c0005f18 <ff_wtoupper+0x1b0>
c0005dc4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005dc9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dce:	39 c2                	cmp    edx,eax
c0005dd0:	0f 82 42 01 00 00    	jb     c0005f18 <ff_wtoupper+0x1b0>
c0005dd6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dda:	8d 50 02             	lea    edx,[eax+0x2]
c0005ddd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005de1:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005de4:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005de9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005dee:	c1 e8 08             	shr    eax,0x8
c0005df1:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005df6:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005dfb:	0f b6 c0             	movzx  eax,al
c0005dfe:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e03:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e08:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005e0d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005e12:	01 ca                	add    edx,ecx
c0005e14:	39 d0                	cmp    eax,edx
c0005e16:	0f 8d d8 00 00 00    	jge    c0005ef4 <ff_wtoupper+0x18c>
c0005e1c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e21:	83 f8 08             	cmp    eax,0x8
c0005e24:	0f 87 ea 00 00 00    	ja     c0005f14 <ff_wtoupper+0x1ac>
c0005e2a:	8b 04 85 20 07 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdf8e0]
c0005e31:	ff e0                	jmp    eax
c0005e33:	90                   	nop
c0005e34:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e39:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005e3e:	29 c2                	sub    edx,eax
c0005e40:	89 d0                	mov    eax,edx
c0005e42:	01 c0                	add    eax,eax
c0005e44:	89 c2                	mov    edx,eax
c0005e46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e4a:	01 d0                	add    eax,edx
c0005e4c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e4f:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e54:	e9 97 00 00 00       	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e59:	8d 76 00             	lea    esi,[esi+0x0]
c0005e5c:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0005e61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005e65:	89 d1                	mov    ecx,edx
c0005e67:	29 c1                	sub    ecx,eax
c0005e69:	89 c8                	mov    eax,ecx
c0005e6b:	83 e0 01             	and    eax,0x1
c0005e6e:	89 c2                	mov    edx,eax
c0005e70:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e75:	29 d0                	sub    eax,edx
c0005e77:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e7c:	eb 72                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e7e:	66 90                	xchg   ax,ax
c0005e80:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e85:	83 e8 10             	sub    eax,0x10
c0005e88:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e8d:	eb 61                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e8f:	90                   	nop
c0005e90:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e95:	83 e8 20             	sub    eax,0x20
c0005e98:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e9d:	eb 51                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e9f:	90                   	nop
c0005ea0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ea5:	83 e8 30             	sub    eax,0x30
c0005ea8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ead:	eb 41                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005eaf:	90                   	nop
c0005eb0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005eb5:	83 e8 1a             	sub    eax,0x1a
c0005eb8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ebd:	eb 31                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005ebf:	90                   	nop
c0005ec0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ec5:	83 c0 08             	add    eax,0x8
c0005ec8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ecd:	eb 21                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005ecf:	90                   	nop
c0005ed0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ed5:	83 e8 50             	sub    eax,0x50
c0005ed8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005edd:	eb 11                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005edf:	90                   	nop
c0005ee0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ee5:	2d 60 1c 00 00       	sub    eax,0x1c60
c0005eea:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005eef:	90                   	nop
c0005ef0:	eb 22                	jmp    c0005f14 <ff_wtoupper+0x1ac>
c0005ef2:	66 90                	xchg   ax,ax
c0005ef4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005ef9:	85 c0                	test   eax,eax
c0005efb:	0f 85 a3 fe ff ff    	jne    c0005da4 <ff_wtoupper+0x3c>
c0005f01:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005f06:	01 c0                	add    eax,eax
c0005f08:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005f0c:	e9 93 fe ff ff       	jmp    c0005da4 <ff_wtoupper+0x3c>
c0005f11:	8d 76 00             	lea    esi,[esi+0x0]
c0005f14:	90                   	nop
c0005f15:	8d 76 00             	lea    esi,[esi+0x0]
c0005f18:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f1d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005f21:	8d 76 00             	lea    esi,[esi+0x0]
c0005f24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f28:	83 c4 10             	add    esp,0x10
c0005f2b:	c3                   	ret    

c0005f2c <utf2ucs>:
c0005f2c:	57                   	push   edi
c0005f2d:	31 c9                	xor    ecx,ecx
c0005f2f:	56                   	push   esi
c0005f30:	89 d7                	mov    edi,edx
c0005f32:	53                   	push   ebx
c0005f33:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005f37:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005f3b:	89 de                	mov    esi,ebx
c0005f3d:	c1 fe 08             	sar    esi,0x8
c0005f40:	89 f2                	mov    edx,esi
c0005f42:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005f45:	41                   	inc    ecx
c0005f46:	85 db                	test   ebx,ebx
c0005f48:	75 e9                	jne    c0005f33 <utf2ucs+0x7>
c0005f4a:	5b                   	pop    ebx
c0005f4b:	5e                   	pop    esi
c0005f4c:	5f                   	pop    edi
c0005f4d:	c3                   	ret    

c0005f4e <ucs2utfn>:
c0005f4e:	83 e1 fe             	and    ecx,0xfffffffe
c0005f51:	01 d1                	add    ecx,edx
c0005f53:	39 d1                	cmp    ecx,edx
c0005f55:	75 04                	jne    c0005f5b <ucs2utfn+0xd>
c0005f57:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005f5a:	c3                   	ret    
c0005f5b:	57                   	push   edi
c0005f5c:	56                   	push   esi
c0005f5d:	53                   	push   ebx
c0005f5e:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005f61:	83 c2 02             	add    edx,0x2
c0005f64:	89 de                	mov    esi,ebx
c0005f66:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005f6a:	c1 e6 08             	shl    esi,0x8
c0005f6d:	09 f3                	or     ebx,esi
c0005f6f:	83 fb 3b             	cmp    ebx,0x3b
c0005f72:	74 50                	je     c0005fc4 <ucs2utfn+0x76>
c0005f74:	83 fb 7f             	cmp    ebx,0x7f
c0005f77:	7f 05                	jg     c0005f7e <ucs2utfn+0x30>
c0005f79:	88 18                	mov    BYTE PTR [eax],bl
c0005f7b:	40                   	inc    eax
c0005f7c:	eb 42                	jmp    c0005fc0 <ucs2utfn+0x72>
c0005f7e:	89 de                	mov    esi,ebx
c0005f80:	89 df                	mov    edi,ebx
c0005f82:	c1 fe 06             	sar    esi,0x6
c0005f85:	83 e7 3f             	and    edi,0x3f
c0005f88:	83 cf 80             	or     edi,0xffffff80
c0005f8b:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005f91:	7f 12                	jg     c0005fa5 <ucs2utfn+0x57>
c0005f93:	83 ce c0             	or     esi,0xffffffc0
c0005f96:	83 c0 02             	add    eax,0x2
c0005f99:	89 f3                	mov    ebx,esi
c0005f9b:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005f9e:	89 fb                	mov    ebx,edi
c0005fa0:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fa3:	eb 1b                	jmp    c0005fc0 <ucs2utfn+0x72>
c0005fa5:	c1 fb 0c             	sar    ebx,0xc
c0005fa8:	83 e6 3f             	and    esi,0x3f
c0005fab:	83 cb e0             	or     ebx,0xffffffe0
c0005fae:	83 ce 80             	or     esi,0xffffff80
c0005fb1:	88 18                	mov    BYTE PTR [eax],bl
c0005fb3:	89 f3                	mov    ebx,esi
c0005fb5:	83 c0 03             	add    eax,0x3
c0005fb8:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fbb:	89 fb                	mov    ebx,edi
c0005fbd:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fc0:	39 d1                	cmp    ecx,edx
c0005fc2:	75 9a                	jne    c0005f5e <ucs2utfn+0x10>
c0005fc4:	5b                   	pop    ebx
c0005fc5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005fc8:	5e                   	pop    esi
c0005fc9:	5f                   	pop    edi
c0005fca:	c3                   	ret    

c0005fcb <isjoliet>:
c0005fcb:	31 d2                	xor    edx,edx
c0005fcd:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005fd0:	75 26                	jne    c0005ff8 <isjoliet+0x2d>
c0005fd2:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005fd6:	75 20                	jne    c0005ff8 <isjoliet+0x2d>
c0005fd8:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c0005fdc:	ba 02 00 00 00       	mov    edx,0x2
c0005fe1:	83 f8 43             	cmp    eax,0x43
c0005fe4:	74 12                	je     c0005ff8 <isjoliet+0x2d>
c0005fe6:	ba 03 00 00 00       	mov    edx,0x3
c0005feb:	83 f8 45             	cmp    eax,0x45
c0005fee:	74 08                	je     c0005ff8 <isjoliet+0x2d>
c0005ff0:	31 d2                	xor    edx,edx
c0005ff2:	83 f8 40             	cmp    eax,0x40
c0005ff5:	0f 94 c2             	sete   dl
c0005ff8:	89 d0                	mov    eax,edx
c0005ffa:	c3                   	ret    

c0005ffb <htohl_32>:
c0005ffb:	8b 00                	mov    eax,DWORD PTR [eax]
c0005ffd:	c3                   	ret    

c0005ffe <iso_733>:
c0005ffe:	eb fb                	jmp    c0005ffb <htohl_32>

c0006000 <bgrad_cache>:
c0006000:	83 fa 0e             	cmp    edx,0xe
c0006003:	77 16                	ja     c000601b <bgrad_cache+0x1b>
c0006005:	53                   	push   ebx
c0006006:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006009:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c000600d:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0006010:	42                   	inc    edx
c0006011:	83 fa 0f             	cmp    edx,0xf
c0006014:	75 f3                	jne    c0006009 <bgrad_cache+0x9>
c0006016:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006019:	5b                   	pop    ebx
c000601a:	c3                   	ret    
c000601b:	c3                   	ret    

c000601c <ucscompare>:
c000601c:	55                   	push   ebp
c000601d:	57                   	push   edi
c000601e:	89 c7                	mov    edi,eax
c0006020:	56                   	push   esi
c0006021:	89 d6                	mov    esi,edx
c0006023:	53                   	push   ebx
c0006024:	31 d2                	xor    edx,edx
c0006026:	83 ec 1c             	sub    esp,0x1c
c0006029:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c000602d:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0006032:	c1 e3 08             	shl    ebx,0x8
c0006035:	09 c3                	or     ebx,eax
c0006037:	39 ca                	cmp    edx,ecx
c0006039:	7d 42                	jge    c000607d <ucscompare+0x61>
c000603b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000603f:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006044:	c1 e0 08             	shl    eax,0x8
c0006047:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000604b:	09 e8                	or     eax,ebp
c000604d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006051:	83 f8 3b             	cmp    eax,0x3b
c0006054:	74 27                	je     c000607d <ucscompare+0x61>
c0006056:	83 ec 0c             	sub    esp,0xc
c0006059:	50                   	push   eax
c000605a:	e8 f1 a8 ff ff       	call   c0000950 <tolower>
c000605f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006062:	89 c5                	mov    ebp,eax
c0006064:	e8 e7 a8 ff ff       	call   c0000950 <tolower>
c0006069:	83 c4 10             	add    esp,0x10
c000606c:	39 c5                	cmp    ebp,eax
c000606e:	75 20                	jne    c0006090 <ucscompare+0x74>
c0006070:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006074:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006078:	83 c2 02             	add    edx,0x2
c000607b:	eb ac                	jmp    c0006029 <ucscompare+0xd>
c000607d:	85 db                	test   ebx,ebx
c000607f:	0f 95 c2             	setne  dl
c0006082:	31 c0                	xor    eax,eax
c0006084:	83 fb 2f             	cmp    ebx,0x2f
c0006087:	0f 95 c0             	setne  al
c000608a:	21 d0                	and    eax,edx
c000608c:	f7 d8                	neg    eax
c000608e:	eb 03                	jmp    c0006093 <ucscompare+0x77>
c0006090:	83 c8 ff             	or     eax,0xffffffff
c0006093:	83 c4 1c             	add    esp,0x1c
c0006096:	5b                   	pop    ebx
c0006097:	5e                   	pop    esi
c0006098:	5f                   	pop    edi
c0006099:	5d                   	pop    ebp
c000609a:	c3                   	ret    

c000609b <fncompare>:
c000609b:	55                   	push   ebp
c000609c:	57                   	push   edi
c000609d:	89 c7                	mov    edi,eax
c000609f:	56                   	push   esi
c00060a0:	89 ce                	mov    esi,ecx
c00060a2:	53                   	push   ebx
c00060a3:	31 db                	xor    ebx,ebx
c00060a5:	83 ec 1c             	sub    esp,0x1c
c00060a8:	39 d3                	cmp    ebx,edx
c00060aa:	7d 45                	jge    c00060f1 <fncompare+0x56>
c00060ac:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00060b0:	83 f8 3b             	cmp    eax,0x3b
c00060b3:	74 3c                	je     c00060f1 <fncompare+0x56>
c00060b5:	83 f8 2e             	cmp    eax,0x2e
c00060b8:	75 0e                	jne    c00060c8 <fncompare+0x2d>
c00060ba:	8d 4a ff             	lea    ecx,[edx-0x1]
c00060bd:	39 d9                	cmp    ecx,ebx
c00060bf:	74 30                	je     c00060f1 <fncompare+0x56>
c00060c1:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00060c6:	74 29                	je     c00060f1 <fncompare+0x56>
c00060c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00060cc:	83 ec 0c             	sub    esp,0xc
c00060cf:	50                   	push   eax
c00060d0:	e8 7b a8 ff ff       	call   c0000950 <tolower>
c00060d5:	89 c5                	mov    ebp,eax
c00060d7:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00060db:	89 04 24             	mov    DWORD PTR [esp],eax
c00060de:	e8 6d a8 ff ff       	call   c0000950 <tolower>
c00060e3:	83 c4 10             	add    esp,0x10
c00060e6:	39 c5                	cmp    ebp,eax
c00060e8:	75 1e                	jne    c0006108 <fncompare+0x6d>
c00060ea:	43                   	inc    ebx
c00060eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00060ef:	eb b7                	jmp    c00060a8 <fncompare+0xd>
c00060f1:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c00060f5:	85 d2                	test   edx,edx
c00060f7:	0f 95 c1             	setne  cl
c00060fa:	31 c0                	xor    eax,eax
c00060fc:	83 fa 2f             	cmp    edx,0x2f
c00060ff:	0f 95 c0             	setne  al
c0006102:	21 c8                	and    eax,ecx
c0006104:	f7 d8                	neg    eax
c0006106:	eb 03                	jmp    c000610b <fncompare+0x70>
c0006108:	83 c8 ff             	or     eax,0xffffffff
c000610b:	83 c4 1c             	add    esp,0x1c
c000610e:	5b                   	pop    ebx
c000610f:	5e                   	pop    esi
c0006110:	5f                   	pop    edi
c0006111:	5d                   	pop    ebp
c0006112:	c3                   	ret    

c0006113 <bclear_cache>:
c0006113:	83 ec 18             	sub    esp,0x18
c0006116:	68 20 0b 02 c0       	push   0xc0020b20
c000611b:	e8 9c 43 01 00       	call   c001a4bc <iso_kprintf>
c0006120:	83 c4 10             	add    esp,0x10
c0006123:	31 c0                	xor    eax,eax
c0006125:	8b 14 85 20 60 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9fe0]
c000612c:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006132:	8b 14 85 80 60 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9f80]
c0006139:	40                   	inc    eax
c000613a:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006140:	83 f8 10             	cmp    eax,0x10
c0006143:	75 e0                	jne    c0006125 <bclear_cache+0x12>
c0006145:	83 c4 0c             	add    esp,0xc
c0006148:	c3                   	ret    

c0006149 <bclear>:
c0006149:	eb c8                	jmp    c0006113 <bclear_cache>

c000614b <iso_break_all>:
c000614b:	83 ec 18             	sub    esp,0x18
c000614e:	68 2e 0b 02 c0       	push   0xc0020b2e
c0006153:	e8 64 43 01 00       	call   c001a4bc <iso_kprintf>
c0006158:	83 c4 10             	add    esp,0x10
c000615b:	31 c0                	xor    eax,eax
c000615d:	c7 80 d0 65 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffd9a30],0x1
c0006167:	05 94 00 00 00       	add    eax,0x94
c000616c:	3d 40 09 00 00       	cmp    eax,0x940
c0006171:	75 ea                	jne    c000615d <iso_break_all+0x12>
c0006173:	83 c4 0c             	add    esp,0xc
c0006176:	c3                   	ret    

c0006177 <isoReadDiscSector>:
c0006177:	83 ec 0c             	sub    esp,0xc
c000617a:	0f be 05 60 60 02 c0 	movsx  eax,BYTE PTR ds:0xc0026060
c0006181:	50                   	push   eax
c0006182:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006186:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000618a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000618e:	e8 cd 42 01 00       	call   c001a460 <isoReadDiscSectorHelper>
c0006193:	83 c4 1c             	add    esp,0x1c
c0006196:	c3                   	ret    

c0006197 <bread_cache>:
c0006197:	55                   	push   ebp
c0006198:	57                   	push   edi
c0006199:	89 d7                	mov    edi,edx
c000619b:	56                   	push   esi
c000619c:	ba 0f 00 00 00       	mov    edx,0xf
c00061a1:	53                   	push   ebx
c00061a2:	89 c6                	mov    esi,eax
c00061a4:	83 ec 0c             	sub    esp,0xc
c00061a7:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00061aa:	39 38                	cmp    DWORD PTR [eax],edi
c00061ac:	74 3c                	je     c00061ea <bread_cache+0x53>
c00061ae:	4a                   	dec    edx
c00061af:	83 fa ff             	cmp    edx,0xffffffff
c00061b2:	75 f3                	jne    c00061a7 <bread_cache+0x10>
c00061b4:	31 db                	xor    ebx,ebx
c00061b6:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00061b9:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00061bc:	74 08                	je     c00061c6 <bread_cache+0x2f>
c00061be:	43                   	inc    ebx
c00061bf:	83 fb 10             	cmp    ebx,0x10
c00061c2:	75 f2                	jne    c00061b6 <bread_cache+0x1f>
c00061c4:	31 db                	xor    ebx,ebx
c00061c6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00061c9:	50                   	push   eax
c00061ca:	6a 01                	push   0x1
c00061cc:	57                   	push   edi
c00061cd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061d0:	83 c0 04             	add    eax,0x4
c00061d3:	50                   	push   eax
c00061d4:	e8 9e ff ff ff       	call   c0006177 <isoReadDiscSector>
c00061d9:	83 c4 10             	add    esp,0x10
c00061dc:	83 c9 ff             	or     ecx,0xffffffff
c00061df:	85 c0                	test   eax,eax
c00061e1:	78 13                	js     c00061f6 <bread_cache+0x5f>
c00061e3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061e6:	89 da                	mov    edx,ebx
c00061e8:	89 38                	mov    DWORD PTR [eax],edi
c00061ea:	89 f0                	mov    eax,esi
c00061ec:	e8 0f fe ff ff       	call   c0006000 <bgrad_cache>
c00061f1:	b9 0f 00 00 00       	mov    ecx,0xf
c00061f6:	83 c4 0c             	add    esp,0xc
c00061f9:	89 c8                	mov    eax,ecx
c00061fb:	5b                   	pop    ebx
c00061fc:	5e                   	pop    esi
c00061fd:	5f                   	pop    edi
c00061fe:	5d                   	pop    ebp
c00061ff:	c3                   	ret    

c0006200 <biread>:
c0006200:	89 c2                	mov    edx,eax
c0006202:	b8 80 60 02 c0       	mov    eax,0xc0026080
c0006207:	eb 8e                	jmp    c0006197 <bread_cache>

c0006209 <bdread>:
c0006209:	89 c2                	mov    edx,eax
c000620b:	b8 20 60 02 c0       	mov    eax,0xc0026020
c0006210:	eb 85                	jmp    c0006197 <bread_cache>

c0006212 <strnicmp>:
c0006212:	55                   	push   ebp
c0006213:	57                   	push   edi
c0006214:	31 ff                	xor    edi,edi
c0006216:	56                   	push   esi
c0006217:	53                   	push   ebx
c0006218:	83 ec 0c             	sub    esp,0xc
c000621b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000621f:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c0006223:	74 43                	je     c0006268 <strnicmp+0x56>
c0006225:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006229:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c000622d:	85 c0                	test   eax,eax
c000622f:	74 37                	je     c0006268 <strnicmp+0x56>
c0006231:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006235:	85 d2                	test   edx,edx
c0006237:	74 2f                	je     c0006268 <strnicmp+0x56>
c0006239:	39 d0                	cmp    eax,edx
c000623b:	8d 6f 01             	lea    ebp,[edi+0x1]
c000623e:	75 04                	jne    c0006244 <strnicmp+0x32>
c0006240:	89 ef                	mov    edi,ebp
c0006242:	eb db                	jmp    c000621f <strnicmp+0xd>
c0006244:	83 ec 0c             	sub    esp,0xc
c0006247:	50                   	push   eax
c0006248:	e8 03 a7 ff ff       	call   c0000950 <tolower>
c000624d:	89 c3                	mov    ebx,eax
c000624f:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c0006253:	89 ef                	mov    edi,ebp
c0006255:	89 04 24             	mov    DWORD PTR [esp],eax
c0006258:	e8 f3 a6 ff ff       	call   c0000950 <tolower>
c000625d:	83 c4 10             	add    esp,0x10
c0006260:	29 c3                	sub    ebx,eax
c0006262:	89 d8                	mov    eax,ebx
c0006264:	74 b9                	je     c000621f <strnicmp+0xd>
c0006266:	eb 02                	jmp    c000626a <strnicmp+0x58>
c0006268:	31 c0                	xor    eax,eax
c000626a:	83 c4 0c             	add    esp,0xc
c000626d:	5b                   	pop    ebx
c000626e:	5e                   	pop    esi
c000626f:	5f                   	pop    edi
c0006270:	5d                   	pop    ebp
c0006271:	c3                   	ret    

c0006272 <find_object>:
c0006272:	55                   	push   ebp
c0006273:	57                   	push   edi
c0006274:	89 c7                	mov    edi,eax
c0006276:	56                   	push   esi
c0006277:	53                   	push   ebx
c0006278:	89 d3                	mov    ebx,edx
c000627a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006280:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006287:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000628b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000628f:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006296:	74 0b                	je     c00062a3 <find_object+0x31>
c0006298:	89 fa                	mov    edx,edi
c000629a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000629e:	e8 89 fc ff ff       	call   c0005f2c <utf2ucs>
c00062a3:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00062a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062aa:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00062af:	7e 11                	jle    c00062c2 <find_object+0x50>
c00062b1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b5:	e8 46 ff ff ff       	call   c0006200 <biread>
c00062ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00062be:	85 c0                	test   eax,eax
c00062c0:	79 07                	jns    c00062c9 <find_object+0x57>
c00062c2:	31 db                	xor    ebx,ebx
c00062c4:	e9 56 01 00 00       	jmp    c000641f <find_object+0x1ad>
c00062c9:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00062d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062d5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00062d9:	8b 04 85 80 60 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9f80]
c00062e0:	8d 5c 08 04          	lea    ebx,[eax+ecx*1+0x4]
c00062e4:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00062e7:	85 f6                	test   esi,esi
c00062e9:	75 0e                	jne    c00062f9 <find_object+0x87>
c00062eb:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00062ef:	81 6c 24 0c 00 08 00 00 	sub    DWORD PTR [esp+0xc],0x800
c00062f7:	eb b1                	jmp    c00062aa <find_object+0x38>
c00062f9:	8b 2d b4 6e 02 c0    	mov    ebp,DWORD PTR ds:0xc0026eb4
c00062ff:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c0006303:	85 ed                	test   ebp,ebp
c0006305:	89 c8                	mov    eax,ecx
c0006307:	74 2b                	je     c0006334 <find_object+0xc2>
c0006309:	8d 43 21             	lea    eax,[ebx+0x21]
c000630c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006310:	e8 07 fd ff ff       	call   c000601c <ucscompare>
c0006315:	85 c0                	test   eax,eax
c0006317:	0f 84 bf 00 00 00    	je     c00063dc <find_object+0x16a>
c000631d:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006320:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c0006324:	81 7c 24 08 ff 07 00 00 	cmp    DWORD PTR [esp+0x8],0x7ff
c000632c:	0f 8e da 00 00 00    	jle    c000640c <find_object+0x19a>
c0006332:	eb b7                	jmp    c00062eb <find_object+0x79>
c0006334:	29 ce                	sub    esi,ecx
c0006336:	8d 54 0b 21          	lea    edx,[ebx+ecx*1+0x21]
c000633a:	a8 01                	test   al,0x1
c000633c:	74 05                	je     c0006343 <find_object+0xd1>
c000633e:	83 ee 21             	sub    esi,0x21
c0006341:	eb 5a                	jmp    c000639d <find_object+0x12b>
c0006343:	42                   	inc    edx
c0006344:	83 ee 22             	sub    esi,0x22
c0006347:	eb 54                	jmp    c000639d <find_object+0x12b>
c0006349:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000634c:	48                   	dec    eax
c000634d:	3c 01                	cmp    al,0x1
c000634f:	77 51                	ja     c00063a2 <find_object+0x130>
c0006351:	50                   	push   eax
c0006352:	6a 02                	push   0x2
c0006354:	68 3d 0b 02 c0       	push   0xc0020b3d
c0006359:	52                   	push   edx
c000635a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000635e:	e8 7d a4 ff ff       	call   c00007e0 <strncmp>
c0006363:	83 c4 10             	add    esp,0x10
c0006366:	85 c0                	test   eax,eax
c0006368:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000636c:	75 27                	jne    c0006395 <find_object+0x123>
c000636e:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006372:	8d 68 fb             	lea    ebp,[eax-0x5]
c0006375:	50                   	push   eax
c0006376:	8d 42 05             	lea    eax,[edx+0x5]
c0006379:	55                   	push   ebp
c000637a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000637e:	50                   	push   eax
c000637f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006383:	50                   	push   eax
c0006384:	e8 f7 a2 ff ff       	call   c0000680 <strncpy>
c0006389:	c6 44 2c 30 00       	mov    BYTE PTR [esp+ebp*1+0x30],0x0
c000638e:	83 c4 10             	add    esp,0x10
c0006391:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006395:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006399:	29 c6                	sub    esi,eax
c000639b:	01 c2                	add    edx,eax
c000639d:	83 fe 03             	cmp    esi,0x3
c00063a0:	7f a7                	jg     c0006349 <find_object+0xd7>
c00063a2:	85 ed                	test   ebp,ebp
c00063a4:	7e 40                	jle    c00063e6 <find_object+0x174>
c00063a6:	51                   	push   ecx
c00063a7:	51                   	push   ecx
c00063a8:	6a 2f                	push   0x2f
c00063aa:	57                   	push   edi
c00063ab:	e8 f0 a3 ff ff       	call   c00007a0 <strchr>
c00063b0:	83 c4 10             	add    esp,0x10
c00063b3:	85 c0                	test   eax,eax
c00063b5:	74 04                	je     c00063bb <find_object+0x149>
c00063b7:	29 f8                	sub    eax,edi
c00063b9:	eb 0c                	jmp    c00063c7 <find_object+0x155>
c00063bb:	83 ec 0c             	sub    esp,0xc
c00063be:	57                   	push   edi
c00063bf:	e8 ac a1 ff ff       	call   c0000570 <strlen>
c00063c4:	83 c4 10             	add    esp,0x10
c00063c7:	52                   	push   edx
c00063c8:	50                   	push   eax
c00063c9:	57                   	push   edi
c00063ca:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00063ce:	50                   	push   eax
c00063cf:	e8 3e fe ff ff       	call   c0006212 <strnicmp>
c00063d4:	83 c4 10             	add    esp,0x10
c00063d7:	e9 39 ff ff ff       	jmp    c0006315 <find_object+0xa3>
c00063dc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00063e0:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c00063e4:	eb 1e                	jmp    c0006404 <find_object+0x192>
c00063e6:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00063ea:	8d 43 21             	lea    eax,[ebx+0x21]
c00063ed:	89 f9                	mov    ecx,edi
c00063ef:	e8 a7 fc ff ff       	call   c000609b <fncompare>
c00063f4:	85 c0                	test   eax,eax
c00063f6:	0f 85 21 ff ff ff    	jne    c000631d <find_object+0xab>
c00063fc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006400:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0006404:	0f 85 13 ff ff ff    	jne    c000631d <find_object+0xab>
c000640a:	eb 13                	jmp    c000641f <find_object+0x1ad>
c000640c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006410:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0006414:	0f 8f b7 fe ff ff    	jg     c00062d1 <find_object+0x5f>
c000641a:	e9 cc fe ff ff       	jmp    c00062eb <find_object+0x79>
c000641f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006425:	89 d8                	mov    eax,ebx
c0006427:	5b                   	pop    ebx
c0006428:	5e                   	pop    esi
c0006429:	5f                   	pop    edi
c000642a:	5d                   	pop    ebp
c000642b:	c3                   	ret    

c000642c <find_object_path>:
c000642c:	55                   	push   ebp
c000642d:	57                   	push   edi
c000642e:	89 d7                	mov    edi,edx
c0006430:	56                   	push   esi
c0006431:	89 c6                	mov    esi,eax
c0006433:	53                   	push   ebx
c0006434:	89 cb                	mov    ebx,ecx
c0006436:	83 ec 0c             	sub    esp,0xc
c0006439:	50                   	push   eax
c000643a:	50                   	push   eax
c000643b:	6a 2f                	push   0x2f
c000643d:	56                   	push   esi
c000643e:	e8 5d a3 ff ff       	call   c00007a0 <strchr>
c0006443:	83 c4 10             	add    esp,0x10
c0006446:	89 c5                	mov    ebp,eax
c0006448:	85 c0                	test   eax,eax
c000644a:	74 3a                	je     c0006486 <find_object_path+0x5a>
c000644c:	39 ee                	cmp    esi,ebp
c000644e:	74 31                	je     c0006481 <find_object_path+0x55>
c0006450:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006453:	e8 a6 fb ff ff       	call   c0005ffe <iso_733>
c0006458:	89 c2                	mov    edx,eax
c000645a:	8d 43 02             	lea    eax,[ebx+0x2]
c000645d:	e8 9c fb ff ff       	call   c0005ffe <iso_733>
c0006462:	83 ec 0c             	sub    esp,0xc
c0006465:	89 c1                	mov    ecx,eax
c0006467:	52                   	push   edx
c0006468:	89 f0                	mov    eax,esi
c000646a:	ba 01 00 00 00       	mov    edx,0x1
c000646f:	e8 fe fd ff ff       	call   c0006272 <find_object>
c0006474:	83 c4 10             	add    esp,0x10
c0006477:	89 c3                	mov    ebx,eax
c0006479:	85 c0                	test   eax,eax
c000647b:	75 04                	jne    c0006481 <find_object_path+0x55>
c000647d:	31 db                	xor    ebx,ebx
c000647f:	eb 36                	jmp    c00064b7 <find_object_path+0x8b>
c0006481:	8d 75 01             	lea    esi,[ebp+0x1]
c0006484:	eb b3                	jmp    c0006439 <find_object_path+0xd>
c0006486:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006489:	74 28                	je     c00064b3 <find_object_path+0x87>
c000648b:	8d 43 0a             	lea    eax,[ebx+0xa]
c000648e:	e8 6b fb ff ff       	call   c0005ffe <iso_733>
c0006493:	89 c2                	mov    edx,eax
c0006495:	8d 43 02             	lea    eax,[ebx+0x2]
c0006498:	e8 61 fb ff ff       	call   c0005ffe <iso_733>
c000649d:	83 ec 0c             	sub    esp,0xc
c00064a0:	89 c1                	mov    ecx,eax
c00064a2:	52                   	push   edx
c00064a3:	89 f0                	mov    eax,esi
c00064a5:	89 fa                	mov    edx,edi
c00064a7:	e8 c6 fd ff ff       	call   c0006272 <find_object>
c00064ac:	83 c4 10             	add    esp,0x10
c00064af:	89 c3                	mov    ebx,eax
c00064b1:	eb 04                	jmp    c00064b7 <find_object_path+0x8b>
c00064b3:	85 ff                	test   edi,edi
c00064b5:	74 c6                	je     c000647d <find_object_path+0x51>
c00064b7:	83 c4 0c             	add    esp,0xc
c00064ba:	89 d8                	mov    eax,ebx
c00064bc:	5b                   	pop    ebx
c00064bd:	5e                   	pop    esi
c00064be:	5f                   	pop    edi
c00064bf:	5d                   	pop    ebp
c00064c0:	c3                   	ret    

c00064c1 <stricmp>:
c00064c1:	57                   	push   edi
c00064c2:	56                   	push   esi
c00064c3:	31 f6                	xor    esi,esi
c00064c5:	53                   	push   ebx
c00064c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064ca:	83 ec 0c             	sub    esp,0xc
c00064cd:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00064d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064d5:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00064d9:	50                   	push   eax
c00064da:	e8 51 a4 ff ff       	call   c0000930 <toupper>
c00064df:	89 04 24             	mov    DWORD PTR [esp],eax
c00064e2:	e8 69 a4 ff ff       	call   c0000950 <tolower>
c00064e7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00064ea:	89 c3                	mov    ebx,eax
c00064ec:	e8 3f a4 ff ff       	call   c0000930 <toupper>
c00064f1:	89 04 24             	mov    DWORD PTR [esp],eax
c00064f4:	e8 57 a4 ff ff       	call   c0000950 <tolower>
c00064f9:	83 c4 10             	add    esp,0x10
c00064fc:	39 c3                	cmp    ebx,eax
c00064fe:	75 05                	jne    c0006505 <stricmp+0x44>
c0006500:	46                   	inc    esi
c0006501:	85 db                	test   ebx,ebx
c0006503:	75 c1                	jne    c00064c6 <stricmp+0x5>
c0006505:	29 c3                	sub    ebx,eax
c0006507:	89 d8                	mov    eax,ebx
c0006509:	5b                   	pop    ebx
c000650a:	5e                   	pop    esi
c000650b:	5f                   	pop    edi
c000650c:	c3                   	ret    

c000650d <iso_open>:
c000650d:	57                   	push   edi
c000650e:	31 c0                	xor    eax,eax
c0006510:	56                   	push   esi
c0006511:	b9 80 6e 02 c0       	mov    ecx,0xc0026e80
c0006516:	53                   	push   ebx
c0006517:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000651c:	0f 95 c0             	setne  al
c000651f:	89 c2                	mov    edx,eax
c0006521:	89 c6                	mov    esi,eax
c0006523:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006527:	e8 00 ff ff ff       	call   c000642c <find_object_path>
c000652c:	83 ca ff             	or     edx,0xffffffff
c000652f:	85 c0                	test   eax,eax
c0006531:	74 5e                	je     c0006591 <iso_open+0x84>
c0006533:	89 c1                	mov    ecx,eax
c0006535:	31 d2                	xor    edx,edx
c0006537:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000653d:	83 bf 40 65 02 c0 00 	cmp    DWORD PTR [edi-0x3ffd9ac0],0x0
c0006544:	75 42                	jne    c0006588 <iso_open+0x7b>
c0006546:	8d 41 02             	lea    eax,[ecx+0x2]
c0006549:	c7 87 40 65 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffd9ac0],0xffffffff
c0006553:	e8 a6 fa ff ff       	call   c0005ffe <iso_733>
c0006558:	89 b7 44 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9abc],esi
c000655e:	89 87 40 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9ac0],eax
c0006564:	c7 87 48 65 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd9ab8],0x0
c000656e:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006571:	e8 88 fa ff ff       	call   c0005ffe <iso_733>
c0006576:	c7 87 d0 65 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd9a30],0x0
c0006580:	89 87 4c 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9ab4],eax
c0006586:	eb 09                	jmp    c0006591 <iso_open+0x84>
c0006588:	42                   	inc    edx
c0006589:	83 fa 10             	cmp    edx,0x10
c000658c:	75 a9                	jne    c0006537 <iso_open+0x2a>
c000658e:	83 ca ff             	or     edx,0xffffffff
c0006591:	5b                   	pop    ebx
c0006592:	89 d0                	mov    eax,edx
c0006594:	5e                   	pop    esi
c0006595:	5f                   	pop    edi
c0006596:	c3                   	ret    

c0006597 <iso_close>:
c0006597:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000659b:	83 f8 0f             	cmp    eax,0xf
c000659e:	7f 10                	jg     c00065b0 <iso_close+0x19>
c00065a0:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00065a6:	c7 80 40 65 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9ac0],0x0
c00065b0:	e9 5e fb ff ff       	jmp    c0006113 <bclear_cache>

c00065b5 <iso_read>:
c00065b5:	55                   	push   ebp
c00065b6:	57                   	push   edi
c00065b7:	56                   	push   esi
c00065b8:	53                   	push   ebx
c00065b9:	83 ec 1c             	sub    esp,0x1c
c00065bc:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00065c0:	83 fd 0f             	cmp    ebp,0xf
c00065c3:	7e 0a                	jle    c00065cf <iso_read+0x1a>
c00065c5:	83 c8 ff             	or     eax,0xffffffff
c00065c8:	89 c2                	mov    edx,eax
c00065ca:	e9 f4 00 00 00       	jmp    c00066c3 <iso_read+0x10e>
c00065cf:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00065d5:	83 bd 40 65 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd9ac0],0x0
c00065dc:	74 e7                	je     c00065c5 <iso_read+0x10>
c00065de:	8b 95 d0 65 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffd9a30]
c00065e4:	85 d2                	test   edx,edx
c00065e6:	75 dd                	jne    c00065c5 <iso_read+0x10>
c00065e8:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00065ed:	0f 84 cd 00 00 00    	je     c00066c0 <iso_read+0x10b>
c00065f3:	8b 85 48 65 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd9ab8]
c00065f9:	8b 8d 4c 65 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffd9ab4]
c00065ff:	29 c1                	sub    ecx,eax
c0006601:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c0006605:	76 04                	jbe    c000660b <iso_read+0x56>
c0006607:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000660b:	85 c9                	test   ecx,ecx
c000660d:	0f 84 ad 00 00 00    	je     c00066c0 <iso_read+0x10b>
c0006613:	89 c6                	mov    esi,eax
c0006615:	bb 00 08 00 00       	mov    ebx,0x800
c000661a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006620:	c1 e8 0b             	shr    eax,0xb
c0006623:	29 f3                	sub    ebx,esi
c0006625:	03 85 40 65 02 c0    	add    eax,DWORD PTR [ebp-0x3ffd9ac0]
c000662b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006631:	7e 3f                	jle    c0006672 <iso_read+0xbd>
c0006633:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006639:	75 37                	jne    c0006672 <iso_read+0xbd>
c000663b:	be 20 00 00 00       	mov    esi,0x20
c0006640:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c0006646:	7f 05                	jg     c000664d <iso_read+0x98>
c0006648:	89 ce                	mov    esi,ecx
c000664a:	c1 fe 0b             	sar    esi,0xb
c000664d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006651:	89 f3                	mov    ebx,esi
c0006653:	c1 e3 0b             	shl    ebx,0xb
c0006656:	52                   	push   edx
c0006657:	56                   	push   esi
c0006658:	50                   	push   eax
c0006659:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000665d:	e8 15 fb ff ff       	call   c0006177 <isoReadDiscSector>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	85 c0                	test   eax,eax
c0006667:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000666b:	7f 3e                	jg     c00066ab <iso_read+0xf6>
c000666d:	e9 53 ff ff ff       	jmp    c00065c5 <iso_read+0x10>
c0006672:	39 cb                	cmp    ebx,ecx
c0006674:	7e 02                	jle    c0006678 <iso_read+0xc3>
c0006676:	89 cb                	mov    ebx,ecx
c0006678:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000667c:	e8 88 fb ff ff       	call   c0006209 <bdread>
c0006681:	85 c0                	test   eax,eax
c0006683:	0f 88 3c ff ff ff    	js     c00065c5 <iso_read+0x10>
c0006689:	8b 0c 85 20 60 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9fe0]
c0006690:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006694:	8b 85 48 65 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd9ab8]
c000669a:	25 ff 07 00 00       	and    eax,0x7ff
c000669f:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00066a3:	89 d9                	mov    ecx,ebx
c00066a5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00066a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00066ab:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00066af:	01 9d 48 65 02 c0    	add    DWORD PTR [ebp-0x3ffd9ab8],ebx
c00066b5:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00066b9:	01 da                	add    edx,ebx
c00066bb:	e9 28 ff ff ff       	jmp    c00065e8 <iso_read+0x33>
c00066c0:	89 d0                	mov    eax,edx
c00066c2:	99                   	cdq    
c00066c3:	83 c4 1c             	add    esp,0x1c
c00066c6:	5b                   	pop    ebx
c00066c7:	5e                   	pop    esi
c00066c8:	5f                   	pop    edi
c00066c9:	5d                   	pop    ebp
c00066ca:	c3                   	ret    

c00066cb <iso_seek>:
c00066cb:	55                   	push   ebp
c00066cc:	83 c8 ff             	or     eax,0xffffffff
c00066cf:	57                   	push   edi
c00066d0:	89 c2                	mov    edx,eax
c00066d2:	56                   	push   esi
c00066d3:	53                   	push   ebx
c00066d4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00066d8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066dc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00066e0:	83 fe 0f             	cmp    esi,0xf
c00066e3:	7f 65                	jg     c000674a <iso_seek+0x7f>
c00066e5:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00066eb:	8d 8d 40 65 02 c0    	lea    ecx,[ebp-0x3ffd9ac0]
c00066f1:	83 bd 40 65 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd9ac0],0x0
c00066f8:	74 50                	je     c000674a <iso_seek+0x7f>
c00066fa:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c0006701:	75 47                	jne    c000674a <iso_seek+0x7f>
c0006703:	83 fb 01             	cmp    ebx,0x1
c0006706:	74 0e                	je     c0006716 <iso_seek+0x4b>
c0006708:	83 fb 02             	cmp    ebx,0x2
c000670b:	74 0e                	je     c000671b <iso_seek+0x50>
c000670d:	85 db                	test   ebx,ebx
c000670f:	75 39                	jne    c000674a <iso_seek+0x7f>
c0006711:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006714:	eb 0d                	jmp    c0006723 <iso_seek+0x58>
c0006716:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006719:	eb 08                	jmp    c0006723 <iso_seek+0x58>
c000671b:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000671e:	01 f8                	add    eax,edi
c0006720:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006723:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006729:	8b 88 4c 65 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffd9ab4]
c000672f:	05 40 65 02 c0       	add    eax,0xc0026540
c0006734:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006737:	76 03                	jbe    c000673c <iso_seek+0x71>
c0006739:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000673c:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006742:	8b 82 48 65 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd9ab8]
c0006748:	31 d2                	xor    edx,edx
c000674a:	5b                   	pop    ebx
c000674b:	5e                   	pop    esi
c000674c:	5f                   	pop    edi
c000674d:	5d                   	pop    ebp
c000674e:	c3                   	ret    

c000674f <iso_tell>:
c000674f:	83 c8 ff             	or     eax,0xffffffff
c0006752:	53                   	push   ebx
c0006753:	89 c2                	mov    edx,eax
c0006755:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006759:	83 f9 0f             	cmp    ecx,0xf
c000675c:	7f 20                	jg     c000677e <iso_tell+0x2f>
c000675e:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006764:	83 bb 40 65 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd9ac0],0x0
c000676b:	74 11                	je     c000677e <iso_tell+0x2f>
c000676d:	83 bb d0 65 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd9a30],0x0
c0006774:	75 08                	jne    c000677e <iso_tell+0x2f>
c0006776:	8b 83 48 65 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffd9ab8]
c000677c:	31 d2                	xor    edx,edx
c000677e:	5b                   	pop    ebx
c000677f:	c3                   	ret    

c0006780 <iso_total>:
c0006780:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006784:	83 c8 ff             	or     eax,0xffffffff
c0006787:	83 fa 0f             	cmp    edx,0xf
c000678a:	7f 1e                	jg     c00067aa <iso_total+0x2a>
c000678c:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006792:	83 ba 40 65 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd9ac0],0x0
c0006799:	74 0f                	je     c00067aa <iso_total+0x2a>
c000679b:	83 ba d0 65 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd9a30],0x0
c00067a2:	75 06                	jne    c00067aa <iso_total+0x2a>
c00067a4:	8b 82 4c 65 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd9ab4]
c00067aa:	c3                   	ret    

c00067ab <fn_postprocess>:
c00067ab:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067af:	89 d0                	mov    eax,edx
c00067b1:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00067b4:	83 f9 3b             	cmp    ecx,0x3b
c00067b7:	74 07                	je     c00067c0 <fn_postprocess+0x15>
c00067b9:	85 c9                	test   ecx,ecx
c00067bb:	74 03                	je     c00067c0 <fn_postprocess+0x15>
c00067bd:	40                   	inc    eax
c00067be:	eb f1                	jmp    c00067b1 <fn_postprocess+0x6>
c00067c0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00067c3:	39 d0                	cmp    eax,edx
c00067c5:	76 0a                	jbe    c00067d1 <fn_postprocess+0x26>
c00067c7:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00067cb:	75 04                	jne    c00067d1 <fn_postprocess+0x26>
c00067cd:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00067d1:	c3                   	ret    

c00067d2 <iso_readdir>:
c00067d2:	55                   	push   ebp
c00067d3:	57                   	push   edi
c00067d4:	56                   	push   esi
c00067d5:	53                   	push   ebx
c00067d6:	83 ec 1c             	sub    esp,0x1c
c00067d9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00067dd:	83 fb 0f             	cmp    ebx,0xf
c00067e0:	7f 28                	jg     c000680a <iso_readdir+0x38>
c00067e2:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00067e8:	8d b8 40 65 02 c0    	lea    edi,[eax-0x3ffd9ac0]
c00067ee:	83 b8 40 65 02 c0 00 	cmp    DWORD PTR [eax-0x3ffd9ac0],0x0
c00067f5:	74 13                	je     c000680a <iso_readdir+0x38>
c00067f7:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00067fb:	74 0d                	je     c000680a <iso_readdir+0x38>
c00067fd:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006804:	0f 84 b1 00 00 00    	je     c00068bb <iso_readdir+0xe9>
c000680a:	83 ec 0c             	sub    esp,0xc
c000680d:	68 40 0b 02 c0       	push   0xc0020b40
c0006812:	e8 a5 3c 01 00       	call   c001a4bc <iso_kprintf>
c0006817:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000681a:	e8 b9 3c 01 00       	call   c001a4d8 <iso_kprintfd>
c000681f:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006825:	c7 04 24 45 0b 02 c0 	mov    DWORD PTR [esp],0xc0020b45
c000682c:	e8 8b 3c 01 00       	call   c001a4bc <iso_kprintf>
c0006831:	5d                   	pop    ebp
c0006832:	ff b3 40 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9ac0]
c0006838:	e8 9b 3c 01 00       	call   c001a4d8 <iso_kprintfd>
c000683d:	c7 04 24 4b 0b 02 c0 	mov    DWORD PTR [esp],0xc0020b4b
c0006844:	e8 73 3c 01 00       	call   c001a4bc <iso_kprintf>
c0006849:	58                   	pop    eax
c000684a:	ff b3 44 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9abc]
c0006850:	e8 83 3c 01 00       	call   c001a4d8 <iso_kprintfd>
c0006855:	c7 04 24 51 0b 02 c0 	mov    DWORD PTR [esp],0xc0020b51
c000685c:	e8 5b 3c 01 00       	call   c001a4bc <iso_kprintf>
c0006861:	58                   	pop    eax
c0006862:	ff b3 d0 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9a30]
c0006868:	e8 6b 3c 01 00       	call   c001a4d8 <iso_kprintfd>
c000686d:	83 c4 10             	add    esp,0x10
c0006870:	eb 42                	jmp    c00068b4 <iso_readdir+0xe2>
c0006872:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006875:	8b 34 85 80 60 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9f80]
c000687c:	89 d1                	mov    ecx,edx
c000687e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006884:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006888:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000688b:	75 35                	jne    c00068c2 <iso_readdir+0xf0>
c000688d:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006893:	81 c2 00 08 00 00    	add    edx,0x800
c0006899:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c000689c:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000689f:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00068a2:	73 1e                	jae    c00068c2 <iso_readdir+0xf0>
c00068a4:	c1 ea 0b             	shr    edx,0xb
c00068a7:	8b 07                	mov    eax,DWORD PTR [edi]
c00068a9:	01 d0                	add    eax,edx
c00068ab:	e8 50 f9 ff ff       	call   c0006200 <biread>
c00068b0:	85 c0                	test   eax,eax
c00068b2:	79 be                	jns    c0006872 <iso_readdir+0xa0>
c00068b4:	31 c0                	xor    eax,eax
c00068b6:	e9 66 01 00 00       	jmp    c0006a21 <iso_readdir+0x24f>
c00068bb:	31 f6                	xor    esi,esi
c00068bd:	83 c8 ff             	or     eax,0xffffffff
c00068c0:	eb da                	jmp    c000689c <iso_readdir+0xca>
c00068c2:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00068c8:	8b ba 48 65 02 c0    	mov    edi,DWORD PTR [edx-0x3ffd9ab8]
c00068ce:	81 c2 40 65 02 c0    	add    edx,0xc0026540
c00068d4:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00068d7:	73 db                	jae    c00068b4 <iso_readdir+0xe2>
c00068d9:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00068dd:	75 34                	jne    c0006913 <iso_readdir+0x141>
c00068df:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c00068e3:	75 2e                	jne    c0006913 <iso_readdir+0x141>
c00068e5:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c00068e8:	8b 34 85 80 60 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9f80]
c00068ef:	01 f9                	add    ecx,edi
c00068f1:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00068f4:	89 c8                	mov    eax,ecx
c00068f6:	25 ff 07 00 00       	and    eax,0x7ff
c00068fb:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006900:	01 c8                	add    eax,ecx
c0006902:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006905:	25 ff 07 00 00       	and    eax,0x7ff
c000690a:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c000690e:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006911:	74 a1                	je     c00068b4 <iso_readdir+0xe2>
c0006913:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006919:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c000691d:	8d 56 21             	lea    edx,[esi+0x21]
c0006920:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006924:	8d a8 58 65 02 c0    	lea    ebp,[eax-0x3ffd9aa8]
c000692a:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006931:	74 0c                	je     c000693f <iso_readdir+0x16d>
c0006933:	89 e8                	mov    eax,ebp
c0006935:	e8 14 f6 ff ff       	call   c0005f4e <ucs2utfn>
c000693a:	e9 a6 00 00 00       	jmp    c00069e5 <iso_readdir+0x213>
c000693f:	57                   	push   edi
c0006940:	51                   	push   ecx
c0006941:	52                   	push   edx
c0006942:	55                   	push   ebp
c0006943:	e8 38 9d ff ff       	call   c0000680 <strncpy>
c0006948:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c000694c:	69 cb 94 00 00 00    	imul   ecx,ebx,0x94
c0006952:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006955:	c6 84 01 58 65 02 c0 00 	mov    BYTE PTR [ecx+eax*1-0x3ffd9aa8],0x0
c000695d:	e8 49 fe ff ff       	call   c00067ab <fn_postprocess>
c0006962:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006966:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006969:	83 c4 10             	add    esp,0x10
c000696c:	29 d0                	sub    eax,edx
c000696e:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006972:	f6 46 20 01          	test   BYTE PTR [esi+0x20],0x1
c0006976:	74 05                	je     c000697d <iso_readdir+0x1ab>
c0006978:	83 e8 21             	sub    eax,0x21
c000697b:	eb 04                	jmp    c0006981 <iso_readdir+0x1af>
c000697d:	47                   	inc    edi
c000697e:	83 e8 22             	sub    eax,0x22
c0006981:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006985:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000698b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000698f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006994:	7e 4f                	jle    c00069e5 <iso_readdir+0x213>
c0006996:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006999:	48                   	dec    eax
c000699a:	3c 01                	cmp    al,0x1
c000699c:	77 47                	ja     c00069e5 <iso_readdir+0x213>
c000699e:	52                   	push   edx
c000699f:	6a 02                	push   0x2
c00069a1:	68 3d 0b 02 c0       	push   0xc0020b3d
c00069a6:	57                   	push   edi
c00069a7:	e8 34 9e ff ff       	call   c00007e0 <strncmp>
c00069ac:	83 c4 10             	add    esp,0x10
c00069af:	85 c0                	test   eax,eax
c00069b1:	75 26                	jne    c00069d9 <iso_readdir+0x207>
c00069b3:	50                   	push   eax
c00069b4:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069b8:	83 e8 05             	sub    eax,0x5
c00069bb:	50                   	push   eax
c00069bc:	8d 47 05             	lea    eax,[edi+0x5]
c00069bf:	50                   	push   eax
c00069c0:	55                   	push   ebp
c00069c1:	e8 ba 9c ff ff       	call   c0000680 <strncpy>
c00069c6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00069ca:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069ce:	83 c4 10             	add    esp,0x10
c00069d1:	c6 84 08 53 65 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffd9aad],0x0
c00069d9:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069dd:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c00069e1:	01 c7                	add    edi,eax
c00069e3:	eb aa                	jmp    c000698f <iso_readdir+0x1bd>
c00069e5:	83 c8 ff             	or     eax,0xffffffff
c00069e8:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c00069ec:	89 c2                	mov    edx,eax
c00069ee:	75 0a                	jne    c00069fa <iso_readdir+0x228>
c00069f0:	8d 46 0a             	lea    eax,[esi+0xa]
c00069f3:	e8 06 f6 ff ff       	call   c0005ffe <iso_733>
c00069f8:	31 d2                	xor    edx,edx
c00069fa:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a00:	89 83 50 65 02 c0    	mov    DWORD PTR [ebx-0x3ffd9ab0],eax
c0006a06:	89 93 54 65 02 c0    	mov    DWORD PTR [ebx-0x3ffd9aac],edx
c0006a0c:	81 c3 40 65 02 c0    	add    ebx,0xc0026540
c0006a12:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006a15:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006a18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006a1c:	05 50 65 02 c0       	add    eax,0xc0026550
c0006a21:	83 c4 1c             	add    esp,0x1c
c0006a24:	5b                   	pop    ebx
c0006a25:	5e                   	pop    esi
c0006a26:	5f                   	pop    edi
c0006a27:	5d                   	pop    ebp
c0006a28:	c3                   	ret    

c0006a29 <iso_reset>:
c0006a29:	83 ec 18             	sub    esp,0x18
c0006a2c:	68 5a 0b 02 c0       	push   0xc0020b5a
c0006a31:	e8 86 3a 01 00       	call   c001a4bc <iso_kprintf>
c0006a36:	e8 10 f7 ff ff       	call   c000614b <iso_break_all>
c0006a3b:	e8 09 f7 ff ff       	call   c0006149 <bclear>
c0006a40:	31 c0                	xor    eax,eax
c0006a42:	83 c4 1c             	add    esp,0x1c
c0006a45:	c3                   	ret    

c0006a46 <init_percd>:
c0006a46:	57                   	push   edi
c0006a47:	56                   	push   esi
c0006a48:	53                   	push   ebx
c0006a49:	bb 01 00 00 00       	mov    ebx,0x1
c0006a4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a52:	a2 60 60 02 c0       	mov    ds:0xc0026060,al
c0006a57:	e8 cd ff ff ff       	call   c0006a29 <iso_reset>
c0006a5c:	c7 05 b4 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026eb4,0x0
c0006a66:	a1 ac 6e 02 c0       	mov    eax,ds:0xc0026eac
c0006a6b:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006a6f:	e8 8c f7 ff ff       	call   c0006200 <biread>
c0006a74:	89 c6                	mov    esi,eax
c0006a76:	85 c0                	test   eax,eax
c0006a78:	0f 88 ba 00 00 00    	js     c0006b38 <init_percd+0xf2>
c0006a7e:	8b 04 85 80 60 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9f80]
c0006a85:	83 c0 04             	add    eax,0x4
c0006a88:	52                   	push   edx
c0006a89:	6a 06                	push   0x6
c0006a8b:	68 65 0b 02 c0       	push   0xc0020b65
c0006a90:	50                   	push   eax
c0006a91:	e8 ea 98 ff ff       	call   c0000380 <memcmp>
c0006a96:	83 c4 10             	add    esp,0x10
c0006a99:	85 c0                	test   eax,eax
c0006a9b:	74 08                	je     c0006aa5 <init_percd+0x5f>
c0006a9d:	43                   	inc    ebx
c0006a9e:	83 fb 04             	cmp    ebx,0x4
c0006aa1:	75 c3                	jne    c0006a66 <init_percd+0x20>
c0006aa3:	eb 1a                	jmp    c0006abf <init_percd+0x79>
c0006aa5:	8b 04 b5 80 60 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd9f80]
c0006aac:	83 c0 5c             	add    eax,0x5c
c0006aaf:	e8 17 f5 ff ff       	call   c0005fcb <isjoliet>
c0006ab4:	a3 b4 6e 02 c0       	mov    ds:0xc0026eb4,eax
c0006ab9:	85 c0                	test   eax,eax
c0006abb:	74 e0                	je     c0006a9d <init_percd+0x57>
c0006abd:	eb 3e                	jmp    c0006afd <init_percd+0xb7>
c0006abf:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006ac6:	75 35                	jne    c0006afd <init_percd+0xb7>
c0006ac8:	a1 ac 6e 02 c0       	mov    eax,ds:0xc0026eac
c0006acd:	83 c0 10             	add    eax,0x10
c0006ad0:	e8 2b f7 ff ff       	call   c0006200 <biread>
c0006ad5:	89 c6                	mov    esi,eax
c0006ad7:	85 c0                	test   eax,eax
c0006ad9:	78 5f                	js     c0006b3a <init_percd+0xf4>
c0006adb:	83 cb ff             	or     ebx,0xffffffff
c0006ade:	50                   	push   eax
c0006adf:	8b 04 b5 80 60 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd9f80]
c0006ae6:	6a 06                	push   0x6
c0006ae8:	83 c0 04             	add    eax,0x4
c0006aeb:	68 6c 0b 02 c0       	push   0xc0020b6c
c0006af0:	50                   	push   eax
c0006af1:	e8 8a 98 ff ff       	call   c0000380 <memcmp>
c0006af6:	83 c4 10             	add    esp,0x10
c0006af9:	85 c0                	test   eax,eax
c0006afb:	75 3d                	jne    c0006b3a <init_percd+0xf4>
c0006afd:	8b 34 b5 80 60 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffd9f80]
c0006b04:	bf 80 6e 02 c0       	mov    edi,0xc0026e80
c0006b09:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006b0f:	b9 22 00 00 00       	mov    ecx,0x22
c0006b14:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006b16:	b8 82 6e 02 c0       	mov    eax,0xc0026e82
c0006b1b:	31 db                	xor    ebx,ebx
c0006b1d:	e8 dc f4 ff ff       	call   c0005ffe <iso_733>
c0006b22:	a3 a8 6e 02 c0       	mov    ds:0xc0026ea8,eax
c0006b27:	b8 8a 6e 02 c0       	mov    eax,0xc0026e8a
c0006b2c:	e8 cd f4 ff ff       	call   c0005ffe <iso_733>
c0006b31:	a3 a4 6e 02 c0       	mov    ds:0xc0026ea4,eax
c0006b36:	eb 02                	jmp    c0006b3a <init_percd+0xf4>
c0006b38:	89 c3                	mov    ebx,eax
c0006b3a:	89 d8                	mov    eax,ebx
c0006b3c:	5b                   	pop    ebx
c0006b3d:	5e                   	pop    esi
c0006b3e:	5f                   	pop    edi
c0006b3f:	c3                   	ret    

c0006b40 <iso_ioctl>:
c0006b40:	83 ec 18             	sub    esp,0x18
c0006b43:	68 73 0b 02 c0       	push   0xc0020b73
c0006b48:	e8 6f 39 01 00       	call   c001a4bc <iso_kprintf>
c0006b4d:	e8 d7 fe ff ff       	call   c0006a29 <iso_reset>
c0006b52:	31 c0                	xor    eax,eax
c0006b54:	83 c4 1c             	add    esp,0x1c
c0006b57:	c3                   	ret    

c0006b58 <fs_iso9660_init>:
c0006b58:	53                   	push   ebx
c0006b59:	31 db                	xor    ebx,ebx
c0006b5b:	83 ec 14             	sub    esp,0x14
c0006b5e:	68 7e 0b 02 c0       	push   0xc0020b7e
c0006b63:	e8 54 39 01 00       	call   c001a4bc <iso_kprintf>
c0006b68:	83 c4 0c             	add    esp,0xc
c0006b6b:	68 40 09 00 00       	push   0x940
c0006b70:	6a 00                	push   0x0
c0006b72:	68 40 65 02 c0       	push   0xc0026540
c0006b77:	e8 74 99 ff ff       	call   c00004f0 <memset>
c0006b7c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b83:	c7 05 40 65 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0026540,0xffffffff
c0006b8d:	e8 24 0f 00 00       	call   c0007ab6 <malloc>
c0006b92:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b99:	a3 b0 6e 02 c0       	mov    ds:0xc0026eb0,eax
c0006b9e:	e8 13 0f 00 00       	call   c0007ab6 <malloc>
c0006ba3:	83 c4 10             	add    esp,0x10
c0006ba6:	a3 20 65 02 c0       	mov    ds:0xc0026520,eax
c0006bab:	83 ec 0c             	sub    esp,0xc
c0006bae:	68 04 08 00 00       	push   0x804
c0006bb3:	e8 fe 0e 00 00       	call   c0007ab6 <malloc>
c0006bb8:	89 04 9d 80 60 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9f80],eax
c0006bbf:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006bc5:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006bcc:	e8 e5 0e 00 00       	call   c0007ab6 <malloc>
c0006bd1:	83 c4 10             	add    esp,0x10
c0006bd4:	89 04 9d 20 60 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9fe0],eax
c0006bdb:	43                   	inc    ebx
c0006bdc:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006be2:	83 fb 10             	cmp    ebx,0x10
c0006be5:	75 c4                	jne    c0006bab <fs_iso9660_init+0x53>
c0006be7:	31 c0                	xor    eax,eax
c0006be9:	83 c4 08             	add    esp,0x8
c0006bec:	5b                   	pop    ebx
c0006bed:	c3                   	ret    

c0006bee <fs_iso9660_shutdown>:
c0006bee:	53                   	push   ebx
c0006bef:	31 db                	xor    ebx,ebx
c0006bf1:	83 ec 08             	sub    esp,0x8
c0006bf4:	83 ec 0c             	sub    esp,0xc
c0006bf7:	ff 34 9d 80 60 02 c0 	push   DWORD PTR [ebx*4-0x3ffd9f80]
c0006bfe:	e8 c3 0e 00 00       	call   c0007ac6 <free>
c0006c03:	58                   	pop    eax
c0006c04:	ff 34 9d 20 60 02 c0 	push   DWORD PTR [ebx*4-0x3ffd9fe0]
c0006c0b:	43                   	inc    ebx
c0006c0c:	e8 b5 0e 00 00       	call   c0007ac6 <free>
c0006c11:	83 c4 10             	add    esp,0x10
c0006c14:	83 fb 10             	cmp    ebx,0x10
c0006c17:	75 db                	jne    c0006bf4 <fs_iso9660_shutdown+0x6>
c0006c19:	a1 b0 6e 02 c0       	mov    eax,ds:0xc0026eb0
c0006c1e:	85 c0                	test   eax,eax
c0006c20:	74 0c                	je     c0006c2e <fs_iso9660_shutdown+0x40>
c0006c22:	83 ec 0c             	sub    esp,0xc
c0006c25:	50                   	push   eax
c0006c26:	e8 9b 0e 00 00       	call   c0007ac6 <free>
c0006c2b:	83 c4 10             	add    esp,0x10
c0006c2e:	a1 20 65 02 c0       	mov    eax,ds:0xc0026520
c0006c33:	85 c0                	test   eax,eax
c0006c35:	74 0c                	je     c0006c43 <fs_iso9660_shutdown+0x55>
c0006c37:	83 ec 0c             	sub    esp,0xc
c0006c3a:	50                   	push   eax
c0006c3b:	e8 86 0e 00 00       	call   c0007ac6 <free>
c0006c40:	83 c4 10             	add    esp,0x10
c0006c43:	c7 05 20 65 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026520,0x0
c0006c4d:	c7 05 b0 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026eb0,0x0
c0006c57:	31 c0                	xor    eax,eax
c0006c59:	83 c4 08             	add    esp,0x8
c0006c5c:	5b                   	pop    ebx
c0006c5d:	c3                   	ret    

c0006c5e <Computer::close(int, int, void*)>:
c0006c5e:	57                   	push   edi
c0006c5f:	56                   	push   esi
c0006c60:	53                   	push   ebx
c0006c61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006c65:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006c69:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006c6d:	e8 5e a2 00 00       	call   c0010ed0 <KeExecuteAtexit()>
c0006c72:	83 ec 0c             	sub    esp,0xc
c0006c75:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c7b:	50                   	push   eax
c0006c7c:	e8 f3 5e 00 00       	call   c000cb74 <Device::closeAll()>
c0006c81:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c87:	83 c4 10             	add    esp,0x10
c0006c8a:	8b 10                	mov    edx,DWORD PTR [eax]
c0006c8c:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0006c90:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0006c98:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006c9c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006ca0:	5b                   	pop    ebx
c0006ca1:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006ca4:	5e                   	pop    esi
c0006ca5:	5f                   	pop    edi
c0006ca6:	ff e0                	jmp    eax

c0006ca8 <Krnl::firstTask()>:
c0006ca8:	53                   	push   ebx
c0006ca9:	83 ec 14             	sub    esp,0x14
c0006cac:	fb                   	sti    
c0006cad:	68 8f 0b 02 c0       	push   0xc0020b8f
c0006cb2:	e8 f8 a2 00 00       	call   c0010faf <KeSetBootMessage(char const*)>
c0006cb7:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006cbe:	e8 f3 0d 00 00       	call   c0007ab6 <malloc>
c0006cc3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006cca:	89 c3                	mov    ebx,eax
c0006ccc:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0006cd1:	50                   	push   eax
c0006cd2:	68 a8 0b 02 c0       	push   0xc0020ba8
c0006cd7:	6a 01                	push   0x1
c0006cd9:	53                   	push   ebx
c0006cda:	e8 fd ef 00 00       	call   c0015cdc <Process::Process(bool, char const*, Process*, char**)>
c0006cdf:	83 c4 20             	add    esp,0x20
c0006ce2:	68 ff 00 00 00       	push   0xff
c0006ce7:	6a 00                	push   0x0
c0006ce9:	68 fd 74 00 c0       	push   0xc00074fd
c0006cee:	53                   	push   ebx
c0006cef:	e8 0c f2 00 00       	call   c0015f00 <Process::createThread(void (*)(void*), void*, int)>
c0006cf4:	8b 15 f0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6f0
c0006cfa:	6a 7a                	push   0x7a
c0006cfc:	6a 00                	push   0x0
c0006cfe:	68 e8 69 01 c0       	push   0xc00169e8
c0006d03:	52                   	push   edx
c0006d04:	e8 f7 f1 00 00       	call   c0015f00 <Process::createThread(void (*)(void*), void*, int)>
c0006d09:	83 c4 14             	add    esp,0x14
c0006d0c:	a3 a8 c6 02 c0       	mov    ds:0xc002c6a8,eax
c0006d11:	68 a4 0c 02 c0       	push   0xc0020ca4
c0006d16:	e8 94 a2 00 00       	call   c0010faf <KeSetBootMessage(char const*)>
c0006d1b:	c6 05 bd 6e 02 c0 01 	mov    BYTE PTR ds:0xc0026ebd,0x1
c0006d22:	e8 41 ab 00 00       	call   c0011868 <KeInitRand()>
c0006d27:	e8 df 00 01 00       	call   c0016e0b <Vm::initialise8086()>
c0006d2c:	e8 89 4b 00 00       	call   c000b8ba <Fs::initVFS()>
c0006d31:	c7 04 24 b5 0b 02 c0 	mov    DWORD PTR [esp],0xc0020bb5
c0006d38:	e8 72 a2 00 00       	call   c0010faf <KeSetBootMessage(char const*)>
c0006d3d:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0006d42:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006d48:	8b 10                	mov    edx,DWORD PTR [eax]
c0006d4a:	6a 00                	push   0x0
c0006d4c:	6a 00                	push   0x0
c0006d4e:	6a 00                	push   0x0
c0006d50:	50                   	push   eax
c0006d51:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006d54:	83 c4 14             	add    esp,0x14
c0006d57:	68 a4 0c 02 c0       	push   0xc0020ca4
c0006d5c:	e8 4e a2 00 00       	call   c0010faf <KeSetBootMessage(char const*)>
c0006d61:	e8 15 47 00 00       	call   c000b47b <KeInitialiseSymlinks()>
c0006d66:	e8 a7 a7 00 00       	call   c0011512 <KeLoadSystemEnv()>
c0006d6b:	e8 04 aa 00 00       	call   c0011774 <KeSetupPowerManager()>
c0006d70:	83 c4 0c             	add    esp,0xc
c0006d73:	6a 3a                	push   0x3a
c0006d75:	68 cf 0b 02 c0       	push   0xc0020bcf
c0006d7a:	68 d8 0b 02 c0       	push   0xc0020bd8
c0006d7f:	e8 74 d1 00 00       	call   c0013ef8 <Reg::readIntWithDefault(char*, char*, int)>
c0006d84:	89 04 24             	mov    DWORD PTR [esp],eax
c0006d87:	e8 48 57 00 00       	call   c000c4d4 <User::loadClockSettings(int)>
c0006d8c:	c7 04 24 c8 0c 02 c0 	mov    DWORD PTR [esp],0xc0020cc8
c0006d93:	e8 17 a2 00 00       	call   c0010faf <KeSetBootMessage(char const*)>
c0006d98:	59                   	pop    ecx
c0006d99:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0006d9e:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006da4:	53                   	push   ebx
c0006da5:	e8 c8 5d 00 00       	call   c000cb72 <Device::loadDriversForAll()>
c0006daa:	c7 04 24 e0 0b 02 c0 	mov    DWORD PTR [esp],0xc0020be0
c0006db1:	e8 f9 a1 00 00       	call   c0010faf <KeSetBootMessage(char const*)>
c0006db6:	58                   	pop    eax
c0006db7:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c0006dbd:	5a                   	pop    edx
c0006dbe:	6a 01                	push   0x1
c0006dc0:	68 f1 0b 02 c0       	push   0xc0020bf1
c0006dc5:	e8 25 e9 00 00       	call   c00156ef <Thr::loadDLL(char const*, bool)>
c0006dca:	59                   	pop    ecx
c0006dcb:	5a                   	pop    edx
c0006dcc:	53                   	push   ebx
c0006dcd:	50                   	push   eax
c0006dce:	e8 4d eb 00 00       	call   c0015920 <Thr::executeDLL(unsigned long, void*)>
c0006dd3:	83 c4 10             	add    esp,0x10
c0006dd6:	83 ec 0c             	sub    esp,0xc
c0006dd9:	6a 02                	push   0x2
c0006ddb:	e8 84 f5 00 00       	call   c0016364 <blockTask(TaskState)>
c0006de0:	83 c4 10             	add    esp,0x10
c0006de3:	eb f1                	jmp    c0006dd6 <Krnl::firstTask()+0x12e>
c0006de5:	90                   	nop

c0006de6 <Computer::Computer()>:
c0006de6:	83 ec 0c             	sub    esp,0xc
c0006de9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ded:	83 ec 08             	sub    esp,0x8
c0006df0:	68 0d 0c 02 c0       	push   0xc0020c0d
c0006df5:	50                   	push   eax
c0006df6:	e8 f3 5d 00 00       	call   c000cbee <Device::Device(char const*)>
c0006dfb:	83 c4 10             	add    esp,0x10
c0006dfe:	ba 14 0d 02 c0       	mov    edx,0xc0020d14
c0006e03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e07:	89 10                	mov    DWORD PTR [eax],edx
c0006e09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e0d:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006e17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e1b:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006e25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e29:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006e2f:	83 ca 04             	or     edx,0x4
c0006e32:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006e38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e3c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e42:	0f b6 d0             	movzx  edx,al
c0006e45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e49:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006e50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e54:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e5a:	0f b6 d0             	movzx  edx,al
c0006e5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e61:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006e66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e6a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e70:	8d 50 01             	lea    edx,[eax+0x1]
c0006e73:	88 d1                	mov    cl,dl
c0006e75:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006e79:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0006e7f:	0f b6 d0             	movzx  edx,al
c0006e82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e86:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006e8a:	83 e1 3f             	and    ecx,0x3f
c0006e8d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006e91:	90                   	nop
c0006e92:	83 c4 0c             	add    esp,0xc
c0006e95:	c3                   	ret    

c0006e96 <Computer::setBootMessage(char const*)>:
c0006e96:	c3                   	ret    
c0006e97:	90                   	nop

c0006e98 <Computer::detectFeatures()>:
c0006e98:	55                   	push   ebp
c0006e99:	57                   	push   edi
c0006e9a:	56                   	push   esi
c0006e9b:	53                   	push   ebx
c0006e9c:	83 ec 1c             	sub    esp,0x1c
c0006e9f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006ea3:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0006ea9:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c0006eaf:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0006eb5:	e8 3f 93 ff ff       	call   c00001f9 <detectCPUID>
c0006eba:	31 d2                	xor    edx,edx
c0006ebc:	85 c0                	test   eax,eax
c0006ebe:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ec4:	0f 95 c2             	setne  dl
c0006ec7:	83 e0 fd             	and    eax,0xfffffffd
c0006eca:	d1 e2                	shl    edx,1
c0006ecc:	09 d0                	or     eax,edx
c0006ece:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ed4:	a8 02                	test   al,0x2
c0006ed6:	75 51                	jne    c0006f29 <Computer::detectFeatures()+0x91>
c0006ed8:	f6 05 d1 6e 02 c0 04 	test   BYTE PTR ds:0xc0026ed1,0x4
c0006edf:	74 0f                	je     c0006ef0 <Computer::detectFeatures()+0x58>
c0006ee1:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ee7:	83 e0 fb             	and    eax,0xfffffffb
c0006eea:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ef0:	e8 91 85 01 00       	call   c001f486 <x87Detect>
c0006ef5:	83 e0 01             	and    eax,0x1
c0006ef8:	c1 e0 04             	shl    eax,0x4
c0006efb:	89 c2                	mov    edx,eax
c0006efd:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f03:	83 e0 ef             	and    eax,0xffffffef
c0006f06:	09 d0                	or     eax,edx
c0006f08:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f0e:	88 c2                	mov    dl,al
c0006f10:	a8 10                	test   al,0x10
c0006f12:	0f 85 33 01 00 00    	jne    c000704b <Computer::detectFeatures()+0x1b3>
c0006f18:	80 e2 80             	and    dl,0x80
c0006f1b:	0f 85 4c 01 00 00    	jne    c000706d <Computer::detectFeatures()+0x1d5>
c0006f21:	83 c4 1c             	add    esp,0x1c
c0006f24:	5b                   	pop    ebx
c0006f25:	5e                   	pop    esi
c0006f26:	5f                   	pop    edi
c0006f27:	5d                   	pop    ebp
c0006f28:	c3                   	ret    
c0006f29:	83 ec 0c             	sub    esp,0xc
c0006f2c:	6a 20                	push   0x20
c0006f2e:	e8 b5 94 00 00       	call   c00103e8 <CPU::cpuidCheckEDX(unsigned int)>
c0006f33:	83 e0 01             	and    eax,0x1
c0006f36:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006f3d:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f43:	83 e0 f7             	and    eax,0xfffffff7
c0006f46:	09 d0                	or     eax,edx
c0006f48:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f4e:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006f55:	e8 8e 94 00 00       	call   c00103e8 <CPU::cpuidCheckEDX(unsigned int)>
c0006f5a:	89 c2                	mov    edx,eax
c0006f5c:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f62:	83 e2 01             	and    edx,0x1
c0006f65:	83 e0 fe             	and    eax,0xfffffffe
c0006f68:	09 d0                	or     eax,edx
c0006f6a:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f70:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006f77:	e8 6c 94 00 00       	call   c00103e8 <CPU::cpuidCheckEDX(unsigned int)>
c0006f7c:	89 c2                	mov    edx,eax
c0006f7e:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f84:	c1 e2 07             	shl    edx,0x7
c0006f87:	83 e0 7f             	and    eax,0x7f
c0006f8a:	09 d0                	or     eax,edx
c0006f8c:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f92:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006f99:	e8 4a 94 00 00       	call   c00103e8 <CPU::cpuidCheckEDX(unsigned int)>
c0006f9e:	83 c4 10             	add    esp,0x10
c0006fa1:	83 e0 01             	and    eax,0x1
c0006fa4:	c1 e0 05             	shl    eax,0x5
c0006fa7:	89 c2                	mov    edx,eax
c0006fa9:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006faf:	83 e0 df             	and    eax,0xffffffdf
c0006fb2:	09 d0                	or     eax,edx
c0006fb4:	f7 05 d0 6e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0026ed0,0x401
c0006fbe:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fc4:	0f 84 c9 00 00 00    	je     c0007093 <Computer::detectFeatures()+0x1fb>
c0006fca:	83 e0 fe             	and    eax,0xfffffffe
c0006fcd:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fd3:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006fd9:	89 c2                	mov    edx,eax
c0006fdb:	83 e2 09             	and    edx,0x9
c0006fde:	83 fa 01             	cmp    edx,0x1
c0006fe1:	75 09                	jne    c0006fec <Computer::detectFeatures()+0x154>
c0006fe3:	83 e0 fe             	and    eax,0xfffffffe
c0006fe6:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fec:	83 ec 0c             	sub    esp,0xc
c0006fef:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006ff3:	50                   	push   eax
c0006ff4:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0006ff8:	55                   	push   ebp
c0006ff9:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0006ffd:	57                   	push   edi
c0006ffe:	8d 74 24 18          	lea    esi,[esp+0x18]
c0007002:	56                   	push   esi
c0007003:	68 00 00 00 80       	push   0x80000000
c0007008:	e8 57 93 00 00       	call   c0010364 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000700d:	83 c4 20             	add    esp,0x20
c0007010:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0007017:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000701b:	0f 86 b7 fe ff ff    	jbe    c0006ed8 <Computer::detectFeatures()+0x40>
c0007021:	83 ec 0c             	sub    esp,0xc
c0007024:	50                   	push   eax
c0007025:	55                   	push   ebp
c0007026:	57                   	push   edi
c0007027:	56                   	push   esi
c0007028:	68 01 00 00 80       	push   0x80000001
c000702d:	e8 32 93 00 00       	call   c0010364 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007032:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0007038:	83 c4 20             	add    esp,0x20
c000703b:	25 bf ff fc ff       	and    eax,0xfffcffbf
c0007040:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0007046:	e9 8d fe ff ff       	jmp    c0006ed8 <Computer::detectFeatures()+0x40>
c000704b:	e8 f0 83 01 00       	call   c001f440 <absolutelyNoChanceInHell>
c0007050:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c0007056:	c1 e0 07             	shl    eax,0x7
c0007059:	83 e2 7f             	and    edx,0x7f
c000705c:	09 c2                	or     edx,eax
c000705e:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c0007064:	80 e2 80             	and    dl,0x80
c0007067:	0f 84 b4 fe ff ff    	je     c0006f21 <Computer::detectFeatures()+0x89>
c000706d:	e8 3e 80 01 00       	call   c001f0b0 <avxDetect>
c0007072:	83 e0 01             	and    eax,0x1
c0007075:	c1 e0 05             	shl    eax,0x5
c0007078:	89 c2                	mov    edx,eax
c000707a:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0007080:	83 e0 df             	and    eax,0xffffffdf
c0007083:	09 d0                	or     eax,edx
c0007085:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c000708b:	83 c4 1c             	add    esp,0x1c
c000708e:	5b                   	pop    ebx
c000708f:	5e                   	pop    esi
c0007090:	5f                   	pop    edi
c0007091:	5d                   	pop    ebp
c0007092:	c3                   	ret    
c0007093:	83 ec 0c             	sub    esp,0xc
c0007096:	68 00 02 00 00       	push   0x200
c000709b:	e8 48 93 00 00       	call   c00103e8 <CPU::cpuidCheckEDX(unsigned int)>
c00070a0:	83 c4 10             	add    esp,0x10
c00070a3:	89 c2                	mov    edx,eax
c00070a5:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00070ab:	83 e2 01             	and    edx,0x1
c00070ae:	83 e0 fe             	and    eax,0xfffffffe
c00070b1:	09 d0                	or     eax,edx
c00070b3:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00070b9:	e9 15 ff ff ff       	jmp    c0006fd3 <Computer::detectFeatures()+0x13b>

c00070be <Computer::displayFeatures()>:
c00070be:	c3                   	ret    
c00070bf:	90                   	nop

c00070c0 <Computer::rdmsr(unsigned int)>:
c00070c0:	83 ec 0c             	sub    esp,0xc
c00070c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070c7:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00070ce:	74 0a                	je     c00070da <Computer::rdmsr(unsigned int)+0x1a>
c00070d0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00070d4:	0f 32                	rdmsr  
c00070d6:	83 c4 0c             	add    esp,0xc
c00070d9:	c3                   	ret    
c00070da:	83 ec 0c             	sub    esp,0xc
c00070dd:	68 16 0c 02 c0       	push   0xc0020c16
c00070e2:	e8 c8 a5 00 00       	call   c00116af <KePanic(char const*)>
c00070e7:	83 c4 10             	add    esp,0x10
c00070ea:	eb e4                	jmp    c00070d0 <Computer::rdmsr(unsigned int)+0x10>

c00070ec <Computer::wrmsr(unsigned int, unsigned long long)>:
c00070ec:	57                   	push   edi
c00070ed:	56                   	push   esi
c00070ee:	83 ec 04             	sub    esp,0x4
c00070f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070f5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00070f9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00070fd:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0007104:	74 10                	je     c0007116 <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c0007106:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000710a:	89 f0                	mov    eax,esi
c000710c:	89 fa                	mov    edx,edi
c000710e:	0f 30                	wrmsr  
c0007110:	83 c4 04             	add    esp,0x4
c0007113:	5e                   	pop    esi
c0007114:	5f                   	pop    edi
c0007115:	c3                   	ret    
c0007116:	83 ec 0c             	sub    esp,0xc
c0007119:	68 1c 0c 02 c0       	push   0xc0020c1c
c000711e:	e8 8c a5 00 00       	call   c00116af <KePanic(char const*)>
c0007123:	83 c4 10             	add    esp,0x10
c0007126:	eb de                	jmp    c0007106 <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c0007128 <Computer::shutdown()>:
c0007128:	83 ec 0c             	sub    esp,0xc
c000712b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000712f:	8b 10                	mov    edx,DWORD PTR [eax]
c0007131:	6a 00                	push   0x0
c0007133:	6a 00                	push   0x0
c0007135:	6a 00                	push   0x0
c0007137:	50                   	push   eax
c0007138:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000713b:	83 c4 1c             	add    esp,0x1c
c000713e:	c3                   	ret    
c000713f:	90                   	nop

c0007140 <Computer::restart()>:
c0007140:	83 ec 0c             	sub    esp,0xc
c0007143:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007147:	8b 10                	mov    edx,DWORD PTR [eax]
c0007149:	6a 00                	push   0x0
c000714b:	6a 00                	push   0x0
c000714d:	6a 01                	push   0x1
c000714f:	50                   	push   eax
c0007150:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007153:	83 c4 1c             	add    esp,0x1c
c0007156:	c3                   	ret    
c0007157:	90                   	nop

c0007158 <Computer::sleep()>:
c0007158:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000715c:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0007162:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007166:	e9 95 8c 00 00       	jmp    c000fe00 <ACPI::sleep()>
c000716b:	90                   	nop

c000716c <Computer::nmiEnabled()>:
c000716c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007170:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0007176:	c3                   	ret    
c0007177:	90                   	nop

c0007178 <Computer::readCMOS(unsigned char)>:
c0007178:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000717c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007180:	80 ba 58 01 00 00 00 	cmp    BYTE PTR [edx+0x158],0x0
c0007187:	75 09                	jne    c0007192 <Computer::readCMOS(unsigned char)+0x1a>
c0007189:	b2 80                	mov    dl,0x80
c000718b:	09 d0                	or     eax,edx
c000718d:	e6 70                	out    0x70,al
c000718f:	e4 71                	in     al,0x71
c0007191:	c3                   	ret    
c0007192:	31 d2                	xor    edx,edx
c0007194:	eb f5                	jmp    c000718b <Computer::readCMOS(unsigned char)+0x13>

c0007196 <Computer::enableNMI(bool)>:
c0007196:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000719a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000719e:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c00071a4:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c00071ac:	eb ca                	jmp    c0007178 <Computer::readCMOS(unsigned char)>

c00071ae <Computer::open(int, int, void*)>:
c00071ae:	56                   	push   esi
c00071af:	53                   	push   ebx
c00071b0:	83 ec 10             	sub    esp,0x10
c00071b3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00071b7:	f6 05 d0 6e 02 c0 04 	test   BYTE PTR ds:0xc0026ed0,0x4
c00071be:	68 22 0c 02 c0       	push   0xc0020c22
c00071c3:	0f 94 05 c0 36 02 c0 	sete   BYTE PTR ds:0xc00236c0
c00071ca:	e8 e0 9d 00 00       	call   c0010faf <KeSetBootMessage(char const*)>
c00071cf:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00071d6:	e8 db 08 00 00       	call   c0007ab6 <malloc>
c00071db:	89 04 24             	mov    DWORD PTR [esp],eax
c00071de:	89 c6                	mov    esi,eax
c00071e0:	e8 8f 87 00 00       	call   c000f974 <ACPI::ACPI()>
c00071e5:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c00071eb:	58                   	pop    eax
c00071ec:	5a                   	pop    edx
c00071ed:	56                   	push   esi
c00071ee:	53                   	push   ebx
c00071ef:	e8 62 58 00 00       	call   c000ca56 <Device::addChild(Device*)>
c00071f4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00071f7:	e8 9c fc ff ff       	call   c0006e98 <Computer::detectFeatures()>
c00071fc:	59                   	pop    ecx
c00071fd:	5e                   	pop    esi
c00071fe:	6a 01                	push   0x1
c0007200:	53                   	push   ebx
c0007201:	e8 90 ff ff ff       	call   c0007196 <Computer::enableNMI(bool)>
c0007206:	c7 04 24 3a 0c 02 c0 	mov    DWORD PTR [esp],0xc0020c3a
c000720d:	e8 9d 9d 00 00       	call   c0010faf <KeSetBootMessage(char const*)>
c0007212:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0007219:	e8 98 08 00 00       	call   c0007ab6 <malloc>
c000721e:	89 04 24             	mov    DWORD PTR [esp],eax
c0007221:	89 c6                	mov    esi,eax
c0007223:	e8 78 92 00 00       	call   c00104a0 <CPU::CPU()>
c0007228:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000722e:	58                   	pop    eax
c000722f:	5a                   	pop    edx
c0007230:	56                   	push   esi
c0007231:	53                   	push   ebx
c0007232:	e8 1f 58 00 00       	call   c000ca56 <Device::addChild(Device*)>
c0007237:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000723d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007241:	8b 10                	mov    edx,DWORD PTR [eax]
c0007243:	51                   	push   ecx
c0007244:	6a 00                	push   0x0
c0007246:	6a 00                	push   0x0
c0007248:	50                   	push   eax
c0007249:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000724c:	83 c4 14             	add    esp,0x14
c000724f:	68 e8 0c 02 c0       	push   0xc0020ce8
c0007254:	e8 56 9d 00 00       	call   c0010faf <KeSetBootMessage(char const*)>
c0007259:	e8 ea 0d 01 00       	call   c0018048 <HalInitialiseCoprocessor()>
c000725e:	c7 04 24 54 0c 02 c0 	mov    DWORD PTR [esp],0xc0020c54
c0007265:	e8 45 9d 00 00       	call   c0010faf <KeSetBootMessage(char const*)>
c000726a:	c7 04 24 a8 6c 00 c0 	mov    DWORD PTR [esp],0xc0006ca8
c0007271:	e8 b6 ed 00 00       	call   c001602c <setupMultitasking(void (*)())>
c0007276:	83 c4 14             	add    esp,0x14
c0007279:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000727e:	5b                   	pop    ebx
c000727f:	5e                   	pop    esi
c0007280:	c3                   	ret    
c0007281:	90                   	nop

c0007282 <Computer::disableNMI()>:
c0007282:	6a 00                	push   0x0
c0007284:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007288:	50                   	push   eax
c0007289:	e8 08 ff ff ff       	call   c0007196 <Computer::enableNMI(bool)>
c000728e:	5a                   	pop    edx
c000728f:	59                   	pop    ecx
c0007290:	c3                   	ret    
c0007291:	90                   	nop

c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0007292:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007296:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000729a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000729e:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c00072a5:	75 0b                	jne    c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)+0x20>
c00072a7:	b1 80                	mov    cl,0x80
c00072a9:	09 c8                	or     eax,ecx
c00072ab:	e6 70                	out    0x70,al
c00072ad:	88 d0                	mov    al,dl
c00072af:	e6 71                	out    0x71,al
c00072b1:	c3                   	ret    
c00072b2:	31 c9                	xor    ecx,ecx
c00072b4:	eb f3                	jmp    c00072a9 <Computer::writeCMOS(unsigned char, unsigned char)+0x17>

c00072b6 <Computer::handleNMI()>:
c00072b6:	56                   	push   esi
c00072b7:	53                   	push   ebx
c00072b8:	83 ec 10             	sub    esp,0x10
c00072bb:	e4 92                	in     al,0x92
c00072bd:	89 c6                	mov    esi,eax
c00072bf:	e4 61                	in     al,0x61
c00072c1:	68 6f 0c 02 c0       	push   0xc0020c6f
c00072c6:	88 c3                	mov    bl,al
c00072c8:	e8 78 36 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00072cd:	83 c4 10             	add    esp,0x10
c00072d0:	83 e6 10             	and    esi,0x10
c00072d3:	75 10                	jne    c00072e5 <Computer::handleNMI()+0x2f>
c00072d5:	f6 c3 40             	test   bl,0x40
c00072d8:	75 20                	jne    c00072fa <Computer::handleNMI()+0x44>
c00072da:	80 e3 80             	and    bl,0x80
c00072dd:	75 30                	jne    c000730f <Computer::handleNMI()+0x59>
c00072df:	83 c4 04             	add    esp,0x4
c00072e2:	5b                   	pop    ebx
c00072e3:	5e                   	pop    esi
c00072e4:	c3                   	ret    
c00072e5:	83 ec 0c             	sub    esp,0xc
c00072e8:	68 80 0c 02 c0       	push   0xc0020c80
c00072ed:	e8 bd a3 00 00       	call   c00116af <KePanic(char const*)>
c00072f2:	83 c4 10             	add    esp,0x10
c00072f5:	f6 c3 40             	test   bl,0x40
c00072f8:	74 e0                	je     c00072da <Computer::handleNMI()+0x24>
c00072fa:	83 ec 0c             	sub    esp,0xc
c00072fd:	68 8d 0c 02 c0       	push   0xc0020c8d
c0007302:	e8 a8 a3 00 00       	call   c00116af <KePanic(char const*)>
c0007307:	83 c4 10             	add    esp,0x10
c000730a:	80 e3 80             	and    bl,0x80
c000730d:	74 d0                	je     c00072df <Computer::handleNMI()+0x29>
c000730f:	c7 44 24 10 97 0c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020c97
c0007317:	83 c4 04             	add    esp,0x4
c000731a:	5b                   	pop    ebx
c000731b:	5e                   	pop    esi
c000731c:	e9 8e a3 00 00       	jmp    c00116af <KePanic(char const*)>
c0007321:	90                   	nop

c0007322 <GDTEntry::setBase(unsigned int)>:
c0007322:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007326:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000732a:	89 c1                	mov    ecx,eax
c000732c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007330:	c1 e9 10             	shr    ecx,0x10
c0007333:	c1 e8 18             	shr    eax,0x18
c0007336:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007339:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000733c:	c3                   	ret    
c000733d:	90                   	nop

c000733e <GDTEntry::setLimit(unsigned int)>:
c000733e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007342:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007346:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007349:	66 89 01             	mov    WORD PTR [ecx],ax
c000734c:	83 e2 f0             	and    edx,0xfffffff0
c000734f:	c1 e8 10             	shr    eax,0x10
c0007352:	83 e0 0f             	and    eax,0xf
c0007355:	09 d0                	or     eax,edx
c0007357:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000735a:	c3                   	ret    
c000735b:	90                   	nop

c000735c <GDT::GDT()>:
c000735c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007360:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007366:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000736a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007370:	90                   	nop
c0007371:	c3                   	ret    

c0007372 <GDT::addEntry(GDTEntry)>:
c0007372:	53                   	push   ebx
c0007373:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007377:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000737b:	8b 02                	mov    eax,DWORD PTR [edx]
c000737d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007381:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0007385:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0007389:	8d 48 01             	lea    ecx,[eax+0x1]
c000738c:	c1 e0 03             	shl    eax,0x3
c000738f:	89 0a                	mov    DWORD PTR [edx],ecx
c0007391:	5b                   	pop    ebx
c0007392:	c3                   	ret    
c0007393:	90                   	nop

c0007394 <GDT::getNumberOfEntries()>:
c0007394:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007398:	8b 00                	mov    eax,DWORD PTR [eax]
c000739a:	c3                   	ret    
c000739b:	90                   	nop

c000739c <GDT::flush()>:
c000739c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073a0:	8b 10                	mov    edx,DWORD PTR [eax]
c00073a2:	83 c0 04             	add    eax,0x4
c00073a5:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00073ac:	a3 c2 6e 02 c0       	mov    ds:0xc0026ec2,eax
c00073b1:	66 89 15 c0 6e 02 c0 	mov    WORD PTR ds:0xc0026ec0,dx
c00073b8:	e9 9d 8f ff ff       	jmp    c000035a <loadGDT>
c00073bd:	90                   	nop

c00073be <GDT::setup()>:
c00073be:	57                   	push   edi
c00073bf:	56                   	push   esi
c00073c0:	53                   	push   ebx
c00073c1:	83 ec 30             	sub    esp,0x30
c00073c4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00073c8:	6a 00                	push   0x0
c00073ca:	8d 74 24 14          	lea    esi,[esp+0x14]
c00073ce:	56                   	push   esi
c00073cf:	e8 4e ff ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c00073d4:	6a 00                	push   0x0
c00073d6:	56                   	push   esi
c00073d7:	e8 62 ff ff ff       	call   c000733e <GDTEntry::setLimit(unsigned int)>
c00073dc:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c00073e4:	6a 00                	push   0x0
c00073e6:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00073ea:	56                   	push   esi
c00073eb:	e8 32 ff ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c00073f0:	68 ff ff ff 00       	push   0xffffff
c00073f5:	56                   	push   esi
c00073f6:	e8 43 ff ff ff       	call   c000733e <GDTEntry::setLimit(unsigned int)>
c00073fb:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00073ff:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0007403:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007407:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000740b:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0007410:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007415:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007419:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000741d:	89 f8                	mov    eax,edi
c000741f:	89 fa                	mov    edx,edi
c0007421:	80 e4 f7             	and    ah,0xf7
c0007424:	80 ce 60             	or     dh,0x60
c0007427:	89 c7                	mov    edi,eax
c0007429:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000742d:	80 cc 60             	or     ah,0x60
c0007430:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007434:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007438:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000743c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007440:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007444:	83 c4 20             	add    esp,0x20
c0007447:	6a 00                	push   0x0
c0007449:	8d 44 24 24          	lea    eax,[esp+0x24]
c000744d:	50                   	push   eax
c000744e:	e8 cf fe ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c0007453:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0007457:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000745b:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000745f:	83 e0 3f             	and    eax,0x3f
c0007462:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0007466:	6a 00                	push   0x0
c0007468:	8d 44 24 34          	lea    eax,[esp+0x34]
c000746c:	50                   	push   eax
c000746d:	e8 b0 fe ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c0007472:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c0007476:	83 e0 3f             	and    eax,0x3f
c0007479:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000747d:	83 c4 0c             	add    esp,0xc
c0007480:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007484:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007488:	53                   	push   ebx
c0007489:	e8 e4 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c000748e:	83 c4 0c             	add    esp,0xc
c0007491:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007495:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007499:	53                   	push   ebx
c000749a:	e8 d3 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c000749f:	83 c4 0c             	add    esp,0xc
c00074a2:	57                   	push   edi
c00074a3:	56                   	push   esi
c00074a4:	53                   	push   ebx
c00074a5:	e8 c8 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074aa:	83 c4 0c             	add    esp,0xc
c00074ad:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074b1:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074b5:	53                   	push   ebx
c00074b6:	e8 b7 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074bb:	83 c4 0c             	add    esp,0xc
c00074be:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074c2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074c6:	53                   	push   ebx
c00074c7:	e8 a6 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074cc:	83 c4 0c             	add    esp,0xc
c00074cf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074d3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074d7:	53                   	push   ebx
c00074d8:	e8 95 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074dd:	83 c4 0c             	add    esp,0xc
c00074e0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00074e4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00074e8:	53                   	push   ebx
c00074e9:	e8 84 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074ee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00074f1:	e8 a6 fe ff ff       	call   c000739c <GDT::flush()>
c00074f6:	83 c4 40             	add    esp,0x40
c00074f9:	5b                   	pop    ebx
c00074fa:	5e                   	pop    esi
c00074fb:	5f                   	pop    edi
c00074fc:	c3                   	ret    

c00074fd <idleFunction(void*)>:
c00074fd:	83 ec 0c             	sub    esp,0xc
c0007500:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007505:	48                   	dec    eax
c0007506:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000750b:	75 01                	jne    c000750e <idleFunction(void*)+0x11>
c000750d:	fb                   	sti    
c000750e:	e8 01 08 01 00       	call   c0017d14 <HalSystemIdle()>
c0007513:	e8 2a 85 01 00       	call   c001fa42 <idleCommon()>
c0007518:	eb f4                	jmp    c000750e <idleFunction(void*)+0x11>
c000751a:	66 90                	xchg   ax,ax

c000751c <IDTEntry::IDTEntry(bool)>:
c000751c:	53                   	push   ebx
c000751d:	83 ec 04             	sub    esp,0x4
c0007520:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007524:	88 04 24             	mov    BYTE PTR [esp],al
c0007527:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000752b:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007531:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007535:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007539:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000753d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007540:	83 e2 f0             	and    edx,0xfffffff0
c0007543:	83 ca 0e             	or     edx,0xe
c0007546:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007549:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000754d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007550:	83 e2 ef             	and    edx,0xffffffef
c0007553:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007556:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000755a:	85 c0                	test   eax,eax
c000755c:	74 06                	je     c0007564 <IDTEntry::IDTEntry(bool)+0x48>
c000755e:	b2 03                	mov    dl,0x3
c0007560:	eb 06                	jmp    c0007568 <IDTEntry::IDTEntry(bool)+0x4c>
c0007562:	66 90                	xchg   ax,ax
c0007564:	b2 00                	mov    dl,0x0
c0007566:	66 90                	xchg   ax,ax
c0007568:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000756c:	83 e2 03             	and    edx,0x3
c000756f:	89 d3                	mov    ebx,edx
c0007571:	c1 e3 05             	shl    ebx,0x5
c0007574:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007577:	83 e2 9f             	and    edx,0xffffff9f
c000757a:	88 d1                	mov    cl,dl
c000757c:	88 da                	mov    dl,bl
c000757e:	09 ca                	or     edx,ecx
c0007580:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007583:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007587:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000758a:	83 ca 80             	or     edx,0xffffff80
c000758d:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007590:	90                   	nop
c0007591:	83 c4 04             	add    esp,0x4
c0007594:	5b                   	pop    ebx
c0007595:	c3                   	ret    

c0007596 <IDTEntry::setOffset(unsigned int)>:
c0007596:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000759a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000759e:	66 89 02             	mov    WORD PTR [edx],ax
c00075a1:	c1 e8 10             	shr    eax,0x10
c00075a4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00075a8:	c3                   	ret    
c00075a9:	90                   	nop
c00075aa:	66 90                	xchg   ax,ax

c00075ac <IDT::IDT()>:
c00075ac:	90                   	nop
c00075ad:	c3                   	ret    

c00075ae <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00075ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075b2:	83 c0 30             	add    eax,0x30
c00075b5:	c3                   	ret    

c00075b6 <IDT::addEntry(IDTEntry, int)>:
c00075b6:	53                   	push   ebx
c00075b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00075bf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00075c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00075c7:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00075ca:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00075ce:	5b                   	pop    ebx
c00075cf:	c3                   	ret    

c00075d0 <IDT::addEntry(int, void (*)(), bool)>:
c00075d0:	53                   	push   ebx
c00075d1:	83 ec 10             	sub    esp,0x10
c00075d4:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00075d9:	50                   	push   eax
c00075da:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00075de:	53                   	push   ebx
c00075df:	e8 38 ff ff ff       	call   c000751c <IDTEntry::IDTEntry(bool)>
c00075e4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00075e8:	53                   	push   ebx
c00075e9:	e8 a8 ff ff ff       	call   c0007596 <IDTEntry::setOffset(unsigned int)>
c00075ee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00075f2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00075f6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00075fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00075fe:	e8 b3 ff ff ff       	call   c00075b6 <IDT::addEntry(IDTEntry, int)>
c0007603:	83 c4 30             	add    esp,0x30
c0007606:	5b                   	pop    ebx
c0007607:	c3                   	ret    

c0007608 <IDT::flush()>:
c0007608:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000760c:	66 c7 05 c8 6e 02 c0 ff 07 	mov    WORD PTR ds:0xc0026ec8,0x7ff
c0007615:	a3 ca 6e 02 c0       	mov    ds:0xc0026eca,eax
c000761a:	0f 01 1d c8 6e 02 c0 	lidtd  ds:0xc0026ec8
c0007621:	c3                   	ret    

c0007622 <IDT::setup()>:
c0007622:	57                   	push   edi
c0007623:	56                   	push   esi
c0007624:	53                   	push   ebx
c0007625:	83 ec 10             	sub    esp,0x10
c0007628:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000762c:	6a 00                	push   0x0
c000762e:	68 40 f1 01 c0       	push   0xc001f140
c0007633:	6a 00                	push   0x0
c0007635:	53                   	push   ebx
c0007636:	e8 95 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000763b:	6a 00                	push   0x0
c000763d:	68 50 f1 01 c0       	push   0xc001f150
c0007642:	6a 01                	push   0x1
c0007644:	53                   	push   ebx
c0007645:	e8 86 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000764a:	83 c4 20             	add    esp,0x20
c000764d:	6a 00                	push   0x0
c000764f:	68 5a f1 01 c0       	push   0xc001f15a
c0007654:	6a 02                	push   0x2
c0007656:	53                   	push   ebx
c0007657:	e8 74 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000765c:	6a 00                	push   0x0
c000765e:	68 64 f1 01 c0       	push   0xc001f164
c0007663:	6a 03                	push   0x3
c0007665:	53                   	push   ebx
c0007666:	e8 65 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000766b:	83 c4 20             	add    esp,0x20
c000766e:	6a 00                	push   0x0
c0007670:	68 6e f1 01 c0       	push   0xc001f16e
c0007675:	6a 04                	push   0x4
c0007677:	53                   	push   ebx
c0007678:	e8 53 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000767d:	6a 00                	push   0x0
c000767f:	68 78 f1 01 c0       	push   0xc001f178
c0007684:	6a 05                	push   0x5
c0007686:	53                   	push   ebx
c0007687:	e8 44 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000768c:	83 c4 20             	add    esp,0x20
c000768f:	6a 00                	push   0x0
c0007691:	68 82 f1 01 c0       	push   0xc001f182
c0007696:	6a 06                	push   0x6
c0007698:	53                   	push   ebx
c0007699:	e8 32 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000769e:	6a 00                	push   0x0
c00076a0:	68 8c f1 01 c0       	push   0xc001f18c
c00076a5:	6a 07                	push   0x7
c00076a7:	53                   	push   ebx
c00076a8:	e8 23 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076ad:	83 c4 20             	add    esp,0x20
c00076b0:	6a 00                	push   0x0
c00076b2:	68 96 f1 01 c0       	push   0xc001f196
c00076b7:	6a 08                	push   0x8
c00076b9:	53                   	push   ebx
c00076ba:	e8 11 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076bf:	6a 00                	push   0x0
c00076c1:	68 9e f1 01 c0       	push   0xc001f19e
c00076c6:	6a 09                	push   0x9
c00076c8:	53                   	push   ebx
c00076c9:	e8 02 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076ce:	83 c4 20             	add    esp,0x20
c00076d1:	6a 00                	push   0x0
c00076d3:	68 a8 f1 01 c0       	push   0xc001f1a8
c00076d8:	6a 0a                	push   0xa
c00076da:	53                   	push   ebx
c00076db:	e8 f0 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076e0:	6a 00                	push   0x0
c00076e2:	68 b0 f1 01 c0       	push   0xc001f1b0
c00076e7:	6a 0b                	push   0xb
c00076e9:	53                   	push   ebx
c00076ea:	e8 e1 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076ef:	83 c4 20             	add    esp,0x20
c00076f2:	6a 00                	push   0x0
c00076f4:	68 b8 f1 01 c0       	push   0xc001f1b8
c00076f9:	6a 0c                	push   0xc
c00076fb:	53                   	push   ebx
c00076fc:	e8 cf fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007701:	6a 00                	push   0x0
c0007703:	68 c0 f1 01 c0       	push   0xc001f1c0
c0007708:	6a 0d                	push   0xd
c000770a:	53                   	push   ebx
c000770b:	e8 c0 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007710:	83 c4 20             	add    esp,0x20
c0007713:	6a 00                	push   0x0
c0007715:	68 da f1 01 c0       	push   0xc001f1da
c000771a:	6a 0e                	push   0xe
c000771c:	53                   	push   ebx
c000771d:	e8 ae fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007722:	6a 00                	push   0x0
c0007724:	68 e2 f1 01 c0       	push   0xc001f1e2
c0007729:	6a 0f                	push   0xf
c000772b:	53                   	push   ebx
c000772c:	e8 9f fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007731:	83 c4 20             	add    esp,0x20
c0007734:	6a 00                	push   0x0
c0007736:	68 ec f1 01 c0       	push   0xc001f1ec
c000773b:	6a 10                	push   0x10
c000773d:	53                   	push   ebx
c000773e:	e8 8d fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007743:	6a 00                	push   0x0
c0007745:	68 f6 f1 01 c0       	push   0xc001f1f6
c000774a:	6a 11                	push   0x11
c000774c:	53                   	push   ebx
c000774d:	e8 7e fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007752:	83 c4 20             	add    esp,0x20
c0007755:	6a 00                	push   0x0
c0007757:	68 00 f2 01 c0       	push   0xc001f200
c000775c:	6a 12                	push   0x12
c000775e:	53                   	push   ebx
c000775f:	e8 6c fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007764:	6a 01                	push   0x1
c0007766:	68 9a f2 01 c0       	push   0xc001f29a
c000776b:	6a 60                	push   0x60
c000776d:	53                   	push   ebx
c000776e:	e8 5d fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007773:	83 c4 20             	add    esp,0x20
c0007776:	6a 00                	push   0x0
c0007778:	68 a1 f2 01 c0       	push   0xc001f2a1
c000777d:	6a 20                	push   0x20
c000777f:	53                   	push   ebx
c0007780:	e8 4b fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007785:	6a 00                	push   0x0
c0007787:	68 8c f2 01 c0       	push   0xc001f28c
c000778c:	6a 21                	push   0x21
c000778e:	53                   	push   ebx
c000778f:	e8 3c fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007794:	83 c4 20             	add    esp,0x20
c0007797:	6a 00                	push   0x0
c0007799:	68 93 f2 01 c0       	push   0xc001f293
c000779e:	6a 22                	push   0x22
c00077a0:	53                   	push   ebx
c00077a1:	e8 2a fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077a6:	6a 00                	push   0x0
c00077a8:	68 0a f2 01 c0       	push   0xc001f20a
c00077ad:	6a 23                	push   0x23
c00077af:	53                   	push   ebx
c00077b0:	e8 1b fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077b5:	83 c4 20             	add    esp,0x20
c00077b8:	6a 00                	push   0x0
c00077ba:	68 14 f2 01 c0       	push   0xc001f214
c00077bf:	6a 24                	push   0x24
c00077c1:	53                   	push   ebx
c00077c2:	e8 09 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077c7:	6a 00                	push   0x0
c00077c9:	68 1e f2 01 c0       	push   0xc001f21e
c00077ce:	6a 25                	push   0x25
c00077d0:	53                   	push   ebx
c00077d1:	e8 fa fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077d6:	83 c4 20             	add    esp,0x20
c00077d9:	6a 00                	push   0x0
c00077db:	68 28 f2 01 c0       	push   0xc001f228
c00077e0:	6a 26                	push   0x26
c00077e2:	53                   	push   ebx
c00077e3:	e8 e8 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077e8:	6a 00                	push   0x0
c00077ea:	68 32 f2 01 c0       	push   0xc001f232
c00077ef:	6a 27                	push   0x27
c00077f1:	53                   	push   ebx
c00077f2:	e8 d9 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077f7:	83 c4 20             	add    esp,0x20
c00077fa:	6a 00                	push   0x0
c00077fc:	68 3c f2 01 c0       	push   0xc001f23c
c0007801:	6a 28                	push   0x28
c0007803:	53                   	push   ebx
c0007804:	e8 c7 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007809:	6a 00                	push   0x0
c000780b:	68 46 f2 01 c0       	push   0xc001f246
c0007810:	6a 29                	push   0x29
c0007812:	53                   	push   ebx
c0007813:	e8 b8 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007818:	83 c4 20             	add    esp,0x20
c000781b:	6a 00                	push   0x0
c000781d:	68 50 f2 01 c0       	push   0xc001f250
c0007822:	6a 2a                	push   0x2a
c0007824:	53                   	push   ebx
c0007825:	e8 a6 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000782a:	6a 00                	push   0x0
c000782c:	68 5a f2 01 c0       	push   0xc001f25a
c0007831:	6a 2b                	push   0x2b
c0007833:	53                   	push   ebx
c0007834:	e8 97 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007839:	83 c4 20             	add    esp,0x20
c000783c:	6a 00                	push   0x0
c000783e:	68 64 f2 01 c0       	push   0xc001f264
c0007843:	6a 2c                	push   0x2c
c0007845:	53                   	push   ebx
c0007846:	e8 85 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000784b:	6a 00                	push   0x0
c000784d:	68 6e f2 01 c0       	push   0xc001f26e
c0007852:	6a 2d                	push   0x2d
c0007854:	53                   	push   ebx
c0007855:	e8 76 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000785a:	83 c4 20             	add    esp,0x20
c000785d:	6a 00                	push   0x0
c000785f:	68 78 f2 01 c0       	push   0xc001f278
c0007864:	6a 2e                	push   0x2e
c0007866:	53                   	push   ebx
c0007867:	e8 64 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000786c:	6a 00                	push   0x0
c000786e:	68 82 f2 01 c0       	push   0xc001f282
c0007873:	6a 2f                	push   0x2f
c0007875:	53                   	push   ebx
c0007876:	e8 55 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000787b:	83 c4 20             	add    esp,0x20
c000787e:	6a 00                	push   0x0
c0007880:	68 dc f3 01 c0       	push   0xc001f3dc
c0007885:	6a 30                	push   0x30
c0007887:	53                   	push   ebx
c0007888:	e8 43 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000788d:	6a 00                	push   0x0
c000788f:	68 e6 f3 01 c0       	push   0xc001f3e6
c0007894:	6a 31                	push   0x31
c0007896:	53                   	push   ebx
c0007897:	e8 34 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000789c:	83 c4 20             	add    esp,0x20
c000789f:	6a 00                	push   0x0
c00078a1:	68 f0 f3 01 c0       	push   0xc001f3f0
c00078a6:	6a 32                	push   0x32
c00078a8:	53                   	push   ebx
c00078a9:	e8 22 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078ae:	6a 00                	push   0x0
c00078b0:	68 fa f3 01 c0       	push   0xc001f3fa
c00078b5:	6a 33                	push   0x33
c00078b7:	53                   	push   ebx
c00078b8:	e8 13 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078bd:	83 c4 20             	add    esp,0x20
c00078c0:	6a 00                	push   0x0
c00078c2:	68 04 f4 01 c0       	push   0xc001f404
c00078c7:	6a 34                	push   0x34
c00078c9:	53                   	push   ebx
c00078ca:	e8 01 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078cf:	6a 00                	push   0x0
c00078d1:	68 0e f4 01 c0       	push   0xc001f40e
c00078d6:	6a 35                	push   0x35
c00078d8:	53                   	push   ebx
c00078d9:	e8 f2 fc ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078de:	83 c4 20             	add    esp,0x20
c00078e1:	6a 00                	push   0x0
c00078e3:	68 18 f4 01 c0       	push   0xc001f418
c00078e8:	6a 36                	push   0x36
c00078ea:	53                   	push   ebx
c00078eb:	e8 e0 fc ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078f0:	6a 00                	push   0x0
c00078f2:	68 22 f4 01 c0       	push   0xc001f422
c00078f7:	6a 37                	push   0x37
c00078f9:	53                   	push   ebx
c00078fa:	e8 d1 fc ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078ff:	83 c4 1c             	add    esp,0x1c
c0007902:	6a 03                	push   0x3
c0007904:	6a 02                	push   0x2
c0007906:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c000790c:	e8 13 25 00 00       	call   c0009e24 <VAS::allocatePages(int, int)>
c0007911:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007918:	89 c6                	mov    esi,eax
c000791a:	e8 97 01 00 00       	call   c0007ab6 <malloc>
c000791f:	81 c6 00 20 00 00    	add    esi,0x2000
c0007925:	89 04 24             	mov    DWORD PTR [esp],eax
c0007928:	89 c7                	mov    edi,eax
c000792a:	e8 15 16 00 00       	call   c0008f44 <TSS::TSS()>
c000792f:	83 c4 0c             	add    esp,0xc
c0007932:	68 96 f1 01 c0       	push   0xc001f196
c0007937:	56                   	push   esi
c0007938:	57                   	push   edi
c0007939:	e8 4a 16 00 00       	call   c0008f88 <TSS::setup(unsigned long, unsigned long)>
c000793e:	89 c6                	mov    esi,eax
c0007940:	58                   	pop    eax
c0007941:	5a                   	pop    edx
c0007942:	6a 00                	push   0x0
c0007944:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007948:	50                   	push   eax
c0007949:	e8 ce fb ff ff       	call   c000751c <IDTEntry::IDTEntry(bool)>
c000794e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007952:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0007957:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000795e:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0007964:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007968:	80 ce 05             	or     dh,0x5
c000796b:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000796e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007972:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007976:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007979:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000797c:	e8 87 fc ff ff       	call   c0007608 <IDT::flush()>
c0007981:	83 c4 20             	add    esp,0x20
c0007984:	5b                   	pop    ebx
c0007985:	5e                   	pop    esi
c0007986:	5f                   	pop    edi
c0007987:	c3                   	ret    

c0007988 <sbrk>:
c0007988:	55                   	push   ebp
c0007989:	57                   	push   edi
c000798a:	56                   	push   esi
c000798b:	53                   	push   ebx
c000798c:	83 ec 1c             	sub    esp,0x1c
c000798f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007993:	85 c0                	test   eax,eax
c0007995:	74 61                	je     c00079f8 <sbrk+0x70>
c0007997:	78 66                	js     c00079ff <sbrk+0x77>
c0007999:	8b 15 b4 36 02 c0    	mov    edx,DWORD PTR ds:0xc00236b4
c000799f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00079a3:	05 ff 0f 00 00       	add    eax,0xfff
c00079a8:	89 c5                	mov    ebp,eax
c00079aa:	78 6b                	js     c0007a17 <sbrk+0x8f>
c00079ac:	c1 fd 0c             	sar    ebp,0xc
c00079af:	bb 00 00 00 00       	mov    ebx,0x0
c00079b4:	8b 35 b0 6f 02 c0    	mov    esi,DWORD PTR ds:0xc0026fb0
c00079ba:	8b 3d b4 36 02 c0    	mov    edi,DWORD PTR ds:0xc00236b4
c00079c0:	e8 fa 03 00 00       	call   c0007dbf <Phys::allocatePage()>
c00079c5:	68 01 04 00 00       	push   0x401
c00079ca:	57                   	push   edi
c00079cb:	50                   	push   eax
c00079cc:	56                   	push   esi
c00079cd:	e8 4e 23 00 00       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c00079d2:	81 05 b4 36 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc00236b4,0x1000
c00079dc:	83 c3 01             	add    ebx,0x1
c00079df:	83 c4 10             	add    esp,0x10
c00079e2:	39 dd                	cmp    ebp,ebx
c00079e4:	75 ce                	jne    c00079b4 <sbrk+0x2c>
c00079e6:	0f 20 d8             	mov    eax,cr3
c00079e9:	0f 22 d8             	mov    cr3,eax
c00079ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00079f0:	83 c4 1c             	add    esp,0x1c
c00079f3:	5b                   	pop    ebx
c00079f4:	5e                   	pop    esi
c00079f5:	5f                   	pop    edi
c00079f6:	5d                   	pop    ebp
c00079f7:	c3                   	ret    
c00079f8:	a1 b4 36 02 c0       	mov    eax,ds:0xc00236b4
c00079fd:	eb f1                	jmp    c00079f0 <sbrk+0x68>
c00079ff:	83 ec 08             	sub    esp,0x8
c0007a02:	50                   	push   eax
c0007a03:	68 38 0d 02 c0       	push   0xc0020d38
c0007a08:	e8 38 2f 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0007a0d:	83 c4 10             	add    esp,0x10
c0007a10:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007a15:	eb d9                	jmp    c00079f0 <sbrk+0x68>
c0007a17:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0007a1d:	eb 8d                	jmp    c00079ac <sbrk+0x24>

c0007a1f <mmap>:
c0007a1f:	83 ec 18             	sub    esp,0x18
c0007a22:	68 68 0d 02 c0       	push   0xc0020d68
c0007a27:	e8 83 9c 00 00       	call   c00116af <KePanic(char const*)>
c0007a2c:	b8 00 00 00 00       	mov    eax,0x0
c0007a31:	83 c4 1c             	add    esp,0x1c
c0007a34:	c3                   	ret    

c0007a35 <munmap>:
c0007a35:	83 ec 18             	sub    esp,0x18
c0007a38:	68 6d 0d 02 c0       	push   0xc0020d6d
c0007a3d:	e8 6d 9c 00 00       	call   c00116af <KePanic(char const*)>
c0007a42:	b8 00 00 00 00       	mov    eax,0x0
c0007a47:	83 c4 1c             	add    esp,0x1c
c0007a4a:	c3                   	ret    

c0007a4b <liballoc_lock()>:
c0007a4b:	fa                   	cli    
c0007a4c:	83 05 c8 c6 02 c0 01 	add    DWORD PTR ds:0xc002c6c8,0x1
c0007a53:	b8 00 00 00 00       	mov    eax,0x0
c0007a58:	c3                   	ret    

c0007a59 <liballoc_unlock()>:
c0007a59:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007a5e:	83 e8 01             	sub    eax,0x1
c0007a61:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0007a66:	75 01                	jne    c0007a69 <liballoc_unlock()+0x10>
c0007a68:	fb                   	sti    
c0007a69:	b8 00 00 00 00       	mov    eax,0x0
c0007a6e:	c3                   	ret    

c0007a6f <liballoc_alloc(int)>:
c0007a6f:	83 ec 10             	sub    esp,0x10
c0007a72:	6a 01                	push   0x1
c0007a74:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a78:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c0007a7e:	e8 a1 23 00 00       	call   c0009e24 <VAS::allocatePages(int, int)>
c0007a83:	83 c4 1c             	add    esp,0x1c
c0007a86:	c3                   	ret    

c0007a87 <liballoc_free(void*, int)>:
c0007a87:	83 ec 14             	sub    esp,0x14
c0007a8a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a8e:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c0007a94:	e8 cf 1f 00 00       	call   c0009a68 <VAS::freeAllocatedPages(unsigned long)>
c0007a99:	b8 00 00 00 00       	mov    eax,0x0
c0007a9e:	83 c4 1c             	add    esp,0x1c
c0007aa1:	c3                   	ret    

c0007aa2 <realloc>:
c0007aa2:	83 ec 14             	sub    esp,0x14
c0007aa5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aa9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aad:	e8 36 9b ff ff       	call   c00015e8 <dlrealloc>
c0007ab2:	83 c4 1c             	add    esp,0x1c
c0007ab5:	c3                   	ret    

c0007ab6 <malloc>:
c0007ab6:	83 ec 18             	sub    esp,0x18
c0007ab9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007abd:	e8 e9 95 ff ff       	call   c00010ab <dlmalloc>
c0007ac2:	83 c4 1c             	add    esp,0x1c
c0007ac5:	c3                   	ret    

c0007ac6 <free>:
c0007ac6:	83 ec 18             	sub    esp,0x18
c0007ac9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007acd:	e8 81 92 ff ff       	call   c0000d53 <dlfree>
c0007ad2:	83 c4 1c             	add    esp,0x1c
c0007ad5:	c3                   	ret    

c0007ad6 <rfree>:
c0007ad6:	83 ec 18             	sub    esp,0x18
c0007ad9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007add:	e8 71 92 ff ff       	call   c0000d53 <dlfree>
c0007ae2:	83 c4 1c             	add    esp,0x1c
c0007ae5:	c3                   	ret    

c0007ae6 <calloc>:
c0007ae6:	56                   	push   esi
c0007ae7:	53                   	push   ebx
c0007ae8:	83 ec 10             	sub    esp,0x10
c0007aeb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007aef:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007af4:	53                   	push   ebx
c0007af5:	e8 bc ff ff ff       	call   c0007ab6 <malloc>
c0007afa:	89 c6                	mov    esi,eax
c0007afc:	83 c4 0c             	add    esp,0xc
c0007aff:	53                   	push   ebx
c0007b00:	6a 00                	push   0x0
c0007b02:	50                   	push   eax
c0007b03:	e8 e8 89 ff ff       	call   c00004f0 <memset>
c0007b08:	89 f0                	mov    eax,esi
c0007b0a:	83 c4 14             	add    esp,0x14
c0007b0d:	5b                   	pop    ebx
c0007b0e:	5e                   	pop    esi
c0007b0f:	c3                   	ret    

c0007b10 <KeEntryPoint>:
c0007b10:	57                   	push   edi
c0007b11:	bf f9 03 00 00       	mov    edi,0x3f9
c0007b16:	56                   	push   esi
c0007b17:	89 fa                	mov    edx,edi
c0007b19:	53                   	push   ebx
c0007b1a:	31 f6                	xor    esi,esi
c0007b1c:	83 ec 2c             	sub    esp,0x2c
c0007b1f:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007b24:	a3 d0 6e 02 c0       	mov    ds:0xc0026ed0,eax
c0007b29:	89 f0                	mov    eax,esi
c0007b2b:	ee                   	out    dx,al
c0007b2c:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007b31:	b0 80                	mov    al,0x80
c0007b33:	89 da                	mov    edx,ebx
c0007b35:	ee                   	out    dx,al
c0007b36:	b1 03                	mov    cl,0x3
c0007b38:	ba f8 03 00 00       	mov    edx,0x3f8
c0007b3d:	88 c8                	mov    al,cl
c0007b3f:	ee                   	out    dx,al
c0007b40:	89 f0                	mov    eax,esi
c0007b42:	89 fa                	mov    edx,edi
c0007b44:	ee                   	out    dx,al
c0007b45:	88 c8                	mov    al,cl
c0007b47:	89 da                	mov    edx,ebx
c0007b49:	ee                   	out    dx,al
c0007b4a:	b0 c7                	mov    al,0xc7
c0007b4c:	ba fa 03 00 00       	mov    edx,0x3fa
c0007b51:	ee                   	out    dx,al
c0007b52:	b0 0b                	mov    al,0xb
c0007b54:	ba fc 03 00 00       	mov    edx,0x3fc
c0007b59:	ee                   	out    dx,al
c0007b5a:	68 74 0d 02 c0       	push   0xc0020d74
c0007b5f:	e8 e1 2d 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0007b64:	e8 ca 93 00 00       	call   c0010f33 <KeDisplaySplashScreen()>
c0007b69:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007b6e:	05 ff 0f 00 00       	add    eax,0xfff
c0007b73:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007b78:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b7b:	e8 ad 03 00 00       	call   c0007f2d <Phys::physicalMemorySetup(unsigned int)>
c0007b80:	e8 66 1c 00 00       	call   c00097eb <Virt::virtualMemorySetup()>
c0007b85:	e8 f3 92 00 00       	call   c0010e7d <KeInitialiseAtexit()>
c0007b8a:	58                   	pop    eax
c0007b8b:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007b8f:	53                   	push   ebx
c0007b90:	e8 53 1f 00 00       	call   c0009ae8 <VAS::VAS()>
c0007b95:	89 1d b0 6f 02 c0    	mov    DWORD PTR ds:0xc0026fb0,ebx
c0007b9b:	e8 3a 7e 01 00       	call   c001f9da <_init>
c0007ba0:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007ba7:	e8 0a ff ff ff       	call   c0007ab6 <malloc>
c0007bac:	89 04 24             	mov    DWORD PTR [esp],eax
c0007baf:	89 c6                	mov    esi,eax
c0007bb1:	e8 30 f2 ff ff       	call   c0006de6 <Computer::Computer()>
c0007bb6:	53                   	push   ebx
c0007bb7:	89 35 b8 6e 02 c0    	mov    DWORD PTR ds:0xc0026eb8,esi
c0007bbd:	6a 00                	push   0x0
c0007bbf:	6a 00                	push   0x0
c0007bc1:	56                   	push   esi
c0007bc2:	e8 e7 f5 ff ff       	call   c00071ae <Computer::open(int, int, void*)>
c0007bc7:	83 c4 14             	add    esp,0x14
c0007bca:	53                   	push   ebx
c0007bcb:	e8 e2 1f 00 00       	call   c0009bb2 <VAS::~VAS()>
c0007bd0:	83 c4 30             	add    esp,0x30
c0007bd3:	5b                   	pop    ebx
c0007bd4:	5e                   	pop    esi
c0007bd5:	5f                   	pop    edi
c0007bd6:	c3                   	ret    

c0007bd7 <Phys::allocateDMA(unsigned long)>:
c0007bd7:	55                   	push   ebp
c0007bd8:	31 ed                	xor    ebp,ebp
c0007bda:	57                   	push   edi
c0007bdb:	56                   	push   esi
c0007bdc:	53                   	push   ebx
c0007bdd:	31 db                	xor    ebx,ebx
c0007bdf:	83 ec 1c             	sub    esp,0x1c
c0007be2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007be6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0007bee:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0007bf4:	31 c0                	xor    eax,eax
c0007bf6:	c1 ef 0c             	shr    edi,0xc
c0007bf9:	eb 1b                	jmp    c0007c16 <Phys::allocateDMA(unsigned long)+0x3f>
c0007bfb:	85 c0                	test   eax,eax
c0007bfd:	75 06                	jne    c0007c05 <Phys::allocateDMA(unsigned long)+0x2e>
c0007bff:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007c03:	89 dd                	mov    ebp,ebx
c0007c05:	8d 70 01             	lea    esi,[eax+0x1]
c0007c08:	39 f7                	cmp    edi,esi
c0007c0a:	74 37                	je     c0007c43 <Phys::allocateDMA(unsigned long)+0x6c>
c0007c0c:	89 f0                	mov    eax,esi
c0007c0e:	83 c3 01             	add    ebx,0x1
c0007c11:	83 fb 0f             	cmp    ebx,0xf
c0007c14:	7f 13                	jg     c0007c29 <Phys::allocateDMA(unsigned long)+0x52>
c0007c16:	80 bb ec 6e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd9114],0x0
c0007c1d:	74 dc                	je     c0007bfb <Phys::allocateDMA(unsigned long)+0x24>
c0007c1f:	31 c0                	xor    eax,eax
c0007c21:	83 c3 01             	add    ebx,0x1
c0007c24:	83 fb 0f             	cmp    ebx,0xf
c0007c27:	7e ed                	jle    c0007c16 <Phys::allocateDMA(unsigned long)+0x3f>
c0007c29:	83 ec 0c             	sub    esp,0xc
c0007c2c:	68 8c 0d 02 c0       	push   0xc0020d8c
c0007c31:	e8 79 9a 00 00       	call   c00116af <KePanic(char const*)>
c0007c36:	83 c4 10             	add    esp,0x10
c0007c39:	31 c0                	xor    eax,eax
c0007c3b:	83 c4 1c             	add    esp,0x1c
c0007c3e:	5b                   	pop    ebx
c0007c3f:	5e                   	pop    esi
c0007c40:	5f                   	pop    edi
c0007c41:	5d                   	pop    ebp
c0007c42:	c3                   	ret    
c0007c43:	89 e9                	mov    ecx,ebp
c0007c45:	c1 f9 04             	sar    ecx,0x4
c0007c48:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007c4c:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0007c50:	89 ca                	mov    edx,ecx
c0007c52:	83 ea 01             	sub    edx,0x1
c0007c55:	79 03                	jns    c0007c5a <Phys::allocateDMA(unsigned long)+0x83>
c0007c57:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007c5a:	c1 fa 04             	sar    edx,0x4
c0007c5d:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0007c61:	74 08                	je     c0007c6b <Phys::allocateDMA(unsigned long)+0x94>
c0007c63:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007c67:	31 c0                	xor    eax,eax
c0007c69:	eb b6                	jmp    c0007c21 <Phys::allocateDMA(unsigned long)+0x4a>
c0007c6b:	85 f6                	test   esi,esi
c0007c6d:	74 17                	je     c0007c86 <Phys::allocateDMA(unsigned long)+0xaf>
c0007c6f:	8d 95 ec 6e 02 c0    	lea    edx,[ebp-0x3ffd9114]
c0007c75:	8d 84 05 ed 6e 02 c0 	lea    eax,[ebp+eax*1-0x3ffd9113]
c0007c7c:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007c7f:	83 c2 01             	add    edx,0x1
c0007c82:	39 d0                	cmp    eax,edx
c0007c84:	75 f6                	jne    c0007c7c <Phys::allocateDMA(unsigned long)+0xa5>
c0007c86:	a1 e4 6e 02 c0       	mov    eax,ds:0xc0026ee4
c0007c8b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007c8f:	01 f8                	add    eax,edi
c0007c91:	85 d2                	test   edx,edx
c0007c93:	a3 e4 6e 02 c0       	mov    ds:0xc0026ee4,eax
c0007c98:	74 17                	je     c0007cb1 <Phys::allocateDMA(unsigned long)+0xda>
c0007c9a:	83 ec 0c             	sub    esp,0xc
c0007c9d:	68 8c 0d 02 c0       	push   0xc0020d8c
c0007ca2:	e8 08 9a 00 00       	call   c00116af <KePanic(char const*)>
c0007ca7:	83 c4 10             	add    esp,0x10
c0007caa:	89 f0                	mov    eax,esi
c0007cac:	e9 5d ff ff ff       	jmp    c0007c0e <Phys::allocateDMA(unsigned long)+0x37>
c0007cb1:	c1 e5 0c             	shl    ebp,0xc
c0007cb4:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0007cba:	e9 7c ff ff ff       	jmp    c0007c3b <Phys::allocateDMA(unsigned long)+0x64>

c0007cbf <Phys::freeDMA(unsigned long, unsigned long)>:
c0007cbf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cc3:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007cc9:	a1 e4 6e 02 c0       	mov    eax,ds:0xc0026ee4
c0007cce:	c1 ea 0c             	shr    edx,0xc
c0007cd1:	29 d0                	sub    eax,edx
c0007cd3:	a3 e4 6e 02 c0       	mov    ds:0xc0026ee4,eax
c0007cd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cdc:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007ce1:	c1 e8 0c             	shr    eax,0xc
c0007ce4:	85 d2                	test   edx,edx
c0007ce6:	74 11                	je     c0007cf9 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0007ce8:	05 ec 6e 02 c0       	add    eax,0xc0026eec
c0007ced:	01 c2                	add    edx,eax
c0007cef:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007cf2:	83 c0 01             	add    eax,0x1
c0007cf5:	39 d0                	cmp    eax,edx
c0007cf7:	75 f6                	jne    c0007cef <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0007cf9:	c3                   	ret    

c0007cfa <Phys::setPageState(unsigned long, bool)>:
c0007cfa:	57                   	push   edi
c0007cfb:	56                   	push   esi
c0007cfc:	8b 35 b8 36 02 c0    	mov    esi,DWORD PTR ds:0xc00236b8
c0007d02:	53                   	push   ebx
c0007d03:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0007d08:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d0c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007d10:	0f b6 c0             	movzx  eax,al
c0007d13:	89 ca                	mov    edx,ecx
c0007d15:	83 e1 07             	and    ecx,0x7
c0007d18:	c1 ea 03             	shr    edx,0x3
c0007d1b:	d3 c3                	rol    ebx,cl
c0007d1d:	01 d6                	add    esi,edx
c0007d1f:	d3 e0                	shl    eax,cl
c0007d21:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0007d24:	21 fb                	and    ebx,edi
c0007d26:	88 1e                	mov    BYTE PTR [esi],bl
c0007d28:	8b 1d b8 36 02 c0    	mov    ebx,DWORD PTR ds:0xc00236b8
c0007d2e:	01 da                	add    edx,ebx
c0007d30:	8a 0a                	mov    cl,BYTE PTR [edx]
c0007d32:	09 c8                	or     eax,ecx
c0007d34:	88 02                	mov    BYTE PTR [edx],al
c0007d36:	5b                   	pop    ebx
c0007d37:	5e                   	pop    esi
c0007d38:	5f                   	pop    edi
c0007d39:	c3                   	ret    

c0007d3a <Phys::getPageState(unsigned long)>:
c0007d3a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007d3e:	8b 15 b8 36 02 c0    	mov    edx,DWORD PTR ds:0xc00236b8
c0007d44:	89 c8                	mov    eax,ecx
c0007d46:	83 e1 07             	and    ecx,0x7
c0007d49:	c1 e8 03             	shr    eax,0x3
c0007d4c:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0007d50:	d3 f8                	sar    eax,cl
c0007d52:	83 e0 01             	and    eax,0x1
c0007d55:	c3                   	ret    

c0007d56 <Phys::freePage(unsigned long)>:
c0007d56:	53                   	push   ebx
c0007d57:	83 ec 08             	sub    esp,0x8
c0007d5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d5e:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007d64:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007d6a:	76 41                	jbe    c0007dad <Phys::freePage(unsigned long)+0x57>
c0007d6c:	c1 e8 0c             	shr    eax,0xc
c0007d6f:	50                   	push   eax
c0007d70:	89 c3                	mov    ebx,eax
c0007d72:	e8 c3 ff ff ff       	call   c0007d3a <Phys::getPageState(unsigned long)>
c0007d77:	5a                   	pop    edx
c0007d78:	84 c0                	test   al,al
c0007d7a:	74 20                	je     c0007d9c <Phys::freePage(unsigned long)+0x46>
c0007d7c:	83 ec 08             	sub    esp,0x8
c0007d7f:	a1 e4 6e 02 c0       	mov    eax,ds:0xc0026ee4
c0007d84:	6a 00                	push   0x0
c0007d86:	83 e8 01             	sub    eax,0x1
c0007d89:	53                   	push   ebx
c0007d8a:	a3 e4 6e 02 c0       	mov    ds:0xc0026ee4,eax
c0007d8f:	e8 66 ff ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007d94:	83 c4 10             	add    esp,0x10
c0007d97:	83 c4 08             	add    esp,0x8
c0007d9a:	5b                   	pop    ebx
c0007d9b:	c3                   	ret    
c0007d9c:	c7 44 24 10 31 0e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020e31
c0007da4:	83 c4 08             	add    esp,0x8
c0007da7:	5b                   	pop    ebx
c0007da8:	e9 02 99 00 00       	jmp    c00116af <KePanic(char const*)>
c0007dad:	68 00 10 00 00       	push   0x1000
c0007db2:	50                   	push   eax
c0007db3:	e8 07 ff ff ff       	call   c0007cbf <Phys::freeDMA(unsigned long, unsigned long)>
c0007db8:	59                   	pop    ecx
c0007db9:	5b                   	pop    ebx
c0007dba:	83 c4 08             	add    esp,0x8
c0007dbd:	5b                   	pop    ebx
c0007dbe:	c3                   	ret    

c0007dbf <Phys::allocatePage()>:
c0007dbf:	56                   	push   esi
c0007dc0:	53                   	push   ebx
c0007dc1:	83 ec 14             	sub    esp,0x14
c0007dc4:	8b 35 d8 6e 02 c0    	mov    esi,DWORD PTR ds:0xc0026ed8
c0007dca:	89 f3                	mov    ebx,esi
c0007dcc:	eb 0a                	jmp    c0007dd8 <Phys::allocatePage()+0x19>
c0007dce:	89 1d d8 6e 02 c0    	mov    DWORD PTR ds:0xc0026ed8,ebx
c0007dd4:	39 de                	cmp    esi,ebx
c0007dd6:	74 26                	je     c0007dfe <Phys::allocatePage()+0x3f>
c0007dd8:	53                   	push   ebx
c0007dd9:	e8 5c ff ff ff       	call   c0007d3a <Phys::getPageState(unsigned long)>
c0007dde:	5a                   	pop    edx
c0007ddf:	84 c0                	test   al,al
c0007de1:	74 67                	je     c0007e4a <Phys::allocatePage()+0x8b>
c0007de3:	83 c3 01             	add    ebx,0x1
c0007de6:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007dec:	75 e0                	jne    c0007dce <Phys::allocatePage()+0xf>
c0007dee:	31 db                	xor    ebx,ebx
c0007df0:	c7 05 d8 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026ed8,0x0
c0007dfa:	39 de                	cmp    esi,ebx
c0007dfc:	75 da                	jne    c0007dd8 <Phys::allocatePage()+0x19>
c0007dfe:	83 ec 0c             	sub    esp,0xc
c0007e01:	a0 fc 6e 02 c0       	mov    al,ds:0xc0026efc
c0007e06:	83 f0 01             	xor    eax,0x1
c0007e09:	a2 fc 6e 02 c0       	mov    ds:0xc0026efc,al
c0007e0e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007e13:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007e16:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007e1c:	50                   	push   eax
c0007e1d:	e8 a8 27 00 00       	call   c000a5ca <VAS::scanForEviction()>
c0007e22:	83 c4 10             	add    esp,0x10
c0007e25:	85 c0                	test   eax,eax
c0007e27:	75 48                	jne    c0007e71 <Phys::allocatePage()+0xb2>
c0007e29:	83 ec 0c             	sub    esp,0xc
c0007e2c:	68 b4 0d 02 c0       	push   0xc0020db4
c0007e31:	e8 79 98 00 00       	call   c00116af <KePanic(char const*)>
c0007e36:	83 c4 10             	add    esp,0x10
c0007e39:	8b 1d d8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026ed8
c0007e3f:	53                   	push   ebx
c0007e40:	e8 f5 fe ff ff       	call   c0007d3a <Phys::getPageState(unsigned long)>
c0007e45:	5a                   	pop    edx
c0007e46:	84 c0                	test   al,al
c0007e48:	75 99                	jne    c0007de3 <Phys::allocatePage()+0x24>
c0007e4a:	6a 01                	push   0x1
c0007e4c:	53                   	push   ebx
c0007e4d:	e8 a8 fe ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007e52:	8b 15 e4 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026ee4
c0007e58:	a1 d8 6e 02 c0       	mov    eax,ds:0xc0026ed8
c0007e5d:	83 c2 01             	add    edx,0x1
c0007e60:	59                   	pop    ecx
c0007e61:	89 15 e4 6e 02 c0    	mov    DWORD PTR ds:0xc0026ee4,edx
c0007e67:	c1 e0 0c             	shl    eax,0xc
c0007e6a:	5b                   	pop    ebx
c0007e6b:	83 c4 14             	add    esp,0x14
c0007e6e:	5b                   	pop    ebx
c0007e6f:	5e                   	pop    esi
c0007e70:	c3                   	ret    
c0007e71:	83 ec 08             	sub    esp,0x8
c0007e74:	89 c2                	mov    edx,eax
c0007e76:	6a 01                	push   0x1
c0007e78:	c1 ea 0c             	shr    edx,0xc
c0007e7b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007e7f:	52                   	push   edx
c0007e80:	e8 75 fe ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007e85:	83 c4 10             	add    esp,0x10
c0007e88:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007e8c:	eb dd                	jmp    c0007e6b <Phys::allocatePage()+0xac>

c0007e8e <Phys::allocateContiguousPages(int)>:
c0007e8e:	57                   	push   edi
c0007e8f:	56                   	push   esi
c0007e90:	53                   	push   ebx
c0007e91:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007e95:	fa                   	cli    
c0007e96:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007e9b:	31 db                	xor    ebx,ebx
c0007e9d:	83 c0 01             	add    eax,0x1
c0007ea0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0007ea5:	85 db                	test   ebx,ebx
c0007ea7:	75 11                	jne    c0007eba <Phys::allocateContiguousPages(int)+0x2c>
c0007ea9:	e8 11 ff ff ff       	call   c0007dbf <Phys::allocatePage()>
c0007eae:	83 fe 01             	cmp    esi,0x1
c0007eb1:	89 c7                	mov    edi,eax
c0007eb3:	74 21                	je     c0007ed6 <Phys::allocateContiguousPages(int)+0x48>
c0007eb5:	bb 01 00 00 00       	mov    ebx,0x1
c0007eba:	e8 00 ff ff ff       	call   c0007dbf <Phys::allocatePage()>
c0007ebf:	89 da                	mov    edx,ebx
c0007ec1:	c1 e2 0c             	shl    edx,0xc
c0007ec4:	01 fa                	add    edx,edi
c0007ec6:	39 c2                	cmp    edx,eax
c0007ec8:	74 22                	je     c0007eec <Phys::allocateContiguousPages(int)+0x5e>
c0007eca:	bb 01 00 00 00       	mov    ebx,0x1
c0007ecf:	89 c7                	mov    edi,eax
c0007ed1:	83 fe 01             	cmp    esi,0x1
c0007ed4:	75 e4                	jne    c0007eba <Phys::allocateContiguousPages(int)+0x2c>
c0007ed6:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007edb:	83 e8 01             	sub    eax,0x1
c0007ede:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0007ee3:	75 01                	jne    c0007ee6 <Phys::allocateContiguousPages(int)+0x58>
c0007ee5:	fb                   	sti    
c0007ee6:	89 f8                	mov    eax,edi
c0007ee8:	5b                   	pop    ebx
c0007ee9:	5e                   	pop    esi
c0007eea:	5f                   	pop    edi
c0007eeb:	c3                   	ret    
c0007eec:	83 c3 01             	add    ebx,0x1
c0007eef:	39 f3                	cmp    ebx,esi
c0007ef1:	75 b2                	jne    c0007ea5 <Phys::allocateContiguousPages(int)+0x17>
c0007ef3:	eb e1                	jmp    c0007ed6 <Phys::allocateContiguousPages(int)+0x48>

c0007ef5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007ef5:	56                   	push   esi
c0007ef6:	53                   	push   ebx
c0007ef7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007efb:	39 1d dc 6e 02 c0    	cmp    DWORD PTR ds:0xc0026edc,ebx
c0007f01:	73 06                	jae    c0007f09 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007f03:	89 1d dc 6e 02 c0    	mov    DWORD PTR ds:0xc0026edc,ebx
c0007f09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f0d:	c1 eb 0c             	shr    ebx,0xc
c0007f10:	c1 e8 0c             	shr    eax,0xc
c0007f13:	39 d8                	cmp    eax,ebx
c0007f15:	73 13                	jae    c0007f2a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007f17:	6a 00                	push   0x0
c0007f19:	8d 70 01             	lea    esi,[eax+0x1]
c0007f1c:	50                   	push   eax
c0007f1d:	e8 d8 fd ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007f22:	5a                   	pop    edx
c0007f23:	89 f0                	mov    eax,esi
c0007f25:	59                   	pop    ecx
c0007f26:	39 f3                	cmp    ebx,esi
c0007f28:	75 ed                	jne    c0007f17 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007f2a:	5b                   	pop    ebx
c0007f2b:	5e                   	pop    esi
c0007f2c:	c3                   	ret    

c0007f2d <Phys::physicalMemorySetup(unsigned int)>:
c0007f2d:	55                   	push   ebp
c0007f2e:	57                   	push   edi
c0007f2f:	56                   	push   esi
c0007f30:	53                   	push   ebx
c0007f31:	83 ec 40             	sub    esp,0x40
c0007f34:	6a 10                	push   0x10
c0007f36:	6a 00                	push   0x0
c0007f38:	68 ec 6e 02 c0       	push   0xc0026eec
c0007f3d:	e8 ae 85 ff ff       	call   c00004f0 <memset>
c0007f42:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007f46:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007f4b:	05 00 10 00 00       	add    eax,0x1000
c0007f50:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007f54:	5b                   	pop    ebx
c0007f55:	31 db                	xor    ebx,ebx
c0007f57:	5e                   	pop    esi
c0007f58:	50                   	push   eax
c0007f59:	68 47 0e 02 c0       	push   0xc0020e47
c0007f5e:	e8 e2 29 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0007f63:	83 c4 10             	add    esp,0x10
c0007f66:	83 ec 08             	sub    esp,0x8
c0007f69:	6a 01                	push   0x1
c0007f6b:	53                   	push   ebx
c0007f6c:	83 c3 01             	add    ebx,0x1
c0007f6f:	e8 86 fd ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007f74:	83 c4 10             	add    esp,0x10
c0007f77:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007f7d:	75 e7                	jne    c0007f66 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007f7f:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c0007f86:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c0007f8d:	c1 e0 08             	shl    eax,0x8
c0007f90:	09 c2                	or     edx,eax
c0007f92:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0007f96:	0f 84 98 01 00 00    	je     c0008134 <Phys::physicalMemorySetup(unsigned int)+0x207>
c0007f9c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007fa0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007fa8:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007fad:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007fb1:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007fb9:	eb 1c                	jmp    c0007fd7 <Phys::physicalMemorySetup(unsigned int)+0xaa>
c0007fbb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0007fbf:	83 c3 18             	add    ebx,0x18
c0007fc2:	83 c6 01             	add    esi,0x1
c0007fc5:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0007fc9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007fcd:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0007fd1:	0f 84 6d 01 00 00    	je     c0008144 <Phys::physicalMemorySetup(unsigned int)+0x217>
c0007fd7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0007fda:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007fdd:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0007fe0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007fe4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007fe8:	8b 33                	mov    esi,DWORD PTR [ebx]
c0007fea:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0007fed:	01 f0                	add    eax,esi
c0007fef:	55                   	push   ebp
c0007ff0:	11 fa                	adc    edx,edi
c0007ff2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007ff6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0007ffa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007ffe:	51                   	push   ecx
c0007fff:	56                   	push   esi
c0008000:	68 e4 0d 02 c0       	push   0xc0020de4
c0008005:	e8 3b 29 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000800a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000800e:	83 c4 10             	add    esp,0x10
c0008011:	09 f8                	or     eax,edi
c0008013:	0f 85 2b 01 00 00    	jne    c0008144 <Phys::physicalMemorySetup(unsigned int)+0x217>
c0008019:	83 fd 01             	cmp    ebp,0x1
c000801c:	75 9d                	jne    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c000801e:	ba 00 00 08 00       	mov    edx,0x80000
c0008023:	89 c1                	mov    ecx,eax
c0008025:	39 f2                	cmp    edx,esi
c0008027:	19 f9                	sbb    ecx,edi
c0008029:	0f 82 ab 00 00 00    	jb     c00080da <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c000802f:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0008033:	89 c1                	mov    ecx,eax
c0008035:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0008039:	0f 83 9b 00 00 00    	jae    c00080da <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c000803f:	ba 00 00 0a 00       	mov    edx,0xa0000
c0008044:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008048:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000804c:	39 fa                	cmp    edx,edi
c000804e:	19 e8                	sbb    eax,ebp
c0008050:	0f 82 b0 01 00 00    	jb     c0008206 <Phys::physicalMemorySetup(unsigned int)+0x2d9>
c0008056:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000805a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000805e:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0008064:	ba ff 1f 00 00       	mov    edx,0x1fff
c0008069:	83 d5 ff             	adc    ebp,0xffffffff
c000806c:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0008070:	31 c0                	xor    eax,eax
c0008072:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0008076:	39 fa                	cmp    edx,edi
c0008078:	89 c1                	mov    ecx,eax
c000807a:	19 e9                	sbb    ecx,ebp
c000807c:	0f 83 39 ff ff ff    	jae    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0008082:	be 00 00 08 00       	mov    esi,0x80000
c0008087:	83 ec 04             	sub    esp,0x4
c000808a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000808e:	57                   	push   edi
c000808f:	56                   	push   esi
c0008090:	68 08 0e 02 c0       	push   0xc0020e08
c0008095:	e8 ab 28 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000809a:	5d                   	pop    ebp
c000809b:	58                   	pop    eax
c000809c:	57                   	push   edi
c000809d:	56                   	push   esi
c000809e:	e8 52 fe ff ff       	call   c0007ef5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00080a3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00080a7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00080ab:	83 c4 0c             	add    esp,0xc
c00080ae:	0f ac d0 0c          	shrd   eax,edx,0xc
c00080b2:	8b 15 e8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026ee8
c00080b8:	01 d0                	add    eax,edx
c00080ba:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00080c1:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c00080c6:	52                   	push   edx
c00080c7:	50                   	push   eax
c00080c8:	68 6d 0e 02 c0       	push   0xc0020e6d
c00080cd:	e8 73 28 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00080d2:	83 c4 10             	add    esp,0x10
c00080d5:	e9 e1 fe ff ff       	jmp    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00080da:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00080de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00080e2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00080e6:	39 ea                	cmp    edx,ebp
c00080e8:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c00080ec:	0f 82 c9 fe ff ff    	jb     c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00080f2:	ba ff 1f 00 00       	mov    edx,0x1fff
c00080f7:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00080fb:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c00080ff:	0f 83 b6 fe ff ff    	jae    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0008105:	39 ee                	cmp    esi,ebp
c0008107:	89 f8                	mov    eax,edi
c0008109:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000810d:	0f 83 74 ff ff ff    	jae    c0008087 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0008113:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008117:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000811b:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000811f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008123:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0008127:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000812b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000812f:	e9 53 ff ff ff       	jmp    c0008087 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0008134:	83 ec 0c             	sub    esp,0xc
c0008137:	68 5f 0e 02 c0       	push   0xc0020e5f
c000813c:	e8 6e 95 00 00       	call   c00116af <KePanic(char const*)>
c0008141:	83 c4 10             	add    esp,0x10
c0008144:	83 ec 08             	sub    esp,0x8
c0008147:	bb 60 00 00 00       	mov    ebx,0x60
c000814c:	6a 00                	push   0x0
c000814e:	6a 06                	push   0x6
c0008150:	e8 a5 fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0008155:	58                   	pop    eax
c0008156:	5a                   	pop    edx
c0008157:	6a 00                	push   0x0
c0008159:	6a 07                	push   0x7
c000815b:	e8 9a fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0008160:	8b 0d e8 6e 02 c0    	mov    ecx,DWORD PTR ds:0xc0026ee8
c0008166:	83 c4 10             	add    esp,0x10
c0008169:	83 c1 02             	add    ecx,0x2
c000816c:	89 0d e8 6e 02 c0    	mov    DWORD PTR ds:0xc0026ee8,ecx
c0008172:	83 ec 08             	sub    esp,0x8
c0008175:	6a 00                	push   0x0
c0008177:	53                   	push   ebx
c0008178:	83 c3 01             	add    ebx,0x1
c000817b:	e8 7a fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0008180:	83 c4 10             	add    esp,0x10
c0008183:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0008189:	75 e7                	jne    c0008172 <Phys::physicalMemorySetup(unsigned int)+0x245>
c000818b:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c0008190:	bb 40 01 00 00       	mov    ebx,0x140
c0008195:	83 c0 20             	add    eax,0x20
c0008198:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c000819d:	eb 26                	jmp    c00081c5 <Phys::physicalMemorySetup(unsigned int)+0x298>
c000819f:	83 ec 08             	sub    esp,0x8
c00081a2:	6a 00                	push   0x0
c00081a4:	53                   	push   ebx
c00081a5:	83 c3 01             	add    ebx,0x1
c00081a8:	e8 4d fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c00081ad:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c00081b2:	83 c4 10             	add    esp,0x10
c00081b5:	83 c0 01             	add    eax,0x1
c00081b8:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c00081be:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c00081c3:	74 07                	je     c00081cc <Phys::physicalMemorySetup(unsigned int)+0x29f>
c00081c5:	3d ff 03 00 00       	cmp    eax,0x3ff
c00081ca:	7e d3                	jle    c000819f <Phys::physicalMemorySetup(unsigned int)+0x272>
c00081cc:	bb d0 01 00 00       	mov    ebx,0x1d0
c00081d1:	3d ff 07 00 00       	cmp    eax,0x7ff
c00081d6:	7f 26                	jg     c00081fe <Phys::physicalMemorySetup(unsigned int)+0x2d1>
c00081d8:	83 ec 08             	sub    esp,0x8
c00081db:	6a 00                	push   0x0
c00081dd:	53                   	push   ebx
c00081de:	83 c3 01             	add    ebx,0x1
c00081e1:	e8 14 fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c00081e6:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c00081eb:	83 c4 10             	add    esp,0x10
c00081ee:	83 c0 01             	add    eax,0x1
c00081f1:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c00081f7:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c00081fc:	75 d3                	jne    c00081d1 <Phys::physicalMemorySetup(unsigned int)+0x2a4>
c00081fe:	83 c4 3c             	add    esp,0x3c
c0008201:	5b                   	pop    ebx
c0008202:	5e                   	pop    esi
c0008203:	5f                   	pop    edi
c0008204:	5d                   	pop    ebp
c0008205:	c3                   	ret    
c0008206:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000820e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0008216:	e9 3b fe ff ff       	jmp    c0008056 <Phys::physicalMemorySetup(unsigned int)+0x129>
c000821b:	90                   	nop

c000821c <Pipe::isAtty()>:
c000821c:	31 c0                	xor    eax,eax
c000821e:	c3                   	ret    
c000821f:	90                   	nop

c0008220 <Pipe::~Pipe()>:
c0008220:	83 ec 0c             	sub    esp,0xc
c0008223:	ba cc 0e 02 c0       	mov    edx,0xc0020ecc
c0008228:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000822c:	89 10                	mov    DWORD PTR [eax],edx
c000822e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008232:	83 ec 0c             	sub    esp,0xc
c0008235:	50                   	push   eax
c0008236:	e8 69 11 00 00       	call   c00093a4 <UnixFile::~UnixFile()>
c000823b:	83 c4 10             	add    esp,0x10
c000823e:	90                   	nop
c000823f:	83 c4 0c             	add    esp,0xc
c0008242:	c3                   	ret    
c0008243:	90                   	nop

c0008244 <Pipe::~Pipe()>:
c0008244:	83 ec 0c             	sub    esp,0xc
c0008247:	83 ec 0c             	sub    esp,0xc
c000824a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000824e:	e8 cd ff ff ff       	call   c0008220 <Pipe::~Pipe()>
c0008253:	83 c4 10             	add    esp,0x10
c0008256:	83 ec 08             	sub    esp,0x8
c0008259:	6a 20                	push   0x20
c000825b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000825f:	e8 b4 25 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c0008264:	83 c4 10             	add    esp,0x10
c0008267:	83 c4 0c             	add    esp,0xc
c000826a:	c3                   	ret    
c000826b:	90                   	nop

c000826c <Pipe::write(unsigned long long, void*, int*)>:
c000826c:	55                   	push   ebp
c000826d:	57                   	push   edi
c000826e:	56                   	push   esi
c000826f:	53                   	push   ebx
c0008270:	83 ec 1c             	sub    esp,0x1c
c0008273:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008277:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000827b:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000827e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008282:	89 04 24             	mov    DWORD PTR [esp],eax
c0008285:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008289:	89 d8                	mov    eax,ebx
c000828b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000828e:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0008292:	89 d6                	mov    esi,edx
c0008294:	89 d7                	mov    edi,edx
c0008296:	c1 ff 1f             	sar    edi,0x1f
c0008299:	03 34 24             	add    esi,DWORD PTR [esp]
c000829c:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00082a0:	c1 f8 1f             	sar    eax,0x1f
c00082a3:	39 f3                	cmp    ebx,esi
c00082a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00082a9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082ad:	19 f8                	sbb    eax,edi
c00082af:	b8 01 00 00 00       	mov    eax,0x1
c00082b4:	72 6e                	jb     c0008324 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c00082b6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00082b9:	01 d0                	add    eax,edx
c00082bb:	99                   	cdq    
c00082bc:	f7 fb                	idiv   ebx
c00082be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082c2:	29 d3                	sub    ebx,edx
c00082c4:	89 d7                	mov    edi,edx
c00082c6:	89 de                	mov    esi,ebx
c00082c8:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00082cb:	c1 fb 1f             	sar    ebx,0x1f
c00082ce:	39 f2                	cmp    edx,esi
c00082d0:	19 d8                	sbb    eax,ebx
c00082d2:	b8 00 00 00 00       	mov    eax,0x0
c00082d7:	72 04                	jb     c00082dd <Pipe::write(unsigned long long, void*, int*)+0x71>
c00082d9:	89 d0                	mov    eax,edx
c00082db:	29 f0                	sub    eax,esi
c00082dd:	89 d3                	mov    ebx,edx
c00082df:	29 c3                	sub    ebx,eax
c00082e1:	74 0b                	je     c00082ee <Pipe::write(unsigned long long, void*, int*)+0x82>
c00082e3:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c00082e6:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00082ea:	89 d9                	mov    ecx,ebx
c00082ec:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00082ee:	85 c0                	test   eax,eax
c00082f0:	74 0d                	je     c00082ff <Pipe::write(unsigned long long, void*, int*)+0x93>
c00082f2:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00082f6:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00082f9:	89 de                	mov    esi,ebx
c00082fb:	89 c1                	mov    ecx,eax
c00082fd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00082ff:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0008302:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008307:	75 10                	jne    c0008319 <Pipe::write(unsigned long long, void*, int*)+0xad>
c0008309:	83 ec 0c             	sub    esp,0xc
c000830c:	68 89 0e 02 c0       	push   0xc0020e89
c0008311:	e8 99 93 00 00       	call   c00116af <KePanic(char const*)>
c0008316:	83 c4 10             	add    esp,0x10
c0008319:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000831d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008320:	89 08                	mov    DWORD PTR [eax],ecx
c0008322:	31 c0                	xor    eax,eax
c0008324:	83 c4 1c             	add    esp,0x1c
c0008327:	5b                   	pop    ebx
c0008328:	5e                   	pop    esi
c0008329:	5f                   	pop    edi
c000832a:	5d                   	pop    ebp
c000832b:	c3                   	ret    

c000832c <Pipe::read(unsigned long long, void*, int*)>:
c000832c:	55                   	push   ebp
c000832d:	57                   	push   edi
c000832e:	56                   	push   esi
c000832f:	53                   	push   ebx
c0008330:	83 ec 1c             	sub    esp,0x1c
c0008333:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008337:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000833b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000833f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0008342:	89 c8                	mov    eax,ecx
c0008344:	99                   	cdq    
c0008345:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0008349:	74 24                	je     c000836f <Pipe::read(unsigned long long, void*, int*)+0x43>
c000834b:	39 f9                	cmp    ecx,edi
c000834d:	89 d1                	mov    ecx,edx
c000834f:	19 f1                	sbb    ecx,esi
c0008351:	73 1c                	jae    c000836f <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008353:	fa                   	cli    
c0008354:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c000835a:	e8 f1 dd 00 00       	call   c0016150 <schedule()>
c000835f:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0008364:	48                   	dec    eax
c0008365:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000836a:	75 d3                	jne    c000833f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000836c:	fb                   	sti    
c000836d:	eb d0                	jmp    c000833f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000836f:	39 f8                	cmp    eax,edi
c0008371:	89 d1                	mov    ecx,edx
c0008373:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008376:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000837a:	19 f1                	sbb    ecx,esi
c000837c:	73 07                	jae    c0008385 <Pipe::read(unsigned long long, void*, int*)+0x59>
c000837e:	89 04 24             	mov    DWORD PTR [esp],eax
c0008381:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008385:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c0008388:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000838b:	29 f7                	sub    edi,esi
c000838d:	89 f8                	mov    eax,edi
c000838f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0008393:	99                   	cdq    
c0008394:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0008397:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000839b:	19 d0                	sbb    eax,edx
c000839d:	73 07                	jae    c00083a6 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000839f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00083a2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00083a6:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c00083a9:	89 ea                	mov    edx,ebp
c00083ab:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c00083af:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00083b4:	74 0d                	je     c00083c3 <Pipe::read(unsigned long long, void*, int*)+0x97>
c00083b6:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00083b9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00083bd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00083c1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083c3:	85 d2                	test   edx,edx
c00083c5:	74 11                	je     c00083d8 <Pipe::read(unsigned long long, void*, int*)+0xac>
c00083c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083cb:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00083ce:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00083d2:	89 d1                	mov    ecx,edx
c00083d4:	89 c7                	mov    edi,eax
c00083d6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083d8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00083db:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00083de:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00083e1:	99                   	cdq    
c00083e2:	89 f7                	mov    edi,esi
c00083e4:	03 04 24             	add    eax,DWORD PTR [esp]
c00083e7:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c00083eb:	c1 ff 1f             	sar    edi,0x1f
c00083ee:	57                   	push   edi
c00083ef:	56                   	push   esi
c00083f0:	52                   	push   edx
c00083f1:	50                   	push   eax
c00083f2:	e8 c9 74 01 00       	call   c001f8c0 <__umoddi3>
c00083f7:	83 c4 10             	add    esp,0x10
c00083fa:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00083fd:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008402:	75 10                	jne    c0008414 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c0008404:	83 ec 0c             	sub    esp,0xc
c0008407:	68 a6 0e 02 c0       	push   0xc0020ea6
c000840c:	e8 9e 92 00 00       	call   c00116af <KePanic(char const*)>
c0008411:	83 c4 10             	add    esp,0x10
c0008414:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008418:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000841b:	89 10                	mov    DWORD PTR [eax],edx
c000841d:	83 c4 1c             	add    esp,0x1c
c0008420:	31 c0                	xor    eax,eax
c0008422:	5b                   	pop    ebx
c0008423:	5e                   	pop    esi
c0008424:	5f                   	pop    edi
c0008425:	5d                   	pop    ebp
c0008426:	c3                   	ret    
c0008427:	90                   	nop

c0008428 <Pipe::Pipe(int)>:
c0008428:	83 ec 0c             	sub    esp,0xc
c000842b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000842f:	83 ec 08             	sub    esp,0x8
c0008432:	6a 00                	push   0x0
c0008434:	50                   	push   eax
c0008435:	e8 84 0d 00 00       	call   c00091be <UnixFile::UnixFile(int)>
c000843a:	83 c4 10             	add    esp,0x10
c000843d:	ba cc 0e 02 c0       	mov    edx,0xc0020ecc
c0008442:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008446:	89 10                	mov    DWORD PTR [eax],edx
c0008448:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000844c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008450:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008453:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008457:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000845e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008462:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0008469:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000846d:	83 ec 0c             	sub    esp,0xc
c0008470:	50                   	push   eax
c0008471:	e8 40 f6 ff ff       	call   c0007ab6 <malloc>
c0008476:	83 c4 10             	add    esp,0x10
c0008479:	89 c2                	mov    edx,eax
c000847b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000847f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008482:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008486:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000848a:	90                   	nop
c000848b:	83 c4 0c             	add    esp,0xc
c000848e:	c3                   	ret    
c000848f:	90                   	nop

c0008490 <VgaText::isAtty()>:
c0008490:	b0 01                	mov    al,0x1
c0008492:	c3                   	ret    
c0008493:	90                   	nop

c0008494 <VgaText::~VgaText()>:
c0008494:	83 ec 0c             	sub    esp,0xc
c0008497:	ba 14 0f 02 c0       	mov    edx,0xc0020f14
c000849c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084a0:	89 10                	mov    DWORD PTR [eax],edx
c00084a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084a6:	83 ec 0c             	sub    esp,0xc
c00084a9:	50                   	push   eax
c00084aa:	e8 f5 0e 00 00       	call   c00093a4 <UnixFile::~UnixFile()>
c00084af:	83 c4 10             	add    esp,0x10
c00084b2:	90                   	nop
c00084b3:	83 c4 0c             	add    esp,0xc
c00084b6:	c3                   	ret    
c00084b7:	90                   	nop

c00084b8 <VgaText::~VgaText()>:
c00084b8:	83 ec 0c             	sub    esp,0xc
c00084bb:	83 ec 0c             	sub    esp,0xc
c00084be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084c2:	e8 cd ff ff ff       	call   c0008494 <VgaText::~VgaText()>
c00084c7:	83 c4 10             	add    esp,0x10
c00084ca:	83 ec 08             	sub    esp,0x8
c00084cd:	68 84 01 00 00       	push   0x184
c00084d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084d6:	e8 3d 23 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c00084db:	83 c4 10             	add    esp,0x10
c00084de:	83 c4 0c             	add    esp,0xc
c00084e1:	c3                   	ret    

c00084e2 <VgaText::read(unsigned long long, void*, int*)>:
c00084e2:	83 ec 10             	sub    esp,0x10
c00084e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00084ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084f1:	e8 3a 54 00 00       	call   c000d930 <readKeyboard(VgaText*, char*, unsigned long)>
c00084f6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00084fa:	89 02                	mov    DWORD PTR [edx],eax
c00084fc:	31 c0                	xor    eax,eax
c00084fe:	83 c4 1c             	add    esp,0x1c
c0008501:	c3                   	ret    

c0008502 <setTerminalScrollLock(bool)>:
c0008502:	c3                   	ret    

c0008503 <doTerminalCycle()>:
c0008503:	c3                   	ret    

c0008504 <addToTerminalCycle(VgaText*)>:
c0008504:	c3                   	ret    

c0008505 <scrollTerminalScrollLock(int)>:
c0008505:	c3                   	ret    

c0008506 <VgaText::updateTitle()>:
c0008506:	c3                   	ret    
c0008507:	90                   	nop

c0008508 <VgaText::load()>:
c0008508:	c3                   	ret    
c0008509:	90                   	nop

c000850a <VgaText::updateCursor()>:
c000850a:	83 ec 14             	sub    esp,0x14
c000850d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008511:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008514:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008517:	e8 ec 09 01 00       	call   c0018f08 <HalConsoleCursorUpdate(int, int)>
c000851c:	83 c4 1c             	add    esp,0x1c
c000851f:	c3                   	ret    

c0008520 <VgaText::doANSI_SGR(int)>:
c0008520:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008524:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008528:	85 d2                	test   edx,edx
c000852a:	75 0b                	jne    c0008537 <VgaText::doANSI_SGR(int)+0x17>
c000852c:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000852f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008532:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0008535:	eb 59                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c0008537:	83 fa 07             	cmp    edx,0x7
c000853a:	75 0b                	jne    c0008547 <VgaText::doANSI_SGR(int)+0x27>
c000853c:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000853f:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0008542:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0008545:	eb 49                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c0008547:	83 fa 1b             	cmp    edx,0x1b
c000854a:	74 e0                	je     c000852c <VgaText::doANSI_SGR(int)+0xc>
c000854c:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000854f:	83 f9 07             	cmp    ecx,0x7
c0008552:	77 09                	ja     c000855d <VgaText::doANSI_SGR(int)+0x3d>
c0008554:	8b 14 8d e0 36 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdc920]
c000855b:	eb 20                	jmp    c000857d <VgaText::doANSI_SGR(int)+0x5d>
c000855d:	8d 4a d8             	lea    ecx,[edx-0x28]
c0008560:	83 f9 07             	cmp    ecx,0x7
c0008563:	77 09                	ja     c000856e <VgaText::doANSI_SGR(int)+0x4e>
c0008565:	8b 14 8d e0 36 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdc920]
c000856c:	eb 22                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c000856e:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008571:	83 f9 07             	cmp    ecx,0x7
c0008574:	77 0b                	ja     c0008581 <VgaText::doANSI_SGR(int)+0x61>
c0008576:	8b 14 95 98 35 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdca68]
c000857d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008580:	c3                   	ret    
c0008581:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0008584:	83 f9 07             	cmp    ecx,0x7
c0008587:	77 0a                	ja     c0008593 <VgaText::doANSI_SGR(int)+0x73>
c0008589:	8b 14 95 70 35 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdca90]
c0008590:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008593:	c3                   	ret    

c0008594 <VgaText::setDefaultBgColour(VgaColour)>:
c0008594:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008598:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000859c:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000859f:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085a2:	c3                   	ret    
c00085a3:	90                   	nop

c00085a4 <VgaText::setDefaultFgColour(VgaColour)>:
c00085a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085a8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085ac:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00085af:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00085b2:	c3                   	ret    
c00085b3:	90                   	nop

c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00085b4:	53                   	push   ebx
c00085b5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00085b9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00085bd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00085c1:	51                   	push   ecx
c00085c2:	e8 cd ff ff ff       	call   c0008594 <VgaText::setDefaultBgColour(VgaColour)>
c00085c7:	58                   	pop    eax
c00085c8:	5a                   	pop    edx
c00085c9:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00085cd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00085d1:	5b                   	pop    ebx
c00085d2:	eb d0                	jmp    c00085a4 <VgaText::setDefaultFgColour(VgaColour)>

c00085d4 <VgaText::setTitleTextColour(VgaColour)>:
c00085d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085dc:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00085df:	c3                   	ret    

c00085e0 <VgaText::setTitleColour(VgaColour)>:
c00085e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085e8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00085eb:	c3                   	ret    

c00085ec <VgaText::setTitle(char*)>:
c00085ec:	c3                   	ret    
c00085ed:	90                   	nop

c00085ee <VgaText::combineColours(unsigned char, unsigned char)>:
c00085ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085f2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00085f7:	83 e0 0f             	and    eax,0xf
c00085fa:	c1 e2 04             	shl    edx,0x4
c00085fd:	09 d0                	or     eax,edx
c00085ff:	c3                   	ret    

c0008600 <VgaText::scrollScreen()>:
c0008600:	55                   	push   ebp
c0008601:	57                   	push   edi
c0008602:	56                   	push   esi
c0008603:	be 01 00 00 00       	mov    esi,0x1
c0008608:	53                   	push   ebx
c0008609:	83 ec 0c             	sub    esp,0xc
c000860c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008610:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0008613:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0008619:	31 ff                	xor    edi,edi
c000861b:	01 e9                	add    ecx,ebp
c000861d:	8a 01                	mov    al,BYTE PTR [ecx]
c000861f:	83 fe 18             	cmp    esi,0x18
c0008622:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0008628:	75 20                	jne    c000864a <VgaText::scrollScreen()+0x4a>
c000862a:	f7 c7 01 00 00 00    	test   edi,0x1
c0008630:	74 15                	je     c0008647 <VgaText::scrollScreen()+0x47>
c0008632:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008636:	50                   	push   eax
c0008637:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000863b:	50                   	push   eax
c000863c:	e8 ad ff ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c0008641:	5a                   	pop    edx
c0008642:	5a                   	pop    edx
c0008643:	88 01                	mov    BYTE PTR [ecx],al
c0008645:	eb 03                	jmp    c000864a <VgaText::scrollScreen()+0x4a>
c0008647:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c000864a:	47                   	inc    edi
c000864b:	41                   	inc    ecx
c000864c:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0008652:	75 c9                	jne    c000861d <VgaText::scrollScreen()+0x1d>
c0008654:	46                   	inc    esi
c0008655:	83 fe 19             	cmp    esi,0x19
c0008658:	75 b9                	jne    c0008613 <VgaText::scrollScreen()+0x13>
c000865a:	39 1d 04 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f04,ebx
c0008660:	75 1f                	jne    c0008681 <VgaText::scrollScreen()+0x81>
c0008662:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0008666:	74 05                	je     c000866d <VgaText::scrollScreen()+0x6d>
c0008668:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000866b:	eb 14                	jmp    c0008681 <VgaText::scrollScreen()+0x81>
c000866d:	50                   	push   eax
c000866e:	50                   	push   eax
c000866f:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008673:	50                   	push   eax
c0008674:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008678:	50                   	push   eax
c0008679:	e8 1e 07 01 00       	call   c0018d9c <HalConsoleScroll(int, int)>
c000867e:	83 c4 10             	add    esp,0x10
c0008681:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0008685:	83 c4 0c             	add    esp,0xc
c0008688:	5b                   	pop    ebx
c0008689:	5e                   	pop    esi
c000868a:	5f                   	pop    edi
c000868b:	5d                   	pop    ebp
c000868c:	e9 79 fe ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008691:	90                   	nop

c0008692 <VgaText::combineCharAndColour(char, unsigned char)>:
c0008692:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0008697:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000869c:	c1 e0 08             	shl    eax,0x8
c000869f:	09 d0                	or     eax,edx
c00086a1:	c3                   	ret    

c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00086a2:	55                   	push   ebp
c00086a3:	57                   	push   edi
c00086a4:	56                   	push   esi
c00086a5:	53                   	push   ebx
c00086a6:	83 ec 1c             	sub    esp,0x1c
c00086a9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00086ad:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00086b1:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00086b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00086b9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00086bd:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00086c1:	0f b6 c3             	movzx  eax,bl
c00086c4:	50                   	push   eax
c00086c5:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00086ca:	50                   	push   eax
c00086cb:	e8 1e ff ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c00086d0:	5a                   	pop    edx
c00086d1:	0f b6 c0             	movzx  eax,al
c00086d4:	59                   	pop    ecx
c00086d5:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00086da:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00086de:	50                   	push   eax
c00086df:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00086e3:	e8 aa ff ff ff       	call   c0008692 <VgaText::combineCharAndColour(char, unsigned char)>
c00086e8:	5a                   	pop    edx
c00086e9:	6b d7 50             	imul   edx,edi,0x50
c00086ec:	59                   	pop    ecx
c00086ed:	01 f2                	add    edx,esi
c00086ef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00086f2:	0f b7 d2             	movzx  edx,dx
c00086f5:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c00086f9:	39 2d 04 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f04,ebp
c00086ff:	75 28                	jne    c0008729 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c0008701:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008705:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0008709:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c000870d:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008711:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0008715:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008719:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000871d:	83 c4 1c             	add    esp,0x1c
c0008720:	5b                   	pop    ebx
c0008721:	5e                   	pop    esi
c0008722:	5f                   	pop    edi
c0008723:	5d                   	pop    ebp
c0008724:	e9 7b 07 01 00       	jmp    c0018ea4 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008729:	83 c4 1c             	add    esp,0x1c
c000872c:	5b                   	pop    ebx
c000872d:	5e                   	pop    esi
c000872e:	5f                   	pop    edi
c000872f:	5d                   	pop    ebp
c0008730:	c3                   	ret    
c0008731:	90                   	nop

c0008732 <VgaText::getCursorX()>:
c0008732:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008736:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0008739:	c3                   	ret    

c000873a <VgaText::getCursorY()>:
c000873a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000873e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008741:	c3                   	ret    

c0008742 <VgaText::setCursor(int, int)>:
c0008742:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008746:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000874a:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000874d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008751:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008754:	e9 b1 fd ff ff       	jmp    c000850a <VgaText::updateCursor()>

c0008759 <setActiveTerminal(VgaText*)>:
c0008759:	53                   	push   ebx
c000875a:	83 ec 08             	sub    esp,0x8
c000875d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008761:	85 db                	test   ebx,ebx
c0008763:	75 11                	jne    c0008776 <setActiveTerminal(VgaText*)+0x1d>
c0008765:	c7 44 24 10 e0 0e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020ee0
c000876d:	83 c4 08             	add    esp,0x8
c0008770:	5b                   	pop    ebx
c0008771:	e9 39 8f 00 00       	jmp    c00116af <KePanic(char const*)>
c0008776:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c000877b:	85 c0                	test   eax,eax
c000877d:	74 0c                	je     c000878b <setActiveTerminal(VgaText*)+0x32>
c000877f:	83 ec 0c             	sub    esp,0xc
c0008782:	50                   	push   eax
c0008783:	e8 82 fd ff ff       	call   c000850a <VgaText::updateCursor()>
c0008788:	83 c4 10             	add    esp,0x10
c000878b:	89 1d 04 6f 02 c0    	mov    DWORD PTR ds:0xc0026f04,ebx
c0008791:	50                   	push   eax
c0008792:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008795:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008798:	53                   	push   ebx
c0008799:	e8 a4 ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c000879e:	83 c4 18             	add    esp,0x18
c00087a1:	5b                   	pop    ebx
c00087a2:	c3                   	ret    
c00087a3:	90                   	nop

c00087a4 <VgaText::clearScreen()>:
c00087a4:	57                   	push   edi
c00087a5:	56                   	push   esi
c00087a6:	31 f6                	xor    esi,esi
c00087a8:	53                   	push   ebx
c00087a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00087ad:	52                   	push   edx
c00087ae:	6a 00                	push   0x0
c00087b0:	6a 00                	push   0x0
c00087b2:	53                   	push   ebx
c00087b3:	e8 8a ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c00087b8:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087bf:	83 c4 10             	add    esp,0x10
c00087c2:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00087c5:	7e 20                	jle    c00087e7 <VgaText::clearScreen()+0x43>
c00087c7:	31 ff                	xor    edi,edi
c00087c9:	50                   	push   eax
c00087ca:	50                   	push   eax
c00087cb:	56                   	push   esi
c00087cc:	57                   	push   edi
c00087cd:	47                   	inc    edi
c00087ce:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087d1:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00087d4:	6a 20                	push   0x20
c00087d6:	53                   	push   ebx
c00087d7:	e8 c6 fe ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00087dc:	83 c4 20             	add    esp,0x20
c00087df:	83 ff 50             	cmp    edi,0x50
c00087e2:	75 e5                	jne    c00087c9 <VgaText::clearScreen()+0x25>
c00087e4:	46                   	inc    esi
c00087e5:	eb db                	jmp    c00087c2 <VgaText::clearScreen()+0x1e>
c00087e7:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00087ee:	5b                   	pop    ebx
c00087ef:	5e                   	pop    esi
c00087f0:	5f                   	pop    edi
c00087f1:	c3                   	ret    

c00087f2 <VgaText::setCursorX(int)>:
c00087f2:	83 ec 10             	sub    esp,0x10
c00087f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00087f9:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00087fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008800:	50                   	push   eax
c0008801:	e8 3c ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008806:	83 c4 1c             	add    esp,0x1c
c0008809:	c3                   	ret    

c000880a <VgaText::setCursorY(int)>:
c000880a:	83 ec 10             	sub    esp,0x10
c000880d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008811:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008815:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008818:	50                   	push   eax
c0008819:	e8 24 ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c000881e:	83 c4 1c             	add    esp,0x1c
c0008821:	c3                   	ret    

c0008822 <VgaText::incrementCursor(bool)>:
c0008822:	56                   	push   esi
c0008823:	53                   	push   ebx
c0008824:	51                   	push   ecx
c0008825:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008829:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000882d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008830:	40                   	inc    eax
c0008831:	83 f8 50             	cmp    eax,0x50
c0008834:	74 05                	je     c000883b <VgaText::incrementCursor(bool)+0x19>
c0008836:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008839:	eb 24                	jmp    c000885f <VgaText::incrementCursor(bool)+0x3d>
c000883b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000883e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008845:	8d 50 01             	lea    edx,[eax+0x1]
c0008848:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000884b:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000884e:	75 0f                	jne    c000885f <VgaText::incrementCursor(bool)+0x3d>
c0008850:	83 ec 0c             	sub    esp,0xc
c0008853:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008856:	53                   	push   ebx
c0008857:	e8 a4 fd ff ff       	call   c0008600 <VgaText::scrollScreen()>
c000885c:	83 c4 10             	add    esp,0x10
c000885f:	89 f0                	mov    eax,esi
c0008861:	84 c0                	test   al,al
c0008863:	74 0c                	je     c0008871 <VgaText::incrementCursor(bool)+0x4f>
c0008865:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008869:	5a                   	pop    edx
c000886a:	5b                   	pop    ebx
c000886b:	5e                   	pop    esi
c000886c:	e9 99 fc ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008871:	58                   	pop    eax
c0008872:	5b                   	pop    ebx
c0008873:	5e                   	pop    esi
c0008874:	c3                   	ret    
c0008875:	90                   	nop

c0008876 <VgaText::decrementCursor(bool)>:
c0008876:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000887a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000887e:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008881:	85 c0                	test   eax,eax
c0008883:	74 04                	je     c0008889 <VgaText::decrementCursor(bool)+0x13>
c0008885:	48                   	dec    eax
c0008886:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0008889:	84 c9                	test   cl,cl
c000888b:	74 09                	je     c0008896 <VgaText::decrementCursor(bool)+0x20>
c000888d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008891:	e9 74 fc ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008896:	c3                   	ret    
c0008897:	90                   	nop

c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0008898:	53                   	push   ebx
c0008899:	83 ec 08             	sub    esp,0x8
c000889c:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00088a1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088a5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00088a9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00088ad:	83 f8 07             	cmp    eax,0x7
c00088b0:	75 21                	jne    c00088d3 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00088b2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00088ba:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00088c2:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00088ca:	83 c4 08             	add    esp,0x8
c00088cd:	5b                   	pop    ebx
c00088ce:	e9 a8 3b 00 00       	jmp    c000c47b <Krnl::beep(int, int, bool)>
c00088d3:	83 f8 0d             	cmp    eax,0xd
c00088d6:	75 09                	jne    c00088e1 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00088d8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088df:	eb 2d                	jmp    c000890e <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00088e1:	83 f8 0a             	cmp    eax,0xa
c00088e4:	75 31                	jne    c0008917 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00088e6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00088e9:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088f0:	8d 50 01             	lea    edx,[eax+0x1]
c00088f3:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00088f6:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00088f9:	75 0f                	jne    c000890a <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c00088fb:	83 ec 0c             	sub    esp,0xc
c00088fe:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008901:	53                   	push   ebx
c0008902:	e8 f9 fc ff ff       	call   c0008600 <VgaText::scrollScreen()>
c0008907:	83 c4 10             	add    esp,0x10
c000890a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000890e:	83 c4 08             	add    esp,0x8
c0008911:	5b                   	pop    ebx
c0008912:	e9 f3 fb ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008917:	83 f8 08             	cmp    eax,0x8
c000891a:	75 25                	jne    c0008941 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c000891c:	50                   	push   eax
c000891d:	50                   	push   eax
c000891e:	6a 01                	push   0x1
c0008920:	53                   	push   ebx
c0008921:	e8 50 ff ff ff       	call   c0008876 <VgaText::decrementCursor(bool)>
c0008926:	5a                   	pop    edx
c0008927:	59                   	pop    ecx
c0008928:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000892b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000892e:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008931:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008934:	6a 20                	push   0x20
c0008936:	53                   	push   ebx
c0008937:	e8 66 fd ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000893c:	83 c4 28             	add    esp,0x28
c000893f:	5b                   	pop    ebx
c0008940:	c3                   	ret    
c0008941:	83 ec 08             	sub    esp,0x8
c0008944:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008947:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000894a:	51                   	push   ecx
c000894b:	52                   	push   edx
c000894c:	50                   	push   eax
c000894d:	53                   	push   ebx
c000894e:	e8 4f fd ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008953:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0008957:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000895f:	83 c4 28             	add    esp,0x28
c0008962:	5b                   	pop    ebx
c0008963:	e9 ba fe ff ff       	jmp    c0008822 <VgaText::incrementCursor(bool)>

c0008968 <VgaText::putchar(char)>:
c0008968:	57                   	push   edi
c0008969:	56                   	push   esi
c000896a:	53                   	push   ebx
c000896b:	83 ec 10             	sub    esp,0x10
c000896e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008972:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008976:	89 f8                	mov    eax,edi
c0008978:	0f be c0             	movsx  eax,al
c000897b:	83 f8 5b             	cmp    eax,0x5b
c000897e:	75 18                	jne    c0008998 <VgaText::putchar(char)+0x30>
c0008980:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008984:	74 20                	je     c00089a6 <VgaText::putchar(char)+0x3e>
c0008986:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000898c:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0008993:	e9 c1 00 00 00       	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c0008998:	83 f8 1b             	cmp    eax,0x1b
c000899b:	75 09                	jne    c00089a6 <VgaText::putchar(char)+0x3e>
c000899d:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00089a1:	e9 b3 00 00 00       	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c00089a6:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c00089a9:	84 c9                	test   cl,cl
c00089ab:	0f 84 98 00 00 00    	je     c0008a49 <VgaText::putchar(char)+0xe1>
c00089b1:	8d 77 c0             	lea    esi,[edi-0x40]
c00089b4:	89 f2                	mov    edx,esi
c00089b6:	80 fa 3e             	cmp    dl,0x3e
c00089b9:	77 78                	ja     c0008a33 <VgaText::putchar(char)+0xcb>
c00089bb:	83 f8 6d             	cmp    eax,0x6d
c00089be:	75 47                	jne    c0008a07 <VgaText::putchar(char)+0x9f>
c00089c0:	31 f6                	xor    esi,esi
c00089c2:	31 d2                	xor    edx,edx
c00089c4:	31 c0                	xor    eax,eax
c00089c6:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00089c9:	7e 2d                	jle    c00089f8 <VgaText::putchar(char)+0x90>
c00089cb:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00089d0:	83 fa 3b             	cmp    edx,0x3b
c00089d3:	75 17                	jne    c00089ec <VgaText::putchar(char)+0x84>
c00089d5:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00089d9:	50                   	push   eax
c00089da:	53                   	push   ebx
c00089db:	e8 40 fb ff ff       	call   c0008520 <VgaText::doANSI_SGR(int)>
c00089e0:	59                   	pop    ecx
c00089e1:	31 d2                	xor    edx,edx
c00089e3:	5f                   	pop    edi
c00089e4:	31 c0                	xor    eax,eax
c00089e6:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00089ea:	eb 09                	jmp    c00089f5 <VgaText::putchar(char)+0x8d>
c00089ec:	6b c0 0a             	imul   eax,eax,0xa
c00089ef:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00089f3:	88 ca                	mov    dl,cl
c00089f5:	46                   	inc    esi
c00089f6:	eb ce                	jmp    c00089c6 <VgaText::putchar(char)+0x5e>
c00089f8:	84 d2                	test   dl,dl
c00089fa:	74 2f                	je     c0008a2b <VgaText::putchar(char)+0xc3>
c00089fc:	50                   	push   eax
c00089fd:	53                   	push   ebx
c00089fe:	e8 1d fb ff ff       	call   c0008520 <VgaText::doANSI_SGR(int)>
c0008a03:	58                   	pop    eax
c0008a04:	5a                   	pop    edx
c0008a05:	eb 24                	jmp    c0008a2b <VgaText::putchar(char)+0xc3>
c0008a07:	83 f8 4a             	cmp    eax,0x4a
c0008a0a:	75 1f                	jne    c0008a2b <VgaText::putchar(char)+0xc3>
c0008a0c:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008a10:	75 19                	jne    c0008a2b <VgaText::putchar(char)+0xc3>
c0008a12:	83 ec 0c             	sub    esp,0xc
c0008a15:	53                   	push   ebx
c0008a16:	e8 89 fd ff ff       	call   c00087a4 <VgaText::clearScreen()>
c0008a1b:	83 c4 0c             	add    esp,0xc
c0008a1e:	6a 00                	push   0x0
c0008a20:	6a 00                	push   0x0
c0008a22:	53                   	push   ebx
c0008a23:	e8 1a fd ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008a28:	83 c4 10             	add    esp,0x10
c0008a2b:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008a31:	eb 26                	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c0008a33:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0008a36:	83 f8 0e             	cmp    eax,0xe
c0008a39:	7f 1e                	jg     c0008a59 <VgaText::putchar(char)+0xf1>
c0008a3b:	8d 48 01             	lea    ecx,[eax+0x1]
c0008a3e:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008a41:	89 f9                	mov    ecx,edi
c0008a43:	88 4c 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],cl
c0008a47:	eb 10                	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c0008a49:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a4c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008a4f:	50                   	push   eax
c0008a50:	53                   	push   ebx
c0008a51:	e8 42 fe ff ff       	call   c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008a56:	83 c4 10             	add    esp,0x10
c0008a59:	83 c4 10             	add    esp,0x10
c0008a5c:	5b                   	pop    ebx
c0008a5d:	5e                   	pop    esi
c0008a5e:	5f                   	pop    edi
c0008a5f:	c3                   	ret    

c0008a60 <VgaText::putx(unsigned int)>:
c0008a60:	57                   	push   edi
c0008a61:	b9 11 00 00 00       	mov    ecx,0x11
c0008a66:	56                   	push   esi
c0008a67:	be ee 0e 02 c0       	mov    esi,0xc0020eee
c0008a6c:	53                   	push   ebx
c0008a6d:	83 ec 20             	sub    esp,0x20
c0008a70:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008a74:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008a78:	fc                   	cld    
c0008a79:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008a7b:	be 08 00 00 00       	mov    esi,0x8
c0008a80:	50                   	push   eax
c0008a81:	50                   	push   eax
c0008a82:	89 d8                	mov    eax,ebx
c0008a84:	c1 e3 04             	shl    ebx,0x4
c0008a87:	c1 e8 1c             	shr    eax,0x1c
c0008a8a:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008a8f:	50                   	push   eax
c0008a90:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008a94:	e8 cf fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008a99:	83 c4 10             	add    esp,0x10
c0008a9c:	4e                   	dec    esi
c0008a9d:	75 e1                	jne    c0008a80 <VgaText::putx(unsigned int)+0x20>
c0008a9f:	83 c4 20             	add    esp,0x20
c0008aa2:	5b                   	pop    ebx
c0008aa3:	5e                   	pop    esi
c0008aa4:	5f                   	pop    edi
c0008aa5:	c3                   	ret    

c0008aa6 <VgaText::puts(char const*)>:
c0008aa6:	53                   	push   ebx
c0008aa7:	83 ec 08             	sub    esp,0x8
c0008aaa:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008aae:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008ab1:	85 c0                	test   eax,eax
c0008ab3:	74 12                	je     c0008ac7 <VgaText::puts(char const*)+0x21>
c0008ab5:	43                   	inc    ebx
c0008ab6:	51                   	push   ecx
c0008ab7:	51                   	push   ecx
c0008ab8:	50                   	push   eax
c0008ab9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008abd:	e8 a6 fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008ac2:	83 c4 10             	add    esp,0x10
c0008ac5:	eb e7                	jmp    c0008aae <VgaText::puts(char const*)+0x8>
c0008ac7:	83 c4 08             	add    esp,0x8
c0008aca:	5b                   	pop    ebx
c0008acb:	c3                   	ret    

c0008acc <VgaText::write(unsigned long long, void*, int*)>:
c0008acc:	55                   	push   ebp
c0008acd:	57                   	push   edi
c0008ace:	56                   	push   esi
c0008acf:	53                   	push   ebx
c0008ad0:	83 ec 0c             	sub    esp,0xc
c0008ad3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008ad7:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008adb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008adf:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008ae6:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008ae9:	39 eb                	cmp    ebx,ebp
c0008aeb:	74 13                	je     c0008b00 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008aed:	43                   	inc    ebx
c0008aee:	50                   	push   eax
c0008aef:	50                   	push   eax
c0008af0:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008af4:	50                   	push   eax
c0008af5:	56                   	push   esi
c0008af6:	e8 6d fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008afb:	83 c4 10             	add    esp,0x10
c0008afe:	eb e9                	jmp    c0008ae9 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008b00:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008b07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b0b:	89 38                	mov    DWORD PTR [eax],edi
c0008b0d:	83 c4 0c             	add    esp,0xc
c0008b10:	31 c0                	xor    eax,eax
c0008b12:	5b                   	pop    ebx
c0008b13:	5e                   	pop    esi
c0008b14:	5f                   	pop    edi
c0008b15:	5d                   	pop    ebp
c0008b16:	c3                   	ret    
c0008b17:	90                   	nop

c0008b18 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008b18:	55                   	push   ebp
c0008b19:	57                   	push   edi
c0008b1a:	56                   	push   esi
c0008b1b:	53                   	push   ebx
c0008b1c:	83 ec 0c             	sub    esp,0xc
c0008b1f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008b23:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b28:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008b2f:	50                   	push   eax
c0008b30:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b35:	50                   	push   eax
c0008b36:	e8 b3 fa ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c0008b3b:	5a                   	pop    edx
c0008b3c:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008b40:	59                   	pop    ecx
c0008b41:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008b44:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008b48:	0f b7 f6             	movzx  esi,si
c0008b4b:	0f b6 e8             	movzx  ebp,al
c0008b4e:	01 f6                	add    esi,esi
c0008b50:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008b53:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008b56:	85 c0                	test   eax,eax
c0008b58:	0f 84 ef 00 00 00    	je     c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c0008b5e:	83 f8 0d             	cmp    eax,0xd
c0008b61:	75 0c                	jne    c0008b6f <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0008b63:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008b6a:	e9 d8 00 00 00       	jmp    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008b6f:	83 f8 0a             	cmp    eax,0xa
c0008b72:	75 44                	jne    c0008bb8 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0008b74:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008b77:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008b7e:	8d 48 01             	lea    ecx,[eax+0x1]
c0008b81:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008b84:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008b87:	75 0f                	jne    c0008b98 <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0008b89:	83 ec 0c             	sub    esp,0xc
c0008b8c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008b8f:	53                   	push   ebx
c0008b90:	e8 6b fa ff ff       	call   c0008600 <VgaText::scrollScreen()>
c0008b95:	83 c4 10             	add    esp,0x10
c0008b98:	83 ec 0c             	sub    esp,0xc
c0008b9b:	53                   	push   ebx
c0008b9c:	e8 69 f9 ff ff       	call   c000850a <VgaText::updateCursor()>
c0008ba1:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008ba5:	83 c4 10             	add    esp,0x10
c0008ba8:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008bab:	0f b7 f6             	movzx  esi,si
c0008bae:	01 f6                	add    esi,esi
c0008bb0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008bb3:	e9 8f 00 00 00       	jmp    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bb8:	83 f8 08             	cmp    eax,0x8
c0008bbb:	75 34                	jne    c0008bf1 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c0008bbd:	51                   	push   ecx
c0008bbe:	51                   	push   ecx
c0008bbf:	6a 01                	push   0x1
c0008bc1:	53                   	push   ebx
c0008bc2:	e8 af fc ff ff       	call   c0008876 <VgaText::decrementCursor(bool)>
c0008bc7:	5e                   	pop    esi
c0008bc8:	58                   	pop    eax
c0008bc9:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008bcc:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008bcf:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008bd2:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008bd5:	6a 20                	push   0x20
c0008bd7:	53                   	push   ebx
c0008bd8:	e8 c5 fa ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008bdd:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008be1:	83 c4 20             	add    esp,0x20
c0008be4:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008be7:	0f b7 f6             	movzx  esi,si
c0008bea:	01 f6                	add    esi,esi
c0008bec:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008bef:	eb 56                	jmp    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bf1:	52                   	push   edx
c0008bf2:	52                   	push   edx
c0008bf3:	55                   	push   ebp
c0008bf4:	50                   	push   eax
c0008bf5:	e8 98 fa ff ff       	call   c0008692 <VgaText::combineCharAndColour(char, unsigned char)>
c0008bfa:	83 c4 10             	add    esp,0x10
c0008bfd:	66 89 06             	mov    WORD PTR [esi],ax
c0008c00:	39 1d 04 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f04,ebx
c0008c06:	75 1d                	jne    c0008c25 <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0008c08:	83 ec 0c             	sub    esp,0xc
c0008c0b:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008c0e:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008c11:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c15:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c19:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008c1c:	50                   	push   eax
c0008c1d:	e8 82 02 01 00       	call   c0018ea4 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008c22:	83 c4 20             	add    esp,0x20
c0008c25:	83 c6 02             	add    esi,0x2
c0008c28:	50                   	push   eax
c0008c29:	50                   	push   eax
c0008c2a:	6a 00                	push   0x0
c0008c2c:	53                   	push   ebx
c0008c2d:	e8 f0 fb ff ff       	call   c0008822 <VgaText::incrementCursor(bool)>
c0008c32:	83 c4 10             	add    esp,0x10
c0008c35:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0008c39:	75 0c                	jne    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008c3b:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008c3f:	0f b7 f6             	movzx  esi,si
c0008c42:	01 f6                	add    esi,esi
c0008c44:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008c47:	47                   	inc    edi
c0008c48:	e9 06 ff ff ff       	jmp    c0008b53 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008c4d:	83 ec 0c             	sub    esp,0xc
c0008c50:	53                   	push   ebx
c0008c51:	e8 b4 f8 ff ff       	call   c000850a <VgaText::updateCursor()>
c0008c56:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008c5d:	83 c4 1c             	add    esp,0x1c
c0008c60:	5b                   	pop    ebx
c0008c61:	5e                   	pop    esi
c0008c62:	5f                   	pop    edi
c0008c63:	5d                   	pop    ebp
c0008c64:	c3                   	ret    
c0008c65:	90                   	nop

c0008c66 <VgaText::VgaText(char const*)>:
c0008c66:	56                   	push   esi
c0008c67:	53                   	push   ebx
c0008c68:	83 ec 04             	sub    esp,0x4
c0008c6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c6f:	83 ec 08             	sub    esp,0x8
c0008c72:	6a 00                	push   0x0
c0008c74:	50                   	push   eax
c0008c75:	e8 44 05 00 00       	call   c00091be <UnixFile::UnixFile(int)>
c0008c7a:	83 c4 10             	add    esp,0x10
c0008c7d:	ba 14 0f 02 c0       	mov    edx,0xc0020f14
c0008c82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c86:	89 10                	mov    DWORD PTR [eax],edx
c0008c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8c:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008c93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c97:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008c9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ca2:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008ca6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008caa:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008cae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb2:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008cb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cbd:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008cc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc8:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008ccf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd3:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008cda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cde:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008ce5:	83 ec 0c             	sub    esp,0xc
c0008ce8:	6a 01                	push   0x1
c0008cea:	e8 1e 09 00 00       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c0008cef:	83 c4 10             	add    esp,0x10
c0008cf2:	89 c2                	mov    edx,eax
c0008cf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cf8:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008cfb:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c0008d01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d05:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d08:	89 c6                	mov    esi,eax
c0008d0a:	e8 b0 f0 ff ff       	call   c0007dbf <Phys::allocatePage()>
c0008d0f:	68 05 0c 00 00       	push   0xc05
c0008d14:	56                   	push   esi
c0008d15:	50                   	push   eax
c0008d16:	53                   	push   ebx
c0008d17:	e8 04 10 00 00       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0008d1c:	83 c4 10             	add    esp,0x10
c0008d1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d23:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d26:	83 ec 04             	sub    esp,0x4
c0008d29:	68 a0 0f 00 00       	push   0xfa0
c0008d2e:	6a 00                	push   0x0
c0008d30:	50                   	push   eax
c0008d31:	e8 ba 77 ff ff       	call   c00004f0 <memset>
c0008d36:	83 c4 10             	add    esp,0x10
c0008d39:	83 ec 04             	sub    esp,0x4
c0008d3c:	6a 00                	push   0x0
c0008d3e:	6a 07                	push   0x7
c0008d40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d44:	e8 6b f8 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008d49:	83 c4 10             	add    esp,0x10
c0008d4c:	83 ec 04             	sub    esp,0x4
c0008d4f:	6a 00                	push   0x0
c0008d51:	6a 00                	push   0x0
c0008d53:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d57:	e8 e6 f9 ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008d5c:	83 c4 10             	add    esp,0x10
c0008d5f:	83 ec 0c             	sub    esp,0xc
c0008d62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d66:	e8 39 fa ff ff       	call   c00087a4 <VgaText::clearScreen()>
c0008d6b:	83 c4 10             	add    esp,0x10
c0008d6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d72:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008d76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d7a:	05 82 00 00 00       	add    eax,0x82
c0008d7f:	83 ec 04             	sub    esp,0x4
c0008d82:	68 80 00 00 00       	push   0x80
c0008d87:	6a 00                	push   0x0
c0008d89:	50                   	push   eax
c0008d8a:	e8 61 77 ff ff       	call   c00004f0 <memset>
c0008d8f:	83 c4 10             	add    esp,0x10
c0008d92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d96:	05 02 01 00 00       	add    eax,0x102
c0008d9b:	83 ec 04             	sub    esp,0x4
c0008d9e:	68 80 00 00 00       	push   0x80
c0008da3:	6a 00                	push   0x0
c0008da5:	50                   	push   eax
c0008da6:	e8 45 77 ff ff       	call   c00004f0 <memset>
c0008dab:	83 c4 10             	add    esp,0x10
c0008dae:	90                   	nop
c0008daf:	83 c4 04             	add    esp,0x4
c0008db2:	5b                   	pop    ebx
c0008db3:	5e                   	pop    esi
c0008db4:	c3                   	ret    
c0008db5:	90                   	nop

c0008db6 <VgaText::receiveKey(unsigned char)>:
c0008db6:	55                   	push   ebp
c0008db7:	57                   	push   edi
c0008db8:	56                   	push   esi
c0008db9:	53                   	push   ebx
c0008dba:	83 ec 2c             	sub    esp,0x2c
c0008dbd:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0008dc1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0008dc5:	89 ef                	mov    edi,ebp
c0008dc7:	81 e7 ff 00 00 00    	and    edi,0xff
c0008dcd:	0f 84 66 01 00 00    	je     c0008f39 <VgaText::receiveKey(unsigned char)+0x183>
c0008dd3:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0008dd9:	83 ff 08             	cmp    edi,0x8
c0008ddc:	75 73                	jne    c0008e51 <VgaText::receiveKey(unsigned char)+0x9b>
c0008dde:	83 ec 0c             	sub    esp,0xc
c0008de1:	56                   	push   esi
c0008de2:	e8 89 77 ff ff       	call   c0000570 <strlen>
c0008de7:	83 c4 10             	add    esp,0x10
c0008dea:	85 c0                	test   eax,eax
c0008dec:	0f 84 02 01 00 00    	je     c0008ef4 <VgaText::receiveKey(unsigned char)+0x13e>
c0008df2:	50                   	push   eax
c0008df3:	50                   	push   eax
c0008df4:	6a 08                	push   0x8
c0008df6:	53                   	push   ebx
c0008df7:	e8 6c fb ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008dfc:	89 34 24             	mov    DWORD PTR [esp],esi
c0008dff:	e8 6c 77 ff ff       	call   c0000570 <strlen>
c0008e04:	83 c4 10             	add    esp,0x10
c0008e07:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0008e0f:	83 fa 0d             	cmp    edx,0xd
c0008e12:	89 d0                	mov    eax,edx
c0008e14:	0f 95 c1             	setne  cl
c0008e17:	83 fa 1f             	cmp    edx,0x1f
c0008e1a:	0f 9e c2             	setle  dl
c0008e1d:	0f b6 d2             	movzx  edx,dl
c0008e20:	85 ca                	test   edx,ecx
c0008e22:	74 17                	je     c0008e3b <VgaText::receiveKey(unsigned char)+0x85>
c0008e24:	83 e8 08             	sub    eax,0x8
c0008e27:	3c 02                	cmp    al,0x2
c0008e29:	76 10                	jbe    c0008e3b <VgaText::receiveKey(unsigned char)+0x85>
c0008e2b:	55                   	push   ebp
c0008e2c:	55                   	push   ebp
c0008e2d:	68 ff 0e 02 c0       	push   0xc0020eff
c0008e32:	53                   	push   ebx
c0008e33:	e8 6e fc ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0008e38:	83 c4 10             	add    esp,0x10
c0008e3b:	83 ec 0c             	sub    esp,0xc
c0008e3e:	56                   	push   esi
c0008e3f:	e8 2c 77 ff ff       	call   c0000570 <strlen>
c0008e44:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008e4c:	e9 a0 00 00 00       	jmp    c0008ef1 <VgaText::receiveKey(unsigned char)+0x13b>
c0008e51:	83 ec 0c             	sub    esp,0xc
c0008e54:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008e5a:	50                   	push   eax
c0008e5b:	e8 10 77 ff ff       	call   c0000570 <strlen>
c0008e60:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e63:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008e67:	e8 04 77 ff ff       	call   c0000570 <strlen>
c0008e6c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008e70:	83 c4 10             	add    esp,0x10
c0008e73:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0008e77:	3d 80 00 00 00       	cmp    eax,0x80
c0008e7c:	0f 87 b7 00 00 00    	ja     c0008f39 <VgaText::receiveKey(unsigned char)+0x183>
c0008e82:	8d 45 ff             	lea    eax,[ebp-0x1]
c0008e85:	8d 55 f7             	lea    edx,[ebp-0x9]
c0008e88:	3c 1e                	cmp    al,0x1e
c0008e8a:	0f 96 c0             	setbe  al
c0008e8d:	80 fa 01             	cmp    dl,0x1
c0008e90:	0f 97 c2             	seta   dl
c0008e93:	0f b6 d2             	movzx  edx,dl
c0008e96:	85 c2                	test   edx,eax
c0008e98:	74 2e                	je     c0008ec8 <VgaText::receiveKey(unsigned char)+0x112>
c0008e9a:	83 ff 0d             	cmp    edi,0xd
c0008e9d:	74 29                	je     c0008ec8 <VgaText::receiveKey(unsigned char)+0x112>
c0008e9f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008ea2:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008ea5:	68 05 0f 02 c0       	push   0xc0020f05
c0008eaa:	53                   	push   ebx
c0008eab:	e8 68 fc ff ff       	call   c0008b18 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008eb0:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008eb3:	8d 45 40             	lea    eax,[ebp+0x40]
c0008eb6:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008eb9:	0f b6 c0             	movzx  eax,al
c0008ebc:	50                   	push   eax
c0008ebd:	53                   	push   ebx
c0008ebe:	e8 d5 f9 ff ff       	call   c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008ec3:	83 c4 20             	add    esp,0x20
c0008ec6:	eb 11                	jmp    c0008ed9 <VgaText::receiveKey(unsigned char)+0x123>
c0008ec8:	89 e8                	mov    eax,ebp
c0008eca:	51                   	push   ecx
c0008ecb:	0f be c0             	movsx  eax,al
c0008ece:	51                   	push   ecx
c0008ecf:	50                   	push   eax
c0008ed0:	53                   	push   ebx
c0008ed1:	e8 92 fa ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008ed6:	83 c4 10             	add    esp,0x10
c0008ed9:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0008ede:	89 e8                	mov    eax,ebp
c0008ee0:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0008ee4:	52                   	push   edx
c0008ee5:	52                   	push   edx
c0008ee6:	8d 44 24 26          	lea    eax,[esp+0x26]
c0008eea:	50                   	push   eax
c0008eeb:	56                   	push   esi
c0008eec:	e8 4f 79 ff ff       	call   c0000840 <strcat>
c0008ef1:	83 c4 10             	add    esp,0x10
c0008ef4:	8a 93 80 00 00 00    	mov    dl,BYTE PTR [ebx+0x80]
c0008efa:	b0 01                	mov    al,0x1
c0008efc:	83 ff 1c             	cmp    edi,0x1c
c0008eff:	77 0e                	ja     c0008f0f <VgaText::receiveKey(unsigned char)+0x159>
c0008f01:	b8 08 04 00 10       	mov    eax,0x10000408
c0008f06:	89 f9                	mov    ecx,edi
c0008f08:	d3 e8                	shr    eax,cl
c0008f0a:	f7 d0                	not    eax
c0008f0c:	83 e0 01             	and    eax,0x1
c0008f0f:	84 c0                	test   al,al
c0008f11:	74 04                	je     c0008f17 <VgaText::receiveKey(unsigned char)+0x161>
c0008f13:	84 d2                	test   dl,dl
c0008f15:	74 22                	je     c0008f39 <VgaText::receiveKey(unsigned char)+0x183>
c0008f17:	81 c3 02 01 00 00    	add    ebx,0x102
c0008f1d:	50                   	push   eax
c0008f1e:	50                   	push   eax
c0008f1f:	56                   	push   esi
c0008f20:	53                   	push   ebx
c0008f21:	e8 1a 79 ff ff       	call   c0000840 <strcat>
c0008f26:	83 c4 0c             	add    esp,0xc
c0008f29:	68 80 00 00 00       	push   0x80
c0008f2e:	6a 00                	push   0x0
c0008f30:	56                   	push   esi
c0008f31:	e8 ba 75 ff ff       	call   c00004f0 <memset>
c0008f36:	83 c4 10             	add    esp,0x10
c0008f39:	83 c4 2c             	add    esp,0x2c
c0008f3c:	5b                   	pop    ebx
c0008f3d:	5e                   	pop    esi
c0008f3e:	5f                   	pop    edi
c0008f3f:	5d                   	pop    ebp
c0008f40:	c3                   	ret    
c0008f41:	90                   	nop

c0008f42 <VgaText::doUpdate()>:
c0008f42:	c3                   	ret    
c0008f43:	90                   	nop

c0008f44 <TSS::TSS()>:
c0008f44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f48:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008f4f:	90                   	nop
c0008f50:	c3                   	ret    
c0008f51:	90                   	nop
c0008f52:	66 90                	xchg   ax,ax

c0008f54 <TSS::setESP(unsigned long)>:
c0008f54:	55                   	push   ebp
c0008f55:	89 e5                	mov    ebp,esp
c0008f57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f5a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f5d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008f60:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f63:	90                   	nop
c0008f64:	5d                   	pop    ebp
c0008f65:	c3                   	ret    
c0008f66:	66 90                	xchg   ax,ax

c0008f68 <TSS::flush()>:
c0008f68:	55                   	push   ebp
c0008f69:	89 e5                	mov    ebp,esp
c0008f6b:	83 ec 10             	sub    esp,0x10
c0008f6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f71:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f73:	83 c8 03             	or     eax,0x3
c0008f76:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008f7a:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008f7e:	66 89 d0             	mov    ax,dx
c0008f81:	0f 00 d8             	ltr    ax
c0008f84:	90                   	nop
c0008f85:	c9                   	leave  
c0008f86:	c3                   	ret    
c0008f87:	90                   	nop

c0008f88 <TSS::setup(unsigned long, unsigned long)>:
c0008f88:	55                   	push   ebp
c0008f89:	89 e5                	mov    ebp,esp
c0008f8b:	83 ec 18             	sub    esp,0x18
c0008f8e:	83 ec 0c             	sub    esp,0xc
c0008f91:	6a 68                	push   0x68
c0008f93:	e8 1e eb ff ff       	call   c0007ab6 <malloc>
c0008f98:	83 c4 10             	add    esp,0x10
c0008f9b:	89 c2                	mov    edx,eax
c0008f9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fa0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fa3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fa6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fa9:	83 ec 04             	sub    esp,0x4
c0008fac:	6a 68                	push   0x68
c0008fae:	6a 00                	push   0x0
c0008fb0:	50                   	push   eax
c0008fb1:	e8 3a 75 ff ff       	call   c00004f0 <memset>
c0008fb6:	83 c4 10             	add    esp,0x10
c0008fb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fbf:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008fc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fcb:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008fd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fd4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fd7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008fda:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fe0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fe3:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008fe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fef:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008ff5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ff8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ffb:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0009001:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009004:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009007:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c000900d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009010:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009013:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0009019:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000901c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000901f:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0009025:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009028:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000902b:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000902e:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0009031:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009034:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009037:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000903a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000903d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009040:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009043:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000904a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000904d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009050:	0f 20 da             	mov    edx,cr3
c0009053:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0009056:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009059:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000905c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000905f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009062:	83 ec 08             	sub    esp,0x8
c0009065:	50                   	push   eax
c0009066:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009069:	50                   	push   eax
c000906a:	e8 b3 e2 ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c000906f:	83 c4 10             	add    esp,0x10
c0009072:	83 ec 08             	sub    esp,0x8
c0009075:	6a 68                	push   0x68
c0009077:	8d 45 ec             	lea    eax,[ebp-0x14]
c000907a:	50                   	push   eax
c000907b:	e8 be e2 ff ff       	call   c000733e <GDTEntry::setLimit(unsigned int)>
c0009080:	83 c4 10             	add    esp,0x10
c0009083:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0009087:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000908a:	83 e0 0f             	and    eax,0xf
c000908d:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009090:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0009093:	83 c8 40             	or     eax,0x40
c0009096:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009099:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000909e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090a4:	05 78 01 00 00       	add    eax,0x178
c00090a9:	83 ec 04             	sub    esp,0x4
c00090ac:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00090af:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00090b2:	50                   	push   eax
c00090b3:	e8 ba e2 ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00090b8:	83 c4 10             	add    esp,0x10
c00090bb:	89 c2                	mov    edx,eax
c00090bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090c0:	89 10                	mov    DWORD PTR [eax],edx
c00090c2:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00090c7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090cd:	05 78 01 00 00       	add    eax,0x178
c00090d2:	83 ec 0c             	sub    esp,0xc
c00090d5:	50                   	push   eax
c00090d6:	e8 c1 e2 ff ff       	call   c000739c <GDT::flush()>
c00090db:	83 c4 10             	add    esp,0x10
c00090de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00090e3:	c9                   	leave  
c00090e4:	c3                   	ret    
c00090e5:	90                   	nop

c00090e6 <ReservedFilename::read(unsigned long long, void*, int*)>:
c00090e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00090ea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00090ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00090f1:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00090f6:	75 08                	jne    c0009100 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00090f8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00090fe:	eb 38                	jmp    c0009138 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0009100:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009105:	75 17                	jne    c000911e <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0009107:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000910c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000910f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009115:	8b 10                	mov    edx,DWORD PTR [eax]
c0009117:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000911b:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000911e:	89 c1                	mov    ecx,eax
c0009120:	83 e1 fd             	and    ecx,0xfffffffd
c0009123:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0009129:	74 cd                	je     c00090f8 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000912b:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009130:	83 e0 ef             	and    eax,0xffffffef
c0009133:	83 f8 08             	cmp    eax,0x8
c0009136:	76 c0                	jbe    c00090f8 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009138:	31 c0                	xor    eax,eax
c000913a:	c3                   	ret    
c000913b:	90                   	nop

c000913c <ReservedFilename::isAtty()>:
c000913c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009140:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009143:	31 c0                	xor    eax,eax
c0009145:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000914b:	74 09                	je     c0009156 <ReservedFilename::isAtty()+0x1a>
c000914d:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0009153:	0f 94 c0             	sete   al
c0009156:	c3                   	ret    
c0009157:	90                   	nop

c0009158 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0009158:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000915c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009160:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009163:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009167:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000916c:	75 08                	jne    c0009176 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000916e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0009174:	eb 3d                	jmp    c00091b3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0009176:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000917b:	75 17                	jne    c0009194 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000917d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0009182:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009185:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000918b:	8b 10                	mov    edx,DWORD PTR [eax]
c000918d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009191:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0009194:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0009199:	75 04                	jne    c000919f <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000919b:	89 0a                	mov    DWORD PTR [edx],ecx
c000919d:	eb 14                	jmp    c00091b3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000919f:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00091a4:	74 c8                	je     c000916e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091a6:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00091ab:	83 e0 ef             	and    eax,0xffffffef
c00091ae:	83 f8 08             	cmp    eax,0x8
c00091b1:	76 bb                	jbe    c000916e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091b3:	31 c0                	xor    eax,eax
c00091b5:	c3                   	ret    

c00091b6 <UnixFile::getFileDescriptor()>:
c00091b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00091bd:	c3                   	ret    

c00091be <UnixFile::UnixFile(int)>:
c00091be:	53                   	push   ebx
c00091bf:	83 ec 28             	sub    esp,0x28
c00091c2:	ba dc 0f 02 c0       	mov    edx,0xc0020fdc
c00091c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091cb:	89 10                	mov    DWORD PTR [eax],edx
c00091cd:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00091d5:	0f 8f 90 01 00 00    	jg     c000936b <UnixFile::UnixFile(int)+0x1ad>
c00091db:	a1 20 37 02 c0       	mov    eax,ds:0xc0023720
c00091e0:	8d 50 01             	lea    edx,[eax+0x1]
c00091e3:	89 15 20 37 02 c0    	mov    DWORD PTR ds:0xc0023720,edx
c00091e9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00091ed:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00091f0:	83 ec 08             	sub    esp,0x8
c00091f3:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00091f7:	68 98 6f 02 c0       	push   0xc0026f98
c00091fc:	e8 a7 68 01 00       	call   c001faa8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009201:	83 c4 10             	add    esp,0x10
c0009204:	a0 94 6f 02 c0       	mov    al,ds:0xc0026f94
c0009209:	83 f0 01             	xor    eax,0x1
c000920c:	0f b6 c0             	movzx  eax,al
c000920f:	85 c0                	test   eax,eax
c0009211:	0f 84 55 01 00 00    	je     c000936c <UnixFile::UnixFile(int)+0x1ae>
c0009217:	c6 05 94 6f 02 c0 01 	mov    BYTE PTR ds:0xc0026f94,0x1
c000921e:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0009226:	83 ec 0c             	sub    esp,0xc
c0009229:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000922d:	e8 84 e8 ff ff       	call   c0007ab6 <malloc>
c0009232:	83 c4 10             	add    esp,0x10
c0009235:	89 c3                	mov    ebx,eax
c0009237:	83 ec 08             	sub    esp,0x8
c000923a:	68 03 ff ff 0f       	push   0xfffff03
c000923f:	53                   	push   ebx
c0009240:	e8 2d 01 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009245:	83 c4 10             	add    esp,0x10
c0009248:	89 1d 8c 6f 02 c0    	mov    DWORD PTR ds:0xc0026f8c,ebx
c000924e:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0009256:	83 ec 0c             	sub    esp,0xc
c0009259:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000925d:	e8 54 e8 ff ff       	call   c0007ab6 <malloc>
c0009262:	83 c4 10             	add    esp,0x10
c0009265:	89 c3                	mov    ebx,eax
c0009267:	83 ec 08             	sub    esp,0x8
c000926a:	68 01 ff ff 0f       	push   0xfffff01
c000926f:	53                   	push   ebx
c0009270:	e8 fd 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009275:	83 c4 10             	add    esp,0x10
c0009278:	89 1d 90 6f 02 c0    	mov    DWORD PTR ds:0xc0026f90,ebx
c000927e:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0009286:	83 ec 0c             	sub    esp,0xc
c0009289:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000928d:	e8 24 e8 ff ff       	call   c0007ab6 <malloc>
c0009292:	83 c4 10             	add    esp,0x10
c0009295:	89 c3                	mov    ebx,eax
c0009297:	83 ec 08             	sub    esp,0x8
c000929a:	68 00 ff ff 0f       	push   0xfffff00
c000929f:	53                   	push   ebx
c00092a0:	e8 cd 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c00092a5:	83 c4 10             	add    esp,0x10
c00092a8:	89 1d 84 6f 02 c0    	mov    DWORD PTR ds:0xc0026f84,ebx
c00092ae:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00092b6:	83 ec 0c             	sub    esp,0xc
c00092b9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092bd:	e8 f4 e7 ff ff       	call   c0007ab6 <malloc>
c00092c2:	83 c4 10             	add    esp,0x10
c00092c5:	89 c3                	mov    ebx,eax
c00092c7:	83 ec 08             	sub    esp,0x8
c00092ca:	68 02 ff ff 0f       	push   0xfffff02
c00092cf:	53                   	push   ebx
c00092d0:	e8 9d 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c00092d5:	83 c4 10             	add    esp,0x10
c00092d8:	89 1d 88 6f 02 c0    	mov    DWORD PTR ds:0xc0026f88,ebx
c00092de:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00092e6:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00092eb:	7f 7f                	jg     c000936c <UnixFile::UnixFile(int)+0x1ae>
c00092ed:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00092f5:	83 ec 0c             	sub    esp,0xc
c00092f8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00092fc:	e8 b5 e7 ff ff       	call   c0007ab6 <malloc>
c0009301:	83 c4 10             	add    esp,0x10
c0009304:	89 c3                	mov    ebx,eax
c0009306:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000930a:	05 10 ff ff 0f       	add    eax,0xfffff10
c000930f:	83 ec 08             	sub    esp,0x8
c0009312:	50                   	push   eax
c0009313:	53                   	push   ebx
c0009314:	e8 59 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009319:	83 c4 10             	add    esp,0x10
c000931c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009320:	89 1c 85 60 6f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd90a0],ebx
c0009327:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000932f:	83 ec 0c             	sub    esp,0xc
c0009332:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009336:	e8 7b e7 ff ff       	call   c0007ab6 <malloc>
c000933b:	83 c4 10             	add    esp,0x10
c000933e:	89 c3                	mov    ebx,eax
c0009340:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009344:	05 20 ff ff 0f       	add    eax,0xfffff20
c0009349:	83 ec 08             	sub    esp,0x8
c000934c:	50                   	push   eax
c000934d:	53                   	push   ebx
c000934e:	e8 1f 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009353:	83 c4 10             	add    esp,0x10
c0009356:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000935a:	89 1c 85 20 6f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd90e0],ebx
c0009361:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009366:	e9 7b ff ff ff       	jmp    c00092e6 <UnixFile::UnixFile(int)+0x128>
c000936b:	90                   	nop
c000936c:	83 c4 28             	add    esp,0x28
c000936f:	5b                   	pop    ebx
c0009370:	c3                   	ret    
c0009371:	90                   	nop

c0009372 <ReservedFilename::ReservedFilename(int)>:
c0009372:	83 ec 0c             	sub    esp,0xc
c0009375:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009379:	83 ec 08             	sub    esp,0x8
c000937c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009380:	50                   	push   eax
c0009381:	e8 38 fe ff ff       	call   c00091be <UnixFile::UnixFile(int)>
c0009386:	83 c4 10             	add    esp,0x10
c0009389:	ba f8 0f 02 c0       	mov    edx,0xc0020ff8
c000938e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009392:	89 10                	mov    DWORD PTR [eax],edx
c0009394:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009398:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000939c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000939f:	90                   	nop
c00093a0:	83 c4 0c             	add    esp,0xc
c00093a3:	c3                   	ret    

c00093a4 <UnixFile::~UnixFile()>:
c00093a4:	83 ec 1c             	sub    esp,0x1c
c00093a7:	ba dc 0f 02 c0       	mov    edx,0xc0020fdc
c00093ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093b0:	89 10                	mov    DWORD PTR [eax],edx
c00093b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093b9:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00093be:	7f 76                	jg     c0009436 <UnixFile::~UnixFile()+0x92>
c00093c0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00093c8:	83 ec 0c             	sub    esp,0xc
c00093cb:	68 98 6f 02 c0       	push   0xc0026f98
c00093d0:	e8 a7 67 01 00       	call   c001fb7c <LinkedList<UnixFile>::getFirstElement()>
c00093d5:	83 c4 10             	add    esp,0x10
c00093d8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093dc:	83 ec 0c             	sub    esp,0xc
c00093df:	68 98 6f 02 c0       	push   0xc0026f98
c00093e4:	e8 9b 67 01 00       	call   c001fb84 <LinkedList<UnixFile>::removeFirst()>
c00093e9:	83 c4 10             	add    esp,0x10
c00093ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00093f0:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00093f4:	74 43                	je     c0009439 <UnixFile::~UnixFile()+0x95>
c00093f6:	83 ec 08             	sub    esp,0x8
c00093f9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00093fd:	68 98 6f 02 c0       	push   0xc0026f98
c0009402:	e8 a1 66 01 00       	call   c001faa8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009407:	83 c4 10             	add    esp,0x10
c000940a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000940e:	8d 50 01             	lea    edx,[eax+0x1]
c0009411:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009415:	3d 20 a1 07 00       	cmp    eax,0x7a120
c000941a:	0f 94 c0             	sete   al
c000941d:	0f b6 c0             	movzx  eax,al
c0009420:	85 c0                	test   eax,eax
c0009422:	74 a4                	je     c00093c8 <UnixFile::~UnixFile()+0x24>
c0009424:	83 ec 0c             	sub    esp,0xc
c0009427:	68 b4 0f 02 c0       	push   0xc0020fb4
c000942c:	e8 7e 82 00 00       	call   c00116af <KePanic(char const*)>
c0009431:	83 c4 10             	add    esp,0x10
c0009434:	eb 92                	jmp    c00093c8 <UnixFile::~UnixFile()+0x24>
c0009436:	90                   	nop
c0009437:	eb 01                	jmp    c000943a <UnixFile::~UnixFile()+0x96>
c0009439:	90                   	nop
c000943a:	90                   	nop
c000943b:	83 c4 1c             	add    esp,0x1c
c000943e:	c3                   	ret    
c000943f:	90                   	nop

c0009440 <UnixFile::~UnixFile()>:
c0009440:	83 ec 0c             	sub    esp,0xc
c0009443:	83 ec 0c             	sub    esp,0xc
c0009446:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000944a:	e8 55 ff ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c000944f:	83 c4 10             	add    esp,0x10
c0009452:	83 ec 08             	sub    esp,0x8
c0009455:	6a 0c                	push   0xc
c0009457:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000945b:	e8 b8 13 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c0009460:	83 c4 10             	add    esp,0x10
c0009463:	83 c4 0c             	add    esp,0xc
c0009466:	c3                   	ret    
c0009467:	90                   	nop

c0009468 <ReservedFilename::~ReservedFilename()>:
c0009468:	83 ec 0c             	sub    esp,0xc
c000946b:	ba f8 0f 02 c0       	mov    edx,0xc0020ff8
c0009470:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009474:	89 10                	mov    DWORD PTR [eax],edx
c0009476:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000947a:	83 ec 0c             	sub    esp,0xc
c000947d:	50                   	push   eax
c000947e:	e8 21 ff ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c0009483:	83 c4 10             	add    esp,0x10
c0009486:	90                   	nop
c0009487:	83 c4 0c             	add    esp,0xc
c000948a:	c3                   	ret    
c000948b:	90                   	nop

c000948c <ReservedFilename::~ReservedFilename()>:
c000948c:	83 ec 0c             	sub    esp,0xc
c000948f:	83 ec 0c             	sub    esp,0xc
c0009492:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009496:	e8 cd ff ff ff       	call   c0009468 <ReservedFilename::~ReservedFilename()>
c000949b:	83 c4 10             	add    esp,0x10
c000949e:	83 ec 08             	sub    esp,0x8
c00094a1:	6a 0c                	push   0xc
c00094a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00094a7:	e8 6c 13 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c00094ac:	83 c4 10             	add    esp,0x10
c00094af:	83 c4 0c             	add    esp,0xc
c00094b2:	c3                   	ret    

c00094b3 <KeGetFileFromDescriptor(int)>:
c00094b3:	53                   	push   ebx
c00094b4:	83 ec 08             	sub    esp,0x8
c00094b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094bb:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00094c1:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00094c7:	7f 2c                	jg     c00094f5 <KeGetFileFromDescriptor(int)+0x42>
c00094c9:	83 ec 0c             	sub    esp,0xc
c00094cc:	68 98 6f 02 c0       	push   0xc0026f98
c00094d1:	e8 a6 66 01 00       	call   c001fb7c <LinkedList<UnixFile>::getFirstElement()>
c00094d6:	83 c4 10             	add    esp,0x10
c00094d9:	85 c0                	test   eax,eax
c00094db:	75 04                	jne    c00094e1 <KeGetFileFromDescriptor(int)+0x2e>
c00094dd:	31 c0                	xor    eax,eax
c00094df:	eb 6e                	jmp    c000954f <KeGetFileFromDescriptor(int)+0x9c>
c00094e1:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00094e4:	74 69                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c00094e6:	52                   	push   edx
c00094e7:	52                   	push   edx
c00094e8:	50                   	push   eax
c00094e9:	68 98 6f 02 c0       	push   0xc0026f98
c00094ee:	e8 33 67 01 00       	call   c001fc26 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00094f3:	eb e1                	jmp    c00094d6 <KeGetFileFromDescriptor(int)+0x23>
c00094f5:	a1 8c 6f 02 c0       	mov    eax,ds:0xc0026f8c
c00094fa:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0009500:	74 4d                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c0009502:	a1 90 6f 02 c0       	mov    eax,ds:0xc0026f90
c0009507:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000950d:	74 40                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c000950f:	a1 88 6f 02 c0       	mov    eax,ds:0xc0026f88
c0009514:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000951a:	74 33                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c000951c:	a1 84 6f 02 c0       	mov    eax,ds:0xc0026f84
c0009521:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0009527:	74 26                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c0009529:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000952f:	83 f8 08             	cmp    eax,0x8
c0009532:	77 09                	ja     c000953d <KeGetFileFromDescriptor(int)+0x8a>
c0009534:	8b 04 85 60 6f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd90a0]
c000953b:	eb 12                	jmp    c000954f <KeGetFileFromDescriptor(int)+0x9c>
c000953d:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0009543:	83 fb 08             	cmp    ebx,0x8
c0009546:	77 95                	ja     c00094dd <KeGetFileFromDescriptor(int)+0x2a>
c0009548:	8b 04 9d 20 6f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd90e0]
c000954f:	83 c4 08             	add    esp,0x8
c0009552:	5b                   	pop    ebx
c0009553:	c3                   	ret    

c0009554 <__static_initialization_and_destruction_0(int, int)>:
c0009554:	83 ec 0c             	sub    esp,0xc
c0009557:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000955c:	75 34                	jne    c0009592 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000955e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0009566:	75 2a                	jne    c0009592 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009568:	83 ec 0c             	sub    esp,0xc
c000956b:	68 98 6f 02 c0       	push   0xc0026f98
c0009570:	e8 f1 64 01 00       	call   c001fa66 <LinkedList<UnixFile>::LinkedList()>
c0009575:	83 c4 10             	add    esp,0x10
c0009578:	83 ec 04             	sub    esp,0x4
c000957b:	68 b0 36 02 c0       	push   0xc00236b0
c0009580:	68 98 6f 02 c0       	push   0xc0026f98
c0009585:	68 64 fa 01 c0       	push   0xc001fa64
c000958a:	e8 39 12 00 00       	call   c000a7c8 <__cxa_atexit>
c000958f:	83 c4 10             	add    esp,0x10
c0009592:	90                   	nop
c0009593:	83 c4 0c             	add    esp,0xc
c0009596:	c3                   	ret    

c0009597 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0009597:	83 ec 0c             	sub    esp,0xc
c000959a:	83 ec 08             	sub    esp,0x8
c000959d:	68 ff ff 00 00       	push   0xffff
c00095a2:	6a 01                	push   0x1
c00095a4:	e8 ab ff ff ff       	call   c0009554 <__static_initialization_and_destruction_0(int, int)>
c00095a9:	83 c4 10             	add    esp,0x10
c00095ac:	83 c4 0c             	add    esp,0xc
c00095af:	c3                   	ret    

c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00095b0:	53                   	push   ebx
c00095b1:	8b 15 28 37 02 c0    	mov    edx,DWORD PTR ds:0xc0023728
c00095b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095bb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00095bf:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00095c5:	89 d8                	mov    eax,ebx
c00095c7:	d1 e8                	shr    eax,1
c00095c9:	01 d0                	add    eax,edx
c00095cb:	80 e3 01             	and    bl,0x1
c00095ce:	8a 10                	mov    dl,BYTE PTR [eax]
c00095d0:	75 09                	jne    c00095db <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00095d2:	83 e2 f0             	and    edx,0xfffffff0
c00095d5:	09 ca                	or     edx,ecx
c00095d7:	88 10                	mov    BYTE PTR [eax],dl
c00095d9:	5b                   	pop    ebx
c00095da:	c3                   	ret    
c00095db:	83 e2 0f             	and    edx,0xf
c00095de:	0f b6 c9             	movzx  ecx,cl
c00095e1:	c1 e1 04             	shl    ecx,0x4
c00095e4:	09 ca                	or     edx,ecx
c00095e6:	88 10                	mov    BYTE PTR [eax],dl
c00095e8:	5b                   	pop    ebx
c00095e9:	c3                   	ret    

c00095ea <Virt::getPageState(unsigned long)>:
c00095ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095ee:	8b 0d 28 37 02 c0    	mov    ecx,DWORD PTR ds:0xc0023728
c00095f4:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00095fa:	89 d0                	mov    eax,edx
c00095fc:	d1 e8                	shr    eax,1
c00095fe:	80 e2 01             	and    dl,0x1
c0009601:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0009604:	74 03                	je     c0009609 <Virt::getPageState(unsigned long)+0x1f>
c0009606:	c1 e8 04             	shr    eax,0x4
c0009609:	83 e0 0f             	and    eax,0xf
c000960c:	c3                   	ret    

c000960d <Virt::allocateKernelVirtualPages(int)>:
c000960d:	55                   	push   ebp
c000960e:	31 ed                	xor    ebp,ebp
c0009610:	57                   	push   edi
c0009611:	31 ff                	xor    edi,edi
c0009613:	56                   	push   esi
c0009614:	53                   	push   ebx
c0009615:	31 db                	xor    ebx,ebx
c0009617:	83 ec 0c             	sub    esp,0xc
c000961a:	8b 35 24 37 02 c0    	mov    esi,DWORD PTR ds:0xc0023724
c0009620:	56                   	push   esi
c0009621:	e8 c4 ff ff ff       	call   c00095ea <Virt::getPageState(unsigned long)>
c0009626:	5a                   	pop    edx
c0009627:	84 c0                	test   al,al
c0009629:	75 41                	jne    c000966c <Virt::allocateKernelVirtualPages(int)+0x5f>
c000962b:	85 db                	test   ebx,ebx
c000962d:	75 02                	jne    c0009631 <Virt::allocateKernelVirtualPages(int)+0x24>
c000962f:	89 f5                	mov    ebp,esi
c0009631:	83 c3 01             	add    ebx,0x1
c0009634:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0009638:	74 5f                	je     c0009699 <Virt::allocateKernelVirtualPages(int)+0x8c>
c000963a:	83 c6 01             	add    esi,0x1
c000963d:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0009643:	76 34                	jbe    c0009679 <Virt::allocateKernelVirtualPages(int)+0x6c>
c0009645:	c7 05 24 37 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0023724,0xc8000
c000964f:	f7 c7 01 00 00 00    	test   edi,0x1
c0009655:	75 2a                	jne    c0009681 <Virt::allocateKernelVirtualPages(int)+0x74>
c0009657:	be 00 80 0c 00       	mov    esi,0xc8000
c000965c:	bf 01 00 00 00       	mov    edi,0x1
c0009661:	56                   	push   esi
c0009662:	e8 83 ff ff ff       	call   c00095ea <Virt::getPageState(unsigned long)>
c0009667:	5a                   	pop    edx
c0009668:	84 c0                	test   al,al
c000966a:	74 bf                	je     c000962b <Virt::allocateKernelVirtualPages(int)+0x1e>
c000966c:	31 db                	xor    ebx,ebx
c000966e:	83 c6 01             	add    esi,0x1
c0009671:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0009677:	77 cc                	ja     c0009645 <Virt::allocateKernelVirtualPages(int)+0x38>
c0009679:	89 35 24 37 02 c0    	mov    DWORD PTR ds:0xc0023724,esi
c000967f:	eb 9f                	jmp    c0009620 <Virt::allocateKernelVirtualPages(int)+0x13>
c0009681:	83 ec 0c             	sub    esp,0xc
c0009684:	68 0c 10 02 c0       	push   0xc002100c
c0009689:	e8 21 80 00 00       	call   c00116af <KePanic(char const*)>
c000968e:	8b 35 24 37 02 c0    	mov    esi,DWORD PTR ds:0xc0023724
c0009694:	83 c4 10             	add    esp,0x10
c0009697:	eb 87                	jmp    c0009620 <Virt::allocateKernelVirtualPages(int)+0x13>
c0009699:	89 2d 24 37 02 c0    	mov    DWORD PTR ds:0xc0023724,ebp
c000969f:	83 fb 01             	cmp    ebx,0x1
c00096a2:	74 6f                	je     c0009713 <Virt::allocateKernelVirtualPages(int)+0x106>
c00096a4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00096a8:	85 c9                	test   ecx,ecx
c00096aa:	74 49                	je     c00096f5 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00096ac:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00096b0:	89 e8                	mov    eax,ebp
c00096b2:	31 db                	xor    ebx,ebx
c00096b4:	8d 79 ff             	lea    edi,[ecx-0x1]
c00096b7:	eb 18                	jmp    c00096d1 <Virt::allocateKernelVirtualPages(int)+0xc4>
c00096b9:	6a 01                	push   0x1
c00096bb:	83 c3 01             	add    ebx,0x1
c00096be:	50                   	push   eax
c00096bf:	e8 ec fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096c4:	58                   	pop    eax
c00096c5:	5a                   	pop    edx
c00096c6:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00096ca:	74 29                	je     c00096f5 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00096cc:	a1 24 37 02 c0       	mov    eax,ds:0xc0023724
c00096d1:	8d 50 01             	lea    edx,[eax+0x1]
c00096d4:	85 db                	test   ebx,ebx
c00096d6:	89 15 24 37 02 c0    	mov    DWORD PTR ds:0xc0023724,edx
c00096dc:	74 24                	je     c0009702 <Virt::allocateKernelVirtualPages(int)+0xf5>
c00096de:	39 df                	cmp    edi,ebx
c00096e0:	75 d7                	jne    c00096b9 <Virt::allocateKernelVirtualPages(int)+0xac>
c00096e2:	6a 03                	push   0x3
c00096e4:	83 c3 01             	add    ebx,0x1
c00096e7:	50                   	push   eax
c00096e8:	e8 c3 fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096ed:	59                   	pop    ecx
c00096ee:	5e                   	pop    esi
c00096ef:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00096f3:	75 d7                	jne    c00096cc <Virt::allocateKernelVirtualPages(int)+0xbf>
c00096f5:	83 c4 0c             	add    esp,0xc
c00096f8:	89 e8                	mov    eax,ebp
c00096fa:	5b                   	pop    ebx
c00096fb:	c1 e0 0c             	shl    eax,0xc
c00096fe:	5e                   	pop    esi
c00096ff:	5f                   	pop    edi
c0009700:	5d                   	pop    ebp
c0009701:	c3                   	ret    
c0009702:	6a 02                	push   0x2
c0009704:	bb 01 00 00 00       	mov    ebx,0x1
c0009709:	50                   	push   eax
c000970a:	e8 a1 fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000970f:	58                   	pop    eax
c0009710:	5a                   	pop    edx
c0009711:	eb b9                	jmp    c00096cc <Virt::allocateKernelVirtualPages(int)+0xbf>
c0009713:	6a 04                	push   0x4
c0009715:	8d 45 01             	lea    eax,[ebp+0x1]
c0009718:	55                   	push   ebp
c0009719:	a3 24 37 02 c0       	mov    ds:0xc0023724,eax
c000971e:	e8 8d fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009723:	5b                   	pop    ebx
c0009724:	89 e8                	mov    eax,ebp
c0009726:	5e                   	pop    esi
c0009727:	c1 e0 0c             	shl    eax,0xc
c000972a:	83 c4 0c             	add    esp,0xc
c000972d:	5b                   	pop    ebx
c000972e:	5e                   	pop    esi
c000972f:	5f                   	pop    edi
c0009730:	5d                   	pop    ebp
c0009731:	c3                   	ret    

c0009732 <Virt::freeSwapfilePage(unsigned long)>:
c0009732:	53                   	push   ebx
c0009733:	8b 15 ac 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026fac
c0009739:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000973d:	b8 01 00 00 00       	mov    eax,0x1
c0009742:	89 cb                	mov    ebx,ecx
c0009744:	d3 e0                	shl    eax,cl
c0009746:	c1 eb 05             	shr    ebx,0x5
c0009749:	f7 d0                	not    eax
c000974b:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c000974e:	21 c1                	and    ecx,eax
c0009750:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0009753:	5b                   	pop    ebx
c0009754:	c3                   	ret    

c0009755 <Virt::swapIDToSector(unsigned long)>:
c0009755:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009759:	8b 15 2c 37 02 c0    	mov    edx,DWORD PTR ds:0xc002372c
c000975f:	8b 0d 34 37 02 c0    	mov    ecx,DWORD PTR ds:0xc0023734
c0009765:	0f af c2             	imul   eax,edx
c0009768:	01 c8                	add    eax,ecx
c000976a:	c3                   	ret    

c000976b <Virt::allocateSwapfilePage()>:
c000976b:	55                   	push   ebp
c000976c:	31 d2                	xor    edx,edx
c000976e:	57                   	push   edi
c000976f:	56                   	push   esi
c0009770:	53                   	push   ebx
c0009771:	83 ec 0c             	sub    esp,0xc
c0009774:	8b 0d 2c 37 02 c0    	mov    ecx,DWORD PTR ds:0xc002372c
c000977a:	a1 30 37 02 c0       	mov    eax,ds:0xc0023730
c000977f:	f7 f1                	div    ecx
c0009781:	39 0d 30 37 02 c0    	cmp    DWORD PTR ds:0xc0023730,ecx
c0009787:	72 2f                	jb     c00097b8 <Virt::allocateSwapfilePage()+0x4d>
c0009789:	8b 35 ac 6f 02 c0    	mov    esi,DWORD PTR ds:0xc0026fac
c000978f:	8b 16                	mov    edx,DWORD PTR [esi]
c0009791:	f6 c2 01             	test   dl,0x1
c0009794:	74 3e                	je     c00097d4 <Virt::allocateSwapfilePage()+0x69>
c0009796:	31 c9                	xor    ecx,ecx
c0009798:	bf 01 00 00 00       	mov    edi,0x1
c000979d:	eb 12                	jmp    c00097b1 <Virt::allocateSwapfilePage()+0x46>
c000979f:	89 fd                	mov    ebp,edi
c00097a1:	89 ca                	mov    edx,ecx
c00097a3:	d3 e5                	shl    ebp,cl
c00097a5:	c1 ea 05             	shr    edx,0x5
c00097a8:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00097ab:	8b 13                	mov    edx,DWORD PTR [ebx]
c00097ad:	85 ea                	test   edx,ebp
c00097af:	74 2c                	je     c00097dd <Virt::allocateSwapfilePage()+0x72>
c00097b1:	83 c1 01             	add    ecx,0x1
c00097b4:	39 c8                	cmp    eax,ecx
c00097b6:	77 e7                	ja     c000979f <Virt::allocateSwapfilePage()+0x34>
c00097b8:	83 ec 0c             	sub    esp,0xc
c00097bb:	68 a0 12 02 c0       	push   0xc00212a0
c00097c0:	e8 ea 7e 00 00       	call   c00116af <KePanic(char const*)>
c00097c5:	83 c4 10             	add    esp,0x10
c00097c8:	31 c9                	xor    ecx,ecx
c00097ca:	83 c4 0c             	add    esp,0xc
c00097cd:	89 c8                	mov    eax,ecx
c00097cf:	5b                   	pop    ebx
c00097d0:	5e                   	pop    esi
c00097d1:	5f                   	pop    edi
c00097d2:	5d                   	pop    ebp
c00097d3:	c3                   	ret    
c00097d4:	89 f3                	mov    ebx,esi
c00097d6:	bd 01 00 00 00       	mov    ebp,0x1
c00097db:	31 c9                	xor    ecx,ecx
c00097dd:	09 ea                	or     edx,ebp
c00097df:	89 c8                	mov    eax,ecx
c00097e1:	89 13                	mov    DWORD PTR [ebx],edx
c00097e3:	83 c4 0c             	add    esp,0xc
c00097e6:	5b                   	pop    ebx
c00097e7:	5e                   	pop    esi
c00097e8:	5f                   	pop    edi
c00097e9:	5d                   	pop    ebp
c00097ea:	c3                   	ret    

c00097eb <Virt::virtualMemorySetup()>:
c00097eb:	53                   	push   ebx
c00097ec:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097f1:	6a 0f                	push   0xf
c00097f3:	53                   	push   ebx
c00097f4:	83 c3 01             	add    ebx,0x1
c00097f7:	e8 b4 fd ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097fc:	58                   	pop    eax
c00097fd:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009803:	5a                   	pop    edx
c0009804:	75 eb                	jne    c00097f1 <Virt::virtualMemorySetup()+0x6>
c0009806:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000980b:	6a 00                	push   0x0
c000980d:	53                   	push   ebx
c000980e:	83 c3 01             	add    ebx,0x1
c0009811:	e8 9a fd ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009816:	59                   	pop    ecx
c0009817:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000981d:	58                   	pop    eax
c000981e:	75 eb                	jne    c000980b <Virt::virtualMemorySetup()+0x20>
c0009820:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009825:	6a 0f                	push   0xf
c0009827:	53                   	push   ebx
c0009828:	83 c3 01             	add    ebx,0x1
c000982b:	e8 80 fd ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009830:	58                   	pop    eax
c0009831:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009837:	5a                   	pop    edx
c0009838:	75 eb                	jne    c0009825 <Virt::virtualMemorySetup()+0x3a>
c000983a:	5b                   	pop    ebx
c000983b:	c3                   	ret    

c000983c <Virt::setupPageSwapping(int)>:
c000983c:	53                   	push   ebx
c000983d:	83 ec 0c             	sub    esp,0xc
c0009840:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009844:	a1 88 b8 02 c0       	mov    eax,ds:0xc002b888
c0009849:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000984f:	8b 10                	mov    edx,DWORD PTR [eax]
c0009851:	53                   	push   ebx
c0009852:	c1 e3 0b             	shl    ebx,0xb
c0009855:	68 b7 12 02 c0       	push   0xc00212b7
c000985a:	50                   	push   eax
c000985b:	ff 52 60             	call   DWORD PTR [edx+0x60]
c000985e:	89 1d 30 37 02 c0    	mov    DWORD PTR ds:0xc0023730,ebx
c0009864:	c6 05 38 37 02 c0 43 	mov    BYTE PTR ds:0xc0023738,0x43
c000986b:	c1 eb 08             	shr    ebx,0x8
c000986e:	a3 34 37 02 c0       	mov    ds:0xc0023734,eax
c0009873:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009876:	c7 05 2c 37 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002372c,0x8
c0009880:	e8 31 e2 ff ff       	call   c0007ab6 <malloc>
c0009885:	83 c4 0c             	add    esp,0xc
c0009888:	89 c1                	mov    ecx,eax
c000988a:	a3 ac 6f 02 c0       	mov    ds:0xc0026fac,eax
c000988f:	31 d2                	xor    edx,edx
c0009891:	a1 30 37 02 c0       	mov    eax,ds:0xc0023730
c0009896:	f7 35 2c 37 02 c0    	div    DWORD PTR ds:0xc002372c
c000989c:	c1 e8 05             	shr    eax,0x5
c000989f:	50                   	push   eax
c00098a0:	6a 00                	push   0x0
c00098a2:	51                   	push   ecx
c00098a3:	e8 48 6c ff ff       	call   c00004f0 <memset>
c00098a8:	83 c4 18             	add    esp,0x18
c00098ab:	5b                   	pop    ebx
c00098ac:	c3                   	ret    
c00098ad:	90                   	nop

c00098ae <VAS::setCPUSpecific(unsigned long)>:
c00098ae:	c3                   	ret    
c00098af:	90                   	nop

c00098b0 <VAS::VAS(VAS*)>:
c00098b0:	83 ec 0c             	sub    esp,0xc
c00098b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098b7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00098be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098c2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00098c9:	83 ec 0c             	sub    esp,0xc
c00098cc:	68 2c 10 02 c0       	push   0xc002102c
c00098d1:	e8 d9 7d 00 00       	call   c00116af <KePanic(char const*)>
c00098d6:	83 c4 10             	add    esp,0x10
c00098d9:	90                   	nop
c00098da:	83 c4 0c             	add    esp,0xc
c00098dd:	c3                   	ret    

c00098de <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00098de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098e2:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00098e7:	89 c2                	mov    edx,eax
c00098e9:	c1 e8 0a             	shr    eax,0xa
c00098ec:	c1 ea 16             	shr    edx,0x16
c00098ef:	83 f9 01             	cmp    ecx,0x1
c00098f2:	19 c9                	sbb    ecx,ecx
c00098f4:	c1 e2 0c             	shl    edx,0xc
c00098f7:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00098fd:	25 fc 0f 00 00       	and    eax,0xffc
c0009902:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0009909:	01 d0                	add    eax,edx
c000990b:	c3                   	ret    

c000990c <VAS::getPageTableEntry(unsigned long)>:
c000990c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009910:	89 ca                	mov    edx,ecx
c0009912:	c1 e9 0a             	shr    ecx,0xa
c0009915:	c1 ea 16             	shr    edx,0x16
c0009918:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000991e:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0009924:	c1 e0 0c             	shl    eax,0xc
c0009927:	8d 04 08             	lea    eax,[eax+ecx*1]
c000992a:	c3                   	ret    

c000992b <Virt::freeKernelVirtualPages(unsigned long)>:
c000992b:	55                   	push   ebp
c000992c:	57                   	push   edi
c000992d:	bf 01 00 00 00       	mov    edi,0x1
c0009932:	56                   	push   esi
c0009933:	53                   	push   ebx
c0009934:	83 ec 1c             	sub    esp,0x1c
c0009937:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000993b:	c1 ee 0c             	shr    esi,0xc
c000993e:	eb 48                	jmp    c0009988 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c0009940:	83 ec 08             	sub    esp,0x8
c0009943:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c0009948:	55                   	push   ebp
c0009949:	50                   	push   eax
c000994a:	e8 bd ff ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000994f:	83 c4 10             	add    esp,0x10
c0009952:	8b 10                	mov    edx,DWORD PTR [eax]
c0009954:	f6 c6 04             	test   dh,0x4
c0009957:	75 70                	jne    c00099c9 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0009959:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000995f:	83 fb 04             	cmp    ebx,0x4
c0009962:	0f 84 8a 00 00 00    	je     c00099f2 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0009968:	83 fb 02             	cmp    ebx,0x2
c000996b:	0f 84 9a 00 00 00    	je     c0009a0b <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c0009971:	83 fb 03             	cmp    ebx,0x3
c0009974:	0f 84 be 00 00 00    	je     c0009a38 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c000997a:	83 fb 01             	cmp    ebx,0x1
c000997d:	0f 84 a2 00 00 00    	je     c0009a25 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009983:	83 c6 01             	add    esi,0x1
c0009986:	31 ff                	xor    edi,edi
c0009988:	56                   	push   esi
c0009989:	89 f5                	mov    ebp,esi
c000998b:	e8 5a fc ff ff       	call   c00095ea <Virt::getPageState(unsigned long)>
c0009990:	c1 e5 0c             	shl    ebp,0xc
c0009993:	0f b6 d8             	movzx  ebx,al
c0009996:	5a                   	pop    edx
c0009997:	85 db                	test   ebx,ebx
c0009999:	75 a5                	jne    c0009940 <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c000999b:	83 ec 0c             	sub    esp,0xc
c000999e:	68 ce 12 02 c0       	push   0xc00212ce
c00099a3:	e8 07 7d 00 00       	call   c00116af <KePanic(char const*)>
c00099a8:	5a                   	pop    edx
c00099a9:	59                   	pop    ecx
c00099aa:	55                   	push   ebp
c00099ab:	8b 2d b0 6f 02 c0    	mov    ebp,DWORD PTR ds:0xc0026fb0
c00099b1:	55                   	push   ebp
c00099b2:	e8 55 ff ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c00099b7:	83 c4 10             	add    esp,0x10
c00099ba:	8b 10                	mov    edx,DWORD PTR [eax]
c00099bc:	f6 c6 04             	test   dh,0x4
c00099bf:	75 08                	jne    c00099c9 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c00099c1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099c7:	eb ba                	jmp    c0009983 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00099c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00099cd:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00099d3:	83 ec 0c             	sub    esp,0xc
c00099d6:	52                   	push   edx
c00099d7:	e8 7a e3 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c00099dc:	83 c4 10             	add    esp,0x10
c00099df:	83 fb 04             	cmp    ebx,0x4
c00099e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099e6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099ec:	0f 85 76 ff ff ff    	jne    c0009968 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c00099f2:	83 e7 01             	and    edi,0x1
c00099f5:	75 46                	jne    c0009a3d <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c00099f7:	c7 44 24 30 50 10 02 c0 	mov    DWORD PTR [esp+0x30],0xc0021050
c00099ff:	83 c4 1c             	add    esp,0x1c
c0009a02:	5b                   	pop    ebx
c0009a03:	5e                   	pop    esi
c0009a04:	5f                   	pop    edi
c0009a05:	5d                   	pop    ebp
c0009a06:	e9 a4 7c 00 00       	jmp    c00116af <KePanic(char const*)>
c0009a0b:	83 e7 01             	and    edi,0x1
c0009a0e:	75 15                	jne    c0009a25 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009a10:	83 ec 0c             	sub    esp,0xc
c0009a13:	68 ea 12 02 c0       	push   0xc00212ea
c0009a18:	e8 92 7c 00 00       	call   c00116af <KePanic(char const*)>
c0009a1d:	83 c4 10             	add    esp,0x10
c0009a20:	e9 5e ff ff ff       	jmp    c0009983 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a25:	83 ec 08             	sub    esp,0x8
c0009a28:	6a 00                	push   0x0
c0009a2a:	56                   	push   esi
c0009a2b:	e8 80 fb ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a30:	83 c4 10             	add    esp,0x10
c0009a33:	e9 4b ff ff ff       	jmp    c0009983 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a38:	83 e7 01             	and    edi,0x1
c0009a3b:	75 16                	jne    c0009a53 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0009a3d:	83 ec 08             	sub    esp,0x8
c0009a40:	6a 00                	push   0x0
c0009a42:	56                   	push   esi
c0009a43:	e8 68 fb ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a48:	83 c4 10             	add    esp,0x10
c0009a4b:	83 c4 1c             	add    esp,0x1c
c0009a4e:	5b                   	pop    ebx
c0009a4f:	5e                   	pop    esi
c0009a50:	5f                   	pop    edi
c0009a51:	5d                   	pop    ebp
c0009a52:	c3                   	ret    
c0009a53:	c7 44 24 30 06 13 02 c0 	mov    DWORD PTR [esp+0x30],0xc0021306
c0009a5b:	83 c4 1c             	add    esp,0x1c
c0009a5e:	5b                   	pop    ebx
c0009a5f:	5e                   	pop    esi
c0009a60:	5f                   	pop    edi
c0009a61:	5d                   	pop    ebp
c0009a62:	e9 48 7c 00 00       	jmp    c00116af <KePanic(char const*)>
c0009a67:	90                   	nop

c0009a68 <VAS::freeAllocatedPages(unsigned long)>:
c0009a68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a6c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a70:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009a74:	74 09                	je     c0009a7f <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009a76:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009a7a:	e9 ac fe ff ff       	jmp    c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0009a7f:	c7 44 24 04 74 10 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021074
c0009a87:	e9 b9 0e 00 00       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>

c0009a8c <VAS::virtualToPhysical(unsigned long)>:
c0009a8c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a90:	50                   	push   eax
c0009a91:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a95:	52                   	push   edx
c0009a96:	e8 71 fe ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c0009a9b:	59                   	pop    ecx
c0009a9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a9e:	5a                   	pop    edx
c0009a9f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009aa4:	c3                   	ret    
c0009aa5:	90                   	nop

c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0009aa6:	55                   	push   ebp
c0009aa7:	57                   	push   edi
c0009aa8:	56                   	push   esi
c0009aa9:	53                   	push   ebx
c0009aaa:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009aae:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009ab2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009ab6:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009aba:	85 db                	test   ebx,ebx
c0009abc:	7e 24                	jle    c0009ae2 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0009abe:	c1 e3 0c             	shl    ebx,0xc
c0009ac1:	01 f3                	add    ebx,esi
c0009ac3:	56                   	push   esi
c0009ac4:	81 c6 00 10 00 00    	add    esi,0x1000
c0009aca:	55                   	push   ebp
c0009acb:	e8 3c fe ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c0009ad0:	5a                   	pop    edx
c0009ad1:	59                   	pop    ecx
c0009ad2:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009ad4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009ad8:	21 f9                	and    ecx,edi
c0009ada:	09 d1                	or     ecx,edx
c0009adc:	39 f3                	cmp    ebx,esi
c0009ade:	89 08                	mov    DWORD PTR [eax],ecx
c0009ae0:	75 e1                	jne    c0009ac3 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0009ae2:	5b                   	pop    ebx
c0009ae3:	5e                   	pop    esi
c0009ae4:	5f                   	pop    edi
c0009ae5:	5d                   	pop    ebp
c0009ae6:	c3                   	ret    
c0009ae7:	90                   	nop

c0009ae8 <VAS::VAS()>:
c0009ae8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009aec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009af3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009af7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009afe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b02:	a3 b0 6f 02 c0       	mov    ds:0xc0026fb0,eax
c0009b07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b0b:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009b0f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b13:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009b16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b1a:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009b21:	ba 7d 50 02 c0       	mov    edx,0xc002507d
c0009b26:	b8 00 50 02 c0       	mov    eax,0xc0025000
c0009b2b:	29 c2                	sub    edx,eax
c0009b2d:	89 d0                	mov    eax,edx
c0009b2f:	05 ff 0f 00 00       	add    eax,0xfff
c0009b34:	c1 e8 0c             	shr    eax,0xc
c0009b37:	89 c2                	mov    edx,eax
c0009b39:	b8 00 50 02 c0       	mov    eax,0xc0025000
c0009b3e:	6a 04                	push   0x4
c0009b40:	6a ff                	push   0xffffffff
c0009b42:	52                   	push   edx
c0009b43:	50                   	push   eax
c0009b44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b48:	e8 59 ff ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b4d:	83 c4 14             	add    esp,0x14
c0009b50:	90                   	nop
c0009b51:	c3                   	ret    

c0009b52 <VAS::setToWriteCombining(unsigned long, int)>:
c0009b52:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0009b57:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b5d:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009b64:	75 01                	jne    c0009b67 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009b66:	c3                   	ret    
c0009b67:	68 80 00 00 00       	push   0x80
c0009b6c:	6a ff                	push   0xffffffff
c0009b6e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009b72:	50                   	push   eax
c0009b73:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009b77:	52                   	push   edx
c0009b78:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009b7c:	51                   	push   ecx
c0009b7d:	e8 24 ff ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b82:	83 c4 14             	add    esp,0x14
c0009b85:	c3                   	ret    

c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>:
c0009b86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b8a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009b8d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b91:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009b94:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0009b99:	83 f8 01             	cmp    eax,0x1
c0009b9c:	19 c0                	sbb    eax,eax
c0009b9e:	83 ca 03             	or     edx,0x3
c0009ba1:	83 e0 fc             	and    eax,0xfffffffc
c0009ba4:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009bab:	0f 20 d8             	mov    eax,cr3
c0009bae:	0f 22 d8             	mov    cr3,eax
c0009bb1:	c3                   	ret    

c0009bb2 <VAS::~VAS()>:
c0009bb2:	83 ec 2c             	sub    esp,0x2c
c0009bb5:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009bbd:	fa                   	cli    
c0009bbe:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0009bc3:	83 c0 01             	add    eax,0x1
c0009bc6:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0009bcb:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009bd0:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bd2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009bd5:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009bdb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009bdf:	6a 01                	push   0x1
c0009be1:	50                   	push   eax
c0009be2:	e8 9f ff ff ff       	call   c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>
c0009be7:	83 c4 0c             	add    esp,0xc
c0009bea:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009bf2:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009bfa:	0f 8f d8 00 00 00    	jg     c0009cd8 <VAS::~VAS()+0x126>
c0009c00:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009c04:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009c07:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009c0b:	c1 e2 02             	shl    edx,0x2
c0009c0e:	01 d0                	add    eax,edx
c0009c10:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c12:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009c16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c1a:	83 e0 01             	and    eax,0x1
c0009c1d:	0f 84 ab 00 00 00    	je     c0009cce <VAS::~VAS()+0x11c>
c0009c23:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009c2b:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009c33:	7f 74                	jg     c0009ca9 <VAS::~VAS()+0xf7>
c0009c35:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c39:	c1 e0 0a             	shl    eax,0xa
c0009c3c:	89 c2                	mov    edx,eax
c0009c3e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009c42:	01 d0                	add    eax,edx
c0009c44:	c1 e0 0c             	shl    eax,0xc
c0009c47:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c4b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c50:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c52:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c55:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009c5b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009c5f:	6a 01                	push   0x1
c0009c61:	50                   	push   eax
c0009c62:	e8 77 fc ff ff       	call   c00098de <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009c67:	83 c4 0c             	add    esp,0xc
c0009c6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c6e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c72:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c74:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009c78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c7c:	25 01 04 00 00       	and    eax,0x401
c0009c81:	3d 01 04 00 00       	cmp    eax,0x401
c0009c86:	75 1a                	jne    c0009ca2 <VAS::~VAS()+0xf0>
c0009c88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c8c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c91:	83 ec 0c             	sub    esp,0xc
c0009c94:	50                   	push   eax
c0009c95:	e8 bc e0 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c0009c9a:	83 c4 10             	add    esp,0x10
c0009c9d:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009ca2:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0009ca7:	eb 82                	jmp    c0009c2b <VAS::~VAS()+0x79>
c0009ca9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cad:	25 00 04 00 00       	and    eax,0x400
c0009cb2:	74 1a                	je     c0009cce <VAS::~VAS()+0x11c>
c0009cb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cb8:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009cbd:	83 ec 0c             	sub    esp,0xc
c0009cc0:	50                   	push   eax
c0009cc1:	e8 90 e0 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c0009cc6:	83 c4 10             	add    esp,0x10
c0009cc9:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009cce:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0009cd3:	e9 1a ff ff ff       	jmp    c0009bf2 <VAS::~VAS()+0x40>
c0009cd8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cdc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009cdf:	83 ec 0c             	sub    esp,0xc
c0009ce2:	50                   	push   eax
c0009ce3:	e8 43 fc ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0009ce8:	83 c4 10             	add    esp,0x10
c0009ceb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009cf2:	83 ec 0c             	sub    esp,0xc
c0009cf5:	50                   	push   eax
c0009cf6:	e8 5b e0 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c0009cfb:	83 c4 10             	add    esp,0x10
c0009cfe:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009d03:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0009d08:	83 e8 01             	sub    eax,0x1
c0009d0b:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0009d10:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0009d15:	85 c0                	test   eax,eax
c0009d17:	75 01                	jne    c0009d1a <VAS::~VAS()+0x168>
c0009d19:	fb                   	sti    
c0009d1a:	90                   	nop
c0009d1b:	83 c4 2c             	add    esp,0x2c
c0009d1e:	c3                   	ret    
c0009d1f:	90                   	nop

c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009d20:	55                   	push   ebp
c0009d21:	57                   	push   edi
c0009d22:	56                   	push   esi
c0009d23:	53                   	push   ebx
c0009d24:	83 ec 1c             	sub    esp,0x1c
c0009d27:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009d2b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009d2f:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009d35:	77 08                	ja     c0009d3f <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0009d37:	0f 20 d8             	mov    eax,cr3
c0009d3a:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0009d3d:	75 49                	jne    c0009d88 <VAS::mapPage(unsigned long, unsigned long, int)+0x68>
c0009d3f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d43:	09 d8                	or     eax,ebx
c0009d45:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d4a:	75 59                	jne    c0009da5 <VAS::mapPage(unsigned long, unsigned long, int)+0x85>
c0009d4c:	89 de                	mov    esi,ebx
c0009d4e:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009d51:	c1 ee 16             	shr    esi,0x16
c0009d54:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009d5b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009d5f:	74 56                	je     c0009db7 <VAS::mapPage(unsigned long, unsigned long, int)+0x97>
c0009d61:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d65:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009d69:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009d6f:	c1 eb 0a             	shr    ebx,0xa
c0009d72:	c1 e6 0c             	shl    esi,0xc
c0009d75:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009d7b:	09 d0                	or     eax,edx
c0009d7d:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0009d80:	83 c4 1c             	add    esp,0x1c
c0009d83:	5b                   	pop    ebx
c0009d84:	5e                   	pop    esi
c0009d85:	5f                   	pop    edi
c0009d86:	5d                   	pop    ebp
c0009d87:	c3                   	ret    
c0009d88:	83 ec 0c             	sub    esp,0xc
c0009d8b:	68 98 10 02 c0       	push   0xc0021098
c0009d90:	e8 b0 0b 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0009d95:	83 c4 10             	add    esp,0x10
c0009d98:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d9c:	09 d8                	or     eax,ebx
c0009d9e:	a9 ff 0f 00 00       	test   eax,0xfff
c0009da3:	74 a7                	je     c0009d4c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0009da5:	83 ec 0c             	sub    esp,0xc
c0009da8:	68 00 11 02 c0       	push   0xc0021100
c0009dad:	e8 fd 78 00 00       	call   c00116af <KePanic(char const*)>
c0009db2:	83 c4 10             	add    esp,0x10
c0009db5:	eb 95                	jmp    c0009d4c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0009db7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009dbb:	e8 ff df ff ff       	call   c0007dbf <Phys::allocatePage()>
c0009dc0:	83 ec 0c             	sub    esp,0xc
c0009dc3:	89 c5                	mov    ebp,eax
c0009dc5:	8b 0d b0 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fb0
c0009dcb:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009dcf:	6a 01                	push   0x1
c0009dd1:	e8 37 f8 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c0009dd6:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009ddd:	6a 01                	push   0x1
c0009ddf:	50                   	push   eax
c0009de0:	55                   	push   ebp
c0009de1:	81 cd 07 04 00 00    	or     ebp,0x407
c0009de7:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009deb:	51                   	push   ecx
c0009dec:	e8 29 01 00 00       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009df1:	83 c4 1c             	add    esp,0x1c
c0009df4:	68 00 10 00 00       	push   0x1000
c0009df9:	6a 00                	push   0x0
c0009dfb:	50                   	push   eax
c0009dfc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009e00:	e8 eb 66 ff ff       	call   c00004f0 <memset>
c0009e05:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009e09:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e0c:	e8 1a fb ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0009e11:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009e15:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009e18:	83 c4 10             	add    esp,0x10
c0009e1b:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0009e1e:	e9 3e ff ff ff       	jmp    c0009d61 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0009e23:	90                   	nop

c0009e24 <VAS::allocatePages(int, int)>:
c0009e24:	55                   	push   ebp
c0009e25:	57                   	push   edi
c0009e26:	56                   	push   esi
c0009e27:	53                   	push   ebx
c0009e28:	83 ec 1c             	sub    esp,0x1c
c0009e2b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009e2f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0009e33:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0009e37:	75 71                	jne    c0009eaa <VAS::allocatePages(int, int)+0x86>
c0009e39:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e3c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e40:	85 c0                	test   eax,eax
c0009e42:	74 4d                	je     c0009e91 <VAS::allocatePages(int, int)+0x6d>
c0009e44:	89 dd                	mov    ebp,ebx
c0009e46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e4a:	c1 e5 0c             	shl    ebp,0xc
c0009e4d:	01 c5                	add    ebp,eax
c0009e4f:	85 db                	test   ebx,ebx
c0009e51:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0009e54:	7e 29                	jle    c0009e7f <VAS::allocatePages(int, int)+0x5b>
c0009e56:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009e5a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009e5e:	81 cf 00 04 00 00    	or     edi,0x400
c0009e64:	e8 56 df ff ff       	call   c0007dbf <Phys::allocatePage()>
c0009e69:	57                   	push   edi
c0009e6a:	53                   	push   ebx
c0009e6b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009e71:	50                   	push   eax
c0009e72:	56                   	push   esi
c0009e73:	e8 a8 fe ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009e78:	83 c4 10             	add    esp,0x10
c0009e7b:	39 dd                	cmp    ebp,ebx
c0009e7d:	75 e5                	jne    c0009e64 <VAS::allocatePages(int, int)+0x40>
c0009e7f:	0f 20 d8             	mov    eax,cr3
c0009e82:	0f 22 d8             	mov    cr3,eax
c0009e85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e89:	83 c4 1c             	add    esp,0x1c
c0009e8c:	5b                   	pop    ebx
c0009e8d:	5e                   	pop    esi
c0009e8e:	5f                   	pop    edi
c0009e8f:	5d                   	pop    ebp
c0009e90:	c3                   	ret    
c0009e91:	83 ec 0c             	sub    esp,0xc
c0009e94:	68 24 11 02 c0       	push   0xc0021124
c0009e99:	e8 11 78 00 00       	call   c00116af <KePanic(char const*)>
c0009e9e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009ea1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009ea5:	83 c4 10             	add    esp,0x10
c0009ea8:	eb 9a                	jmp    c0009e44 <VAS::allocatePages(int, int)+0x20>
c0009eaa:	83 ec 0c             	sub    esp,0xc
c0009ead:	53                   	push   ebx
c0009eae:	e8 5a f7 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c0009eb3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009eb7:	83 c4 10             	add    esp,0x10
c0009eba:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009ebf:	77 37                	ja     c0009ef8 <VAS::allocatePages(int, int)+0xd4>
c0009ec1:	85 db                	test   ebx,ebx
c0009ec3:	7e ba                	jle    c0009e7f <VAS::allocatePages(int, int)+0x5b>
c0009ec5:	c1 e3 0c             	shl    ebx,0xc
c0009ec8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ecc:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009ed0:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c0009ed3:	81 cf 00 04 00 00    	or     edi,0x400
c0009ed9:	89 c3                	mov    ebx,eax
c0009edb:	e8 df de ff ff       	call   c0007dbf <Phys::allocatePage()>
c0009ee0:	57                   	push   edi
c0009ee1:	53                   	push   ebx
c0009ee2:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ee8:	50                   	push   eax
c0009ee9:	56                   	push   esi
c0009eea:	e8 31 fe ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009eef:	83 c4 10             	add    esp,0x10
c0009ef2:	39 dd                	cmp    ebp,ebx
c0009ef4:	75 e5                	jne    c0009edb <VAS::allocatePages(int, int)+0xb7>
c0009ef6:	eb 87                	jmp    c0009e7f <VAS::allocatePages(int, int)+0x5b>
c0009ef8:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0009efd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f03:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009f0a:	74 b5                	je     c0009ec1 <VAS::allocatePages(int, int)+0x9d>
c0009f0c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0009f10:	80 ce 01             	or     dh,0x1
c0009f13:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0009f17:	eb a8                	jmp    c0009ec1 <VAS::allocatePages(int, int)+0x9d>
c0009f19:	90                   	nop

c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009f1a:	55                   	push   ebp
c0009f1b:	57                   	push   edi
c0009f1c:	56                   	push   esi
c0009f1d:	53                   	push   ebx
c0009f1e:	83 ec 0c             	sub    esp,0xc
c0009f21:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0009f25:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009f29:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0009f2d:	85 db                	test   ebx,ebx
c0009f2f:	7e 2f                	jle    c0009f60 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x46>
c0009f31:	c1 e3 0c             	shl    ebx,0xc
c0009f34:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009f38:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0009f3c:	01 d3                	add    ebx,edx
c0009f3e:	55                   	push   ebp
c0009f3f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0009f43:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f47:	29 c2                	sub    edx,eax
c0009f49:	01 f2                	add    edx,esi
c0009f4b:	52                   	push   edx
c0009f4c:	56                   	push   esi
c0009f4d:	81 c6 00 10 00 00    	add    esi,0x1000
c0009f53:	57                   	push   edi
c0009f54:	e8 c7 fd ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009f59:	83 c4 10             	add    esp,0x10
c0009f5c:	39 de                	cmp    esi,ebx
c0009f5e:	75 de                	jne    c0009f3e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x24>
c0009f60:	0f 20 d8             	mov    eax,cr3
c0009f63:	0f 22 d8             	mov    cr3,eax
c0009f66:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f6a:	83 c4 0c             	add    esp,0xc
c0009f6d:	5b                   	pop    ebx
c0009f6e:	5e                   	pop    esi
c0009f6f:	5f                   	pop    edi
c0009f70:	5d                   	pop    ebp
c0009f71:	c3                   	ret    

c0009f72 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009f72:	55                   	push   ebp
c0009f73:	57                   	push   edi
c0009f74:	56                   	push   esi
c0009f75:	53                   	push   ebx
c0009f76:	83 ec 1c             	sub    esp,0x1c
c0009f79:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009f7d:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0009f81:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009f85:	09 f8                	or     eax,edi
c0009f87:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009f8b:	a9 ff 0f 00 00       	test   eax,0xfff
c0009f90:	75 4f                	jne    c0009fe1 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0009f92:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009f96:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0009f99:	c1 eb 16             	shr    ebx,0x16
c0009f9c:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
c0009fa3:	f6 04 38 01          	test   BYTE PTR [eax+edi*1],0x1
c0009fa7:	74 52                	je     c0009ffb <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x89>
c0009fa9:	0f b6 f2             	movzx  esi,dl
c0009fac:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009fb0:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0009fb4:	c1 e8 0a             	shr    eax,0xa
c0009fb7:	83 fe 01             	cmp    esi,0x1
c0009fba:	19 d2                	sbb    edx,edx
c0009fbc:	c1 e3 0c             	shl    ebx,0xc
c0009fbf:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0009fc5:	25 fc 0f 00 00       	and    eax,0xffc
c0009fca:	01 d8                	add    eax,ebx
c0009fcc:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0009fd0:	09 d9                	or     ecx,ebx
c0009fd2:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0009fd9:	83 c4 1c             	add    esp,0x1c
c0009fdc:	5b                   	pop    ebx
c0009fdd:	5e                   	pop    esi
c0009fde:	5f                   	pop    edi
c0009fdf:	5d                   	pop    ebp
c0009fe0:	c3                   	ret    
c0009fe1:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009fe5:	83 ec 0c             	sub    esp,0xc
c0009fe8:	68 50 11 02 c0       	push   0xc0021150
c0009fed:	e8 bd 76 00 00       	call   c00116af <KePanic(char const*)>
c0009ff2:	83 c4 10             	add    esp,0x10
c0009ff5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009ff9:	eb 97                	jmp    c0009f92 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c0009ffb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009fff:	e8 bb dd ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a004:	83 ec 0c             	sub    esp,0xc
c000a007:	89 c5                	mov    ebp,eax
c000a009:	8b 0d b0 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fb0
c000a00f:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a013:	6a 01                	push   0x1
c000a015:	e8 f3 f5 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000a01a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a021:	6a 01                	push   0x1
c000a023:	50                   	push   eax
c000a024:	55                   	push   ebp
c000a025:	81 cd 07 04 00 00    	or     ebp,0x407
c000a02b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000a02f:	51                   	push   ecx
c000a030:	e8 e5 fe ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a035:	83 c4 1c             	add    esp,0x1c
c000a038:	68 00 10 00 00       	push   0x1000
c000a03d:	6a 00                	push   0x0
c000a03f:	50                   	push   eax
c000a040:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a044:	e8 a7 64 ff ff       	call   c00004f0 <memset>
c000a049:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a04d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a050:	e8 d6 f8 ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c000a055:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a058:	83 c4 10             	add    esp,0x10
c000a05b:	89 2c 38             	mov    DWORD PTR [eax+edi*1],ebp
c000a05e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a062:	e9 42 ff ff ff       	jmp    c0009fa9 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c000a067:	90                   	nop

c000a068 <VAS::VAS(bool)>:
c000a068:	53                   	push   ebx
c000a069:	83 ec 28             	sub    esp,0x28
c000a06c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a070:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a074:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a078:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a07f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a083:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a08a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a08e:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a092:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a095:	e8 25 dd ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a09a:	89 c2                	mov    edx,eax
c000a09c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0a0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a0a3:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000a0a9:	83 ec 0c             	sub    esp,0xc
c000a0ac:	6a 01                	push   0x1
c000a0ae:	e8 5a f5 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000a0b3:	83 c4 10             	add    esp,0x10
c000a0b6:	89 c2                	mov    edx,eax
c000a0b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0bc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a0bf:	83 ec 0c             	sub    esp,0xc
c000a0c2:	6a 03                	push   0x3
c000a0c4:	6a 01                	push   0x1
c000a0c6:	52                   	push   edx
c000a0c7:	50                   	push   eax
c000a0c8:	53                   	push   ebx
c000a0c9:	e8 4c fe ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a0ce:	83 c4 20             	add    esp,0x20
c000a0d1:	89 c2                	mov    edx,eax
c000a0d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0d7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a0da:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a0e2:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a0ea:	7f 1d                	jg     c000a109 <VAS::VAS(bool)+0xa1>
c000a0ec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0f0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a0f3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a0f7:	c1 e2 02             	shl    edx,0x2
c000a0fa:	01 d0                	add    eax,edx
c000a0fc:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a102:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000a107:	eb d9                	jmp    c000a0e2 <VAS::VAS(bool)+0x7a>
c000a109:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a111:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a119:	7f 7e                	jg     c000a199 <VAS::VAS(bool)+0x131>
c000a11b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a11f:	2d 00 02 00 00       	sub    eax,0x200
c000a124:	c1 e0 0c             	shl    eax,0xc
c000a127:	83 c8 05             	or     eax,0x5
c000a12a:	89 c2                	mov    edx,eax
c000a12c:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a131:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a137:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a13d:	83 e0 10             	and    eax,0x10
c000a140:	0f b6 c0             	movzx  eax,al
c000a143:	85 c0                	test   eax,eax
c000a145:	74 07                	je     c000a14e <VAS::VAS(bool)+0xe6>
c000a147:	b8 00 01 00 00       	mov    eax,0x100
c000a14c:	eb 05                	jmp    c000a153 <VAS::VAS(bool)+0xeb>
c000a14e:	b8 00 00 00 00       	mov    eax,0x0
c000a153:	09 d0                	or     eax,edx
c000a155:	89 c1                	mov    ecx,eax
c000a157:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a15b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a15e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a162:	c1 e2 02             	shl    edx,0x2
c000a165:	01 d0                	add    eax,edx
c000a167:	89 ca                	mov    edx,ecx
c000a169:	89 10                	mov    DWORD PTR [eax],edx
c000a16b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a16f:	2d 40 03 00 00       	sub    eax,0x340
c000a174:	83 f8 7f             	cmp    eax,0x7f
c000a177:	77 16                	ja     c000a18f <VAS::VAS(bool)+0x127>
c000a179:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a17d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a180:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a184:	c1 e2 02             	shl    edx,0x2
c000a187:	01 d0                	add    eax,edx
c000a189:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a18f:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000a194:	e9 78 ff ff ff       	jmp    c000a111 <VAS::VAS(bool)+0xa9>
c000a199:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a19e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1a4:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1aa:	83 e0 10             	and    eax,0x10
c000a1ad:	0f b6 c0             	movzx  eax,al
c000a1b0:	85 c0                	test   eax,eax
c000a1b2:	74 07                	je     c000a1bb <VAS::VAS(bool)+0x153>
c000a1b4:	b8 03 41 00 00       	mov    eax,0x4103
c000a1b9:	eb 05                	jmp    c000a1c0 <VAS::VAS(bool)+0x158>
c000a1bb:	b8 03 40 00 00       	mov    eax,0x4003
c000a1c0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a1c4:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a1c7:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a1cd:	89 02                	mov    DWORD PTR [edx],eax
c000a1cf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1d3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a1d6:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a1db:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1e1:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1e7:	83 e0 10             	and    eax,0x10
c000a1ea:	0f b6 c0             	movzx  eax,al
c000a1ed:	85 c0                	test   eax,eax
c000a1ef:	74 07                	je     c000a1f8 <VAS::VAS(bool)+0x190>
c000a1f1:	b8 00 01 00 00       	mov    eax,0x100
c000a1f6:	eb 05                	jmp    c000a1fd <VAS::VAS(bool)+0x195>
c000a1f8:	b8 00 00 00 00       	mov    eax,0x0
c000a1fd:	09 c2                	or     edx,eax
c000a1ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a203:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a206:	05 fc 0f 00 00       	add    eax,0xffc
c000a20b:	83 ca 03             	or     edx,0x3
c000a20e:	89 10                	mov    DWORD PTR [eax],edx
c000a210:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a215:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a21b:	83 ec 0c             	sub    esp,0xc
c000a21e:	50                   	push   eax
c000a21f:	e8 c6 2a 00 00       	call   c000ccea <Device::getName()>
c000a224:	83 c4 10             	add    esp,0x10
c000a227:	83 ec 08             	sub    esp,0x8
c000a22a:	68 20 13 02 c0       	push   0xc0021320
c000a22f:	50                   	push   eax
c000a230:	e8 1b 65 ff ff       	call   c0000750 <strcmp>
c000a235:	83 c4 10             	add    esp,0x10
c000a238:	85 c0                	test   eax,eax
c000a23a:	0f 94 c0             	sete   al
c000a23d:	0f b6 c0             	movzx  eax,al
c000a240:	85 c0                	test   eax,eax
c000a242:	74 68                	je     c000a2ac <VAS::VAS(bool)+0x244>
c000a244:	fa                   	cli    
c000a245:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a24a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a250:	05 7c 09 00 00       	add    eax,0x97c
c000a255:	83 ec 0c             	sub    esp,0xc
c000a258:	50                   	push   eax
c000a259:	e8 50 d3 ff ff       	call   c00075ae <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a25e:	83 c4 10             	add    esp,0x10
c000a261:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a266:	89 c3                	mov    ebx,eax
c000a268:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a26d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a273:	05 7c 09 00 00       	add    eax,0x97c
c000a278:	83 ec 0c             	sub    esp,0xc
c000a27b:	50                   	push   eax
c000a27c:	e8 2d d3 ff ff       	call   c00075ae <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a281:	83 c4 10             	add    esp,0x10
c000a284:	83 ec 08             	sub    esp,0x8
c000a287:	50                   	push   eax
c000a288:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a28c:	e8 7b f6 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a291:	83 c4 10             	add    esp,0x10
c000a294:	8b 00                	mov    eax,DWORD PTR [eax]
c000a296:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a29b:	6a 11                	push   0x11
c000a29d:	53                   	push   ebx
c000a29e:	50                   	push   eax
c000a29f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a2a3:	e8 78 fa ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a2a8:	83 c4 10             	add    esp,0x10
c000a2ab:	fb                   	sti    
c000a2ac:	90                   	nop
c000a2ad:	83 c4 28             	add    esp,0x28
c000a2b0:	5b                   	pop    ebx
c000a2b1:	c3                   	ret    

c000a2b2 <VAS::evict(unsigned long)>:
c000a2b2:	55                   	push   ebp
c000a2b3:	57                   	push   edi
c000a2b4:	56                   	push   esi
c000a2b5:	53                   	push   ebx
c000a2b6:	83 ec 1c             	sub    esp,0x1c
c000a2b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2bd:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a2c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a2c5:	e8 a1 f4 ff ff       	call   c000976b <Virt::allocateSwapfilePage()>
c000a2ca:	89 c7                	mov    edi,eax
c000a2cc:	a1 2c 37 02 c0       	mov    eax,ds:0xc002372c
c000a2d1:	85 c0                	test   eax,eax
c000a2d3:	7e 40                	jle    c000a315 <VAS::evict(unsigned long)+0x63>
c000a2d5:	89 ee                	mov    esi,ebp
c000a2d7:	31 db                	xor    ebx,ebx
c000a2d9:	83 ec 0c             	sub    esp,0xc
c000a2dc:	57                   	push   edi
c000a2dd:	e8 73 f4 ff ff       	call   c0009755 <Virt::swapIDToSector(unsigned long)>
c000a2e2:	89 34 24             	mov    DWORD PTR [esp],esi
c000a2e5:	01 d8                	add    eax,ebx
c000a2e7:	6a 01                	push   0x1
c000a2e9:	31 d2                	xor    edx,edx
c000a2eb:	83 c3 01             	add    ebx,0x1
c000a2ee:	52                   	push   edx
c000a2ef:	81 c6 00 02 00 00    	add    esi,0x200
c000a2f5:	50                   	push   eax
c000a2f6:	0f be 05 38 37 02 c0 	movsx  eax,BYTE PTR ds:0xc0023738
c000a2fd:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c000a304:	50                   	push   eax
c000a305:	e8 9a 3b 00 00       	call   c000dea4 <LogicalDisk::write(unsigned long long, int, void*)>
c000a30a:	83 c4 20             	add    esp,0x20
c000a30d:	39 1d 2c 37 02 c0    	cmp    DWORD PTR ds:0xc002372c,ebx
c000a313:	7f c4                	jg     c000a2d9 <VAS::evict(unsigned long)+0x27>
c000a315:	83 ec 08             	sub    esp,0x8
c000a318:	c1 e7 0c             	shl    edi,0xc
c000a31b:	55                   	push   ebp
c000a31c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a320:	50                   	push   eax
c000a321:	e8 e6 f5 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a326:	8b 10                	mov    edx,DWORD PTR [eax]
c000a328:	89 d3                	mov    ebx,edx
c000a32a:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000a330:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a336:	09 d7                	or     edi,edx
c000a338:	89 38                	mov    DWORD PTR [eax],edi
c000a33a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a33d:	8b 15 a8 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026fa8
c000a343:	83 c2 01             	add    edx,0x1
c000a346:	89 15 a8 6f 02 c0    	mov    DWORD PTR ds:0xc0026fa8,edx
c000a34c:	e8 05 da ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c000a351:	0f 20 d8             	mov    eax,cr3
c000a354:	0f 22 d8             	mov    cr3,eax
c000a357:	8b 0d a8 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fa8
c000a35d:	51                   	push   ecx
c000a35e:	55                   	push   ebp
c000a35f:	53                   	push   ebx
c000a360:	68 74 11 02 c0       	push   0xc0021174
c000a365:	e8 db 05 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a36a:	a1 a4 6f 02 c0       	mov    eax,ds:0xc0026fa4
c000a36f:	c7 44 24 50 2e 13 02 c0 	mov    DWORD PTR [esp+0x50],0xc002132e
c000a377:	8d 50 01             	lea    edx,[eax+0x1]
c000a37a:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a37e:	89 15 a4 6f 02 c0    	mov    DWORD PTR ds:0xc0026fa4,edx
c000a384:	83 c4 3c             	add    esp,0x3c
c000a387:	5b                   	pop    ebx
c000a388:	5e                   	pop    esi
c000a389:	5f                   	pop    edi
c000a38a:	5d                   	pop    ebp
c000a38b:	e9 b5 05 00 00       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>

c000a390 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a390:	55                   	push   ebp
c000a391:	57                   	push   edi
c000a392:	56                   	push   esi
c000a393:	53                   	push   ebx
c000a394:	81 ec 1c 10 00 00    	sub    esp,0x101c
c000a39a:	8b b4 24 34 10 00 00 	mov    esi,DWORD PTR [esp+0x1034]
c000a3a1:	89 f3                	mov    ebx,esi
c000a3a3:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a3a9:	81 fe ff ff bf ff    	cmp    esi,0xffbfffff
c000a3af:	77 22                	ja     c000a3d3 <VAS::tryLoadBackOffDisk(unsigned long)+0x43>
c000a3b1:	83 ec 08             	sub    esp,0x8
c000a3b4:	56                   	push   esi
c000a3b5:	68 51 13 02 c0       	push   0xc0021351
c000a3ba:	e8 86 05 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a3bf:	83 c4 10             	add    esp,0x10
c000a3c2:	85 db                	test   ebx,ebx
c000a3c4:	75 2a                	jne    c000a3f0 <VAS::tryLoadBackOffDisk(unsigned long)+0x60>
c000a3c6:	31 c0                	xor    eax,eax
c000a3c8:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a3ce:	5b                   	pop    ebx
c000a3cf:	5e                   	pop    esi
c000a3d0:	5f                   	pop    edi
c000a3d1:	5d                   	pop    ebp
c000a3d2:	c3                   	ret    
c000a3d3:	83 ec 0c             	sub    esp,0xc
c000a3d6:	68 3f 13 02 c0       	push   0xc002133f
c000a3db:	e8 cf 72 00 00       	call   c00116af <KePanic(char const*)>
c000a3e0:	5f                   	pop    edi
c000a3e1:	5d                   	pop    ebp
c000a3e2:	56                   	push   esi
c000a3e3:	68 51 13 02 c0       	push   0xc0021351
c000a3e8:	e8 58 05 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a3ed:	83 c4 10             	add    esp,0x10
c000a3f0:	83 ec 08             	sub    esp,0x8
c000a3f3:	53                   	push   ebx
c000a3f4:	8b 8c 24 3c 10 00 00 	mov    ecx,DWORD PTR [esp+0x103c]
c000a3fb:	51                   	push   ecx
c000a3fc:	e8 0b f5 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a401:	83 c4 10             	add    esp,0x10
c000a404:	89 c2                	mov    edx,eax
c000a406:	85 c0                	test   eax,eax
c000a408:	74 bc                	je     c000a3c6 <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c000a40a:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a40c:	f7 c5 00 02 00 00    	test   ebp,0x200
c000a412:	0f 85 c0 00 00 00    	jne    c000a4d8 <VAS::tryLoadBackOffDisk(unsigned long)+0x148>
c000a418:	89 e8                	mov    eax,ebp
c000a41a:	25 01 04 00 00       	and    eax,0x401
c000a41f:	3d 00 04 00 00       	cmp    eax,0x400
c000a424:	75 a0                	jne    c000a3c6 <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c000a426:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a42a:	c1 ed 0c             	shr    ebp,0xc
c000a42d:	e8 8d d9 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a432:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a436:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000a438:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000a43e:	09 c1                	or     ecx,eax
c000a440:	81 c9 01 08 00 00    	or     ecx,0x801
c000a446:	89 0a                	mov    DWORD PTR [edx],ecx
c000a448:	8b 15 2c 37 02 c0    	mov    edx,DWORD PTR ds:0xc002372c
c000a44e:	85 d2                	test   edx,edx
c000a450:	7e 40                	jle    c000a492 <VAS::tryLoadBackOffDisk(unsigned long)+0x102>
c000a452:	89 df                	mov    edi,ebx
c000a454:	31 f6                	xor    esi,esi
c000a456:	83 ec 0c             	sub    esp,0xc
c000a459:	55                   	push   ebp
c000a45a:	e8 f6 f2 ff ff       	call   c0009755 <Virt::swapIDToSector(unsigned long)>
c000a45f:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a462:	01 f0                	add    eax,esi
c000a464:	6a 01                	push   0x1
c000a466:	31 d2                	xor    edx,edx
c000a468:	83 c6 01             	add    esi,0x1
c000a46b:	52                   	push   edx
c000a46c:	81 c7 00 02 00 00    	add    edi,0x200
c000a472:	50                   	push   eax
c000a473:	0f be 05 38 37 02 c0 	movsx  eax,BYTE PTR ds:0xc0023738
c000a47a:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c000a481:	50                   	push   eax
c000a482:	e8 b1 39 00 00       	call   c000de38 <LogicalDisk::read(unsigned long long, int, void*)>
c000a487:	83 c4 20             	add    esp,0x20
c000a48a:	39 35 2c 37 02 c0    	cmp    DWORD PTR ds:0xc002372c,esi
c000a490:	7f c4                	jg     c000a456 <VAS::tryLoadBackOffDisk(unsigned long)+0xc6>
c000a492:	83 ec 04             	sub    esp,0x4
c000a495:	a1 a8 6f 02 c0       	mov    eax,ds:0xc0026fa8
c000a49a:	83 e8 01             	sub    eax,0x1
c000a49d:	50                   	push   eax
c000a49e:	a3 a8 6f 02 c0       	mov    ds:0xc0026fa8,eax
c000a4a3:	53                   	push   ebx
c000a4a4:	68 64 13 02 c0       	push   0xc0021364
c000a4a9:	e8 97 04 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a4ae:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a4b1:	e8 7c f2 ff ff       	call   c0009732 <Virt::freeSwapfilePage(unsigned long)>
c000a4b6:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000a4bb:	83 c4 10             	add    esp,0x10
c000a4be:	83 e8 01             	sub    eax,0x1
c000a4c1:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000a4c6:	85 c0                	test   eax,eax
c000a4c8:	75 01                	jne    c000a4cb <VAS::tryLoadBackOffDisk(unsigned long)+0x13b>
c000a4ca:	fb                   	sti    
c000a4cb:	0f 20 d8             	mov    eax,cr3
c000a4ce:	0f 22 d8             	mov    cr3,eax
c000a4d1:	b0 01                	mov    al,0x1
c000a4d3:	e9 f0 fe ff ff       	jmp    c000a3c8 <VAS::tryLoadBackOffDisk(unsigned long)+0x38>
c000a4d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a4dc:	bd 00 10 00 00       	mov    ebp,0x1000
c000a4e1:	83 ec 0c             	sub    esp,0xc
c000a4e4:	89 de                	mov    esi,ebx
c000a4e6:	68 a4 11 02 c0       	push   0xc00211a4
c000a4eb:	e8 55 04 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a4f0:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000a4f4:	e8 c6 d8 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a4f9:	89 e9                	mov    ecx,ebp
c000a4fb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a4fd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a501:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000a503:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c000a509:	09 c8                	or     eax,ecx
c000a50b:	83 c8 02             	or     eax,0x2
c000a50e:	89 02                	mov    DWORD PTR [edx],eax
c000a510:	0f 20 d8             	mov    eax,cr3
c000a513:	0f 22 d8             	mov    cr3,eax
c000a516:	8d 74 24 20          	lea    esi,[esp+0x20]
c000a51a:	89 df                	mov    edi,ebx
c000a51c:	89 e9                	mov    ecx,ebp
c000a51e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a520:	b0 01                	mov    al,0x1
c000a522:	83 c4 10             	add    esp,0x10
c000a525:	e9 9e fe ff ff       	jmp    c000a3c8 <VAS::tryLoadBackOffDisk(unsigned long)+0x38>

c000a52a <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c000a52a:	55                   	push   ebp
c000a52b:	57                   	push   edi
c000a52c:	56                   	push   esi
c000a52d:	53                   	push   ebx
c000a52e:	83 ec 28             	sub    esp,0x28
c000a531:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000a535:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a539:	50                   	push   eax
c000a53a:	e8 ce f0 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000a53f:	83 c4 0c             	add    esp,0xc
c000a542:	89 c5                	mov    ebp,eax
c000a544:	6a 07                	push   0x7
c000a546:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a54a:	52                   	push   edx
c000a54b:	56                   	push   esi
c000a54c:	e8 d3 f8 ff ff       	call   c0009e24 <VAS::allocatePages(int, int)>
c000a551:	83 c4 10             	add    esp,0x10
c000a554:	89 c7                	mov    edi,eax
c000a556:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000a55a:	85 c9                	test   ecx,ecx
c000a55c:	74 2f                	je     c000a58d <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c000a55e:	31 db                	xor    ebx,ebx
c000a560:	e8 5a d8 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a565:	83 c3 01             	add    ebx,0x1
c000a568:	6a 03                	push   0x3
c000a56a:	55                   	push   ebp
c000a56b:	50                   	push   eax
c000a56c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a570:	56                   	push   esi
c000a571:	e8 aa f7 ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a576:	6a 07                	push   0x7
c000a578:	57                   	push   edi
c000a579:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a57d:	50                   	push   eax
c000a57e:	56                   	push   esi
c000a57f:	e8 9c f7 ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a584:	83 c4 20             	add    esp,0x20
c000a587:	39 5c 24 34          	cmp    DWORD PTR [esp+0x34],ebx
c000a58b:	75 d3                	jne    c000a560 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c000a58d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a591:	89 28                	mov    DWORD PTR [eax],ebp
c000a593:	83 c4 1c             	add    esp,0x1c
c000a596:	89 f8                	mov    eax,edi
c000a598:	5b                   	pop    ebx
c000a599:	5e                   	pop    esi
c000a59a:	5f                   	pop    edi
c000a59b:	5d                   	pop    ebp
c000a59c:	c3                   	ret    
c000a59d:	90                   	nop

c000a59e <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c000a59e:	53                   	push   ebx
c000a59f:	83 ec 14             	sub    esp,0x14
c000a5a2:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000a5a6:	68 c4 11 02 c0       	push   0xc00211c4
c000a5ab:	e8 95 03 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a5b0:	c7 04 24 24 12 02 c0 	mov    DWORD PTR [esp],0xc0021224
c000a5b7:	e8 89 03 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a5bc:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a5c0:	83 c4 18             	add    esp,0x18
c000a5c3:	5b                   	pop    ebx
c000a5c4:	e9 62 f3 ff ff       	jmp    c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c000a5c9:	90                   	nop

c000a5ca <VAS::scanForEviction()>:
c000a5ca:	57                   	push   edi
c000a5cb:	56                   	push   esi
c000a5cc:	31 f6                	xor    esi,esi
c000a5ce:	53                   	push   ebx
c000a5cf:	83 ec 10             	sub    esp,0x10
c000a5d2:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000a5d6:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a5d9:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a5df:	75 0e                	jne    c000a5ef <VAS::scanForEviction()+0x25>
c000a5e1:	89 da                	mov    edx,ebx
c000a5e3:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a5e6:	c1 ea 16             	shr    edx,0x16
c000a5e9:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a5ed:	74 57                	je     c000a646 <VAS::scanForEviction()+0x7c>
c000a5ef:	53                   	push   ebx
c000a5f0:	57                   	push   edi
c000a5f1:	e8 16 f3 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a5f6:	5a                   	pop    edx
c000a5f7:	8b 10                	mov    edx,DWORD PTR [eax]
c000a5f9:	59                   	pop    ecx
c000a5fa:	89 d1                	mov    ecx,edx
c000a5fc:	c1 e9 0c             	shr    ecx,0xc
c000a5ff:	74 10                	je     c000a611 <VAS::scanForEviction()+0x47>
c000a601:	89 d1                	mov    ecx,edx
c000a603:	81 e1 01 08 00 00    	and    ecx,0x801
c000a609:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a60f:	74 40                	je     c000a651 <VAS::scanForEviction()+0x87>
c000a611:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a617:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a61d:	76 2d                	jbe    c000a64c <VAS::scanForEviction()+0x82>
c000a61f:	83 c6 01             	add    esi,0x1
c000a622:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c000a629:	83 fe 03             	cmp    esi,0x3
c000a62c:	74 32                	je     c000a660 <VAS::scanForEviction()+0x96>
c000a62e:	31 db                	xor    ebx,ebx
c000a630:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a636:	75 b7                	jne    c000a5ef <VAS::scanForEviction()+0x25>
c000a638:	89 da                	mov    edx,ebx
c000a63a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a63d:	c1 ea 16             	shr    edx,0x16
c000a640:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a644:	75 a9                	jne    c000a5ef <VAS::scanForEviction()+0x25>
c000a646:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a64c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c000a64f:	eb 88                	jmp    c000a5d9 <VAS::scanForEviction()+0xf>
c000a651:	f6 c2 20             	test   dl,0x20
c000a654:	74 13                	je     c000a669 <VAS::scanForEviction()+0x9f>
c000a656:	83 e2 df             	and    edx,0xffffffdf
c000a659:	89 10                	mov    DWORD PTR [eax],edx
c000a65b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a65e:	eb b1                	jmp    c000a611 <VAS::scanForEviction()+0x47>
c000a660:	83 c4 10             	add    esp,0x10
c000a663:	31 c0                	xor    eax,eax
c000a665:	5b                   	pop    ebx
c000a666:	5e                   	pop    esi
c000a667:	5f                   	pop    edi
c000a668:	c3                   	ret    
c000a669:	83 ec 08             	sub    esp,0x8
c000a66c:	89 d0                	mov    eax,edx
c000a66e:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a673:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a677:	53                   	push   ebx
c000a678:	68 79 13 02 c0       	push   0xc0021379
c000a67d:	e8 c3 02 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a682:	58                   	pop    eax
c000a683:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a686:	5a                   	pop    edx
c000a687:	51                   	push   ecx
c000a688:	57                   	push   edi
c000a689:	e8 24 fc ff ff       	call   c000a2b2 <VAS::evict(unsigned long)>
c000a68e:	5b                   	pop    ebx
c000a68f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000a692:	5e                   	pop    esi
c000a693:	50                   	push   eax
c000a694:	68 8d 13 02 c0       	push   0xc002138d
c000a699:	e8 a7 02 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a69e:	58                   	pop    eax
c000a69f:	5a                   	pop    edx
c000a6a0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a6a4:	50                   	push   eax
c000a6a5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a6a9:	68 a0 13 02 c0       	push   0xc00213a0
c000a6ae:	e8 92 02 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a6b3:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a6b6:	83 c4 10             	add    esp,0x10
c000a6b9:	81 c1 00 10 00 00    	add    ecx,0x1000
c000a6bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a6c3:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c000a6c6:	83 c4 10             	add    esp,0x10
c000a6c9:	5b                   	pop    ebx
c000a6ca:	5e                   	pop    esi
c000a6cb:	5f                   	pop    edi
c000a6cc:	c3                   	ret    

c000a6cd <mapVASFirstTime>:
c000a6cd:	55                   	push   ebp
c000a6ce:	57                   	push   edi
c000a6cf:	56                   	push   esi
c000a6d0:	53                   	push   ebx
c000a6d1:	83 ec 0c             	sub    esp,0xc
c000a6d4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a6d9:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a6dc:	83 fa 01             	cmp    edx,0x1
c000a6df:	0f 84 cb 00 00 00    	je     c000a7b0 <mapVASFirstTime+0xe3>
c000a6e5:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a6e8:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a6eb:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a6f0:	c1 e5 15             	shl    ebp,0x15
c000a6f3:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a6f8:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a6fe:	29 eb                	sub    ebx,ebp
c000a700:	29 ef                	sub    edi,ebp
c000a702:	e8 b8 d6 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a707:	83 ec 0c             	sub    esp,0xc
c000a70a:	68 03 04 00 00       	push   0x403
c000a70f:	6a 01                	push   0x1
c000a711:	53                   	push   ebx
c000a712:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a718:	50                   	push   eax
c000a719:	56                   	push   esi
c000a71a:	e8 fb f7 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a71f:	83 c4 20             	add    esp,0x20
c000a722:	39 fb                	cmp    ebx,edi
c000a724:	75 dc                	jne    c000a702 <mapVASFirstTime+0x35>
c000a726:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a72b:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a730:	29 eb                	sub    ebx,ebp
c000a732:	29 ef                	sub    edi,ebp
c000a734:	e8 86 d6 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a739:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c000a73d:	83 fa 01             	cmp    edx,0x1
c000a740:	19 d2                	sbb    edx,edx
c000a742:	83 ec 0c             	sub    esp,0xc
c000a745:	83 e2 04             	and    edx,0x4
c000a748:	81 c2 03 04 00 00    	add    edx,0x403
c000a74e:	52                   	push   edx
c000a74f:	6a 01                	push   0x1
c000a751:	53                   	push   ebx
c000a752:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a758:	50                   	push   eax
c000a759:	56                   	push   esi
c000a75a:	e8 bb f7 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a75f:	83 c4 20             	add    esp,0x20
c000a762:	39 df                	cmp    edi,ebx
c000a764:	75 ce                	jne    c000a734 <mapVASFirstTime+0x67>
c000a766:	83 ec 0c             	sub    esp,0xc
c000a769:	bb 7c 60 02 c0       	mov    ebx,0xc002607c
c000a76e:	6a 04                	push   0x4
c000a770:	81 eb 00 50 02 c0    	sub    ebx,0xc0025000
c000a776:	6a ff                	push   0xffffffff
c000a778:	c1 eb 0c             	shr    ebx,0xc
c000a77b:	53                   	push   ebx
c000a77c:	68 00 50 02 c0       	push   0xc0025000
c000a781:	56                   	push   esi
c000a782:	e8 1f f3 ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a787:	83 c4 14             	add    esp,0x14
c000a78a:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c000a78f:	6a 04                	push   0x4
c000a791:	6a ff                	push   0xffffffff
c000a793:	53                   	push   ebx
c000a794:	68 00 50 02 c0       	push   0xc0025000
c000a799:	50                   	push   eax
c000a79a:	e8 07 f3 ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a79f:	0f 20 d8             	mov    eax,cr3
c000a7a2:	0f 22 d8             	mov    cr3,eax
c000a7a5:	83 c4 20             	add    esp,0x20
c000a7a8:	83 c4 0c             	add    esp,0xc
c000a7ab:	5b                   	pop    ebx
c000a7ac:	5e                   	pop    esi
c000a7ad:	5f                   	pop    edi
c000a7ae:	5d                   	pop    ebp
c000a7af:	c3                   	ret    
c000a7b0:	83 ec 0c             	sub    esp,0xc
c000a7b3:	68 ad 13 02 c0       	push   0xc00213ad
c000a7b8:	e8 88 01 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a7bd:	83 c4 10             	add    esp,0x10
c000a7c0:	83 c4 0c             	add    esp,0xc
c000a7c3:	5b                   	pop    ebx
c000a7c4:	5e                   	pop    esi
c000a7c5:	5f                   	pop    edi
c000a7c6:	5d                   	pop    ebp
c000a7c7:	c3                   	ret    

c000a7c8 <__cxa_atexit>:
c000a7c8:	31 c0                	xor    eax,eax
c000a7ca:	c3                   	ret    

c000a7cb <__cxa_finalize>:
c000a7cb:	c3                   	ret    

c000a7cc <__stack_chk_fail>:
c000a7cc:	55                   	push   ebp
c000a7cd:	89 e5                	mov    ebp,esp
c000a7cf:	83 ec 10             	sub    esp,0x10
c000a7d2:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a7d5:	68 c6 13 02 c0       	push   0xc00213c6
c000a7da:	e8 66 01 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a7df:	58                   	pop    eax
c000a7e0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a7e3:	5a                   	pop    edx
c000a7e4:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a7e7:	68 c6 13 02 c0       	push   0xc00213c6
c000a7ec:	e8 54 01 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a7f1:	c7 04 24 ce 13 02 c0 	mov    DWORD PTR [esp],0xc00213ce
c000a7f8:	e8 b2 6e 00 00       	call   c00116af <KePanic(char const*)>
c000a7fd:	83 c4 10             	add    esp,0x10
c000a800:	c9                   	leave  
c000a801:	c3                   	ret    

c000a802 <__cxa_pure_virtual>:
c000a802:	83 ec 18             	sub    esp,0x18
c000a805:	68 e6 13 02 c0       	push   0xc00213e6
c000a80a:	e8 a0 6e 00 00       	call   c00116af <KePanic(char const*)>
c000a80f:	83 c4 1c             	add    esp,0x1c
c000a812:	c3                   	ret    

c000a813 <operator new[](unsigned long)>:
c000a813:	e9 9e d2 ff ff       	jmp    c0007ab6 <malloc>

c000a818 <operator delete(void*, unsigned long)>:
c000a818:	e9 b9 d2 ff ff       	jmp    c0007ad6 <rfree>

c000a81d <operator delete[](void*)>:
c000a81d:	e9 b4 d2 ff ff       	jmp    c0007ad6 <rfree>

c000a822 <operator delete[](void*, unsigned long)>:
c000a822:	e9 af d2 ff ff       	jmp    c0007ad6 <rfree>

c000a827 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a827:	55                   	push   ebp
c000a828:	57                   	push   edi
c000a829:	56                   	push   esi
c000a82a:	be ef 0e 02 c0       	mov    esi,0xc0020eef
c000a82f:	53                   	push   ebx
c000a830:	83 ec 20             	sub    esp,0x20
c000a833:	a0 ee 0e 02 c0       	mov    al,ds:0xc0020eee
c000a838:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000a83c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000a840:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a844:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a848:	b8 10 00 00 00       	mov    eax,0x10
c000a84d:	f7 c7 02 00 00 00    	test   edi,0x2
c000a853:	75 60                	jne    c000a8b5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x8e>
c000a855:	89 c1                	mov    ecx,eax
c000a857:	c1 e9 02             	shr    ecx,0x2
c000a85a:	fc                   	cld    
c000a85b:	31 d2                	xor    edx,edx
c000a85d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000a85f:	a8 02                	test   al,0x2
c000a861:	74 0b                	je     c000a86e <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x47>
c000a863:	66 8b 16             	mov    dx,WORD PTR [esi]
c000a866:	66 89 17             	mov    WORD PTR [edi],dx
c000a869:	ba 02 00 00 00       	mov    edx,0x2
c000a86e:	a8 01                	test   al,0x1
c000a870:	74 06                	je     c000a878 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x51>
c000a872:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c000a875:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c000a878:	89 ee                	mov    esi,ebp
c000a87a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a87e:	eb 02                	jmp    c000a882 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5b>
c000a880:	89 c6                	mov    esi,eax
c000a882:	31 d2                	xor    edx,edx
c000a884:	83 c1 01             	add    ecx,0x1
c000a887:	89 f0                	mov    eax,esi
c000a889:	f7 f3                	div    ebx
c000a88b:	39 de                	cmp    esi,ebx
c000a88d:	73 f1                	jae    c000a880 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x59>
c000a88f:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a892:	eb 02                	jmp    c000a896 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6f>
c000a894:	89 c5                	mov    ebp,eax
c000a896:	31 d2                	xor    edx,edx
c000a898:	83 e9 01             	sub    ecx,0x1
c000a89b:	89 e8                	mov    eax,ebp
c000a89d:	f7 f3                	div    ebx
c000a89f:	39 dd                	cmp    ebp,ebx
c000a8a1:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a8a5:	88 11                	mov    BYTE PTR [ecx],dl
c000a8a7:	73 eb                	jae    c000a894 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6d>
c000a8a9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a8ad:	83 c4 20             	add    esp,0x20
c000a8b0:	5b                   	pop    ebx
c000a8b1:	5e                   	pop    esi
c000a8b2:	5f                   	pop    edi
c000a8b3:	5d                   	pop    ebp
c000a8b4:	c3                   	ret    
c000a8b5:	66 8b 16             	mov    dx,WORD PTR [esi]
c000a8b8:	83 c7 02             	add    edi,0x2
c000a8bb:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c000a8bf:	83 c6 02             	add    esi,0x2
c000a8c2:	83 e8 02             	sub    eax,0x2
c000a8c5:	eb 8e                	jmp    c000a855 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2e>

c000a8c7 <Dbg::logc(char)>:
c000a8c7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a8cb:	f6 05 d0 6e 02 c0 10 	test   BYTE PTR ds:0xc0026ed0,0x10
c000a8d2:	75 12                	jne    c000a8e6 <Dbg::logc(char)+0x1f>
c000a8d4:	ba fd 03 00 00       	mov    edx,0x3fd
c000a8d9:	ec                   	in     al,dx
c000a8da:	a8 20                	test   al,0x20
c000a8dc:	74 fb                	je     c000a8d9 <Dbg::logc(char)+0x12>
c000a8de:	ba f8 03 00 00       	mov    edx,0x3f8
c000a8e3:	88 c8                	mov    al,cl
c000a8e5:	ee                   	out    dx,al
c000a8e6:	c3                   	ret    

c000a8e7 <Dbg::logs(char*)>:
c000a8e7:	53                   	push   ebx
c000a8e8:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a8ec:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8ef:	85 c0                	test   eax,eax
c000a8f1:	74 11                	je     c000a904 <Dbg::logs(char*)+0x1d>
c000a8f3:	83 c3 01             	add    ebx,0x1
c000a8f6:	50                   	push   eax
c000a8f7:	e8 cb ff ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000a8fc:	58                   	pop    eax
c000a8fd:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a900:	85 c0                	test   eax,eax
c000a902:	75 ef                	jne    c000a8f3 <Dbg::logs(char*)+0xc>
c000a904:	5b                   	pop    ebx
c000a905:	c3                   	ret    

c000a906 <Dbg::logWriteInt(unsigned int)>:
c000a906:	83 ec 10             	sub    esp,0x10
c000a909:	6a 0a                	push   0xa
c000a90b:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a90f:	50                   	push   eax
c000a910:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a914:	50                   	push   eax
c000a915:	e8 0d ff ff ff       	call   c000a827 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a91a:	50                   	push   eax
c000a91b:	e8 c7 ff ff ff       	call   c000a8e7 <Dbg::logs(char*)>
c000a920:	83 c4 20             	add    esp,0x20
c000a923:	c3                   	ret    

c000a924 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a924:	83 ec 10             	sub    esp,0x10
c000a927:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a92b:	50                   	push   eax
c000a92c:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a930:	50                   	push   eax
c000a931:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a935:	52                   	push   edx
c000a936:	e8 ec fe ff ff       	call   c000a827 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a93b:	50                   	push   eax
c000a93c:	e8 a6 ff ff ff       	call   c000a8e7 <Dbg::logs(char*)>
c000a941:	83 c4 20             	add    esp,0x20
c000a944:	c3                   	ret    

c000a945 <Dbg::kprintf(char const*, ...)>:
c000a945:	55                   	push   ebp
c000a946:	57                   	push   edi
c000a947:	56                   	push   esi
c000a948:	53                   	push   ebx
c000a949:	83 ec 0c             	sub    esp,0xc
c000a94c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a950:	f6 05 d0 6e 02 c0 10 	test   BYTE PTR ds:0xc0026ed0,0x10
c000a957:	74 08                	je     c000a961 <Dbg::kprintf(char const*, ...)+0x1c>
c000a959:	83 c4 0c             	add    esp,0xc
c000a95c:	5b                   	pop    ebx
c000a95d:	5e                   	pop    esi
c000a95e:	5f                   	pop    edi
c000a95f:	5d                   	pop    ebp
c000a960:	c3                   	ret    
c000a961:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a965:	31 ff                	xor    edi,edi
c000a967:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a96b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a96e:	85 c0                	test   eax,eax
c000a970:	74 e7                	je     c000a959 <Dbg::kprintf(char const*, ...)+0x14>
c000a972:	8d 77 01             	lea    esi,[edi+0x1]
c000a975:	83 f8 25             	cmp    eax,0x25
c000a978:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a97b:	75 47                	jne    c000a9c4 <Dbg::kprintf(char const*, ...)+0x7f>
c000a97d:	83 c7 02             	add    edi,0x2
c000a980:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a983:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a986:	83 e8 25             	sub    eax,0x25
c000a989:	0f b6 c0             	movzx  eax,al
c000a98c:	83 f8 53             	cmp    eax,0x53
c000a98f:	0f 87 ce 00 00 00    	ja     c000aa63 <Dbg::kprintf(char const*, ...)+0x11e>
c000a995:	ff 24 85 fc 13 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdec04]
c000a99c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9a0:	89 c8                	mov    eax,ecx
c000a9a2:	83 c1 04             	add    ecx,0x4
c000a9a5:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9a9:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a9ab:	55                   	push   ebp
c000a9ac:	e8 55 ff ff ff       	call   c000a906 <Dbg::logWriteInt(unsigned int)>
c000a9b1:	58                   	pop    eax
c000a9b2:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a9b5:	85 c0                	test   eax,eax
c000a9b7:	74 a0                	je     c000a959 <Dbg::kprintf(char const*, ...)+0x14>
c000a9b9:	8d 77 01             	lea    esi,[edi+0x1]
c000a9bc:	83 f8 25             	cmp    eax,0x25
c000a9bf:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a9c2:	74 b9                	je     c000a97d <Dbg::kprintf(char const*, ...)+0x38>
c000a9c4:	50                   	push   eax
c000a9c5:	89 f7                	mov    edi,esi
c000a9c7:	e8 fb fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000a9cc:	89 ee                	mov    esi,ebp
c000a9ce:	58                   	pop    eax
c000a9cf:	eb e1                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9d1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9d5:	89 c8                	mov    eax,ecx
c000a9d7:	83 c1 04             	add    ecx,0x4
c000a9da:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9dc:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9e0:	50                   	push   eax
c000a9e1:	e8 01 ff ff ff       	call   c000a8e7 <Dbg::logs(char*)>
c000a9e6:	58                   	pop    eax
c000a9e7:	eb c9                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9e9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9ed:	89 d0                	mov    eax,edx
c000a9ef:	83 c2 04             	add    edx,0x4
c000a9f2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9f6:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9f8:	50                   	push   eax
c000a9f9:	e8 08 ff ff ff       	call   c000a906 <Dbg::logWriteInt(unsigned int)>
c000a9fe:	58                   	pop    eax
c000a9ff:	eb b1                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa01:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa05:	89 d0                	mov    eax,edx
c000aa07:	83 c2 04             	add    edx,0x4
c000aa0a:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000aa0d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa11:	50                   	push   eax
c000aa12:	e8 b0 fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa17:	58                   	pop    eax
c000aa18:	eb 98                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa1a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000aa1e:	89 c8                	mov    eax,ecx
c000aa20:	83 c1 04             	add    ecx,0x4
c000aa23:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000aa27:	6a 10                	push   0x10
c000aa29:	8b 08                	mov    ecx,DWORD PTR [eax]
c000aa2b:	51                   	push   ecx
c000aa2c:	e8 f3 fe ff ff       	call   c000a924 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa31:	5d                   	pop    ebp
c000aa32:	58                   	pop    eax
c000aa33:	e9 7a ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa38:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa3c:	89 d0                	mov    eax,edx
c000aa3e:	83 c2 08             	add    edx,0x8
c000aa41:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa45:	6a 10                	push   0x10
c000aa47:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa49:	50                   	push   eax
c000aa4a:	e8 d5 fe ff ff       	call   c000a924 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa4f:	58                   	pop    eax
c000aa50:	5a                   	pop    edx
c000aa51:	e9 5c ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa56:	6a 25                	push   0x25
c000aa58:	e8 6a fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa5d:	5a                   	pop    edx
c000aa5e:	e9 4f ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa63:	6a 25                	push   0x25
c000aa65:	e8 5d fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa6a:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000aa6e:	50                   	push   eax
c000aa6f:	e8 53 fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa74:	5a                   	pop    edx
c000aa75:	59                   	pop    ecx
c000aa76:	e9 37 ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa7b:	90                   	nop

c000aa7c <KiUbsanPrintDetails(char const*, void*)>:
c000aa7c:	83 ec 1c             	sub    esp,0x1c
c000aa7f:	83 ec 08             	sub    esp,0x8
c000aa82:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000aa86:	68 4c 15 02 c0       	push   0xc002154c
c000aa8b:	e8 b5 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aa90:	83 c4 10             	add    esp,0x10
c000aa93:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aa97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa9f:	8b 00                	mov    eax,DWORD PTR [eax]
c000aaa1:	83 ec 08             	sub    esp,0x8
c000aaa4:	50                   	push   eax
c000aaa5:	68 60 15 02 c0       	push   0xc0021560
c000aaaa:	e8 96 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aaaf:	83 c4 10             	add    esp,0x10
c000aab2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aab6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000aab9:	83 ec 08             	sub    esp,0x8
c000aabc:	50                   	push   eax
c000aabd:	68 6a 15 02 c0       	push   0xc002156a
c000aac2:	e8 7e fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aac7:	83 c4 10             	add    esp,0x10
c000aaca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aace:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000aad1:	83 ec 08             	sub    esp,0x8
c000aad4:	50                   	push   eax
c000aad5:	68 74 15 02 c0       	push   0xc0021574
c000aada:	e8 66 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aadf:	83 c4 10             	add    esp,0x10
c000aae2:	90                   	nop
c000aae3:	83 c4 1c             	add    esp,0x1c
c000aae6:	c3                   	ret    
c000aae7:	90                   	nop

c000aae8 <__ubsan_handle_type_mismatch_v1>:
c000aae8:	83 ec 0c             	sub    esp,0xc
c000aaeb:	83 ec 08             	sub    esp,0x8
c000aaee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aaf2:	68 b8 16 02 c0       	push   0xc00216b8
c000aaf7:	e8 80 ff ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000aafc:	83 c4 10             	add    esp,0x10
c000aaff:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000ab04:	75 16                	jne    c000ab1c <__ubsan_handle_type_mismatch_v1+0x34>
c000ab06:	83 ec 0c             	sub    esp,0xc
c000ab09:	68 7e 15 02 c0       	push   0xc002157e
c000ab0e:	e8 32 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab13:	83 c4 10             	add    esp,0x10
c000ab16:	e9 91 00 00 00       	jmp    c000abac <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab1b:	90                   	nop
c000ab1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab20:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ab23:	85 c0                	test   eax,eax
c000ab25:	74 29                	je     c000ab50 <__ubsan_handle_type_mismatch_v1+0x68>
c000ab27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab2b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ab2e:	83 e8 01             	sub    eax,0x1
c000ab31:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c000ab35:	75 19                	jne    c000ab50 <__ubsan_handle_type_mismatch_v1+0x68>
c000ab37:	83 ec 08             	sub    esp,0x8
c000ab3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab3e:	68 d8 16 02 c0       	push   0xc00216d8
c000ab43:	e8 fd fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab48:	83 c4 10             	add    esp,0x10
c000ab4b:	eb 5f                	jmp    c000abac <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab4d:	8d 76 00             	lea    esi,[esi+0x0]
c000ab50:	83 ec 0c             	sub    esp,0xc
c000ab53:	68 93 15 02 c0       	push   0xc0021593
c000ab58:	e8 e8 fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab5d:	83 c4 10             	add    esp,0x10
c000ab60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab64:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab67:	0f b6 c0             	movzx  eax,al
c000ab6a:	83 ec 08             	sub    esp,0x8
c000ab6d:	50                   	push   eax
c000ab6e:	68 ad 15 02 c0       	push   0xc00215ad
c000ab73:	e8 cd fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab78:	83 c4 10             	add    esp,0x10
c000ab7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab7f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab82:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000ab85:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ab89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab8d:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab90:	0f b6 c0             	movzx  eax,al
c000ab93:	8b 04 85 40 37 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc8c0]
c000ab9a:	51                   	push   ecx
c000ab9b:	52                   	push   edx
c000ab9c:	50                   	push   eax
c000ab9d:	68 00 17 02 c0       	push   0xc0021700
c000aba2:	e8 9e fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aba7:	83 c4 10             	add    esp,0x10
c000abaa:	66 90                	xchg   ax,ax
c000abac:	83 ec 0c             	sub    esp,0xc
c000abaf:	68 b8 16 02 c0       	push   0xc00216b8
c000abb4:	e8 f6 6a 00 00       	call   c00116af <KePanic(char const*)>
c000abb9:	83 c4 10             	add    esp,0x10
c000abbc:	90                   	nop
c000abbd:	83 c4 0c             	add    esp,0xc
c000abc0:	c3                   	ret    
c000abc1:	8d 76 00             	lea    esi,[esi+0x0]

c000abc4 <__ubsan_handle_pointer_overflow>:
c000abc4:	83 ec 0c             	sub    esp,0xc
c000abc7:	83 ec 08             	sub    esp,0x8
c000abca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abce:	68 48 17 02 c0       	push   0xc0021748
c000abd3:	e8 a4 fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000abd8:	83 c4 10             	add    esp,0x10
c000abdb:	83 ec 0c             	sub    esp,0xc
c000abde:	68 48 17 02 c0       	push   0xc0021748
c000abe3:	e8 c7 6a 00 00       	call   c00116af <KePanic(char const*)>
c000abe8:	83 c4 10             	add    esp,0x10
c000abeb:	90                   	nop
c000abec:	83 c4 0c             	add    esp,0xc
c000abef:	c3                   	ret    

c000abf0 <__ubsan_handle_out_of_bounds>:
c000abf0:	83 ec 0c             	sub    esp,0xc
c000abf3:	83 ec 08             	sub    esp,0x8
c000abf6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abfa:	68 b8 15 02 c0       	push   0xc00215b8
c000abff:	e8 78 fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac04:	83 c4 10             	add    esp,0x10
c000ac07:	83 ec 0c             	sub    esp,0xc
c000ac0a:	68 b8 15 02 c0       	push   0xc00215b8
c000ac0f:	e8 9b 6a 00 00       	call   c00116af <KePanic(char const*)>
c000ac14:	83 c4 10             	add    esp,0x10
c000ac17:	90                   	nop
c000ac18:	83 c4 0c             	add    esp,0xc
c000ac1b:	c3                   	ret    

c000ac1c <__ubsan_handle_add_overflow>:
c000ac1c:	83 ec 0c             	sub    esp,0xc
c000ac1f:	83 ec 08             	sub    esp,0x8
c000ac22:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac26:	68 d5 15 02 c0       	push   0xc00215d5
c000ac2b:	e8 4c fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac30:	83 c4 10             	add    esp,0x10
c000ac33:	83 ec 0c             	sub    esp,0xc
c000ac36:	68 d5 15 02 c0       	push   0xc00215d5
c000ac3b:	e8 6f 6a 00 00       	call   c00116af <KePanic(char const*)>
c000ac40:	83 c4 10             	add    esp,0x10
c000ac43:	90                   	nop
c000ac44:	83 c4 0c             	add    esp,0xc
c000ac47:	c3                   	ret    

c000ac48 <__ubsan_handle_load_invalid_value>:
c000ac48:	83 ec 0c             	sub    esp,0xc
c000ac4b:	83 ec 08             	sub    esp,0x8
c000ac4e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac52:	68 68 17 02 c0       	push   0xc0021768
c000ac57:	e8 20 fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac5c:	83 c4 10             	add    esp,0x10
c000ac5f:	83 ec 0c             	sub    esp,0xc
c000ac62:	68 68 17 02 c0       	push   0xc0021768
c000ac67:	e8 43 6a 00 00       	call   c00116af <KePanic(char const*)>
c000ac6c:	83 c4 10             	add    esp,0x10
c000ac6f:	90                   	nop
c000ac70:	83 c4 0c             	add    esp,0xc
c000ac73:	c3                   	ret    

c000ac74 <__ubsan_handle_divrem_overflow>:
c000ac74:	83 ec 0c             	sub    esp,0xc
c000ac77:	83 ec 08             	sub    esp,0x8
c000ac7a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac7e:	68 8c 17 02 c0       	push   0xc002178c
c000ac83:	e8 f4 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac88:	83 c4 10             	add    esp,0x10
c000ac8b:	83 ec 0c             	sub    esp,0xc
c000ac8e:	68 8c 17 02 c0       	push   0xc002178c
c000ac93:	e8 17 6a 00 00       	call   c00116af <KePanic(char const*)>
c000ac98:	83 c4 10             	add    esp,0x10
c000ac9b:	90                   	nop
c000ac9c:	83 c4 0c             	add    esp,0xc
c000ac9f:	c3                   	ret    

c000aca0 <__ubsan_handle_mul_overflow>:
c000aca0:	83 ec 0c             	sub    esp,0xc
c000aca3:	83 ec 08             	sub    esp,0x8
c000aca6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acaa:	68 f1 15 02 c0       	push   0xc00215f1
c000acaf:	e8 c8 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000acb4:	83 c4 10             	add    esp,0x10
c000acb7:	83 ec 0c             	sub    esp,0xc
c000acba:	68 f1 15 02 c0       	push   0xc00215f1
c000acbf:	e8 eb 69 00 00       	call   c00116af <KePanic(char const*)>
c000acc4:	83 c4 10             	add    esp,0x10
c000acc7:	90                   	nop
c000acc8:	83 c4 0c             	add    esp,0xc
c000accb:	c3                   	ret    

c000accc <__ubsan_handle_sub_overflow>:
c000accc:	83 ec 0c             	sub    esp,0xc
c000accf:	83 ec 08             	sub    esp,0x8
c000acd2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acd6:	68 0d 16 02 c0       	push   0xc002160d
c000acdb:	e8 9c fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ace0:	83 c4 10             	add    esp,0x10
c000ace3:	83 ec 0c             	sub    esp,0xc
c000ace6:	68 0d 16 02 c0       	push   0xc002160d
c000aceb:	e8 bf 69 00 00       	call   c00116af <KePanic(char const*)>
c000acf0:	83 c4 10             	add    esp,0x10
c000acf3:	90                   	nop
c000acf4:	83 c4 0c             	add    esp,0xc
c000acf7:	c3                   	ret    

c000acf8 <__ubsan_handle_shift_out_of_bounds>:
c000acf8:	83 ec 0c             	sub    esp,0xc
c000acfb:	83 ec 08             	sub    esp,0x8
c000acfe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad02:	68 ac 17 02 c0       	push   0xc00217ac
c000ad07:	e8 70 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ad0c:	83 c4 10             	add    esp,0x10
c000ad0f:	83 ec 0c             	sub    esp,0xc
c000ad12:	68 ac 17 02 c0       	push   0xc00217ac
c000ad17:	e8 93 69 00 00       	call   c00116af <KePanic(char const*)>
c000ad1c:	83 c4 10             	add    esp,0x10
c000ad1f:	90                   	nop
c000ad20:	83 c4 0c             	add    esp,0xc
c000ad23:	c3                   	ret    

c000ad24 <__ubsan_handle_negate_overflow>:
c000ad24:	83 ec 0c             	sub    esp,0xc
c000ad27:	83 ec 08             	sub    esp,0x8
c000ad2a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad2e:	68 d0 17 02 c0       	push   0xc00217d0
c000ad33:	e8 44 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ad38:	83 c4 10             	add    esp,0x10
c000ad3b:	83 ec 0c             	sub    esp,0xc
c000ad3e:	68 d0 17 02 c0       	push   0xc00217d0
c000ad43:	e8 67 69 00 00       	call   c00116af <KePanic(char const*)>
c000ad48:	83 c4 10             	add    esp,0x10
c000ad4b:	90                   	nop
c000ad4c:	83 c4 0c             	add    esp,0xc
c000ad4f:	c3                   	ret    

c000ad50 <KiIsHashInTable(unsigned short)>:
c000ad50:	0f b7 d0             	movzx  edx,ax
c000ad53:	83 e0 07             	and    eax,0x7
c000ad56:	c1 fa 03             	sar    edx,0x3
c000ad59:	88 c1                	mov    cl,al
c000ad5b:	0f b6 92 00 74 02 c0 	movzx  edx,BYTE PTR [edx-0x3ffd8c00]
c000ad62:	d3 fa                	sar    edx,cl
c000ad64:	89 d0                	mov    eax,edx
c000ad66:	83 e0 01             	and    eax,0x1
c000ad69:	c3                   	ret    

c000ad6a <KiSetHashInTable(unsigned short, bool)>:
c000ad6a:	56                   	push   esi
c000ad6b:	53                   	push   ebx
c000ad6c:	0f b7 d8             	movzx  ebx,ax
c000ad6f:	83 e0 07             	and    eax,0x7
c000ad72:	c1 fb 03             	sar    ebx,0x3
c000ad75:	89 c1                	mov    ecx,eax
c000ad77:	0f b6 b3 00 74 02 c0 	movzx  esi,BYTE PTR [ebx-0x3ffd8c00]
c000ad7e:	b8 01 00 00 00       	mov    eax,0x1
c000ad83:	d3 e0                	shl    eax,cl
c000ad85:	84 d2                	test   dl,dl
c000ad87:	74 04                	je     c000ad8d <KiSetHashInTable(unsigned short, bool)+0x23>
c000ad89:	09 f0                	or     eax,esi
c000ad8b:	eb 04                	jmp    c000ad91 <KiSetHashInTable(unsigned short, bool)+0x27>
c000ad8d:	f7 d0                	not    eax
c000ad8f:	21 f0                	and    eax,esi
c000ad91:	88 83 00 74 02 c0    	mov    BYTE PTR [ebx-0x3ffd8c00],al
c000ad97:	5b                   	pop    ebx
c000ad98:	5e                   	pop    esi
c000ad99:	c3                   	ret    

c000ad9a <KiFlushSymlinkChanges()>:
c000ad9a:	57                   	push   edi
c000ad9b:	56                   	push   esi
c000ad9c:	53                   	push   ebx
c000ad9d:	83 ec 1c             	sub    esp,0x1c
c000ada0:	68 14 01 00 00       	push   0x114
c000ada5:	e8 0c cd ff ff       	call   c0007ab6 <malloc>
c000adaa:	83 c4 0c             	add    esp,0xc
c000adad:	89 c3                	mov    ebx,eax
c000adaf:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000adb5:	68 ef 17 02 c0       	push   0xc00217ef
c000adba:	50                   	push   eax
c000adbb:	e8 1c 0e 00 00       	call   c000bbdc <File::File(char const*, Process*)>
c000adc0:	83 c4 10             	add    esp,0x10
c000adc3:	85 db                	test   ebx,ebx
c000adc5:	75 10                	jne    c000add7 <KiFlushSymlinkChanges()+0x3d>
c000adc7:	83 ec 0c             	sub    esp,0xc
c000adca:	68 0d 18 02 c0       	push   0xc002180d
c000adcf:	e8 db 68 00 00       	call   c00116af <KePanic(char const*)>
c000add4:	83 c4 10             	add    esp,0x10
c000add7:	57                   	push   edi
c000add8:	57                   	push   edi
c000add9:	6a 06                	push   0x6
c000addb:	53                   	push   ebx
c000addc:	e8 19 0e 00 00       	call   c000bbfa <File::open(FileOpenMode)>
c000ade1:	83 c4 10             	add    esp,0x10
c000ade4:	85 c0                	test   eax,eax
c000ade6:	74 10                	je     c000adf8 <KiFlushSymlinkChanges()+0x5e>
c000ade8:	83 ec 0c             	sub    esp,0xc
c000adeb:	68 27 18 02 c0       	push   0xc0021827
c000adf0:	e8 ba 68 00 00       	call   c00116af <KePanic(char const*)>
c000adf5:	83 c4 10             	add    esp,0x10
c000adf8:	31 f6                	xor    esi,esi
c000adfa:	39 35 c0 6f 02 c0    	cmp    DWORD PTR ds:0xc0026fc0,esi
c000ae00:	7e 70                	jle    c000ae72 <KiFlushSymlinkChanges()+0xd8>
c000ae02:	83 ec 0c             	sub    esp,0xc
c000ae05:	8b 13                	mov    edx,DWORD PTR [ebx]
c000ae07:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000ae0b:	89 f0                	mov    eax,esi
c000ae0d:	57                   	push   edi
c000ae0e:	c1 e0 08             	shl    eax,0x8
c000ae11:	05 00 70 02 c0       	add    eax,0xc0027000
c000ae16:	50                   	push   eax
c000ae17:	6a 00                	push   0x0
c000ae19:	68 00 01 00 00       	push   0x100
c000ae1e:	53                   	push   ebx
c000ae1f:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000ae22:	83 c4 20             	add    esp,0x20
c000ae25:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c000ae2d:	74 10                	je     c000ae3f <KiFlushSymlinkChanges()+0xa5>
c000ae2f:	83 ec 0c             	sub    esp,0xc
c000ae32:	68 41 18 02 c0       	push   0xc0021841
c000ae37:	e8 73 68 00 00       	call   c00116af <KePanic(char const*)>
c000ae3c:	83 c4 10             	add    esp,0x10
c000ae3f:	83 ec 0c             	sub    esp,0xc
c000ae42:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ae44:	8d 14 f5 e0 6f 02 c0 	lea    edx,[esi*8-0x3ffd9020]
c000ae4b:	57                   	push   edi
c000ae4c:	52                   	push   edx
c000ae4d:	6a 00                	push   0x0
c000ae4f:	6a 08                	push   0x8
c000ae51:	53                   	push   ebx
c000ae52:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ae55:	83 c4 20             	add    esp,0x20
c000ae58:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000ae5d:	74 10                	je     c000ae6f <KiFlushSymlinkChanges()+0xd5>
c000ae5f:	83 ec 0c             	sub    esp,0xc
c000ae62:	68 5b 18 02 c0       	push   0xc002185b
c000ae67:	e8 43 68 00 00       	call   c00116af <KePanic(char const*)>
c000ae6c:	83 c4 10             	add    esp,0x10
c000ae6f:	46                   	inc    esi
c000ae70:	eb 88                	jmp    c000adfa <KiFlushSymlinkChanges()+0x60>
c000ae72:	83 ec 0c             	sub    esp,0xc
c000ae75:	53                   	push   ebx
c000ae76:	e8 dd 0d 00 00       	call   c000bc58 <File::close()>
c000ae7b:	83 c4 10             	add    esp,0x10
c000ae7e:	85 db                	test   ebx,ebx
c000ae80:	74 0c                	je     c000ae8e <KiFlushSymlinkChanges()+0xf4>
c000ae82:	83 ec 0c             	sub    esp,0xc
c000ae85:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ae87:	53                   	push   ebx
c000ae88:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000ae8b:	83 c4 10             	add    esp,0x10
c000ae8e:	83 ec 0c             	sub    esp,0xc
c000ae91:	c7 05 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026fc0,0x0
c000ae9b:	68 75 18 02 c0       	push   0xc0021875
c000aea0:	bf 00 00 00 00       	mov    edi,0x0
c000aea5:	e8 3b 7e 00 00       	call   c0012ce5 <CmOpen(char const*)>
c000aeaa:	59                   	pop    ecx
c000aeab:	89 c3                	mov    ebx,eax
c000aead:	5e                   	pop    esi
c000aeae:	68 9a 18 02 c0       	push   0xc002189a
c000aeb3:	50                   	push   eax
c000aeb4:	e8 2c 8a 00 00       	call   c00138e5 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c000aeb9:	83 c4 10             	add    esp,0x10
c000aebc:	8b 35 00 94 02 c0    	mov    esi,DWORD PTR ds:0xc0029400
c000aec2:	40                   	inc    eax
c000aec3:	75 2a                	jne    c000aeef <KiFlushSymlinkChanges()+0x155>
c000aec5:	52                   	push   edx
c000aec6:	52                   	push   edx
c000aec7:	68 af 18 02 c0       	push   0xc00218af
c000aecc:	53                   	push   ebx
c000aecd:	e8 13 8a 00 00       	call   c00138e5 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c000aed2:	59                   	pop    ecx
c000aed3:	5a                   	pop    edx
c000aed4:	50                   	push   eax
c000aed5:	53                   	push   ebx
c000aed6:	e8 f1 7f 00 00       	call   c0012ecc <CmEnterDirectory(Reghive_Tag*, int)>
c000aedb:	59                   	pop    ecx
c000aedc:	5a                   	pop    edx
c000aedd:	6a 6c                	push   0x6c
c000aedf:	57                   	push   edi
c000aee0:	56                   	push   esi
c000aee1:	68 a1 18 02 c0       	push   0xc00218a1
c000aee6:	50                   	push   eax
c000aee7:	53                   	push   ebx
c000aee8:	e8 6f 88 00 00       	call   c001375c <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c000aeed:	eb 16                	jmp    c000af05 <KiFlushSymlinkChanges()+0x16b>
c000aeef:	50                   	push   eax
c000aef0:	50                   	push   eax
c000aef1:	68 9a 18 02 c0       	push   0xc002189a
c000aef6:	53                   	push   ebx
c000aef7:	e8 e9 89 00 00       	call   c00138e5 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c000aefc:	57                   	push   edi
c000aefd:	56                   	push   esi
c000aefe:	50                   	push   eax
c000aeff:	53                   	push   ebx
c000af00:	e8 e0 84 00 00       	call   c00133e5 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>
c000af05:	83 c4 20             	add    esp,0x20
c000af08:	83 ec 0c             	sub    esp,0xc
c000af0b:	53                   	push   ebx
c000af0c:	e8 f2 7e 00 00       	call   c0012e03 <CmClose(Reghive_Tag*)>
c000af11:	83 c4 20             	add    esp,0x20
c000af14:	5b                   	pop    ebx
c000af15:	5e                   	pop    esi
c000af16:	5f                   	pop    edi
c000af17:	c3                   	ret    

c000af18 <KiDeinitialiseSymlinks(void*)>:
c000af18:	e9 7d fe ff ff       	jmp    c000ad9a <KiFlushSymlinkChanges()>

c000af1d <KiGetSymlinkHash(char const*)>:
c000af1d:	53                   	push   ebx
c000af1e:	89 c3                	mov    ebx,eax
c000af20:	83 ec 14             	sub    esp,0x14
c000af23:	50                   	push   eax
c000af24:	e8 47 56 ff ff       	call   c0000570 <strlen>
c000af29:	5a                   	pop    edx
c000af2a:	59                   	pop    ecx
c000af2b:	50                   	push   eax
c000af2c:	53                   	push   ebx
c000af2d:	e8 ff 60 00 00       	call   c0011031 <KeCalculateCRC32(unsigned char*, int)>
c000af32:	83 c4 18             	add    esp,0x18
c000af35:	89 c2                	mov    edx,eax
c000af37:	5b                   	pop    ebx
c000af38:	c1 ea 10             	shr    edx,0x10
c000af3b:	31 d0                	xor    eax,edx
c000af3d:	c3                   	ret    

c000af3e <KiCreateSymlinkID()>:
c000af3e:	55                   	push   ebp
c000af3f:	57                   	push   edi
c000af40:	56                   	push   esi
c000af41:	53                   	push   ebx
c000af42:	31 db                	xor    ebx,ebx
c000af44:	83 ec 1c             	sub    esp,0x1c
c000af47:	e8 b1 68 00 00       	call   c00117fd <KeRand()>
c000af4c:	43                   	inc    ebx
c000af4d:	8b 2d 00 94 02 c0    	mov    ebp,DWORD PTR ds:0xc0029400
c000af53:	31 d2                	xor    edx,edx
c000af55:	8d 4d 01             	lea    ecx,[ebp+0x1]
c000af58:	0f a4 c2 1f          	shld   edx,eax,0x1f
c000af5c:	89 0d 00 94 02 c0    	mov    DWORD PTR ds:0xc0029400,ecx
c000af62:	c1 e0 1f             	shl    eax,0x1f
c000af65:	89 d7                	mov    edi,edx
c000af67:	89 c6                	mov    esi,eax
c000af69:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000af6d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000af75:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c000af7b:	75 10                	jne    c000af8d <KiCreateSymlinkID()+0x4f>
c000af7d:	83 ec 0c             	sub    esp,0xc
c000af80:	68 b6 18 02 c0       	push   0xc00218b6
c000af85:	e8 25 67 00 00       	call   c00116af <KePanic(char const*)>
c000af8a:	83 c4 10             	add    esp,0x10
c000af8d:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000af91:	75 04                	jne    c000af97 <KiCreateSymlinkID()+0x59>
c000af93:	39 f5                	cmp    ebp,esi
c000af95:	74 b0                	je     c000af47 <KiCreateSymlinkID()+0x9>
c000af97:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000af9b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000af9f:	31 f0                	xor    eax,esi
c000afa1:	83 c4 1c             	add    esp,0x1c
c000afa4:	31 fa                	xor    edx,edi
c000afa6:	5b                   	pop    ebx
c000afa7:	5e                   	pop    esi
c000afa8:	5f                   	pop    edi
c000afa9:	5d                   	pop    ebp
c000afaa:	c3                   	ret    

c000afab <KeRegisterSymlink(char const*, unsigned long long)>:
c000afab:	53                   	push   ebx
c000afac:	83 ec 0c             	sub    esp,0xc
c000afaf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000afb3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000afb7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000afbb:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000afc0:	68 00 01 00 00       	push   0x100
c000afc5:	89 0c c5 e4 6f 02 c0 	mov    DWORD PTR [eax*8-0x3ffd901c],ecx
c000afcc:	6a 00                	push   0x0
c000afce:	89 14 c5 e0 6f 02 c0 	mov    DWORD PTR [eax*8-0x3ffd9020],edx
c000afd5:	c1 e0 08             	shl    eax,0x8
c000afd8:	05 00 70 02 c0       	add    eax,0xc0027000
c000afdd:	50                   	push   eax
c000afde:	e8 0d 55 ff ff       	call   c00004f0 <memset>
c000afe3:	58                   	pop    eax
c000afe4:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000afe9:	5a                   	pop    edx
c000afea:	c1 e0 08             	shl    eax,0x8
c000afed:	53                   	push   ebx
c000afee:	05 00 70 02 c0       	add    eax,0xc0027000
c000aff3:	50                   	push   eax
c000aff4:	e8 47 56 ff ff       	call   c0000640 <strcpy>
c000aff9:	89 d8                	mov    eax,ebx
c000affb:	e8 1d ff ff ff       	call   c000af1d <KiGetSymlinkHash(char const*)>
c000b000:	ba 01 00 00 00       	mov    edx,0x1
c000b005:	0f b7 c0             	movzx  eax,ax
c000b008:	e8 5d fd ff ff       	call   c000ad6a <KiSetHashInTable(unsigned short, bool)>
c000b00d:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000b012:	83 c4 10             	add    esp,0x10
c000b015:	40                   	inc    eax
c000b016:	a3 c0 6f 02 c0       	mov    ds:0xc0026fc0,eax
c000b01b:	83 f8 03             	cmp    eax,0x3
c000b01e:	7e 09                	jle    c000b029 <KeRegisterSymlink(char const*, unsigned long long)+0x7e>
c000b020:	83 c4 08             	add    esp,0x8
c000b023:	5b                   	pop    ebx
c000b024:	e9 71 fd ff ff       	jmp    c000ad9a <KiFlushSymlinkChanges()>
c000b029:	83 c4 08             	add    esp,0x8
c000b02c:	5b                   	pop    ebx
c000b02d:	c3                   	ret    

c000b02e <KiIsSymlinkRegistered(char const*)>:
c000b02e:	55                   	push   ebp
c000b02f:	57                   	push   edi
c000b030:	56                   	push   esi
c000b031:	53                   	push   ebx
c000b032:	81 ec 1c 01 00 00    	sub    esp,0x11c
c000b038:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c000b03f:	89 f0                	mov    eax,esi
c000b041:	e8 d7 fe ff ff       	call   c000af1d <KiGetSymlinkHash(char const*)>
c000b046:	0f b7 c0             	movzx  eax,ax
c000b049:	e8 02 fd ff ff       	call   c000ad50 <KiIsHashInTable(unsigned short)>
c000b04e:	31 d2                	xor    edx,edx
c000b050:	88 c1                	mov    cl,al
c000b052:	31 c0                	xor    eax,eax
c000b054:	84 c9                	test   cl,cl
c000b056:	0f 84 31 01 00 00    	je     c000b18d <KiIsSymlinkRegistered(char const*)+0x15f>
c000b05c:	31 db                	xor    ebx,ebx
c000b05e:	39 1d c0 6f 02 c0    	cmp    DWORD PTR ds:0xc0026fc0,ebx
c000b064:	7e 30                	jle    c000b096 <KiIsSymlinkRegistered(char const*)+0x68>
c000b066:	89 d8                	mov    eax,ebx
c000b068:	51                   	push   ecx
c000b069:	c1 e0 08             	shl    eax,0x8
c000b06c:	51                   	push   ecx
c000b06d:	05 00 70 02 c0       	add    eax,0xc0027000
c000b072:	50                   	push   eax
c000b073:	56                   	push   esi
c000b074:	e8 d7 56 ff ff       	call   c0000750 <strcmp>
c000b079:	83 c4 10             	add    esp,0x10
c000b07c:	85 c0                	test   eax,eax
c000b07e:	75 13                	jne    c000b093 <KiIsSymlinkRegistered(char const*)+0x65>
c000b080:	8b 04 dd e0 6f 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffd9020]
c000b087:	8b 14 dd e4 6f 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffd901c]
c000b08e:	e9 fa 00 00 00       	jmp    c000b18d <KiIsSymlinkRegistered(char const*)+0x15f>
c000b093:	43                   	inc    ebx
c000b094:	eb c8                	jmp    c000b05e <KiIsSymlinkRegistered(char const*)+0x30>
c000b096:	83 ec 0c             	sub    esp,0xc
c000b099:	68 14 01 00 00       	push   0x114
c000b09e:	e8 13 ca ff ff       	call   c0007ab6 <malloc>
c000b0a3:	83 c4 0c             	add    esp,0xc
c000b0a6:	89 c3                	mov    ebx,eax
c000b0a8:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b0ae:	68 ef 17 02 c0       	push   0xc00217ef
c000b0b3:	50                   	push   eax
c000b0b4:	e8 23 0b 00 00       	call   c000bbdc <File::File(char const*, Process*)>
c000b0b9:	83 c4 10             	add    esp,0x10
c000b0bc:	85 db                	test   ebx,ebx
c000b0be:	75 12                	jne    c000b0d2 <KiIsSymlinkRegistered(char const*)+0xa4>
c000b0c0:	83 ec 0c             	sub    esp,0xc
c000b0c3:	68 bf 18 02 c0       	push   0xc00218bf
c000b0c8:	e8 e2 65 00 00       	call   c00116af <KePanic(char const*)>
c000b0cd:	83 c4 10             	add    esp,0x10
c000b0d0:	eb 10                	jmp    c000b0e2 <KiIsSymlinkRegistered(char const*)+0xb4>
c000b0d2:	83 ec 0c             	sub    esp,0xc
c000b0d5:	53                   	push   ebx
c000b0d6:	e8 e3 0d 00 00       	call   c000bebe <File::exists()>
c000b0db:	83 c4 10             	add    esp,0x10
c000b0de:	84 c0                	test   al,al
c000b0e0:	74 de                	je     c000b0c0 <KiIsSymlinkRegistered(char const*)+0x92>
c000b0e2:	52                   	push   edx
c000b0e3:	52                   	push   edx
c000b0e4:	6a 01                	push   0x1
c000b0e6:	53                   	push   ebx
c000b0e7:	e8 0e 0b 00 00       	call   c000bbfa <File::open(FileOpenMode)>
c000b0ec:	83 c4 10             	add    esp,0x10
c000b0ef:	85 c0                	test   eax,eax
c000b0f1:	74 10                	je     c000b103 <KiIsSymlinkRegistered(char const*)+0xd5>
c000b0f3:	83 ec 0c             	sub    esp,0xc
c000b0f6:	68 da 18 02 c0       	push   0xc00218da
c000b0fb:	e8 af 65 00 00       	call   c00116af <KePanic(char const*)>
c000b100:	83 c4 10             	add    esp,0x10
c000b103:	83 ec 0c             	sub    esp,0xc
c000b106:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b108:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c000b10c:	55                   	push   ebp
c000b10d:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000b111:	57                   	push   edi
c000b112:	6a 00                	push   0x0
c000b114:	68 00 01 00 00       	push   0x100
c000b119:	53                   	push   ebx
c000b11a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b11d:	83 c4 20             	add    esp,0x20
c000b120:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c000b128:	75 4b                	jne    c000b175 <KiIsSymlinkRegistered(char const*)+0x147>
c000b12a:	83 ec 0c             	sub    esp,0xc
c000b12d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b12f:	55                   	push   ebp
c000b130:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b134:	52                   	push   edx
c000b135:	6a 00                	push   0x0
c000b137:	6a 08                	push   0x8
c000b139:	53                   	push   ebx
c000b13a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b13d:	83 c4 20             	add    esp,0x20
c000b140:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b145:	75 2e                	jne    c000b175 <KiIsSymlinkRegistered(char const*)+0x147>
c000b147:	50                   	push   eax
c000b148:	50                   	push   eax
c000b149:	57                   	push   edi
c000b14a:	56                   	push   esi
c000b14b:	e8 00 56 ff ff       	call   c0000750 <strcmp>
c000b150:	83 c4 10             	add    esp,0x10
c000b153:	85 c0                	test   eax,eax
c000b155:	75 ac                	jne    c000b103 <KiIsSymlinkRegistered(char const*)+0xd5>
c000b157:	83 ec 0c             	sub    esp,0xc
c000b15a:	53                   	push   ebx
c000b15b:	e8 f8 0a 00 00       	call   c000bc58 <File::close()>
c000b160:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b162:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b165:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b168:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b16c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b170:	83 c4 10             	add    esp,0x10
c000b173:	eb 18                	jmp    c000b18d <KiIsSymlinkRegistered(char const*)+0x15f>
c000b175:	83 ec 0c             	sub    esp,0xc
c000b178:	53                   	push   ebx
c000b179:	e8 da 0a 00 00       	call   c000bc58 <File::close()>
c000b17e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b180:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b183:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b186:	83 c4 10             	add    esp,0x10
c000b189:	31 c0                	xor    eax,eax
c000b18b:	31 d2                	xor    edx,edx
c000b18d:	81 c4 1c 01 00 00    	add    esp,0x11c
c000b193:	5b                   	pop    ebx
c000b194:	5e                   	pop    esi
c000b195:	5f                   	pop    edi
c000b196:	5d                   	pop    ebp
c000b197:	c3                   	ret    

c000b198 <KeDereferenceSymlink(char const*, char*)>:
c000b198:	55                   	push   ebp
c000b199:	57                   	push   edi
c000b19a:	56                   	push   esi
c000b19b:	53                   	push   ebx
c000b19c:	83 ec 48             	sub    esp,0x48
c000b19f:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c000b1a3:	56                   	push   esi
c000b1a4:	e8 85 fe ff ff       	call   c000b02e <KiIsSymlinkRegistered(char const*)>
c000b1a9:	83 c4 10             	add    esp,0x10
c000b1ac:	89 c7                	mov    edi,eax
c000b1ae:	89 d0                	mov    eax,edx
c000b1b0:	09 f8                	or     eax,edi
c000b1b2:	75 07                	jne    c000b1bb <KeDereferenceSymlink(char const*, char*)+0x23>
c000b1b4:	31 c0                	xor    eax,eax
c000b1b6:	e9 7c 01 00 00       	jmp    c000b337 <KeDereferenceSymlink(char const*, char*)+0x19f>
c000b1bb:	83 ec 0c             	sub    esp,0xc
c000b1be:	89 d5                	mov    ebp,edx
c000b1c0:	68 14 01 00 00       	push   0x114
c000b1c5:	e8 ec c8 ff ff       	call   c0007ab6 <malloc>
c000b1ca:	83 c4 0c             	add    esp,0xc
c000b1cd:	89 c3                	mov    ebx,eax
c000b1cf:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b1d5:	56                   	push   esi
c000b1d6:	50                   	push   eax
c000b1d7:	e8 00 0a 00 00       	call   c000bbdc <File::File(char const*, Process*)>
c000b1dc:	83 c4 10             	add    esp,0x10
c000b1df:	85 db                	test   ebx,ebx
c000b1e1:	0f 84 32 01 00 00    	je     c000b319 <KeDereferenceSymlink(char const*, char*)+0x181>
c000b1e7:	56                   	push   esi
c000b1e8:	56                   	push   esi
c000b1e9:	6a 01                	push   0x1
c000b1eb:	53                   	push   ebx
c000b1ec:	e8 09 0a 00 00       	call   c000bbfa <File::open(FileOpenMode)>
c000b1f1:	83 c4 10             	add    esp,0x10
c000b1f4:	85 c0                	test   eax,eax
c000b1f6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b1f8:	74 09                	je     c000b203 <KeDereferenceSymlink(char const*, char*)+0x6b>
c000b1fa:	83 ec 0c             	sub    esp,0xc
c000b1fd:	53                   	push   ebx
c000b1fe:	e9 10 01 00 00       	jmp    c000b313 <KeDereferenceSymlink(char const*, char*)+0x17b>
c000b203:	83 ec 0c             	sub    esp,0xc
c000b206:	8d 74 24 18          	lea    esi,[esp+0x18]
c000b20a:	56                   	push   esi
c000b20b:	8d 54 24 37          	lea    edx,[esp+0x37]
c000b20f:	52                   	push   edx
c000b210:	6a 00                	push   0x0
c000b212:	6a 08                	push   0x8
c000b214:	53                   	push   ebx
c000b215:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b218:	83 c4 20             	add    esp,0x20
c000b21b:	85 c0                	test   eax,eax
c000b21d:	0f 85 e2 00 00 00    	jne    c000b305 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b223:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000b228:	0f 85 d7 00 00 00    	jne    c000b305 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b22e:	83 ec 0c             	sub    esp,0xc
c000b231:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b233:	56                   	push   esi
c000b234:	8d 54 24 20          	lea    edx,[esp+0x20]
c000b238:	52                   	push   edx
c000b239:	6a 00                	push   0x0
c000b23b:	6a 08                	push   0x8
c000b23d:	53                   	push   ebx
c000b23e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b241:	83 c4 20             	add    esp,0x20
c000b244:	85 c0                	test   eax,eax
c000b246:	0f 85 b9 00 00 00    	jne    c000b305 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b24c:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000b251:	0f 85 ae 00 00 00    	jne    c000b305 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b257:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c000b25b:	0f 85 53 ff ff ff    	jne    c000b1b4 <KeDereferenceSymlink(char const*, char*)+0x1c>
c000b261:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c000b265:	0f 85 49 ff ff ff    	jne    c000b1b4 <KeDereferenceSymlink(char const*, char*)+0x1c>
c000b26b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000b273:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b27b:	51                   	push   ecx
c000b27c:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000b280:	50                   	push   eax
c000b281:	8d 44 24 20          	lea    eax,[esp+0x20]
c000b285:	50                   	push   eax
c000b286:	53                   	push   ebx
c000b287:	e8 70 0c 00 00       	call   c000befc <File::stat(unsigned long long*, bool*)>
c000b28c:	83 c4 10             	add    esp,0x10
c000b28f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000b294:	75 6f                	jne    c000b305 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b296:	31 c9                	xor    ecx,ecx
c000b298:	bf 0f 00 00 00       	mov    edi,0xf
c000b29d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b2a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b2a5:	39 c7                	cmp    edi,eax
c000b2a7:	89 cf                	mov    edi,ecx
c000b2a9:	19 d7                	sbb    edi,edx
c000b2ab:	73 58                	jae    c000b305 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b2ad:	83 c0 f0             	add    eax,0xfffffff0
c000b2b0:	bf ff 00 00 00       	mov    edi,0xff
c000b2b5:	83 d2 ff             	adc    edx,0xffffffff
c000b2b8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b2bc:	39 c7                	cmp    edi,eax
c000b2be:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b2c2:	19 d1                	sbb    ecx,edx
c000b2c4:	72 53                	jb     c000b319 <KeDereferenceSymlink(char const*, char*)+0x181>
c000b2c6:	40                   	inc    eax
c000b2c7:	52                   	push   edx
c000b2c8:	50                   	push   eax
c000b2c9:	6a 00                	push   0x0
c000b2cb:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000b2cf:	e8 1c 52 ff ff       	call   c00004f0 <memset>
c000b2d4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b2d6:	89 34 24             	mov    DWORD PTR [esp],esi
c000b2d9:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000b2dd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b2e1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b2e5:	53                   	push   ebx
c000b2e6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b2e9:	83 c4 20             	add    esp,0x20
c000b2ec:	85 c0                	test   eax,eax
c000b2ee:	75 15                	jne    c000b305 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b2f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b2f4:	89 c7                	mov    edi,eax
c000b2f6:	c1 ff 1f             	sar    edi,0x1f
c000b2f9:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000b2fd:	75 06                	jne    c000b305 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b2ff:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c000b303:	74 19                	je     c000b31e <KeDereferenceSymlink(char const*, char*)+0x186>
c000b305:	83 ec 0c             	sub    esp,0xc
c000b308:	53                   	push   ebx
c000b309:	e8 4a 09 00 00       	call   c000bc58 <File::close()>
c000b30e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b310:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b313:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b316:	83 c4 10             	add    esp,0x10
c000b319:	83 c8 ff             	or     eax,0xffffffff
c000b31c:	eb 19                	jmp    c000b337 <KeDereferenceSymlink(char const*, char*)+0x19f>
c000b31e:	83 ec 0c             	sub    esp,0xc
c000b321:	53                   	push   ebx
c000b322:	e8 31 09 00 00       	call   c000bc58 <File::close()>
c000b327:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b329:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b32c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b32f:	83 c4 10             	add    esp,0x10
c000b332:	b8 01 00 00 00       	mov    eax,0x1
c000b337:	83 c4 3c             	add    esp,0x3c
c000b33a:	5b                   	pop    ebx
c000b33b:	5e                   	pop    esi
c000b33c:	5f                   	pop    edi
c000b33d:	5d                   	pop    ebp
c000b33e:	c3                   	ret    

c000b33f <KeCreateSymlink(char const*, char const*)>:
c000b33f:	55                   	push   ebp
c000b340:	57                   	push   edi
c000b341:	56                   	push   esi
c000b342:	53                   	push   ebx
c000b343:	83 ec 38             	sub    esp,0x38
c000b346:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c000b34a:	68 14 01 00 00       	push   0x114
c000b34f:	e8 62 c7 ff ff       	call   c0007ab6 <malloc>
c000b354:	6a 00                	push   0x0
c000b356:	89 c3                	mov    ebx,eax
c000b358:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b35e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000b362:	50                   	push   eax
c000b363:	e8 96 07 00 00       	call   c000bafe <File::File(char const*, Process*, bool)>
c000b368:	83 c4 20             	add    esp,0x20
c000b36b:	b8 01 00 00 00       	mov    eax,0x1
c000b370:	85 db                	test   ebx,ebx
c000b372:	0f 84 fb 00 00 00    	je     c000b473 <KeCreateSymlink(char const*, char const*)+0x134>
c000b378:	52                   	push   edx
c000b379:	52                   	push   edx
c000b37a:	6a 12                	push   0x12
c000b37c:	53                   	push   ebx
c000b37d:	e8 78 08 00 00       	call   c000bbfa <File::open(FileOpenMode)>
c000b382:	83 c4 10             	add    esp,0x10
c000b385:	85 c0                	test   eax,eax
c000b387:	74 0b                	je     c000b394 <KeCreateSymlink(char const*, char const*)+0x55>
c000b389:	83 ec 0c             	sub    esp,0xc
c000b38c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b38e:	53                   	push   ebx
c000b38f:	e9 d4 00 00 00       	jmp    c000b468 <KeCreateSymlink(char const*, char const*)+0x129>
c000b394:	8d 7c 24 17          	lea    edi,[esp+0x17]
c000b398:	be f5 18 02 c0       	mov    esi,0xc00218f5
c000b39d:	b9 09 00 00 00       	mov    ecx,0x9
c000b3a2:	fc                   	cld    
c000b3a3:	83 ec 0c             	sub    esp,0xc
c000b3a6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b3a8:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b3ac:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b3ae:	56                   	push   esi
c000b3af:	8d 54 24 27          	lea    edx,[esp+0x27]
c000b3b3:	52                   	push   edx
c000b3b4:	6a 00                	push   0x0
c000b3b6:	6a 08                	push   0x8
c000b3b8:	53                   	push   ebx
c000b3b9:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b3bc:	83 c4 20             	add    esp,0x20
c000b3bf:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b3c4:	0f 85 90 00 00 00    	jne    c000b45a <KeCreateSymlink(char const*, char const*)+0x11b>
c000b3ca:	85 c0                	test   eax,eax
c000b3cc:	0f 85 88 00 00 00    	jne    c000b45a <KeCreateSymlink(char const*, char const*)+0x11b>
c000b3d2:	e8 67 fb ff ff       	call   c000af3e <KiCreateSymlinkID()>
c000b3d7:	83 ec 0c             	sub    esp,0xc
c000b3da:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b3de:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b3e2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b3e4:	56                   	push   esi
c000b3e5:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b3e9:	52                   	push   edx
c000b3ea:	6a 00                	push   0x0
c000b3ec:	6a 08                	push   0x8
c000b3ee:	53                   	push   ebx
c000b3ef:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b3f2:	83 c4 20             	add    esp,0x20
c000b3f5:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b3fa:	75 5e                	jne    c000b45a <KeCreateSymlink(char const*, char const*)+0x11b>
c000b3fc:	85 c0                	test   eax,eax
c000b3fe:	75 5a                	jne    c000b45a <KeCreateSymlink(char const*, char const*)+0x11b>
c000b400:	83 ec 0c             	sub    esp,0xc
c000b403:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b405:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000b408:	55                   	push   ebp
c000b409:	e8 62 51 ff ff       	call   c0000570 <strlen>
c000b40e:	89 34 24             	mov    DWORD PTR [esp],esi
c000b411:	31 d2                	xor    edx,edx
c000b413:	55                   	push   ebp
c000b414:	52                   	push   edx
c000b415:	50                   	push   eax
c000b416:	53                   	push   ebx
c000b417:	ff d7                	call   edi
c000b419:	83 c4 14             	add    esp,0x14
c000b41c:	89 c6                	mov    esi,eax
c000b41e:	55                   	push   ebp
c000b41f:	e8 4c 51 ff ff       	call   c0000570 <strlen>
c000b424:	83 c4 10             	add    esp,0x10
c000b427:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000b42b:	75 2d                	jne    c000b45a <KeCreateSymlink(char const*, char const*)+0x11b>
c000b42d:	85 f6                	test   esi,esi
c000b42f:	75 29                	jne    c000b45a <KeCreateSymlink(char const*, char const*)+0x11b>
c000b431:	50                   	push   eax
c000b432:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b436:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b43a:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000b43e:	e8 68 fb ff ff       	call   c000afab <KeRegisterSymlink(char const*, unsigned long long)>
c000b443:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b446:	e8 0d 08 00 00       	call   c000bc58 <File::close()>
c000b44b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b44d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b450:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b453:	83 c4 10             	add    esp,0x10
c000b456:	31 c0                	xor    eax,eax
c000b458:	eb 19                	jmp    c000b473 <KeCreateSymlink(char const*, char const*)+0x134>
c000b45a:	83 ec 0c             	sub    esp,0xc
c000b45d:	53                   	push   ebx
c000b45e:	e8 f5 07 00 00       	call   c000bc58 <File::close()>
c000b463:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b465:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b468:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b46b:	83 c4 10             	add    esp,0x10
c000b46e:	b8 01 00 00 00       	mov    eax,0x1
c000b473:	83 c4 2c             	add    esp,0x2c
c000b476:	5b                   	pop    ebx
c000b477:	5e                   	pop    esi
c000b478:	5f                   	pop    edi
c000b479:	5d                   	pop    ebp
c000b47a:	c3                   	ret    

c000b47b <KeInitialiseSymlinks()>:
c000b47b:	57                   	push   edi
c000b47c:	56                   	push   esi
c000b47d:	53                   	push   ebx
c000b47e:	81 ec 14 01 00 00    	sub    esp,0x114
c000b484:	c7 05 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026fc0,0x0
c000b48e:	68 00 20 00 00       	push   0x2000
c000b493:	6a 00                	push   0x0
c000b495:	68 00 74 02 c0       	push   0xc0027400
c000b49a:	e8 51 50 ff ff       	call   c00004f0 <memset>
c000b49f:	c7 04 24 75 18 02 c0 	mov    DWORD PTR [esp],0xc0021875
c000b4a6:	e8 3a 78 00 00       	call   c0012ce5 <CmOpen(char const*)>
c000b4ab:	5a                   	pop    edx
c000b4ac:	89 c3                	mov    ebx,eax
c000b4ae:	59                   	pop    ecx
c000b4af:	68 9a 18 02 c0       	push   0xc002189a
c000b4b4:	50                   	push   eax
c000b4b5:	e8 2b 84 00 00       	call   c00138e5 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c000b4ba:	83 c4 10             	add    esp,0x10
c000b4bd:	40                   	inc    eax
c000b4be:	74 2a                	je     c000b4ea <KeInitialiseSymlinks()+0x6f>
c000b4c0:	50                   	push   eax
c000b4c1:	50                   	push   eax
c000b4c2:	68 9a 18 02 c0       	push   0xc002189a
c000b4c7:	53                   	push   ebx
c000b4c8:	e8 18 84 00 00       	call   c00138e5 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c000b4cd:	83 c4 0c             	add    esp,0xc
c000b4d0:	8d 54 24 14          	lea    edx,[esp+0x14]
c000b4d4:	52                   	push   edx
c000b4d5:	50                   	push   eax
c000b4d6:	53                   	push   ebx
c000b4d7:	e8 df 7e 00 00       	call   c00133bb <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c000b4dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b4e0:	83 c4 10             	add    esp,0x10
c000b4e3:	a3 00 94 02 c0       	mov    ds:0xc0029400,eax
c000b4e8:	eb 0a                	jmp    c000b4f4 <KeInitialiseSymlinks()+0x79>
c000b4ea:	c7 05 00 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029400,0x0
c000b4f4:	83 ec 0c             	sub    esp,0xc
c000b4f7:	53                   	push   ebx
c000b4f8:	e8 06 79 00 00       	call   c0012e03 <CmClose(Reghive_Tag*)>
c000b4fd:	5b                   	pop    ebx
c000b4fe:	5e                   	pop    esi
c000b4ff:	ff 35 00 94 02 c0    	push   DWORD PTR ds:0xc0029400
c000b505:	68 fe 18 02 c0       	push   0xc00218fe
c000b50a:	e8 36 f4 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b50f:	5f                   	pop    edi
c000b510:	58                   	pop    eax
c000b511:	6a 00                	push   0x0
c000b513:	68 18 af 00 c0       	push   0xc000af18
c000b518:	e8 7f 59 00 00       	call   c0010e9c <KeRegisterAtexit(void (*)(void*), void*)>
c000b51d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000b524:	e8 8d c5 ff ff       	call   c0007ab6 <malloc>
c000b529:	83 c4 0c             	add    esp,0xc
c000b52c:	89 c3                	mov    ebx,eax
c000b52e:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b534:	68 ef 17 02 c0       	push   0xc00217ef
c000b539:	50                   	push   eax
c000b53a:	e8 9d 06 00 00       	call   c000bbdc <File::File(char const*, Process*)>
c000b53f:	83 c4 10             	add    esp,0x10
c000b542:	85 db                	test   ebx,ebx
c000b544:	75 10                	jne    c000b556 <KeInitialiseSymlinks()+0xdb>
c000b546:	83 ec 0c             	sub    esp,0xc
c000b549:	68 1b 19 02 c0       	push   0xc002191b
c000b54e:	e8 5c 61 00 00       	call   c00116af <KePanic(char const*)>
c000b553:	83 c4 10             	add    esp,0x10
c000b556:	83 ec 0c             	sub    esp,0xc
c000b559:	53                   	push   ebx
c000b55a:	e8 5f 09 00 00       	call   c000bebe <File::exists()>
c000b55f:	83 c4 10             	add    esp,0x10
c000b562:	84 c0                	test   al,al
c000b564:	75 3a                	jne    c000b5a0 <KeInitialiseSymlinks()+0x125>
c000b566:	51                   	push   ecx
c000b567:	51                   	push   ecx
c000b568:	6a 12                	push   0x12
c000b56a:	53                   	push   ebx
c000b56b:	e8 8a 06 00 00       	call   c000bbfa <File::open(FileOpenMode)>
c000b570:	83 c4 10             	add    esp,0x10
c000b573:	85 c0                	test   eax,eax
c000b575:	74 10                	je     c000b587 <KeInitialiseSymlinks()+0x10c>
c000b577:	83 ec 0c             	sub    esp,0xc
c000b57a:	68 38 19 02 c0       	push   0xc0021938
c000b57f:	e8 2b 61 00 00       	call   c00116af <KePanic(char const*)>
c000b584:	83 c4 10             	add    esp,0x10
c000b587:	83 ec 0c             	sub    esp,0xc
c000b58a:	53                   	push   ebx
c000b58b:	e8 c8 06 00 00       	call   c000bc58 <File::close()>
c000b590:	83 c4 10             	add    esp,0x10
c000b593:	85 db                	test   ebx,ebx
c000b595:	0f 84 98 00 00 00    	je     c000b633 <KeInitialiseSymlinks()+0x1b8>
c000b59b:	e9 87 00 00 00       	jmp    c000b627 <KeInitialiseSymlinks()+0x1ac>
c000b5a0:	52                   	push   edx
c000b5a1:	52                   	push   edx
c000b5a2:	6a 01                	push   0x1
c000b5a4:	53                   	push   ebx
c000b5a5:	e8 50 06 00 00       	call   c000bbfa <File::open(FileOpenMode)>
c000b5aa:	83 c4 10             	add    esp,0x10
c000b5ad:	85 c0                	test   eax,eax
c000b5af:	74 10                	je     c000b5c1 <KeInitialiseSymlinks()+0x146>
c000b5b1:	83 ec 0c             	sub    esp,0xc
c000b5b4:	68 55 19 02 c0       	push   0xc0021955
c000b5b9:	e8 f1 60 00 00       	call   c00116af <KePanic(char const*)>
c000b5be:	83 c4 10             	add    esp,0x10
c000b5c1:	83 ec 0c             	sub    esp,0xc
c000b5c4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b5c6:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000b5ca:	57                   	push   edi
c000b5cb:	8d 74 24 20          	lea    esi,[esp+0x20]
c000b5cf:	56                   	push   esi
c000b5d0:	6a 00                	push   0x0
c000b5d2:	68 00 01 00 00       	push   0x100
c000b5d7:	53                   	push   ebx
c000b5d8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b5db:	83 c4 20             	add    esp,0x20
c000b5de:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c000b5e6:	75 33                	jne    c000b61b <KeInitialiseSymlinks()+0x1a0>
c000b5e8:	83 ec 0c             	sub    esp,0xc
c000b5eb:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b5ed:	57                   	push   edi
c000b5ee:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b5f2:	52                   	push   edx
c000b5f3:	6a 00                	push   0x0
c000b5f5:	6a 08                	push   0x8
c000b5f7:	53                   	push   ebx
c000b5f8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b5fb:	83 c4 20             	add    esp,0x20
c000b5fe:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b603:	75 16                	jne    c000b61b <KeInitialiseSymlinks()+0x1a0>
c000b605:	89 f0                	mov    eax,esi
c000b607:	e8 11 f9 ff ff       	call   c000af1d <KiGetSymlinkHash(char const*)>
c000b60c:	ba 01 00 00 00       	mov    edx,0x1
c000b611:	0f b7 c0             	movzx  eax,ax
c000b614:	e8 51 f7 ff ff       	call   c000ad6a <KiSetHashInTable(unsigned short, bool)>
c000b619:	eb a6                	jmp    c000b5c1 <KeInitialiseSymlinks()+0x146>
c000b61b:	83 ec 0c             	sub    esp,0xc
c000b61e:	53                   	push   ebx
c000b61f:	e8 34 06 00 00       	call   c000bc58 <File::close()>
c000b624:	83 c4 10             	add    esp,0x10
c000b627:	83 ec 0c             	sub    esp,0xc
c000b62a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b62c:	53                   	push   ebx
c000b62d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b630:	83 c4 10             	add    esp,0x10
c000b633:	50                   	push   eax
c000b634:	50                   	push   eax
c000b635:	68 70 19 02 c0       	push   0xc0021970
c000b63a:	68 7e 19 02 c0       	push   0xc002197e
c000b63f:	e8 fb fc ff ff       	call   c000b33f <KeCreateSymlink(char const*, char const*)>
c000b644:	81 c4 20 01 00 00    	add    esp,0x120
c000b64a:	5b                   	pop    ebx
c000b64b:	5e                   	pop    esi
c000b64c:	5f                   	pop    edi
c000b64d:	c3                   	ret    

c000b64e <File::read(unsigned long long, void*, int*)>:
c000b64e:	53                   	push   ebx
c000b64f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b653:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b657:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b65e:	83 f8 19             	cmp    eax,0x19
c000b661:	77 35                	ja     c000b698 <File::read(unsigned long long, void*, int*)+0x4a>
c000b663:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b66a:	85 c0                	test   eax,eax
c000b66c:	74 2a                	je     c000b698 <File::read(unsigned long long, void*, int*)+0x4a>
c000b66e:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b674:	85 c0                	test   eax,eax
c000b676:	74 20                	je     c000b698 <File::read(unsigned long long, void*, int*)+0x4a>
c000b678:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b67c:	74 21                	je     c000b69f <File::read(unsigned long long, void*, int*)+0x51>
c000b67e:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b680:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b684:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b68a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b68e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b692:	5b                   	pop    ebx
c000b693:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000b696:	ff e0                	jmp    eax
c000b698:	b8 0b 00 00 00       	mov    eax,0xb
c000b69d:	eb 05                	jmp    c000b6a4 <File::read(unsigned long long, void*, int*)+0x56>
c000b69f:	b8 05 00 00 00       	mov    eax,0x5
c000b6a4:	5b                   	pop    ebx
c000b6a5:	c3                   	ret    

c000b6a6 <File::write(unsigned long long, void*, int*)>:
c000b6a6:	53                   	push   ebx
c000b6a7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b6ab:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b6af:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b6b6:	83 f8 19             	cmp    eax,0x19
c000b6b9:	77 35                	ja     c000b6f0 <File::write(unsigned long long, void*, int*)+0x4a>
c000b6bb:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b6c2:	85 c0                	test   eax,eax
c000b6c4:	74 2a                	je     c000b6f0 <File::write(unsigned long long, void*, int*)+0x4a>
c000b6c6:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b6cc:	85 c0                	test   eax,eax
c000b6ce:	74 20                	je     c000b6f0 <File::write(unsigned long long, void*, int*)+0x4a>
c000b6d0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b6d4:	74 21                	je     c000b6f7 <File::write(unsigned long long, void*, int*)+0x51>
c000b6d6:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b6d8:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b6dc:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b6e2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6ea:	5b                   	pop    ebx
c000b6eb:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000b6ee:	ff e0                	jmp    eax
c000b6f0:	b8 0b 00 00 00       	mov    eax,0xb
c000b6f5:	eb 05                	jmp    c000b6fc <File::write(unsigned long long, void*, int*)+0x56>
c000b6f7:	b8 05 00 00 00       	mov    eax,0x5
c000b6fc:	5b                   	pop    ebx
c000b6fd:	c3                   	ret    

c000b6fe <Directory::read(unsigned long long, void*, int*)>:
c000b6fe:	53                   	push   ebx
c000b6ff:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b703:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b707:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b70e:	83 f8 19             	cmp    eax,0x19
c000b711:	77 35                	ja     c000b748 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b713:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b71a:	85 c0                	test   eax,eax
c000b71c:	74 2a                	je     c000b748 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b71e:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b724:	85 c0                	test   eax,eax
c000b726:	74 20                	je     c000b748 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b728:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b72c:	74 21                	je     c000b74f <Directory::read(unsigned long long, void*, int*)+0x51>
c000b72e:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b730:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b734:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b73a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b73e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b742:	5b                   	pop    ebx
c000b743:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c000b746:	ff e0                	jmp    eax
c000b748:	b8 0b 00 00 00       	mov    eax,0xb
c000b74d:	eb 05                	jmp    c000b754 <Directory::read(unsigned long long, void*, int*)+0x56>
c000b74f:	b8 05 00 00 00       	mov    eax,0x5
c000b754:	5b                   	pop    ebx
c000b755:	c3                   	ret    

c000b756 <Directory::write(unsigned long long, void*, int*)>:
c000b756:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b75a:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000b761:	b8 0b 00 00 00       	mov    eax,0xb
c000b766:	83 fa 19             	cmp    edx,0x19
c000b769:	77 18                	ja     c000b783 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b76b:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000b772:	85 d2                	test   edx,edx
c000b774:	74 0d                	je     c000b783 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b776:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000b77d:	19 c0                	sbb    eax,eax
c000b77f:	83 e0 0a             	and    eax,0xa
c000b782:	40                   	inc    eax
c000b783:	c3                   	ret    

c000b784 <File::isAtty()>:
c000b784:	31 c0                	xor    eax,eax
c000b786:	c3                   	ret    
c000b787:	90                   	nop

c000b788 <Directory::isAtty()>:
c000b788:	31 c0                	xor    eax,eax
c000b78a:	c3                   	ret    
c000b78b:	90                   	nop

c000b78c <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000b78c:	b8 0a 00 00 00       	mov    eax,0xa
c000b791:	c3                   	ret    

c000b792 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000b792:	b8 0a 00 00 00       	mov    eax,0xa
c000b797:	c3                   	ret    

c000b798 <Filesystem::allocateSwapfile(char const*, int)>:
c000b798:	31 c0                	xor    eax,eax
c000b79a:	31 d2                	xor    edx,edx
c000b79c:	c3                   	ret    
c000b79d:	90                   	nop

c000b79e <File::~File()>:
c000b79e:	83 ec 0c             	sub    esp,0xc
c000b7a1:	ba 54 1a 02 c0       	mov    edx,0xc0021a54
c000b7a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b7aa:	89 10                	mov    DWORD PTR [eax],edx
c000b7ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b7b0:	83 ec 0c             	sub    esp,0xc
c000b7b3:	50                   	push   eax
c000b7b4:	e8 eb db ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c000b7b9:	83 c4 10             	add    esp,0x10
c000b7bc:	90                   	nop
c000b7bd:	83 c4 0c             	add    esp,0xc
c000b7c0:	c3                   	ret    
c000b7c1:	90                   	nop

c000b7c2 <File::~File()>:
c000b7c2:	83 ec 0c             	sub    esp,0xc
c000b7c5:	83 ec 0c             	sub    esp,0xc
c000b7c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7cc:	e8 cd ff ff ff       	call   c000b79e <File::~File()>
c000b7d1:	83 c4 10             	add    esp,0x10
c000b7d4:	83 ec 08             	sub    esp,0x8
c000b7d7:	68 14 01 00 00       	push   0x114
c000b7dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7e0:	e8 33 f0 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000b7e5:	83 c4 10             	add    esp,0x10
c000b7e8:	83 c4 0c             	add    esp,0xc
c000b7eb:	c3                   	ret    

c000b7ec <Directory::~Directory()>:
c000b7ec:	83 ec 0c             	sub    esp,0xc
c000b7ef:	ba 70 1a 02 c0       	mov    edx,0xc0021a70
c000b7f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b7f8:	89 10                	mov    DWORD PTR [eax],edx
c000b7fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b7fe:	83 ec 0c             	sub    esp,0xc
c000b801:	50                   	push   eax
c000b802:	e8 9d db ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c000b807:	83 c4 10             	add    esp,0x10
c000b80a:	90                   	nop
c000b80b:	83 c4 0c             	add    esp,0xc
c000b80e:	c3                   	ret    
c000b80f:	90                   	nop

c000b810 <Directory::~Directory()>:
c000b810:	83 ec 0c             	sub    esp,0xc
c000b813:	83 ec 0c             	sub    esp,0xc
c000b816:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b81a:	e8 cd ff ff ff       	call   c000b7ec <Directory::~Directory()>
c000b81f:	83 c4 10             	add    esp,0x10
c000b822:	83 ec 08             	sub    esp,0x8
c000b825:	68 14 01 00 00       	push   0x114
c000b82a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b82e:	e8 e5 ef ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000b833:	83 c4 10             	add    esp,0x10
c000b836:	83 c4 0c             	add    esp,0xc
c000b839:	c3                   	ret    

c000b83a <Filesystem::Filesystem()>:
c000b83a:	ba e8 19 02 c0       	mov    edx,0xc00219e8
c000b83f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b843:	89 10                	mov    DWORD PTR [eax],edx
c000b845:	8b 15 04 94 02 c0    	mov    edx,DWORD PTR ds:0xc0029404
c000b84b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b84f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b852:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b856:	a3 04 94 02 c0       	mov    ds:0xc0029404,eax
c000b85b:	90                   	nop
c000b85c:	c3                   	ret    
c000b85d:	90                   	nop

c000b85e <Filesystem::~Filesystem()>:
c000b85e:	ba e8 19 02 c0       	mov    edx,0xc00219e8
c000b863:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b867:	89 10                	mov    DWORD PTR [eax],edx
c000b869:	90                   	nop
c000b86a:	c3                   	ret    
c000b86b:	90                   	nop

c000b86c <Filesystem::~Filesystem()>:
c000b86c:	83 ec 0c             	sub    esp,0xc
c000b86f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b873:	e8 e6 ff ff ff       	call   c000b85e <Filesystem::~Filesystem()>
c000b878:	83 c4 04             	add    esp,0x4
c000b87b:	83 ec 08             	sub    esp,0x8
c000b87e:	6a 08                	push   0x8
c000b880:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b884:	e8 8f ef ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000b889:	83 c4 10             	add    esp,0x10
c000b88c:	83 c4 0c             	add    esp,0xc
c000b88f:	c3                   	ret    

c000b890 <Fs::getcwd(Process*, char*, int)>:
c000b890:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b894:	31 c0                	xor    eax,eax
c000b896:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000b899:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000b89d:	7d 15                	jge    c000b8b4 <Fs::getcwd(Process*, char*, int)+0x24>
c000b89f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b8a3:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000b8aa:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000b8ad:	84 c9                	test   cl,cl
c000b8af:	74 06                	je     c000b8b7 <Fs::getcwd(Process*, char*, int)+0x27>
c000b8b1:	40                   	inc    eax
c000b8b2:	eb e2                	jmp    c000b896 <Fs::getcwd(Process*, char*, int)+0x6>
c000b8b4:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000b8b7:	31 c0                	xor    eax,eax
c000b8b9:	c3                   	ret    

c000b8ba <Fs::initVFS()>:
c000b8ba:	83 ec 18             	sub    esp,0x18
c000b8bd:	6a 08                	push   0x8
c000b8bf:	e8 f2 c1 ff ff       	call   c0007ab6 <malloc>
c000b8c4:	89 04 24             	mov    DWORD PTR [esp],eax
c000b8c7:	e8 f0 e3 00 00       	call   c0019cbc <FAT::FAT()>
c000b8cc:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000b8d3:	e8 de c1 ff ff       	call   c0007ab6 <malloc>
c000b8d8:	89 04 24             	mov    DWORD PTR [esp],eax
c000b8db:	e8 08 f3 00 00       	call   c001abe8 <ISO9660::ISO9660()>
c000b8e0:	83 c4 1c             	add    esp,0x1c
c000b8e3:	c3                   	ret    

c000b8e4 <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c000b8e4:	55                   	push   ebp
c000b8e5:	57                   	push   edi
c000b8e6:	56                   	push   esi
c000b8e7:	53                   	push   ebx
c000b8e8:	81 ec 10 04 00 00    	sub    esp,0x410
c000b8ee:	8b ac 24 28 04 00 00 	mov    ebp,DWORD PTR [esp+0x428]
c000b8f5:	8b b4 24 24 04 00 00 	mov    esi,DWORD PTR [esp+0x424]
c000b8fc:	0f b6 9c 24 30 04 00 00 	movzx  ebx,BYTE PTR [esp+0x430]
c000b904:	68 00 04 00 00       	push   0x400
c000b909:	6a 00                	push   0x0
c000b90b:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c000b90f:	57                   	push   edi
c000b910:	e8 db 4b ff ff       	call   c00004f0 <memset>
c000b915:	83 c4 10             	add    esp,0x10
c000b918:	80 7d 01 3a          	cmp    BYTE PTR [ebp+0x1],0x3a
c000b91c:	75 0b                	jne    c000b929 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x45>
c000b91e:	50                   	push   eax
c000b91f:	50                   	push   eax
c000b920:	55                   	push   ebp
c000b921:	57                   	push   edi
c000b922:	e8 19 4d ff ff       	call   c0000640 <strcpy>
c000b927:	eb 51                	jmp    c000b97a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x96>
c000b929:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000b92d:	83 f8 5c             	cmp    eax,0x5c
c000b930:	74 05                	je     c000b937 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x53>
c000b932:	83 f8 2f             	cmp    eax,0x2f
c000b935:	75 1e                	jne    c000b955 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x71>
c000b937:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c000b93e:	8a 00                	mov    al,BYTE PTR [eax]
c000b940:	3c 60                	cmp    al,0x60
c000b942:	7e 03                	jle    c000b947 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x63>
c000b944:	83 e8 20             	sub    eax,0x20
c000b947:	88 04 24             	mov    BYTE PTR [esp],al
c000b94a:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000b951:	50                   	push   eax
c000b952:	50                   	push   eax
c000b953:	eb 1e                	jmp    c000b973 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8f>
c000b955:	50                   	push   eax
c000b956:	50                   	push   eax
c000b957:	ff b4 24 30 04 00 00 	push   DWORD PTR [esp+0x430]
c000b95e:	57                   	push   edi
c000b95f:	e8 dc 4c ff ff       	call   c0000640 <strcpy>
c000b964:	58                   	pop    eax
c000b965:	5a                   	pop    edx
c000b966:	68 a3 29 02 c0       	push   0xc00229a3
c000b96b:	57                   	push   edi
c000b96c:	e8 cf 4e ff ff       	call   c0000840 <strcat>
c000b971:	59                   	pop    ecx
c000b972:	58                   	pop    eax
c000b973:	55                   	push   ebp
c000b974:	57                   	push   edi
c000b975:	e8 c6 4e ff ff       	call   c0000840 <strcat>
c000b97a:	83 c4 10             	add    esp,0x10
c000b97d:	8a 04 24             	mov    al,BYTE PTR [esp]
c000b980:	3c 60                	cmp    al,0x60
c000b982:	7e 03                	jle    c000b987 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa3>
c000b984:	83 e8 20             	sub    eax,0x20
c000b987:	88 04 24             	mov    BYTE PTR [esp],al
c000b98a:	88 06                	mov    BYTE PTR [esi],al
c000b98c:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000b993:	66 c7 46 01 3a 2f    	mov    WORD PTR [esi+0x1],0x2f3a
c000b999:	c6 46 03 00          	mov    BYTE PTR [esi+0x3],0x0
c000b99d:	bf 03 00 00 00       	mov    edi,0x3
c000b9a2:	b8 03 00 00 00       	mov    eax,0x3
c000b9a7:	0f be 2c 3c          	movsx  ebp,BYTE PTR [esp+edi*1]
c000b9ab:	89 e9                	mov    ecx,ebp
c000b9ad:	85 ed                	test   ebp,ebp
c000b9af:	0f 84 97 00 00 00    	je     c000ba4c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x168>
c000b9b5:	8d 57 01             	lea    edx,[edi+0x1]
c000b9b8:	83 fd 5c             	cmp    ebp,0x5c
c000b9bb:	74 05                	je     c000b9c2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xde>
c000b9bd:	83 fd 2f             	cmp    ebp,0x2f
c000b9c0:	75 12                	jne    c000b9d4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b9c2:	89 c5                	mov    ebp,eax
c000b9c4:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c000b9c9:	74 09                	je     c000b9d4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b9cb:	40                   	inc    eax
c000b9cc:	c6 04 2e 2f          	mov    BYTE PTR [esi+ebp*1],0x2f
c000b9d0:	89 d7                	mov    edi,edx
c000b9d2:	eb d3                	jmp    c000b9a7 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c000b9d4:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000b9d9:	0f be e9             	movsx  ebp,cl
c000b9dc:	75 5e                	jne    c000ba3c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c000b9de:	83 fd 2e             	cmp    ebp,0x2e
c000b9e1:	75 59                	jne    c000ba3c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c000b9e3:	80 3c 14 2e          	cmp    BYTE PTR [esp+edx*1],0x2e
c000b9e7:	0f be 6c 3c 02       	movsx  ebp,BYTE PTR [esp+edi*1+0x2]
c000b9ec:	74 18                	je     c000ba06 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x122>
c000b9ee:	83 fd 2e             	cmp    ebp,0x2e
c000b9f1:	74 53                	je     c000ba46 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c000b9f3:	89 fa                	mov    edx,edi
c000b9f5:	42                   	inc    edx
c000b9f6:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c000b9fa:	83 f9 2f             	cmp    ecx,0x2f
c000b9fd:	74 f6                	je     c000b9f5 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c000b9ff:	83 f9 5c             	cmp    ecx,0x5c
c000ba02:	74 f1                	je     c000b9f5 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c000ba04:	eb ca                	jmp    c000b9d0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000ba06:	83 fd 2e             	cmp    ebp,0x2e
c000ba09:	74 3b                	je     c000ba46 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c000ba0b:	83 f8 03             	cmp    eax,0x3
c000ba0e:	74 c0                	je     c000b9d0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000ba10:	42                   	inc    edx
c000ba11:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c000ba15:	83 f9 5c             	cmp    ecx,0x5c
c000ba18:	74 f6                	je     c000ba10 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c000ba1a:	83 f9 2f             	cmp    ecx,0x2f
c000ba1d:	74 f1                	je     c000ba10 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c000ba1f:	48                   	dec    eax
c000ba20:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c000ba24:	75 06                	jne    c000ba2c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c000ba26:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c000ba2a:	eb f3                	jmp    c000ba1f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x13b>
c000ba2c:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c000ba30:	74 07                	je     c000ba39 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x155>
c000ba32:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c000ba36:	48                   	dec    eax
c000ba37:	eb f3                	jmp    c000ba2c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c000ba39:	40                   	inc    eax
c000ba3a:	eb 94                	jmp    c000b9d0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000ba3c:	83 fd 5c             	cmp    ebp,0x5c
c000ba3f:	74 8f                	je     c000b9d0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000ba41:	83 fd 2f             	cmp    ebp,0x2f
c000ba44:	74 8a                	je     c000b9d0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000ba46:	88 0c 06             	mov    BYTE PTR [esi+eax*1],cl
c000ba49:	40                   	inc    eax
c000ba4a:	eb 84                	jmp    c000b9d0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000ba4c:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c000ba50:	83 ec 0c             	sub    esp,0xc
c000ba53:	56                   	push   esi
c000ba54:	e8 17 4b ff ff       	call   c0000570 <strlen>
c000ba59:	83 c4 10             	add    esp,0x10
c000ba5c:	80 7c 06 ff 2e       	cmp    BYTE PTR [esi+eax*1-0x1],0x2e
c000ba61:	74 17                	je     c000ba7a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c000ba63:	83 ec 0c             	sub    esp,0xc
c000ba66:	56                   	push   esi
c000ba67:	e8 04 4b ff ff       	call   c0000570 <strlen>
c000ba6c:	83 c4 10             	add    esp,0x10
c000ba6f:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c000ba74:	74 04                	je     c000ba7a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c000ba76:	31 ff                	xor    edi,edi
c000ba78:	eb 5c                	jmp    c000bad6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c000ba7a:	83 ec 0c             	sub    esp,0xc
c000ba7d:	56                   	push   esi
c000ba7e:	e8 ed 4a ff ff       	call   c0000570 <strlen>
c000ba83:	83 c4 10             	add    esp,0x10
c000ba86:	80 7c 06 fe 3a       	cmp    BYTE PTR [esi+eax*1-0x2],0x3a
c000ba8b:	74 e9                	je     c000ba76 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x192>
c000ba8d:	83 ec 0c             	sub    esp,0xc
c000ba90:	56                   	push   esi
c000ba91:	e8 da 4a ff ff       	call   c0000570 <strlen>
c000ba96:	83 c4 10             	add    esp,0x10
c000ba99:	c6 44 06 ff 00       	mov    BYTE PTR [esi+eax*1-0x1],0x0
c000ba9e:	eb b0                	jmp    c000ba50 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16c>
c000baa0:	52                   	push   edx
c000baa1:	52                   	push   edx
c000baa2:	56                   	push   esi
c000baa3:	8d 6c 24 0c          	lea    ebp,[esp+0xc]
c000baa7:	55                   	push   ebp
c000baa8:	e8 93 4b ff ff       	call   c0000640 <strcpy>
c000baad:	59                   	pop    ecx
c000baae:	58                   	pop    eax
c000baaf:	56                   	push   esi
c000bab0:	55                   	push   ebp
c000bab1:	e8 e2 f6 ff ff       	call   c000b198 <KeDereferenceSymlink(char const*, char*)>
c000bab6:	83 c4 10             	add    esp,0x10
c000bab9:	48                   	dec    eax
c000baba:	75 37                	jne    c000baf3 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c000babc:	50                   	push   eax
c000babd:	56                   	push   esi
c000babe:	55                   	push   ebp
c000babf:	68 9c 19 02 c0       	push   0xc002199c
c000bac4:	e8 7c ee ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000bac9:	83 c4 10             	add    esp,0x10
c000bacc:	8d 47 01             	lea    eax,[edi+0x1]
c000bacf:	83 ff 14             	cmp    edi,0x14
c000bad2:	74 08                	je     c000badc <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f8>
c000bad4:	89 c7                	mov    edi,eax
c000bad6:	85 db                	test   ebx,ebx
c000bad8:	75 c6                	jne    c000baa0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1bc>
c000bada:	eb 17                	jmp    c000baf3 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c000badc:	83 ec 0c             	sub    esp,0xc
c000badf:	bf 15 00 00 00       	mov    edi,0x15
c000bae4:	68 b7 19 02 c0       	push   0xc00219b7
c000bae9:	e8 c1 5b 00 00       	call   c00116af <KePanic(char const*)>
c000baee:	83 c4 10             	add    esp,0x10
c000baf1:	eb e3                	jmp    c000bad6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c000baf3:	81 c4 0c 04 00 00    	add    esp,0x40c
c000baf9:	5b                   	pop    ebx
c000bafa:	5e                   	pop    esi
c000bafb:	5f                   	pop    edi
c000bafc:	5d                   	pop    ebp
c000bafd:	c3                   	ret    

c000bafe <File::File(char const*, Process*, bool)>:
c000bafe:	83 ec 1c             	sub    esp,0x1c
c000bb01:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb05:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000bb09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb0d:	83 ec 08             	sub    esp,0x8
c000bb10:	6a 00                	push   0x0
c000bb12:	50                   	push   eax
c000bb13:	e8 a6 d6 ff ff       	call   c00091be <UnixFile::UnixFile(int)>
c000bb18:	83 c4 10             	add    esp,0x10
c000bb1b:	ba 54 1a 02 c0       	mov    edx,0xc0021a54
c000bb20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb24:	89 10                	mov    DWORD PTR [eax],edx
c000bb26:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000bb2b:	85 c0                	test   eax,eax
c000bb2d:	74 0f                	je     c000bb3e <File::File(char const*, Process*, bool)+0x40>
c000bb2f:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000bb34:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c000bb38:	74 04                	je     c000bb3e <File::File(char const*, Process*, bool)+0x40>
c000bb3a:	b0 01                	mov    al,0x1
c000bb3c:	eb 02                	jmp    c000bb40 <File::File(char const*, Process*, bool)+0x42>
c000bb3e:	b0 00                	mov    al,0x0
c000bb40:	0f b6 c0             	movzx  eax,al
c000bb43:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bb47:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000bb4d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bb51:	83 c2 0d             	add    edx,0xd
c000bb54:	50                   	push   eax
c000bb55:	51                   	push   ecx
c000bb56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bb5a:	52                   	push   edx
c000bb5b:	e8 84 fd ff ff       	call   c000b8e4 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000bb60:	83 c4 10             	add    esp,0x10
c000bb63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb67:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000bb6a:	83 e8 41             	sub    eax,0x41
c000bb6d:	88 c2                	mov    dl,al
c000bb6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb73:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000bb79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb7d:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000bb81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb85:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bb8b:	0f b6 c0             	movzx  eax,al
c000bb8e:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000bb95:	85 c0                	test   eax,eax
c000bb97:	74 3e                	je     c000bbd7 <File::File(char const*, Process*, bool)+0xd9>
c000bb99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb9d:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bba3:	0f b6 c0             	movzx  eax,al
c000bba6:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000bbad:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bbb3:	85 c0                	test   eax,eax
c000bbb5:	75 20                	jne    c000bbd7 <File::File(char const*, Process*, bool)+0xd9>
c000bbb7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbbb:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bbc1:	0f b6 c0             	movzx  eax,al
c000bbc4:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000bbcb:	83 ec 0c             	sub    esp,0xc
c000bbce:	50                   	push   eax
c000bbcf:	e8 a2 21 00 00       	call   c000dd76 <LogicalDisk::mount()>
c000bbd4:	83 c4 10             	add    esp,0x10
c000bbd7:	90                   	nop
c000bbd8:	83 c4 1c             	add    esp,0x1c
c000bbdb:	c3                   	ret    

c000bbdc <File::File(char const*, Process*)>:
c000bbdc:	83 ec 0c             	sub    esp,0xc
c000bbdf:	6a 01                	push   0x1
c000bbe1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bbe5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bbe9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bbed:	e8 0c ff ff ff       	call   c000bafe <File::File(char const*, Process*, bool)>
c000bbf2:	83 c4 10             	add    esp,0x10
c000bbf5:	90                   	nop
c000bbf6:	83 c4 0c             	add    esp,0xc
c000bbf9:	c3                   	ret    

c000bbfa <File::open(FileOpenMode)>:
c000bbfa:	53                   	push   ebx
c000bbfb:	b8 0b 00 00 00       	mov    eax,0xb
c000bc00:	83 ec 08             	sub    esp,0x8
c000bc03:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bc07:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000bc0e:	83 fa 19             	cmp    edx,0x19
c000bc11:	77 40                	ja     c000bc53 <File::open(FileOpenMode)+0x59>
c000bc13:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bc1a:	85 d2                	test   edx,edx
c000bc1c:	74 35                	je     c000bc53 <File::open(FileOpenMode)+0x59>
c000bc1e:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bc24:	85 d2                	test   edx,edx
c000bc26:	74 2b                	je     c000bc53 <File::open(FileOpenMode)+0x59>
c000bc28:	b8 06 00 00 00       	mov    eax,0x6
c000bc2d:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000bc31:	75 20                	jne    c000bc53 <File::open(FileOpenMode)+0x59>
c000bc33:	8b 02                	mov    eax,DWORD PTR [edx]
c000bc35:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000bc3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc3f:	51                   	push   ecx
c000bc40:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000bc43:	51                   	push   ecx
c000bc44:	52                   	push   edx
c000bc45:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000bc48:	83 c4 10             	add    esp,0x10
c000bc4b:	85 c0                	test   eax,eax
c000bc4d:	75 04                	jne    c000bc53 <File::open(FileOpenMode)+0x59>
c000bc4f:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000bc53:	83 c4 08             	add    esp,0x8
c000bc56:	5b                   	pop    ebx
c000bc57:	c3                   	ret    

c000bc58 <File::close()>:
c000bc58:	53                   	push   ebx
c000bc59:	b8 0b 00 00 00       	mov    eax,0xb
c000bc5e:	83 ec 08             	sub    esp,0x8
c000bc61:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bc65:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bc6c:	83 f9 19             	cmp    ecx,0x19
c000bc6f:	77 41                	ja     c000bcb2 <File::close()+0x5a>
c000bc71:	8b 1c 8d 80 b8 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd4780]
c000bc78:	85 db                	test   ebx,ebx
c000bc7a:	74 36                	je     c000bcb2 <File::close()+0x5a>
c000bc7c:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000bc83:	74 2d                	je     c000bcb2 <File::close()+0x5a>
c000bc85:	b8 05 00 00 00       	mov    eax,0x5
c000bc8a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bc8e:	74 22                	je     c000bcb2 <File::close()+0x5a>
c000bc90:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000bc94:	8b 04 8d 80 b8 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd4780]
c000bc9b:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bca1:	53                   	push   ebx
c000bca2:	53                   	push   ebx
c000bca3:	8b 08                	mov    ecx,DWORD PTR [eax]
c000bca5:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000bcab:	50                   	push   eax
c000bcac:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000bcaf:	83 c4 10             	add    esp,0x10
c000bcb2:	83 c4 08             	add    esp,0x8
c000bcb5:	5b                   	pop    ebx
c000bcb6:	c3                   	ret    
c000bcb7:	90                   	nop

c000bcb8 <File::seek(unsigned long long)>:
c000bcb8:	56                   	push   esi
c000bcb9:	53                   	push   ebx
c000bcba:	b8 0b 00 00 00       	mov    eax,0xb
c000bcbf:	51                   	push   ecx
c000bcc0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bcc4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bcc8:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000bccf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bcd3:	83 fa 19             	cmp    edx,0x19
c000bcd6:	77 31                	ja     c000bd09 <File::seek(unsigned long long)+0x51>
c000bcd8:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bcdf:	85 d2                	test   edx,edx
c000bce1:	74 26                	je     c000bd09 <File::seek(unsigned long long)+0x51>
c000bce3:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bce9:	85 d2                	test   edx,edx
c000bceb:	74 1c                	je     c000bd09 <File::seek(unsigned long long)+0x51>
c000bced:	b8 05 00 00 00       	mov    eax,0x5
c000bcf2:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000bcf6:	74 11                	je     c000bd09 <File::seek(unsigned long long)+0x51>
c000bcf8:	8b 02                	mov    eax,DWORD PTR [edx]
c000bcfa:	53                   	push   ebx
c000bcfb:	51                   	push   ecx
c000bcfc:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000bd02:	52                   	push   edx
c000bd03:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000bd06:	83 c4 10             	add    esp,0x10
c000bd09:	5a                   	pop    edx
c000bd0a:	5b                   	pop    ebx
c000bd0b:	5e                   	pop    esi
c000bd0c:	c3                   	ret    
c000bd0d:	90                   	nop

c000bd0e <File::truncate(unsigned long long)>:
c000bd0e:	56                   	push   esi
c000bd0f:	53                   	push   ebx
c000bd10:	b8 0b 00 00 00       	mov    eax,0xb
c000bd15:	51                   	push   ecx
c000bd16:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bd1a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bd1e:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000bd25:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bd29:	83 fa 19             	cmp    edx,0x19
c000bd2c:	77 31                	ja     c000bd5f <File::truncate(unsigned long long)+0x51>
c000bd2e:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bd35:	85 d2                	test   edx,edx
c000bd37:	74 26                	je     c000bd5f <File::truncate(unsigned long long)+0x51>
c000bd39:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bd3f:	85 d2                	test   edx,edx
c000bd41:	74 1c                	je     c000bd5f <File::truncate(unsigned long long)+0x51>
c000bd43:	b8 05 00 00 00       	mov    eax,0x5
c000bd48:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000bd4c:	74 11                	je     c000bd5f <File::truncate(unsigned long long)+0x51>
c000bd4e:	8b 02                	mov    eax,DWORD PTR [edx]
c000bd50:	53                   	push   ebx
c000bd51:	51                   	push   ecx
c000bd52:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000bd58:	52                   	push   edx
c000bd59:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000bd5c:	83 c4 10             	add    esp,0x10
c000bd5f:	5a                   	pop    edx
c000bd60:	5b                   	pop    ebx
c000bd61:	5e                   	pop    esi
c000bd62:	c3                   	ret    
c000bd63:	90                   	nop

c000bd64 <File::tell(unsigned long long*)>:
c000bd64:	83 ec 0c             	sub    esp,0xc
c000bd67:	b8 0b 00 00 00       	mov    eax,0xb
c000bd6c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bd70:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000bd77:	83 fa 19             	cmp    edx,0x19
c000bd7a:	77 34                	ja     c000bdb0 <File::tell(unsigned long long*)+0x4c>
c000bd7c:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bd83:	85 d2                	test   edx,edx
c000bd85:	74 29                	je     c000bdb0 <File::tell(unsigned long long*)+0x4c>
c000bd87:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bd8d:	85 d2                	test   edx,edx
c000bd8f:	74 1f                	je     c000bdb0 <File::tell(unsigned long long*)+0x4c>
c000bd91:	b8 05 00 00 00       	mov    eax,0x5
c000bd96:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000bd9a:	74 14                	je     c000bdb0 <File::tell(unsigned long long*)+0x4c>
c000bd9c:	50                   	push   eax
c000bd9d:	8b 02                	mov    eax,DWORD PTR [edx]
c000bd9f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bda3:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000bda9:	52                   	push   edx
c000bdaa:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000bdad:	83 c4 10             	add    esp,0x10
c000bdb0:	83 c4 0c             	add    esp,0xc
c000bdb3:	c3                   	ret    

c000bdb4 <File::rewind()>:
c000bdb4:	83 ec 10             	sub    esp,0x10
c000bdb7:	6a 00                	push   0x0
c000bdb9:	6a 00                	push   0x0
c000bdbb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bdbf:	e8 f4 fe ff ff       	call   c000bcb8 <File::seek(unsigned long long)>
c000bdc4:	83 c4 1c             	add    esp,0x1c
c000bdc7:	c3                   	ret    

c000bdc8 <File::unlink()>:
c000bdc8:	83 ec 0c             	sub    esp,0xc
c000bdcb:	b8 0b 00 00 00       	mov    eax,0xb
c000bdd0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bdd4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bddb:	83 f9 19             	cmp    ecx,0x19
c000bdde:	77 2f                	ja     c000be0f <File::unlink()+0x47>
c000bde0:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000bde7:	85 c9                	test   ecx,ecx
c000bde9:	74 24                	je     c000be0f <File::unlink()+0x47>
c000bdeb:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bdf1:	85 c9                	test   ecx,ecx
c000bdf3:	74 1a                	je     c000be0f <File::unlink()+0x47>
c000bdf5:	b8 06 00 00 00       	mov    eax,0x6
c000bdfa:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bdfe:	75 0f                	jne    c000be0f <File::unlink()+0x47>
c000be00:	83 c2 0d             	add    edx,0xd
c000be03:	50                   	push   eax
c000be04:	50                   	push   eax
c000be05:	8b 01                	mov    eax,DWORD PTR [ecx]
c000be07:	52                   	push   edx
c000be08:	51                   	push   ecx
c000be09:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000be0c:	83 c4 10             	add    esp,0x10
c000be0f:	83 c4 0c             	add    esp,0xc
c000be12:	c3                   	ret    
c000be13:	90                   	nop

c000be14 <File::rename(char const*)>:
c000be14:	83 ec 0c             	sub    esp,0xc
c000be17:	b8 0b 00 00 00       	mov    eax,0xb
c000be1c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be20:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000be27:	83 f9 19             	cmp    ecx,0x19
c000be2a:	77 32                	ja     c000be5e <File::rename(char const*)+0x4a>
c000be2c:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000be33:	85 c9                	test   ecx,ecx
c000be35:	74 27                	je     c000be5e <File::rename(char const*)+0x4a>
c000be37:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000be3d:	85 c9                	test   ecx,ecx
c000be3f:	74 1d                	je     c000be5e <File::rename(char const*)+0x4a>
c000be41:	b8 06 00 00 00       	mov    eax,0x6
c000be46:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000be4a:	75 12                	jne    c000be5e <File::rename(char const*)+0x4a>
c000be4c:	83 c2 0d             	add    edx,0xd
c000be4f:	50                   	push   eax
c000be50:	8b 01                	mov    eax,DWORD PTR [ecx]
c000be52:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000be56:	52                   	push   edx
c000be57:	51                   	push   ecx
c000be58:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000be5b:	83 c4 10             	add    esp,0x10
c000be5e:	83 c4 0c             	add    esp,0xc
c000be61:	c3                   	ret    

c000be62 <File::chfatattr(unsigned char, unsigned char)>:
c000be62:	57                   	push   edi
c000be63:	b8 0b 00 00 00       	mov    eax,0xb
c000be68:	56                   	push   esi
c000be69:	53                   	push   ebx
c000be6a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be6e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000be72:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000be79:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000be7d:	83 f9 19             	cmp    ecx,0x19
c000be80:	77 37                	ja     c000beb9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000be82:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000be89:	85 c9                	test   ecx,ecx
c000be8b:	74 2c                	je     c000beb9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000be8d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000be93:	85 c9                	test   ecx,ecx
c000be95:	74 22                	je     c000beb9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000be97:	b8 06 00 00 00       	mov    eax,0x6
c000be9c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bea0:	75 17                	jne    c000beb9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bea2:	8b 39                	mov    edi,DWORD PTR [ecx]
c000bea4:	89 f0                	mov    eax,esi
c000bea6:	83 c2 0d             	add    edx,0xd
c000bea9:	0f b6 f0             	movzx  esi,al
c000beac:	0f b6 db             	movzx  ebx,bl
c000beaf:	56                   	push   esi
c000beb0:	53                   	push   ebx
c000beb1:	52                   	push   edx
c000beb2:	51                   	push   ecx
c000beb3:	ff 57 38             	call   DWORD PTR [edi+0x38]
c000beb6:	83 c4 10             	add    esp,0x10
c000beb9:	5b                   	pop    ebx
c000beba:	5e                   	pop    esi
c000bebb:	5f                   	pop    edi
c000bebc:	c3                   	ret    
c000bebd:	90                   	nop

c000bebe <File::exists()>:
c000bebe:	83 ec 0c             	sub    esp,0xc
c000bec1:	31 c0                	xor    eax,eax
c000bec3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bec7:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bece:	83 f9 19             	cmp    ecx,0x19
c000bed1:	77 24                	ja     c000bef7 <File::exists()+0x39>
c000bed3:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000beda:	85 c9                	test   ecx,ecx
c000bedc:	74 19                	je     c000bef7 <File::exists()+0x39>
c000bede:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bee4:	85 c9                	test   ecx,ecx
c000bee6:	74 0f                	je     c000bef7 <File::exists()+0x39>
c000bee8:	83 c2 0d             	add    edx,0xd
c000beeb:	50                   	push   eax
c000beec:	50                   	push   eax
c000beed:	8b 01                	mov    eax,DWORD PTR [ecx]
c000beef:	52                   	push   edx
c000bef0:	51                   	push   ecx
c000bef1:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000bef4:	83 c4 10             	add    esp,0x10
c000bef7:	83 c4 0c             	add    esp,0xc
c000befa:	c3                   	ret    
c000befb:	90                   	nop

c000befc <File::stat(unsigned long long*, bool*)>:
c000befc:	56                   	push   esi
c000befd:	53                   	push   ebx
c000befe:	50                   	push   eax
c000beff:	b8 0b 00 00 00       	mov    eax,0xb
c000bf04:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf08:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bf0c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bf13:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bf17:	83 f9 19             	cmp    ecx,0x19
c000bf1a:	77 3d                	ja     c000bf59 <File::stat(unsigned long long*, bool*)+0x5d>
c000bf1c:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000bf23:	85 c9                	test   ecx,ecx
c000bf25:	74 32                	je     c000bf59 <File::stat(unsigned long long*, bool*)+0x5d>
c000bf27:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bf2d:	85 c9                	test   ecx,ecx
c000bf2f:	74 28                	je     c000bf59 <File::stat(unsigned long long*, bool*)+0x5d>
c000bf31:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bf33:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bf37:	74 13                	je     c000bf4c <File::stat(unsigned long long*, bool*)+0x50>
c000bf39:	83 ec 04             	sub    esp,0x4
c000bf3c:	56                   	push   esi
c000bf3d:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000bf43:	51                   	push   ecx
c000bf44:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000bf47:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000bf4a:	eb 0a                	jmp    c000bf56 <File::stat(unsigned long long*, bool*)+0x5a>
c000bf4c:	53                   	push   ebx
c000bf4d:	83 c2 0d             	add    edx,0xd
c000bf50:	56                   	push   esi
c000bf51:	52                   	push   edx
c000bf52:	51                   	push   ecx
c000bf53:	ff 50 34             	call   DWORD PTR [eax+0x34]
c000bf56:	83 c4 10             	add    esp,0x10
c000bf59:	5a                   	pop    edx
c000bf5a:	5b                   	pop    ebx
c000bf5b:	5e                   	pop    esi
c000bf5c:	c3                   	ret    

c000bf5d <Fs::setcwd(Process*, char*)>:
c000bf5d:	55                   	push   ebp
c000bf5e:	57                   	push   edi
c000bf5f:	56                   	push   esi
c000bf60:	53                   	push   ebx
c000bf61:	81 ec 1c 02 00 00    	sub    esp,0x21c
c000bf67:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c000bf6e:	6a 00                	push   0x0
c000bf70:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000bf76:	57                   	push   edi
c000bf77:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000bf7e:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000bf82:	56                   	push   esi
c000bf83:	e8 5c f9 ff ff       	call   c000b8e4 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000bf88:	89 34 24             	mov    DWORD PTR [esp],esi
c000bf8b:	e8 e0 45 ff ff       	call   c0000570 <strlen>
c000bf90:	83 c4 10             	add    esp,0x10
c000bf93:	83 f8 02             	cmp    eax,0x2
c000bf96:	77 15                	ja     c000bfad <Fs::setcwd(Process*, char*)+0x50>
c000bf98:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000bf9d:	83 eb 41             	sub    ebx,0x41
c000bfa0:	8b 04 9d 80 b8 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd4780]
c000bfa7:	85 c0                	test   eax,eax
c000bfa9:	75 1c                	jne    c000bfc7 <Fs::setcwd(Process*, char*)+0x6a>
c000bfab:	eb 2f                	jmp    c000bfdc <Fs::setcwd(Process*, char*)+0x7f>
c000bfad:	83 ec 0c             	sub    esp,0xc
c000bfb0:	56                   	push   esi
c000bfb1:	e8 ba 45 ff ff       	call   c0000570 <strlen>
c000bfb6:	83 c4 10             	add    esp,0x10
c000bfb9:	83 f8 03             	cmp    eax,0x3
c000bfbc:	75 57                	jne    c000c015 <Fs::setcwd(Process*, char*)+0xb8>
c000bfbe:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000bfc3:	75 50                	jne    c000c015 <Fs::setcwd(Process*, char*)+0xb8>
c000bfc5:	eb d1                	jmp    c000bf98 <Fs::setcwd(Process*, char*)+0x3b>
c000bfc7:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000bfce:	75 0c                	jne    c000bfdc <Fs::setcwd(Process*, char*)+0x7f>
c000bfd0:	83 ec 0c             	sub    esp,0xc
c000bfd3:	50                   	push   eax
c000bfd4:	e8 9d 1d 00 00       	call   c000dd76 <LogicalDisk::mount()>
c000bfd9:	83 c4 10             	add    esp,0x10
c000bfdc:	b8 03 00 00 00       	mov    eax,0x3
c000bfe1:	83 fb 19             	cmp    ebx,0x19
c000bfe4:	0f 87 c6 00 00 00    	ja     c000c0b0 <Fs::setcwd(Process*, char*)+0x153>
c000bfea:	8b 14 9d 80 b8 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd4780]
c000bff1:	b8 05 00 00 00       	mov    eax,0x5
c000bff6:	85 d2                	test   edx,edx
c000bff8:	0f 84 b2 00 00 00    	je     c000c0b0 <Fs::setcwd(Process*, char*)+0x153>
c000bffe:	b8 06 00 00 00       	mov    eax,0x6
c000c003:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000c00a:	0f 85 92 00 00 00    	jne    c000c0a2 <Fs::setcwd(Process*, char*)+0x145>
c000c010:	e9 9b 00 00 00       	jmp    c000c0b0 <Fs::setcwd(Process*, char*)+0x153>
c000c015:	83 ec 0c             	sub    esp,0xc
c000c018:	68 14 01 00 00       	push   0x114
c000c01d:	e8 94 ba ff ff       	call   c0007ab6 <malloc>
c000c022:	83 c4 0c             	add    esp,0xc
c000c025:	89 c3                	mov    ebx,eax
c000c027:	55                   	push   ebp
c000c028:	56                   	push   esi
c000c029:	50                   	push   eax
c000c02a:	e8 ad fb ff ff       	call   c000bbdc <File::File(char const*, Process*)>
c000c02f:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000c034:	83 c4 0c             	add    esp,0xc
c000c037:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000c03b:	50                   	push   eax
c000c03c:	8d 44 24 10          	lea    eax,[esp+0x10]
c000c040:	50                   	push   eax
c000c041:	53                   	push   ebx
c000c042:	e8 b5 fe ff ff       	call   c000befc <File::stat(unsigned long long*, bool*)>
c000c047:	83 c4 10             	add    esp,0x10
c000c04a:	83 f8 02             	cmp    eax,0x2
c000c04d:	74 27                	je     c000c076 <Fs::setcwd(Process*, char*)+0x119>
c000c04f:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000c054:	75 1c                	jne    c000c072 <Fs::setcwd(Process*, char*)+0x115>
c000c056:	b8 02 00 00 00       	mov    eax,0x2
c000c05b:	85 db                	test   ebx,ebx
c000c05d:	74 51                	je     c000c0b0 <Fs::setcwd(Process*, char*)+0x153>
c000c05f:	83 ec 0c             	sub    esp,0xc
c000c062:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c064:	53                   	push   ebx
c000c065:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000c068:	83 c4 10             	add    esp,0x10
c000c06b:	b8 02 00 00 00       	mov    eax,0x2
c000c070:	eb 3e                	jmp    c000c0b0 <Fs::setcwd(Process*, char*)+0x153>
c000c072:	85 c0                	test   eax,eax
c000c074:	74 1c                	je     c000c092 <Fs::setcwd(Process*, char*)+0x135>
c000c076:	b8 01 00 00 00       	mov    eax,0x1
c000c07b:	85 db                	test   ebx,ebx
c000c07d:	74 31                	je     c000c0b0 <Fs::setcwd(Process*, char*)+0x153>
c000c07f:	83 ec 0c             	sub    esp,0xc
c000c082:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c084:	53                   	push   ebx
c000c085:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000c088:	83 c4 10             	add    esp,0x10
c000c08b:	b8 01 00 00 00       	mov    eax,0x1
c000c090:	eb 1e                	jmp    c000c0b0 <Fs::setcwd(Process*, char*)+0x153>
c000c092:	85 db                	test   ebx,ebx
c000c094:	74 0c                	je     c000c0a2 <Fs::setcwd(Process*, char*)+0x145>
c000c096:	83 ec 0c             	sub    esp,0xc
c000c099:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c09b:	53                   	push   ebx
c000c09c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000c09f:	83 c4 10             	add    esp,0x10
c000c0a2:	50                   	push   eax
c000c0a3:	50                   	push   eax
c000c0a4:	56                   	push   esi
c000c0a5:	57                   	push   edi
c000c0a6:	e8 95 45 ff ff       	call   c0000640 <strcpy>
c000c0ab:	83 c4 10             	add    esp,0x10
c000c0ae:	31 c0                	xor    eax,eax
c000c0b0:	81 c4 1c 02 00 00    	add    esp,0x21c
c000c0b6:	5b                   	pop    ebx
c000c0b7:	5e                   	pop    esi
c000c0b8:	5f                   	pop    edi
c000c0b9:	5d                   	pop    ebp
c000c0ba:	c3                   	ret    
c000c0bb:	90                   	nop

c000c0bc <Directory::Directory(char const*, Process*)>:
c000c0bc:	83 ec 0c             	sub    esp,0xc
c000c0bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0c3:	83 ec 08             	sub    esp,0x8
c000c0c6:	6a 00                	push   0x0
c000c0c8:	50                   	push   eax
c000c0c9:	e8 f0 d0 ff ff       	call   c00091be <UnixFile::UnixFile(int)>
c000c0ce:	83 c4 10             	add    esp,0x10
c000c0d1:	ba 70 1a 02 c0       	mov    edx,0xc0021a70
c000c0d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0da:	89 10                	mov    DWORD PTR [eax],edx
c000c0dc:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000c0e1:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000c0e5:	0f 95 c0             	setne  al
c000c0e8:	0f b6 c0             	movzx  eax,al
c000c0eb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c0ef:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000c0f5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c0f9:	83 c2 0d             	add    edx,0xd
c000c0fc:	50                   	push   eax
c000c0fd:	51                   	push   ecx
c000c0fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c102:	52                   	push   edx
c000c103:	e8 dc f7 ff ff       	call   c000b8e4 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000c108:	83 c4 10             	add    esp,0x10
c000c10b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c10f:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000c112:	83 e8 41             	sub    eax,0x41
c000c115:	88 c2                	mov    dl,al
c000c117:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c11b:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000c121:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c125:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000c129:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c12d:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000c133:	0f b6 c0             	movzx  eax,al
c000c136:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000c13d:	85 c0                	test   eax,eax
c000c13f:	74 3e                	je     c000c17f <Directory::Directory(char const*, Process*)+0xc3>
c000c141:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c145:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000c14b:	0f b6 c0             	movzx  eax,al
c000c14e:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000c155:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000c15b:	85 c0                	test   eax,eax
c000c15d:	75 20                	jne    c000c17f <Directory::Directory(char const*, Process*)+0xc3>
c000c15f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c163:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000c169:	0f b6 c0             	movzx  eax,al
c000c16c:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000c173:	83 ec 0c             	sub    esp,0xc
c000c176:	50                   	push   eax
c000c177:	e8 fa 1b 00 00       	call   c000dd76 <LogicalDisk::mount()>
c000c17c:	83 c4 10             	add    esp,0x10
c000c17f:	90                   	nop
c000c180:	83 c4 0c             	add    esp,0xc
c000c183:	c3                   	ret    

c000c184 <Directory::open()>:
c000c184:	53                   	push   ebx
c000c185:	b8 0b 00 00 00       	mov    eax,0xb
c000c18a:	83 ec 08             	sub    esp,0x8
c000c18d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c191:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000c198:	83 fa 19             	cmp    edx,0x19
c000c19b:	77 3d                	ja     c000c1da <Directory::open()+0x56>
c000c19d:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000c1a4:	85 d2                	test   edx,edx
c000c1a6:	74 32                	je     c000c1da <Directory::open()+0x56>
c000c1a8:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000c1ae:	85 d2                	test   edx,edx
c000c1b0:	74 28                	je     c000c1da <Directory::open()+0x56>
c000c1b2:	b8 06 00 00 00       	mov    eax,0x6
c000c1b7:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000c1bb:	75 1d                	jne    c000c1da <Directory::open()+0x56>
c000c1bd:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000c1c3:	50                   	push   eax
c000c1c4:	8b 02                	mov    eax,DWORD PTR [edx]
c000c1c6:	51                   	push   ecx
c000c1c7:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000c1ca:	51                   	push   ecx
c000c1cb:	52                   	push   edx
c000c1cc:	ff 50 50             	call   DWORD PTR [eax+0x50]
c000c1cf:	83 c4 10             	add    esp,0x10
c000c1d2:	85 c0                	test   eax,eax
c000c1d4:	75 04                	jne    c000c1da <Directory::open()+0x56>
c000c1d6:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000c1da:	83 c4 08             	add    esp,0x8
c000c1dd:	5b                   	pop    ebx
c000c1de:	c3                   	ret    
c000c1df:	90                   	nop

c000c1e0 <Directory::close()>:
c000c1e0:	53                   	push   ebx
c000c1e1:	b8 0b 00 00 00       	mov    eax,0xb
c000c1e6:	83 ec 08             	sub    esp,0x8
c000c1e9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c1ed:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c1f4:	83 f9 19             	cmp    ecx,0x19
c000c1f7:	77 41                	ja     c000c23a <Directory::close()+0x5a>
c000c1f9:	8b 1c 8d 80 b8 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd4780]
c000c200:	85 db                	test   ebx,ebx
c000c202:	74 36                	je     c000c23a <Directory::close()+0x5a>
c000c204:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000c20b:	74 2d                	je     c000c23a <Directory::close()+0x5a>
c000c20d:	b8 05 00 00 00       	mov    eax,0x5
c000c212:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c216:	74 22                	je     c000c23a <Directory::close()+0x5a>
c000c218:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000c21c:	8b 04 8d 80 b8 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd4780]
c000c223:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000c229:	53                   	push   ebx
c000c22a:	53                   	push   ebx
c000c22b:	8b 08                	mov    ecx,DWORD PTR [eax]
c000c22d:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000c233:	50                   	push   eax
c000c234:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000c237:	83 c4 10             	add    esp,0x10
c000c23a:	83 c4 08             	add    esp,0x8
c000c23d:	5b                   	pop    ebx
c000c23e:	c3                   	ret    
c000c23f:	90                   	nop

c000c240 <Directory::unlink()>:
c000c240:	83 ec 0c             	sub    esp,0xc
c000c243:	b8 0b 00 00 00       	mov    eax,0xb
c000c248:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c24c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c253:	83 f9 19             	cmp    ecx,0x19
c000c256:	77 2f                	ja     c000c287 <Directory::unlink()+0x47>
c000c258:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c25f:	85 c9                	test   ecx,ecx
c000c261:	74 24                	je     c000c287 <Directory::unlink()+0x47>
c000c263:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c269:	85 c9                	test   ecx,ecx
c000c26b:	74 1a                	je     c000c287 <Directory::unlink()+0x47>
c000c26d:	b8 06 00 00 00       	mov    eax,0x6
c000c272:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c276:	75 0f                	jne    c000c287 <Directory::unlink()+0x47>
c000c278:	83 c2 0d             	add    edx,0xd
c000c27b:	50                   	push   eax
c000c27c:	50                   	push   eax
c000c27d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c27f:	52                   	push   edx
c000c280:	51                   	push   ecx
c000c281:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000c284:	83 c4 10             	add    esp,0x10
c000c287:	83 c4 0c             	add    esp,0xc
c000c28a:	c3                   	ret    
c000c28b:	90                   	nop

c000c28c <Directory::rename(char const*)>:
c000c28c:	83 ec 0c             	sub    esp,0xc
c000c28f:	b8 0b 00 00 00       	mov    eax,0xb
c000c294:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c298:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c29f:	83 f9 19             	cmp    ecx,0x19
c000c2a2:	77 32                	ja     c000c2d6 <Directory::rename(char const*)+0x4a>
c000c2a4:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c2ab:	85 c9                	test   ecx,ecx
c000c2ad:	74 27                	je     c000c2d6 <Directory::rename(char const*)+0x4a>
c000c2af:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c2b5:	85 c9                	test   ecx,ecx
c000c2b7:	74 1d                	je     c000c2d6 <Directory::rename(char const*)+0x4a>
c000c2b9:	b8 06 00 00 00       	mov    eax,0x6
c000c2be:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c2c2:	75 12                	jne    c000c2d6 <Directory::rename(char const*)+0x4a>
c000c2c4:	83 c2 0d             	add    edx,0xd
c000c2c7:	50                   	push   eax
c000c2c8:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c2ca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c2ce:	52                   	push   edx
c000c2cf:	51                   	push   ecx
c000c2d0:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000c2d3:	83 c4 10             	add    esp,0x10
c000c2d6:	83 c4 0c             	add    esp,0xc
c000c2d9:	c3                   	ret    

c000c2da <Directory::exists()>:
c000c2da:	83 ec 0c             	sub    esp,0xc
c000c2dd:	31 c0                	xor    eax,eax
c000c2df:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c2e3:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c2ea:	83 f9 19             	cmp    ecx,0x19
c000c2ed:	77 24                	ja     c000c313 <Directory::exists()+0x39>
c000c2ef:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c2f6:	85 c9                	test   ecx,ecx
c000c2f8:	74 19                	je     c000c313 <Directory::exists()+0x39>
c000c2fa:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c300:	85 c9                	test   ecx,ecx
c000c302:	74 0f                	je     c000c313 <Directory::exists()+0x39>
c000c304:	83 c2 0d             	add    edx,0xd
c000c307:	50                   	push   eax
c000c308:	50                   	push   eax
c000c309:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c30b:	52                   	push   edx
c000c30c:	51                   	push   ecx
c000c30d:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000c310:	83 c4 10             	add    esp,0x10
c000c313:	83 c4 0c             	add    esp,0xc
c000c316:	c3                   	ret    
c000c317:	90                   	nop

c000c318 <Directory::read(dirent*)>:
c000c318:	83 ec 1c             	sub    esp,0x1c
c000c31b:	b8 0b 00 00 00       	mov    eax,0xb
c000c320:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c324:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c32b:	83 f9 19             	cmp    ecx,0x19
c000c32e:	77 30                	ja     c000c360 <Directory::read(dirent*)+0x48>
c000c330:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c337:	85 c9                	test   ecx,ecx
c000c339:	74 25                	je     c000c360 <Directory::read(dirent*)+0x48>
c000c33b:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c000c342:	74 1c                	je     c000c360 <Directory::read(dirent*)+0x48>
c000c344:	83 ec 0c             	sub    esp,0xc
c000c347:	8b 02                	mov    eax,DWORD PTR [edx]
c000c349:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000c34d:	51                   	push   ecx
c000c34e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c352:	6a 00                	push   0x0
c000c354:	68 10 01 00 00       	push   0x110
c000c359:	52                   	push   edx
c000c35a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c35d:	83 c4 20             	add    esp,0x20
c000c360:	83 c4 1c             	add    esp,0x1c
c000c363:	c3                   	ret    

c000c364 <Directory::create()>:
c000c364:	83 ec 0c             	sub    esp,0xc
c000c367:	b8 0b 00 00 00       	mov    eax,0xb
c000c36c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c370:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c377:	83 f9 19             	cmp    ecx,0x19
c000c37a:	77 2f                	ja     c000c3ab <Directory::create()+0x47>
c000c37c:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c383:	85 c9                	test   ecx,ecx
c000c385:	74 24                	je     c000c3ab <Directory::create()+0x47>
c000c387:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c38d:	85 c9                	test   ecx,ecx
c000c38f:	74 1a                	je     c000c3ab <Directory::create()+0x47>
c000c391:	b8 06 00 00 00       	mov    eax,0x6
c000c396:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c39a:	75 0f                	jne    c000c3ab <Directory::create()+0x47>
c000c39c:	83 c2 0d             	add    edx,0xd
c000c39f:	50                   	push   eax
c000c3a0:	50                   	push   eax
c000c3a1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c3a3:	52                   	push   edx
c000c3a4:	51                   	push   ecx
c000c3a5:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000c3a8:	83 c4 10             	add    esp,0x10
c000c3ab:	83 c4 0c             	add    esp,0xc
c000c3ae:	c3                   	ret    
c000c3af:	90                   	nop

c000c3b0 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000c3b0:	b8 0a 00 00 00       	mov    eax,0xa
c000c3b5:	c3                   	ret    
c000c3b6:	66 90                	xchg   ax,ax

c000c3b8 <Bus::Bus(char const*)>:
c000c3b8:	83 ec 0c             	sub    esp,0xc
c000c3bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3bf:	83 ec 08             	sub    esp,0x8
c000c3c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3c6:	50                   	push   eax
c000c3c7:	e8 22 08 00 00       	call   c000cbee <Device::Device(char const*)>
c000c3cc:	83 c4 10             	add    esp,0x10
c000c3cf:	ba 8c 1a 02 c0       	mov    edx,0xc0021a8c
c000c3d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3d8:	89 10                	mov    DWORD PTR [eax],edx
c000c3da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3de:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000c3e8:	90                   	nop
c000c3e9:	83 c4 0c             	add    esp,0xc
c000c3ec:	c3                   	ret    
c000c3ed:	90                   	nop
c000c3ee:	66 90                	xchg   ax,ax

c000c3f0 <Bus::~Bus()>:
c000c3f0:	83 ec 0c             	sub    esp,0xc
c000c3f3:	ba 8c 1a 02 c0       	mov    edx,0xc0021a8c
c000c3f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3fc:	89 10                	mov    DWORD PTR [eax],edx
c000c3fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c402:	83 ec 0c             	sub    esp,0xc
c000c405:	50                   	push   eax
c000c406:	e8 4d 05 00 00       	call   c000c958 <Device::~Device()>
c000c40b:	83 c4 10             	add    esp,0x10
c000c40e:	90                   	nop
c000c40f:	83 c4 0c             	add    esp,0xc
c000c412:	c3                   	ret    
c000c413:	90                   	nop

c000c414 <Bus::~Bus()>:
c000c414:	83 ec 0c             	sub    esp,0xc
c000c417:	83 ec 0c             	sub    esp,0xc
c000c41a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c41e:	e8 cd ff ff ff       	call   c000c3f0 <Bus::~Bus()>
c000c423:	83 c4 10             	add    esp,0x10
c000c426:	83 ec 08             	sub    esp,0x8
c000c429:	68 58 01 00 00       	push   0x158
c000c42e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c432:	e8 e1 e3 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000c437:	83 c4 10             	add    esp,0x10
c000c43a:	83 c4 0c             	add    esp,0xc
c000c43d:	c3                   	ret    

c000c43e <beepThread(void*)>:
c000c43e:	83 ec 0c             	sub    esp,0xc
c000c441:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000c446:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c44a:	48                   	dec    eax
c000c44b:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000c450:	75 01                	jne    c000c453 <beepThread(void*)+0x15>
c000c452:	fb                   	sti    
c000c453:	83 ec 0c             	sub    esp,0xc
c000c456:	6b c2 0a             	imul   eax,edx,0xa
c000c459:	50                   	push   eax
c000c45a:	e8 21 a0 00 00       	call   c0016480 <milliTenthSleep(unsigned int)>
c000c45f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000c466:	e8 70 bf 00 00       	call   c00183db <HalMakeBeep(int)>
c000c46b:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000c473:	83 c4 1c             	add    esp,0x1c
c000c476:	e9 e9 9e 00 00       	jmp    c0016364 <blockTask(TaskState)>

c000c47b <Krnl::beep(int, int, bool)>:
c000c47b:	56                   	push   esi
c000c47c:	53                   	push   ebx
c000c47d:	83 ec 10             	sub    esp,0x10
c000c480:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c484:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c488:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c48c:	e8 4a bf 00 00       	call   c00183db <HalMakeBeep(int)>
c000c491:	83 c4 10             	add    esp,0x10
c000c494:	89 f0                	mov    eax,esi
c000c496:	84 c0                	test   al,al
c000c498:	74 1e                	je     c000c4b8 <Krnl::beep(int, int, bool)+0x3d>
c000c49a:	83 ec 0c             	sub    esp,0xc
c000c49d:	6b db 0a             	imul   ebx,ebx,0xa
c000c4a0:	53                   	push   ebx
c000c4a1:	e8 da 9f 00 00       	call   c0016480 <milliTenthSleep(unsigned int)>
c000c4a6:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000c4ae:	83 c4 14             	add    esp,0x14
c000c4b1:	5b                   	pop    ebx
c000c4b2:	5e                   	pop    esi
c000c4b3:	e9 23 bf 00 00       	jmp    c00183db <HalMakeBeep(int)>
c000c4b8:	68 e6 00 00 00       	push   0xe6
c000c4bd:	53                   	push   ebx
c000c4be:	68 3e c4 00 c0       	push   0xc000c43e
c000c4c3:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000c4c9:	e8 32 9a 00 00       	call   c0015f00 <Process::createThread(void (*)(void*), void*, int)>
c000c4ce:	83 c4 14             	add    esp,0x14
c000c4d1:	5b                   	pop    ebx
c000c4d2:	5e                   	pop    esi
c000c4d3:	c3                   	ret    

c000c4d4 <User::loadClockSettings(int)>:
c000c4d4:	53                   	push   ebx
c000c4d5:	83 ec 14             	sub    esp,0x14
c000c4d8:	68 14 01 00 00       	push   0x114
c000c4dd:	e8 d4 b5 ff ff       	call   c0007ab6 <malloc>
c000c4e2:	83 c4 0c             	add    esp,0xc
c000c4e5:	89 c3                	mov    ebx,eax
c000c4e7:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000c4ed:	68 b0 1a 02 c0       	push   0xc0021ab0
c000c4f2:	50                   	push   eax
c000c4f3:	e8 e4 f6 ff ff       	call   c000bbdc <File::File(char const*, Process*)>
c000c4f8:	58                   	pop    eax
c000c4f9:	5a                   	pop    edx
c000c4fa:	6a 01                	push   0x1
c000c4fc:	53                   	push   ebx
c000c4fd:	e8 f8 f6 ff ff       	call   c000bbfa <File::open(FileOpenMode)>
c000c502:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c505:	e8 4e f7 ff ff       	call   c000bc58 <File::close()>
c000c50a:	83 c4 10             	add    esp,0x10
c000c50d:	85 db                	test   ebx,ebx
c000c50f:	74 0f                	je     c000c520 <User::loadClockSettings(int)+0x4c>
c000c511:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c513:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000c517:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c51a:	83 c4 08             	add    esp,0x8
c000c51d:	5b                   	pop    ebx
c000c51e:	ff e0                	jmp    eax
c000c520:	83 c4 08             	add    esp,0x8
c000c523:	5b                   	pop    ebx
c000c524:	c3                   	ret    
c000c525:	90                   	nop

c000c526 <Clock::Clock(char const*)>:
c000c526:	83 ec 0c             	sub    esp,0xc
c000c529:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c52d:	83 ec 08             	sub    esp,0x8
c000c530:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c534:	50                   	push   eax
c000c535:	e8 b4 06 00 00       	call   c000cbee <Device::Device(char const*)>
c000c53a:	83 c4 10             	add    esp,0x10
c000c53d:	ba d8 1a 02 c0       	mov    edx,0xc0021ad8
c000c542:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c546:	89 10                	mov    DWORD PTR [eax],edx
c000c548:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c54c:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000c556:	90                   	nop
c000c557:	83 c4 0c             	add    esp,0xc
c000c55a:	c3                   	ret    
c000c55b:	90                   	nop

c000c55c <Clock::~Clock()>:
c000c55c:	83 ec 0c             	sub    esp,0xc
c000c55f:	ba d8 1a 02 c0       	mov    edx,0xc0021ad8
c000c564:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c568:	89 10                	mov    DWORD PTR [eax],edx
c000c56a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c56e:	83 ec 0c             	sub    esp,0xc
c000c571:	50                   	push   eax
c000c572:	e8 e1 03 00 00       	call   c000c958 <Device::~Device()>
c000c577:	83 c4 10             	add    esp,0x10
c000c57a:	90                   	nop
c000c57b:	83 c4 0c             	add    esp,0xc
c000c57e:	c3                   	ret    
c000c57f:	90                   	nop

c000c580 <Clock::~Clock()>:
c000c580:	83 ec 0c             	sub    esp,0xc
c000c583:	83 ec 0c             	sub    esp,0xc
c000c586:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c58a:	e8 cd ff ff ff       	call   c000c55c <Clock::~Clock()>
c000c58f:	83 c4 10             	add    esp,0x10
c000c592:	83 ec 08             	sub    esp,0x8
c000c595:	68 58 01 00 00       	push   0x158
c000c59a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c59e:	e8 75 e2 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000c5a3:	83 c4 10             	add    esp,0x10
c000c5a6:	83 c4 0c             	add    esp,0xc
c000c5a9:	c3                   	ret    

c000c5aa <Clock::timeInSecondsLocal()>:
c000c5aa:	53                   	push   ebx
c000c5ab:	83 ec 14             	sub    esp,0x14
c000c5ae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c5b2:	8b 10                	mov    edx,DWORD PTR [eax]
c000c5b4:	50                   	push   eax
c000c5b5:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000c5b8:	0f b6 0d 08 94 02 c0 	movzx  ecx,BYTE PTR ds:0xc0029408
c000c5bf:	03 0d 0c 94 02 c0    	add    ecx,DWORD PTR ds:0xc002940c
c000c5c5:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c5cb:	89 cb                	mov    ebx,ecx
c000c5cd:	c1 fb 1f             	sar    ebx,0x1f
c000c5d0:	01 c8                	add    eax,ecx
c000c5d2:	11 da                	adc    edx,ebx
c000c5d4:	83 c4 10             	add    esp,0x10
c000c5d7:	31 c9                	xor    ecx,ecx
c000c5d9:	80 3d 09 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029409,0x0
c000c5e0:	74 05                	je     c000c5e7 <Clock::timeInSecondsLocal()+0x3d>
c000c5e2:	b9 08 07 00 00       	mov    ecx,0x708
c000c5e7:	31 db                	xor    ebx,ebx
c000c5e9:	01 c8                	add    eax,ecx
c000c5eb:	11 da                	adc    edx,ebx
c000c5ed:	83 c4 08             	add    esp,0x8
c000c5f0:	5b                   	pop    ebx
c000c5f1:	c3                   	ret    

c000c5f2 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000c5f2:	57                   	push   edi
c000c5f3:	56                   	push   esi
c000c5f4:	53                   	push   ebx
c000c5f5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c5f9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c5fd:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c5ff:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c603:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000c606:	0f b6 05 08 94 02 c0 	movzx  eax,BYTE PTR ds:0xc0029408
c000c60d:	03 05 0c 94 02 c0    	add    eax,DWORD PTR ds:0xc002940c
c000c613:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000c619:	99                   	cdq    
c000c61a:	29 c6                	sub    esi,eax
c000c61c:	19 d7                	sbb    edi,edx
c000c61e:	89 f0                	mov    eax,esi
c000c620:	89 fa                	mov    edx,edi
c000c622:	31 f6                	xor    esi,esi
c000c624:	80 3d 09 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029409,0x0
c000c62b:	74 05                	je     c000c632 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000c62d:	be 08 07 00 00       	mov    esi,0x708
c000c632:	31 ff                	xor    edi,edi
c000c634:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000c638:	29 f0                	sub    eax,esi
c000c63a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c63e:	19 fa                	sbb    edx,edi
c000c640:	89 d8                	mov    eax,ebx
c000c642:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c646:	5b                   	pop    ebx
c000c647:	5e                   	pop    esi
c000c648:	5f                   	pop    edi
c000c649:	ff e0                	jmp    eax

c000c64b <datetimeToSeconds(datetime_t)>:
c000c64b:	55                   	push   ebp
c000c64c:	57                   	push   edi
c000c64d:	56                   	push   esi
c000c64e:	53                   	push   ebx
c000c64f:	83 ec 0c             	sub    esp,0xc
c000c652:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c656:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000c65a:	89 d6                	mov    esi,edx
c000c65c:	0f b6 c7             	movzx  eax,bh
c000c65f:	c1 ee 10             	shr    esi,0x10
c000c662:	6b e8 3c             	imul   ebp,eax,0x3c
c000c665:	81 ee 6c 07 00 00    	sub    esi,0x76c
c000c66b:	0f b6 ce             	movzx  ecx,dh
c000c66e:	89 df                	mov    edi,ebx
c000c670:	49                   	dec    ecx
c000c671:	c1 ef 10             	shr    edi,0x10
c000c674:	0f b6 db             	movzx  ebx,bl
c000c677:	89 f8                	mov    eax,edi
c000c679:	69 db 10 0e 00 00    	imul   ebx,ebx,0xe10
c000c67f:	0f b6 f8             	movzx  edi,al
c000c682:	0f b6 d2             	movzx  edx,dl
c000c685:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000c689:	01 d8                	add    eax,ebx
c000c68b:	0f b7 de             	movzx  ebx,si
c000c68e:	89 04 24             	mov    DWORD PTR [esp],eax
c000c691:	c1 f8 1f             	sar    eax,0x1f
c000c694:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c698:	0f b6 c1             	movzx  eax,cl
c000c69b:	8b 0c 85 20 1b 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffde4e0]
c000c6a2:	83 f8 01             	cmp    eax,0x1
c000c6a5:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000c6a9:	76 27                	jbe    c000c6d2 <datetimeToSeconds(datetime_t)+0x87>
c000c6ab:	83 e6 03             	and    esi,0x3
c000c6ae:	75 22                	jne    c000c6d2 <datetimeToSeconds(datetime_t)+0x87>
c000c6b0:	31 d2                	xor    edx,edx
c000c6b2:	be 64 00 00 00       	mov    esi,0x64
c000c6b7:	89 d8                	mov    eax,ebx
c000c6b9:	f7 f6                	div    esi
c000c6bb:	85 d2                	test   edx,edx
c000c6bd:	75 12                	jne    c000c6d1 <datetimeToSeconds(datetime_t)+0x86>
c000c6bf:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000c6c5:	be 90 01 00 00       	mov    esi,0x190
c000c6ca:	99                   	cdq    
c000c6cb:	f7 fe                	idiv   esi
c000c6cd:	85 d2                	test   edx,edx
c000c6cf:	75 01                	jne    c000c6d2 <datetimeToSeconds(datetime_t)+0x87>
c000c6d1:	41                   	inc    ecx
c000c6d2:	83 fb 46             	cmp    ebx,0x46
c000c6d5:	76 48                	jbe    c000c71f <datetimeToSeconds(datetime_t)+0xd4>
c000c6d7:	be 46 00 00 00       	mov    esi,0x46
c000c6dc:	bf 64 00 00 00       	mov    edi,0x64
c000c6e1:	bd 90 01 00 00       	mov    ebp,0x190
c000c6e6:	b8 6d 01 00 00       	mov    eax,0x16d
c000c6eb:	f7 c6 03 00 00 00    	test   esi,0x3
c000c6f1:	75 23                	jne    c000c716 <datetimeToSeconds(datetime_t)+0xcb>
c000c6f3:	89 f0                	mov    eax,esi
c000c6f5:	99                   	cdq    
c000c6f6:	f7 ff                	idiv   edi
c000c6f8:	b8 6e 01 00 00       	mov    eax,0x16e
c000c6fd:	85 d2                	test   edx,edx
c000c6ff:	75 15                	jne    c000c716 <datetimeToSeconds(datetime_t)+0xcb>
c000c701:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000c707:	99                   	cdq    
c000c708:	f7 fd                	idiv   ebp
c000c70a:	83 fa 01             	cmp    edx,0x1
c000c70d:	19 c0                	sbb    eax,eax
c000c70f:	f7 d0                	not    eax
c000c711:	05 6e 01 00 00       	add    eax,0x16e
c000c716:	01 c1                	add    ecx,eax
c000c718:	46                   	inc    esi
c000c719:	39 de                	cmp    esi,ebx
c000c71b:	7c c9                	jl     c000c6e6 <datetimeToSeconds(datetime_t)+0x9b>
c000c71d:	eb 34                	jmp    c000c753 <datetimeToSeconds(datetime_t)+0x108>
c000c71f:	74 32                	je     c000c753 <datetimeToSeconds(datetime_t)+0x108>
c000c721:	b8 45 00 00 00       	mov    eax,0x45
c000c726:	89 c2                	mov    edx,eax
c000c728:	83 e2 03             	and    edx,0x3
c000c72b:	39 d8                	cmp    eax,ebx
c000c72d:	7e 0f                	jle    c000c73e <datetimeToSeconds(datetime_t)+0xf3>
c000c72f:	83 fa 01             	cmp    edx,0x1
c000c732:	19 d2                	sbb    edx,edx
c000c734:	48                   	dec    eax
c000c735:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000c73c:	eb e8                	jmp    c000c726 <datetimeToSeconds(datetime_t)+0xdb>
c000c73e:	b8 6d 01 00 00       	mov    eax,0x16d
c000c743:	85 d2                	test   edx,edx
c000c745:	75 0a                	jne    c000c751 <datetimeToSeconds(datetime_t)+0x106>
c000c747:	83 fb 01             	cmp    ebx,0x1
c000c74a:	19 c0                	sbb    eax,eax
c000c74c:	05 6e 01 00 00       	add    eax,0x16e
c000c751:	29 c1                	sub    ecx,eax
c000c753:	b8 80 51 01 00       	mov    eax,0x15180
c000c758:	f7 e9                	imul   ecx
c000c75a:	03 04 24             	add    eax,DWORD PTR [esp]
c000c75d:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000c761:	83 c4 0c             	add    esp,0xc
c000c764:	5b                   	pop    ebx
c000c765:	5e                   	pop    esi
c000c766:	5f                   	pop    edi
c000c767:	5d                   	pop    ebp
c000c768:	c3                   	ret    
c000c769:	90                   	nop

c000c76a <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000c76a:	57                   	push   edi
c000c76b:	56                   	push   esi
c000c76c:	53                   	push   ebx
c000c76d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c771:	8b 06                	mov    eax,DWORD PTR [esi]
c000c773:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000c776:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c77a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c77e:	e8 c8 fe ff ff       	call   c000c64b <datetimeToSeconds(datetime_t)>
c000c783:	59                   	pop    ecx
c000c784:	0f b6 0d 08 94 02 c0 	movzx  ecx,BYTE PTR ds:0xc0029408
c000c78b:	5b                   	pop    ebx
c000c78c:	03 0d 0c 94 02 c0    	add    ecx,DWORD PTR ds:0xc002940c
c000c792:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c798:	89 cb                	mov    ebx,ecx
c000c79a:	c1 fb 1f             	sar    ebx,0x1f
c000c79d:	29 c8                	sub    eax,ecx
c000c79f:	19 da                	sbb    edx,ebx
c000c7a1:	31 c9                	xor    ecx,ecx
c000c7a3:	80 3d 09 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029409,0x0
c000c7aa:	74 05                	je     c000c7b1 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000c7ac:	b9 08 07 00 00       	mov    ecx,0x708
c000c7b1:	31 db                	xor    ebx,ebx
c000c7b3:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000c7b7:	29 c8                	sub    eax,ecx
c000c7b9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c7bd:	19 da                	sbb    edx,ebx
c000c7bf:	89 f8                	mov    eax,edi
c000c7c1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c7c5:	5b                   	pop    ebx
c000c7c6:	5e                   	pop    esi
c000c7c7:	5f                   	pop    edi
c000c7c8:	ff e0                	jmp    eax

c000c7ca <secondsToDatetime(unsigned long long)>:
c000c7ca:	55                   	push   ebp
c000c7cb:	57                   	push   edi
c000c7cc:	56                   	push   esi
c000c7cd:	53                   	push   ebx
c000c7ce:	83 ec 1c             	sub    esp,0x1c
c000c7d1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000c7d5:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c7d9:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000c7dd:	6a 00                	push   0x0
c000c7df:	68 80 51 01 00       	push   0x15180
c000c7e4:	55                   	push   ebp
c000c7e5:	57                   	push   edi
c000c7e6:	e8 d5 2f 01 00       	call   c001f7c0 <__udivdi3>
c000c7eb:	83 c4 10             	add    esp,0x10
c000c7ee:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000c7f4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c7f8:	6a 00                	push   0x0
c000c7fa:	68 80 51 01 00       	push   0x15180
c000c7ff:	55                   	push   ebp
c000c800:	57                   	push   edi
c000c801:	bf 10 0e 00 00       	mov    edi,0xe10
c000c806:	e8 b5 30 01 00       	call   c001f8c0 <__umoddi3>
c000c80b:	83 c4 10             	add    esp,0x10
c000c80e:	99                   	cdq    
c000c80f:	f7 ff                	idiv   edi
c000c811:	bf 3c 00 00 00       	mov    edi,0x3c
c000c816:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000c819:	89 d0                	mov    eax,edx
c000c81b:	99                   	cdq    
c000c81c:	f7 ff                	idiv   edi
c000c81e:	85 db                	test   ebx,ebx
c000c820:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000c823:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000c826:	79 11                	jns    c000c839 <secondsToDatetime(unsigned long long)+0x6f>
c000c828:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c82c:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000c832:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c837:	eb 07                	jmp    c000c840 <secondsToDatetime(unsigned long long)+0x76>
c000c839:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c83e:	89 d8                	mov    eax,ebx
c000c840:	bf b4 05 00 00       	mov    edi,0x5b4
c000c845:	99                   	cdq    
c000c846:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000c84b:	f7 f9                	idiv   ecx
c000c84d:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000c852:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c856:	31 d2                	xor    edx,edx
c000c858:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000c860:	01 c3                	add    ebx,eax
c000c862:	89 d8                	mov    eax,ebx
c000c864:	f7 f1                	div    ecx
c000c866:	31 d2                	xor    edx,edx
c000c868:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000c86b:	89 d8                	mov    eax,ebx
c000c86d:	f7 f7                	div    edi
c000c86f:	31 d2                	xor    edx,edx
c000c871:	29 c1                	sub    ecx,eax
c000c873:	89 d8                	mov    eax,ebx
c000c875:	f7 f5                	div    ebp
c000c877:	bd 6d 01 00 00       	mov    ebp,0x16d
c000c87c:	29 c1                	sub    ecx,eax
c000c87e:	31 d2                	xor    edx,edx
c000c880:	89 c8                	mov    eax,ecx
c000c882:	f7 f5                	div    ebp
c000c884:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000c889:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c88d:	31 d2                	xor    edx,edx
c000c88f:	89 c8                	mov    eax,ecx
c000c891:	f7 f5                	div    ebp
c000c893:	31 d2                	xor    edx,edx
c000c895:	01 c3                	add    ebx,eax
c000c897:	89 c8                	mov    eax,ecx
c000c899:	f7 f7                	div    edi
c000c89b:	bf 99 00 00 00       	mov    edi,0x99
c000c8a0:	29 c3                	sub    ebx,eax
c000c8a2:	31 d2                	xor    edx,edx
c000c8a4:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000c8ac:	29 c3                	sub    ebx,eax
c000c8ae:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000c8b1:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000c8b4:	bb 05 00 00 00       	mov    ebx,0x5
c000c8b9:	83 c1 02             	add    ecx,0x2
c000c8bc:	89 c8                	mov    eax,ecx
c000c8be:	f7 f7                	div    edi
c000c8c0:	31 d2                	xor    edx,edx
c000c8c2:	89 c7                	mov    edi,eax
c000c8c4:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000c8ca:	83 c0 02             	add    eax,0x2
c000c8cd:	f7 f3                	div    ebx
c000c8cf:	89 eb                	mov    ebx,ebp
c000c8d1:	29 c3                	sub    ebx,eax
c000c8d3:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000c8d9:	88 1e                	mov    BYTE PTR [esi],bl
c000c8db:	19 c0                	sbb    eax,eax
c000c8dd:	31 d2                	xor    edx,edx
c000c8df:	83 e0 0c             	and    eax,0xc
c000c8e2:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000c8e6:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000c8ee:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000c8f2:	83 f9 01             	cmp    ecx,0x1
c000c8f5:	0f 96 c2             	setbe  dl
c000c8f8:	41                   	inc    ecx
c000c8f9:	01 d0                	add    eax,edx
c000c8fb:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000c8fe:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000c902:	83 c4 1c             	add    esp,0x1c
c000c905:	89 f0                	mov    eax,esi
c000c907:	5b                   	pop    ebx
c000c908:	5e                   	pop    esi
c000c909:	5f                   	pop    edi
c000c90a:	5d                   	pop    ebp
c000c90b:	c2 04 00             	ret    0x4

c000c90e <Clock::timeInDatetimeLocal()>:
c000c90e:	53                   	push   ebx
c000c90f:	83 ec 14             	sub    esp,0x14
c000c912:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c916:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c91a:	e8 8b fc ff ff       	call   c000c5aa <Clock::timeInSecondsLocal()>
c000c91f:	83 c4 0c             	add    esp,0xc
c000c922:	52                   	push   edx
c000c923:	50                   	push   eax
c000c924:	53                   	push   ebx
c000c925:	e8 a0 fe ff ff       	call   c000c7ca <secondsToDatetime(unsigned long long)>
c000c92a:	89 d8                	mov    eax,ebx
c000c92c:	83 c4 14             	add    esp,0x14
c000c92f:	5b                   	pop    ebx
c000c930:	c2 04 00             	ret    0x4
c000c933:	90                   	nop

c000c934 <Device::hibernate()>:
c000c934:	c3                   	ret    
c000c935:	90                   	nop

c000c936 <Device::wake()>:
c000c936:	c3                   	ret    
c000c937:	90                   	nop

c000c938 <Device::detect()>:
c000c938:	c3                   	ret    
c000c939:	90                   	nop

c000c93a <Device::disableLegacy()>:
c000c93a:	c3                   	ret    
c000c93b:	90                   	nop

c000c93c <Device::powerSaving(PowerSavingLevel)>:
c000c93c:	c3                   	ret    
c000c93d:	90                   	nop

c000c93e <DriverlessDevice::close(int, int, void*)>:
c000c93e:	31 c0                	xor    eax,eax
c000c940:	c3                   	ret    
c000c941:	90                   	nop

c000c942 <DriverlessDevice::detect()>:
c000c942:	c3                   	ret    
c000c943:	90                   	nop

c000c944 <DriverlessDevice::open(int, int, void*)>:
c000c944:	83 ec 18             	sub    esp,0x18
c000c947:	68 50 1b 02 c0       	push   0xc0021b50
c000c94c:	e8 5e 4d 00 00       	call   c00116af <KePanic(char const*)>
c000c951:	83 c8 ff             	or     eax,0xffffffff
c000c954:	83 c4 1c             	add    esp,0x1c
c000c957:	c3                   	ret    

c000c958 <Device::~Device()>:
c000c958:	ba b0 1b 02 c0       	mov    edx,0xc0021bb0
c000c95d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c961:	89 10                	mov    DWORD PTR [eax],edx
c000c963:	90                   	nop
c000c964:	c3                   	ret    
c000c965:	90                   	nop

c000c966 <Device::~Device()>:
c000c966:	83 ec 0c             	sub    esp,0xc
c000c969:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c96d:	e8 e6 ff ff ff       	call   c000c958 <Device::~Device()>
c000c972:	83 c4 04             	add    esp,0x4
c000c975:	83 ec 08             	sub    esp,0x8
c000c978:	68 58 01 00 00       	push   0x158
c000c97d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c981:	e8 92 de ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000c986:	83 c4 10             	add    esp,0x10
c000c989:	83 c4 0c             	add    esp,0xc
c000c98c:	c3                   	ret    
c000c98d:	90                   	nop

c000c98e <Device::findAndLoadDriver()>:
c000c98e:	c7 44 24 04 6e 1b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021b6e
c000c996:	e9 aa df ff ff       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>
c000c99b:	90                   	nop

c000c99c <Device::preOpenPCI(PCIDeviceInfo)>:
c000c99c:	57                   	push   edi
c000c99d:	b9 09 00 00 00       	mov    ecx,0x9
c000c9a2:	56                   	push   esi
c000c9a3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000c9a7:	8d 74 24 10          	lea    esi,[esp+0x10]
c000c9ab:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000c9b5:	81 c7 18 01 00 00    	add    edi,0x118
c000c9bb:	fc                   	cld    
c000c9bc:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000c9be:	5e                   	pop    esi
c000c9bf:	5f                   	pop    edi
c000c9c0:	c3                   	ret    
c000c9c1:	90                   	nop

c000c9c2 <Device::preOpenACPI(void*, char*, char*)>:
c000c9c2:	57                   	push   edi
c000c9c3:	b9 1e 00 00 00       	mov    ecx,0x1e
c000c9c8:	56                   	push   esi
c000c9c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c9cd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c9d1:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000c9db:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000c9e1:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000c9e7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c9eb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c9ed:	b9 0e 00 00 00       	mov    ecx,0xe
c000c9f2:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000c9f8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000c9fc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c9fe:	5e                   	pop    esi
c000c9ff:	5f                   	pop    edi
c000ca00:	c3                   	ret    
c000ca01:	90                   	nop

c000ca02 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000ca02:	53                   	push   ebx
c000ca03:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ca07:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ca0b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ca0f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ca13:	0f b6 c0             	movzx  eax,al
c000ca16:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000ca1a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ca1e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ca22:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ca26:	5b                   	pop    ebx
c000ca27:	e9 a8 05 00 00       	jmp    c000cfd4 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000ca2c <Device::getParent()>:
c000ca2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ca30:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000ca36:	c3                   	ret    
c000ca37:	90                   	nop

c000ca38 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000ca38:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ca3c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ca40:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000ca45:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ca49:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ca4d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ca51:	e9 e6 06 00 00       	jmp    c000d13c <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000ca56 <Device::addChild(Device*)>:
c000ca56:	53                   	push   ebx
c000ca57:	83 ec 08             	sub    esp,0x8
c000ca5a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ca5e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ca62:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000ca68:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000ca6e:	8b 13                	mov    edx,DWORD PTR [ebx]
c000ca70:	85 d2                	test   edx,edx
c000ca72:	74 04                	je     c000ca78 <Device::addChild(Device*)+0x22>
c000ca74:	89 d3                	mov    ebx,edx
c000ca76:	eb f6                	jmp    c000ca6e <Device::addChild(Device*)+0x18>
c000ca78:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ca7b:	83 ec 0c             	sub    esp,0xc
c000ca7e:	6a 08                	push   0x8
c000ca80:	e8 31 b0 ff ff       	call   c0007ab6 <malloc>
c000ca85:	89 03                	mov    DWORD PTR [ebx],eax
c000ca87:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ca8d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ca94:	83 c4 18             	add    esp,0x18
c000ca97:	5b                   	pop    ebx
c000ca98:	c3                   	ret    
c000ca99:	90                   	nop

c000ca9a <Device::removeAllChildren()>:
c000ca9a:	56                   	push   esi
c000ca9b:	53                   	push   ebx
c000ca9c:	52                   	push   edx
c000ca9d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000caa1:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000caa7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000caaa:	74 17                	je     c000cac3 <Device::removeAllChildren()+0x29>
c000caac:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000caaf:	85 c0                	test   eax,eax
c000cab1:	74 0c                	je     c000cabf <Device::removeAllChildren()+0x25>
c000cab3:	83 ec 0c             	sub    esp,0xc
c000cab6:	8b 10                	mov    edx,DWORD PTR [eax]
c000cab8:	50                   	push   eax
c000cab9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000cabc:	83 c4 10             	add    esp,0x10
c000cabf:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cac1:	eb e4                	jmp    c000caa7 <Device::removeAllChildren()+0xd>
c000cac3:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000cac9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000cacf:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000cad5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000cadc:	58                   	pop    eax
c000cadd:	5b                   	pop    ebx
c000cade:	5e                   	pop    esi
c000cadf:	c3                   	ret    

c000cae0 <Device::hibernateAll()>:
c000cae0:	53                   	push   ebx
c000cae1:	83 ec 14             	sub    esp,0x14
c000cae4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000cae8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000caea:	53                   	push   ebx
c000caeb:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000caee:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000caf4:	83 c4 10             	add    esp,0x10
c000caf7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cafa:	74 0f                	je     c000cb0b <Device::hibernateAll()+0x2b>
c000cafc:	83 ec 0c             	sub    esp,0xc
c000caff:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cb02:	e8 d9 ff ff ff       	call   c000cae0 <Device::hibernateAll()>
c000cb07:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cb09:	eb e9                	jmp    c000caf4 <Device::hibernateAll()+0x14>
c000cb0b:	83 c4 08             	add    esp,0x8
c000cb0e:	5b                   	pop    ebx
c000cb0f:	c3                   	ret    

c000cb10 <Device::wakeAll()>:
c000cb10:	53                   	push   ebx
c000cb11:	83 ec 14             	sub    esp,0x14
c000cb14:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000cb18:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cb1a:	53                   	push   ebx
c000cb1b:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000cb1e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cb24:	83 c4 10             	add    esp,0x10
c000cb27:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cb2a:	74 0f                	je     c000cb3b <Device::wakeAll()+0x2b>
c000cb2c:	83 ec 0c             	sub    esp,0xc
c000cb2f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cb32:	e8 d9 ff ff ff       	call   c000cb10 <Device::wakeAll()>
c000cb37:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cb39:	eb e9                	jmp    c000cb24 <Device::wakeAll()+0x14>
c000cb3b:	83 c4 08             	add    esp,0x8
c000cb3e:	5b                   	pop    ebx
c000cb3f:	c3                   	ret    

c000cb40 <Device::detectAll()>:
c000cb40:	53                   	push   ebx
c000cb41:	83 ec 14             	sub    esp,0x14
c000cb44:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000cb48:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cb4a:	53                   	push   ebx
c000cb4b:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000cb4e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cb54:	83 c4 10             	add    esp,0x10
c000cb57:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cb5a:	74 0f                	je     c000cb6b <Device::detectAll()+0x2b>
c000cb5c:	83 ec 0c             	sub    esp,0xc
c000cb5f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cb62:	e8 d9 ff ff ff       	call   c000cb40 <Device::detectAll()>
c000cb67:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cb69:	eb e9                	jmp    c000cb54 <Device::detectAll()+0x14>
c000cb6b:	83 c4 08             	add    esp,0x8
c000cb6e:	5b                   	pop    ebx
c000cb6f:	c3                   	ret    

c000cb70 <Device::disableLegacyAll()>:
c000cb70:	c3                   	ret    
c000cb71:	90                   	nop

c000cb72 <Device::loadDriversForAll()>:
c000cb72:	c3                   	ret    
c000cb73:	90                   	nop

c000cb74 <Device::closeAll()>:
c000cb74:	53                   	push   ebx
c000cb75:	83 ec 08             	sub    esp,0x8
c000cb78:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cb7c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cb7e:	6a 00                	push   0x0
c000cb80:	6a 00                	push   0x0
c000cb82:	6a 00                	push   0x0
c000cb84:	53                   	push   ebx
c000cb85:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000cb88:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cb8e:	83 c4 10             	add    esp,0x10
c000cb91:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cb94:	74 0f                	je     c000cba5 <Device::closeAll()+0x31>
c000cb96:	83 ec 0c             	sub    esp,0xc
c000cb99:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cb9c:	e8 d3 ff ff ff       	call   c000cb74 <Device::closeAll()>
c000cba1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cba3:	eb e9                	jmp    c000cb8e <Device::closeAll()+0x1a>
c000cba5:	83 c4 08             	add    esp,0x8
c000cba8:	5b                   	pop    ebx
c000cba9:	c3                   	ret    

c000cbaa <Device::powerSavingAll(PowerSavingLevel)>:
c000cbaa:	56                   	push   esi
c000cbab:	53                   	push   ebx
c000cbac:	83 ec 0c             	sub    esp,0xc
c000cbaf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cbb3:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000cbb7:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cbb9:	56                   	push   esi
c000cbba:	53                   	push   ebx
c000cbbb:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000cbbe:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cbc4:	83 c4 10             	add    esp,0x10
c000cbc7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cbca:	74 0f                	je     c000cbdb <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000cbcc:	52                   	push   edx
c000cbcd:	52                   	push   edx
c000cbce:	56                   	push   esi
c000cbcf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cbd2:	e8 d3 ff ff ff       	call   c000cbaa <Device::powerSavingAll(PowerSavingLevel)>
c000cbd7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cbd9:	eb e9                	jmp    c000cbc4 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000cbdb:	58                   	pop    eax
c000cbdc:	5b                   	pop    ebx
c000cbdd:	5e                   	pop    esi
c000cbde:	c3                   	ret    
c000cbdf:	90                   	nop

c000cbe0 <Device::setName(char const*)>:
c000cbe0:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000cbe8:	e9 53 3a ff ff       	jmp    c0000640 <strcpy>
c000cbed:	90                   	nop

c000cbee <Device::Device(char const*)>:
c000cbee:	83 ec 1c             	sub    esp,0x1c
c000cbf1:	ba b0 1b 02 c0       	mov    edx,0xc0021bb0
c000cbf6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbfa:	89 10                	mov    DWORD PTR [eax],edx
c000cbfc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc00:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000cc0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc0e:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000cc18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc1c:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000cc26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc2a:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000cc34:	83 ec 08             	sub    esp,0x8
c000cc37:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc3b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc3f:	e8 9c ff ff ff       	call   c000cbe0 <Device::setName(char const*)>
c000cc44:	83 c4 10             	add    esp,0x10
c000cc47:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000cc4f:	83 ec 0c             	sub    esp,0xc
c000cc52:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cc56:	e8 5b ae ff ff       	call   c0007ab6 <malloc>
c000cc5b:	83 c4 10             	add    esp,0x10
c000cc5e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000cc64:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000cc6b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000cc6f:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000cc75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc79:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000cc7f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000cc85:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc89:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000cc8f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000cc96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc9a:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000cca1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cca5:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000ccac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ccb0:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000ccba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ccbe:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000ccc8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cccc:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000ccd6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ccda:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000cce4:	90                   	nop
c000cce5:	83 c4 1c             	add    esp,0x1c
c000cce8:	c3                   	ret    
c000cce9:	90                   	nop

c000ccea <Device::getName()>:
c000ccea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ccee:	05 d0 00 00 00       	add    eax,0xd0
c000ccf3:	c3                   	ret    

c000ccf4 <DriverlessDevice::DriverlessDevice(char const*)>:
c000ccf4:	83 ec 0c             	sub    esp,0xc
c000ccf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccfb:	83 ec 08             	sub    esp,0x8
c000ccfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd02:	50                   	push   eax
c000cd03:	e8 e6 fe ff ff       	call   c000cbee <Device::Device(char const*)>
c000cd08:	83 c4 10             	add    esp,0x10
c000cd0b:	ba dc 1b 02 c0       	mov    edx,0xc0021bdc
c000cd10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd14:	89 10                	mov    DWORD PTR [eax],edx
c000cd16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd1a:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000cd24:	90                   	nop
c000cd25:	83 c4 0c             	add    esp,0xc
c000cd28:	c3                   	ret    
c000cd29:	90                   	nop

c000cd2a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000cd2a:	57                   	push   edi
c000cd2b:	56                   	push   esi
c000cd2c:	53                   	push   ebx
c000cd2d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cd31:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000cd35:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cd39:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000cd3f:	75 0c                	jne    c000cd4d <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000cd41:	52                   	push   edx
c000cd42:	52                   	push   edx
c000cd43:	53                   	push   ebx
c000cd44:	56                   	push   esi
c000cd45:	e8 28 2f 01 00       	call   c001fc72 <LinkedList<Device>::addElement(Device*)>
c000cd4a:	83 c4 10             	add    esp,0x10
c000cd4d:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cd53:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cd56:	74 12                	je     c000cd6a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000cd58:	50                   	push   eax
c000cd59:	57                   	push   edi
c000cd5a:	56                   	push   esi
c000cd5b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cd5e:	e8 c7 ff ff ff       	call   c000cd2a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000cd63:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cd65:	83 c4 10             	add    esp,0x10
c000cd68:	eb e9                	jmp    c000cd53 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000cd6a:	5b                   	pop    ebx
c000cd6b:	5e                   	pop    esi
c000cd6c:	5f                   	pop    edi
c000cd6d:	c3                   	ret    

c000cd6e <getDevicesOfType(DeviceType)>:
c000cd6e:	53                   	push   ebx
c000cd6f:	83 ec 14             	sub    esp,0x14
c000cd72:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000cd76:	53                   	push   ebx
c000cd77:	e8 d2 2f 01 00       	call   c001fd4e <LinkedList<Device>::LinkedList()>
c000cd7c:	83 c4 0c             	add    esp,0xc
c000cd7f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cd83:	53                   	push   ebx
c000cd84:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c000cd8a:	e8 9b ff ff ff       	call   c000cd2a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000cd8f:	89 d8                	mov    eax,ebx
c000cd91:	83 c4 18             	add    esp,0x18
c000cd94:	5b                   	pop    ebx
c000cd95:	c2 04 00             	ret    0x4

c000cd98 <HardDiskController::HardDiskController(char const*)>:
c000cd98:	83 ec 0c             	sub    esp,0xc
c000cd9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd9f:	83 ec 08             	sub    esp,0x8
c000cda2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cda6:	50                   	push   eax
c000cda7:	e8 42 fe ff ff       	call   c000cbee <Device::Device(char const*)>
c000cdac:	83 c4 10             	add    esp,0x10
c000cdaf:	ba 08 1c 02 c0       	mov    edx,0xc0021c08
c000cdb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdb8:	89 10                	mov    DWORD PTR [eax],edx
c000cdba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdbe:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000cdc8:	90                   	nop
c000cdc9:	83 c4 0c             	add    esp,0xc
c000cdcc:	c3                   	ret    
c000cdcd:	90                   	nop
c000cdce:	66 90                	xchg   ax,ax

c000cdd0 <HardDiskController::~HardDiskController()>:
c000cdd0:	83 ec 0c             	sub    esp,0xc
c000cdd3:	ba 08 1c 02 c0       	mov    edx,0xc0021c08
c000cdd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cddc:	89 10                	mov    DWORD PTR [eax],edx
c000cdde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cde2:	83 ec 0c             	sub    esp,0xc
c000cde5:	50                   	push   eax
c000cde6:	e8 6d fb ff ff       	call   c000c958 <Device::~Device()>
c000cdeb:	83 c4 10             	add    esp,0x10
c000cdee:	90                   	nop
c000cdef:	83 c4 0c             	add    esp,0xc
c000cdf2:	c3                   	ret    
c000cdf3:	90                   	nop

c000cdf4 <HardDiskController::~HardDiskController()>:
c000cdf4:	83 ec 0c             	sub    esp,0xc
c000cdf7:	83 ec 0c             	sub    esp,0xc
c000cdfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdfe:	e8 cd ff ff ff       	call   c000cdd0 <HardDiskController::~HardDiskController()>
c000ce03:	83 c4 10             	add    esp,0x10
c000ce06:	83 ec 08             	sub    esp,0x8
c000ce09:	68 58 01 00 00       	push   0x158
c000ce0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce12:	e8 01 da ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000ce17:	83 c4 10             	add    esp,0x10
c000ce1a:	83 c4 0c             	add    esp,0xc
c000ce1d:	c3                   	ret    

c000ce1e <PhysicalDisk::eject()>:
c000ce1e:	83 c8 ff             	or     eax,0xffffffff
c000ce21:	c3                   	ret    

c000ce22 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000ce22:	83 ec 0c             	sub    esp,0xc
c000ce25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce29:	83 ec 08             	sub    esp,0x8
c000ce2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce30:	50                   	push   eax
c000ce31:	e8 b8 fd ff ff       	call   c000cbee <Device::Device(char const*)>
c000ce36:	83 c4 10             	add    esp,0x10
c000ce39:	ba 34 1c 02 c0       	mov    edx,0xc0021c34
c000ce3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce42:	89 10                	mov    DWORD PTR [eax],edx
c000ce44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce48:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000ce4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce53:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000ce5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce5e:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000ce68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce6c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ce70:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000ce76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce7a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000ce84:	90                   	nop
c000ce85:	83 c4 0c             	add    esp,0xc
c000ce88:	c3                   	ret    
c000ce89:	90                   	nop

c000ce8a <PhysicalDisk::startCache()>:
c000ce8a:	56                   	push   esi
c000ce8b:	53                   	push   ebx
c000ce8c:	83 ec 10             	sub    esp,0x10
c000ce8f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ce93:	6a 44                	push   0x44
c000ce95:	e8 1c ac ff ff       	call   c0007ab6 <malloc>
c000ce9a:	89 c6                	mov    esi,eax
c000ce9c:	58                   	pop    eax
c000ce9d:	5a                   	pop    edx
c000ce9e:	53                   	push   ebx
c000ce9f:	56                   	push   esi
c000cea0:	e8 7b 17 00 00       	call   c000e620 <VCache::VCache(PhysicalDisk*)>
c000cea5:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000ceab:	83 c4 14             	add    esp,0x14
c000ceae:	5b                   	pop    ebx
c000ceaf:	5e                   	pop    esi
c000ceb0:	c3                   	ret    
c000ceb1:	90                   	nop

c000ceb2 <PhysicalDisk::~PhysicalDisk()>:
c000ceb2:	83 ec 0c             	sub    esp,0xc
c000ceb5:	ba 34 1c 02 c0       	mov    edx,0xc0021c34
c000ceba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cebe:	89 10                	mov    DWORD PTR [eax],edx
c000cec0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cec4:	83 ec 0c             	sub    esp,0xc
c000cec7:	50                   	push   eax
c000cec8:	e8 8b fa ff ff       	call   c000c958 <Device::~Device()>
c000cecd:	83 c4 10             	add    esp,0x10
c000ced0:	90                   	nop
c000ced1:	83 c4 0c             	add    esp,0xc
c000ced4:	c3                   	ret    
c000ced5:	90                   	nop

c000ced6 <PhysicalDisk::~PhysicalDisk()>:
c000ced6:	83 ec 0c             	sub    esp,0xc
c000ced9:	83 ec 0c             	sub    esp,0xc
c000cedc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cee0:	e8 cd ff ff ff       	call   c000ceb2 <PhysicalDisk::~PhysicalDisk()>
c000cee5:	83 c4 10             	add    esp,0x10
c000cee8:	83 ec 08             	sub    esp,0x8
c000ceeb:	68 6c 01 00 00       	push   0x16c
c000cef0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cef4:	e8 1f d9 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000cef9:	83 c4 10             	add    esp,0x10
c000cefc:	83 c4 0c             	add    esp,0xc
c000ceff:	c3                   	ret    

c000cf00 <int_handler>:
c000cf00:	55                   	push   ebp
c000cf01:	57                   	push   edi
c000cf02:	56                   	push   esi
c000cf03:	53                   	push   ebx
c000cf04:	83 ec 0c             	sub    esp,0xc
c000cf07:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000cf0b:	80 3d 88 be 02 c0 00 	cmp    BYTE PTR ds:0xc002be88,0x0
c000cf12:	74 0b                	je     c000cf1f <int_handler+0x1f>
c000cf14:	fa                   	cli    
c000cf15:	f4                   	hlt    
c000cf16:	80 3d 88 be 02 c0 00 	cmp    BYTE PTR ds:0xc002be88,0x0
c000cf1d:	75 f5                	jne    c000cf14 <int_handler+0x14>
c000cf1f:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000cf22:	8d 46 e0             	lea    eax,[esi-0x20]
c000cf25:	83 f8 17             	cmp    eax,0x17
c000cf28:	76 40                	jbe    c000cf6a <int_handler+0x6a>
c000cf2a:	c1 e6 04             	shl    esi,0x4
c000cf2d:	31 db                	xor    ebx,ebx
c000cf2f:	8d ae 20 a4 02 c0    	lea    ebp,[esi-0x3ffd5be0]
c000cf35:	81 c6 20 94 02 c0    	add    esi,0xc0029420
c000cf3b:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000cf3f:	85 c0                	test   eax,eax
c000cf41:	74 13                	je     c000cf56 <int_handler+0x56>
c000cf43:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000cf46:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000cf4a:	74 2c                	je     c000cf78 <int_handler+0x78>
c000cf4c:	83 ec 08             	sub    esp,0x8
c000cf4f:	52                   	push   edx
c000cf50:	57                   	push   edi
c000cf51:	ff d0                	call   eax
c000cf53:	83 c4 10             	add    esp,0x10
c000cf56:	83 c3 01             	add    ebx,0x1
c000cf59:	83 fb 04             	cmp    ebx,0x4
c000cf5c:	75 dd                	jne    c000cf3b <int_handler+0x3b>
c000cf5e:	83 c4 0c             	add    esp,0xc
c000cf61:	31 c0                	xor    eax,eax
c000cf63:	5b                   	pop    ebx
c000cf64:	31 d2                	xor    edx,edx
c000cf66:	5e                   	pop    esi
c000cf67:	5f                   	pop    edi
c000cf68:	5d                   	pop    ebp
c000cf69:	c3                   	ret    
c000cf6a:	83 ec 0c             	sub    esp,0xc
c000cf6d:	50                   	push   eax
c000cf6e:	e8 a5 b4 00 00       	call   c0018418 <HalEndOfInterrupt(int)>
c000cf73:	83 c4 10             	add    esp,0x10
c000cf76:	eb b2                	jmp    c000cf2a <int_handler+0x2a>
c000cf78:	83 ec 08             	sub    esp,0x8
c000cf7b:	52                   	push   edx
c000cf7c:	57                   	push   edi
c000cf7d:	ff d0                	call   eax
c000cf7f:	83 c4 10             	add    esp,0x10
c000cf82:	83 c4 0c             	add    esp,0xc
c000cf85:	5b                   	pop    ebx
c000cf86:	5e                   	pop    esi
c000cf87:	5f                   	pop    edi
c000cf88:	5d                   	pop    ebp
c000cf89:	c3                   	ret    

c000cf8a <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000cf8a:	56                   	push   esi
c000cf8b:	31 c0                	xor    eax,eax
c000cf8d:	53                   	push   ebx
c000cf8e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cf92:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cf96:	89 ca                	mov    edx,ecx
c000cf98:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cf9c:	c1 e2 04             	shl    edx,0x4
c000cf9f:	83 bc 82 20 a4 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd5be0],0x0
c000cfa7:	74 17                	je     c000cfc0 <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c000cfa9:	83 c0 01             	add    eax,0x1
c000cfac:	83 f8 04             	cmp    eax,0x4
c000cfaf:	75 ee                	jne    c000cf9f <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000cfb1:	c7 44 24 0c 64 1c 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021c64
c000cfb9:	5b                   	pop    ebx
c000cfba:	5e                   	pop    esi
c000cfbb:	e9 ef 46 00 00       	jmp    c00116af <KePanic(char const*)>
c000cfc0:	8d 04 88             	lea    eax,[eax+ecx*4]
c000cfc3:	89 1c 85 20 a4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5be0],ebx
c000cfca:	89 34 85 20 94 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6be0],esi
c000cfd1:	5b                   	pop    ebx
c000cfd2:	5e                   	pop    esi
c000cfd3:	c3                   	ret    

c000cfd4 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000cfd4:	57                   	push   edi
c000cfd5:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c000cfdb:	56                   	push   esi
c000cfdc:	53                   	push   ebx
c000cfdd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cfe1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cfe5:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000cfec:	74 54                	je     c000d042 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6e>
c000cfee:	89 c7                	mov    edi,eax
c000cff0:	84 c0                	test   al,al
c000cff2:	74 1d                	je     c000d011 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c000cff4:	83 fe 0f             	cmp    esi,0xf
c000cff7:	0f 8f d5 00 00 00    	jg     c000d0d2 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xfe>
c000cffd:	0f b6 b6 68 37 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdc898]
c000d004:	0f b7 bc 36 c0 bb 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd4440]
c000d00c:	d1 ef                	shr    edi,1
c000d00e:	83 e7 01             	and    edi,0x1
c000d011:	83 ec 08             	sub    esp,0x8
c000d014:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c000d019:	31 db                	xor    ebx,ebx
c000d01b:	50                   	push   eax
c000d01c:	68 71 1c 02 c0       	push   0xc0021c71
c000d021:	e8 1f d9 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000d026:	83 c4 10             	add    esp,0x10
c000d029:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c000d02e:	85 c0                	test   eax,eax
c000d030:	7f 55                	jg     c000d087 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c000d032:	83 ec 0c             	sub    esp,0xc
c000d035:	68 88 1c 02 c0       	push   0xc0021c88
c000d03a:	e8 70 46 00 00       	call   c00116af <KePanic(char const*)>
c000d03f:	83 c4 10             	add    esp,0x10
c000d042:	8d 7e 20             	lea    edi,[esi+0x20]
c000d045:	89 f8                	mov    eax,edi
c000d047:	31 d2                	xor    edx,edx
c000d049:	c1 e0 04             	shl    eax,0x4
c000d04c:	8b 8c 90 20 a4 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd5be0]
c000d053:	85 c9                	test   ecx,ecx
c000d055:	0f 84 8e 00 00 00    	je     c000d0e9 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x115>
c000d05b:	83 c2 01             	add    edx,0x1
c000d05e:	83 fa 04             	cmp    edx,0x4
c000d061:	75 e9                	jne    c000d04c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000d063:	83 ec 0c             	sub    esp,0xc
c000d066:	68 dc 1c 02 c0       	push   0xc0021cdc
c000d06b:	e8 3f 46 00 00       	call   c00116af <KePanic(char const*)>
c000d070:	83 c4 10             	add    esp,0x10
c000d073:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d078:	5b                   	pop    ebx
c000d079:	5e                   	pop    esi
c000d07a:	5f                   	pop    edi
c000d07b:	c3                   	ret    
c000d07c:	83 c3 01             	add    ebx,0x1
c000d07f:	39 1d c0 d0 02 c0    	cmp    DWORD PTR ds:0xc002d0c0,ebx
c000d085:	7e ab                	jle    c000d032 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5e>
c000d087:	83 ec 08             	sub    esp,0x8
c000d08a:	8b 04 9d e0 d0 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd2f20]
c000d091:	56                   	push   esi
c000d092:	50                   	push   eax
c000d093:	e8 0a 1b 01 00       	call   c001eba2 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000d098:	83 c4 10             	add    esp,0x10
c000d09b:	84 c0                	test   al,al
c000d09d:	74 dd                	je     c000d07c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa8>
c000d09f:	83 ec 04             	sub    esp,0x4
c000d0a2:	89 f8                	mov    eax,edi
c000d0a4:	8b 1c 9d e0 d0 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd2f20]
c000d0ab:	0f b6 f8             	movzx  edi,al
c000d0ae:	57                   	push   edi
c000d0af:	8d 7e 20             	lea    edi,[esi+0x20]
c000d0b2:	6a 00                	push   0x0
c000d0b4:	89 f8                	mov    eax,edi
c000d0b6:	0f b6 c0             	movzx  eax,al
c000d0b9:	50                   	push   eax
c000d0ba:	89 f0                	mov    eax,esi
c000d0bc:	6a 00                	push   0x0
c000d0be:	0f b6 c0             	movzx  eax,al
c000d0c1:	6a 00                	push   0x0
c000d0c3:	50                   	push   eax
c000d0c4:	53                   	push   ebx
c000d0c5:	e8 44 1c 01 00       	call   c001ed0e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000d0ca:	83 c4 20             	add    esp,0x20
c000d0cd:	e9 73 ff ff ff       	jmp    c000d045 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x71>
c000d0d2:	83 ec 0c             	sub    esp,0xc
c000d0d5:	31 ff                	xor    edi,edi
c000d0d7:	68 a4 1c 02 c0       	push   0xc0021ca4
c000d0dc:	e8 ce 45 00 00       	call   c00116af <KePanic(char const*)>
c000d0e1:	83 c4 10             	add    esp,0x10
c000d0e4:	e9 28 ff ff ff       	jmp    c000d011 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c000d0e9:	8d 04 ba             	lea    eax,[edx+edi*4]
c000d0ec:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d0f0:	89 14 85 20 a4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5be0],edx
c000d0f7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d0fb:	5b                   	pop    ebx
c000d0fc:	89 14 85 20 94 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6be0],edx
c000d103:	89 f0                	mov    eax,esi
c000d105:	5e                   	pop    esi
c000d106:	5f                   	pop    edi
c000d107:	c3                   	ret    

c000d108 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000d108:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d10c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d110:	c1 e0 04             	shl    eax,0x4
c000d113:	8d 50 10             	lea    edx,[eax+0x10]
c000d116:	39 88 20 a4 02 c0    	cmp    DWORD PTR [eax-0x3ffd5be0],ecx
c000d11c:	74 08                	je     c000d126 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000d11e:	83 c0 04             	add    eax,0x4
c000d121:	39 d0                	cmp    eax,edx
c000d123:	75 f1                	jne    c000d116 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000d125:	c3                   	ret    
c000d126:	c7 80 20 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be0],0x0
c000d130:	c7 80 20 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be0],0x0
c000d13a:	eb e2                	jmp    c000d11e <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000d13c <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000d13c:	53                   	push   ebx
c000d13d:	83 ec 08             	sub    esp,0x8
c000d140:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d144:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000d149:	74 0e                	je     c000d159 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000d14b:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000d150:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000d157:	75 37                	jne    c000d190 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000d159:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d15d:	83 c0 20             	add    eax,0x20
c000d160:	c1 e0 04             	shl    eax,0x4
c000d163:	8d 50 10             	lea    edx,[eax+0x10]
c000d166:	39 98 20 a4 02 c0    	cmp    DWORD PTR [eax-0x3ffd5be0],ebx
c000d16c:	74 0c                	je     c000d17a <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000d16e:	83 c0 04             	add    eax,0x4
c000d171:	39 d0                	cmp    eax,edx
c000d173:	75 f1                	jne    c000d166 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000d175:	83 c4 08             	add    esp,0x8
c000d178:	5b                   	pop    ebx
c000d179:	c3                   	ret    
c000d17a:	c7 80 20 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be0],0x0
c000d184:	c7 80 20 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be0],0x0
c000d18e:	eb de                	jmp    c000d16e <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000d190:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000d195:	7f 11                	jg     c000d1a8 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6c>
c000d197:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d19b:	0f b6 80 68 37 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdc898]
c000d1a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d1a6:	eb b1                	jmp    c000d159 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000d1a8:	83 ec 0c             	sub    esp,0xc
c000d1ab:	68 95 1c 02 c0       	push   0xc0021c95
c000d1b0:	e8 fa 44 00 00       	call   c00116af <KePanic(char const*)>
c000d1b5:	83 c4 10             	add    esp,0x10
c000d1b8:	eb 9f                	jmp    c000d159 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000d1ba <setupINTS()>:
c000d1ba:	31 c0                	xor    eax,eax
c000d1bc:	c7 80 20 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be0],0x0
c000d1c6:	c7 80 20 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be0],0x0
c000d1d0:	c7 80 24 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5bdc],0x0
c000d1da:	c7 80 24 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6bdc],0x0
c000d1e4:	c7 80 28 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5bd8],0x0
c000d1ee:	c7 80 28 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6bd8],0x0
c000d1f8:	c7 80 2c a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5bd4],0x0
c000d202:	c7 80 2c 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6bd4],0x0
c000d20c:	83 c0 10             	add    eax,0x10
c000d20f:	3d 00 10 00 00       	cmp    eax,0x1000
c000d214:	75 a6                	jne    c000d1bc <setupINTS()+0x2>
c000d216:	c3                   	ret    

c000d217 <convertLegacyIRQNumber(int)>:
c000d217:	83 ec 0c             	sub    esp,0xc
c000d21a:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c000d220:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d224:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000d22b:	74 0c                	je     c000d239 <convertLegacyIRQNumber(int)+0x22>
c000d22d:	83 f8 0f             	cmp    eax,0xf
c000d230:	7f 0b                	jg     c000d23d <convertLegacyIRQNumber(int)+0x26>
c000d232:	0f b6 80 68 37 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdc898]
c000d239:	83 c4 0c             	add    esp,0xc
c000d23c:	c3                   	ret    
c000d23d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d241:	83 ec 0c             	sub    esp,0xc
c000d244:	68 a4 1c 02 c0       	push   0xc0021ca4
c000d249:	e8 61 44 00 00       	call   c00116af <KePanic(char const*)>
c000d24e:	83 c4 10             	add    esp,0x10
c000d251:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d255:	83 c4 0c             	add    esp,0xc
c000d258:	c3                   	ret    
c000d259:	90                   	nop

c000d25a <startGUI(void*)>:
c000d25a:	55                   	push   ebp
c000d25b:	89 e5                	mov    ebp,esp
c000d25d:	53                   	push   ebx
c000d25e:	83 ec 04             	sub    esp,0x4
c000d261:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d266:	83 e8 01             	sub    eax,0x1
c000d269:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d26e:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d273:	85 c0                	test   eax,eax
c000d275:	75 01                	jne    c000d278 <startGUI(void*)+0x1e>
c000d277:	fb                   	sti    
c000d278:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d27e:	83 ec 08             	sub    esp,0x8
c000d281:	6a 01                	push   0x1
c000d283:	68 01 1d 02 c0       	push   0xc0021d01
c000d288:	e8 62 84 00 00       	call   c00156ef <Thr::loadDLL(char const*, bool)>
c000d28d:	83 c4 10             	add    esp,0x10
c000d290:	83 ec 08             	sub    esp,0x8
c000d293:	53                   	push   ebx
c000d294:	50                   	push   eax
c000d295:	e8 86 86 00 00       	call   c0015920 <Thr::executeDLL(unsigned long, void*)>
c000d29a:	83 c4 10             	add    esp,0x10
c000d29d:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d2a3:	83 ec 08             	sub    esp,0x8
c000d2a6:	6a 01                	push   0x1
c000d2a8:	68 1b 1d 02 c0       	push   0xc0021d1b
c000d2ad:	e8 3d 84 00 00       	call   c00156ef <Thr::loadDLL(char const*, bool)>
c000d2b2:	83 c4 10             	add    esp,0x10
c000d2b5:	83 ec 08             	sub    esp,0x8
c000d2b8:	53                   	push   ebx
c000d2b9:	50                   	push   eax
c000d2ba:	e8 61 86 00 00       	call   c0015920 <Thr::executeDLL(unsigned long, void*)>
c000d2bf:	83 c4 10             	add    esp,0x10
c000d2c2:	90                   	nop
c000d2c3:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d2c6:	c9                   	leave  
c000d2c7:	c3                   	ret    

c000d2c8 <startGUIVESA(void*)>:
c000d2c8:	55                   	push   ebp
c000d2c9:	89 e5                	mov    ebp,esp
c000d2cb:	53                   	push   ebx
c000d2cc:	83 ec 04             	sub    esp,0x4
c000d2cf:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d2d4:	83 e8 01             	sub    eax,0x1
c000d2d7:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d2dc:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d2e1:	85 c0                	test   eax,eax
c000d2e3:	75 01                	jne    c000d2e6 <startGUIVESA(void*)+0x1e>
c000d2e5:	fb                   	sti    
c000d2e6:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d2ec:	83 ec 08             	sub    esp,0x8
c000d2ef:	6a 01                	push   0x1
c000d2f1:	68 39 1d 02 c0       	push   0xc0021d39
c000d2f6:	e8 f4 83 00 00       	call   c00156ef <Thr::loadDLL(char const*, bool)>
c000d2fb:	83 c4 10             	add    esp,0x10
c000d2fe:	83 ec 08             	sub    esp,0x8
c000d301:	53                   	push   ebx
c000d302:	50                   	push   eax
c000d303:	e8 18 86 00 00       	call   c0015920 <Thr::executeDLL(unsigned long, void*)>
c000d308:	83 c4 10             	add    esp,0x10
c000d30b:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d311:	83 ec 08             	sub    esp,0x8
c000d314:	6a 01                	push   0x1
c000d316:	68 1b 1d 02 c0       	push   0xc0021d1b
c000d31b:	e8 cf 83 00 00       	call   c00156ef <Thr::loadDLL(char const*, bool)>
c000d320:	83 c4 10             	add    esp,0x10
c000d323:	83 ec 08             	sub    esp,0x8
c000d326:	53                   	push   ebx
c000d327:	50                   	push   eax
c000d328:	e8 f3 85 00 00       	call   c0015920 <Thr::executeDLL(unsigned long, void*)>
c000d32d:	83 c4 10             	add    esp,0x10
c000d330:	90                   	nop
c000d331:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d334:	c9                   	leave  
c000d335:	c3                   	ret    

c000d336 <sendKeyToTerminal(unsigned char)>:
c000d336:	55                   	push   ebp
c000d337:	89 e5                	mov    ebp,esp
c000d339:	83 ec 28             	sub    esp,0x28
c000d33c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d33f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000d342:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c000d347:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000d34b:	83 ec 08             	sub    esp,0x8
c000d34e:	52                   	push   edx
c000d34f:	50                   	push   eax
c000d350:	e8 61 ba ff ff       	call   c0008db6 <VgaText::receiveKey(unsigned char)>
c000d355:	83 c4 10             	add    esp,0x10
c000d358:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d35c:	83 f8 0a             	cmp    eax,0xa
c000d35f:	74 16                	je     c000d377 <sendKeyToTerminal(unsigned char)+0x41>
c000d361:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d365:	83 f8 03             	cmp    eax,0x3
c000d368:	74 0d                	je     c000d377 <sendKeyToTerminal(unsigned char)+0x41>
c000d36a:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d36e:	83 f8 1c             	cmp    eax,0x1c
c000d371:	0f 85 97 00 00 00    	jne    c000d40e <sendKeyToTerminal(unsigned char)+0xd8>
c000d377:	fa                   	cli    
c000d378:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d37d:	83 c0 01             	add    eax,0x1
c000d380:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d385:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000d38a:	83 c0 01             	add    eax,0x1
c000d38d:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c000d392:	a1 20 b4 02 c0       	mov    eax,ds:0xc002b420
c000d397:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d39a:	c7 05 20 b4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b420,0x0
c000d3a4:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000d3a8:	74 1f                	je     c000d3c9 <sendKeyToTerminal(unsigned char)+0x93>
c000d3aa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d3ad:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000d3b0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000d3b3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000d3b6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d3b9:	83 ec 0c             	sub    esp,0xc
c000d3bc:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000d3bf:	e8 a4 92 00 00       	call   c0016668 <unblockTask(ThreadControlBlock*)>
c000d3c4:	83 c4 10             	add    esp,0x10
c000d3c7:	eb db                	jmp    c000d3a4 <sendKeyToTerminal(unsigned char)+0x6e>
c000d3c9:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000d3ce:	83 e8 01             	sub    eax,0x1
c000d3d1:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c000d3d6:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000d3db:	85 c0                	test   eax,eax
c000d3dd:	75 18                	jne    c000d3f7 <sendKeyToTerminal(unsigned char)+0xc1>
c000d3df:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c000d3e4:	85 c0                	test   eax,eax
c000d3e6:	74 0f                	je     c000d3f7 <sendKeyToTerminal(unsigned char)+0xc1>
c000d3e8:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c000d3f2:	e8 59 8d 00 00       	call   c0016150 <schedule()>
c000d3f7:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d3fc:	83 e8 01             	sub    eax,0x1
c000d3ff:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d404:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d409:	85 c0                	test   eax,eax
c000d40b:	75 01                	jne    c000d40e <sendKeyToTerminal(unsigned char)+0xd8>
c000d40d:	fb                   	sti    
c000d40e:	90                   	nop
c000d40f:	c9                   	leave  
c000d410:	c3                   	ret    

c000d411 <sendKeyboardToken(KeyboardToken)>:
c000d411:	55                   	push   ebp
c000d412:	89 e5                	mov    ebp,esp
c000d414:	83 ec 18             	sub    esp,0x18
c000d417:	e8 e3 42 00 00       	call   c00116ff <KeUserIOReceived()>
c000d41c:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000d41f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d422:	0f b7 c0             	movzx  eax,ax
c000d425:	83 f2 01             	xor    edx,0x1
c000d428:	88 90 40 b4 02 c0    	mov    BYTE PTR [eax-0x3ffd4bc0],dl
c000d42e:	a1 28 b4 02 c0       	mov    eax,ds:0xc002b428
c000d433:	85 c0                	test   eax,eax
c000d435:	74 24                	je     c000d45b <sendKeyboardToken(KeyboardToken)+0x4a>
c000d437:	8b 0d 28 b4 02 c0    	mov    ecx,DWORD PTR ds:0xc002b428
c000d43d:	83 ec 04             	sub    esp,0x4
c000d440:	68 40 b4 02 c0       	push   0xc002b440
c000d445:	83 ec 08             	sub    esp,0x8
c000d448:	89 e2                	mov    edx,esp
c000d44a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d44d:	89 02                	mov    DWORD PTR [edx],eax
c000d44f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000d452:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000d456:	ff d1                	call   ecx
c000d458:	83 c4 10             	add    esp,0x10
c000d45b:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000d45f:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000d462:	a0 48 b8 02 c0       	mov    al,ds:0xc002b848
c000d467:	0f b6 d2             	movzx  edx,dl
c000d46a:	0f b6 c0             	movzx  eax,al
c000d46d:	39 c2                	cmp    edx,eax
c000d46f:	74 1c                	je     c000d48d <sendKeyboardToken(KeyboardToken)+0x7c>
c000d471:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000d474:	a2 48 b8 02 c0       	mov    ds:0xc002b848,al
c000d479:	a0 48 b8 02 c0       	mov    al,ds:0xc002b848
c000d47e:	0f b6 c0             	movzx  eax,al
c000d481:	83 ec 0c             	sub    esp,0xc
c000d484:	50                   	push   eax
c000d485:	e8 78 b0 ff ff       	call   c0008502 <setTerminalScrollLock(bool)>
c000d48a:	83 c4 10             	add    esp,0x10
c000d48d:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000d490:	0f b6 c0             	movzx  eax,al
c000d493:	85 c0                	test   eax,eax
c000d495:	0f 84 da 00 00 00    	je     c000d575 <sendKeyboardToken(KeyboardToken)+0x164>
c000d49b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d49e:	0f b7 c0             	movzx  eax,ax
c000d4a1:	3d 18 03 00 00       	cmp    eax,0x318
c000d4a6:	75 06                	jne    c000d4ae <sendKeyboardToken(KeyboardToken)+0x9d>
c000d4a8:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000d4ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4b1:	0f b7 c0             	movzx  eax,ax
c000d4b4:	3d 19 03 00 00       	cmp    eax,0x319
c000d4b9:	75 06                	jne    c000d4c1 <sendKeyboardToken(KeyboardToken)+0xb0>
c000d4bb:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000d4c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4c4:	0f b7 c0             	movzx  eax,ax
c000d4c7:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d4cc:	75 06                	jne    c000d4d4 <sendKeyboardToken(KeyboardToken)+0xc3>
c000d4ce:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000d4d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4d7:	0f b7 c0             	movzx  eax,ax
c000d4da:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d4df:	75 06                	jne    c000d4e7 <sendKeyboardToken(KeyboardToken)+0xd6>
c000d4e1:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000d4e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4ea:	0f b7 c0             	movzx  eax,ax
c000d4ed:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d4f2:	75 06                	jne    c000d4fa <sendKeyboardToken(KeyboardToken)+0xe9>
c000d4f4:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000d4fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4fd:	0f b7 c0             	movzx  eax,ax
c000d500:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d505:	75 06                	jne    c000d50d <sendKeyboardToken(KeyboardToken)+0xfc>
c000d507:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d50d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d510:	0f b7 c0             	movzx  eax,ax
c000d513:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d518:	75 06                	jne    c000d520 <sendKeyboardToken(KeyboardToken)+0x10f>
c000d51a:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000d520:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d523:	0f b7 c0             	movzx  eax,ax
c000d526:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d52b:	75 06                	jne    c000d533 <sendKeyboardToken(KeyboardToken)+0x122>
c000d52d:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000d533:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d536:	0f b7 c0             	movzx  eax,ax
c000d539:	3d 20 03 00 00       	cmp    eax,0x320
c000d53e:	75 06                	jne    c000d546 <sendKeyboardToken(KeyboardToken)+0x135>
c000d540:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000d546:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d549:	0f b7 c0             	movzx  eax,ax
c000d54c:	3d 21 03 00 00       	cmp    eax,0x321
c000d551:	75 06                	jne    c000d559 <sendKeyboardToken(KeyboardToken)+0x148>
c000d553:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000d559:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d55c:	0f b7 c0             	movzx  eax,ax
c000d55f:	3d 22 03 00 00       	cmp    eax,0x322
c000d564:	0f 85 f1 00 00 00    	jne    c000d65b <sendKeyboardToken(KeyboardToken)+0x24a>
c000d56a:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000d570:	e9 e6 00 00 00       	jmp    c000d65b <sendKeyboardToken(KeyboardToken)+0x24a>
c000d575:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d578:	0f b7 c0             	movzx  eax,ax
c000d57b:	3d 18 03 00 00       	cmp    eax,0x318
c000d580:	75 0a                	jne    c000d58c <sendKeyboardToken(KeyboardToken)+0x17b>
c000d582:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000d588:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d58c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d58f:	0f b7 c0             	movzx  eax,ax
c000d592:	3d 19 03 00 00       	cmp    eax,0x319
c000d597:	75 0a                	jne    c000d5a3 <sendKeyboardToken(KeyboardToken)+0x192>
c000d599:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000d59f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d5a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5a6:	0f b7 c0             	movzx  eax,ax
c000d5a9:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d5ae:	75 0a                	jne    c000d5ba <sendKeyboardToken(KeyboardToken)+0x1a9>
c000d5b0:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000d5b6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d5ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5bd:	0f b7 c0             	movzx  eax,ax
c000d5c0:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d5c5:	75 0a                	jne    c000d5d1 <sendKeyboardToken(KeyboardToken)+0x1c0>
c000d5c7:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000d5cd:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d5d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5d4:	0f b7 c0             	movzx  eax,ax
c000d5d7:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d5dc:	75 0a                	jne    c000d5e8 <sendKeyboardToken(KeyboardToken)+0x1d7>
c000d5de:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000d5e4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d5e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5eb:	0f b7 c0             	movzx  eax,ax
c000d5ee:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d5f3:	75 0a                	jne    c000d5ff <sendKeyboardToken(KeyboardToken)+0x1ee>
c000d5f5:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d5fb:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d5ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d602:	0f b7 c0             	movzx  eax,ax
c000d605:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d60a:	75 0a                	jne    c000d616 <sendKeyboardToken(KeyboardToken)+0x205>
c000d60c:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000d612:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d616:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d619:	0f b7 c0             	movzx  eax,ax
c000d61c:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d621:	75 0a                	jne    c000d62d <sendKeyboardToken(KeyboardToken)+0x21c>
c000d623:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000d629:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d62d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d630:	0f b7 c0             	movzx  eax,ax
c000d633:	3d 20 03 00 00       	cmp    eax,0x320
c000d638:	75 0a                	jne    c000d644 <sendKeyboardToken(KeyboardToken)+0x233>
c000d63a:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000d640:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d644:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d647:	0f b7 c0             	movzx  eax,ax
c000d64a:	3d 21 03 00 00       	cmp    eax,0x321
c000d64f:	75 0a                	jne    c000d65b <sendKeyboardToken(KeyboardToken)+0x24a>
c000d651:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000d657:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d65b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d65e:	0f b7 c0             	movzx  eax,ax
c000d661:	3d 00 02 00 00       	cmp    eax,0x200
c000d666:	75 2f                	jne    c000d697 <sendKeyboardToken(KeyboardToken)+0x286>
c000d668:	a0 40 b8 02 c0       	mov    al,ds:0xc002b840
c000d66d:	83 f0 01             	xor    eax,0x1
c000d670:	0f b6 c0             	movzx  eax,al
c000d673:	85 c0                	test   eax,eax
c000d675:	74 20                	je     c000d697 <sendKeyboardToken(KeyboardToken)+0x286>
c000d677:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000d67c:	6a 01                	push   0x1
c000d67e:	6a 00                	push   0x0
c000d680:	68 5a d2 00 c0       	push   0xc000d25a
c000d685:	50                   	push   eax
c000d686:	e8 75 88 00 00       	call   c0015f00 <Process::createThread(void (*)(void*), void*, int)>
c000d68b:	83 c4 10             	add    esp,0x10
c000d68e:	c6 05 40 b8 02 c0 01 	mov    BYTE PTR ds:0xc002b840,0x1
c000d695:	eb 3a                	jmp    c000d6d1 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d697:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d69a:	0f b7 c0             	movzx  eax,ax
c000d69d:	3d 01 02 00 00       	cmp    eax,0x201
c000d6a2:	75 2d                	jne    c000d6d1 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d6a4:	a0 40 b8 02 c0       	mov    al,ds:0xc002b840
c000d6a9:	83 f0 01             	xor    eax,0x1
c000d6ac:	0f b6 c0             	movzx  eax,al
c000d6af:	85 c0                	test   eax,eax
c000d6b1:	74 1e                	je     c000d6d1 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d6b3:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000d6b8:	6a 01                	push   0x1
c000d6ba:	6a 00                	push   0x0
c000d6bc:	68 c8 d2 00 c0       	push   0xc000d2c8
c000d6c1:	50                   	push   eax
c000d6c2:	e8 39 88 00 00       	call   c0015f00 <Process::createThread(void (*)(void*), void*, int)>
c000d6c7:	83 c4 10             	add    esp,0x10
c000d6ca:	c6 05 40 b8 02 c0 01 	mov    BYTE PTR ds:0xc002b840,0x1
c000d6d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6d4:	0f b7 c0             	movzx  eax,ax
c000d6d7:	3d 25 03 00 00       	cmp    eax,0x325
c000d6dc:	75 06                	jne    c000d6e4 <sendKeyboardToken(KeyboardToken)+0x2d3>
c000d6de:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000d6e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6e7:	0f b7 c0             	movzx  eax,ax
c000d6ea:	3d 24 03 00 00       	cmp    eax,0x324
c000d6ef:	75 06                	jne    c000d6f7 <sendKeyboardToken(KeyboardToken)+0x2e6>
c000d6f1:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000d6f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6fa:	0f b7 c0             	movzx  eax,ax
c000d6fd:	3d 23 03 00 00       	cmp    eax,0x323
c000d702:	75 06                	jne    c000d70a <sendKeyboardToken(KeyboardToken)+0x2f9>
c000d704:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000d70a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d70d:	0f b7 c0             	movzx  eax,ax
c000d710:	3d 26 03 00 00       	cmp    eax,0x326
c000d715:	75 06                	jne    c000d71d <sendKeyboardToken(KeyboardToken)+0x30c>
c000d717:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000d71d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d720:	0f b7 c0             	movzx  eax,ax
c000d723:	3d 27 03 00 00       	cmp    eax,0x327
c000d728:	75 06                	jne    c000d730 <sendKeyboardToken(KeyboardToken)+0x31f>
c000d72a:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000d730:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d733:	0f b7 c0             	movzx  eax,ax
c000d736:	3d 22 03 00 00       	cmp    eax,0x322
c000d73b:	75 06                	jne    c000d743 <sendKeyboardToken(KeyboardToken)+0x332>
c000d73d:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000d743:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000d747:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d74a:	83 f0 01             	xor    eax,0x1
c000d74d:	0f b6 c0             	movzx  eax,al
c000d750:	85 c0                	test   eax,eax
c000d752:	74 7c                	je     c000d7d0 <sendKeyboardToken(KeyboardToken)+0x3bf>
c000d754:	a0 41 b5 02 c0       	mov    al,ds:0xc002b541
c000d759:	0f b6 c0             	movzx  eax,al
c000d75c:	85 c0                	test   eax,eax
c000d75e:	74 43                	je     c000d7a3 <sendKeyboardToken(KeyboardToken)+0x392>
c000d760:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d764:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000d768:	85 c0                	test   eax,eax
c000d76a:	74 2b                	je     c000d797 <sendKeyboardToken(KeyboardToken)+0x386>
c000d76c:	8b 15 44 b8 02 c0    	mov    edx,DWORD PTR ds:0xc002b844
c000d772:	89 d0                	mov    eax,edx
c000d774:	c1 e0 02             	shl    eax,0x2
c000d777:	01 d0                	add    eax,edx
c000d779:	01 c0                	add    eax,eax
c000d77b:	a3 44 b8 02 c0       	mov    ds:0xc002b844,eax
c000d780:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d783:	0f b7 c0             	movzx  eax,ax
c000d786:	8d 50 d0             	lea    edx,[eax-0x30]
c000d789:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d78e:	01 d0                	add    eax,edx
c000d790:	a3 44 b8 02 c0       	mov    ds:0xc002b844,eax
c000d795:	eb 71                	jmp    c000d808 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d797:	c7 05 44 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b844,0x0
c000d7a1:	eb 65                	jmp    c000d808 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d7a3:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d7a8:	85 c0                	test   eax,eax
c000d7aa:	74 18                	je     c000d7c4 <sendKeyboardToken(KeyboardToken)+0x3b3>
c000d7ac:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d7b1:	0f b6 c0             	movzx  eax,al
c000d7b4:	83 ec 0c             	sub    esp,0xc
c000d7b7:	50                   	push   eax
c000d7b8:	e8 79 fb ff ff       	call   c000d336 <sendKeyToTerminal(unsigned char)>
c000d7bd:	83 c4 10             	add    esp,0x10
c000d7c0:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d7c4:	c7 05 44 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b844,0x0
c000d7ce:	eb 38                	jmp    c000d808 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d7d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7d3:	0f b7 c0             	movzx  eax,ax
c000d7d6:	3d 01 01 00 00       	cmp    eax,0x101
c000d7db:	75 2b                	jne    c000d808 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d7dd:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d7e2:	85 c0                	test   eax,eax
c000d7e4:	74 18                	je     c000d7fe <sendKeyboardToken(KeyboardToken)+0x3ed>
c000d7e6:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d7eb:	0f b6 c0             	movzx  eax,al
c000d7ee:	83 ec 0c             	sub    esp,0xc
c000d7f1:	50                   	push   eax
c000d7f2:	e8 3f fb ff ff       	call   c000d336 <sendKeyToTerminal(unsigned char)>
c000d7f7:	83 c4 10             	add    esp,0x10
c000d7fa:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d7fe:	c7 05 44 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b844,0x0
c000d808:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d80b:	83 f0 01             	xor    eax,0x1
c000d80e:	0f b6 c0             	movzx  eax,al
c000d811:	85 c0                	test   eax,eax
c000d813:	74 5a                	je     c000d86f <sendKeyboardToken(KeyboardToken)+0x45e>
c000d815:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d818:	83 f0 01             	xor    eax,0x1
c000d81b:	0f b6 c0             	movzx  eax,al
c000d81e:	85 c0                	test   eax,eax
c000d820:	74 4d                	je     c000d86f <sendKeyboardToken(KeyboardToken)+0x45e>
c000d822:	a0 40 b5 02 c0       	mov    al,ds:0xc002b540
c000d827:	83 f0 01             	xor    eax,0x1
c000d82a:	0f b6 c0             	movzx  eax,al
c000d82d:	85 c0                	test   eax,eax
c000d82f:	74 3e                	je     c000d86f <sendKeyboardToken(KeyboardToken)+0x45e>
c000d831:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d834:	0f b7 c0             	movzx  eax,ax
c000d837:	83 f8 1f             	cmp    eax,0x1f
c000d83a:	76 0b                	jbe    c000d847 <sendKeyboardToken(KeyboardToken)+0x436>
c000d83c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d83f:	0f b7 c0             	movzx  eax,ax
c000d842:	83 f8 7e             	cmp    eax,0x7e
c000d845:	76 16                	jbe    c000d85d <sendKeyboardToken(KeyboardToken)+0x44c>
c000d847:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d84a:	0f b7 c0             	movzx  eax,ax
c000d84d:	83 f8 0a             	cmp    eax,0xa
c000d850:	74 0b                	je     c000d85d <sendKeyboardToken(KeyboardToken)+0x44c>
c000d852:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d855:	0f b7 c0             	movzx  eax,ax
c000d858:	83 f8 08             	cmp    eax,0x8
c000d85b:	75 12                	jne    c000d86f <sendKeyboardToken(KeyboardToken)+0x45e>
c000d85d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d860:	0f b6 c0             	movzx  eax,al
c000d863:	83 ec 0c             	sub    esp,0xc
c000d866:	50                   	push   eax
c000d867:	e8 ca fa ff ff       	call   c000d336 <sendKeyToTerminal(unsigned char)>
c000d86c:	83 c4 10             	add    esp,0x10
c000d86f:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d872:	83 f0 01             	xor    eax,0x1
c000d875:	0f b6 c0             	movzx  eax,al
c000d878:	85 c0                	test   eax,eax
c000d87a:	74 5d                	je     c000d8d9 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d87c:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d87f:	83 f0 01             	xor    eax,0x1
c000d882:	0f b6 c0             	movzx  eax,al
c000d885:	85 c0                	test   eax,eax
c000d887:	74 50                	je     c000d8d9 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d889:	a0 40 b5 02 c0       	mov    al,ds:0xc002b540
c000d88e:	0f b6 c0             	movzx  eax,al
c000d891:	85 c0                	test   eax,eax
c000d893:	74 44                	je     c000d8d9 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d895:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d898:	0f b7 c0             	movzx  eax,ax
c000d89b:	83 f8 3f             	cmp    eax,0x3f
c000d89e:	76 39                	jbe    c000d8d9 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d8a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d8a3:	0f b7 c0             	movzx  eax,ax
c000d8a6:	83 f8 7f             	cmp    eax,0x7f
c000d8a9:	77 2e                	ja     c000d8d9 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d8ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d8ae:	88 c2                	mov    dl,al
c000d8b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d8b3:	0f b7 c0             	movzx  eax,ax
c000d8b6:	83 f8 5f             	cmp    eax,0x5f
c000d8b9:	76 04                	jbe    c000d8bf <sendKeyboardToken(KeyboardToken)+0x4ae>
c000d8bb:	b0 20                	mov    al,0x20
c000d8bd:	eb 02                	jmp    c000d8c1 <sendKeyboardToken(KeyboardToken)+0x4b0>
c000d8bf:	b0 00                	mov    al,0x0
c000d8c1:	89 d1                	mov    ecx,edx
c000d8c3:	29 c1                	sub    ecx,eax
c000d8c5:	89 c8                	mov    eax,ecx
c000d8c7:	83 e8 40             	sub    eax,0x40
c000d8ca:	0f b6 c0             	movzx  eax,al
c000d8cd:	83 ec 0c             	sub    esp,0xc
c000d8d0:	50                   	push   eax
c000d8d1:	e8 60 fa ff ff       	call   c000d336 <sendKeyToTerminal(unsigned char)>
c000d8d6:	83 c4 10             	add    esp,0x10
c000d8d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d8dc:	0f b7 c0             	movzx  eax,ax
c000d8df:	3d 00 03 00 00       	cmp    eax,0x300
c000d8e4:	75 12                	jne    c000d8f8 <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d8e6:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d8e9:	83 f0 01             	xor    eax,0x1
c000d8ec:	0f b6 c0             	movzx  eax,al
c000d8ef:	85 c0                	test   eax,eax
c000d8f1:	74 05                	je     c000d8f8 <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d8f3:	e8 0b ac ff ff       	call   c0008503 <doTerminalCycle()>
c000d8f8:	90                   	nop
c000d8f9:	c9                   	leave  
c000d8fa:	c3                   	ret    

c000d8fb <clearInternalKeybuffer(VgaText*)>:
c000d8fb:	55                   	push   ebp
c000d8fc:	89 e5                	mov    ebp,esp
c000d8fe:	83 ec 08             	sub    esp,0x8
c000d901:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d904:	05 02 01 00 00       	add    eax,0x102
c000d909:	83 ec 0c             	sub    esp,0xc
c000d90c:	50                   	push   eax
c000d90d:	e8 5e 2c ff ff       	call   c0000570 <strlen>
c000d912:	83 c4 10             	add    esp,0x10
c000d915:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d918:	81 c2 02 01 00 00    	add    edx,0x102
c000d91e:	83 ec 04             	sub    esp,0x4
c000d921:	50                   	push   eax
c000d922:	6a 00                	push   0x0
c000d924:	52                   	push   edx
c000d925:	e8 c6 2b ff ff       	call   c00004f0 <memset>
c000d92a:	83 c4 10             	add    esp,0x10
c000d92d:	90                   	nop
c000d92e:	c9                   	leave  
c000d92f:	c3                   	ret    

c000d930 <readKeyboard(VgaText*, char*, unsigned long)>:
c000d930:	55                   	push   ebp
c000d931:	89 e5                	mov    ebp,esp
c000d933:	83 ec 18             	sub    esp,0x18
c000d936:	a1 28 b4 02 c0       	mov    eax,ds:0xc002b428
c000d93b:	85 c0                	test   eax,eax
c000d93d:	74 2a                	je     c000d969 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000d93f:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000d945:	8b 0d 28 b4 02 c0    	mov    ecx,DWORD PTR ds:0xc002b428
c000d94b:	83 ec 04             	sub    esp,0x4
c000d94e:	68 40 b4 02 c0       	push   0xc002b440
c000d953:	83 ec 08             	sub    esp,0x8
c000d956:	89 e2                	mov    edx,esp
c000d958:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000d95b:	89 02                	mov    DWORD PTR [edx],eax
c000d95d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000d960:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000d964:	ff d1                	call   ecx
c000d966:	83 c4 10             	add    esp,0x10
c000d969:	fb                   	sti    
c000d96a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000d971:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000d975:	0f 84 0d 01 00 00    	je     c000da88 <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c000d97b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d97e:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d984:	0f be c0             	movsx  eax,al
c000d987:	85 c0                	test   eax,eax
c000d989:	75 2c                	jne    c000d9b7 <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c000d98b:	fa                   	cli    
c000d98c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d991:	83 c0 01             	add    eax,0x1
c000d994:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d999:	e8 b2 87 00 00       	call   c0016150 <schedule()>
c000d99e:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d9a3:	83 e8 01             	sub    eax,0x1
c000d9a6:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d9ab:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d9b0:	85 c0                	test   eax,eax
c000d9b2:	75 c7                	jne    c000d97b <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d9b4:	fb                   	sti    
c000d9b5:	eb c4                	jmp    c000d97b <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d9b7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000d9ba:	8d 50 01             	lea    edx,[eax+0x1]
c000d9bd:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d9c0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d9c3:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000d9c9:	88 10                	mov    BYTE PTR [eax],dl
c000d9cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d9ce:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d9d4:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000d9d7:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d9db:	83 f8 03             	cmp    eax,0x3
c000d9de:	75 1e                	jne    c000d9fe <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c000d9e0:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d9e5:	8b 00                	mov    eax,DWORD PTR [eax]
c000d9e7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d9ea:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d9f0:	83 ec 08             	sub    esp,0x8
c000d9f3:	6a 02                	push   0x2
c000d9f5:	50                   	push   eax
c000d9f6:	e8 57 41 00 00       	call   c0011b52 <KeRaiseSignal(SigHandlerBlock*, int)>
c000d9fb:	83 c4 10             	add    esp,0x10
c000d9fe:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000da02:	83 f8 1c             	cmp    eax,0x1c
c000da05:	75 1e                	jne    c000da25 <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c000da07:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000da0c:	8b 00                	mov    eax,DWORD PTR [eax]
c000da0e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000da11:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000da17:	83 ec 08             	sub    esp,0x8
c000da1a:	6a 09                	push   0x9
c000da1c:	50                   	push   eax
c000da1d:	e8 30 41 00 00       	call   c0011b52 <KeRaiseSignal(SigHandlerBlock*, int)>
c000da22:	83 c4 10             	add    esp,0x10
c000da25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000da28:	05 02 01 00 00       	add    eax,0x102
c000da2d:	83 ec 0c             	sub    esp,0xc
c000da30:	50                   	push   eax
c000da31:	e8 3a 2b ff ff       	call   c0000570 <strlen>
c000da36:	83 c4 10             	add    esp,0x10
c000da39:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000da3c:	81 c2 02 01 00 00    	add    edx,0x102
c000da42:	8d 4a 01             	lea    ecx,[edx+0x1]
c000da45:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000da48:	81 c2 02 01 00 00    	add    edx,0x102
c000da4e:	83 ec 04             	sub    esp,0x4
c000da51:	50                   	push   eax
c000da52:	51                   	push   ecx
c000da53:	52                   	push   edx
c000da54:	e8 77 29 ff ff       	call   c00003d0 <memmove>
c000da59:	83 c4 10             	add    esp,0x10
c000da5c:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000da60:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000da64:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000da68:	83 f8 0a             	cmp    eax,0xa
c000da6b:	74 16                	je     c000da83 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000da6d:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000da71:	83 f8 03             	cmp    eax,0x3
c000da74:	74 0d                	je     c000da83 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000da76:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000da7a:	83 f8 1c             	cmp    eax,0x1c
c000da7d:	0f 85 ee fe ff ff    	jne    c000d971 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000da83:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000da86:	eb 03                	jmp    c000da8b <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c000da88:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000da8b:	c9                   	leave  
c000da8c:	c3                   	ret    
c000da8d:	90                   	nop

c000da8e <Keyboard::Keyboard(char const*)>:
c000da8e:	83 ec 0c             	sub    esp,0xc
c000da91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da95:	83 ec 08             	sub    esp,0x8
c000da98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da9c:	50                   	push   eax
c000da9d:	e8 4c f1 ff ff       	call   c000cbee <Device::Device(char const*)>
c000daa2:	83 c4 10             	add    esp,0x10
c000daa5:	ba 5c 1d 02 c0       	mov    edx,0xc0021d5c
c000daaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000daae:	89 10                	mov    DWORD PTR [eax],edx
c000dab0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dab4:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000dabe:	c6 05 24 b4 02 c0 01 	mov    BYTE PTR ds:0xc002b424,0x1
c000dac5:	90                   	nop
c000dac6:	83 c4 0c             	add    esp,0xc
c000dac9:	c3                   	ret    

c000daca <Keyboard::~Keyboard()>:
c000daca:	83 ec 0c             	sub    esp,0xc
c000dacd:	ba 5c 1d 02 c0       	mov    edx,0xc0021d5c
c000dad2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dad6:	89 10                	mov    DWORD PTR [eax],edx
c000dad8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dadc:	83 ec 0c             	sub    esp,0xc
c000dadf:	50                   	push   eax
c000dae0:	e8 73 ee ff ff       	call   c000c958 <Device::~Device()>
c000dae5:	83 c4 10             	add    esp,0x10
c000dae8:	90                   	nop
c000dae9:	83 c4 0c             	add    esp,0xc
c000daec:	c3                   	ret    
c000daed:	90                   	nop

c000daee <Keyboard::~Keyboard()>:
c000daee:	83 ec 0c             	sub    esp,0xc
c000daf1:	83 ec 0c             	sub    esp,0xc
c000daf4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000daf8:	e8 cd ff ff ff       	call   c000daca <Keyboard::~Keyboard()>
c000dafd:	83 c4 10             	add    esp,0x10
c000db00:	83 ec 08             	sub    esp,0x8
c000db03:	68 5c 01 00 00       	push   0x15c
c000db08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db0c:	e8 07 cd ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000db11:	83 c4 10             	add    esp,0x10
c000db14:	83 c4 0c             	add    esp,0xc
c000db17:	c3                   	ret    

c000db18 <LogicalDisk::close(int, int, void*)>:
c000db18:	83 c8 ff             	or     eax,0xffffffff
c000db1b:	c3                   	ret    

c000db1c <LogicalDisk::~LogicalDisk()>:
c000db1c:	83 ec 0c             	sub    esp,0xc
c000db1f:	ba d4 1d 02 c0       	mov    edx,0xc0021dd4
c000db24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db28:	89 10                	mov    DWORD PTR [eax],edx
c000db2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db2e:	83 ec 0c             	sub    esp,0xc
c000db31:	50                   	push   eax
c000db32:	e8 21 ee ff ff       	call   c000c958 <Device::~Device()>
c000db37:	83 c4 10             	add    esp,0x10
c000db3a:	90                   	nop
c000db3b:	83 c4 0c             	add    esp,0xc
c000db3e:	c3                   	ret    
c000db3f:	90                   	nop

c000db40 <LogicalDisk::~LogicalDisk()>:
c000db40:	83 ec 0c             	sub    esp,0xc
c000db43:	83 ec 0c             	sub    esp,0xc
c000db46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db4a:	e8 cd ff ff ff       	call   c000db1c <LogicalDisk::~LogicalDisk()>
c000db4f:	83 c4 10             	add    esp,0x10
c000db52:	83 ec 08             	sub    esp,0x8
c000db55:	68 78 01 00 00       	push   0x178
c000db5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db5e:	e8 b5 cc ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000db63:	83 c4 10             	add    esp,0x10
c000db66:	83 c4 0c             	add    esp,0xc
c000db69:	c3                   	ret    

c000db6a <LogicalDisk::open(int, int, void*)>:
c000db6a:	83 ec 18             	sub    esp,0x18
c000db6d:	68 88 1d 02 c0       	push   0xc0021d88
c000db72:	e8 38 3b 00 00       	call   c00116af <KePanic(char const*)>
c000db77:	83 c8 ff             	or     eax,0xffffffff
c000db7a:	83 c4 1c             	add    esp,0x1c
c000db7d:	c3                   	ret    

c000db7e <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000db7e:	53                   	push   ebx
c000db7f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000db83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000db87:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000db8b:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000db91:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000db97:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000db9d:	77 10                	ja     c000dbaf <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000db9f:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000dba5:	89 d3                	mov    ebx,edx
c000dba7:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000dbad:	72 05                	jb     c000dbb4 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000dbaf:	83 c8 ff             	or     eax,0xffffffff
c000dbb2:	89 c2                	mov    edx,eax
c000dbb4:	5b                   	pop    ebx
c000dbb5:	c3                   	ret    

c000dbb6 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000dbb6:	56                   	push   esi
c000dbb7:	83 c8 ff             	or     eax,0xffffffff
c000dbba:	53                   	push   ebx
c000dbbb:	89 c2                	mov    edx,eax
c000dbbd:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000dbc1:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000dbc5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000dbc9:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000dbcf:	77 27                	ja     c000dbf8 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000dbd1:	89 d8                	mov    eax,ebx
c000dbd3:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000dbd9:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000dbdf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000dbe4:	89 c2                	mov    edx,eax
c000dbe6:	73 10                	jae    c000dbf8 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000dbe8:	89 c8                	mov    eax,ecx
c000dbea:	89 da                	mov    edx,ebx
c000dbec:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000dbf2:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000dbf8:	5b                   	pop    ebx
c000dbf9:	5e                   	pop    esi
c000dbfa:	c3                   	ret    
c000dbfb:	90                   	nop

c000dbfc <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000dbfc:	83 ec 1c             	sub    esp,0x1c
c000dbff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000dc03:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dc0b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc0f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dc13:	89 04 24             	mov    DWORD PTR [esp],eax
c000dc16:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000dc1a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dc1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc22:	83 ec 08             	sub    esp,0x8
c000dc25:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dc29:	50                   	push   eax
c000dc2a:	e8 bf ef ff ff       	call   c000cbee <Device::Device(char const*)>
c000dc2f:	83 c4 10             	add    esp,0x10
c000dc32:	ba d4 1d 02 c0       	mov    edx,0xc0021dd4
c000dc37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc3b:	89 10                	mov    DWORD PTR [eax],edx
c000dc3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc41:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000dc48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc4c:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000dc53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc57:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000dc5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc62:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000dc6c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000dc70:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dc74:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000dc78:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000dc7e:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000dc84:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000dc88:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000dc8b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc8f:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000dc95:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000dc9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc9f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000dca3:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000dca9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dcad:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000dcb7:	90                   	nop
c000dcb8:	83 c4 1c             	add    esp,0x1c
c000dcbb:	c3                   	ret    

c000dcbc <LogicalDisk::assignDriveLetter()>:
c000dcbc:	55                   	push   ebp
c000dcbd:	57                   	push   edi
c000dcbe:	56                   	push   esi
c000dcbf:	53                   	push   ebx
c000dcc0:	83 ec 14             	sub    esp,0x14
c000dcc3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000dcc7:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000dccd:	b0 41                	mov    al,0x41
c000dccf:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000dcd5:	84 d2                	test   dl,dl
c000dcd7:	75 02                	jne    c000dcdb <LogicalDisk::assignDriveLetter()+0x1f>
c000dcd9:	b0 43                	mov    al,0x43
c000dcdb:	8b 3d 60 b8 02 c0    	mov    edi,DWORD PTR ds:0xc002b860
c000dce1:	0f b6 ca             	movzx  ecx,dl
c000dce4:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000dce8:	0f be e8             	movsx  ebp,al
c000dceb:	8b 3d 64 b8 02 c0    	mov    edi,DWORD PTR ds:0xc002b864
c000dcf1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000dcf5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000dcf9:	3c 43                	cmp    al,0x43
c000dcfb:	75 10                	jne    c000dd0d <LogicalDisk::assignDriveLetter()+0x51>
c000dcfd:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000dd04:	75 5a                	jne    c000dd60 <LogicalDisk::assignDriveLetter()+0xa4>
c000dd06:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000dd0b:	75 53                	jne    c000dd60 <LogicalDisk::assignDriveLetter()+0xa4>
c000dd0d:	8d 75 bf             	lea    esi,[ebp-0x41]
c000dd10:	ba 01 00 00 00       	mov    edx,0x1
c000dd15:	89 34 24             	mov    DWORD PTR [esp],esi
c000dd18:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000dd1b:	d3 e2                	shl    edx,cl
c000dd1d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000dd21:	89 d7                	mov    edi,edx
c000dd23:	89 d6                	mov    esi,edx
c000dd25:	c1 ff 1f             	sar    edi,0x1f
c000dd28:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000dd2c:	21 f9                	and    ecx,edi
c000dd2e:	09 d1                	or     ecx,edx
c000dd30:	75 2e                	jne    c000dd60 <LogicalDisk::assignDriveLetter()+0xa4>
c000dd32:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000dd36:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dd3a:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000dd40:	09 f2                	or     edx,esi
c000dd42:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000dd45:	89 15 60 b8 02 c0    	mov    DWORD PTR ds:0xc002b860,edx
c000dd4b:	89 1c b5 80 b8 02 c0 	mov    DWORD PTR [esi*4-0x3ffd4780],ebx
c000dd52:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000dd56:	09 fa                	or     edx,edi
c000dd58:	89 15 64 b8 02 c0    	mov    DWORD PTR ds:0xc002b864,edx
c000dd5e:	eb 0d                	jmp    c000dd6d <LogicalDisk::assignDriveLetter()+0xb1>
c000dd60:	8d 50 01             	lea    edx,[eax+0x1]
c000dd63:	45                   	inc    ebp
c000dd64:	88 d0                	mov    al,dl
c000dd66:	80 fa 5b             	cmp    dl,0x5b
c000dd69:	75 8e                	jne    c000dcf9 <LogicalDisk::assignDriveLetter()+0x3d>
c000dd6b:	31 c0                	xor    eax,eax
c000dd6d:	83 c4 14             	add    esp,0x14
c000dd70:	5b                   	pop    ebx
c000dd71:	5e                   	pop    esi
c000dd72:	5f                   	pop    edi
c000dd73:	5d                   	pop    ebp
c000dd74:	c3                   	ret    
c000dd75:	90                   	nop

c000dd76 <LogicalDisk::mount()>:
c000dd76:	56                   	push   esi
c000dd77:	53                   	push   ebx
c000dd78:	53                   	push   ebx
c000dd79:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dd7d:	8b 1d 04 94 02 c0    	mov    ebx,DWORD PTR ds:0xc0029404
c000dd83:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000dd8d:	85 db                	test   ebx,ebx
c000dd8f:	74 27                	je     c000ddb8 <LogicalDisk::mount()+0x42>
c000dd91:	51                   	push   ecx
c000dd92:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000dd99:	8b 13                	mov    edx,DWORD PTR [ebx]
c000dd9b:	83 e8 41             	sub    eax,0x41
c000dd9e:	50                   	push   eax
c000dd9f:	56                   	push   esi
c000dda0:	53                   	push   ebx
c000dda1:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000dda4:	83 c4 10             	add    esp,0x10
c000dda7:	84 c0                	test   al,al
c000dda9:	74 08                	je     c000ddb3 <LogicalDisk::mount()+0x3d>
c000ddab:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000ddb1:	eb 07                	jmp    c000ddba <LogicalDisk::mount()+0x44>
c000ddb3:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000ddb6:	eb d5                	jmp    c000dd8d <LogicalDisk::mount()+0x17>
c000ddb8:	31 c0                	xor    eax,eax
c000ddba:	5a                   	pop    edx
c000ddbb:	5b                   	pop    ebx
c000ddbc:	5e                   	pop    esi
c000ddbd:	c3                   	ret    

c000ddbe <LogicalDisk::unmount()>:
c000ddbe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ddc2:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000ddcc:	c3                   	ret    
c000ddcd:	90                   	nop

c000ddce <LogicalDisk::eject()>:
c000ddce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ddd2:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000ddd8:	8b 10                	mov    edx,DWORD PTR [eax]
c000ddda:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ddde:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000dde1:	90                   	nop

c000dde2 <LogicalDisk::unassignDriveLetter()>:
c000dde2:	57                   	push   edi
c000dde3:	56                   	push   esi
c000dde4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000dde8:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000ddef:	85 c9                	test   ecx,ecx
c000ddf1:	75 0f                	jne    c000de02 <LogicalDisk::unassignDriveLetter()+0x20>
c000ddf3:	c7 44 24 0c ac 1d 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021dac
c000ddfb:	5e                   	pop    esi
c000ddfc:	5f                   	pop    edi
c000ddfd:	e9 ad 38 00 00       	jmp    c00116af <KePanic(char const*)>
c000de02:	83 e9 41             	sub    ecx,0x41
c000de05:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000de0c:	b8 01 00 00 00       	mov    eax,0x1
c000de11:	c7 04 8d 80 b8 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd4780],0x0
c000de1c:	d3 e0                	shl    eax,cl
c000de1e:	89 c7                	mov    edi,eax
c000de20:	f7 d0                	not    eax
c000de22:	c1 ff 1f             	sar    edi,0x1f
c000de25:	21 05 60 b8 02 c0    	and    DWORD PTR ds:0xc002b860,eax
c000de2b:	89 fe                	mov    esi,edi
c000de2d:	f7 d6                	not    esi
c000de2f:	21 35 64 b8 02 c0    	and    DWORD PTR ds:0xc002b864,esi
c000de35:	5e                   	pop    esi
c000de36:	5f                   	pop    edi
c000de37:	c3                   	ret    

c000de38 <LogicalDisk::read(unsigned long long, int, void*)>:
c000de38:	57                   	push   edi
c000de39:	56                   	push   esi
c000de3a:	53                   	push   ebx
c000de3b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000de3f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000de43:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000de47:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000de4b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000de51:	77 41                	ja     c000de94 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000de53:	99                   	cdq    
c000de54:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000de5a:	01 c8                	add    eax,ecx
c000de5c:	11 da                	adc    edx,ebx
c000de5e:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000de64:	19 d7                	sbb    edi,edx
c000de66:	72 33                	jb     c000de9b <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000de68:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000de6e:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000de74:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000de78:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000de7c:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000de82:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000de88:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de8c:	5b                   	pop    ebx
c000de8d:	5e                   	pop    esi
c000de8e:	5f                   	pop    edi
c000de8f:	e9 c6 0a 00 00       	jmp    c000e95a <VCache::read(unsigned long long, int, void*)>
c000de94:	b8 05 00 00 00       	mov    eax,0x5
c000de99:	eb 05                	jmp    c000dea0 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000de9b:	b8 07 00 00 00       	mov    eax,0x7
c000dea0:	5b                   	pop    ebx
c000dea1:	5e                   	pop    esi
c000dea2:	5f                   	pop    edi
c000dea3:	c3                   	ret    

c000dea4 <LogicalDisk::write(unsigned long long, int, void*)>:
c000dea4:	57                   	push   edi
c000dea5:	56                   	push   esi
c000dea6:	53                   	push   ebx
c000dea7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000deab:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000deaf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000deb3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000deb7:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000debd:	77 41                	ja     c000df00 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000debf:	99                   	cdq    
c000dec0:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000dec6:	01 c8                	add    eax,ecx
c000dec8:	11 da                	adc    edx,ebx
c000deca:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000ded0:	19 d7                	sbb    edi,edx
c000ded2:	72 33                	jb     c000df07 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000ded4:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000deda:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000dee0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000dee4:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000dee8:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000deee:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000def4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000def8:	5b                   	pop    ebx
c000def9:	5e                   	pop    esi
c000defa:	5f                   	pop    edi
c000defb:	e9 6c 09 00 00       	jmp    c000e86c <VCache::write(unsigned long long, int, void*)>
c000df00:	b8 05 00 00 00       	mov    eax,0x5
c000df05:	eb 05                	jmp    c000df0c <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000df07:	b8 07 00 00 00       	mov    eax,0x7
c000df0c:	5b                   	pop    ebx
c000df0d:	5e                   	pop    esi
c000df0e:	5f                   	pop    edi
c000df0f:	c3                   	ret    

c000df10 <Mouse::Mouse(char const*)>:
c000df10:	83 ec 0c             	sub    esp,0xc
c000df13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df17:	83 ec 08             	sub    esp,0x8
c000df1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df1e:	50                   	push   eax
c000df1f:	e8 ca ec ff ff       	call   c000cbee <Device::Device(char const*)>
c000df24:	83 c4 10             	add    esp,0x10
c000df27:	ba 00 1e 02 c0       	mov    edx,0xc0021e00
c000df2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df30:	89 10                	mov    DWORD PTR [eax],edx
c000df32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df36:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000df40:	90                   	nop
c000df41:	83 c4 0c             	add    esp,0xc
c000df44:	c3                   	ret    
c000df45:	90                   	nop
c000df46:	66 90                	xchg   ax,ax

c000df48 <Mouse::~Mouse()>:
c000df48:	83 ec 0c             	sub    esp,0xc
c000df4b:	ba 00 1e 02 c0       	mov    edx,0xc0021e00
c000df50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df54:	89 10                	mov    DWORD PTR [eax],edx
c000df56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df5a:	83 ec 0c             	sub    esp,0xc
c000df5d:	50                   	push   eax
c000df5e:	e8 f5 e9 ff ff       	call   c000c958 <Device::~Device()>
c000df63:	83 c4 10             	add    esp,0x10
c000df66:	90                   	nop
c000df67:	83 c4 0c             	add    esp,0xc
c000df6a:	c3                   	ret    
c000df6b:	90                   	nop

c000df6c <Mouse::~Mouse()>:
c000df6c:	83 ec 0c             	sub    esp,0xc
c000df6f:	83 ec 0c             	sub    esp,0xc
c000df72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df76:	e8 cd ff ff ff       	call   c000df48 <Mouse::~Mouse()>
c000df7b:	83 c4 10             	add    esp,0x10
c000df7e:	83 ec 08             	sub    esp,0x8
c000df81:	68 58 01 00 00       	push   0x158
c000df86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df8a:	e8 89 c8 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000df8f:	83 c4 10             	add    esp,0x10
c000df92:	83 c4 0c             	add    esp,0xc
c000df95:	c3                   	ret    

c000df96 <NIC::getMAC()>:
c000df96:	31 c0                	xor    eax,eax
c000df98:	31 d2                	xor    edx,edx
c000df9a:	c3                   	ret    
c000df9b:	90                   	nop

c000df9c <NIC::write(int, unsigned char*, int*)>:
c000df9c:	b8 01 00 00 00       	mov    eax,0x1
c000dfa1:	c3                   	ret    

c000dfa2 <NIC::NIC(char const*)>:
c000dfa2:	83 ec 0c             	sub    esp,0xc
c000dfa5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfa9:	83 ec 08             	sub    esp,0x8
c000dfac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfb0:	50                   	push   eax
c000dfb1:	e8 38 ec ff ff       	call   c000cbee <Device::Device(char const*)>
c000dfb6:	83 c4 10             	add    esp,0x10
c000dfb9:	ba 2c 1e 02 c0       	mov    edx,0xc0021e2c
c000dfbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfc2:	89 10                	mov    DWORD PTR [eax],edx
c000dfc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfc8:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000dfd2:	90                   	nop
c000dfd3:	83 c4 0c             	add    esp,0xc
c000dfd6:	c3                   	ret    
c000dfd7:	90                   	nop

c000dfd8 <NIC::~NIC()>:
c000dfd8:	83 ec 0c             	sub    esp,0xc
c000dfdb:	ba 2c 1e 02 c0       	mov    edx,0xc0021e2c
c000dfe0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfe4:	89 10                	mov    DWORD PTR [eax],edx
c000dfe6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfea:	83 ec 0c             	sub    esp,0xc
c000dfed:	50                   	push   eax
c000dfee:	e8 65 e9 ff ff       	call   c000c958 <Device::~Device()>
c000dff3:	83 c4 10             	add    esp,0x10
c000dff6:	90                   	nop
c000dff7:	83 c4 0c             	add    esp,0xc
c000dffa:	c3                   	ret    
c000dffb:	90                   	nop

c000dffc <NIC::~NIC()>:
c000dffc:	83 ec 0c             	sub    esp,0xc
c000dfff:	83 ec 0c             	sub    esp,0xc
c000e002:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e006:	e8 cd ff ff ff       	call   c000dfd8 <NIC::~NIC()>
c000e00b:	83 c4 10             	add    esp,0x10
c000e00e:	83 ec 08             	sub    esp,0x8
c000e011:	68 58 01 00 00       	push   0x158
c000e016:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e01a:	e8 f9 c7 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000e01f:	83 c4 10             	add    esp,0x10
c000e022:	83 c4 0c             	add    esp,0xc
c000e025:	c3                   	ret    

c000e026 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000e026:	55                   	push   ebp
c000e027:	57                   	push   edi
c000e028:	56                   	push   esi
c000e029:	53                   	push   ebx
c000e02a:	81 ec 28 01 00 00    	sub    esp,0x128
c000e030:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000e037:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000e03e:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000e045:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000e04c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e050:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000e054:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000e05b:	e8 8a ec ff ff       	call   c000ccea <Device::getName()>
c000e060:	5a                   	pop    edx
c000e061:	59                   	pop    ecx
c000e062:	50                   	push   eax
c000e063:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000e067:	55                   	push   ebp
c000e068:	e8 d3 25 ff ff       	call   c0000640 <strcpy>
c000e06d:	5b                   	pop    ebx
c000e06e:	58                   	pop    eax
c000e06f:	68 58 1e 02 c0       	push   0xc0021e58
c000e074:	55                   	push   ebp
c000e075:	e8 c6 27 ff ff       	call   c0000840 <strcat>
c000e07a:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000e081:	e8 30 9a ff ff       	call   c0007ab6 <malloc>
c000e086:	83 c4 0c             	add    esp,0xc
c000e089:	89 c3                	mov    ebx,eax
c000e08b:	57                   	push   edi
c000e08c:	56                   	push   esi
c000e08d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e091:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e095:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000e09c:	55                   	push   ebp
c000e09d:	50                   	push   eax
c000e09e:	e8 59 fb ff ff       	call   c000dbfc <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000e0a3:	83 c4 14             	add    esp,0x14
c000e0a6:	53                   	push   ebx
c000e0a7:	e8 10 fc ff ff       	call   c000dcbc <LogicalDisk::assignDriveLetter()>
c000e0ac:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e0af:	e8 c2 fc ff ff       	call   c000dd76 <LogicalDisk::mount()>
c000e0b4:	58                   	pop    eax
c000e0b5:	5a                   	pop    edx
c000e0b6:	53                   	push   ebx
c000e0b7:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000e0be:	e8 93 e9 ff ff       	call   c000ca56 <Device::addChild(Device*)>
c000e0c3:	81 c4 2c 01 00 00    	add    esp,0x12c
c000e0c9:	5b                   	pop    ebx
c000e0ca:	5e                   	pop    esi
c000e0cb:	5f                   	pop    edi
c000e0cc:	5d                   	pop    ebp
c000e0cd:	c3                   	ret    

c000e0ce <createPartitionsForDisk(PhysicalDisk*)>:
c000e0ce:	55                   	push   ebp
c000e0cf:	57                   	push   edi
c000e0d0:	56                   	push   esi
c000e0d1:	53                   	push   ebx
c000e0d2:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000e0d8:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000e0df:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000e0e5:	3d 00 02 00 00       	cmp    eax,0x200
c000e0ea:	74 27                	je     c000e113 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000e0ec:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000e0f2:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000e0f8:	83 ec 10             	sub    esp,0x10
c000e0fb:	0f a4 f7 0a          	shld   edi,esi,0xa
c000e0ff:	99                   	cdq    
c000e100:	c1 e6 0a             	shl    esi,0xa
c000e103:	52                   	push   edx
c000e104:	89 fd                	mov    ebp,edi
c000e106:	50                   	push   eax
c000e107:	55                   	push   ebp
c000e108:	56                   	push   esi
c000e109:	e8 b2 16 01 00       	call   c001f7c0 <__udivdi3>
c000e10e:	e9 b9 00 00 00       	jmp    c000e1cc <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000e113:	83 ec 0c             	sub    esp,0xc
c000e116:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e118:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000e11c:	56                   	push   esi
c000e11d:	6a 01                	push   0x1
c000e11f:	6a 00                	push   0x0
c000e121:	6a 00                	push   0x0
c000e123:	53                   	push   ebx
c000e124:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000e127:	83 c4 20             	add    esp,0x20
c000e12a:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000e132:	75 0a                	jne    c000e13e <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000e134:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000e13c:	74 2c                	je     c000e16a <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000e13e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e144:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000e14a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000e150:	83 ec 10             	sub    esp,0x10
c000e153:	0f a4 c2 0a          	shld   edx,eax,0xa
c000e157:	89 f7                	mov    edi,esi
c000e159:	c1 e0 0a             	shl    eax,0xa
c000e15c:	c1 ff 1f             	sar    edi,0x1f
c000e15f:	57                   	push   edi
c000e160:	56                   	push   esi
c000e161:	52                   	push   edx
c000e162:	50                   	push   eax
c000e163:	e8 58 16 01 00       	call   c001f7c0 <__udivdi3>
c000e168:	eb 62                	jmp    c000e1cc <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000e16a:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000e171:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000e178:	89 cf                	mov    edi,ecx
c000e17a:	83 e2 7f             	and    edx,0x7f
c000e17d:	83 e7 7f             	and    edi,0x7f
c000e180:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000e187:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000e18a:	83 e0 7f             	and    eax,0x7f
c000e18d:	8d 14 01             	lea    edx,[ecx+eax*1]
c000e190:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000e197:	83 e0 7f             	and    eax,0x7f
c000e19a:	01 d0                	add    eax,edx
c000e19c:	89 c5                	mov    ebp,eax
c000e19e:	84 c0                	test   al,al
c000e1a0:	74 41                	je     c000e1e3 <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000e1a2:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e1a8:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000e1ae:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000e1b4:	83 ec 10             	sub    esp,0x10
c000e1b7:	0f a4 c2 0a          	shld   edx,eax,0xa
c000e1bb:	89 f7                	mov    edi,esi
c000e1bd:	c1 e0 0a             	shl    eax,0xa
c000e1c0:	c1 ff 1f             	sar    edi,0x1f
c000e1c3:	57                   	push   edi
c000e1c4:	56                   	push   esi
c000e1c5:	52                   	push   edx
c000e1c6:	50                   	push   eax
c000e1c7:	e8 f4 15 01 00       	call   c001f7c0 <__udivdi3>
c000e1cc:	83 c4 14             	add    esp,0x14
c000e1cf:	52                   	push   edx
c000e1d0:	50                   	push   eax
c000e1d1:	6a 00                	push   0x0
c000e1d3:	6a 00                	push   0x0
c000e1d5:	53                   	push   ebx
c000e1d6:	e8 4b fe ff ff       	call   c000e026 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000e1db:	83 c4 20             	add    esp,0x20
c000e1de:	e9 73 01 00 00       	jmp    c000e356 <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000e1e3:	89 f0                	mov    eax,esi
c000e1e5:	31 c9                	xor    ecx,ecx
c000e1e7:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000e1ee:	75 02                	jne    c000e1f2 <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000e1f0:	89 cd                	mov    ebp,ecx
c000e1f2:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000e1f9:	0f b6 b0 c8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c8]
c000e200:	c1 e2 08             	shl    edx,0x8
c000e203:	c1 e6 10             	shl    esi,0x10
c000e206:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000e20e:	09 f2                	or     edx,esi
c000e210:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000e218:	0f b6 b0 c6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c6]
c000e21f:	83 c0 10             	add    eax,0x10
c000e222:	09 f2                	or     edx,esi
c000e224:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000e22b:	c1 e6 18             	shl    esi,0x18
c000e22e:	09 f2                	or     edx,esi
c000e230:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000e237:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000e23b:	c1 e6 10             	shl    esi,0x10
c000e23e:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000e245:	c1 e2 08             	shl    edx,0x8
c000e248:	09 f2                	or     edx,esi
c000e24a:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000e251:	09 f2                	or     edx,esi
c000e253:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000e25a:	c1 e6 18             	shl    esi,0x18
c000e25d:	09 f2                	or     edx,esi
c000e25f:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000e263:	41                   	inc    ecx
c000e264:	83 f9 04             	cmp    ecx,0x4
c000e267:	0f 85 7a ff ff ff    	jne    c000e1e7 <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000e26d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e271:	83 f0 01             	xor    eax,0x1
c000e274:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000e278:	75 4f                	jne    c000e2c9 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000e27a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e27e:	83 f0 01             	xor    eax,0x1
c000e281:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000e285:	75 42                	jne    c000e2c9 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000e287:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000e28f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e297:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e29d:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000e2a3:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000e2a9:	0f a4 c2 0a          	shld   edx,eax,0xa
c000e2ad:	89 f7                	mov    edi,esi
c000e2af:	c1 e0 0a             	shl    eax,0xa
c000e2b2:	c1 ff 1f             	sar    edi,0x1f
c000e2b5:	57                   	push   edi
c000e2b6:	56                   	push   esi
c000e2b7:	52                   	push   edx
c000e2b8:	50                   	push   eax
c000e2b9:	e8 02 15 01 00       	call   c001f7c0 <__udivdi3>
c000e2be:	83 c4 10             	add    esp,0x10
c000e2c1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e2c5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000e2c9:	89 e8                	mov    eax,ebp
c000e2cb:	0f b6 e8             	movzx  ebp,al
c000e2ce:	85 ed                	test   ebp,ebp
c000e2d0:	74 50                	je     c000e322 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000e2d2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e2d6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e2da:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e2de:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000e2e2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e2e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e2ea:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000e2ee:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000e2f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2f6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e2fe:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000e302:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000e306:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000e30a:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000e30e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e312:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000e316:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000e31a:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000e31e:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000e322:	31 ed                	xor    ebp,ebp
c000e324:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000e328:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000e32c:	89 f8                	mov    eax,edi
c000e32e:	09 f0                	or     eax,esi
c000e330:	74 1e                	je     c000e350 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000e332:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000e336:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000e33a:	89 d1                	mov    ecx,edx
c000e33c:	09 c1                	or     ecx,eax
c000e33e:	74 10                	je     c000e350 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000e340:	83 ec 0c             	sub    esp,0xc
c000e343:	57                   	push   edi
c000e344:	56                   	push   esi
c000e345:	52                   	push   edx
c000e346:	50                   	push   eax
c000e347:	53                   	push   ebx
c000e348:	e8 d9 fc ff ff       	call   c000e026 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000e34d:	83 c4 20             	add    esp,0x20
c000e350:	45                   	inc    ebp
c000e351:	83 fd 04             	cmp    ebp,0x4
c000e354:	75 ce                	jne    c000e324 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000e356:	81 c4 5c 02 00 00    	add    esp,0x25c
c000e35c:	5b                   	pop    ebx
c000e35d:	5e                   	pop    esi
c000e35e:	5f                   	pop    edi
c000e35f:	5d                   	pop    ebp
c000e360:	c3                   	ret    
c000e361:	66 90                	xchg   ax,ax
c000e363:	90                   	nop

c000e364 <Serial::Serial(char const*)>:
c000e364:	83 ec 0c             	sub    esp,0xc
c000e367:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e36b:	83 ec 08             	sub    esp,0x8
c000e36e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e372:	50                   	push   eax
c000e373:	e8 76 e8 ff ff       	call   c000cbee <Device::Device(char const*)>
c000e378:	83 c4 10             	add    esp,0x10
c000e37b:	ba 6c 1e 02 c0       	mov    edx,0xc0021e6c
c000e380:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e384:	89 10                	mov    DWORD PTR [eax],edx
c000e386:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e38a:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000e394:	90                   	nop
c000e395:	83 c4 0c             	add    esp,0xc
c000e398:	c3                   	ret    
c000e399:	90                   	nop
c000e39a:	66 90                	xchg   ax,ax

c000e39c <Serial::~Serial()>:
c000e39c:	83 ec 0c             	sub    esp,0xc
c000e39f:	ba 6c 1e 02 c0       	mov    edx,0xc0021e6c
c000e3a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3a8:	89 10                	mov    DWORD PTR [eax],edx
c000e3aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3ae:	83 ec 0c             	sub    esp,0xc
c000e3b1:	50                   	push   eax
c000e3b2:	e8 a1 e5 ff ff       	call   c000c958 <Device::~Device()>
c000e3b7:	83 c4 10             	add    esp,0x10
c000e3ba:	90                   	nop
c000e3bb:	83 c4 0c             	add    esp,0xc
c000e3be:	c3                   	ret    
c000e3bf:	90                   	nop

c000e3c0 <Serial::~Serial()>:
c000e3c0:	83 ec 0c             	sub    esp,0xc
c000e3c3:	83 ec 0c             	sub    esp,0xc
c000e3c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3ca:	e8 cd ff ff ff       	call   c000e39c <Serial::~Serial()>
c000e3cf:	83 c4 10             	add    esp,0x10
c000e3d2:	83 ec 08             	sub    esp,0x8
c000e3d5:	68 58 01 00 00       	push   0x158
c000e3da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3de:	e8 35 c4 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000e3e3:	83 c4 10             	add    esp,0x10
c000e3e6:	83 c4 0c             	add    esp,0xc
c000e3e9:	c3                   	ret    
c000e3ea:	66 90                	xchg   ax,ax

c000e3ec <Timer::Timer(char const*)>:
c000e3ec:	83 ec 0c             	sub    esp,0xc
c000e3ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3f3:	83 ec 08             	sub    esp,0x8
c000e3f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3fa:	50                   	push   eax
c000e3fb:	e8 ee e7 ff ff       	call   c000cbee <Device::Device(char const*)>
c000e400:	83 c4 10             	add    esp,0x10
c000e403:	ba b0 1e 02 c0       	mov    edx,0xc0021eb0
c000e408:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e40c:	89 10                	mov    DWORD PTR [eax],edx
c000e40e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e412:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000e41c:	90                   	nop
c000e41d:	83 c4 0c             	add    esp,0xc
c000e420:	c3                   	ret    
c000e421:	90                   	nop
c000e422:	66 90                	xchg   ax,ax

c000e424 <Timer::~Timer()>:
c000e424:	83 ec 0c             	sub    esp,0xc
c000e427:	ba b0 1e 02 c0       	mov    edx,0xc0021eb0
c000e42c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e430:	89 10                	mov    DWORD PTR [eax],edx
c000e432:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e436:	83 ec 0c             	sub    esp,0xc
c000e439:	50                   	push   eax
c000e43a:	e8 19 e5 ff ff       	call   c000c958 <Device::~Device()>
c000e43f:	83 c4 10             	add    esp,0x10
c000e442:	90                   	nop
c000e443:	83 c4 0c             	add    esp,0xc
c000e446:	c3                   	ret    
c000e447:	90                   	nop

c000e448 <Timer::~Timer()>:
c000e448:	83 ec 0c             	sub    esp,0xc
c000e44b:	83 ec 0c             	sub    esp,0xc
c000e44e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e452:	e8 cd ff ff ff       	call   c000e424 <Timer::~Timer()>
c000e457:	83 c4 10             	add    esp,0x10
c000e45a:	83 ec 08             	sub    esp,0x8
c000e45d:	68 5c 01 00 00       	push   0x15c
c000e462:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e466:	e8 ad c3 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000e46b:	83 c4 10             	add    esp,0x10
c000e46e:	83 c4 0c             	add    esp,0xc
c000e471:	c3                   	ret    

c000e472 <Timer::read()>:
c000e472:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e476:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e47c:	c3                   	ret    

c000e47d <setupTimer(int)>:
c000e47d:	53                   	push   ebx
c000e47e:	83 ec 14             	sub    esp,0x14
c000e481:	68 5c 01 00 00       	push   0x15c
c000e486:	e8 2b 96 ff ff       	call   c0007ab6 <malloc>
c000e48b:	89 04 24             	mov    DWORD PTR [esp],eax
c000e48e:	89 c3                	mov    ebx,eax
c000e490:	e8 97 0b 01 00       	call   c001f02c <PIT::PIT()>
c000e495:	58                   	pop    eax
c000e496:	5a                   	pop    edx
c000e497:	53                   	push   ebx
c000e498:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c000e49e:	e8 b3 e5 ff ff       	call   c000ca56 <Device::addChild(Device*)>
c000e4a3:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e4a5:	6a 00                	push   0x0
c000e4a7:	6a 00                	push   0x0
c000e4a9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e4ad:	53                   	push   ebx
c000e4ae:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e4b1:	89 d8                	mov    eax,ebx
c000e4b3:	83 c4 28             	add    esp,0x28
c000e4b6:	5b                   	pop    ebx
c000e4b7:	c3                   	ret    

c000e4b8 <timerHandler(unsigned int)>:
c000e4b8:	56                   	push   esi
c000e4b9:	53                   	push   ebx
c000e4ba:	51                   	push   ecx
c000e4bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4bf:	01 05 ec b8 02 c0    	add    DWORD PTR ds:0xc002b8ec,eax
c000e4c5:	80 3d bd 6e 02 c0 00 	cmp    BYTE PTR ds:0xc0026ebd,0x0
c000e4cc:	0f 84 4a 01 00 00    	je     c000e61c <timerHandler(unsigned int)+0x164>
c000e4d2:	fa                   	cli    
c000e4d3:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c000e4d9:	83 ec 0c             	sub    esp,0xc
c000e4dc:	ff 05 c4 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c4
c000e4e2:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e4e7:	e8 a4 18 01 00       	call   c001fd90 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e4ec:	83 c4 10             	add    esp,0x10
c000e4ef:	84 c0                	test   al,al
c000e4f1:	0f 85 a1 00 00 00    	jne    c000e598 <timerHandler(unsigned int)+0xe0>
c000e4f7:	83 ec 0c             	sub    esp,0xc
c000e4fa:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e4ff:	e8 a8 18 01 00       	call   c001fdac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e504:	83 c4 10             	add    esp,0x10
c000e507:	89 c6                	mov    esi,eax
c000e509:	8d 76 00             	lea    esi,[esi+0x0]
c000e50c:	83 ec 0c             	sub    esp,0xc
c000e50f:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e514:	e8 93 18 01 00       	call   c001fdac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e519:	c7 04 24 d8 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6d8
c000e520:	89 c3                	mov    ebx,eax
c000e522:	e8 8d 18 01 00       	call   c001fdb4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000e527:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000e52a:	83 c4 10             	add    esp,0x10
c000e52d:	3b 05 ec b8 02 c0    	cmp    eax,DWORD PTR ds:0xc002b8ec
c000e533:	77 23                	ja     c000e558 <timerHandler(unsigned int)+0xa0>
c000e535:	83 ec 0c             	sub    esp,0xc
c000e538:	53                   	push   ebx
c000e539:	e8 2a 81 00 00       	call   c0016668 <unblockTask(ThreadControlBlock*)>
c000e53e:	83 c4 10             	add    esp,0x10
c000e541:	39 de                	cmp    esi,ebx
c000e543:	75 27                	jne    c000e56c <timerHandler(unsigned int)+0xb4>
c000e545:	83 ec 0c             	sub    esp,0xc
c000e548:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e54d:	e8 5a 18 01 00       	call   c001fdac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e552:	89 c6                	mov    esi,eax
c000e554:	eb 12                	jmp    c000e568 <timerHandler(unsigned int)+0xb0>
c000e556:	66 90                	xchg   ax,ax
c000e558:	52                   	push   edx
c000e559:	52                   	push   edx
c000e55a:	53                   	push   ebx
c000e55b:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e560:	e8 0b 19 01 00       	call   c001fe70 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e565:	8d 76 00             	lea    esi,[esi+0x0]
c000e568:	83 c4 10             	add    esp,0x10
c000e56b:	90                   	nop
c000e56c:	83 ec 0c             	sub    esp,0xc
c000e56f:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e574:	e8 17 18 01 00       	call   c001fd90 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e579:	83 c4 10             	add    esp,0x10
c000e57c:	84 c0                	test   al,al
c000e57e:	75 18                	jne    c000e598 <timerHandler(unsigned int)+0xe0>
c000e580:	83 ec 0c             	sub    esp,0xc
c000e583:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e588:	e8 1f 18 01 00       	call   c001fdac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e58d:	83 c4 10             	add    esp,0x10
c000e590:	39 f0                	cmp    eax,esi
c000e592:	0f 85 74 ff ff ff    	jne    c000e50c <timerHandler(unsigned int)+0x54>
c000e598:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e59d:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000e5a1:	74 41                	je     c000e5e4 <timerHandler(unsigned int)+0x12c>
c000e5a3:	80 3d bc 6e 02 c0 00 	cmp    BYTE PTR ds:0xc0026ebc,0x0
c000e5aa:	74 38                	je     c000e5e4 <timerHandler(unsigned int)+0x12c>
c000e5ac:	fa                   	cli    
c000e5ad:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c000e5b3:	a1 ec b8 02 c0       	mov    eax,ds:0xc002b8ec
c000e5b8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e5be:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000e5c1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e5c7:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000e5ca:	72 08                	jb     c000e5d4 <timerHandler(unsigned int)+0x11c>
c000e5cc:	e8 7f 7b 00 00       	call   c0016150 <schedule()>
c000e5d1:	8d 76 00             	lea    esi,[esi+0x0]
c000e5d4:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000e5d9:	48                   	dec    eax
c000e5da:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000e5df:	75 03                	jne    c000e5e4 <timerHandler(unsigned int)+0x12c>
c000e5e1:	fb                   	sti    
c000e5e2:	66 90                	xchg   ax,ax
c000e5e4:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000e5e9:	48                   	dec    eax
c000e5ea:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c000e5ef:	75 1b                	jne    c000e60c <timerHandler(unsigned int)+0x154>
c000e5f1:	83 3d c0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6c0,0x0
c000e5f8:	74 12                	je     c000e60c <timerHandler(unsigned int)+0x154>
c000e5fa:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c000e604:	e8 47 7b 00 00       	call   c0016150 <schedule()>
c000e609:	8d 76 00             	lea    esi,[esi+0x0]
c000e60c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000e611:	48                   	dec    eax
c000e612:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000e617:	75 03                	jne    c000e61c <timerHandler(unsigned int)+0x164>
c000e619:	fb                   	sti    
c000e61a:	66 90                	xchg   ax,ax
c000e61c:	58                   	pop    eax
c000e61d:	5b                   	pop    ebx
c000e61e:	5e                   	pop    esi
c000e61f:	c3                   	ret    

c000e620 <VCache::VCache(PhysicalDisk*)>:
c000e620:	53                   	push   ebx
c000e621:	83 ec 18             	sub    esp,0x18
c000e624:	ba e0 1e 02 c0       	mov    edx,0xc0021ee0
c000e629:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e62d:	89 10                	mov    DWORD PTR [eax],edx
c000e62f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e633:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000e63a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e63e:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000e645:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e649:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000e650:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000e657:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e65b:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000e662:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000e669:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e66d:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000e674:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e678:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e67c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e680:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000e687:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000e68e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e692:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e696:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e69a:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000e69e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6a2:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e6a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6aa:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e6b1:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000e6b9:	83 ec 0c             	sub    esp,0xc
c000e6bc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e6c0:	e8 f1 93 ff ff       	call   c0007ab6 <malloc>
c000e6c5:	83 c4 10             	add    esp,0x10
c000e6c8:	89 c3                	mov    ebx,eax
c000e6ca:	83 ec 0c             	sub    esp,0xc
c000e6cd:	53                   	push   ebx
c000e6ce:	e8 19 78 00 00       	call   c0015eec <Mutex::Mutex()>
c000e6d3:	83 c4 10             	add    esp,0x10
c000e6d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6da:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000e6dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6e1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e6e5:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e6e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6ec:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000e6f3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e6f7:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e6fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e701:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e704:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e708:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000e70e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e714:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000e718:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000e71b:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000e71e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e722:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e726:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e72a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e730:	05 00 02 00 00       	add    eax,0x200
c000e735:	c1 e0 03             	shl    eax,0x3
c000e738:	83 ec 0c             	sub    esp,0xc
c000e73b:	50                   	push   eax
c000e73c:	e8 75 93 ff ff       	call   c0007ab6 <malloc>
c000e741:	83 c4 10             	add    esp,0x10
c000e744:	89 c2                	mov    edx,eax
c000e746:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e74a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000e74d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e751:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e758:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e75c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e760:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e764:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e76a:	89 d0                	mov    eax,edx
c000e76c:	c1 e0 02             	shl    eax,0x2
c000e76f:	01 d0                	add    eax,edx
c000e771:	c1 e0 04             	shl    eax,0x4
c000e774:	83 ec 0c             	sub    esp,0xc
c000e777:	50                   	push   eax
c000e778:	e8 39 93 ff ff       	call   c0007ab6 <malloc>
c000e77d:	83 c4 10             	add    esp,0x10
c000e780:	89 c2                	mov    edx,eax
c000e782:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e786:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000e789:	90                   	nop
c000e78a:	83 c4 18             	add    esp,0x18
c000e78d:	5b                   	pop    ebx
c000e78e:	c3                   	ret    
c000e78f:	90                   	nop

c000e790 <VCache::invalidateReadBuffer()>:
c000e790:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e794:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000e79a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e79e:	c3                   	ret    
c000e79f:	90                   	nop

c000e7a0 <VCache::writeWriteBuffer()>:
c000e7a0:	53                   	push   ebx
c000e7a1:	83 ec 08             	sub    esp,0x8
c000e7a4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e7a8:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e7ac:	74 1e                	je     c000e7cc <VCache::writeWriteBuffer()+0x2c>
c000e7ae:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e7b1:	83 ec 0c             	sub    esp,0xc
c000e7b4:	8b 10                	mov    edx,DWORD PTR [eax]
c000e7b6:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000e7b9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000e7bc:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000e7bf:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000e7c2:	50                   	push   eax
c000e7c3:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000e7c6:	83 c4 20             	add    esp,0x20
c000e7c9:	8d 76 00             	lea    esi,[esi+0x0]
c000e7cc:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e7d3:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000e7da:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000e7de:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000e7e5:	83 c4 08             	add    esp,0x8
c000e7e8:	5b                   	pop    ebx
c000e7e9:	c3                   	ret    
c000e7ea:	66 90                	xchg   ax,ax

c000e7ec <VCache::~VCache()>:
c000e7ec:	83 ec 0c             	sub    esp,0xc
c000e7ef:	ba e0 1e 02 c0       	mov    edx,0xc0021ee0
c000e7f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f8:	89 10                	mov    DWORD PTR [eax],edx
c000e7fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7fe:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000e801:	0f b6 c0             	movzx  eax,al
c000e804:	85 c0                	test   eax,eax
c000e806:	74 10                	je     c000e818 <VCache::~VCache()+0x2c>
c000e808:	83 ec 0c             	sub    esp,0xc
c000e80b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e80f:	e8 8c ff ff ff       	call   c000e7a0 <VCache::writeWriteBuffer()>
c000e814:	83 c4 10             	add    esp,0x10
c000e817:	90                   	nop
c000e818:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e81c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000e81f:	83 ec 0c             	sub    esp,0xc
c000e822:	50                   	push   eax
c000e823:	e8 9e 92 ff ff       	call   c0007ac6 <free>
c000e828:	83 c4 10             	add    esp,0x10
c000e82b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e82f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000e832:	83 ec 0c             	sub    esp,0xc
c000e835:	50                   	push   eax
c000e836:	e8 8b 92 ff ff       	call   c0007ac6 <free>
c000e83b:	83 c4 10             	add    esp,0x10
c000e83e:	90                   	nop
c000e83f:	83 c4 0c             	add    esp,0xc
c000e842:	c3                   	ret    
c000e843:	90                   	nop

c000e844 <VCache::~VCache()>:
c000e844:	83 ec 0c             	sub    esp,0xc
c000e847:	83 ec 0c             	sub    esp,0xc
c000e84a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e84e:	e8 99 ff ff ff       	call   c000e7ec <VCache::~VCache()>
c000e853:	83 c4 10             	add    esp,0x10
c000e856:	83 ec 08             	sub    esp,0x8
c000e859:	6a 44                	push   0x44
c000e85b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e85f:	e8 b4 bf ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000e864:	83 c4 10             	add    esp,0x10
c000e867:	83 c4 0c             	add    esp,0xc
c000e86a:	c3                   	ret    
c000e86b:	90                   	nop

c000e86c <VCache::write(unsigned long long, int, void*)>:
c000e86c:	55                   	push   ebp
c000e86d:	57                   	push   edi
c000e86e:	56                   	push   esi
c000e86f:	53                   	push   ebx
c000e870:	83 ec 1c             	sub    esp,0x1c
c000e873:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e877:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e87b:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e87f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e883:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e887:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000e88b:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000e88f:	74 07                	je     c000e898 <VCache::write(unsigned long long, int, void*)+0x2c>
c000e891:	53                   	push   ebx
c000e892:	e8 f9 fe ff ff       	call   c000e790 <VCache::invalidateReadBuffer()>
c000e897:	58                   	pop    eax
c000e898:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e89c:	74 62                	je     c000e900 <VCache::write(unsigned long long, int, void*)+0x94>
c000e89e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e8a1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e8a5:	99                   	cdq    
c000e8a6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e8aa:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000e8ad:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000e8b0:	31 c1                	xor    ecx,eax
c000e8b2:	89 d0                	mov    eax,edx
c000e8b4:	89 ca                	mov    edx,ecx
c000e8b6:	31 e8                	xor    eax,ebp
c000e8b8:	09 c2                	or     edx,eax
c000e8ba:	75 38                	jne    c000e8f4 <VCache::write(unsigned long long, int, void*)+0x88>
c000e8bc:	83 ff 01             	cmp    edi,0x1
c000e8bf:	75 33                	jne    c000e8f4 <VCache::write(unsigned long long, int, void*)+0x88>
c000e8c1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e8c4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e8c8:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e8ce:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000e8d1:	0f af c8             	imul   ecx,eax
c000e8d4:	01 cf                	add    edi,ecx
c000e8d6:	89 c1                	mov    ecx,eax
c000e8d8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e8da:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e8dd:	40                   	inc    eax
c000e8de:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000e8e1:	83 f8 50             	cmp    eax,0x50
c000e8e4:	75 6a                	jne    c000e950 <VCache::write(unsigned long long, int, void*)+0xe4>
c000e8e6:	83 ec 0c             	sub    esp,0xc
c000e8e9:	53                   	push   ebx
c000e8ea:	e8 b1 fe ff ff       	call   c000e7a0 <VCache::writeWriteBuffer()>
c000e8ef:	83 c4 10             	add    esp,0x10
c000e8f2:	eb 5c                	jmp    c000e950 <VCache::write(unsigned long long, int, void*)+0xe4>
c000e8f4:	83 ec 0c             	sub    esp,0xc
c000e8f7:	53                   	push   ebx
c000e8f8:	e8 a3 fe ff ff       	call   c000e7a0 <VCache::writeWriteBuffer()>
c000e8fd:	83 c4 10             	add    esp,0x10
c000e900:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e903:	83 ff 4f             	cmp    edi,0x4f
c000e906:	7f 20                	jg     c000e928 <VCache::write(unsigned long long, int, void*)+0xbc>
c000e908:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000e90b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e90f:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000e912:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
c000e915:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000e919:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000e91c:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e922:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e924:	eb 2a                	jmp    c000e950 <VCache::write(unsigned long long, int, void*)+0xe4>
c000e926:	66 90                	xchg   ax,ax
c000e928:	8b 10                	mov    edx,DWORD PTR [eax]
c000e92a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000e92e:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000e932:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e936:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000e93a:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000e93e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e942:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000e945:	83 c4 1c             	add    esp,0x1c
c000e948:	5b                   	pop    ebx
c000e949:	5e                   	pop    esi
c000e94a:	5f                   	pop    edi
c000e94b:	5d                   	pop    ebp
c000e94c:	ff e0                	jmp    eax
c000e94e:	66 90                	xchg   ax,ax
c000e950:	83 c4 1c             	add    esp,0x1c
c000e953:	31 c0                	xor    eax,eax
c000e955:	5b                   	pop    ebx
c000e956:	5e                   	pop    esi
c000e957:	5f                   	pop    edi
c000e958:	5d                   	pop    ebp
c000e959:	c3                   	ret    

c000e95a <VCache::read(unsigned long long, int, void*)>:
c000e95a:	55                   	push   ebp
c000e95b:	57                   	push   edi
c000e95c:	56                   	push   esi
c000e95d:	53                   	push   ebx
c000e95e:	83 ec 1c             	sub    esp,0x1c
c000e961:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e965:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e969:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000e96d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e971:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e975:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e979:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000e97d:	74 0d                	je     c000e98c <VCache::read(unsigned long long, int, void*)+0x32>
c000e97f:	83 ec 0c             	sub    esp,0xc
c000e982:	57                   	push   edi
c000e983:	e8 18 fe ff ff       	call   c000e7a0 <VCache::writeWriteBuffer()>
c000e988:	83 c4 10             	add    esp,0x10
c000e98b:	90                   	nop
c000e98c:	83 fd 01             	cmp    ebp,0x1
c000e98f:	0f 85 93 00 00 00    	jne    c000ea28 <VCache::read(unsigned long long, int, void*)+0xce>
c000e995:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e998:	89 04 24             	mov    DWORD PTR [esp],eax
c000e99b:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000e9a2:	0f 85 80 00 00 00    	jne    c000ea28 <VCache::read(unsigned long long, int, void*)+0xce>
c000e9a8:	8b 6f 40             	mov    ebp,DWORD PTR [edi+0x40]
c000e9ab:	89 e9                	mov    ecx,ebp
c000e9ad:	f7 d9                	neg    ecx
c000e9af:	89 c8                	mov    eax,ecx
c000e9b1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000e9b5:	c1 f8 1f             	sar    eax,0x1f
c000e9b8:	21 d9                	and    ecx,ebx
c000e9ba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e9be:	89 c8                	mov    eax,ecx
c000e9c0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e9c4:	21 f1                	and    ecx,esi
c000e9c6:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000e9ca:	89 ca                	mov    edx,ecx
c000e9cc:	74 2e                	je     c000e9fc <VCache::read(unsigned long long, int, void*)+0xa2>
c000e9ce:	39 4f 34             	cmp    DWORD PTR [edi+0x34],ecx
c000e9d1:	75 29                	jne    c000e9fc <VCache::read(unsigned long long, int, void*)+0xa2>
c000e9d3:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000e9d6:	75 24                	jne    c000e9fc <VCache::read(unsigned long long, int, void*)+0xa2>
c000e9d8:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e9db:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e9e1:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000e9e4:	8d 70 ff             	lea    esi,[eax-0x1]
c000e9e7:	21 f3                	and    ebx,esi
c000e9e9:	0f af d9             	imul   ebx,ecx
c000e9ec:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000e9ef:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000e9f3:	89 de                	mov    esi,ebx
c000e9f5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e9f7:	31 c0                	xor    eax,eax
c000e9f9:	eb 61                	jmp    c000ea5c <VCache::read(unsigned long long, int, void*)+0x102>
c000e9fb:	90                   	nop
c000e9fc:	83 ec 0c             	sub    esp,0xc
c000e9ff:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000ea03:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000ea07:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000ea0a:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000ea0d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ea0f:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000ea12:	55                   	push   ebp
c000ea13:	52                   	push   edx
c000ea14:	50                   	push   eax
c000ea15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ea19:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000ea1c:	83 c4 20             	add    esp,0x20
c000ea1f:	85 c0                	test   eax,eax
c000ea21:	75 39                	jne    c000ea5c <VCache::read(unsigned long long, int, void*)+0x102>
c000ea23:	eb b3                	jmp    c000e9d8 <VCache::read(unsigned long long, int, void*)+0x7e>
c000ea25:	8d 76 00             	lea    esi,[esi+0x0]
c000ea28:	83 ec 0c             	sub    esp,0xc
c000ea2b:	57                   	push   edi
c000ea2c:	e8 5f fd ff ff       	call   c000e790 <VCache::invalidateReadBuffer()>
c000ea31:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ea34:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ea38:	8b 10                	mov    edx,DWORD PTR [eax]
c000ea3a:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000ea3e:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000ea42:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000ea46:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000ea4a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ea4e:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000ea51:	83 c4 2c             	add    esp,0x2c
c000ea54:	5b                   	pop    ebx
c000ea55:	5e                   	pop    esi
c000ea56:	5f                   	pop    edi
c000ea57:	5d                   	pop    ebp
c000ea58:	ff e0                	jmp    eax
c000ea5a:	66 90                	xchg   ax,ax
c000ea5c:	83 c4 1c             	add    esp,0x1c
c000ea5f:	5b                   	pop    ebx
c000ea60:	5e                   	pop    esi
c000ea61:	5f                   	pop    edi
c000ea62:	5d                   	pop    ebp
c000ea63:	c3                   	ret    

c000ea64 <Video::putrect(int, int, int, int, unsigned int)>:
c000ea64:	55                   	push   ebp
c000ea65:	57                   	push   edi
c000ea66:	56                   	push   esi
c000ea67:	53                   	push   ebx
c000ea68:	83 ec 1c             	sub    esp,0x1c
c000ea6b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000ea6f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ea73:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000ea77:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000ea7b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000ea7f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ea83:	01 df                	add    edi,ebx
c000ea85:	39 fb                	cmp    ebx,edi
c000ea87:	7d 1f                	jge    c000eaa8 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000ea89:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ea8d:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000ea91:	7d 12                	jge    c000eaa5 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000ea93:	8b 16                	mov    edx,DWORD PTR [esi]
c000ea95:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ea99:	53                   	push   ebx
c000ea9a:	55                   	push   ebp
c000ea9b:	45                   	inc    ebp
c000ea9c:	56                   	push   esi
c000ea9d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000eaa0:	83 c4 10             	add    esp,0x10
c000eaa3:	eb e8                	jmp    c000ea8d <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000eaa5:	43                   	inc    ebx
c000eaa6:	eb dd                	jmp    c000ea85 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000eaa8:	83 c4 1c             	add    esp,0x1c
c000eaab:	5b                   	pop    ebx
c000eaac:	5e                   	pop    esi
c000eaad:	5f                   	pop    edi
c000eaae:	5d                   	pop    ebp
c000eaaf:	c3                   	ret    

c000eab0 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000eab0:	55                   	push   ebp
c000eab1:	57                   	push   edi
c000eab2:	31 ff                	xor    edi,edi
c000eab4:	56                   	push   esi
c000eab5:	53                   	push   ebx
c000eab6:	83 ec 1c             	sub    esp,0x1c
c000eab9:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000eabd:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000eac1:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000eac8:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000eacd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ead1:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000ead5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ead9:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000eadc:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000eae0:	01 f9                	add    ecx,edi
c000eae2:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000eae6:	7d 2f                	jge    c000eb17 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000eae8:	31 f6                	xor    esi,esi
c000eaea:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000eaee:	01 f2                	add    edx,esi
c000eaf0:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000eaf4:	7d 1a                	jge    c000eb10 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000eaf6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000eaf9:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000eafc:	46                   	inc    esi
c000eafd:	51                   	push   ecx
c000eafe:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000eb02:	52                   	push   edx
c000eb03:	55                   	push   ebp
c000eb04:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000eb07:	83 c4 10             	add    esp,0x10
c000eb0a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000eb0e:	eb da                	jmp    c000eaea <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000eb10:	47                   	inc    edi
c000eb11:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000eb15:	eb c5                	jmp    c000eadc <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000eb17:	83 c4 1c             	add    esp,0x1c
c000eb1a:	5b                   	pop    ebx
c000eb1b:	5e                   	pop    esi
c000eb1c:	5f                   	pop    edi
c000eb1d:	5d                   	pop    ebp
c000eb1e:	c3                   	ret    
c000eb1f:	90                   	nop

c000eb20 <Video::blit(unsigned int*, int, int, int, int)>:
c000eb20:	55                   	push   ebp
c000eb21:	57                   	push   edi
c000eb22:	56                   	push   esi
c000eb23:	53                   	push   ebx
c000eb24:	83 ec 1c             	sub    esp,0x1c
c000eb27:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000eb2b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000eb2f:	85 c0                	test   eax,eax
c000eb31:	79 02                	jns    c000eb35 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000eb33:	31 c0                	xor    eax,eax
c000eb35:	c1 e0 02             	shl    eax,0x2
c000eb38:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000eb3c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000eb40:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eb44:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000eb48:	39 d8                	cmp    eax,ebx
c000eb4a:	7e 49                	jle    c000eb95 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000eb4c:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000eb52:	7c 41                	jl     c000eb95 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000eb54:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000eb58:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000eb5c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000eb60:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000eb64:	39 f9                	cmp    ecx,edi
c000eb66:	7e 22                	jle    c000eb8a <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000eb68:	83 c5 04             	add    ebp,0x4
c000eb6b:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000eb71:	7c 14                	jl     c000eb87 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000eb73:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000eb75:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000eb78:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000eb7c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000eb80:	56                   	push   esi
c000eb81:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000eb84:	83 c4 10             	add    esp,0x10
c000eb87:	47                   	inc    edi
c000eb88:	eb d2                	jmp    c000eb5c <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000eb8a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eb8e:	43                   	inc    ebx
c000eb8f:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000eb93:	eb ab                	jmp    c000eb40 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000eb95:	83 c4 1c             	add    esp,0x1c
c000eb98:	5b                   	pop    ebx
c000eb99:	5e                   	pop    esi
c000eb9a:	5f                   	pop    edi
c000eb9b:	5d                   	pop    ebp
c000eb9c:	c3                   	ret    
c000eb9d:	90                   	nop

c000eb9e <Video::clearScreen(unsigned int)>:
c000eb9e:	57                   	push   edi
c000eb9f:	56                   	push   esi
c000eba0:	53                   	push   ebx
c000eba1:	31 db                	xor    ebx,ebx
c000eba3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000eba7:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000ebad:	7e 1f                	jle    c000ebce <Video::clearScreen(unsigned int)+0x30>
c000ebaf:	31 ff                	xor    edi,edi
c000ebb1:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000ebb7:	7e 12                	jle    c000ebcb <Video::clearScreen(unsigned int)+0x2d>
c000ebb9:	8b 06                	mov    eax,DWORD PTR [esi]
c000ebbb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ebbf:	53                   	push   ebx
c000ebc0:	57                   	push   edi
c000ebc1:	47                   	inc    edi
c000ebc2:	56                   	push   esi
c000ebc3:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ebc6:	83 c4 10             	add    esp,0x10
c000ebc9:	eb e6                	jmp    c000ebb1 <Video::clearScreen(unsigned int)+0x13>
c000ebcb:	43                   	inc    ebx
c000ebcc:	eb d9                	jmp    c000eba7 <Video::clearScreen(unsigned int)+0x9>
c000ebce:	5b                   	pop    ebx
c000ebcf:	5e                   	pop    esi
c000ebd0:	5f                   	pop    edi
c000ebd1:	c3                   	ret    

c000ebd2 <Video::putpixel(int, int, unsigned int)>:
c000ebd2:	c7 44 24 04 e8 1e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021ee8
c000ebda:	e9 d0 2a 00 00       	jmp    c00116af <KePanic(char const*)>
c000ebdf:	90                   	nop

c000ebe0 <Video::readPixelApprox(int, int)>:
c000ebe0:	83 ec 18             	sub    esp,0x18
c000ebe3:	68 09 1f 02 c0       	push   0xc0021f09
c000ebe8:	e8 c2 2a 00 00       	call   c00116af <KePanic(char const*)>
c000ebed:	31 c0                	xor    eax,eax
c000ebef:	83 c4 1c             	add    esp,0x1c
c000ebf2:	c3                   	ret    
c000ebf3:	90                   	nop

c000ebf4 <Video::Video(char const*)>:
c000ebf4:	83 ec 0c             	sub    esp,0xc
c000ebf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebfb:	83 ec 08             	sub    esp,0x8
c000ebfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ec02:	50                   	push   eax
c000ec03:	e8 e6 df ff ff       	call   c000cbee <Device::Device(char const*)>
c000ec08:	83 c4 10             	add    esp,0x10
c000ec0b:	ba 84 1f 02 c0       	mov    edx,0xc0021f84
c000ec10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ec14:	89 10                	mov    DWORD PTR [eax],edx
c000ec16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ec1a:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000ec24:	90                   	nop
c000ec25:	83 c4 0c             	add    esp,0xc
c000ec28:	c3                   	ret    
c000ec29:	90                   	nop

c000ec2a <Video::~Video()>:
c000ec2a:	83 ec 0c             	sub    esp,0xc
c000ec2d:	ba 84 1f 02 c0       	mov    edx,0xc0021f84
c000ec32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ec36:	89 10                	mov    DWORD PTR [eax],edx
c000ec38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ec3c:	83 ec 0c             	sub    esp,0xc
c000ec3f:	50                   	push   eax
c000ec40:	e8 13 dd ff ff       	call   c000c958 <Device::~Device()>
c000ec45:	83 c4 10             	add    esp,0x10
c000ec48:	90                   	nop
c000ec49:	83 c4 0c             	add    esp,0xc
c000ec4c:	c3                   	ret    
c000ec4d:	90                   	nop

c000ec4e <Video::~Video()>:
c000ec4e:	83 ec 0c             	sub    esp,0xc
c000ec51:	83 ec 0c             	sub    esp,0xc
c000ec54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ec58:	e8 cd ff ff ff       	call   c000ec2a <Video::~Video()>
c000ec5d:	83 c4 10             	add    esp,0x10
c000ec60:	83 ec 08             	sub    esp,0x8
c000ec63:	68 64 01 00 00       	push   0x164
c000ec68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ec6c:	e8 a7 bb ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000ec71:	83 c4 10             	add    esp,0x10
c000ec74:	83 c4 0c             	add    esp,0xc
c000ec77:	c3                   	ret    

c000ec78 <Video::isMonochrome()>:
c000ec78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec7c:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000ec82:	c3                   	ret    
c000ec83:	90                   	nop

c000ec84 <Video::getWidth()>:
c000ec84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec88:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ec8e:	c3                   	ret    
c000ec8f:	90                   	nop

c000ec90 <Video::getHeight()>:
c000ec90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec94:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000ec9a:	c3                   	ret    
c000ec9b:	90                   	nop

c000ec9c <Video::drawCursor(int, int, unsigned int*, int)>:
c000ec9c:	55                   	push   ebp
c000ec9d:	57                   	push   edi
c000ec9e:	56                   	push   esi
c000ec9f:	53                   	push   ebx
c000eca0:	83 ec 2c             	sub    esp,0x2c
c000eca3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000eca7:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000ecab:	83 f8 01             	cmp    eax,0x1
c000ecae:	19 c9                	sbb    ecx,ecx
c000ecb0:	31 db                	xor    ebx,ebx
c000ecb2:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000ecb6:	89 cd                	mov    ebp,ecx
c000ecb8:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000ecc0:	f7 d5                	not    ebp
c000ecc2:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000ecc8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000eccc:	01 d8                	add    eax,ebx
c000ecce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ecd2:	56                   	push   esi
c000ecd3:	e8 b8 ff ff ff       	call   c000ec90 <Video::getHeight()>
c000ecd8:	59                   	pop    ecx
c000ecd9:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000ecdd:	7e 70                	jle    c000ed4f <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000ecdf:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ece3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000ece7:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000ecea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ecee:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ecf2:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000ecf9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ecfd:	89 f8                	mov    eax,edi
c000ecff:	83 c0 20             	add    eax,0x20
c000ed02:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ed06:	56                   	push   esi
c000ed07:	e8 78 ff ff ff       	call   c000ec84 <Video::getWidth()>
c000ed0c:	5a                   	pop    edx
c000ed0d:	39 c7                	cmp    edi,eax
c000ed0f:	7d 34                	jge    c000ed45 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000ed11:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000ed16:	74 05                	je     c000ed1d <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000ed18:	8b 06                	mov    eax,DWORD PTR [esi]
c000ed1a:	55                   	push   ebp
c000ed1b:	eb 0d                	jmp    c000ed2a <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000ed1d:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000ed22:	74 12                	je     c000ed36 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000ed24:	8b 06                	mov    eax,DWORD PTR [esi]
c000ed26:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ed2a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ed2e:	57                   	push   edi
c000ed2f:	56                   	push   esi
c000ed30:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ed33:	83 c4 10             	add    esp,0x10
c000ed36:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000ed3a:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000ed3e:	47                   	inc    edi
c000ed3f:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000ed43:	75 c1                	jne    c000ed06 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000ed45:	43                   	inc    ebx
c000ed46:	83 fb 20             	cmp    ebx,0x20
c000ed49:	0f 85 79 ff ff ff    	jne    c000ecc8 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000ed4f:	83 c4 2c             	add    esp,0x2c
c000ed52:	5b                   	pop    ebx
c000ed53:	5e                   	pop    esi
c000ed54:	5f                   	pop    edi
c000ed55:	5d                   	pop    ebp
c000ed56:	c3                   	ret    
c000ed57:	90                   	nop

c000ed58 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000ed58:	55                   	push   ebp
c000ed59:	57                   	push   edi
c000ed5a:	56                   	push   esi
c000ed5b:	53                   	push   ebx
c000ed5c:	83 ec 28             	sub    esp,0x28
c000ed5f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000ed63:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000ed67:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000ed6b:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000ed6f:	c1 e6 08             	shl    esi,0x8
c000ed72:	01 c6                	add    esi,eax
c000ed74:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000ed78:	c1 e0 08             	shl    eax,0x8
c000ed7b:	01 d0                	add    eax,edx
c000ed7d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ed81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ed85:	0f af c6             	imul   eax,esi
c000ed88:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000ed8f:	50                   	push   eax
c000ed90:	e8 21 8d ff ff       	call   c0007ab6 <malloc>
c000ed95:	83 c4 10             	add    esp,0x10
c000ed98:	89 c7                	mov    edi,eax
c000ed9a:	85 c0                	test   eax,eax
c000ed9c:	75 10                	jne    c000edae <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000ed9e:	83 ec 0c             	sub    esp,0xc
c000eda1:	68 34 1f 02 c0       	push   0xc0021f34
c000eda6:	e8 04 29 00 00       	call   c00116af <KePanic(char const*)>
c000edab:	83 c4 10             	add    esp,0x10
c000edae:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000edb2:	ba 12 00 00 00       	mov    edx,0x12
c000edb7:	85 c0                	test   eax,eax
c000edb9:	74 11                	je     c000edcc <Video::tgaParse(unsigned char*, int, int*, int*)+0x74>
c000edbb:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000edbf:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000edc3:	c1 fa 03             	sar    edx,0x3
c000edc6:	0f af d1             	imul   edx,ecx
c000edc9:	83 c2 12             	add    edx,0x12
c000edcc:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000edd0:	74 04                	je     c000edd6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7e>
c000edd2:	85 f6                	test   esi,esi
c000edd4:	75 12                	jne    c000ede8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x90>
c000edd6:	83 ec 0c             	sub    esp,0xc
c000edd9:	68 44 1f 02 c0       	push   0xc0021f44
c000edde:	e8 62 bb ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ede3:	e9 b8 00 00 00       	jmp    c000eea0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x148>
c000ede8:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000edec:	83 f9 02             	cmp    ecx,0x2
c000edef:	0f 85 96 00 00 00    	jne    c000ee8b <Video::tgaParse(unsigned char*, int, int*, int*)+0x133>
c000edf5:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000edfa:	75 0e                	jne    c000ee0a <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000edfc:	85 c0                	test   eax,eax
c000edfe:	75 0a                	jne    c000ee0a <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000ee00:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000ee03:	83 e8 18             	sub    eax,0x18
c000ee06:	a8 f7                	test   al,0xf7
c000ee08:	74 0a                	je     c000ee14 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000ee0a:	83 ec 0c             	sub    esp,0xc
c000ee0d:	68 59 1f 02 c0       	push   0xc0021f59
c000ee12:	eb 7f                	jmp    c000ee93 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13b>
c000ee14:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ee1c:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000ee24:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000ee28:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000ee30:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000ee34:	75 0c                	jne    c000ee42 <Video::tgaParse(unsigned char*, int, int*, int*)+0xea>
c000ee36:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000ee3b:	c1 e0 18             	shl    eax,0x18
c000ee3e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ee42:	45                   	inc    ebp
c000ee43:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000ee48:	c1 e1 10             	shl    ecx,0x10
c000ee4b:	89 c8                	mov    eax,ecx
c000ee4d:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000ee52:	c1 e1 08             	shl    ecx,0x8
c000ee55:	09 c1                	or     ecx,eax
c000ee57:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000ee5b:	09 c1                	or     ecx,eax
c000ee5d:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000ee61:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000ee65:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000ee69:	c1 f8 03             	sar    eax,0x3
c000ee6c:	01 c2                	add    edx,eax
c000ee6e:	89 e8                	mov    eax,ebp
c000ee70:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000ee74:	39 c6                	cmp    esi,eax
c000ee76:	7f b0                	jg     c000ee28 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd0>
c000ee78:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000ee7c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ee80:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000ee83:	7e 22                	jle    c000eea7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14f>
c000ee85:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000ee89:	eb 99                	jmp    c000ee24 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcc>
c000ee8b:	50                   	push   eax
c000ee8c:	50                   	push   eax
c000ee8d:	51                   	push   ecx
c000ee8e:	68 67 1f 02 c0       	push   0xc0021f67
c000ee93:	e8 ad ba ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ee98:	89 3c 24             	mov    DWORD PTR [esp],edi
c000ee9b:	e8 26 8c ff ff       	call   c0007ac6 <free>
c000eea0:	83 c4 10             	add    esp,0x10
c000eea3:	31 ff                	xor    edi,edi
c000eea5:	eb 0f                	jmp    c000eeb6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000eea7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eeab:	89 30                	mov    DWORD PTR [eax],esi
c000eead:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000eeb1:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000eeb4:	89 30                	mov    DWORD PTR [eax],esi
c000eeb6:	83 c4 1c             	add    esp,0x1c
c000eeb9:	89 f8                	mov    eax,edi
c000eebb:	5b                   	pop    ebx
c000eebc:	5e                   	pop    esi
c000eebd:	5f                   	pop    edi
c000eebe:	5d                   	pop    ebp
c000eebf:	c3                   	ret    

c000eec0 <Video::putTGA(int, int, unsigned char*, int)>:
c000eec0:	55                   	push   ebp
c000eec1:	57                   	push   edi
c000eec2:	56                   	push   esi
c000eec3:	53                   	push   ebx
c000eec4:	83 ec 28             	sub    esp,0x28
c000eec7:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000eecb:	8d 44 24 18          	lea    eax,[esp+0x18]
c000eecf:	50                   	push   eax
c000eed0:	8d 44 24 18          	lea    eax,[esp+0x18]
c000eed4:	50                   	push   eax
c000eed5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000eed9:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000eedd:	56                   	push   esi
c000eede:	e8 75 fe ff ff       	call   c000ed58 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000eee3:	83 c4 20             	add    esp,0x20
c000eee6:	85 c0                	test   eax,eax
c000eee8:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000eeec:	74 35                	je     c000ef23 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000eeee:	89 c7                	mov    edi,eax
c000eef0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000eef4:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000eef8:	39 d8                	cmp    eax,ebx
c000eefa:	7e 27                	jle    c000ef23 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000eefc:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ef00:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ef04:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000ef08:	39 e8                	cmp    eax,ebp
c000ef0a:	7e 14                	jle    c000ef20 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000ef0c:	8b 06                	mov    eax,DWORD PTR [esi]
c000ef0e:	83 c7 04             	add    edi,0x4
c000ef11:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000ef14:	53                   	push   ebx
c000ef15:	55                   	push   ebp
c000ef16:	45                   	inc    ebp
c000ef17:	56                   	push   esi
c000ef18:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ef1b:	83 c4 10             	add    esp,0x10
c000ef1e:	eb e0                	jmp    c000ef00 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000ef20:	43                   	inc    ebx
c000ef21:	eb cd                	jmp    c000eef0 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000ef23:	83 c4 1c             	add    esp,0x1c
c000ef26:	5b                   	pop    ebx
c000ef27:	5e                   	pop    esi
c000ef28:	5f                   	pop    edi
c000ef29:	5d                   	pop    ebp
c000ef2a:	c3                   	ret    
c000ef2b:	90                   	nop

c000ef2c <ACPI::close(int, int, void*)>:
c000ef2c:	83 ec 1c             	sub    esp,0x1c
c000ef2f:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000ef37:	74 0b                	je     c000ef44 <ACPI::close(int, int, void*)+0x18>
c000ef39:	b8 00 00 00 00       	mov    eax,0x0
c000ef3e:	e9 99 00 00 00       	jmp    c000efdc <ACPI::close(int, int, void*)+0xb0>
c000ef43:	90                   	nop
c000ef44:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000ef49:	75 29                	jne    c000ef74 <ACPI::close(int, int, void*)+0x48>
c000ef4b:	a1 08 b9 02 c0       	mov    eax,ds:0xc002b908
c000ef50:	85 c0                	test   eax,eax
c000ef52:	74 08                	je     c000ef5c <ACPI::close(int, int, void*)+0x30>
c000ef54:	a1 08 b9 02 c0       	mov    eax,ds:0xc002b908
c000ef59:	ff d0                	call   eax
c000ef5b:	90                   	nop
c000ef5c:	83 ec 0c             	sub    esp,0xc
c000ef5f:	68 c8 1f 02 c0       	push   0xc0021fc8
c000ef64:	e8 46 27 00 00       	call   c00116af <KePanic(char const*)>
c000ef69:	83 c4 10             	add    esp,0x10
c000ef6c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef71:	eb 69                	jmp    c000efdc <ACPI::close(int, int, void*)+0xb0>
c000ef73:	90                   	nop
c000ef74:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000ef79:	75 59                	jne    c000efd4 <ACPI::close(int, int, void*)+0xa8>
c000ef7b:	a1 04 b9 02 c0       	mov    eax,ds:0xc002b904
c000ef80:	85 c0                	test   eax,eax
c000ef82:	74 08                	je     c000ef8c <ACPI::close(int, int, void*)+0x60>
c000ef84:	a1 04 b9 02 c0       	mov    eax,ds:0xc002b904
c000ef89:	ff d0                	call   eax
c000ef8b:	90                   	nop
c000ef8c:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000ef91:	8d 76 00             	lea    esi,[esi+0x0]
c000ef94:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000ef99:	83 e0 02             	and    eax,0x2
c000ef9c:	74 1e                	je     c000efbc <ACPI::close(int, int, void*)+0x90>
c000ef9e:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000efa5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000efa9:	89 c2                	mov    edx,eax
c000efab:	ec                   	in     al,dx
c000efac:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000efb0:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000efb4:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000efb8:	eb da                	jmp    c000ef94 <ACPI::close(int, int, void*)+0x68>
c000efba:	66 90                	xchg   ax,ax
c000efbc:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000efc3:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000efc8:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000efcc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000efd0:	ee                   	out    dx,al
c000efd1:	8d 76 00             	lea    esi,[esi+0x0]
c000efd4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000efd9:	8d 76 00             	lea    esi,[esi+0x0]
c000efdc:	83 c4 1c             	add    esp,0x1c
c000efdf:	c3                   	ret    

c000efe0 <findRSDP()>:
c000efe0:	83 ec 1c             	sub    esp,0x1c
c000efe3:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000efe8:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000efee:	83 e0 04             	and    eax,0x4
c000eff1:	0f b6 c0             	movzx  eax,al
c000eff4:	85 c0                	test   eax,eax
c000eff6:	75 08                	jne    c000f000 <findRSDP()+0x20>
c000eff8:	b8 00 00 00 00       	mov    eax,0x0
c000effd:	eb 75                	jmp    c000f074 <findRSDP()+0x94>
c000efff:	90                   	nop
c000f000:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c000f005:	3d ff 07 00 00       	cmp    eax,0x7ff
c000f00a:	7f 1c                	jg     c000f028 <findRSDP()+0x48>
c000f00c:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f011:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f017:	83 e2 fb             	and    edx,0xfffffffb
c000f01a:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f020:	b8 00 00 00 00       	mov    eax,0x0
c000f025:	eb 4d                	jmp    c000f074 <findRSDP()+0x94>
c000f027:	90                   	nop
c000f028:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000f030:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000f038:	77 32                	ja     c000f06c <findRSDP()+0x8c>
c000f03a:	83 ec 04             	sub    esp,0x4
c000f03d:	6a 08                	push   0x8
c000f03f:	68 63 20 02 c0       	push   0xc0022063
c000f044:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f048:	e8 33 13 ff ff       	call   c0000380 <memcmp>
c000f04d:	83 c4 10             	add    esp,0x10
c000f050:	85 c0                	test   eax,eax
c000f052:	0f 94 c0             	sete   al
c000f055:	0f b6 c0             	movzx  eax,al
c000f058:	85 c0                	test   eax,eax
c000f05a:	74 08                	je     c000f064 <findRSDP()+0x84>
c000f05c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f060:	eb 12                	jmp    c000f074 <findRSDP()+0x94>
c000f062:	66 90                	xchg   ax,ax
c000f064:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000f069:	eb c5                	jmp    c000f030 <findRSDP()+0x50>
c000f06b:	90                   	nop
c000f06c:	b8 00 00 00 00       	mov    eax,0x0
c000f071:	8d 76 00             	lea    esi,[esi+0x0]
c000f074:	83 c4 1c             	add    esp,0x1c
c000f077:	c3                   	ret    

c000f078 <loadACPITables(unsigned char*)>:
c000f078:	57                   	push   edi
c000f079:	56                   	push   esi
c000f07a:	53                   	push   ebx
c000f07b:	83 ec 60             	sub    esp,0x60
c000f07e:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f083:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f089:	83 e0 04             	and    eax,0x4
c000f08c:	0f b6 c0             	movzx  eax,al
c000f08f:	85 c0                	test   eax,eax
c000f091:	0f 84 41 02 00 00    	je     c000f2d8 <loadACPITables(unsigned char*)+0x260>
c000f097:	a0 20 bb 02 c0       	mov    al,ds:0xc002bb20
c000f09c:	0f b6 c0             	movzx  eax,al
c000f09f:	85 c0                	test   eax,eax
c000f0a1:	74 79                	je     c000f11c <loadACPITables(unsigned char*)+0xa4>
c000f0a3:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f0a7:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000f0ab:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000f0af:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f0b2:	83 e8 24             	sub    eax,0x24
c000f0b5:	c1 e8 03             	shr    eax,0x3
c000f0b8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f0bc:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000f0c4:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000f0c8:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000f0cc:	0f 8d ba 00 00 00    	jge    c000f18c <loadACPITables(unsigned char*)+0x114>
c000f0d2:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f0d6:	83 c0 24             	add    eax,0x24
c000f0d9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000f0dd:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f0e1:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f0e5:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000f0e9:	c1 e0 03             	shl    eax,0x3
c000f0ec:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000f0f0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f0f4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f0f7:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0f9:	89 c1                	mov    ecx,eax
c000f0fb:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f100:	8d 50 01             	lea    edx,[eax+0x1]
c000f103:	89 15 0c b9 02 c0    	mov    DWORD PTR ds:0xc002b90c,edx
c000f109:	89 ca                	mov    edx,ecx
c000f10b:	89 14 c5 24 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd46dc],edx
c000f112:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000f117:	eb ab                	jmp    c000f0c4 <loadACPITables(unsigned char*)+0x4c>
c000f119:	8d 76 00             	lea    esi,[esi+0x0]
c000f11c:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f120:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f124:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f128:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f12b:	83 e8 24             	sub    eax,0x24
c000f12e:	c1 e8 02             	shr    eax,0x2
c000f131:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f135:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000f13d:	8d 76 00             	lea    esi,[esi+0x0]
c000f140:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000f144:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000f148:	7d 42                	jge    c000f18c <loadACPITables(unsigned char*)+0x114>
c000f14a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f14e:	83 c0 24             	add    eax,0x24
c000f151:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000f155:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f159:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000f15d:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000f161:	c1 e0 02             	shl    eax,0x2
c000f164:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000f168:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f16c:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f16e:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f173:	8d 50 01             	lea    edx,[eax+0x1]
c000f176:	89 15 0c b9 02 c0    	mov    DWORD PTR ds:0xc002b90c,edx
c000f17c:	89 ca                	mov    edx,ecx
c000f17e:	89 14 c5 24 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd46dc],edx
c000f185:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000f18a:	eb b4                	jmp    c000f140 <loadACPITables(unsigned char*)+0xc8>
c000f18c:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000f194:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f199:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000f19d:	0f 8d 39 01 00 00    	jge    c000f2dc <loadACPITables(unsigned char*)+0x264>
c000f1a3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f1a7:	8b 04 c5 24 b9 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd46dc]
c000f1ae:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f1b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f1b6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f1ba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f1be:	25 ff 0f 00 00       	and    eax,0xfff
c000f1c3:	89 c6                	mov    esi,eax
c000f1c5:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f1cb:	83 ec 0c             	sub    esp,0xc
c000f1ce:	6a 01                	push   0x1
c000f1d0:	e8 38 a4 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000f1d5:	83 c4 10             	add    esp,0x10
c000f1d8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f1dc:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f1e2:	83 ec 0c             	sub    esp,0xc
c000f1e5:	6a 01                	push   0x1
c000f1e7:	6a 01                	push   0x1
c000f1e9:	50                   	push   eax
c000f1ea:	52                   	push   edx
c000f1eb:	53                   	push   ebx
c000f1ec:	e8 29 ad ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f1f1:	83 c4 20             	add    esp,0x20
c000f1f4:	09 f0                	or     eax,esi
c000f1f6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f1fa:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f1fe:	c1 e0 03             	shl    eax,0x3
c000f201:	05 20 b9 02 c0       	add    eax,0xc002b920
c000f206:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f20a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f20e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f212:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000f21a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f21e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f222:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f226:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f22a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f22e:	89 c6                	mov    esi,eax
c000f230:	89 d7                	mov    edi,edx
c000f232:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f234:	89 c8                	mov    eax,ecx
c000f236:	89 fa                	mov    edx,edi
c000f238:	89 f3                	mov    ebx,esi
c000f23a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000f23e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000f242:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f246:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f24a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f24d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f251:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f255:	05 00 10 00 00       	add    eax,0x1000
c000f25a:	c1 e8 0c             	shr    eax,0xc
c000f25d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f261:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f265:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000f269:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f26d:	25 ff 0f 00 00       	and    eax,0xfff
c000f272:	89 c6                	mov    esi,eax
c000f274:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f27a:	83 ec 0c             	sub    esp,0xc
c000f27d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f281:	e8 87 a3 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000f286:	83 c4 10             	add    esp,0x10
c000f289:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f28d:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f293:	83 ec 0c             	sub    esp,0xc
c000f296:	6a 01                	push   0x1
c000f298:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f29c:	50                   	push   eax
c000f29d:	52                   	push   edx
c000f29e:	53                   	push   ebx
c000f29f:	e8 76 ac ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f2a4:	83 c4 20             	add    esp,0x20
c000f2a7:	09 f0                	or     eax,esi
c000f2a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f2ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f2b1:	83 ec 0c             	sub    esp,0xc
c000f2b4:	50                   	push   eax
c000f2b5:	e8 71 a6 ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c000f2ba:	83 c4 10             	add    esp,0x10
c000f2bd:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f2c1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f2c5:	89 14 c5 24 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd46dc],edx
c000f2cc:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000f2d1:	e9 be fe ff ff       	jmp    c000f194 <loadACPITables(unsigned char*)+0x11c>
c000f2d6:	66 90                	xchg   ax,ax
c000f2d8:	90                   	nop
c000f2d9:	8d 76 00             	lea    esi,[esi+0x0]
c000f2dc:	83 c4 60             	add    esp,0x60
c000f2df:	5b                   	pop    ebx
c000f2e0:	5e                   	pop    esi
c000f2e1:	5f                   	pop    edi
c000f2e2:	c3                   	ret    
c000f2e3:	90                   	nop

c000f2e4 <findRSDT(unsigned char*)>:
c000f2e4:	57                   	push   edi
c000f2e5:	56                   	push   esi
c000f2e6:	53                   	push   ebx
c000f2e7:	83 ec 50             	sub    esp,0x50
c000f2ea:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f2ef:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f2f5:	83 e0 04             	and    eax,0x4
c000f2f8:	0f b6 c0             	movzx  eax,al
c000f2fb:	85 c0                	test   eax,eax
c000f2fd:	75 0d                	jne    c000f30c <findRSDT(unsigned char*)+0x28>
c000f2ff:	b8 00 00 00 00       	mov    eax,0x0
c000f304:	e9 2b 01 00 00       	jmp    c000f434 <findRSDT(unsigned char*)+0x150>
c000f309:	8d 76 00             	lea    esi,[esi+0x0]
c000f30c:	89 e0                	mov    eax,esp
c000f30e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f312:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f316:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000f31a:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000f322:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f326:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f32a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f32e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000f332:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000f336:	89 c6                	mov    esi,eax
c000f338:	89 d7                	mov    edi,edx
c000f33a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f33c:	89 c8                	mov    eax,ecx
c000f33e:	89 fa                	mov    edx,edi
c000f340:	89 f3                	mov    ebx,esi
c000f342:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000f346:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000f34a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f34e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f352:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000f356:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000f35e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f362:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f366:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f36a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f36e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f372:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f376:	25 ff 0f 00 00       	and    eax,0xfff
c000f37b:	89 c6                	mov    esi,eax
c000f37d:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f383:	83 ec 0c             	sub    esp,0xc
c000f386:	6a 02                	push   0x2
c000f388:	e8 80 a2 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000f38d:	83 c4 10             	add    esp,0x10
c000f390:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000f394:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f39a:	83 ec 0c             	sub    esp,0xc
c000f39d:	6a 01                	push   0x1
c000f39f:	6a 02                	push   0x2
c000f3a1:	50                   	push   eax
c000f3a2:	52                   	push   edx
c000f3a3:	53                   	push   ebx
c000f3a4:	e8 71 ab ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f3a9:	83 c4 20             	add    esp,0x20
c000f3ac:	09 f0                	or     eax,esi
c000f3ae:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f3b2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f3b6:	25 ff 0f 00 00       	and    eax,0xfff
c000f3bb:	89 c6                	mov    esi,eax
c000f3bd:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f3c3:	83 ec 0c             	sub    esp,0xc
c000f3c6:	6a 02                	push   0x2
c000f3c8:	e8 40 a2 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000f3cd:	83 c4 10             	add    esp,0x10
c000f3d0:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000f3d4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f3da:	83 ec 0c             	sub    esp,0xc
c000f3dd:	6a 01                	push   0x1
c000f3df:	6a 02                	push   0x2
c000f3e1:	50                   	push   eax
c000f3e2:	52                   	push   edx
c000f3e3:	53                   	push   ebx
c000f3e4:	e8 31 ab ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f3e9:	83 c4 20             	add    esp,0x20
c000f3ec:	09 f0                	or     eax,esi
c000f3ee:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f3f2:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f3f7:	85 c0                	test   eax,eax
c000f3f9:	75 11                	jne    c000f40c <findRSDT(unsigned char*)+0x128>
c000f3fb:	c6 05 20 bb 02 c0 00 	mov    BYTE PTR ds:0xc002bb20,0x0
c000f402:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f406:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f40a:	eb 24                	jmp    c000f430 <findRSDT(unsigned char*)+0x14c>
c000f40c:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f411:	83 f8 02             	cmp    eax,0x2
c000f414:	75 12                	jne    c000f428 <findRSDT(unsigned char*)+0x144>
c000f416:	c6 05 20 bb 02 c0 01 	mov    BYTE PTR ds:0xc002bb20,0x1
c000f41d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f421:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f425:	eb 09                	jmp    c000f430 <findRSDT(unsigned char*)+0x14c>
c000f427:	90                   	nop
c000f428:	b8 00 00 00 00       	mov    eax,0x0
c000f42d:	eb 05                	jmp    c000f434 <findRSDT(unsigned char*)+0x150>
c000f42f:	90                   	nop
c000f430:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f434:	83 c4 50             	add    esp,0x50
c000f437:	5b                   	pop    ebx
c000f438:	5e                   	pop    esi
c000f439:	5f                   	pop    edi
c000f43a:	c3                   	ret    
c000f43b:	90                   	nop

c000f43c <findDataTable(unsigned char*, char*)>:
c000f43c:	83 ec 1c             	sub    esp,0x1c
c000f43f:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f444:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f44a:	83 e0 04             	and    eax,0x4
c000f44d:	0f b6 c0             	movzx  eax,al
c000f450:	85 c0                	test   eax,eax
c000f452:	75 08                	jne    c000f45c <findDataTable(unsigned char*, char*)+0x20>
c000f454:	b8 00 00 00 00       	mov    eax,0x0
c000f459:	eb 5d                	jmp    c000f4b8 <findDataTable(unsigned char*, char*)+0x7c>
c000f45b:	90                   	nop
c000f45c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f464:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f469:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000f46d:	7d 41                	jge    c000f4b0 <findDataTable(unsigned char*, char*)+0x74>
c000f46f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f473:	c1 e0 03             	shl    eax,0x3
c000f476:	05 20 b9 02 c0       	add    eax,0xc002b920
c000f47b:	83 ec 04             	sub    esp,0x4
c000f47e:	6a 04                	push   0x4
c000f480:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f484:	50                   	push   eax
c000f485:	e8 f6 0e ff ff       	call   c0000380 <memcmp>
c000f48a:	83 c4 10             	add    esp,0x10
c000f48d:	85 c0                	test   eax,eax
c000f48f:	0f 94 c0             	sete   al
c000f492:	0f b6 c0             	movzx  eax,al
c000f495:	85 c0                	test   eax,eax
c000f497:	74 0f                	je     c000f4a8 <findDataTable(unsigned char*, char*)+0x6c>
c000f499:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f49d:	8b 04 c5 24 b9 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd46dc]
c000f4a4:	eb 12                	jmp    c000f4b8 <findDataTable(unsigned char*, char*)+0x7c>
c000f4a6:	66 90                	xchg   ax,ax
c000f4a8:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000f4ad:	eb b5                	jmp    c000f464 <findDataTable(unsigned char*, char*)+0x28>
c000f4af:	90                   	nop
c000f4b0:	b8 00 00 00 00       	mov    eax,0x0
c000f4b5:	8d 76 00             	lea    esi,[esi+0x0]
c000f4b8:	83 c4 1c             	add    esp,0x1c
c000f4bb:	c3                   	ret    

c000f4bc <scanMADT()>:
c000f4bc:	53                   	push   ebx
c000f4bd:	83 ec 38             	sub    esp,0x38
c000f4c0:	a1 d0 6e 02 c0       	mov    eax,ds:0xc0026ed0
c000f4c5:	25 00 04 00 00       	and    eax,0x400
c000f4ca:	74 14                	je     c000f4e0 <scanMADT()+0x24>
c000f4cc:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f4d1:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f4d7:	83 e2 fb             	and    edx,0xfffffffb
c000f4da:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f4e0:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f4e5:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f4eb:	83 e0 04             	and    eax,0x4
c000f4ee:	0f b6 c0             	movzx  eax,al
c000f4f1:	85 c0                	test   eax,eax
c000f4f3:	0f 84 6b 04 00 00    	je     c000f964 <scanMADT()+0x4a8>
c000f4f9:	e8 e2 fa ff ff       	call   c000efe0 <findRSDP()>
c000f4fe:	a3 2c bb 02 c0       	mov    ds:0xc002bb2c,eax
c000f503:	a1 2c bb 02 c0       	mov    eax,ds:0xc002bb2c
c000f508:	85 c0                	test   eax,eax
c000f50a:	75 1c                	jne    c000f528 <scanMADT()+0x6c>
c000f50c:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f511:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f517:	83 e2 fb             	and    edx,0xfffffffb
c000f51a:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f520:	e9 47 04 00 00       	jmp    c000f96c <scanMADT()+0x4b0>
c000f525:	8d 76 00             	lea    esi,[esi+0x0]
c000f528:	a1 2c bb 02 c0       	mov    eax,ds:0xc002bb2c
c000f52d:	83 ec 0c             	sub    esp,0xc
c000f530:	50                   	push   eax
c000f531:	e8 ae fd ff ff       	call   c000f2e4 <findRSDT(unsigned char*)>
c000f536:	83 c4 10             	add    esp,0x10
c000f539:	a3 28 bb 02 c0       	mov    ds:0xc002bb28,eax
c000f53e:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000f543:	85 c0                	test   eax,eax
c000f545:	75 19                	jne    c000f560 <scanMADT()+0xa4>
c000f547:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f54c:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f552:	83 e2 fb             	and    edx,0xfffffffb
c000f555:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f55b:	e9 0c 04 00 00       	jmp    c000f96c <scanMADT()+0x4b0>
c000f560:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000f565:	83 ec 0c             	sub    esp,0xc
c000f568:	50                   	push   eax
c000f569:	e8 0a fb ff ff       	call   c000f078 <loadACPITables(unsigned char*)>
c000f56e:	83 c4 10             	add    esp,0x10
c000f571:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000f576:	83 ec 08             	sub    esp,0x8
c000f579:	68 6c 20 02 c0       	push   0xc002206c
c000f57e:	50                   	push   eax
c000f57f:	e8 b8 fe ff ff       	call   c000f43c <findDataTable(unsigned char*, char*)>
c000f584:	83 c4 10             	add    esp,0x10
c000f587:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f58b:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000f590:	75 1a                	jne    c000f5ac <scanMADT()+0xf0>
c000f592:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f597:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f59d:	83 e2 fe             	and    edx,0xfffffffe
c000f5a0:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f5a6:	e9 c1 03 00 00       	jmp    c000f96c <scanMADT()+0x4b0>
c000f5ab:	90                   	nop
c000f5ac:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000f5b4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f5b8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f5bb:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000f5bf:	0f 87 a7 03 00 00    	ja     c000f96c <scanMADT()+0x4b0>
c000f5c5:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000f5cd:	0f 87 99 03 00 00    	ja     c000f96c <scanMADT()+0x4b0>
c000f5d3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5d7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f5db:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5df:	8d 50 01             	lea    edx,[eax+0x1]
c000f5e2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f5e6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f5ea:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f5ee:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000f5f2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5f6:	8d 50 01             	lea    edx,[eax+0x1]
c000f5f9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f5fd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f601:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f605:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000f609:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000f60e:	83 f8 02             	cmp    eax,0x2
c000f611:	0f 86 51 03 00 00    	jbe    c000f968 <scanMADT()+0x4ac>
c000f617:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f61c:	85 c0                	test   eax,eax
c000f61e:	75 58                	jne    c000f678 <scanMADT()+0x1bc>
c000f620:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f624:	8d 50 01             	lea    edx,[eax+0x1]
c000f627:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f62b:	8a 15 20 bd 02 c0    	mov    dl,BYTE PTR ds:0xc002bd20
c000f631:	0f b6 d2             	movzx  edx,dl
c000f634:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f638:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f63c:	88 82 60 bd 02 c0    	mov    BYTE PTR [edx-0x3ffd42a0],al
c000f642:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f646:	8d 50 01             	lea    edx,[eax+0x1]
c000f649:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f64d:	8a 15 20 bd 02 c0    	mov    dl,BYTE PTR ds:0xc002bd20
c000f653:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f656:	88 0d 20 bd 02 c0    	mov    BYTE PTR ds:0xc002bd20,cl
c000f65c:	0f b6 d2             	movzx  edx,dl
c000f65f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f663:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f667:	88 82 40 bd 02 c0    	mov    BYTE PTR [edx-0x3ffd42c0],al
c000f66d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f672:	e9 d9 02 00 00       	jmp    c000f950 <scanMADT()+0x494>
c000f677:	90                   	nop
c000f678:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f67d:	83 f8 01             	cmp    eax,0x1
c000f680:	0f 85 1a 01 00 00    	jne    c000f7a0 <scanMADT()+0x2e4>
c000f686:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f68a:	8d 50 01             	lea    edx,[eax+0x1]
c000f68d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f691:	8a 15 e0 bb 02 c0    	mov    dl,BYTE PTR ds:0xc002bbe0
c000f697:	0f b6 d2             	movzx  edx,dl
c000f69a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f69e:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f6a2:	88 82 00 bc 02 c0    	mov    BYTE PTR [edx-0x3ffd4400],al
c000f6a8:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000f6ad:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f6b1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f6b5:	01 d0                	add    eax,edx
c000f6b7:	83 c0 2c             	add    eax,0x2c
c000f6ba:	8a 00                	mov    al,BYTE PTR [eax]
c000f6bc:	0f b6 d0             	movzx  edx,al
c000f6bf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f6c3:	8d 48 01             	lea    ecx,[eax+0x1]
c000f6c6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f6ca:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f6ce:	0f b6 c0             	movzx  eax,al
c000f6d1:	c1 e0 08             	shl    eax,0x8
c000f6d4:	89 d1                	mov    ecx,edx
c000f6d6:	09 c1                	or     ecx,eax
c000f6d8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f6dc:	8d 50 02             	lea    edx,[eax+0x2]
c000f6df:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f6e3:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f6e7:	0f b6 c0             	movzx  eax,al
c000f6ea:	c1 e0 10             	shl    eax,0x10
c000f6ed:	09 c1                	or     ecx,eax
c000f6ef:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f6f3:	8d 50 03             	lea    edx,[eax+0x3]
c000f6f6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f6fa:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f6fe:	0f b6 c0             	movzx  eax,al
c000f701:	c1 e0 18             	shl    eax,0x18
c000f704:	09 c1                	or     ecx,eax
c000f706:	89 ca                	mov    edx,ecx
c000f708:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c000f70d:	0f b6 c0             	movzx  eax,al
c000f710:	89 14 85 20 bc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd43e0],edx
c000f717:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f71c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f720:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f724:	01 d0                	add    eax,edx
c000f726:	83 c0 2c             	add    eax,0x2c
c000f729:	8a 00                	mov    al,BYTE PTR [eax]
c000f72b:	0f b6 d0             	movzx  edx,al
c000f72e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f732:	8d 48 01             	lea    ecx,[eax+0x1]
c000f735:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f739:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f73d:	0f b6 c0             	movzx  eax,al
c000f740:	c1 e0 08             	shl    eax,0x8
c000f743:	89 d1                	mov    ecx,edx
c000f745:	09 c1                	or     ecx,eax
c000f747:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f74b:	8d 50 02             	lea    edx,[eax+0x2]
c000f74e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f752:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f756:	0f b6 c0             	movzx  eax,al
c000f759:	c1 e0 10             	shl    eax,0x10
c000f75c:	09 c1                	or     ecx,eax
c000f75e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f762:	8d 50 03             	lea    edx,[eax+0x3]
c000f765:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f769:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f76d:	0f b6 c0             	movzx  eax,al
c000f770:	c1 e0 18             	shl    eax,0x18
c000f773:	09 c1                	or     ecx,eax
c000f775:	89 ca                	mov    edx,ecx
c000f777:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c000f77c:	0f b6 c0             	movzx  eax,al
c000f77f:	89 14 85 a0 bc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4360],edx
c000f786:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f78b:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c000f790:	83 c0 01             	add    eax,0x1
c000f793:	a2 e0 bb 02 c0       	mov    ds:0xc002bbe0,al
c000f798:	e9 b3 01 00 00       	jmp    c000f950 <scanMADT()+0x494>
c000f79d:	8d 76 00             	lea    esi,[esi+0x0]
c000f7a0:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f7a5:	83 f8 02             	cmp    eax,0x2
c000f7a8:	0f 85 ea 00 00 00    	jne    c000f898 <scanMADT()+0x3dc>
c000f7ae:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7b2:	8d 50 01             	lea    edx,[eax+0x1]
c000f7b5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f7b9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f7bd:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f7c1:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000f7c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7c9:	8d 50 01             	lea    edx,[eax+0x1]
c000f7cc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f7d0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f7d4:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f7d8:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000f7dc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f7e0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7e4:	01 d0                	add    eax,edx
c000f7e6:	83 c0 2c             	add    eax,0x2c
c000f7e9:	8a 00                	mov    al,BYTE PTR [eax]
c000f7eb:	0f b6 d0             	movzx  edx,al
c000f7ee:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7f2:	8d 48 01             	lea    ecx,[eax+0x1]
c000f7f5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f7f9:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f7fd:	0f b6 c0             	movzx  eax,al
c000f800:	c1 e0 08             	shl    eax,0x8
c000f803:	89 d1                	mov    ecx,edx
c000f805:	09 c1                	or     ecx,eax
c000f807:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f80b:	8d 50 02             	lea    edx,[eax+0x2]
c000f80e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f812:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f816:	0f b6 c0             	movzx  eax,al
c000f819:	c1 e0 10             	shl    eax,0x10
c000f81c:	09 c1                	or     ecx,eax
c000f81e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f822:	8d 50 03             	lea    edx,[eax+0x3]
c000f825:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f829:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f82d:	0f b6 c0             	movzx  eax,al
c000f830:	c1 e0 18             	shl    eax,0x18
c000f833:	09 c8                	or     eax,ecx
c000f835:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f839:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f83e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f842:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f846:	01 d0                	add    eax,edx
c000f848:	83 c0 2c             	add    eax,0x2c
c000f84b:	8a 00                	mov    al,BYTE PTR [eax]
c000f84d:	0f b6 c0             	movzx  eax,al
c000f850:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f854:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f857:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f85b:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000f85f:	0f b6 d2             	movzx  edx,dl
c000f862:	c1 e2 08             	shl    edx,0x8
c000f865:	09 d0                	or     eax,edx
c000f867:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000f86c:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f871:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000f876:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f87a:	88 90 68 37 02 c0    	mov    BYTE PTR [eax-0x3ffdc898],dl
c000f880:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c000f885:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000f88a:	66 89 84 12 c0 bb 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd4440],ax
c000f892:	e9 b9 00 00 00       	jmp    c000f950 <scanMADT()+0x494>
c000f897:	90                   	nop
c000f898:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f89d:	83 f8 04             	cmp    eax,0x4
c000f8a0:	0f 85 9a 00 00 00    	jne    c000f940 <scanMADT()+0x484>
c000f8a6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f8aa:	8d 50 01             	lea    edx,[eax+0x1]
c000f8ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f8b1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f8b5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f8b9:	0f b6 c0             	movzx  eax,al
c000f8bc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f8c0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f8c4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f8c8:	01 d0                	add    eax,edx
c000f8ca:	83 c0 2c             	add    eax,0x2c
c000f8cd:	8a 00                	mov    al,BYTE PTR [eax]
c000f8cf:	0f b6 d0             	movzx  edx,al
c000f8d2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f8d6:	8d 48 01             	lea    ecx,[eax+0x1]
c000f8d9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f8dd:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f8e1:	0f b6 c0             	movzx  eax,al
c000f8e4:	c1 e0 08             	shl    eax,0x8
c000f8e7:	09 d0                	or     eax,edx
c000f8e9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f8ed:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f8f2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f8f6:	8d 50 01             	lea    edx,[eax+0x1]
c000f8f9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f8fd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f901:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f905:	0f b6 c0             	movzx  eax,al
c000f908:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f90c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f910:	c1 e0 08             	shl    eax,0x8
c000f913:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000f917:	89 c1                	mov    ecx,eax
c000f919:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f91d:	c1 e0 18             	shl    eax,0x18
c000f920:	89 c3                	mov    ebx,eax
c000f922:	a1 30 bb 02 c0       	mov    eax,ds:0xc002bb30
c000f927:	8d 50 01             	lea    edx,[eax+0x1]
c000f92a:	89 15 30 bb 02 c0    	mov    DWORD PTR ds:0xc002bb30,edx
c000f930:	09 d9                	or     ecx,ebx
c000f932:	89 ca                	mov    edx,ecx
c000f934:	89 14 85 40 bb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd44c0],edx
c000f93b:	eb 13                	jmp    c000f950 <scanMADT()+0x494>
c000f93d:	8d 76 00             	lea    esi,[esi+0x0]
c000f940:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f945:	83 f8 05             	cmp    eax,0x5
c000f948:	75 06                	jne    c000f950 <scanMADT()+0x494>
c000f94a:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000f94f:	90                   	nop
c000f950:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000f955:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f959:	01 d0                	add    eax,edx
c000f95b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f95f:	e9 50 fc ff ff       	jmp    c000f5b4 <scanMADT()+0xf8>
c000f964:	90                   	nop
c000f965:	eb 05                	jmp    c000f96c <scanMADT()+0x4b0>
c000f967:	90                   	nop
c000f968:	90                   	nop
c000f969:	8d 76 00             	lea    esi,[esi+0x0]
c000f96c:	83 c4 38             	add    esp,0x38
c000f96f:	5b                   	pop    ebx
c000f970:	c3                   	ret    
c000f971:	90                   	nop
c000f972:	66 90                	xchg   ax,ax

c000f974 <ACPI::ACPI()>:
c000f974:	83 ec 0c             	sub    esp,0xc
c000f977:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f97b:	83 ec 08             	sub    esp,0x8
c000f97e:	68 71 20 02 c0       	push   0xc0022071
c000f983:	50                   	push   eax
c000f984:	e8 65 d2 ff ff       	call   c000cbee <Device::Device(char const*)>
c000f989:	83 c4 10             	add    esp,0x10
c000f98c:	ba c4 21 02 c0       	mov    edx,0xc00221c4
c000f991:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f995:	89 10                	mov    DWORD PTR [eax],edx
c000f997:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f99b:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000f9a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f9a6:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000f9b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f9b4:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000f9be:	e8 f9 fa ff ff       	call   c000f4bc <scanMADT()>
c000f9c3:	90                   	nop
c000f9c4:	83 c4 0c             	add    esp,0xc
c000f9c7:	c3                   	ret    

c000f9c8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000f9c8:	83 ec 2c             	sub    esp,0x2c
c000f9cb:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000f9cf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f9d3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000f9d7:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000f9db:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000f9e0:	88 d0                	mov    al,dl
c000f9e2:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f9e6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f9eb:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000f9f3:	90                   	nop
c000f9f4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f9f8:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f9fe:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000fa02:	0f 8d b0 00 00 00    	jge    c000fab8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000fa08:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fa0c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000fa10:	83 c2 2a             	add    edx,0x2a
c000fa13:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000fa17:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000fa1c:	0f b7 c0             	movzx  eax,ax
c000fa1f:	39 c2                	cmp    edx,eax
c000fa21:	0f 85 85 00 00 00    	jne    c000faac <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000fa27:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fa2b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000fa2f:	83 c2 2a             	add    edx,0x2a
c000fa32:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000fa36:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000fa3b:	0f b6 c0             	movzx  eax,al
c000fa3e:	39 c2                	cmp    edx,eax
c000fa40:	75 6a                	jne    c000faac <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000fa42:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000fa47:	85 c0                	test   eax,eax
c000fa49:	74 3d                	je     c000fa88 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000fa4b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fa4f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000fa53:	83 c2 2a             	add    edx,0x2a
c000fa56:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000fa5a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fa5e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fa61:	39 c2                	cmp    edx,eax
c000fa63:	74 13                	je     c000fa78 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000fa65:	83 ec 0c             	sub    esp,0xc
c000fa68:	68 ec 1f 02 c0       	push   0xc0021fec
c000fa6d:	e8 3d 1c 00 00       	call   c00116af <KePanic(char const*)>
c000fa72:	83 c4 10             	add    esp,0x10
c000fa75:	8d 76 00             	lea    esi,[esi+0x0]
c000fa78:	83 ec 0c             	sub    esp,0xc
c000fa7b:	68 76 20 02 c0       	push   0xc0022076
c000fa80:	e8 2a 1c 00 00       	call   c00116af <KePanic(char const*)>
c000fa85:	83 c4 10             	add    esp,0x10
c000fa88:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fa8c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fa90:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000fa94:	83 c2 2a             	add    edx,0x2a
c000fa97:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000fa9b:	8b 02                	mov    eax,DWORD PTR [edx]
c000fa9d:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000faa0:	89 01                	mov    DWORD PTR [ecx],eax
c000faa2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000faa5:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000faaa:	66 90                	xchg   ax,ax
c000faac:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000fab1:	e9 3e ff ff ff       	jmp    c000f9f4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000fab6:	66 90                	xchg   ax,ax
c000fab8:	90                   	nop
c000fab9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fabd:	83 c4 2c             	add    esp,0x2c
c000fac0:	c2 04 00             	ret    0x4
c000fac3:	90                   	nop

c000fac4 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000fac4:	83 ec 1c             	sub    esp,0x1c
c000fac7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000facb:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000facf:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000fad3:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000fad8:	88 c8                	mov    al,cl
c000fada:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000fade:	88 d0                	mov    al,dl
c000fae0:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000fae4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fae8:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000faee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000faf2:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000faf5:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000faf9:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000fafd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb01:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000fb07:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000fb0b:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000fb0e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fb12:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000fb17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb1b:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fb21:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000fb25:	83 c0 01             	add    eax,0x1
c000fb28:	88 c1                	mov    cl,al
c000fb2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb2e:	83 c2 2a             	add    edx,0x2a
c000fb31:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000fb35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb39:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fb3f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb43:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000fb46:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000fb4a:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000fb4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb52:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000fb58:	8d 50 01             	lea    edx,[eax+0x1]
c000fb5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb5f:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000fb65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb69:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000fb6f:	3d 00 02 00 00       	cmp    eax,0x200
c000fb74:	75 12                	jne    c000fb88 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000fb76:	83 ec 0c             	sub    esp,0xc
c000fb79:	68 85 20 02 c0       	push   0xc0022085
c000fb7e:	e8 2c 1b 00 00       	call   c00116af <KePanic(char const*)>
c000fb83:	83 c4 10             	add    esp,0x10
c000fb86:	66 90                	xchg   ax,ax
c000fb88:	90                   	nop
c000fb89:	83 c4 1c             	add    esp,0x1c
c000fb8c:	c3                   	ret    
c000fb8d:	90                   	nop
c000fb8e:	66 90                	xchg   ax,ax

c000fb90 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000fb90:	b8 00 00 00 00       	mov    eax,0x0
c000fb95:	c3                   	ret    
c000fb96:	66 90                	xchg   ax,ax

c000fb98 <ACPI::detectPCI()>:
c000fb98:	53                   	push   ebx
c000fb99:	83 ec 28             	sub    esp,0x28
c000fb9c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000fba1:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000fba6:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000fbab:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000fbb1:	83 e0 04             	and    eax,0x4
c000fbb4:	0f b6 c0             	movzx  eax,al
c000fbb7:	85 c0                	test   eax,eax
c000fbb9:	74 2d                	je     c000fbe8 <ACPI::detectPCI()+0x50>
c000fbbb:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000fbc0:	83 ec 08             	sub    esp,0x8
c000fbc3:	68 a2 20 02 c0       	push   0xc00220a2
c000fbc8:	50                   	push   eax
c000fbc9:	e8 6e f8 ff ff       	call   c000f43c <findDataTable(unsigned char*, char*)>
c000fbce:	83 c4 10             	add    esp,0x10
c000fbd1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fbd5:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000fbda:	74 0c                	je     c000fbe8 <ACPI::detectPCI()+0x50>
c000fbdc:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fbe1:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000fbe6:	66 90                	xchg   ax,ax
c000fbe8:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000fbf0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fbf4:	8a 00                	mov    al,BYTE PTR [eax]
c000fbf6:	0f b6 c0             	movzx  eax,al
c000fbf9:	83 f8 01             	cmp    eax,0x1
c000fbfc:	75 0e                	jne    c000fc0c <ACPI::detectPCI()+0x74>
c000fbfe:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fc03:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000fc08:	eb 2e                	jmp    c000fc38 <ACPI::detectPCI()+0xa0>
c000fc0a:	66 90                	xchg   ax,ax
c000fc0c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fc10:	8a 00                	mov    al,BYTE PTR [eax]
c000fc12:	0f b6 c0             	movzx  eax,al
c000fc15:	83 f8 02             	cmp    eax,0x2
c000fc18:	75 1e                	jne    c000fc38 <ACPI::detectPCI()+0xa0>
c000fc1a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fc1f:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000fc24:	85 c0                	test   eax,eax
c000fc26:	74 10                	je     c000fc38 <ACPI::detectPCI()+0xa0>
c000fc28:	83 ec 0c             	sub    esp,0xc
c000fc2b:	68 1c 20 02 c0       	push   0xc002201c
c000fc30:	e8 7a 1a 00 00       	call   c00116af <KePanic(char const*)>
c000fc35:	83 c4 10             	add    esp,0x10
c000fc38:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000fc3c:	83 f0 01             	xor    eax,0x1
c000fc3f:	0f b6 c0             	movzx  eax,al
c000fc42:	85 c0                	test   eax,eax
c000fc44:	74 46                	je     c000fc8c <ACPI::detectPCI()+0xf4>
c000fc46:	e8 e5 04 ff ff       	call   c0000130 <manualPCIProbe>
c000fc4b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000fc4f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000fc54:	75 0e                	jne    c000fc64 <ACPI::detectPCI()+0xcc>
c000fc56:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fc5b:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000fc60:	eb 2a                	jmp    c000fc8c <ACPI::detectPCI()+0xf4>
c000fc62:	66 90                	xchg   ax,ax
c000fc64:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000fc69:	75 21                	jne    c000fc8c <ACPI::detectPCI()+0xf4>
c000fc6b:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fc70:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000fc75:	85 c0                	test   eax,eax
c000fc77:	74 13                	je     c000fc8c <ACPI::detectPCI()+0xf4>
c000fc79:	83 ec 0c             	sub    esp,0xc
c000fc7c:	68 1c 20 02 c0       	push   0xc002201c
c000fc81:	e8 29 1a 00 00       	call   c00116af <KePanic(char const*)>
c000fc86:	83 c4 10             	add    esp,0x10
c000fc89:	8d 76 00             	lea    esi,[esi+0x0]
c000fc8c:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000fc91:	85 c0                	test   eax,eax
c000fc93:	0f 84 87 00 00 00    	je     c000fd20 <ACPI::detectPCI()+0x188>
c000fc99:	83 ec 0c             	sub    esp,0xc
c000fc9c:	68 a7 20 02 c0       	push   0xc00220a7
c000fca1:	e8 09 13 00 00       	call   c0010faf <KeSetBootMessage(char const*)>
c000fca6:	83 c4 10             	add    esp,0x10
c000fca9:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000fcb1:	83 ec 0c             	sub    esp,0xc
c000fcb4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fcb8:	e8 f9 7d ff ff       	call   c0007ab6 <malloc>
c000fcbd:	83 c4 10             	add    esp,0x10
c000fcc0:	89 c3                	mov    ebx,eax
c000fcc2:	83 ec 0c             	sub    esp,0xc
c000fcc5:	53                   	push   ebx
c000fcc6:	e8 5d b5 00 00       	call   c001b228 <PCI::PCI()>
c000fccb:	83 c4 10             	add    esp,0x10
c000fcce:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000fcd2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fcd6:	83 ec 08             	sub    esp,0x8
c000fcd9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fcdd:	50                   	push   eax
c000fcde:	e8 73 cd ff ff       	call   c000ca56 <Device::addChild(Device*)>
c000fce3:	83 c4 10             	add    esp,0x10
c000fce6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fcea:	8b 00                	mov    eax,DWORD PTR [eax]
c000fcec:	83 c0 08             	add    eax,0x8
c000fcef:	8b 00                	mov    eax,DWORD PTR [eax]
c000fcf1:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000fcf6:	85 d2                	test   edx,edx
c000fcf8:	74 0a                	je     c000fd04 <ACPI::detectPCI()+0x16c>
c000fcfa:	ba 01 00 00 00       	mov    edx,0x1
c000fcff:	eb 0b                	jmp    c000fd0c <ACPI::detectPCI()+0x174>
c000fd01:	8d 76 00             	lea    esi,[esi+0x0]
c000fd04:	ba 02 00 00 00       	mov    edx,0x2
c000fd09:	8d 76 00             	lea    esi,[esi+0x0]
c000fd0c:	6a 00                	push   0x0
c000fd0e:	6a 00                	push   0x0
c000fd10:	52                   	push   edx
c000fd11:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fd15:	ff d0                	call   eax
c000fd17:	83 c4 10             	add    esp,0x10
c000fd1a:	e9 91 00 00 00       	jmp    c000fdb0 <ACPI::detectPCI()+0x218>
c000fd1f:	90                   	nop
c000fd20:	83 ec 0c             	sub    esp,0xc
c000fd23:	68 bf 20 02 c0       	push   0xc00220bf
c000fd28:	e8 82 12 00 00       	call   c0010faf <KeSetBootMessage(char const*)>
c000fd2d:	83 c4 10             	add    esp,0x10
c000fd30:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000fd37:	83 ec 0c             	sub    esp,0xc
c000fd3a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fd3e:	e8 73 7d ff ff       	call   c0007ab6 <malloc>
c000fd43:	83 c4 10             	add    esp,0x10
c000fd46:	89 c3                	mov    ebx,eax
c000fd48:	83 ec 0c             	sub    esp,0xc
c000fd4b:	53                   	push   ebx
c000fd4c:	e8 71 c0 00 00       	call   c001bdc2 <IDE::IDE()>
c000fd51:	83 c4 10             	add    esp,0x10
c000fd54:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000fd58:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fd5c:	83 ec 08             	sub    esp,0x8
c000fd5f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fd63:	50                   	push   eax
c000fd64:	e8 ed cc ff ff       	call   c000ca56 <Device::addChild(Device*)>
c000fd69:	83 c4 10             	add    esp,0x10
c000fd6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd70:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000fd7a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd7e:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000fd87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd8b:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000fd94:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd98:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd9a:	83 c0 08             	add    eax,0x8
c000fd9d:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd9f:	6a 00                	push   0x0
c000fda1:	6a 00                	push   0x0
c000fda3:	6a 00                	push   0x0
c000fda5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fda9:	ff d0                	call   eax
c000fdab:	83 c4 10             	add    esp,0x10
c000fdae:	66 90                	xchg   ax,ax
c000fdb0:	90                   	nop
c000fdb1:	83 c4 28             	add    esp,0x28
c000fdb4:	5b                   	pop    ebx
c000fdb5:	c3                   	ret    
c000fdb6:	66 90                	xchg   ax,ax

c000fdb8 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000fdb8:	83 ec 1c             	sub    esp,0x1c
c000fdbb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fdbf:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fdc2:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000fdc6:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000fdcb:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000fdd0:	83 ec 08             	sub    esp,0x8
c000fdd3:	52                   	push   edx
c000fdd4:	50                   	push   eax
c000fdd5:	e8 9e 73 ff ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c000fdda:	83 c4 10             	add    esp,0x10
c000fddd:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000fde1:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000fde6:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000fdeb:	83 ec 04             	sub    esp,0x4
c000fdee:	6a 01                	push   0x1
c000fdf0:	52                   	push   edx
c000fdf1:	50                   	push   eax
c000fdf2:	e8 9b 74 ff ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c000fdf7:	83 c4 10             	add    esp,0x10
c000fdfa:	90                   	nop
c000fdfb:	83 c4 1c             	add    esp,0x1c
c000fdfe:	c3                   	ret    
c000fdff:	90                   	nop

c000fe00 <ACPI::sleep()>:
c000fe00:	83 ec 0c             	sub    esp,0xc
c000fe03:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c000fe08:	85 c0                	test   eax,eax
c000fe0a:	74 08                	je     c000fe14 <ACPI::sleep()+0x14>
c000fe0c:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c000fe11:	ff d0                	call   eax
c000fe13:	90                   	nop
c000fe14:	90                   	nop
c000fe15:	83 c4 0c             	add    esp,0xc
c000fe18:	c3                   	ret    
c000fe19:	90                   	nop
c000fe1a:	66 90                	xchg   ax,ax

c000fe1c <ACPI::open(int, int, void*)>:
c000fe1c:	57                   	push   edi
c000fe1d:	56                   	push   esi
c000fe1e:	53                   	push   ebx
c000fe1f:	81 ec 70 01 00 00    	sub    esp,0x170
c000fe25:	83 ec 0c             	sub    esp,0xc
c000fe28:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000fe2f:	e8 64 fd ff ff       	call   c000fb98 <ACPI::detectPCI()>
c000fe34:	83 c4 10             	add    esp,0x10
c000fe37:	83 ec 0c             	sub    esp,0xc
c000fe3a:	68 44 20 02 c0       	push   0xc0022044
c000fe3f:	e8 6b 11 00 00       	call   c0010faf <KeSetBootMessage(char const*)>
c000fe44:	83 c4 10             	add    esp,0x10
c000fe47:	b8 4c 05 00 00       	mov    eax,0x54c
c000fe4c:	8a 00                	mov    al,BYTE PTR [eax]
c000fe4e:	88 84 24 6e 01 00 00 	mov    BYTE PTR [esp+0x16e],al
c000fe55:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000fe5d:	83 f8 01             	cmp    eax,0x1
c000fe60:	75 12                	jne    c000fe74 <ACPI::open(int, int, void*)+0x58>
c000fe62:	83 ec 0c             	sub    esp,0xc
c000fe65:	68 7e 19 02 c0       	push   0xc002197e
c000fe6a:	e8 06 4e 00 00       	call   c0014c75 <Thr::loadKernelSymbolTable(char const*)>
c000fe6f:	83 c4 10             	add    esp,0x10
c000fe72:	eb 34                	jmp    c000fea8 <ACPI::open(int, int, void*)+0x8c>
c000fe74:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000fe7c:	3d bb 00 00 00       	cmp    eax,0xbb
c000fe81:	75 15                	jne    c000fe98 <ACPI::open(int, int, void*)+0x7c>
c000fe83:	83 ec 0c             	sub    esp,0xc
c000fe86:	68 d4 20 02 c0       	push   0xc00220d4
c000fe8b:	e8 e5 4d 00 00       	call   c0014c75 <Thr::loadKernelSymbolTable(char const*)>
c000fe90:	83 c4 10             	add    esp,0x10
c000fe93:	eb 13                	jmp    c000fea8 <ACPI::open(int, int, void*)+0x8c>
c000fe95:	8d 76 00             	lea    esi,[esi+0x0]
c000fe98:	83 ec 0c             	sub    esp,0xc
c000fe9b:	68 f2 20 02 c0       	push   0xc00220f2
c000fea0:	e8 0a 18 00 00       	call   c00116af <KePanic(char const*)>
c000fea5:	83 c4 10             	add    esp,0x10
c000fea8:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000feb0:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000febb:	83 ec 0c             	sub    esp,0xc
c000febe:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000fec5:	e8 ec 7b ff ff       	call   c0007ab6 <malloc>
c000feca:	83 c4 10             	add    esp,0x10
c000fecd:	89 c3                	mov    ebx,eax
c000fecf:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000fed4:	83 ec 04             	sub    esp,0x4
c000fed7:	50                   	push   eax
c000fed8:	68 0c 21 02 c0       	push   0xc002210c
c000fedd:	53                   	push   ebx
c000fede:	e8 f9 bc ff ff       	call   c000bbdc <File::File(char const*, Process*)>
c000fee3:	83 c4 10             	add    esp,0x10
c000fee6:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000feed:	83 ec 08             	sub    esp,0x8
c000fef0:	6a 01                	push   0x1
c000fef2:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000fef9:	e8 fc bc ff ff       	call   c000bbfa <File::open(FileOpenMode)>
c000fefe:	83 c4 10             	add    esp,0x10
c000ff01:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000ff08:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000ff10:	75 16                	jne    c000ff28 <ACPI::open(int, int, void*)+0x10c>
c000ff12:	83 ec 0c             	sub    esp,0xc
c000ff15:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ff1c:	e8 37 bd ff ff       	call   c000bc58 <File::close()>
c000ff21:	83 c4 10             	add    esp,0x10
c000ff24:	eb 0a                	jmp    c000ff30 <ACPI::open(int, int, void*)+0x114>
c000ff26:	66 90                	xchg   ax,ax
c000ff28:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000ff30:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000ff38:	74 1e                	je     c000ff58 <ACPI::open(int, int, void*)+0x13c>
c000ff3a:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000ff41:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff43:	83 c0 08             	add    eax,0x8
c000ff46:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff48:	83 ec 0c             	sub    esp,0xc
c000ff4b:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ff52:	ff d0                	call   eax
c000ff54:	83 c4 10             	add    esp,0x10
c000ff57:	90                   	nop
c000ff58:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000ff5f:	83 f0 01             	xor    eax,0x1
c000ff62:	0f b6 c0             	movzx  eax,al
c000ff65:	85 c0                	test   eax,eax
c000ff67:	74 43                	je     c000ffac <ACPI::open(int, int, void*)+0x190>
c000ff69:	83 ec 0c             	sub    esp,0xc
c000ff6c:	68 2a 21 02 c0       	push   0xc002212a
c000ff71:	e8 39 10 00 00       	call   c0010faf <KeSetBootMessage(char const*)>
c000ff76:	83 c4 10             	add    esp,0x10
c000ff79:	83 ec 04             	sub    esp,0x4
c000ff7c:	6a 0c                	push   0xc
c000ff7e:	68 45 21 02 c0       	push   0xc0022145
c000ff83:	68 56 21 02 c0       	push   0xc0022156
c000ff88:	e8 6b 3f 00 00       	call   c0013ef8 <Reg::readIntWithDefault(char*, char*, int)>
c000ff8d:	83 c4 10             	add    esp,0x10
c000ff90:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000ff97:	83 ec 0c             	sub    esp,0xc
c000ff9a:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000ffa1:	e8 96 98 ff ff       	call   c000983c <Virt::setupPageSwapping(int)>
c000ffa6:	83 c4 10             	add    esp,0x10
c000ffa9:	8d 76 00             	lea    esi,[esi+0x0]
c000ffac:	83 ec 0c             	sub    esp,0xc
c000ffaf:	68 b5 0b 02 c0       	push   0xc0020bb5
c000ffb4:	e8 f6 0f 00 00       	call   c0010faf <KeSetBootMessage(char const*)>
c000ffb9:	83 c4 10             	add    esp,0x10
c000ffbc:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000ffc3:	83 ec 08             	sub    esp,0x8
c000ffc6:	6a 13                	push   0x13
c000ffc8:	50                   	push   eax
c000ffc9:	e8 a0 cd ff ff       	call   c000cd6e <getDevicesOfType(DeviceType)>
c000ffce:	83 c4 0c             	add    esp,0xc
c000ffd1:	8d 76 00             	lea    esi,[esi+0x0]
c000ffd4:	83 ec 0c             	sub    esp,0xc
c000ffd7:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ffde:	50                   	push   eax
c000ffdf:	e8 bc ff 00 00       	call   c001ffa0 <LinkedList<Device>::isEmpty()>
c000ffe4:	83 c4 10             	add    esp,0x10
c000ffe7:	83 f0 01             	xor    eax,0x1
c000ffea:	0f b6 c0             	movzx  eax,al
c000ffed:	85 c0                	test   eax,eax
c000ffef:	0f 84 47 01 00 00    	je     c001013c <ACPI::open(int, int, void*)+0x320>
c000fff5:	83 ec 0c             	sub    esp,0xc
c000fff8:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ffff:	50                   	push   eax
c0010000:	e8 b7 ff 00 00       	call   c001ffbc <LinkedList<Device>::getFirstElement()>
c0010005:	83 c4 10             	add    esp,0x10
c0010008:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c001000f:	83 ec 0c             	sub    esp,0xc
c0010012:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0010019:	50                   	push   eax
c001001a:	e8 a5 ff 00 00       	call   c001ffc4 <LinkedList<Device>::removeFirst()>
c001001f:	83 c4 10             	add    esp,0x10
c0010022:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c0010029:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c0010030:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c0010037:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001003b:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c0010041:	ba 09 00 00 00       	mov    edx,0x9
c0010046:	fc                   	cld    
c0010047:	89 c7                	mov    edi,eax
c0010049:	89 de                	mov    esi,ebx
c001004b:	89 d1                	mov    ecx,edx
c001004d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001004f:	83 ec 08             	sub    esp,0x8
c0010052:	8d 44 24 38          	lea    eax,[esp+0x38]
c0010056:	50                   	push   eax
c0010057:	83 ec 24             	sub    esp,0x24
c001005a:	89 e0                	mov    eax,esp
c001005c:	89 c3                	mov    ebx,eax
c001005e:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0010062:	ba 09 00 00 00       	mov    edx,0x9
c0010067:	89 df                	mov    edi,ebx
c0010069:	89 c6                	mov    esi,eax
c001006b:	89 d1                	mov    ecx,edx
c001006d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001006f:	e8 9e b6 00 00       	call   c001b712 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c0010074:	83 c4 30             	add    esp,0x30
c0010077:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c001007e:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c0010086:	0f 84 48 ff ff ff    	je     c000ffd4 <ACPI::open(int, int, void*)+0x1b8>
c001008c:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c0010097:	83 ec 0c             	sub    esp,0xc
c001009a:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00100a1:	e8 10 7a ff ff       	call   c0007ab6 <malloc>
c00100a6:	83 c4 10             	add    esp,0x10
c00100a9:	89 c3                	mov    ebx,eax
c00100ab:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c00100b0:	83 ec 04             	sub    esp,0x4
c00100b3:	50                   	push   eax
c00100b4:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c00100bb:	53                   	push   ebx
c00100bc:	e8 1b bb ff ff       	call   c000bbdc <File::File(char const*, Process*)>
c00100c1:	83 c4 10             	add    esp,0x10
c00100c4:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c00100cb:	83 ec 0c             	sub    esp,0xc
c00100ce:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c00100d5:	e8 e4 bd ff ff       	call   c000bebe <File::exists()>
c00100da:	83 c4 10             	add    esp,0x10
c00100dd:	0f b6 c0             	movzx  eax,al
c00100e0:	85 c0                	test   eax,eax
c00100e2:	74 28                	je     c001010c <ACPI::open(int, int, void*)+0x2f0>
c00100e4:	83 ec 08             	sub    esp,0x8
c00100e7:	6a 01                	push   0x1
c00100e9:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c00100f0:	e8 fa 55 00 00       	call   c00156ef <Thr::loadDLL(char const*, bool)>
c00100f5:	83 c4 10             	add    esp,0x10
c00100f8:	83 ec 08             	sub    esp,0x8
c00100fb:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c0010102:	50                   	push   eax
c0010103:	e8 18 58 00 00       	call   c0015920 <Thr::executeDLL(unsigned long, void*)>
c0010108:	83 c4 10             	add    esp,0x10
c001010b:	90                   	nop
c001010c:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c0010114:	0f 84 ba fe ff ff    	je     c000ffd4 <ACPI::open(int, int, void*)+0x1b8>
c001011a:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c0010121:	8b 00                	mov    eax,DWORD PTR [eax]
c0010123:	83 c0 08             	add    eax,0x8
c0010126:	8b 00                	mov    eax,DWORD PTR [eax]
c0010128:	83 ec 0c             	sub    esp,0xc
c001012b:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0010132:	ff d0                	call   eax
c0010134:	83 c4 10             	add    esp,0x10
c0010137:	e9 98 fe ff ff       	jmp    c000ffd4 <ACPI::open(int, int, void*)+0x1b8>
c001013c:	83 ec 0c             	sub    esp,0xc
c001013f:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0010146:	50                   	push   eax
c0010147:	e8 50 fe 00 00       	call   c001ff9c <LinkedList<Device>::~LinkedList()>
c001014c:	83 c4 10             	add    esp,0x10
c001014f:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c0010155:	83 ec 08             	sub    esp,0x8
c0010158:	6a 01                	push   0x1
c001015a:	68 5d 21 02 c0       	push   0xc002215d
c001015f:	e8 8b 55 00 00       	call   c00156ef <Thr::loadDLL(char const*, bool)>
c0010164:	83 c4 10             	add    esp,0x10
c0010167:	83 ec 08             	sub    esp,0x8
c001016a:	53                   	push   ebx
c001016b:	50                   	push   eax
c001016c:	e8 af 57 00 00       	call   c0015920 <Thr::executeDLL(unsigned long, void*)>
c0010171:	83 c4 10             	add    esp,0x10
c0010174:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0010179:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001017f:	83 e0 04             	and    eax,0x4
c0010182:	0f b6 c0             	movzx  eax,al
c0010185:	85 c0                	test   eax,eax
c0010187:	0f 84 1b 01 00 00    	je     c00102a8 <ACPI::open(int, int, void*)+0x48c>
c001018d:	83 ec 0c             	sub    esp,0xc
c0010190:	68 7a 21 02 c0       	push   0xc002217a
c0010195:	e8 15 0e 00 00       	call   c0010faf <KeSetBootMessage(char const*)>
c001019a:	83 c4 10             	add    esp,0x10
c001019d:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c00101a8:	83 ec 0c             	sub    esp,0xc
c00101ab:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c00101b2:	e8 ff 78 ff ff       	call   c0007ab6 <malloc>
c00101b7:	83 c4 10             	add    esp,0x10
c00101ba:	89 c3                	mov    ebx,eax
c00101bc:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c00101c1:	83 ec 04             	sub    esp,0x4
c00101c4:	50                   	push   eax
c00101c5:	68 97 21 02 c0       	push   0xc0022197
c00101ca:	53                   	push   ebx
c00101cb:	e8 0c ba ff ff       	call   c000bbdc <File::File(char const*, Process*)>
c00101d0:	83 c4 10             	add    esp,0x10
c00101d3:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c00101da:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c00101e2:	74 20                	je     c0010204 <ACPI::open(int, int, void*)+0x3e8>
c00101e4:	83 ec 0c             	sub    esp,0xc
c00101e7:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c00101ee:	e8 cb bc ff ff       	call   c000bebe <File::exists()>
c00101f3:	83 c4 10             	add    esp,0x10
c00101f6:	0f b6 c0             	movzx  eax,al
c00101f9:	85 c0                	test   eax,eax
c00101fb:	74 07                	je     c0010204 <ACPI::open(int, int, void*)+0x3e8>
c00101fd:	b0 01                	mov    al,0x1
c00101ff:	eb 07                	jmp    c0010208 <ACPI::open(int, int, void*)+0x3ec>
c0010201:	8d 76 00             	lea    esi,[esi+0x0]
c0010204:	b0 00                	mov    al,0x0
c0010206:	66 90                	xchg   ax,ax
c0010208:	0f b6 c0             	movzx  eax,al
c001020b:	85 c0                	test   eax,eax
c001020d:	74 25                	je     c0010234 <ACPI::open(int, int, void*)+0x418>
c001020f:	83 ec 08             	sub    esp,0x8
c0010212:	6a 01                	push   0x1
c0010214:	68 97 21 02 c0       	push   0xc0022197
c0010219:	e8 d1 54 00 00       	call   c00156ef <Thr::loadDLL(char const*, bool)>
c001021e:	83 c4 10             	add    esp,0x10
c0010221:	83 ec 08             	sub    esp,0x8
c0010224:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c001022b:	50                   	push   eax
c001022c:	e8 ef 56 00 00       	call   c0015920 <Thr::executeDLL(unsigned long, void*)>
c0010231:	83 c4 10             	add    esp,0x10
c0010234:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c001023c:	74 2a                	je     c0010268 <ACPI::open(int, int, void*)+0x44c>
c001023e:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0010246:	74 20                	je     c0010268 <ACPI::open(int, int, void*)+0x44c>
c0010248:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c001024f:	8b 00                	mov    eax,DWORD PTR [eax]
c0010251:	83 c0 08             	add    eax,0x8
c0010254:	8b 00                	mov    eax,DWORD PTR [eax]
c0010256:	83 ec 0c             	sub    esp,0xc
c0010259:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0010260:	ff d0                	call   eax
c0010262:	83 c4 10             	add    esp,0x10
c0010265:	8d 76 00             	lea    esi,[esi+0x0]
c0010268:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c001026d:	83 ec 08             	sub    esp,0x8
c0010270:	68 b4 21 02 c0       	push   0xc00221b4
c0010275:	50                   	push   eax
c0010276:	e8 c1 f1 ff ff       	call   c000f43c <findDataTable(unsigned char*, char*)>
c001027b:	83 c4 10             	add    esp,0x10
c001027e:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c0010285:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c001028d:	74 19                	je     c00102a8 <ACPI::open(int, int, void*)+0x48c>
c001028f:	83 ec 08             	sub    esp,0x8
c0010292:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0010299:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c00102a0:	e8 13 fb ff ff       	call   c000fdb8 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c00102a5:	83 c4 10             	add    esp,0x10
c00102a8:	b8 00 00 00 00       	mov    eax,0x0
c00102ad:	81 c4 70 01 00 00    	add    esp,0x170
c00102b3:	5b                   	pop    ebx
c00102b4:	5e                   	pop    esi
c00102b5:	5f                   	pop    edi
c00102b6:	c3                   	ret    
c00102b7:	90                   	nop

c00102b8 <CPU::close(int, int, void*)>:
c00102b8:	31 c0                	xor    eax,eax
c00102ba:	c3                   	ret    
c00102bb:	90                   	nop

c00102bc <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c00102bc:	60                   	pusha  
c00102bd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00102c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00102c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00102c9:	9c                   	pushf  
c00102ca:	fa                   	cli    
c00102cb:	0f 09                	wbinvd 
c00102cd:	0f 30                	wrmsr  
c00102cf:	9d                   	popf   
c00102d0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00102d4:	89 02                	mov    DWORD PTR [edx],eax
c00102d6:	61                   	popa   
c00102d7:	c3                   	ret    

c00102d8 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c00102d8:	60                   	pusha  
c00102d9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00102dd:	9c                   	pushf  
c00102de:	fa                   	cli    
c00102df:	0f 09                	wbinvd 
c00102e1:	31 c0                	xor    eax,eax
c00102e3:	31 d2                	xor    edx,edx
c00102e5:	0f 32                	rdmsr  
c00102e7:	9d                   	popf   
c00102e8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00102ec:	89 02                	mov    DWORD PTR [edx],eax
c00102ee:	61                   	popa   
c00102ef:	c3                   	ret    

c00102f0 <CPU::AMD_K6_writeback(int, int, int)>:
c00102f0:	56                   	push   esi
c00102f1:	53                   	push   ebx
c00102f2:	83 ec 10             	sub    esp,0x10
c00102f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00102f9:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c00102fe:	75 5d                	jne    c001035d <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0010300:	83 f8 08             	cmp    eax,0x8
c0010303:	75 09                	jne    c001030e <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0010305:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c001030a:	7e 13                	jle    c001031f <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001030c:	eb 30                	jmp    c001033e <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001030e:	83 f8 06             	cmp    eax,0x6
c0010311:	7c 4a                	jl     c001035d <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0010313:	83 f8 07             	cmp    eax,0x7
c0010316:	7e 07                	jle    c001031f <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0010318:	83 f8 09             	cmp    eax,0x9
c001031b:	74 21                	je     c001033e <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001031d:	eb 3e                	jmp    c001035d <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001031f:	89 e6                	mov    esi,esp
c0010321:	8b 1d dc 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026edc
c0010327:	56                   	push   esi
c0010328:	c1 eb 15             	shr    ebx,0x15
c001032b:	68 82 00 00 c0       	push   0xc0000082
c0010330:	83 e3 7e             	and    ebx,0x7e
c0010333:	e8 a0 ff ff ff       	call   c00102d8 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0010338:	56                   	push   esi
c0010339:	6a 00                	push   0x0
c001033b:	53                   	push   ebx
c001033c:	eb 12                	jmp    c0010350 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c001033e:	89 e3                	mov    ebx,esp
c0010340:	53                   	push   ebx
c0010341:	68 82 00 00 c0       	push   0xc0000082
c0010346:	e8 8d ff ff ff       	call   c00102d8 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001034b:	53                   	push   ebx
c001034c:	6a 00                	push   0x0
c001034e:	6a 00                	push   0x0
c0010350:	68 82 00 00 c0       	push   0xc0000082
c0010355:	e8 62 ff ff ff       	call   c00102bc <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c001035a:	83 c4 18             	add    esp,0x18
c001035d:	83 c4 10             	add    esp,0x10
c0010360:	5b                   	pop    ebx
c0010361:	5e                   	pop    esi
c0010362:	c3                   	ret    
c0010363:	90                   	nop

c0010364 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0010364:	55                   	push   ebp
c0010365:	57                   	push   edi
c0010366:	56                   	push   esi
c0010367:	53                   	push   ebx
c0010368:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001036c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0010370:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010374:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0010378:	39 05 78 37 02 c0    	cmp    DWORD PTR ds:0xc0023778,eax
c001037e:	75 23                	jne    c00103a3 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0010380:	a1 8c bd 02 c0       	mov    eax,ds:0xc002bd8c
c0010385:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0010389:	89 06                	mov    DWORD PTR [esi],eax
c001038b:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c0010390:	89 07                	mov    DWORD PTR [edi],eax
c0010392:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c0010397:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001039a:	a1 80 bd 02 c0       	mov    eax,ds:0xc002bd80
c001039f:	89 02                	mov    DWORD PTR [edx],eax
c00103a1:	eb 3f                	jmp    c00103e2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c00103a3:	31 c9                	xor    ecx,ecx
c00103a5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00103a9:	0f a2                	cpuid  
c00103ab:	89 06                	mov    DWORD PTR [esi],eax
c00103ad:	89 1f                	mov    DWORD PTR [edi],ebx
c00103af:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00103b3:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00103b6:	89 10                	mov    DWORD PTR [eax],edx
c00103b8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00103bc:	a3 78 37 02 c0       	mov    ds:0xc0023778,eax
c00103c1:	8b 06                	mov    eax,DWORD PTR [esi]
c00103c3:	a3 8c bd 02 c0       	mov    ds:0xc002bd8c,eax
c00103c8:	8b 07                	mov    eax,DWORD PTR [edi]
c00103ca:	a3 88 bd 02 c0       	mov    ds:0xc002bd88,eax
c00103cf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00103d2:	a3 84 bd 02 c0       	mov    ds:0xc002bd84,eax
c00103d7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00103db:	8b 00                	mov    eax,DWORD PTR [eax]
c00103dd:	a3 80 bd 02 c0       	mov    ds:0xc002bd80,eax
c00103e2:	5b                   	pop    ebx
c00103e3:	5e                   	pop    esi
c00103e4:	5f                   	pop    edi
c00103e5:	5d                   	pop    ebp
c00103e6:	c3                   	ret    
c00103e7:	90                   	nop

c00103e8 <CPU::cpuidCheckEDX(unsigned int)>:
c00103e8:	83 ec 10             	sub    esp,0x10
c00103eb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103ef:	50                   	push   eax
c00103f0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103f4:	50                   	push   eax
c00103f5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103f9:	50                   	push   eax
c00103fa:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103fe:	50                   	push   eax
c00103ff:	6a 01                	push   0x1
c0010401:	e8 5e ff ff ff       	call   c0010364 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010406:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001040a:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c001040e:	0f 95 c0             	setne  al
c0010411:	83 c4 24             	add    esp,0x24
c0010414:	c3                   	ret    
c0010415:	90                   	nop

c0010416 <CPU::cpuidCheckECX(unsigned int)>:
c0010416:	83 ec 10             	sub    esp,0x10
c0010419:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001041d:	50                   	push   eax
c001041e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010422:	50                   	push   eax
c0010423:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010427:	50                   	push   eax
c0010428:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001042c:	50                   	push   eax
c001042d:	6a 01                	push   0x1
c001042f:	e8 30 ff ff ff       	call   c0010364 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010434:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010438:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001043c:	0f 95 c0             	setne  al
c001043f:	83 c4 24             	add    esp,0x24
c0010442:	c3                   	ret    
c0010443:	90                   	nop

c0010444 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0010444:	83 ec 10             	sub    esp,0x10
c0010447:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001044b:	50                   	push   eax
c001044c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010450:	50                   	push   eax
c0010451:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010455:	50                   	push   eax
c0010456:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001045a:	50                   	push   eax
c001045b:	6a 07                	push   0x7
c001045d:	e8 02 ff ff ff       	call   c0010364 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010462:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010466:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c001046a:	0f 95 c0             	setne  al
c001046d:	83 c4 24             	add    esp,0x24
c0010470:	c3                   	ret    
c0010471:	90                   	nop

c0010472 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0010472:	83 ec 10             	sub    esp,0x10
c0010475:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010479:	50                   	push   eax
c001047a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001047e:	50                   	push   eax
c001047f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010483:	50                   	push   eax
c0010484:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010488:	50                   	push   eax
c0010489:	6a 07                	push   0x7
c001048b:	e8 d4 fe ff ff       	call   c0010364 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010490:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010494:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0010498:	0f 95 c0             	setne  al
c001049b:	83 c4 24             	add    esp,0x24
c001049e:	c3                   	ret    
c001049f:	90                   	nop

c00104a0 <CPU::CPU()>:
c00104a0:	83 ec 0c             	sub    esp,0xc
c00104a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104a7:	83 ec 08             	sub    esp,0x8
c00104aa:	68 d9 22 02 c0       	push   0xc00222d9
c00104af:	50                   	push   eax
c00104b0:	e8 39 c7 ff ff       	call   c000cbee <Device::Device(char const*)>
c00104b5:	83 c4 10             	add    esp,0x10
c00104b8:	ba 6c 23 02 c0       	mov    edx,0xc002236c
c00104bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104c1:	89 10                	mov    DWORD PTR [eax],edx
c00104c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104c7:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c00104d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104d5:	05 78 01 00 00       	add    eax,0x178
c00104da:	83 ec 0c             	sub    esp,0xc
c00104dd:	50                   	push   eax
c00104de:	e8 79 6e ff ff       	call   c000735c <GDT::GDT()>
c00104e3:	83 c4 10             	add    esp,0x10
c00104e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104ea:	05 7c 09 00 00       	add    eax,0x97c
c00104ef:	83 ec 0c             	sub    esp,0xc
c00104f2:	50                   	push   eax
c00104f3:	e8 b4 70 ff ff       	call   c00075ac <IDT::IDT()>
c00104f8:	83 c4 10             	add    esp,0x10
c00104fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104ff:	05 7c 11 00 00       	add    eax,0x117c
c0010504:	83 ec 0c             	sub    esp,0xc
c0010507:	50                   	push   eax
c0010508:	e8 37 8a ff ff       	call   c0008f44 <TSS::TSS()>
c001050d:	83 c4 10             	add    esp,0x10
c0010510:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010514:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c001051b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001051f:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c0010529:	90                   	nop
c001052a:	83 c4 0c             	add    esp,0xc
c001052d:	c3                   	ret    

c001052e <CPU::displayFeatures()>:
c001052e:	c3                   	ret    
c001052f:	90                   	nop

c0010530 <CPU::detectFeatures()>:
c0010530:	55                   	push   ebp
c0010531:	57                   	push   edi
c0010532:	56                   	push   esi
c0010533:	53                   	push   ebx
c0010534:	83 ec 30             	sub    esp,0x30
c0010537:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001053b:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c0010545:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c001054c:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0010552:	6a 0d                	push   0xd
c0010554:	6a 00                	push   0x0
c0010556:	55                   	push   ebp
c0010557:	e8 94 ff fe ff       	call   c00004f0 <memset>
c001055c:	83 c4 10             	add    esp,0x10
c001055f:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0010564:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c001056b:	0f 84 db 05 00 00    	je     c0010b4c <CPU::detectFeatures()+0x61c>
c0010571:	83 ec 0c             	sub    esp,0xc
c0010574:	89 ef                	mov    edi,ebp
c0010576:	6a 10                	push   0x10
c0010578:	e8 6b fe ff ff       	call   c00103e8 <CPU::cpuidCheckEDX(unsigned int)>
c001057d:	83 e0 01             	and    eax,0x1
c0010580:	8d 14 00             	lea    edx,[eax+eax*1]
c0010583:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010589:	83 e0 fd             	and    eax,0xfffffffd
c001058c:	09 d0                	or     eax,edx
c001058e:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010594:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c001059b:	e8 48 fe ff ff       	call   c00103e8 <CPU::cpuidCheckEDX(unsigned int)>
c00105a0:	83 e0 01             	and    eax,0x1
c00105a3:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00105aa:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00105b0:	83 e0 fb             	and    eax,0xfffffffb
c00105b3:	09 d0                	or     eax,edx
c00105b5:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00105bb:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00105c2:	e8 21 fe ff ff       	call   c00103e8 <CPU::cpuidCheckEDX(unsigned int)>
c00105c7:	83 e0 01             	and    eax,0x1
c00105ca:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00105d1:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00105d7:	83 e0 f7             	and    eax,0xfffffff7
c00105da:	09 d0                	or     eax,edx
c00105dc:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00105e2:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c00105e9:	e8 fa fd ff ff       	call   c00103e8 <CPU::cpuidCheckEDX(unsigned int)>
c00105ee:	83 e0 01             	and    eax,0x1
c00105f1:	c1 e0 04             	shl    eax,0x4
c00105f4:	89 c2                	mov    edx,eax
c00105f6:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00105fc:	83 e0 ef             	and    eax,0xffffffef
c00105ff:	09 d0                	or     eax,edx
c0010601:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010607:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c001060e:	e8 d5 fd ff ff       	call   c00103e8 <CPU::cpuidCheckEDX(unsigned int)>
c0010613:	83 e0 01             	and    eax,0x1
c0010616:	c1 e0 05             	shl    eax,0x5
c0010619:	89 c2                	mov    edx,eax
c001061b:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010621:	83 e0 df             	and    eax,0xffffffdf
c0010624:	09 d0                	or     eax,edx
c0010626:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001062c:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0010633:	e8 b0 fd ff ff       	call   c00103e8 <CPU::cpuidCheckEDX(unsigned int)>
c0010638:	83 e0 01             	and    eax,0x1
c001063b:	8d 14 00             	lea    edx,[eax+eax*1]
c001063e:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010644:	83 e0 fd             	and    eax,0xfffffffd
c0010647:	09 d0                	or     eax,edx
c0010649:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001064f:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0010656:	e8 8d fd ff ff       	call   c00103e8 <CPU::cpuidCheckEDX(unsigned int)>
c001065b:	83 e0 01             	and    eax,0x1
c001065e:	c1 e0 06             	shl    eax,0x6
c0010661:	89 c2                	mov    edx,eax
c0010663:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010669:	83 e0 bf             	and    eax,0xffffffbf
c001066c:	09 d0                	or     eax,edx
c001066e:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010674:	58                   	pop    eax
c0010675:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010679:	50                   	push   eax
c001067a:	8d 44 24 28          	lea    eax,[esp+0x28]
c001067e:	50                   	push   eax
c001067f:	8d 74 24 28          	lea    esi,[esp+0x28]
c0010683:	56                   	push   esi
c0010684:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010688:	50                   	push   eax
c0010689:	6a 00                	push   0x0
c001068b:	e8 d4 fc ff ff       	call   c0010364 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010690:	b8 04 00 00 00       	mov    eax,0x4
c0010695:	89 c1                	mov    ecx,eax
c0010697:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010699:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c001069f:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00106a3:	89 c1                	mov    ecx,eax
c00106a5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00106a7:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c00106ad:	8d 74 24 38          	lea    esi,[esp+0x38]
c00106b1:	89 c1                	mov    ecx,eax
c00106b3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00106b5:	83 c4 18             	add    esp,0x18
c00106b8:	68 e8 21 02 c0       	push   0xc00221e8
c00106bd:	55                   	push   ebp
c00106be:	e8 8d 00 ff ff       	call   c0000750 <strcmp>
c00106c3:	83 c4 10             	add    esp,0x10
c00106c6:	85 c0                	test   eax,eax
c00106c8:	75 0f                	jne    c00106d9 <CPU::detectFeatures()+0x1a9>
c00106ca:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c00106d4:	e9 22 02 00 00       	jmp    c00108fb <CPU::detectFeatures()+0x3cb>
c00106d9:	50                   	push   eax
c00106da:	50                   	push   eax
c00106db:	68 f5 21 02 c0       	push   0xc00221f5
c00106e0:	55                   	push   ebp
c00106e1:	e8 6a 00 ff ff       	call   c0000750 <strcmp>
c00106e6:	83 c4 10             	add    esp,0x10
c00106e9:	85 c0                	test   eax,eax
c00106eb:	74 dd                	je     c00106ca <CPU::detectFeatures()+0x19a>
c00106ed:	50                   	push   eax
c00106ee:	50                   	push   eax
c00106ef:	68 02 22 02 c0       	push   0xc0022202
c00106f4:	55                   	push   ebp
c00106f5:	e8 56 00 ff ff       	call   c0000750 <strcmp>
c00106fa:	83 c4 10             	add    esp,0x10
c00106fd:	85 c0                	test   eax,eax
c00106ff:	74 2a                	je     c001072b <CPU::detectFeatures()+0x1fb>
c0010701:	50                   	push   eax
c0010702:	50                   	push   eax
c0010703:	68 0f 22 02 c0       	push   0xc002220f
c0010708:	55                   	push   ebp
c0010709:	e8 42 00 ff ff       	call   c0000750 <strcmp>
c001070e:	83 c4 10             	add    esp,0x10
c0010711:	85 c0                	test   eax,eax
c0010713:	74 16                	je     c001072b <CPU::detectFeatures()+0x1fb>
c0010715:	50                   	push   eax
c0010716:	50                   	push   eax
c0010717:	68 1c 22 02 c0       	push   0xc002221c
c001071c:	55                   	push   ebp
c001071d:	e8 2e 00 ff ff       	call   c0000750 <strcmp>
c0010722:	83 c4 10             	add    esp,0x10
c0010725:	85 c0                	test   eax,eax
c0010727:	74 48                	je     c0010771 <CPU::detectFeatures()+0x241>
c0010729:	eb 0f                	jmp    c001073a <CPU::detectFeatures()+0x20a>
c001072b:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0010735:	e9 c1 01 00 00       	jmp    c00108fb <CPU::detectFeatures()+0x3cb>
c001073a:	50                   	push   eax
c001073b:	50                   	push   eax
c001073c:	68 29 22 02 c0       	push   0xc0022229
c0010741:	55                   	push   ebp
c0010742:	e8 09 00 ff ff       	call   c0000750 <strcmp>
c0010747:	83 c4 10             	add    esp,0x10
c001074a:	85 c0                	test   eax,eax
c001074c:	74 23                	je     c0010771 <CPU::detectFeatures()+0x241>
c001074e:	57                   	push   edi
c001074f:	57                   	push   edi
c0010750:	68 36 22 02 c0       	push   0xc0022236
c0010755:	55                   	push   ebp
c0010756:	e8 f5 ff fe ff       	call   c0000750 <strcmp>
c001075b:	83 c4 10             	add    esp,0x10
c001075e:	85 c0                	test   eax,eax
c0010760:	75 1e                	jne    c0010780 <CPU::detectFeatures()+0x250>
c0010762:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001076c:	e9 8a 01 00 00       	jmp    c00108fb <CPU::detectFeatures()+0x3cb>
c0010771:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c001077b:	e9 7b 01 00 00       	jmp    c00108fb <CPU::detectFeatures()+0x3cb>
c0010780:	56                   	push   esi
c0010781:	56                   	push   esi
c0010782:	68 43 22 02 c0       	push   0xc0022243
c0010787:	55                   	push   ebp
c0010788:	e8 c3 ff fe ff       	call   c0000750 <strcmp>
c001078d:	83 c4 10             	add    esp,0x10
c0010790:	85 c0                	test   eax,eax
c0010792:	75 0f                	jne    c00107a3 <CPU::detectFeatures()+0x273>
c0010794:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c001079e:	e9 58 01 00 00       	jmp    c00108fb <CPU::detectFeatures()+0x3cb>
c00107a3:	51                   	push   ecx
c00107a4:	51                   	push   ecx
c00107a5:	68 02 22 02 c0       	push   0xc0022202
c00107aa:	55                   	push   ebp
c00107ab:	e8 a0 ff fe ff       	call   c0000750 <strcmp>
c00107b0:	83 c4 10             	add    esp,0x10
c00107b3:	85 c0                	test   eax,eax
c00107b5:	75 0f                	jne    c00107c6 <CPU::detectFeatures()+0x296>
c00107b7:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c00107c1:	e9 35 01 00 00       	jmp    c00108fb <CPU::detectFeatures()+0x3cb>
c00107c6:	52                   	push   edx
c00107c7:	52                   	push   edx
c00107c8:	68 50 22 02 c0       	push   0xc0022250
c00107cd:	55                   	push   ebp
c00107ce:	e8 7d ff fe ff       	call   c0000750 <strcmp>
c00107d3:	83 c4 10             	add    esp,0x10
c00107d6:	85 c0                	test   eax,eax
c00107d8:	75 0f                	jne    c00107e9 <CPU::detectFeatures()+0x2b9>
c00107da:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c00107e4:	e9 12 01 00 00       	jmp    c00108fb <CPU::detectFeatures()+0x3cb>
c00107e9:	50                   	push   eax
c00107ea:	50                   	push   eax
c00107eb:	68 5d 22 02 c0       	push   0xc002225d
c00107f0:	55                   	push   ebp
c00107f1:	e8 5a ff fe ff       	call   c0000750 <strcmp>
c00107f6:	83 c4 10             	add    esp,0x10
c00107f9:	85 c0                	test   eax,eax
c00107fb:	75 0f                	jne    c001080c <CPU::detectFeatures()+0x2dc>
c00107fd:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0010807:	e9 ef 00 00 00       	jmp    c00108fb <CPU::detectFeatures()+0x3cb>
c001080c:	50                   	push   eax
c001080d:	50                   	push   eax
c001080e:	68 6a 22 02 c0       	push   0xc002226a
c0010813:	55                   	push   ebp
c0010814:	e8 37 ff fe ff       	call   c0000750 <strcmp>
c0010819:	83 c4 10             	add    esp,0x10
c001081c:	85 c0                	test   eax,eax
c001081e:	75 0f                	jne    c001082f <CPU::detectFeatures()+0x2ff>
c0010820:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c001082a:	e9 cc 00 00 00       	jmp    c00108fb <CPU::detectFeatures()+0x3cb>
c001082f:	50                   	push   eax
c0010830:	50                   	push   eax
c0010831:	68 77 22 02 c0       	push   0xc0022277
c0010836:	55                   	push   ebp
c0010837:	e8 14 ff fe ff       	call   c0000750 <strcmp>
c001083c:	83 c4 10             	add    esp,0x10
c001083f:	85 c0                	test   eax,eax
c0010841:	75 0f                	jne    c0010852 <CPU::detectFeatures()+0x322>
c0010843:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c001084d:	e9 a9 00 00 00       	jmp    c00108fb <CPU::detectFeatures()+0x3cb>
c0010852:	50                   	push   eax
c0010853:	50                   	push   eax
c0010854:	68 84 22 02 c0       	push   0xc0022284
c0010859:	55                   	push   ebp
c001085a:	e8 f1 fe fe ff       	call   c0000750 <strcmp>
c001085f:	83 c4 10             	add    esp,0x10
c0010862:	85 c0                	test   eax,eax
c0010864:	75 0f                	jne    c0010875 <CPU::detectFeatures()+0x345>
c0010866:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0010870:	e9 86 00 00 00       	jmp    c00108fb <CPU::detectFeatures()+0x3cb>
c0010875:	50                   	push   eax
c0010876:	50                   	push   eax
c0010877:	68 91 22 02 c0       	push   0xc0022291
c001087c:	55                   	push   ebp
c001087d:	e8 ce fe fe ff       	call   c0000750 <strcmp>
c0010882:	83 c4 10             	add    esp,0x10
c0010885:	85 c0                	test   eax,eax
c0010887:	75 0c                	jne    c0010895 <CPU::detectFeatures()+0x365>
c0010889:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0010893:	eb 66                	jmp    c00108fb <CPU::detectFeatures()+0x3cb>
c0010895:	50                   	push   eax
c0010896:	50                   	push   eax
c0010897:	68 9e 22 02 c0       	push   0xc002229e
c001089c:	55                   	push   ebp
c001089d:	e8 ae fe fe ff       	call   c0000750 <strcmp>
c00108a2:	83 c4 10             	add    esp,0x10
c00108a5:	85 c0                	test   eax,eax
c00108a7:	75 0c                	jne    c00108b5 <CPU::detectFeatures()+0x385>
c00108a9:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c00108b3:	eb 46                	jmp    c00108fb <CPU::detectFeatures()+0x3cb>
c00108b5:	57                   	push   edi
c00108b6:	57                   	push   edi
c00108b7:	68 ab 22 02 c0       	push   0xc00222ab
c00108bc:	55                   	push   ebp
c00108bd:	e8 8e fe fe ff       	call   c0000750 <strcmp>
c00108c2:	83 c4 10             	add    esp,0x10
c00108c5:	85 c0                	test   eax,eax
c00108c7:	74 e0                	je     c00108a9 <CPU::detectFeatures()+0x379>
c00108c9:	56                   	push   esi
c00108ca:	56                   	push   esi
c00108cb:	68 b8 22 02 c0       	push   0xc00222b8
c00108d0:	55                   	push   ebp
c00108d1:	e8 7a fe fe ff       	call   c0000750 <strcmp>
c00108d6:	83 c4 10             	add    esp,0x10
c00108d9:	85 c0                	test   eax,eax
c00108db:	74 cc                	je     c00108a9 <CPU::detectFeatures()+0x379>
c00108dd:	51                   	push   ecx
c00108de:	51                   	push   ecx
c00108df:	68 c5 22 02 c0       	push   0xc00222c5
c00108e4:	55                   	push   ebp
c00108e5:	e8 66 fe fe ff       	call   c0000750 <strcmp>
c00108ea:	83 c4 10             	add    esp,0x10
c00108ed:	85 c0                	test   eax,eax
c00108ef:	74 b8                	je     c00108a9 <CPU::detectFeatures()+0x379>
c00108f1:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c00108fb:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0010900:	0f 86 be 00 00 00    	jbe    c00109c4 <CPU::detectFeatures()+0x494>
c0010906:	83 ec 0c             	sub    esp,0xc
c0010909:	68 80 00 00 00       	push   0x80
c001090e:	e8 31 fb ff ff       	call   c0010444 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0010913:	83 e0 01             	and    eax,0x1
c0010916:	c1 e0 06             	shl    eax,0x6
c0010919:	89 c2                	mov    edx,eax
c001091b:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010921:	83 e0 bf             	and    eax,0xffffffbf
c0010924:	09 d0                	or     eax,edx
c0010926:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001092c:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0010933:	e8 0c fb ff ff       	call   c0010444 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0010938:	83 e0 01             	and    eax,0x1
c001093b:	c1 e0 04             	shl    eax,0x4
c001093e:	89 c2                	mov    edx,eax
c0010940:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010946:	83 e0 ef             	and    eax,0xffffffef
c0010949:	09 d0                	or     eax,edx
c001094b:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010951:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0010958:	e8 e7 fa ff ff       	call   c0010444 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001095d:	89 c2                	mov    edx,eax
c001095f:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010965:	c1 e2 07             	shl    edx,0x7
c0010968:	83 e0 7f             	and    eax,0x7f
c001096b:	09 d0                	or     eax,edx
c001096d:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010973:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001097a:	e8 f3 fa ff ff       	call   c0010472 <CPU::cpuidCheckExtendedECX(unsigned int)>
c001097f:	83 e0 01             	and    eax,0x1
c0010982:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0010989:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001098f:	83 e0 f7             	and    eax,0xfffffff7
c0010992:	09 d0                	or     eax,edx
c0010994:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001099a:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00109a1:	e8 cc fa ff ff       	call   c0010472 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00109a6:	83 c4 10             	add    esp,0x10
c00109a9:	83 e0 01             	and    eax,0x1
c00109ac:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00109b3:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00109b9:	83 e0 fb             	and    eax,0xfffffffb
c00109bc:	09 d0                	or     eax,edx
c00109be:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c00109c4:	83 ec 0c             	sub    esp,0xc
c00109c7:	8d 44 24 28          	lea    eax,[esp+0x28]
c00109cb:	50                   	push   eax
c00109cc:	8d 44 24 28          	lea    eax,[esp+0x28]
c00109d0:	50                   	push   eax
c00109d1:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00109d5:	57                   	push   edi
c00109d6:	8d 74 24 28          	lea    esi,[esp+0x28]
c00109da:	56                   	push   esi
c00109db:	6a 01                	push   0x1
c00109dd:	e8 82 f9 ff ff       	call   c0010364 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00109e2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00109e6:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c00109ec:	89 c1                	mov    ecx,eax
c00109ee:	83 e2 f0             	and    edx,0xfffffff0
c00109f1:	83 e1 0f             	and    ecx,0xf
c00109f4:	09 ca                	or     edx,ecx
c00109f6:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00109fc:	89 c2                	mov    edx,eax
c00109fe:	c1 ea 04             	shr    edx,0x4
c0010a01:	83 e2 0f             	and    edx,0xf
c0010a04:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0010a08:	89 d1                	mov    ecx,edx
c0010a0a:	83 c4 20             	add    esp,0x20
c0010a0d:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0010a13:	c1 e1 06             	shl    ecx,0x6
c0010a16:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c0010a1c:	09 ca                	or     edx,ecx
c0010a1e:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0010a25:	89 c2                	mov    edx,eax
c0010a27:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c0010a2d:	c1 ea 08             	shr    edx,0x8
c0010a30:	83 e1 3f             	and    ecx,0x3f
c0010a33:	83 e2 0f             	and    edx,0xf
c0010a36:	89 d5                	mov    ebp,edx
c0010a38:	83 e5 03             	and    ebp,0x3
c0010a3b:	c1 e5 06             	shl    ebp,0x6
c0010a3e:	09 e9                	or     ecx,ebp
c0010a40:	89 d5                	mov    ebp,edx
c0010a42:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c0010a48:	c1 ed 02             	shr    ebp,0x2
c0010a4b:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c0010a51:	83 e1 c0             	and    ecx,0xffffffc0
c0010a54:	09 e9                	or     ecx,ebp
c0010a56:	89 c5                	mov    ebp,eax
c0010a58:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0010a5e:	c1 ed 08             	shr    ebp,0x8
c0010a61:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c0010a67:	83 e5 30             	and    ebp,0x30
c0010a6a:	83 e1 cf             	and    ecx,0xffffffcf
c0010a6d:	09 e9                	or     ecx,ebp
c0010a6f:	83 fa 06             	cmp    edx,0x6
c0010a72:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c0010a78:	74 05                	je     c0010a7f <CPU::detectFeatures()+0x54f>
c0010a7a:	83 fa 0f             	cmp    edx,0xf
c0010a7d:	75 64                	jne    c0010ae3 <CPU::detectFeatures()+0x5b3>
c0010a7f:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0010a85:	89 c1                	mov    ecx,eax
c0010a87:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c0010a8d:	c1 e9 10             	shr    ecx,0x10
c0010a90:	c1 e1 04             	shl    ecx,0x4
c0010a93:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c0010a97:	0f b6 c9             	movzx  ecx,cl
c0010a9a:	c1 e1 06             	shl    ecx,0x6
c0010a9d:	09 e9                	or     ecx,ebp
c0010a9f:	83 fa 0f             	cmp    edx,0xf
c0010aa2:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c0010aa9:	75 38                	jne    c0010ae3 <CPU::detectFeatures()+0x5b3>
c0010aab:	c1 e8 14             	shr    eax,0x14
c0010aae:	83 c0 0f             	add    eax,0xf
c0010ab1:	0f b6 c0             	movzx  eax,al
c0010ab4:	89 c2                	mov    edx,eax
c0010ab6:	c1 e8 02             	shr    eax,0x2
c0010ab9:	83 e2 03             	and    edx,0x3
c0010abc:	89 d1                	mov    ecx,edx
c0010abe:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0010ac4:	c1 e1 06             	shl    ecx,0x6
c0010ac7:	83 e2 3f             	and    edx,0x3f
c0010aca:	09 ca                	or     edx,ecx
c0010acc:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0010ad2:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0010ad8:	83 e2 c0             	and    edx,0xffffffc0
c0010adb:	09 d0                	or     eax,edx
c0010add:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c0010ae3:	83 ec 0c             	sub    esp,0xc
c0010ae6:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010aec:	83 c8 07             	or     eax,0x7
c0010aef:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010af5:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010af9:	50                   	push   eax
c0010afa:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0010afe:	55                   	push   ebp
c0010aff:	57                   	push   edi
c0010b00:	56                   	push   esi
c0010b01:	68 00 00 00 80       	push   0x80000000
c0010b06:	e8 59 f8 ff ff       	call   c0010364 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010b0b:	83 c4 20             	add    esp,0x20
c0010b0e:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0010b16:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0010b1a:	76 1e                	jbe    c0010b3a <CPU::detectFeatures()+0x60a>
c0010b1c:	83 ec 0c             	sub    esp,0xc
c0010b1f:	50                   	push   eax
c0010b20:	55                   	push   ebp
c0010b21:	57                   	push   edi
c0010b22:	56                   	push   esi
c0010b23:	68 01 00 00 80       	push   0x80000001
c0010b28:	e8 37 f8 ff ff       	call   c0010364 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010b2d:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c0010b37:	83 c4 20             	add    esp,0x20
c0010b3a:	52                   	push   edx
c0010b3b:	52                   	push   edx
c0010b3c:	68 d1 22 02 c0       	push   0xc00222d1
c0010b41:	53                   	push   ebx
c0010b42:	e8 99 c0 ff ff       	call   c000cbe0 <Device::setName(char const*)>
c0010b47:	83 c4 10             	add    esp,0x10
c0010b4a:	eb 69                	jmp    c0010bb5 <CPU::detectFeatures()+0x685>
c0010b4c:	50                   	push   eax
c0010b4d:	50                   	push   eax
c0010b4e:	68 36 22 02 c0       	push   0xc0022236
c0010b53:	55                   	push   ebp
c0010b54:	e8 e7 fa fe ff       	call   c0000640 <strcpy>
c0010b59:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0010b63:	e8 5b f6 fe ff       	call   c00001c3 <is486>
c0010b68:	83 c4 10             	add    esp,0x10
c0010b6b:	85 c0                	test   eax,eax
c0010b6d:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010b73:	74 1f                	je     c0010b94 <CPU::detectFeatures()+0x664>
c0010b75:	83 c8 07             	or     eax,0x7
c0010b78:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010b7e:	0f 20 c0             	mov    eax,cr0
c0010b81:	83 e0 14             	and    eax,0x14
c0010b84:	83 f8 04             	cmp    eax,0x4
c0010b87:	75 10                	jne    c0010b99 <CPU::detectFeatures()+0x669>
c0010b89:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010b8f:	83 e0 fd             	and    eax,0xfffffffd
c0010b92:	eb 1b                	jmp    c0010baf <CPU::detectFeatures()+0x67f>
c0010b94:	83 e0 f8             	and    eax,0xfffffff8
c0010b97:	eb df                	jmp    c0010b78 <CPU::detectFeatures()+0x648>
c0010b99:	e8 00 f6 fe ff       	call   c000019e <hasLegacyFPU>
c0010b9e:	83 e0 01             	and    eax,0x1
c0010ba1:	8d 14 00             	lea    edx,[eax+eax*1]
c0010ba4:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010baa:	83 e0 fd             	and    eax,0xfffffffd
c0010bad:	09 d0                	or     eax,edx
c0010baf:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010bb5:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c0010bbc:	74 17                	je     c0010bd5 <CPU::detectFeatures()+0x6a5>
c0010bbe:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c0010bc4:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c0010bca:	83 c8 10             	or     eax,0x10
c0010bcd:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c0010bd3:	eb 20                	jmp    c0010bf5 <CPU::detectFeatures()+0x6c5>
c0010bd5:	e8 c4 f5 fe ff       	call   c000019e <hasLegacyFPU>
c0010bda:	83 e0 01             	and    eax,0x1
c0010bdd:	8d 14 00             	lea    edx,[eax+eax*1]
c0010be0:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010be6:	83 e0 fd             	and    eax,0xfffffffd
c0010be9:	09 d0                	or     eax,edx
c0010beb:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010bf1:	a8 02                	test   al,0x2
c0010bf3:	75 c9                	jne    c0010bbe <CPU::detectFeatures()+0x68e>
c0010bf5:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c0010bfc:	83 c4 2c             	add    esp,0x2c
c0010bff:	5b                   	pop    ebx
c0010c00:	5e                   	pop    esi
c0010c01:	5f                   	pop    edi
c0010c02:	5d                   	pop    ebp
c0010c03:	c3                   	ret    

c0010c04 <CPU::setupSMEP()>:
c0010c04:	0f 20 e0             	mov    eax,cr4
c0010c07:	0d 00 00 10 00       	or     eax,0x100000
c0010c0c:	0f 22 e0             	mov    cr4,eax
c0010c0f:	c3                   	ret    

c0010c10 <CPU::setupUMIP()>:
c0010c10:	0f 20 e0             	mov    eax,cr4
c0010c13:	80 cc 08             	or     ah,0x8
c0010c16:	0f 22 e0             	mov    cr4,eax
c0010c19:	c3                   	ret    

c0010c1a <CPU::setupTSC()>:
c0010c1a:	0f 20 e0             	mov    eax,cr4
c0010c1d:	83 c8 04             	or     eax,0x4
c0010c20:	0f 22 e0             	mov    cr4,eax
c0010c23:	c3                   	ret    

c0010c24 <CPU::setupLargePages()>:
c0010c24:	0f 20 e0             	mov    eax,cr4
c0010c27:	83 c8 10             	or     eax,0x10
c0010c2a:	0f 22 e0             	mov    cr4,eax
c0010c2d:	c3                   	ret    

c0010c2e <CPU::setupPAT()>:
c0010c2e:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0010c33:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0010c3a:	74 2c                	je     c0010c68 <CPU::setupPAT()+0x3a>
c0010c3c:	53                   	push   ebx
c0010c3d:	83 ec 10             	sub    esp,0x10
c0010c40:	68 77 02 00 00       	push   0x277
c0010c45:	50                   	push   eax
c0010c46:	e8 75 64 ff ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c0010c4b:	83 e2 f8             	and    edx,0xfffffff8
c0010c4e:	83 ca 01             	or     edx,0x1
c0010c51:	52                   	push   edx
c0010c52:	50                   	push   eax
c0010c53:	68 77 02 00 00       	push   0x277
c0010c58:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0010c5e:	e8 89 64 ff ff       	call   c00070ec <Computer::wrmsr(unsigned int, unsigned long long)>
c0010c63:	83 c4 28             	add    esp,0x28
c0010c66:	5b                   	pop    ebx
c0010c67:	c3                   	ret    
c0010c68:	c3                   	ret    
c0010c69:	90                   	nop

c0010c6a <CPU::setupMTRR()>:
c0010c6a:	c3                   	ret    
c0010c6b:	90                   	nop

c0010c6c <CPU::setupGlobalPages()>:
c0010c6c:	0f 20 e0             	mov    eax,cr4
c0010c6f:	0c 80                	or     al,0x80
c0010c71:	0f 22 e0             	mov    cr4,eax
c0010c74:	c3                   	ret    
c0010c75:	90                   	nop

c0010c76 <CPU::allowUsermodeDataAccess()>:
c0010c76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c7a:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0010c81:	74 03                	je     c0010c86 <CPU::allowUsermodeDataAccess()+0x10>
c0010c83:	0f 01 cb             	stac   
c0010c86:	c3                   	ret    
c0010c87:	90                   	nop

c0010c88 <CPU::prohibitUsermodeDataAccess()>:
c0010c88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c8c:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0010c93:	74 03                	je     c0010c98 <CPU::prohibitUsermodeDataAccess()+0x10>
c0010c95:	0f 01 ca             	clac   
c0010c98:	c3                   	ret    
c0010c99:	90                   	nop

c0010c9a <CPU::setupSMAP()>:
c0010c9a:	0f 20 e0             	mov    eax,cr4
c0010c9d:	0d 00 00 20 00       	or     eax,0x200000
c0010ca2:	0f 22 e0             	mov    cr4,eax
c0010ca5:	eb e1                	jmp    c0010c88 <CPU::prohibitUsermodeDataAccess()>
c0010ca7:	90                   	nop

c0010ca8 <CPU::setupFeatures()>:
c0010ca8:	53                   	push   ebx
c0010ca9:	83 ec 08             	sub    esp,0x8
c0010cac:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010cb0:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c0010cb7:	74 18                	je     c0010cd1 <CPU::setupFeatures()+0x29>
c0010cb9:	83 ec 0c             	sub    esp,0xc
c0010cbc:	68 dd 22 02 c0       	push   0xc00222dd
c0010cc1:	e8 7f 9c ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010cc6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010cc9:	e8 42 ff ff ff       	call   c0010c10 <CPU::setupUMIP()>
c0010cce:	83 c4 10             	add    esp,0x10
c0010cd1:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c0010cd8:	74 18                	je     c0010cf2 <CPU::setupFeatures()+0x4a>
c0010cda:	83 ec 0c             	sub    esp,0xc
c0010cdd:	68 e7 22 02 c0       	push   0xc00222e7
c0010ce2:	e8 5e 9c ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010ce7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010cea:	e8 2b ff ff ff       	call   c0010c1a <CPU::setupTSC()>
c0010cef:	83 c4 10             	add    esp,0x10
c0010cf2:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c0010cf9:	74 18                	je     c0010d13 <CPU::setupFeatures()+0x6b>
c0010cfb:	83 ec 0c             	sub    esp,0xc
c0010cfe:	68 f0 22 02 c0       	push   0xc00222f0
c0010d03:	e8 3d 9c ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010d08:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d0b:	e8 14 ff ff ff       	call   c0010c24 <CPU::setupLargePages()>
c0010d10:	83 c4 10             	add    esp,0x10
c0010d13:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c0010d1a:	74 18                	je     c0010d34 <CPU::setupFeatures()+0x8c>
c0010d1c:	83 ec 0c             	sub    esp,0xc
c0010d1f:	68 f9 22 02 c0       	push   0xc00222f9
c0010d24:	e8 1c 9c ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010d29:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d2c:	e8 3b ff ff ff       	call   c0010c6c <CPU::setupGlobalPages()>
c0010d31:	83 c4 10             	add    esp,0x10
c0010d34:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c0010d3b:	74 18                	je     c0010d55 <CPU::setupFeatures()+0xad>
c0010d3d:	83 ec 0c             	sub    esp,0xc
c0010d40:	68 0b 23 02 c0       	push   0xc002230b
c0010d45:	e8 fb 9b ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010d4a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d4d:	e8 dc fe ff ff       	call   c0010c2e <CPU::setupPAT()>
c0010d52:	83 c4 10             	add    esp,0x10
c0010d55:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c0010d5c:	74 11                	je     c0010d6f <CPU::setupFeatures()+0xc7>
c0010d5e:	c7 44 24 10 14 23 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022314
c0010d66:	83 c4 08             	add    esp,0x8
c0010d69:	5b                   	pop    ebx
c0010d6a:	e9 d6 9b ff ff       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>
c0010d6f:	83 c4 08             	add    esp,0x8
c0010d72:	5b                   	pop    ebx
c0010d73:	c3                   	ret    

c0010d74 <CPU::open(int, int, void*)>:
c0010d74:	55                   	push   ebp
c0010d75:	57                   	push   edi
c0010d76:	56                   	push   esi
c0010d77:	53                   	push   ebx
c0010d78:	83 ec 18             	sub    esp,0x18
c0010d7b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010d7f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0010d83:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010d87:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0010d8d:	89 bb 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edi
c0010d93:	8d ab 7c 11 00 00    	lea    ebp,[ebx+0x117c]
c0010d99:	50                   	push   eax
c0010d9a:	e8 1f 66 ff ff       	call   c00073be <GDT::setup()>
c0010d9f:	83 c4 0c             	add    esp,0xc
c0010da2:	6a 00                	push   0x0
c0010da4:	68 ef be ad de       	push   0xdeadbeef
c0010da9:	55                   	push   ebp
c0010daa:	e8 d9 81 ff ff       	call   c0008f88 <TSS::setup(unsigned long, unsigned long)>
c0010daf:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0010db2:	e8 b1 81 ff ff       	call   c0008f68 <TSS::flush()>
c0010db7:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0010dbd:	89 04 24             	mov    DWORD PTR [esp],eax
c0010dc0:	e8 5d 68 ff ff       	call   c0007622 <IDT::setup()>
c0010dc5:	b8 00 04 00 00       	mov    eax,0x400
c0010dca:	0f 23 f8             	mov    db7,eax
c0010dcd:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0010dd7:	e8 e3 6f ff ff       	call   c0007dbf <Phys::allocatePage()>
c0010ddc:	83 c4 10             	add    esp,0x10
c0010ddf:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0010de5:	85 f6                	test   esi,esi
c0010de7:	89 38                	mov    DWORD PTR [eax],edi
c0010de9:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0010def:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0010df2:	74 10                	je     c0010e04 <CPU::open(int, int, void*)+0x90>
c0010df4:	50                   	push   eax
c0010df5:	50                   	push   eax
c0010df6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0010dfc:	56                   	push   esi
c0010dfd:	e8 ac 8a ff ff       	call   c00098ae <VAS::setCPUSpecific(unsigned long)>
c0010e02:	eb 0d                	jmp    c0010e11 <CPU::open(int, int, void*)+0x9d>
c0010e04:	83 ec 0c             	sub    esp,0xc
c0010e07:	68 1e 23 02 c0       	push   0xc002231e
c0010e0c:	e8 9e 08 00 00       	call   c00116af <KePanic(char const*)>
c0010e11:	83 c4 10             	add    esp,0x10
c0010e14:	83 ec 0c             	sub    esp,0xc
c0010e17:	68 2c 23 02 c0       	push   0xc002232c
c0010e1c:	e8 8e 01 00 00       	call   c0010faf <KeSetBootMessage(char const*)>
c0010e21:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010e24:	e8 07 f7 ff ff       	call   c0010530 <CPU::detectFeatures()>
c0010e29:	c7 04 24 4f 23 02 c0 	mov    DWORD PTR [esp],0xc002234f
c0010e30:	e8 7a 01 00 00       	call   c0010faf <KeSetBootMessage(char const*)>
c0010e35:	e8 eb 73 00 00       	call   c0018225 <HalInitialise()>
c0010e3a:	a1 d0 6e 02 c0       	mov    eax,ds:0xc0026ed0
c0010e3f:	83 e0 10             	and    eax,0x10
c0010e42:	83 f8 01             	cmp    eax,0x1
c0010e45:	19 c0                	sbb    eax,eax
c0010e47:	83 e0 46             	and    eax,0x46
c0010e4a:	83 c0 1e             	add    eax,0x1e
c0010e4d:	89 04 24             	mov    DWORD PTR [esp],eax
c0010e50:	e8 28 d6 ff ff       	call   c000e47d <setupTimer(int)>
c0010e55:	83 c4 10             	add    esp,0x10
c0010e58:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0010e5e:	f6 05 d0 6e 02 c0 20 	test   BYTE PTR ds:0xc0026ed0,0x20
c0010e65:	74 0c                	je     c0010e73 <CPU::open(int, int, void*)+0xff>
c0010e67:	83 ec 0c             	sub    esp,0xc
c0010e6a:	53                   	push   ebx
c0010e6b:	e8 38 fe ff ff       	call   c0010ca8 <CPU::setupFeatures()>
c0010e70:	83 c4 10             	add    esp,0x10
c0010e73:	83 c4 0c             	add    esp,0xc
c0010e76:	31 c0                	xor    eax,eax
c0010e78:	5b                   	pop    ebx
c0010e79:	5e                   	pop    esi
c0010e7a:	5f                   	pop    edi
c0010e7b:	5d                   	pop    ebp
c0010e7c:	c3                   	ret    

c0010e7d <KeInitialiseAtexit()>:
c0010e7d:	83 ec 10             	sub    esp,0x10
c0010e80:	c7 05 a0 bd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bda0,0x0
c0010e8a:	6a 60                	push   0x60
c0010e8c:	6a 00                	push   0x0
c0010e8e:	68 20 be 02 c0       	push   0xc002be20
c0010e93:	e8 58 f6 fe ff       	call   c00004f0 <memset>
c0010e98:	83 c4 1c             	add    esp,0x1c
c0010e9b:	c3                   	ret    

c0010e9c <KeRegisterAtexit(void (*)(void*), void*)>:
c0010e9c:	a1 a0 bd 02 c0       	mov    eax,ds:0xc002bda0
c0010ea1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010ea5:	89 14 85 20 be 02 c0 	mov    DWORD PTR [eax*4-0x3ffd41e0],edx
c0010eac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010eb0:	89 14 85 c0 bd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4240],edx
c0010eb7:	40                   	inc    eax
c0010eb8:	a3 a0 bd 02 c0       	mov    ds:0xc002bda0,eax
c0010ebd:	83 f8 17             	cmp    eax,0x17
c0010ec0:	7e 0d                	jle    c0010ecf <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c0010ec2:	c7 44 24 04 90 23 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022390
c0010eca:	e9 e0 07 00 00       	jmp    c00116af <KePanic(char const*)>
c0010ecf:	c3                   	ret    

c0010ed0 <KeExecuteAtexit()>:
c0010ed0:	53                   	push   ebx
c0010ed1:	31 db                	xor    ebx,ebx
c0010ed3:	83 ec 08             	sub    esp,0x8
c0010ed6:	39 1d a0 bd 02 c0    	cmp    DWORD PTR ds:0xc002bda0,ebx
c0010edc:	7e 50                	jle    c0010f2e <KeExecuteAtexit()+0x5e>
c0010ede:	8b 04 9d 20 be 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd41e0]
c0010ee5:	85 c0                	test   eax,eax
c0010ee7:	74 42                	je     c0010f2b <KeExecuteAtexit()+0x5b>
c0010ee9:	51                   	push   ecx
c0010eea:	50                   	push   eax
c0010eeb:	53                   	push   ebx
c0010eec:	68 a9 23 02 c0       	push   0xc00223a9
c0010ef1:	e8 4f 9a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010ef6:	58                   	pop    eax
c0010ef7:	ff 34 9d c0 bd 02 c0 	push   DWORD PTR [ebx*4-0x3ffd4240]
c0010efe:	ff 14 9d 20 be 02 c0 	call   DWORD PTR [ebx*4-0x3ffd41e0]
c0010f05:	c7 04 24 cb 23 02 c0 	mov    DWORD PTR [esp],0xc00223cb
c0010f0c:	e8 34 9a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010f11:	c7 04 24 2b 35 02 c0 	mov    DWORD PTR [esp],0xc002352b
c0010f18:	c7 04 9d 20 be 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd41e0],0x0
c0010f23:	e8 1d 9a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010f28:	83 c4 10             	add    esp,0x10
c0010f2b:	43                   	inc    ebx
c0010f2c:	eb a8                	jmp    c0010ed6 <KeExecuteAtexit()+0x6>
c0010f2e:	83 c4 08             	add    esp,0x8
c0010f31:	5b                   	pop    ebx
c0010f32:	c3                   	ret    

c0010f33 <KeDisplaySplashScreen()>:
c0010f33:	55                   	push   ebp
c0010f34:	bd 05 00 00 00       	mov    ebp,0x5
c0010f39:	57                   	push   edi
c0010f3a:	bf 0a 00 00 00       	mov    edi,0xa
c0010f3f:	56                   	push   esi
c0010f40:	31 f6                	xor    esi,esi
c0010f42:	53                   	push   ebx
c0010f43:	31 db                	xor    ebx,ebx
c0010f45:	83 ec 0c             	sub    esp,0xc
c0010f48:	0f b6 96 80 37 02 c0 	movzx  edx,BYTE PTR [esi-0x3ffdc880]
c0010f4f:	89 d0                	mov    eax,edx
c0010f51:	85 d2                	test   edx,edx
c0010f53:	74 52                	je     c0010fa7 <KeDisplaySplashScreen()+0x74>
c0010f55:	80 bb b6 37 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffdc84a],0xdb
c0010f5c:	75 13                	jne    c0010f71 <KeDisplaySplashScreen()+0x3e>
c0010f5e:	0f b6 8b b5 37 02 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffdc84b]
c0010f65:	83 e1 fe             	and    ecx,0xfffffffe
c0010f68:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c0010f6e:	75 01                	jne    c0010f71 <KeDisplaySplashScreen()+0x3e>
c0010f70:	47                   	inc    edi
c0010f71:	83 fa 0d             	cmp    edx,0xd
c0010f74:	74 28                	je     c0010f9e <KeDisplaySplashScreen()+0x6b>
c0010f76:	83 fa 0a             	cmp    edx,0xa
c0010f79:	75 0a                	jne    c0010f85 <KeDisplaySplashScreen()+0x52>
c0010f7b:	45                   	inc    ebp
c0010f7c:	bf 0a 00 00 00       	mov    edi,0xa
c0010f81:	31 db                	xor    ebx,ebx
c0010f83:	eb 19                	jmp    c0010f9e <KeDisplaySplashScreen()+0x6b>
c0010f85:	83 ec 0c             	sub    esp,0xc
c0010f88:	8d 14 1f             	lea    edx,[edi+ebx*1]
c0010f8b:	55                   	push   ebp
c0010f8c:	0f be c0             	movsx  eax,al
c0010f8f:	52                   	push   edx
c0010f90:	43                   	inc    ebx
c0010f91:	6a 00                	push   0x0
c0010f93:	6a 0e                	push   0xe
c0010f95:	50                   	push   eax
c0010f96:	e8 09 7f 00 00       	call   c0018ea4 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0010f9b:	83 c4 20             	add    esp,0x20
c0010f9e:	46                   	inc    esi
c0010f9f:	81 fe 42 01 00 00    	cmp    esi,0x142
c0010fa5:	75 a1                	jne    c0010f48 <KeDisplaySplashScreen()+0x15>
c0010fa7:	83 c4 0c             	add    esp,0xc
c0010faa:	5b                   	pop    ebx
c0010fab:	5e                   	pop    esi
c0010fac:	5f                   	pop    edi
c0010fad:	5d                   	pop    ebp
c0010fae:	c3                   	ret    

c0010faf <KeSetBootMessage(char const*)>:
c0010faf:	57                   	push   edi
c0010fb0:	56                   	push   esi
c0010fb1:	53                   	push   ebx
c0010fb2:	81 ec a4 00 00 00    	sub    esp,0xa4
c0010fb8:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0010fbf:	68 9e 00 00 00       	push   0x9e
c0010fc4:	6a 00                	push   0x0
c0010fc6:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0010fca:	56                   	push   esi
c0010fcb:	e8 20 f5 fe ff       	call   c00004f0 <memset>
c0010fd0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010fd3:	e8 98 f5 fe ff       	call   c0000570 <strlen>
c0010fd8:	ba 50 00 00 00       	mov    edx,0x50
c0010fdd:	83 c4 10             	add    esp,0x10
c0010fe0:	29 c2                	sub    edx,eax
c0010fe2:	31 c9                	xor    ecx,ecx
c0010fe4:	83 e2 fe             	and    edx,0xfffffffe
c0010fe7:	01 f2                	add    edx,esi
c0010fe9:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c0010fee:	84 c0                	test   al,al
c0010ff0:	74 0a                	je     c0010ffc <KeSetBootMessage(char const*)+0x4d>
c0010ff2:	80 cc 0f             	or     ah,0xf
c0010ff5:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c0010ff9:	41                   	inc    ecx
c0010ffa:	eb ed                	jmp    c0010fe9 <KeSetBootMessage(char const*)+0x3a>
c0010ffc:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0011001:	b9 9e 00 00 00       	mov    ecx,0x9e
c0011006:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011008:	81 c4 a0 00 00 00    	add    esp,0xa0
c001100e:	5b                   	pop    ebx
c001100f:	5e                   	pop    esi
c0011010:	5f                   	pop    edi
c0011011:	c3                   	ret    
c0011012:	66 90                	xchg   ax,ax

c0011014 <Krnl::handlePowerButton()>:
c0011014:	83 ec 0c             	sub    esp,0xc
c0011017:	e8 ee 06 00 00       	call   c001170a <KeHandlePowerButton()>
c001101c:	90                   	nop
c001101d:	83 c4 0c             	add    esp,0xc
c0011020:	c3                   	ret    
c0011021:	8d 76 00             	lea    esi,[esi+0x0]

c0011024 <Krnl::handleSleepButton()>:
c0011024:	83 ec 0c             	sub    esp,0xc
c0011027:	e8 13 07 00 00       	call   c001173f <KeHandleSleepButton()>
c001102c:	90                   	nop
c001102d:	83 c4 0c             	add    esp,0xc
c0011030:	c3                   	ret    

c0011031 <KeCalculateCRC32(unsigned char*, int)>:
c0011031:	53                   	push   ebx
c0011032:	83 c8 ff             	or     eax,0xffffffff
c0011035:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011039:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001103d:	01 cb                	add    ebx,ecx
c001103f:	39 d9                	cmp    ecx,ebx
c0011041:	74 15                	je     c0011058 <KeCalculateCRC32(unsigned char*, int)+0x27>
c0011043:	41                   	inc    ecx
c0011044:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c0011047:	31 c2                	xor    edx,eax
c0011049:	c1 e8 08             	shr    eax,0x8
c001104c:	0f b6 d2             	movzx  edx,dl
c001104f:	33 04 95 e0 38 02 c0 	xor    eax,DWORD PTR [edx*4-0x3ffdc720]
c0011056:	eb e7                	jmp    c001103f <KeCalculateCRC32(unsigned char*, int)+0xe>
c0011058:	f7 d0                	not    eax
c001105a:	5b                   	pop    ebx
c001105b:	c3                   	ret    

c001105c <EnvVarContainer::getEnv(char const*)>:
c001105c:	57                   	push   edi
c001105d:	56                   	push   esi
c001105e:	53                   	push   ebx
c001105f:	31 db                	xor    ebx,ebx
c0011061:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011065:	39 1e                	cmp    DWORD PTR [esi],ebx
c0011067:	7e 2b                	jle    c0011094 <EnvVarContainer::getEnv(char const*)+0x38>
c0011069:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0011070:	50                   	push   eax
c0011071:	50                   	push   eax
c0011072:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0011075:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0011078:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001107c:	e8 cf f6 fe ff       	call   c0000750 <strcmp>
c0011081:	83 c4 10             	add    esp,0x10
c0011084:	85 c0                	test   eax,eax
c0011086:	75 09                	jne    c0011091 <EnvVarContainer::getEnv(char const*)+0x35>
c0011088:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001108b:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001108f:	eb 05                	jmp    c0011096 <EnvVarContainer::getEnv(char const*)+0x3a>
c0011091:	43                   	inc    ebx
c0011092:	eb d1                	jmp    c0011065 <EnvVarContainer::getEnv(char const*)+0x9>
c0011094:	31 c0                	xor    eax,eax
c0011096:	5b                   	pop    ebx
c0011097:	5e                   	pop    esi
c0011098:	5f                   	pop    edi
c0011099:	c3                   	ret    

c001109a <EnvVarContainer::setEnv(char const*, char const*)>:
c001109a:	55                   	push   ebp
c001109b:	57                   	push   edi
c001109c:	56                   	push   esi
c001109d:	53                   	push   ebx
c001109e:	83 ec 28             	sub    esp,0x28
c00110a1:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00110a5:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00110a9:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00110ad:	56                   	push   esi
c00110ae:	e8 bd f4 fe ff       	call   c0000570 <strlen>
c00110b3:	40                   	inc    eax
c00110b4:	89 04 24             	mov    DWORD PTR [esp],eax
c00110b7:	e8 fa 69 ff ff       	call   c0007ab6 <malloc>
c00110bc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00110bf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00110c3:	e8 a8 f4 fe ff       	call   c0000570 <strlen>
c00110c8:	40                   	inc    eax
c00110c9:	89 04 24             	mov    DWORD PTR [esp],eax
c00110cc:	e8 e5 69 ff ff       	call   c0007ab6 <malloc>
c00110d1:	89 34 24             	mov    DWORD PTR [esp],esi
c00110d4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00110d8:	e8 93 f4 fe ff       	call   c0000570 <strlen>
c00110dd:	83 c4 0c             	add    esp,0xc
c00110e0:	40                   	inc    eax
c00110e1:	50                   	push   eax
c00110e2:	6a 00                	push   0x0
c00110e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00110e8:	e8 03 f4 fe ff       	call   c00004f0 <memset>
c00110ed:	89 34 24             	mov    DWORD PTR [esp],esi
c00110f0:	e8 7b f4 fe ff       	call   c0000570 <strlen>
c00110f5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00110f9:	8d 48 01             	lea    ecx,[eax+0x1]
c00110fc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00110fe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011101:	89 de                	mov    esi,ebx
c0011103:	e8 68 f4 fe ff       	call   c0000570 <strlen>
c0011108:	83 c4 0c             	add    esp,0xc
c001110b:	40                   	inc    eax
c001110c:	50                   	push   eax
c001110d:	6a 00                	push   0x0
c001110f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011113:	e8 d8 f3 fe ff       	call   c00004f0 <memset>
c0011118:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001111b:	e8 50 f4 fe ff       	call   c0000570 <strlen>
c0011120:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0011124:	8d 48 01             	lea    ecx,[eax+0x1]
c0011127:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011129:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001112c:	40                   	inc    eax
c001112d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0011130:	c1 e0 03             	shl    eax,0x3
c0011133:	5a                   	pop    edx
c0011134:	59                   	pop    ecx
c0011135:	50                   	push   eax
c0011136:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0011139:	e8 64 69 ff ff       	call   c0007aa2 <realloc>
c001113e:	8d 74 24 18          	lea    esi,[esp+0x18]
c0011142:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0011145:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0011148:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001114c:	b9 08 00 00 00       	mov    ecx,0x8
c0011151:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011153:	83 c4 2c             	add    esp,0x2c
c0011156:	5b                   	pop    ebx
c0011157:	5e                   	pop    esi
c0011158:	5f                   	pop    edi
c0011159:	5d                   	pop    ebp
c001115a:	c3                   	ret    
c001115b:	90                   	nop

c001115c <EnvVarContainer::deleteEnv(char const*)>:
c001115c:	c3                   	ret    
c001115d:	90                   	nop

c001115e <EnvVarContainer::loadFrom(char const*, char const*)>:
c001115e:	55                   	push   ebp
c001115f:	57                   	push   edi
c0011160:	56                   	push   esi
c0011161:	53                   	push   ebx
c0011162:	81 ec 38 01 00 00    	sub    esp,0x138
c0011168:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001116f:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0011176:	68 14 01 00 00       	push   0x114
c001117b:	e8 36 69 ff ff       	call   c0007ab6 <malloc>
c0011180:	83 c4 0c             	add    esp,0xc
c0011183:	89 c3                	mov    ebx,eax
c0011185:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0011188:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001118f:	50                   	push   eax
c0011190:	e8 47 aa ff ff       	call   c000bbdc <File::File(char const*, Process*)>
c0011195:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011198:	e8 21 ad ff ff       	call   c000bebe <File::exists()>
c001119d:	83 c4 10             	add    esp,0x10
c00111a0:	84 c0                	test   al,al
c00111a2:	75 31                	jne    c00111d5 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c00111a4:	50                   	push   eax
c00111a5:	50                   	push   eax
c00111a6:	6a 12                	push   0x12
c00111a8:	53                   	push   ebx
c00111a9:	e8 4c aa ff ff       	call   c000bbfa <File::open(FileOpenMode)>
c00111ae:	8b 03                	mov    eax,DWORD PTR [ebx]
c00111b0:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00111b3:	89 34 24             	mov    DWORD PTR [esp],esi
c00111b6:	e8 b5 f3 fe ff       	call   c0000570 <strlen>
c00111bb:	5a                   	pop    edx
c00111bc:	31 d2                	xor    edx,edx
c00111be:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00111c2:	51                   	push   ecx
c00111c3:	56                   	push   esi
c00111c4:	52                   	push   edx
c00111c5:	50                   	push   eax
c00111c6:	53                   	push   ebx
c00111c7:	ff d7                	call   edi
c00111c9:	83 c4 14             	add    esp,0x14
c00111cc:	53                   	push   ebx
c00111cd:	e8 86 aa ff ff       	call   c000bc58 <File::close()>
c00111d2:	83 c4 10             	add    esp,0x10
c00111d5:	56                   	push   esi
c00111d6:	31 f6                	xor    esi,esi
c00111d8:	68 00 01 00 00       	push   0x100
c00111dd:	6a 00                	push   0x0
c00111df:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00111e3:	50                   	push   eax
c00111e4:	e8 07 f3 fe ff       	call   c00004f0 <memset>
c00111e9:	5f                   	pop    edi
c00111ea:	58                   	pop    eax
c00111eb:	6a 01                	push   0x1
c00111ed:	53                   	push   ebx
c00111ee:	e8 07 aa ff ff       	call   c000bbfa <File::open(FileOpenMode)>
c00111f3:	83 c4 10             	add    esp,0x10
c00111f6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00111fe:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011206:	83 ec 0c             	sub    esp,0xc
c0011209:	8b 03                	mov    eax,DWORD PTR [ebx]
c001120b:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001120f:	51                   	push   ecx
c0011210:	8d 54 24 23          	lea    edx,[esp+0x23]
c0011214:	52                   	push   edx
c0011215:	6a 00                	push   0x0
c0011217:	6a 01                	push   0x1
c0011219:	53                   	push   ebx
c001121a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001121d:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c0011222:	83 c4 20             	add    esp,0x20
c0011225:	89 c2                	mov    edx,eax
c0011227:	85 c0                	test   eax,eax
c0011229:	0f 84 36 01 00 00    	je     c0011365 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c001122f:	83 f8 0d             	cmp    eax,0xd
c0011232:	0f 84 22 01 00 00    	je     c001135a <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0011238:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001123d:	0f 84 f0 00 00 00    	je     c0011333 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c0011243:	83 f8 0a             	cmp    eax,0xa
c0011246:	74 13                	je     c001125b <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c0011248:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001124d:	74 0c                	je     c001125b <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c001124f:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0011255:	0f 8e f6 00 00 00    	jle    c0011351 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c001125b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001125f:	83 ec 0c             	sub    esp,0xc
c0011262:	8d 78 01             	lea    edi,[eax+0x1]
c0011265:	57                   	push   edi
c0011266:	e8 4b 68 ff ff       	call   c0007ab6 <malloc>
c001126b:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c001126f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0011273:	8d 56 04             	lea    edx,[esi+0x4]
c0011276:	89 14 24             	mov    DWORD PTR [esp],edx
c0011279:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001127d:	e8 34 68 ff ff       	call   c0007ab6 <malloc>
c0011282:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0011286:	83 c4 0c             	add    esp,0xc
c0011289:	57                   	push   edi
c001128a:	6a 00                	push   0x0
c001128c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011290:	e8 5b f2 fe ff       	call   c00004f0 <memset>
c0011295:	8d 74 24 30          	lea    esi,[esp+0x30]
c0011299:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001129d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00112a1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00112a3:	83 c4 0c             	add    esp,0xc
c00112a6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00112aa:	52                   	push   edx
c00112ab:	6a 00                	push   0x0
c00112ad:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00112b1:	e8 3a f2 fe ff       	call   c00004f0 <memset>
c00112b6:	8d 74 24 30          	lea    esi,[esp+0x30]
c00112ba:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00112be:	89 34 24             	mov    DWORD PTR [esp],esi
c00112c1:	e8 aa f2 fe ff       	call   c0000570 <strlen>
c00112c6:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c00112ca:	89 c1                	mov    ecx,eax
c00112cc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00112ce:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00112d1:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c00112d4:	40                   	inc    eax
c00112d5:	83 c4 10             	add    esp,0x10
c00112d8:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00112db:	85 d2                	test   edx,edx
c00112dd:	75 0c                	jne    c00112eb <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c00112df:	83 ec 0c             	sub    esp,0xc
c00112e2:	6a 08                	push   0x8
c00112e4:	e8 cd 67 ff ff       	call   c0007ab6 <malloc>
c00112e9:	eb 0c                	jmp    c00112f7 <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c00112eb:	c1 e0 03             	shl    eax,0x3
c00112ee:	51                   	push   ecx
c00112ef:	51                   	push   ecx
c00112f0:	50                   	push   eax
c00112f1:	52                   	push   edx
c00112f2:	e8 ab 67 ff ff       	call   c0007aa2 <realloc>
c00112f7:	83 c4 10             	add    esp,0x10
c00112fa:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00112fd:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0011300:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0011303:	8d 74 24 18          	lea    esi,[esp+0x18]
c0011307:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001130b:	b9 08 00 00 00       	mov    ecx,0x8
c0011310:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011312:	31 f6                	xor    esi,esi
c0011314:	50                   	push   eax
c0011315:	68 00 01 00 00       	push   0x100
c001131a:	6a 00                	push   0x0
c001131c:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0011320:	50                   	push   eax
c0011321:	e8 ca f1 fe ff       	call   c00004f0 <memset>
c0011326:	83 c4 10             	add    esp,0x10
c0011329:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011331:	eb 27                	jmp    c001135a <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0011333:	83 f8 3d             	cmp    eax,0x3d
c0011336:	74 1e                	je     c0011356 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c0011338:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001133e:	7f 07                	jg     c0011347 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c0011340:	88 54 34 20          	mov    BYTE PTR [esp+esi*1+0x20],dl
c0011344:	46                   	inc    esi
c0011345:	eb 13                	jmp    c001135a <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0011347:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001134f:	eb 09                	jmp    c001135a <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0011351:	83 f8 3d             	cmp    eax,0x3d
c0011354:	75 ea                	jne    c0011340 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c0011356:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001135a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001135f:	0f 85 99 fe ff ff    	jne    c00111fe <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0011365:	83 ec 0c             	sub    esp,0xc
c0011368:	53                   	push   ebx
c0011369:	e8 ea a8 ff ff       	call   c000bc58 <File::close()>
c001136e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011370:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011373:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011376:	81 c4 3c 01 00 00    	add    esp,0x13c
c001137c:	5b                   	pop    ebx
c001137d:	5e                   	pop    esi
c001137e:	5f                   	pop    edi
c001137f:	5d                   	pop    ebp
c0011380:	c3                   	ret    
c0011381:	90                   	nop

c0011382 <EnvVarContainer::__loadSystem()>:
c0011382:	83 ec 10             	sub    esp,0x10
c0011385:	68 e0 3c 02 c0       	push   0xc0023ce0
c001138a:	68 d0 23 02 c0       	push   0xc00223d0
c001138f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011393:	e8 c6 fd ff ff       	call   c001115e <EnvVarContainer::loadFrom(char const*, char const*)>
c0011398:	83 c4 1c             	add    esp,0x1c
c001139b:	c3                   	ret    

c001139c <EnvVarContainer::__loadUser()>:
c001139c:	c3                   	ret    
c001139d:	90                   	nop

c001139e <EnvVarContainer::EnvVarContainer(Process*)>:
c001139e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00113a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00113a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00113ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00113b0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00113b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00113b7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00113be:	90                   	nop
c00113bf:	c3                   	ret    

c00113c0 <EnvVarContainer::~EnvVarContainer()>:
c00113c0:	83 ec 0c             	sub    esp,0xc
c00113c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113c7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113ca:	85 c0                	test   eax,eax
c00113cc:	74 1d                	je     c00113eb <EnvVarContainer::~EnvVarContainer()+0x2b>
c00113ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113d2:	8b 00                	mov    eax,DWORD PTR [eax]
c00113d4:	85 c0                	test   eax,eax
c00113d6:	74 13                	je     c00113eb <EnvVarContainer::~EnvVarContainer()+0x2b>
c00113d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113df:	83 ec 0c             	sub    esp,0xc
c00113e2:	50                   	push   eax
c00113e3:	e8 de 66 ff ff       	call   c0007ac6 <free>
c00113e8:	83 c4 10             	add    esp,0x10
c00113eb:	90                   	nop
c00113ec:	83 c4 0c             	add    esp,0xc
c00113ef:	c3                   	ret    

c00113f0 <KeGetEnv(Process*, char const*)>:
c00113f0:	53                   	push   ebx
c00113f1:	83 ec 08             	sub    esp,0x8
c00113f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113f8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00113fc:	39 05 f0 c6 02 c0    	cmp    DWORD PTR ds:0xc002c6f0,eax
c0011402:	74 04                	je     c0011408 <KeGetEnv(Process*, char const*)+0x18>
c0011404:	85 c0                	test   eax,eax
c0011406:	75 0b                	jne    c0011413 <KeGetEnv(Process*, char const*)+0x23>
c0011408:	a1 80 be 02 c0       	mov    eax,ds:0xc002be80
c001140d:	85 c0                	test   eax,eax
c001140f:	75 19                	jne    c001142a <KeGetEnv(Process*, char const*)+0x3a>
c0011411:	eb 27                	jmp    c001143a <KeGetEnv(Process*, char const*)+0x4a>
c0011413:	52                   	push   edx
c0011414:	52                   	push   edx
c0011415:	53                   	push   ebx
c0011416:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c001141c:	e8 3b fc ff ff       	call   c001105c <EnvVarContainer::getEnv(char const*)>
c0011421:	83 c4 10             	add    esp,0x10
c0011424:	85 c0                	test   eax,eax
c0011426:	75 28                	jne    c0011450 <KeGetEnv(Process*, char const*)+0x60>
c0011428:	eb de                	jmp    c0011408 <KeGetEnv(Process*, char const*)+0x18>
c001142a:	52                   	push   edx
c001142b:	52                   	push   edx
c001142c:	53                   	push   ebx
c001142d:	50                   	push   eax
c001142e:	e8 29 fc ff ff       	call   c001105c <EnvVarContainer::getEnv(char const*)>
c0011433:	83 c4 10             	add    esp,0x10
c0011436:	85 c0                	test   eax,eax
c0011438:	75 16                	jne    c0011450 <KeGetEnv(Process*, char const*)+0x60>
c001143a:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001143e:	a1 84 be 02 c0       	mov    eax,ds:0xc002be84
c0011443:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011447:	83 c4 08             	add    esp,0x8
c001144a:	5b                   	pop    ebx
c001144b:	e9 0c fc ff ff       	jmp    c001105c <EnvVarContainer::getEnv(char const*)>
c0011450:	83 c4 08             	add    esp,0x8
c0011453:	5b                   	pop    ebx
c0011454:	c3                   	ret    

c0011455 <KeSetEnvSystem(char const*, char const*)>:
c0011455:	83 ec 10             	sub    esp,0x10
c0011458:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001145c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011460:	ff 35 84 be 02 c0    	push   DWORD PTR ds:0xc002be84
c0011466:	e8 2f fc ff ff       	call   c001109a <EnvVarContainer::setEnv(char const*, char const*)>
c001146b:	83 c4 1c             	add    esp,0x1c
c001146e:	c3                   	ret    

c001146f <KeSetEnvUser(char const*, char const*)>:
c001146f:	a1 80 be 02 c0       	mov    eax,ds:0xc002be80
c0011474:	85 c0                	test   eax,eax
c0011476:	74 15                	je     c001148d <KeSetEnvUser(char const*, char const*)+0x1e>
c0011478:	83 ec 10             	sub    esp,0x10
c001147b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001147f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011483:	50                   	push   eax
c0011484:	e8 11 fc ff ff       	call   c001109a <EnvVarContainer::setEnv(char const*, char const*)>
c0011489:	83 c4 1c             	add    esp,0x1c
c001148c:	c3                   	ret    
c001148d:	c3                   	ret    

c001148e <KeSetEnvProcess(Process*, char const*, char const*)>:
c001148e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011492:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0011498:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001149c:	e9 f9 fb ff ff       	jmp    c001109a <EnvVarContainer::setEnv(char const*, char const*)>

c00114a1 <KeDeleteEnvSystem(char const*)>:
c00114a1:	c3                   	ret    

c00114a2 <KeDeleteEnvUser(char const*)>:
c00114a2:	c3                   	ret    

c00114a3 <KeDeleteEnvProcess(Process*, char const*)>:
c00114a3:	c3                   	ret    

c00114a4 <KeNewProcessEnv(Process*)>:
c00114a4:	83 ec 28             	sub    esp,0x28
c00114a7:	6a 0c                	push   0xc
c00114a9:	e8 08 66 ff ff       	call   c0007ab6 <malloc>
c00114ae:	5a                   	pop    edx
c00114af:	59                   	pop    ecx
c00114b0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00114b4:	50                   	push   eax
c00114b5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00114b9:	e8 e0 fe ff ff       	call   c001139e <EnvVarContainer::EnvVarContainer(Process*)>
c00114be:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00114c2:	83 c4 2c             	add    esp,0x2c
c00114c5:	c3                   	ret    

c00114c6 <KeCopyProcessEnv(Process*, Process*)>:
c00114c6:	57                   	push   edi
c00114c7:	56                   	push   esi
c00114c8:	53                   	push   ebx
c00114c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00114cd:	83 ec 0c             	sub    esp,0xc
c00114d0:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c00114d6:	6a 0c                	push   0xc
c00114d8:	e8 d9 65 ff ff       	call   c0007ab6 <malloc>
c00114dd:	89 c3                	mov    ebx,eax
c00114df:	58                   	pop    eax
c00114e0:	5a                   	pop    edx
c00114e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114e5:	53                   	push   ebx
c00114e6:	e8 b3 fe ff ff       	call   c001139e <EnvVarContainer::EnvVarContainer(Process*)>
c00114eb:	8b 07                	mov    eax,DWORD PTR [edi]
c00114ed:	89 03                	mov    DWORD PTR [ebx],eax
c00114ef:	c1 e0 03             	shl    eax,0x3
c00114f2:	89 04 24             	mov    DWORD PTR [esp],eax
c00114f5:	e8 bc 65 ff ff       	call   c0007ab6 <malloc>
c00114fa:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00114fd:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00114ff:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0011502:	c1 e1 03             	shl    ecx,0x3
c0011505:	89 c7                	mov    edi,eax
c0011507:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011509:	83 c4 10             	add    esp,0x10
c001150c:	89 d8                	mov    eax,ebx
c001150e:	5b                   	pop    ebx
c001150f:	5e                   	pop    esi
c0011510:	5f                   	pop    edi
c0011511:	c3                   	ret    

c0011512 <KeLoadSystemEnv()>:
c0011512:	53                   	push   ebx
c0011513:	83 ec 14             	sub    esp,0x14
c0011516:	6a 0c                	push   0xc
c0011518:	e8 99 65 ff ff       	call   c0007ab6 <malloc>
c001151d:	89 c3                	mov    ebx,eax
c001151f:	58                   	pop    eax
c0011520:	5a                   	pop    edx
c0011521:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0011527:	53                   	push   ebx
c0011528:	e8 71 fe ff ff       	call   c001139e <EnvVarContainer::EnvVarContainer(Process*)>
c001152d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011530:	89 1d 84 be 02 c0    	mov    DWORD PTR ds:0xc002be84,ebx
c0011536:	e8 47 fe ff ff       	call   c0011382 <EnvVarContainer::__loadSystem()>
c001153b:	83 c4 18             	add    esp,0x18
c001153e:	5b                   	pop    ebx
c001153f:	c3                   	ret    

c0011540 <KeLoadUserEnv()>:
c0011540:	53                   	push   ebx
c0011541:	83 ec 14             	sub    esp,0x14
c0011544:	6a 0c                	push   0xc
c0011546:	e8 6b 65 ff ff       	call   c0007ab6 <malloc>
c001154b:	89 c3                	mov    ebx,eax
c001154d:	58                   	pop    eax
c001154e:	5a                   	pop    edx
c001154f:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0011555:	53                   	push   ebx
c0011556:	e8 43 fe ff ff       	call   c001139e <EnvVarContainer::EnvVarContainer(Process*)>
c001155b:	89 1d 80 be 02 c0    	mov    DWORD PTR ds:0xc002be80,ebx
c0011561:	83 c4 18             	add    esp,0x18
c0011564:	5b                   	pop    ebx
c0011565:	c3                   	ret    

c0011566 <KeFlushEnv()>:
c0011566:	c3                   	ret    

c0011567 <KeGetProcessTotalEnvCount(Process*)>:
c0011567:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001156b:	8b 15 80 be 02 c0    	mov    edx,DWORD PTR ds:0xc002be80
c0011571:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0011577:	a1 84 be 02 c0       	mov    eax,ds:0xc002be84
c001157c:	8b 00                	mov    eax,DWORD PTR [eax]
c001157e:	03 01                	add    eax,DWORD PTR [ecx]
c0011580:	85 d2                	test   edx,edx
c0011582:	74 02                	je     c0011586 <KeGetProcessTotalEnvCount(Process*)+0x1f>
c0011584:	03 02                	add    eax,DWORD PTR [edx]
c0011586:	c3                   	ret    

c0011587 <KeGetProcessEnvPair(Process*, int)>:
c0011587:	57                   	push   edi
c0011588:	56                   	push   esi
c0011589:	8b 35 80 be 02 c0    	mov    esi,DWORD PTR ds:0xc002be80
c001158f:	53                   	push   ebx
c0011590:	85 f6                	test   esi,esi
c0011592:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011596:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001159a:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00115a0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00115a4:	8b 01                	mov    eax,DWORD PTR [ecx]
c00115a6:	75 16                	jne    c00115be <KeGetProcessEnvPair(Process*, int)+0x37>
c00115a8:	39 c2                	cmp    edx,eax
c00115aa:	7c 16                	jl     c00115c2 <KeGetProcessEnvPair(Process*, int)+0x3b>
c00115ac:	8b 0d 84 be 02 c0    	mov    ecx,DWORD PTR ds:0xc002be84
c00115b2:	8b 31                	mov    esi,DWORD PTR [ecx]
c00115b4:	01 c6                	add    esi,eax
c00115b6:	39 d6                	cmp    esi,edx
c00115b8:	7e 3c                	jle    c00115f6 <KeGetProcessEnvPair(Process*, int)+0x6f>
c00115ba:	29 c2                	sub    edx,eax
c00115bc:	eb 04                	jmp    c00115c2 <KeGetProcessEnvPair(Process*, int)+0x3b>
c00115be:	39 c2                	cmp    edx,eax
c00115c0:	7d 05                	jge    c00115c7 <KeGetProcessEnvPair(Process*, int)+0x40>
c00115c2:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00115c5:	eb 20                	jmp    c00115e7 <KeGetProcessEnvPair(Process*, int)+0x60>
c00115c7:	8b 3e                	mov    edi,DWORD PTR [esi]
c00115c9:	8d 0c 07             	lea    ecx,[edi+eax*1]
c00115cc:	39 d1                	cmp    ecx,edx
c00115ce:	7e 04                	jle    c00115d4 <KeGetProcessEnvPair(Process*, int)+0x4d>
c00115d0:	29 c2                	sub    edx,eax
c00115d2:	eb 10                	jmp    c00115e4 <KeGetProcessEnvPair(Process*, int)+0x5d>
c00115d4:	8b 35 84 be 02 c0    	mov    esi,DWORD PTR ds:0xc002be84
c00115da:	03 0e                	add    ecx,DWORD PTR [esi]
c00115dc:	39 d1                	cmp    ecx,edx
c00115de:	7e 16                	jle    c00115f6 <KeGetProcessEnvPair(Process*, int)+0x6f>
c00115e0:	29 c2                	sub    edx,eax
c00115e2:	29 fa                	sub    edx,edi
c00115e4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00115e7:	8d 14 d0             	lea    edx,[eax+edx*8]
c00115ea:	8b 02                	mov    eax,DWORD PTR [edx]
c00115ec:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00115ef:	89 03                	mov    DWORD PTR [ebx],eax
c00115f1:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00115f4:	eb 1d                	jmp    c0011613 <KeGetProcessEnvPair(Process*, int)+0x8c>
c00115f6:	83 ec 0c             	sub    esp,0xc
c00115f9:	68 f2 23 02 c0       	push   0xc00223f2
c00115fe:	e8 ac 00 00 00       	call   c00116af <KePanic(char const*)>
c0011603:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011609:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0011610:	83 c4 10             	add    esp,0x10
c0011613:	89 d8                	mov    eax,ebx
c0011615:	5b                   	pop    ebx
c0011616:	5e                   	pop    esi
c0011617:	5f                   	pop    edi
c0011618:	c2 04 00             	ret    0x4

c001161b <CPU::current()>:
c001161b:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0011620:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011626:	c3                   	ret    

c0011627 <operator new(unsigned long)>:
c0011627:	e9 8a 64 ff ff       	jmp    c0007ab6 <malloc>

c001162c <operator delete(void*)>:
c001162c:	e9 a5 64 ff ff       	jmp    c0007ad6 <rfree>

c0011631 <disableIRQs()>:
c0011631:	fa                   	cli    
c0011632:	c3                   	ret    

c0011633 <enableIRQs()>:
c0011633:	fb                   	sti    
c0011634:	c3                   	ret    

c0011635 <lockScheduler()>:
c0011635:	fa                   	cli    
c0011636:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c001163c:	c3                   	ret    

c001163d <unlockScheduler()>:
c001163d:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0011642:	48                   	dec    eax
c0011643:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0011648:	75 01                	jne    c001164b <unlockScheduler()+0xe>
c001164a:	fb                   	sti    
c001164b:	c3                   	ret    

c001164c <lockStuff()>:
c001164c:	fa                   	cli    
c001164d:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0011653:	ff 05 c4 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c4
c0011659:	c3                   	ret    

c001165a <unlockStuff()>:
c001165a:	83 ec 0c             	sub    esp,0xc
c001165d:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0011662:	48                   	dec    eax
c0011663:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0011668:	75 18                	jne    c0011682 <unlockStuff()+0x28>
c001166a:	83 3d c0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6c0,0x0
c0011671:	74 0f                	je     c0011682 <unlockStuff()+0x28>
c0011673:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c001167d:	e8 ce 4a 00 00       	call   c0016150 <schedule()>
c0011682:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0011687:	48                   	dec    eax
c0011688:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001168d:	75 01                	jne    c0011690 <unlockStuff()+0x36>
c001168f:	fb                   	sti    
c0011690:	83 c4 0c             	add    esp,0xc
c0011693:	c3                   	ret    

c0011694 <Virt::getAKernelVAS()>:
c0011694:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c0011699:	c3                   	ret    

c001169a <__not_memcpy>:
c001169a:	57                   	push   edi
c001169b:	56                   	push   esi
c001169c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00116a0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00116a4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00116a8:	89 c7                	mov    edi,eax
c00116aa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00116ac:	5e                   	pop    esi
c00116ad:	5f                   	pop    edi
c00116ae:	c3                   	ret    

c00116af <KePanic(char const*)>:
c00116af:	c6 05 88 be 02 c0 01 	mov    BYTE PTR ds:0xc002be88,0x1
c00116b6:	e9 3b 6a 00 00       	jmp    c00180f6 <HalPanic(char const*)>

c00116bb <KePowerThread(void*)>:
c00116bb:	83 ec 0c             	sub    esp,0xc
c00116be:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00116c3:	48                   	dec    eax
c00116c4:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00116c9:	75 01                	jne    c00116cc <KePowerThread(void*)+0x11>
c00116cb:	fb                   	sti    
c00116cc:	83 ec 0c             	sub    esp,0xc
c00116cf:	c6 05 a0 be 02 c0 00 	mov    BYTE PTR ds:0xc002bea0,0x0
c00116d6:	6a 0a                	push   0xa
c00116d8:	e8 b7 4d 00 00       	call   c0016494 <sleep(unsigned int)>
c00116dd:	83 05 e4 be 02 c0 0a 	add    DWORD PTR ds:0xc002bee4,0xa
c00116e4:	83 c4 10             	add    esp,0x10
c00116e7:	eb e3                	jmp    c00116cc <KePowerThread(void*)+0x11>

c00116e9 <KeChangePowerSettings(PowerSettings)>:
c00116e9:	57                   	push   edi
c00116ea:	b9 09 00 00 00       	mov    ecx,0x9
c00116ef:	56                   	push   esi
c00116f0:	bf c0 be 02 c0       	mov    edi,0xc002bec0
c00116f5:	fc                   	cld    
c00116f6:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00116fa:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00116fc:	5e                   	pop    esi
c00116fd:	5f                   	pop    edi
c00116fe:	c3                   	ret    

c00116ff <KeUserIOReceived()>:
c00116ff:	c7 05 e4 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bee4,0x0
c0011709:	c3                   	ret    

c001170a <KeHandlePowerButton()>:
c001170a:	83 ec 0c             	sub    esp,0xc
c001170d:	a1 c0 be 02 c0       	mov    eax,ds:0xc002bec0
c0011712:	83 f8 02             	cmp    eax,0x2
c0011715:	75 10                	jne    c0011727 <KeHandlePowerButton()+0x1d>
c0011717:	83 ec 0c             	sub    esp,0xc
c001171a:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0011720:	e8 03 5a ff ff       	call   c0007128 <Computer::shutdown()>
c0011725:	eb 11                	jmp    c0011738 <KeHandlePowerButton()+0x2e>
c0011727:	48                   	dec    eax
c0011728:	75 11                	jne    c001173b <KeHandlePowerButton()+0x31>
c001172a:	83 ec 0c             	sub    esp,0xc
c001172d:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0011733:	e8 20 5a ff ff       	call   c0007158 <Computer::sleep()>
c0011738:	83 c4 10             	add    esp,0x10
c001173b:	83 c4 0c             	add    esp,0xc
c001173e:	c3                   	ret    

c001173f <KeHandleSleepButton()>:
c001173f:	83 ec 0c             	sub    esp,0xc
c0011742:	a1 c4 be 02 c0       	mov    eax,ds:0xc002bec4
c0011747:	83 f8 02             	cmp    eax,0x2
c001174a:	75 10                	jne    c001175c <KeHandleSleepButton()+0x1d>
c001174c:	83 ec 0c             	sub    esp,0xc
c001174f:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0011755:	e8 ce 59 ff ff       	call   c0007128 <Computer::shutdown()>
c001175a:	eb 11                	jmp    c001176d <KeHandleSleepButton()+0x2e>
c001175c:	48                   	dec    eax
c001175d:	75 11                	jne    c0011770 <KeHandleSleepButton()+0x31>
c001175f:	83 ec 0c             	sub    esp,0xc
c0011762:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0011768:	e8 eb 59 ff ff       	call   c0007158 <Computer::sleep()>
c001176d:	83 c4 10             	add    esp,0x10
c0011770:	83 c4 0c             	add    esp,0xc
c0011773:	c3                   	ret    

c0011774 <KeSetupPowerManager()>:
c0011774:	83 ec 0c             	sub    esp,0xc
c0011777:	c7 05 e4 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bee4,0x0
c0011781:	68 f0 00 00 00       	push   0xf0
c0011786:	c6 05 a0 be 02 c0 00 	mov    BYTE PTR ds:0xc002bea0,0x0
c001178d:	6a 00                	push   0x0
c001178f:	68 bb 16 01 c0       	push   0xc00116bb
c0011794:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c001179a:	e8 61 47 00 00       	call   c0015f00 <Process::createThread(void (*)(void*), void*, int)>
c001179f:	c7 05 c0 be 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002bec0,0x2
c00117a9:	c7 05 c4 be 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002bec4,0x1
c00117b3:	c7 05 c8 be 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002bec8,0x3
c00117bd:	c7 05 cc be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002becc,0x0
c00117c7:	c7 05 d8 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bed8,0x0
c00117d1:	c7 05 d0 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bed0,0x0
c00117db:	c7 05 dc be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bedc,0x0
c00117e5:	c7 05 d4 be 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002bed4,0x3c
c00117ef:	c7 05 e0 be 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002bee0,0x3c
c00117f9:	83 c4 1c             	add    esp,0x1c
c00117fc:	c3                   	ret    

c00117fd <KeRand()>:
c00117fd:	69 05 e8 be 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc002bee8,0x2875
c0011807:	69 0d ec be 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002beec,0xa2e7b175
c0011811:	53                   	push   ebx
c0011812:	01 c1                	add    ecx,eax
c0011814:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c0011819:	f7 25 e8 be 02 c0    	mul    DWORD PTR ds:0xc002bee8
c001181f:	01 ca                	add    edx,ecx
c0011821:	05 ef 04 b5 00       	add    eax,0xb504ef
c0011826:	83 d2 00             	adc    edx,0x0
c0011829:	a3 e8 be 02 c0       	mov    ds:0xc002bee8,eax
c001182e:	0f b7 da             	movzx  ebx,dx
c0011831:	89 da                	mov    edx,ebx
c0011833:	89 1d ec be 02 c0    	mov    DWORD PTR ds:0xc002beec,ebx
c0011839:	0f ac d0 0e          	shrd   eax,edx,0xe
c001183d:	5b                   	pop    ebx
c001183e:	c3                   	ret    

c001183f <KeSeedRand(unsigned int)>:
c001183f:	53                   	push   ebx
c0011840:	83 ec 08             	sub    esp,0x8
c0011843:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011847:	e8 c9 6b 00 00       	call   c0018415 <HalGetRand()>
c001184c:	c7 05 ec be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002beec,0x0
c0011856:	31 d8                	xor    eax,ebx
c0011858:	a3 e8 be 02 c0       	mov    ds:0xc002bee8,eax
c001185d:	e8 9b ff ff ff       	call   c00117fd <KeRand()>
c0011862:	83 c4 08             	add    esp,0x8
c0011865:	5b                   	pop    ebx
c0011866:	eb 95                	jmp    c00117fd <KeRand()>

c0011868 <KeInitRand()>:
c0011868:	83 ec 0c             	sub    esp,0xc
c001186b:	e8 9a 69 00 00       	call   c001820a <HalQueryPerformanceCounter()>
c0011870:	0f 20 da             	mov    edx,cr3
c0011873:	0f 22 da             	mov    cr3,edx
c0011876:	0f 20 da             	mov    edx,cr3
c0011879:	0f 22 da             	mov    cr3,edx
c001187c:	0f 20 da             	mov    edx,cr3
c001187f:	0f 22 da             	mov    cr3,edx
c0011882:	0f 20 da             	mov    edx,cr3
c0011885:	0f 22 da             	mov    cr3,edx
c0011888:	83 ec 0c             	sub    esp,0xc
c001188b:	35 03 8a 95 38       	xor    eax,0x38958a03
c0011890:	50                   	push   eax
c0011891:	e8 a9 ff ff ff       	call   c001183f <KeSeedRand(unsigned int)>
c0011896:	83 c4 1c             	add    esp,0x1c
c0011899:	c3                   	ret    
c001189a:	66 90                	xchg   ax,ax

c001189c <KeResolveCompatibilitySymbol(char*)>:
c001189c:	83 ec 0c             	sub    esp,0xc
c001189f:	83 ec 08             	sub    esp,0x8
c00118a2:	68 0c 24 02 c0       	push   0xc002240c
c00118a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118ab:	e8 a0 ee fe ff       	call   c0000750 <strcmp>
c00118b0:	83 c4 10             	add    esp,0x10
c00118b3:	85 c0                	test   eax,eax
c00118b5:	0f 94 c0             	sete   al
c00118b8:	0f b6 c0             	movzx  eax,al
c00118bb:	85 c0                	test   eax,eax
c00118bd:	74 0d                	je     c00118cc <KeResolveCompatibilitySymbol(char*)+0x30>
c00118bf:	b8 b8 6e 02 c0       	mov    eax,0xc0026eb8
c00118c4:	e9 8b 01 00 00       	jmp    c0011a54 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00118c9:	8d 76 00             	lea    esi,[esi+0x0]
c00118cc:	83 ec 08             	sub    esp,0x8
c00118cf:	68 15 24 02 c0       	push   0xc0022415
c00118d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118d8:	e8 73 ee fe ff       	call   c0000750 <strcmp>
c00118dd:	83 c4 10             	add    esp,0x10
c00118e0:	85 c0                	test   eax,eax
c00118e2:	0f 94 c0             	sete   al
c00118e5:	0f b6 c0             	movzx  eax,al
c00118e8:	85 c0                	test   eax,eax
c00118ea:	74 0c                	je     c00118f8 <KeResolveCompatibilitySymbol(char*)+0x5c>
c00118ec:	b8 c0 f7 01 c0       	mov    eax,0xc001f7c0
c00118f1:	e9 5e 01 00 00       	jmp    c0011a54 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00118f6:	66 90                	xchg   ax,ax
c00118f8:	83 ec 08             	sub    esp,0x8
c00118fb:	68 1f 24 02 c0       	push   0xc002241f
c0011900:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011904:	e8 47 ee fe ff       	call   c0000750 <strcmp>
c0011909:	83 c4 10             	add    esp,0x10
c001190c:	85 c0                	test   eax,eax
c001190e:	0f 94 c0             	sete   al
c0011911:	0f b6 c0             	movzx  eax,al
c0011914:	85 c0                	test   eax,eax
c0011916:	74 0c                	je     c0011924 <KeResolveCompatibilitySymbol(char*)+0x88>
c0011918:	b8 f4 f4 01 c0       	mov    eax,0xc001f4f4
c001191d:	e9 32 01 00 00       	jmp    c0011a54 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011922:	66 90                	xchg   ax,ax
c0011924:	83 ec 08             	sub    esp,0x8
c0011927:	68 28 24 02 c0       	push   0xc0022428
c001192c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011930:	e8 1b ee fe ff       	call   c0000750 <strcmp>
c0011935:	83 c4 10             	add    esp,0x10
c0011938:	85 c0                	test   eax,eax
c001193a:	0f 94 c0             	sete   al
c001193d:	0f b6 c0             	movzx  eax,al
c0011940:	85 c0                	test   eax,eax
c0011942:	74 0c                	je     c0011950 <KeResolveCompatibilitySymbol(char*)+0xb4>
c0011944:	b8 af 16 01 c0       	mov    eax,0xc00116af
c0011949:	e9 06 01 00 00       	jmp    c0011a54 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001194e:	66 90                	xchg   ax,ax
c0011950:	83 ec 08             	sub    esp,0x8
c0011953:	68 3b 24 02 c0       	push   0xc002243b
c0011958:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001195c:	e8 ef ed fe ff       	call   c0000750 <strcmp>
c0011961:	83 c4 10             	add    esp,0x10
c0011964:	85 c0                	test   eax,eax
c0011966:	0f 94 c0             	sete   al
c0011969:	0f b6 c0             	movzx  eax,al
c001196c:	85 c0                	test   eax,eax
c001196e:	74 0c                	je     c001197c <KeResolveCompatibilitySymbol(char*)+0xe0>
c0011970:	b8 af 0f 01 c0       	mov    eax,0xc0010faf
c0011975:	e9 da 00 00 00       	jmp    c0011a54 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001197a:	66 90                	xchg   ax,ax
c001197c:	83 ec 08             	sub    esp,0x8
c001197f:	68 58 24 02 c0       	push   0xc0022458
c0011984:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011988:	e8 c3 ed fe ff       	call   c0000750 <strcmp>
c001198d:	83 c4 10             	add    esp,0x10
c0011990:	85 c0                	test   eax,eax
c0011992:	0f 94 c0             	sete   al
c0011995:	0f b6 c0             	movzx  eax,al
c0011998:	85 c0                	test   eax,eax
c001199a:	74 0c                	je     c00119a8 <KeResolveCompatibilitySymbol(char*)+0x10c>
c001199c:	b8 c0 f8 01 c0       	mov    eax,0xc001f8c0
c00119a1:	e9 ae 00 00 00       	jmp    c0011a54 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00119a6:	66 90                	xchg   ax,ax
c00119a8:	83 ec 08             	sub    esp,0x8
c00119ab:	68 62 24 02 c0       	push   0xc0022462
c00119b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119b4:	e8 97 ed fe ff       	call   c0000750 <strcmp>
c00119b9:	83 c4 10             	add    esp,0x10
c00119bc:	85 c0                	test   eax,eax
c00119be:	0f 94 c0             	sete   al
c00119c1:	0f b6 c0             	movzx  eax,al
c00119c4:	85 c0                	test   eax,eax
c00119c6:	74 0c                	je     c00119d4 <KeResolveCompatibilitySymbol(char*)+0x138>
c00119c8:	b8 40 f6 01 c0       	mov    eax,0xc001f640
c00119cd:	e9 82 00 00 00       	jmp    c0011a54 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00119d2:	66 90                	xchg   ax,ax
c00119d4:	83 ec 08             	sub    esp,0x8
c00119d7:	68 6b 24 02 c0       	push   0xc002246b
c00119dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119e0:	e8 6b ed fe ff       	call   c0000750 <strcmp>
c00119e5:	83 c4 10             	add    esp,0x10
c00119e8:	85 c0                	test   eax,eax
c00119ea:	0f 94 c0             	sete   al
c00119ed:	0f b6 c0             	movzx  eax,al
c00119f0:	85 c0                	test   eax,eax
c00119f2:	74 08                	je     c00119fc <KeResolveCompatibilitySymbol(char*)+0x160>
c00119f4:	b8 bc 6e 02 c0       	mov    eax,0xc0026ebc
c00119f9:	eb 59                	jmp    c0011a54 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00119fb:	90                   	nop
c00119fc:	83 ec 08             	sub    esp,0x8
c00119ff:	68 83 24 02 c0       	push   0xc0022483
c0011a04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a08:	e8 43 ed fe ff       	call   c0000750 <strcmp>
c0011a0d:	83 c4 10             	add    esp,0x10
c0011a10:	85 c0                	test   eax,eax
c0011a12:	0f 94 c0             	sete   al
c0011a15:	0f b6 c0             	movzx  eax,al
c0011a18:	85 c0                	test   eax,eax
c0011a1a:	74 08                	je     c0011a24 <KeResolveCompatibilitySymbol(char*)+0x188>
c0011a1c:	b8 bc 6e 02 c0       	mov    eax,0xc0026ebc
c0011a21:	eb 31                	jmp    c0011a54 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011a23:	90                   	nop
c0011a24:	83 ec 08             	sub    esp,0x8
c0011a27:	68 90 24 02 c0       	push   0xc0022490
c0011a2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a30:	e8 1b ed fe ff       	call   c0000750 <strcmp>
c0011a35:	83 c4 10             	add    esp,0x10
c0011a38:	85 c0                	test   eax,eax
c0011a3a:	0f 94 c0             	sete   al
c0011a3d:	0f b6 c0             	movzx  eax,al
c0011a40:	85 c0                	test   eax,eax
c0011a42:	74 08                	je     c0011a4c <KeResolveCompatibilitySymbol(char*)+0x1b0>
c0011a44:	b8 bd 6e 02 c0       	mov    eax,0xc0026ebd
c0011a49:	eb 09                	jmp    c0011a54 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011a4b:	90                   	nop
c0011a4c:	b8 00 00 00 00       	mov    eax,0x0
c0011a51:	8d 76 00             	lea    esi,[esi+0x0]
c0011a54:	83 c4 0c             	add    esp,0xc
c0011a57:	c3                   	ret    

c0011a58 <KiSigKill(int)>:
c0011a58:	83 ec 0c             	sub    esp,0xc
c0011a5b:	6a 00                	push   0x0
c0011a5d:	6a 00                	push   0x0
c0011a5f:	6a ff                	push   0xffffffff
c0011a61:	6a 01                	push   0x1
c0011a63:	e8 ea 35 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011a68:	83 c4 1c             	add    esp,0x1c
c0011a6b:	c3                   	ret    

c0011a6c <KiDefaultSignalHandlerIgnore(int)>:
c0011a6c:	c3                   	ret    

c0011a6d <KiDefaultSignalHandlerPause(int)>:
c0011a6d:	57                   	push   edi
c0011a6e:	b9 07 00 00 00       	mov    ecx,0x7
c0011a73:	56                   	push   esi
c0011a74:	be d9 24 02 c0       	mov    esi,0xc00224d9
c0011a79:	83 ec 24             	sub    esp,0x24
c0011a7c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0011a80:	fc                   	cld    
c0011a81:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011a83:	8d 44 24 04          	lea    eax,[esp+0x4]
c0011a87:	50                   	push   eax
c0011a88:	6a 00                	push   0x0
c0011a8a:	6a 00                	push   0x0
c0011a8c:	6a 27                	push   0x27
c0011a8e:	e8 bf 35 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011a93:	83 c4 34             	add    esp,0x34
c0011a96:	5e                   	pop    esi
c0011a97:	5f                   	pop    edi
c0011a98:	c3                   	ret    

c0011a99 <KiDefaultSignalHandlerResume(int)>:
c0011a99:	57                   	push   edi
c0011a9a:	b9 1d 00 00 00       	mov    ecx,0x1d
c0011a9f:	56                   	push   esi
c0011aa0:	be f5 24 02 c0       	mov    esi,0xc00224f5
c0011aa5:	83 ec 24             	sub    esp,0x24
c0011aa8:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0011aac:	fc                   	cld    
c0011aad:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011aaf:	8d 44 24 03          	lea    eax,[esp+0x3]
c0011ab3:	50                   	push   eax
c0011ab4:	6a 00                	push   0x0
c0011ab6:	6a 00                	push   0x0
c0011ab8:	6a 27                	push   0x27
c0011aba:	e8 93 35 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011abf:	83 c4 34             	add    esp,0x34
c0011ac2:	5e                   	pop    esi
c0011ac3:	5f                   	pop    edi
c0011ac4:	c3                   	ret    

c0011ac5 <KeDeinitSignals(SigHandlerBlock*)>:
c0011ac5:	e9 fc 5f ff ff       	jmp    c0007ac6 <free>

c0011aca <KeInitSignals()>:
c0011aca:	53                   	push   ebx
c0011acb:	83 ec 14             	sub    esp,0x14
c0011ace:	68 c8 00 00 00       	push   0xc8
c0011ad3:	e8 de 5f ff ff       	call   c0007ab6 <malloc>
c0011ad8:	83 c4 0c             	add    esp,0xc
c0011adb:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0011ae5:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c0011aef:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0011af6:	89 c3                	mov    ebx,eax
c0011af8:	6a 20                	push   0x20
c0011afa:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0011b00:	6a 00                	push   0x0
c0011b02:	50                   	push   eax
c0011b03:	e8 e8 e9 fe ff       	call   c00004f0 <memset>
c0011b08:	83 c4 0c             	add    esp,0xc
c0011b0b:	6a 44                	push   0x44
c0011b0d:	6a 00                	push   0x0
c0011b0f:	53                   	push   ebx
c0011b10:	e8 db e9 fe ff       	call   c00004f0 <memset>
c0011b15:	89 d8                	mov    eax,ebx
c0011b17:	83 c4 18             	add    esp,0x18
c0011b1a:	5b                   	pop    ebx
c0011b1b:	c3                   	ret    

c0011b1c <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0011b1c:	53                   	push   ebx
c0011b1d:	b8 01 00 00 00       	mov    eax,0x1
c0011b22:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011b26:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011b2a:	83 f9 10             	cmp    ecx,0x10
c0011b2d:	7f 21                	jg     c0011b50 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0011b2f:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0011b32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011b36:	89 03                	mov    DWORD PTR [ebx],eax
c0011b38:	b8 01 00 00 00       	mov    eax,0x1
c0011b3d:	d3 e0                	shl    eax,cl
c0011b3f:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0011b43:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0011b46:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0011b4e:	31 c0                	xor    eax,eax
c0011b50:	5b                   	pop    ebx
c0011b51:	c3                   	ret    

c0011b52 <KeRaiseSignal(SigHandlerBlock*, int)>:
c0011b52:	55                   	push   ebp
c0011b53:	57                   	push   edi
c0011b54:	bf 08 00 00 00       	mov    edi,0x8
c0011b59:	56                   	push   esi
c0011b5a:	53                   	push   ebx
c0011b5b:	83 ec 18             	sub    esp,0x18
c0011b5e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011b62:	68 12 25 02 c0       	push   0xc0022512
c0011b67:	e8 d9 8d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0011b6c:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011b73:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0011b79:	83 c4 10             	add    esp,0x10
c0011b7c:	31 c9                	xor    ecx,ecx
c0011b7e:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0011b82:	99                   	cdq    
c0011b83:	f7 ff                	idiv   edi
c0011b85:	8d 42 24             	lea    eax,[edx+0x24]
c0011b88:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0011b8c:	85 f6                	test   esi,esi
c0011b8e:	75 1a                	jne    c0011baa <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c0011b90:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011b94:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0011b98:	50                   	push   eax
c0011b99:	50                   	push   eax
c0011b9a:	52                   	push   edx
c0011b9b:	68 23 25 02 c0       	push   0xc0022523
c0011ba0:	e8 a0 8d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0011ba5:	83 c4 10             	add    esp,0x10
c0011ba8:	eb 1b                	jmp    c0011bc5 <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0011baa:	41                   	inc    ecx
c0011bab:	83 f9 08             	cmp    ecx,0x8
c0011bae:	75 ce                	jne    c0011b7e <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0011bb0:	83 ec 0c             	sub    esp,0xc
c0011bb3:	be 01 00 00 00       	mov    esi,0x1
c0011bb8:	68 44 25 02 c0       	push   0xc0022544
c0011bbd:	e8 83 8d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0011bc2:	83 c4 10             	add    esp,0x10
c0011bc5:	83 c4 0c             	add    esp,0xc
c0011bc8:	89 f0                	mov    eax,esi
c0011bca:	5b                   	pop    ebx
c0011bcb:	5e                   	pop    esi
c0011bcc:	5f                   	pop    edi
c0011bcd:	5d                   	pop    ebp
c0011bce:	c3                   	ret    

c0011bcf <KeCheckSignal(SigHandlerBlock*, int*)>:
c0011bcf:	55                   	push   ebp
c0011bd0:	57                   	push   edi
c0011bd1:	56                   	push   esi
c0011bd2:	53                   	push   ebx
c0011bd3:	51                   	push   ecx
c0011bd4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011bd8:	85 db                	test   ebx,ebx
c0011bda:	0f 84 bc 00 00 00    	je     c0011c9c <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011be0:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0011be7:	0f 84 af 00 00 00    	je     c0011c9c <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011bed:	31 c9                	xor    ecx,ecx
c0011bef:	bf 08 00 00 00       	mov    edi,0x8
c0011bf4:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0011bfa:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0011bfd:	99                   	cdq    
c0011bfe:	f7 ff                	idiv   edi
c0011c00:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0011c07:	85 ed                	test   ebp,ebp
c0011c09:	0f 84 9e 00 00 00    	je     c0011cad <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c0011c0f:	89 e9                	mov    ecx,ebp
c0011c11:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0011c17:	bf 01 00 00 00       	mov    edi,0x1
c0011c1c:	89 04 24             	mov    DWORD PTR [esp],eax
c0011c1f:	d3 e7                	shl    edi,cl
c0011c21:	31 c9                	xor    ecx,ecx
c0011c23:	b8 01 00 00 00       	mov    eax,0x1
c0011c28:	d3 e0                	shl    eax,cl
c0011c2a:	85 04 24             	test   DWORD PTR [esp],eax
c0011c2d:	74 06                	je     c0011c35 <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c0011c2f:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0011c33:	75 67                	jne    c0011c9c <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011c35:	41                   	inc    ecx
c0011c36:	83 f9 11             	cmp    ecx,0x11
c0011c39:	75 e8                	jne    c0011c23 <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c0011c3b:	46                   	inc    esi
c0011c3c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0011c3f:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011c45:	09 f8                	or     eax,edi
c0011c47:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0011c52:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0011c58:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0011c5f:	31 c0                	xor    eax,eax
c0011c61:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0011c69:	74 09                	je     c0011c74 <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c0011c6b:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011c72:	eb 06                	jmp    c0011c7a <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c0011c74:	40                   	inc    eax
c0011c75:	83 f8 08             	cmp    eax,0x8
c0011c78:	75 e7                	jne    c0011c61 <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c0011c7a:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0011c7d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011c81:	83 fd 09             	cmp    ebp,0x9
c0011c84:	89 2a                	mov    DWORD PTR [edx],ebp
c0011c86:	75 07                	jne    c0011c8f <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c0011c88:	b8 58 1a 01 c0       	mov    eax,0xc0011a58
c0011c8d:	eb 31                	jmp    c0011cc0 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011c8f:	83 f8 01             	cmp    eax,0x1
c0011c92:	75 0c                	jne    c0011ca0 <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c0011c94:	f7 d7                	not    edi
c0011c96:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0011c9c:	31 c0                	xor    eax,eax
c0011c9e:	eb 20                	jmp    c0011cc0 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011ca0:	85 c0                	test   eax,eax
c0011ca2:	75 1c                	jne    c0011cc0 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011ca4:	8b 04 ad 40 3d 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffdc2c0]
c0011cab:	eb 13                	jmp    c0011cc0 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011cad:	46                   	inc    esi
c0011cae:	41                   	inc    ecx
c0011caf:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011cb5:	83 f9 08             	cmp    ecx,0x8
c0011cb8:	0f 85 36 ff ff ff    	jne    c0011bf4 <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c0011cbe:	eb dc                	jmp    c0011c9c <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011cc0:	5a                   	pop    edx
c0011cc1:	5b                   	pop    ebx
c0011cc2:	5e                   	pop    esi
c0011cc3:	5f                   	pop    edi
c0011cc4:	5d                   	pop    ebp
c0011cc5:	c3                   	ret    

c0011cc6 <KiCheckSignalZ>:
c0011cc6:	83 ec 10             	sub    esp,0x10
c0011cc9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011ccd:	50                   	push   eax
c0011cce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011cd3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011cd6:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011cdc:	e8 ee fe ff ff       	call   c0011bcf <KeCheckSignal(SigHandlerBlock*, int*)>
c0011ce1:	5a                   	pop    edx
c0011ce2:	31 d2                	xor    edx,edx
c0011ce4:	59                   	pop    ecx
c0011ce5:	85 c0                	test   eax,eax
c0011ce7:	74 19                	je     c0011d02 <KiCheckSignalZ+0x3c>
c0011ce9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011cef:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0011cf2:	89 02                	mov    DWORD PTR [edx],eax
c0011cf4:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0011cfb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011cff:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0011d02:	89 d0                	mov    eax,edx
c0011d04:	83 c4 10             	add    esp,0x10
c0011d07:	c3                   	ret    

c0011d08 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0011d08:	56                   	push   esi
c0011d09:	53                   	push   ebx
c0011d0a:	bb 01 00 00 00       	mov    ebx,0x1
c0011d0f:	52                   	push   edx
c0011d10:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011d14:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011d18:	d3 e3                	shl    ebx,cl
c0011d1a:	83 f9 10             	cmp    ecx,0x10
c0011d1d:	7f 08                	jg     c0011d27 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0011d1f:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0011d25:	75 10                	jne    c0011d37 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0011d27:	83 ec 0c             	sub    esp,0xc
c0011d2a:	68 55 25 02 c0       	push   0xc0022555
c0011d2f:	e8 7b f9 ff ff       	call   c00116af <KePanic(char const*)>
c0011d34:	83 c4 10             	add    esp,0x10
c0011d37:	f7 d3                	not    ebx
c0011d39:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0011d3f:	58                   	pop    eax
c0011d40:	5b                   	pop    ebx
c0011d41:	5e                   	pop    esi
c0011d42:	c3                   	ret    

c0011d43 <KiFinishSignalZ>:
c0011d43:	53                   	push   ebx
c0011d44:	83 ec 10             	sub    esp,0x10
c0011d47:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011d4b:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0011d4e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011d53:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011d56:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011d5c:	e8 a7 ff ff ff       	call   c0011d08 <KeCompleteSignal(SigHandlerBlock*, int)>
c0011d61:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011d67:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0011d6e:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0011d75:	83 c4 18             	add    esp,0x18
c0011d78:	5b                   	pop    ebx
c0011d79:	c3                   	ret    

c0011d7a <SysSeekDir(regs*)>:
c0011d7a:	31 c0                	xor    eax,eax
c0011d7c:	31 d2                	xor    edx,edx
c0011d7e:	c3                   	ret    

c0011d7f <SysTellDir(regs*)>:
c0011d7f:	31 c0                	xor    eax,eax
c0011d81:	31 d2                	xor    edx,edx
c0011d83:	c3                   	ret    

c0011d84 <SysVerify(regs*)>:
c0011d84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011d88:	31 d2                	xor    edx,edx
c0011d8a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011d8d:	c3                   	ret    

c0011d8e <SysGetArgc(regs*)>:
c0011d8e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011d93:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011d96:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0011d9c:	89 c2                	mov    edx,eax
c0011d9e:	c1 fa 1f             	sar    edx,0x1f
c0011da1:	c3                   	ret    

c0011da2 <SysTTYName(regs*)>:
c0011da2:	b8 01 00 00 00       	mov    eax,0x1
c0011da7:	31 d2                	xor    edx,edx
c0011da9:	c3                   	ret    

c0011daa <SysFormatDisk(regs*)>:
c0011daa:	56                   	push   esi
c0011dab:	53                   	push   ebx
c0011dac:	83 ec 04             	sub    esp,0x4
c0011daf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011db3:	8b 1d 04 94 02 c0    	mov    ebx,DWORD PTR ds:0xc0029404
c0011db9:	eb 28                	jmp    c0011de3 <SysFormatDisk(regs*)+0x39>
c0011dbb:	83 ec 0c             	sub    esp,0xc
c0011dbe:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0011dc1:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0011dc4:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011dc6:	51                   	push   ecx
c0011dc7:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0011dca:	51                   	push   ecx
c0011dcb:	50                   	push   eax
c0011dcc:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c0011dd3:	50                   	push   eax
c0011dd4:	53                   	push   ebx
c0011dd5:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0011dd8:	83 c4 20             	add    esp,0x20
c0011ddb:	83 f8 08             	cmp    eax,0x8
c0011dde:	75 14                	jne    c0011df4 <SysFormatDisk(regs*)+0x4a>
c0011de0:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0011de3:	85 db                	test   ebx,ebx
c0011de5:	75 d4                	jne    c0011dbb <SysFormatDisk(regs*)+0x11>
c0011de7:	83 c4 04             	add    esp,0x4
c0011dea:	b8 03 00 00 00       	mov    eax,0x3
c0011def:	31 d2                	xor    edx,edx
c0011df1:	5b                   	pop    ebx
c0011df2:	5e                   	pop    esi
c0011df3:	c3                   	ret    
c0011df4:	85 c0                	test   eax,eax
c0011df6:	74 1f                	je     c0011e17 <SysFormatDisk(regs*)+0x6d>
c0011df8:	83 f8 09             	cmp    eax,0x9
c0011dfb:	74 0d                	je     c0011e0a <SysFormatDisk(regs*)+0x60>
c0011dfd:	83 c4 04             	add    esp,0x4
c0011e00:	b8 02 00 00 00       	mov    eax,0x2
c0011e05:	31 d2                	xor    edx,edx
c0011e07:	5b                   	pop    ebx
c0011e08:	5e                   	pop    esi
c0011e09:	c3                   	ret    
c0011e0a:	83 c4 04             	add    esp,0x4
c0011e0d:	b8 01 00 00 00       	mov    eax,0x1
c0011e12:	31 d2                	xor    edx,edx
c0011e14:	5b                   	pop    ebx
c0011e15:	5e                   	pop    esi
c0011e16:	c3                   	ret    
c0011e17:	83 c4 04             	add    esp,0x4
c0011e1a:	31 c0                	xor    eax,eax
c0011e1c:	31 d2                	xor    edx,edx
c0011e1e:	5b                   	pop    ebx
c0011e1f:	5e                   	pop    esi
c0011e20:	c3                   	ret    

c0011e21 <SysSetDiskVolumeLabel(regs*)>:
c0011e21:	56                   	push   esi
c0011e22:	53                   	push   ebx
c0011e23:	83 ec 04             	sub    esp,0x4
c0011e26:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011e2a:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011e2d:	83 f8 19             	cmp    eax,0x19
c0011e30:	77 33                	ja     c0011e65 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011e32:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c0011e39:	85 c9                	test   ecx,ecx
c0011e3b:	74 28                	je     c0011e65 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011e3d:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0011e40:	85 db                	test   ebx,ebx
c0011e42:	74 21                	je     c0011e65 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011e44:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0011e4a:	85 d2                	test   edx,edx
c0011e4c:	74 17                	je     c0011e65 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011e4e:	8b 32                	mov    esi,DWORD PTR [edx]
c0011e50:	53                   	push   ebx
c0011e51:	50                   	push   eax
c0011e52:	51                   	push   ecx
c0011e53:	52                   	push   edx
c0011e54:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0011e57:	83 c4 10             	add    esp,0x10
c0011e5a:	89 c2                	mov    edx,eax
c0011e5c:	83 c4 04             	add    esp,0x4
c0011e5f:	c1 fa 1f             	sar    edx,0x1f
c0011e62:	5b                   	pop    ebx
c0011e63:	5e                   	pop    esi
c0011e64:	c3                   	ret    
c0011e65:	83 c4 04             	add    esp,0x4
c0011e68:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011e6d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011e72:	5b                   	pop    ebx
c0011e73:	5e                   	pop    esi
c0011e74:	c3                   	ret    

c0011e75 <SysGetDiskVolumeLabel(regs*)>:
c0011e75:	57                   	push   edi
c0011e76:	56                   	push   esi
c0011e77:	53                   	push   ebx
c0011e78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e7c:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0011e7f:	83 fa 19             	cmp    edx,0x19
c0011e82:	77 3c                	ja     c0011ec0 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011e84:	8b 0c 95 80 b8 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd4780]
c0011e8b:	85 c9                	test   ecx,ecx
c0011e8d:	74 31                	je     c0011ec0 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011e8f:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011e92:	85 db                	test   ebx,ebx
c0011e94:	74 2a                	je     c0011ec0 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011e96:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011e99:	85 f6                	test   esi,esi
c0011e9b:	74 23                	je     c0011ec0 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011e9d:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0011ea3:	85 c0                	test   eax,eax
c0011ea5:	74 19                	je     c0011ec0 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011ea7:	83 ec 0c             	sub    esp,0xc
c0011eaa:	8b 38                	mov    edi,DWORD PTR [eax]
c0011eac:	56                   	push   esi
c0011ead:	53                   	push   ebx
c0011eae:	52                   	push   edx
c0011eaf:	51                   	push   ecx
c0011eb0:	50                   	push   eax
c0011eb1:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0011eb4:	83 c4 20             	add    esp,0x20
c0011eb7:	89 c2                	mov    edx,eax
c0011eb9:	5b                   	pop    ebx
c0011eba:	c1 fa 1f             	sar    edx,0x1f
c0011ebd:	5e                   	pop    esi
c0011ebe:	5f                   	pop    edi
c0011ebf:	c3                   	ret    
c0011ec0:	5b                   	pop    ebx
c0011ec1:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011ec6:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011ecb:	5e                   	pop    esi
c0011ecc:	5f                   	pop    edi
c0011ecd:	c3                   	ret    

c0011ece <SysShutdown(regs*)>:
c0011ece:	83 ec 0c             	sub    esp,0xc
c0011ed1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ed5:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011ed8:	85 c0                	test   eax,eax
c0011eda:	74 18                	je     c0011ef4 <SysShutdown(regs*)+0x26>
c0011edc:	83 f8 01             	cmp    eax,0x1
c0011edf:	74 38                	je     c0011f19 <SysShutdown(regs*)+0x4b>
c0011ee1:	83 f8 02             	cmp    eax,0x2
c0011ee4:	74 24                	je     c0011f0a <SysShutdown(regs*)+0x3c>
c0011ee6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011eeb:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011ef0:	83 c4 0c             	add    esp,0xc
c0011ef3:	c3                   	ret    
c0011ef4:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0011ef9:	8b 10                	mov    edx,DWORD PTR [eax]
c0011efb:	6a 00                	push   0x0
c0011efd:	6a 00                	push   0x0
c0011eff:	6a 00                	push   0x0
c0011f01:	50                   	push   eax
c0011f02:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011f05:	83 c4 10             	add    esp,0x10
c0011f08:	eb dc                	jmp    c0011ee6 <SysShutdown(regs*)+0x18>
c0011f0a:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0011f0f:	8b 10                	mov    edx,DWORD PTR [eax]
c0011f11:	6a 00                	push   0x0
c0011f13:	6a 00                	push   0x0
c0011f15:	6a 01                	push   0x1
c0011f17:	eb e8                	jmp    c0011f01 <SysShutdown(regs*)+0x33>
c0011f19:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c0011f1e:	85 c0                	test   eax,eax
c0011f20:	74 02                	je     c0011f24 <SysShutdown(regs*)+0x56>
c0011f22:	ff d0                	call   eax
c0011f24:	31 c0                	xor    eax,eax
c0011f26:	31 d2                	xor    edx,edx
c0011f28:	83 c4 0c             	add    esp,0xc
c0011f2b:	c3                   	ret    

c0011f2c <SysRealpath(regs*)>:
c0011f2c:	83 ec 0c             	sub    esp,0xc
c0011f2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f33:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011f36:	85 d2                	test   edx,edx
c0011f38:	74 07                	je     c0011f41 <SysRealpath(regs*)+0x15>
c0011f3a:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011f3d:	85 c0                	test   eax,eax
c0011f3f:	75 0b                	jne    c0011f4c <SysRealpath(regs*)+0x20>
c0011f41:	b8 01 00 00 00       	mov    eax,0x1
c0011f46:	31 d2                	xor    edx,edx
c0011f48:	83 c4 0c             	add    esp,0xc
c0011f4b:	c3                   	ret    
c0011f4c:	6a 00                	push   0x0
c0011f4e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0011f54:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0011f57:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0011f5d:	51                   	push   ecx
c0011f5e:	52                   	push   edx
c0011f5f:	50                   	push   eax
c0011f60:	e8 7f 99 ff ff       	call   c000b8e4 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011f65:	83 c4 10             	add    esp,0x10
c0011f68:	31 c0                	xor    eax,eax
c0011f6a:	31 d2                	xor    edx,edx
c0011f6c:	83 c4 0c             	add    esp,0xc
c0011f6f:	c3                   	ret    

c0011f70 <SysReadDir(regs*)>:
c0011f70:	53                   	push   ebx
c0011f71:	83 ec 18             	sub    esp,0x18
c0011f74:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011f78:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011f7b:	83 f8 02             	cmp    eax,0x2
c0011f7e:	76 61                	jbe    c0011fe1 <SysReadDir(regs*)+0x71>
c0011f80:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0011f87:	77 49                	ja     c0011fd2 <SysReadDir(regs*)+0x62>
c0011f89:	83 ec 0c             	sub    esp,0xc
c0011f8c:	50                   	push   eax
c0011f8d:	e8 21 75 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011f92:	83 c4 10             	add    esp,0x10
c0011f95:	85 c0                	test   eax,eax
c0011f97:	74 39                	je     c0011fd2 <SysReadDir(regs*)+0x62>
c0011f99:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011fa1:	83 ec 0c             	sub    esp,0xc
c0011fa4:	8b 10                	mov    edx,DWORD PTR [eax]
c0011fa6:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011faa:	51                   	push   ecx
c0011fab:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011fae:	51                   	push   ecx
c0011faf:	6a 00                	push   0x0
c0011fb1:	68 10 01 00 00       	push   0x110
c0011fb6:	50                   	push   eax
c0011fb7:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011fba:	83 c4 20             	add    esp,0x20
c0011fbd:	85 c0                	test   eax,eax
c0011fbf:	74 29                	je     c0011fea <SysReadDir(regs*)+0x7a>
c0011fc1:	83 f8 07             	cmp    eax,0x7
c0011fc4:	74 1b                	je     c0011fe1 <SysReadDir(regs*)+0x71>
c0011fc6:	b8 02 00 00 00       	mov    eax,0x2
c0011fcb:	31 d2                	xor    edx,edx
c0011fcd:	83 c4 18             	add    esp,0x18
c0011fd0:	5b                   	pop    ebx
c0011fd1:	c3                   	ret    
c0011fd2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011fd7:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011fdc:	83 c4 18             	add    esp,0x18
c0011fdf:	5b                   	pop    ebx
c0011fe0:	c3                   	ret    
c0011fe1:	b8 01 00 00 00       	mov    eax,0x1
c0011fe6:	31 d2                	xor    edx,edx
c0011fe8:	eb e3                	jmp    c0011fcd <SysReadDir(regs*)+0x5d>
c0011fea:	31 c0                	xor    eax,eax
c0011fec:	31 d2                	xor    edx,edx
c0011fee:	eb dd                	jmp    c0011fcd <SysReadDir(regs*)+0x5d>

c0011ff0 <SysIsATTY(regs*)>:
c0011ff0:	83 ec 0c             	sub    esp,0xc
c0011ff3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ff7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011ffa:	83 f8 02             	cmp    eax,0x2
c0011ffd:	76 07                	jbe    c0012006 <SysIsATTY(regs*)+0x16>
c0011fff:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0012004:	75 26                	jne    c001202c <SysIsATTY(regs*)+0x3c>
c0012006:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001200b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001200e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0012014:	85 c0                	test   eax,eax
c0012016:	74 24                	je     c001203c <SysIsATTY(regs*)+0x4c>
c0012018:	83 ec 0c             	sub    esp,0xc
c001201b:	8b 10                	mov    edx,DWORD PTR [eax]
c001201d:	50                   	push   eax
c001201e:	ff 12                	call   DWORD PTR [edx]
c0012020:	31 d2                	xor    edx,edx
c0012022:	0f b6 c0             	movzx  eax,al
c0012025:	83 c4 10             	add    esp,0x10
c0012028:	83 c4 0c             	add    esp,0xc
c001202b:	c3                   	ret    
c001202c:	83 ec 0c             	sub    esp,0xc
c001202f:	50                   	push   eax
c0012030:	e8 7e 74 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0012035:	83 c4 10             	add    esp,0x10
c0012038:	85 c0                	test   eax,eax
c001203a:	75 dc                	jne    c0012018 <SysIsATTY(regs*)+0x28>
c001203c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012041:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012046:	83 c4 0c             	add    esp,0xc
c0012049:	c3                   	ret    

c001204a <SysSeek(regs*)>:
c001204a:	53                   	push   ebx
c001204b:	83 ec 08             	sub    esp,0x8
c001204e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012052:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012055:	8d 50 fd             	lea    edx,[eax-0x3]
c0012058:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001205e:	77 32                	ja     c0012092 <SysSeek(regs*)+0x48>
c0012060:	83 ec 0c             	sub    esp,0xc
c0012063:	50                   	push   eax
c0012064:	e8 4a 74 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0012069:	83 c4 0c             	add    esp,0xc
c001206c:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001206f:	31 db                	xor    ebx,ebx
c0012071:	53                   	push   ebx
c0012072:	51                   	push   ecx
c0012073:	50                   	push   eax
c0012074:	e8 3f 9c ff ff       	call   c000bcb8 <File::seek(unsigned long long)>
c0012079:	83 c4 10             	add    esp,0x10
c001207c:	85 c0                	test   eax,eax
c001207e:	0f 95 c0             	setne  al
c0012081:	31 d2                	xor    edx,edx
c0012083:	0f b6 c0             	movzx  eax,al
c0012086:	f7 d8                	neg    eax
c0012088:	83 d2 00             	adc    edx,0x0
c001208b:	83 c4 08             	add    esp,0x8
c001208e:	f7 da                	neg    edx
c0012090:	5b                   	pop    ebx
c0012091:	c3                   	ret    
c0012092:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012097:	ba ff ff ff ff       	mov    edx,0xffffffff
c001209c:	83 c4 08             	add    esp,0x8
c001209f:	5b                   	pop    ebx
c00120a0:	c3                   	ret    

c00120a1 <SysTell(regs*)>:
c00120a1:	53                   	push   ebx
c00120a2:	83 ec 08             	sub    esp,0x8
c00120a5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00120a9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00120ac:	83 f8 02             	cmp    eax,0x2
c00120af:	76 4e                	jbe    c00120ff <SysTell(regs*)+0x5e>
c00120b1:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00120b6:	76 19                	jbe    c00120d1 <SysTell(regs*)+0x30>
c00120b8:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00120bb:	31 d2                	xor    edx,edx
c00120bd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00120c3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00120ca:	31 c0                	xor    eax,eax
c00120cc:	83 c4 08             	add    esp,0x8
c00120cf:	5b                   	pop    ebx
c00120d0:	c3                   	ret    
c00120d1:	83 ec 0c             	sub    esp,0xc
c00120d4:	50                   	push   eax
c00120d5:	e8 d9 73 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c00120da:	5a                   	pop    edx
c00120db:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c00120de:	59                   	pop    ecx
c00120df:	53                   	push   ebx
c00120e0:	50                   	push   eax
c00120e1:	e8 7e 9c ff ff       	call   c000bd64 <File::tell(unsigned long long*)>
c00120e6:	83 c4 10             	add    esp,0x10
c00120e9:	85 c0                	test   eax,eax
c00120eb:	0f 95 c0             	setne  al
c00120ee:	31 d2                	xor    edx,edx
c00120f0:	0f b6 c0             	movzx  eax,al
c00120f3:	f7 d8                	neg    eax
c00120f5:	83 d2 00             	adc    edx,0x0
c00120f8:	83 c4 08             	add    esp,0x8
c00120fb:	f7 da                	neg    edx
c00120fd:	5b                   	pop    ebx
c00120fe:	c3                   	ret    
c00120ff:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012104:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012109:	83 c4 08             	add    esp,0x8
c001210c:	5b                   	pop    ebx
c001210d:	c3                   	ret    

c001210e <SysSize(regs*)>:
c001210e:	53                   	push   ebx
c001210f:	83 ec 18             	sub    esp,0x18
c0012112:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012116:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012119:	83 f8 02             	cmp    eax,0x2
c001211c:	76 54                	jbe    c0012172 <SysSize(regs*)+0x64>
c001211e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0012123:	76 19                	jbe    c001213e <SysSize(regs*)+0x30>
c0012125:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0012128:	31 d2                	xor    edx,edx
c001212a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0012130:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012137:	31 c0                	xor    eax,eax
c0012139:	83 c4 18             	add    esp,0x18
c001213c:	5b                   	pop    ebx
c001213d:	c3                   	ret    
c001213e:	83 ec 0c             	sub    esp,0xc
c0012141:	50                   	push   eax
c0012142:	e8 6c 73 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0012147:	83 c4 0c             	add    esp,0xc
c001214a:	8d 54 24 13          	lea    edx,[esp+0x13]
c001214e:	52                   	push   edx
c001214f:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012152:	52                   	push   edx
c0012153:	50                   	push   eax
c0012154:	e8 a3 9d ff ff       	call   c000befc <File::stat(unsigned long long*, bool*)>
c0012159:	83 c4 10             	add    esp,0x10
c001215c:	85 c0                	test   eax,eax
c001215e:	0f 95 c0             	setne  al
c0012161:	31 d2                	xor    edx,edx
c0012163:	0f b6 c0             	movzx  eax,al
c0012166:	f7 d8                	neg    eax
c0012168:	83 d2 00             	adc    edx,0x0
c001216b:	83 c4 18             	add    esp,0x18
c001216e:	f7 da                	neg    edx
c0012170:	5b                   	pop    ebx
c0012171:	c3                   	ret    
c0012172:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012177:	ba ff ff ff ff       	mov    edx,0xffffffff
c001217c:	83 c4 18             	add    esp,0x18
c001217f:	5b                   	pop    ebx
c0012180:	c3                   	ret    

c0012181 <SysSizeFromFilename(regs*)>:
c0012181:	55                   	push   ebp
c0012182:	57                   	push   edi
c0012183:	56                   	push   esi
c0012184:	53                   	push   ebx
c0012185:	81 ec 5c 02 00 00    	sub    esp,0x25c
c001218b:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0012192:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0012195:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0012198:	85 f6                	test   esi,esi
c001219a:	74 34                	je     c00121d0 <SysSizeFromFilename(regs*)+0x4f>
c001219c:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00121a2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00121a5:	83 f8 02             	cmp    eax,0x2
c00121a8:	76 2d                	jbe    c00121d7 <SysSizeFromFilename(regs*)+0x56>
c00121aa:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00121af:	76 3b                	jbe    c00121ec <SysSizeFromFilename(regs*)+0x6b>
c00121b1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00121b4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00121ba:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00121c1:	81 c4 5c 02 00 00    	add    esp,0x25c
c00121c7:	31 c0                	xor    eax,eax
c00121c9:	5b                   	pop    ebx
c00121ca:	31 d2                	xor    edx,edx
c00121cc:	5e                   	pop    esi
c00121cd:	5f                   	pop    edi
c00121ce:	5d                   	pop    ebp
c00121cf:	c3                   	ret    
c00121d0:	89 f8                	mov    eax,edi
c00121d2:	83 f8 02             	cmp    eax,0x2
c00121d5:	77 d3                	ja     c00121aa <SysSizeFromFilename(regs*)+0x29>
c00121d7:	81 c4 5c 02 00 00    	add    esp,0x25c
c00121dd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00121e2:	5b                   	pop    ebx
c00121e3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00121e8:	5e                   	pop    esi
c00121e9:	5f                   	pop    edi
c00121ea:	5d                   	pop    ebp
c00121eb:	c3                   	ret    
c00121ec:	83 ec 0c             	sub    esp,0xc
c00121ef:	68 14 01 00 00       	push   0x114
c00121f4:	e8 bd 58 ff ff       	call   c0007ab6 <malloc>
c00121f9:	6a 01                	push   0x1
c00121fb:	89 c5                	mov    ebp,eax
c00121fd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012202:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0012205:	51                   	push   ecx
c0012206:	57                   	push   edi
c0012207:	55                   	push   ebp
c0012208:	e8 f1 98 ff ff       	call   c000bafe <File::File(char const*, Process*, bool)>
c001220d:	83 c4 1c             	add    esp,0x1c
c0012210:	8d 44 24 23          	lea    eax,[esp+0x23]
c0012214:	50                   	push   eax
c0012215:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0012218:	53                   	push   ebx
c0012219:	55                   	push   ebp
c001221a:	e8 dd 9c ff ff       	call   c000befc <File::stat(unsigned long long*, bool*)>
c001221f:	83 c4 10             	add    esp,0x10
c0012222:	85 ed                	test   ebp,ebp
c0012224:	74 15                	je     c001223b <SysSizeFromFilename(regs*)+0xba>
c0012226:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001222a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001222d:	83 ec 0c             	sub    esp,0xc
c0012230:	55                   	push   ebp
c0012231:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0012234:	83 c4 10             	add    esp,0x10
c0012237:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001223b:	85 c0                	test   eax,eax
c001223d:	75 98                	jne    c00121d7 <SysSizeFromFilename(regs*)+0x56>
c001223f:	6a 00                	push   0x0
c0012241:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012246:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012249:	05 0c 01 00 00       	add    eax,0x10c
c001224e:	50                   	push   eax
c001224f:	57                   	push   edi
c0012250:	8d 9c 24 44 01 00 00 	lea    ebx,[esp+0x144]
c0012257:	53                   	push   ebx
c0012258:	e8 87 96 ff ff       	call   c000b8e4 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001225d:	58                   	pop    eax
c001225e:	5a                   	pop    edx
c001225f:	8d 44 24 28          	lea    eax,[esp+0x28]
c0012263:	50                   	push   eax
c0012264:	53                   	push   ebx
c0012265:	e8 2e 8f ff ff       	call   c000b198 <KeDereferenceSymlink(char const*, char*)>
c001226a:	83 c4 10             	add    esp,0x10
c001226d:	83 f8 01             	cmp    eax,0x1
c0012270:	74 1a                	je     c001228c <SysSizeFromFilename(regs*)+0x10b>
c0012272:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012277:	74 26                	je     c001229f <SysSizeFromFilename(regs*)+0x11e>
c0012279:	85 f6                	test   esi,esi
c001227b:	0f 84 40 ff ff ff    	je     c00121c1 <SysSizeFromFilename(regs*)+0x40>
c0012281:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0012287:	e9 35 ff ff ff       	jmp    c00121c1 <SysSizeFromFilename(regs*)+0x40>
c001228c:	85 f6                	test   esi,esi
c001228e:	0f 84 2d ff ff ff    	je     c00121c1 <SysSizeFromFilename(regs*)+0x40>
c0012294:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c001229a:	e9 22 ff ff ff       	jmp    c00121c1 <SysSizeFromFilename(regs*)+0x40>
c001229f:	85 f6                	test   esi,esi
c00122a1:	0f 84 1a ff ff ff    	je     c00121c1 <SysSizeFromFilename(regs*)+0x40>
c00122a7:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00122ad:	e9 0f ff ff ff       	jmp    c00121c1 <SysSizeFromFilename(regs*)+0x40>

c00122b2 <SysSizeFromFilenameNoSymlink(regs*)>:
c00122b2:	55                   	push   ebp
c00122b3:	57                   	push   edi
c00122b4:	56                   	push   esi
c00122b5:	53                   	push   ebx
c00122b6:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00122bc:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00122c3:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00122c6:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00122c9:	85 f6                	test   esi,esi
c00122cb:	74 34                	je     c0012301 <SysSizeFromFilenameNoSymlink(regs*)+0x4f>
c00122cd:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00122d3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00122d6:	83 f8 02             	cmp    eax,0x2
c00122d9:	76 2d                	jbe    c0012308 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c00122db:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00122e0:	76 3b                	jbe    c001231d <SysSizeFromFilenameNoSymlink(regs*)+0x6b>
c00122e2:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00122e5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00122eb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00122f2:	81 c4 5c 02 00 00    	add    esp,0x25c
c00122f8:	31 c0                	xor    eax,eax
c00122fa:	5b                   	pop    ebx
c00122fb:	31 d2                	xor    edx,edx
c00122fd:	5e                   	pop    esi
c00122fe:	5f                   	pop    edi
c00122ff:	5d                   	pop    ebp
c0012300:	c3                   	ret    
c0012301:	89 f8                	mov    eax,edi
c0012303:	83 f8 02             	cmp    eax,0x2
c0012306:	77 d3                	ja     c00122db <SysSizeFromFilenameNoSymlink(regs*)+0x29>
c0012308:	81 c4 5c 02 00 00    	add    esp,0x25c
c001230e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012313:	5b                   	pop    ebx
c0012314:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012319:	5e                   	pop    esi
c001231a:	5f                   	pop    edi
c001231b:	5d                   	pop    ebp
c001231c:	c3                   	ret    
c001231d:	83 ec 0c             	sub    esp,0xc
c0012320:	68 14 01 00 00       	push   0x114
c0012325:	e8 8c 57 ff ff       	call   c0007ab6 <malloc>
c001232a:	6a 00                	push   0x0
c001232c:	89 c5                	mov    ebp,eax
c001232e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012333:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0012336:	51                   	push   ecx
c0012337:	57                   	push   edi
c0012338:	55                   	push   ebp
c0012339:	e8 c0 97 ff ff       	call   c000bafe <File::File(char const*, Process*, bool)>
c001233e:	83 c4 1c             	add    esp,0x1c
c0012341:	8d 44 24 23          	lea    eax,[esp+0x23]
c0012345:	50                   	push   eax
c0012346:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0012349:	53                   	push   ebx
c001234a:	55                   	push   ebp
c001234b:	e8 ac 9b ff ff       	call   c000befc <File::stat(unsigned long long*, bool*)>
c0012350:	83 c4 10             	add    esp,0x10
c0012353:	85 ed                	test   ebp,ebp
c0012355:	74 15                	je     c001236c <SysSizeFromFilenameNoSymlink(regs*)+0xba>
c0012357:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001235b:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001235e:	83 ec 0c             	sub    esp,0xc
c0012361:	55                   	push   ebp
c0012362:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0012365:	83 c4 10             	add    esp,0x10
c0012368:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001236c:	85 c0                	test   eax,eax
c001236e:	75 98                	jne    c0012308 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c0012370:	6a 00                	push   0x0
c0012372:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012377:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001237a:	05 0c 01 00 00       	add    eax,0x10c
c001237f:	50                   	push   eax
c0012380:	57                   	push   edi
c0012381:	8d 9c 24 44 01 00 00 	lea    ebx,[esp+0x144]
c0012388:	53                   	push   ebx
c0012389:	e8 56 95 ff ff       	call   c000b8e4 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001238e:	58                   	pop    eax
c001238f:	5a                   	pop    edx
c0012390:	8d 44 24 28          	lea    eax,[esp+0x28]
c0012394:	50                   	push   eax
c0012395:	53                   	push   ebx
c0012396:	e8 fd 8d ff ff       	call   c000b198 <KeDereferenceSymlink(char const*, char*)>
c001239b:	83 c4 10             	add    esp,0x10
c001239e:	83 f8 01             	cmp    eax,0x1
c00123a1:	74 1a                	je     c00123bd <SysSizeFromFilenameNoSymlink(regs*)+0x10b>
c00123a3:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00123a8:	74 26                	je     c00123d0 <SysSizeFromFilenameNoSymlink(regs*)+0x11e>
c00123aa:	85 f6                	test   esi,esi
c00123ac:	0f 84 40 ff ff ff    	je     c00122f2 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00123b2:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00123b8:	e9 35 ff ff ff       	jmp    c00122f2 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00123bd:	85 f6                	test   esi,esi
c00123bf:	0f 84 2d ff ff ff    	je     c00122f2 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00123c5:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c00123cb:	e9 22 ff ff ff       	jmp    c00122f2 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00123d0:	85 f6                	test   esi,esi
c00123d2:	0f 84 1a ff ff ff    	je     c00122f2 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00123d8:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00123de:	e9 0f ff ff ff       	jmp    c00122f2 <SysSizeFromFilenameNoSymlink(regs*)+0x40>

c00123e3 <SysClose(regs*)>:
c00123e3:	53                   	push   ebx
c00123e4:	83 ec 08             	sub    esp,0x8
c00123e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00123eb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00123ee:	83 f8 02             	cmp    eax,0x2
c00123f1:	76 41                	jbe    c0012434 <SysClose(regs*)+0x51>
c00123f3:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c00123f9:	83 fa 01             	cmp    edx,0x1
c00123fc:	76 2d                	jbe    c001242b <SysClose(regs*)+0x48>
c00123fe:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0012403:	77 2f                	ja     c0012434 <SysClose(regs*)+0x51>
c0012405:	83 ec 0c             	sub    esp,0xc
c0012408:	50                   	push   eax
c0012409:	e8 a5 70 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c001240e:	89 c3                	mov    ebx,eax
c0012410:	89 04 24             	mov    DWORD PTR [esp],eax
c0012413:	e8 40 98 ff ff       	call   c000bc58 <File::close()>
c0012418:	83 c4 10             	add    esp,0x10
c001241b:	85 db                	test   ebx,ebx
c001241d:	74 0c                	je     c001242b <SysClose(regs*)+0x48>
c001241f:	83 ec 0c             	sub    esp,0xc
c0012422:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012424:	53                   	push   ebx
c0012425:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012428:	83 c4 10             	add    esp,0x10
c001242b:	31 c0                	xor    eax,eax
c001242d:	31 d2                	xor    edx,edx
c001242f:	83 c4 08             	add    esp,0x8
c0012432:	5b                   	pop    ebx
c0012433:	c3                   	ret    
c0012434:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012439:	ba ff ff ff ff       	mov    edx,0xffffffff
c001243e:	83 c4 08             	add    esp,0x8
c0012441:	5b                   	pop    ebx
c0012442:	c3                   	ret    

c0012443 <SysOpenDir(regs*)>:
c0012443:	56                   	push   esi
c0012444:	53                   	push   ebx
c0012445:	83 ec 04             	sub    esp,0x4
c0012448:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001244c:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001244f:	85 c9                	test   ecx,ecx
c0012451:	74 5d                	je     c00124b0 <SysOpenDir(regs*)+0x6d>
c0012453:	83 ec 0c             	sub    esp,0xc
c0012456:	68 14 01 00 00       	push   0x114
c001245b:	e8 56 56 ff ff       	call   c0007ab6 <malloc>
c0012460:	83 c4 0c             	add    esp,0xc
c0012463:	89 c6                	mov    esi,eax
c0012465:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001246a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001246d:	50                   	push   eax
c001246e:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0012471:	52                   	push   edx
c0012472:	56                   	push   esi
c0012473:	e8 44 9c ff ff       	call   c000c0bc <Directory::Directory(char const*, Process*)>
c0012478:	83 c4 10             	add    esp,0x10
c001247b:	85 f6                	test   esi,esi
c001247d:	74 31                	je     c00124b0 <SysOpenDir(regs*)+0x6d>
c001247f:	83 ec 0c             	sub    esp,0xc
c0012482:	56                   	push   esi
c0012483:	e8 fc 9c ff ff       	call   c000c184 <Directory::open()>
c0012488:	83 c4 10             	add    esp,0x10
c001248b:	85 c0                	test   eax,eax
c001248d:	75 21                	jne    c00124b0 <SysOpenDir(regs*)+0x6d>
c001248f:	83 ec 0c             	sub    esp,0xc
c0012492:	56                   	push   esi
c0012493:	e8 1e 6d ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c0012498:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001249b:	83 c4 10             	add    esp,0x10
c001249e:	89 02                	mov    DWORD PTR [edx],eax
c00124a0:	c1 f8 1f             	sar    eax,0x1f
c00124a3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00124a6:	83 c4 04             	add    esp,0x4
c00124a9:	31 c0                	xor    eax,eax
c00124ab:	31 d2                	xor    edx,edx
c00124ad:	5b                   	pop    ebx
c00124ae:	5e                   	pop    esi
c00124af:	c3                   	ret    
c00124b0:	83 c4 04             	add    esp,0x4
c00124b3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00124b8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00124bd:	5b                   	pop    ebx
c00124be:	5e                   	pop    esi
c00124bf:	c3                   	ret    

c00124c0 <SysMakeDir(regs*)>:
c00124c0:	56                   	push   esi
c00124c1:	53                   	push   ebx
c00124c2:	83 ec 10             	sub    esp,0x10
c00124c5:	68 14 01 00 00       	push   0x114
c00124ca:	e8 e7 55 ff ff       	call   c0007ab6 <malloc>
c00124cf:	83 c4 0c             	add    esp,0xc
c00124d2:	89 c3                	mov    ebx,eax
c00124d4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00124d9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00124dc:	50                   	push   eax
c00124dd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00124e1:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c00124e4:	52                   	push   edx
c00124e5:	53                   	push   ebx
c00124e6:	e8 d1 9b ff ff       	call   c000c0bc <Directory::Directory(char const*, Process*)>
c00124eb:	83 c4 10             	add    esp,0x10
c00124ee:	85 db                	test   ebx,ebx
c00124f0:	74 2c                	je     c001251e <SysMakeDir(regs*)+0x5e>
c00124f2:	83 ec 0c             	sub    esp,0xc
c00124f5:	53                   	push   ebx
c00124f6:	e8 69 9e ff ff       	call   c000c364 <Directory::create()>
c00124fb:	89 c6                	mov    esi,eax
c00124fd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00124ff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012502:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012505:	83 c4 10             	add    esp,0x10
c0012508:	31 c0                	xor    eax,eax
c001250a:	85 f6                	test   esi,esi
c001250c:	0f 95 c0             	setne  al
c001250f:	31 d2                	xor    edx,edx
c0012511:	f7 d8                	neg    eax
c0012513:	83 d2 00             	adc    edx,0x0
c0012516:	83 c4 04             	add    esp,0x4
c0012519:	f7 da                	neg    edx
c001251b:	5b                   	pop    ebx
c001251c:	5e                   	pop    esi
c001251d:	c3                   	ret    
c001251e:	83 c4 04             	add    esp,0x4
c0012521:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012526:	ba ff ff ff ff       	mov    edx,0xffffffff
c001252b:	5b                   	pop    ebx
c001252c:	5e                   	pop    esi
c001252d:	c3                   	ret    

c001252e <SysCloseDir(regs*)>:
c001252e:	53                   	push   ebx
c001252f:	83 ec 08             	sub    esp,0x8
c0012532:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012536:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0012539:	8d 50 fd             	lea    edx,[eax-0x3]
c001253c:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0012542:	77 2f                	ja     c0012573 <SysCloseDir(regs*)+0x45>
c0012544:	83 ec 0c             	sub    esp,0xc
c0012547:	50                   	push   eax
c0012548:	e8 66 6f ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c001254d:	89 c3                	mov    ebx,eax
c001254f:	89 04 24             	mov    DWORD PTR [esp],eax
c0012552:	e8 89 9c ff ff       	call   c000c1e0 <Directory::close()>
c0012557:	83 c4 10             	add    esp,0x10
c001255a:	85 db                	test   ebx,ebx
c001255c:	74 0c                	je     c001256a <SysCloseDir(regs*)+0x3c>
c001255e:	83 ec 0c             	sub    esp,0xc
c0012561:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012563:	53                   	push   ebx
c0012564:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012567:	83 c4 10             	add    esp,0x10
c001256a:	31 c0                	xor    eax,eax
c001256c:	31 d2                	xor    edx,edx
c001256e:	83 c4 08             	add    esp,0x8
c0012571:	5b                   	pop    ebx
c0012572:	c3                   	ret    
c0012573:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012578:	ba ff ff ff ff       	mov    edx,0xffffffff
c001257d:	83 c4 08             	add    esp,0x8
c0012580:	5b                   	pop    ebx
c0012581:	c3                   	ret    

c0012582 <SysWait(regs*)>:
c0012582:	83 ec 10             	sub    esp,0x10
c0012585:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012589:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001258c:	52                   	push   edx
c001258d:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0012590:	51                   	push   ecx
c0012591:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0012594:	50                   	push   eax
c0012595:	e8 02 3e 00 00       	call   c001639c <waitTask(int, int*, int)>
c001259a:	83 c4 1c             	add    esp,0x1c
c001259d:	89 c2                	mov    edx,eax
c001259f:	c1 fa 1f             	sar    edx,0x1f
c00125a2:	c3                   	ret    

c00125a3 <SysNotImpl(regs*)>:
c00125a3:	83 ec 18             	sub    esp,0x18
c00125a6:	68 66 25 02 c0       	push   0xc0022566
c00125ab:	e8 ff f0 ff ff       	call   c00116af <KePanic(char const*)>
c00125b0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00125b5:	ba ff ff ff ff       	mov    edx,0xffffffff
c00125ba:	83 c4 1c             	add    esp,0x1c
c00125bd:	c3                   	ret    

c00125be <SysPanic(regs*)>:
c00125be:	83 ec 18             	sub    esp,0x18
c00125c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00125c5:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00125c8:	50                   	push   eax
c00125c9:	e8 e1 f0 ff ff       	call   c00116af <KePanic(char const*)>
c00125ce:	b8 01 00 00 00       	mov    eax,0x1
c00125d3:	31 d2                	xor    edx,edx
c00125d5:	83 c4 1c             	add    esp,0x1c
c00125d8:	c3                   	ret    

c00125d9 <SysRmdir(regs*)>:
c00125d9:	56                   	push   esi
c00125da:	53                   	push   ebx
c00125db:	83 ec 20             	sub    esp,0x20
c00125de:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00125e2:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00125e5:	68 14 01 00 00       	push   0x114
c00125ea:	e8 c7 54 ff ff       	call   c0007ab6 <malloc>
c00125ef:	6a 00                	push   0x0
c00125f1:	89 c3                	mov    ebx,eax
c00125f3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00125f8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00125fb:	50                   	push   eax
c00125fc:	56                   	push   esi
c00125fd:	53                   	push   ebx
c00125fe:	e8 fb 94 ff ff       	call   c000bafe <File::File(char const*, Process*, bool)>
c0012603:	83 c4 14             	add    esp,0x14
c0012606:	53                   	push   ebx
c0012607:	e8 bc 97 ff ff       	call   c000bdc8 <File::unlink()>
c001260c:	83 c4 10             	add    esp,0x10
c001260f:	85 db                	test   ebx,ebx
c0012611:	74 14                	je     c0012627 <SysRmdir(regs*)+0x4e>
c0012613:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012617:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012619:	83 ec 0c             	sub    esp,0xc
c001261c:	53                   	push   ebx
c001261d:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0012620:	83 c4 10             	add    esp,0x10
c0012623:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012627:	85 c0                	test   eax,eax
c0012629:	0f 95 c0             	setne  al
c001262c:	31 d2                	xor    edx,edx
c001262e:	0f b6 c0             	movzx  eax,al
c0012631:	f7 d8                	neg    eax
c0012633:	83 d2 00             	adc    edx,0x0
c0012636:	83 c4 14             	add    esp,0x14
c0012639:	f7 da                	neg    edx
c001263b:	5b                   	pop    ebx
c001263c:	5e                   	pop    esi
c001263d:	c3                   	ret    

c001263e <SysUnlink(regs*)>:
c001263e:	56                   	push   esi
c001263f:	53                   	push   ebx
c0012640:	83 ec 20             	sub    esp,0x20
c0012643:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012647:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001264a:	68 14 01 00 00       	push   0x114
c001264f:	e8 62 54 ff ff       	call   c0007ab6 <malloc>
c0012654:	6a 00                	push   0x0
c0012656:	89 c3                	mov    ebx,eax
c0012658:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001265d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012660:	50                   	push   eax
c0012661:	56                   	push   esi
c0012662:	53                   	push   ebx
c0012663:	e8 96 94 ff ff       	call   c000bafe <File::File(char const*, Process*, bool)>
c0012668:	83 c4 14             	add    esp,0x14
c001266b:	53                   	push   ebx
c001266c:	e8 57 97 ff ff       	call   c000bdc8 <File::unlink()>
c0012671:	83 c4 10             	add    esp,0x10
c0012674:	85 db                	test   ebx,ebx
c0012676:	74 14                	je     c001268c <SysUnlink(regs*)+0x4e>
c0012678:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001267c:	8b 13                	mov    edx,DWORD PTR [ebx]
c001267e:	83 ec 0c             	sub    esp,0xc
c0012681:	53                   	push   ebx
c0012682:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0012685:	83 c4 10             	add    esp,0x10
c0012688:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001268c:	85 c0                	test   eax,eax
c001268e:	0f 95 c0             	setne  al
c0012691:	31 d2                	xor    edx,edx
c0012693:	0f b6 c0             	movzx  eax,al
c0012696:	f7 d8                	neg    eax
c0012698:	83 d2 00             	adc    edx,0x0
c001269b:	83 c4 14             	add    esp,0x14
c001269e:	f7 da                	neg    edx
c00126a0:	5b                   	pop    ebx
c00126a1:	5e                   	pop    esi
c00126a2:	c3                   	ret    

c00126a3 <SysGetArgv(regs*)>:
c00126a3:	83 ec 0c             	sub    esp,0xc
c00126a6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00126aa:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00126ad:	85 c0                	test   eax,eax
c00126af:	78 2c                	js     c00126dd <SysGetArgv(regs*)+0x3a>
c00126b1:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00126b7:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00126ba:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c00126c0:	7d 1b                	jge    c00126dd <SysGetArgv(regs*)+0x3a>
c00126c2:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c00126c9:	85 c0                	test   eax,eax
c00126cb:	74 18                	je     c00126e5 <SysGetArgv(regs*)+0x42>
c00126cd:	83 ec 08             	sub    esp,0x8
c00126d0:	50                   	push   eax
c00126d1:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c00126d4:	50                   	push   eax
c00126d5:	e8 66 df fe ff       	call   c0000640 <strcpy>
c00126da:	83 c4 10             	add    esp,0x10
c00126dd:	31 c0                	xor    eax,eax
c00126df:	31 d2                	xor    edx,edx
c00126e1:	83 c4 0c             	add    esp,0xc
c00126e4:	c3                   	ret    
c00126e5:	b8 01 00 00 00       	mov    eax,0x1
c00126ea:	31 d2                	xor    edx,edx
c00126ec:	83 c4 0c             	add    esp,0xc
c00126ef:	c3                   	ret    

c00126f0 <SysUSleep(regs*)>:
c00126f0:	83 ec 1c             	sub    esp,0x1c
c00126f3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00126f7:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00126fa:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c00126fd:	6a 00                	push   0x0
c00126ff:	6a 64                	push   0x64
c0012701:	52                   	push   edx
c0012702:	50                   	push   eax
c0012703:	e8 b8 d0 00 00       	call   c001f7c0 <__udivdi3>
c0012708:	83 c4 14             	add    esp,0x14
c001270b:	50                   	push   eax
c001270c:	e8 6f 3d 00 00       	call   c0016480 <milliTenthSleep(unsigned int)>
c0012711:	31 c0                	xor    eax,eax
c0012713:	31 d2                	xor    edx,edx
c0012715:	83 c4 1c             	add    esp,0x1c
c0012718:	c3                   	ret    

c0012719 <SysSpawn(regs*)>:
c0012719:	56                   	push   esi
c001271a:	53                   	push   ebx
c001271b:	83 ec 04             	sub    esp,0x4
c001271e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012722:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0012725:	85 f6                	test   esi,esi
c0012727:	75 0a                	jne    c0012733 <SysSpawn(regs*)+0x1a>
c0012729:	83 c4 04             	add    esp,0x4
c001272c:	31 c0                	xor    eax,eax
c001272e:	31 d2                	xor    edx,edx
c0012730:	5b                   	pop    ebx
c0012731:	5e                   	pop    esi
c0012732:	c3                   	ret    
c0012733:	83 ec 0c             	sub    esp,0xc
c0012736:	68 24 07 00 00       	push   0x724
c001273b:	e8 76 53 ff ff       	call   c0007ab6 <malloc>
c0012740:	83 c4 10             	add    esp,0x10
c0012743:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0012746:	89 c6                	mov    esi,eax
c0012748:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001274b:	85 c9                	test   ecx,ecx
c001274d:	75 39                	jne    c0012788 <SysSpawn(regs*)+0x6f>
c001274f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012754:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012757:	52                   	push   edx
c0012758:	50                   	push   eax
c0012759:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001275c:	50                   	push   eax
c001275d:	56                   	push   esi
c001275e:	e8 6d 33 00 00       	call   c0015ad0 <Process::Process(char const*, Process*, char**)>
c0012763:	83 c4 10             	add    esp,0x10
c0012766:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c001276d:	75 ba                	jne    c0012729 <SysSpawn(regs*)+0x10>
c001276f:	83 ec 0c             	sub    esp,0xc
c0012772:	56                   	push   esi
c0012773:	e8 94 38 00 00       	call   c001600c <Process::createUserThread()>
c0012778:	8b 06                	mov    eax,DWORD PTR [esi]
c001277a:	83 c4 10             	add    esp,0x10
c001277d:	89 c2                	mov    edx,eax
c001277f:	83 c4 04             	add    esp,0x4
c0012782:	c1 fa 1f             	sar    edx,0x1f
c0012785:	5b                   	pop    ebx
c0012786:	5e                   	pop    esi
c0012787:	c3                   	ret    
c0012788:	31 c0                	xor    eax,eax
c001278a:	eb cb                	jmp    c0012757 <SysSpawn(regs*)+0x3e>

c001278c <SysGetEnv(regs*)>:
c001278c:	57                   	push   edi
c001278d:	56                   	push   esi
c001278e:	53                   	push   ebx
c001278f:	83 ec 1c             	sub    esp,0x1c
c0012792:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012796:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001279b:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001279e:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00127a1:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c00127a4:	51                   	push   ecx
c00127a5:	e8 bd ed ff ff       	call   c0011567 <KeGetProcessTotalEnvCount(Process*)>
c00127aa:	83 c4 10             	add    esp,0x10
c00127ad:	39 c7                	cmp    edi,eax
c00127af:	7c 14                	jl     c00127c5 <SysGetEnv(regs*)+0x39>
c00127b1:	85 f6                	test   esi,esi
c00127b3:	75 0b                	jne    c00127c0 <SysGetEnv(regs*)+0x34>
c00127b5:	83 c4 10             	add    esp,0x10
c00127b8:	31 c0                	xor    eax,eax
c00127ba:	5b                   	pop    ebx
c00127bb:	31 d2                	xor    edx,edx
c00127bd:	5e                   	pop    esi
c00127be:	5f                   	pop    edi
c00127bf:	c3                   	ret    
c00127c0:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00127c3:	eb f0                	jmp    c00127b5 <SysGetEnv(regs*)+0x29>
c00127c5:	8d 44 24 08          	lea    eax,[esp+0x8]
c00127c9:	83 ec 04             	sub    esp,0x4
c00127cc:	57                   	push   edi
c00127cd:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00127d3:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c00127d6:	57                   	push   edi
c00127d7:	50                   	push   eax
c00127d8:	e8 aa ed ff ff       	call   c0011587 <KeGetProcessEnvPair(Process*, int)>
c00127dd:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00127e0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00127e4:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00127e8:	83 c4 0c             	add    esp,0xc
c00127eb:	85 d2                	test   edx,edx
c00127ed:	75 23                	jne    c0012812 <SysGetEnv(regs*)+0x86>
c00127ef:	83 ec 0c             	sub    esp,0xc
c00127f2:	50                   	push   eax
c00127f3:	e8 78 dd fe ff       	call   c0000570 <strlen>
c00127f8:	89 3c 24             	mov    DWORD PTR [esp],edi
c00127fb:	89 c3                	mov    ebx,eax
c00127fd:	e8 6e dd fe ff       	call   c0000570 <strlen>
c0012802:	83 c4 10             	add    esp,0x10
c0012805:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0012809:	83 c4 10             	add    esp,0x10
c001280c:	31 d2                	xor    edx,edx
c001280e:	5b                   	pop    ebx
c001280f:	5e                   	pop    esi
c0012810:	5f                   	pop    edi
c0012811:	c3                   	ret    
c0012812:	83 ec 08             	sub    esp,0x8
c0012815:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012818:	50                   	push   eax
c0012819:	56                   	push   esi
c001281a:	e8 21 de fe ff       	call   c0000640 <strcpy>
c001281f:	58                   	pop    eax
c0012820:	5a                   	pop    edx
c0012821:	68 80 25 02 c0       	push   0xc0022580
c0012826:	56                   	push   esi
c0012827:	e8 14 e0 fe ff       	call   c0000840 <strcat>
c001282c:	59                   	pop    ecx
c001282d:	5b                   	pop    ebx
c001282e:	57                   	push   edi
c001282f:	56                   	push   esi
c0012830:	e8 0b e0 fe ff       	call   c0000840 <strcat>
c0012835:	83 c4 10             	add    esp,0x10
c0012838:	e9 78 ff ff ff       	jmp    c00127b5 <SysGetEnv(regs*)+0x29>

c001283d <SysSetFatAttrib(regs*)>:
c001283d:	57                   	push   edi
c001283e:	56                   	push   esi
c001283f:	53                   	push   ebx
c0012840:	83 ec 1c             	sub    esp,0x1c
c0012843:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0012847:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001284a:	68 14 01 00 00       	push   0x114
c001284f:	e8 62 52 ff ff       	call   c0007ab6 <malloc>
c0012854:	83 c4 0c             	add    esp,0xc
c0012857:	89 c3                	mov    ebx,eax
c0012859:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001285e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012861:	50                   	push   eax
c0012862:	57                   	push   edi
c0012863:	53                   	push   ebx
c0012864:	e8 73 93 ff ff       	call   c000bbdc <File::File(char const*, Process*)>
c0012869:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001286c:	83 c4 0c             	add    esp,0xc
c001286f:	0f b6 d4             	movzx  edx,ah
c0012872:	0f b6 c0             	movzx  eax,al
c0012875:	52                   	push   edx
c0012876:	50                   	push   eax
c0012877:	53                   	push   ebx
c0012878:	e8 e5 95 ff ff       	call   c000be62 <File::chfatattr(unsigned char, unsigned char)>
c001287d:	83 c4 10             	add    esp,0x10
c0012880:	85 db                	test   ebx,ebx
c0012882:	74 14                	je     c0012898 <SysSetFatAttrib(regs*)+0x5b>
c0012884:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012888:	8b 13                	mov    edx,DWORD PTR [ebx]
c001288a:	83 ec 0c             	sub    esp,0xc
c001288d:	53                   	push   ebx
c001288e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0012891:	83 c4 10             	add    esp,0x10
c0012894:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012898:	85 c0                	test   eax,eax
c001289a:	0f 95 c0             	setne  al
c001289d:	31 d2                	xor    edx,edx
c001289f:	0f b6 c0             	movzx  eax,al
c00128a2:	f7 d8                	neg    eax
c00128a4:	83 d2 00             	adc    edx,0x0
c00128a7:	83 c4 10             	add    esp,0x10
c00128aa:	f7 da                	neg    edx
c00128ac:	5b                   	pop    ebx
c00128ad:	5e                   	pop    esi
c00128ae:	5f                   	pop    edi
c00128af:	c3                   	ret    

c00128b0 <SysPipe(regs*)>:
c00128b0:	57                   	push   edi
c00128b1:	56                   	push   esi
c00128b2:	53                   	push   ebx
c00128b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128b7:	83 ec 0c             	sub    esp,0xc
c00128ba:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c00128bd:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00128c0:	6a 20                	push   0x20
c00128c2:	e8 ef 51 ff ff       	call   c0007ab6 <malloc>
c00128c7:	89 c3                	mov    ebx,eax
c00128c9:	58                   	pop    eax
c00128ca:	5a                   	pop    edx
c00128cb:	68 00 50 00 00       	push   0x5000
c00128d0:	53                   	push   ebx
c00128d1:	e8 52 5b ff ff       	call   c0008428 <Pipe::Pipe(int)>
c00128d6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00128d9:	e8 d8 68 ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c00128de:	89 07                	mov    DWORD PTR [edi],eax
c00128e0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00128e3:	e8 ce 68 ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c00128e8:	83 c4 10             	add    esp,0x10
c00128eb:	89 06                	mov    DWORD PTR [esi],eax
c00128ed:	31 d2                	xor    edx,edx
c00128ef:	5b                   	pop    ebx
c00128f0:	31 c0                	xor    eax,eax
c00128f2:	5e                   	pop    esi
c00128f3:	5f                   	pop    edi
c00128f4:	c3                   	ret    

c00128f5 <SysGetUnixTime(regs*)>:
c00128f5:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00128fa:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012900:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012904:	e9 a1 9c ff ff       	jmp    c000c5aa <Clock::timeInSecondsLocal()>

c0012909 <string_ends_with(char const*, char const*)>:
c0012909:	57                   	push   edi
c001290a:	56                   	push   esi
c001290b:	53                   	push   ebx
c001290c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012910:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0012914:	83 ec 0c             	sub    esp,0xc
c0012917:	53                   	push   ebx
c0012918:	e8 53 dc fe ff       	call   c0000570 <strlen>
c001291d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012920:	89 c6                	mov    esi,eax
c0012922:	e8 49 dc fe ff       	call   c0000570 <strlen>
c0012927:	83 c4 10             	add    esp,0x10
c001292a:	39 c6                	cmp    esi,eax
c001292c:	7d 06                	jge    c0012934 <string_ends_with(char const*, char const*)+0x2b>
c001292e:	5b                   	pop    ebx
c001292f:	31 c0                	xor    eax,eax
c0012931:	5e                   	pop    esi
c0012932:	5f                   	pop    edi
c0012933:	c3                   	ret    
c0012934:	83 ec 08             	sub    esp,0x8
c0012937:	29 c6                	sub    esi,eax
c0012939:	57                   	push   edi
c001293a:	01 f3                	add    ebx,esi
c001293c:	53                   	push   ebx
c001293d:	e8 0e de fe ff       	call   c0000750 <strcmp>
c0012942:	83 c4 10             	add    esp,0x10
c0012945:	85 c0                	test   eax,eax
c0012947:	5b                   	pop    ebx
c0012948:	0f 94 c0             	sete   al
c001294b:	5e                   	pop    esi
c001294c:	0f b6 c0             	movzx  eax,al
c001294f:	5f                   	pop    edi
c0012950:	c3                   	ret    

c0012951 <SysOpen(regs*)>:
c0012951:	56                   	push   esi
c0012952:	53                   	push   ebx
c0012953:	81 ec 04 01 00 00    	sub    esp,0x104
c0012959:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0012960:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012963:	85 c0                	test   eax,eax
c0012965:	0f 84 bc 01 00 00    	je     c0012b27 <SysOpen(regs*)+0x1d6>
c001296b:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001296e:	85 c0                	test   eax,eax
c0012970:	0f 84 b1 01 00 00    	je     c0012b27 <SysOpen(regs*)+0x1d6>
c0012976:	6a 00                	push   0x0
c0012978:	68 82 25 02 c0       	push   0xc0022582
c001297d:	50                   	push   eax
c001297e:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012982:	56                   	push   esi
c0012983:	e8 5c 8f ff ff       	call   c000b8e4 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0012988:	89 34 24             	mov    DWORD PTR [esp],esi
c001298b:	e8 e0 db fe ff       	call   c0000570 <strlen>
c0012990:	83 c4 10             	add    esp,0x10
c0012993:	83 e8 01             	sub    eax,0x1
c0012996:	74 21                	je     c00129b9 <SysOpen(regs*)+0x68>
c0012998:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c001299c:	eb 12                	jmp    c00129b0 <SysOpen(regs*)+0x5f>
c001299e:	83 fa 3a             	cmp    edx,0x3a
c00129a1:	74 12                	je     c00129b5 <SysOpen(regs*)+0x64>
c00129a3:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c00129a7:	83 e8 01             	sub    eax,0x1
c00129aa:	74 0d                	je     c00129b9 <SysOpen(regs*)+0x68>
c00129ac:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c00129b0:	83 fa 2e             	cmp    edx,0x2e
c00129b3:	75 e9                	jne    c001299e <SysOpen(regs*)+0x4d>
c00129b5:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c00129b9:	83 ec 08             	sub    esp,0x8
c00129bc:	68 86 25 02 c0       	push   0xc0022586
c00129c1:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00129c4:	50                   	push   eax
c00129c5:	e8 3f ff ff ff       	call   c0012909 <string_ends_with(char const*, char const*)>
c00129ca:	83 c4 10             	add    esp,0x10
c00129cd:	85 c0                	test   eax,eax
c00129cf:	74 1d                	je     c00129ee <SysOpen(regs*)+0x9d>
c00129d1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00129d4:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c00129da:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00129e1:	81 c4 04 01 00 00    	add    esp,0x104
c00129e7:	31 c0                	xor    eax,eax
c00129e9:	31 d2                	xor    edx,edx
c00129eb:	5b                   	pop    ebx
c00129ec:	5e                   	pop    esi
c00129ed:	c3                   	ret    
c00129ee:	83 ec 08             	sub    esp,0x8
c00129f1:	68 8b 25 02 c0       	push   0xc002258b
c00129f6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00129f9:	50                   	push   eax
c00129fa:	e8 0a ff ff ff       	call   c0012909 <string_ends_with(char const*, char const*)>
c00129ff:	83 c4 10             	add    esp,0x10
c0012a02:	85 c0                	test   eax,eax
c0012a04:	75 cb                	jne    c00129d1 <SysOpen(regs*)+0x80>
c0012a06:	83 ec 08             	sub    esp,0x8
c0012a09:	68 87 25 02 c0       	push   0xc0022587
c0012a0e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012a11:	50                   	push   eax
c0012a12:	e8 39 dd fe ff       	call   c0000750 <strcmp>
c0012a17:	83 c4 10             	add    esp,0x10
c0012a1a:	85 c0                	test   eax,eax
c0012a1c:	74 b3                	je     c00129d1 <SysOpen(regs*)+0x80>
c0012a1e:	83 ec 08             	sub    esp,0x8
c0012a21:	68 86 25 02 c0       	push   0xc0022586
c0012a26:	56                   	push   esi
c0012a27:	e8 dd fe ff ff       	call   c0012909 <string_ends_with(char const*, char const*)>
c0012a2c:	83 c4 10             	add    esp,0x10
c0012a2f:	85 c0                	test   eax,eax
c0012a31:	75 9e                	jne    c00129d1 <SysOpen(regs*)+0x80>
c0012a33:	83 ec 08             	sub    esp,0x8
c0012a36:	68 90 25 02 c0       	push   0xc0022590
c0012a3b:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012a3e:	50                   	push   eax
c0012a3f:	e8 c5 fe ff ff       	call   c0012909 <string_ends_with(char const*, char const*)>
c0012a44:	83 c4 10             	add    esp,0x10
c0012a47:	85 c0                	test   eax,eax
c0012a49:	0f 85 eb 00 00 00    	jne    c0012b3a <SysOpen(regs*)+0x1e9>
c0012a4f:	83 ec 08             	sub    esp,0x8
c0012a52:	68 95 25 02 c0       	push   0xc0022595
c0012a57:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012a5a:	50                   	push   eax
c0012a5b:	e8 a9 fe ff ff       	call   c0012909 <string_ends_with(char const*, char const*)>
c0012a60:	83 c4 10             	add    esp,0x10
c0012a63:	85 c0                	test   eax,eax
c0012a65:	0f 85 cf 00 00 00    	jne    c0012b3a <SysOpen(regs*)+0x1e9>
c0012a6b:	83 ec 08             	sub    esp,0x8
c0012a6e:	68 91 25 02 c0       	push   0xc0022591
c0012a73:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0012a76:	51                   	push   ecx
c0012a77:	e8 d4 dc fe ff       	call   c0000750 <strcmp>
c0012a7c:	83 c4 10             	add    esp,0x10
c0012a7f:	85 c0                	test   eax,eax
c0012a81:	0f 84 b3 00 00 00    	je     c0012b3a <SysOpen(regs*)+0x1e9>
c0012a87:	83 ec 08             	sub    esp,0x8
c0012a8a:	68 90 25 02 c0       	push   0xc0022590
c0012a8f:	56                   	push   esi
c0012a90:	e8 74 fe ff ff       	call   c0012909 <string_ends_with(char const*, char const*)>
c0012a95:	83 c4 10             	add    esp,0x10
c0012a98:	85 c0                	test   eax,eax
c0012a9a:	0f 85 9a 00 00 00    	jne    c0012b3a <SysOpen(regs*)+0x1e9>
c0012aa0:	83 ec 0c             	sub    esp,0xc
c0012aa3:	68 14 01 00 00       	push   0x114
c0012aa8:	e8 09 50 ff ff       	call   c0007ab6 <malloc>
c0012aad:	83 c4 0c             	add    esp,0xc
c0012ab0:	89 c6                	mov    esi,eax
c0012ab2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012ab7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012aba:	50                   	push   eax
c0012abb:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0012abe:	52                   	push   edx
c0012abf:	56                   	push   esi
c0012ac0:	e8 17 91 ff ff       	call   c000bbdc <File::File(char const*, Process*)>
c0012ac5:	83 c4 10             	add    esp,0x10
c0012ac8:	85 f6                	test   esi,esi
c0012aca:	74 5b                	je     c0012b27 <SysOpen(regs*)+0x1d6>
c0012acc:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012acf:	0f b6 c2             	movzx  eax,dl
c0012ad2:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0012ad5:	89 d0                	mov    eax,edx
c0012ad7:	83 e0 01             	and    eax,0x1
c0012ada:	f6 c2 02             	test   dl,0x2
c0012add:	74 03                	je     c0012ae2 <SysOpen(regs*)+0x191>
c0012adf:	83 c8 02             	or     eax,0x2
c0012ae2:	f6 c2 04             	test   dl,0x4
c0012ae5:	74 03                	je     c0012aea <SysOpen(regs*)+0x199>
c0012ae7:	83 c8 04             	or     eax,0x4
c0012aea:	f6 c2 08             	test   dl,0x8
c0012aed:	74 03                	je     c0012af2 <SysOpen(regs*)+0x1a1>
c0012aef:	83 c8 0a             	or     eax,0xa
c0012af2:	80 e2 10             	and    dl,0x10
c0012af5:	74 03                	je     c0012afa <SysOpen(regs*)+0x1a9>
c0012af7:	83 c8 12             	or     eax,0x12
c0012afa:	83 ec 08             	sub    esp,0x8
c0012afd:	50                   	push   eax
c0012afe:	56                   	push   esi
c0012aff:	e8 f6 90 ff ff       	call   c000bbfa <File::open(FileOpenMode)>
c0012b04:	83 c4 10             	add    esp,0x10
c0012b07:	85 c0                	test   eax,eax
c0012b09:	75 1c                	jne    c0012b27 <SysOpen(regs*)+0x1d6>
c0012b0b:	83 ec 0c             	sub    esp,0xc
c0012b0e:	56                   	push   esi
c0012b0f:	e8 a2 66 ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c0012b14:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0012b17:	83 c4 10             	add    esp,0x10
c0012b1a:	89 02                	mov    DWORD PTR [edx],eax
c0012b1c:	c1 f8 1f             	sar    eax,0x1f
c0012b1f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012b22:	e9 ba fe ff ff       	jmp    c00129e1 <SysOpen(regs*)+0x90>
c0012b27:	81 c4 04 01 00 00    	add    esp,0x104
c0012b2d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012b32:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012b37:	5b                   	pop    ebx
c0012b38:	5e                   	pop    esi
c0012b39:	c3                   	ret    
c0012b3a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012b3d:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0012b43:	e9 92 fe ff ff       	jmp    c00129da <SysOpen(regs*)+0x89>

c0012b48 <KeSystemCall(regs*, void*)>:
c0012b48:	53                   	push   ebx
c0012b49:	83 ec 08             	sub    esp,0x8
c0012b4c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012b50:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0012b53:	83 f8 3e             	cmp    eax,0x3e
c0012b56:	77 16                	ja     c0012b6e <KeSystemCall(regs*, void*)+0x26>
c0012b58:	8b 14 85 a0 3d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc260]
c0012b5f:	85 d2                	test   edx,edx
c0012b61:	74 0b                	je     c0012b6e <KeSystemCall(regs*, void*)+0x26>
c0012b63:	83 ec 0c             	sub    esp,0xc
c0012b66:	53                   	push   ebx
c0012b67:	ff d2                	call   edx
c0012b69:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0012b6c:	eb 0d                	jmp    c0012b7b <KeSystemCall(regs*, void*)+0x33>
c0012b6e:	52                   	push   edx
c0012b6f:	52                   	push   edx
c0012b70:	50                   	push   eax
c0012b71:	68 9a 25 02 c0       	push   0xc002259a
c0012b76:	e8 ca 7d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0012b7b:	83 c4 10             	add    esp,0x10
c0012b7e:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0012b83:	31 d2                	xor    edx,edx
c0012b85:	83 c4 08             	add    esp,0x8
c0012b88:	5b                   	pop    ebx
c0012b89:	c3                   	ret    
c0012b8a:	66 90                	xchg   ax,ax

c0012b8c <KeSwitchEndian16(unsigned short)>:
c0012b8c:	83 ec 04             	sub    esp,0x4
c0012b8f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012b93:	66 89 04 24          	mov    WORD PTR [esp],ax
c0012b97:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0012b9b:	c1 f8 08             	sar    eax,0x8
c0012b9e:	89 c2                	mov    edx,eax
c0012ba0:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0012ba4:	c1 e0 08             	shl    eax,0x8
c0012ba7:	09 d0                	or     eax,edx
c0012ba9:	83 c4 04             	add    esp,0x4
c0012bac:	c3                   	ret    
c0012bad:	8d 76 00             	lea    esi,[esi+0x0]

c0012bb0 <KeSwitchEndian32(unsigned int)>:
c0012bb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012bb4:	c1 e8 18             	shr    eax,0x18
c0012bb7:	89 c2                	mov    edx,eax
c0012bb9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012bbd:	c1 e0 08             	shl    eax,0x8
c0012bc0:	25 00 00 ff 00       	and    eax,0xff0000
c0012bc5:	09 c2                	or     edx,eax
c0012bc7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012bcb:	c1 e8 08             	shr    eax,0x8
c0012bce:	25 00 ff 00 00       	and    eax,0xff00
c0012bd3:	09 c2                	or     edx,eax
c0012bd5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012bd9:	c1 e0 18             	shl    eax,0x18
c0012bdc:	09 d0                	or     eax,edx
c0012bde:	c3                   	ret    
c0012bdf:	90                   	nop

c0012be0 <EthernetCRC32(unsigned char*, int)>:
c0012be0:	83 ec 10             	sub    esp,0x10
c0012be3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0012be8:	75 0a                	jne    c0012bf4 <EthernetCRC32(unsigned char*, int)+0x14>
c0012bea:	b8 00 00 00 00       	mov    eax,0x0
c0012bef:	e9 8c 00 00 00       	jmp    c0012c80 <EthernetCRC32(unsigned char*, int)+0xa0>
c0012bf4:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012bf9:	7f 09                	jg     c0012c04 <EthernetCRC32(unsigned char*, int)+0x24>
c0012bfb:	b8 00 00 00 00       	mov    eax,0x0
c0012c00:	eb 7e                	jmp    c0012c80 <EthernetCRC32(unsigned char*, int)+0xa0>
c0012c02:	66 90                	xchg   ax,ax
c0012c04:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0012c0c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0012c14:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012c18:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0012c1c:	7d 5a                	jge    c0012c78 <EthernetCRC32(unsigned char*, int)+0x98>
c0012c1e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012c22:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012c26:	01 d0                	add    eax,edx
c0012c28:	8a 00                	mov    al,BYTE PTR [eax]
c0012c2a:	0f b6 c0             	movzx  eax,al
c0012c2d:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0012c31:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012c39:	8d 76 00             	lea    esi,[esi+0x0]
c0012c3c:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0012c41:	7f 2d                	jg     c0012c70 <EthernetCRC32(unsigned char*, int)+0x90>
c0012c43:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c47:	83 e0 01             	and    eax,0x1
c0012c4a:	74 10                	je     c0012c5c <EthernetCRC32(unsigned char*, int)+0x7c>
c0012c4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c50:	d1 e8                	shr    eax,1
c0012c52:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0012c57:	eb 0b                	jmp    c0012c64 <EthernetCRC32(unsigned char*, int)+0x84>
c0012c59:	8d 76 00             	lea    esi,[esi+0x0]
c0012c5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c60:	d1 e8                	shr    eax,1
c0012c62:	66 90                	xchg   ax,ax
c0012c64:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012c68:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0012c6d:	eb cd                	jmp    c0012c3c <EthernetCRC32(unsigned char*, int)+0x5c>
c0012c6f:	90                   	nop
c0012c70:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0012c75:	eb 9d                	jmp    c0012c14 <EthernetCRC32(unsigned char*, int)+0x34>
c0012c77:	90                   	nop
c0012c78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c7c:	f7 d0                	not    eax
c0012c7e:	66 90                	xchg   ax,ax
c0012c80:	83 c4 10             	add    esp,0x10
c0012c83:	c3                   	ret    

c0012c84 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0012c84:	83 ec 2c             	sub    esp,0x2c
c0012c87:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012c8b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0012c90:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012c94:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012c98:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012c9c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012c9f:	0f b7 c0             	movzx  eax,ax
c0012ca2:	3d 06 08 00 00       	cmp    eax,0x806
c0012ca7:	75 13                	jne    c0012cbc <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c0012ca9:	83 ec 0c             	sub    esp,0xc
c0012cac:	68 ae 25 02 c0       	push   0xc00225ae
c0012cb1:	e8 8f 7c ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0012cb6:	83 c4 10             	add    esp,0x10
c0012cb9:	eb 25                	jmp    c0012ce0 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0012cbb:	90                   	nop
c0012cbc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012cc0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012cc3:	0f b7 c0             	movzx  eax,ax
c0012cc6:	3d 00 08 00 00       	cmp    eax,0x800
c0012ccb:	75 13                	jne    c0012ce0 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0012ccd:	83 ec 0c             	sub    esp,0xc
c0012cd0:	68 c4 25 02 c0       	push   0xc00225c4
c0012cd5:	e8 6b 7c ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0012cda:	83 c4 10             	add    esp,0x10
c0012cdd:	8d 76 00             	lea    esi,[esi+0x0]
c0012ce0:	90                   	nop
c0012ce1:	83 c4 2c             	add    esp,0x2c
c0012ce4:	c3                   	ret    

c0012ce5 <CmOpen(char const*)>:
c0012ce5:	57                   	push   edi
c0012ce6:	56                   	push   esi
c0012ce7:	53                   	push   ebx
c0012ce8:	83 ec 1c             	sub    esp,0x1c
c0012ceb:	6a 30                	push   0x30
c0012ced:	e8 c4 4d ff ff       	call   c0007ab6 <malloc>
c0012cf2:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012cf9:	89 c3                	mov    ebx,eax
c0012cfb:	e8 b6 4d ff ff       	call   c0007ab6 <malloc>
c0012d00:	83 c4 0c             	add    esp,0xc
c0012d03:	89 c6                	mov    esi,eax
c0012d05:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0012d0b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012d0f:	50                   	push   eax
c0012d10:	e8 c7 8e ff ff       	call   c000bbdc <File::File(char const*, Process*)>
c0012d15:	83 c4 0c             	add    esp,0xc
c0012d18:	89 33                	mov    DWORD PTR [ebx],esi
c0012d1a:	8d 44 24 07          	lea    eax,[esp+0x7]
c0012d1e:	50                   	push   eax
c0012d1f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012d23:	50                   	push   eax
c0012d24:	56                   	push   esi
c0012d25:	e8 d2 91 ff ff       	call   c000befc <File::stat(unsigned long long*, bool*)>
c0012d2a:	5a                   	pop    edx
c0012d2b:	59                   	pop    ecx
c0012d2c:	6a 01                	push   0x1
c0012d2e:	ff 33                	push   DWORD PTR [ebx]
c0012d30:	e8 c5 8e ff ff       	call   c000bbfa <File::open(FileOpenMode)>
c0012d35:	5e                   	pop    esi
c0012d36:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012d3a:	e8 77 4d ff ff       	call   c0007ab6 <malloc>
c0012d3f:	5a                   	pop    edx
c0012d40:	89 c7                	mov    edi,eax
c0012d42:	8d 74 24 10          	lea    esi,[esp+0x10]
c0012d46:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012d48:	8b 10                	mov    edx,DWORD PTR [eax]
c0012d4a:	56                   	push   esi
c0012d4b:	57                   	push   edi
c0012d4c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012d50:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012d54:	50                   	push   eax
c0012d55:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012d58:	83 c4 14             	add    esp,0x14
c0012d5b:	ff 33                	push   DWORD PTR [ebx]
c0012d5d:	e8 f6 8e ff ff       	call   c000bc58 <File::close()>
c0012d62:	59                   	pop    ecx
c0012d63:	58                   	pop    eax
c0012d64:	6a 13                	push   0x13
c0012d66:	ff 33                	push   DWORD PTR [ebx]
c0012d68:	e8 8d 8e ff ff       	call   c000bbfa <File::open(FileOpenMode)>
c0012d6d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012d6f:	8b 10                	mov    edx,DWORD PTR [eax]
c0012d71:	89 34 24             	mov    DWORD PTR [esp],esi
c0012d74:	57                   	push   edi
c0012d75:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012d79:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012d7d:	50                   	push   eax
c0012d7e:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012d81:	83 c4 14             	add    esp,0x14
c0012d84:	57                   	push   edi
c0012d85:	e8 3c 4d ff ff       	call   c0007ac6 <free>
c0012d8a:	83 c4 10             	add    esp,0x10
c0012d8d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0012d90:	75 10                	jne    c0012da2 <CmOpen(char const*)+0xbd>
c0012d92:	83 ec 0c             	sub    esp,0xc
c0012d95:	68 d9 25 02 c0       	push   0xc00225d9
c0012d9a:	e8 10 e9 ff ff       	call   c00116af <KePanic(char const*)>
c0012d9f:	83 c4 10             	add    esp,0x10
c0012da2:	8d 7b 05             	lea    edi,[ebx+0x5]
c0012da5:	50                   	push   eax
c0012da6:	6a 00                	push   0x0
c0012da8:	6a 00                	push   0x0
c0012daa:	ff 33                	push   DWORD PTR [ebx]
c0012dac:	e8 07 8f ff ff       	call   c000bcb8 <File::seek(unsigned long long)>
c0012db1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012db3:	8b 10                	mov    edx,DWORD PTR [eax]
c0012db5:	89 34 24             	mov    DWORD PTR [esp],esi
c0012db8:	57                   	push   edi
c0012db9:	6a 00                	push   0x0
c0012dbb:	6a 2b                	push   0x2b
c0012dbd:	50                   	push   eax
c0012dbe:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012dc1:	83 c4 1c             	add    esp,0x1c
c0012dc4:	6a 00                	push   0x0
c0012dc6:	6a 00                	push   0x0
c0012dc8:	ff 33                	push   DWORD PTR [ebx]
c0012dca:	e8 e9 8e ff ff       	call   c000bcb8 <File::seek(unsigned long long)>
c0012dcf:	83 c4 0c             	add    esp,0xc
c0012dd2:	6a 08                	push   0x8
c0012dd4:	68 ea 25 02 c0       	push   0xc00225ea
c0012dd9:	57                   	push   edi
c0012dda:	e8 a1 d5 fe ff       	call   c0000380 <memcmp>
c0012ddf:	83 c4 10             	add    esp,0x10
c0012de2:	85 c0                	test   eax,eax
c0012de4:	74 10                	je     c0012df6 <CmOpen(char const*)+0x111>
c0012de6:	83 ec 0c             	sub    esp,0xc
c0012de9:	68 f3 25 02 c0       	push   0xc00225f3
c0012dee:	e8 bc e8 ff ff       	call   c00116af <KePanic(char const*)>
c0012df3:	83 c4 10             	add    esp,0x10
c0012df6:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c0012dfa:	89 d8                	mov    eax,ebx
c0012dfc:	83 c4 10             	add    esp,0x10
c0012dff:	5b                   	pop    ebx
c0012e00:	5e                   	pop    esi
c0012e01:	5f                   	pop    edi
c0012e02:	c3                   	ret    

c0012e03 <CmClose(Reghive_Tag*)>:
c0012e03:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012e07:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012e0b:	74 0b                	je     c0012e18 <CmClose(Reghive_Tag*)+0x15>
c0012e0d:	8b 00                	mov    eax,DWORD PTR [eax]
c0012e0f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012e13:	e9 40 8e ff ff       	jmp    c000bc58 <File::close()>
c0012e18:	c3                   	ret    

c0012e19 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0012e19:	53                   	push   ebx
c0012e1a:	83 ec 18             	sub    esp,0x18
c0012e1d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012e21:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012e25:	74 29                	je     c0012e50 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012e27:	50                   	push   eax
c0012e28:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012e2d:	99                   	cdq    
c0012e2e:	52                   	push   edx
c0012e2f:	50                   	push   eax
c0012e30:	ff 33                	push   DWORD PTR [ebx]
c0012e32:	e8 81 8e ff ff       	call   c000bcb8 <File::seek(unsigned long long)>
c0012e37:	5a                   	pop    edx
c0012e38:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012e3a:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012e3e:	8b 10                	mov    edx,DWORD PTR [eax]
c0012e40:	51                   	push   ecx
c0012e41:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012e45:	6a 00                	push   0x0
c0012e47:	6a 2b                	push   0x2b
c0012e49:	50                   	push   eax
c0012e4a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012e4d:	83 c4 20             	add    esp,0x20
c0012e50:	83 c4 18             	add    esp,0x18
c0012e53:	5b                   	pop    ebx
c0012e54:	c3                   	ret    

c0012e55 <CmGetString(Reghive_Tag*, int, char*)>:
c0012e55:	55                   	push   ebp
c0012e56:	57                   	push   edi
c0012e57:	56                   	push   esi
c0012e58:	53                   	push   ebx
c0012e59:	31 db                	xor    ebx,ebx
c0012e5b:	83 ec 70             	sub    esp,0x70
c0012e5e:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c0012e65:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0012e69:	50                   	push   eax
c0012e6a:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0012e71:	55                   	push   ebp
c0012e72:	e8 a2 ff ff ff       	call   c0012e19 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012e77:	83 c4 10             	add    esp,0x10
c0012e7a:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c0012e7f:	c1 e0 08             	shl    eax,0x8
c0012e82:	89 c2                	mov    edx,eax
c0012e84:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0012e89:	09 d0                	or     eax,edx
c0012e8b:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c0012e90:	c1 e0 08             	shl    eax,0x8
c0012e93:	09 d0                	or     eax,edx
c0012e95:	74 25                	je     c0012ebc <CmGetString(Reghive_Tag*, int, char*)+0x67>
c0012e97:	6b fb 0d             	imul   edi,ebx,0xd
c0012e9a:	52                   	push   edx
c0012e9b:	8d 54 24 39          	lea    edx,[esp+0x39]
c0012e9f:	52                   	push   edx
c0012ea0:	50                   	push   eax
c0012ea1:	55                   	push   ebp
c0012ea2:	e8 72 ff ff ff       	call   c0012e19 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012ea7:	8d 74 24 49          	lea    esi,[esp+0x49]
c0012eab:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c0012eb2:	b9 27 00 00 00       	mov    ecx,0x27
c0012eb7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012eb9:	83 c4 10             	add    esp,0x10
c0012ebc:	83 c3 03             	add    ebx,0x3
c0012ebf:	83 fb 15             	cmp    ebx,0x15
c0012ec2:	75 b6                	jne    c0012e7a <CmGetString(Reghive_Tag*, int, char*)+0x25>
c0012ec4:	83 c4 6c             	add    esp,0x6c
c0012ec7:	5b                   	pop    ebx
c0012ec8:	5e                   	pop    esi
c0012ec9:	5f                   	pop    edi
c0012eca:	5d                   	pop    ebp
c0012ecb:	c3                   	ret    

c0012ecc <CmEnterDirectory(Reghive_Tag*, int)>:
c0012ecc:	83 ec 40             	sub    esp,0x40
c0012ecf:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012ed3:	50                   	push   eax
c0012ed4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012ed8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012edc:	e8 38 ff ff ff       	call   c0012e19 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012ee1:	83 c4 10             	add    esp,0x10
c0012ee4:	83 c8 ff             	or     eax,0xffffffff
c0012ee7:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c0012eec:	75 19                	jne    c0012f07 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c0012eee:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0012ef3:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0012ef8:	c1 e0 08             	shl    eax,0x8
c0012efb:	09 c2                	or     edx,eax
c0012efd:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c0012f02:	c1 e0 10             	shl    eax,0x10
c0012f05:	09 d0                	or     eax,edx
c0012f07:	83 c4 3c             	add    esp,0x3c
c0012f0a:	c3                   	ret    

c0012f0b <CmGetNext(Reghive_Tag*, int)>:
c0012f0b:	83 ec 40             	sub    esp,0x40
c0012f0e:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012f12:	50                   	push   eax
c0012f13:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012f17:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012f1b:	e8 f9 fe ff ff       	call   c0012e19 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012f20:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c0012f25:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0012f2a:	c1 e0 08             	shl    eax,0x8
c0012f2d:	09 c2                	or     edx,eax
c0012f2f:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0012f34:	83 c4 4c             	add    esp,0x4c
c0012f37:	c1 e0 10             	shl    eax,0x10
c0012f3a:	09 d0                	or     eax,edx
c0012f3c:	c3                   	ret    

c0012f3d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c0012f3d:	53                   	push   ebx
c0012f3e:	83 ec 18             	sub    esp,0x18
c0012f41:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012f45:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012f49:	74 29                	je     c0012f74 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012f4b:	50                   	push   eax
c0012f4c:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012f51:	99                   	cdq    
c0012f52:	52                   	push   edx
c0012f53:	50                   	push   eax
c0012f54:	ff 33                	push   DWORD PTR [ebx]
c0012f56:	e8 5d 8d ff ff       	call   c000bcb8 <File::seek(unsigned long long)>
c0012f5b:	5a                   	pop    edx
c0012f5c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012f5e:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012f62:	8b 10                	mov    edx,DWORD PTR [eax]
c0012f64:	51                   	push   ecx
c0012f65:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012f69:	6a 00                	push   0x0
c0012f6b:	6a 2b                	push   0x2b
c0012f6d:	50                   	push   eax
c0012f6e:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012f71:	83 c4 20             	add    esp,0x20
c0012f74:	83 c4 18             	add    esp,0x18
c0012f77:	5b                   	pop    ebx
c0012f78:	c3                   	ret    

c0012f79 <CmFreeExtent(Reghive_Tag*, int)>:
c0012f79:	53                   	push   ebx
c0012f7a:	83 ec 3c             	sub    esp,0x3c
c0012f7d:	6a 2b                	push   0x2b
c0012f7f:	6a 00                	push   0x0
c0012f81:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012f85:	53                   	push   ebx
c0012f86:	e8 65 d5 fe ff       	call   c00004f0 <memset>
c0012f8b:	83 c4 0c             	add    esp,0xc
c0012f8e:	53                   	push   ebx
c0012f8f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012f93:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012f97:	e8 a1 ff ff ff       	call   c0012f3d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012f9c:	83 c4 48             	add    esp,0x48
c0012f9f:	5b                   	pop    ebx
c0012fa0:	c3                   	ret    

c0012fa1 <CmUpdateHeader(Reghive_Tag*)>:
c0012fa1:	83 ec 0c             	sub    esp,0xc
c0012fa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fa8:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012fac:	74 10                	je     c0012fbe <CmUpdateHeader(Reghive_Tag*)+0x1d>
c0012fae:	52                   	push   edx
c0012faf:	8d 50 05             	lea    edx,[eax+0x5]
c0012fb2:	52                   	push   edx
c0012fb3:	6a 00                	push   0x0
c0012fb5:	50                   	push   eax
c0012fb6:	e8 82 ff ff ff       	call   c0012f3d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012fbb:	83 c4 10             	add    esp,0x10
c0012fbe:	83 c4 0c             	add    esp,0xc
c0012fc1:	c3                   	ret    

c0012fc2 <CmExpand(Reghive_Tag*, int)>:
c0012fc2:	57                   	push   edi
c0012fc3:	56                   	push   esi
c0012fc4:	83 ce ff             	or     esi,0xffffffff
c0012fc7:	53                   	push   ebx
c0012fc8:	83 ec 30             	sub    esp,0x30
c0012fcb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012fcf:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012fd3:	74 5f                	je     c0013034 <CmExpand(Reghive_Tag*, int)+0x72>
c0012fd5:	31 d2                	xor    edx,edx
c0012fd7:	31 f6                	xor    esi,esi
c0012fd9:	50                   	push   eax
c0012fda:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c0012fde:	52                   	push   edx
c0012fdf:	50                   	push   eax
c0012fe0:	ff 33                	push   DWORD PTR [ebx]
c0012fe2:	e8 d1 8c ff ff       	call   c000bcb8 <File::seek(unsigned long long)>
c0012fe7:	83 c4 0c             	add    esp,0xc
c0012fea:	6a 2b                	push   0x2b
c0012fec:	6a 00                	push   0x0
c0012fee:	8d 7c 24 11          	lea    edi,[esp+0x11]
c0012ff2:	57                   	push   edi
c0012ff3:	e8 f8 d4 fe ff       	call   c00004f0 <memset>
c0012ff8:	83 c4 10             	add    esp,0x10
c0012ffb:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0012fff:	7d 1b                	jge    c001301c <CmExpand(Reghive_Tag*, int)+0x5a>
c0013001:	83 ec 0c             	sub    esp,0xc
c0013004:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013006:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c001300a:	8b 10                	mov    edx,DWORD PTR [eax]
c001300c:	46                   	inc    esi
c001300d:	51                   	push   ecx
c001300e:	57                   	push   edi
c001300f:	6a 00                	push   0x0
c0013011:	6a 2b                	push   0x2b
c0013013:	50                   	push   eax
c0013014:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0013017:	83 c4 20             	add    esp,0x20
c001301a:	eb df                	jmp    c0012ffb <CmExpand(Reghive_Tag*, int)+0x39>
c001301c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0013020:	8b 73 0d             	mov    esi,DWORD PTR [ebx+0xd]
c0013023:	83 ec 0c             	sub    esp,0xc
c0013026:	01 f2                	add    edx,esi
c0013028:	89 53 0d             	mov    DWORD PTR [ebx+0xd],edx
c001302b:	53                   	push   ebx
c001302c:	e8 70 ff ff ff       	call   c0012fa1 <CmUpdateHeader(Reghive_Tag*)>
c0013031:	83 c4 10             	add    esp,0x10
c0013034:	83 c4 30             	add    esp,0x30
c0013037:	89 f0                	mov    eax,esi
c0013039:	5b                   	pop    ebx
c001303a:	5e                   	pop    esi
c001303b:	5f                   	pop    edi
c001303c:	c3                   	ret    

c001303d <CmFindUnusedExtent(Reghive_Tag*)>:
c001303d:	55                   	push   ebp
c001303e:	57                   	push   edi
c001303f:	56                   	push   esi
c0013040:	53                   	push   ebx
c0013041:	83 cb ff             	or     ebx,0xffffffff
c0013044:	83 ec 1c             	sub    esp,0x1c
c0013047:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001304b:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c001304f:	74 68                	je     c00130b9 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0013051:	be 2b 00 00 00       	mov    esi,0x2b
c0013056:	51                   	push   ecx
c0013057:	31 ff                	xor    edi,edi
c0013059:	6a 00                	push   0x0
c001305b:	31 db                	xor    ebx,ebx
c001305d:	6a 00                	push   0x0
c001305f:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0013062:	e8 51 8c ff ff       	call   c000bcb8 <File::seek(unsigned long long)>
c0013067:	83 c4 10             	add    esp,0x10
c001306a:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c001306d:	76 3b                	jbe    c00130aa <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c001306f:	83 ec 0c             	sub    esp,0xc
c0013072:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013075:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0013079:	8b 10                	mov    edx,DWORD PTR [eax]
c001307b:	51                   	push   ecx
c001307c:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c0013080:	51                   	push   ecx
c0013081:	6a 00                	push   0x0
c0013083:	6a 01                	push   0x1
c0013085:	50                   	push   eax
c0013086:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0013089:	83 c4 20             	add    esp,0x20
c001308c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0013091:	74 26                	je     c00130b9 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0013093:	43                   	inc    ebx
c0013094:	52                   	push   edx
c0013095:	57                   	push   edi
c0013096:	56                   	push   esi
c0013097:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c001309a:	e8 19 8c ff ff       	call   c000bcb8 <File::seek(unsigned long long)>
c001309f:	83 c6 2b             	add    esi,0x2b
c00130a2:	83 d7 00             	adc    edi,0x0
c00130a5:	83 c4 10             	add    esp,0x10
c00130a8:	eb c0                	jmp    c001306a <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c00130aa:	50                   	push   eax
c00130ab:	50                   	push   eax
c00130ac:	6a 40                	push   0x40
c00130ae:	55                   	push   ebp
c00130af:	e8 0e ff ff ff       	call   c0012fc2 <CmExpand(Reghive_Tag*, int)>
c00130b4:	83 c4 10             	add    esp,0x10
c00130b7:	89 c3                	mov    ebx,eax
c00130b9:	83 c4 1c             	add    esp,0x1c
c00130bc:	89 d8                	mov    eax,ebx
c00130be:	5b                   	pop    ebx
c00130bf:	5e                   	pop    esi
c00130c0:	5f                   	pop    edi
c00130c1:	5d                   	pop    ebp
c00130c2:	c3                   	ret    

c00130c3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c00130c3:	55                   	push   ebp
c00130c4:	57                   	push   edi
c00130c5:	56                   	push   esi
c00130c6:	53                   	push   ebx
c00130c7:	81 ec 88 00 00 00    	sub    esp,0x88
c00130cd:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c00130d4:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00130db:	e8 5d ff ff ff       	call   c001303d <CmFindUnusedExtent(Reghive_Tag*)>
c00130e0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00130e4:	83 c4 0c             	add    esp,0xc
c00130e7:	6a 2b                	push   0x2b
c00130e9:	6a 00                	push   0x0
c00130eb:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c00130ef:	55                   	push   ebp
c00130f0:	e8 fb d3 fe ff       	call   c00004f0 <memset>
c00130f5:	83 c4 10             	add    esp,0x10
c00130f8:	85 db                	test   ebx,ebx
c00130fa:	74 12                	je     c001310e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c00130fc:	51                   	push   ecx
c00130fd:	55                   	push   ebp
c00130fe:	53                   	push   ebx
c00130ff:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0013106:	e8 0e fd ff ff       	call   c0012e19 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001310b:	83 c4 10             	add    esp,0x10
c001310e:	8d 7c 24 45          	lea    edi,[esp+0x45]
c0013112:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0013119:	b9 2b 00 00 00       	mov    ecx,0x2b
c001311e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013120:	85 db                	test   ebx,ebx
c0013122:	74 49                	je     c001316d <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c0013124:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c0013129:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c001312e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013132:	c1 e0 08             	shl    eax,0x8
c0013135:	81 e2 ff ff ff 00    	and    edx,0xffffff
c001313b:	09 c8                	or     eax,ecx
c001313d:	74 11                	je     c0013150 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c001313f:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0013143:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c0013147:	c1 e8 10             	shr    eax,0x10
c001314a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c001314e:	eb 0f                	jmp    c001315f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c0013150:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0013155:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c001315a:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c001315f:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c0013163:	c1 ea 08             	shr    edx,0x8
c0013166:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c001316b:	eb 0f                	jmp    c001317c <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c001316d:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0013172:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0013177:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c001317c:	52                   	push   edx
c001317d:	8d 44 24 49          	lea    eax,[esp+0x49]
c0013181:	50                   	push   eax
c0013182:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013186:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001318d:	e8 ab fd ff ff       	call   c0012f3d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0013192:	83 c4 10             	add    esp,0x10
c0013195:	85 db                	test   ebx,ebx
c0013197:	74 12                	je     c00131ab <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c0013199:	50                   	push   eax
c001319a:	55                   	push   ebp
c001319b:	53                   	push   ebx
c001319c:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00131a3:	e8 95 fd ff ff       	call   c0012f3d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00131a8:	83 c4 10             	add    esp,0x10
c00131ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00131af:	83 c4 7c             	add    esp,0x7c
c00131b2:	5b                   	pop    ebx
c00131b3:	5e                   	pop    esi
c00131b4:	5f                   	pop    edi
c00131b5:	5d                   	pop    ebp
c00131b6:	c3                   	ret    

c00131b7 <CmSetString(Reghive_Tag*, int, char const*)>:
c00131b7:	55                   	push   ebp
c00131b8:	57                   	push   edi
c00131b9:	56                   	push   esi
c00131ba:	53                   	push   ebx
c00131bb:	bb 27 00 00 00       	mov    ebx,0x27
c00131c0:	81 ec 88 00 00 00    	sub    esp,0x88
c00131c6:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c00131cd:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c00131d4:	e8 97 d3 fe ff       	call   c0000570 <strlen>
c00131d9:	8d 48 26             	lea    ecx,[eax+0x26]
c00131dc:	89 c8                	mov    eax,ecx
c00131de:	99                   	cdq    
c00131df:	f7 fb                	idiv   ebx
c00131e1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00131e5:	83 c4 10             	add    esp,0x10
c00131e8:	81 f9 37 01 00 00    	cmp    ecx,0x137
c00131ee:	7e 10                	jle    c0013200 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c00131f0:	83 ec 0c             	sub    esp,0xc
c00131f3:	68 04 26 02 c0       	push   0xc0022604
c00131f8:	e8 b2 e4 ff ff       	call   c00116af <KePanic(char const*)>
c00131fd:	83 c4 10             	add    esp,0x10
c0013200:	31 ff                	xor    edi,edi
c0013202:	50                   	push   eax
c0013203:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c0013207:	53                   	push   ebx
c0013208:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001320f:	56                   	push   esi
c0013210:	e8 04 fc ff ff       	call   c0012e19 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013215:	83 c4 10             	add    esp,0x10
c0013218:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c001321c:	89 d0                	mov    eax,edx
c001321e:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c0013222:	c1 e0 08             	shl    eax,0x8
c0013225:	09 c2                	or     edx,eax
c0013227:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c001322b:	c1 e2 08             	shl    edx,0x8
c001322e:	09 c2                	or     edx,eax
c0013230:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0013234:	7e 76                	jle    c00132ac <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c0013236:	85 d2                	test   edx,edx
c0013238:	75 25                	jne    c001325f <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c001323a:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c001323f:	8d 44 24 45          	lea    eax,[esp+0x45]
c0013243:	50                   	push   eax
c0013244:	6a 00                	push   0x0
c0013246:	6a 00                	push   0x0
c0013248:	56                   	push   esi
c0013249:	e8 75 fe ff ff       	call   c00130c3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c001324e:	83 c4 10             	add    esp,0x10
c0013251:	89 c2                	mov    edx,eax
c0013253:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c0013256:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c0013259:	c1 f8 10             	sar    eax,0x10
c001325c:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c001325f:	55                   	push   ebp
c0013260:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c0013264:	55                   	push   ebp
c0013265:	52                   	push   edx
c0013266:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001326a:	56                   	push   esi
c001326b:	e8 a9 fb ff ff       	call   c0012e19 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013270:	83 c4 0c             	add    esp,0xc
c0013273:	6a 27                	push   0x27
c0013275:	6a 00                	push   0x0
c0013277:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c001327b:	51                   	push   ecx
c001327c:	e8 6f d2 fe ff       	call   c00004f0 <memset>
c0013281:	83 c4 0c             	add    esp,0xc
c0013284:	6b c7 27             	imul   eax,edi,0x27
c0013287:	6a 27                	push   0x27
c0013289:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c0013290:	50                   	push   eax
c0013291:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0013295:	51                   	push   ecx
c0013296:	e8 e5 d3 fe ff       	call   c0000680 <strncpy>
c001329b:	83 c4 0c             	add    esp,0xc
c001329e:	55                   	push   ebp
c001329f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00132a3:	52                   	push   edx
c00132a4:	56                   	push   esi
c00132a5:	e8 93 fc ff ff       	call   c0012f3d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00132aa:	eb 19                	jmp    c00132c5 <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c00132ac:	85 d2                	test   edx,edx
c00132ae:	74 18                	je     c00132c8 <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c00132b0:	51                   	push   ecx
c00132b1:	51                   	push   ecx
c00132b2:	52                   	push   edx
c00132b3:	56                   	push   esi
c00132b4:	e8 c0 fc ff ff       	call   c0012f79 <CmFreeExtent(Reghive_Tag*, int)>
c00132b9:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c00132bd:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c00132c1:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00132c5:	83 c4 10             	add    esp,0x10
c00132c8:	47                   	inc    edi
c00132c9:	83 c3 03             	add    ebx,0x3
c00132cc:	83 ff 07             	cmp    edi,0x7
c00132cf:	0f 85 43 ff ff ff    	jne    c0013218 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c00132d5:	50                   	push   eax
c00132d6:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c00132da:	50                   	push   eax
c00132db:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00132e2:	56                   	push   esi
c00132e3:	e8 55 fc ff ff       	call   c0012f3d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00132e8:	81 c4 8c 00 00 00    	add    esp,0x8c
c00132ee:	5b                   	pop    ebx
c00132ef:	5e                   	pop    esi
c00132f0:	5f                   	pop    edi
c00132f1:	5d                   	pop    ebp
c00132f2:	c3                   	ret    

c00132f3 <CmGetMatch(char*, char*, bool, bool*)>:
c00132f3:	56                   	push   esi
c00132f4:	53                   	push   ebx
c00132f5:	50                   	push   eax
c00132f6:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00132fa:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00132ff:	74 25                	je     c0013326 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c0013301:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0013304:	31 db                	xor    ebx,ebx
c0013306:	50                   	push   eax
c0013307:	50                   	push   eax
c0013308:	8d 04 9d a0 3e 02 c0 	lea    eax,[ebx*4-0x3ffdc160]
c001330f:	50                   	push   eax
c0013310:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013314:	e8 37 d4 fe ff       	call   c0000750 <strcmp>
c0013319:	83 c4 10             	add    esp,0x10
c001331c:	85 c0                	test   eax,eax
c001331e:	74 2e                	je     c001334e <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0013320:	43                   	inc    ebx
c0013321:	83 fb 3f             	cmp    ebx,0x3f
c0013324:	75 e0                	jne    c0013306 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c0013326:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0013329:	31 db                	xor    ebx,ebx
c001332b:	8d 04 9d a0 3e 02 c0 	lea    eax,[ebx*4-0x3ffdc160]
c0013332:	51                   	push   ecx
c0013333:	51                   	push   ecx
c0013334:	50                   	push   eax
c0013335:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013339:	e8 12 d4 fe ff       	call   c0000750 <strcmp>
c001333e:	83 c4 10             	add    esp,0x10
c0013341:	85 c0                	test   eax,eax
c0013343:	74 09                	je     c001334e <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0013345:	43                   	inc    ebx
c0013346:	83 fb 3f             	cmp    ebx,0x3f
c0013349:	75 e0                	jne    c001332b <CmGetMatch(char*, char*, bool, bool*)+0x38>
c001334b:	83 cb ff             	or     ebx,0xffffffff
c001334e:	89 d8                	mov    eax,ebx
c0013350:	5a                   	pop    edx
c0013351:	5b                   	pop    ebx
c0013352:	5e                   	pop    esi
c0013353:	c3                   	ret    

c0013354 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c0013354:	55                   	push   ebp
c0013355:	31 c0                	xor    eax,eax
c0013357:	57                   	push   edi
c0013358:	56                   	push   esi
c0013359:	53                   	push   ebx
c001335a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001335e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0013362:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0013364:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0013368:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c001336b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001336f:	83 fd 1f             	cmp    ebp,0x1f
c0013372:	7f 0b                	jg     c001337f <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c0013374:	0f b6 c2             	movzx  eax,dl
c0013377:	d3 e0                	shl    eax,cl
c0013379:	09 07                	or     DWORD PTR [edi],eax
c001337b:	b0 01                	mov    al,0x1
c001337d:	01 33                	add    DWORD PTR [ebx],esi
c001337f:	5b                   	pop    ebx
c0013380:	5e                   	pop    esi
c0013381:	5f                   	pop    edi
c0013382:	5d                   	pop    ebp
c0013383:	c3                   	ret    

c0013384 <CmGetShift(unsigned int*, int*, int, bool*)>:
c0013384:	57                   	push   edi
c0013385:	56                   	push   esi
c0013386:	53                   	push   ebx
c0013387:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001338b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001338f:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0013393:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013397:	39 0b                	cmp    DWORD PTR [ebx],ecx
c0013399:	7c 17                	jl     c00133b2 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c001339b:	8b 17                	mov    edx,DWORD PTR [edi]
c001339d:	b8 01 00 00 00       	mov    eax,0x1
c00133a2:	d3 e0                	shl    eax,cl
c00133a4:	48                   	dec    eax
c00133a5:	21 d0                	and    eax,edx
c00133a7:	d3 ea                	shr    edx,cl
c00133a9:	89 17                	mov    DWORD PTR [edi],edx
c00133ab:	29 0b                	sub    DWORD PTR [ebx],ecx
c00133ad:	c6 06 01             	mov    BYTE PTR [esi],0x1
c00133b0:	eb 05                	jmp    c00133b7 <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c00133b2:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00133b5:	31 c0                	xor    eax,eax
c00133b7:	5b                   	pop    ebx
c00133b8:	5e                   	pop    esi
c00133b9:	5f                   	pop    edi
c00133ba:	c3                   	ret    

c00133bb <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c00133bb:	83 ec 40             	sub    esp,0x40
c00133be:	8d 44 24 09          	lea    eax,[esp+0x9]
c00133c2:	50                   	push   eax
c00133c3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00133c7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00133cb:	e8 49 fa ff ff       	call   c0012e19 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00133d0:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00133d4:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c00133d8:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c00133dc:	89 10                	mov    DWORD PTR [eax],edx
c00133de:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00133e1:	83 c4 4c             	add    esp,0x4c
c00133e4:	c3                   	ret    

c00133e5 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c00133e5:	55                   	push   ebp
c00133e6:	57                   	push   edi
c00133e7:	56                   	push   esi
c00133e8:	53                   	push   ebx
c00133e9:	83 ec 40             	sub    esp,0x40
c00133ec:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c00133f0:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00133f4:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c00133f8:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c00133fc:	53                   	push   ebx
c00133fd:	56                   	push   esi
c00133fe:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013402:	e8 12 fa ff ff       	call   c0012e19 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013407:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c001340b:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c001340f:	83 c4 0c             	add    esp,0xc
c0013412:	53                   	push   ebx
c0013413:	56                   	push   esi
c0013414:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013418:	e8 20 fb ff ff       	call   c0012f3d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001341d:	83 c4 4c             	add    esp,0x4c
c0013420:	5b                   	pop    ebx
c0013421:	5e                   	pop    esi
c0013422:	5f                   	pop    edi
c0013423:	5d                   	pop    ebp
c0013424:	c3                   	ret    

c0013425 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c0013425:	55                   	push   ebp
c0013426:	57                   	push   edi
c0013427:	56                   	push   esi
c0013428:	31 f6                	xor    esi,esi
c001342a:	53                   	push   ebx
c001342b:	31 db                	xor    ebx,ebx
c001342d:	83 ec 40             	sub    esp,0x40
c0013430:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013438:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0013440:	6a 12                	push   0x12
c0013442:	68 ee 00 00 00       	push   0xee
c0013447:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c001344b:	e8 a0 d0 fe ff       	call   c00004f0 <memset>
c0013450:	83 c4 10             	add    esp,0x10
c0013453:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0013457:	6a 08                	push   0x8
c0013459:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001345d:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c0013461:	50                   	push   eax
c0013462:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0013466:	55                   	push   ebp
c0013467:	57                   	push   edi
c0013468:	e8 e7 fe ff ff       	call   c0013354 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c001346d:	83 c4 10             	add    esp,0x10
c0013470:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0013474:	50                   	push   eax
c0013475:	6a 06                	push   0x6
c0013477:	55                   	push   ebp
c0013478:	57                   	push   edi
c0013479:	e8 06 ff ff ff       	call   c0013384 <CmGetShift(unsigned int*, int*, int, bool*)>
c001347e:	83 c4 10             	add    esp,0x10
c0013481:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0013486:	74 07                	je     c001348f <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c0013488:	46                   	inc    esi
c0013489:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c001348d:	eb e1                	jmp    c0013470 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c001348f:	43                   	inc    ebx
c0013490:	83 fb 12             	cmp    ebx,0x12
c0013493:	75 c2                	jne    c0013457 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c0013495:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0013499:	31 db                	xor    ebx,ebx
c001349b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001349e:	50                   	push   eax
c001349f:	50                   	push   eax
c00134a0:	0f b6 44 1c 20       	movzx  eax,BYTE PTR [esp+ebx*1+0x20]
c00134a5:	43                   	inc    ebx
c00134a6:	8d 04 85 a0 3e 02 c0 	lea    eax,[eax*4-0x3ffdc160]
c00134ad:	50                   	push   eax
c00134ae:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c00134b2:	e8 89 d3 fe ff       	call   c0000840 <strcat>
c00134b7:	83 c4 10             	add    esp,0x10
c00134ba:	83 fb 18             	cmp    ebx,0x18
c00134bd:	75 df                	jne    c001349e <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c00134bf:	83 c4 3c             	add    esp,0x3c
c00134c2:	31 c0                	xor    eax,eax
c00134c4:	5b                   	pop    ebx
c00134c5:	5e                   	pop    esi
c00134c6:	5f                   	pop    edi
c00134c7:	5d                   	pop    ebp
c00134c8:	c3                   	ret    

c00134c9 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c00134c9:	83 ec 40             	sub    esp,0x40
c00134cc:	8d 44 24 09          	lea    eax,[esp+0x9]
c00134d0:	50                   	push   eax
c00134d1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00134d5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00134d9:	e8 3b f9 ff ff       	call   c0012e19 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00134de:	58                   	pop    eax
c00134df:	5a                   	pop    edx
c00134e0:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00134e4:	8d 44 24 15          	lea    eax,[esp+0x15]
c00134e8:	50                   	push   eax
c00134e9:	e8 37 ff ff ff       	call   c0013425 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c00134ee:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c00134f3:	83 c4 4c             	add    esp,0x4c
c00134f6:	c3                   	ret    

c00134f7 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c00134f7:	55                   	push   ebp
c00134f8:	57                   	push   edi
c00134f9:	56                   	push   esi
c00134fa:	53                   	push   ebx
c00134fb:	31 db                	xor    ebx,ebx
c00134fd:	83 ec 70             	sub    esp,0x70
c0013500:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c0013507:	6a 30                	push   0x30
c0013509:	6a 00                	push   0x0
c001350b:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c001350f:	56                   	push   esi
c0013510:	e8 db cf fe ff       	call   c00004f0 <memset>
c0013515:	83 c4 10             	add    esp,0x10
c0013518:	83 ec 0c             	sub    esp,0xc
c001351b:	57                   	push   edi
c001351c:	e8 4f d0 fe ff       	call   c0000570 <strlen>
c0013521:	83 c4 10             	add    esp,0x10
c0013524:	39 d8                	cmp    eax,ebx
c0013526:	76 16                	jbe    c001353e <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c0013528:	83 ec 0c             	sub    esp,0xc
c001352b:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c001352f:	50                   	push   eax
c0013530:	e8 fb d3 fe ff       	call   c0000930 <toupper>
c0013535:	83 c4 10             	add    esp,0x10
c0013538:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c001353b:	43                   	inc    ebx
c001353c:	eb da                	jmp    c0013518 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c001353e:	31 f6                	xor    esi,esi
c0013540:	52                   	push   edx
c0013541:	31 ff                	xor    edi,edi
c0013543:	6a 18                	push   0x18
c0013545:	6a 3f                	push   0x3f
c0013547:	8d 44 24 24          	lea    eax,[esp+0x24]
c001354b:	50                   	push   eax
c001354c:	e8 9f cf fe ff       	call   c00004f0 <memset>
c0013551:	83 c4 10             	add    esp,0x10
c0013554:	8a 44 34 30          	mov    al,BYTE PTR [esp+esi*1+0x30]
c0013558:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c001355c:	84 c0                	test   al,al
c001355e:	0f 84 b0 00 00 00    	je     c0013614 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c0013564:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c0013568:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c001356d:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0013571:	c6 44 24 11 00       	mov    BYTE PTR [esp+0x11],0x0
c0013576:	8d 6e 01             	lea    ebp,[esi+0x1]
c0013579:	83 ec 0c             	sub    esp,0xc
c001357c:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c0013580:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c0013584:	53                   	push   ebx
c0013585:	e8 e6 cf fe ff       	call   c0000570 <strlen>
c001358a:	83 c4 10             	add    esp,0x10
c001358d:	85 c0                	test   eax,eax
c001358f:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0013593:	74 0b                	je     c00135a0 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c0013595:	50                   	push   eax
c0013596:	6a 01                	push   0x1
c0013598:	53                   	push   ebx
c0013599:	8d 44 24 20          	lea    eax,[esp+0x20]
c001359d:	50                   	push   eax
c001359e:	eb 0a                	jmp    c00135aa <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c00135a0:	50                   	push   eax
c00135a1:	6a 00                	push   0x0
c00135a3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00135a7:	50                   	push   eax
c00135a8:	6a 00                	push   0x0
c00135aa:	e8 44 fd ff ff       	call   c00132f3 <CmGetMatch(char*, char*, bool, bool*)>
c00135af:	83 c4 10             	add    esp,0x10
c00135b2:	83 f8 ff             	cmp    eax,0xffffffff
c00135b5:	75 1a                	jne    c00135d1 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c00135b7:	83 ec 0c             	sub    esp,0xc
c00135ba:	68 19 26 02 c0       	push   0xc0022619
c00135bf:	e8 eb e0 ff ff       	call   c00116af <KePanic(char const*)>
c00135c4:	83 c4 10             	add    esp,0x10
c00135c7:	b8 02 00 00 00       	mov    eax,0x2
c00135cc:	e9 bc 00 00 00       	jmp    c001368d <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c00135d1:	83 ff 18             	cmp    edi,0x18
c00135d4:	75 1a                	jne    c00135f0 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c00135d6:	83 ec 0c             	sub    esp,0xc
c00135d9:	68 2e 26 02 c0       	push   0xc002262e
c00135de:	e8 cc e0 ff ff       	call   c00116af <KePanic(char const*)>
c00135e3:	83 c4 10             	add    esp,0x10
c00135e6:	b8 01 00 00 00       	mov    eax,0x1
c00135eb:	e9 9d 00 00 00       	jmp    c001368d <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c00135f0:	47                   	inc    edi
c00135f1:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00135f6:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c00135fa:	74 02                	je     c00135fe <CmConvertToInternalFilename(char const*, unsigned char*)+0x107>
c00135fc:	89 ee                	mov    esi,ebp
c00135fe:	83 ec 0c             	sub    esp,0xc
c0013601:	53                   	push   ebx
c0013602:	e8 69 cf fe ff       	call   c0000570 <strlen>
c0013607:	83 c4 10             	add    esp,0x10
c001360a:	85 c0                	test   eax,eax
c001360c:	74 06                	je     c0013614 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c001360e:	46                   	inc    esi
c001360f:	e9 40 ff ff ff       	jmp    c0013554 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c0013614:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001361c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013624:	31 f6                	xor    esi,esi
c0013626:	50                   	push   eax
c0013627:	31 ff                	xor    edi,edi
c0013629:	6a 12                	push   0x12
c001362b:	68 ee 00 00 00       	push   0xee
c0013630:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0013637:	e8 b4 ce fe ff       	call   c00004f0 <memset>
c001363c:	83 c4 10             	add    esp,0x10
c001363f:	83 fe 17             	cmp    esi,0x17
c0013642:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c0013646:	7e 26                	jle    c001366e <CmConvertToInternalFilename(char const*, unsigned char*)+0x177>
c0013648:	8d 44 24 0f          	lea    eax,[esp+0xf]
c001364c:	50                   	push   eax
c001364d:	6a 08                	push   0x8
c001364f:	55                   	push   ebp
c0013650:	53                   	push   ebx
c0013651:	e8 2e fd ff ff       	call   c0013384 <CmGetShift(unsigned int*, int*, int, bool*)>
c0013656:	83 c4 10             	add    esp,0x10
c0013659:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001365e:	74 26                	je     c0013686 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18f>
c0013660:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c0013667:	4e                   	dec    esi
c0013668:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c001366b:	47                   	inc    edi
c001366c:	eb 1c                	jmp    c001368a <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c001366e:	6a 06                	push   0x6
c0013670:	0f b6 44 34 1c       	movzx  eax,BYTE PTR [esp+esi*1+0x1c]
c0013675:	50                   	push   eax
c0013676:	55                   	push   ebp
c0013677:	53                   	push   ebx
c0013678:	e8 d7 fc ff ff       	call   c0013354 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c001367d:	83 c4 10             	add    esp,0x10
c0013680:	84 c0                	test   al,al
c0013682:	75 06                	jne    c001368a <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c0013684:	eb c2                	jmp    c0013648 <CmConvertToInternalFilename(char const*, unsigned char*)+0x151>
c0013686:	31 c0                	xor    eax,eax
c0013688:	eb 03                	jmp    c001368d <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c001368a:	46                   	inc    esi
c001368b:	eb b2                	jmp    c001363f <CmConvertToInternalFilename(char const*, unsigned char*)+0x148>
c001368d:	83 c4 6c             	add    esp,0x6c
c0013690:	5b                   	pop    ebx
c0013691:	5e                   	pop    esi
c0013692:	5f                   	pop    edi
c0013693:	5d                   	pop    ebp
c0013694:	c3                   	ret    

c0013695 <CmCreateString(Reghive_Tag*, int, char const*)>:
c0013695:	53                   	push   ebx
c0013696:	83 ec 3c             	sub    esp,0x3c
c0013699:	6a 2b                	push   0x2b
c001369b:	6a 00                	push   0x0
c001369d:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c00136a1:	53                   	push   ebx
c00136a2:	e8 49 ce fe ff       	call   c00004f0 <memset>
c00136a7:	58                   	pop    eax
c00136a8:	5a                   	pop    edx
c00136a9:	8d 44 24 11          	lea    eax,[esp+0x11]
c00136ad:	50                   	push   eax
c00136ae:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00136b2:	e8 40 fe ff ff       	call   c00134f7 <CmConvertToInternalFilename(char const*, unsigned char*)>
c00136b7:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c00136bc:	83 c4 0c             	add    esp,0xc
c00136bf:	6a 15                	push   0x15
c00136c1:	6a 00                	push   0x0
c00136c3:	8d 44 24 27          	lea    eax,[esp+0x27]
c00136c7:	50                   	push   eax
c00136c8:	e8 23 ce fe ff       	call   c00004f0 <memset>
c00136cd:	53                   	push   ebx
c00136ce:	6a 00                	push   0x0
c00136d0:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00136d4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00136d8:	e8 e6 f9 ff ff       	call   c00130c3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00136dd:	83 c4 58             	add    esp,0x58
c00136e0:	5b                   	pop    ebx
c00136e1:	c3                   	ret    

c00136e2 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c00136e2:	56                   	push   esi
c00136e3:	53                   	push   ebx
c00136e4:	83 ec 48             	sub    esp,0x48
c00136e7:	6a 12                	push   0x12
c00136e9:	68 ff 00 00 00       	push   0xff
c00136ee:	8d 74 24 0f          	lea    esi,[esp+0xf]
c00136f2:	56                   	push   esi
c00136f3:	e8 f8 cd fe ff       	call   c00004f0 <memset>
c00136f8:	5a                   	pop    edx
c00136f9:	59                   	pop    ecx
c00136fa:	56                   	push   esi
c00136fb:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00136ff:	e8 f3 fd ff ff       	call   c00134f7 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0013704:	83 c4 10             	add    esp,0x10
c0013707:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001370b:	85 db                	test   ebx,ebx
c001370d:	74 42                	je     c0013751 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c001370f:	50                   	push   eax
c0013710:	8d 44 24 19          	lea    eax,[esp+0x19]
c0013714:	50                   	push   eax
c0013715:	53                   	push   ebx
c0013716:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001371a:	e8 fa f6 ff ff       	call   c0012e19 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001371f:	83 c4 0c             	add    esp,0xc
c0013722:	6a 12                	push   0x12
c0013724:	8d 44 24 21          	lea    eax,[esp+0x21]
c0013728:	50                   	push   eax
c0013729:	56                   	push   esi
c001372a:	e8 51 cc fe ff       	call   c0000380 <memcmp>
c001372f:	83 c4 10             	add    esp,0x10
c0013732:	85 c0                	test   eax,eax
c0013734:	74 1e                	je     c0013754 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c0013736:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001373b:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c0013740:	c1 e3 08             	shl    ebx,0x8
c0013743:	09 d8                	or     eax,ebx
c0013745:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c001374a:	c1 e3 10             	shl    ebx,0x10
c001374d:	09 c3                	or     ebx,eax
c001374f:	eb ba                	jmp    c001370b <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c0013751:	83 cb ff             	or     ebx,0xffffffff
c0013754:	89 d8                	mov    eax,ebx
c0013756:	83 c4 44             	add    esp,0x44
c0013759:	5b                   	pop    ebx
c001375a:	5e                   	pop    esi
c001375b:	c3                   	ret    

c001375c <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c001375c:	57                   	push   edi
c001375d:	56                   	push   esi
c001375e:	53                   	push   ebx
c001375f:	83 ec 34             	sub    esp,0x34
c0013762:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0013766:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001376a:	6a 2b                	push   0x2b
c001376c:	6a 00                	push   0x0
c001376e:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0013772:	53                   	push   ebx
c0013773:	e8 78 cd fe ff       	call   c00004f0 <memset>
c0013778:	58                   	pop    eax
c0013779:	5a                   	pop    edx
c001377a:	8d 44 24 11          	lea    eax,[esp+0x11]
c001377e:	50                   	push   eax
c001377f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0013783:	e8 6f fd ff ff       	call   c00134f7 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0013788:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001378c:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c0013790:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c0013794:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0013798:	53                   	push   ebx
c0013799:	6a 00                	push   0x0
c001379b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001379f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00137a3:	e8 1b f9 ff ff       	call   c00130c3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00137a8:	83 c4 50             	add    esp,0x50
c00137ab:	5b                   	pop    ebx
c00137ac:	5e                   	pop    esi
c00137ad:	5f                   	pop    edi
c00137ae:	c3                   	ret    

c00137af <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c00137af:	55                   	push   ebp
c00137b0:	57                   	push   edi
c00137b1:	56                   	push   esi
c00137b2:	53                   	push   ebx
c00137b3:	83 ec 40             	sub    esp,0x40
c00137b6:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c00137ba:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00137be:	6a 2b                	push   0x2b
c00137c0:	6a 00                	push   0x0
c00137c2:	8d 74 24 11          	lea    esi,[esp+0x11]
c00137c6:	56                   	push   esi
c00137c7:	e8 24 cd fe ff       	call   c00004f0 <memset>
c00137cc:	5f                   	pop    edi
c00137cd:	89 ef                	mov    edi,ebp
c00137cf:	58                   	pop    eax
c00137d0:	8d 44 24 11          	lea    eax,[esp+0x11]
c00137d4:	50                   	push   eax
c00137d5:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00137d9:	e8 19 fd ff ff       	call   c00134f7 <CmConvertToInternalFilename(char const*, unsigned char*)>
c00137de:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c00137e3:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c00137e8:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c00137ed:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c00137f2:	83 c4 10             	add    esp,0x10
c00137f5:	85 ed                	test   ebp,ebp
c00137f7:	74 14                	je     c001380d <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c00137f9:	51                   	push   ecx
c00137fa:	51                   	push   ecx
c00137fb:	57                   	push   edi
c00137fc:	53                   	push   ebx
c00137fd:	e8 09 f7 ff ff       	call   c0012f0b <CmGetNext(Reghive_Tag*, int)>
c0013802:	83 c4 10             	add    esp,0x10
c0013805:	85 c0                	test   eax,eax
c0013807:	74 04                	je     c001380d <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0013809:	89 c7                	mov    edi,eax
c001380b:	eb e8                	jmp    c00137f5 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c001380d:	56                   	push   esi
c001380e:	6a 00                	push   0x0
c0013810:	57                   	push   edi
c0013811:	53                   	push   ebx
c0013812:	e8 ac f8 ff ff       	call   c00130c3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0013817:	83 c4 0c             	add    esp,0xc
c001381a:	89 c7                	mov    edi,eax
c001381c:	56                   	push   esi
c001381d:	50                   	push   eax
c001381e:	53                   	push   ebx
c001381f:	e8 f5 f5 ff ff       	call   c0012e19 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013824:	58                   	pop    eax
c0013825:	5a                   	pop    edx
c0013826:	6a 6c                	push   0x6c
c0013828:	6a 00                	push   0x0
c001382a:	6a 00                	push   0x0
c001382c:	68 3f 26 02 c0       	push   0xc002263f
c0013831:	57                   	push   edi
c0013832:	53                   	push   ebx
c0013833:	e8 24 ff ff ff       	call   c001375c <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c0013838:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c001383c:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c0013840:	c1 e8 10             	shr    eax,0x10
c0013843:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0013847:	83 c4 1c             	add    esp,0x1c
c001384a:	56                   	push   esi
c001384b:	57                   	push   edi
c001384c:	53                   	push   ebx
c001384d:	e8 eb f6 ff ff       	call   c0012f3d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0013852:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c0013857:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001385c:	c1 e0 08             	shl    eax,0x8
c001385f:	09 c2                	or     edx,eax
c0013861:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0013866:	83 c4 4c             	add    esp,0x4c
c0013869:	c1 e0 10             	shl    eax,0x10
c001386c:	5b                   	pop    ebx
c001386d:	09 d0                	or     eax,edx
c001386f:	5e                   	pop    esi
c0013870:	5f                   	pop    edi
c0013871:	5d                   	pop    ebp
c0013872:	c3                   	ret    

c0013873 <zStrtok(char*, char const*)>:
c0013873:	55                   	push   ebp
c0013874:	57                   	push   edi
c0013875:	56                   	push   esi
c0013876:	53                   	push   ebx
c0013877:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001387b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001387f:	85 db                	test   ebx,ebx
c0013881:	74 2f                	je     c00138b2 <zStrtok(char*, char const*)+0x3f>
c0013883:	85 c0                	test   eax,eax
c0013885:	75 09                	jne    c0013890 <zStrtok(char*, char const*)+0x1d>
c0013887:	a1 f0 be 02 c0       	mov    eax,ds:0xc002bef0
c001388c:	85 c0                	test   eax,eax
c001388e:	74 50                	je     c00138e0 <zStrtok(char*, char const*)+0x6d>
c0013890:	31 c9                	xor    ecx,ecx
c0013892:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c0013896:	74 03                	je     c001389b <zStrtok(char*, char const*)+0x28>
c0013898:	41                   	inc    ecx
c0013899:	eb f7                	jmp    c0013892 <zStrtok(char*, char const*)+0x1f>
c001389b:	31 d2                	xor    edx,edx
c001389d:	39 ca                	cmp    edx,ecx
c001389f:	74 15                	je     c00138b6 <zStrtok(char*, char const*)+0x43>
c00138a1:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c00138a5:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00138a8:	8d 3c 10             	lea    edi,[eax+edx*1]
c00138ab:	39 ee                	cmp    esi,ebp
c00138ad:	74 13                	je     c00138c2 <zStrtok(char*, char const*)+0x4f>
c00138af:	42                   	inc    edx
c00138b0:	eb eb                	jmp    c001389d <zStrtok(char*, char const*)+0x2a>
c00138b2:	31 c0                	xor    eax,eax
c00138b4:	eb 2a                	jmp    c00138e0 <zStrtok(char*, char const*)+0x6d>
c00138b6:	c7 05 f0 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bef0,0x0
c00138c0:	eb 1e                	jmp    c00138e0 <zStrtok(char*, char const*)+0x6d>
c00138c2:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00138c5:	39 ce                	cmp    esi,ecx
c00138c7:	75 0a                	jne    c00138d3 <zStrtok(char*, char const*)+0x60>
c00138c9:	40                   	inc    eax
c00138ca:	a3 f0 be 02 c0       	mov    ds:0xc002bef0,eax
c00138cf:	89 d8                	mov    eax,ebx
c00138d1:	eb 0d                	jmp    c00138e0 <zStrtok(char*, char const*)+0x6d>
c00138d3:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c00138d7:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00138da:	89 15 f0 be 02 c0    	mov    DWORD PTR ds:0xc002bef0,edx
c00138e0:	5b                   	pop    ebx
c00138e1:	5e                   	pop    esi
c00138e2:	5f                   	pop    edi
c00138e3:	5d                   	pop    ebp
c00138e4:	c3                   	ret    

c00138e5 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c00138e5:	57                   	push   edi
c00138e6:	56                   	push   esi
c00138e7:	53                   	push   ebx
c00138e8:	81 ec 08 01 00 00    	sub    esp,0x108
c00138ee:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c00138f5:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c00138fc:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0013900:	53                   	push   ebx
c0013901:	e8 3a cd fe ff       	call   c0000640 <strcpy>
c0013906:	59                   	pop    ecx
c0013907:	5e                   	pop    esi
c0013908:	68 a3 29 02 c0       	push   0xc00229a3
c001390d:	53                   	push   ebx
c001390e:	bb 01 00 00 00       	mov    ebx,0x1
c0013913:	e8 5b ff ff ff       	call   c0013873 <zStrtok(char*, char const*)>
c0013918:	83 c4 10             	add    esp,0x10
c001391b:	85 c0                	test   eax,eax
c001391d:	74 3b                	je     c001395a <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c001391f:	52                   	push   edx
c0013920:	50                   	push   eax
c0013921:	6a 01                	push   0x1
c0013923:	57                   	push   edi
c0013924:	e8 b9 fd ff ff       	call   c00136e2 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c0013929:	59                   	pop    ecx
c001392a:	89 c3                	mov    ebx,eax
c001392c:	5e                   	pop    esi
c001392d:	68 a3 29 02 c0       	push   0xc00229a3
c0013932:	6a 00                	push   0x0
c0013934:	e8 3a ff ff ff       	call   c0013873 <zStrtok(char*, char const*)>
c0013939:	83 c4 10             	add    esp,0x10
c001393c:	89 c6                	mov    esi,eax
c001393e:	85 c0                	test   eax,eax
c0013940:	74 18                	je     c001395a <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0013942:	52                   	push   edx
c0013943:	52                   	push   edx
c0013944:	53                   	push   ebx
c0013945:	57                   	push   edi
c0013946:	e8 81 f5 ff ff       	call   c0012ecc <CmEnterDirectory(Reghive_Tag*, int)>
c001394b:	83 c4 10             	add    esp,0x10
c001394e:	89 c3                	mov    ebx,eax
c0013950:	83 f8 ff             	cmp    eax,0xffffffff
c0013953:	74 05                	je     c001395a <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0013955:	50                   	push   eax
c0013956:	56                   	push   esi
c0013957:	53                   	push   ebx
c0013958:	eb c9                	jmp    c0013923 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c001395a:	81 c4 00 01 00 00    	add    esp,0x100
c0013960:	89 d8                	mov    eax,ebx
c0013962:	5b                   	pop    ebx
c0013963:	5e                   	pop    esi
c0013964:	5f                   	pop    edi
c0013965:	c3                   	ret    

c0013966 <CmDisplayTree(Reghive_Tag*, int, int)>:
c0013966:	55                   	push   ebp
c0013967:	57                   	push   edi
c0013968:	56                   	push   esi
c0013969:	53                   	push   ebx
c001396a:	83 ec 5c             	sub    esp,0x5c
c001396d:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c0013971:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0013975:	85 db                	test   ebx,ebx
c0013977:	0f 8e 84 00 00 00    	jle    c0013a01 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c001397d:	31 ed                	xor    ebp,ebp
c001397f:	57                   	push   edi
c0013980:	6a 32                	push   0x32
c0013982:	6a 00                	push   0x0
c0013984:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c0013988:	57                   	push   edi
c0013989:	e8 62 cb fe ff       	call   c00004f0 <memset>
c001398e:	83 c4 0c             	add    esp,0xc
c0013991:	57                   	push   edi
c0013992:	53                   	push   ebx
c0013993:	56                   	push   esi
c0013994:	e8 30 fb ff ff       	call   c00134c9 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013999:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001399d:	83 c4 10             	add    esp,0x10
c00139a0:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c00139a4:	7d 13                	jge    c00139b9 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c00139a6:	83 ec 0c             	sub    esp,0xc
c00139a9:	45                   	inc    ebp
c00139aa:	68 47 2d 02 c0       	push   0xc0022d47
c00139af:	e8 91 6f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00139b4:	83 c4 10             	add    esp,0x10
c00139b7:	eb e7                	jmp    c00139a0 <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c00139b9:	51                   	push   ecx
c00139ba:	57                   	push   edi
c00139bb:	53                   	push   ebx
c00139bc:	68 45 26 02 c0       	push   0xc0022645
c00139c1:	e8 7f 6f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00139c6:	83 c4 10             	add    esp,0x10
c00139c9:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c00139ce:	75 1e                	jne    c00139ee <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c00139d0:	52                   	push   edx
c00139d1:	52                   	push   edx
c00139d2:	53                   	push   ebx
c00139d3:	56                   	push   esi
c00139d4:	e8 f3 f4 ff ff       	call   c0012ecc <CmEnterDirectory(Reghive_Tag*, int)>
c00139d9:	83 c4 0c             	add    esp,0xc
c00139dc:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c00139e0:	8d 51 04             	lea    edx,[ecx+0x4]
c00139e3:	52                   	push   edx
c00139e4:	50                   	push   eax
c00139e5:	56                   	push   esi
c00139e6:	e8 7b ff ff ff       	call   c0013966 <CmDisplayTree(Reghive_Tag*, int, int)>
c00139eb:	83 c4 10             	add    esp,0x10
c00139ee:	50                   	push   eax
c00139ef:	50                   	push   eax
c00139f0:	53                   	push   ebx
c00139f1:	56                   	push   esi
c00139f2:	e8 14 f5 ff ff       	call   c0012f0b <CmGetNext(Reghive_Tag*, int)>
c00139f7:	83 c4 10             	add    esp,0x10
c00139fa:	89 c3                	mov    ebx,eax
c00139fc:	e9 74 ff ff ff       	jmp    c0013975 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c0013a01:	83 c4 5c             	add    esp,0x5c
c0013a04:	5b                   	pop    ebx
c0013a05:	5e                   	pop    esi
c0013a06:	5f                   	pop    edi
c0013a07:	5d                   	pop    ebp
c0013a08:	c3                   	ret    

c0013a09 <CmSplitFinalSlashInPlace(char*)>:
c0013a09:	53                   	push   ebx
c0013a0a:	83 ec 14             	sub    esp,0x14
c0013a0d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013a11:	53                   	push   ebx
c0013a12:	e8 59 cb fe ff       	call   c0000570 <strlen>
c0013a17:	83 c4 10             	add    esp,0x10
c0013a1a:	48                   	dec    eax
c0013a1b:	85 c0                	test   eax,eax
c0013a1d:	74 15                	je     c0013a34 <CmSplitFinalSlashInPlace(char*)+0x2b>
c0013a1f:	8d 14 03             	lea    edx,[ebx+eax*1]
c0013a22:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0013a26:	75 09                	jne    c0013a31 <CmSplitFinalSlashInPlace(char*)+0x28>
c0013a28:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0013a2b:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0013a2f:	eb 05                	jmp    c0013a36 <CmSplitFinalSlashInPlace(char*)+0x2d>
c0013a31:	48                   	dec    eax
c0013a32:	eb e7                	jmp    c0013a1b <CmSplitFinalSlashInPlace(char*)+0x12>
c0013a34:	31 c0                	xor    eax,eax
c0013a36:	83 c4 08             	add    esp,0x8
c0013a39:	5b                   	pop    ebx
c0013a3a:	c3                   	ret    

c0013a3b <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0013a3b:	55                   	push   ebp
c0013a3c:	57                   	push   edi
c0013a3d:	56                   	push   esi
c0013a3e:	53                   	push   ebx
c0013a3f:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0013a45:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c0013a4c:	8a 13                	mov    dl,BYTE PTR [ebx]
c0013a4e:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013a51:	80 fa 40             	cmp    dl,0x40
c0013a54:	75 1c                	jne    c0013a72 <Reg::findLineFromLoadedData(char*, char*, char*)+0x37>
c0013a56:	0f be 0b             	movsx  ecx,BYTE PTR [ebx]
c0013a59:	85 c9                	test   ecx,ecx
c0013a5b:	0f 84 09 01 00 00    	je     c0013b6a <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0013a61:	8d 43 01             	lea    eax,[ebx+0x1]
c0013a64:	83 f9 3a             	cmp    ecx,0x3a
c0013a67:	74 04                	je     c0013a6d <Reg::findLineFromLoadedData(char*, char*, char*)+0x32>
c0013a69:	89 c3                	mov    ebx,eax
c0013a6b:	eb e9                	jmp    c0013a56 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0013a6d:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0013a70:	89 c3                	mov    ebx,eax
c0013a72:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0013a76:	50                   	push   eax
c0013a77:	6a 40                	push   0x40
c0013a79:	6a 00                	push   0x0
c0013a7b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0013a7f:	50                   	push   eax
c0013a80:	e8 6b ca fe ff       	call   c00004f0 <memset>
c0013a85:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0013a8c:	31 c0                	xor    eax,eax
c0013a8e:	83 c4 10             	add    esp,0x10
c0013a91:	0f be 74 24 0c       	movsx  esi,BYTE PTR [esp+0xc]
c0013a96:	0f be 17             	movsx  edx,BYTE PTR [edi]
c0013a99:	89 d1                	mov    ecx,edx
c0013a9b:	85 d2                	test   edx,edx
c0013a9d:	0f 84 c7 00 00 00    	je     c0013b6a <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0013aa3:	3d c7 00 00 00       	cmp    eax,0xc7
c0013aa8:	0f 8f bc 00 00 00    	jg     c0013b6a <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0013aae:	83 fa 0a             	cmp    edx,0xa
c0013ab1:	0f 85 a4 00 00 00    	jne    c0013b5b <Reg::findLineFromLoadedData(char*, char*, char*)+0x120>
c0013ab7:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0013abc:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c0013ac1:	89 c8                	mov    eax,ecx
c0013ac3:	a8 df                	test   al,0xdf
c0013ac5:	0f 94 c2             	sete   dl
c0013ac8:	83 f9 23             	cmp    ecx,0x23
c0013acb:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0013ad0:	0b 54 24 0c          	or     edx,DWORD PTR [esp+0xc]
c0013ad4:	80 e2 01             	and    dl,0x1
c0013ad7:	75 4a                	jne    c0013b23 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013ad9:	83 e8 09             	sub    eax,0x9
c0013adc:	3c 01                	cmp    al,0x1
c0013ade:	76 43                	jbe    c0013b23 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013ae0:	83 f9 5b             	cmp    ecx,0x5b
c0013ae3:	75 42                	jne    c0013b27 <Reg::findLineFromLoadedData(char*, char*, char*)+0xec>
c0013ae5:	83 fe 40             	cmp    esi,0x40
c0013ae8:	75 39                	jne    c0013b23 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013aea:	83 ec 0c             	sub    esp,0xc
c0013aed:	8d 54 24 65          	lea    edx,[esp+0x65]
c0013af1:	52                   	push   edx
c0013af2:	e8 79 ca fe ff       	call   c0000570 <strlen>
c0013af7:	83 c4 10             	add    esp,0x10
c0013afa:	83 f8 3f             	cmp    eax,0x3f
c0013afd:	77 6b                	ja     c0013b6a <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0013aff:	50                   	push   eax
c0013b00:	50                   	push   eax
c0013b01:	8d 54 24 61          	lea    edx,[esp+0x61]
c0013b05:	52                   	push   edx
c0013b06:	8d 54 24 24          	lea    edx,[esp+0x24]
c0013b0a:	52                   	push   edx
c0013b0b:	e8 30 cb fe ff       	call   c0000640 <strcpy>
c0013b10:	58                   	pop    eax
c0013b11:	8d 54 24 24          	lea    edx,[esp+0x24]
c0013b15:	52                   	push   edx
c0013b16:	e8 55 ca fe ff       	call   c0000570 <strlen>
c0013b1b:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0013b20:	83 c4 10             	add    esp,0x10
c0013b23:	31 d2                	xor    edx,edx
c0013b25:	eb 3b                	jmp    c0013b62 <Reg::findLineFromLoadedData(char*, char*, char*)+0x127>
c0013b27:	83 fe 40             	cmp    esi,0x40
c0013b2a:	74 06                	je     c0013b32 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf7>
c0013b2c:	8d 44 24 58          	lea    eax,[esp+0x58]
c0013b30:	eb 20                	jmp    c0013b52 <Reg::findLineFromLoadedData(char*, char*, char*)+0x117>
c0013b32:	50                   	push   eax
c0013b33:	50                   	push   eax
c0013b34:	55                   	push   ebp
c0013b35:	8d 44 24 24          	lea    eax,[esp+0x24]
c0013b39:	50                   	push   eax
c0013b3a:	e8 11 cc fe ff       	call   c0000750 <strcmp>
c0013b3f:	83 c4 10             	add    esp,0x10
c0013b42:	85 c0                	test   eax,eax
c0013b44:	75 dd                	jne    c0013b23 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013b46:	eb e4                	jmp    c0013b2c <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c0013b48:	8d 50 01             	lea    edx,[eax+0x1]
c0013b4b:	83 f9 3d             	cmp    ecx,0x3d
c0013b4e:	74 1e                	je     c0013b6e <Reg::findLineFromLoadedData(char*, char*, char*)+0x133>
c0013b50:	89 d0                	mov    eax,edx
c0013b52:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0013b55:	85 c9                	test   ecx,ecx
c0013b57:	75 ef                	jne    c0013b48 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10d>
c0013b59:	eb 0f                	jmp    c0013b6a <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0013b5b:	8d 50 01             	lea    edx,[eax+0x1]
c0013b5e:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0013b62:	47                   	inc    edi
c0013b63:	89 d0                	mov    eax,edx
c0013b65:	e9 2c ff ff ff       	jmp    c0013a96 <Reg::findLineFromLoadedData(char*, char*, char*)+0x5b>
c0013b6a:	31 c0                	xor    eax,eax
c0013b6c:	eb 33                	jmp    c0013ba1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x166>
c0013b6e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013b72:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0013b75:	50                   	push   eax
c0013b76:	50                   	push   eax
c0013b77:	8d 44 24 60          	lea    eax,[esp+0x60]
c0013b7b:	50                   	push   eax
c0013b7c:	53                   	push   ebx
c0013b7d:	e8 ce cb fe ff       	call   c0000750 <strcmp>
c0013b82:	83 c4 10             	add    esp,0x10
c0013b85:	85 c0                	test   eax,eax
c0013b87:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013b8b:	75 96                	jne    c0013b23 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013b8d:	51                   	push   ecx
c0013b8e:	51                   	push   ecx
c0013b8f:	52                   	push   edx
c0013b90:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0013b97:	e8 a4 ca fe ff       	call   c0000640 <strcpy>
c0013b9c:	83 c4 10             	add    esp,0x10
c0013b9f:	b0 01                	mov    al,0x1
c0013ba1:	81 c4 2c 01 00 00    	add    esp,0x12c
c0013ba7:	5b                   	pop    ebx
c0013ba8:	5e                   	pop    esi
c0013ba9:	5f                   	pop    edi
c0013baa:	5d                   	pop    ebp
c0013bab:	c3                   	ret    

c0013bac <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0013bac:	57                   	push   edi
c0013bad:	56                   	push   esi
c0013bae:	53                   	push   ebx
c0013baf:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0013bb5:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0013bbc:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0013bc3:	53                   	push   ebx
c0013bc4:	e8 a7 c9 fe ff       	call   c0000570 <strlen>
c0013bc9:	89 34 24             	mov    DWORD PTR [esp],esi
c0013bcc:	89 c7                	mov    edi,eax
c0013bce:	e8 9d c9 fe ff       	call   c0000570 <strlen>
c0013bd3:	83 c4 10             	add    esp,0x10
c0013bd6:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0013bda:	3d ff 00 00 00       	cmp    eax,0xff
c0013bdf:	0f 87 d3 00 00 00    	ja     c0013cb8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0013be5:	57                   	push   edi
c0013be6:	57                   	push   edi
c0013be7:	56                   	push   esi
c0013be8:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0013bec:	56                   	push   esi
c0013bed:	e8 4e ca fe ff       	call   c0000640 <strcpy>
c0013bf2:	58                   	pop    eax
c0013bf3:	5a                   	pop    edx
c0013bf4:	68 a3 29 02 c0       	push   0xc00229a3
c0013bf9:	56                   	push   esi
c0013bfa:	e8 41 cc fe ff       	call   c0000840 <strcat>
c0013bff:	59                   	pop    ecx
c0013c00:	5f                   	pop    edi
c0013c01:	53                   	push   ebx
c0013c02:	56                   	push   esi
c0013c03:	e8 38 cc fe ff       	call   c0000840 <strcat>
c0013c08:	58                   	pop    eax
c0013c09:	5a                   	pop    edx
c0013c0a:	68 4f 26 02 c0       	push   0xc002264f
c0013c0f:	56                   	push   esi
c0013c10:	e8 2b cc fe ff       	call   c0000840 <strcat>
c0013c15:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0013c1c:	e8 95 3e ff ff       	call   c0007ab6 <malloc>
c0013c21:	83 c4 0c             	add    esp,0xc
c0013c24:	89 c3                	mov    ebx,eax
c0013c26:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0013c2c:	56                   	push   esi
c0013c2d:	50                   	push   eax
c0013c2e:	e8 a9 7f ff ff       	call   c000bbdc <File::File(char const*, Process*)>
c0013c33:	83 c4 10             	add    esp,0x10
c0013c36:	85 db                	test   ebx,ebx
c0013c38:	74 7e                	je     c0013cb8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0013c3a:	51                   	push   ecx
c0013c3b:	51                   	push   ecx
c0013c3c:	6a 01                	push   0x1
c0013c3e:	53                   	push   ebx
c0013c3f:	e8 b6 7f ff ff       	call   c000bbfa <File::open(FileOpenMode)>
c0013c44:	83 c4 10             	add    esp,0x10
c0013c47:	85 c0                	test   eax,eax
c0013c49:	74 08                	je     c0013c53 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0013c4b:	83 ec 0c             	sub    esp,0xc
c0013c4e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c50:	53                   	push   ebx
c0013c51:	eb 5f                	jmp    c0013cb2 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0013c53:	52                   	push   edx
c0013c54:	8d 44 24 17          	lea    eax,[esp+0x17]
c0013c58:	50                   	push   eax
c0013c59:	8d 44 24 20          	lea    eax,[esp+0x20]
c0013c5d:	50                   	push   eax
c0013c5e:	53                   	push   ebx
c0013c5f:	e8 98 82 ff ff       	call   c000befc <File::stat(unsigned long long*, bool*)>
c0013c64:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013c68:	83 c4 10             	add    esp,0x10
c0013c6b:	89 c1                	mov    ecx,eax
c0013c6d:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0013c71:	74 31                	je     c0013ca4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0013c73:	83 ec 0c             	sub    esp,0xc
c0013c76:	50                   	push   eax
c0013c77:	e8 3a 3e ff ff       	call   c0007ab6 <malloc>
c0013c7c:	89 c6                	mov    esi,eax
c0013c7e:	58                   	pop    eax
c0013c7f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c81:	8d 54 24 20          	lea    edx,[esp+0x20]
c0013c85:	52                   	push   edx
c0013c86:	56                   	push   esi
c0013c87:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013c8b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013c8f:	53                   	push   ebx
c0013c90:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013c93:	83 c4 20             	add    esp,0x20
c0013c96:	85 c0                	test   eax,eax
c0013c98:	75 0a                	jne    c0013ca4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0013c9a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013c9e:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0013ca2:	74 18                	je     c0013cbc <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0013ca4:	83 ec 0c             	sub    esp,0xc
c0013ca7:	53                   	push   ebx
c0013ca8:	e8 ab 7f ff ff       	call   c000bc58 <File::close()>
c0013cad:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013caf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013cb2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013cb5:	83 c4 10             	add    esp,0x10
c0013cb8:	31 c0                	xor    eax,eax
c0013cba:	eb 3b                	jmp    c0013cf7 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0013cbc:	83 ec 0c             	sub    esp,0xc
c0013cbf:	53                   	push   ebx
c0013cc0:	e8 93 7f ff ff       	call   c000bc58 <File::close()>
c0013cc5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013cc7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013cca:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013ccd:	83 c4 0c             	add    esp,0xc
c0013cd0:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0013cd7:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0013cde:	56                   	push   esi
c0013cdf:	e8 57 fd ff ff       	call   c0013a3b <Reg::findLineFromLoadedData(char*, char*, char*)>
c0013ce4:	89 34 24             	mov    DWORD PTR [esp],esi
c0013ce7:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0013ceb:	e8 d6 3d ff ff       	call   c0007ac6 <free>
c0013cf0:	83 c4 10             	add    esp,0x10
c0013cf3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013cf7:	81 c4 20 01 00 00    	add    esp,0x120
c0013cfd:	5b                   	pop    ebx
c0013cfe:	5e                   	pop    esi
c0013cff:	5f                   	pop    edi
c0013d00:	c3                   	ret    

c0013d01 <Reg::getLine(char*, char*, char*)>:
c0013d01:	57                   	push   edi
c0013d02:	56                   	push   esi
c0013d03:	53                   	push   ebx
c0013d04:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013d08:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013d0c:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013d10:	57                   	push   edi
c0013d11:	56                   	push   esi
c0013d12:	53                   	push   ebx
c0013d13:	68 54 26 02 c0       	push   0xc0022654
c0013d18:	e8 8f fe ff ff       	call   c0013bac <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013d1d:	83 c4 10             	add    esp,0x10
c0013d20:	84 c0                	test   al,al
c0013d22:	75 10                	jne    c0013d34 <Reg::getLine(char*, char*, char*)+0x33>
c0013d24:	57                   	push   edi
c0013d25:	56                   	push   esi
c0013d26:	53                   	push   ebx
c0013d27:	68 79 26 02 c0       	push   0xc0022679
c0013d2c:	e8 7b fe ff ff       	call   c0013bac <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013d31:	83 c4 10             	add    esp,0x10
c0013d34:	5b                   	pop    ebx
c0013d35:	5e                   	pop    esi
c0013d36:	5f                   	pop    edi
c0013d37:	c3                   	ret    

c0013d38 <Reg::readInt(char*, char*, int*)>:
c0013d38:	55                   	push   ebp
c0013d39:	57                   	push   edi
c0013d3a:	56                   	push   esi
c0013d3b:	53                   	push   ebx
c0013d3c:	81 ec f0 00 00 00    	sub    esp,0xf0
c0013d42:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0013d46:	55                   	push   ebp
c0013d47:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013d4e:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013d55:	e8 a7 ff ff ff       	call   c0013d01 <Reg::getLine(char*, char*, char*)>
c0013d5a:	83 c4 10             	add    esp,0x10
c0013d5d:	84 c0                	test   al,al
c0013d5f:	0f 84 b6 00 00 00    	je     c0013e1b <Reg::readInt(char*, char*, int*)+0xe3>
c0013d65:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c0013d6a:	83 fa 2b             	cmp    edx,0x2b
c0013d6d:	74 0c                	je     c0013d7b <Reg::readInt(char*, char*, int*)+0x43>
c0013d6f:	83 fa 2d             	cmp    edx,0x2d
c0013d72:	75 0e                	jne    c0013d82 <Reg::readInt(char*, char*, int*)+0x4a>
c0013d74:	ba 01 00 00 00       	mov    edx,0x1
c0013d79:	eb 0b                	jmp    c0013d86 <Reg::readInt(char*, char*, int*)+0x4e>
c0013d7b:	ba 01 00 00 00       	mov    edx,0x1
c0013d80:	eb 02                	jmp    c0013d84 <Reg::readInt(char*, char*, int*)+0x4c>
c0013d82:	31 d2                	xor    edx,edx
c0013d84:	31 c0                	xor    eax,eax
c0013d86:	be 0a 00 00 00       	mov    esi,0xa
c0013d8b:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0013d90:	75 21                	jne    c0013db3 <Reg::readInt(char*, char*, int*)+0x7b>
c0013d92:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c0013d97:	83 f9 78             	cmp    ecx,0x78
c0013d9a:	75 0a                	jne    c0013da6 <Reg::readInt(char*, char*, int*)+0x6e>
c0013d9c:	83 c2 02             	add    edx,0x2
c0013d9f:	be 10 00 00 00       	mov    esi,0x10
c0013da4:	eb 0d                	jmp    c0013db3 <Reg::readInt(char*, char*, int*)+0x7b>
c0013da6:	83 f9 62             	cmp    ecx,0x62
c0013da9:	75 08                	jne    c0013db3 <Reg::readInt(char*, char*, int*)+0x7b>
c0013dab:	83 c2 02             	add    edx,0x2
c0013dae:	be 02 00 00 00       	mov    esi,0x2
c0013db3:	01 d5                	add    ebp,edx
c0013db5:	31 d2                	xor    edx,edx
c0013db7:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c0013dbb:	83 f9 0d             	cmp    ecx,0xd
c0013dbe:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013dc2:	0f 94 c3             	sete   bl
c0013dc5:	85 c9                	test   ecx,ecx
c0013dc7:	89 df                	mov    edi,ebx
c0013dc9:	0f 94 c3             	sete   bl
c0013dcc:	09 df                	or     edi,ebx
c0013dce:	89 fb                	mov    ebx,edi
c0013dd0:	83 e7 01             	and    edi,0x1
c0013dd3:	75 35                	jne    c0013e0a <Reg::readInt(char*, char*, int*)+0xd2>
c0013dd5:	0f af d6             	imul   edx,esi
c0013dd8:	83 fe 10             	cmp    esi,0x10
c0013ddb:	75 26                	jne    c0013e03 <Reg::readInt(char*, char*, int*)+0xcb>
c0013ddd:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013de1:	83 ef 41             	sub    edi,0x41
c0013de4:	89 fb                	mov    ebx,edi
c0013de6:	80 fb 05             	cmp    bl,0x5
c0013de9:	77 06                	ja     c0013df1 <Reg::readInt(char*, char*, int*)+0xb9>
c0013deb:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c0013def:	eb 16                	jmp    c0013e07 <Reg::readInt(char*, char*, int*)+0xcf>
c0013df1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013df5:	83 eb 61             	sub    ebx,0x61
c0013df8:	80 fb 05             	cmp    bl,0x5
c0013dfb:	77 06                	ja     c0013e03 <Reg::readInt(char*, char*, int*)+0xcb>
c0013dfd:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c0013e01:	eb 04                	jmp    c0013e07 <Reg::readInt(char*, char*, int*)+0xcf>
c0013e03:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c0013e07:	45                   	inc    ebp
c0013e08:	eb ad                	jmp    c0013db7 <Reg::readInt(char*, char*, int*)+0x7f>
c0013e0a:	84 c0                	test   al,al
c0013e0c:	74 02                	je     c0013e10 <Reg::readInt(char*, char*, int*)+0xd8>
c0013e0e:	f7 da                	neg    edx
c0013e10:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0013e17:	89 10                	mov    DWORD PTR [eax],edx
c0013e19:	88 d8                	mov    al,bl
c0013e1b:	81 c4 ec 00 00 00    	add    esp,0xec
c0013e21:	5b                   	pop    ebx
c0013e22:	5e                   	pop    esi
c0013e23:	5f                   	pop    edi
c0013e24:	5d                   	pop    ebp
c0013e25:	c3                   	ret    

c0013e26 <Reg::readString(char*, char*, char*, int)>:
c0013e26:	57                   	push   edi
c0013e27:	56                   	push   esi
c0013e28:	53                   	push   ebx
c0013e29:	81 ec d4 00 00 00    	sub    esp,0xd4
c0013e2f:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0013e36:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0013e3a:	57                   	push   edi
c0013e3b:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013e42:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013e49:	e8 b3 fe ff ff       	call   c0013d01 <Reg::getLine(char*, char*, char*)>
c0013e4e:	83 c4 10             	add    esp,0x10
c0013e51:	89 c6                	mov    esi,eax
c0013e53:	84 c0                	test   al,al
c0013e55:	74 44                	je     c0013e9b <Reg::readString(char*, char*, char*, int)+0x75>
c0013e57:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0013e5e:	31 c0                	xor    eax,eax
c0013e60:	4a                   	dec    edx
c0013e61:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0013e64:	84 c9                	test   cl,cl
c0013e66:	74 0f                	je     c0013e77 <Reg::readString(char*, char*, char*, int)+0x51>
c0013e68:	39 c2                	cmp    edx,eax
c0013e6a:	7e 0b                	jle    c0013e77 <Reg::readString(char*, char*, char*, int)+0x51>
c0013e6c:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0013e6f:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0013e74:	40                   	inc    eax
c0013e75:	eb ea                	jmp    c0013e61 <Reg::readString(char*, char*, char*, int)+0x3b>
c0013e77:	83 ec 0c             	sub    esp,0xc
c0013e7a:	53                   	push   ebx
c0013e7b:	e8 f0 c6 fe ff       	call   c0000570 <strlen>
c0013e80:	83 c4 10             	add    esp,0x10
c0013e83:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0013e88:	75 11                	jne    c0013e9b <Reg::readString(char*, char*, char*, int)+0x75>
c0013e8a:	83 ec 0c             	sub    esp,0xc
c0013e8d:	53                   	push   ebx
c0013e8e:	e8 dd c6 fe ff       	call   c0000570 <strlen>
c0013e93:	83 c4 10             	add    esp,0x10
c0013e96:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0013e9b:	81 c4 d0 00 00 00    	add    esp,0xd0
c0013ea1:	89 f0                	mov    eax,esi
c0013ea3:	5b                   	pop    ebx
c0013ea4:	5e                   	pop    esi
c0013ea5:	5f                   	pop    edi
c0013ea6:	c3                   	ret    

c0013ea7 <Reg::readBool(char*, char*, bool*)>:
c0013ea7:	83 ec 20             	sub    esp,0x20
c0013eaa:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013eae:	50                   	push   eax
c0013eaf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013eb3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013eb7:	e8 7c fe ff ff       	call   c0013d38 <Reg::readInt(char*, char*, int*)>
c0013ebc:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0013ec1:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0013ec5:	0f 95 02             	setne  BYTE PTR [edx]
c0013ec8:	83 c4 2c             	add    esp,0x2c
c0013ecb:	c3                   	ret    

c0013ecc <Reg::readBoolWithDefault(char*, char*, bool)>:
c0013ecc:	53                   	push   ebx
c0013ecd:	83 ec 1c             	sub    esp,0x1c
c0013ed0:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0013ed4:	8d 44 24 13          	lea    eax,[esp+0x13]
c0013ed8:	50                   	push   eax
c0013ed9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013edd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013ee1:	e8 c1 ff ff ff       	call   c0013ea7 <Reg::readBool(char*, char*, bool*)>
c0013ee6:	83 c4 10             	add    esp,0x10
c0013ee9:	84 c0                	test   al,al
c0013eeb:	74 04                	je     c0013ef1 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0013eed:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0013ef1:	88 d8                	mov    al,bl
c0013ef3:	83 c4 18             	add    esp,0x18
c0013ef6:	5b                   	pop    ebx
c0013ef7:	c3                   	ret    

c0013ef8 <Reg::readIntWithDefault(char*, char*, int)>:
c0013ef8:	53                   	push   ebx
c0013ef9:	83 ec 1c             	sub    esp,0x1c
c0013efc:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013f00:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013f04:	50                   	push   eax
c0013f05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013f09:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013f0d:	e8 26 fe ff ff       	call   c0013d38 <Reg::readInt(char*, char*, int*)>
c0013f12:	83 c4 10             	add    esp,0x10
c0013f15:	84 c0                	test   al,al
c0013f17:	74 04                	je     c0013f1d <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0013f19:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013f1d:	89 d8                	mov    eax,ebx
c0013f1f:	83 c4 18             	add    esp,0x18
c0013f22:	5b                   	pop    ebx
c0013f23:	c3                   	ret    

c0013f24 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0013f24:	57                   	push   edi
c0013f25:	56                   	push   esi
c0013f26:	56                   	push   esi
c0013f27:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013f2b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013f2f:	56                   	push   esi
c0013f30:	57                   	push   edi
c0013f31:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f35:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f39:	e8 e8 fe ff ff       	call   c0013e26 <Reg::readString(char*, char*, char*, int)>
c0013f3e:	83 c4 10             	add    esp,0x10
c0013f41:	84 c0                	test   al,al
c0013f43:	75 1a                	jne    c0013f5f <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0013f45:	51                   	push   ecx
c0013f46:	56                   	push   esi
c0013f47:	6a 00                	push   0x0
c0013f49:	57                   	push   edi
c0013f4a:	e8 a1 c5 fe ff       	call   c00004f0 <memset>
c0013f4f:	8d 4e ff             	lea    ecx,[esi-0x1]
c0013f52:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013f56:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013f58:	83 c4 10             	add    esp,0x10
c0013f5b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0013f5f:	89 f8                	mov    eax,edi
c0013f61:	5a                   	pop    edx
c0013f62:	5e                   	pop    esi
c0013f63:	5f                   	pop    edi
c0013f64:	c3                   	ret    

c0013f65 <SysEject(regs*)>:
c0013f65:	83 ec 0c             	sub    esp,0xc
c0013f68:	83 ca ff             	or     edx,0xffffffff
c0013f6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f6f:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013f72:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013f77:	83 e9 41             	sub    ecx,0x41
c0013f7a:	83 f9 19             	cmp    ecx,0x19
c0013f7d:	77 18                	ja     c0013f97 <SysEject(regs*)+0x32>
c0013f7f:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c0013f86:	85 c9                	test   ecx,ecx
c0013f88:	74 0d                	je     c0013f97 <SysEject(regs*)+0x32>
c0013f8a:	83 ec 0c             	sub    esp,0xc
c0013f8d:	51                   	push   ecx
c0013f8e:	e8 3b 9e ff ff       	call   c000ddce <LogicalDisk::eject()>
c0013f93:	83 c4 10             	add    esp,0x10
c0013f96:	99                   	cdq    
c0013f97:	83 c4 0c             	add    esp,0xc
c0013f9a:	c3                   	ret    

c0013f9b <SysExit(regs*)>:
c0013f9b:	83 ec 18             	sub    esp,0x18
c0013f9e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013fa2:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013fa5:	e8 46 2b 00 00       	call   c0016af0 <terminateTask(int)>
c0013faa:	83 c8 ff             	or     eax,0xffffffff
c0013fad:	83 c4 1c             	add    esp,0x1c
c0013fb0:	89 c2                	mov    edx,eax
c0013fb2:	c3                   	ret    

c0013fb3 <SysGetCwd(regs*)>:
c0013fb3:	83 ec 10             	sub    esp,0x10
c0013fb6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013fba:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0013fbd:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013fc0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013fc5:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013fc8:	e8 c3 78 ff ff       	call   c000b890 <Fs::getcwd(Process*, char*, int)>
c0013fcd:	83 c4 1c             	add    esp,0x1c
c0013fd0:	99                   	cdq    
c0013fd1:	c3                   	ret    

c0013fd2 <SysGetPID(regs*)>:
c0013fd2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013fd7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013fda:	8b 00                	mov    eax,DWORD PTR [eax]
c0013fdc:	99                   	cdq    
c0013fdd:	c3                   	ret    

c0013fde <SysGetRAMData(regs*)>:
c0013fde:	8b 0d e8 6e 02 c0    	mov    ecx,DWORD PTR ds:0xc0026ee8
c0013fe4:	69 05 e4 6e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0026ee4,0xc8
c0013fee:	99                   	cdq    
c0013fef:	f7 f9                	idiv   ecx
c0013ff1:	c1 e0 18             	shl    eax,0x18
c0013ff4:	09 c8                	or     eax,ecx
c0013ff6:	99                   	cdq    
c0013ff7:	c3                   	ret    

c0013ff8 <SysGetVGAPtr(regs*)>:
c0013ff8:	55                   	push   ebp
c0013ff9:	57                   	push   edi
c0013ffa:	56                   	push   esi
c0013ffb:	53                   	push   ebx
c0013ffc:	83 ec 18             	sub    esp,0x18
c0013fff:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0014003:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014006:	e8 b1 25 00 00       	call   c00165bc <Thr::processFromPID(int)>
c001400b:	83 c4 10             	add    esp,0x10
c001400e:	89 c1                	mov    ecx,eax
c0014010:	b8 01 00 00 00       	mov    eax,0x1
c0014015:	85 c9                	test   ecx,ecx
c0014017:	74 57                	je     c0014070 <SysGetVGAPtr(regs*)+0x78>
c0014019:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c001401f:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0014023:	74 0c                	je     c0014031 <SysGetVGAPtr(regs*)+0x39>
c0014025:	83 ec 0c             	sub    esp,0xc
c0014028:	55                   	push   ebp
c0014029:	e8 2b 47 ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c001402e:	83 c4 10             	add    esp,0x10
c0014031:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0014034:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0014037:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001403c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001403e:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0014041:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014044:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001404a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001404d:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0014050:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0014056:	50                   	push   eax
c0014057:	50                   	push   eax
c0014058:	68 94 26 02 c0       	push   0xc0022694
c001405d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014060:	05 a8 0f 00 00       	add    eax,0xfa8
c0014065:	50                   	push   eax
c0014066:	e8 d5 c5 fe ff       	call   c0000640 <strcpy>
c001406b:	83 c4 10             	add    esp,0x10
c001406e:	31 c0                	xor    eax,eax
c0014070:	83 c4 0c             	add    esp,0xc
c0014073:	31 d2                	xor    edx,edx
c0014075:	5b                   	pop    ebx
c0014076:	5e                   	pop    esi
c0014077:	5f                   	pop    edi
c0014078:	5d                   	pop    ebp
c0014079:	c3                   	ret    
c001407a:	66 90                	xchg   ax,ax

c001407c <SysKill(regs*)>:
c001407c:	53                   	push   ebx
c001407d:	83 ec 08             	sub    esp,0x8
c0014080:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014084:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0014088:	75 16                	jne    c00140a0 <SysKill(regs*)+0x24>
c001408a:	83 ec 0c             	sub    esp,0xc
c001408d:	68 9e 26 02 c0       	push   0xc002269e
c0014092:	e8 18 d6 ff ff       	call   c00116af <KePanic(char const*)>
c0014097:	83 c4 10             	add    esp,0x10
c001409a:	e9 89 00 00 00       	jmp    c0014128 <SysKill(regs*)+0xac>
c001409f:	90                   	nop
c00140a0:	83 ec 0c             	sub    esp,0xc
c00140a3:	68 e4 c6 02 c0       	push   0xc002c6e4
c00140a8:	e8 ff bc 00 00       	call   c001fdac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00140ad:	8d 76 00             	lea    esi,[esi+0x0]
c00140b0:	83 c4 10             	add    esp,0x10
c00140b3:	85 c0                	test   eax,eax
c00140b5:	74 19                	je     c00140d0 <SysKill(regs*)+0x54>
c00140b7:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00140ba:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00140bd:	39 0a                	cmp    DWORD PTR [edx],ecx
c00140bf:	74 33                	je     c00140f4 <SysKill(regs*)+0x78>
c00140c1:	52                   	push   edx
c00140c2:	52                   	push   edx
c00140c3:	50                   	push   eax
c00140c4:	68 e4 c6 02 c0       	push   0xc002c6e4
c00140c9:	e8 fe bf 00 00       	call   c00200cc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00140ce:	eb e0                	jmp    c00140b0 <SysKill(regs*)+0x34>
c00140d0:	83 ec 0c             	sub    esp,0xc
c00140d3:	68 d8 c6 02 c0       	push   0xc002c6d8
c00140d8:	e8 cf bc 00 00       	call   c001fdac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00140dd:	8d 76 00             	lea    esi,[esi+0x0]
c00140e0:	83 c4 10             	add    esp,0x10
c00140e3:	85 c0                	test   eax,eax
c00140e5:	74 41                	je     c0014128 <SysKill(regs*)+0xac>
c00140e7:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00140ea:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00140ed:	39 0a                	cmp    DWORD PTR [edx],ecx
c00140ef:	75 27                	jne    c0014118 <SysKill(regs*)+0x9c>
c00140f1:	8d 76 00             	lea    esi,[esi+0x0]
c00140f4:	51                   	push   ecx
c00140f5:	51                   	push   ecx
c00140f6:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00140f9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00140fe:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014101:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0014107:	e8 46 da ff ff       	call   c0011b52 <KeRaiseSignal(SigHandlerBlock*, int)>
c001410c:	83 c4 10             	add    esp,0x10
c001410f:	31 c0                	xor    eax,eax
c0014111:	31 d2                	xor    edx,edx
c0014113:	eb 1b                	jmp    c0014130 <SysKill(regs*)+0xb4>
c0014115:	8d 76 00             	lea    esi,[esi+0x0]
c0014118:	52                   	push   edx
c0014119:	52                   	push   edx
c001411a:	50                   	push   eax
c001411b:	68 d8 c6 02 c0       	push   0xc002c6d8
c0014120:	e8 a7 bf 00 00       	call   c00200cc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0014125:	eb b9                	jmp    c00140e0 <SysKill(regs*)+0x64>
c0014127:	90                   	nop
c0014128:	83 c8 ff             	or     eax,0xffffffff
c001412b:	89 c2                	mov    edx,eax
c001412d:	8d 76 00             	lea    esi,[esi+0x0]
c0014130:	83 c4 08             	add    esp,0x8
c0014133:	5b                   	pop    ebx
c0014134:	c3                   	ret    

c0014135 <SysLoadDLL(regs*)>:
c0014135:	56                   	push   esi
c0014136:	53                   	push   ebx
c0014137:	31 d2                	xor    edx,edx
c0014139:	51                   	push   ecx
c001413a:	b8 01 00 00 00       	mov    eax,0x1
c001413f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014143:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0014147:	0f 84 8c 00 00 00    	je     c00141d9 <SysLoadDLL(regs*)+0xa4>
c001414d:	83 ec 0c             	sub    esp,0xc
c0014150:	68 14 01 00 00       	push   0x114
c0014155:	e8 5c 39 ff ff       	call   c0007ab6 <malloc>
c001415a:	83 c4 0c             	add    esp,0xc
c001415d:	89 c3                	mov    ebx,eax
c001415f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014164:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0014167:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001416a:	53                   	push   ebx
c001416b:	e8 6c 7a ff ff       	call   c000bbdc <File::File(char const*, Process*)>
c0014170:	83 c4 10             	add    esp,0x10
c0014173:	31 d2                	xor    edx,edx
c0014175:	b8 02 00 00 00       	mov    eax,0x2
c001417a:	85 db                	test   ebx,ebx
c001417c:	74 5b                	je     c00141d9 <SysLoadDLL(regs*)+0xa4>
c001417e:	83 ec 0c             	sub    esp,0xc
c0014181:	53                   	push   ebx
c0014182:	e8 37 7d ff ff       	call   c000bebe <File::exists()>
c0014187:	83 c4 10             	add    esp,0x10
c001418a:	84 c0                	test   al,al
c001418c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001418e:	75 11                	jne    c00141a1 <SysLoadDLL(regs*)+0x6c>
c0014190:	83 ec 0c             	sub    esp,0xc
c0014193:	53                   	push   ebx
c0014194:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014197:	83 c4 10             	add    esp,0x10
c001419a:	b8 03 00 00 00       	mov    eax,0x3
c001419f:	eb 36                	jmp    c00141d7 <SysLoadDLL(regs*)+0xa2>
c00141a1:	83 ec 0c             	sub    esp,0xc
c00141a4:	53                   	push   ebx
c00141a5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00141a8:	58                   	pop    eax
c00141a9:	5a                   	pop    edx
c00141aa:	6a 00                	push   0x0
c00141ac:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00141af:	e8 3b 15 00 00       	call   c00156ef <Thr::loadDLL(char const*, bool)>
c00141b4:	83 c4 10             	add    esp,0x10
c00141b7:	89 c1                	mov    ecx,eax
c00141b9:	31 d2                	xor    edx,edx
c00141bb:	b8 04 00 00 00       	mov    eax,0x4
c00141c0:	85 c9                	test   ecx,ecx
c00141c2:	74 15                	je     c00141d9 <SysLoadDLL(regs*)+0xa4>
c00141c4:	53                   	push   ebx
c00141c5:	53                   	push   ebx
c00141c6:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00141cc:	51                   	push   ecx
c00141cd:	e8 4e 17 00 00       	call   c0015920 <Thr::executeDLL(unsigned long, void*)>
c00141d2:	83 c4 10             	add    esp,0x10
c00141d5:	31 c0                	xor    eax,eax
c00141d7:	31 d2                	xor    edx,edx
c00141d9:	59                   	pop    ecx
c00141da:	5b                   	pop    ebx
c00141db:	5e                   	pop    esi
c00141dc:	c3                   	ret    

c00141dd <SysRead(regs*)>:
c00141dd:	57                   	push   edi
c00141de:	56                   	push   esi
c00141df:	53                   	push   ebx
c00141e0:	83 ec 10             	sub    esp,0x10
c00141e3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00141e7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00141ea:	83 f8 02             	cmp    eax,0x2
c00141ed:	77 10                	ja     c00141ff <SysRead(regs*)+0x22>
c00141ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00141f4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00141f7:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00141fd:	eb 0e                	jmp    c001420d <SysRead(regs*)+0x30>
c00141ff:	83 ec 0c             	sub    esp,0xc
c0014202:	50                   	push   eax
c0014203:	e8 ab 52 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0014208:	83 c4 10             	add    esp,0x10
c001420b:	89 c1                	mov    ecx,eax
c001420d:	83 c8 ff             	or     eax,0xffffffff
c0014210:	85 c9                	test   ecx,ecx
c0014212:	89 c2                	mov    edx,eax
c0014214:	74 28                	je     c001423e <SysRead(regs*)+0x61>
c0014216:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001421e:	31 ff                	xor    edi,edi
c0014220:	83 ec 0c             	sub    esp,0xc
c0014223:	8b 01                	mov    eax,DWORD PTR [ecx]
c0014225:	8d 54 24 18          	lea    edx,[esp+0x18]
c0014229:	52                   	push   edx
c001422a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001422d:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0014230:	57                   	push   edi
c0014231:	56                   	push   esi
c0014232:	51                   	push   ecx
c0014233:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014236:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001423a:	83 c4 20             	add    esp,0x20
c001423d:	99                   	cdq    
c001423e:	83 c4 10             	add    esp,0x10
c0014241:	5b                   	pop    ebx
c0014242:	5e                   	pop    esi
c0014243:	5f                   	pop    edi
c0014244:	c3                   	ret    

c0014245 <SysRegisterSignal(regs*)>:
c0014245:	83 ec 18             	sub    esp,0x18
c0014248:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001424c:	6a 00                	push   0x0
c001424e:	6a 00                	push   0x0
c0014250:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014253:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014256:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001425b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001425e:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0014264:	e8 b3 d8 ff ff       	call   c0011b1c <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0014269:	83 c4 2c             	add    esp,0x2c
c001426c:	99                   	cdq    
c001426d:	c3                   	ret    

c001426e <SysRegistryGetTypeFromPath(regs*)>:
c001426e:	57                   	push   edi
c001426f:	56                   	push   esi
c0014270:	53                   	push   ebx
c0014271:	81 ec 38 01 00 00    	sub    esp,0x138
c0014277:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c001427e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014281:	68 bf 26 02 c0       	push   0xc00226bf
c0014286:	e8 ba 66 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001428b:	5a                   	pop    edx
c001428c:	59                   	pop    ecx
c001428d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014290:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014293:	e8 4d f6 ff ff       	call   c00138e5 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014298:	5f                   	pop    edi
c0014299:	89 c6                	mov    esi,eax
c001429b:	5a                   	pop    edx
c001429c:	50                   	push   eax
c001429d:	68 df 26 02 c0       	push   0xc00226df
c00142a2:	e8 9e 66 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00142a7:	83 c4 10             	add    esp,0x10
c00142aa:	85 f6                	test   esi,esi
c00142ac:	74 28                	je     c00142d6 <SysRegistryGetTypeFromPath(regs*)+0x68>
c00142ae:	50                   	push   eax
c00142af:	8d 7c 24 08          	lea    edi,[esp+0x8]
c00142b3:	57                   	push   edi
c00142b4:	56                   	push   esi
c00142b5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00142b8:	e8 0c f2 ff ff       	call   c00134c9 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00142bd:	83 c4 0c             	add    esp,0xc
c00142c0:	89 c3                	mov    ebx,eax
c00142c2:	57                   	push   edi
c00142c3:	50                   	push   eax
c00142c4:	68 e7 26 02 c0       	push   0xc00226e7
c00142c9:	e8 77 66 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00142ce:	89 d8                	mov    eax,ebx
c00142d0:	83 c4 10             	add    esp,0x10
c00142d3:	99                   	cdq    
c00142d4:	eb 05                	jmp    c00142db <SysRegistryGetTypeFromPath(regs*)+0x6d>
c00142d6:	83 c8 ff             	or     eax,0xffffffff
c00142d9:	89 c2                	mov    edx,eax
c00142db:	81 c4 30 01 00 00    	add    esp,0x130
c00142e1:	5b                   	pop    ebx
c00142e2:	5e                   	pop    esi
c00142e3:	5f                   	pop    edi
c00142e4:	c3                   	ret    

c00142e5 <SysRegistryReadExtent(regs*)>:
c00142e5:	83 ec 1c             	sub    esp,0x1c
c00142e8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00142ec:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00142ef:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c00142f2:	85 c0                	test   eax,eax
c00142f4:	79 1f                	jns    c0014315 <SysRegistryReadExtent(regs*)+0x30>
c00142f6:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00142fb:	52                   	push   edx
c00142fc:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0014300:	52                   	push   edx
c0014301:	50                   	push   eax
c0014302:	51                   	push   ecx
c0014303:	e8 b3 f0 ff ff       	call   c00133bb <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0014308:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001430c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014310:	83 c4 10             	add    esp,0x10
c0014313:	eb 14                	jmp    c0014329 <SysRegistryReadExtent(regs*)+0x44>
c0014315:	83 ec 04             	sub    esp,0x4
c0014318:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001431b:	50                   	push   eax
c001431c:	51                   	push   ecx
c001431d:	e8 33 eb ff ff       	call   c0012e55 <CmGetString(Reghive_Tag*, int, char*)>
c0014322:	83 c4 10             	add    esp,0x10
c0014325:	31 c0                	xor    eax,eax
c0014327:	31 d2                	xor    edx,edx
c0014329:	83 c4 1c             	add    esp,0x1c
c001432c:	c3                   	ret    

c001432d <SysRegistryPathToExtentLookup(regs*)>:
c001432d:	53                   	push   ebx
c001432e:	83 ec 10             	sub    esp,0x10
c0014331:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014335:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014338:	68 fd 26 02 c0       	push   0xc00226fd
c001433d:	e8 03 66 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0014342:	58                   	pop    eax
c0014343:	5a                   	pop    edx
c0014344:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014347:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001434a:	e8 96 f5 ff ff       	call   c00138e5 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c001434f:	83 c4 18             	add    esp,0x18
c0014352:	99                   	cdq    
c0014353:	5b                   	pop    ebx
c0014354:	c3                   	ret    

c0014355 <SysRegistryEnterDirectory(regs*)>:
c0014355:	53                   	push   ebx
c0014356:	83 ec 10             	sub    esp,0x10
c0014359:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001435d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014360:	68 20 27 02 c0       	push   0xc0022720
c0014365:	e8 db 65 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001436a:	58                   	pop    eax
c001436b:	5a                   	pop    edx
c001436c:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001436f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014372:	e8 55 eb ff ff       	call   c0012ecc <CmEnterDirectory(Reghive_Tag*, int)>
c0014377:	83 c4 18             	add    esp,0x18
c001437a:	99                   	cdq    
c001437b:	5b                   	pop    ebx
c001437c:	c3                   	ret    

c001437d <SysRegistryGetNext(regs*)>:
c001437d:	53                   	push   ebx
c001437e:	83 ec 10             	sub    esp,0x10
c0014381:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014385:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014388:	68 3e 27 02 c0       	push   0xc002273e
c001438d:	e8 b3 65 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0014392:	58                   	pop    eax
c0014393:	5a                   	pop    edx
c0014394:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014397:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001439a:	e8 6c eb ff ff       	call   c0012f0b <CmGetNext(Reghive_Tag*, int)>
c001439f:	83 c4 18             	add    esp,0x18
c00143a2:	99                   	cdq    
c00143a3:	5b                   	pop    ebx
c00143a4:	c3                   	ret    

c00143a5 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c00143a5:	57                   	push   edi
c00143a6:	56                   	push   esi
c00143a7:	53                   	push   ebx
c00143a8:	81 ec 34 01 00 00    	sub    esp,0x134
c00143ae:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c00143b5:	8d 7c 24 08          	lea    edi,[esp+0x8]
c00143b9:	57                   	push   edi
c00143ba:	ff 76 28             	push   DWORD PTR [esi+0x28]
c00143bd:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00143c0:	e8 04 f1 ff ff       	call   c00134c9 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00143c5:	89 c3                	mov    ebx,eax
c00143c7:	58                   	pop    eax
c00143c8:	5a                   	pop    edx
c00143c9:	57                   	push   edi
c00143ca:	ff 76 24             	push   DWORD PTR [esi+0x24]
c00143cd:	e8 6e c2 fe ff       	call   c0000640 <strcpy>
c00143d2:	89 d8                	mov    eax,ebx
c00143d4:	81 c4 40 01 00 00    	add    esp,0x140
c00143da:	99                   	cdq    
c00143db:	5b                   	pop    ebx
c00143dc:	5e                   	pop    esi
c00143dd:	5f                   	pop    edi
c00143de:	c3                   	ret    

c00143df <SysRegistryOpen(regs*)>:
c00143df:	83 ec 18             	sub    esp,0x18
c00143e2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00143e6:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00143e9:	e8 f7 e8 ff ff       	call   c0012ce5 <CmOpen(char const*)>
c00143ee:	83 c4 1c             	add    esp,0x1c
c00143f1:	99                   	cdq    
c00143f2:	c3                   	ret    

c00143f3 <SysRegistryClose(regs*)>:
c00143f3:	83 ec 18             	sub    esp,0x18
c00143f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00143fa:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00143fd:	e8 01 ea ff ff       	call   c0012e03 <CmClose(Reghive_Tag*)>
c0014402:	31 c0                	xor    eax,eax
c0014404:	31 d2                	xor    edx,edx
c0014406:	83 c4 1c             	add    esp,0x1c
c0014409:	c3                   	ret    

c001440a <SysSbrk(regs*)>:
c001440a:	56                   	push   esi
c001440b:	53                   	push   ebx
c001440c:	50                   	push   eax
c001440d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014412:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014416:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014419:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001441c:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0014422:	85 db                	test   ebx,ebx
c0014424:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0014427:	74 02                	je     c001442b <SysSbrk(regs*)+0x21>
c0014429:	79 06                	jns    c0014431 <SysSbrk(regs*)+0x27>
c001442b:	89 f0                	mov    eax,esi
c001442d:	31 d2                	xor    edx,edx
c001442f:	eb 2a                	jmp    c001445b <SysSbrk(regs*)+0x51>
c0014431:	83 c8 ff             	or     eax,0xffffffff
c0014434:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001443a:	89 c2                	mov    edx,eax
c001443c:	77 1d                	ja     c001445b <SysSbrk(regs*)+0x51>
c001443e:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0014444:	50                   	push   eax
c0014445:	c1 ea 0c             	shr    edx,0xc
c0014448:	68 07 0c 00 00       	push   0xc07
c001444d:	52                   	push   edx
c001444e:	51                   	push   ecx
c001444f:	e8 d0 59 ff ff       	call   c0009e24 <VAS::allocatePages(int, int)>
c0014454:	89 f0                	mov    eax,esi
c0014456:	31 d2                	xor    edx,edx
c0014458:	83 c4 10             	add    esp,0x10
c001445b:	59                   	pop    ecx
c001445c:	5b                   	pop    ebx
c001445d:	5e                   	pop    esi
c001445e:	c3                   	ret    

c001445f <SysSetCwd(regs*)>:
c001445f:	83 ec 14             	sub    esp,0x14
c0014462:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014466:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014469:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001446e:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0014471:	e8 e7 7a ff ff       	call   c000bf5d <Fs::setcwd(Process*, char*)>
c0014476:	83 c4 1c             	add    esp,0x1c
c0014479:	99                   	cdq    
c001447a:	c3                   	ret    

c001447b <SysSetTime(regs*)>:
c001447b:	55                   	push   ebp
c001447c:	31 c9                	xor    ecx,ecx
c001447e:	57                   	push   edi
c001447f:	bd 0c 00 00 00       	mov    ebp,0xc
c0014484:	56                   	push   esi
c0014485:	53                   	push   ebx
c0014486:	31 db                	xor    ebx,ebx
c0014488:	83 ec 10             	sub    esp,0x10
c001448b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001448f:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0014492:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0014495:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0014498:	89 c2                	mov    edx,eax
c001449a:	81 ef 6c 07 00 00    	sub    edi,0x76c
c00144a0:	83 e2 1f             	and    edx,0x1f
c00144a3:	c1 e7 10             	shl    edi,0x10
c00144a6:	42                   	inc    edx
c00144a7:	c1 e8 05             	shr    eax,0x5
c00144aa:	88 d1                	mov    cl,dl
c00144ac:	31 d2                	xor    edx,edx
c00144ae:	f7 f5                	div    ebp
c00144b0:	89 dd                	mov    ebp,ebx
c00144b2:	88 d5                	mov    ch,dl
c00144b4:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c00144ba:	0f b7 c1             	movzx  eax,cx
c00144bd:	31 d2                	xor    edx,edx
c00144bf:	09 f8                	or     eax,edi
c00144c1:	bf 3c 00 00 00       	mov    edi,0x3c
c00144c6:	89 c1                	mov    ecx,eax
c00144c8:	89 f0                	mov    eax,esi
c00144ca:	f7 f7                	div    edi
c00144cc:	c1 e2 10             	shl    edx,0x10
c00144cf:	09 d5                	or     ebp,edx
c00144d1:	31 d2                	xor    edx,edx
c00144d3:	89 eb                	mov    ebx,ebp
c00144d5:	f7 f7                	div    edi
c00144d7:	bf 10 0e 00 00       	mov    edi,0xe10
c00144dc:	88 d7                	mov    bh,dl
c00144de:	89 f0                	mov    eax,esi
c00144e0:	31 d2                	xor    edx,edx
c00144e2:	f7 f7                	div    edi
c00144e4:	bf 18 00 00 00       	mov    edi,0x18
c00144e9:	31 d2                	xor    edx,edx
c00144eb:	f7 f7                	div    edi
c00144ed:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00144f2:	88 d3                	mov    bl,dl
c00144f4:	53                   	push   ebx
c00144f5:	51                   	push   ecx
c00144f6:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00144fc:	e8 69 82 ff ff       	call   c000c76a <Clock::setTimeInDatetimeLocal(datetime_t)>
c0014501:	83 c4 1c             	add    esp,0x1c
c0014504:	83 f0 01             	xor    eax,0x1
c0014507:	5b                   	pop    ebx
c0014508:	0f b6 c0             	movzx  eax,al
c001450b:	5e                   	pop    esi
c001450c:	31 d2                	xor    edx,edx
c001450e:	5f                   	pop    edi
c001450f:	5d                   	pop    ebp
c0014510:	c3                   	ret    

c0014511 <SysSymlink(regs*)>:
c0014511:	53                   	push   ebx
c0014512:	83 c8 ff             	or     eax,0xffffffff
c0014515:	83 ec 08             	sub    esp,0x8
c0014518:	89 c2                	mov    edx,eax
c001451a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001451e:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0014521:	85 c9                	test   ecx,ecx
c0014523:	74 14                	je     c0014539 <SysSymlink(regs*)+0x28>
c0014525:	8b 5b 24             	mov    ebx,DWORD PTR [ebx+0x24]
c0014528:	85 db                	test   ebx,ebx
c001452a:	74 0d                	je     c0014539 <SysSymlink(regs*)+0x28>
c001452c:	50                   	push   eax
c001452d:	50                   	push   eax
c001452e:	53                   	push   ebx
c001452f:	51                   	push   ecx
c0014530:	e8 0a 6e ff ff       	call   c000b33f <KeCreateSymlink(char const*, char const*)>
c0014535:	83 c4 10             	add    esp,0x10
c0014538:	99                   	cdq    
c0014539:	83 c4 08             	add    esp,0x8
c001453c:	5b                   	pop    ebx
c001453d:	c3                   	ret    

c001453e <SysTimezone(regs*)>:
c001453e:	53                   	push   ebx
c001453f:	83 ec 08             	sub    esp,0x8
c0014542:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014546:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001454a:	75 17                	jne    c0014563 <SysTimezone(regs*)+0x25>
c001454c:	83 ec 0c             	sub    esp,0xc
c001454f:	68 55 27 02 c0       	push   0xc0022755
c0014554:	e8 ec 63 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0014559:	83 c8 ff             	or     eax,0xffffffff
c001455c:	83 c4 10             	add    esp,0x10
c001455f:	89 c2                	mov    edx,eax
c0014561:	eb 20                	jmp    c0014583 <SysTimezone(regs*)+0x45>
c0014563:	83 ec 0c             	sub    esp,0xc
c0014566:	68 6a 27 02 c0       	push   0xc002276a
c001456b:	e8 d5 63 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0014570:	58                   	pop    eax
c0014571:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014574:	e8 5b 7f ff ff       	call   c000c4d4 <User::loadClockSettings(int)>
c0014579:	83 c4 10             	add    esp,0x10
c001457c:	b8 01 00 00 00       	mov    eax,0x1
c0014581:	31 d2                	xor    edx,edx
c0014583:	83 c4 08             	add    esp,0x8
c0014586:	5b                   	pop    ebx
c0014587:	c3                   	ret    

c0014588 <SysTruncate(regs*)>:
c0014588:	55                   	push   ebp
c0014589:	57                   	push   edi
c001458a:	31 ff                	xor    edi,edi
c001458c:	56                   	push   esi
c001458d:	53                   	push   ebx
c001458e:	83 ec 0c             	sub    esp,0xc
c0014591:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014595:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0014598:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c001459b:	89 ce                	mov    esi,ecx
c001459d:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c00145a1:	0f 84 9a 00 00 00    	je     c0014641 <SysTruncate(regs*)+0xb9>
c00145a7:	83 ec 0c             	sub    esp,0xc
c00145aa:	68 14 01 00 00       	push   0x114
c00145af:	e8 02 35 ff ff       	call   c0007ab6 <malloc>
c00145b4:	83 c4 0c             	add    esp,0xc
c00145b7:	89 c3                	mov    ebx,eax
c00145b9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00145be:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00145c1:	55                   	push   ebp
c00145c2:	53                   	push   ebx
c00145c3:	e8 14 76 ff ff       	call   c000bbdc <File::File(char const*, Process*)>
c00145c8:	83 c4 10             	add    esp,0x10
c00145cb:	31 d2                	xor    edx,edx
c00145cd:	b8 03 00 00 00       	mov    eax,0x3
c00145d2:	85 db                	test   ebx,ebx
c00145d4:	0f 84 a2 00 00 00    	je     c001467c <SysTruncate(regs*)+0xf4>
c00145da:	51                   	push   ecx
c00145db:	51                   	push   ecx
c00145dc:	6a 02                	push   0x2
c00145de:	53                   	push   ebx
c00145df:	e8 16 76 ff ff       	call   c000bbfa <File::open(FileOpenMode)>
c00145e4:	83 c4 10             	add    esp,0x10
c00145e7:	85 c0                	test   eax,eax
c00145e9:	74 13                	je     c00145fe <SysTruncate(regs*)+0x76>
c00145eb:	83 ec 0c             	sub    esp,0xc
c00145ee:	8b 03                	mov    eax,DWORD PTR [ebx]
c00145f0:	53                   	push   ebx
c00145f1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00145f4:	83 c4 10             	add    esp,0x10
c00145f7:	b8 04 00 00 00       	mov    eax,0x4
c00145fc:	eb 7c                	jmp    c001467a <SysTruncate(regs*)+0xf2>
c00145fe:	52                   	push   edx
c00145ff:	57                   	push   edi
c0014600:	56                   	push   esi
c0014601:	53                   	push   ebx
c0014602:	e8 07 77 ff ff       	call   c000bd0e <File::truncate(unsigned long long)>
c0014607:	83 c4 10             	add    esp,0x10
c001460a:	85 c0                	test   eax,eax
c001460c:	74 1b                	je     c0014629 <SysTruncate(regs*)+0xa1>
c001460e:	83 ec 0c             	sub    esp,0xc
c0014611:	53                   	push   ebx
c0014612:	e8 41 76 ff ff       	call   c000bc58 <File::close()>
c0014617:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014619:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001461c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001461f:	83 c4 10             	add    esp,0x10
c0014622:	b8 05 00 00 00       	mov    eax,0x5
c0014627:	eb 51                	jmp    c001467a <SysTruncate(regs*)+0xf2>
c0014629:	83 ec 0c             	sub    esp,0xc
c001462c:	53                   	push   ebx
c001462d:	e8 26 76 ff ff       	call   c000bc58 <File::close()>
c0014632:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014634:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014637:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001463a:	83 c4 10             	add    esp,0x10
c001463d:	31 c0                	xor    eax,eax
c001463f:	eb 39                	jmp    c001467a <SysTruncate(regs*)+0xf2>
c0014641:	31 d2                	xor    edx,edx
c0014643:	b8 01 00 00 00       	mov    eax,0x1
c0014648:	83 fd 02             	cmp    ebp,0x2
c001464b:	7e 2f                	jle    c001467c <SysTruncate(regs*)+0xf4>
c001464d:	83 ec 0c             	sub    esp,0xc
c0014650:	51                   	push   ecx
c0014651:	e8 5d 4e ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0014656:	83 c4 10             	add    esp,0x10
c0014659:	89 c1                	mov    ecx,eax
c001465b:	31 d2                	xor    edx,edx
c001465d:	b8 02 00 00 00       	mov    eax,0x2
c0014662:	85 c9                	test   ecx,ecx
c0014664:	74 16                	je     c001467c <SysTruncate(regs*)+0xf4>
c0014666:	50                   	push   eax
c0014667:	57                   	push   edi
c0014668:	56                   	push   esi
c0014669:	51                   	push   ecx
c001466a:	e8 9f 76 ff ff       	call   c000bd0e <File::truncate(unsigned long long)>
c001466f:	83 c4 10             	add    esp,0x10
c0014672:	85 c0                	test   eax,eax
c0014674:	0f 95 c0             	setne  al
c0014677:	0f b6 c0             	movzx  eax,al
c001467a:	31 d2                	xor    edx,edx
c001467c:	83 c4 0c             	add    esp,0xc
c001467f:	5b                   	pop    ebx
c0014680:	5e                   	pop    esi
c0014681:	5f                   	pop    edi
c0014682:	5d                   	pop    ebp
c0014683:	c3                   	ret    

c0014684 <SysWrite(regs*)>:
c0014684:	57                   	push   edi
c0014685:	56                   	push   esi
c0014686:	53                   	push   ebx
c0014687:	83 ec 10             	sub    esp,0x10
c001468a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001468e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014691:	83 f8 02             	cmp    eax,0x2
c0014694:	77 10                	ja     c00146a6 <SysWrite(regs*)+0x22>
c0014696:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001469b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001469e:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00146a4:	eb 0e                	jmp    c00146b4 <SysWrite(regs*)+0x30>
c00146a6:	83 ec 0c             	sub    esp,0xc
c00146a9:	50                   	push   eax
c00146aa:	e8 04 4e ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c00146af:	83 c4 10             	add    esp,0x10
c00146b2:	89 c1                	mov    ecx,eax
c00146b4:	83 c8 ff             	or     eax,0xffffffff
c00146b7:	85 c9                	test   ecx,ecx
c00146b9:	89 c2                	mov    edx,eax
c00146bb:	74 28                	je     c00146e5 <SysWrite(regs*)+0x61>
c00146bd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00146c5:	31 ff                	xor    edi,edi
c00146c7:	83 ec 0c             	sub    esp,0xc
c00146ca:	8b 01                	mov    eax,DWORD PTR [ecx]
c00146cc:	8d 54 24 18          	lea    edx,[esp+0x18]
c00146d0:	52                   	push   edx
c00146d1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00146d4:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00146d7:	57                   	push   edi
c00146d8:	56                   	push   esi
c00146d9:	51                   	push   ecx
c00146da:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00146dd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00146e1:	83 c4 20             	add    esp,0x20
c00146e4:	99                   	cdq    
c00146e5:	83 c4 10             	add    esp,0x10
c00146e8:	5b                   	pop    ebx
c00146e9:	5e                   	pop    esi
c00146ea:	5f                   	pop    edi
c00146eb:	c3                   	ret    

c00146ec <SysWsbe(regs*)>:
c00146ec:	57                   	push   edi
c00146ed:	b9 0b 00 00 00       	mov    ecx,0xb
c00146f2:	56                   	push   esi
c00146f3:	be a9 27 02 c0       	mov    esi,0xc00227a9
c00146f8:	53                   	push   ebx
c00146f9:	83 ec 30             	sub    esp,0x30
c00146fc:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0014700:	fc                   	cld    
c0014701:	83 ec 0c             	sub    esp,0xc
c0014704:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0014706:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001470a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001470f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014712:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0014718:	8b 06                	mov    eax,DWORD PTR [esi]
c001471a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001471d:	57                   	push   edi
c001471e:	e8 4d be fe ff       	call   c0000570 <strlen>
c0014723:	5a                   	pop    edx
c0014724:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0014728:	52                   	push   edx
c0014729:	31 d2                	xor    edx,edx
c001472b:	57                   	push   edi
c001472c:	52                   	push   edx
c001472d:	50                   	push   eax
c001472e:	56                   	push   esi
c001472f:	ff d3                	call   ebx
c0014731:	83 c4 14             	add    esp,0x14
c0014734:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0014738:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001473b:	e8 b0 23 00 00       	call   c0016af0 <terminateTask(int)>
c0014740:	83 c4 40             	add    esp,0x40
c0014743:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0014748:	5b                   	pop    ebx
c0014749:	31 d2                	xor    edx,edx
c001474b:	5e                   	pop    esi
c001474c:	5f                   	pop    edi
c001474d:	c3                   	ret    

c001474e <SysYield(regs*)>:
c001474e:	83 ec 0c             	sub    esp,0xc
c0014751:	fa                   	cli    
c0014752:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0014758:	e8 f3 19 00 00       	call   c0016150 <schedule()>
c001475d:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0014762:	48                   	dec    eax
c0014763:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0014768:	75 01                	jne    c001476b <SysYield(regs*)+0x1d>
c001476a:	fb                   	sti    
c001476b:	31 c0                	xor    eax,eax
c001476d:	31 d2                	xor    edx,edx
c001476f:	83 c4 0c             	add    esp,0xc
c0014772:	c3                   	ret    

c0014773 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0014773:	55                   	push   ebp
c0014774:	57                   	push   edi
c0014775:	56                   	push   esi
c0014776:	53                   	push   ebx
c0014777:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001477d:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0014785:	0f 95 c0             	setne  al
c0014788:	31 d2                	xor    edx,edx
c001478a:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0014792:	0f 94 c2             	sete   dl
c0014795:	85 c2                	test   edx,eax
c0014797:	74 34                	je     c00147cd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0014799:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c00147a4:	74 27                	je     c00147cd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c00147a6:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c00147ad:	05 00 10 00 00       	add    eax,0x1000
c00147b2:	89 c1                	mov    ecx,eax
c00147b4:	25 00 f0 ff ff       	and    eax,0xfffff000
c00147b9:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c00147bf:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c00147c6:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c00147cd:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c00147d4:	83 ec 0c             	sub    esp,0xc
c00147d7:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00147dd:	6a 01                	push   0x1
c00147df:	e8 29 4e ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c00147e4:	83 c4 10             	add    esp,0x10
c00147e7:	89 c3                	mov    ebx,eax
c00147e9:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00147ef:	0f 86 25 01 00 00    	jbe    c001491a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c00147f5:	c1 ee 0c             	shr    esi,0xc
c00147f8:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00147ff:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0014803:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001480b:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0014812:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014816:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c001481d:	29 ef                	sub    edi,ebp
c001481f:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0014823:	0f 83 f8 00 00 00    	jae    c0014921 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ae>
c0014829:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001482f:	76 05                	jbe    c0014836 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c0014831:	bf 00 10 00 00       	mov    edi,0x1000
c0014836:	83 ec 0c             	sub    esp,0xc
c0014839:	31 d2                	xor    edx,edx
c001483b:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0014842:	8b 08                	mov    ecx,DWORD PTR [eax]
c0014844:	8d 44 24 28          	lea    eax,[esp+0x28]
c0014848:	50                   	push   eax
c0014849:	8d 74 24 30          	lea    esi,[esp+0x30]
c001484d:	56                   	push   esi
c001484e:	52                   	push   edx
c001484f:	57                   	push   edi
c0014850:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0014857:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001485a:	83 c4 20             	add    esp,0x20
c001485d:	85 c0                	test   eax,eax
c001485f:	75 06                	jne    c0014867 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf4>
c0014861:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0014865:	74 13                	je     c001487a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x107>
c0014867:	83 ec 0c             	sub    esp,0xc
c001486a:	53                   	push   ebx
c001486b:	e8 bb 50 ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0014870:	83 c4 10             	add    esp,0x10
c0014873:	31 c0                	xor    eax,eax
c0014875:	e9 7c 01 00 00       	jmp    c00149f6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c001487a:	fa                   	cli    
c001487b:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0014881:	e8 39 35 ff ff       	call   c0007dbf <Phys::allocatePage()>
c0014886:	6a 07                	push   0x7
c0014888:	89 c7                	mov    edi,eax
c001488a:	53                   	push   ebx
c001488b:	50                   	push   eax
c001488c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014891:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014894:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001489a:	e8 81 54 ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c001489f:	83 c4 0c             	add    esp,0xc
c00148a2:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00148a9:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00148af:	6a 00                	push   0x0
c00148b1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00148b6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00148b9:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00148bf:	e8 c2 52 ff ff       	call   c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>
c00148c4:	58                   	pop    eax
c00148c5:	5a                   	pop    edx
c00148c6:	68 07 0c 00 00       	push   0xc07
c00148cb:	55                   	push   ebp
c00148cc:	57                   	push   edi
c00148cd:	89 df                	mov    edi,ebx
c00148cf:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00148d6:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00148dc:	6a 00                	push   0x0
c00148de:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00148e3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00148e6:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00148ec:	e8 81 56 ff ff       	call   c0009f72 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00148f1:	b9 00 10 00 00       	mov    ecx,0x1000
c00148f6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00148f8:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00148fd:	83 c4 20             	add    esp,0x20
c0014900:	48                   	dec    eax
c0014901:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0014906:	85 c0                	test   eax,eax
c0014908:	75 01                	jne    c001490b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c001490a:	fb                   	sti    
c001490b:	81 c5 00 10 00 00    	add    ebp,0x1000
c0014911:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014915:	e9 f1 fe ff ff       	jmp    c001480b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x98>
c001491a:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0014921:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0014928:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c001492e:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0014934:	0f 86 ae 00 00 00    	jbe    c00149e8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c001493a:	fa                   	cli    
c001493b:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0014941:	c1 ee 0c             	shr    esi,0xc
c0014944:	51                   	push   ecx
c0014945:	31 ff                	xor    edi,edi
c0014947:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001494e:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014954:	6a 00                	push   0x0
c0014956:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001495b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001495e:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014964:	e8 1d 52 ff ff       	call   c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>
c0014969:	83 c4 10             	add    esp,0x10
c001496c:	e8 4e 34 ff ff       	call   c0007dbf <Phys::allocatePage()>
c0014971:	47                   	inc    edi
c0014972:	6a 07                	push   0x7
c0014974:	53                   	push   ebx
c0014975:	50                   	push   eax
c0014976:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001497a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014980:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0014983:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0014989:	e8 92 53 ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c001498e:	58                   	pop    eax
c001498f:	5a                   	pop    edx
c0014990:	68 07 0c 00 00       	push   0xc07
c0014995:	55                   	push   ebp
c0014996:	81 c5 00 10 00 00    	add    ebp,0x1000
c001499c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00149a0:	50                   	push   eax
c00149a1:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00149a8:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00149ae:	6a 00                	push   0x0
c00149b0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00149b5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00149b8:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00149be:	e8 af 55 ff ff       	call   c0009f72 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00149c3:	83 c4 1c             	add    esp,0x1c
c00149c6:	68 00 10 00 00       	push   0x1000
c00149cb:	6a 00                	push   0x0
c00149cd:	53                   	push   ebx
c00149ce:	e8 1d bb fe ff       	call   c00004f0 <memset>
c00149d3:	83 c4 10             	add    esp,0x10
c00149d6:	39 fe                	cmp    esi,edi
c00149d8:	77 92                	ja     c001496c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f9>
c00149da:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00149df:	48                   	dec    eax
c00149e0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00149e5:	75 01                	jne    c00149e8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c00149e7:	fb                   	sti    
c00149e8:	83 ec 0c             	sub    esp,0xc
c00149eb:	53                   	push   ebx
c00149ec:	e8 3a 4f ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c00149f1:	83 c4 10             	add    esp,0x10
c00149f4:	b0 01                	mov    al,0x1
c00149f6:	81 c4 2c 10 00 00    	add    esp,0x102c
c00149fc:	5b                   	pop    ebx
c00149fd:	5e                   	pop    esi
c00149fe:	5f                   	pop    edi
c00149ff:	5d                   	pop    ebp
c0014a00:	c3                   	ret    

c0014a01 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0014a01:	55                   	push   ebp
c0014a02:	57                   	push   edi
c0014a03:	56                   	push   esi
c0014a04:	53                   	push   ebx
c0014a05:	83 ec 48             	sub    esp,0x48
c0014a08:	68 14 01 00 00       	push   0x114
c0014a0d:	e8 a4 30 ff ff       	call   c0007ab6 <malloc>
c0014a12:	83 c4 0c             	add    esp,0xc
c0014a15:	89 c6                	mov    esi,eax
c0014a17:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0014a1b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0014a1f:	50                   	push   eax
c0014a20:	e8 b7 71 ff ff       	call   c000bbdc <File::File(char const*, Process*)>
c0014a25:	58                   	pop    eax
c0014a26:	5a                   	pop    edx
c0014a27:	6a 01                	push   0x1
c0014a29:	56                   	push   esi
c0014a2a:	e8 cb 71 ff ff       	call   c000bbfa <File::open(FileOpenMode)>
c0014a2f:	83 c4 10             	add    esp,0x10
c0014a32:	85 c0                	test   eax,eax
c0014a34:	0f 85 43 01 00 00    	jne    c0014b7d <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014a3a:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0014a42:	83 ec 0c             	sub    esp,0xc
c0014a45:	6a 34                	push   0x34
c0014a47:	e8 6a 30 ff ff       	call   c0007ab6 <malloc>
c0014a4c:	89 c3                	mov    ebx,eax
c0014a4e:	58                   	pop    eax
c0014a4f:	8b 06                	mov    eax,DWORD PTR [esi]
c0014a51:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0014a55:	57                   	push   edi
c0014a56:	53                   	push   ebx
c0014a57:	6a 00                	push   0x0
c0014a59:	6a 34                	push   0x34
c0014a5b:	56                   	push   esi
c0014a5c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014a5f:	83 c4 20             	add    esp,0x20
c0014a62:	85 c0                	test   eax,eax
c0014a64:	0f 85 13 01 00 00    	jne    c0014b7d <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014a6a:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0014a70:	0f 85 07 01 00 00    	jne    c0014b7d <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014a76:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014a79:	85 c0                	test   eax,eax
c0014a7b:	0f 84 fc 00 00 00    	je     c0014b7d <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014a81:	31 d2                	xor    edx,edx
c0014a83:	55                   	push   ebp
c0014a84:	52                   	push   edx
c0014a85:	50                   	push   eax
c0014a86:	56                   	push   esi
c0014a87:	e8 2c 72 ff ff       	call   c000bcb8 <File::seek(unsigned long long)>
c0014a8c:	83 c4 10             	add    esp,0x10
c0014a8f:	85 c0                	test   eax,eax
c0014a91:	0f 85 e6 00 00 00    	jne    c0014b7d <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014a97:	83 ec 0c             	sub    esp,0xc
c0014a9a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0014a9d:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0014aa1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014aa5:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0014aa9:	0f af c2             	imul   eax,edx
c0014aac:	50                   	push   eax
c0014aad:	e8 04 30 ff ff       	call   c0007ab6 <malloc>
c0014ab2:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0014ab4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014ab8:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014abb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014abf:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0014ac3:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0014ac7:	0f af c2             	imul   eax,edx
c0014aca:	99                   	cdq    
c0014acb:	52                   	push   edx
c0014acc:	50                   	push   eax
c0014acd:	56                   	push   esi
c0014ace:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014ad1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0014ad4:	83 c4 20             	add    esp,0x20
c0014ad7:	85 c0                	test   eax,eax
c0014ad9:	0f 84 9e 00 00 00    	je     c0014b7d <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014adf:	31 d2                	xor    edx,edx
c0014ae1:	51                   	push   ecx
c0014ae2:	52                   	push   edx
c0014ae3:	50                   	push   eax
c0014ae4:	56                   	push   esi
c0014ae5:	e8 ce 71 ff ff       	call   c000bcb8 <File::seek(unsigned long long)>
c0014aea:	83 c4 10             	add    esp,0x10
c0014aed:	85 c0                	test   eax,eax
c0014aef:	0f 85 88 00 00 00    	jne    c0014b7d <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014af5:	83 ec 0c             	sub    esp,0xc
c0014af8:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0014afc:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0014b00:	31 ed                	xor    ebp,ebp
c0014b02:	0f af c2             	imul   eax,edx
c0014b05:	50                   	push   eax
c0014b06:	e8 ab 2f ff ff       	call   c0007ab6 <malloc>
c0014b0b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0014b0d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014b11:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014b14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014b18:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0014b1c:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0014b20:	0f af c2             	imul   eax,edx
c0014b23:	99                   	cdq    
c0014b24:	52                   	push   edx
c0014b25:	50                   	push   eax
c0014b26:	56                   	push   esi
c0014b27:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014b2a:	83 c4 20             	add    esp,0x20
c0014b2d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014b35:	0f b7 fd             	movzx  edi,bp
c0014b38:	66 3b 6b 2c          	cmp    bp,WORD PTR [ebx+0x2c]
c0014b3c:	73 7d                	jae    c0014bbb <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ba>
c0014b3e:	c1 e7 05             	shl    edi,0x5
c0014b41:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0014b45:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0014b48:	75 6b                	jne    c0014bb5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0014b4a:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0014b4d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014b51:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0014b54:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014b58:	52                   	push   edx
c0014b59:	31 d2                	xor    edx,edx
c0014b5b:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0014b5e:	52                   	push   edx
c0014b5f:	50                   	push   eax
c0014b60:	56                   	push   esi
c0014b61:	e8 52 71 ff ff       	call   c000bcb8 <File::seek(unsigned long long)>
c0014b66:	83 c4 10             	add    esp,0x10
c0014b69:	85 c0                	test   eax,eax
c0014b6b:	74 17                	je     c0014b84 <Thr::loadProgramIntoMemory(Process*, char const*)+0x183>
c0014b6d:	83 ec 0c             	sub    esp,0xc
c0014b70:	68 d5 27 02 c0       	push   0xc00227d5
c0014b75:	e8 cb 5d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0014b7a:	83 c4 10             	add    esp,0x10
c0014b7d:	31 c0                	xor    eax,eax
c0014b7f:	e9 87 00 00 00       	jmp    c0014c0b <Thr::loadProgramIntoMemory(Process*, char const*)+0x20a>
c0014b84:	83 ec 0c             	sub    esp,0xc
c0014b87:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014b8a:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0014b8d:	50                   	push   eax
c0014b8e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014b92:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014b96:	56                   	push   esi
c0014b97:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0014b9b:	e8 d3 fb ff ff       	call   c0014773 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0014ba0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014ba4:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0014ba8:	83 c4 20             	add    esp,0x20
c0014bab:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0014baf:	73 04                	jae    c0014bb5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0014bb1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014bb5:	45                   	inc    ebp
c0014bb6:	e9 7a ff ff ff       	jmp    c0014b35 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0014bbb:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0014bbf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014bc3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014bc7:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0014bcd:	83 ec 0c             	sub    esp,0xc
c0014bd0:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0014bd6:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014bdb:	05 00 10 00 00       	add    eax,0x1000
c0014be0:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0014be3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014be7:	e8 da 2e ff ff       	call   c0007ac6 <free>
c0014bec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014bef:	e8 d2 2e ff ff       	call   c0007ac6 <free>
c0014bf4:	58                   	pop    eax
c0014bf5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014bf9:	e8 c8 2e ff ff       	call   c0007ac6 <free>
c0014bfe:	89 34 24             	mov    DWORD PTR [esp],esi
c0014c01:	e8 52 70 ff ff       	call   c000bc58 <File::close()>
c0014c06:	83 c4 10             	add    esp,0x10
c0014c09:	b0 01                	mov    al,0x1
c0014c0b:	83 c4 3c             	add    esp,0x3c
c0014c0e:	5b                   	pop    ebx
c0014c0f:	5e                   	pop    esi
c0014c10:	5f                   	pop    edi
c0014c11:	5d                   	pop    ebp
c0014c12:	c3                   	ret    

c0014c13 <Thr::runtimeReferenceHelper()>:
c0014c13:	83 ec 18             	sub    esp,0x18
c0014c16:	68 dd 27 02 c0       	push   0xc00227dd
c0014c1b:	e8 25 5d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0014c20:	fa                   	cli    
c0014c21:	83 c4 10             	add    esp,0x10
c0014c24:	eb fe                	jmp    c0014c24 <Thr::runtimeReferenceHelper()+0x11>

c0014c26 <Thr::getAddressOfKernelSymbol(char const*)>:
c0014c26:	57                   	push   edi
c0014c27:	56                   	push   esi
c0014c28:	53                   	push   ebx
c0014c29:	31 db                	xor    ebx,ebx
c0014c2b:	39 1d a0 c6 02 c0    	cmp    DWORD PTR ds:0xc002c6a0,ebx
c0014c31:	7e 3c                	jle    c0014c6f <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0014c33:	8b 34 9d 20 c6 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd39e0]
c0014c3a:	31 ff                	xor    edi,edi
c0014c3c:	39 3c 9d 20 c5 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd3ae0],edi
c0014c43:	7e 27                	jle    c0014c6c <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0014c45:	50                   	push   eax
c0014c46:	50                   	push   eax
c0014c47:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014c4b:	8b 06                	mov    eax,DWORD PTR [esi]
c0014c4d:	03 04 9d a0 c5 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd3a60]
c0014c54:	50                   	push   eax
c0014c55:	e8 f6 ba fe ff       	call   c0000750 <strcmp>
c0014c5a:	83 c4 10             	add    esp,0x10
c0014c5d:	85 c0                	test   eax,eax
c0014c5f:	75 05                	jne    c0014c66 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0014c61:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014c64:	eb 0b                	jmp    c0014c71 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0014c66:	83 c6 10             	add    esi,0x10
c0014c69:	47                   	inc    edi
c0014c6a:	eb d0                	jmp    c0014c3c <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0014c6c:	43                   	inc    ebx
c0014c6d:	eb bc                	jmp    c0014c2b <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0014c6f:	31 c0                	xor    eax,eax
c0014c71:	5b                   	pop    ebx
c0014c72:	5e                   	pop    esi
c0014c73:	5f                   	pop    edi
c0014c74:	c3                   	ret    

c0014c75 <Thr::loadKernelSymbolTable(char const*)>:
c0014c75:	55                   	push   ebp
c0014c76:	57                   	push   edi
c0014c77:	56                   	push   esi
c0014c78:	53                   	push   ebx
c0014c79:	83 ec 68             	sub    esp,0x68
c0014c7c:	8b 35 f0 c6 02 c0    	mov    esi,DWORD PTR ds:0xc002c6f0
c0014c82:	68 14 01 00 00       	push   0x114
c0014c87:	e8 2a 2e ff ff       	call   c0007ab6 <malloc>
c0014c8c:	83 c4 0c             	add    esp,0xc
c0014c8f:	89 c3                	mov    ebx,eax
c0014c91:	56                   	push   esi
c0014c92:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0014c96:	50                   	push   eax
c0014c97:	e8 40 6f ff ff       	call   c000bbdc <File::File(char const*, Process*)>
c0014c9c:	5e                   	pop    esi
c0014c9d:	5f                   	pop    edi
c0014c9e:	6a 01                	push   0x1
c0014ca0:	53                   	push   ebx
c0014ca1:	e8 54 6f ff ff       	call   c000bbfa <File::open(FileOpenMode)>
c0014ca6:	83 c4 10             	add    esp,0x10
c0014ca9:	85 c0                	test   eax,eax
c0014cab:	74 0a                	je     c0014cb7 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0014cad:	83 ec 0c             	sub    esp,0xc
c0014cb0:	68 ff 27 02 c0       	push   0xc00227ff
c0014cb5:	eb 34                	jmp    c0014ceb <Thr::loadKernelSymbolTable(char const*)+0x76>
c0014cb7:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0014cbf:	83 ec 0c             	sub    esp,0xc
c0014cc2:	6a 34                	push   0x34
c0014cc4:	e8 ed 2d ff ff       	call   c0007ab6 <malloc>
c0014cc9:	59                   	pop    ecx
c0014cca:	89 c7                	mov    edi,eax
c0014ccc:	8d 74 24 34          	lea    esi,[esp+0x34]
c0014cd0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014cd2:	56                   	push   esi
c0014cd3:	57                   	push   edi
c0014cd4:	6a 00                	push   0x0
c0014cd6:	6a 34                	push   0x34
c0014cd8:	53                   	push   ebx
c0014cd9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014cdc:	83 c4 20             	add    esp,0x20
c0014cdf:	85 c0                	test   eax,eax
c0014ce1:	74 17                	je     c0014cfa <Thr::loadKernelSymbolTable(char const*)+0x85>
c0014ce3:	83 ec 0c             	sub    esp,0xc
c0014ce6:	68 16 28 02 c0       	push   0xc0022816
c0014ceb:	e8 bf c9 ff ff       	call   c00116af <KePanic(char const*)>
c0014cf0:	83 c4 10             	add    esp,0x10
c0014cf3:	31 c0                	xor    eax,eax
c0014cf5:	e9 31 02 00 00       	jmp    c0014f2b <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0014cfa:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0014d00:	75 e1                	jne    c0014ce3 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014d02:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0014d05:	85 c0                	test   eax,eax
c0014d07:	74 da                	je     c0014ce3 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014d09:	52                   	push   edx
c0014d0a:	31 d2                	xor    edx,edx
c0014d0c:	52                   	push   edx
c0014d0d:	50                   	push   eax
c0014d0e:	53                   	push   ebx
c0014d0f:	e8 a4 6f ff ff       	call   c000bcb8 <File::seek(unsigned long long)>
c0014d14:	83 c4 10             	add    esp,0x10
c0014d17:	85 c0                	test   eax,eax
c0014d19:	75 c8                	jne    c0014ce3 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014d1b:	83 ec 0c             	sub    esp,0xc
c0014d1e:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014d22:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014d26:	31 ed                	xor    ebp,ebp
c0014d28:	0f af c2             	imul   eax,edx
c0014d2b:	50                   	push   eax
c0014d2c:	e8 85 2d ff ff       	call   c0007ab6 <malloc>
c0014d31:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014d33:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014d37:	89 34 24             	mov    DWORD PTR [esp],esi
c0014d3a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014d3e:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014d42:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014d46:	0f af c2             	imul   eax,edx
c0014d49:	99                   	cdq    
c0014d4a:	52                   	push   edx
c0014d4b:	50                   	push   eax
c0014d4c:	53                   	push   ebx
c0014d4d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014d50:	83 c4 20             	add    esp,0x20
c0014d53:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014d5b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014d63:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014d6b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014d73:	0f b7 f5             	movzx  esi,bp
c0014d76:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0014d7a:	0f 83 a7 00 00 00    	jae    c0014e27 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0014d80:	6b f6 28             	imul   esi,esi,0x28
c0014d83:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0014d87:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014d8a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014d8e:	50                   	push   eax
c0014d8f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014d93:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0014d97:	8b 16                	mov    edx,DWORD PTR [esi]
c0014d99:	6b c0 28             	imul   eax,eax,0x28
c0014d9c:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0014da0:	89 d0                	mov    eax,edx
c0014da2:	31 d2                	xor    edx,edx
c0014da4:	52                   	push   edx
c0014da5:	50                   	push   eax
c0014da6:	53                   	push   ebx
c0014da7:	e8 0c 6f ff ff       	call   c000bcb8 <File::seek(unsigned long long)>
c0014dac:	83 c4 0c             	add    esp,0xc
c0014daf:	6a 20                	push   0x20
c0014db1:	6a 00                	push   0x0
c0014db3:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014db7:	52                   	push   edx
c0014db8:	e8 33 b7 fe ff       	call   c00004f0 <memset>
c0014dbd:	58                   	pop    eax
c0014dbe:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014dc0:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0014dc4:	51                   	push   ecx
c0014dc5:	8d 54 24 40          	lea    edx,[esp+0x40]
c0014dc9:	52                   	push   edx
c0014dca:	6a 00                	push   0x0
c0014dcc:	6a 1f                	push   0x1f
c0014dce:	53                   	push   ebx
c0014dcf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014dd2:	83 c4 18             	add    esp,0x18
c0014dd5:	68 2d 28 02 c0       	push   0xc002282d
c0014dda:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014dde:	52                   	push   edx
c0014ddf:	e8 6c b9 fe ff       	call   c0000750 <strcmp>
c0014de4:	83 c4 10             	add    esp,0x10
c0014de7:	85 c0                	test   eax,eax
c0014de9:	75 0f                	jne    c0014dfa <Thr::loadKernelSymbolTable(char const*)+0x185>
c0014deb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014dee:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014df2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014df6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014dfa:	50                   	push   eax
c0014dfb:	50                   	push   eax
c0014dfc:	68 35 28 02 c0       	push   0xc0022835
c0014e01:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0014e05:	50                   	push   eax
c0014e06:	e8 45 b9 fe ff       	call   c0000750 <strcmp>
c0014e0b:	83 c4 10             	add    esp,0x10
c0014e0e:	85 c0                	test   eax,eax
c0014e10:	75 0f                	jne    c0014e21 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0014e12:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014e15:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014e19:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014e1d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014e21:	45                   	inc    ebp
c0014e22:	e9 4c ff ff ff       	jmp    c0014d73 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0014e27:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014e2c:	75 10                	jne    c0014e3e <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0014e2e:	83 ec 0c             	sub    esp,0xc
c0014e31:	68 3d 28 02 c0       	push   0xc002283d
c0014e36:	e8 74 c8 ff ff       	call   c00116af <KePanic(char const*)>
c0014e3b:	83 c4 10             	add    esp,0x10
c0014e3e:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014e43:	75 10                	jne    c0014e55 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0014e45:	83 ec 0c             	sub    esp,0xc
c0014e48:	68 3d 28 02 c0       	push   0xc002283d
c0014e4d:	e8 5d c8 ff ff       	call   c00116af <KePanic(char const*)>
c0014e52:	83 c4 10             	add    esp,0x10
c0014e55:	31 d2                	xor    edx,edx
c0014e57:	50                   	push   eax
c0014e58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e5c:	52                   	push   edx
c0014e5d:	50                   	push   eax
c0014e5e:	53                   	push   ebx
c0014e5f:	e8 54 6e ff ff       	call   c000bcb8 <File::seek(unsigned long long)>
c0014e64:	5a                   	pop    edx
c0014e65:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014e69:	e8 48 2c ff ff       	call   c0007ab6 <malloc>
c0014e6e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014e72:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014e76:	31 c9                	xor    ecx,ecx
c0014e78:	5e                   	pop    esi
c0014e79:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014e7b:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0014e7f:	55                   	push   ebp
c0014e80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014e84:	51                   	push   ecx
c0014e85:	52                   	push   edx
c0014e86:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0014e8a:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0014e8e:	53                   	push   ebx
c0014e8f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014e92:	83 c4 14             	add    esp,0x14
c0014e95:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014e99:	e8 18 2c ff ff       	call   c0007ab6 <malloc>
c0014e9e:	89 c6                	mov    esi,eax
c0014ea0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014ea2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014ea5:	56                   	push   esi
c0014ea6:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0014eaa:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0014eae:	51                   	push   ecx
c0014eaf:	52                   	push   edx
c0014eb0:	53                   	push   ebx
c0014eb1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014eb4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014eb8:	8b 15 a0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6a0
c0014ebe:	83 c4 1c             	add    esp,0x1c
c0014ec1:	c1 e8 04             	shr    eax,0x4
c0014ec4:	89 04 95 20 c5 02 c0 	mov    DWORD PTR [edx*4-0x3ffd3ae0],eax
c0014ecb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014ecf:	31 d2                	xor    edx,edx
c0014ed1:	52                   	push   edx
c0014ed2:	50                   	push   eax
c0014ed3:	53                   	push   ebx
c0014ed4:	e8 df 6d ff ff       	call   c000bcb8 <File::seek(unsigned long long)>
c0014ed9:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014edb:	31 d2                	xor    edx,edx
c0014edd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014ee0:	56                   	push   esi
c0014ee1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014ee5:	52                   	push   edx
c0014ee6:	50                   	push   eax
c0014ee7:	53                   	push   ebx
c0014ee8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014eeb:	83 c4 14             	add    esp,0x14
c0014eee:	53                   	push   ebx
c0014eef:	e8 64 6d ff ff       	call   c000bc58 <File::close()>
c0014ef4:	5d                   	pop    ebp
c0014ef5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014ef9:	e8 c8 2b ff ff       	call   c0007ac6 <free>
c0014efe:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014f01:	e8 c0 2b ff ff       	call   c0007ac6 <free>
c0014f06:	a1 a0 c6 02 c0       	mov    eax,ds:0xc002c6a0
c0014f0b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014f0f:	8d 50 01             	lea    edx,[eax+0x1]
c0014f12:	89 0c 85 20 c6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd39e0],ecx
c0014f19:	89 34 85 a0 c5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3a60],esi
c0014f20:	89 15 a0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6a0,edx
c0014f26:	83 c4 10             	add    esp,0x10
c0014f29:	b0 01                	mov    al,0x1
c0014f2b:	83 c4 5c             	add    esp,0x5c
c0014f2e:	5b                   	pop    ebx
c0014f2f:	5e                   	pop    esi
c0014f30:	5f                   	pop    edi
c0014f31:	5d                   	pop    ebp
c0014f32:	c3                   	ret    

c0014f33 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0014f33:	55                   	push   ebp
c0014f34:	57                   	push   edi
c0014f35:	56                   	push   esi
c0014f36:	53                   	push   ebx
c0014f37:	81 ec 68 03 00 00    	sub    esp,0x368
c0014f3d:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0014f44:	8b 1d f0 c6 02 c0    	mov    ebx,DWORD PTR ds:0xc002c6f0
c0014f4a:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0014f4e:	68 14 01 00 00       	push   0x114
c0014f53:	e8 5e 2b ff ff       	call   c0007ab6 <malloc>
c0014f58:	83 c4 0c             	add    esp,0xc
c0014f5b:	89 c5                	mov    ebp,eax
c0014f5d:	53                   	push   ebx
c0014f5e:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0014f65:	50                   	push   eax
c0014f66:	e8 71 6c ff ff       	call   c000bbdc <File::File(char const*, Process*)>
c0014f6b:	5e                   	pop    esi
c0014f6c:	5f                   	pop    edi
c0014f6d:	6a 01                	push   0x1
c0014f6f:	55                   	push   ebp
c0014f70:	e8 85 6c ff ff       	call   c000bbfa <File::open(FileOpenMode)>
c0014f75:	83 c4 10             	add    esp,0x10
c0014f78:	85 c0                	test   eax,eax
c0014f7a:	0f 85 aa 06 00 00    	jne    c001562a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014f80:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0014f88:	83 ec 0c             	sub    esp,0xc
c0014f8b:	6a 34                	push   0x34
c0014f8d:	e8 24 2b ff ff       	call   c0007ab6 <malloc>
c0014f92:	5b                   	pop    ebx
c0014f93:	89 c7                	mov    edi,eax
c0014f95:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0014f99:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014f9c:	53                   	push   ebx
c0014f9d:	57                   	push   edi
c0014f9e:	6a 00                	push   0x0
c0014fa0:	6a 34                	push   0x34
c0014fa2:	55                   	push   ebp
c0014fa3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014fa6:	83 c4 20             	add    esp,0x20
c0014fa9:	85 c0                	test   eax,eax
c0014fab:	0f 85 79 06 00 00    	jne    c001562a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014fb1:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0014fb7:	0f 85 6d 06 00 00    	jne    c001562a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014fbd:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0014fc0:	85 c0                	test   eax,eax
c0014fc2:	0f 84 62 06 00 00    	je     c001562a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014fc8:	31 d2                	xor    edx,edx
c0014fca:	51                   	push   ecx
c0014fcb:	52                   	push   edx
c0014fcc:	50                   	push   eax
c0014fcd:	55                   	push   ebp
c0014fce:	e8 e5 6c ff ff       	call   c000bcb8 <File::seek(unsigned long long)>
c0014fd3:	83 c4 10             	add    esp,0x10
c0014fd6:	85 c0                	test   eax,eax
c0014fd8:	0f 85 4c 06 00 00    	jne    c001562a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014fde:	83 ec 0c             	sub    esp,0xc
c0014fe1:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0014fe4:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014fe8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0014fec:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014ff0:	0f af c2             	imul   eax,edx
c0014ff3:	50                   	push   eax
c0014ff4:	e8 bd 2a ff ff       	call   c0007ab6 <malloc>
c0014ff9:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014ffc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015000:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015003:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015007:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001500b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001500f:	0f af c2             	imul   eax,edx
c0015012:	99                   	cdq    
c0015013:	52                   	push   edx
c0015014:	50                   	push   eax
c0015015:	55                   	push   ebp
c0015016:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015019:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001501c:	83 c4 20             	add    esp,0x20
c001501f:	85 c0                	test   eax,eax
c0015021:	0f 84 03 06 00 00    	je     c001562a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0015027:	52                   	push   edx
c0015028:	31 d2                	xor    edx,edx
c001502a:	52                   	push   edx
c001502b:	50                   	push   eax
c001502c:	55                   	push   ebp
c001502d:	e8 86 6c ff ff       	call   c000bcb8 <File::seek(unsigned long long)>
c0015032:	83 c4 10             	add    esp,0x10
c0015035:	85 c0                	test   eax,eax
c0015037:	0f 85 ed 05 00 00    	jne    c001562a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c001503d:	83 ec 0c             	sub    esp,0xc
c0015040:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0015044:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0015048:	31 f6                	xor    esi,esi
c001504a:	0f af c2             	imul   eax,edx
c001504d:	50                   	push   eax
c001504e:	e8 63 2a ff ff       	call   c0007ab6 <malloc>
c0015053:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015056:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001505a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001505d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015061:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0015065:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0015069:	0f af c2             	imul   eax,edx
c001506c:	99                   	cdq    
c001506d:	52                   	push   edx
c001506e:	50                   	push   eax
c001506f:	55                   	push   ebp
c0015070:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015073:	83 c4 20             	add    esp,0x20
c0015076:	0f b7 de             	movzx  ebx,si
c0015079:	66 3b 77 2c          	cmp    si,WORD PTR [edi+0x2c]
c001507d:	0f 83 87 00 00 00    	jae    c001510a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0015083:	c1 e3 05             	shl    ebx,0x5
c0015086:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001508a:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001508d:	75 75                	jne    c0015104 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001508f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0015092:	31 d2                	xor    edx,edx
c0015094:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015098:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001509b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001509f:	50                   	push   eax
c00150a0:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00150a3:	52                   	push   edx
c00150a4:	50                   	push   eax
c00150a5:	55                   	push   ebp
c00150a6:	e8 0d 6c ff ff       	call   c000bcb8 <File::seek(unsigned long long)>
c00150ab:	83 c4 10             	add    esp,0x10
c00150ae:	85 c0                	test   eax,eax
c00150b0:	0f 85 74 05 00 00    	jne    c001562a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00150b6:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00150bd:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00150c0:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00150c4:	31 d2                	xor    edx,edx
c00150c6:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00150ca:	83 ec 0c             	sub    esp,0xc
c00150cd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00150d1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00150d8:	50                   	push   eax
c00150d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00150dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00150e1:	52                   	push   edx
c00150e2:	50                   	push   eax
c00150e3:	55                   	push   ebp
c00150e4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00150e7:	83 c4 1c             	add    esp,0x1c
c00150ea:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00150ed:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c00150f0:	50                   	push   eax
c00150f1:	6a 00                	push   0x0
c00150f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00150f7:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00150fb:	50                   	push   eax
c00150fc:	e8 ef b3 fe ff       	call   c00004f0 <memset>
c0015101:	83 c4 10             	add    esp,0x10
c0015104:	46                   	inc    esi
c0015105:	e9 6c ff ff ff       	jmp    c0015076 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001510a:	53                   	push   ebx
c001510b:	31 db                	xor    ebx,ebx
c001510d:	68 00 01 00 00       	push   0x100
c0015112:	6a 00                	push   0x0
c0015114:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0015118:	50                   	push   eax
c0015119:	e8 d2 b3 fe ff       	call   c00004f0 <memset>
c001511e:	83 c4 0c             	add    esp,0xc
c0015121:	68 00 01 00 00       	push   0x100
c0015126:	6a 00                	push   0x0
c0015128:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001512f:	50                   	push   eax
c0015130:	e8 bb b3 fe ff       	call   c00004f0 <memset>
c0015135:	83 c4 10             	add    esp,0x10
c0015138:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0015140:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0015148:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0015150:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0015158:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0015160:	0f b7 f3             	movzx  esi,bx
c0015163:	66 3b 5f 30          	cmp    bx,WORD PTR [edi+0x30]
c0015167:	0f 83 2d 01 00 00    	jae    c001529a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001516d:	6b f6 28             	imul   esi,esi,0x28
c0015170:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0015174:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0015177:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001517b:	52                   	push   edx
c001517c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015180:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0015184:	8b 06                	mov    eax,DWORD PTR [esi]
c0015186:	6b d2 28             	imul   edx,edx,0x28
c0015189:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001518d:	31 d2                	xor    edx,edx
c001518f:	52                   	push   edx
c0015190:	50                   	push   eax
c0015191:	55                   	push   ebp
c0015192:	e8 21 6b ff ff       	call   c000bcb8 <File::seek(unsigned long long)>
c0015197:	83 c4 0c             	add    esp,0xc
c001519a:	6a 20                	push   0x20
c001519c:	6a 00                	push   0x0
c001519e:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00151a5:	51                   	push   ecx
c00151a6:	e8 45 b3 fe ff       	call   c00004f0 <memset>
c00151ab:	59                   	pop    ecx
c00151ac:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00151af:	8d 54 24 58          	lea    edx,[esp+0x58]
c00151b3:	52                   	push   edx
c00151b4:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c00151bb:	51                   	push   ecx
c00151bc:	6a 00                	push   0x0
c00151be:	6a 1f                	push   0x1f
c00151c0:	55                   	push   ebp
c00151c1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00151c4:	83 c4 1c             	add    esp,0x1c
c00151c7:	6a 09                	push   0x9
c00151c9:	68 57 28 02 c0       	push   0xc0022857
c00151ce:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00151d5:	51                   	push   ecx
c00151d6:	e8 a5 b1 fe ff       	call   c0000380 <memcmp>
c00151db:	83 c4 10             	add    esp,0x10
c00151de:	85 c0                	test   eax,eax
c00151e0:	75 21                	jne    c0015203 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c00151e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00151e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00151ea:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c00151ee:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00151f2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00151f5:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00151fc:	89 d0                	mov    eax,edx
c00151fe:	40                   	inc    eax
c00151ff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015203:	50                   	push   eax
c0015204:	6a 09                	push   0x9
c0015206:	68 61 28 02 c0       	push   0xc0022861
c001520b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015212:	50                   	push   eax
c0015213:	e8 68 b1 fe ff       	call   c0000380 <memcmp>
c0015218:	83 c4 10             	add    esp,0x10
c001521b:	85 c0                	test   eax,eax
c001521d:	75 21                	jne    c0015240 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001521f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015223:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015227:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001522b:	89 4c 84 50          	mov    DWORD PTR [esp+eax*4+0x50],ecx
c001522f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015232:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0015239:	89 d0                	mov    eax,edx
c001523b:	40                   	inc    eax
c001523c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015240:	50                   	push   eax
c0015241:	50                   	push   eax
c0015242:	68 2d 28 02 c0       	push   0xc002282d
c0015247:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001524e:	50                   	push   eax
c001524f:	e8 fc b4 fe ff       	call   c0000750 <strcmp>
c0015254:	83 c4 10             	add    esp,0x10
c0015257:	85 c0                	test   eax,eax
c0015259:	75 0f                	jne    c001526a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001525b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001525e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015262:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015266:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001526a:	50                   	push   eax
c001526b:	50                   	push   eax
c001526c:	68 35 28 02 c0       	push   0xc0022835
c0015271:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015278:	50                   	push   eax
c0015279:	e8 d2 b4 fe ff       	call   c0000750 <strcmp>
c001527e:	83 c4 10             	add    esp,0x10
c0015281:	85 c0                	test   eax,eax
c0015283:	75 0f                	jne    c0015294 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0015285:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015288:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001528c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015290:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0015294:	43                   	inc    ebx
c0015295:	e9 c6 fe ff ff       	jmp    c0015160 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001529a:	31 d2                	xor    edx,edx
c001529c:	50                   	push   eax
c001529d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00152a1:	52                   	push   edx
c00152a2:	50                   	push   eax
c00152a3:	55                   	push   ebp
c00152a4:	e8 0f 6a ff ff       	call   c000bcb8 <File::seek(unsigned long long)>
c00152a9:	58                   	pop    eax
c00152aa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00152ae:	e8 03 28 ff ff       	call   c0007ab6 <malloc>
c00152b3:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00152b6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00152ba:	31 d2                	xor    edx,edx
c00152bc:	58                   	pop    eax
c00152bd:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c00152c1:	53                   	push   ebx
c00152c2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00152c6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00152ca:	52                   	push   edx
c00152cb:	50                   	push   eax
c00152cc:	55                   	push   ebp
c00152cd:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00152d0:	83 c4 14             	add    esp,0x14
c00152d3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00152d7:	e8 da 27 ff ff       	call   c0007ab6 <malloc>
c00152dc:	31 d2                	xor    edx,edx
c00152de:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00152e2:	83 c4 0c             	add    esp,0xc
c00152e5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00152e9:	52                   	push   edx
c00152ea:	50                   	push   eax
c00152eb:	55                   	push   ebp
c00152ec:	e8 c7 69 ff ff       	call   c000bcb8 <File::seek(unsigned long long)>
c00152f1:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00152f4:	31 d2                	xor    edx,edx
c00152f6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00152f9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00152fd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015301:	52                   	push   edx
c0015302:	50                   	push   eax
c0015303:	55                   	push   ebp
c0015304:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015307:	83 c4 20             	add    esp,0x20
c001530a:	0f b6 44 24 3b       	movzx  eax,BYTE PTR [esp+0x3b]
c001530f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0015317:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001531b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001531f:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0015323:	0f 84 05 03 00 00    	je     c001562e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6fb>
c0015329:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0015330:	31 d2                	xor    edx,edx
c0015332:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015336:	c1 e8 03             	shr    eax,0x3
c0015339:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001533d:	51                   	push   ecx
c001533e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015342:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0015346:	52                   	push   edx
c0015347:	50                   	push   eax
c0015348:	55                   	push   ebp
c0015349:	e8 6a 69 ff ff       	call   c000bcb8 <File::seek(unsigned long long)>
c001534e:	5b                   	pop    ebx
c001534f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015353:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001535a:	e8 57 27 ff ff       	call   c0007ab6 <malloc>
c001535f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015362:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015366:	31 d2                	xor    edx,edx
c0015368:	5e                   	pop    esi
c0015369:	8d 44 24 58          	lea    eax,[esp+0x58]
c001536d:	50                   	push   eax
c001536e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015372:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015376:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001537d:	52                   	push   edx
c001537e:	50                   	push   eax
c001537f:	55                   	push   ebp
c0015380:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015383:	83 c4 20             	add    esp,0x20
c0015386:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001538e:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0015392:	39 5c 24 20          	cmp    DWORD PTR [esp+0x20],ebx
c0015396:	0f 8d 76 02 00 00    	jge    c0015612 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6df>
c001539c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00153a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00153a4:	c6 44 24 3a 00       	mov    BYTE PTR [esp+0x3a],0x0
c00153a9:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c00153ac:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00153b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00153b4:	8b 44 c8 04          	mov    eax,DWORD PTR [eax+ecx*8+0x4]
c00153b8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00153bc:	c1 e8 08             	shr    eax,0x8
c00153bf:	89 c6                	mov    esi,eax
c00153c1:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00153c5:	c1 e6 04             	shl    esi,0x4
c00153c8:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c00153cc:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c00153cf:	85 db                	test   ebx,ebx
c00153d1:	0f 85 b3 00 00 00    	jne    c001548a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c00153d7:	83 ec 0c             	sub    esp,0xc
c00153da:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00153de:	03 06                	add    eax,DWORD PTR [esi]
c00153e0:	50                   	push   eax
c00153e1:	e8 40 f8 ff ff       	call   c0014c26 <Thr::getAddressOfKernelSymbol(char const*)>
c00153e6:	83 c4 10             	add    esp,0x10
c00153e9:	89 c3                	mov    ebx,eax
c00153eb:	c6 44 24 3a 01       	mov    BYTE PTR [esp+0x3a],0x1
c00153f0:	85 c0                	test   eax,eax
c00153f2:	0f 85 92 00 00 00    	jne    c001548a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c00153f8:	83 ec 0c             	sub    esp,0xc
c00153fb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00153ff:	03 06                	add    eax,DWORD PTR [esi]
c0015401:	50                   	push   eax
c0015402:	e8 95 c4 ff ff       	call   c001189c <KeResolveCompatibilitySymbol(char*)>
c0015407:	83 c4 10             	add    esp,0x10
c001540a:	89 c3                	mov    ebx,eax
c001540c:	85 c0                	test   eax,eax
c001540e:	75 7a                	jne    c001548a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0015410:	51                   	push   ecx
c0015411:	51                   	push   ecx
c0015412:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015416:	03 06                	add    eax,DWORD PTR [esi]
c0015418:	50                   	push   eax
c0015419:	68 6b 28 02 c0       	push   0xc002286b
c001541e:	e8 22 55 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0015423:	58                   	pop    eax
c0015424:	5a                   	pop    edx
c0015425:	68 85 28 02 c0       	push   0xc0022885
c001542a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015431:	50                   	push   eax
c0015432:	e8 09 b2 fe ff       	call   c0000640 <strcpy>
c0015437:	59                   	pop    ecx
c0015438:	58                   	pop    eax
c0015439:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001543d:	03 06                	add    eax,DWORD PTR [esi]
c001543f:	50                   	push   eax
c0015440:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015447:	50                   	push   eax
c0015448:	e8 f3 b3 fe ff       	call   c0000840 <strcat>
c001544d:	58                   	pop    eax
c001544e:	5a                   	pop    edx
c001544f:	68 1b 29 02 c0       	push   0xc002291b
c0015454:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001545b:	50                   	push   eax
c001545c:	e8 df b3 fe ff       	call   c0000840 <strcat>
c0015461:	83 c4 10             	add    esp,0x10
c0015464:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0015469:	0f 84 5d 01 00 00    	je     c00155cc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c001546f:	83 ec 0c             	sub    esp,0xc
c0015472:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015479:	50                   	push   eax
c001547a:	e8 30 c2 ff ff       	call   c00116af <KePanic(char const*)>
c001547f:	83 c4 10             	add    esp,0x10
c0015482:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0015486:	88 44 24 3a          	mov    BYTE PTR [esp+0x3a],al
c001548a:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c001548f:	83 f8 01             	cmp    eax,0x1
c0015492:	0f 85 8f 00 00 00    	jne    c0015527 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f4>
c0015498:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001549f:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00154a3:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c00154a7:	01 ce                	add    esi,ecx
c00154a9:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c00154b1:	0f 94 c0             	sete   al
c00154b4:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c00154bc:	0f 94 c2             	sete   dl
c00154bf:	09 c2                	or     edx,eax
c00154c1:	8b 06                	mov    eax,DWORD PTR [esi]
c00154c3:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c00154c8:	0f b6 d2             	movzx  edx,dl
c00154cb:	74 41                	je     c001550e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5db>
c00154cd:	8d 0c 03             	lea    ecx,[ebx+eax*1]
c00154d0:	85 d2                	test   edx,edx
c00154d2:	75 15                	jne    c00154e9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b6>
c00154d4:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00154d8:	66 83 f8 0c          	cmp    ax,0xc
c00154dc:	76 05                	jbe    c00154e3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b0>
c00154de:	b8 0c 00 00 00       	mov    eax,0xc
c00154e3:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00154e7:	76 37                	jbe    c0015520 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c00154e9:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00154ed:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00154f2:	0f 84 d4 00 00 00    	je     c00155cc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c00154f8:	83 ec 0c             	sub    esp,0xc
c00154fb:	68 9c 28 02 c0       	push   0xc002289c
c0015500:	e8 aa c1 ff ff       	call   c00116af <KePanic(char const*)>
c0015505:	83 c4 10             	add    esp,0x10
c0015508:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001550c:	eb 12                	jmp    c0015520 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c001550e:	01 c1                	add    ecx,eax
c0015510:	85 d2                	test   edx,edx
c0015512:	75 0c                	jne    c0015520 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0015514:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015518:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c001551c:	77 02                	ja     c0015520 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c001551e:	01 d9                	add    ecx,ebx
c0015520:	89 0e                	mov    DWORD PTR [esi],ecx
c0015522:	e9 e2 00 00 00       	jmp    c0015609 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0015527:	83 f8 02             	cmp    eax,0x2
c001552a:	75 77                	jne    c00155a3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x670>
c001552c:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0015533:	2b 74 24 24          	sub    esi,DWORD PTR [esp+0x24]
c0015537:	03 74 24 28          	add    esi,DWORD PTR [esp+0x28]
c001553b:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0015543:	74 21                	je     c0015566 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c0015545:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001554d:	74 17                	je     c0015566 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c001554f:	0f b7 57 30          	movzx  edx,WORD PTR [edi+0x30]
c0015553:	b8 0a 00 00 00       	mov    eax,0xa
c0015558:	83 fa 0e             	cmp    edx,0xe
c001555b:	77 03                	ja     c0015560 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62d>
c001555d:	8d 42 fc             	lea    eax,[edx-0x4]
c0015560:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0015564:	76 17                	jbe    c001557d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c0015566:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001556b:	74 5f                	je     c00155cc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c001556d:	83 ec 0c             	sub    esp,0xc
c0015570:	68 b8 28 02 c0       	push   0xc00228b8
c0015575:	e8 35 c1 ff ff       	call   c00116af <KePanic(char const*)>
c001557a:	83 c4 10             	add    esp,0x10
c001557d:	8b 06                	mov    eax,DWORD PTR [esi]
c001557f:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c0015584:	74 13                	je     c0015599 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x666>
c0015586:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001558a:	2b 94 24 74 03 00 00 	sub    edx,DWORD PTR [esp+0x374]
c0015591:	2b 54 24 28          	sub    edx,DWORD PTR [esp+0x28]
c0015595:	01 d0                	add    eax,edx
c0015597:	eb 04                	jmp    c001559d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0015599:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001559d:	01 c3                	add    ebx,eax
c001559f:	89 1e                	mov    DWORD PTR [esi],ebx
c00155a1:	eb 66                	jmp    c0015609 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c00155a3:	52                   	push   edx
c00155a4:	52                   	push   edx
c00155a5:	50                   	push   eax
c00155a6:	68 d4 28 02 c0       	push   0xc00228d4
c00155ab:	e8 95 53 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00155b0:	83 c4 10             	add    esp,0x10
c00155b3:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00155b8:	74 12                	je     c00155cc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c00155ba:	83 ec 0c             	sub    esp,0xc
c00155bd:	68 df 28 02 c0       	push   0xc00228df
c00155c2:	e8 e8 c0 ff ff       	call   c00116af <KePanic(char const*)>
c00155c7:	83 c4 10             	add    esp,0x10
c00155ca:	eb 3d                	jmp    c0015609 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c00155cc:	83 ec 0c             	sub    esp,0xc
c00155cf:	55                   	push   ebp
c00155d0:	e8 83 66 ff ff       	call   c000bc58 <File::close()>
c00155d5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00155d8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00155db:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00155de:	59                   	pop    ecx
c00155df:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00155e3:	e8 de 24 ff ff       	call   c0007ac6 <free>
c00155e8:	5b                   	pop    ebx
c00155e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00155ed:	e8 d4 24 ff ff       	call   c0007ac6 <free>
c00155f2:	89 3c 24             	mov    DWORD PTR [esp],edi
c00155f5:	e8 cc 24 ff ff       	call   c0007ac6 <free>
c00155fa:	5e                   	pop    esi
c00155fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00155ff:	e8 c2 24 ff ff       	call   c0007ac6 <free>
c0015604:	83 c4 10             	add    esp,0x10
c0015607:	eb 21                	jmp    c001562a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0015609:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001560d:	e9 7c fd ff ff       	jmp    c001538e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x45b>
c0015612:	83 ec 0c             	sub    esp,0xc
c0015615:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015619:	e8 a8 24 ff ff       	call   c0007ac6 <free>
c001561e:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0015622:	83 c4 10             	add    esp,0x10
c0015625:	e9 f1 fc ff ff       	jmp    c001531b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3e8>
c001562a:	31 c0                	xor    eax,eax
c001562c:	eb 33                	jmp    c0015661 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72e>
c001562e:	83 ec 0c             	sub    esp,0xc
c0015631:	55                   	push   ebp
c0015632:	e8 21 66 ff ff       	call   c000bc58 <File::close()>
c0015637:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001563a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001563d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015640:	58                   	pop    eax
c0015641:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015645:	e8 7c 24 ff ff       	call   c0007ac6 <free>
c001564a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001564d:	e8 74 24 ff ff       	call   c0007ac6 <free>
c0015652:	5a                   	pop    edx
c0015653:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015657:	e8 6a 24 ff ff       	call   c0007ac6 <free>
c001565c:	83 c4 10             	add    esp,0x10
c001565f:	b0 01                	mov    al,0x1
c0015661:	81 c4 5c 03 00 00    	add    esp,0x35c
c0015667:	5b                   	pop    ebx
c0015668:	5e                   	pop    esi
c0015669:	5f                   	pop    edi
c001566a:	5d                   	pop    ebp
c001566b:	c3                   	ret    

c001566c <Thr::getDriverBaseFromAddress(unsigned long)>:
c001566c:	56                   	push   esi
c001566d:	31 d2                	xor    edx,edx
c001566f:	53                   	push   ebx
c0015670:	8b 1d 00 bf 02 c0    	mov    ebx,DWORD PTR ds:0xc002bf00
c0015676:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001567a:	39 d3                	cmp    ebx,edx
c001567c:	7e 1b                	jle    c0015699 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001567e:	8b 04 95 20 c1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd3ee0]
c0015685:	39 c8                	cmp    eax,ecx
c0015687:	77 0d                	ja     c0015696 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0015689:	8b 34 95 20 bf 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd40e0]
c0015690:	01 c6                	add    esi,eax
c0015692:	39 ce                	cmp    esi,ecx
c0015694:	77 05                	ja     c001569b <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0015696:	42                   	inc    edx
c0015697:	eb e1                	jmp    c001567a <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0015699:	31 c0                	xor    eax,eax
c001569b:	5b                   	pop    ebx
c001569c:	5e                   	pop    esi
c001569d:	c3                   	ret    

c001569e <Thr::getDriverNameFromAddress(unsigned long)>:
c001569e:	53                   	push   ebx
c001569f:	31 c0                	xor    eax,eax
c00156a1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00156a5:	8b 1d 00 bf 02 c0    	mov    ebx,DWORD PTR ds:0xc002bf00
c00156ab:	39 c3                	cmp    ebx,eax
c00156ad:	7e 22                	jle    c00156d1 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c00156af:	8b 14 85 20 c1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3ee0]
c00156b6:	39 ca                	cmp    edx,ecx
c00156b8:	77 14                	ja     c00156ce <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00156ba:	03 14 85 20 bf 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd40e0]
c00156c1:	39 ca                	cmp    edx,ecx
c00156c3:	76 09                	jbe    c00156ce <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00156c5:	8b 04 85 20 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3ce0]
c00156cc:	eb 05                	jmp    c00156d3 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c00156ce:	40                   	inc    eax
c00156cf:	eb da                	jmp    c00156ab <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c00156d1:	31 c0                	xor    eax,eax
c00156d3:	5b                   	pop    ebx
c00156d4:	c3                   	ret    

c00156d5 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c00156d5:	53                   	push   ebx
c00156d6:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00156da:	53                   	push   ebx
c00156db:	e8 8c ff ff ff       	call   c001566c <Thr::getDriverBaseFromAddress(unsigned long)>
c00156e0:	5a                   	pop    edx
c00156e1:	31 d2                	xor    edx,edx
c00156e3:	85 c0                	test   eax,eax
c00156e5:	74 04                	je     c00156eb <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c00156e7:	89 da                	mov    edx,ebx
c00156e9:	29 c2                	sub    edx,eax
c00156eb:	89 d0                	mov    eax,edx
c00156ed:	5b                   	pop    ebx
c00156ee:	c3                   	ret    

c00156ef <Thr::loadDLL(char const*, bool)>:
c00156ef:	55                   	push   ebp
c00156f0:	57                   	push   edi
c00156f1:	56                   	push   esi
c00156f2:	53                   	push   ebx
c00156f3:	81 ec 34 01 00 00    	sub    esp,0x134
c00156f9:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0015700:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0015707:	56                   	push   esi
c0015708:	68 f7 28 02 c0       	push   0xc00228f7
c001570d:	e8 33 52 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0015712:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015719:	e8 98 23 ff ff       	call   c0007ab6 <malloc>
c001571e:	83 c4 0c             	add    esp,0xc
c0015721:	89 c3                	mov    ebx,eax
c0015723:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0015729:	56                   	push   esi
c001572a:	50                   	push   eax
c001572b:	e8 ac 64 ff ff       	call   c000bbdc <File::File(char const*, Process*)>
c0015730:	83 c4 10             	add    esp,0x10
c0015733:	85 db                	test   ebx,ebx
c0015735:	75 3c                	jne    c0015773 <Thr::loadDLL(char const*, bool)+0x84>
c0015737:	89 f8                	mov    eax,edi
c0015739:	84 c0                	test   al,al
c001573b:	0f 84 d2 01 00 00    	je     c0015913 <Thr::loadDLL(char const*, bool)+0x224>
c0015741:	55                   	push   ebp
c0015742:	55                   	push   ebp
c0015743:	68 08 29 02 c0       	push   0xc0022908
c0015748:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c001574c:	55                   	push   ebp
c001574d:	e8 ee ae fe ff       	call   c0000640 <strcpy>
c0015752:	58                   	pop    eax
c0015753:	5a                   	pop    edx
c0015754:	56                   	push   esi
c0015755:	55                   	push   ebp
c0015756:	e8 e5 b0 fe ff       	call   c0000840 <strcat>
c001575b:	59                   	pop    ecx
c001575c:	58                   	pop    eax
c001575d:	68 1b 29 02 c0       	push   0xc002291b
c0015762:	55                   	push   ebp
c0015763:	e8 d8 b0 fe ff       	call   c0000840 <strcat>
c0015768:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001576b:	e8 3f bf ff ff       	call   c00116af <KePanic(char const*)>
c0015770:	83 c4 10             	add    esp,0x10
c0015773:	51                   	push   ecx
c0015774:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0015778:	50                   	push   eax
c0015779:	8d 44 24 20          	lea    eax,[esp+0x20]
c001577d:	50                   	push   eax
c001577e:	53                   	push   ebx
c001577f:	e8 78 67 ff ff       	call   c000befc <File::stat(unsigned long long*, bool*)>
c0015784:	83 c4 10             	add    esp,0x10
c0015787:	85 db                	test   ebx,ebx
c0015789:	74 0c                	je     c0015797 <Thr::loadDLL(char const*, bool)+0xa8>
c001578b:	83 ec 0c             	sub    esp,0xc
c001578e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015790:	53                   	push   ebx
c0015791:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015794:	83 c4 10             	add    esp,0x10
c0015797:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001579c:	75 0a                	jne    c00157a8 <Thr::loadDLL(char const*, bool)+0xb9>
c001579e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00157a2:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c00157a6:	75 3c                	jne    c00157e4 <Thr::loadDLL(char const*, bool)+0xf5>
c00157a8:	89 f8                	mov    eax,edi
c00157aa:	84 c0                	test   al,al
c00157ac:	0f 84 49 01 00 00    	je     c00158fb <Thr::loadDLL(char const*, bool)+0x20c>
c00157b2:	51                   	push   ecx
c00157b3:	51                   	push   ecx
c00157b4:	68 08 29 02 c0       	push   0xc0022908
c00157b9:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00157bd:	53                   	push   ebx
c00157be:	e8 7d ae fe ff       	call   c0000640 <strcpy>
c00157c3:	5d                   	pop    ebp
c00157c4:	58                   	pop    eax
c00157c5:	56                   	push   esi
c00157c6:	53                   	push   ebx
c00157c7:	e8 74 b0 fe ff       	call   c0000840 <strcat>
c00157cc:	58                   	pop    eax
c00157cd:	5a                   	pop    edx
c00157ce:	68 1b 29 02 c0       	push   0xc002291b
c00157d3:	53                   	push   ebx
c00157d4:	e8 67 b0 fe ff       	call   c0000840 <strcat>
c00157d9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00157dc:	e8 ce be ff ff       	call   c00116af <KePanic(char const*)>
c00157e1:	83 c4 10             	add    esp,0x10
c00157e4:	52                   	push   edx
c00157e5:	6a 03                	push   0x3
c00157e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00157eb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00157ef:	05 ff 0f 00 00       	add    eax,0xfff
c00157f4:	83 d2 00             	adc    edx,0x0
c00157f7:	0f ac d0 0c          	shrd   eax,edx,0xc
c00157fb:	50                   	push   eax
c00157fc:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c0015802:	e8 1d 46 ff ff       	call   c0009e24 <VAS::allocatePages(int, int)>
c0015807:	59                   	pop    ecx
c0015808:	89 c3                	mov    ebx,eax
c001580a:	5d                   	pop    ebp
c001580b:	50                   	push   eax
c001580c:	68 52 0e 02 c0       	push   0xc0020e52
c0015811:	e8 2f 51 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0015816:	89 34 24             	mov    DWORD PTR [esp],esi
c0015819:	e8 52 ad fe ff       	call   c0000570 <strlen>
c001581e:	8b 2d 00 bf 02 c0    	mov    ebp,DWORD PTR ds:0xc002bf00
c0015824:	40                   	inc    eax
c0015825:	89 04 24             	mov    DWORD PTR [esp],eax
c0015828:	e8 89 22 ff ff       	call   c0007ab6 <malloc>
c001582d:	89 04 ad 20 c3 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd3ce0],eax
c0015834:	58                   	pop    eax
c0015835:	a1 00 bf 02 c0       	mov    eax,ds:0xc002bf00
c001583a:	5a                   	pop    edx
c001583b:	56                   	push   esi
c001583c:	ff 34 85 20 c3 02 c0 	push   DWORD PTR [eax*4-0x3ffd3ce0]
c0015843:	e8 f8 ad fe ff       	call   c0000640 <strcpy>
c0015848:	a1 00 bf 02 c0       	mov    eax,ds:0xc002bf00
c001584d:	8d 50 01             	lea    edx,[eax+0x1]
c0015850:	89 1c 85 20 c1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3ee0],ebx
c0015857:	89 15 00 bf 02 c0    	mov    DWORD PTR ds:0xc002bf00,edx
c001585d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015861:	83 c4 0c             	add    esp,0xc
c0015864:	89 14 85 20 bf 02 c0 	mov    DWORD PTR [eax*4-0x3ffd40e0],edx
c001586b:	6a 01                	push   0x1
c001586d:	53                   	push   ebx
c001586e:	56                   	push   esi
c001586f:	e8 bf f6 ff ff       	call   c0014f33 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0015874:	83 c4 10             	add    esp,0x10
c0015877:	0f b6 c0             	movzx  eax,al
c001587a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001587e:	85 c0                	test   eax,eax
c0015880:	0f 85 89 00 00 00    	jne    c001590f <Thr::loadDLL(char const*, bool)+0x220>
c0015886:	89 f8                	mov    eax,edi
c0015888:	84 c0                	test   al,al
c001588a:	74 73                	je     c00158ff <Thr::loadDLL(char const*, bool)+0x210>
c001588c:	83 ec 0c             	sub    esp,0xc
c001588f:	68 1d 29 02 c0       	push   0xc002291d
c0015894:	e8 16 be ff ff       	call   c00116af <KePanic(char const*)>
c0015899:	83 c4 10             	add    esp,0x10
c001589c:	eb 61                	jmp    c00158ff <Thr::loadDLL(char const*, bool)+0x210>
c001589e:	50                   	push   eax
c001589f:	50                   	push   eax
c00158a0:	89 e8                	mov    eax,ebp
c00158a2:	c1 e0 0c             	shl    eax,0xc
c00158a5:	01 d8                	add    eax,ebx
c00158a7:	50                   	push   eax
c00158a8:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c00158ae:	e8 59 40 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c00158b3:	83 c4 10             	add    esp,0x10
c00158b6:	8b 00                	mov    eax,DWORD PTR [eax]
c00158b8:	a8 60                	test   al,0x60
c00158ba:	75 11                	jne    c00158cd <Thr::loadDLL(char const*, bool)+0x1de>
c00158bc:	83 ec 0c             	sub    esp,0xc
c00158bf:	25 00 f0 ff ff       	and    eax,0xfffff000
c00158c4:	50                   	push   eax
c00158c5:	e8 8c 24 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c00158ca:	83 c4 10             	add    esp,0x10
c00158cd:	45                   	inc    ebp
c00158ce:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00158d2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00158d6:	05 ff 0f 00 00       	add    eax,0xfff
c00158db:	bf 00 00 00 00       	mov    edi,0x0
c00158e0:	83 d2 00             	adc    edx,0x0
c00158e3:	0f ac d0 0c          	shrd   eax,edx,0xc
c00158e7:	c1 ea 0c             	shr    edx,0xc
c00158ea:	39 c5                	cmp    ebp,eax
c00158ec:	89 d1                	mov    ecx,edx
c00158ee:	89 f8                	mov    eax,edi
c00158f0:	19 c8                	sbb    eax,ecx
c00158f2:	72 aa                	jb     c001589e <Thr::loadDLL(char const*, bool)+0x1af>
c00158f4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00158f9:	75 18                	jne    c0015913 <Thr::loadDLL(char const*, bool)+0x224>
c00158fb:	31 db                	xor    ebx,ebx
c00158fd:	eb 14                	jmp    c0015913 <Thr::loadDLL(char const*, bool)+0x224>
c00158ff:	83 ec 0c             	sub    esp,0xc
c0015902:	68 3c 29 02 c0       	push   0xc002293c
c0015907:	e8 a3 bd ff ff       	call   c00116af <KePanic(char const*)>
c001590c:	83 c4 10             	add    esp,0x10
c001590f:	31 ed                	xor    ebp,ebp
c0015911:	eb bb                	jmp    c00158ce <Thr::loadDLL(char const*, bool)+0x1df>
c0015913:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015919:	89 d8                	mov    eax,ebx
c001591b:	5b                   	pop    ebx
c001591c:	5e                   	pop    esi
c001591d:	5f                   	pop    edi
c001591e:	5d                   	pop    ebp
c001591f:	c3                   	ret    

c0015920 <Thr::executeDLL(unsigned long, void*)>:
c0015920:	56                   	push   esi
c0015921:	53                   	push   ebx
c0015922:	52                   	push   edx
c0015923:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015927:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001592b:	85 db                	test   ebx,ebx
c001592d:	75 10                	jne    c001593f <Thr::executeDLL(unsigned long, void*)+0x1f>
c001592f:	83 ec 0c             	sub    esp,0xc
c0015932:	68 58 29 02 c0       	push   0xc0022958
c0015937:	e8 73 bd ff ff       	call   c00116af <KePanic(char const*)>
c001593c:	83 c4 10             	add    esp,0x10
c001593f:	50                   	push   eax
c0015940:	50                   	push   eax
c0015941:	53                   	push   ebx
c0015942:	68 82 29 02 c0       	push   0xc0022982
c0015947:	e8 f9 4f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001594c:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015950:	89 d8                	mov    eax,ebx
c0015952:	83 c4 14             	add    esp,0x14
c0015955:	5b                   	pop    ebx
c0015956:	5e                   	pop    esi
c0015957:	ff e0                	jmp    eax
c0015959:	66 90                	xchg   ax,ax
c001595b:	90                   	nop

c001595c <userModeEntryPoint(void*)>:
c001595c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0015961:	83 e8 01             	sub    eax,0x1
c0015964:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0015969:	75 01                	jne    c001596c <userModeEntryPoint(void*)+0x10>
c001596b:	fb                   	sti    
c001596c:	fb                   	sti    
c001596d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015972:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015975:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c001597b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001597f:	e9 bb a8 fe ff       	jmp    c000023f <goToUsermode>

c0015984 <changeTSS>:
c0015984:	83 ec 14             	sub    esp,0x14
c0015987:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001598c:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001598f:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0015994:	c1 e2 15             	shl    edx,0x15
c0015997:	29 d0                	sub    eax,edx
c0015999:	50                   	push   eax
c001599a:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001599f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00159a5:	05 7c 11 00 00       	add    eax,0x117c
c00159aa:	50                   	push   eax
c00159ab:	e8 a4 35 ff ff       	call   c0008f54 <TSS::setESP(unsigned long)>
c00159b0:	83 c4 1c             	add    esp,0x1c
c00159b3:	c3                   	ret    

c00159b4 <switchToThread(ThreadControlBlock*)>:
c00159b4:	57                   	push   edi
c00159b5:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c00159bb:	56                   	push   esi
c00159bc:	85 c9                	test   ecx,ecx
c00159be:	53                   	push   ebx
c00159bf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00159c3:	0f 85 8b 00 00 00    	jne    c0015a54 <switchToThread(ThreadControlBlock*)+0xa0>
c00159c9:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c00159cd:	81 fa ff 00 00 00    	cmp    edx,0xff
c00159d3:	74 7b                	je     c0015a50 <switchToThread(ThreadControlBlock*)+0x9c>
c00159d5:	b8 00 04 00 00       	mov    eax,0x400
c00159da:	29 d0                	sub    eax,edx
c00159dc:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00159df:	d1 f8                	sar    eax,1
c00159e1:	01 d0                	add    eax,edx
c00159e3:	90                   	nop
c00159e4:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00159e7:	e8 1e 28 00 00       	call   c001820a <HalQueryPerformanceCounter()>
c00159ec:	a3 08 c7 02 c0       	mov    ds:0xc002c708,eax
c00159f1:	89 15 0c c7 02 c0    	mov    DWORD PTR ds:0xc002c70c,edx
c00159f7:	89 c6                	mov    esi,eax
c00159f9:	89 d7                	mov    edi,edx
c00159fb:	2b 35 f8 c6 02 c0    	sub    esi,DWORD PTR ds:0xc002c6f8
c0015a01:	a3 f8 c6 02 c0       	mov    ds:0xc002c6f8,eax
c0015a06:	1b 3d fc c6 02 c0    	sbb    edi,DWORD PTR ds:0xc002c6fc
c0015a0c:	89 35 00 c7 02 c0    	mov    DWORD PTR ds:0xc002c700,esi
c0015a12:	89 3d 04 c7 02 c0    	mov    DWORD PTR ds:0xc002c704,edi
c0015a18:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015a1e:	89 15 fc c6 02 c0    	mov    DWORD PTR ds:0xc002c6fc,edx
c0015a24:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0015a27:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0015a2a:	01 c6                	add    esi,eax
c0015a2c:	11 d7                	adc    edi,edx
c0015a2e:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0015a31:	83 ec 0c             	sub    esp,0xc
c0015a34:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0015a37:	53                   	push   ebx
c0015a38:	e8 3a a8 fe ff       	call   c0000277 <switchToThreadASM>
c0015a3d:	0f 20 c0             	mov    eax,cr0
c0015a40:	83 c8 08             	or     eax,0x8
c0015a43:	0f 22 c0             	mov    cr0,eax
c0015a46:	83 c4 10             	add    esp,0x10
c0015a49:	5b                   	pop    ebx
c0015a4a:	5e                   	pop    esi
c0015a4b:	5f                   	pop    edi
c0015a4c:	c3                   	ret    
c0015a4d:	8d 76 00             	lea    esi,[esi+0x0]
c0015a50:	31 c0                	xor    eax,eax
c0015a52:	eb 90                	jmp    c00159e4 <switchToThread(ThreadControlBlock*)+0x30>
c0015a54:	5b                   	pop    ebx
c0015a55:	c7 05 c0 c6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x1
c0015a5f:	5e                   	pop    esi
c0015a60:	5f                   	pop    edi
c0015a61:	c3                   	ret    
c0015a62:	66 90                	xchg   ax,ax

c0015a64 <Process::addArgs(char**)>:
c0015a64:	57                   	push   edi
c0015a65:	56                   	push   esi
c0015a66:	53                   	push   ebx
c0015a67:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015a6b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0015a6f:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0015a79:	85 ff                	test   edi,edi
c0015a7b:	74 4f                	je     c0015acc <Process::addArgs(char**)+0x68>
c0015a7d:	8b 07                	mov    eax,DWORD PTR [edi]
c0015a7f:	85 c0                	test   eax,eax
c0015a81:	74 49                	je     c0015acc <Process::addArgs(char**)+0x68>
c0015a83:	31 db                	xor    ebx,ebx
c0015a85:	8d 76 00             	lea    esi,[esi+0x0]
c0015a88:	83 ec 0c             	sub    esp,0xc
c0015a8b:	50                   	push   eax
c0015a8c:	e8 df aa fe ff       	call   c0000570 <strlen>
c0015a91:	83 c0 01             	add    eax,0x1
c0015a94:	89 04 24             	mov    DWORD PTR [esp],eax
c0015a97:	e8 1a 20 ff ff       	call   c0007ab6 <malloc>
c0015a9c:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0015aa3:	5a                   	pop    edx
c0015aa4:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0015aa7:	59                   	pop    ecx
c0015aa8:	83 c3 01             	add    ebx,0x1
c0015aab:	52                   	push   edx
c0015aac:	50                   	push   eax
c0015aad:	e8 8e ab fe ff       	call   c0000640 <strcpy>
c0015ab2:	8b 8e 16 05 00 00    	mov    ecx,DWORD PTR [esi+0x516]
c0015ab8:	83 c4 10             	add    esp,0x10
c0015abb:	83 c1 01             	add    ecx,0x1
c0015abe:	89 8e 16 05 00 00    	mov    DWORD PTR [esi+0x516],ecx
c0015ac4:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0015ac7:	85 c0                	test   eax,eax
c0015ac9:	75 bd                	jne    c0015a88 <Process::addArgs(char**)+0x24>
c0015acb:	90                   	nop
c0015acc:	5b                   	pop    ebx
c0015acd:	5e                   	pop    esi
c0015ace:	5f                   	pop    edi
c0015acf:	c3                   	ret    

c0015ad0 <Process::Process(char const*, Process*, char**)>:
c0015ad0:	56                   	push   esi
c0015ad1:	53                   	push   ebx
c0015ad2:	83 ec 14             	sub    esp,0x14
c0015ad5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ad9:	05 0c 02 00 00       	add    eax,0x20c
c0015ade:	bb 07 00 00 00       	mov    ebx,0x7
c0015ae3:	89 c6                	mov    esi,eax
c0015ae5:	8d 76 00             	lea    esi,[esi+0x0]
c0015ae8:	85 db                	test   ebx,ebx
c0015aea:	78 14                	js     c0015b00 <Process::Process(char const*, Process*, char**)+0x30>
c0015aec:	83 ec 0c             	sub    esp,0xc
c0015aef:	56                   	push   esi
c0015af0:	e8 e3 a5 00 00       	call   c00200d8 <ThreadControlBlock::ThreadControlBlock()>
c0015af5:	83 c4 10             	add    esp,0x10
c0015af8:	83 c6 5f             	add    esi,0x5f
c0015afb:	83 eb 01             	sub    ebx,0x1
c0015afe:	eb e8                	jmp    c0015ae8 <Process::Process(char const*, Process*, char**)+0x18>
c0015b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b04:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015b0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b0f:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0015b16:	83 ec 0c             	sub    esp,0xc
c0015b19:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015b1d:	e8 82 b9 ff ff       	call   c00114a4 <KeNewProcessEnv(Process*)>
c0015b22:	83 c4 10             	add    esp,0x10
c0015b25:	89 c2                	mov    edx,eax
c0015b27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b2b:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015b31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b35:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0015b3e:	a1 a0 3f 02 c0       	mov    eax,ds:0xc0023fa0
c0015b43:	8d 50 01             	lea    edx,[eax+0x1]
c0015b46:	89 15 a0 3f 02 c0    	mov    DWORD PTR ds:0xc0023fa0,edx
c0015b4c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015b50:	89 02                	mov    DWORD PTR [edx],eax
c0015b52:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0015b5a:	83 ec 0c             	sub    esp,0xc
c0015b5d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015b61:	e8 50 1f ff ff       	call   c0007ab6 <malloc>
c0015b66:	83 c4 10             	add    esp,0x10
c0015b69:	89 c3                	mov    ebx,eax
c0015b6b:	83 ec 08             	sub    esp,0x8
c0015b6e:	6a 00                	push   0x0
c0015b70:	53                   	push   ebx
c0015b71:	e8 f2 44 ff ff       	call   c000a068 <VAS::VAS(bool)>
c0015b76:	83 c4 10             	add    esp,0x10
c0015b79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b7d:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015b83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b87:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015b91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b95:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015b99:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015b9f:	e8 26 bf ff ff       	call   c0011aca <KeInitSignals()>
c0015ba4:	89 c2                	mov    edx,eax
c0015ba6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015baa:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015bb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bb4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015bba:	85 c0                	test   eax,eax
c0015bbc:	74 42                	je     c0015c00 <Process::Process(char const*, Process*, char**)+0x130>
c0015bbe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bc2:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015bc8:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015bce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bd2:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015bd8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bdc:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015be2:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015be8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bec:	05 0c 01 00 00       	add    eax,0x10c
c0015bf1:	83 ec 08             	sub    esp,0x8
c0015bf4:	52                   	push   edx
c0015bf5:	50                   	push   eax
c0015bf6:	e8 45 aa fe ff       	call   c0000640 <strcpy>
c0015bfb:	83 c4 10             	add    esp,0x10
c0015bfe:	eb 64                	jmp    c0015c64 <Process::Process(char const*, Process*, char**)+0x194>
c0015c00:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0015c08:	83 ec 0c             	sub    esp,0xc
c0015c0b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015c0f:	e8 a2 1e ff ff       	call   c0007ab6 <malloc>
c0015c14:	83 c4 10             	add    esp,0x10
c0015c17:	89 c3                	mov    ebx,eax
c0015c19:	83 ec 08             	sub    esp,0x8
c0015c1c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c20:	53                   	push   ebx
c0015c21:	e8 40 30 ff ff       	call   c0008c66 <VgaText::VgaText(char const*)>
c0015c26:	83 c4 10             	add    esp,0x10
c0015c29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c2d:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015c33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c37:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015c3d:	83 ec 0c             	sub    esp,0xc
c0015c40:	50                   	push   eax
c0015c41:	e8 be 28 ff ff       	call   c0008504 <addToTerminalCycle(VgaText*)>
c0015c46:	83 c4 10             	add    esp,0x10
c0015c49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c4d:	05 0c 01 00 00       	add    eax,0x10c
c0015c52:	83 ec 08             	sub    esp,0x8
c0015c55:	68 a1 29 02 c0       	push   0xc00229a1
c0015c5a:	50                   	push   eax
c0015c5b:	e8 e0 a9 fe ff       	call   c0000640 <strcpy>
c0015c60:	83 c4 10             	add    esp,0x10
c0015c63:	90                   	nop
c0015c64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c68:	83 c0 0c             	add    eax,0xc
c0015c6b:	83 ec 08             	sub    esp,0x8
c0015c6e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c72:	50                   	push   eax
c0015c73:	e8 c8 a9 fe ff       	call   c0000640 <strcpy>
c0015c78:	83 c4 10             	add    esp,0x10
c0015c7b:	83 ec 08             	sub    esp,0x8
c0015c7e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0015c82:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c86:	e8 d9 fd ff ff       	call   c0015a64 <Process::addArgs(char**)>
c0015c8b:	83 c4 10             	add    esp,0x10
c0015c8e:	83 ec 08             	sub    esp,0x8
c0015c91:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c99:	e8 63 ed ff ff       	call   c0014a01 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0015c9e:	83 c4 10             	add    esp,0x10
c0015ca1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015ca5:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015ca9:	83 f0 01             	xor    eax,0x1
c0015cac:	88 c2                	mov    dl,al
c0015cae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015cb2:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0015cb8:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0015cbd:	83 ec 04             	sub    esp,0x4
c0015cc0:	50                   	push   eax
c0015cc1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015cc5:	68 f8 29 02 c0       	push   0xc00229f8
c0015cca:	e8 76 4c ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0015ccf:	83 c4 10             	add    esp,0x10
c0015cd2:	90                   	nop
c0015cd3:	83 c4 14             	add    esp,0x14
c0015cd6:	5b                   	pop    ebx
c0015cd7:	5e                   	pop    esi
c0015cd8:	c3                   	ret    
c0015cd9:	90                   	nop
c0015cda:	66 90                	xchg   ax,ax

c0015cdc <Process::Process(bool, char const*, Process*, char**)>:
c0015cdc:	56                   	push   esi
c0015cdd:	53                   	push   ebx
c0015cde:	83 ec 24             	sub    esp,0x24
c0015ce1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015ce5:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015ce9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015ced:	05 0c 02 00 00       	add    eax,0x20c
c0015cf2:	bb 07 00 00 00       	mov    ebx,0x7
c0015cf7:	89 c6                	mov    esi,eax
c0015cf9:	8d 76 00             	lea    esi,[esi+0x0]
c0015cfc:	85 db                	test   ebx,ebx
c0015cfe:	78 14                	js     c0015d14 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0015d00:	83 ec 0c             	sub    esp,0xc
c0015d03:	56                   	push   esi
c0015d04:	e8 cf a3 00 00       	call   c00200d8 <ThreadControlBlock::ThreadControlBlock()>
c0015d09:	83 c4 10             	add    esp,0x10
c0015d0c:	83 c6 5f             	add    esi,0x5f
c0015d0f:	83 eb 01             	sub    ebx,0x1
c0015d12:	eb e8                	jmp    c0015cfc <Process::Process(bool, char const*, Process*, char**)+0x20>
c0015d14:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d18:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015d1f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d23:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0015d2a:	83 ec 0c             	sub    esp,0xc
c0015d2d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015d31:	e8 6e b7 ff ff       	call   c00114a4 <KeNewProcessEnv(Process*)>
c0015d36:	83 c4 10             	add    esp,0x10
c0015d39:	89 c2                	mov    edx,eax
c0015d3b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d3f:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015d45:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d49:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0015d52:	a1 a0 3f 02 c0       	mov    eax,ds:0xc0023fa0
c0015d57:	8d 50 01             	lea    edx,[eax+0x1]
c0015d5a:	89 15 a0 3f 02 c0    	mov    DWORD PTR ds:0xc0023fa0,edx
c0015d60:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015d64:	89 02                	mov    DWORD PTR [edx],eax
c0015d66:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0015d6e:	83 ec 0c             	sub    esp,0xc
c0015d71:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015d75:	e8 3c 1d ff ff       	call   c0007ab6 <malloc>
c0015d7a:	83 c4 10             	add    esp,0x10
c0015d7d:	89 c3                	mov    ebx,eax
c0015d7f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0015d84:	83 ec 08             	sub    esp,0x8
c0015d87:	50                   	push   eax
c0015d88:	53                   	push   ebx
c0015d89:	e8 da 42 ff ff       	call   c000a068 <VAS::VAS(bool)>
c0015d8e:	83 c4 10             	add    esp,0x10
c0015d91:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d95:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015d9b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d9f:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015da9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015dad:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015db1:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015db7:	e8 0e bd ff ff       	call   c0011aca <KeInitSignals()>
c0015dbc:	89 c2                	mov    edx,eax
c0015dbe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015dc2:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015dc8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015dcc:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015dd2:	85 c0                	test   eax,eax
c0015dd4:	74 42                	je     c0015e18 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0015dd6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015dda:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015de0:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015de6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015dea:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015df0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015df4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015dfa:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015e00:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e04:	05 0c 01 00 00       	add    eax,0x10c
c0015e09:	83 ec 08             	sub    esp,0x8
c0015e0c:	52                   	push   edx
c0015e0d:	50                   	push   eax
c0015e0e:	e8 2d a8 fe ff       	call   c0000640 <strcpy>
c0015e13:	83 c4 10             	add    esp,0x10
c0015e16:	eb 64                	jmp    c0015e7c <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c0015e18:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0015e20:	83 ec 0c             	sub    esp,0xc
c0015e23:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015e27:	e8 8a 1c ff ff       	call   c0007ab6 <malloc>
c0015e2c:	83 c4 10             	add    esp,0x10
c0015e2f:	89 c3                	mov    ebx,eax
c0015e31:	83 ec 08             	sub    esp,0x8
c0015e34:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015e38:	53                   	push   ebx
c0015e39:	e8 28 2e ff ff       	call   c0008c66 <VgaText::VgaText(char const*)>
c0015e3e:	83 c4 10             	add    esp,0x10
c0015e41:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e45:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015e4b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e4f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015e55:	83 ec 0c             	sub    esp,0xc
c0015e58:	50                   	push   eax
c0015e59:	e8 a6 26 ff ff       	call   c0008504 <addToTerminalCycle(VgaText*)>
c0015e5e:	83 c4 10             	add    esp,0x10
c0015e61:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e65:	05 0c 01 00 00       	add    eax,0x10c
c0015e6a:	83 ec 08             	sub    esp,0x8
c0015e6d:	68 a1 29 02 c0       	push   0xc00229a1
c0015e72:	50                   	push   eax
c0015e73:	e8 c8 a7 fe ff       	call   c0000640 <strcpy>
c0015e78:	83 c4 10             	add    esp,0x10
c0015e7b:	90                   	nop
c0015e7c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e80:	83 c0 0c             	add    eax,0xc
c0015e83:	83 ec 08             	sub    esp,0x8
c0015e86:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015e8a:	50                   	push   eax
c0015e8b:	e8 b0 a7 fe ff       	call   c0000640 <strcpy>
c0015e90:	83 c4 10             	add    esp,0x10
c0015e93:	83 ec 08             	sub    esp,0x8
c0015e96:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015e9a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015e9e:	e8 c1 fb ff ff       	call   c0015a64 <Process::addArgs(char**)>
c0015ea3:	83 c4 10             	add    esp,0x10
c0015ea6:	90                   	nop
c0015ea7:	83 c4 24             	add    esp,0x24
c0015eaa:	5b                   	pop    ebx
c0015eab:	5e                   	pop    esi
c0015eac:	c3                   	ret    
c0015ead:	8d 76 00             	lea    esi,[esi+0x0]

c0015eb0 <taskStartupFunction>:
c0015eb0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015eb5:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0015eb8:	c3                   	ret    
c0015eb9:	90                   	nop
c0015eba:	66 90                	xchg   ax,ax

c0015ebc <Semaphore::Semaphore(int)>:
c0015ebc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015ec0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015ec4:	89 10                	mov    DWORD PTR [eax],edx
c0015ec6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015eca:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0015ed1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015ed5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015edc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015ee0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0015ee7:	90                   	nop
c0015ee8:	c3                   	ret    
c0015ee9:	90                   	nop
c0015eea:	66 90                	xchg   ax,ax

c0015eec <Mutex::Mutex()>:
c0015eec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015ef0:	6a 01                	push   0x1
c0015ef2:	50                   	push   eax
c0015ef3:	e8 c4 ff ff ff       	call   c0015ebc <Semaphore::Semaphore(int)>
c0015ef8:	83 c4 08             	add    esp,0x8
c0015efb:	90                   	nop
c0015efc:	c3                   	ret    
c0015efd:	90                   	nop
c0015efe:	66 90                	xchg   ax,ax

c0015f00 <Process::createThread(void (*)(void*), void*, int)>:
c0015f00:	57                   	push   edi
c0015f01:	31 c9                	xor    ecx,ecx
c0015f03:	56                   	push   esi
c0015f04:	53                   	push   ebx
c0015f05:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015f09:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0015f10:	89 f2                	mov    edx,esi
c0015f12:	66 90                	xchg   ax,ax
c0015f14:	0f b7 c2             	movzx  eax,dx
c0015f17:	80 e2 01             	and    dl,0x1
c0015f1a:	74 14                	je     c0015f30 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0015f1c:	d1 f8                	sar    eax,1
c0015f1e:	83 c1 01             	add    ecx,0x1
c0015f21:	89 c2                	mov    edx,eax
c0015f23:	83 f9 10             	cmp    ecx,0x10
c0015f26:	75 ec                	jne    c0015f14 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0015f28:	31 db                	xor    ebx,ebx
c0015f2a:	89 d8                	mov    eax,ebx
c0015f2c:	5b                   	pop    ebx
c0015f2d:	5e                   	pop    esi
c0015f2e:	5f                   	pop    edi
c0015f2f:	c3                   	ret    
c0015f30:	b8 01 00 00 00       	mov    eax,0x1
c0015f35:	d3 e0                	shl    eax,cl
c0015f37:	09 c6                	or     esi,eax
c0015f39:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0015f3c:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0015f43:	01 c0                	add    eax,eax
c0015f45:	01 c8                	add    eax,ecx
c0015f47:	8d 04 80             	lea    eax,[eax+eax*4]
c0015f4a:	01 d8                	add    eax,ebx
c0015f4c:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0015f53:	75 0b                	jne    c0015f60 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0015f55:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0015f5f:	90                   	nop
c0015f60:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015f66:	83 ec 0c             	sub    esp,0xc
c0015f69:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0015f6c:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0015f6f:	01 c0                	add    eax,eax
c0015f71:	01 c8                	add    eax,ecx
c0015f73:	8d 3c 80             	lea    edi,[eax+eax*4]
c0015f76:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0015f79:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0015f7f:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c0015f85:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015f89:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0015f8f:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0015f95:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0015f9b:	89 ca                	mov    edx,ecx
c0015f9d:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0015fa4:	f7 da                	neg    edx
c0015fa6:	c1 e2 15             	shl    edx,0x15
c0015fa9:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0015faf:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0015fb5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015fb9:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0015fc3:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0015fc9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015fcd:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0015fd3:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0015fdd:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0015fe7:	68 00 01 00 00       	push   0x100
c0015fec:	e8 c5 1a ff ff       	call   c0007ab6 <malloc>
c0015ff1:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0015ff4:	58                   	pop    eax
c0015ff5:	5a                   	pop    edx
c0015ff6:	53                   	push   ebx
c0015ff7:	68 e4 c6 02 c0       	push   0xc002c6e4
c0015ffc:	e8 6f 9e 00 00       	call   c001fe70 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016001:	83 c4 10             	add    esp,0x10
c0016004:	89 d8                	mov    eax,ebx
c0016006:	5b                   	pop    ebx
c0016007:	5e                   	pop    esi
c0016008:	5f                   	pop    edi
c0016009:	c3                   	ret    
c001600a:	66 90                	xchg   ax,ax

c001600c <Process::createUserThread()>:
c001600c:	83 ec 0c             	sub    esp,0xc
c001600f:	68 80 00 00 00       	push   0x80
c0016014:	6a 00                	push   0x0
c0016016:	68 5c 59 01 c0       	push   0xc001595c
c001601b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001601f:	50                   	push   eax
c0016020:	e8 db fe ff ff       	call   c0015f00 <Process::createThread(void (*)(void*), void*, int)>
c0016025:	83 c4 1c             	add    esp,0x1c
c0016028:	c3                   	ret    
c0016029:	8d 76 00             	lea    esi,[esi+0x0]

c001602c <setupMultitasking(void (*)())>:
c001602c:	56                   	push   esi
c001602d:	53                   	push   ebx
c001602e:	83 ec 04             	sub    esp,0x4
c0016031:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016035:	eb 11                	jmp    c0016048 <setupMultitasking(void (*)())+0x1c>
c0016037:	90                   	nop
c0016038:	83 ec 0c             	sub    esp,0xc
c001603b:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016040:	e8 6f 9d 00 00       	call   c001fdb4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016045:	83 c4 10             	add    esp,0x10
c0016048:	83 ec 0c             	sub    esp,0xc
c001604b:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016050:	e8 3b 9d 00 00       	call   c001fd90 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016055:	83 c4 10             	add    esp,0x10
c0016058:	84 c0                	test   al,al
c001605a:	74 dc                	je     c0016038 <setupMultitasking(void (*)())+0xc>
c001605c:	83 ec 0c             	sub    esp,0xc
c001605f:	68 24 07 00 00       	push   0x724
c0016064:	e8 4d 1a ff ff       	call   c0007ab6 <malloc>
c0016069:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0016070:	89 c3                	mov    ebx,eax
c0016072:	6a 00                	push   0x0
c0016074:	68 a5 29 02 c0       	push   0xc00229a5
c0016079:	6a 01                	push   0x1
c001607b:	50                   	push   eax
c001607c:	e8 5b fc ff ff       	call   c0015cdc <Process::Process(bool, char const*, Process*, char**)>
c0016081:	83 c4 14             	add    esp,0x14
c0016084:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c001608a:	89 1d f0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6f0,ebx
c0016090:	50                   	push   eax
c0016091:	e8 c3 26 ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c0016096:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c001609d:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c00160a7:	83 c8 01             	or     eax,0x1
c00160aa:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c00160b1:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00160b7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00160ba:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c00160c4:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c00160ca:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c00160d0:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c00160da:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c00160e4:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c00160ee:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c00160f4:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c00160fe:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0016104:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001610e:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0016115:	e8 9c 19 ff ff       	call   c0007ab6 <malloc>
c001611a:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0016120:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0016126:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001612c:	5a                   	pop    edx
c001612d:	59                   	pop    ecx
c001612e:	68 a1 29 02 c0       	push   0xc00229a1
c0016133:	50                   	push   eax
c0016134:	e8 07 a5 fe ff       	call   c0000640 <strcpy>
c0016139:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0016140:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0016144:	83 c4 14             	add    esp,0x14
c0016147:	5b                   	pop    ebx
c0016148:	5e                   	pop    esi
c0016149:	e9 1b a1 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c001614e:	66 90                	xchg   ax,ax

c0016150 <schedule()>:
c0016150:	8b 15 c4 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c4
c0016156:	85 d2                	test   edx,edx
c0016158:	74 0e                	je     c0016168 <schedule()+0x18>
c001615a:	c7 05 c0 c6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x1
c0016164:	c3                   	ret    
c0016165:	8d 76 00             	lea    esi,[esi+0x0]
c0016168:	53                   	push   ebx
c0016169:	83 ec 14             	sub    esp,0x14
c001616c:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016171:	e8 1a 9c 00 00       	call   c001fd90 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016176:	83 c4 10             	add    esp,0x10
c0016179:	84 c0                	test   al,al
c001617b:	75 3f                	jne    c00161bc <schedule()+0x6c>
c001617d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016182:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0016185:	83 fa 01             	cmp    edx,0x1
c0016188:	74 3a                	je     c00161c4 <schedule()+0x74>
c001618a:	66 90                	xchg   ax,ax
c001618c:	83 ec 0c             	sub    esp,0xc
c001618f:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016194:	e8 13 9c 00 00       	call   c001fdac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016199:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c00161a0:	89 c3                	mov    ebx,eax
c00161a2:	e8 0d 9c 00 00       	call   c001fdb4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00161a7:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c00161ae:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00161b1:	e8 fe f7 ff ff       	call   c00159b4 <switchToThread(ThreadControlBlock*)>
c00161b6:	83 c4 10             	add    esp,0x10
c00161b9:	8d 76 00             	lea    esi,[esi+0x0]
c00161bc:	83 c4 08             	add    esp,0x8
c00161bf:	5b                   	pop    ebx
c00161c0:	c3                   	ret    
c00161c1:	8d 76 00             	lea    esi,[esi+0x0]
c00161c4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00161cb:	83 ec 08             	sub    esp,0x8
c00161ce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00161d3:	50                   	push   eax
c00161d4:	68 e4 c6 02 c0       	push   0xc002c6e4
c00161d9:	e8 92 9c 00 00       	call   c001fe70 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00161de:	83 c4 10             	add    esp,0x10
c00161e1:	eb a9                	jmp    c001618c <schedule()+0x3c>
c00161e3:	90                   	nop

c00161e4 <Semaphore::tryAcquire()>:
c00161e4:	53                   	push   ebx
c00161e5:	83 ec 08             	sub    esp,0x8
c00161e8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00161ec:	fa                   	cli    
c00161ed:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00161f2:	8d 50 01             	lea    edx,[eax+0x1]
c00161f5:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c00161fb:	8b 15 c4 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c4
c0016201:	8d 5a 01             	lea    ebx,[edx+0x1]
c0016204:	89 1d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ebx
c001620a:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001620d:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001620f:	7c 33                	jl     c0016244 <Semaphore::tryAcquire()+0x60>
c0016211:	89 15 c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,edx
c0016217:	85 d2                	test   edx,edx
c0016219:	75 0d                	jne    c0016228 <Semaphore::tryAcquire()+0x44>
c001621b:	8b 15 c0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c0
c0016221:	85 d2                	test   edx,edx
c0016223:	75 6f                	jne    c0016294 <Semaphore::tryAcquire()+0xb0>
c0016225:	8d 76 00             	lea    esi,[esi+0x0]
c0016228:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001622d:	85 c0                	test   eax,eax
c001622f:	74 0b                	je     c001623c <Semaphore::tryAcquire()+0x58>
c0016231:	8d 76 00             	lea    esi,[esi+0x0]
c0016234:	31 c0                	xor    eax,eax
c0016236:	83 c4 08             	add    esp,0x8
c0016239:	5b                   	pop    ebx
c001623a:	c3                   	ret    
c001623b:	90                   	nop
c001623c:	fb                   	sti    
c001623d:	83 c4 08             	add    esp,0x8
c0016240:	5b                   	pop    ebx
c0016241:	c3                   	ret    
c0016242:	66 90                	xchg   ax,ax
c0016244:	83 c3 01             	add    ebx,0x1
c0016247:	89 15 c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,edx
c001624d:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0016250:	85 d2                	test   edx,edx
c0016252:	75 24                	jne    c0016278 <Semaphore::tryAcquire()+0x94>
c0016254:	8b 0d c0 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c0
c001625a:	85 c9                	test   ecx,ecx
c001625c:	74 1a                	je     c0016278 <Semaphore::tryAcquire()+0x94>
c001625e:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016268:	e8 e3 fe ff ff       	call   c0016150 <schedule()>
c001626d:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016272:	83 e8 01             	sub    eax,0x1
c0016275:	8d 76 00             	lea    esi,[esi+0x0]
c0016278:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001627d:	85 c0                	test   eax,eax
c001627f:	75 0b                	jne    c001628c <Semaphore::tryAcquire()+0xa8>
c0016281:	fb                   	sti    
c0016282:	b0 01                	mov    al,0x1
c0016284:	83 c4 08             	add    esp,0x8
c0016287:	5b                   	pop    ebx
c0016288:	c3                   	ret    
c0016289:	8d 76 00             	lea    esi,[esi+0x0]
c001628c:	b0 01                	mov    al,0x1
c001628e:	83 c4 08             	add    esp,0x8
c0016291:	5b                   	pop    ebx
c0016292:	c3                   	ret    
c0016293:	90                   	nop
c0016294:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c001629e:	e8 ad fe ff ff       	call   c0016150 <schedule()>
c00162a3:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00162a8:	83 e8 01             	sub    eax,0x1
c00162ab:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00162b0:	85 c0                	test   eax,eax
c00162b2:	75 80                	jne    c0016234 <Semaphore::tryAcquire()+0x50>
c00162b4:	eb 86                	jmp    c001623c <Semaphore::tryAcquire()+0x58>
c00162b6:	66 90                	xchg   ax,ax

c00162b8 <Semaphore::assertLocked(char const*)>:
c00162b8:	83 ec 0c             	sub    esp,0xc
c00162bb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00162bf:	fa                   	cli    
c00162c0:	8b 0d c8 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c8
c00162c6:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c00162cb:	83 c1 01             	add    ecx,0x1
c00162ce:	89 0d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ecx
c00162d4:	8d 48 01             	lea    ecx,[eax+0x1]
c00162d7:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c00162dd:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00162df:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c00162e2:	7c 28                	jl     c001630c <Semaphore::assertLocked(char const*)+0x54>
c00162e4:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c00162e9:	85 c0                	test   eax,eax
c00162eb:	75 0b                	jne    c00162f8 <Semaphore::assertLocked(char const*)+0x40>
c00162ed:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c00162f2:	85 c0                	test   eax,eax
c00162f4:	75 32                	jne    c0016328 <Semaphore::assertLocked(char const*)+0x70>
c00162f6:	66 90                	xchg   ax,ax
c00162f8:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00162fd:	83 e8 01             	sub    eax,0x1
c0016300:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016305:	75 01                	jne    c0016308 <Semaphore::assertLocked(char const*)+0x50>
c0016307:	fb                   	sti    
c0016308:	83 c4 0c             	add    esp,0xc
c001630b:	c3                   	ret    
c001630c:	83 ec 0c             	sub    esp,0xc
c001630f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016313:	52                   	push   edx
c0016314:	e8 96 b3 ff ff       	call   c00116af <KePanic(char const*)>
c0016319:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c001631e:	83 c4 10             	add    esp,0x10
c0016321:	83 e8 01             	sub    eax,0x1
c0016324:	eb be                	jmp    c00162e4 <Semaphore::assertLocked(char const*)+0x2c>
c0016326:	66 90                	xchg   ax,ax
c0016328:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016332:	e8 19 fe ff ff       	call   c0016150 <schedule()>
c0016337:	eb bf                	jmp    c00162f8 <Semaphore::assertLocked(char const*)+0x40>
c0016339:	8d 76 00             	lea    esi,[esi+0x0]

c001633c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001633c:	83 ec 0c             	sub    esp,0xc
c001633f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016344:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016348:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001634b:	e8 00 fe ff ff       	call   c0016150 <schedule()>
c0016350:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016355:	83 e8 01             	sub    eax,0x1
c0016358:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001635d:	75 01                	jne    c0016360 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c001635f:	fb                   	sti    
c0016360:	83 c4 0c             	add    esp,0xc
c0016363:	c3                   	ret    

c0016364 <blockTask(TaskState)>:
c0016364:	83 ec 0c             	sub    esp,0xc
c0016367:	fa                   	cli    
c0016368:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001636d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016371:	83 c0 01             	add    eax,0x1
c0016374:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016379:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001637e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0016381:	e8 ca fd ff ff       	call   c0016150 <schedule()>
c0016386:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001638b:	83 e8 01             	sub    eax,0x1
c001638e:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016393:	75 03                	jne    c0016398 <blockTask(TaskState)+0x34>
c0016395:	fb                   	sti    
c0016396:	66 90                	xchg   ax,ax
c0016398:	83 c4 0c             	add    esp,0xc
c001639b:	c3                   	ret    

c001639c <waitTask(int, int*, int)>:
c001639c:	83 ec 18             	sub    esp,0x18
c001639f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163a4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00163a8:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c00163ab:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00163af:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163b4:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c00163b7:	6a 07                	push   0x7
c00163b9:	e8 a6 ff ff ff       	call   c0016364 <blockTask(TaskState)>
c00163be:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163c3:	83 c4 10             	add    esp,0x10
c00163c6:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c00163c9:	85 d2                	test   edx,edx
c00163cb:	74 0b                	je     c00163d8 <waitTask(int, int*, int)+0x3c>
c00163cd:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c00163d0:	89 02                	mov    DWORD PTR [edx],eax
c00163d2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163d7:	90                   	nop
c00163d8:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c00163db:	83 c4 0c             	add    esp,0xc
c00163de:	c3                   	ret    
c00163df:	90                   	nop

c00163e0 <milliTenthSleepUntil(unsigned int)>:
c00163e0:	83 ec 0c             	sub    esp,0xc
c00163e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163e7:	39 05 ec b8 02 c0    	cmp    DWORD PTR ds:0xc002b8ec,eax
c00163ed:	76 05                	jbe    c00163f4 <milliTenthSleepUntil(unsigned int)+0x14>
c00163ef:	90                   	nop
c00163f0:	83 c4 0c             	add    esp,0xc
c00163f3:	c3                   	ret    
c00163f4:	fa                   	cli    
c00163f5:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c00163fb:	83 ec 08             	sub    esp,0x8
c00163fe:	83 c2 01             	add    edx,0x1
c0016401:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c0016407:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c001640d:	83 c1 01             	add    ecx,0x1
c0016410:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016416:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001641c:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c001641f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016424:	50                   	push   eax
c0016425:	68 d8 c6 02 c0       	push   0xc002c6d8
c001642a:	e8 41 9a 00 00       	call   c001fe70 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001642f:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0016436:	e8 29 ff ff ff       	call   c0016364 <blockTask(TaskState)>
c001643b:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016440:	83 c4 10             	add    esp,0x10
c0016443:	83 e8 01             	sub    eax,0x1
c0016446:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c001644b:	85 c0                	test   eax,eax
c001644d:	75 09                	jne    c0016458 <milliTenthSleepUntil(unsigned int)+0x78>
c001644f:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c0016454:	85 c0                	test   eax,eax
c0016456:	75 14                	jne    c001646c <milliTenthSleepUntil(unsigned int)+0x8c>
c0016458:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001645d:	83 e8 01             	sub    eax,0x1
c0016460:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016465:	75 89                	jne    c00163f0 <milliTenthSleepUntil(unsigned int)+0x10>
c0016467:	fb                   	sti    
c0016468:	83 c4 0c             	add    esp,0xc
c001646b:	c3                   	ret    
c001646c:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016476:	e8 d5 fc ff ff       	call   c0016150 <schedule()>
c001647b:	eb db                	jmp    c0016458 <milliTenthSleepUntil(unsigned int)+0x78>
c001647d:	8d 76 00             	lea    esi,[esi+0x0]

c0016480 <milliTenthSleep(unsigned int)>:
c0016480:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016484:	a1 ec b8 02 c0       	mov    eax,ds:0xc002b8ec
c0016489:	01 c2                	add    edx,eax
c001648b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001648f:	e9 4c ff ff ff       	jmp    c00163e0 <milliTenthSleepUntil(unsigned int)>

c0016494 <sleep(unsigned int)>:
c0016494:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016498:	8d 04 80             	lea    eax,[eax+eax*4]
c001649b:	8d 04 80             	lea    eax,[eax+eax*4]
c001649e:	8d 04 80             	lea    eax,[eax+eax*4]
c00164a1:	8d 04 80             	lea    eax,[eax+eax*4]
c00164a4:	c1 e0 04             	shl    eax,0x4
c00164a7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00164ab:	eb d3                	jmp    c0016480 <milliTenthSleep(unsigned int)>
c00164ad:	90                   	nop
c00164ae:	66 90                	xchg   ax,ax

c00164b0 <Semaphore::acquire()>:
c00164b0:	83 ec 0c             	sub    esp,0xc
c00164b3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00164b7:	fa                   	cli    
c00164b8:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00164bd:	83 c0 01             	add    eax,0x1
c00164c0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00164c5:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c00164ca:	8d 48 01             	lea    ecx,[eax+0x1]
c00164cd:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c00164d3:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00164d6:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c00164d8:	7d 2e                	jge    c0016508 <Semaphore::acquire()+0x58>
c00164da:	83 c1 01             	add    ecx,0x1
c00164dd:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c00164e0:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c00164e5:	85 c0                	test   eax,eax
c00164e7:	75 0b                	jne    c00164f4 <Semaphore::acquire()+0x44>
c00164e9:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c00164ee:	85 c0                	test   eax,eax
c00164f0:	75 66                	jne    c0016558 <Semaphore::acquire()+0xa8>
c00164f2:	66 90                	xchg   ax,ax
c00164f4:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00164f9:	83 e8 01             	sub    eax,0x1
c00164fc:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016501:	75 01                	jne    c0016504 <Semaphore::acquire()+0x54>
c0016503:	fb                   	sti    
c0016504:	83 c4 0c             	add    esp,0xc
c0016507:	c3                   	ret    
c0016508:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001650d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016514:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0016517:	85 c9                	test   ecx,ecx
c0016519:	74 51                	je     c001656c <Semaphore::acquire()+0xbc>
c001651b:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001651e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016524:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0016527:	90                   	nop
c0016528:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001652d:	83 ec 0c             	sub    esp,0xc
c0016530:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0016533:	68 24 2a 02 c0       	push   0xc0022a24
c0016538:	e8 08 44 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001653d:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0016544:	e8 1b fe ff ff       	call   c0016364 <blockTask(TaskState)>
c0016549:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c001654e:	83 c4 10             	add    esp,0x10
c0016551:	83 e8 01             	sub    eax,0x1
c0016554:	eb 8a                	jmp    c00164e0 <Semaphore::acquire()+0x30>
c0016556:	66 90                	xchg   ax,ax
c0016558:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016562:	e8 e9 fb ff ff       	call   c0016150 <schedule()>
c0016567:	eb 8b                	jmp    c00164f4 <Semaphore::acquire()+0x44>
c0016569:	8d 76 00             	lea    esi,[esi+0x0]
c001656c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016571:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016574:	eb b2                	jmp    c0016528 <Semaphore::acquire()+0x78>
c0016576:	66 90                	xchg   ax,ax

c0016578 <taskReturned>:
c0016578:	83 ec 18             	sub    esp,0x18
c001657b:	68 44 2a 02 c0       	push   0xc0022a44
c0016580:	e8 2a b1 ff ff       	call   c00116af <KePanic(char const*)>
c0016585:	83 c4 10             	add    esp,0x10
c0016588:	83 ec 0c             	sub    esp,0xc
c001658b:	6a 02                	push   0x2
c001658d:	e8 d2 fd ff ff       	call   c0016364 <blockTask(TaskState)>
c0016592:	fa                   	cli    
c0016593:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016598:	83 c0 01             	add    eax,0x1
c001659b:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00165a0:	e8 ab fb ff ff       	call   c0016150 <schedule()>
c00165a5:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00165aa:	83 c4 10             	add    esp,0x10
c00165ad:	83 e8 01             	sub    eax,0x1
c00165b0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00165b5:	85 c0                	test   eax,eax
c00165b7:	75 cf                	jne    c0016588 <taskReturned+0x10>
c00165b9:	fb                   	sti    
c00165ba:	eb cc                	jmp    c0016588 <taskReturned+0x10>

c00165bc <Thr::processFromPID(int)>:
c00165bc:	57                   	push   edi
c00165bd:	56                   	push   esi
c00165be:	53                   	push   ebx
c00165bf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00165c3:	fa                   	cli    
c00165c4:	8b 0d c8 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c8
c00165ca:	83 ec 0c             	sub    esp,0xc
c00165cd:	83 c1 01             	add    ecx,0x1
c00165d0:	68 e4 c6 02 c0       	push   0xc002c6e4
c00165d5:	89 0d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ecx
c00165db:	e8 cc 97 00 00       	call   c001fdac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00165e0:	83 c4 10             	add    esp,0x10
c00165e3:	89 c7                	mov    edi,eax
c00165e5:	eb 15                	jmp    c00165fc <Thr::processFromPID(int)+0x40>
c00165e7:	90                   	nop
c00165e8:	83 ec 0c             	sub    esp,0xc
c00165eb:	68 e4 c6 02 c0       	push   0xc002c6e4
c00165f0:	e8 b7 97 00 00       	call   c001fdac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00165f5:	83 c4 10             	add    esp,0x10
c00165f8:	39 f8                	cmp    eax,edi
c00165fa:	74 50                	je     c001664c <Thr::processFromPID(int)+0x90>
c00165fc:	83 ec 0c             	sub    esp,0xc
c00165ff:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016604:	e8 a3 97 00 00       	call   c001fdac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016609:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c0016610:	89 c3                	mov    ebx,eax
c0016612:	e8 9d 97 00 00       	call   c001fdb4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016617:	58                   	pop    eax
c0016618:	5a                   	pop    edx
c0016619:	53                   	push   ebx
c001661a:	68 e4 c6 02 c0       	push   0xc002c6e4
c001661f:	e8 4c 98 00 00       	call   c001fe70 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016624:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016627:	83 c4 10             	add    esp,0x10
c001662a:	39 30                	cmp    DWORD PTR [eax],esi
c001662c:	75 ba                	jne    c00165e8 <Thr::processFromPID(int)+0x2c>
c001662e:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016633:	83 e8 01             	sub    eax,0x1
c0016636:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001663b:	74 0b                	je     c0016648 <Thr::processFromPID(int)+0x8c>
c001663d:	8d 76 00             	lea    esi,[esi+0x0]
c0016640:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016643:	5b                   	pop    ebx
c0016644:	5e                   	pop    esi
c0016645:	5f                   	pop    edi
c0016646:	c3                   	ret    
c0016647:	90                   	nop
c0016648:	fb                   	sti    
c0016649:	eb f5                	jmp    c0016640 <Thr::processFromPID(int)+0x84>
c001664b:	90                   	nop
c001664c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016651:	83 e8 01             	sub    eax,0x1
c0016654:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016659:	75 05                	jne    c0016660 <Thr::processFromPID(int)+0xa4>
c001665b:	fb                   	sti    
c001665c:	5b                   	pop    ebx
c001665d:	5e                   	pop    esi
c001665e:	5f                   	pop    edi
c001665f:	c3                   	ret    
c0016660:	5b                   	pop    ebx
c0016661:	31 c0                	xor    eax,eax
c0016663:	5e                   	pop    esi
c0016664:	5f                   	pop    edi
c0016665:	c3                   	ret    
c0016666:	66 90                	xchg   ax,ax

c0016668 <unblockTask(ThreadControlBlock*)>:
c0016668:	53                   	push   ebx
c0016669:	83 ec 08             	sub    esp,0x8
c001666c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016670:	fa                   	cli    
c0016671:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016676:	83 c0 01             	add    eax,0x1
c0016679:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001667e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016681:	85 c0                	test   eax,eax
c0016683:	74 67                	je     c00166ec <unblockTask(ThreadControlBlock*)+0x84>
c0016685:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016688:	83 f8 01             	cmp    eax,0x1
c001668b:	74 37                	je     c00166c4 <unblockTask(ThreadControlBlock*)+0x5c>
c001668d:	83 ec 0c             	sub    esp,0xc
c0016690:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016695:	e8 12 97 00 00       	call   c001fdac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001669a:	83 c4 10             	add    esp,0x10
c001669d:	85 c0                	test   eax,eax
c001669f:	75 1b                	jne    c00166bc <unblockTask(ThreadControlBlock*)+0x54>
c00166a1:	eb 5d                	jmp    c0016700 <unblockTask(ThreadControlBlock*)+0x98>
c00166a3:	90                   	nop
c00166a4:	83 ec 08             	sub    esp,0x8
c00166a7:	50                   	push   eax
c00166a8:	68 e4 c6 02 c0       	push   0xc002c6e4
c00166ad:	e8 1a 9a 00 00       	call   c00200cc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00166b2:	83 c4 10             	add    esp,0x10
c00166b5:	85 c0                	test   eax,eax
c00166b7:	74 47                	je     c0016700 <unblockTask(ThreadControlBlock*)+0x98>
c00166b9:	8d 76 00             	lea    esi,[esi+0x0]
c00166bc:	39 c3                	cmp    ebx,eax
c00166be:	75 e4                	jne    c00166a4 <unblockTask(ThreadControlBlock*)+0x3c>
c00166c0:	eb 12                	jmp    c00166d4 <unblockTask(ThreadControlBlock*)+0x6c>
c00166c2:	66 90                	xchg   ax,ax
c00166c4:	83 ec 0c             	sub    esp,0xc
c00166c7:	68 c3 29 02 c0       	push   0xc00229c3
c00166cc:	e8 74 42 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00166d1:	83 c4 10             	add    esp,0x10
c00166d4:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00166d9:	83 e8 01             	sub    eax,0x1
c00166dc:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00166e1:	75 01                	jne    c00166e4 <unblockTask(ThreadControlBlock*)+0x7c>
c00166e3:	fb                   	sti    
c00166e4:	83 c4 08             	add    esp,0x8
c00166e7:	5b                   	pop    ebx
c00166e8:	c3                   	ret    
c00166e9:	8d 76 00             	lea    esi,[esi+0x0]
c00166ec:	83 ec 0c             	sub    esp,0xc
c00166ef:	68 ac 29 02 c0       	push   0xc00229ac
c00166f4:	e8 4c 42 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00166f9:	83 c4 10             	add    esp,0x10
c00166fc:	eb d6                	jmp    c00166d4 <unblockTask(ThreadControlBlock*)+0x6c>
c00166fe:	66 90                	xchg   ax,ax
c0016700:	83 ec 08             	sub    esp,0x8
c0016703:	53                   	push   ebx
c0016704:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016709:	e8 62 97 00 00       	call   c001fe70 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001670e:	83 c4 10             	add    esp,0x10
c0016711:	eb c1                	jmp    c00166d4 <unblockTask(ThreadControlBlock*)+0x6c>
c0016713:	90                   	nop

c0016714 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0016714:	55                   	push   ebp
c0016715:	57                   	push   edi
c0016716:	56                   	push   esi
c0016717:	53                   	push   ebx
c0016718:	83 ec 1c             	sub    esp,0x1c
c001671b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001671f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016722:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0016728:	85 ed                	test   ebp,ebp
c001672a:	7e 28                	jle    c0016754 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c001672c:	31 f6                	xor    esi,esi
c001672e:	66 90                	xchg   ax,ax
c0016730:	83 ec 0c             	sub    esp,0xc
c0016733:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c001673a:	83 c6 01             	add    esi,0x1
c001673d:	57                   	push   edi
c001673e:	e8 83 13 ff ff       	call   c0007ac6 <free>
c0016743:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016746:	83 c4 10             	add    esp,0x10
c0016749:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c001674f:	7f df                	jg     c0016730 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0016751:	8d 76 00             	lea    esi,[esi+0x0]
c0016754:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001675e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0016763:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0016766:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0016769:	d3 c0                	rol    eax,cl
c001676b:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c0016772:	21 c8                	and    eax,ecx
c0016774:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c001677b:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001677e:	89 f7                	mov    edi,esi
c0016780:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0016788:	0f 85 72 01 00 00    	jne    c0016900 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c001678e:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0016794:	85 ed                	test   ebp,ebp
c0016796:	74 1c                	je     c00167b4 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c0016798:	83 ec 0c             	sub    esp,0xc
c001679b:	55                   	push   ebp
c001679c:	e8 1f ac ff ff       	call   c00113c0 <EnvVarContainer::~EnvVarContainer()>
c00167a1:	59                   	pop    ecx
c00167a2:	5e                   	pop    esi
c00167a3:	6a 0c                	push   0xc
c00167a5:	55                   	push   ebp
c00167a6:	e8 6d 40 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c00167ab:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00167ae:	83 c4 10             	add    esp,0x10
c00167b1:	89 f7                	mov    edi,esi
c00167b3:	90                   	nop
c00167b4:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00167ba:	85 c0                	test   eax,eax
c00167bc:	0f 84 b2 00 00 00    	je     c0016874 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c00167c2:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c00167c5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00167c9:	31 c9                	xor    ecx,ecx
c00167cb:	eb 17                	jmp    c00167e4 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c00167cd:	8d 76 00             	lea    esi,[esi+0x0]
c00167d0:	83 c1 01             	add    ecx,0x1
c00167d3:	83 f9 10             	cmp    ecx,0x10
c00167d6:	0f 84 98 00 00 00    	je     c0016874 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c00167dc:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00167e2:	66 90                	xchg   ax,ax
c00167e4:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c00167eb:	d3 fa                	sar    edx,cl
c00167ed:	80 e2 01             	and    dl,0x1
c00167f0:	74 de                	je     c00167d0 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00167f2:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c00167f5:	01 d2                	add    edx,edx
c00167f7:	01 ca                	add    edx,ecx
c00167f9:	8d 14 92             	lea    edx,[edx+edx*4]
c00167fc:	01 d0                	add    eax,edx
c00167fe:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0016804:	83 fd 07             	cmp    ebp,0x7
c0016807:	75 c7                	jne    c00167d0 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016809:	05 40 02 00 00       	add    eax,0x240
c001680e:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0016811:	83 fd ff             	cmp    ebp,0xffffffff
c0016814:	0f 8c ee 00 00 00    	jl     c0016908 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c001681a:	0f 84 ac 01 00 00    	je     c00169cc <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c0016820:	85 ed                	test   ebp,ebp
c0016822:	0f 84 90 01 00 00    	je     c00169b8 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c0016828:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001682a:	75 a4                	jne    c00167d0 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001682c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0016832:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016836:	01 d0                	add    eax,edx
c0016838:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001683c:	83 ec 0c             	sub    esp,0xc
c001683f:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0016845:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016848:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001684e:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0016855:	50                   	push   eax
c0016856:	e8 0d fe ff ff       	call   c0016668 <unblockTask(ThreadControlBlock*)>
c001685b:	83 c4 10             	add    esp,0x10
c001685e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016861:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016865:	89 f7                	mov    edi,esi
c0016867:	83 c1 01             	add    ecx,0x1
c001686a:	83 f9 10             	cmp    ecx,0x10
c001686d:	0f 85 69 ff ff ff    	jne    c00167dc <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c0016873:	90                   	nop
c0016874:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c001687a:	85 c0                	test   eax,eax
c001687c:	74 62                	je     c00168e0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c001687e:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0016884:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c001688a:	74 54                	je     c00168e0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c001688c:	83 ec 0c             	sub    esp,0xc
c001688f:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016894:	e8 13 95 00 00       	call   c001fdac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016899:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c00168a0:	89 c7                	mov    edi,eax
c00168a2:	e8 e9 94 00 00       	call   c001fd90 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00168a7:	83 c4 10             	add    esp,0x10
c00168aa:	84 c0                	test   al,al
c00168ac:	0f 84 ce 00 00 00    	je     c0016980 <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c00168b2:	66 90                	xchg   ax,ax
c00168b4:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00168b7:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00168bd:	85 d2                	test   edx,edx
c00168bf:	74 0f                	je     c00168d0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c00168c1:	83 ec 0c             	sub    esp,0xc
c00168c4:	8b 02                	mov    eax,DWORD PTR [edx]
c00168c6:	52                   	push   edx
c00168c7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00168ca:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00168cd:	83 c4 10             	add    esp,0x10
c00168d0:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c00168da:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c00168dd:	8d 76 00             	lea    esi,[esi+0x0]
c00168e0:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c00168e6:	85 db                	test   ebx,ebx
c00168e8:	74 16                	je     c0016900 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c00168ea:	83 ec 0c             	sub    esp,0xc
c00168ed:	53                   	push   ebx
c00168ee:	e8 bf 32 ff ff       	call   c0009bb2 <VAS::~VAS()>
c00168f3:	58                   	pop    eax
c00168f4:	5a                   	pop    edx
c00168f5:	6a 14                	push   0x14
c00168f7:	53                   	push   ebx
c00168f8:	e8 1b 3f ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c00168fd:	83 c4 10             	add    esp,0x10
c0016900:	83 c4 1c             	add    esp,0x1c
c0016903:	5b                   	pop    ebx
c0016904:	5e                   	pop    esi
c0016905:	5f                   	pop    edi
c0016906:	5d                   	pop    ebp
c0016907:	c3                   	ret    
c0016908:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001690c:	83 ec 0c             	sub    esp,0xc
c001690f:	68 78 2a 02 c0       	push   0xc0022a78
c0016914:	e8 96 ad ff ff       	call   c00116af <KePanic(char const*)>
c0016919:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001691c:	83 c4 10             	add    esp,0x10
c001691f:	89 f7                	mov    edi,esi
c0016921:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016925:	e9 a6 fe ff ff       	jmp    c00167d0 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001692a:	66 90                	xchg   ax,ax
c001692c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016932:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0016938:	75 1e                	jne    c0016958 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c001693a:	83 ec 0c             	sub    esp,0xc
c001693d:	68 e0 2a 02 c0       	push   0xc0022ae0
c0016942:	e8 fe 3f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0016947:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001694e:	e8 11 fa ff ff       	call   c0016364 <blockTask(TaskState)>
c0016953:	83 c4 10             	add    esp,0x10
c0016956:	66 90                	xchg   ax,ax
c0016958:	83 ec 08             	sub    esp,0x8
c001695b:	56                   	push   esi
c001695c:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016961:	e8 0a 95 00 00       	call   c001fe70 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016966:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c001696d:	e8 3a 94 00 00       	call   c001fdac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016972:	83 c4 10             	add    esp,0x10
c0016975:	39 f8                	cmp    eax,edi
c0016977:	0f 84 37 ff ff ff    	je     c00168b4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001697d:	8d 76 00             	lea    esi,[esi+0x0]
c0016980:	83 ec 0c             	sub    esp,0xc
c0016983:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016988:	e8 1f 94 00 00       	call   c001fdac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001698d:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c0016994:	89 c6                	mov    esi,eax
c0016996:	e8 19 94 00 00       	call   c001fdb4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001699b:	83 c4 10             	add    esp,0x10
c001699e:	39 f3                	cmp    ebx,esi
c00169a0:	74 b6                	je     c0016958 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00169a2:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c00169a5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00169a8:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c00169ae:	75 a8                	jne    c0016958 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00169b0:	e9 77 ff ff ff       	jmp    c001692c <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c00169b5:	8d 76 00             	lea    esi,[esi+0x0]
c00169b8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00169bc:	83 ec 0c             	sub    esp,0xc
c00169bf:	68 ac 2a 02 c0       	push   0xc0022aac
c00169c4:	e9 4b ff ff ff       	jmp    c0016914 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c00169c9:	8d 76 00             	lea    esi,[esi+0x0]
c00169cc:	8b 36                	mov    esi,DWORD PTR [esi]
c00169ce:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00169d2:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c00169d5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00169d8:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c00169de:	01 d7                	add    edi,edx
c00169e0:	89 f8                	mov    eax,edi
c00169e2:	e9 51 fe ff ff       	jmp    c0016838 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c00169e7:	90                   	nop

c00169e8 <cleanerTaskFunction(void*)>:
c00169e8:	53                   	push   ebx
c00169e9:	83 ec 08             	sub    esp,0x8
c00169ec:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00169f1:	83 e8 01             	sub    eax,0x1
c00169f4:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00169f9:	75 01                	jne    c00169fc <cleanerTaskFunction(void*)+0x14>
c00169fb:	fb                   	sti    
c00169fc:	fa                   	cli    
c00169fd:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016a02:	80 3d ac c6 02 c0 00 	cmp    BYTE PTR ds:0xc002c6ac,0x0
c0016a09:	8d 50 01             	lea    edx,[eax+0x1]
c0016a0c:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016a12:	0f 84 c4 00 00 00    	je     c0016adc <cleanerTaskFunction(void*)+0xf4>
c0016a18:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016a1d:	85 c0                	test   eax,eax
c0016a1f:	75 03                	jne    c0016a24 <cleanerTaskFunction(void*)+0x3c>
c0016a21:	fb                   	sti    
c0016a22:	66 90                	xchg   ax,ax
c0016a24:	c6 05 ac c6 02 c0 00 	mov    BYTE PTR ds:0xc002c6ac,0x0
c0016a2b:	fa                   	cli    
c0016a2c:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c0016a32:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c0016a38:	83 c2 01             	add    edx,0x1
c0016a3b:	83 c1 01             	add    ecx,0x1
c0016a3e:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016a44:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016a4a:	fa                   	cli    
c0016a4b:	8b 1d c8 c6 02 c0    	mov    ebx,DWORD PTR ds:0xc002c6c8
c0016a51:	83 c3 01             	add    ebx,0x1
c0016a54:	89 1d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ebx
c0016a5a:	eb 28                	jmp    c0016a84 <cleanerTaskFunction(void*)+0x9c>
c0016a5c:	83 ec 0c             	sub    esp,0xc
c0016a5f:	68 cc c6 02 c0       	push   0xc002c6cc
c0016a64:	e8 43 93 00 00       	call   c001fdac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016a69:	c7 04 24 cc c6 02 c0 	mov    DWORD PTR [esp],0xc002c6cc
c0016a70:	89 c3                	mov    ebx,eax
c0016a72:	e8 3d 93 00 00       	call   c001fdb4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016a77:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016a7a:	e8 95 fc ff ff       	call   c0016714 <cleanupTerminatedTask(ThreadControlBlock*)>
c0016a7f:	83 c4 10             	add    esp,0x10
c0016a82:	66 90                	xchg   ax,ax
c0016a84:	83 ec 0c             	sub    esp,0xc
c0016a87:	68 cc c6 02 c0       	push   0xc002c6cc
c0016a8c:	e8 ff 92 00 00       	call   c001fd90 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016a91:	83 c4 10             	add    esp,0x10
c0016a94:	84 c0                	test   al,al
c0016a96:	74 c4                	je     c0016a5c <cleanerTaskFunction(void*)+0x74>
c0016a98:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016a9d:	83 e8 01             	sub    eax,0x1
c0016aa0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016aa5:	75 01                	jne    c0016aa8 <cleanerTaskFunction(void*)+0xc0>
c0016aa7:	fb                   	sti    
c0016aa8:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016aad:	83 e8 01             	sub    eax,0x1
c0016ab0:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016ab5:	0f 85 31 ff ff ff    	jne    c00169ec <cleanerTaskFunction(void*)+0x4>
c0016abb:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c0016ac0:	85 c0                	test   eax,eax
c0016ac2:	0f 84 24 ff ff ff    	je     c00169ec <cleanerTaskFunction(void*)+0x4>
c0016ac8:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016ad2:	e8 79 f6 ff ff       	call   c0016150 <schedule()>
c0016ad7:	e9 10 ff ff ff       	jmp    c00169ec <cleanerTaskFunction(void*)+0x4>
c0016adc:	83 ec 0c             	sub    esp,0xc
c0016adf:	6a 02                	push   0x2
c0016ae1:	e8 56 f8 ff ff       	call   c001633c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016ae6:	83 c4 10             	add    esp,0x10
c0016ae9:	e9 36 ff ff ff       	jmp    c0016a24 <cleanerTaskFunction(void*)+0x3c>
c0016aee:	66 90                	xchg   ax,ax

c0016af0 <terminateTask(int)>:
c0016af0:	83 ec 14             	sub    esp,0x14
c0016af3:	fa                   	cli    
c0016af4:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c0016afa:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c0016b00:	83 c2 01             	add    edx,0x1
c0016b03:	83 c1 01             	add    ecx,0x1
c0016b06:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016b0c:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016b12:	fa                   	cli    
c0016b13:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016b18:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016b1c:	83 c0 01             	add    eax,0x1
c0016b1f:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016b24:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016b29:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0016b2c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016b31:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0016b34:	50                   	push   eax
c0016b35:	68 cc c6 02 c0       	push   0xc002c6cc
c0016b3a:	e8 31 93 00 00       	call   c001fe70 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016b3f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016b44:	83 c4 10             	add    esp,0x10
c0016b47:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0016b4e:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c0016b53:	85 c0                	test   eax,eax
c0016b55:	74 65                	je     c0016bbc <terminateTask(int)+0xcc>
c0016b57:	83 ec 0c             	sub    esp,0xc
c0016b5a:	c6 05 ac c6 02 c0 01 	mov    BYTE PTR ds:0xc002c6ac,0x1
c0016b61:	50                   	push   eax
c0016b62:	e8 01 fb ff ff       	call   c0016668 <unblockTask(ThreadControlBlock*)>
c0016b67:	83 c4 10             	add    esp,0x10
c0016b6a:	66 90                	xchg   ax,ax
c0016b6c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016b71:	83 e8 01             	sub    eax,0x1
c0016b74:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016b79:	75 01                	jne    c0016b7c <terminateTask(int)+0x8c>
c0016b7b:	fb                   	sti    
c0016b7c:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016b81:	83 e8 01             	sub    eax,0x1
c0016b84:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016b89:	75 09                	jne    c0016b94 <terminateTask(int)+0xa4>
c0016b8b:	83 3d c0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6c0,0x0
c0016b92:	75 3c                	jne    c0016bd0 <terminateTask(int)+0xe0>
c0016b94:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016b99:	83 e8 01             	sub    eax,0x1
c0016b9c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016ba1:	75 01                	jne    c0016ba4 <terminateTask(int)+0xb4>
c0016ba3:	fb                   	sti    
c0016ba4:	fa                   	cli    
c0016ba5:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016baa:	83 c0 01             	add    eax,0x1
c0016bad:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016bb2:	66 90                	xchg   ax,ax
c0016bb4:	e8 97 f5 ff ff       	call   c0016150 <schedule()>
c0016bb9:	eb d9                	jmp    c0016b94 <terminateTask(int)+0xa4>
c0016bbb:	90                   	nop
c0016bbc:	83 ec 0c             	sub    esp,0xc
c0016bbf:	68 da 29 02 c0       	push   0xc00229da
c0016bc4:	e8 7c 3d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0016bc9:	83 c4 10             	add    esp,0x10
c0016bcc:	eb 9e                	jmp    c0016b6c <terminateTask(int)+0x7c>
c0016bce:	66 90                	xchg   ax,ax
c0016bd0:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016bda:	eb d8                	jmp    c0016bb4 <terminateTask(int)+0xc4>

c0016bdc <Thr::terminateFromIRQ(int)>:
c0016bdc:	83 ec 18             	sub    esp,0x18
c0016bdf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016be3:	50                   	push   eax
c0016be4:	e8 07 ff ff ff       	call   c0016af0 <terminateTask(int)>
c0016be9:	90                   	nop
c0016bea:	66 90                	xchg   ax,ax

c0016bec <Semaphore::release()>:
c0016bec:	83 ec 0c             	sub    esp,0xc
c0016bef:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016bf3:	fa                   	cli    
c0016bf4:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016bf9:	83 c0 01             	add    eax,0x1
c0016bfc:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016c01:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016c06:	8d 48 01             	lea    ecx,[eax+0x1]
c0016c09:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016c0f:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0016c12:	85 c9                	test   ecx,ecx
c0016c14:	74 42                	je     c0016c58 <Semaphore::release()+0x6c>
c0016c16:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0016c19:	83 ec 0c             	sub    esp,0xc
c0016c1c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016c1f:	51                   	push   ecx
c0016c20:	e8 43 fa ff ff       	call   c0016668 <unblockTask(ThreadControlBlock*)>
c0016c25:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016c2a:	83 c4 10             	add    esp,0x10
c0016c2d:	83 e8 01             	sub    eax,0x1
c0016c30:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016c35:	85 c0                	test   eax,eax
c0016c37:	75 0b                	jne    c0016c44 <Semaphore::release()+0x58>
c0016c39:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c0016c3e:	85 c0                	test   eax,eax
c0016c40:	75 22                	jne    c0016c64 <Semaphore::release()+0x78>
c0016c42:	66 90                	xchg   ax,ax
c0016c44:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016c49:	83 e8 01             	sub    eax,0x1
c0016c4c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016c51:	75 01                	jne    c0016c54 <Semaphore::release()+0x68>
c0016c53:	fb                   	sti    
c0016c54:	83 c4 0c             	add    esp,0xc
c0016c57:	c3                   	ret    
c0016c58:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0016c5b:	83 e9 01             	sub    ecx,0x1
c0016c5e:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0016c61:	eb cd                	jmp    c0016c30 <Semaphore::release()+0x44>
c0016c63:	90                   	nop
c0016c64:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016c6e:	e8 dd f4 ff ff       	call   c0016150 <schedule()>
c0016c73:	eb cf                	jmp    c0016c44 <Semaphore::release()+0x58>
c0016c75:	8d 76 00             	lea    esi,[esi+0x0]

c0016c78 <__static_initialization_and_destruction_0(int, int)>:
c0016c78:	83 ec 0c             	sub    esp,0xc
c0016c7b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0016c80:	0f 85 8e 00 00 00    	jne    c0016d14 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016c86:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0016c8e:	0f 85 80 00 00 00    	jne    c0016d14 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016c94:	83 ec 0c             	sub    esp,0xc
c0016c97:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016c9c:	e8 83 94 00 00       	call   c0020124 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016ca1:	83 c4 10             	add    esp,0x10
c0016ca4:	83 ec 04             	sub    esp,0x4
c0016ca7:	68 b0 36 02 c0       	push   0xc00236b0
c0016cac:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016cb1:	68 d4 00 02 c0       	push   0xc00200d4
c0016cb6:	e8 0d 3b ff ff       	call   c000a7c8 <__cxa_atexit>
c0016cbb:	83 c4 10             	add    esp,0x10
c0016cbe:	83 ec 0c             	sub    esp,0xc
c0016cc1:	68 d8 c6 02 c0       	push   0xc002c6d8
c0016cc6:	e8 59 94 00 00       	call   c0020124 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016ccb:	83 c4 10             	add    esp,0x10
c0016cce:	83 ec 04             	sub    esp,0x4
c0016cd1:	68 b0 36 02 c0       	push   0xc00236b0
c0016cd6:	68 d8 c6 02 c0       	push   0xc002c6d8
c0016cdb:	68 d4 00 02 c0       	push   0xc00200d4
c0016ce0:	e8 e3 3a ff ff       	call   c000a7c8 <__cxa_atexit>
c0016ce5:	83 c4 10             	add    esp,0x10
c0016ce8:	83 ec 0c             	sub    esp,0xc
c0016ceb:	68 cc c6 02 c0       	push   0xc002c6cc
c0016cf0:	e8 2f 94 00 00       	call   c0020124 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016cf5:	83 c4 10             	add    esp,0x10
c0016cf8:	83 ec 04             	sub    esp,0x4
c0016cfb:	68 b0 36 02 c0       	push   0xc00236b0
c0016d00:	68 cc c6 02 c0       	push   0xc002c6cc
c0016d05:	68 d4 00 02 c0       	push   0xc00200d4
c0016d0a:	e8 b9 3a ff ff       	call   c000a7c8 <__cxa_atexit>
c0016d0f:	83 c4 10             	add    esp,0x10
c0016d12:	66 90                	xchg   ax,ax
c0016d14:	90                   	nop
c0016d15:	83 c4 0c             	add    esp,0xc
c0016d18:	c3                   	ret    
c0016d19:	8d 76 00             	lea    esi,[esi+0x0]

c0016d1c <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0016d1c:	83 ec 0c             	sub    esp,0xc
c0016d1f:	83 ec 08             	sub    esp,0x8
c0016d22:	68 ff ff 00 00       	push   0xffff
c0016d27:	6a 01                	push   0x1
c0016d29:	e8 4a ff ff ff       	call   c0016c78 <__static_initialization_and_destruction_0(int, int)>
c0016d2e:	83 c4 10             	add    esp,0x10
c0016d31:	83 c4 0c             	add    esp,0xc
c0016d34:	c3                   	ret    

c0016d35 <Vm::inbv(unsigned short)>:
c0016d35:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016d39:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016d3e:	75 06                	jne    c0016d46 <Vm::inbv(unsigned short)+0x11>
c0016d40:	a0 2c c7 02 c0       	mov    al,ds:0xc002c72c
c0016d45:	c3                   	ret    
c0016d46:	ec                   	in     al,dx
c0016d47:	c3                   	ret    

c0016d48 <Vm::outbv(unsigned short, unsigned char)>:
c0016d48:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016d4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016d50:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016d55:	75 25                	jne    c0016d7c <Vm::outbv(unsigned short, unsigned char)+0x34>
c0016d57:	8b 0d 2c c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c72c
c0016d5d:	8d 51 01             	lea    edx,[ecx+0x1]
c0016d60:	88 81 40 c7 02 c0    	mov    BYTE PTR [ecx-0x3ffd38c0],al
c0016d66:	89 15 2c c7 02 c0    	mov    DWORD PTR ds:0xc002c72c,edx
c0016d6c:	83 fa 20             	cmp    edx,0x20
c0016d6f:	75 0c                	jne    c0016d7d <Vm::outbv(unsigned short, unsigned char)+0x35>
c0016d71:	c7 05 2c c7 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x1f
c0016d7b:	c3                   	ret    
c0016d7c:	ee                   	out    dx,al
c0016d7d:	c3                   	ret    

c0016d7e <Vm::realToLinear(unsigned short, unsigned short)>:
c0016d7e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016d83:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016d88:	c1 e0 04             	shl    eax,0x4
c0016d8b:	01 d0                	add    eax,edx
c0016d8d:	c3                   	ret    

c0016d8e <Vm::getSegment(unsigned int)>:
c0016d8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d92:	c1 e8 10             	shr    eax,0x10
c0016d95:	c3                   	ret    

c0016d96 <Vm::getOffset(unsigned int)>:
c0016d96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d9a:	c3                   	ret    

c0016d9b <Vm::mainloop2()>:
c0016d9b:	83 ec 18             	sub    esp,0x18
c0016d9e:	fa                   	cli    
c0016d9f:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016da5:	6a 02                	push   0x2
c0016da7:	c6 05 25 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c725,0x1
c0016dae:	e8 89 f5 ff ff       	call   c001633c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016db3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016db8:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0016dbc:	52                   	push   edx
c0016dbd:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0016dc1:	52                   	push   edx
c0016dc2:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0016dc6:	52                   	push   edx
c0016dc7:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0016dcb:	50                   	push   eax
c0016dcc:	e8 3e 94 fe ff       	call   c000020f <goToVM86>
c0016dd1:	83 c4 2c             	add    esp,0x2c
c0016dd4:	c3                   	ret    

c0016dd5 <Vm::mainVm8086Loop(void*)>:
c0016dd5:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016dda:	48                   	dec    eax
c0016ddb:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016de0:	75 01                	jne    c0016de3 <Vm::mainVm8086Loop(void*)+0xe>
c0016de2:	fb                   	sti    
c0016de3:	eb b6                	jmp    c0016d9b <Vm::mainloop2()>

c0016de5 <Vm::mainloop3(unsigned long)>:
c0016de5:	83 ec 18             	sub    esp,0x18
c0016de8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016dec:	fa                   	cli    
c0016ded:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016df3:	6a 02                	push   0x2
c0016df5:	c6 05 24 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c724,0x1
c0016dfc:	a3 20 c7 02 c0       	mov    ds:0xc002c720,eax
c0016e01:	e8 36 f5 ff ff       	call   c001633c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016e06:	83 c4 1c             	add    esp,0x1c
c0016e09:	eb 90                	jmp    c0016d9b <Vm::mainloop2()>

c0016e0b <Vm::initialise8086()>:
c0016e0b:	83 ec 0c             	sub    esp,0xc
c0016e0e:	68 80 00 00 00       	push   0x80
c0016e13:	6a 00                	push   0x0
c0016e15:	68 d5 6d 01 c0       	push   0xc0016dd5
c0016e1a:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0016e20:	e8 db f0 ff ff       	call   c0015f00 <Process::createThread(void (*)(void*), void*, int)>
c0016e25:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0016e2c:	a3 28 c7 02 c0       	mov    ds:0xc002c728,eax
c0016e31:	68 00 01 00 00       	push   0x100
c0016e36:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0016e3b:	6a 00                	push   0x0
c0016e3d:	6a 00                	push   0x0
c0016e3f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016e45:	e8 d0 30 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016e4a:	83 c4 2c             	add    esp,0x2c
c0016e4d:	c3                   	ret    

c0016e4e <Vm::finish8086()>:
c0016e4e:	53                   	push   ebx
c0016e4f:	83 ec 08             	sub    esp,0x8
c0016e52:	fa                   	cli    
c0016e53:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016e59:	80 3d 24 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c724,0x0
c0016e60:	75 15                	jne    c0016e77 <Vm::finish8086()+0x29>
c0016e62:	e8 e9 f2 ff ff       	call   c0016150 <schedule()>
c0016e67:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016e6c:	48                   	dec    eax
c0016e6d:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016e72:	75 de                	jne    c0016e52 <Vm::finish8086()+0x4>
c0016e74:	fb                   	sti    
c0016e75:	eb db                	jmp    c0016e52 <Vm::finish8086()+0x4>
c0016e77:	83 ec 0c             	sub    esp,0xc
c0016e7a:	8b 1d 20 c7 02 c0    	mov    ebx,DWORD PTR ds:0xc002c720
c0016e80:	ff 35 28 c7 02 c0    	push   DWORD PTR ds:0xc002c728
c0016e86:	c6 05 24 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c724,0x0
c0016e8d:	e8 d6 f7 ff ff       	call   c0016668 <unblockTask(ThreadControlBlock*)>
c0016e92:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016e97:	83 c4 10             	add    esp,0x10
c0016e9a:	8d 50 ff             	lea    edx,[eax-0x1]
c0016e9d:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016ea3:	85 d2                	test   edx,edx
c0016ea5:	75 01                	jne    c0016ea8 <Vm::finish8086()+0x5a>
c0016ea7:	fb                   	sti    
c0016ea8:	89 d8                	mov    eax,ebx
c0016eaa:	83 c4 08             	add    esp,0x8
c0016ead:	5b                   	pop    ebx
c0016eae:	c3                   	ret    

c0016eaf <Vm::getOutput8086(unsigned char*)>:
c0016eaf:	57                   	push   edi
c0016eb0:	8b 0d 2c c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c72c
c0016eb6:	56                   	push   esi
c0016eb7:	be 40 c7 02 c0       	mov    esi,0xc002c740
c0016ebc:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0016ec0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016ec2:	a1 2c c7 02 c0       	mov    eax,ds:0xc002c72c
c0016ec7:	5e                   	pop    esi
c0016ec8:	c7 05 2c c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x0
c0016ed2:	5f                   	pop    edi
c0016ed3:	c3                   	ret    

c0016ed4 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016ed4:	55                   	push   ebp
c0016ed5:	57                   	push   edi
c0016ed6:	56                   	push   esi
c0016ed7:	53                   	push   ebx
c0016ed8:	83 ec 0c             	sub    esp,0xc
c0016edb:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0016edf:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0016ee3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016ee7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0016eeb:	fa                   	cli    
c0016eec:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016ef2:	80 3d 25 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c725,0x0
c0016ef9:	75 15                	jne    c0016f10 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0016efb:	e8 50 f2 ff ff       	call   c0016150 <schedule()>
c0016f00:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016f05:	48                   	dec    eax
c0016f06:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016f0b:	75 de                	jne    c0016eeb <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016f0d:	fb                   	sti    
c0016f0e:	eb db                	jmp    c0016eeb <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016f10:	a1 28 c7 02 c0       	mov    eax,ds:0xc002c728
c0016f15:	c7 05 2c c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x0
c0016f1f:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016f23:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016f27:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016f2b:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0016f2f:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016f33:	0f b7 ff             	movzx  edi,di
c0016f36:	0f b7 f6             	movzx  esi,si
c0016f39:	50                   	push   eax
c0016f3a:	6a 20                	push   0x20
c0016f3c:	6a 00                	push   0x0
c0016f3e:	68 40 c7 02 c0       	push   0xc002c740
c0016f43:	e8 a8 95 fe ff       	call   c00004f0 <memset>
c0016f48:	5a                   	pop    edx
c0016f49:	59                   	pop    ecx
c0016f4a:	57                   	push   edi
c0016f4b:	56                   	push   esi
c0016f4c:	e8 2d fe ff ff       	call   c0016d7e <Vm::realToLinear(unsigned short, unsigned short)>
c0016f51:	83 c4 10             	add    esp,0x10
c0016f54:	89 c7                	mov    edi,eax
c0016f56:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016f5a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0016f5e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016f60:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016f65:	c6 05 25 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c725,0x0
c0016f6c:	48                   	dec    eax
c0016f6d:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016f72:	75 01                	jne    c0016f75 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0016f74:	fb                   	sti    
c0016f75:	83 ec 0c             	sub    esp,0xc
c0016f78:	ff 35 28 c7 02 c0    	push   DWORD PTR ds:0xc002c728
c0016f7e:	e8 e5 f6 ff ff       	call   c0016668 <unblockTask(ThreadControlBlock*)>
c0016f83:	83 c4 1c             	add    esp,0x1c
c0016f86:	b0 01                	mov    al,0x1
c0016f88:	5b                   	pop    ebx
c0016f89:	5e                   	pop    esi
c0016f8a:	5f                   	pop    edi
c0016f8b:	5d                   	pop    ebp
c0016f8c:	c3                   	ret    

c0016f8d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016f8d:	55                   	push   ebp
c0016f8e:	57                   	push   edi
c0016f8f:	56                   	push   esi
c0016f90:	53                   	push   ebx
c0016f91:	83 ec 34             	sub    esp,0x34
c0016f94:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0016f98:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0016f9c:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0016fa0:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c0016fa4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016fa8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016fac:	68 08 2b 02 c0       	push   0xc0022b08
c0016fb1:	e8 8f 39 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0016fb6:	83 c4 10             	add    esp,0x10
c0016fb9:	fa                   	cli    
c0016fba:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016fc0:	8a 1d 25 c7 02 c0    	mov    bl,BYTE PTR ds:0xc002c725
c0016fc6:	84 db                	test   bl,bl
c0016fc8:	75 15                	jne    c0016fdf <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x52>
c0016fca:	e8 81 f1 ff ff       	call   c0016150 <schedule()>
c0016fcf:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016fd4:	48                   	dec    eax
c0016fd5:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016fda:	75 dd                	jne    c0016fb9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0016fdc:	fb                   	sti    
c0016fdd:	eb da                	jmp    c0016fb9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0016fdf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016fe3:	a1 28 c7 02 c0       	mov    eax,ds:0xc002c728
c0016fe8:	c7 05 2c c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x0
c0016ff2:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c0016ff6:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016ffa:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016ffe:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0017002:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0017006:	50                   	push   eax
c0017007:	6a 20                	push   0x20
c0017009:	6a 00                	push   0x0
c001700b:	68 40 c7 02 c0       	push   0xc002c740
c0017010:	e8 db 94 fe ff       	call   c00004f0 <memset>
c0017015:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001701c:	e8 95 0a ff ff       	call   c0007ab6 <malloc>
c0017021:	83 c4 0c             	add    esp,0xc
c0017024:	89 c5                	mov    ebp,eax
c0017026:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c001702c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017030:	50                   	push   eax
c0017031:	e8 a6 4b ff ff       	call   c000bbdc <File::File(char const*, Process*)>
c0017036:	83 c4 10             	add    esp,0x10
c0017039:	85 ed                	test   ebp,ebp
c001703b:	75 0a                	jne    c0017047 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xba>
c001703d:	83 ec 0c             	sub    esp,0xc
c0017040:	68 2a 2b 02 c0       	push   0xc0022b2a
c0017045:	eb 2b                	jmp    c0017072 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe5>
c0017047:	50                   	push   eax
c0017048:	8d 44 24 17          	lea    eax,[esp+0x17]
c001704c:	50                   	push   eax
c001704d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0017051:	50                   	push   eax
c0017052:	55                   	push   ebp
c0017053:	e8 a4 4e ff ff       	call   c000befc <File::stat(unsigned long long*, bool*)>
c0017058:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c001705c:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0017060:	83 c4 10             	add    esp,0x10
c0017063:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0017068:	74 27                	je     c0017091 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x104>
c001706a:	83 ec 0c             	sub    esp,0xc
c001706d:	68 3e 2b 02 c0       	push   0xc0022b3e
c0017072:	e8 38 a6 ff ff       	call   c00116af <KePanic(char const*)>
c0017077:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001707c:	83 c4 10             	add    esp,0x10
c001707f:	48                   	dec    eax
c0017080:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0017085:	85 c0                	test   eax,eax
c0017087:	75 01                	jne    c001708a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0017089:	fb                   	sti    
c001708a:	31 db                	xor    ebx,ebx
c001708c:	e9 90 00 00 00       	jmp    c0017121 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0017091:	51                   	push   ecx
c0017092:	51                   	push   ecx
c0017093:	6a 01                	push   0x1
c0017095:	55                   	push   ebp
c0017096:	e8 5f 4b ff ff       	call   c000bbfa <File::open(FileOpenMode)>
c001709b:	83 c4 10             	add    esp,0x10
c001709e:	85 c0                	test   eax,eax
c00170a0:	74 26                	je     c00170c8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x13b>
c00170a2:	83 ec 0c             	sub    esp,0xc
c00170a5:	68 57 2b 02 c0       	push   0xc0022b57
c00170aa:	e8 00 a6 ff ff       	call   c00116af <KePanic(char const*)>
c00170af:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00170b4:	83 c4 10             	add    esp,0x10
c00170b7:	48                   	dec    eax
c00170b8:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00170bd:	85 c0                	test   eax,eax
c00170bf:	75 c9                	jne    c001708a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c00170c1:	fb                   	sti    
c00170c2:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c00170c6:	eb 59                	jmp    c0017121 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c00170c8:	0f b7 ff             	movzx  edi,di
c00170cb:	50                   	push   eax
c00170cc:	0f b7 f6             	movzx  esi,si
c00170cf:	50                   	push   eax
c00170d0:	57                   	push   edi
c00170d1:	56                   	push   esi
c00170d2:	e8 a7 fc ff ff       	call   c0016d7e <Vm::realToLinear(unsigned short, unsigned short)>
c00170d7:	5a                   	pop    edx
c00170d8:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00170db:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00170df:	51                   	push   ecx
c00170e0:	50                   	push   eax
c00170e1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00170e5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00170e9:	55                   	push   ebp
c00170ea:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00170ed:	83 c4 14             	add    esp,0x14
c00170f0:	55                   	push   ebp
c00170f1:	e8 62 4b ff ff       	call   c000bc58 <File::close()>
c00170f6:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00170fb:	83 c4 10             	add    esp,0x10
c00170fe:	48                   	dec    eax
c00170ff:	c6 05 25 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c725,0x0
c0017106:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001710b:	85 c0                	test   eax,eax
c001710d:	75 01                	jne    c0017110 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c001710f:	fb                   	sti    
c0017110:	83 ec 0c             	sub    esp,0xc
c0017113:	ff 35 28 c7 02 c0    	push   DWORD PTR ds:0xc002c728
c0017119:	e8 4a f5 ff ff       	call   c0016668 <unblockTask(ThreadControlBlock*)>
c001711e:	83 c4 10             	add    esp,0x10
c0017121:	83 c4 2c             	add    esp,0x2c
c0017124:	88 d8                	mov    al,bl
c0017126:	5b                   	pop    ebx
c0017127:	5e                   	pop    esi
c0017128:	5f                   	pop    edi
c0017129:	5d                   	pop    ebp
c001712a:	c3                   	ret    

c001712b <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001712b:	57                   	push   edi
c001712c:	56                   	push   esi
c001712d:	53                   	push   ebx
c001712e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017132:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017136:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001713a:	83 e8 06             	sub    eax,0x6
c001713d:	0f b7 c0             	movzx  eax,ax
c0017140:	50                   	push   eax
c0017141:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0017146:	50                   	push   eax
c0017147:	e8 32 fc ff ff       	call   c0016d7e <Vm::realToLinear(unsigned short, unsigned short)>
c001714c:	5a                   	pop    edx
c001714d:	8b 73 38             	mov    esi,DWORD PTR [ebx+0x38]
c0017150:	59                   	pop    ecx
c0017151:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0017154:	8d 51 fa             	lea    edx,[ecx-0x6]
c0017157:	81 e2 ff ff 00 00    	and    edx,0xffff
c001715d:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0017160:	8d 56 02             	lea    edx,[esi+0x2]
c0017163:	66 89 10             	mov    WORD PTR [eax],dx
c0017166:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c001716a:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001716e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0017171:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c0017175:	0f b6 f1             	movzx  esi,cl
c0017178:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001717c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017182:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c0017186:	0f b6 d5             	movzx  edx,ch
c0017189:	74 0a                	je     c0017195 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6a>
c001718b:	c1 e2 08             	shl    edx,0x8
c001718e:	09 f2                	or     edx,esi
c0017190:	80 ce 02             	or     dh,0x2
c0017193:	eb 08                	jmp    c001719d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x72>
c0017195:	c1 e2 08             	shl    edx,0x8
c0017198:	09 f2                	or     edx,esi
c001719a:	80 e6 fd             	and    dh,0xfd
c001719d:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00171a1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00171a6:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00171aa:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c00171b2:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c00171b5:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c00171bd:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00171c0:	5b                   	pop    ebx
c00171c1:	5e                   	pop    esi
c00171c2:	5f                   	pop    edi
c00171c3:	c3                   	ret    

c00171c4 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c00171c4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00171c9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00171ce:	c1 e0 04             	shl    eax,0x4
c00171d1:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c00171d4:	c3                   	ret    

c00171d5 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c00171d5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00171da:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00171df:	c1 e0 04             	shl    eax,0x4
c00171e2:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c00171e6:	c3                   	ret    

c00171e7 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c00171e7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00171ec:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00171f1:	c1 e0 04             	shl    eax,0x4
c00171f4:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c00171f7:	c3                   	ret    

c00171f8 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c00171f8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00171fd:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017202:	c1 e0 04             	shl    eax,0x4
c0017205:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017209:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001720c:	c3                   	ret    

c001720d <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001720d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017212:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017217:	c1 e0 04             	shl    eax,0x4
c001721a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001721e:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0017222:	c3                   	ret    

c0017223 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0017223:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017228:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001722d:	c1 e0 04             	shl    eax,0x4
c0017230:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017234:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0017237:	c3                   	ret    

c0017238 <Vm::faultHandler(regs*)>:
c0017238:	55                   	push   ebp
c0017239:	57                   	push   edi
c001723a:	56                   	push   esi
c001723b:	53                   	push   ebx
c001723c:	83 ec 2c             	sub    esp,0x2c
c001723f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0017243:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0017246:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001724a:	0f b7 f8             	movzx  edi,ax
c001724d:	52                   	push   edx
c001724e:	0f b7 c0             	movzx  eax,ax
c0017251:	50                   	push   eax
c0017252:	e8 27 fb ff ff       	call   c0016d7e <Vm::realToLinear(unsigned short, unsigned short)>
c0017257:	5a                   	pop    edx
c0017258:	59                   	pop    ecx
c0017259:	89 c1                	mov    ecx,eax
c001725b:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001725e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017262:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c0017267:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001726b:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c001726e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017272:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c0017277:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001727b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001727f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017283:	e8 f6 fa ff ff       	call   c0016d7e <Vm::realToLinear(unsigned short, unsigned short)>
c0017288:	5e                   	pop    esi
c0017289:	be 06 00 00 00       	mov    esi,0x6
c001728e:	5d                   	pop    ebp
c001728f:	31 ed                	xor    ebp,ebp
c0017291:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0017296:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0017299:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c001729f:	0f 84 74 02 00 00    	je     c0017519 <Vm::faultHandler(regs*)+0x2e1>
c00172a5:	0f 87 94 00 00 00    	ja     c001733f <Vm::faultHandler(regs*)+0x107>
c00172ab:	83 fa 66             	cmp    edx,0x66
c00172ae:	0f 84 e2 01 00 00    	je     c0017496 <Vm::faultHandler(regs*)+0x25e>
c00172b4:	77 47                	ja     c00172fd <Vm::faultHandler(regs*)+0xc5>
c00172b6:	83 fa 36             	cmp    edx,0x36
c00172b9:	0f 84 ca 01 00 00    	je     c0017489 <Vm::faultHandler(regs*)+0x251>
c00172bf:	77 1a                	ja     c00172db <Vm::faultHandler(regs*)+0xa3>
c00172c1:	83 fa 26             	cmp    edx,0x26
c00172c4:	0f 84 98 01 00 00    	je     c0017462 <Vm::faultHandler(regs*)+0x22a>
c00172ca:	83 fa 2e             	cmp    edx,0x2e
c00172cd:	0f 85 21 06 00 00    	jne    c00178f4 <Vm::faultHandler(regs*)+0x6bc>
c00172d3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00172d6:	31 f6                	xor    esi,esi
c00172d8:	41                   	inc    ecx
c00172d9:	eb bb                	jmp    c0017296 <Vm::faultHandler(regs*)+0x5e>
c00172db:	83 fa 64             	cmp    edx,0x64
c00172de:	0f 84 8b 01 00 00    	je     c001746f <Vm::faultHandler(regs*)+0x237>
c00172e4:	0f 87 92 01 00 00    	ja     c001747c <Vm::faultHandler(regs*)+0x244>
c00172ea:	83 fa 3e             	cmp    edx,0x3e
c00172ed:	0f 85 01 06 00 00    	jne    c00178f4 <Vm::faultHandler(regs*)+0x6bc>
c00172f3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00172f6:	be 01 00 00 00       	mov    esi,0x1
c00172fb:	eb db                	jmp    c00172d8 <Vm::faultHandler(regs*)+0xa0>
c00172fd:	83 fa 6d             	cmp    edx,0x6d
c0017300:	0f 84 34 03 00 00    	je     c001763a <Vm::faultHandler(regs*)+0x402>
c0017306:	77 17                	ja     c001731f <Vm::faultHandler(regs*)+0xe7>
c0017308:	83 fa 67             	cmp    edx,0x67
c001730b:	0f 84 92 01 00 00    	je     c00174a3 <Vm::faultHandler(regs*)+0x26b>
c0017311:	83 fa 6c             	cmp    edx,0x6c
c0017314:	0f 84 b1 02 00 00    	je     c00175cb <Vm::faultHandler(regs*)+0x393>
c001731a:	e9 d5 05 00 00       	jmp    c00178f4 <Vm::faultHandler(regs*)+0x6bc>
c001731f:	83 fa 6f             	cmp    edx,0x6f
c0017322:	0f 84 3d 04 00 00    	je     c0017765 <Vm::faultHandler(regs*)+0x52d>
c0017328:	0f 82 9f 03 00 00    	jb     c00176cd <Vm::faultHandler(regs*)+0x495>
c001732e:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c0017334:	0f 84 76 01 00 00    	je     c00174b0 <Vm::faultHandler(regs*)+0x278>
c001733a:	e9 b5 05 00 00       	jmp    c00178f4 <Vm::faultHandler(regs*)+0x6bc>
c001733f:	81 fa ec 00 00 00    	cmp    edx,0xec
c0017345:	0f 84 51 05 00 00    	je     c001789c <Vm::faultHandler(regs*)+0x664>
c001734b:	0f 87 a9 00 00 00    	ja     c00173fa <Vm::faultHandler(regs*)+0x1c2>
c0017351:	81 fa e4 00 00 00    	cmp    edx,0xe4
c0017357:	0f 84 d0 04 00 00    	je     c001782d <Vm::faultHandler(regs*)+0x5f5>
c001735d:	77 78                	ja     c00173d7 <Vm::faultHandler(regs*)+0x19f>
c001735f:	81 fa cd 00 00 00    	cmp    edx,0xcd
c0017365:	0f 84 0e 02 00 00    	je     c0017579 <Vm::faultHandler(regs*)+0x341>
c001736b:	81 fa cf 00 00 00    	cmp    edx,0xcf
c0017371:	0f 85 7d 05 00 00    	jne    c00178f4 <Vm::faultHandler(regs*)+0x6bc>
c0017377:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c001737b:	89 d1                	mov    ecx,edx
c001737d:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0017380:	c1 e1 08             	shl    ecx,0x8
c0017383:	09 ca                	or     edx,ecx
c0017385:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0017388:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c001738c:	89 d1                	mov    ecx,edx
c001738e:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0017392:	c1 e1 08             	shl    ecx,0x8
c0017395:	09 ca                	or     edx,ecx
c0017397:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001739a:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c001739e:	89 d1                	mov    ecx,edx
c00173a0:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c00173a4:	c1 e1 08             	shl    ecx,0x8
c00173a7:	09 ca                	or     edx,ecx
c00173a9:	81 ca 00 02 02 00    	or     edx,0x20200
c00173af:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00173b2:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c00173b6:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00173bc:	d1 e8                	shr    eax,1
c00173be:	83 e0 01             	and    eax,0x1
c00173c1:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00173c4:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00173c7:	83 c0 06             	add    eax,0x6
c00173ca:	25 ff ff 00 00       	and    eax,0xffff
c00173cf:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00173d2:	e9 19 05 00 00       	jmp    c00178f0 <Vm::faultHandler(regs*)+0x6b8>
c00173d7:	81 fa e6 00 00 00    	cmp    edx,0xe6
c00173dd:	0f 84 8f 04 00 00    	je     c0017872 <Vm::faultHandler(regs*)+0x63a>
c00173e3:	0f 82 60 04 00 00    	jb     c0017849 <Vm::faultHandler(regs*)+0x611>
c00173e9:	81 fa e7 00 00 00    	cmp    edx,0xe7
c00173ef:	0f 84 94 04 00 00    	je     c0017889 <Vm::faultHandler(regs*)+0x651>
c00173f5:	e9 fa 04 00 00       	jmp    c00178f4 <Vm::faultHandler(regs*)+0x6bc>
c00173fa:	81 fa ef 00 00 00    	cmp    edx,0xef
c0017400:	0f 84 d7 04 00 00    	je     c00178dd <Vm::faultHandler(regs*)+0x6a5>
c0017406:	77 2e                	ja     c0017436 <Vm::faultHandler(regs*)+0x1fe>
c0017408:	81 fa ed 00 00 00    	cmp    edx,0xed
c001740e:	0f 84 a4 04 00 00    	je     c00178b8 <Vm::faultHandler(regs*)+0x680>
c0017414:	81 fa ee 00 00 00    	cmp    edx,0xee
c001741a:	0f 85 d4 04 00 00    	jne    c00178f4 <Vm::faultHandler(regs*)+0x6bc>
c0017420:	50                   	push   eax
c0017421:	50                   	push   eax
c0017422:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0017426:	50                   	push   eax
c0017427:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001742b:	50                   	push   eax
c001742c:	e8 17 f9 ff ff       	call   c0016d48 <Vm::outbv(unsigned short, unsigned char)>
c0017431:	e9 9f 04 00 00       	jmp    c00178d5 <Vm::faultHandler(regs*)+0x69d>
c0017436:	81 fa fa 00 00 00    	cmp    edx,0xfa
c001743c:	0f 84 6d 01 00 00    	je     c00175af <Vm::faultHandler(regs*)+0x377>
c0017442:	81 fa fb 00 00 00    	cmp    edx,0xfb
c0017448:	0f 84 6f 01 00 00    	je     c00175bd <Vm::faultHandler(regs*)+0x385>
c001744e:	81 fa f3 00 00 00    	cmp    edx,0xf3
c0017454:	0f 85 9a 04 00 00    	jne    c00178f4 <Vm::faultHandler(regs*)+0x6bc>
c001745a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001745d:	e9 76 fe ff ff       	jmp    c00172d8 <Vm::faultHandler(regs*)+0xa0>
c0017462:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017465:	be 02 00 00 00       	mov    esi,0x2
c001746a:	e9 69 fe ff ff       	jmp    c00172d8 <Vm::faultHandler(regs*)+0xa0>
c001746f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017472:	be 03 00 00 00       	mov    esi,0x3
c0017477:	e9 5c fe ff ff       	jmp    c00172d8 <Vm::faultHandler(regs*)+0xa0>
c001747c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001747f:	be 04 00 00 00       	mov    esi,0x4
c0017484:	e9 4f fe ff ff       	jmp    c00172d8 <Vm::faultHandler(regs*)+0xa0>
c0017489:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001748c:	be 05 00 00 00       	mov    esi,0x5
c0017491:	e9 42 fe ff ff       	jmp    c00172d8 <Vm::faultHandler(regs*)+0xa0>
c0017496:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017499:	bd 01 00 00 00       	mov    ebp,0x1
c001749e:	e9 35 fe ff ff       	jmp    c00172d8 <Vm::faultHandler(regs*)+0xa0>
c00174a3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00174a6:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00174ab:	e9 28 fe ff ff       	jmp    c00172d8 <Vm::faultHandler(regs*)+0xa0>
c00174b0:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00174b3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00174b7:	83 e5 01             	and    ebp,0x1
c00174ba:	74 30                	je     c00174ec <Vm::faultHandler(regs*)+0x2b4>
c00174bc:	83 e9 04             	sub    ecx,0x4
c00174bf:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00174c5:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00174cb:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00174ce:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00174d1:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00174d7:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00174db:	0f 84 0c 04 00 00    	je     c00178ed <Vm::faultHandler(regs*)+0x6b5>
c00174e1:	80 ce 02             	or     dh,0x2
c00174e4:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00174e7:	e9 01 04 00 00       	jmp    c00178ed <Vm::faultHandler(regs*)+0x6b5>
c00174ec:	83 e9 02             	sub    ecx,0x2
c00174ef:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00174f5:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00174f8:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00174fc:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0017502:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0017506:	74 05                	je     c001750d <Vm::faultHandler(regs*)+0x2d5>
c0017508:	80 ce 02             	or     dh,0x2
c001750b:	eb 03                	jmp    c0017510 <Vm::faultHandler(regs*)+0x2d8>
c001750d:	80 e6 fd             	and    dh,0xfd
c0017510:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0017514:	e9 d4 03 00 00       	jmp    c00178ed <Vm::faultHandler(regs*)+0x6b5>
c0017519:	83 e5 01             	and    ebp,0x1
c001751c:	74 2a                	je     c0017548 <Vm::faultHandler(regs*)+0x310>
c001751e:	8b 10                	mov    edx,DWORD PTR [eax]
c0017520:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0017526:	81 ca 00 02 02 00    	or     edx,0x20200
c001752c:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001752f:	8b 00                	mov    eax,DWORD PTR [eax]
c0017531:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017537:	c1 e8 09             	shr    eax,0x9
c001753a:	83 e0 01             	and    eax,0x1
c001753d:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0017540:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0017543:	83 c0 04             	add    eax,0x4
c0017546:	eb 24                	jmp    c001756c <Vm::faultHandler(regs*)+0x334>
c0017548:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001754b:	81 ca 00 02 02 00    	or     edx,0x20200
c0017551:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0017554:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0017557:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001755d:	c1 e8 09             	shr    eax,0x9
c0017560:	83 e0 01             	and    eax,0x1
c0017563:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0017566:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0017569:	83 c0 02             	add    eax,0x2
c001756c:	25 ff ff 00 00       	and    eax,0xffff
c0017571:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0017574:	e9 74 03 00 00       	jmp    c00178ed <Vm::faultHandler(regs*)+0x6b5>
c0017579:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001757d:	3d ee 00 00 00       	cmp    eax,0xee
c0017582:	75 10                	jne    c0017594 <Vm::faultHandler(regs*)+0x35c>
c0017584:	83 ec 0c             	sub    esp,0xc
c0017587:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001758a:	e8 56 f8 ff ff       	call   c0016de5 <Vm::mainloop3(unsigned long)>
c001758f:	e9 44 03 00 00       	jmp    c00178d8 <Vm::faultHandler(regs*)+0x6a0>
c0017594:	83 ec 0c             	sub    esp,0xc
c0017597:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001759b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001759f:	51                   	push   ecx
c00175a0:	50                   	push   eax
c00175a1:	53                   	push   ebx
c00175a2:	e8 84 fb ff ff       	call   c001712b <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c00175a7:	83 c4 20             	add    esp,0x20
c00175aa:	e9 41 03 00 00       	jmp    c00178f0 <Vm::faultHandler(regs*)+0x6b8>
c00175af:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00175b4:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00175b8:	e9 30 03 00 00       	jmp    c00178ed <Vm::faultHandler(regs*)+0x6b5>
c00175bd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00175c2:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c00175c6:	e9 22 03 00 00       	jmp    c00178ed <Vm::faultHandler(regs*)+0x6b5>
c00175cb:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00175ce:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00175d3:	74 2b                	je     c0017600 <Vm::faultHandler(regs*)+0x3c8>
c00175d5:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c00175dc:	76 22                	jbe    c0017600 <Vm::faultHandler(regs*)+0x3c8>
c00175de:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00175e2:	50                   	push   eax
c00175e3:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00175e7:	50                   	push   eax
c00175e8:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00175ec:	50                   	push   eax
c00175ed:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00175f1:	50                   	push   eax
c00175f2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00175f6:	50                   	push   eax
c00175f7:	6a 6c                	push   0x6c
c00175f9:	6a 6c                	push   0x6c
c00175fb:	e9 bd 01 00 00       	jmp    c00177bd <Vm::faultHandler(regs*)+0x585>
c0017600:	83 ec 0c             	sub    esp,0xc
c0017603:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017607:	0f b7 f6             	movzx  esi,si
c001760a:	50                   	push   eax
c001760b:	e8 25 f7 ff ff       	call   c0016d35 <Vm::inbv(unsigned short)>
c0017610:	83 c4 0c             	add    esp,0xc
c0017613:	0f b6 c0             	movzx  eax,al
c0017616:	50                   	push   eax
c0017617:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001761b:	50                   	push   eax
c001761c:	56                   	push   esi
c001761d:	e8 d6 fb ff ff       	call   c00171f8 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0017622:	83 c4 10             	add    esp,0x10
c0017625:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017628:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001762c:	74 03                	je     c0017631 <Vm::faultHandler(regs*)+0x3f9>
c001762e:	48                   	dec    eax
c001762f:	eb 01                	jmp    c0017632 <Vm::faultHandler(regs*)+0x3fa>
c0017631:	40                   	inc    eax
c0017632:	0f b7 c0             	movzx  eax,ax
c0017635:	e9 8b 00 00 00       	jmp    c00176c5 <Vm::faultHandler(regs*)+0x48d>
c001763a:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001763d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017640:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0017645:	74 29                	je     c0017670 <Vm::faultHandler(regs*)+0x438>
c0017647:	3d ff ff 00 00       	cmp    eax,0xffff
c001764c:	76 22                	jbe    c0017670 <Vm::faultHandler(regs*)+0x438>
c001764e:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017652:	50                   	push   eax
c0017653:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017657:	50                   	push   eax
c0017658:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001765c:	50                   	push   eax
c001765d:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017661:	50                   	push   eax
c0017662:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017666:	50                   	push   eax
c0017667:	6a 6d                	push   0x6d
c0017669:	6a 6d                	push   0x6d
c001766b:	e9 4d 01 00 00       	jmp    c00177bd <Vm::faultHandler(regs*)+0x585>
c0017670:	0f b7 c8             	movzx  ecx,ax
c0017673:	0f b7 f6             	movzx  esi,si
c0017676:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017679:	83 e5 01             	and    ebp,0x1
c001767c:	74 20                	je     c001769e <Vm::faultHandler(regs*)+0x466>
c001767e:	ed                   	in     eax,dx
c001767f:	55                   	push   ebp
c0017680:	50                   	push   eax
c0017681:	51                   	push   ecx
c0017682:	56                   	push   esi
c0017683:	e8 9b fb ff ff       	call   c0017223 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0017688:	83 c4 10             	add    esp,0x10
c001768b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001768e:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017692:	74 05                	je     c0017699 <Vm::faultHandler(regs*)+0x461>
c0017694:	83 e8 04             	sub    eax,0x4
c0017697:	eb 27                	jmp    c00176c0 <Vm::faultHandler(regs*)+0x488>
c0017699:	83 c0 04             	add    eax,0x4
c001769c:	eb 22                	jmp    c00176c0 <Vm::faultHandler(regs*)+0x488>
c001769e:	66 ed                	in     ax,dx
c00176a0:	0f b7 c0             	movzx  eax,ax
c00176a3:	57                   	push   edi
c00176a4:	50                   	push   eax
c00176a5:	51                   	push   ecx
c00176a6:	56                   	push   esi
c00176a7:	e8 61 fb ff ff       	call   c001720d <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c00176ac:	83 c4 10             	add    esp,0x10
c00176af:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00176b2:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00176b6:	74 05                	je     c00176bd <Vm::faultHandler(regs*)+0x485>
c00176b8:	83 e8 02             	sub    eax,0x2
c00176bb:	eb 03                	jmp    c00176c0 <Vm::faultHandler(regs*)+0x488>
c00176bd:	83 c0 02             	add    eax,0x2
c00176c0:	25 ff ff 00 00       	and    eax,0xffff
c00176c5:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00176c8:	e9 20 02 00 00       	jmp    c00178ed <Vm::faultHandler(regs*)+0x6b5>
c00176cd:	8d 46 ff             	lea    eax,[esi-0x1]
c00176d0:	0f b6 f0             	movzx  esi,al
c00176d3:	83 fe 05             	cmp    esi,0x5
c00176d6:	77 23                	ja     c00176fb <Vm::faultHandler(regs*)+0x4c3>
c00176d8:	ff 24 b5 cc 2b 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd434]
c00176df:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c00176e4:	eb 15                	jmp    c00176fb <Vm::faultHandler(regs*)+0x4c3>
c00176e6:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c00176ea:	eb 0f                	jmp    c00176fb <Vm::faultHandler(regs*)+0x4c3>
c00176ec:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c00176f0:	eb 09                	jmp    c00176fb <Vm::faultHandler(regs*)+0x4c3>
c00176f2:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c00176f6:	eb 03                	jmp    c00176fb <Vm::faultHandler(regs*)+0x4c3>
c00176f8:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c00176fb:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00176fe:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0017703:	74 29                	je     c001772e <Vm::faultHandler(regs*)+0x4f6>
c0017705:	3d ff ff 00 00       	cmp    eax,0xffff
c001770a:	76 22                	jbe    c001772e <Vm::faultHandler(regs*)+0x4f6>
c001770c:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017710:	50                   	push   eax
c0017711:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017715:	50                   	push   eax
c0017716:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001771a:	50                   	push   eax
c001771b:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001771f:	50                   	push   eax
c0017720:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017724:	50                   	push   eax
c0017725:	6a 6e                	push   0x6e
c0017727:	6a 6e                	push   0x6e
c0017729:	e9 8f 00 00 00       	jmp    c00177bd <Vm::faultHandler(regs*)+0x585>
c001772e:	0f b7 c0             	movzx  eax,ax
c0017731:	52                   	push   edx
c0017732:	52                   	push   edx
c0017733:	50                   	push   eax
c0017734:	57                   	push   edi
c0017735:	e8 8a fa ff ff       	call   c00171c4 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001773a:	59                   	pop    ecx
c001773b:	0f b6 c0             	movzx  eax,al
c001773e:	5e                   	pop    esi
c001773f:	50                   	push   eax
c0017740:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017744:	50                   	push   eax
c0017745:	e8 fe f5 ff ff       	call   c0016d48 <Vm::outbv(unsigned short, unsigned char)>
c001774a:	83 c4 10             	add    esp,0x10
c001774d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017750:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017754:	74 03                	je     c0017759 <Vm::faultHandler(regs*)+0x521>
c0017756:	48                   	dec    eax
c0017757:	eb 01                	jmp    c001775a <Vm::faultHandler(regs*)+0x522>
c0017759:	40                   	inc    eax
c001775a:	0f b7 c0             	movzx  eax,ax
c001775d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0017760:	e9 88 01 00 00       	jmp    c00178ed <Vm::faultHandler(regs*)+0x6b5>
c0017765:	8d 46 ff             	lea    eax,[esi-0x1]
c0017768:	0f b6 f0             	movzx  esi,al
c001776b:	83 fe 05             	cmp    esi,0x5
c001776e:	77 1e                	ja     c001778e <Vm::faultHandler(regs*)+0x556>
c0017770:	ff 24 b5 e4 2b 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd41c]
c0017777:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001777b:	eb 11                	jmp    c001778e <Vm::faultHandler(regs*)+0x556>
c001777d:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0017780:	eb 0c                	jmp    c001778e <Vm::faultHandler(regs*)+0x556>
c0017782:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0017785:	eb 07                	jmp    c001778e <Vm::faultHandler(regs*)+0x556>
c0017787:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001778a:	eb 02                	jmp    c001778e <Vm::faultHandler(regs*)+0x556>
c001778c:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001778e:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0017791:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0017796:	74 37                	je     c00177cf <Vm::faultHandler(regs*)+0x597>
c0017798:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001779e:	76 2f                	jbe    c00177cf <Vm::faultHandler(regs*)+0x597>
c00177a0:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00177a4:	50                   	push   eax
c00177a5:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00177a9:	50                   	push   eax
c00177aa:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00177ae:	50                   	push   eax
c00177af:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00177b3:	50                   	push   eax
c00177b4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00177b8:	50                   	push   eax
c00177b9:	6a 6f                	push   0x6f
c00177bb:	6a 6f                	push   0x6f
c00177bd:	68 70 2b 02 c0       	push   0xc0022b70
c00177c2:	e8 7e 31 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00177c7:	83 c4 20             	add    esp,0x20
c00177ca:	e9 83 01 00 00       	jmp    c0017952 <Vm::faultHandler(regs*)+0x71a>
c00177cf:	0f b7 d7             	movzx  edx,di
c00177d2:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c00177d5:	0f b7 c6             	movzx  eax,si
c00177d8:	81 e1 00 04 00 00    	and    ecx,0x400
c00177de:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c00177e1:	83 e5 01             	and    ebp,0x1
c00177e4:	74 1d                	je     c0017803 <Vm::faultHandler(regs*)+0x5cb>
c00177e6:	55                   	push   ebp
c00177e7:	55                   	push   ebp
c00177e8:	50                   	push   eax
c00177e9:	52                   	push   edx
c00177ea:	e8 f8 f9 ff ff       	call   c00171e7 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c00177ef:	83 c4 10             	add    esp,0x10
c00177f2:	89 fa                	mov    edx,edi
c00177f4:	ef                   	out    dx,eax
c00177f5:	85 c9                	test   ecx,ecx
c00177f7:	74 05                	je     c00177fe <Vm::faultHandler(regs*)+0x5c6>
c00177f9:	83 ee 04             	sub    esi,0x4
c00177fc:	eb 21                	jmp    c001781f <Vm::faultHandler(regs*)+0x5e7>
c00177fe:	83 c6 04             	add    esi,0x4
c0017801:	eb 1c                	jmp    c001781f <Vm::faultHandler(regs*)+0x5e7>
c0017803:	55                   	push   ebp
c0017804:	55                   	push   ebp
c0017805:	50                   	push   eax
c0017806:	52                   	push   edx
c0017807:	e8 c9 f9 ff ff       	call   c00171d5 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001780c:	83 c4 10             	add    esp,0x10
c001780f:	89 fa                	mov    edx,edi
c0017811:	66 ef                	out    dx,ax
c0017813:	85 c9                	test   ecx,ecx
c0017815:	74 05                	je     c001781c <Vm::faultHandler(regs*)+0x5e4>
c0017817:	83 ee 02             	sub    esi,0x2
c001781a:	eb 03                	jmp    c001781f <Vm::faultHandler(regs*)+0x5e7>
c001781c:	83 c6 02             	add    esi,0x2
c001781f:	81 e6 ff ff 00 00    	and    esi,0xffff
c0017825:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0017828:	e9 c0 00 00 00       	jmp    c00178ed <Vm::faultHandler(regs*)+0x6b5>
c001782d:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0017834:	83 ec 0c             	sub    esp,0xc
c0017837:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001783b:	50                   	push   eax
c001783c:	e8 f4 f4 ff ff       	call   c0016d35 <Vm::inbv(unsigned short)>
c0017841:	0f b6 c0             	movzx  eax,al
c0017844:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0017847:	eb 3a                	jmp    c0017883 <Vm::faultHandler(regs*)+0x64b>
c0017849:	83 e5 01             	and    ebp,0x1
c001784c:	74 07                	je     c0017855 <Vm::faultHandler(regs*)+0x61d>
c001784e:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0017852:	ed                   	in     eax,dx
c0017853:	eb 14                	jmp    c0017869 <Vm::faultHandler(regs*)+0x631>
c0017855:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0017858:	66 31 f6             	xor    si,si
c001785b:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001785e:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0017862:	66 ed                	in     ax,dx
c0017864:	0f b7 c0             	movzx  eax,ax
c0017867:	09 f0                	or     eax,esi
c0017869:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001786c:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0017870:	eb 7e                	jmp    c00178f0 <Vm::faultHandler(regs*)+0x6b8>
c0017872:	52                   	push   edx
c0017873:	52                   	push   edx
c0017874:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0017878:	50                   	push   eax
c0017879:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001787d:	50                   	push   eax
c001787e:	e8 c5 f4 ff ff       	call   c0016d48 <Vm::outbv(unsigned short, unsigned char)>
c0017883:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0017887:	eb 4f                	jmp    c00178d8 <Vm::faultHandler(regs*)+0x6a0>
c0017889:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001788c:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0017890:	83 e5 01             	and    ebp,0x1
c0017893:	74 03                	je     c0017898 <Vm::faultHandler(regs*)+0x660>
c0017895:	ef                   	out    dx,eax
c0017896:	eb d4                	jmp    c001786c <Vm::faultHandler(regs*)+0x634>
c0017898:	66 ef                	out    dx,ax
c001789a:	eb d0                	jmp    c001786c <Vm::faultHandler(regs*)+0x634>
c001789c:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00178a3:	83 ec 0c             	sub    esp,0xc
c00178a6:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00178aa:	50                   	push   eax
c00178ab:	e8 85 f4 ff ff       	call   c0016d35 <Vm::inbv(unsigned short)>
c00178b0:	0f b6 c0             	movzx  eax,al
c00178b3:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00178b6:	eb 1d                	jmp    c00178d5 <Vm::faultHandler(regs*)+0x69d>
c00178b8:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00178bb:	83 e5 01             	and    ebp,0x1
c00178be:	74 03                	je     c00178c3 <Vm::faultHandler(regs*)+0x68b>
c00178c0:	ed                   	in     eax,dx
c00178c1:	eb 0d                	jmp    c00178d0 <Vm::faultHandler(regs*)+0x698>
c00178c3:	66 ed                	in     ax,dx
c00178c5:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00178c8:	0f b7 c0             	movzx  eax,ax
c00178cb:	66 31 d2             	xor    dx,dx
c00178ce:	09 d0                	or     eax,edx
c00178d0:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00178d3:	eb 18                	jmp    c00178ed <Vm::faultHandler(regs*)+0x6b5>
c00178d5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00178d8:	83 c4 10             	add    esp,0x10
c00178db:	eb 13                	jmp    c00178f0 <Vm::faultHandler(regs*)+0x6b8>
c00178dd:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00178e0:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00178e3:	83 e5 01             	and    ebp,0x1
c00178e6:	74 03                	je     c00178eb <Vm::faultHandler(regs*)+0x6b3>
c00178e8:	ef                   	out    dx,eax
c00178e9:	eb 02                	jmp    c00178ed <Vm::faultHandler(regs*)+0x6b5>
c00178eb:	66 ef                	out    dx,ax
c00178ed:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00178f0:	b0 01                	mov    al,0x1
c00178f2:	eb 60                	jmp    c0017954 <Vm::faultHandler(regs*)+0x71c>
c00178f4:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00178f8:	50                   	push   eax
c00178f9:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00178fd:	50                   	push   eax
c00178fe:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017902:	50                   	push   eax
c0017903:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017907:	50                   	push   eax
c0017908:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001790c:	50                   	push   eax
c001790d:	52                   	push   edx
c001790e:	52                   	push   edx
c001790f:	68 9d 2b 02 c0       	push   0xc0022b9d
c0017914:	e8 2c 30 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017919:	83 c4 20             	add    esp,0x20
c001791c:	83 ec 0c             	sub    esp,0xc
c001791f:	6a 60                	push   0x60
c0017921:	e8 0f f4 ff ff       	call   c0016d35 <Vm::inbv(unsigned short)>
c0017926:	83 c4 10             	add    esp,0x10
c0017929:	0f b6 d0             	movzx  edx,al
c001792c:	83 fa 1c             	cmp    edx,0x1c
c001792f:	74 05                	je     c0017936 <Vm::faultHandler(regs*)+0x6fe>
c0017931:	83 fa 5a             	cmp    edx,0x5a
c0017934:	75 e6                	jne    c001791c <Vm::faultHandler(regs*)+0x6e4>
c0017936:	0f b6 c0             	movzx  eax,al
c0017939:	83 f8 1c             	cmp    eax,0x1c
c001793c:	74 05                	je     c0017943 <Vm::faultHandler(regs*)+0x70b>
c001793e:	83 f8 5a             	cmp    eax,0x5a
c0017941:	75 0f                	jne    c0017952 <Vm::faultHandler(regs*)+0x71a>
c0017943:	83 ec 0c             	sub    esp,0xc
c0017946:	6a 60                	push   0x60
c0017948:	e8 e8 f3 ff ff       	call   c0016d35 <Vm::inbv(unsigned short)>
c001794d:	83 c4 10             	add    esp,0x10
c0017950:	eb e4                	jmp    c0017936 <Vm::faultHandler(regs*)+0x6fe>
c0017952:	31 c0                	xor    eax,eax
c0017954:	83 c4 2c             	add    esp,0x2c
c0017957:	5b                   	pop    ebx
c0017958:	5e                   	pop    esi
c0017959:	5f                   	pop    edi
c001795a:	5d                   	pop    ebp
c001795b:	c3                   	ret    

c001795c <noCopro(unsigned long)>:
c001795c:	c3                   	ret    

c001795d <nmiHandler(regs*, void*)>:
c001795d:	83 ec 0c             	sub    esp,0xc
c0017960:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017965:	83 ec 0c             	sub    esp,0xc
c0017968:	50                   	push   eax
c0017969:	e8 48 f9 fe ff       	call   c00072b6 <Computer::handleNMI()>
c001796e:	83 c4 10             	add    esp,0x10
c0017971:	90                   	nop
c0017972:	83 c4 0c             	add    esp,0xc
c0017975:	c3                   	ret    

c0017976 <doubleFault(regs*, void*)>:
c0017976:	55                   	push   ebp
c0017977:	89 e5                	mov    ebp,esp
c0017979:	83 ec 08             	sub    esp,0x8
c001797c:	83 ec 0c             	sub    esp,0xc
c001797f:	68 fc 2b 02 c0       	push   0xc0022bfc
c0017984:	e8 26 9d ff ff       	call   c00116af <KePanic(char const*)>
c0017989:	83 c4 10             	add    esp,0x10
c001798c:	90                   	nop
c001798d:	c9                   	leave  
c001798e:	c3                   	ret    

c001798f <displayDebugInfo(regs*)>:
c001798f:	83 ec 1c             	sub    esp,0x1c
c0017992:	0f 20 c0             	mov    eax,cr0
c0017995:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017999:	0f 20 d0             	mov    eax,cr2
c001799c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00179a0:	0f 20 d8             	mov    eax,cr3
c00179a3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00179a7:	0f 20 e0             	mov    eax,cr4
c00179aa:	89 04 24             	mov    DWORD PTR [esp],eax
c00179ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179b1:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00179b4:	83 ec 08             	sub    esp,0x8
c00179b7:	50                   	push   eax
c00179b8:	68 18 2c 02 c0       	push   0xc0022c18
c00179bd:	e8 83 2f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00179c2:	83 c4 10             	add    esp,0x10
c00179c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179c9:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00179cc:	83 ec 08             	sub    esp,0x8
c00179cf:	50                   	push   eax
c00179d0:	68 09 2c 02 c0       	push   0xc0022c09
c00179d5:	e8 6b 2f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00179da:	83 c4 10             	add    esp,0x10
c00179dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179e1:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00179e4:	83 ec 08             	sub    esp,0x8
c00179e7:	50                   	push   eax
c00179e8:	68 14 2c 02 c0       	push   0xc0022c14
c00179ed:	e8 53 2f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00179f2:	83 c4 10             	add    esp,0x10
c00179f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179f9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00179fc:	83 ec 08             	sub    esp,0x8
c00179ff:	50                   	push   eax
c0017a00:	68 23 2c 02 c0       	push   0xc0022c23
c0017a05:	e8 3b 2f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017a0a:	83 c4 10             	add    esp,0x10
c0017a0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a11:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0017a14:	83 ec 08             	sub    esp,0x8
c0017a17:	50                   	push   eax
c0017a18:	68 2e 2c 02 c0       	push   0xc0022c2e
c0017a1d:	e8 23 2f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017a22:	83 c4 10             	add    esp,0x10
c0017a25:	83 ec 08             	sub    esp,0x8
c0017a28:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017a2c:	68 39 2c 02 c0       	push   0xc0022c39
c0017a31:	e8 0f 2f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017a36:	83 c4 10             	add    esp,0x10
c0017a39:	83 ec 08             	sub    esp,0x8
c0017a3c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017a40:	68 44 2c 02 c0       	push   0xc0022c44
c0017a45:	e8 fb 2e ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017a4a:	83 c4 10             	add    esp,0x10
c0017a4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a51:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0017a54:	c1 e0 05             	shl    eax,0x5
c0017a57:	8d 90 c0 3f 02 c0    	lea    edx,[eax-0x3ffdc040]
c0017a5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a61:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0017a64:	83 ec 04             	sub    esp,0x4
c0017a67:	52                   	push   edx
c0017a68:	50                   	push   eax
c0017a69:	68 4f 2c 02 c0       	push   0xc0022c4f
c0017a6e:	e8 d2 2e ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017a73:	83 c4 10             	add    esp,0x10
c0017a76:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a7b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a81:	83 ec 0c             	sub    esp,0xc
c0017a84:	50                   	push   eax
c0017a85:	e8 cf 0c ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c0017a8a:	83 c4 10             	add    esp,0x10
c0017a8d:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a92:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a98:	83 ec 08             	sub    esp,0x8
c0017a9b:	68 5e 2c 02 c0       	push   0xc0022c5e
c0017aa0:	50                   	push   eax
c0017aa1:	e8 00 10 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017aa6:	83 c4 10             	add    esp,0x10
c0017aa9:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017aae:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017ab4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017ab8:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0017abb:	83 ec 08             	sub    esp,0x8
c0017abe:	52                   	push   edx
c0017abf:	50                   	push   eax
c0017ac0:	e8 9b 0f ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017ac5:	83 c4 10             	add    esp,0x10
c0017ac8:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017acd:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017ad3:	83 ec 08             	sub    esp,0x8
c0017ad6:	68 6c 2c 02 c0       	push   0xc0022c6c
c0017adb:	50                   	push   eax
c0017adc:	e8 c5 0f ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017ae1:	83 c4 10             	add    esp,0x10
c0017ae4:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017ae9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017aef:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0017af4:	8b 12                	mov    edx,DWORD PTR [edx]
c0017af6:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017af9:	83 c2 0c             	add    edx,0xc
c0017afc:	83 ec 08             	sub    esp,0x8
c0017aff:	52                   	push   edx
c0017b00:	50                   	push   eax
c0017b01:	e8 a0 0f ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017b06:	83 c4 10             	add    esp,0x10
c0017b09:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b0e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b14:	83 ec 08             	sub    esp,0x8
c0017b17:	68 75 2c 02 c0       	push   0xc0022c75
c0017b1c:	50                   	push   eax
c0017b1d:	e8 84 0f ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017b22:	83 c4 10             	add    esp,0x10
c0017b25:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b2a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b30:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017b34:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0017b37:	83 ec 08             	sub    esp,0x8
c0017b3a:	52                   	push   edx
c0017b3b:	50                   	push   eax
c0017b3c:	e8 1f 0f ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017b41:	83 c4 10             	add    esp,0x10
c0017b44:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b49:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b4f:	83 ec 08             	sub    esp,0x8
c0017b52:	68 7d 2c 02 c0       	push   0xc0022c7d
c0017b57:	50                   	push   eax
c0017b58:	e8 49 0f ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017b5d:	83 c4 10             	add    esp,0x10
c0017b60:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b65:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b6b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017b6f:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0017b72:	83 ec 08             	sub    esp,0x8
c0017b75:	52                   	push   edx
c0017b76:	50                   	push   eax
c0017b77:	e8 e4 0e ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017b7c:	83 c4 10             	add    esp,0x10
c0017b7f:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b84:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b8a:	83 ec 08             	sub    esp,0x8
c0017b8d:	68 85 2c 02 c0       	push   0xc0022c85
c0017b92:	50                   	push   eax
c0017b93:	e8 0e 0f ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017b98:	83 c4 10             	add    esp,0x10
c0017b9b:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017ba0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017ba6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017baa:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0017bad:	83 ec 08             	sub    esp,0x8
c0017bb0:	52                   	push   edx
c0017bb1:	50                   	push   eax
c0017bb2:	e8 a9 0e ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017bb7:	83 c4 10             	add    esp,0x10
c0017bba:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017bbf:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017bc5:	83 ec 08             	sub    esp,0x8
c0017bc8:	68 8d 2c 02 c0       	push   0xc0022c8d
c0017bcd:	50                   	push   eax
c0017bce:	e8 d3 0e ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017bd3:	83 c4 10             	add    esp,0x10
c0017bd6:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017bdb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017be1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017be5:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017be8:	83 ec 08             	sub    esp,0x8
c0017beb:	52                   	push   edx
c0017bec:	50                   	push   eax
c0017bed:	e8 6e 0e ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017bf2:	83 c4 10             	add    esp,0x10
c0017bf5:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017bfa:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c00:	83 ec 08             	sub    esp,0x8
c0017c03:	68 95 2c 02 c0       	push   0xc0022c95
c0017c08:	50                   	push   eax
c0017c09:	e8 98 0e ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017c0e:	83 c4 10             	add    esp,0x10
c0017c11:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c16:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c1c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017c20:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0017c23:	83 ec 08             	sub    esp,0x8
c0017c26:	52                   	push   edx
c0017c27:	50                   	push   eax
c0017c28:	e8 33 0e ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017c2d:	83 c4 10             	add    esp,0x10
c0017c30:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c35:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c3b:	83 ec 08             	sub    esp,0x8
c0017c3e:	68 9d 2c 02 c0       	push   0xc0022c9d
c0017c43:	50                   	push   eax
c0017c44:	e8 5d 0e ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017c49:	83 c4 10             	add    esp,0x10
c0017c4c:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c51:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c57:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017c5b:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0017c5e:	83 ec 08             	sub    esp,0x8
c0017c61:	52                   	push   edx
c0017c62:	50                   	push   eax
c0017c63:	e8 f8 0d ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017c68:	83 c4 10             	add    esp,0x10
c0017c6b:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c70:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c76:	83 ec 08             	sub    esp,0x8
c0017c79:	68 a5 2c 02 c0       	push   0xc0022ca5
c0017c7e:	50                   	push   eax
c0017c7f:	e8 22 0e ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017c84:	83 c4 10             	add    esp,0x10
c0017c87:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c8c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c92:	83 ec 08             	sub    esp,0x8
c0017c95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017c99:	50                   	push   eax
c0017c9a:	e8 c1 0d ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017c9f:	83 c4 10             	add    esp,0x10
c0017ca2:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017ca7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017cad:	83 ec 08             	sub    esp,0x8
c0017cb0:	68 ae 2c 02 c0       	push   0xc0022cae
c0017cb5:	50                   	push   eax
c0017cb6:	e8 eb 0d ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017cbb:	83 c4 10             	add    esp,0x10
c0017cbe:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017cc3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017cc9:	83 ec 08             	sub    esp,0x8
c0017ccc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017cd0:	50                   	push   eax
c0017cd1:	e8 8a 0d ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017cd6:	83 c4 10             	add    esp,0x10
c0017cd9:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017cde:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017ce4:	83 ec 08             	sub    esp,0x8
c0017ce7:	68 b6 2c 02 c0       	push   0xc0022cb6
c0017cec:	50                   	push   eax
c0017ced:	e8 b4 0d ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017cf2:	83 c4 10             	add    esp,0x10
c0017cf5:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017cfa:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017d00:	83 ec 08             	sub    esp,0x8
c0017d03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017d07:	50                   	push   eax
c0017d08:	e8 53 0d ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017d0d:	83 c4 10             	add    esp,0x10
c0017d10:	fa                   	cli    
c0017d11:	f4                   	hlt    
c0017d12:	eb fe                	jmp    c0017d12 <displayDebugInfo(regs*)+0x383>

c0017d14 <HalSystemIdle()>:
c0017d14:	56                   	push   esi
c0017d15:	53                   	push   ebx
c0017d16:	83 ec 14             	sub    esp,0x14
c0017d19:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017d1e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017d24:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0017d2a:	83 e0 04             	and    eax,0x4
c0017d2d:	0f b6 c0             	movzx  eax,al
c0017d30:	85 c0                	test   eax,eax
c0017d32:	0f 95 c0             	setne  al
c0017d35:	0f b6 c0             	movzx  eax,al
c0017d38:	85 c0                	test   eax,eax
c0017d3a:	74 4c                	je     c0017d88 <HalSystemIdle()+0x74>
c0017d3c:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017d41:	83 ec 08             	sub    esp,0x8
c0017d44:	68 e1 00 00 00       	push   0xe1
c0017d49:	50                   	push   eax
c0017d4a:	e8 71 f3 fe ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c0017d4f:	83 c4 10             	add    esp,0x10
c0017d52:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017d56:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017d5a:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017d5f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017d63:	83 e2 02             	and    edx,0x2
c0017d66:	89 d3                	mov    ebx,edx
c0017d68:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017d6c:	83 e2 00             	and    edx,0x0
c0017d6f:	89 d6                	mov    esi,edx
c0017d71:	56                   	push   esi
c0017d72:	53                   	push   ebx
c0017d73:	68 e1 00 00 00       	push   0xe1
c0017d78:	50                   	push   eax
c0017d79:	e8 6e f3 fe ff       	call   c00070ec <Computer::wrmsr(unsigned int, unsigned long long)>
c0017d7e:	83 c4 10             	add    esp,0x10
c0017d81:	e8 0e 84 fe ff       	call   c0000194 <doTPAUSE>
c0017d86:	eb 01                	jmp    c0017d89 <HalSystemIdle()+0x75>
c0017d88:	f4                   	hlt    
c0017d89:	90                   	nop
c0017d8a:	83 c4 14             	add    esp,0x14
c0017d8d:	5b                   	pop    ebx
c0017d8e:	5e                   	pop    esi
c0017d8f:	c3                   	ret    

c0017d90 <displayProgramFault(char const*)>:
c0017d90:	83 ec 0c             	sub    esp,0xc
c0017d93:	83 ec 0c             	sub    esp,0xc
c0017d96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017d9a:	e8 a6 2b ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017d9f:	83 c4 10             	add    esp,0x10
c0017da2:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017da7:	8b 00                	mov    eax,DWORD PTR [eax]
c0017da9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017dac:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017db2:	85 c0                	test   eax,eax
c0017db4:	74 21                	je     c0017dd7 <displayProgramFault(char const*)+0x47>
c0017db6:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017dbb:	8b 00                	mov    eax,DWORD PTR [eax]
c0017dbd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017dc0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017dc6:	6a 04                	push   0x4
c0017dc8:	6a 0f                	push   0xf
c0017dca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017dce:	50                   	push   eax
c0017dcf:	e8 44 0d ff ff       	call   c0008b18 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0017dd4:	83 c4 10             	add    esp,0x10
c0017dd7:	90                   	nop
c0017dd8:	83 c4 0c             	add    esp,0xc
c0017ddb:	c3                   	ret    

c0017ddc <gpFault(regs*, void*)>:
c0017ddc:	83 ec 1c             	sub    esp,0x1c
c0017ddf:	c7 05 74 c7 02 c0 38 72 01 c0 	mov    DWORD PTR ds:0xc002c774,0xc0017238
c0017de9:	a1 74 c7 02 c0       	mov    eax,ds:0xc002c774
c0017dee:	85 c0                	test   eax,eax
c0017df0:	74 1e                	je     c0017e10 <gpFault(regs*, void*)+0x34>
c0017df2:	a1 74 c7 02 c0       	mov    eax,ds:0xc002c774
c0017df7:	83 ec 0c             	sub    esp,0xc
c0017dfa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017dfe:	ff d0                	call   eax
c0017e00:	83 c4 10             	add    esp,0x10
c0017e03:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017e07:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017e0c:	85 c0                	test   eax,eax
c0017e0e:	75 2e                	jne    c0017e3e <gpFault(regs*, void*)+0x62>
c0017e10:	83 ec 0c             	sub    esp,0xc
c0017e13:	68 be 2c 02 c0       	push   0xc0022cbe
c0017e18:	e8 73 ff ff ff       	call   c0017d90 <displayProgramFault(char const*)>
c0017e1d:	83 c4 10             	add    esp,0x10
c0017e20:	83 ec 0c             	sub    esp,0xc
c0017e23:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017e27:	e8 63 fb ff ff       	call   c001798f <displayDebugInfo(regs*)>
c0017e2c:	83 c4 10             	add    esp,0x10
c0017e2f:	83 ec 0c             	sub    esp,0xc
c0017e32:	6a 00                	push   0x0
c0017e34:	e8 a3 ed ff ff       	call   c0016bdc <Thr::terminateFromIRQ(int)>
c0017e39:	83 c4 10             	add    esp,0x10
c0017e3c:	eb 01                	jmp    c0017e3f <gpFault(regs*, void*)+0x63>
c0017e3e:	90                   	nop
c0017e3f:	83 c4 1c             	add    esp,0x1c
c0017e42:	c3                   	ret    

c0017e43 <pgFault(regs*, void*)>:
c0017e43:	83 ec 1c             	sub    esp,0x1c
c0017e46:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e4a:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0017e4d:	0f 20 d0             	mov    eax,cr2
c0017e50:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017e54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017e58:	83 ec 04             	sub    esp,0x4
c0017e5b:	52                   	push   edx
c0017e5c:	50                   	push   eax
c0017e5d:	68 9c 2d 02 c0       	push   0xc0022d9c
c0017e62:	e8 de 2a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017e67:	83 c4 10             	add    esp,0x10
c0017e6a:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017e6f:	8b 00                	mov    eax,DWORD PTR [eax]
c0017e71:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017e74:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0017e7a:	0f 20 d2             	mov    edx,cr2
c0017e7d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017e81:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017e85:	83 ec 08             	sub    esp,0x8
c0017e88:	52                   	push   edx
c0017e89:	50                   	push   eax
c0017e8a:	e8 01 25 ff ff       	call   c000a390 <VAS::tryLoadBackOffDisk(unsigned long)>
c0017e8f:	83 c4 10             	add    esp,0x10
c0017e92:	0f b6 c0             	movzx  eax,al
c0017e95:	85 c0                	test   eax,eax
c0017e97:	75 2e                	jne    c0017ec7 <pgFault(regs*, void*)+0x84>
c0017e99:	83 ec 0c             	sub    esp,0xc
c0017e9c:	68 d7 2c 02 c0       	push   0xc0022cd7
c0017ea1:	e8 ea fe ff ff       	call   c0017d90 <displayProgramFault(char const*)>
c0017ea6:	83 c4 10             	add    esp,0x10
c0017ea9:	83 ec 0c             	sub    esp,0xc
c0017eac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017eb0:	e8 da fa ff ff       	call   c001798f <displayDebugInfo(regs*)>
c0017eb5:	83 c4 10             	add    esp,0x10
c0017eb8:	83 ec 0c             	sub    esp,0xc
c0017ebb:	6a 00                	push   0x0
c0017ebd:	e8 1a ed ff ff       	call   c0016bdc <Thr::terminateFromIRQ(int)>
c0017ec2:	83 c4 10             	add    esp,0x10
c0017ec5:	eb 01                	jmp    c0017ec8 <pgFault(regs*, void*)+0x85>
c0017ec7:	90                   	nop
c0017ec8:	83 c4 1c             	add    esp,0x1c
c0017ecb:	c3                   	ret    

c0017ecc <otherISRHandler(regs*, void*)>:
c0017ecc:	83 ec 0c             	sub    esp,0xc
c0017ecf:	83 ec 0c             	sub    esp,0xc
c0017ed2:	68 c4 2d 02 c0       	push   0xc0022dc4
c0017ed7:	e8 b4 fe ff ff       	call   c0017d90 <displayProgramFault(char const*)>
c0017edc:	83 c4 10             	add    esp,0x10
c0017edf:	83 ec 0c             	sub    esp,0xc
c0017ee2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017ee6:	e8 a4 fa ff ff       	call   c001798f <displayDebugInfo(regs*)>
c0017eeb:	83 c4 10             	add    esp,0x10
c0017eee:	83 ec 0c             	sub    esp,0xc
c0017ef1:	6a 00                	push   0x0
c0017ef3:	e8 e4 ec ff ff       	call   c0016bdc <Thr::terminateFromIRQ(int)>
c0017ef8:	83 c4 10             	add    esp,0x10
c0017efb:	90                   	nop
c0017efc:	83 c4 0c             	add    esp,0xc
c0017eff:	c3                   	ret    

c0017f00 <opcodeFault(regs*, void*)>:
c0017f00:	55                   	push   ebp
c0017f01:	89 e5                	mov    ebp,esp
c0017f03:	83 ec 08             	sub    esp,0x8
c0017f06:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017f09:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017f0c:	83 ec 08             	sub    esp,0x8
c0017f0f:	50                   	push   eax
c0017f10:	68 e2 2c 02 c0       	push   0xc0022ce2
c0017f15:	e8 2b 2a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017f1a:	83 c4 10             	add    esp,0x10
c0017f1d:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017f22:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017f28:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0017f2e:	0f b6 c0             	movzx  eax,al
c0017f31:	85 c0                	test   eax,eax
c0017f33:	74 21                	je     c0017f56 <opcodeFault(regs*, void*)+0x56>
c0017f35:	83 ec 0c             	sub    esp,0xc
c0017f38:	68 ec 2d 02 c0       	push   0xc0022dec
c0017f3d:	e8 03 2a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017f42:	83 c4 10             	add    esp,0x10
c0017f45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017f48:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017f4b:	8d 50 19             	lea    edx,[eax+0x19]
c0017f4e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017f51:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017f54:	eb 2b                	jmp    c0017f81 <opcodeFault(regs*, void*)+0x81>
c0017f56:	83 ec 0c             	sub    esp,0xc
c0017f59:	68 f0 2c 02 c0       	push   0xc0022cf0
c0017f5e:	e8 2d fe ff ff       	call   c0017d90 <displayProgramFault(char const*)>
c0017f63:	83 c4 10             	add    esp,0x10
c0017f66:	83 ec 0c             	sub    esp,0xc
c0017f69:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0017f6c:	e8 1e fa ff ff       	call   c001798f <displayDebugInfo(regs*)>
c0017f71:	83 c4 10             	add    esp,0x10
c0017f74:	83 ec 0c             	sub    esp,0xc
c0017f77:	6a 00                	push   0x0
c0017f79:	e8 5e ec ff ff       	call   c0016bdc <Thr::terminateFromIRQ(int)>
c0017f7e:	83 c4 10             	add    esp,0x10
c0017f81:	c9                   	leave  
c0017f82:	c3                   	ret    

c0017f83 <i386SaveCoprocessor(void*)>:
c0017f83:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017f87:	83 c0 3f             	add    eax,0x3f
c0017f8a:	83 e0 c0             	and    eax,0xffffffc0
c0017f8d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017f91:	ff 25 70 c7 02 c0    	jmp    DWORD PTR ds:0xc002c770

c0017f97 <i386LoadCoprocessor(void*)>:
c0017f97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017f9b:	83 c0 3f             	add    eax,0x3f
c0017f9e:	83 e0 c0             	and    eax,0xffffffc0
c0017fa1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017fa5:	ff 25 6c c7 02 c0    	jmp    DWORD PTR ds:0xc002c76c

c0017fab <x87EmulHandler(regs*, void*)>:
c0017fab:	53                   	push   ebx
c0017fac:	83 ec 08             	sub    esp,0x8
c0017faf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017fb4:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0017fb8:	74 10                	je     c0017fca <x87EmulHandler(regs*, void*)+0x1f>
c0017fba:	83 ec 0c             	sub    esp,0xc
c0017fbd:	68 fd 2c 02 c0       	push   0xc0022cfd
c0017fc2:	e8 e8 96 ff ff       	call   c00116af <KePanic(char const*)>
c0017fc7:	83 c4 10             	add    esp,0x10
c0017fca:	0f 20 c0             	mov    eax,cr0
c0017fcd:	a8 08                	test   al,0x8
c0017fcf:	74 59                	je     c001802a <x87EmulHandler(regs*, void*)+0x7f>
c0017fd1:	0f 06                	clts   
c0017fd3:	a1 68 c7 02 c0       	mov    eax,ds:0xc002c768
c0017fd8:	85 c0                	test   eax,eax
c0017fda:	74 0e                	je     c0017fea <x87EmulHandler(regs*, void*)+0x3f>
c0017fdc:	83 ec 0c             	sub    esp,0xc
c0017fdf:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0017fe2:	e8 9c ff ff ff       	call   c0017f83 <i386SaveCoprocessor(void*)>
c0017fe7:	83 c4 10             	add    esp,0x10
c0017fea:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0017ff0:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0017ff4:	75 12                	jne    c0018008 <x87EmulHandler(regs*, void*)+0x5d>
c0017ff6:	83 ec 0c             	sub    esp,0xc
c0017ff9:	68 40 02 00 00       	push   0x240
c0017ffe:	e8 b3 fa fe ff       	call   c0007ab6 <malloc>
c0018003:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0018006:	eb 10                	jmp    c0018018 <x87EmulHandler(regs*, void*)+0x6d>
c0018008:	83 ec 0c             	sub    esp,0xc
c001800b:	a1 68 c7 02 c0       	mov    eax,ds:0xc002c768
c0018010:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0018013:	e8 7f ff ff ff       	call   c0017f97 <i386LoadCoprocessor(void*)>
c0018018:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001801d:	83 c4 10             	add    esp,0x10
c0018020:	a3 68 c7 02 c0       	mov    ds:0xc002c768,eax
c0018025:	83 c4 08             	add    esp,0x8
c0018028:	5b                   	pop    ebx
c0018029:	c3                   	ret    
c001802a:	83 ec 0c             	sub    esp,0xc
c001802d:	68 11 2d 02 c0       	push   0xc0022d11
c0018032:	e8 0e 29 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0018037:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001803f:	83 c4 18             	add    esp,0x18
c0018042:	5b                   	pop    ebx
c0018043:	e9 94 eb ff ff       	jmp    c0016bdc <Thr::terminateFromIRQ(int)>

c0018048 <HalInitialiseCoprocessor()>:
c0018048:	83 ec 10             	sub    esp,0x10
c001804b:	c7 05 68 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c768,0x0
c0018055:	6a 00                	push   0x0
c0018057:	68 ab 7f 01 c0       	push   0xc0017fab
c001805c:	6a 07                	push   0x7
c001805e:	e8 27 4f ff ff       	call   c000cf8a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018063:	e8 48 70 00 00       	call   c001f0b0 <avxDetect>
c0018068:	83 c4 10             	add    esp,0x10
c001806b:	85 c0                	test   eax,eax
c001806d:	74 1c                	je     c001808b <HalInitialiseCoprocessor()+0x43>
c001806f:	c7 05 70 c7 02 c0 da f0 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001f0da
c0018079:	c7 05 6c c7 02 c0 eb f0 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001f0eb
c0018083:	83 c4 0c             	add    esp,0xc
c0018086:	e9 71 70 00 00       	jmp    c001f0fc <avxInit>
c001808b:	e8 b0 73 00 00       	call   c001f440 <absolutelyNoChanceInHell>
c0018090:	85 c0                	test   eax,eax
c0018092:	74 1c                	je     c00180b0 <HalInitialiseCoprocessor()+0x68>
c0018094:	c7 05 70 c7 02 c0 58 f4 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001f458
c001809e:	c7 05 6c c7 02 c0 60 f4 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001f460
c00180a8:	83 c4 0c             	add    esp,0xc
c00180ab:	e9 b8 73 00 00       	jmp    c001f468 <sseInit>
c00180b0:	e8 d1 73 00 00       	call   c001f486 <x87Detect>
c00180b5:	85 c0                	test   eax,eax
c00180b7:	74 1c                	je     c00180d5 <HalInitialiseCoprocessor()+0x8d>
c00180b9:	c7 05 70 c7 02 c0 a1 f4 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001f4a1
c00180c3:	c7 05 6c c7 02 c0 a8 f4 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001f4a8
c00180cd:	83 c4 0c             	add    esp,0xc
c00180d0:	e9 da 73 00 00       	jmp    c001f4af <x87Init>
c00180d5:	c7 05 70 c7 02 c0 5c 79 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001795c
c00180df:	c7 05 6c c7 02 c0 5c 79 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001795c
c00180e9:	0f 20 c0             	mov    eax,cr0
c00180ec:	83 c8 04             	or     eax,0x4
c00180ef:	0f 22 c0             	mov    cr0,eax
c00180f2:	83 c4 0c             	add    esp,0xc
c00180f5:	c3                   	ret    

c00180f6 <HalPanic(char const*)>:
c00180f6:	53                   	push   ebx
c00180f7:	83 ec 10             	sub    esp,0x10
c00180fa:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00180fe:	fa                   	cli    
c00180ff:	53                   	push   ebx
c0018100:	68 27 2d 02 c0       	push   0xc0022d27
c0018105:	e8 3b 28 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001810a:	a1 64 c7 02 c0       	mov    eax,ds:0xc002c764
c001810f:	83 c4 10             	add    esp,0x10
c0018112:	85 c0                	test   eax,eax
c0018114:	74 09                	je     c001811f <HalPanic(char const*)+0x29>
c0018116:	83 ec 0c             	sub    esp,0xc
c0018119:	53                   	push   ebx
c001811a:	ff d0                	call   eax
c001811c:	83 c4 10             	add    esp,0x10
c001811f:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c0018124:	85 c0                	test   eax,eax
c0018126:	0f 84 dc 00 00 00    	je     c0018208 <HalPanic(char const*)+0x112>
c001812c:	52                   	push   edx
c001812d:	6a 01                	push   0x1
c001812f:	6a 0f                	push   0xf
c0018131:	50                   	push   eax
c0018132:	e8 7d 04 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018137:	59                   	pop    ecx
c0018138:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001813e:	e8 61 06 ff ff       	call   c00087a4 <VgaText::clearScreen()>
c0018143:	58                   	pop    eax
c0018144:	5a                   	pop    edx
c0018145:	68 04 0f 02 c0       	push   0xc0020f04
c001814a:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018150:	e8 97 04 ff ff       	call   c00085ec <VgaText::setTitle(char*)>
c0018155:	83 c4 0c             	add    esp,0xc
c0018158:	6a 01                	push   0x1
c001815a:	6a 0f                	push   0xf
c001815c:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018162:	e8 4d 04 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018167:	59                   	pop    ecx
c0018168:	58                   	pop    eax
c0018169:	68 40 2d 02 c0       	push   0xc0022d40
c001816e:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018174:	e8 2d 09 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0018179:	83 c4 0c             	add    esp,0xc
c001817c:	6a 0f                	push   0xf
c001817e:	6a 01                	push   0x1
c0018180:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018186:	e8 29 04 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001818b:	58                   	pop    eax
c001818c:	5a                   	pop    edx
c001818d:	68 49 2d 02 c0       	push   0xc0022d49
c0018192:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018198:	e8 09 09 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001819d:	83 c4 0c             	add    esp,0xc
c00181a0:	6a 01                	push   0x1
c00181a2:	6a 0f                	push   0xf
c00181a4:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00181aa:	e8 05 04 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00181af:	59                   	pop    ecx
c00181b0:	58                   	pop    eax
c00181b1:	68 8d 2d 02 c0       	push   0xc0022d8d
c00181b6:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00181bc:	e8 e5 08 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00181c1:	58                   	pop    eax
c00181c2:	5a                   	pop    edx
c00181c3:	68 56 2d 02 c0       	push   0xc0022d56
c00181c8:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00181ce:	e8 d3 08 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00181d3:	59                   	pop    ecx
c00181d4:	58                   	pop    eax
c00181d5:	68 90 2d 02 c0       	push   0xc0022d90
c00181da:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00181e0:	e8 c1 08 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00181e5:	58                   	pop    eax
c00181e6:	5a                   	pop    edx
c00181e7:	53                   	push   ebx
c00181e8:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00181ee:	e8 b3 08 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00181f3:	59                   	pop    ecx
c00181f4:	5b                   	pop    ebx
c00181f5:	68 8d 2d 02 c0       	push   0xc0022d8d
c00181fa:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018200:	e8 a1 08 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0018205:	83 c4 10             	add    esp,0x10
c0018208:	eb fe                	jmp    c0018208 <HalPanic(char const*)+0x112>

c001820a <HalQueryPerformanceCounter()>:
c001820a:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001820f:	31 d2                	xor    edx,edx
c0018211:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0018217:	31 c0                	xor    eax,eax
c0018219:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c0018220:	74 02                	je     c0018224 <HalQueryPerformanceCounter()+0x1a>
c0018222:	0f 31                	rdtsc  
c0018224:	c3                   	ret    

c0018225 <HalInitialise()>:
c0018225:	53                   	push   ebx
c0018226:	83 ec 08             	sub    esp,0x8
c0018229:	e8 8c 4f ff ff       	call   c000d1ba <setupINTS()>
c001822e:	80 3d e0 bb 02 c0 00 	cmp    BYTE PTR ds:0xc002bbe0,0x0
c0018235:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001823a:	75 0f                	jne    c001824b <HalInitialise()+0x26>
c001823c:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0018242:	83 e2 fe             	and    edx,0xfffffffe
c0018245:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001824b:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0018251:	c6 05 60 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c760,0x0
c0018258:	83 e2 fe             	and    edx,0xfffffffe
c001825b:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0018261:	e8 9e 02 00 00       	call   c0018504 <picOpen()>
c0018266:	80 3d 60 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c760,0x0
c001826d:	74 0a                	je     c0018279 <HalInitialise()+0x54>
c001826f:	e8 e0 01 00 00       	call   c0018454 <picDisable()>
c0018274:	e8 ad 67 00 00       	call   c001ea26 <apicOpen()>
c0018279:	bb 0f 00 00 00       	mov    ebx,0xf
c001827e:	50                   	push   eax
c001827f:	6a 00                	push   0x0
c0018281:	68 cc 7e 01 c0       	push   0xc0017ecc
c0018286:	6a 00                	push   0x0
c0018288:	e8 fd 4c ff ff       	call   c000cf8a <installISRHandler(int, void (*)(regs*, void*), void*)>
c001828d:	83 c4 0c             	add    esp,0xc
c0018290:	6a 00                	push   0x0
c0018292:	68 cc 7e 01 c0       	push   0xc0017ecc
c0018297:	6a 01                	push   0x1
c0018299:	e8 ec 4c ff ff       	call   c000cf8a <installISRHandler(int, void (*)(regs*, void*), void*)>
c001829e:	83 c4 0c             	add    esp,0xc
c00182a1:	6a 00                	push   0x0
c00182a3:	68 5d 79 01 c0       	push   0xc001795d
c00182a8:	6a 02                	push   0x2
c00182aa:	e8 db 4c ff ff       	call   c000cf8a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00182af:	83 c4 0c             	add    esp,0xc
c00182b2:	6a 00                	push   0x0
c00182b4:	68 cc 7e 01 c0       	push   0xc0017ecc
c00182b9:	6a 03                	push   0x3
c00182bb:	e8 ca 4c ff ff       	call   c000cf8a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00182c0:	83 c4 0c             	add    esp,0xc
c00182c3:	6a 00                	push   0x0
c00182c5:	68 cc 7e 01 c0       	push   0xc0017ecc
c00182ca:	6a 04                	push   0x4
c00182cc:	e8 b9 4c ff ff       	call   c000cf8a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00182d1:	83 c4 0c             	add    esp,0xc
c00182d4:	6a 00                	push   0x0
c00182d6:	68 cc 7e 01 c0       	push   0xc0017ecc
c00182db:	6a 05                	push   0x5
c00182dd:	e8 a8 4c ff ff       	call   c000cf8a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00182e2:	83 c4 0c             	add    esp,0xc
c00182e5:	6a 00                	push   0x0
c00182e7:	68 00 7f 01 c0       	push   0xc0017f00
c00182ec:	6a 06                	push   0x6
c00182ee:	e8 97 4c ff ff       	call   c000cf8a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00182f3:	83 c4 0c             	add    esp,0xc
c00182f6:	6a 00                	push   0x0
c00182f8:	68 76 79 01 c0       	push   0xc0017976
c00182fd:	6a 08                	push   0x8
c00182ff:	e8 86 4c ff ff       	call   c000cf8a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018304:	83 c4 0c             	add    esp,0xc
c0018307:	6a 00                	push   0x0
c0018309:	68 cc 7e 01 c0       	push   0xc0017ecc
c001830e:	6a 09                	push   0x9
c0018310:	e8 75 4c ff ff       	call   c000cf8a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018315:	83 c4 0c             	add    esp,0xc
c0018318:	6a 00                	push   0x0
c001831a:	68 cc 7e 01 c0       	push   0xc0017ecc
c001831f:	6a 0a                	push   0xa
c0018321:	e8 64 4c ff ff       	call   c000cf8a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018326:	83 c4 0c             	add    esp,0xc
c0018329:	6a 00                	push   0x0
c001832b:	68 cc 7e 01 c0       	push   0xc0017ecc
c0018330:	6a 0b                	push   0xb
c0018332:	e8 53 4c ff ff       	call   c000cf8a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018337:	83 c4 0c             	add    esp,0xc
c001833a:	6a 00                	push   0x0
c001833c:	68 dc 7d 01 c0       	push   0xc0017ddc
c0018341:	6a 0d                	push   0xd
c0018343:	e8 42 4c ff ff       	call   c000cf8a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018348:	83 c4 0c             	add    esp,0xc
c001834b:	6a 00                	push   0x0
c001834d:	68 43 7e 01 c0       	push   0xc0017e43
c0018352:	6a 0e                	push   0xe
c0018354:	e8 31 4c ff ff       	call   c000cf8a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018359:	83 c4 10             	add    esp,0x10
c001835c:	50                   	push   eax
c001835d:	6a 00                	push   0x0
c001835f:	68 cc 7e 01 c0       	push   0xc0017ecc
c0018364:	53                   	push   ebx
c0018365:	43                   	inc    ebx
c0018366:	e8 1f 4c ff ff       	call   c000cf8a <installISRHandler(int, void (*)(regs*, void*), void*)>
c001836b:	83 c4 10             	add    esp,0x10
c001836e:	83 fb 1e             	cmp    ebx,0x1e
c0018371:	75 e9                	jne    c001835c <HalInitialise()+0x137>
c0018373:	50                   	push   eax
c0018374:	6a 00                	push   0x0
c0018376:	68 48 2b 01 c0       	push   0xc0012b48
c001837b:	6a 60                	push   0x60
c001837d:	e8 08 4c ff ff       	call   c000cf8a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018382:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018387:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0018391:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0018398:	e8 19 f7 fe ff       	call   c0007ab6 <malloc>
c001839d:	89 04 24             	mov    DWORD PTR [esp],eax
c00183a0:	89 c3                	mov    ebx,eax
c00183a2:	e8 3b 09 00 00       	call   c0018ce2 <RTC::RTC()>
c00183a7:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c00183b1:	5a                   	pop    edx
c00183b2:	59                   	pop    ecx
c00183b3:	53                   	push   ebx
c00183b4:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00183ba:	e8 97 46 ff ff       	call   c000ca56 <Device::addChild(Device*)>
c00183bf:	8b 03                	mov    eax,DWORD PTR [ebx]
c00183c1:	6a 00                	push   0x0
c00183c3:	6a 00                	push   0x0
c00183c5:	6a 00                	push   0x0
c00183c7:	53                   	push   ebx
c00183c8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00183cb:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00183d0:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c00183d6:	83 c4 28             	add    esp,0x28
c00183d9:	5b                   	pop    ebx
c00183da:	c3                   	ret    

c00183db <HalMakeBeep(int)>:
c00183db:	53                   	push   ebx
c00183dc:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00183e0:	85 db                	test   ebx,ebx
c00183e2:	75 07                	jne    c00183eb <HalMakeBeep(int)+0x10>
c00183e4:	e4 61                	in     al,0x61
c00183e6:	83 e0 fc             	and    eax,0xfffffffc
c00183e9:	eb 26                	jmp    c0018411 <HalMakeBeep(int)+0x36>
c00183eb:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00183f0:	99                   	cdq    
c00183f1:	f7 fb                	idiv   ebx
c00183f3:	89 c1                	mov    ecx,eax
c00183f5:	b0 b6                	mov    al,0xb6
c00183f7:	e6 43                	out    0x43,al
c00183f9:	88 c8                	mov    al,cl
c00183fb:	e6 42                	out    0x42,al
c00183fd:	89 c8                	mov    eax,ecx
c00183ff:	c1 e8 08             	shr    eax,0x8
c0018402:	e6 42                	out    0x42,al
c0018404:	e4 61                	in     al,0x61
c0018406:	89 c2                	mov    edx,eax
c0018408:	83 ca 03             	or     edx,0x3
c001840b:	38 d0                	cmp    al,dl
c001840d:	74 04                	je     c0018413 <HalMakeBeep(int)+0x38>
c001840f:	88 d0                	mov    al,dl
c0018411:	e6 61                	out    0x61,al
c0018413:	5b                   	pop    ebx
c0018414:	c3                   	ret    

c0018415 <HalGetRand()>:
c0018415:	31 c0                	xor    eax,eax
c0018417:	c3                   	ret    

c0018418 <HalEndOfInterrupt(int)>:
c0018418:	80 3d 60 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c760,0x0
c001841f:	74 23                	je     c0018444 <HalEndOfInterrupt(int)+0x2c>
c0018421:	83 ec 14             	sub    esp,0x14
c0018424:	6a 1b                	push   0x1b
c0018426:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001842c:	e8 8f ec fe ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c0018431:	25 00 f0 ff ff       	and    eax,0xfffff000
c0018436:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0018440:	83 c4 1c             	add    esp,0x1c
c0018443:	c3                   	ret    
c0018444:	e9 3f 02 00 00       	jmp    c0018688 <picEOI(int)>

c0018449 <HalRestart()>:
c0018449:	c3                   	ret    

c001844a <HalShutdown()>:
c001844a:	c3                   	ret    

c001844b <HalSleep()>:
c001844b:	c3                   	ret    

c001844c <picIoWait()>:
c001844c:	eb 00                	jmp    c001844e <picIoWait()+0x2>
c001844e:	eb 00                	jmp    c0018450 <picIoWait()+0x4>
c0018450:	90                   	nop
c0018451:	c3                   	ret    
c0018452:	66 90                	xchg   ax,ax

c0018454 <picDisable()>:
c0018454:	83 ec 10             	sub    esp,0x10
c0018457:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c001845e:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0018463:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018467:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001846c:	ee                   	out    dx,al
c001846d:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0018474:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0018479:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001847d:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0018482:	ee                   	out    dx,al
c0018483:	90                   	nop
c0018484:	83 c4 10             	add    esp,0x10
c0018487:	c3                   	ret    

c0018488 <picGetIRQReg(int)>:
c0018488:	83 ec 10             	sub    esp,0x10
c001848b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001848f:	0f b6 c0             	movzx  eax,al
c0018492:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0018499:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c001849d:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00184a1:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00184a6:	ee                   	out    dx,al
c00184a7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00184ab:	0f b6 c0             	movzx  eax,al
c00184ae:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c00184b5:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00184b9:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00184bd:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00184c2:	ee                   	out    dx,al
c00184c3:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c00184ca:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00184cf:	89 c2                	mov    edx,eax
c00184d1:	ec                   	in     al,dx
c00184d2:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00184d6:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00184da:	0f b6 c0             	movzx  eax,al
c00184dd:	c1 e0 08             	shl    eax,0x8
c00184e0:	89 c1                	mov    ecx,eax
c00184e2:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c00184e9:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00184ee:	89 c2                	mov    edx,eax
c00184f0:	ec                   	in     al,dx
c00184f1:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00184f5:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00184f9:	0f b6 c0             	movzx  eax,al
c00184fc:	09 c8                	or     eax,ecx
c00184fe:	83 c4 10             	add    esp,0x10
c0018501:	c3                   	ret    
c0018502:	66 90                	xchg   ax,ax

c0018504 <picOpen()>:
c0018504:	83 ec 50             	sub    esp,0x50
c0018507:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c001850e:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0018513:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018517:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001851b:	ee                   	out    dx,al
c001851c:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0018523:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0018528:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001852c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018530:	ee                   	out    dx,al
c0018531:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0018539:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0018541:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0018548:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001854c:	89 c2                	mov    edx,eax
c001854e:	ec                   	in     al,dx
c001854f:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0018553:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0018557:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c001855b:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0018562:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018566:	89 c2                	mov    edx,eax
c0018568:	ec                   	in     al,dx
c0018569:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001856d:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0018571:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0018575:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c001857c:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0018581:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0018585:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018589:	ee                   	out    dx,al
c001858a:	e8 bd fe ff ff       	call   c001844c <picIoWait()>
c001858f:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0018596:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c001859b:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c001859f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00185a3:	ee                   	out    dx,al
c00185a4:	e8 a3 fe ff ff       	call   c001844c <picIoWait()>
c00185a9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00185ad:	0f b6 c0             	movzx  eax,al
c00185b0:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c00185b7:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c00185bb:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00185bf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00185c3:	ee                   	out    dx,al
c00185c4:	e8 83 fe ff ff       	call   c001844c <picIoWait()>
c00185c9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00185cd:	0f b6 c0             	movzx  eax,al
c00185d0:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c00185d7:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c00185db:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c00185df:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00185e3:	ee                   	out    dx,al
c00185e4:	e8 63 fe ff ff       	call   c001844c <picIoWait()>
c00185e9:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c00185f0:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c00185f5:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c00185f9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00185fd:	ee                   	out    dx,al
c00185fe:	e8 49 fe ff ff       	call   c001844c <picIoWait()>
c0018603:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c001860a:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c001860f:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0018613:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018617:	ee                   	out    dx,al
c0018618:	e8 2f fe ff ff       	call   c001844c <picIoWait()>
c001861d:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0018624:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0018629:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c001862d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018631:	ee                   	out    dx,al
c0018632:	e8 15 fe ff ff       	call   c001844c <picIoWait()>
c0018637:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c001863e:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0018643:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0018647:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001864b:	ee                   	out    dx,al
c001864c:	e8 fb fd ff ff       	call   c001844c <picIoWait()>
c0018651:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c0018656:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c001865d:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0018661:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0018665:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0018669:	ee                   	out    dx,al
c001866a:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c001866f:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0018676:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001867a:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c001867e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0018682:	ee                   	out    dx,al
c0018683:	90                   	nop
c0018684:	83 c4 50             	add    esp,0x50
c0018687:	c3                   	ret    

c0018688 <picEOI(int)>:
c0018688:	83 ec 10             	sub    esp,0x10
c001868b:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0018690:	75 1e                	jne    c00186b0 <picEOI(int)+0x28>
c0018692:	6a 0b                	push   0xb
c0018694:	e8 ef fd ff ff       	call   c0018488 <picGetIRQReg(int)>
c0018699:	83 c4 04             	add    esp,0x4
c001869c:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c00186a1:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c00186a6:	25 80 00 00 00       	and    eax,0x80
c00186ab:	74 73                	je     c0018720 <picEOI(int)+0x98>
c00186ad:	8d 76 00             	lea    esi,[esi+0x0]
c00186b0:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c00186b5:	75 31                	jne    c00186e8 <picEOI(int)+0x60>
c00186b7:	6a 0b                	push   0xb
c00186b9:	e8 ca fd ff ff       	call   c0018488 <picGetIRQReg(int)>
c00186be:	83 c4 04             	add    esp,0x4
c00186c1:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00186c6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00186ca:	98                   	cwde   
c00186cb:	85 c0                	test   eax,eax
c00186cd:	78 19                	js     c00186e8 <picEOI(int)+0x60>
c00186cf:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c00186d6:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c00186db:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00186df:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00186e4:	ee                   	out    dx,al
c00186e5:	eb 3d                	jmp    c0018724 <picEOI(int)+0x9c>
c00186e7:	90                   	nop
c00186e8:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c00186ed:	7e 19                	jle    c0018708 <picEOI(int)+0x80>
c00186ef:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c00186f6:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c00186fb:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00186ff:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0018704:	ee                   	out    dx,al
c0018705:	8d 76 00             	lea    esi,[esi+0x0]
c0018708:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001870f:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0018714:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0018718:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001871d:	ee                   	out    dx,al
c001871e:	eb 04                	jmp    c0018724 <picEOI(int)+0x9c>
c0018720:	90                   	nop
c0018721:	8d 76 00             	lea    esi,[esi+0x0]
c0018724:	83 c4 10             	add    esp,0x10
c0018727:	c3                   	ret    

c0018728 <RTC::open(int, int, void*)>:
c0018728:	31 c0                	xor    eax,eax
c001872a:	c3                   	ret    
c001872b:	90                   	nop

c001872c <RTC::close(int, int, void*)>:
c001872c:	31 c0                	xor    eax,eax
c001872e:	c3                   	ret    
c001872f:	90                   	nop

c0018730 <RTC::timeInSecondsUTC()>:
c0018730:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018734:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001873a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0018740:	c3                   	ret    
c0018741:	90                   	nop

c0018742 <RTC::timeInDatetimeUTC()>:
c0018742:	53                   	push   ebx
c0018743:	83 ec 14             	sub    esp,0x14
c0018746:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001874a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001874e:	8b 10                	mov    edx,DWORD PTR [eax]
c0018750:	50                   	push   eax
c0018751:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0018754:	83 c4 0c             	add    esp,0xc
c0018757:	52                   	push   edx
c0018758:	50                   	push   eax
c0018759:	53                   	push   ebx
c001875a:	e8 6b 40 ff ff       	call   c000c7ca <secondsToDatetime(unsigned long long)>
c001875f:	89 d8                	mov    eax,ebx
c0018761:	83 c4 14             	add    esp,0x14
c0018764:	5b                   	pop    ebx
c0018765:	c2 04 00             	ret    0x4

c0018768 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0018768:	56                   	push   esi
c0018769:	53                   	push   ebx
c001876a:	83 ec 14             	sub    esp,0x14
c001876d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0018771:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018773:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0018776:	8d 44 24 08          	lea    eax,[esp+0x8]
c001877a:	52                   	push   edx
c001877b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001877f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018783:	50                   	push   eax
c0018784:	e8 41 40 ff ff       	call   c000c7ca <secondsToDatetime(unsigned long long)>
c0018789:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001878d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018791:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0018795:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0018799:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001879d:	89 f0                	mov    eax,esi
c001879f:	83 c4 20             	add    esp,0x20
c00187a2:	5b                   	pop    ebx
c00187a3:	5e                   	pop    esi
c00187a4:	ff e0                	jmp    eax

c00187a6 <RTC::~RTC()>:
c00187a6:	83 ec 0c             	sub    esp,0xc
c00187a9:	ba 2c 2e 02 c0       	mov    edx,0xc0022e2c
c00187ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00187b2:	89 10                	mov    DWORD PTR [eax],edx
c00187b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00187b8:	83 ec 0c             	sub    esp,0xc
c00187bb:	50                   	push   eax
c00187bc:	e8 9b 3d ff ff       	call   c000c55c <Clock::~Clock()>
c00187c1:	83 c4 10             	add    esp,0x10
c00187c4:	90                   	nop
c00187c5:	83 c4 0c             	add    esp,0xc
c00187c8:	c3                   	ret    
c00187c9:	90                   	nop

c00187ca <RTC::~RTC()>:
c00187ca:	83 ec 0c             	sub    esp,0xc
c00187cd:	83 ec 0c             	sub    esp,0xc
c00187d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00187d4:	e8 cd ff ff ff       	call   c00187a6 <RTC::~RTC()>
c00187d9:	83 c4 10             	add    esp,0x10
c00187dc:	83 ec 08             	sub    esp,0x8
c00187df:	68 60 01 00 00       	push   0x160
c00187e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00187e8:	e8 2b 20 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c00187ed:	83 c4 10             	add    esp,0x10
c00187f0:	83 c4 0c             	add    esp,0xc
c00187f3:	c3                   	ret    

c00187f4 <RTC::get_update_in_progress_flag()>:
c00187f4:	83 ec 14             	sub    esp,0x14
c00187f7:	6a 0a                	push   0xa
c00187f9:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00187ff:	e8 74 e9 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018804:	83 c4 1c             	add    esp,0x1c
c0018807:	0f b6 c0             	movzx  eax,al
c001880a:	c1 e8 07             	shr    eax,0x7
c001880d:	c3                   	ret    

c001880e <RTC::completeRTCRefresh()>:
c001880e:	55                   	push   ebp
c001880f:	57                   	push   edi
c0018810:	56                   	push   esi
c0018811:	53                   	push   ebx
c0018812:	83 ec 3c             	sub    esp,0x3c
c0018815:	8b 1d ec b8 02 c0    	mov    ebx,DWORD PTR ds:0xc002b8ec
c001881b:	83 ec 0c             	sub    esp,0xc
c001881e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0018822:	e8 cd ff ff ff       	call   c00187f4 <RTC::get_update_in_progress_flag()>
c0018827:	83 c4 10             	add    esp,0x10
c001882a:	84 c0                	test   al,al
c001882c:	74 0e                	je     c001883c <RTC::completeRTCRefresh()+0x2e>
c001882e:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0018834:	3b 05 ec b8 02 c0    	cmp    eax,DWORD PTR ds:0xc002b8ec
c001883a:	73 df                	jae    c001881b <RTC::completeRTCRefresh()+0xd>
c001883c:	51                   	push   ecx
c001883d:	51                   	push   ecx
c001883e:	6a 00                	push   0x0
c0018840:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018846:	e8 2d e9 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001884b:	5b                   	pop    ebx
c001884c:	89 c7                	mov    edi,eax
c001884e:	5e                   	pop    esi
c001884f:	6a 02                	push   0x2
c0018851:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018857:	e8 1c e9 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001885c:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0018860:	5d                   	pop    ebp
c0018861:	58                   	pop    eax
c0018862:	6a 04                	push   0x4
c0018864:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001886a:	e8 09 e9 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001886f:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0018873:	58                   	pop    eax
c0018874:	5a                   	pop    edx
c0018875:	6a 07                	push   0x7
c0018877:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001887d:	e8 f6 e8 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018882:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0018886:	59                   	pop    ecx
c0018887:	5b                   	pop    ebx
c0018888:	6a 08                	push   0x8
c001888a:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018890:	e8 e3 e8 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018895:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0018899:	5e                   	pop    esi
c001889a:	5d                   	pop    ebp
c001889b:	6a 09                	push   0x9
c001889d:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00188a3:	e8 d0 e8 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00188a8:	0f b6 c0             	movzx  eax,al
c00188ab:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00188af:	83 c4 10             	add    esp,0x10
c00188b2:	8b 1d ec b8 02 c0    	mov    ebx,DWORD PTR ds:0xc002b8ec
c00188b8:	83 ec 0c             	sub    esp,0xc
c00188bb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00188bf:	e8 30 ff ff ff       	call   c00187f4 <RTC::get_update_in_progress_flag()>
c00188c4:	83 c4 10             	add    esp,0x10
c00188c7:	84 c0                	test   al,al
c00188c9:	74 0e                	je     c00188d9 <RTC::completeRTCRefresh()+0xcb>
c00188cb:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c00188d1:	3b 05 ec b8 02 c0    	cmp    eax,DWORD PTR ds:0xc002b8ec
c00188d7:	73 df                	jae    c00188b8 <RTC::completeRTCRefresh()+0xaa>
c00188d9:	51                   	push   ecx
c00188da:	51                   	push   ecx
c00188db:	6a 00                	push   0x0
c00188dd:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00188e3:	e8 90 e8 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00188e8:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00188ec:	5b                   	pop    ebx
c00188ed:	5e                   	pop    esi
c00188ee:	6a 02                	push   0x2
c00188f0:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00188f6:	e8 7d e8 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00188fb:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00188ff:	5d                   	pop    ebp
c0018900:	58                   	pop    eax
c0018901:	6a 04                	push   0x4
c0018903:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018909:	e8 6a e8 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001890e:	88 c3                	mov    bl,al
c0018910:	58                   	pop    eax
c0018911:	5a                   	pop    edx
c0018912:	6a 07                	push   0x7
c0018914:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001891a:	e8 59 e8 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001891f:	59                   	pop    ecx
c0018920:	89 c6                	mov    esi,eax
c0018922:	5d                   	pop    ebp
c0018923:	6a 08                	push   0x8
c0018925:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001892b:	e8 48 e8 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018930:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0018934:	58                   	pop    eax
c0018935:	5a                   	pop    edx
c0018936:	6a 09                	push   0x9
c0018938:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001893e:	e8 35 e8 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018943:	89 f9                	mov    ecx,edi
c0018945:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0018949:	0f b6 e8             	movzx  ebp,al
c001894c:	83 c4 10             	add    esp,0x10
c001894f:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c0018953:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018958:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001895d:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0018961:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0018965:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c0018969:	0f 94 c0             	sete   al
c001896c:	0f b6 fb             	movzx  edi,bl
c001896f:	3a 4c 24 18          	cmp    cl,BYTE PTR [esp+0x18]
c0018973:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c0018978:	0f 94 c2             	sete   dl
c001897b:	21 d0                	and    eax,edx
c001897d:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c0018981:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0018985:	0f 94 c2             	sete   dl
c0018988:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001898c:	21 c2                	and    edx,eax
c001898e:	89 f0                	mov    eax,esi
c0018990:	0f b6 c0             	movzx  eax,al
c0018993:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018997:	89 f0                	mov    eax,esi
c0018999:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c001899d:	0f 94 c0             	sete   al
c00189a0:	21 d0                	and    eax,edx
c00189a2:	31 d2                	xor    edx,edx
c00189a4:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c00189a8:	0f 94 c2             	sete   dl
c00189ab:	85 c2                	test   edx,eax
c00189ad:	75 27                	jne    c00189d6 <RTC::completeRTCRefresh()+0x1c8>
c00189af:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00189b3:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c00189b7:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c00189bb:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c00189bf:	89 f0                	mov    eax,esi
c00189c1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00189c5:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c00189c9:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00189cd:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00189d1:	e9 dc fe ff ff       	jmp    c00188b2 <RTC::completeRTCRefresh()+0xa4>
c00189d6:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c00189da:	75 d3                	jne    c00189af <RTC::completeRTCRefresh()+0x1a1>
c00189dc:	52                   	push   edx
c00189dd:	52                   	push   edx
c00189de:	6a 0b                	push   0xb
c00189e0:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00189e6:	e8 8d e7 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00189eb:	83 c4 10             	add    esp,0x10
c00189ee:	a8 04                	test   al,0x4
c00189f0:	75 7a                	jne    c0018a6c <RTC::completeRTCRefresh()+0x25e>
c00189f2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00189f6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00189fa:	83 e1 0f             	and    ecx,0xf
c00189fd:	c1 ea 04             	shr    edx,0x4
c0018a00:	c1 ef 04             	shr    edi,0x4
c0018a03:	6b d2 0a             	imul   edx,edx,0xa
c0018a06:	83 e6 0f             	and    esi,0xf
c0018a09:	01 d1                	add    ecx,edx
c0018a0b:	c1 ed 04             	shr    ebp,0x4
c0018a0e:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0018a12:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018a16:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018a1a:	c1 ea 04             	shr    edx,0x4
c0018a1d:	83 e1 0f             	and    ecx,0xf
c0018a20:	6b d2 0a             	imul   edx,edx,0xa
c0018a23:	6b ed 0a             	imul   ebp,ebp,0xa
c0018a26:	01 d1                	add    ecx,edx
c0018a28:	89 fa                	mov    edx,edi
c0018a2a:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0018a2e:	83 e2 07             	and    edx,0x7
c0018a31:	89 d9                	mov    ecx,ebx
c0018a33:	6b d2 0a             	imul   edx,edx,0xa
c0018a36:	83 e1 0f             	and    ecx,0xf
c0018a39:	83 e3 80             	and    ebx,0xffffff80
c0018a3c:	01 d1                	add    ecx,edx
c0018a3e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018a42:	09 cb                	or     ebx,ecx
c0018a44:	c1 ea 04             	shr    edx,0x4
c0018a47:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018a4b:	6b d2 0a             	imul   edx,edx,0xa
c0018a4e:	83 e1 0f             	and    ecx,0xf
c0018a51:	01 d6                	add    esi,edx
c0018a53:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018a57:	c1 ea 04             	shr    edx,0x4
c0018a5a:	6b d2 0a             	imul   edx,edx,0xa
c0018a5d:	01 d1                	add    ecx,edx
c0018a5f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018a63:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0018a67:	83 e2 0f             	and    edx,0xf
c0018a6a:	01 d5                	add    ebp,edx
c0018a6c:	a8 02                	test   al,0x2
c0018a6e:	75 15                	jne    c0018a85 <RTC::completeRTCRefresh()+0x277>
c0018a70:	f6 c3 80             	test   bl,0x80
c0018a73:	74 10                	je     c0018a85 <RTC::completeRTCRefresh()+0x277>
c0018a75:	83 e3 7f             	and    ebx,0x7f
c0018a78:	b9 18 00 00 00       	mov    ecx,0x18
c0018a7d:	8d 43 0c             	lea    eax,[ebx+0xc]
c0018a80:	99                   	cdq    
c0018a81:	f7 f9                	idiv   ecx
c0018a83:	88 d3                	mov    bl,dl
c0018a85:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c0018a8b:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c0018a91:	77 06                	ja     c0018a99 <RTC::completeRTCRefresh()+0x28b>
c0018a93:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c0018a99:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018a9e:	31 c9                	xor    ecx,ecx
c0018aa0:	c1 e0 10             	shl    eax,0x10
c0018aa3:	89 cd                	mov    ebp,ecx
c0018aa5:	c1 e7 10             	shl    edi,0x10
c0018aa8:	31 d2                	xor    edx,edx
c0018aaa:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0018ab0:	09 c5                	or     ebp,eax
c0018ab2:	89 f0                	mov    eax,esi
c0018ab4:	89 e9                	mov    ecx,ebp
c0018ab6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0018aba:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c0018abe:	88 c2                	mov    dl,al
c0018ac0:	88 d9                	mov    cl,bl
c0018ac2:	8a 74 24 10          	mov    dh,BYTE PTR [esp+0x10]
c0018ac6:	0f b7 c2             	movzx  eax,dx
c0018ac9:	09 f8                	or     eax,edi
c0018acb:	89 c2                	mov    edx,eax
c0018acd:	50                   	push   eax
c0018ace:	50                   	push   eax
c0018acf:	51                   	push   ecx
c0018ad0:	52                   	push   edx
c0018ad1:	e8 75 3b ff ff       	call   c000c64b <datetimeToSeconds(datetime_t)>
c0018ad6:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c0018ada:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0018ae0:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0018ae6:	83 c4 4c             	add    esp,0x4c
c0018ae9:	5b                   	pop    ebx
c0018aea:	5e                   	pop    esi
c0018aeb:	5f                   	pop    edi
c0018aec:	5d                   	pop    ebp
c0018aed:	c3                   	ret    

c0018aee <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0018aee:	55                   	push   ebp
c0018aef:	57                   	push   edi
c0018af0:	56                   	push   esi
c0018af1:	53                   	push   ebx
c0018af2:	83 ec 30             	sub    esp,0x30
c0018af5:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0018af9:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0018afd:	6a 00                	push   0x0
c0018aff:	6a 00                	push   0x0
c0018b01:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018b07:	e8 86 e7 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018b0c:	83 c4 0c             	add    esp,0xc
c0018b0f:	6a 00                	push   0x0
c0018b11:	6a 02                	push   0x2
c0018b13:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018b19:	e8 74 e7 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018b1e:	31 d2                	xor    edx,edx
c0018b20:	89 f9                	mov    ecx,edi
c0018b22:	89 f8                	mov    eax,edi
c0018b24:	c1 e9 10             	shr    ecx,0x10
c0018b27:	0f b6 c4             	movzx  eax,ah
c0018b2a:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c0018b2e:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0018b32:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018b36:	b9 64 00 00 00       	mov    ecx,0x64
c0018b3b:	89 f0                	mov    eax,esi
c0018b3d:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0018b41:	89 f0                	mov    eax,esi
c0018b43:	0f b6 c4             	movzx  eax,ah
c0018b46:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018b4a:	89 f0                	mov    eax,esi
c0018b4c:	c1 e8 10             	shr    eax,0x10
c0018b4f:	f7 f1                	div    ecx
c0018b51:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0018b55:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0018b59:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0018b5d:	59                   	pop    ecx
c0018b5e:	5b                   	pop    ebx
c0018b5f:	89 fb                	mov    ebx,edi
c0018b61:	6a 0b                	push   0xb
c0018b63:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018b69:	e8 0a e6 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018b6e:	83 c4 10             	add    esp,0x10
c0018b71:	89 c5                	mov    ebp,eax
c0018b73:	a8 04                	test   al,0x4
c0018b75:	75 6e                	jne    c0018be5 <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c0018b77:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018b7b:	31 d2                	xor    edx,edx
c0018b7d:	0f b6 c1             	movzx  eax,cl
c0018b80:	b9 0a 00 00 00       	mov    ecx,0xa
c0018b85:	f7 f1                	div    ecx
c0018b87:	c1 e0 04             	shl    eax,0x4
c0018b8a:	09 d0                	or     eax,edx
c0018b8c:	31 d2                	xor    edx,edx
c0018b8e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018b92:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0018b97:	f7 f1                	div    ecx
c0018b99:	c1 e0 04             	shl    eax,0x4
c0018b9c:	09 d0                	or     eax,edx
c0018b9e:	31 d2                	xor    edx,edx
c0018ba0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018ba4:	0f b6 c3             	movzx  eax,bl
c0018ba7:	f7 f1                	div    ecx
c0018ba9:	c1 e0 04             	shl    eax,0x4
c0018bac:	09 d0                	or     eax,edx
c0018bae:	31 d2                	xor    edx,edx
c0018bb0:	89 c3                	mov    ebx,eax
c0018bb2:	89 f0                	mov    eax,esi
c0018bb4:	0f b6 c0             	movzx  eax,al
c0018bb7:	f7 f1                	div    ecx
c0018bb9:	c1 e0 04             	shl    eax,0x4
c0018bbc:	09 d0                	or     eax,edx
c0018bbe:	31 d2                	xor    edx,edx
c0018bc0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018bc4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018bc9:	f7 f1                	div    ecx
c0018bcb:	c1 e0 04             	shl    eax,0x4
c0018bce:	09 d0                	or     eax,edx
c0018bd0:	31 d2                	xor    edx,edx
c0018bd2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018bd6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018bda:	f7 f1                	div    ecx
c0018bdc:	c1 e0 04             	shl    eax,0x4
c0018bdf:	09 d0                	or     eax,edx
c0018be1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018be5:	83 e5 02             	and    ebp,0x2
c0018be8:	75 1e                	jne    c0018c08 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018bea:	0f b6 c3             	movzx  eax,bl
c0018bed:	83 f8 0b             	cmp    eax,0xb
c0018bf0:	76 10                	jbe    c0018c02 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0018bf2:	8d 53 f4             	lea    edx,[ebx-0xc]
c0018bf5:	88 d3                	mov    bl,dl
c0018bf7:	84 d2                	test   dl,dl
c0018bf9:	75 02                	jne    c0018bfd <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c0018bfb:	b3 0c                	mov    bl,0xc
c0018bfd:	83 cb 80             	or     ebx,0xffffff80
c0018c00:	eb 06                	jmp    c0018c08 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018c02:	85 c0                	test   eax,eax
c0018c04:	75 02                	jne    c0018c08 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018c06:	b3 0c                	mov    bl,0xc
c0018c08:	0f b6 db             	movzx  ebx,bl
c0018c0b:	50                   	push   eax
c0018c0c:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0018c11:	52                   	push   edx
c0018c12:	6a 00                	push   0x0
c0018c14:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018c1a:	e8 73 e6 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018c1f:	83 c4 0c             	add    esp,0xc
c0018c22:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018c27:	50                   	push   eax
c0018c28:	6a 02                	push   0x2
c0018c2a:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018c30:	e8 5d e6 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018c35:	83 c4 0c             	add    esp,0xc
c0018c38:	53                   	push   ebx
c0018c39:	6a 04                	push   0x4
c0018c3b:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018c41:	e8 4c e6 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018c46:	83 c4 0c             	add    esp,0xc
c0018c49:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c0018c4e:	52                   	push   edx
c0018c4f:	6a 07                	push   0x7
c0018c51:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018c57:	e8 36 e6 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018c5c:	83 c4 0c             	add    esp,0xc
c0018c5f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018c64:	50                   	push   eax
c0018c65:	6a 08                	push   0x8
c0018c67:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018c6d:	e8 20 e6 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018c72:	83 c4 0c             	add    esp,0xc
c0018c75:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0018c7a:	55                   	push   ebp
c0018c7b:	6a 09                	push   0x9
c0018c7d:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018c83:	e8 0a e6 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018c88:	5a                   	pop    edx
c0018c89:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018c8d:	e8 7c fb ff ff       	call   c001880e <RTC::completeRTCRefresh()>
c0018c92:	83 c4 3c             	add    esp,0x3c
c0018c95:	b0 01                	mov    al,0x1
c0018c97:	5b                   	pop    ebx
c0018c98:	5e                   	pop    esi
c0018c99:	5f                   	pop    edi
c0018c9a:	5d                   	pop    ebp
c0018c9b:	c3                   	ret    

c0018c9c <rtcIRQHandler(regs*, void*)>:
c0018c9c:	53                   	push   ebx
c0018c9d:	83 ec 10             	sub    esp,0x10
c0018ca0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0018ca4:	6a 0c                	push   0xc
c0018ca6:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018cac:	e8 c7 e4 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018cb1:	83 c4 10             	add    esp,0x10
c0018cb4:	a8 80                	test   al,0x80
c0018cb6:	74 24                	je     c0018cdc <rtcIRQHandler(regs*, void*)+0x40>
c0018cb8:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0018cbf:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0018cc6:	66 ff 05 78 c7 02 c0 	inc    WORD PTR ds:0xc002c778
c0018ccd:	75 0d                	jne    c0018cdc <rtcIRQHandler(regs*, void*)+0x40>
c0018ccf:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018cd3:	83 c4 08             	add    esp,0x8
c0018cd6:	5b                   	pop    ebx
c0018cd7:	e9 32 fb ff ff       	jmp    c001880e <RTC::completeRTCRefresh()>
c0018cdc:	83 c4 08             	add    esp,0x8
c0018cdf:	5b                   	pop    ebx
c0018ce0:	c3                   	ret    
c0018ce1:	90                   	nop

c0018ce2 <RTC::RTC()>:
c0018ce2:	83 ec 1c             	sub    esp,0x1c
c0018ce5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018ce9:	83 ec 08             	sub    esp,0x8
c0018cec:	68 0f 2e 02 c0       	push   0xc0022e0f
c0018cf1:	50                   	push   eax
c0018cf2:	e8 2f 38 ff ff       	call   c000c526 <Clock::Clock(char const*)>
c0018cf7:	83 c4 10             	add    esp,0x10
c0018cfa:	ba 2c 2e 02 c0       	mov    edx,0xc0022e2c
c0018cff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018d03:	89 10                	mov    DWORD PTR [eax],edx
c0018d05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018d09:	83 ec 0c             	sub    esp,0xc
c0018d0c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018d10:	6a 01                	push   0x1
c0018d12:	68 9c 8c 01 c0       	push   0xc0018c9c
c0018d17:	6a 08                	push   0x8
c0018d19:	50                   	push   eax
c0018d1a:	e8 e3 3c ff ff       	call   c000ca02 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0018d1f:	83 c4 20             	add    esp,0x20
c0018d22:	89 c2                	mov    edx,eax
c0018d24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018d28:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0018d2e:	fa                   	cli    
c0018d2f:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0018d34:	83 c0 01             	add    eax,0x1
c0018d37:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0018d3c:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018d41:	83 ec 08             	sub    esp,0x8
c0018d44:	6a 0b                	push   0xb
c0018d46:	50                   	push   eax
c0018d47:	e8 2c e4 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018d4c:	83 c4 10             	add    esp,0x10
c0018d4f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018d53:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018d58:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018d5c:	83 ca 10             	or     edx,0x10
c0018d5f:	0f b6 d2             	movzx  edx,dl
c0018d62:	83 ec 04             	sub    esp,0x4
c0018d65:	52                   	push   edx
c0018d66:	6a 0b                	push   0xb
c0018d68:	50                   	push   eax
c0018d69:	e8 24 e5 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018d6e:	83 c4 10             	add    esp,0x10
c0018d71:	83 ec 0c             	sub    esp,0xc
c0018d74:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018d78:	e8 91 fa ff ff       	call   c001880e <RTC::completeRTCRefresh()>
c0018d7d:	83 c4 10             	add    esp,0x10
c0018d80:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0018d85:	83 e8 01             	sub    eax,0x1
c0018d88:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0018d8d:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0018d92:	85 c0                	test   eax,eax
c0018d94:	75 01                	jne    c0018d97 <RTC::RTC()+0xb5>
c0018d96:	fb                   	sti    
c0018d97:	90                   	nop
c0018d98:	83 c4 1c             	add    esp,0x1c
c0018d9b:	c3                   	ret    

c0018d9c <HalConsoleScroll(int, int)>:
c0018d9c:	83 ec 10             	sub    esp,0x10
c0018d9f:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0018da7:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0018daf:	90                   	nop
c0018db0:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018db5:	0f 8f e1 00 00 00    	jg     c0018e9c <HalConsoleScroll(int, int)+0x100>
c0018dbb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018dc3:	90                   	nop
c0018dc4:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0018dcc:	0f 8f be 00 00 00    	jg     c0018e90 <HalConsoleScroll(int, int)+0xf4>
c0018dd2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018dd6:	89 d0                	mov    eax,edx
c0018dd8:	c1 e0 02             	shl    eax,0x2
c0018ddb:	01 d0                	add    eax,edx
c0018ddd:	c1 e0 05             	shl    eax,0x5
c0018de0:	89 c2                	mov    edx,eax
c0018de2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018de6:	01 d0                	add    eax,edx
c0018de8:	89 c2                	mov    edx,eax
c0018dea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018dee:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0018df1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018df5:	89 d0                	mov    eax,edx
c0018df7:	c1 e0 02             	shl    eax,0x2
c0018dfa:	01 d0                	add    eax,edx
c0018dfc:	c1 e0 05             	shl    eax,0x5
c0018dff:	89 c2                	mov    edx,eax
c0018e01:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018e05:	01 d0                	add    eax,edx
c0018e07:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0018e0d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018e11:	01 c2                	add    edx,eax
c0018e13:	8a 01                	mov    al,BYTE PTR [ecx]
c0018e15:	88 02                	mov    BYTE PTR [edx],al
c0018e17:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018e1c:	75 66                	jne    c0018e84 <HalConsoleScroll(int, int)+0xe8>
c0018e1e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018e22:	83 e0 01             	and    eax,0x1
c0018e25:	74 39                	je     c0018e60 <HalConsoleScroll(int, int)+0xc4>
c0018e27:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018e2b:	83 e0 0f             	and    eax,0xf
c0018e2e:	88 c2                	mov    dl,al
c0018e30:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018e34:	c1 e0 04             	shl    eax,0x4
c0018e37:	09 d0                	or     eax,edx
c0018e39:	88 c1                	mov    cl,al
c0018e3b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018e3f:	89 d0                	mov    eax,edx
c0018e41:	c1 e0 02             	shl    eax,0x2
c0018e44:	01 d0                	add    eax,edx
c0018e46:	c1 e0 05             	shl    eax,0x5
c0018e49:	89 c2                	mov    edx,eax
c0018e4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018e4f:	01 d0                	add    eax,edx
c0018e51:	89 c2                	mov    edx,eax
c0018e53:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018e57:	01 d0                	add    eax,edx
c0018e59:	88 ca                	mov    dl,cl
c0018e5b:	88 10                	mov    BYTE PTR [eax],dl
c0018e5d:	eb 25                	jmp    c0018e84 <HalConsoleScroll(int, int)+0xe8>
c0018e5f:	90                   	nop
c0018e60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018e64:	89 d0                	mov    eax,edx
c0018e66:	c1 e0 02             	shl    eax,0x2
c0018e69:	01 d0                	add    eax,edx
c0018e6b:	c1 e0 05             	shl    eax,0x5
c0018e6e:	89 c2                	mov    edx,eax
c0018e70:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018e74:	01 d0                	add    eax,edx
c0018e76:	89 c2                	mov    edx,eax
c0018e78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018e7c:	01 d0                	add    eax,edx
c0018e7e:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0018e81:	8d 76 00             	lea    esi,[esi+0x0]
c0018e84:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0018e89:	e9 36 ff ff ff       	jmp    c0018dc4 <HalConsoleScroll(int, int)+0x28>
c0018e8e:	66 90                	xchg   ax,ax
c0018e90:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0018e95:	e9 16 ff ff ff       	jmp    c0018db0 <HalConsoleScroll(int, int)+0x14>
c0018e9a:	66 90                	xchg   ax,ax
c0018e9c:	90                   	nop
c0018e9d:	83 c4 10             	add    esp,0x10
c0018ea0:	c3                   	ret    
c0018ea1:	8d 76 00             	lea    esi,[esi+0x0]

c0018ea4 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0018ea4:	83 ec 14             	sub    esp,0x14
c0018ea7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018eab:	88 04 24             	mov    BYTE PTR [esp],al
c0018eae:	8a 04 24             	mov    al,BYTE PTR [esp]
c0018eb1:	0f b6 c0             	movzx  eax,al
c0018eb4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018eb8:	89 d1                	mov    ecx,edx
c0018eba:	83 e1 0f             	and    ecx,0xf
c0018ebd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018ec1:	c1 e2 04             	shl    edx,0x4
c0018ec4:	0f b6 d2             	movzx  edx,dl
c0018ec7:	09 ca                	or     edx,ecx
c0018ec9:	c1 e2 08             	shl    edx,0x8
c0018ecc:	09 d0                	or     eax,edx
c0018ece:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0018ed3:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0018edb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018edf:	89 d0                	mov    eax,edx
c0018ee1:	c1 e0 02             	shl    eax,0x2
c0018ee4:	01 d0                	add    eax,edx
c0018ee6:	c1 e0 04             	shl    eax,0x4
c0018ee9:	89 c2                	mov    edx,eax
c0018eeb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018eef:	01 d0                	add    eax,edx
c0018ef1:	01 c0                	add    eax,eax
c0018ef3:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0018ef7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018efb:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0018f00:	66 89 02             	mov    WORD PTR [edx],ax
c0018f03:	90                   	nop
c0018f04:	83 c4 14             	add    esp,0x14
c0018f07:	c3                   	ret    

c0018f08 <HalConsoleCursorUpdate(int, int)>:
c0018f08:	83 ec 20             	sub    esp,0x20
c0018f0b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018f0f:	89 c2                	mov    edx,eax
c0018f11:	c1 e2 02             	shl    edx,0x2
c0018f14:	01 d0                	add    eax,edx
c0018f16:	c1 e0 04             	shl    eax,0x4
c0018f19:	89 c2                	mov    edx,eax
c0018f1b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018f1f:	01 d0                	add    eax,edx
c0018f21:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0018f26:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0018f2d:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0018f32:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018f36:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018f3a:	ee                   	out    dx,al
c0018f3b:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0018f40:	0f b6 c0             	movzx  eax,al
c0018f43:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0018f4a:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0018f4e:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0018f52:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018f56:	ee                   	out    dx,al
c0018f57:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0018f5e:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0018f63:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0018f67:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018f6b:	ee                   	out    dx,al
c0018f6c:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0018f71:	c1 e8 08             	shr    eax,0x8
c0018f74:	0f b6 c0             	movzx  eax,al
c0018f77:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0018f7e:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0018f82:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0018f86:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018f8a:	ee                   	out    dx,al
c0018f8b:	90                   	nop
c0018f8c:	83 c4 20             	add    esp,0x20
c0018f8f:	c3                   	ret    

c0018f90 <FAT::getName()>:
c0018f90:	b8 60 2e 02 c0       	mov    eax,0xc0022e60
c0018f95:	c3                   	ret    
c0018f96:	66 90                	xchg   ax,ax

c0018f98 <FAT::tell(void*, unsigned long long*)>:
c0018f98:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018f9d:	75 09                	jne    c0018fa8 <FAT::tell(void*, unsigned long long*)+0x10>
c0018f9f:	b8 04 00 00 00       	mov    eax,0x4
c0018fa4:	c3                   	ret    
c0018fa5:	8d 76 00             	lea    esi,[esi+0x0]
c0018fa8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018fad:	75 09                	jne    c0018fb8 <FAT::tell(void*, unsigned long long*)+0x20>
c0018faf:	b8 04 00 00 00       	mov    eax,0x4
c0018fb4:	c3                   	ret    
c0018fb5:	8d 76 00             	lea    esi,[esi+0x0]
c0018fb8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018fbc:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018fbf:	ba 00 00 00 00       	mov    edx,0x0
c0018fc4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018fc8:	89 01                	mov    DWORD PTR [ecx],eax
c0018fca:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018fcd:	b8 00 00 00 00       	mov    eax,0x0
c0018fd2:	c3                   	ret    
c0018fd3:	90                   	nop

c0018fd4 <FAT::stat(void*, unsigned long long*)>:
c0018fd4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018fd9:	75 09                	jne    c0018fe4 <FAT::stat(void*, unsigned long long*)+0x10>
c0018fdb:	b8 04 00 00 00       	mov    eax,0x4
c0018fe0:	c3                   	ret    
c0018fe1:	8d 76 00             	lea    esi,[esi+0x0]
c0018fe4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018fe9:	75 09                	jne    c0018ff4 <FAT::stat(void*, unsigned long long*)+0x20>
c0018feb:	b8 04 00 00 00       	mov    eax,0x4
c0018ff0:	c3                   	ret    
c0018ff1:	8d 76 00             	lea    esi,[esi+0x0]
c0018ff4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018ff8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018ffb:	ba 00 00 00 00       	mov    edx,0x0
c0019000:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019004:	89 01                	mov    DWORD PTR [ecx],eax
c0019006:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019009:	b8 00 00 00 00       	mov    eax,0x0
c001900e:	c3                   	ret    
c001900f:	90                   	nop

c0019010 <FAT::~FAT()>:
c0019010:	83 ec 0c             	sub    esp,0xc
c0019013:	ba ac 2e 02 c0       	mov    edx,0xc0022eac
c0019018:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001901c:	89 10                	mov    DWORD PTR [eax],edx
c001901e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019022:	83 ec 0c             	sub    esp,0xc
c0019025:	50                   	push   eax
c0019026:	e8 33 28 ff ff       	call   c000b85e <Filesystem::~Filesystem()>
c001902b:	83 c4 10             	add    esp,0x10
c001902e:	90                   	nop
c001902f:	83 c4 0c             	add    esp,0xc
c0019032:	c3                   	ret    
c0019033:	90                   	nop

c0019034 <FAT::~FAT()>:
c0019034:	83 ec 0c             	sub    esp,0xc
c0019037:	83 ec 0c             	sub    esp,0xc
c001903a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001903e:	e8 cd ff ff ff       	call   c0019010 <FAT::~FAT()>
c0019043:	83 c4 10             	add    esp,0x10
c0019046:	83 ec 08             	sub    esp,0x8
c0019049:	6a 08                	push   0x8
c001904b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001904f:	e8 c4 17 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0019054:	83 c4 10             	add    esp,0x10
c0019057:	83 c4 0c             	add    esp,0xc
c001905a:	c3                   	ret    
c001905b:	90                   	nop

c001905c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001905c:	83 ec 1c             	sub    esp,0x1c
c001905f:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0019066:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001906b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001906f:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019076:	83 f8 ff             	cmp    eax,0xffffffff
c0019079:	75 35                	jne    c00190b0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001907b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001907f:	88 c2                	mov    dl,al
c0019081:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019086:	01 d0                	add    eax,edx
c0019088:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001908c:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c0019092:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019096:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c001909d:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00190a2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00190a6:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c00190ad:	eb 19                	jmp    c00190c8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c00190af:	90                   	nop
c00190b0:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00190b4:	88 c2                	mov    dl,al
c00190b6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00190ba:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c00190c1:	01 d0                	add    eax,edx
c00190c3:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00190c7:	90                   	nop
c00190c8:	83 ec 04             	sub    esp,0x4
c00190cb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00190cf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00190d3:	8d 44 24 15          	lea    eax,[esp+0x15]
c00190d7:	50                   	push   eax
c00190d8:	e8 f2 be fe ff       	call   c0004fcf <f_getlabel>
c00190dd:	83 c4 10             	add    esp,0x10
c00190e0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00190e4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00190e9:	75 09                	jne    c00190f4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c00190eb:	b8 00 00 00 00       	mov    eax,0x0
c00190f0:	eb 0a                	jmp    c00190fc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c00190f2:	66 90                	xchg   ax,ax
c00190f4:	b8 01 00 00 00       	mov    eax,0x1
c00190f9:	8d 76 00             	lea    esi,[esi+0x0]
c00190fc:	83 c4 1c             	add    esp,0x1c
c00190ff:	c3                   	ret    

c0019100 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0019100:	57                   	push   edi
c0019101:	83 ec 58             	sub    esp,0x58
c0019104:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001910c:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019110:	b8 00 00 00 00       	mov    eax,0x0
c0019115:	b9 0f 00 00 00       	mov    ecx,0xf
c001911a:	fc                   	cld    
c001911b:	89 d7                	mov    edi,edx
c001911d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001911f:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019123:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c001912a:	83 f8 ff             	cmp    eax,0xffffffff
c001912d:	75 35                	jne    c0019164 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001912f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019133:	88 c2                	mov    dl,al
c0019135:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c001913a:	01 d0                	add    eax,edx
c001913c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019140:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c0019146:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001914a:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c0019151:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019156:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001915a:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c0019161:	eb 19                	jmp    c001917c <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c0019163:	90                   	nop
c0019164:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019168:	88 c2                	mov    dl,al
c001916a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001916e:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019175:	01 d0                	add    eax,edx
c0019177:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001917b:	90                   	nop
c001917c:	83 ec 08             	sub    esp,0x8
c001917f:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0019183:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019187:	50                   	push   eax
c0019188:	e8 b3 76 fe ff       	call   c0000840 <strcat>
c001918d:	83 c4 10             	add    esp,0x10
c0019190:	83 ec 0c             	sub    esp,0xc
c0019193:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019197:	50                   	push   eax
c0019198:	e8 83 bf fe ff       	call   c0005120 <f_setlabel>
c001919d:	83 c4 10             	add    esp,0x10
c00191a0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00191a4:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c00191a9:	75 09                	jne    c00191b4 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c00191ab:	b8 00 00 00 00       	mov    eax,0x0
c00191b0:	eb 0a                	jmp    c00191bc <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c00191b2:	66 90                	xchg   ax,ax
c00191b4:	b8 01 00 00 00       	mov    eax,0x1
c00191b9:	8d 76 00             	lea    esi,[esi+0x0]
c00191bc:	83 c4 58             	add    esp,0x58
c00191bf:	5f                   	pop    edi
c00191c0:	c3                   	ret    
c00191c1:	90                   	nop
c00191c2:	66 90                	xchg   ax,ax

c00191c4 <FAT::format(LogicalDisk*, int, char const*, int)>:
c00191c4:	83 ec 2c             	sub    esp,0x2c
c00191c7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00191cf:	83 ec 08             	sub    esp,0x8
c00191d2:	68 84 2e 02 c0       	push   0xc0022e84
c00191d7:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00191db:	e8 70 75 fe ff       	call   c0000750 <strcmp>
c00191e0:	83 c4 10             	add    esp,0x10
c00191e3:	85 c0                	test   eax,eax
c00191e5:	0f 94 c0             	sete   al
c00191e8:	0f b6 c0             	movzx  eax,al
c00191eb:	85 c0                	test   eax,eax
c00191ed:	74 0d                	je     c00191fc <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c00191ef:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00191f7:	e9 c0 00 00 00       	jmp    c00192bc <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00191fc:	83 ec 08             	sub    esp,0x8
c00191ff:	68 76 2e 02 c0       	push   0xc0022e76
c0019204:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019208:	e8 43 75 fe ff       	call   c0000750 <strcmp>
c001920d:	83 c4 10             	add    esp,0x10
c0019210:	85 c0                	test   eax,eax
c0019212:	0f 94 c0             	sete   al
c0019215:	0f b6 c0             	movzx  eax,al
c0019218:	85 c0                	test   eax,eax
c001921a:	74 10                	je     c001922c <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c001921c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019224:	e9 93 00 00 00       	jmp    c00192bc <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019229:	8d 76 00             	lea    esi,[esi+0x0]
c001922c:	83 ec 08             	sub    esp,0x8
c001922f:	68 7c 2e 02 c0       	push   0xc0022e7c
c0019234:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019238:	e8 13 75 fe ff       	call   c0000750 <strcmp>
c001923d:	83 c4 10             	add    esp,0x10
c0019240:	85 c0                	test   eax,eax
c0019242:	0f 94 c0             	sete   al
c0019245:	0f b6 c0             	movzx  eax,al
c0019248:	85 c0                	test   eax,eax
c001924a:	74 0c                	je     c0019258 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c001924c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019254:	eb 66                	jmp    c00192bc <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019256:	66 90                	xchg   ax,ax
c0019258:	83 ec 08             	sub    esp,0x8
c001925b:	68 bc 05 02 c0       	push   0xc00205bc
c0019260:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019264:	e8 e7 74 fe ff       	call   c0000750 <strcmp>
c0019269:	83 c4 10             	add    esp,0x10
c001926c:	85 c0                	test   eax,eax
c001926e:	0f 94 c0             	sete   al
c0019271:	0f b6 c0             	movzx  eax,al
c0019274:	85 c0                	test   eax,eax
c0019276:	74 0c                	je     c0019284 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c0019278:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0019280:	eb 3a                	jmp    c00192bc <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019282:	66 90                	xchg   ax,ax
c0019284:	83 ec 08             	sub    esp,0x8
c0019287:	68 82 2e 02 c0       	push   0xc0022e82
c001928c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019290:	e8 bb 74 fe ff       	call   c0000750 <strcmp>
c0019295:	83 c4 10             	add    esp,0x10
c0019298:	85 c0                	test   eax,eax
c001929a:	0f 94 c0             	sete   al
c001929d:	0f b6 c0             	movzx  eax,al
c00192a0:	85 c0                	test   eax,eax
c00192a2:	74 0c                	je     c00192b0 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c00192a4:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00192ac:	eb 0e                	jmp    c00192bc <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00192ae:	66 90                	xchg   ax,ax
c00192b0:	b8 08 00 00 00       	mov    eax,0x8
c00192b5:	e9 ea 00 00 00       	jmp    c00193a4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c00192ba:	66 90                	xchg   ax,ax
c00192bc:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00192c3:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00192c8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00192cc:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c00192d3:	83 f8 ff             	cmp    eax,0xffffffff
c00192d6:	75 34                	jne    c001930c <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c00192d8:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00192dc:	88 c2                	mov    dl,al
c00192de:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00192e3:	01 d0                	add    eax,edx
c00192e5:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00192e9:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c00192ef:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00192f3:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c00192fa:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00192ff:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0019303:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c001930a:	eb 18                	jmp    c0019324 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c001930c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0019310:	88 c2                	mov    dl,al
c0019312:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019316:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c001931d:	01 d0                	add    eax,edx
c001931f:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0019323:	90                   	nop
c0019324:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019328:	88 04 24             	mov    BYTE PTR [esp],al
c001932b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001932f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019333:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001933b:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0019340:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019348:	83 ec 0c             	sub    esp,0xc
c001934b:	68 00 20 00 00       	push   0x2000
c0019350:	e8 61 e7 fe ff       	call   c0007ab6 <malloc>
c0019355:	83 c4 10             	add    esp,0x10
c0019358:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001935c:	68 00 20 00 00       	push   0x2000
c0019361:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019365:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019369:	50                   	push   eax
c001936a:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001936e:	50                   	push   eax
c001936f:	e8 a9 c0 fe ff       	call   c000541d <f_mkfs>
c0019374:	83 c4 10             	add    esp,0x10
c0019377:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001937b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019380:	75 0a                	jne    c001938c <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c0019382:	b8 00 00 00 00       	mov    eax,0x0
c0019387:	eb 1b                	jmp    c00193a4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0019389:	8d 76 00             	lea    esi,[esi+0x0]
c001938c:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0019391:	75 09                	jne    c001939c <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c0019393:	b8 09 00 00 00       	mov    eax,0x9
c0019398:	eb 0a                	jmp    c00193a4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001939a:	66 90                	xchg   ax,ax
c001939c:	b8 01 00 00 00       	mov    eax,0x1
c00193a1:	8d 76 00             	lea    esi,[esi+0x0]
c00193a4:	83 c4 2c             	add    esp,0x2c
c00193a7:	c3                   	ret    

c00193a8 <FAT::tryMount(LogicalDisk*, int)>:
c00193a8:	81 ec 4c 03 00 00    	sub    esp,0x34c
c00193ae:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00193b3:	83 f8 14             	cmp    eax,0x14
c00193b6:	75 18                	jne    c00193d0 <FAT::tryMount(LogicalDisk*, int)+0x28>
c00193b8:	83 ec 0c             	sub    esp,0xc
c00193bb:	68 88 2e 02 c0       	push   0xc0022e88
c00193c0:	e8 ea 82 ff ff       	call   c00116af <KePanic(char const*)>
c00193c5:	83 c4 10             	add    esp,0x10
c00193c8:	b0 00                	mov    al,0x0
c00193ca:	e9 ed 01 00 00       	jmp    c00195bc <FAT::tryMount(LogicalDisk*, int)+0x214>
c00193cf:	90                   	nop
c00193d0:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c00193d7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00193dd:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00193e3:	3d 00 02 00 00       	cmp    eax,0x200
c00193e8:	74 0a                	je     c00193f4 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c00193ea:	b0 00                	mov    al,0x0
c00193ec:	e9 cb 01 00 00       	jmp    c00195bc <FAT::tryMount(LogicalDisk*, int)+0x214>
c00193f1:	8d 76 00             	lea    esi,[esi+0x0]
c00193f4:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c00193fc:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0019403:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c001940a:	83 f8 ff             	cmp    eax,0xffffffff
c001940d:	74 09                	je     c0019418 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001940f:	b0 01                	mov    al,0x1
c0019411:	e9 a6 01 00 00       	jmp    c00195bc <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019416:	66 90                	xchg   ax,ax
c0019418:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0019422:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c001942a:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0019431:	88 c2                	mov    dl,al
c0019433:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019438:	01 d0                	add    eax,edx
c001943a:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0019441:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c0019447:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001944e:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c0019455:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c001945a:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0019461:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c0019468:	83 ec 0c             	sub    esp,0xc
c001946b:	68 34 02 00 00       	push   0x234
c0019470:	e8 41 e6 fe ff       	call   c0007ab6 <malloc>
c0019475:	83 c4 10             	add    esp,0x10
c0019478:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c001947f:	83 ec 04             	sub    esp,0x4
c0019482:	6a 00                	push   0x0
c0019484:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001948b:	50                   	push   eax
c001948c:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0019493:	e8 60 a7 fe ff       	call   c0003bf8 <f_mount>
c0019498:	83 c4 10             	add    esp,0x10
c001949b:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00194a2:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c00194aa:	74 1c                	je     c00194c8 <FAT::tryMount(LogicalDisk*, int)+0x120>
c00194ac:	83 ec 0c             	sub    esp,0xc
c00194af:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00194b6:	e8 1b e6 fe ff       	call   c0007ad6 <rfree>
c00194bb:	83 c4 10             	add    esp,0x10
c00194be:	b0 00                	mov    al,0x0
c00194c0:	e9 f7 00 00 00       	jmp    c00195bc <FAT::tryMount(LogicalDisk*, int)+0x214>
c00194c5:	8d 76 00             	lea    esi,[esi+0x0]
c00194c8:	83 ec 04             	sub    esp,0x4
c00194cb:	68 00 01 00 00       	push   0x100
c00194d0:	6a 00                	push   0x0
c00194d2:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00194d9:	50                   	push   eax
c00194da:	e8 11 70 fe ff       	call   c00004f0 <memset>
c00194df:	83 c4 10             	add    esp,0x10
c00194e2:	83 ec 08             	sub    esp,0x8
c00194e5:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00194ec:	50                   	push   eax
c00194ed:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00194f4:	50                   	push   eax
c00194f5:	e8 46 73 fe ff       	call   c0000840 <strcat>
c00194fa:	83 c4 10             	add    esp,0x10
c00194fd:	83 ec 08             	sub    esp,0x8
c0019500:	68 96 2e 02 c0       	push   0xc0022e96
c0019505:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001950c:	50                   	push   eax
c001950d:	e8 2e 73 fe ff       	call   c0000840 <strcat>
c0019512:	83 c4 10             	add    esp,0x10
c0019515:	83 ec 04             	sub    esp,0x4
c0019518:	6a 01                	push   0x1
c001951a:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0019521:	50                   	push   eax
c0019522:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019526:	50                   	push   eax
c0019527:	e8 2e a7 fe ff       	call   c0003c5a <f_open>
c001952c:	83 c4 10             	add    esp,0x10
c001952f:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0019536:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c001953d:	85 c0                	test   eax,eax
c001953f:	74 0b                	je     c001954c <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0019541:	78 31                	js     c0019574 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0019543:	83 e8 04             	sub    eax,0x4
c0019546:	83 f8 01             	cmp    eax,0x1
c0019549:	77 29                	ja     c0019574 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001954b:	90                   	nop
c001954c:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0019554:	83 ec 0c             	sub    esp,0xc
c0019557:	8d 44 24 14          	lea    eax,[esp+0x14]
c001955b:	50                   	push   eax
c001955c:	e8 c8 ae fe ff       	call   c0004429 <f_close>
c0019561:	83 c4 10             	add    esp,0x10
c0019564:	90                   	nop
c0019565:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c001956d:	85 c0                	test   eax,eax
c001956f:	74 43                	je     c00195b4 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c0019571:	eb 31                	jmp    c00195a4 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0019573:	90                   	nop
c0019574:	83 ec 0c             	sub    esp,0xc
c0019577:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001957e:	e8 53 e5 fe ff       	call   c0007ad6 <rfree>
c0019583:	83 c4 10             	add    esp,0x10
c0019586:	83 ec 04             	sub    esp,0x4
c0019589:	6a 00                	push   0x0
c001958b:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0019592:	50                   	push   eax
c0019593:	6a 00                	push   0x0
c0019595:	e8 5e a6 fe ff       	call   c0003bf8 <f_mount>
c001959a:	83 c4 10             	add    esp,0x10
c001959d:	b0 00                	mov    al,0x0
c001959f:	eb 1b                	jmp    c00195bc <FAT::tryMount(LogicalDisk*, int)+0x214>
c00195a1:	8d 76 00             	lea    esi,[esi+0x0]
c00195a4:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00195a9:	83 c0 01             	add    eax,0x1
c00195ac:	a3 80 c7 02 c0       	mov    ds:0xc002c780,eax
c00195b1:	8d 76 00             	lea    esi,[esi+0x0]
c00195b4:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c00195bb:	90                   	nop
c00195bc:	81 c4 4c 03 00 00    	add    esp,0x34c
c00195c2:	c3                   	ret    
c00195c3:	90                   	nop

c00195c4 <FAT::allocateSwapfile(char const*, int)>:
c00195c4:	55                   	push   ebp
c00195c5:	57                   	push   edi
c00195c6:	56                   	push   esi
c00195c7:	53                   	push   ebx
c00195c8:	81 ec 3c 04 00 00    	sub    esp,0x43c
c00195ce:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c00195d9:	83 ec 0c             	sub    esp,0xc
c00195dc:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c00195e3:	e8 ce e4 fe ff       	call   c0007ab6 <malloc>
c00195e8:	83 c4 10             	add    esp,0x10
c00195eb:	89 c7                	mov    edi,eax
c00195ed:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c00195f2:	83 ec 04             	sub    esp,0x4
c00195f5:	50                   	push   eax
c00195f6:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c00195fd:	57                   	push   edi
c00195fe:	e8 d9 25 ff ff       	call   c000bbdc <File::File(char const*, Process*)>
c0019603:	83 c4 10             	add    esp,0x10
c0019606:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001960d:	83 ec 04             	sub    esp,0x4
c0019610:	8d 44 24 13          	lea    eax,[esp+0x13]
c0019614:	50                   	push   eax
c0019615:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019619:	50                   	push   eax
c001961a:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019621:	e8 d6 28 ff ff       	call   c000befc <File::stat(unsigned long long*, bool*)>
c0019626:	83 c4 10             	add    esp,0x10
c0019629:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0019630:	c1 e0 14             	shl    eax,0x14
c0019633:	89 c7                	mov    edi,eax
c0019635:	89 c5                	mov    ebp,eax
c0019637:	c1 fd 1f             	sar    ebp,0x1f
c001963a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001963e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019642:	89 f9                	mov    ecx,edi
c0019644:	31 c1                	xor    ecx,eax
c0019646:	89 cb                	mov    ebx,ecx
c0019648:	89 e9                	mov    ecx,ebp
c001964a:	31 d1                	xor    ecx,edx
c001964c:	89 ce                	mov    esi,ecx
c001964e:	89 f0                	mov    eax,esi
c0019650:	09 d8                	or     eax,ebx
c0019652:	0f 84 9c 00 00 00    	je     c00196f4 <FAT::allocateSwapfile(char const*, int)+0x130>
c0019658:	83 ec 0c             	sub    esp,0xc
c001965b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019662:	e8 61 27 ff ff       	call   c000bdc8 <File::unlink()>
c0019667:	83 c4 10             	add    esp,0x10
c001966a:	83 ec 08             	sub    esp,0x8
c001966d:	6a 12                	push   0x12
c001966f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019676:	e8 7f 25 ff ff       	call   c000bbfa <File::open(FileOpenMode)>
c001967b:	83 c4 10             	add    esp,0x10
c001967e:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019685:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001968b:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0019692:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0019699:	c1 e0 14             	shl    eax,0x14
c001969c:	83 ec 04             	sub    esp,0x4
c001969f:	6a 01                	push   0x1
c00196a1:	50                   	push   eax
c00196a2:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c00196a9:	e8 02 bc fe ff       	call   c00052b0 <f_expand>
c00196ae:	83 c4 10             	add    esp,0x10
c00196b1:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00196b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00196ba:	83 c0 10             	add    eax,0x10
c00196bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00196bf:	83 ec 0c             	sub    esp,0xc
c00196c2:	8d 54 24 24          	lea    edx,[esp+0x24]
c00196c6:	52                   	push   edx
c00196c7:	8d 54 24 30          	lea    edx,[esp+0x30]
c00196cb:	52                   	push   edx
c00196cc:	6a 00                	push   0x0
c00196ce:	68 00 04 00 00       	push   0x400
c00196d3:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c00196da:	ff d0                	call   eax
c00196dc:	83 c4 20             	add    esp,0x20
c00196df:	83 ec 0c             	sub    esp,0xc
c00196e2:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00196e9:	e8 6a 25 ff ff       	call   c000bc58 <File::close()>
c00196ee:	83 c4 10             	add    esp,0x10
c00196f1:	8d 76 00             	lea    esi,[esi+0x0]
c00196f4:	83 ec 08             	sub    esp,0x8
c00196f7:	6a 01                	push   0x1
c00196f9:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019700:	e8 f5 24 ff ff       	call   c000bbfa <File::open(FileOpenMode)>
c0019705:	83 c4 10             	add    esp,0x10
c0019708:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001970f:	8b 00                	mov    eax,DWORD PTR [eax]
c0019711:	83 c0 0c             	add    eax,0xc
c0019714:	8b 00                	mov    eax,DWORD PTR [eax]
c0019716:	83 ec 0c             	sub    esp,0xc
c0019719:	8d 54 24 24          	lea    edx,[esp+0x24]
c001971d:	52                   	push   edx
c001971e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0019722:	52                   	push   edx
c0019723:	6a 00                	push   0x0
c0019725:	6a 04                	push   0x4
c0019727:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001972e:	ff d0                	call   eax
c0019730:	83 c4 20             	add    esp,0x20
c0019733:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001973a:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0019740:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0019747:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001974e:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0019751:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0019758:	83 ec 0c             	sub    esp,0xc
c001975b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019762:	e8 f1 24 ff ff       	call   c000bc58 <File::close()>
c0019767:	83 c4 10             	add    esp,0x10
c001976a:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0019771:	ba 00 00 00 00       	mov    edx,0x0
c0019776:	81 c4 3c 04 00 00    	add    esp,0x43c
c001977c:	5b                   	pop    ebx
c001977d:	5e                   	pop    esi
c001977e:	5f                   	pop    edi
c001977f:	5d                   	pop    ebp
c0019780:	c3                   	ret    
c0019781:	90                   	nop
c0019782:	66 90                	xchg   ax,ax

c0019784 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0019784:	57                   	push   edi
c0019785:	56                   	push   esi
c0019786:	53                   	push   ebx
c0019787:	81 ec 50 02 00 00    	sub    esp,0x250
c001978d:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0019795:	74 0d                	je     c00197a4 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0019797:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001979f:	75 0f                	jne    c00197b0 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c00197a1:	8d 76 00             	lea    esi,[esi+0x0]
c00197a4:	b8 04 00 00 00       	mov    eax,0x4
c00197a9:	e9 3a 01 00 00       	jmp    c00198e8 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c00197ae:	66 90                	xchg   ax,ax
c00197b0:	83 ec 08             	sub    esp,0x8
c00197b3:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00197ba:	50                   	push   eax
c00197bb:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c00197c2:	e8 2f af fe ff       	call   c00046f6 <f_readdir>
c00197c7:	83 c4 10             	add    esp,0x10
c00197ca:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c00197d1:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c00197d8:	83 ec 0c             	sub    esp,0xc
c00197db:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00197e2:	83 c0 16             	add    eax,0x16
c00197e5:	50                   	push   eax
c00197e6:	e8 85 6d fe ff       	call   c0000570 <strlen>
c00197eb:	83 c4 10             	add    esp,0x10
c00197ee:	ba 00 00 00 00       	mov    edx,0x0
c00197f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00197f7:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00197fb:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0019802:	0f b6 c0             	movzx  eax,al
c0019805:	83 e0 10             	and    eax,0x10
c0019808:	74 0a                	je     c0019814 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001980a:	b8 02 00 00 00       	mov    eax,0x2
c001980f:	eb 0b                	jmp    c001981c <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0019811:	8d 76 00             	lea    esi,[esi+0x0]
c0019814:	b8 01 00 00 00       	mov    eax,0x1
c0019819:	8d 76 00             	lea    esi,[esi+0x0]
c001981c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019820:	83 ec 08             	sub    esp,0x8
c0019823:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001982a:	83 c0 16             	add    eax,0x16
c001982d:	50                   	push   eax
c001982e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019832:	83 c0 10             	add    eax,0x10
c0019835:	50                   	push   eax
c0019836:	e8 05 6e fe ff       	call   c0000640 <strcpy>
c001983b:	83 c4 10             	add    esp,0x10
c001983e:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0019845:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001984c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019850:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0019857:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001985e:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0019865:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001986c:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0019873:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001987a:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0019881:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0019888:	89 c6                	mov    esi,eax
c001988a:	89 d7                	mov    edi,edx
c001988c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001988e:	89 c8                	mov    eax,ecx
c0019890:	89 fa                	mov    edx,edi
c0019892:	89 f3                	mov    ebx,esi
c0019894:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001989b:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c00198a2:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c00198a9:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c00198b0:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00198b6:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c00198bd:	0f be c0             	movsx  eax,al
c00198c0:	85 c0                	test   eax,eax
c00198c2:	75 08                	jne    c00198cc <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c00198c4:	b8 07 00 00 00       	mov    eax,0x7
c00198c9:	eb 1d                	jmp    c00198e8 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c00198cb:	90                   	nop
c00198cc:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c00198d3:	85 c0                	test   eax,eax
c00198d5:	75 09                	jne    c00198e0 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c00198d7:	b8 00 00 00 00       	mov    eax,0x0
c00198dc:	eb 0a                	jmp    c00198e8 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c00198de:	66 90                	xchg   ax,ax
c00198e0:	b8 01 00 00 00       	mov    eax,0x1
c00198e5:	8d 76 00             	lea    esi,[esi+0x0]
c00198e8:	81 c4 50 02 00 00    	add    esp,0x250
c00198ee:	5b                   	pop    ebx
c00198ef:	5e                   	pop    esi
c00198f0:	5f                   	pop    edi
c00198f1:	c3                   	ret    
c00198f2:	66 90                	xchg   ax,ax

c00198f4 <FAT::read(void*, unsigned long, void*, int*)>:
c00198f4:	83 ec 1c             	sub    esp,0x1c
c00198f7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00198fc:	74 0a                	je     c0019908 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c00198fe:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0019903:	75 0b                	jne    c0019910 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0019905:	8d 76 00             	lea    esi,[esi+0x0]
c0019908:	b8 04 00 00 00       	mov    eax,0x4
c001990d:	eb 41                	jmp    c0019950 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001990f:	90                   	nop
c0019910:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019914:	50                   	push   eax
c0019915:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019919:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001991d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019921:	e8 f7 a5 fe ff       	call   c0003f1d <f_read>
c0019926:	83 c4 10             	add    esp,0x10
c0019929:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001992d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019931:	89 c2                	mov    edx,eax
c0019933:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019937:	89 10                	mov    DWORD PTR [eax],edx
c0019939:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001993d:	85 c0                	test   eax,eax
c001993f:	75 07                	jne    c0019948 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0019941:	b8 00 00 00 00       	mov    eax,0x0
c0019946:	eb 08                	jmp    c0019950 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0019948:	b8 01 00 00 00       	mov    eax,0x1
c001994d:	8d 76 00             	lea    esi,[esi+0x0]
c0019950:	83 c4 1c             	add    esp,0x1c
c0019953:	c3                   	ret    

c0019954 <FAT::write(void*, unsigned long, void*, int*)>:
c0019954:	83 ec 1c             	sub    esp,0x1c
c0019957:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001995c:	74 0a                	je     c0019968 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001995e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0019963:	75 0b                	jne    c0019970 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0019965:	8d 76 00             	lea    esi,[esi+0x0]
c0019968:	b8 04 00 00 00       	mov    eax,0x4
c001996d:	eb 41                	jmp    c00199b0 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001996f:	90                   	nop
c0019970:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019974:	50                   	push   eax
c0019975:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019979:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001997d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019981:	e8 96 a7 fe ff       	call   c000411c <f_write>
c0019986:	83 c4 10             	add    esp,0x10
c0019989:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001998d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019991:	89 c2                	mov    edx,eax
c0019993:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019997:	89 10                	mov    DWORD PTR [eax],edx
c0019999:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001999d:	85 c0                	test   eax,eax
c001999f:	75 07                	jne    c00199a8 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c00199a1:	b8 00 00 00 00       	mov    eax,0x0
c00199a6:	eb 08                	jmp    c00199b0 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c00199a8:	b8 01 00 00 00       	mov    eax,0x1
c00199ad:	8d 76 00             	lea    esi,[esi+0x0]
c00199b0:	83 c4 1c             	add    esp,0x1c
c00199b3:	c3                   	ret    

c00199b4 <FAT::close(void*)>:
c00199b4:	83 ec 1c             	sub    esp,0x1c
c00199b7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00199bc:	75 0a                	jne    c00199c8 <FAT::close(void*)+0x14>
c00199be:	b8 04 00 00 00       	mov    eax,0x4
c00199c3:	eb 3f                	jmp    c0019a04 <FAT::close(void*)+0x50>
c00199c5:	8d 76 00             	lea    esi,[esi+0x0]
c00199c8:	83 ec 0c             	sub    esp,0xc
c00199cb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00199cf:	e8 55 aa fe ff       	call   c0004429 <f_close>
c00199d4:	83 c4 10             	add    esp,0x10
c00199d7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00199db:	83 ec 0c             	sub    esp,0xc
c00199de:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00199e2:	e8 df e0 fe ff       	call   c0007ac6 <free>
c00199e7:	83 c4 10             	add    esp,0x10
c00199ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00199ee:	85 c0                	test   eax,eax
c00199f0:	75 0a                	jne    c00199fc <FAT::close(void*)+0x48>
c00199f2:	b8 00 00 00 00       	mov    eax,0x0
c00199f7:	eb 0b                	jmp    c0019a04 <FAT::close(void*)+0x50>
c00199f9:	8d 76 00             	lea    esi,[esi+0x0]
c00199fc:	b8 01 00 00 00       	mov    eax,0x1
c0019a01:	8d 76 00             	lea    esi,[esi+0x0]
c0019a04:	83 c4 1c             	add    esp,0x1c
c0019a07:	c3                   	ret    

c0019a08 <FAT::closeDir(void*)>:
c0019a08:	83 ec 1c             	sub    esp,0x1c
c0019a0b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019a10:	75 0a                	jne    c0019a1c <FAT::closeDir(void*)+0x14>
c0019a12:	b8 04 00 00 00       	mov    eax,0x4
c0019a17:	eb 3f                	jmp    c0019a58 <FAT::closeDir(void*)+0x50>
c0019a19:	8d 76 00             	lea    esi,[esi+0x0]
c0019a1c:	83 ec 0c             	sub    esp,0xc
c0019a1f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019a23:	e8 ac ac fe ff       	call   c00046d4 <f_closedir>
c0019a28:	83 c4 10             	add    esp,0x10
c0019a2b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019a2f:	83 ec 0c             	sub    esp,0xc
c0019a32:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019a36:	e8 8b e0 fe ff       	call   c0007ac6 <free>
c0019a3b:	83 c4 10             	add    esp,0x10
c0019a3e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019a42:	85 c0                	test   eax,eax
c0019a44:	75 0a                	jne    c0019a50 <FAT::closeDir(void*)+0x48>
c0019a46:	b8 00 00 00 00       	mov    eax,0x0
c0019a4b:	eb 0b                	jmp    c0019a58 <FAT::closeDir(void*)+0x50>
c0019a4d:	8d 76 00             	lea    esi,[esi+0x0]
c0019a50:	b8 01 00 00 00       	mov    eax,0x1
c0019a55:	8d 76 00             	lea    esi,[esi+0x0]
c0019a58:	83 c4 1c             	add    esp,0x1c
c0019a5b:	c3                   	ret    

c0019a5c <FAT::truncate(void*, unsigned long long)>:
c0019a5c:	83 ec 2c             	sub    esp,0x2c
c0019a5f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019a63:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019a67:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019a6b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019a6f:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0019a74:	75 0a                	jne    c0019a80 <FAT::truncate(void*, unsigned long long)+0x24>
c0019a76:	b8 04 00 00 00       	mov    eax,0x4
c0019a7b:	eb 47                	jmp    c0019ac4 <FAT::truncate(void*, unsigned long long)+0x68>
c0019a7d:	8d 76 00             	lea    esi,[esi+0x0]
c0019a80:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019a84:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019a87:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019a8b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0019a93:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019a97:	83 ec 08             	sub    esp,0x8
c0019a9a:	50                   	push   eax
c0019a9b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0019a9f:	e8 b4 a9 fe ff       	call   c0004458 <f_lseek>
c0019aa4:	83 c4 10             	add    esp,0x10
c0019aa7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019aab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019aaf:	85 c0                	test   eax,eax
c0019ab1:	75 09                	jne    c0019abc <FAT::truncate(void*, unsigned long long)+0x60>
c0019ab3:	b8 00 00 00 00       	mov    eax,0x0
c0019ab8:	eb 0a                	jmp    c0019ac4 <FAT::truncate(void*, unsigned long long)+0x68>
c0019aba:	66 90                	xchg   ax,ax
c0019abc:	b8 01 00 00 00       	mov    eax,0x1
c0019ac1:	8d 76 00             	lea    esi,[esi+0x0]
c0019ac4:	83 c4 2c             	add    esp,0x2c
c0019ac7:	c3                   	ret    

c0019ac8 <FAT::seek(void*, unsigned long long)>:
c0019ac8:	83 ec 2c             	sub    esp,0x2c
c0019acb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019acf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019ad3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019ad7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019adb:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0019ae0:	75 0a                	jne    c0019aec <FAT::seek(void*, unsigned long long)+0x24>
c0019ae2:	b8 04 00 00 00       	mov    eax,0x4
c0019ae7:	eb 33                	jmp    c0019b1c <FAT::seek(void*, unsigned long long)+0x54>
c0019ae9:	8d 76 00             	lea    esi,[esi+0x0]
c0019aec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019af0:	83 ec 08             	sub    esp,0x8
c0019af3:	50                   	push   eax
c0019af4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0019af8:	e8 5b a9 fe ff       	call   c0004458 <f_lseek>
c0019afd:	83 c4 10             	add    esp,0x10
c0019b00:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019b04:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019b08:	85 c0                	test   eax,eax
c0019b0a:	75 08                	jne    c0019b14 <FAT::seek(void*, unsigned long long)+0x4c>
c0019b0c:	b8 00 00 00 00       	mov    eax,0x0
c0019b11:	eb 09                	jmp    c0019b1c <FAT::seek(void*, unsigned long long)+0x54>
c0019b13:	90                   	nop
c0019b14:	b8 01 00 00 00       	mov    eax,0x1
c0019b19:	8d 76 00             	lea    esi,[esi+0x0]
c0019b1c:	83 c4 2c             	add    esp,0x2c
c0019b1f:	c3                   	ret    

c0019b20 <fatWrapperReadDisk>:
c0019b20:	53                   	push   ebx
c0019b21:	83 ec 18             	sub    esp,0x18
c0019b24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b28:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019b2c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019b31:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c0019b38:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019b3c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019b40:	ba 00 00 00 00       	mov    edx,0x0
c0019b45:	83 ec 0c             	sub    esp,0xc
c0019b48:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019b4c:	53                   	push   ebx
c0019b4d:	52                   	push   edx
c0019b4e:	50                   	push   eax
c0019b4f:	51                   	push   ecx
c0019b50:	e8 e3 42 ff ff       	call   c000de38 <LogicalDisk::read(unsigned long long, int, void*)>
c0019b55:	83 c4 20             	add    esp,0x20
c0019b58:	83 c4 18             	add    esp,0x18
c0019b5b:	5b                   	pop    ebx
c0019b5c:	c3                   	ret    
c0019b5d:	8d 76 00             	lea    esi,[esi+0x0]

c0019b60 <fatWrapperWriteDisk>:
c0019b60:	53                   	push   ebx
c0019b61:	83 ec 18             	sub    esp,0x18
c0019b64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b68:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019b6c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019b71:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c0019b78:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019b7c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019b80:	ba 00 00 00 00       	mov    edx,0x0
c0019b85:	83 ec 0c             	sub    esp,0xc
c0019b88:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019b8c:	53                   	push   ebx
c0019b8d:	52                   	push   edx
c0019b8e:	50                   	push   eax
c0019b8f:	51                   	push   ecx
c0019b90:	e8 0f 43 ff ff       	call   c000dea4 <LogicalDisk::write(unsigned long long, int, void*)>
c0019b95:	83 c4 20             	add    esp,0x20
c0019b98:	83 c4 18             	add    esp,0x18
c0019b9b:	5b                   	pop    ebx
c0019b9c:	c3                   	ret    
c0019b9d:	8d 76 00             	lea    esi,[esi+0x0]

c0019ba0 <fatWrapperIoctl>:
c0019ba0:	53                   	push   ebx
c0019ba1:	83 ec 28             	sub    esp,0x28
c0019ba4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019ba8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019bac:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0019bb0:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019bb4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019bb9:	83 f8 02             	cmp    eax,0x2
c0019bbc:	75 32                	jne    c0019bf0 <fatWrapperIoctl+0x50>
c0019bbe:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019bc2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019bc6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019bcb:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c0019bd2:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019bd8:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019bde:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019be2:	66 89 02             	mov    WORD PTR [edx],ax
c0019be5:	b8 00 00 00 00       	mov    eax,0x0
c0019bea:	e9 c5 00 00 00       	jmp    c0019cb4 <fatWrapperIoctl+0x114>
c0019bef:	90                   	nop
c0019bf0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019bf5:	83 f8 01             	cmp    eax,0x1
c0019bf8:	75 6a                	jne    c0019c64 <fatWrapperIoctl+0xc4>
c0019bfa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019bfe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019c02:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019c07:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c0019c0e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019c14:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0019c1a:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0019c20:	89 c8                	mov    eax,ecx
c0019c22:	89 da                	mov    edx,ebx
c0019c24:	0f a4 c2 0a          	shld   edx,eax,0xa
c0019c28:	c1 e0 0a             	shl    eax,0xa
c0019c2b:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0019c30:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c0019c37:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0019c3d:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0019c43:	89 cb                	mov    ebx,ecx
c0019c45:	c1 fb 1f             	sar    ebx,0x1f
c0019c48:	53                   	push   ebx
c0019c49:	51                   	push   ecx
c0019c4a:	52                   	push   edx
c0019c4b:	50                   	push   eax
c0019c4c:	e8 6f 5b 00 00       	call   c001f7c0 <__udivdi3>
c0019c51:	83 c4 10             	add    esp,0x10
c0019c54:	89 c2                	mov    edx,eax
c0019c56:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019c5a:	89 10                	mov    DWORD PTR [eax],edx
c0019c5c:	b8 00 00 00 00       	mov    eax,0x0
c0019c61:	eb 51                	jmp    c0019cb4 <fatWrapperIoctl+0x114>
c0019c63:	90                   	nop
c0019c64:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019c69:	85 c0                	test   eax,eax
c0019c6b:	75 07                	jne    c0019c74 <fatWrapperIoctl+0xd4>
c0019c6d:	b8 00 00 00 00       	mov    eax,0x0
c0019c72:	eb 40                	jmp    c0019cb4 <fatWrapperIoctl+0x114>
c0019c74:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019c79:	83 f8 03             	cmp    eax,0x3
c0019c7c:	75 1a                	jne    c0019c98 <fatWrapperIoctl+0xf8>
c0019c7e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019c82:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019c86:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019c8a:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0019c90:	b8 00 00 00 00       	mov    eax,0x0
c0019c95:	eb 1d                	jmp    c0019cb4 <fatWrapperIoctl+0x114>
c0019c97:	90                   	nop
c0019c98:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019c9d:	83 f8 04             	cmp    eax,0x4
c0019ca0:	75 0a                	jne    c0019cac <fatWrapperIoctl+0x10c>
c0019ca2:	b8 00 00 00 00       	mov    eax,0x0
c0019ca7:	eb 0b                	jmp    c0019cb4 <fatWrapperIoctl+0x114>
c0019ca9:	8d 76 00             	lea    esi,[esi+0x0]
c0019cac:	b8 04 00 00 00       	mov    eax,0x4
c0019cb1:	8d 76 00             	lea    esi,[esi+0x0]
c0019cb4:	83 c4 28             	add    esp,0x28
c0019cb7:	5b                   	pop    ebx
c0019cb8:	c3                   	ret    
c0019cb9:	90                   	nop
c0019cba:	66 90                	xchg   ax,ax

c0019cbc <FAT::FAT()>:
c0019cbc:	83 ec 1c             	sub    esp,0x1c
c0019cbf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019cc3:	83 ec 0c             	sub    esp,0xc
c0019cc6:	50                   	push   eax
c0019cc7:	e8 6e 1b ff ff       	call   c000b83a <Filesystem::Filesystem()>
c0019ccc:	83 c4 10             	add    esp,0x10
c0019ccf:	ba ac 2e 02 c0       	mov    edx,0xc0022eac
c0019cd4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019cd8:	89 10                	mov    DWORD PTR [eax],edx
c0019cda:	c7 05 80 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c780,0x0
c0019ce4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019cec:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0019cf1:	7f 19                	jg     c0019d0c <FAT::FAT()+0x50>
c0019cf3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019cf7:	c7 04 85 a0 c7 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd3860],0xffffffff
c0019d02:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0019d07:	eb e3                	jmp    c0019cec <FAT::FAT()+0x30>
c0019d09:	8d 76 00             	lea    esi,[esi+0x0]
c0019d0c:	90                   	nop
c0019d0d:	83 c4 1c             	add    esp,0x1c
c0019d10:	c3                   	ret    
c0019d11:	90                   	nop
c0019d12:	66 90                	xchg   ax,ax

c0019d14 <FAT::fixFilepath(char*)>:
c0019d14:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d18:	8a 00                	mov    al,BYTE PTR [eax]
c0019d1a:	0f be c0             	movsx  eax,al
c0019d1d:	83 f8 40             	cmp    eax,0x40
c0019d20:	7e 2e                	jle    c0019d50 <FAT::fixFilepath(char*)+0x3c>
c0019d22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d26:	8a 00                	mov    al,BYTE PTR [eax]
c0019d28:	83 e8 41             	sub    eax,0x41
c0019d2b:	88 c2                	mov    dl,al
c0019d2d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d31:	88 10                	mov    BYTE PTR [eax],dl
c0019d33:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d37:	8a 00                	mov    al,BYTE PTR [eax]
c0019d39:	0f be c0             	movsx  eax,al
c0019d3c:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019d43:	83 c0 30             	add    eax,0x30
c0019d46:	88 c2                	mov    dl,al
c0019d48:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d4c:	88 10                	mov    BYTE PTR [eax],dl
c0019d4e:	66 90                	xchg   ax,ax
c0019d50:	90                   	nop
c0019d51:	c3                   	ret    
c0019d52:	66 90                	xchg   ax,ax

c0019d54 <FAT::open(char const*, void**, FileOpenMode)>:
c0019d54:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019d5a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019d62:	74 0c                	je     c0019d70 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0019d64:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019d6c:	75 0e                	jne    c0019d7c <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0019d6e:	66 90                	xchg   ax,ax
c0019d70:	b8 04 00 00 00       	mov    eax,0x4
c0019d75:	e9 46 01 00 00       	jmp    c0019ec0 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0019d7a:	66 90                	xchg   ax,ax
c0019d7c:	83 ec 08             	sub    esp,0x8
c0019d7f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019d86:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019d8a:	50                   	push   eax
c0019d8b:	e8 b0 68 fe ff       	call   c0000640 <strcpy>
c0019d90:	83 c4 10             	add    esp,0x10
c0019d93:	83 ec 08             	sub    esp,0x8
c0019d96:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019d9a:	50                   	push   eax
c0019d9b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019da2:	e8 6d ff ff ff       	call   c0019d14 <FAT::fixFilepath(char*)>
c0019da7:	83 c4 10             	add    esp,0x10
c0019daa:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0019db2:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019db9:	83 e0 01             	and    eax,0x1
c0019dbc:	74 12                	je     c0019dd0 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c0019dbe:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019dc5:	83 c8 01             	or     eax,0x1
c0019dc8:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019dcf:	90                   	nop
c0019dd0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019dd7:	83 e0 04             	and    eax,0x4
c0019dda:	74 24                	je     c0019e00 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c0019ddc:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019de3:	83 c8 30             	or     eax,0x30
c0019de6:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019ded:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019df4:	83 c8 02             	or     eax,0x2
c0019df7:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019dfe:	66 90                	xchg   ax,ax
c0019e00:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019e07:	83 e0 02             	and    eax,0x2
c0019e0a:	74 14                	je     c0019e20 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0019e0c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019e13:	83 c8 02             	or     eax,0x2
c0019e16:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019e1d:	8d 76 00             	lea    esi,[esi+0x0]
c0019e20:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019e27:	83 e0 08             	and    eax,0x8
c0019e2a:	74 14                	je     c0019e40 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c0019e2c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019e33:	83 c8 04             	or     eax,0x4
c0019e36:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019e3d:	8d 76 00             	lea    esi,[esi+0x0]
c0019e40:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019e47:	83 e0 10             	and    eax,0x10
c0019e4a:	74 14                	je     c0019e60 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c0019e4c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019e53:	83 c8 08             	or     eax,0x8
c0019e56:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019e5d:	8d 76 00             	lea    esi,[esi+0x0]
c0019e60:	83 ec 0c             	sub    esp,0xc
c0019e63:	68 28 02 00 00       	push   0x228
c0019e68:	e8 49 dc fe ff       	call   c0007ab6 <malloc>
c0019e6d:	83 c4 10             	add    esp,0x10
c0019e70:	89 c2                	mov    edx,eax
c0019e72:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019e79:	89 10                	mov    DWORD PTR [eax],edx
c0019e7b:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0019e83:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019e8a:	8b 00                	mov    eax,DWORD PTR [eax]
c0019e8c:	83 ec 04             	sub    esp,0x4
c0019e8f:	52                   	push   edx
c0019e90:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019e94:	52                   	push   edx
c0019e95:	50                   	push   eax
c0019e96:	e8 bf 9d fe ff       	call   c0003c5a <f_open>
c0019e9b:	83 c4 10             	add    esp,0x10
c0019e9e:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0019ea5:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0019ead:	74 09                	je     c0019eb8 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c0019eaf:	b8 01 00 00 00       	mov    eax,0x1
c0019eb4:	eb 0a                	jmp    c0019ec0 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0019eb6:	66 90                	xchg   ax,ax
c0019eb8:	b8 00 00 00 00       	mov    eax,0x0
c0019ebd:	8d 76 00             	lea    esi,[esi+0x0]
c0019ec0:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019ec6:	c3                   	ret    
c0019ec7:	90                   	nop

c0019ec8 <FAT::openDir(char const*, void**)>:
c0019ec8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019ece:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019ed6:	74 0c                	je     c0019ee4 <FAT::openDir(char const*, void**)+0x1c>
c0019ed8:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019ee0:	75 0e                	jne    c0019ef0 <FAT::openDir(char const*, void**)+0x28>
c0019ee2:	66 90                	xchg   ax,ax
c0019ee4:	b8 04 00 00 00       	mov    eax,0x4
c0019ee9:	e9 82 00 00 00       	jmp    c0019f70 <FAT::openDir(char const*, void**)+0xa8>
c0019eee:	66 90                	xchg   ax,ax
c0019ef0:	83 ec 08             	sub    esp,0x8
c0019ef3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019efa:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019efe:	50                   	push   eax
c0019eff:	e8 3c 67 fe ff       	call   c0000640 <strcpy>
c0019f04:	83 c4 10             	add    esp,0x10
c0019f07:	83 ec 08             	sub    esp,0x8
c0019f0a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019f0e:	50                   	push   eax
c0019f0f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019f16:	e8 f9 fd ff ff       	call   c0019d14 <FAT::fixFilepath(char*)>
c0019f1b:	83 c4 10             	add    esp,0x10
c0019f1e:	83 ec 0c             	sub    esp,0xc
c0019f21:	6a 30                	push   0x30
c0019f23:	e8 8e db fe ff       	call   c0007ab6 <malloc>
c0019f28:	83 c4 10             	add    esp,0x10
c0019f2b:	89 c2                	mov    edx,eax
c0019f2d:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019f34:	89 10                	mov    DWORD PTR [eax],edx
c0019f36:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019f3d:	8b 00                	mov    eax,DWORD PTR [eax]
c0019f3f:	83 ec 08             	sub    esp,0x8
c0019f42:	8d 54 24 14          	lea    edx,[esp+0x14]
c0019f46:	52                   	push   edx
c0019f47:	50                   	push   eax
c0019f48:	e8 bc a6 fe ff       	call   c0004609 <f_opendir>
c0019f4d:	83 c4 10             	add    esp,0x10
c0019f50:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019f57:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0019f5f:	74 07                	je     c0019f68 <FAT::openDir(char const*, void**)+0xa0>
c0019f61:	b8 01 00 00 00       	mov    eax,0x1
c0019f66:	eb 08                	jmp    c0019f70 <FAT::openDir(char const*, void**)+0xa8>
c0019f68:	b8 00 00 00 00       	mov    eax,0x0
c0019f6d:	8d 76 00             	lea    esi,[esi+0x0]
c0019f70:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019f76:	c3                   	ret    
c0019f77:	90                   	nop

c0019f78 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0019f78:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019f7e:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0019f86:	75 0c                	jne    c0019f94 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0019f88:	b8 04 00 00 00       	mov    eax,0x4
c0019f8d:	e9 d6 00 00 00       	jmp    c001a068 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019f92:	66 90                	xchg   ax,ax
c0019f94:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0019f9c:	75 0a                	jne    c0019fa8 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0019f9e:	b8 04 00 00 00       	mov    eax,0x4
c0019fa3:	e9 c0 00 00 00       	jmp    c001a068 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019fa8:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0019fb0:	75 0a                	jne    c0019fbc <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0019fb2:	b8 04 00 00 00       	mov    eax,0x4
c0019fb7:	e9 ac 00 00 00       	jmp    c001a068 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019fbc:	83 ec 08             	sub    esp,0x8
c0019fbf:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019fc6:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019fcd:	50                   	push   eax
c0019fce:	e8 6d 66 fe ff       	call   c0000640 <strcpy>
c0019fd3:	83 c4 10             	add    esp,0x10
c0019fd6:	83 ec 08             	sub    esp,0x8
c0019fd9:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0019fe0:	50                   	push   eax
c0019fe1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019fe8:	e8 27 fd ff ff       	call   c0019d14 <FAT::fixFilepath(char*)>
c0019fed:	83 c4 10             	add    esp,0x10
c0019ff0:	83 ec 08             	sub    esp,0x8
c0019ff3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019ff7:	50                   	push   eax
c0019ff8:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019fff:	50                   	push   eax
c001a000:	e8 83 a7 fe ff       	call   c0004788 <f_stat>
c001a005:	83 c4 10             	add    esp,0x10
c001a008:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001a00f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001a016:	85 c0                	test   eax,eax
c001a018:	74 0a                	je     c001a024 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001a01a:	83 f8 04             	cmp    eax,0x4
c001a01d:	74 39                	je     c001a058 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001a01f:	eb 3f                	jmp    c001a060 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c001a021:	8d 76 00             	lea    esi,[esi+0x0]
c001a024:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a028:	0f b6 c0             	movzx  eax,al
c001a02b:	83 e0 10             	and    eax,0x10
c001a02e:	0f 95 c2             	setne  dl
c001a031:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001a038:	88 10                	mov    BYTE PTR [eax],dl
c001a03a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a03e:	ba 00 00 00 00       	mov    edx,0x0
c001a043:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001a04a:	89 01                	mov    DWORD PTR [ecx],eax
c001a04c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a04f:	b8 00 00 00 00       	mov    eax,0x0
c001a054:	eb 12                	jmp    c001a068 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a056:	66 90                	xchg   ax,ax
c001a058:	b8 02 00 00 00       	mov    eax,0x2
c001a05d:	eb 09                	jmp    c001a068 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a05f:	90                   	nop
c001a060:	b8 01 00 00 00       	mov    eax,0x1
c001a065:	8d 76 00             	lea    esi,[esi+0x0]
c001a068:	81 c4 2c 02 00 00    	add    esp,0x22c
c001a06e:	c3                   	ret    
c001a06f:	90                   	nop

c001a070 <FAT::unlink(char const*)>:
c001a070:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a076:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a07e:	75 08                	jne    c001a088 <FAT::unlink(char const*)+0x18>
c001a080:	b8 04 00 00 00       	mov    eax,0x4
c001a085:	eb 61                	jmp    c001a0e8 <FAT::unlink(char const*)+0x78>
c001a087:	90                   	nop
c001a088:	83 ec 08             	sub    esp,0x8
c001a08b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a092:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a096:	50                   	push   eax
c001a097:	e8 a4 65 fe ff       	call   c0000640 <strcpy>
c001a09c:	83 c4 10             	add    esp,0x10
c001a09f:	83 ec 08             	sub    esp,0x8
c001a0a2:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a0a6:	50                   	push   eax
c001a0a7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a0ae:	e8 61 fc ff ff       	call   c0019d14 <FAT::fixFilepath(char*)>
c001a0b3:	83 c4 10             	add    esp,0x10
c001a0b6:	83 ec 0c             	sub    esp,0xc
c001a0b9:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a0bd:	50                   	push   eax
c001a0be:	e8 37 a9 fe ff       	call   c00049fa <f_unlink>
c001a0c3:	83 c4 10             	add    esp,0x10
c001a0c6:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a0cd:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001a0d4:	85 c0                	test   eax,eax
c001a0d6:	75 08                	jne    c001a0e0 <FAT::unlink(char const*)+0x70>
c001a0d8:	b8 00 00 00 00       	mov    eax,0x0
c001a0dd:	eb 09                	jmp    c001a0e8 <FAT::unlink(char const*)+0x78>
c001a0df:	90                   	nop
c001a0e0:	b8 01 00 00 00       	mov    eax,0x1
c001a0e5:	8d 76 00             	lea    esi,[esi+0x0]
c001a0e8:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a0ee:	c3                   	ret    
c001a0ef:	90                   	nop

c001a0f0 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001a0f0:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a0f6:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001a0fd:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001a104:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001a108:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a10c:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001a114:	75 0a                	jne    c001a120 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001a116:	b8 04 00 00 00       	mov    eax,0x4
c001a11b:	e9 7c 01 00 00       	jmp    c001a29c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c001a120:	83 ec 08             	sub    esp,0x8
c001a123:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a12a:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a12e:	50                   	push   eax
c001a12f:	e8 0c 65 fe ff       	call   c0000640 <strcpy>
c001a134:	83 c4 10             	add    esp,0x10
c001a137:	83 ec 08             	sub    esp,0x8
c001a13a:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a13e:	50                   	push   eax
c001a13f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a146:	e8 c9 fb ff ff       	call   c0019d14 <FAT::fixFilepath(char*)>
c001a14b:	83 c4 10             	add    esp,0x10
c001a14e:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001a156:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001a15e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a163:	83 e0 01             	and    eax,0x1
c001a166:	74 14                	je     c001a17c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x8c>
c001a168:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a16f:	83 c8 01             	or     eax,0x1
c001a172:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a179:	8d 76 00             	lea    esi,[esi+0x0]
c001a17c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a181:	83 e0 02             	and    eax,0x2
c001a184:	74 12                	je     c001a198 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c001a186:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a18d:	83 c8 20             	or     eax,0x20
c001a190:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a197:	90                   	nop
c001a198:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a19d:	83 e0 04             	and    eax,0x4
c001a1a0:	74 12                	je     c001a1b4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc4>
c001a1a2:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a1a9:	83 c8 04             	or     eax,0x4
c001a1ac:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a1b3:	90                   	nop
c001a1b4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a1b9:	83 e0 08             	and    eax,0x8
c001a1bc:	74 12                	je     c001a1d0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe0>
c001a1be:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a1c5:	83 c8 02             	or     eax,0x2
c001a1c8:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a1cf:	90                   	nop
c001a1d0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a1d5:	83 e0 01             	and    eax,0x1
c001a1d8:	74 12                	je     c001a1ec <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c001a1da:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a1e1:	83 c8 01             	or     eax,0x1
c001a1e4:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a1eb:	90                   	nop
c001a1ec:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a1f1:	83 e0 02             	and    eax,0x2
c001a1f4:	74 12                	je     c001a208 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x118>
c001a1f6:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a1fd:	83 c8 20             	or     eax,0x20
c001a200:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a207:	90                   	nop
c001a208:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a20d:	83 e0 04             	and    eax,0x4
c001a210:	74 12                	je     c001a224 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x134>
c001a212:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a219:	83 c8 04             	or     eax,0x4
c001a21c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a223:	90                   	nop
c001a224:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a229:	83 e0 08             	and    eax,0x8
c001a22c:	74 12                	je     c001a240 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x150>
c001a22e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a235:	83 c8 02             	or     eax,0x2
c001a238:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a23f:	90                   	nop
c001a240:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c001a247:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a24e:	09 d0                	or     eax,edx
c001a250:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a257:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001a25f:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001a267:	83 ec 04             	sub    esp,0x4
c001a26a:	52                   	push   edx
c001a26b:	50                   	push   eax
c001a26c:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a270:	50                   	push   eax
c001a271:	e8 f9 ab fe ff       	call   c0004e6f <f_chmod>
c001a276:	83 c4 10             	add    esp,0x10
c001a279:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001a280:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001a287:	85 c0                	test   eax,eax
c001a289:	75 09                	jne    c001a294 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a4>
c001a28b:	b8 00 00 00 00       	mov    eax,0x0
c001a290:	eb 0a                	jmp    c001a29c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c001a292:	66 90                	xchg   ax,ax
c001a294:	b8 01 00 00 00       	mov    eax,0x1
c001a299:	8d 76 00             	lea    esi,[esi+0x0]
c001a29c:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a2a2:	c3                   	ret    
c001a2a3:	90                   	nop

c001a2a4 <FAT::rename(char const*, char const*)>:
c001a2a4:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001a2aa:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001a2b2:	74 0c                	je     c001a2c0 <FAT::rename(char const*, char const*)+0x1c>
c001a2b4:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001a2bc:	75 0e                	jne    c001a2cc <FAT::rename(char const*, char const*)+0x28>
c001a2be:	66 90                	xchg   ax,ax
c001a2c0:	b8 04 00 00 00       	mov    eax,0x4
c001a2c5:	e9 9e 00 00 00       	jmp    c001a368 <FAT::rename(char const*, char const*)+0xc4>
c001a2ca:	66 90                	xchg   ax,ax
c001a2cc:	83 ec 08             	sub    esp,0x8
c001a2cf:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a2d6:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a2dd:	50                   	push   eax
c001a2de:	e8 5d 63 fe ff       	call   c0000640 <strcpy>
c001a2e3:	83 c4 10             	add    esp,0x10
c001a2e6:	83 ec 08             	sub    esp,0x8
c001a2e9:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001a2f0:	50                   	push   eax
c001a2f1:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a2f8:	e8 17 fa ff ff       	call   c0019d14 <FAT::fixFilepath(char*)>
c001a2fd:	83 c4 10             	add    esp,0x10
c001a300:	83 ec 08             	sub    esp,0x8
c001a303:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001a30a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a30e:	50                   	push   eax
c001a30f:	e8 2c 63 fe ff       	call   c0000640 <strcpy>
c001a314:	83 c4 10             	add    esp,0x10
c001a317:	83 ec 08             	sub    esp,0x8
c001a31a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a31e:	50                   	push   eax
c001a31f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a326:	e8 e9 f9 ff ff       	call   c0019d14 <FAT::fixFilepath(char*)>
c001a32b:	83 c4 10             	add    esp,0x10
c001a32e:	83 ec 08             	sub    esp,0x8
c001a331:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a335:	50                   	push   eax
c001a336:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a33d:	50                   	push   eax
c001a33e:	e8 74 a9 fe ff       	call   c0004cb7 <f_rename>
c001a343:	83 c4 10             	add    esp,0x10
c001a346:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001a34d:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001a354:	85 c0                	test   eax,eax
c001a356:	75 08                	jne    c001a360 <FAT::rename(char const*, char const*)+0xbc>
c001a358:	b8 00 00 00 00       	mov    eax,0x0
c001a35d:	eb 09                	jmp    c001a368 <FAT::rename(char const*, char const*)+0xc4>
c001a35f:	90                   	nop
c001a360:	b8 01 00 00 00       	mov    eax,0x1
c001a365:	8d 76 00             	lea    esi,[esi+0x0]
c001a368:	81 c4 1c 02 00 00    	add    esp,0x21c
c001a36e:	c3                   	ret    
c001a36f:	90                   	nop

c001a370 <FAT::mkdir(char const*)>:
c001a370:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a376:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a37e:	75 08                	jne    c001a388 <FAT::mkdir(char const*)+0x18>
c001a380:	b8 04 00 00 00       	mov    eax,0x4
c001a385:	eb 61                	jmp    c001a3e8 <FAT::mkdir(char const*)+0x78>
c001a387:	90                   	nop
c001a388:	83 ec 08             	sub    esp,0x8
c001a38b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a392:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a396:	50                   	push   eax
c001a397:	e8 a4 62 fe ff       	call   c0000640 <strcpy>
c001a39c:	83 c4 10             	add    esp,0x10
c001a39f:	83 ec 08             	sub    esp,0x8
c001a3a2:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a3a6:	50                   	push   eax
c001a3a7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a3ae:	e8 61 f9 ff ff       	call   c0019d14 <FAT::fixFilepath(char*)>
c001a3b3:	83 c4 10             	add    esp,0x10
c001a3b6:	83 ec 0c             	sub    esp,0xc
c001a3b9:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a3bd:	50                   	push   eax
c001a3be:	e8 59 a7 fe ff       	call   c0004b1c <f_mkdir>
c001a3c3:	83 c4 10             	add    esp,0x10
c001a3c6:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a3cd:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001a3d4:	85 c0                	test   eax,eax
c001a3d6:	75 08                	jne    c001a3e0 <FAT::mkdir(char const*)+0x70>
c001a3d8:	b8 00 00 00 00       	mov    eax,0x0
c001a3dd:	eb 09                	jmp    c001a3e8 <FAT::mkdir(char const*)+0x78>
c001a3df:	90                   	nop
c001a3e0:	b8 01 00 00 00       	mov    eax,0x1
c001a3e5:	8d 76 00             	lea    esi,[esi+0x0]
c001a3e8:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a3ee:	c3                   	ret    
c001a3ef:	90                   	nop

c001a3f0 <FAT::exists(char const*)>:
c001a3f0:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001a3f6:	83 ec 08             	sub    esp,0x8
c001a3f9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a400:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a404:	50                   	push   eax
c001a405:	e8 36 62 fe ff       	call   c0000640 <strcpy>
c001a40a:	83 c4 10             	add    esp,0x10
c001a40d:	83 ec 08             	sub    esp,0x8
c001a410:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a414:	50                   	push   eax
c001a415:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a41c:	e8 f3 f8 ff ff       	call   c0019d14 <FAT::fixFilepath(char*)>
c001a421:	83 c4 10             	add    esp,0x10
c001a424:	83 ec 08             	sub    esp,0x8
c001a427:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001a42e:	50                   	push   eax
c001a42f:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a433:	50                   	push   eax
c001a434:	e8 4f a3 fe ff       	call   c0004788 <f_stat>
c001a439:	83 c4 10             	add    esp,0x10
c001a43c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001a443:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001a44a:	85 c0                	test   eax,eax
c001a44c:	75 06                	jne    c001a454 <FAT::exists(char const*)+0x64>
c001a44e:	b0 01                	mov    al,0x1
c001a450:	eb 06                	jmp    c001a458 <FAT::exists(char const*)+0x68>
c001a452:	66 90                	xchg   ax,ax
c001a454:	b0 00                	mov    al,0x0
c001a456:	66 90                	xchg   ax,ax
c001a458:	81 c4 2c 02 00 00    	add    esp,0x22c
c001a45e:	c3                   	ret    
c001a45f:	90                   	nop

c001a460 <isoReadDiscSectorHelper>:
c001a460:	83 ec 2c             	sub    esp,0x2c
c001a463:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a467:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a46b:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001a470:	83 e8 41             	sub    eax,0x41
c001a473:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c001a47a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a47e:	ba 00 00 00 00       	mov    edx,0x0
c001a483:	83 ec 0c             	sub    esp,0xc
c001a486:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a48a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a48e:	52                   	push   edx
c001a48f:	50                   	push   eax
c001a490:	51                   	push   ecx
c001a491:	e8 a2 39 ff ff       	call   c000de38 <LogicalDisk::read(unsigned long long, int, void*)>
c001a496:	83 c4 20             	add    esp,0x20
c001a499:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a49d:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001a4a2:	74 0c                	je     c001a4b0 <isoReadDiscSectorHelper+0x50>
c001a4a4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a4a8:	c1 e0 0b             	shl    eax,0xb
c001a4ab:	eb 0b                	jmp    c001a4b8 <isoReadDiscSectorHelper+0x58>
c001a4ad:	8d 76 00             	lea    esi,[esi+0x0]
c001a4b0:	b8 00 00 00 00       	mov    eax,0x0
c001a4b5:	8d 76 00             	lea    esi,[esi+0x0]
c001a4b8:	83 c4 2c             	add    esp,0x2c
c001a4bb:	c3                   	ret    

c001a4bc <iso_kprintf>:
c001a4bc:	83 ec 0c             	sub    esp,0xc
c001a4bf:	83 ec 08             	sub    esp,0x8
c001a4c2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a4c6:	68 5a 2c 02 c0       	push   0xc0022c5a
c001a4cb:	e8 75 04 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a4d0:	83 c4 10             	add    esp,0x10
c001a4d3:	90                   	nop
c001a4d4:	83 c4 0c             	add    esp,0xc
c001a4d7:	c3                   	ret    

c001a4d8 <iso_kprintfd>:
c001a4d8:	83 ec 0c             	sub    esp,0xc
c001a4db:	83 ec 08             	sub    esp,0x8
c001a4de:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a4e2:	68 9a 13 02 c0       	push   0xc002139a
c001a4e7:	e8 59 04 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a4ec:	83 c4 10             	add    esp,0x10
c001a4ef:	90                   	nop
c001a4f0:	83 c4 0c             	add    esp,0xc
c001a4f3:	c3                   	ret    

c001a4f4 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001a4f4:	b8 08 00 00 00       	mov    eax,0x8
c001a4f9:	c3                   	ret    

c001a4fa <ISO9660::truncate(void*, unsigned long long)>:
c001a4fa:	b8 01 00 00 00       	mov    eax,0x1
c001a4ff:	c3                   	ret    

c001a500 <ISO9660::getName()>:
c001a500:	b8 10 2f 02 c0       	mov    eax,0xc0022f10
c001a505:	c3                   	ret    

c001a506 <ISO9660::closeDir(void*)>:
c001a506:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a50a:	8b 00                	mov    eax,DWORD PTR [eax]
c001a50c:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001a50f:	90                   	nop

c001a510 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001a510:	b8 01 00 00 00       	mov    eax,0x1
c001a515:	c3                   	ret    

c001a516 <ISO9660::unlink(char const*)>:
c001a516:	b8 01 00 00 00       	mov    eax,0x1
c001a51b:	c3                   	ret    

c001a51c <ISO9660::write(void*, unsigned long, void*, int*)>:
c001a51c:	b8 03 00 00 00       	mov    eax,0x3
c001a521:	c3                   	ret    

c001a522 <ISO9660::rename(char const*, char const*)>:
c001a522:	b8 01 00 00 00       	mov    eax,0x1
c001a527:	c3                   	ret    

c001a528 <ISO9660::mkdir(char const*)>:
c001a528:	b8 01 00 00 00       	mov    eax,0x1
c001a52d:	c3                   	ret    

c001a52e <ISO9660::~ISO9660()>:
c001a52e:	83 ec 0c             	sub    esp,0xc
c001a531:	ba 50 30 02 c0       	mov    edx,0xc0023050
c001a536:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a53a:	89 10                	mov    DWORD PTR [eax],edx
c001a53c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a540:	83 ec 0c             	sub    esp,0xc
c001a543:	50                   	push   eax
c001a544:	e8 15 13 ff ff       	call   c000b85e <Filesystem::~Filesystem()>
c001a549:	83 c4 10             	add    esp,0x10
c001a54c:	90                   	nop
c001a54d:	83 c4 0c             	add    esp,0xc
c001a550:	c3                   	ret    
c001a551:	90                   	nop

c001a552 <ISO9660::~ISO9660()>:
c001a552:	83 ec 0c             	sub    esp,0xc
c001a555:	83 ec 0c             	sub    esp,0xc
c001a558:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a55c:	e8 cd ff ff ff       	call   c001a52e <ISO9660::~ISO9660()>
c001a561:	83 c4 10             	add    esp,0x10
c001a564:	83 ec 08             	sub    esp,0x8
c001a567:	6a 08                	push   0x8
c001a569:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a56d:	e8 a6 02 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001a572:	83 c4 10             	add    esp,0x10
c001a575:	83 c4 0c             	add    esp,0xc
c001a578:	c3                   	ret    
c001a579:	90                   	nop

c001a57a <ISO9660::exists(char const*)>:
c001a57a:	83 ec 18             	sub    esp,0x18
c001a57d:	68 2b 2f 02 c0       	push   0xc0022f2b
c001a582:	e8 28 71 ff ff       	call   c00116af <KePanic(char const*)>
c001a587:	31 c0                	xor    eax,eax
c001a589:	83 c4 1c             	add    esp,0x1c
c001a58c:	c3                   	ret    
c001a58d:	90                   	nop

c001a58e <ISO9660::open(char const*, void**, FileOpenMode)>:
c001a58e:	56                   	push   esi
c001a58f:	53                   	push   ebx
c001a590:	53                   	push   ebx
c001a591:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a595:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a599:	85 db                	test   ebx,ebx
c001a59b:	0f 84 ca 00 00 00    	je     c001a66b <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001a5a1:	85 f6                	test   esi,esi
c001a5a3:	0f 84 c2 00 00 00    	je     c001a66b <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001a5a9:	b8 03 00 00 00       	mov    eax,0x3
c001a5ae:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001a5b3:	0f 85 b7 00 00 00    	jne    c001a670 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a5b9:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a5bb:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a5c2:	38 0d 80 c8 02 c0    	cmp    BYTE PTR ds:0xc002c880,cl
c001a5c8:	74 1b                	je     c001a5e5 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001a5ca:	85 c0                	test   eax,eax
c001a5cc:	74 10                	je     c001a5de <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001a5ce:	83 ec 0c             	sub    esp,0xc
c001a5d1:	68 49 2f 02 c0       	push   0xc0022f49
c001a5d6:	e8 d4 70 ff ff       	call   c00116af <KePanic(char const*)>
c001a5db:	83 c4 10             	add    esp,0x10
c001a5de:	8a 03                	mov    al,BYTE PTR [ebx]
c001a5e0:	a2 80 c8 02 c0       	mov    ds:0xc002c880,al
c001a5e5:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a5e8:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a5ef:	85 c0                	test   eax,eax
c001a5f1:	74 09                	je     c001a5fc <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001a5f3:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a5fa:	74 48                	je     c001a644 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001a5fc:	83 ec 0c             	sub    esp,0xc
c001a5ff:	68 59 2f 02 c0       	push   0xc0022f59
c001a604:	e8 3c 03 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a609:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a60c:	83 c4 10             	add    esp,0x10
c001a60f:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a616:	85 c0                	test   eax,eax
c001a618:	74 17                	je     c001a631 <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001a61a:	83 ec 0c             	sub    esp,0xc
c001a61d:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a624:	68 79 2f 02 c0       	push   0xc0022f79
c001a629:	e8 17 03 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a62e:	83 c4 10             	add    esp,0x10
c001a631:	83 ec 0c             	sub    esp,0xc
c001a634:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a63b:	50                   	push   eax
c001a63c:	e8 05 c4 fe ff       	call   c0006a46 <init_percd>
c001a641:	83 c4 10             	add    esp,0x10
c001a644:	83 c3 03             	add    ebx,0x3
c001a647:	51                   	push   ecx
c001a648:	51                   	push   ecx
c001a649:	6a 00                	push   0x0
c001a64b:	53                   	push   ebx
c001a64c:	e8 bc be fe ff       	call   c000650d <iso_open>
c001a651:	83 c4 10             	add    esp,0x10
c001a654:	89 c2                	mov    edx,eax
c001a656:	b8 01 00 00 00       	mov    eax,0x1
c001a65b:	83 fa ff             	cmp    edx,0xffffffff
c001a65e:	74 10                	je     c001a670 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a660:	83 c2 32             	add    edx,0x32
c001a663:	31 c0                	xor    eax,eax
c001a665:	01 d2                	add    edx,edx
c001a667:	89 16                	mov    DWORD PTR [esi],edx
c001a669:	eb 05                	jmp    c001a670 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a66b:	b8 04 00 00 00       	mov    eax,0x4
c001a670:	5a                   	pop    edx
c001a671:	5b                   	pop    ebx
c001a672:	5e                   	pop    esi
c001a673:	c3                   	ret    

c001a674 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001a674:	53                   	push   ebx
c001a675:	83 ec 08             	sub    esp,0x8
c001a678:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a67c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a680:	85 c0                	test   eax,eax
c001a682:	74 2d                	je     c001a6b1 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a684:	85 db                	test   ebx,ebx
c001a686:	74 29                	je     c001a6b1 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a688:	b9 02 00 00 00       	mov    ecx,0x2
c001a68d:	52                   	push   edx
c001a68e:	99                   	cdq    
c001a68f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a693:	f7 f9                	idiv   ecx
c001a695:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a699:	83 e8 32             	sub    eax,0x32
c001a69c:	50                   	push   eax
c001a69d:	e8 13 bf fe ff       	call   c00065b5 <iso_read>
c001a6a2:	83 c4 10             	add    esp,0x10
c001a6a5:	89 03                	mov    DWORD PTR [ebx],eax
c001a6a7:	09 d0                	or     eax,edx
c001a6a9:	0f 94 c0             	sete   al
c001a6ac:	0f b6 c0             	movzx  eax,al
c001a6af:	eb 05                	jmp    c001a6b6 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001a6b1:	b8 04 00 00 00       	mov    eax,0x4
c001a6b6:	83 c4 08             	add    esp,0x8
c001a6b9:	5b                   	pop    ebx
c001a6ba:	c3                   	ret    
c001a6bb:	90                   	nop

c001a6bc <ISO9660::seek(void*, unsigned long long)>:
c001a6bc:	57                   	push   edi
c001a6bd:	56                   	push   esi
c001a6be:	b8 04 00 00 00       	mov    eax,0x4
c001a6c3:	51                   	push   ecx
c001a6c4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a6c8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a6cc:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a6d0:	85 d2                	test   edx,edx
c001a6d2:	74 26                	je     c001a6fa <ISO9660::seek(void*, unsigned long long)+0x3e>
c001a6d4:	6a 00                	push   0x0
c001a6d6:	b9 02 00 00 00       	mov    ecx,0x2
c001a6db:	57                   	push   edi
c001a6dc:	89 d0                	mov    eax,edx
c001a6de:	56                   	push   esi
c001a6df:	99                   	cdq    
c001a6e0:	f7 f9                	idiv   ecx
c001a6e2:	83 e8 32             	sub    eax,0x32
c001a6e5:	50                   	push   eax
c001a6e6:	e8 e0 bf fe ff       	call   c00066cb <iso_seek>
c001a6eb:	83 c4 10             	add    esp,0x10
c001a6ee:	31 f0                	xor    eax,esi
c001a6f0:	31 fa                	xor    edx,edi
c001a6f2:	09 d0                	or     eax,edx
c001a6f4:	0f 95 c0             	setne  al
c001a6f7:	0f b6 c0             	movzx  eax,al
c001a6fa:	5a                   	pop    edx
c001a6fb:	5e                   	pop    esi
c001a6fc:	5f                   	pop    edi
c001a6fd:	c3                   	ret    

c001a6fe <ISO9660::tell(void*, unsigned long long*)>:
c001a6fe:	53                   	push   ebx
c001a6ff:	83 ec 08             	sub    esp,0x8
c001a702:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a706:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a70a:	85 c0                	test   eax,eax
c001a70c:	74 24                	je     c001a732 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a70e:	85 db                	test   ebx,ebx
c001a710:	74 20                	je     c001a732 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a712:	83 ec 0c             	sub    esp,0xc
c001a715:	b9 02 00 00 00       	mov    ecx,0x2
c001a71a:	99                   	cdq    
c001a71b:	f7 f9                	idiv   ecx
c001a71d:	83 e8 32             	sub    eax,0x32
c001a720:	50                   	push   eax
c001a721:	e8 29 c0 fe ff       	call   c000674f <iso_tell>
c001a726:	83 c4 10             	add    esp,0x10
c001a729:	89 03                	mov    DWORD PTR [ebx],eax
c001a72b:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001a72e:	31 c0                	xor    eax,eax
c001a730:	eb 05                	jmp    c001a737 <ISO9660::tell(void*, unsigned long long*)+0x39>
c001a732:	b8 04 00 00 00       	mov    eax,0x4
c001a737:	83 c4 08             	add    esp,0x8
c001a73a:	5b                   	pop    ebx
c001a73b:	c3                   	ret    

c001a73c <ISO9660::stat(void*, unsigned long long*)>:
c001a73c:	53                   	push   ebx
c001a73d:	83 ec 14             	sub    esp,0x14
c001a740:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001a744:	68 9d 2f 02 c0       	push   0xc0022f9d
c001a749:	e8 f7 01 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a74e:	83 c4 10             	add    esp,0x10
c001a751:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a756:	74 2c                	je     c001a784 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a758:	85 db                	test   ebx,ebx
c001a75a:	74 28                	je     c001a784 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a75c:	83 ec 0c             	sub    esp,0xc
c001a75f:	b9 02 00 00 00       	mov    ecx,0x2
c001a764:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a768:	99                   	cdq    
c001a769:	f7 f9                	idiv   ecx
c001a76b:	83 e8 32             	sub    eax,0x32
c001a76e:	50                   	push   eax
c001a76f:	e8 0c c0 fe ff       	call   c0006780 <iso_total>
c001a774:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a77b:	89 03                	mov    DWORD PTR [ebx],eax
c001a77d:	83 c4 10             	add    esp,0x10
c001a780:	31 c0                	xor    eax,eax
c001a782:	eb 05                	jmp    c001a789 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001a784:	b8 04 00 00 00       	mov    eax,0x4
c001a789:	83 c4 08             	add    esp,0x8
c001a78c:	5b                   	pop    ebx
c001a78d:	c3                   	ret    

c001a78e <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001a78e:	55                   	push   ebp
c001a78f:	57                   	push   edi
c001a790:	56                   	push   esi
c001a791:	53                   	push   ebx
c001a792:	83 ec 18             	sub    esp,0x18
c001a795:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a799:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001a79d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a7a1:	68 a5 2f 02 c0       	push   0xc0022fa5
c001a7a6:	e8 9a 01 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a7ab:	83 c4 10             	add    esp,0x10
c001a7ae:	85 ff                	test   edi,edi
c001a7b0:	0f 94 c0             	sete   al
c001a7b3:	85 f6                	test   esi,esi
c001a7b5:	0f 94 c2             	sete   dl
c001a7b8:	09 d0                	or     eax,edx
c001a7ba:	a8 01                	test   al,0x1
c001a7bc:	0f 85 dd 00 00 00    	jne    c001a89f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a7c2:	85 db                	test   ebx,ebx
c001a7c4:	0f 84 d5 00 00 00    	je     c001a89f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a7ca:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a7cd:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001a7d3:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a7da:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a7e1:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a7e3:	38 0d 80 c8 02 c0    	cmp    BYTE PTR ds:0xc002c880,cl
c001a7e9:	74 1b                	je     c001a806 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001a7eb:	85 c0                	test   eax,eax
c001a7ed:	74 10                	je     c001a7ff <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001a7ef:	83 ec 0c             	sub    esp,0xc
c001a7f2:	68 49 2f 02 c0       	push   0xc0022f49
c001a7f7:	e8 b3 6e ff ff       	call   c00116af <KePanic(char const*)>
c001a7fc:	83 c4 10             	add    esp,0x10
c001a7ff:	8a 03                	mov    al,BYTE PTR [ebx]
c001a801:	a2 80 c8 02 c0       	mov    ds:0xc002c880,al
c001a806:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a809:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a810:	85 c0                	test   eax,eax
c001a812:	74 09                	je     c001a81d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001a814:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a81b:	74 51                	je     c001a86e <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001a81d:	83 ec 0c             	sub    esp,0xc
c001a820:	68 ad 2f 02 c0       	push   0xc0022fad
c001a825:	e8 1b 01 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a82a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a82d:	83 c4 10             	add    esp,0x10
c001a830:	83 3c 85 7c b7 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd4884],0x0
c001a838:	74 21                	je     c001a85b <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001a83a:	83 ec 0c             	sub    esp,0xc
c001a83d:	68 cd 2f 02 c0       	push   0xc0022fcd
c001a842:	e8 fe 00 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a847:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a84a:	83 c4 10             	add    esp,0x10
c001a84d:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a854:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a85b:	83 ec 0c             	sub    esp,0xc
c001a85e:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a865:	50                   	push   eax
c001a866:	e8 db c1 fe ff       	call   c0006a46 <init_percd>
c001a86b:	83 c4 10             	add    esp,0x10
c001a86e:	83 c3 03             	add    ebx,0x3
c001a871:	52                   	push   edx
c001a872:	52                   	push   edx
c001a873:	6a 00                	push   0x0
c001a875:	53                   	push   ebx
c001a876:	e8 92 bc fe ff       	call   c000650d <iso_open>
c001a87b:	83 c4 10             	add    esp,0x10
c001a87e:	89 c5                	mov    ebp,eax
c001a880:	83 f8 ff             	cmp    eax,0xffffffff
c001a883:	75 21                	jne    c001a8a6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001a885:	50                   	push   eax
c001a886:	50                   	push   eax
c001a887:	6a 01                	push   0x1
c001a889:	53                   	push   ebx
c001a88a:	e8 7e bc fe ff       	call   c000650d <iso_open>
c001a88f:	83 c4 10             	add    esp,0x10
c001a892:	ba 02 00 00 00       	mov    edx,0x2
c001a897:	40                   	inc    eax
c001a898:	74 2b                	je     c001a8c5 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a89a:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001a89d:	eb 24                	jmp    c001a8c3 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001a89f:	ba 04 00 00 00       	mov    edx,0x4
c001a8a4:	eb 1f                	jmp    c001a8c5 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a8a6:	83 ec 0c             	sub    esp,0xc
c001a8a9:	50                   	push   eax
c001a8aa:	e8 d1 be fe ff       	call   c0006780 <iso_total>
c001a8af:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a8b6:	89 07                	mov    DWORD PTR [edi],eax
c001a8b8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a8bb:	e8 d7 bc fe ff       	call   c0006597 <iso_close>
c001a8c0:	83 c4 10             	add    esp,0x10
c001a8c3:	31 d2                	xor    edx,edx
c001a8c5:	83 c4 0c             	add    esp,0xc
c001a8c8:	89 d0                	mov    eax,edx
c001a8ca:	5b                   	pop    ebx
c001a8cb:	5e                   	pop    esi
c001a8cc:	5f                   	pop    edi
c001a8cd:	5d                   	pop    ebp
c001a8ce:	c3                   	ret    
c001a8cf:	90                   	nop

c001a8d0 <ISO9660::close(void*)>:
c001a8d0:	83 ec 0c             	sub    esp,0xc
c001a8d3:	b8 04 00 00 00       	mov    eax,0x4
c001a8d8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a8dc:	85 d2                	test   edx,edx
c001a8de:	74 1b                	je     c001a8fb <ISO9660::close(void*)+0x2b>
c001a8e0:	83 ec 0c             	sub    esp,0xc
c001a8e3:	b9 02 00 00 00       	mov    ecx,0x2
c001a8e8:	89 d0                	mov    eax,edx
c001a8ea:	99                   	cdq    
c001a8eb:	f7 f9                	idiv   ecx
c001a8ed:	83 e8 32             	sub    eax,0x32
c001a8f0:	50                   	push   eax
c001a8f1:	e8 a1 bc fe ff       	call   c0006597 <iso_close>
c001a8f6:	83 c4 10             	add    esp,0x10
c001a8f9:	31 c0                	xor    eax,eax
c001a8fb:	83 c4 0c             	add    esp,0xc
c001a8fe:	c3                   	ret    
c001a8ff:	90                   	nop

c001a900 <ISO9660::openDir(char const*, void**)>:
c001a900:	56                   	push   esi
c001a901:	53                   	push   ebx
c001a902:	50                   	push   eax
c001a903:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a907:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a90b:	85 db                	test   ebx,ebx
c001a90d:	0f 84 bd 00 00 00    	je     c001a9d0 <ISO9660::openDir(char const*, void**)+0xd0>
c001a913:	85 f6                	test   esi,esi
c001a915:	0f 84 b5 00 00 00    	je     c001a9d0 <ISO9660::openDir(char const*, void**)+0xd0>
c001a91b:	8a 13                	mov    dl,BYTE PTR [ebx]
c001a91d:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a924:	38 15 80 c8 02 c0    	cmp    BYTE PTR ds:0xc002c880,dl
c001a92a:	74 1b                	je     c001a947 <ISO9660::openDir(char const*, void**)+0x47>
c001a92c:	85 c0                	test   eax,eax
c001a92e:	74 10                	je     c001a940 <ISO9660::openDir(char const*, void**)+0x40>
c001a930:	83 ec 0c             	sub    esp,0xc
c001a933:	68 49 2f 02 c0       	push   0xc0022f49
c001a938:	e8 72 6d ff ff       	call   c00116af <KePanic(char const*)>
c001a93d:	83 c4 10             	add    esp,0x10
c001a940:	8a 03                	mov    al,BYTE PTR [ebx]
c001a942:	a2 80 c8 02 c0       	mov    ds:0xc002c880,al
c001a947:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a94a:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a951:	85 c0                	test   eax,eax
c001a953:	74 10                	je     c001a965 <ISO9660::openDir(char const*, void**)+0x65>
c001a955:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a95c:	74 1a                	je     c001a978 <ISO9660::openDir(char const*, void**)+0x78>
c001a95e:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a965:	83 ec 0c             	sub    esp,0xc
c001a968:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a96f:	50                   	push   eax
c001a970:	e8 d1 c0 fe ff       	call   c0006a46 <init_percd>
c001a975:	83 c4 10             	add    esp,0x10
c001a978:	83 c3 03             	add    ebx,0x3
c001a97b:	50                   	push   eax
c001a97c:	50                   	push   eax
c001a97d:	6a 01                	push   0x1
c001a97f:	53                   	push   ebx
c001a980:	e8 88 bb fe ff       	call   c000650d <iso_open>
c001a985:	83 c4 10             	add    esp,0x10
c001a988:	89 c3                	mov    ebx,eax
c001a98a:	83 f8 ff             	cmp    eax,0xffffffff
c001a98d:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001a992:	75 1c                	jne    c001a9b0 <ISO9660::openDir(char const*, void**)+0xb0>
c001a994:	53                   	push   ebx
c001a995:	53                   	push   ebx
c001a996:	68 f1 2f 02 c0       	push   0xc0022ff1
c001a99b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a9a1:	e8 00 e1 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001a9a6:	83 c4 10             	add    esp,0x10
c001a9a9:	b8 01 00 00 00       	mov    eax,0x1
c001a9ae:	eb 25                	jmp    c001a9d5 <ISO9660::openDir(char const*, void**)+0xd5>
c001a9b0:	01 db                	add    ebx,ebx
c001a9b2:	51                   	push   ecx
c001a9b3:	83 c3 65             	add    ebx,0x65
c001a9b6:	51                   	push   ecx
c001a9b7:	68 04 30 02 c0       	push   0xc0023004
c001a9bc:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a9c2:	e8 df e0 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001a9c7:	89 1e                	mov    DWORD PTR [esi],ebx
c001a9c9:	83 c4 10             	add    esp,0x10
c001a9cc:	31 c0                	xor    eax,eax
c001a9ce:	eb 05                	jmp    c001a9d5 <ISO9660::openDir(char const*, void**)+0xd5>
c001a9d0:	b8 04 00 00 00       	mov    eax,0x4
c001a9d5:	5a                   	pop    edx
c001a9d6:	5b                   	pop    ebx
c001a9d7:	5e                   	pop    esi
c001a9d8:	c3                   	ret    
c001a9d9:	90                   	nop

c001a9da <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001a9da:	55                   	push   ebp
c001a9db:	57                   	push   edi
c001a9dc:	56                   	push   esi
c001a9dd:	53                   	push   ebx
c001a9de:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a9e4:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001a9eb:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001a9f2:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001a9fa:	0f 84 e7 00 00 00    	je     c001aae7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001aa00:	85 db                	test   ebx,ebx
c001aa02:	0f 84 df 00 00 00    	je     c001aae7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001aa08:	83 ec 0c             	sub    esp,0xc
c001aa0b:	68 17 30 02 c0       	push   0xc0023017
c001aa10:	e8 30 ff fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001aa15:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001aa1c:	b9 02 00 00 00       	mov    ecx,0x2
c001aa21:	99                   	cdq    
c001aa22:	f7 f9                	idiv   ecx
c001aa24:	83 e8 32             	sub    eax,0x32
c001aa27:	89 04 24             	mov    DWORD PTR [esp],eax
c001aa2a:	e8 a3 bd fe ff       	call   c00067d2 <iso_readdir>
c001aa2f:	83 c4 10             	add    esp,0x10
c001aa32:	89 c6                	mov    esi,eax
c001aa34:	85 c0                	test   eax,eax
c001aa36:	75 37                	jne    c001aa6f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x95>
c001aa38:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001aa3d:	56                   	push   esi
c001aa3e:	56                   	push   esi
c001aa3f:	68 22 30 02 c0       	push   0xc0023022
c001aa44:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001aa4a:	e8 57 e0 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001aa4f:	83 c4 0c             	add    esp,0xc
c001aa52:	68 10 01 00 00       	push   0x110
c001aa57:	6a 00                	push   0x0
c001aa59:	57                   	push   edi
c001aa5a:	e8 91 5a fe ff       	call   c00004f0 <memset>
c001aa5f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001aa65:	83 c4 10             	add    esp,0x10
c001aa68:	b8 01 00 00 00       	mov    eax,0x1
c001aa6d:	eb 7d                	jmp    c001aaec <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001aa6f:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001aa75:	8d 68 08             	lea    ebp,[eax+0x8]
c001aa78:	83 ec 0c             	sub    esp,0xc
c001aa7b:	55                   	push   ebp
c001aa7c:	e8 ef 5a fe ff       	call   c0000570 <strlen>
c001aa81:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001aa89:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001aa8d:	83 c4 10             	add    esp,0x10
c001aa90:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c001aa94:	75 0a                	jne    c001aaa0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001aa96:	b8 02 00 00 00       	mov    eax,0x2
c001aa9b:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c001aa9e:	74 05                	je     c001aaa5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xcb>
c001aaa0:	b8 01 00 00 00       	mov    eax,0x1
c001aaa5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001aaa9:	50                   	push   eax
c001aaaa:	50                   	push   eax
c001aaab:	55                   	push   ebp
c001aaac:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001aab0:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001aab4:	50                   	push   eax
c001aab5:	e8 86 5b fe ff       	call   c0000640 <strcpy>
c001aaba:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001aac1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001aac3:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c001aac9:	5a                   	pop    edx
c001aaca:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001aacf:	59                   	pop    ecx
c001aad0:	68 35 30 02 c0       	push   0xc0023035
c001aad5:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001aadb:	e8 c6 df fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001aae0:	83 c4 10             	add    esp,0x10
c001aae3:	31 c0                	xor    eax,eax
c001aae5:	eb 05                	jmp    c001aaec <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001aae7:	b8 04 00 00 00       	mov    eax,0x4
c001aaec:	81 c4 1c 01 00 00    	add    esp,0x11c
c001aaf2:	5b                   	pop    ebx
c001aaf3:	5e                   	pop    esi
c001aaf4:	5f                   	pop    edi
c001aaf5:	5d                   	pop    ebp
c001aaf6:	c3                   	ret    

c001aaf7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001aaf7:	57                   	push   edi
c001aaf8:	56                   	push   esi
c001aaf9:	53                   	push   ebx
c001aafa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001aafe:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ab02:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001ab06:	39 35 84 c8 02 c0    	cmp    DWORD PTR ds:0xc002c884,esi
c001ab0c:	0f be cb             	movsx  ecx,bl
c001ab0f:	75 0b                	jne    c001ab1c <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001ab11:	0f be 05 60 42 02 c0 	movsx  eax,BYTE PTR ds:0xc0024260
c001ab18:	39 c8                	cmp    eax,ecx
c001ab1a:	74 47                	je     c001ab63 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001ab1c:	83 ec 0c             	sub    esp,0xc
c001ab1f:	31 d2                	xor    edx,edx
c001ab21:	68 a0 c8 02 c0       	push   0xc002c8a0
c001ab26:	6a 01                	push   0x1
c001ab28:	52                   	push   edx
c001ab29:	56                   	push   esi
c001ab2a:	ff 34 8d 7c b7 02 c0 	push   DWORD PTR [ecx*4-0x3ffd4884]
c001ab31:	e8 02 33 ff ff       	call   c000de38 <LogicalDisk::read(unsigned long long, int, void*)>
c001ab36:	83 c4 20             	add    esp,0x20
c001ab39:	85 c0                	test   eax,eax
c001ab3b:	75 0e                	jne    c001ab4b <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001ab3d:	89 35 84 c8 02 c0    	mov    DWORD PTR ds:0xc002c884,esi
c001ab43:	88 1d 60 42 02 c0    	mov    BYTE PTR ds:0xc0024260,bl
c001ab49:	eb 18                	jmp    c001ab63 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001ab4b:	50                   	push   eax
c001ab4c:	68 00 08 00 00       	push   0x800
c001ab51:	6a 00                	push   0x0
c001ab53:	57                   	push   edi
c001ab54:	e8 97 59 fe ff       	call   c00004f0 <memset>
c001ab59:	83 c4 10             	add    esp,0x10
c001ab5c:	b8 01 00 00 00       	mov    eax,0x1
c001ab61:	eb 0e                	jmp    c001ab71 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001ab63:	be a0 c8 02 c0       	mov    esi,0xc002c8a0
c001ab68:	b9 00 08 00 00       	mov    ecx,0x800
c001ab6d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ab6f:	31 c0                	xor    eax,eax
c001ab71:	5b                   	pop    ebx
c001ab72:	5e                   	pop    esi
c001ab73:	5f                   	pop    edi
c001ab74:	c3                   	ret    
c001ab75:	90                   	nop

c001ab76 <ISO9660::tryMount(LogicalDisk*, int)>:
c001ab76:	53                   	push   ebx
c001ab77:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001ab7d:	c7 05 84 c8 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc002c884,0xdeadbeef
c001ab87:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001ab8e:	8d 58 41             	lea    ebx,[eax+0x41]
c001ab91:	0f be db             	movsx  ebx,bl
c001ab94:	53                   	push   ebx
c001ab95:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ab99:	50                   	push   eax
c001ab9a:	6a 10                	push   0x10
c001ab9c:	e8 56 ff ff ff       	call   c001aaf7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001aba1:	83 c4 10             	add    esp,0x10
c001aba4:	31 d2                	xor    edx,edx
c001aba6:	85 c0                	test   eax,eax
c001aba8:	75 33                	jne    c001abdd <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001abaa:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001abaf:	75 2c                	jne    c001abdd <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001abb1:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001abb6:	75 25                	jne    c001abdd <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001abb8:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001abbd:	75 1e                	jne    c001abdd <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001abbf:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001abc4:	75 17                	jne    c001abdd <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001abc6:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001abcb:	75 10                	jne    c001abdd <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001abcd:	83 ec 0c             	sub    esp,0xc
c001abd0:	53                   	push   ebx
c001abd1:	e8 70 be fe ff       	call   c0006a46 <init_percd>
c001abd6:	83 c4 10             	add    esp,0x10
c001abd9:	40                   	inc    eax
c001abda:	0f 95 c2             	setne  dl
c001abdd:	88 d0                	mov    al,dl
c001abdf:	81 c4 08 08 00 00    	add    esp,0x808
c001abe5:	5b                   	pop    ebx
c001abe6:	c3                   	ret    
c001abe7:	90                   	nop

c001abe8 <ISO9660::ISO9660()>:
c001abe8:	83 ec 0c             	sub    esp,0xc
c001abeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abef:	83 ec 0c             	sub    esp,0xc
c001abf2:	50                   	push   eax
c001abf3:	e8 42 0c ff ff       	call   c000b83a <Filesystem::Filesystem()>
c001abf8:	83 c4 10             	add    esp,0x10
c001abfb:	ba 50 30 02 c0       	mov    edx,0xc0023050
c001ac00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac04:	89 10                	mov    DWORD PTR [eax],edx
c001ac06:	e8 4d bf fe ff       	call   c0006b58 <fs_iso9660_init>
c001ac0b:	90                   	nop
c001ac0c:	83 c4 0c             	add    esp,0xc
c001ac0f:	c3                   	ret    

c001ac10 <SoundCard::beginPlayback()>:
c001ac10:	c7 44 24 04 b4 30 02 c0 	mov    DWORD PTR [esp+0x4],0xc00230b4
c001ac18:	e9 92 6a ff ff       	jmp    c00116af <KePanic(char const*)>
c001ac1d:	90                   	nop

c001ac1e <SoundCard::stopPlayback()>:
c001ac1e:	c7 44 24 04 b4 30 02 c0 	mov    DWORD PTR [esp+0x4],0xc00230b4
c001ac26:	e9 84 6a ff ff       	jmp    c00116af <KePanic(char const*)>
c001ac2b:	90                   	nop

c001ac2c <SoundCard::SoundCard(char const*)>:
c001ac2c:	83 ec 1c             	sub    esp,0x1c
c001ac2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac33:	83 ec 08             	sub    esp,0x8
c001ac36:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ac3a:	50                   	push   eax
c001ac3b:	e8 ae 1f ff ff       	call   c000cbee <Device::Device(char const*)>
c001ac40:	83 c4 10             	add    esp,0x10
c001ac43:	ba 00 31 02 c0       	mov    edx,0xc0023100
c001ac48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac4c:	89 10                	mov    DWORD PTR [eax],edx
c001ac4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac52:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001ac59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac5d:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001ac67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac6b:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001ac75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac79:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001ac83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac87:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001ac91:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ac99:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001ac9e:	7f 1a                	jg     c001acba <SoundCard::SoundCard(char const*)+0x8e>
c001aca0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aca4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001aca8:	83 c2 54             	add    edx,0x54
c001acab:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001acb3:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001acb8:	eb df                	jmp    c001ac99 <SoundCard::SoundCard(char const*)+0x6d>
c001acba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001acbe:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001acc5:	90                   	nop
c001acc6:	83 c4 1c             	add    esp,0x1c
c001acc9:	c3                   	ret    

c001acca <SoundCard::~SoundCard()>:
c001acca:	83 ec 0c             	sub    esp,0xc
c001accd:	ba 00 31 02 c0       	mov    edx,0xc0023100
c001acd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001acd6:	89 10                	mov    DWORD PTR [eax],edx
c001acd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001acdc:	83 ec 0c             	sub    esp,0xc
c001acdf:	50                   	push   eax
c001ace0:	e8 73 1c ff ff       	call   c000c958 <Device::~Device()>
c001ace5:	83 c4 10             	add    esp,0x10
c001ace8:	90                   	nop
c001ace9:	83 c4 0c             	add    esp,0xc
c001acec:	c3                   	ret    
c001aced:	90                   	nop

c001acee <SoundCard::~SoundCard()>:
c001acee:	83 ec 0c             	sub    esp,0xc
c001acf1:	83 ec 0c             	sub    esp,0xc
c001acf4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001acf8:	e8 cd ff ff ff       	call   c001acca <SoundCard::~SoundCard()>
c001acfd:	83 c4 10             	add    esp,0x10
c001ad00:	83 ec 08             	sub    esp,0x8
c001ad03:	68 e8 01 00 00       	push   0x1e8
c001ad08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ad0c:	e8 07 fb fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001ad11:	83 c4 10             	add    esp,0x10
c001ad14:	83 c4 0c             	add    esp,0xc
c001ad17:	c3                   	ret    

c001ad18 <SoundCard::configureRates(int, int, int)>:
c001ad18:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ad1c:	31 c0                	xor    eax,eax
c001ad1e:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001ad25:	75 20                	jne    c001ad47 <SoundCard::configureRates(int, int, int)+0x2f>
c001ad27:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ad2b:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001ad31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ad35:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001ad3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad3f:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001ad45:	b0 01                	mov    al,0x1
c001ad47:	c3                   	ret    

c001ad48 <SoundCard::getSamples16(int, short*)>:
c001ad48:	55                   	push   ebp
c001ad49:	57                   	push   edi
c001ad4a:	31 ff                	xor    edi,edi
c001ad4c:	56                   	push   esi
c001ad4d:	53                   	push   ebx
c001ad4e:	31 db                	xor    ebx,ebx
c001ad50:	83 ec 10             	sub    esp,0x10
c001ad53:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001ad57:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001ad5b:	8d 04 36             	lea    eax,[esi+esi*1]
c001ad5e:	50                   	push   eax
c001ad5f:	6a 00                	push   0x0
c001ad61:	55                   	push   ebp
c001ad62:	e8 89 57 fe ff       	call   c00004f0 <memset>
c001ad67:	83 c4 10             	add    esp,0x10
c001ad6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ad6e:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001ad75:	85 c0                	test   eax,eax
c001ad77:	74 1b                	je     c001ad94 <SoundCard::getSamples16(int, short*)+0x4c>
c001ad79:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001ad7d:	75 15                	jne    c001ad94 <SoundCard::getSamples16(int, short*)+0x4c>
c001ad7f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ad83:	55                   	push   ebp
c001ad84:	56                   	push   esi
c001ad85:	50                   	push   eax
c001ad86:	e8 f1 02 00 00       	call   c001b07c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001ad8b:	83 c4 10             	add    esp,0x10
c001ad8e:	39 c7                	cmp    edi,eax
c001ad90:	7d 02                	jge    c001ad94 <SoundCard::getSamples16(int, short*)+0x4c>
c001ad92:	89 c7                	mov    edi,eax
c001ad94:	43                   	inc    ebx
c001ad95:	83 fb 20             	cmp    ebx,0x20
c001ad98:	75 d0                	jne    c001ad6a <SoundCard::getSamples16(int, short*)+0x22>
c001ad9a:	83 c4 0c             	add    esp,0xc
c001ad9d:	89 f8                	mov    eax,edi
c001ad9f:	5b                   	pop    ebx
c001ada0:	5e                   	pop    esi
c001ada1:	5f                   	pop    edi
c001ada2:	5d                   	pop    ebp
c001ada3:	c3                   	ret    

c001ada4 <SoundCard::getSamples32(int, int*)>:
c001ada4:	55                   	push   ebp
c001ada5:	57                   	push   edi
c001ada6:	31 ff                	xor    edi,edi
c001ada8:	56                   	push   esi
c001ada9:	31 f6                	xor    esi,esi
c001adab:	53                   	push   ebx
c001adac:	83 ec 10             	sub    esp,0x10
c001adaf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001adb3:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001adb7:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001adbb:	c1 e0 02             	shl    eax,0x2
c001adbe:	50                   	push   eax
c001adbf:	6a 00                	push   0x0
c001adc1:	55                   	push   ebp
c001adc2:	e8 29 57 fe ff       	call   c00004f0 <memset>
c001adc7:	83 c4 10             	add    esp,0x10
c001adca:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001add1:	85 c0                	test   eax,eax
c001add3:	74 1b                	je     c001adf0 <SoundCard::getSamples32(int, int*)+0x4c>
c001add5:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001add9:	75 15                	jne    c001adf0 <SoundCard::getSamples32(int, int*)+0x4c>
c001addb:	53                   	push   ebx
c001addc:	55                   	push   ebp
c001addd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ade1:	50                   	push   eax
c001ade2:	e8 61 03 00 00       	call   c001b148 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001ade7:	83 c4 10             	add    esp,0x10
c001adea:	39 c6                	cmp    esi,eax
c001adec:	7d 02                	jge    c001adf0 <SoundCard::getSamples32(int, int*)+0x4c>
c001adee:	89 c6                	mov    esi,eax
c001adf0:	47                   	inc    edi
c001adf1:	83 ff 20             	cmp    edi,0x20
c001adf4:	75 d4                	jne    c001adca <SoundCard::getSamples32(int, int*)+0x26>
c001adf6:	85 f6                	test   esi,esi
c001adf8:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001adff:	75 0f                	jne    c001ae10 <SoundCard::getSamples32(int, int*)+0x6c>
c001ae01:	85 c0                	test   eax,eax
c001ae03:	74 1b                	je     c001ae20 <SoundCard::getSamples32(int, int*)+0x7c>
c001ae05:	83 ec 0c             	sub    esp,0xc
c001ae08:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ae0a:	53                   	push   ebx
c001ae0b:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001ae0e:	eb 0d                	jmp    c001ae1d <SoundCard::getSamples32(int, int*)+0x79>
c001ae10:	85 c0                	test   eax,eax
c001ae12:	75 0c                	jne    c001ae20 <SoundCard::getSamples32(int, int*)+0x7c>
c001ae14:	83 ec 0c             	sub    esp,0xc
c001ae17:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ae19:	53                   	push   ebx
c001ae1a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001ae1d:	83 c4 10             	add    esp,0x10
c001ae20:	83 c4 0c             	add    esp,0xc
c001ae23:	89 f0                	mov    eax,esi
c001ae25:	5b                   	pop    ebx
c001ae26:	5e                   	pop    esi
c001ae27:	5f                   	pop    edi
c001ae28:	5d                   	pop    ebp
c001ae29:	c3                   	ret    

c001ae2a <SoundCard::addChannel(SoundPort*)>:
c001ae2a:	83 ec 0c             	sub    esp,0xc
c001ae2d:	31 c0                	xor    eax,eax
c001ae2f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ae33:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001ae3b:	74 1b                	je     c001ae58 <SoundCard::addChannel(SoundPort*)+0x2e>
c001ae3d:	40                   	inc    eax
c001ae3e:	83 f8 20             	cmp    eax,0x20
c001ae41:	75 f0                	jne    c001ae33 <SoundCard::addChannel(SoundPort*)+0x9>
c001ae43:	83 ec 0c             	sub    esp,0xc
c001ae46:	68 d9 30 02 c0       	push   0xc00230d9
c001ae4b:	e8 5f 68 ff ff       	call   c00116af <KePanic(char const*)>
c001ae50:	83 c4 10             	add    esp,0x10
c001ae53:	83 c8 ff             	or     eax,0xffffffff
c001ae56:	eb 0b                	jmp    c001ae63 <SoundCard::addChannel(SoundPort*)+0x39>
c001ae58:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ae5c:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001ae63:	83 c4 0c             	add    esp,0xc
c001ae66:	c3                   	ret    
c001ae67:	90                   	nop

c001ae68 <SoundCard::removeChannel(int)>:
c001ae68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ae6c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ae70:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001ae7b:	c3                   	ret    

c001ae7c <SoundPort::SoundPort(int, int, int, int)>:
c001ae7c:	83 ec 0c             	sub    esp,0xc
c001ae7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae83:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001ae8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae8e:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001ae92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae96:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ae9a:	89 10                	mov    DWORD PTR [eax],edx
c001ae9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aea0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001aea4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001aea7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aeab:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001aeaf:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001aeb2:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001aeb7:	75 13                	jne    c001aecc <SoundPort::SoundPort(int, int, int, int)+0x50>
c001aeb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aebd:	8b 00                	mov    eax,DWORD PTR [eax]
c001aebf:	05 a0 0f 00 00       	add    eax,0xfa0
c001aec4:	01 c0                	add    eax,eax
c001aec6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001aeca:	66 90                	xchg   ax,ax
c001aecc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aed0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001aed4:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001aed7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aedb:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001aee2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aee6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001aee9:	c1 e0 02             	shl    eax,0x2
c001aeec:	83 ec 0c             	sub    esp,0xc
c001aeef:	50                   	push   eax
c001aef0:	e8 c1 cb fe ff       	call   c0007ab6 <malloc>
c001aef5:	83 c4 10             	add    esp,0x10
c001aef8:	89 c2                	mov    edx,eax
c001aefa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aefe:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001af01:	90                   	nop
c001af02:	83 c4 0c             	add    esp,0xc
c001af05:	c3                   	ret    
c001af06:	66 90                	xchg   ax,ax

c001af08 <SoundPort::~SoundPort()>:
c001af08:	83 ec 0c             	sub    esp,0xc
c001af0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af0f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001af12:	85 c0                	test   eax,eax
c001af14:	74 1e                	je     c001af34 <SoundPort::~SoundPort()+0x2c>
c001af16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af1a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001af1d:	83 ec 0c             	sub    esp,0xc
c001af20:	50                   	push   eax
c001af21:	e8 a0 cb fe ff       	call   c0007ac6 <free>
c001af26:	83 c4 10             	add    esp,0x10
c001af29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af2d:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001af34:	90                   	nop
c001af35:	83 c4 0c             	add    esp,0xc
c001af38:	c3                   	ret    
c001af39:	90                   	nop
c001af3a:	66 90                	xchg   ax,ax

c001af3c <SoundPort::unpause()>:
c001af3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af40:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001af44:	c3                   	ret    
c001af45:	90                   	nop
c001af46:	66 90                	xchg   ax,ax

c001af48 <SoundPort::pause()>:
c001af48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af4c:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001af50:	c3                   	ret    
c001af51:	90                   	nop
c001af52:	66 90                	xchg   ax,ax

c001af54 <SoundPort::getBufferUsed()>:
c001af54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af58:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001af5b:	c3                   	ret    

c001af5c <SoundPort::getBufferSize()>:
c001af5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af60:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001af63:	c3                   	ret    

c001af64 <SoundPort::buffer16(short*, int)>:
c001af64:	55                   	push   ebp
c001af65:	57                   	push   edi
c001af66:	56                   	push   esi
c001af67:	53                   	push   ebx
c001af68:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001af6c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001af70:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001af73:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001af76:	74 68                	je     c001afe0 <SoundPort::buffer16(short*, int)+0x7c>
c001af78:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001af7c:	85 c9                	test   ecx,ecx
c001af7e:	7e 60                	jle    c001afe0 <SoundPort::buffer16(short*, int)+0x7c>
c001af80:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001af84:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001af87:	c1 e1 0f             	shl    ecx,0xf
c001af8a:	8d 70 01             	lea    esi,[eax+0x1]
c001af8d:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001af90:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001af93:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001af96:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001af99:	74 4d                	je     c001afe8 <SoundPort::buffer16(short*, int)+0x84>
c001af9b:	31 f6                	xor    esi,esi
c001af9d:	eb 21                	jmp    c001afc0 <SoundPort::buffer16(short*, int)+0x5c>
c001af9f:	90                   	nop
c001afa0:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001afa5:	8d 79 01             	lea    edi,[ecx+0x1]
c001afa8:	c1 e3 0f             	shl    ebx,0xf
c001afab:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001afae:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001afb1:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001afb4:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001afb7:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001afba:	74 1c                	je     c001afd8 <SoundPort::buffer16(short*, int)+0x74>
c001afbc:	89 c6                	mov    esi,eax
c001afbe:	66 90                	xchg   ax,ax
c001afc0:	8d 46 01             	lea    eax,[esi+0x1]
c001afc3:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001afc7:	75 d7                	jne    c001afa0 <SoundPort::buffer16(short*, int)+0x3c>
c001afc9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001afcd:	8d 76 00             	lea    esi,[esi+0x0]
c001afd0:	5b                   	pop    ebx
c001afd1:	5e                   	pop    esi
c001afd2:	5f                   	pop    edi
c001afd3:	5d                   	pop    ebp
c001afd4:	c3                   	ret    
c001afd5:	8d 76 00             	lea    esi,[esi+0x0]
c001afd8:	5b                   	pop    ebx
c001afd9:	8d 46 02             	lea    eax,[esi+0x2]
c001afdc:	5e                   	pop    esi
c001afdd:	5f                   	pop    edi
c001afde:	5d                   	pop    ebp
c001afdf:	c3                   	ret    
c001afe0:	5b                   	pop    ebx
c001afe1:	31 c0                	xor    eax,eax
c001afe3:	5e                   	pop    esi
c001afe4:	5f                   	pop    edi
c001afe5:	5d                   	pop    ebp
c001afe6:	c3                   	ret    
c001afe7:	90                   	nop
c001afe8:	b8 01 00 00 00       	mov    eax,0x1
c001afed:	eb e1                	jmp    c001afd0 <SoundPort::buffer16(short*, int)+0x6c>
c001afef:	90                   	nop

c001aff0 <SoundPort::buffer32(int*, int)>:
c001aff0:	55                   	push   ebp
c001aff1:	57                   	push   edi
c001aff2:	56                   	push   esi
c001aff3:	53                   	push   ebx
c001aff4:	83 ec 04             	sub    esp,0x4
c001aff7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001affb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001afff:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b002:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b006:	89 04 24             	mov    DWORD PTR [esp],eax
c001b009:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b00c:	74 5a                	je     c001b068 <SoundPort::buffer32(int*, int)+0x78>
c001b00e:	85 c0                	test   eax,eax
c001b010:	7e 56                	jle    c001b068 <SoundPort::buffer32(int*, int)+0x78>
c001b012:	8d 71 01             	lea    esi,[ecx+0x1]
c001b015:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001b018:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001b01b:	8b 37                	mov    esi,DWORD PTR [edi]
c001b01d:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001b020:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b023:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b026:	74 4c                	je     c001b074 <SoundPort::buffer32(int*, int)+0x84>
c001b028:	31 f6                	xor    esi,esi
c001b02a:	eb 1c                	jmp    c001b048 <SoundPort::buffer32(int*, int)+0x58>
c001b02c:	8d 69 01             	lea    ebp,[ecx+0x1]
c001b02f:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001b032:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001b035:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001b038:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001b03c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b03f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b042:	74 18                	je     c001b05c <SoundPort::buffer32(int*, int)+0x6c>
c001b044:	89 de                	mov    esi,ebx
c001b046:	66 90                	xchg   ax,ax
c001b048:	8d 5e 01             	lea    ebx,[esi+0x1]
c001b04b:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001b04e:	75 dc                	jne    c001b02c <SoundPort::buffer32(int*, int)+0x3c>
c001b050:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b053:	90                   	nop
c001b054:	83 c4 04             	add    esp,0x4
c001b057:	5b                   	pop    ebx
c001b058:	5e                   	pop    esi
c001b059:	5f                   	pop    edi
c001b05a:	5d                   	pop    ebp
c001b05b:	c3                   	ret    
c001b05c:	83 c4 04             	add    esp,0x4
c001b05f:	8d 46 02             	lea    eax,[esi+0x2]
c001b062:	5b                   	pop    ebx
c001b063:	5e                   	pop    esi
c001b064:	5f                   	pop    edi
c001b065:	5d                   	pop    ebp
c001b066:	c3                   	ret    
c001b067:	90                   	nop
c001b068:	83 c4 04             	add    esp,0x4
c001b06b:	31 c0                	xor    eax,eax
c001b06d:	5b                   	pop    ebx
c001b06e:	5e                   	pop    esi
c001b06f:	5f                   	pop    edi
c001b070:	5d                   	pop    ebp
c001b071:	c3                   	ret    
c001b072:	66 90                	xchg   ax,ax
c001b074:	b8 01 00 00 00       	mov    eax,0x1
c001b079:	eb d9                	jmp    c001b054 <SoundPort::buffer32(int*, int)+0x64>
c001b07b:	90                   	nop

c001b07c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001b07c:	57                   	push   edi
c001b07d:	56                   	push   esi
c001b07e:	53                   	push   ebx
c001b07f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b083:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b087:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001b08d:	39 03                	cmp    DWORD PTR [ebx],eax
c001b08f:	74 13                	je     c001b0a4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001b091:	83 ec 0c             	sub    esp,0xc
c001b094:	68 2c 31 02 c0       	push   0xc002312c
c001b099:	e8 11 66 ff ff       	call   c00116af <KePanic(char const*)>
c001b09e:	83 c4 10             	add    esp,0x10
c001b0a1:	8d 76 00             	lea    esi,[esi+0x0]
c001b0a4:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001b0aa:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001b0ad:	74 11                	je     c001b0c0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001b0af:	83 ec 0c             	sub    esp,0xc
c001b0b2:	68 6b 31 02 c0       	push   0xc002316b
c001b0b7:	e8 f3 65 ff ff       	call   c00116af <KePanic(char const*)>
c001b0bc:	83 c4 10             	add    esp,0x10
c001b0bf:	90                   	nop
c001b0c0:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001b0c6:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001b0c9:	74 11                	je     c001b0dc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001b0cb:	83 ec 0c             	sub    esp,0xc
c001b0ce:	68 6b 31 02 c0       	push   0xc002316b
c001b0d3:	e8 d7 65 ff ff       	call   c00116af <KePanic(char const*)>
c001b0d8:	83 c4 10             	add    esp,0x10
c001b0db:	90                   	nop
c001b0dc:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001b0df:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c001b0e3:	7e 07                	jle    c001b0ec <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001b0e5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b0e9:	8d 76 00             	lea    esi,[esi+0x0]
c001b0ec:	85 f6                	test   esi,esi
c001b0ee:	7e 2c                	jle    c001b11c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c001b0f0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b0f4:	8d 3c 36             	lea    edi,[esi+esi*1]
c001b0f7:	31 c9                	xor    ecx,ecx
c001b0f9:	01 d7                	add    edi,edx
c001b0fb:	90                   	nop
c001b0fc:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001b0ff:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001b102:	85 c0                	test   eax,eax
c001b104:	79 06                	jns    c001b10c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001b106:	05 ff 7f 00 00       	add    eax,0x7fff
c001b10b:	90                   	nop
c001b10c:	c1 f8 0f             	sar    eax,0xf
c001b10f:	83 c1 04             	add    ecx,0x4
c001b112:	66 01 02             	add    WORD PTR [edx],ax
c001b115:	83 c2 02             	add    edx,0x2
c001b118:	39 d7                	cmp    edi,edx
c001b11a:	75 e0                	jne    c001b0fc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001b11c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001b11f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001b122:	83 ec 04             	sub    esp,0x4
c001b125:	29 f0                	sub    eax,esi
c001b127:	c1 e0 02             	shl    eax,0x2
c001b12a:	50                   	push   eax
c001b12b:	8d 04 b2             	lea    eax,[edx+esi*4]
c001b12e:	50                   	push   eax
c001b12f:	52                   	push   edx
c001b130:	e8 9b 52 fe ff       	call   c00003d0 <memmove>
c001b135:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001b138:	83 c4 10             	add    esp,0x10
c001b13b:	29 f0                	sub    eax,esi
c001b13d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001b140:	89 f0                	mov    eax,esi
c001b142:	5b                   	pop    ebx
c001b143:	5e                   	pop    esi
c001b144:	5f                   	pop    edi
c001b145:	c3                   	ret    
c001b146:	66 90                	xchg   ax,ax

c001b148 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001b148:	57                   	push   edi
c001b149:	56                   	push   esi
c001b14a:	53                   	push   ebx
c001b14b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b14f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b153:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b157:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001b15d:	39 06                	cmp    DWORD PTR [esi],eax
c001b15f:	74 13                	je     c001b174 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001b161:	83 ec 0c             	sub    esp,0xc
c001b164:	68 4c 31 02 c0       	push   0xc002314c
c001b169:	e8 41 65 ff ff       	call   c00116af <KePanic(char const*)>
c001b16e:	83 c4 10             	add    esp,0x10
c001b171:	8d 76 00             	lea    esi,[esi+0x0]
c001b174:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001b17a:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001b17d:	74 11                	je     c001b190 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001b17f:	83 ec 0c             	sub    esp,0xc
c001b182:	68 87 31 02 c0       	push   0xc0023187
c001b187:	e8 23 65 ff ff       	call   c00116af <KePanic(char const*)>
c001b18c:	83 c4 10             	add    esp,0x10
c001b18f:	90                   	nop
c001b190:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001b196:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001b199:	74 11                	je     c001b1ac <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001b19b:	83 ec 0c             	sub    esp,0xc
c001b19e:	68 87 31 02 c0       	push   0xc0023187
c001b1a3:	e8 07 65 ff ff       	call   c00116af <KePanic(char const*)>
c001b1a8:	83 c4 10             	add    esp,0x10
c001b1ab:	90                   	nop
c001b1ac:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001b1af:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001b1b3:	7e 07                	jle    c001b1bc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001b1b5:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b1b9:	8d 76 00             	lea    esi,[esi+0x0]
c001b1bc:	85 ff                	test   edi,edi
c001b1be:	7e 1c                	jle    c001b1dc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001b1c0:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001b1c7:	31 c0                	xor    eax,eax
c001b1c9:	8d 76 00             	lea    esi,[esi+0x0]
c001b1cc:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001b1cf:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001b1d2:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001b1d5:	83 c0 04             	add    eax,0x4
c001b1d8:	39 c1                	cmp    ecx,eax
c001b1da:	75 f0                	jne    c001b1cc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001b1dc:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001b1df:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b1e2:	83 ec 04             	sub    esp,0x4
c001b1e5:	29 f8                	sub    eax,edi
c001b1e7:	c1 e0 02             	shl    eax,0x2
c001b1ea:	50                   	push   eax
c001b1eb:	8d 04 ba             	lea    eax,[edx+edi*4]
c001b1ee:	50                   	push   eax
c001b1ef:	52                   	push   edx
c001b1f0:	e8 db 51 fe ff       	call   c00003d0 <memmove>
c001b1f5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001b1f8:	83 c4 10             	add    esp,0x10
c001b1fb:	29 f8                	sub    eax,edi
c001b1fd:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c001b200:	89 f8                	mov    eax,edi
c001b202:	5b                   	pop    ebx
c001b203:	5e                   	pop    esi
c001b204:	5f                   	pop    edi
c001b205:	c3                   	ret    

c001b206 <PCI::open(int, int, void*)>:
c001b206:	83 ec 18             	sub    esp,0x18
c001b209:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b20d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b211:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b217:	8b 10                	mov    edx,DWORD PTR [eax]
c001b219:	50                   	push   eax
c001b21a:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001b21d:	31 c0                	xor    eax,eax
c001b21f:	83 c4 1c             	add    esp,0x1c
c001b222:	c3                   	ret    
c001b223:	90                   	nop

c001b224 <PCI::close(int, int, void*)>:
c001b224:	31 c0                	xor    eax,eax
c001b226:	c3                   	ret    
c001b227:	90                   	nop

c001b228 <PCI::PCI()>:
c001b228:	83 ec 0c             	sub    esp,0xc
c001b22b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b22f:	83 ec 08             	sub    esp,0x8
c001b232:	68 a3 31 02 c0       	push   0xc00231a3
c001b237:	50                   	push   eax
c001b238:	e8 7b 11 ff ff       	call   c000c3b8 <Bus::Bus(char const*)>
c001b23d:	83 c4 10             	add    esp,0x10
c001b240:	ba 4c 32 02 c0       	mov    edx,0xc002324c
c001b245:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b249:	89 10                	mov    DWORD PTR [eax],edx
c001b24b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b24f:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001b259:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b25d:	a3 a0 d0 02 c0       	mov    ds:0xc002d0a0,eax
c001b262:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b266:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b26c:	0f b6 d0             	movzx  edx,al
c001b26f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b273:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001b27a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b27e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b284:	0f b6 d0             	movzx  edx,al
c001b287:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b28b:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001b290:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b294:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b29a:	8d 50 01             	lea    edx,[eax+0x1]
c001b29d:	88 d1                	mov    cl,dl
c001b29f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b2a3:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001b2a9:	0f b6 d0             	movzx  edx,al
c001b2ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2b0:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001b2b4:	83 c9 c0             	or     ecx,0xffffffc0
c001b2b7:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001b2bb:	90                   	nop
c001b2bc:	83 c4 0c             	add    esp,0xc
c001b2bf:	c3                   	ret    

c001b2c0 <PCI::readBAR8(unsigned int, int)>:
c001b2c0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b2c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b2c8:	f6 c2 01             	test   dl,0x1
c001b2cb:	74 07                	je     c001b2d4 <PCI::readBAR8(unsigned int, int)+0x14>
c001b2cd:	83 e2 fc             	and    edx,0xfffffffc
c001b2d0:	01 c2                	add    edx,eax
c001b2d2:	ec                   	in     al,dx
c001b2d3:	c3                   	ret    
c001b2d4:	83 e2 f0             	and    edx,0xfffffff0
c001b2d7:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001b2da:	c3                   	ret    
c001b2db:	90                   	nop

c001b2dc <PCI::readBAR16(unsigned int, int)>:
c001b2dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b2e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b2e4:	f6 c2 01             	test   dl,0x1
c001b2e7:	74 08                	je     c001b2f1 <PCI::readBAR16(unsigned int, int)+0x15>
c001b2e9:	83 e2 fc             	and    edx,0xfffffffc
c001b2ec:	01 c2                	add    edx,eax
c001b2ee:	66 ed                	in     ax,dx
c001b2f0:	c3                   	ret    
c001b2f1:	83 e2 f0             	and    edx,0xfffffff0
c001b2f4:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001b2f8:	c3                   	ret    
c001b2f9:	90                   	nop

c001b2fa <PCI::readBAR32(unsigned int, int)>:
c001b2fa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b2fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b302:	f6 c2 01             	test   dl,0x1
c001b305:	74 07                	je     c001b30e <PCI::readBAR32(unsigned int, int)+0x14>
c001b307:	83 e2 fc             	and    edx,0xfffffffc
c001b30a:	01 c2                	add    edx,eax
c001b30c:	ed                   	in     eax,dx
c001b30d:	c3                   	ret    
c001b30e:	83 e2 f0             	and    edx,0xfffffff0
c001b311:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001b314:	c3                   	ret    
c001b315:	90                   	nop

c001b316 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001b316:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b31a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b31e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b322:	f6 c2 01             	test   dl,0x1
c001b325:	74 07                	je     c001b32e <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001b327:	83 e2 fc             	and    edx,0xfffffffc
c001b32a:	01 ca                	add    edx,ecx
c001b32c:	ee                   	out    dx,al
c001b32d:	c3                   	ret    
c001b32e:	83 e2 f0             	and    edx,0xfffffff0
c001b331:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001b334:	c3                   	ret    
c001b335:	90                   	nop

c001b336 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001b336:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b33a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b33e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b342:	f6 c2 01             	test   dl,0x1
c001b345:	74 08                	je     c001b34f <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001b347:	83 e2 fc             	and    edx,0xfffffffc
c001b34a:	01 ca                	add    edx,ecx
c001b34c:	66 ef                	out    dx,ax
c001b34e:	c3                   	ret    
c001b34f:	83 e2 f0             	and    edx,0xfffffff0
c001b352:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001b356:	c3                   	ret    
c001b357:	90                   	nop

c001b358 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001b358:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b35c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b360:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b364:	f6 c2 01             	test   dl,0x1
c001b367:	74 07                	je     c001b370 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001b369:	83 e2 fc             	and    edx,0xfffffffc
c001b36c:	01 ca                	add    edx,ecx
c001b36e:	ef                   	out    dx,eax
c001b36f:	c3                   	ret    
c001b370:	83 e2 f0             	and    edx,0xfffffff0
c001b373:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001b376:	c3                   	ret    
c001b377:	90                   	nop

c001b378 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b378:	55                   	push   ebp
c001b379:	57                   	push   edi
c001b37a:	56                   	push   esi
c001b37b:	53                   	push   ebx
c001b37c:	83 ec 0c             	sub    esp,0xc
c001b37f:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001b384:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001b388:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001b38c:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b390:	83 fe 07             	cmp    esi,0x7
c001b393:	76 10                	jbe    c001b3a5 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001b395:	83 ec 0c             	sub    esp,0xc
c001b398:	68 ab 31 02 c0       	push   0xc00231ab
c001b39d:	e8 0d 63 ff ff       	call   c00116af <KePanic(char const*)>
c001b3a2:	83 c4 10             	add    esp,0x10
c001b3a5:	0f b6 db             	movzx  ebx,bl
c001b3a8:	83 fb 0f             	cmp    ebx,0xf
c001b3ab:	76 10                	jbe    c001b3bd <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001b3ad:	83 ec 0c             	sub    esp,0xc
c001b3b0:	68 db 31 02 c0       	push   0xc00231db
c001b3b5:	e8 f5 62 ff ff       	call   c00116af <KePanic(char const*)>
c001b3ba:	83 c4 10             	add    esp,0x10
c001b3bd:	8d 04 36             	lea    eax,[esi+esi*1]
c001b3c0:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b3c5:	83 c8 f0             	or     eax,0xfffffff0
c001b3c8:	ee                   	out    dx,al
c001b3c9:	ba fa 0c 00 00       	mov    edx,0xcfa
c001b3ce:	89 e8                	mov    eax,ebp
c001b3d0:	ee                   	out    dx,al
c001b3d1:	83 c4 0c             	add    esp,0xc
c001b3d4:	89 d8                	mov    eax,ebx
c001b3d6:	89 f9                	mov    ecx,edi
c001b3d8:	c1 e0 08             	shl    eax,0x8
c001b3db:	0f b6 d9             	movzx  ebx,cl
c001b3de:	83 e3 fc             	and    ebx,0xfffffffc
c001b3e1:	09 d8                	or     eax,ebx
c001b3e3:	5b                   	pop    ebx
c001b3e4:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001b3e9:	5e                   	pop    esi
c001b3ea:	5f                   	pop    edi
c001b3eb:	5d                   	pop    ebp
c001b3ec:	c3                   	ret    
c001b3ed:	90                   	nop

c001b3ee <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b3ee:	57                   	push   edi
c001b3ef:	56                   	push   esi
c001b3f0:	53                   	push   ebx
c001b3f1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b3f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b3f9:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001b3ff:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b403:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b407:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b40b:	83 ff 01             	cmp    edi,0x1
c001b40e:	75 3f                	jne    c001b44f <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001b410:	89 de                	mov    esi,ebx
c001b412:	0f b6 c0             	movzx  eax,al
c001b415:	81 e6 fc 00 00 00    	and    esi,0xfc
c001b41b:	c1 e0 10             	shl    eax,0x10
c001b41e:	0f b6 c9             	movzx  ecx,cl
c001b421:	09 f0                	or     eax,esi
c001b423:	c1 e1 08             	shl    ecx,0x8
c001b426:	0f b6 d2             	movzx  edx,dl
c001b429:	09 c8                	or     eax,ecx
c001b42b:	c1 e2 0b             	shl    edx,0xb
c001b42e:	09 d0                	or     eax,edx
c001b430:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b435:	0d 00 00 00 80       	or     eax,0x80000000
c001b43a:	ef                   	out    dx,eax
c001b43b:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b440:	ed                   	in     eax,dx
c001b441:	83 e3 02             	and    ebx,0x2
c001b444:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001b44b:	d3 e8                	shr    eax,cl
c001b44d:	eb 44                	jmp    c001b493 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001b44f:	83 ff 02             	cmp    edi,0x2
c001b452:	75 2d                	jne    c001b481 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001b454:	83 ec 0c             	sub    esp,0xc
c001b457:	0f b6 c9             	movzx  ecx,cl
c001b45a:	0f b6 d2             	movzx  edx,dl
c001b45d:	0f b6 fb             	movzx  edi,bl
c001b460:	0f b6 c0             	movzx  eax,al
c001b463:	57                   	push   edi
c001b464:	51                   	push   ecx
c001b465:	52                   	push   edx
c001b466:	50                   	push   eax
c001b467:	56                   	push   esi
c001b468:	e8 0b ff ff ff       	call   c001b378 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b46d:	89 c2                	mov    edx,eax
c001b46f:	ed                   	in     eax,dx
c001b470:	83 e3 02             	and    ebx,0x2
c001b473:	83 c4 20             	add    esp,0x20
c001b476:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001b47d:	d3 e8                	shr    eax,cl
c001b47f:	eb 12                	jmp    c001b493 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001b481:	83 ec 0c             	sub    esp,0xc
c001b484:	68 0b 32 02 c0       	push   0xc002320b
c001b489:	e8 21 62 ff ff       	call   c00116af <KePanic(char const*)>
c001b48e:	83 c4 10             	add    esp,0x10
c001b491:	31 c0                	xor    eax,eax
c001b493:	5b                   	pop    ebx
c001b494:	5e                   	pop    esi
c001b495:	5f                   	pop    edi
c001b496:	c3                   	ret    
c001b497:	90                   	nop

c001b498 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001b498:	83 ec 18             	sub    esp,0x18
c001b49b:	6a 00                	push   0x0
c001b49d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4a2:	50                   	push   eax
c001b4a3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4a8:	50                   	push   eax
c001b4a9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4ae:	50                   	push   eax
c001b4af:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b4b3:	e8 36 ff ff ff       	call   c001b3ee <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b4b8:	83 c4 2c             	add    esp,0x2c
c001b4bb:	c3                   	ret    

c001b4bc <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001b4bc:	83 ec 18             	sub    esp,0x18
c001b4bf:	6a 0e                	push   0xe
c001b4c1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4c6:	50                   	push   eax
c001b4c7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4cc:	50                   	push   eax
c001b4cd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4d2:	50                   	push   eax
c001b4d3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b4d7:	e8 12 ff ff ff       	call   c001b3ee <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b4dc:	83 c4 2c             	add    esp,0x2c
c001b4df:	0f b6 c0             	movzx  eax,al
c001b4e2:	c3                   	ret    
c001b4e3:	90                   	nop

c001b4e4 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001b4e4:	55                   	push   ebp
c001b4e5:	57                   	push   edi
c001b4e6:	56                   	push   esi
c001b4e7:	53                   	push   ebx
c001b4e8:	83 ec 18             	sub    esp,0x18
c001b4eb:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001b4f0:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001b4f5:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001b4fa:	6a 0a                	push   0xa
c001b4fc:	56                   	push   esi
c001b4fd:	55                   	push   ebp
c001b4fe:	57                   	push   edi
c001b4ff:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b503:	e8 e6 fe ff ff       	call   c001b3ee <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b508:	83 c4 14             	add    esp,0x14
c001b50b:	89 c3                	mov    ebx,eax
c001b50d:	6a 0a                	push   0xa
c001b50f:	0f b6 db             	movzx  ebx,bl
c001b512:	56                   	push   esi
c001b513:	55                   	push   ebp
c001b514:	57                   	push   edi
c001b515:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b519:	e8 d0 fe ff ff       	call   c001b3ee <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b51e:	83 c4 2c             	add    esp,0x2c
c001b521:	25 00 ff 00 00       	and    eax,0xff00
c001b526:	09 d8                	or     eax,ebx
c001b528:	5b                   	pop    ebx
c001b529:	5e                   	pop    esi
c001b52a:	5f                   	pop    edi
c001b52b:	5d                   	pop    ebp
c001b52c:	c3                   	ret    
c001b52d:	90                   	nop

c001b52e <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001b52e:	83 ec 18             	sub    esp,0x18
c001b531:	6a 08                	push   0x8
c001b533:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b538:	50                   	push   eax
c001b539:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b53e:	50                   	push   eax
c001b53f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b544:	50                   	push   eax
c001b545:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b549:	e8 a0 fe ff ff       	call   c001b3ee <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b54e:	83 c4 2c             	add    esp,0x2c
c001b551:	0f b6 c4             	movzx  eax,ah
c001b554:	c3                   	ret    
c001b555:	90                   	nop

c001b556 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001b556:	83 ec 18             	sub    esp,0x18
c001b559:	6a 08                	push   0x8
c001b55b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b560:	50                   	push   eax
c001b561:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b566:	50                   	push   eax
c001b567:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b56c:	50                   	push   eax
c001b56d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b571:	e8 78 fe ff ff       	call   c001b3ee <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b576:	83 c4 2c             	add    esp,0x2c
c001b579:	c3                   	ret    

c001b57a <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001b57a:	83 ec 18             	sub    esp,0x18
c001b57d:	6a 3c                	push   0x3c
c001b57f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b584:	50                   	push   eax
c001b585:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b58a:	50                   	push   eax
c001b58b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b590:	50                   	push   eax
c001b591:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b595:	e8 54 fe ff ff       	call   c001b3ee <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b59a:	83 c4 2c             	add    esp,0x2c
c001b59d:	c3                   	ret    

c001b59e <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001b59e:	83 ec 18             	sub    esp,0x18
c001b5a1:	6a 18                	push   0x18
c001b5a3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b5a8:	50                   	push   eax
c001b5a9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b5ae:	50                   	push   eax
c001b5af:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b5b4:	50                   	push   eax
c001b5b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b5b9:	e8 30 fe ff ff       	call   c001b3ee <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b5be:	83 c4 2c             	add    esp,0x2c
c001b5c1:	0f b6 c4             	movzx  eax,ah
c001b5c4:	c3                   	ret    
c001b5c5:	90                   	nop

c001b5c6 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b5c6:	55                   	push   ebp
c001b5c7:	57                   	push   edi
c001b5c8:	56                   	push   esi
c001b5c9:	53                   	push   ebx
c001b5ca:	83 ec 28             	sub    esp,0x28
c001b5cd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001b5d1:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001b5d6:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001b5db:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001b5e0:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001b5e7:	8d 43 12             	lea    eax,[ebx+0x12]
c001b5ea:	83 c3 10             	add    ebx,0x10
c001b5ed:	0f b6 c0             	movzx  eax,al
c001b5f0:	0f b6 db             	movzx  ebx,bl
c001b5f3:	50                   	push   eax
c001b5f4:	51                   	push   ecx
c001b5f5:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001b5f9:	57                   	push   edi
c001b5fa:	55                   	push   ebp
c001b5fb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b5ff:	e8 ea fd ff ff       	call   c001b3ee <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b604:	83 c4 14             	add    esp,0x14
c001b607:	89 c6                	mov    esi,eax
c001b609:	53                   	push   ebx
c001b60a:	c1 e6 10             	shl    esi,0x10
c001b60d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b611:	51                   	push   ecx
c001b612:	57                   	push   edi
c001b613:	55                   	push   ebp
c001b614:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b618:	e8 d1 fd ff ff       	call   c001b3ee <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b61d:	83 c4 3c             	add    esp,0x3c
c001b620:	0f b7 c0             	movzx  eax,ax
c001b623:	5b                   	pop    ebx
c001b624:	09 f0                	or     eax,esi
c001b626:	5e                   	pop    esi
c001b627:	5f                   	pop    edi
c001b628:	5d                   	pop    ebp
c001b629:	c3                   	ret    

c001b62a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001b62a:	55                   	push   ebp
c001b62b:	57                   	push   edi
c001b62c:	56                   	push   esi
c001b62d:	53                   	push   ebx
c001b62e:	83 ec 0c             	sub    esp,0xc
c001b631:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001b635:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b639:	89 f5                	mov    ebp,esi
c001b63b:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001b641:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b645:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b649:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b64d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b651:	83 f9 01             	cmp    ecx,0x1
c001b654:	75 5d                	jne    c001b6b3 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001b656:	0f b6 c8             	movzx  ecx,al
c001b659:	0f b6 d2             	movzx  edx,dl
c001b65c:	c1 e1 10             	shl    ecx,0x10
c001b65f:	c1 e2 0b             	shl    edx,0xb
c001b662:	89 f0                	mov    eax,esi
c001b664:	25 fc 00 00 00       	and    eax,0xfc
c001b669:	09 c1                	or     ecx,eax
c001b66b:	89 e8                	mov    eax,ebp
c001b66d:	0f b6 c0             	movzx  eax,al
c001b670:	c1 e0 08             	shl    eax,0x8
c001b673:	09 c1                	or     ecx,eax
c001b675:	09 d1                	or     ecx,edx
c001b677:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b67c:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001b682:	89 c8                	mov    eax,ecx
c001b684:	ef                   	out    dx,eax
c001b685:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b68a:	ed                   	in     eax,dx
c001b68b:	0f b7 db             	movzx  ebx,bx
c001b68e:	83 e6 02             	and    esi,0x2
c001b691:	74 0a                	je     c001b69d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001b693:	0f b7 d0             	movzx  edx,ax
c001b696:	c1 e3 10             	shl    ebx,0x10
c001b699:	09 d3                	or     ebx,edx
c001b69b:	eb 05                	jmp    c001b6a2 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001b69d:	66 31 c0             	xor    ax,ax
c001b6a0:	09 c3                	or     ebx,eax
c001b6a2:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b6a7:	89 c8                	mov    eax,ecx
c001b6a9:	ef                   	out    dx,eax
c001b6aa:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b6af:	89 d8                	mov    eax,ebx
c001b6b1:	eb 41                	jmp    c001b6f4 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001b6b3:	83 f9 02             	cmp    ecx,0x2
c001b6b6:	75 45                	jne    c001b6fd <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001b6b8:	83 ec 0c             	sub    esp,0xc
c001b6bb:	0f b6 d2             	movzx  edx,dl
c001b6be:	89 f1                	mov    ecx,esi
c001b6c0:	0f b6 c0             	movzx  eax,al
c001b6c3:	0f b6 f1             	movzx  esi,cl
c001b6c6:	89 e9                	mov    ecx,ebp
c001b6c8:	56                   	push   esi
c001b6c9:	0f b6 c9             	movzx  ecx,cl
c001b6cc:	51                   	push   ecx
c001b6cd:	52                   	push   edx
c001b6ce:	50                   	push   eax
c001b6cf:	57                   	push   edi
c001b6d0:	e8 a3 fc ff ff       	call   c001b378 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b6d5:	89 c2                	mov    edx,eax
c001b6d7:	ed                   	in     eax,dx
c001b6d8:	83 c4 20             	add    esp,0x20
c001b6db:	0f b7 db             	movzx  ebx,bx
c001b6de:	f6 c2 02             	test   dl,0x2
c001b6e1:	74 0c                	je     c001b6ef <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001b6e3:	0f b7 c8             	movzx  ecx,ax
c001b6e6:	89 d8                	mov    eax,ebx
c001b6e8:	c1 e0 10             	shl    eax,0x10
c001b6eb:	09 c8                	or     eax,ecx
c001b6ed:	eb 05                	jmp    c001b6f4 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001b6ef:	66 31 c0             	xor    ax,ax
c001b6f2:	09 d8                	or     eax,ebx
c001b6f4:	ef                   	out    dx,eax
c001b6f5:	83 c4 0c             	add    esp,0xc
c001b6f8:	5b                   	pop    ebx
c001b6f9:	5e                   	pop    esi
c001b6fa:	5f                   	pop    edi
c001b6fb:	5d                   	pop    ebp
c001b6fc:	c3                   	ret    
c001b6fd:	c7 44 24 20 0b 32 02 c0 	mov    DWORD PTR [esp+0x20],0xc002320b
c001b705:	83 c4 0c             	add    esp,0xc
c001b708:	5b                   	pop    ebx
c001b709:	5e                   	pop    esi
c001b70a:	5f                   	pop    edi
c001b70b:	5d                   	pop    ebp
c001b70c:	e9 9e 5f ff ff       	jmp    c00116af <KePanic(char const*)>
c001b711:	90                   	nop

c001b712 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001b712:	55                   	push   ebp
c001b713:	57                   	push   edi
c001b714:	56                   	push   esi
c001b715:	53                   	push   ebx
c001b716:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001b71c:	8b ac 24 84 01 00 00 	mov    ebp,DWORD PTR [esp+0x184]
c001b723:	80 3d ac d0 02 c0 00 	cmp    BYTE PTR ds:0xc002d0ac,0x0
c001b72a:	0f 85 bd 00 00 00    	jne    c001b7ed <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001b730:	83 ec 0c             	sub    esp,0xc
c001b733:	68 14 01 00 00       	push   0x114
c001b738:	e8 79 c3 fe ff       	call   c0007ab6 <malloc>
c001b73d:	83 c4 0c             	add    esp,0xc
c001b740:	89 c3                	mov    ebx,eax
c001b742:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c001b748:	68 11 32 02 c0       	push   0xc0023211
c001b74d:	50                   	push   eax
c001b74e:	e8 89 04 ff ff       	call   c000bbdc <File::File(char const*, Process*)>
c001b753:	83 c4 10             	add    esp,0x10
c001b756:	85 db                	test   ebx,ebx
c001b758:	0f 84 67 02 00 00    	je     c001b9c5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b75e:	56                   	push   esi
c001b75f:	56                   	push   esi
c001b760:	6a 01                	push   0x1
c001b762:	53                   	push   ebx
c001b763:	e8 92 04 ff ff       	call   c000bbfa <File::open(FileOpenMode)>
c001b768:	83 c4 10             	add    esp,0x10
c001b76b:	85 c0                	test   eax,eax
c001b76d:	0f 85 52 02 00 00    	jne    c001b9c5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b773:	52                   	push   edx
c001b774:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001b778:	50                   	push   eax
c001b779:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b77d:	50                   	push   eax
c001b77e:	53                   	push   ebx
c001b77f:	e8 78 07 ff ff       	call   c000befc <File::stat(unsigned long long*, bool*)>
c001b784:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b788:	40                   	inc    eax
c001b789:	89 04 24             	mov    DWORD PTR [esp],eax
c001b78c:	e8 25 c3 fe ff       	call   c0007ab6 <malloc>
c001b791:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001b795:	a3 a8 d0 02 c0       	mov    ds:0xc002d0a8,eax
c001b79a:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001b79e:	59                   	pop    ecx
c001b79f:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b7a1:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001b7a5:	51                   	push   ecx
c001b7a6:	50                   	push   eax
c001b7a7:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b7ab:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b7af:	53                   	push   ebx
c001b7b0:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b7b3:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001b7b7:	83 c4 20             	add    esp,0x20
c001b7ba:	89 c8                	mov    eax,ecx
c001b7bc:	99                   	cdq    
c001b7bd:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001b7c1:	0f 85 fe 01 00 00    	jne    c001b9c5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b7c7:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001b7cb:	0f 85 f4 01 00 00    	jne    c001b9c5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b7d1:	83 ec 0c             	sub    esp,0xc
c001b7d4:	53                   	push   ebx
c001b7d5:	e8 7e 04 ff ff       	call   c000bc58 <File::close()>
c001b7da:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b7de:	c6 05 ac d0 02 c0 01 	mov    BYTE PTR ds:0xc002d0ac,0x1
c001b7e5:	a3 a4 d0 02 c0       	mov    ds:0xc002d0a4,eax
c001b7ea:	83 c4 10             	add    esp,0x10
c001b7ed:	a1 a4 d0 02 c0       	mov    eax,ds:0xc002d0a4
c001b7f2:	8b 1d a8 d0 02 c0    	mov    ebx,DWORD PTR ds:0xc002d0a8
c001b7f8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b7fc:	31 f6                	xor    esi,esi
c001b7fe:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001b806:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001b80d:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001b812:	31 c9                	xor    ecx,ecx
c001b814:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001b81c:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001b821:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001b829:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b82d:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001b835:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b839:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001b83d:	0f 8e 82 01 00 00    	jle    c001b9c5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b843:	8a 04 33             	mov    al,BYTE PTR [ebx+esi*1]
c001b846:	d4 40                	aam    0x40
c001b848:	d5 39                	aad    0x39
c001b84a:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001b84e:	8a 44 33 01          	mov    al,BYTE PTR [ebx+esi*1+0x1]
c001b852:	d4 40                	aam    0x40
c001b854:	d5 39                	aad    0x39
c001b856:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b85a:	8a 44 33 03          	mov    al,BYTE PTR [ebx+esi*1+0x3]
c001b85e:	d4 40                	aam    0x40
c001b860:	d5 39                	aad    0x39
c001b862:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b866:	8a 44 33 04          	mov    al,BYTE PTR [ebx+esi*1+0x4]
c001b86a:	d4 40                	aam    0x40
c001b86c:	d5 39                	aad    0x39
c001b86e:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b872:	8a 44 33 06          	mov    al,BYTE PTR [ebx+esi*1+0x6]
c001b876:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001b87a:	3c 56                	cmp    al,0x56
c001b87c:	74 43                	je     c001b8c1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1af>
c001b87e:	d4 40                	aam    0x40
c001b880:	d5 39                	aad    0x39
c001b882:	8d 48 d0             	lea    ecx,[eax-0x30]
c001b885:	8a 44 33 07          	mov    al,BYTE PTR [ebx+esi*1+0x7]
c001b889:	0f b6 c9             	movzx  ecx,cl
c001b88c:	c1 e1 04             	shl    ecx,0x4
c001b88f:	d4 40                	aam    0x40
c001b891:	d5 39                	aad    0x39
c001b893:	83 e8 30             	sub    eax,0x30
c001b896:	0f b6 c0             	movzx  eax,al
c001b899:	09 c1                	or     ecx,eax
c001b89b:	8a 44 33 08          	mov    al,BYTE PTR [ebx+esi*1+0x8]
c001b89f:	c1 e1 04             	shl    ecx,0x4
c001b8a2:	d4 40                	aam    0x40
c001b8a4:	d5 39                	aad    0x39
c001b8a6:	83 e8 30             	sub    eax,0x30
c001b8a9:	0f b6 c0             	movzx  eax,al
c001b8ac:	09 c1                	or     ecx,eax
c001b8ae:	8a 44 33 09          	mov    al,BYTE PTR [ebx+esi*1+0x9]
c001b8b2:	c1 e1 04             	shl    ecx,0x4
c001b8b5:	d4 40                	aam    0x40
c001b8b7:	d5 39                	aad    0x39
c001b8b9:	83 e8 30             	sub    eax,0x30
c001b8bc:	0f b6 c0             	movzx  eax,al
c001b8bf:	09 c1                	or     ecx,eax
c001b8c1:	8a 44 33 0b          	mov    al,BYTE PTR [ebx+esi*1+0xb]
c001b8c5:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001b8c9:	3c 58                	cmp    al,0x58
c001b8cb:	74 47                	je     c001b914 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x202>
c001b8cd:	d4 40                	aam    0x40
c001b8cf:	d5 39                	aad    0x39
c001b8d1:	8d 50 d0             	lea    edx,[eax-0x30]
c001b8d4:	8a 44 33 0c          	mov    al,BYTE PTR [ebx+esi*1+0xc]
c001b8d8:	0f b6 d2             	movzx  edx,dl
c001b8db:	c1 e2 04             	shl    edx,0x4
c001b8de:	d4 40                	aam    0x40
c001b8e0:	d5 39                	aad    0x39
c001b8e2:	83 e8 30             	sub    eax,0x30
c001b8e5:	0f b6 c0             	movzx  eax,al
c001b8e8:	09 c2                	or     edx,eax
c001b8ea:	8a 44 33 0d          	mov    al,BYTE PTR [ebx+esi*1+0xd]
c001b8ee:	c1 e2 04             	shl    edx,0x4
c001b8f1:	d4 40                	aam    0x40
c001b8f3:	d5 39                	aad    0x39
c001b8f5:	83 e8 30             	sub    eax,0x30
c001b8f8:	0f b6 c0             	movzx  eax,al
c001b8fb:	09 c2                	or     edx,eax
c001b8fd:	8a 44 33 0e          	mov    al,BYTE PTR [ebx+esi*1+0xe]
c001b901:	c1 e2 04             	shl    edx,0x4
c001b904:	d4 40                	aam    0x40
c001b906:	d5 39                	aad    0x39
c001b908:	83 e8 30             	sub    eax,0x30
c001b90b:	0f b6 c0             	movzx  eax,al
c001b90e:	09 c2                	or     edx,eax
c001b910:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b914:	83 c6 10             	add    esi,0x10
c001b917:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001b91b:	0f be 14 33          	movsx  edx,BYTE PTR [ebx+esi*1]
c001b91f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b923:	83 fa 0a             	cmp    edx,0xa
c001b926:	74 0b                	je     c001b933 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x221>
c001b928:	47                   	inc    edi
c001b929:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001b92d:	75 19                	jne    c001b948 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x236>
c001b92f:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c001b933:	31 c0                	xor    eax,eax
c001b935:	83 7c 24 10 0a       	cmp    DWORD PTR [esp+0x10],0xa
c001b93a:	0f 94 c0             	sete   al
c001b93d:	01 c6                	add    esi,eax
c001b93f:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001b944:	75 0b                	jne    c001b951 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x23f>
c001b946:	eb 14                	jmp    c001b95c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x24a>
c001b948:	46                   	inc    esi
c001b949:	88 57 ff             	mov    BYTE PTR [edi-0x1],dl
c001b94c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001b94f:	eb ca                	jmp    c001b91b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c001b951:	66 3b 4c 24 14       	cmp    cx,WORD PTR [esp+0x14]
c001b956:	0f 85 dd fe ff ff    	jne    c001b839 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b95c:	80 7c 24 0b 58       	cmp    BYTE PTR [esp+0xb],0x58
c001b961:	74 10                	je     c001b973 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x261>
c001b963:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001b968:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001b96d:	0f 85 c6 fe ff ff    	jne    c001b839 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b973:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b977:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b97b:	83 e8 30             	sub    eax,0x30
c001b97e:	83 ef 30             	sub    edi,0x30
c001b981:	c1 e0 04             	shl    eax,0x4
c001b984:	09 f8                	or     eax,edi
c001b986:	0f b6 c0             	movzx  eax,al
c001b989:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001b98d:	0f 85 a6 fe ff ff    	jne    c001b839 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b993:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b997:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001b99b:	83 e8 30             	sub    eax,0x30
c001b99e:	83 ef 30             	sub    edi,0x30
c001b9a1:	c1 e0 04             	shl    eax,0x4
c001b9a4:	09 f8                	or     eax,edi
c001b9a6:	0f b6 c0             	movzx  eax,al
c001b9a9:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001b9ad:	0f 85 86 fe ff ff    	jne    c001b839 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b9b3:	50                   	push   eax
c001b9b4:	50                   	push   eax
c001b9b5:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b9b9:	50                   	push   eax
c001b9ba:	55                   	push   ebp
c001b9bb:	e8 80 4c fe ff       	call   c0000640 <strcpy>
c001b9c0:	83 c4 10             	add    esp,0x10
c001b9c3:	eb 06                	jmp    c001b9cb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b9>
c001b9c5:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001b9c9:	31 ed                	xor    ebp,ebp
c001b9cb:	81 c4 4c 01 00 00    	add    esp,0x14c
c001b9d1:	89 e8                	mov    eax,ebp
c001b9d3:	5b                   	pop    ebx
c001b9d4:	5e                   	pop    esi
c001b9d5:	5f                   	pop    edi
c001b9d6:	5d                   	pop    ebp
c001b9d7:	c3                   	ret    

c001b9d8 <PCI::checkBus(unsigned char)>:
c001b9d8:	56                   	push   esi
c001b9d9:	53                   	push   ebx
c001b9da:	31 db                	xor    ebx,ebx
c001b9dc:	51                   	push   ecx
c001b9dd:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b9e2:	52                   	push   edx
c001b9e3:	53                   	push   ebx
c001b9e4:	43                   	inc    ebx
c001b9e5:	56                   	push   esi
c001b9e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b9ea:	e8 03 03 00 00       	call   c001bcf2 <PCI::checkDevice(unsigned char, unsigned char)>
c001b9ef:	83 c4 10             	add    esp,0x10
c001b9f2:	83 fb 20             	cmp    ebx,0x20
c001b9f5:	75 eb                	jne    c001b9e2 <PCI::checkBus(unsigned char)+0xa>
c001b9f7:	58                   	pop    eax
c001b9f8:	5b                   	pop    ebx
c001b9f9:	5e                   	pop    esi
c001b9fa:	c3                   	ret    
c001b9fb:	90                   	nop

c001b9fc <PCI::foundDevice(PCIDeviceInfo)>:
c001b9fc:	55                   	push   ebp
c001b9fd:	57                   	push   edi
c001b9fe:	56                   	push   esi
c001b9ff:	53                   	push   ebx
c001ba00:	83 ec 1c             	sub    esp,0x1c
c001ba03:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c001ba08:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ba0c:	3d ff ff 00 00       	cmp    eax,0xffff
c001ba11:	0f 84 57 01 00 00    	je     c001bb6e <PCI::foundDevice(PCIDeviceInfo)+0x172>
c001ba17:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c001ba1c:	66 3d 06 04          	cmp    ax,0x406
c001ba20:	75 2c                	jne    c001ba4e <PCI::foundDevice(PCIDeviceInfo)+0x52>
c001ba22:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001ba27:	50                   	push   eax
c001ba28:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001ba2d:	50                   	push   eax
c001ba2e:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001ba33:	50                   	push   eax
c001ba34:	53                   	push   ebx
c001ba35:	e8 64 fb ff ff       	call   c001b59e <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001ba3a:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001ba3e:	0f b6 c0             	movzx  eax,al
c001ba41:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001ba45:	83 c4 2c             	add    esp,0x2c
c001ba48:	5b                   	pop    ebx
c001ba49:	5e                   	pop    esi
c001ba4a:	5f                   	pop    edi
c001ba4b:	5d                   	pop    ebp
c001ba4c:	eb 8a                	jmp    c001b9d8 <PCI::checkBus(unsigned char)>
c001ba4e:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001ba52:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c001ba58:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001ba5c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001ba60:	0f b6 7c 24 54       	movzx  edi,BYTE PTR [esp+0x54]
c001ba65:	85 d2                	test   edx,edx
c001ba67:	74 36                	je     c001ba9f <PCI::foundDevice(PCIDeviceInfo)+0xa3>
c001ba69:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001ba6c:	85 c9                	test   ecx,ecx
c001ba6e:	74 2b                	je     c001ba9b <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001ba70:	8b b1 18 01 00 00    	mov    esi,DWORD PTR [ecx+0x118]
c001ba76:	31 ee                	xor    esi,ebp
c001ba78:	81 e6 ff 00 ff ff    	and    esi,0xffff00ff
c001ba7e:	75 1b                	jne    c001ba9b <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001ba80:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001ba84:	39 b1 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],esi
c001ba8a:	75 0f                	jne    c001ba9b <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001ba8c:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c001ba93:	39 f9                	cmp    ecx,edi
c001ba95:	0f 84 d3 00 00 00    	je     c001bb6e <PCI::foundDevice(PCIDeviceInfo)+0x172>
c001ba9b:	8b 12                	mov    edx,DWORD PTR [edx]
c001ba9d:	eb c6                	jmp    c001ba65 <PCI::foundDevice(PCIDeviceInfo)+0x69>
c001ba9f:	3d 01 06 00 00       	cmp    eax,0x601
c001baa4:	75 19                	jne    c001babf <PCI::foundDevice(PCIDeviceInfo)+0xc3>
c001baa6:	83 ec 0c             	sub    esp,0xc
c001baa9:	68 64 01 00 00       	push   0x164
c001baae:	e8 03 c0 fe ff       	call   c0007ab6 <malloc>
c001bab3:	89 c5                	mov    ebp,eax
c001bab5:	89 04 24             	mov    DWORD PTR [esp],eax
c001bab8:	e8 a1 0e 00 00       	call   c001c95e <SATABus::SATABus()>
c001babd:	eb 1e                	jmp    c001badd <PCI::foundDevice(PCIDeviceInfo)+0xe1>
c001babf:	3d 01 01 00 00       	cmp    eax,0x101
c001bac4:	75 62                	jne    c001bb28 <PCI::foundDevice(PCIDeviceInfo)+0x12c>
c001bac6:	83 ec 0c             	sub    esp,0xc
c001bac9:	68 70 02 00 00       	push   0x270
c001bace:	e8 e3 bf fe ff       	call   c0007ab6 <malloc>
c001bad3:	89 c5                	mov    ebp,eax
c001bad5:	89 04 24             	mov    DWORD PTR [esp],eax
c001bad8:	e8 e5 02 00 00       	call   c001bdc2 <IDE::IDE()>
c001badd:	5f                   	pop    edi
c001bade:	58                   	pop    eax
c001badf:	55                   	push   ebp
c001bae0:	53                   	push   ebx
c001bae1:	e8 70 0f ff ff       	call   c000ca56 <Device::addChild(Device*)>
c001bae6:	83 ec 1c             	sub    esp,0x1c
c001bae9:	b9 09 00 00 00       	mov    ecx,0x9
c001baee:	fc                   	cld    
c001baef:	89 e7                	mov    edi,esp
c001baf1:	8d 74 24 60          	lea    esi,[esp+0x60]
c001baf5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001baf7:	55                   	push   ebp
c001baf8:	e8 9f 0e ff ff       	call   c000c99c <Device::preOpenPCI(PCIDeviceInfo)>
c001bafd:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001bb00:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001bb04:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001bb0c:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001bb14:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001bb1c:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001bb1f:	83 c4 4c             	add    esp,0x4c
c001bb22:	5b                   	pop    ebx
c001bb23:	5e                   	pop    esi
c001bb24:	5f                   	pop    edi
c001bb25:	5d                   	pop    ebp
c001bb26:	ff e0                	jmp    eax
c001bb28:	83 ec 0c             	sub    esp,0xc
c001bb2b:	68 58 01 00 00       	push   0x158
c001bb30:	e8 81 bf fe ff       	call   c0007ab6 <malloc>
c001bb35:	89 c5                	mov    ebp,eax
c001bb37:	58                   	pop    eax
c001bb38:	5a                   	pop    edx
c001bb39:	68 2a 32 02 c0       	push   0xc002322a
c001bb3e:	55                   	push   ebp
c001bb3f:	e8 b0 11 ff ff       	call   c000ccf4 <DriverlessDevice::DriverlessDevice(char const*)>
c001bb44:	59                   	pop    ecx
c001bb45:	5e                   	pop    esi
c001bb46:	55                   	push   ebp
c001bb47:	53                   	push   ebx
c001bb48:	e8 09 0f ff ff       	call   c000ca56 <Device::addChild(Device*)>
c001bb4d:	83 c4 10             	add    esp,0x10
c001bb50:	b9 09 00 00 00       	mov    ecx,0x9
c001bb55:	fc                   	cld    
c001bb56:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001bb5a:	89 fe                	mov    esi,edi
c001bb5c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001bb5e:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c001bb62:	83 c4 1c             	add    esp,0x1c
c001bb65:	5b                   	pop    ebx
c001bb66:	5e                   	pop    esi
c001bb67:	5f                   	pop    edi
c001bb68:	5d                   	pop    ebp
c001bb69:	e9 2e 0e ff ff       	jmp    c000c99c <Device::preOpenPCI(PCIDeviceInfo)>
c001bb6e:	83 c4 1c             	add    esp,0x1c
c001bb71:	5b                   	pop    ebx
c001bb72:	5e                   	pop    esi
c001bb73:	5f                   	pop    edi
c001bb74:	5d                   	pop    ebp
c001bb75:	c3                   	ret    

c001bb76 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001bb76:	55                   	push   ebp
c001bb77:	57                   	push   edi
c001bb78:	56                   	push   esi
c001bb79:	53                   	push   ebx
c001bb7a:	83 ec 68             	sub    esp,0x68
c001bb7d:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001bb81:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001bb88:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001bb8c:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001bb93:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001bb98:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001bb9c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001bba3:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001bba8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001bbac:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001bbb1:	6a 0c                	push   0xc
c001bbb3:	57                   	push   edi
c001bbb4:	53                   	push   ebx
c001bbb5:	56                   	push   esi
c001bbb6:	55                   	push   ebp
c001bbb7:	e8 32 f8 ff ff       	call   c001b3ee <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bbbc:	83 c4 20             	add    esp,0x20
c001bbbf:	57                   	push   edi
c001bbc0:	53                   	push   ebx
c001bbc1:	56                   	push   esi
c001bbc2:	55                   	push   ebp
c001bbc3:	e8 1c f9 ff ff       	call   c001b4e4 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001bbc8:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001bbcd:	57                   	push   edi
c001bbce:	53                   	push   ebx
c001bbcf:	56                   	push   esi
c001bbd0:	55                   	push   ebp
c001bbd1:	e8 a4 f9 ff ff       	call   c001b57a <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001bbd6:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001bbda:	83 c4 14             	add    esp,0x14
c001bbdd:	6a 3c                	push   0x3c
c001bbdf:	57                   	push   edi
c001bbe0:	53                   	push   ebx
c001bbe1:	56                   	push   esi
c001bbe2:	55                   	push   ebp
c001bbe3:	e8 06 f8 ff ff       	call   c001b3ee <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bbe8:	0f b6 c4             	movzx  eax,ah
c001bbeb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001bbef:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001bbf3:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001bbf7:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001bbfc:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001bc02:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001bc08:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001bc0c:	83 c4 20             	add    esp,0x20
c001bc0f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001bc14:	74 30                	je     c001bc46 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001bc16:	31 c0                	xor    eax,eax
c001bc18:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001bc1c:	7e 28                	jle    c001bc46 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001bc1e:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001bc26:	39 cb                	cmp    ebx,ecx
c001bc28:	75 19                	jne    c001bc43 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001bc2a:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001bc32:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001bc36:	75 0b                	jne    c001bc43 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001bc38:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001bc3f:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001bc43:	40                   	inc    eax
c001bc44:	eb d2                	jmp    c001bc18 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001bc46:	31 d2                	xor    edx,edx
c001bc48:	83 ec 0c             	sub    esp,0xc
c001bc4b:	57                   	push   edi
c001bc4c:	53                   	push   ebx
c001bc4d:	56                   	push   esi
c001bc4e:	52                   	push   edx
c001bc4f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001bc53:	55                   	push   ebp
c001bc54:	e8 6d f9 ff ff       	call   c001b5c6 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bc59:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001bc5d:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001bc61:	42                   	inc    edx
c001bc62:	83 c4 20             	add    esp,0x20
c001bc65:	83 fa 06             	cmp    edx,0x6
c001bc68:	75 de                	jne    c001bc48 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001bc6a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bc6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bc72:	c1 e2 08             	shl    edx,0x8
c001bc75:	83 ec 0c             	sub    esp,0xc
c001bc78:	0f b6 c4             	movzx  eax,ah
c001bc7b:	09 d0                	or     eax,edx
c001bc7d:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001bc82:	6a 02                	push   0x2
c001bc84:	57                   	push   edi
c001bc85:	53                   	push   ebx
c001bc86:	56                   	push   esi
c001bc87:	55                   	push   ebp
c001bc88:	e8 61 f7 ff ff       	call   c001b3ee <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bc8d:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001bc92:	83 c4 20             	add    esp,0x20
c001bc95:	57                   	push   edi
c001bc96:	53                   	push   ebx
c001bc97:	56                   	push   esi
c001bc98:	55                   	push   ebp
c001bc99:	e8 90 f8 ff ff       	call   c001b52e <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001bc9e:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001bca2:	57                   	push   edi
c001bca3:	53                   	push   ebx
c001bca4:	56                   	push   esi
c001bca5:	55                   	push   ebp
c001bca6:	e8 ed f7 ff ff       	call   c001b498 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bcab:	b9 09 00 00 00       	mov    ecx,0x9
c001bcb0:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001bcb5:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001bcb9:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001bcbd:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001bcc1:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001bcc5:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001bcc9:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001bccd:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001bcd1:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001bcd5:	83 ec 0c             	sub    esp,0xc
c001bcd8:	fc                   	cld    
c001bcd9:	89 e7                	mov    edi,esp
c001bcdb:	8d 74 24 58          	lea    esi,[esp+0x58]
c001bcdf:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001bce1:	55                   	push   ebp
c001bce2:	e8 15 fd ff ff       	call   c001b9fc <PCI::foundDevice(PCIDeviceInfo)>
c001bce7:	81 c4 8c 00 00 00    	add    esp,0x8c
c001bced:	5b                   	pop    ebx
c001bcee:	5e                   	pop    esi
c001bcef:	5f                   	pop    edi
c001bcf0:	5d                   	pop    ebp
c001bcf1:	c3                   	ret    

c001bcf2 <PCI::checkDevice(unsigned char, unsigned char)>:
c001bcf2:	55                   	push   ebp
c001bcf3:	57                   	push   edi
c001bcf4:	56                   	push   esi
c001bcf5:	53                   	push   ebx
c001bcf6:	83 ec 0c             	sub    esp,0xc
c001bcf9:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001bcfd:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001bd02:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001bd07:	6a 00                	push   0x0
c001bd09:	56                   	push   esi
c001bd0a:	57                   	push   edi
c001bd0b:	55                   	push   ebp
c001bd0c:	e8 87 f7 ff ff       	call   c001b498 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bd11:	6a 00                	push   0x0
c001bd13:	56                   	push   esi
c001bd14:	57                   	push   edi
c001bd15:	55                   	push   ebp
c001bd16:	e8 5b fe ff ff       	call   c001bb76 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001bd1b:	83 c4 20             	add    esp,0x20
c001bd1e:	6a 00                	push   0x0
c001bd20:	56                   	push   esi
c001bd21:	57                   	push   edi
c001bd22:	55                   	push   ebp
c001bd23:	e8 94 f7 ff ff       	call   c001b4bc <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001bd28:	83 c4 10             	add    esp,0x10
c001bd2b:	a8 80                	test   al,0x80
c001bd2d:	74 2d                	je     c001bd5c <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001bd2f:	bb 01 00 00 00       	mov    ebx,0x1
c001bd34:	53                   	push   ebx
c001bd35:	56                   	push   esi
c001bd36:	57                   	push   edi
c001bd37:	55                   	push   ebp
c001bd38:	e8 5b f7 ff ff       	call   c001b498 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bd3d:	83 c4 10             	add    esp,0x10
c001bd40:	0f b7 c0             	movzx  eax,ax
c001bd43:	3d ff ff 00 00       	cmp    eax,0xffff
c001bd48:	74 0c                	je     c001bd56 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001bd4a:	53                   	push   ebx
c001bd4b:	56                   	push   esi
c001bd4c:	57                   	push   edi
c001bd4d:	55                   	push   ebp
c001bd4e:	e8 23 fe ff ff       	call   c001bb76 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001bd53:	83 c4 10             	add    esp,0x10
c001bd56:	43                   	inc    ebx
c001bd57:	83 fb 08             	cmp    ebx,0x8
c001bd5a:	75 d8                	jne    c001bd34 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001bd5c:	83 c4 0c             	add    esp,0xc
c001bd5f:	5b                   	pop    ebx
c001bd60:	5e                   	pop    esi
c001bd61:	5f                   	pop    edi
c001bd62:	5d                   	pop    ebp
c001bd63:	c3                   	ret    

c001bd64 <PCI::detect()>:
c001bd64:	56                   	push   esi
c001bd65:	53                   	push   ebx
c001bd66:	53                   	push   ebx
c001bd67:	31 db                	xor    ebx,ebx
c001bd69:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bd6d:	6a 00                	push   0x0
c001bd6f:	6a 00                	push   0x0
c001bd71:	6a 00                	push   0x0
c001bd73:	56                   	push   esi
c001bd74:	e8 43 f7 ff ff       	call   c001b4bc <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001bd79:	83 c4 10             	add    esp,0x10
c001bd7c:	a8 80                	test   al,0x80
c001bd7e:	75 21                	jne    c001bda1 <PCI::detect()+0x3d>
c001bd80:	51                   	push   ecx
c001bd81:	51                   	push   ecx
c001bd82:	6a 00                	push   0x0
c001bd84:	56                   	push   esi
c001bd85:	e8 4e fc ff ff       	call   c001b9d8 <PCI::checkBus(unsigned char)>
c001bd8a:	83 c4 10             	add    esp,0x10
c001bd8d:	eb 2a                	jmp    c001bdb9 <PCI::detect()+0x55>
c001bd8f:	52                   	push   edx
c001bd90:	52                   	push   edx
c001bd91:	53                   	push   ebx
c001bd92:	43                   	inc    ebx
c001bd93:	56                   	push   esi
c001bd94:	e8 3f fc ff ff       	call   c001b9d8 <PCI::checkBus(unsigned char)>
c001bd99:	83 c4 10             	add    esp,0x10
c001bd9c:	83 fb 08             	cmp    ebx,0x8
c001bd9f:	74 18                	je     c001bdb9 <PCI::detect()+0x55>
c001bda1:	53                   	push   ebx
c001bda2:	6a 00                	push   0x0
c001bda4:	6a 00                	push   0x0
c001bda6:	56                   	push   esi
c001bda7:	e8 ec f6 ff ff       	call   c001b498 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bdac:	83 c4 10             	add    esp,0x10
c001bdaf:	0f b7 c0             	movzx  eax,ax
c001bdb2:	3d ff ff 00 00       	cmp    eax,0xffff
c001bdb7:	74 d6                	je     c001bd8f <PCI::detect()+0x2b>
c001bdb9:	58                   	pop    eax
c001bdba:	5b                   	pop    ebx
c001bdbb:	5e                   	pop    esi
c001bdbc:	c3                   	ret    
c001bdbd:	90                   	nop

c001bdbe <IDE::close(int, int, void*)>:
c001bdbe:	83 c8 ff             	or     eax,0xffffffff
c001bdc1:	c3                   	ret    

c001bdc2 <IDE::IDE()>:
c001bdc2:	83 ec 0c             	sub    esp,0xc
c001bdc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bdc9:	83 ec 08             	sub    esp,0x8
c001bdcc:	68 70 32 02 c0       	push   0xc0023270
c001bdd1:	50                   	push   eax
c001bdd2:	e8 c1 0f ff ff       	call   c000cd98 <HardDiskController::HardDiskController(char const*)>
c001bdd7:	83 c4 10             	add    esp,0x10
c001bdda:	ba 00 33 02 c0       	mov    edx,0xc0023300
c001bddf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bde3:	89 10                	mov    DWORD PTR [eax],edx
c001bde5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bde9:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001bdf0:	90                   	nop
c001bdf1:	83 c4 0c             	add    esp,0xc
c001bdf4:	c3                   	ret    
c001bdf5:	90                   	nop

c001bdf6 <IDE::prepareInterrupt(unsigned char)>:
c001bdf6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bdfb:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bdff:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001be07:	c3                   	ret    

c001be08 <selectDrive(unsigned char, unsigned char)>:
c001be08:	c3                   	ret    
c001be09:	90                   	nop

c001be0a <IDE::getBase(unsigned char)>:
c001be0a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001be0f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001be13:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001be1b:	c3                   	ret    

c001be1c <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001be1c:	55                   	push   ebp
c001be1d:	57                   	push   edi
c001be1e:	56                   	push   esi
c001be1f:	53                   	push   ebx
c001be20:	83 ec 1c             	sub    esp,0x1c
c001be23:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001be27:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001be2b:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001be2e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001be32:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001be36:	80 f9 03             	cmp    cl,0x3
c001be39:	77 4f                	ja     c001be8a <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001be3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001be3f:	0f b6 fa             	movzx  edi,dl
c001be42:	0f b6 db             	movzx  ebx,bl
c001be45:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001be48:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001be4d:	80 ca 80             	or     dl,0x80
c001be50:	52                   	push   edx
c001be51:	6a 0c                	push   0xc
c001be53:	57                   	push   edi
c001be54:	56                   	push   esi
c001be55:	e8 c2 ff ff ff       	call   c001be1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be5a:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001be5f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001be63:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001be67:	ee                   	out    dx,al
c001be68:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001be6d:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c001be71:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001be75:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001be79:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001be81:	83 c4 2c             	add    esp,0x2c
c001be84:	5b                   	pop    ebx
c001be85:	5e                   	pop    esi
c001be86:	5f                   	pop    edi
c001be87:	5d                   	pop    ebp
c001be88:	eb 92                	jmp    c001be1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be8a:	0f b6 cb             	movzx  ecx,bl
c001be8d:	83 f9 07             	cmp    ecx,0x7
c001be90:	77 12                	ja     c001bea4 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001be92:	0f b6 d2             	movzx  edx,dl
c001be95:	0f b6 db             	movzx  ebx,bl
c001be98:	66 8b 94 d6 5a 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15a]
c001bea0:	01 da                	add    edx,ebx
c001bea2:	eb 2f                	jmp    c001bed3 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001bea4:	83 f9 0d             	cmp    ecx,0xd
c001bea7:	77 13                	ja     c001bebc <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001bea9:	0f b6 d2             	movzx  edx,dl
c001beac:	0f b6 db             	movzx  ebx,bl
c001beaf:	8b 94 d6 5c 01 00 00 	mov    edx,DWORD PTR [esi+edx*8+0x15c]
c001beb6:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001beba:	eb 17                	jmp    c001bed3 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001bebc:	83 f9 15             	cmp    ecx,0x15
c001bebf:	77 13                	ja     c001bed4 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001bec1:	0f b6 d2             	movzx  edx,dl
c001bec4:	0f b6 db             	movzx  ebx,bl
c001bec7:	66 8b 94 d6 5e 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15e]
c001becf:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001bed3:	ee                   	out    dx,al
c001bed4:	83 c4 1c             	add    esp,0x1c
c001bed7:	5b                   	pop    ebx
c001bed8:	5e                   	pop    esi
c001bed9:	5f                   	pop    edi
c001beda:	5d                   	pop    ebp
c001bedb:	c3                   	ret    

c001bedc <IDE::read(unsigned char, unsigned char)>:
c001bedc:	55                   	push   ebp
c001bedd:	57                   	push   edi
c001bede:	56                   	push   esi
c001bedf:	53                   	push   ebx
c001bee0:	83 ec 1c             	sub    esp,0x1c
c001bee3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001bee7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001beeb:	8d 43 f8             	lea    eax,[ebx-0x8]
c001beee:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001bef2:	3c 03                	cmp    al,0x3
c001bef4:	77 40                	ja     c001bf36 <IDE::read(unsigned char, unsigned char)+0x5a>
c001bef6:	0f b6 f9             	movzx  edi,cl
c001bef9:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001befc:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001bf01:	0c 80                	or     al,0x80
c001bf03:	50                   	push   eax
c001bf04:	6a 0c                	push   0xc
c001bf06:	57                   	push   edi
c001bf07:	56                   	push   esi
c001bf08:	e8 0f ff ff ff       	call   c001be1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bf0d:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001bf12:	0f b6 d3             	movzx  edx,bl
c001bf15:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001bf19:	ec                   	in     al,dx
c001bf1a:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001bf1e:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001bf23:	52                   	push   edx
c001bf24:	6a 0c                	push   0xc
c001bf26:	57                   	push   edi
c001bf27:	56                   	push   esi
c001bf28:	e8 ef fe ff ff       	call   c001be1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bf2d:	83 c4 20             	add    esp,0x20
c001bf30:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001bf34:	eb 4c                	jmp    c001bf82 <IDE::read(unsigned char, unsigned char)+0xa6>
c001bf36:	0f b6 d3             	movzx  edx,bl
c001bf39:	83 fa 07             	cmp    edx,0x7
c001bf3c:	77 12                	ja     c001bf50 <IDE::read(unsigned char, unsigned char)+0x74>
c001bf3e:	0f b6 c9             	movzx  ecx,cl
c001bf41:	0f b6 d3             	movzx  edx,bl
c001bf44:	66 8b 84 ce 5a 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15a]
c001bf4c:	01 c2                	add    edx,eax
c001bf4e:	eb 31                	jmp    c001bf81 <IDE::read(unsigned char, unsigned char)+0xa5>
c001bf50:	83 fa 0d             	cmp    edx,0xd
c001bf53:	77 13                	ja     c001bf68 <IDE::read(unsigned char, unsigned char)+0x8c>
c001bf55:	0f b6 c9             	movzx  ecx,cl
c001bf58:	0f b6 d3             	movzx  edx,bl
c001bf5b:	8b 84 ce 5c 01 00 00 	mov    eax,DWORD PTR [esi+ecx*8+0x15c]
c001bf62:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001bf66:	eb 19                	jmp    c001bf81 <IDE::read(unsigned char, unsigned char)+0xa5>
c001bf68:	31 c0                	xor    eax,eax
c001bf6a:	83 fa 15             	cmp    edx,0x15
c001bf6d:	77 13                	ja     c001bf82 <IDE::read(unsigned char, unsigned char)+0xa6>
c001bf6f:	0f b6 c9             	movzx  ecx,cl
c001bf72:	0f b6 d3             	movzx  edx,bl
c001bf75:	66 8b 84 ce 5e 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15e]
c001bf7d:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001bf81:	ec                   	in     al,dx
c001bf82:	83 c4 1c             	add    esp,0x1c
c001bf85:	5b                   	pop    ebx
c001bf86:	5e                   	pop    esi
c001bf87:	5f                   	pop    edi
c001bf88:	5d                   	pop    ebp
c001bf89:	c3                   	ret    

c001bf8a <IDE::waitInterrupt(unsigned char)>:
c001bf8a:	55                   	push   ebp
c001bf8b:	57                   	push   edi
c001bf8c:	56                   	push   esi
c001bf8d:	53                   	push   ebx
c001bf8e:	31 db                	xor    ebx,ebx
c001bf90:	83 ec 0c             	sub    esp,0xc
c001bf93:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001bf97:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001bf9c:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001bfa4:	89 e8                	mov    eax,ebp
c001bfa6:	84 c0                	test   al,al
c001bfa8:	75 30                	jne    c001bfda <IDE::waitInterrupt(unsigned char)+0x50>
c001bfaa:	50                   	push   eax
c001bfab:	6a 0c                	push   0xc
c001bfad:	56                   	push   esi
c001bfae:	57                   	push   edi
c001bfaf:	e8 28 ff ff ff       	call   c001bedc <IDE::read(unsigned char, unsigned char)>
c001bfb4:	83 c4 10             	add    esp,0x10
c001bfb7:	a8 01                	test   al,0x1
c001bfb9:	75 27                	jne    c001bfe2 <IDE::waitInterrupt(unsigned char)+0x58>
c001bfbb:	f6 c3 04             	test   bl,0x4
c001bfbe:	75 12                	jne    c001bfd2 <IDE::waitInterrupt(unsigned char)+0x48>
c001bfc0:	83 fb 32             	cmp    ebx,0x32
c001bfc3:	7e 0d                	jle    c001bfd2 <IDE::waitInterrupt(unsigned char)+0x48>
c001bfc5:	83 ec 0c             	sub    esp,0xc
c001bfc8:	6a 64                	push   0x64
c001bfca:	e8 b1 a4 ff ff       	call   c0016480 <milliTenthSleep(unsigned int)>
c001bfcf:	83 c4 10             	add    esp,0x10
c001bfd2:	83 fb 3c             	cmp    ebx,0x3c
c001bfd5:	74 0b                	je     c001bfe2 <IDE::waitInterrupt(unsigned char)+0x58>
c001bfd7:	43                   	inc    ebx
c001bfd8:	eb c2                	jmp    c001bf9c <IDE::waitInterrupt(unsigned char)+0x12>
c001bfda:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001bfe2:	83 c4 0c             	add    esp,0xc
c001bfe5:	89 e8                	mov    eax,ebp
c001bfe7:	5b                   	pop    ebx
c001bfe8:	5e                   	pop    esi
c001bfe9:	5f                   	pop    edi
c001bfea:	5d                   	pop    ebp
c001bfeb:	c3                   	ret    

c001bfec <ideChannel0IRQHandler(regs*, void*)>:
c001bfec:	83 ec 10             	sub    esp,0x10
c001bfef:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bff3:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001bffa:	6a 07                	push   0x7
c001bffc:	6a 00                	push   0x0
c001bffe:	50                   	push   eax
c001bfff:	e8 d8 fe ff ff       	call   c001bedc <IDE::read(unsigned char, unsigned char)>
c001c004:	83 c4 1c             	add    esp,0x1c
c001c007:	c3                   	ret    

c001c008 <ideChannel1IRQHandler(regs*, void*)>:
c001c008:	83 ec 10             	sub    esp,0x10
c001c00b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c00f:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001c016:	6a 07                	push   0x7
c001c018:	6a 01                	push   0x1
c001c01a:	50                   	push   eax
c001c01b:	e8 bc fe ff ff       	call   c001bedc <IDE::read(unsigned char, unsigned char)>
c001c020:	83 c4 1c             	add    esp,0x1c
c001c023:	c3                   	ret    

c001c024 <IDE::enableIRQs(unsigned char, bool)>:
c001c024:	57                   	push   edi
c001c025:	b8 02 00 00 00       	mov    eax,0x2
c001c02a:	56                   	push   esi
c001c02b:	53                   	push   ebx
c001c02c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c030:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001c034:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001c039:	74 02                	je     c001c03d <IDE::enableIRQs(unsigned char, bool)+0x19>
c001c03b:	31 c0                	xor    eax,eax
c001c03d:	0f b6 db             	movzx  ebx,bl
c001c040:	bf 04 00 00 00       	mov    edi,0x4
c001c045:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001c04c:	50                   	push   eax
c001c04d:	6a 0c                	push   0xc
c001c04f:	53                   	push   ebx
c001c050:	56                   	push   esi
c001c051:	e8 c6 fd ff ff       	call   c001be1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c056:	83 c4 10             	add    esp,0x10
c001c059:	50                   	push   eax
c001c05a:	6a 0c                	push   0xc
c001c05c:	53                   	push   ebx
c001c05d:	56                   	push   esi
c001c05e:	e8 79 fe ff ff       	call   c001bedc <IDE::read(unsigned char, unsigned char)>
c001c063:	83 c4 10             	add    esp,0x10
c001c066:	4f                   	dec    edi
c001c067:	75 f0                	jne    c001c059 <IDE::enableIRQs(unsigned char, bool)+0x35>
c001c069:	5b                   	pop    ebx
c001c06a:	5e                   	pop    esi
c001c06b:	5f                   	pop    edi
c001c06c:	c3                   	ret    
c001c06d:	90                   	nop

c001c06e <IDE::open(int, int, void*)>:
c001c06e:	55                   	push   ebp
c001c06f:	57                   	push   edi
c001c070:	56                   	push   esi
c001c071:	53                   	push   ebx
c001c072:	83 ec 1c             	sub    esp,0x1c
c001c075:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001c079:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001c082:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001c08b:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001c092:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001c099:	0f 85 de 02 00 00    	jne    c001c37d <IDE::open(int, int, void*)+0x30f>
c001c09f:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001c0a5:	88 04 24             	mov    BYTE PTR [esp],al
c001c0a8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c0ab:	83 e0 7f             	and    eax,0x7f
c001c0ae:	83 f8 05             	cmp    eax,0x5
c001c0b1:	74 05                	je     c001c0b8 <IDE::open(int, int, void*)+0x4a>
c001c0b3:	83 f8 0f             	cmp    eax,0xf
c001c0b6:	75 32                	jne    c001c0ea <IDE::open(int, int, void*)+0x7c>
c001c0b8:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001c0be:	83 e0 fc             	and    eax,0xfffffffc
c001c0c1:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001c0c8:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001c0ce:	83 e0 fc             	and    eax,0xfffffffc
c001c0d1:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001c0d8:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001c0de:	83 e0 fc             	and    eax,0xfffffffc
c001c0e1:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c0e8:	eb 14                	jmp    c001c0fe <IDE::open(int, int, void*)+0x90>
c001c0ea:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001c0f4:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001c0fe:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001c105:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001c10c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c110:	89 c6                	mov    esi,eax
c001c112:	bf f8 0c 00 00       	mov    edi,0xcf8
c001c117:	c1 e6 10             	shl    esi,0x10
c001c11a:	89 e8                	mov    eax,ebp
c001c11c:	89 fa                	mov    edx,edi
c001c11e:	c1 e0 0b             	shl    eax,0xb
c001c121:	09 f0                	or     eax,esi
c001c123:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001c12a:	c1 e6 08             	shl    esi,0x8
c001c12d:	09 c6                	or     esi,eax
c001c12f:	89 f0                	mov    eax,esi
c001c131:	0d 08 00 00 80       	or     eax,0x80000008
c001c136:	ef                   	out    dx,eax
c001c137:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001c13c:	89 ca                	mov    edx,ecx
c001c13e:	ed                   	in     eax,dx
c001c13f:	c1 e8 10             	shr    eax,0x10
c001c142:	3d ff ff 00 00       	cmp    eax,0xffff
c001c147:	0f 84 f9 00 00 00    	je     c001c246 <IDE::open(int, int, void*)+0x1d8>
c001c14d:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001c153:	89 fa                	mov    edx,edi
c001c155:	89 f0                	mov    eax,esi
c001c157:	ef                   	out    dx,eax
c001c158:	b0 fe                	mov    al,0xfe
c001c15a:	89 ca                	mov    edx,ecx
c001c15c:	ee                   	out    dx,al
c001c15d:	89 f0                	mov    eax,esi
c001c15f:	89 fa                	mov    edx,edi
c001c161:	ef                   	out    dx,eax
c001c162:	89 ca                	mov    edx,ecx
c001c164:	ed                   	in     eax,dx
c001c165:	3c fe                	cmp    al,0xfe
c001c167:	0f 85 a9 00 00 00    	jne    c001c216 <IDE::open(int, int, void*)+0x1a8>
c001c16d:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c001c173:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001c17a:	74 33                	je     c001c1af <IDE::open(int, int, void*)+0x141>
c001c17c:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001c182:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001c186:	40                   	inc    eax
c001c187:	83 ec 0c             	sub    esp,0xc
c001c18a:	0f b6 c0             	movzx  eax,al
c001c18d:	50                   	push   eax
c001c18e:	55                   	push   ebp
c001c18f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c193:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001c199:	51                   	push   ecx
c001c19a:	e8 29 38 ff ff       	call   c000f9c8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001c19f:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001c1a4:	83 c4 1c             	add    esp,0x1c
c001c1a7:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001c1ad:	eb 0a                	jmp    c001c1b9 <IDE::open(int, int, void*)+0x14b>
c001c1af:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001c1b9:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001c1c0:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001c1c7:	c1 e1 10             	shl    ecx,0x10
c001c1ca:	c1 e0 08             	shl    eax,0x8
c001c1cd:	bf f8 0c 00 00       	mov    edi,0xcf8
c001c1d2:	09 c1                	or     ecx,eax
c001c1d4:	89 fa                	mov    edx,edi
c001c1d6:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001c1dd:	c1 e0 0b             	shl    eax,0xb
c001c1e0:	09 c1                	or     ecx,eax
c001c1e2:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001c1e8:	89 c8                	mov    eax,ecx
c001c1ea:	ef                   	out    dx,eax
c001c1eb:	be fc 0c 00 00       	mov    esi,0xcfc
c001c1f0:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001c1f6:	89 f2                	mov    edx,esi
c001c1f8:	ee                   	out    dx,al
c001c1f9:	89 c8                	mov    eax,ecx
c001c1fb:	89 fa                	mov    edx,edi
c001c1fd:	ef                   	out    dx,eax
c001c1fe:	89 f2                	mov    edx,esi
c001c200:	ed                   	in     eax,dx
c001c201:	0f b6 c0             	movzx  eax,al
c001c204:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001c20a:	74 4a                	je     c001c256 <IDE::open(int, int, void*)+0x1e8>
c001c20c:	83 ec 0c             	sub    esp,0xc
c001c20f:	68 88 32 02 c0       	push   0xc0023288
c001c214:	eb 38                	jmp    c001c24e <IDE::open(int, int, void*)+0x1e0>
c001c216:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001c21f:	75 1b                	jne    c001c23c <IDE::open(int, int, void*)+0x1ce>
c001c221:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c001c225:	3d 80 00 00 00       	cmp    eax,0x80
c001c22a:	74 07                	je     c001c233 <IDE::open(int, int, void*)+0x1c5>
c001c22c:	3d 8a 00 00 00       	cmp    eax,0x8a
c001c231:	75 09                	jne    c001c23c <IDE::open(int, int, void*)+0x1ce>
c001c233:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c23a:	eb 1a                	jmp    c001c256 <IDE::open(int, int, void*)+0x1e8>
c001c23c:	83 ec 0c             	sub    esp,0xc
c001c23f:	68 90 32 02 c0       	push   0xc0023290
c001c244:	eb 08                	jmp    c001c24e <IDE::open(int, int, void*)+0x1e0>
c001c246:	83 ec 0c             	sub    esp,0xc
c001c249:	68 c1 32 02 c0       	push   0xc00232c1
c001c24e:	e8 5c 54 ff ff       	call   c00116af <KePanic(char const*)>
c001c253:	83 c4 10             	add    esp,0x10
c001c256:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001c25d:	74 1a                	je     c001c279 <IDE::open(int, int, void*)+0x20b>
c001c25f:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001c265:	83 e0 fc             	and    eax,0xfffffffc
c001c268:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001c26f:	83 c0 08             	add    eax,0x8
c001c272:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001c279:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001c27f:	89 c2                	mov    edx,eax
c001c281:	83 e2 0f             	and    edx,0xf
c001c284:	83 fa 08             	cmp    edx,0x8
c001c287:	75 0a                	jne    c001c293 <IDE::open(int, int, void*)+0x225>
c001c289:	83 e8 02             	sub    eax,0x2
c001c28c:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c293:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001c299:	89 c2                	mov    edx,eax
c001c29b:	83 e2 0f             	and    edx,0xf
c001c29e:	83 fa 08             	cmp    edx,0x8
c001c2a1:	75 0a                	jne    c001c2ad <IDE::open(int, int, void*)+0x23f>
c001c2a3:	83 e8 02             	sub    eax,0x2
c001c2a6:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001c2ad:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001c2b4:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001c2bb:	89 d0                	mov    eax,edx
c001c2bd:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c2c0:	8d 7a 01             	lea    edi,[edx+0x1]
c001c2c3:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c2c7:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001c2cb:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001c2cf:	83 e1 3f             	and    ecx,0x3f
c001c2d2:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001c2d6:	89 f9                	mov    ecx,edi
c001c2d8:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001c2df:	0f b6 c9             	movzx  ecx,cl
c001c2e2:	8d 78 02             	lea    edi,[eax+0x2]
c001c2e5:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001c2e8:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001c2ec:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001c2f0:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001c2f4:	83 e2 3f             	and    edx,0x3f
c001c2f7:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001c2fb:	89 f9                	mov    ecx,edi
c001c2fd:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001c303:	0f b6 d1             	movzx  edx,cl
c001c306:	8d 78 03             	lea    edi,[eax+0x3]
c001c309:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c30c:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c310:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001c314:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001c318:	83 e1 3f             	and    ecx,0x3f
c001c31b:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001c31f:	89 f9                	mov    ecx,edi
c001c321:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001c327:	0f b6 c9             	movzx  ecx,cl
c001c32a:	8d 78 04             	lea    edi,[eax+0x4]
c001c32d:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001c330:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001c334:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001c338:	89 fa                	mov    edx,edi
c001c33a:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001c340:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001c344:	83 e2 3f             	and    edx,0x3f
c001c347:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001c34b:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001c352:	66 85 f6             	test   si,si
c001c355:	74 65                	je     c001c3bc <IDE::open(int, int, void*)+0x34e>
c001c357:	89 f9                	mov    ecx,edi
c001c359:	83 c0 05             	add    eax,0x5
c001c35c:	0f b6 d1             	movzx  edx,cl
c001c35f:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c362:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c366:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001c36a:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001c370:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001c374:	83 e0 3f             	and    eax,0x3f
c001c377:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001c37b:	eb 3f                	jmp    c001c3bc <IDE::open(int, int, void*)+0x34e>
c001c37d:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001c383:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c38a:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001c391:	05 06 02 00 00       	add    eax,0x206
c001c396:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c39d:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001c3a4:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001c3ab:	05 06 02 00 00       	add    eax,0x206
c001c3b0:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001c3b7:	e9 bd fe ff ff       	jmp    c001c279 <IDE::open(int, int, void*)+0x20b>
c001c3bc:	50                   	push   eax
c001c3bd:	50                   	push   eax
c001c3be:	6a 00                	push   0x0
c001c3c0:	53                   	push   ebx
c001c3c1:	e8 30 fa ff ff       	call   c001bdf6 <IDE::prepareInterrupt(unsigned char)>
c001c3c6:	5a                   	pop    edx
c001c3c7:	59                   	pop    ecx
c001c3c8:	6a 01                	push   0x1
c001c3ca:	53                   	push   ebx
c001c3cb:	e8 26 fa ff ff       	call   c001bdf6 <IDE::prepareInterrupt(unsigned char)>
c001c3d0:	83 c4 0c             	add    esp,0xc
c001c3d3:	6a 00                	push   0x0
c001c3d5:	6a 00                	push   0x0
c001c3d7:	53                   	push   ebx
c001c3d8:	e8 47 fc ff ff       	call   c001c024 <IDE::enableIRQs(unsigned char, bool)>
c001c3dd:	83 c4 0c             	add    esp,0xc
c001c3e0:	6a 00                	push   0x0
c001c3e2:	6a 01                	push   0x1
c001c3e4:	53                   	push   ebx
c001c3e5:	e8 3a fc ff ff       	call   c001c024 <IDE::enableIRQs(unsigned char, bool)>
c001c3ea:	83 c4 10             	add    esp,0x10
c001c3ed:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001c3f4:	74 34                	je     c001c42a <IDE::open(int, int, void*)+0x3bc>
c001c3f6:	83 ec 0c             	sub    esp,0xc
c001c3f9:	53                   	push   ebx
c001c3fa:	6a 01                	push   0x1
c001c3fc:	68 ec bf 01 c0       	push   0xc001bfec
c001c401:	6a 0e                	push   0xe
c001c403:	53                   	push   ebx
c001c404:	e8 f9 05 ff ff       	call   c000ca02 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c409:	83 c4 14             	add    esp,0x14
c001c40c:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001c412:	53                   	push   ebx
c001c413:	6a 01                	push   0x1
c001c415:	68 08 c0 01 c0       	push   0xc001c008
c001c41a:	6a 0f                	push   0xf
c001c41c:	53                   	push   ebx
c001c41d:	e8 e0 05 ff ff       	call   c000ca02 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c422:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001c428:	eb 38                	jmp    c001c462 <IDE::open(int, int, void*)+0x3f4>
c001c42a:	83 ec 0c             	sub    esp,0xc
c001c42d:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001c437:	53                   	push   ebx
c001c438:	6a 00                	push   0x0
c001c43a:	68 ec bf 01 c0       	push   0xc001bfec
c001c43f:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001c445:	53                   	push   ebx
c001c446:	e8 b7 05 ff ff       	call   c000ca02 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c44b:	83 c4 14             	add    esp,0x14
c001c44e:	53                   	push   ebx
c001c44f:	6a 00                	push   0x0
c001c451:	68 08 c0 01 c0       	push   0xc001c008
c001c456:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001c45c:	53                   	push   ebx
c001c45d:	e8 a0 05 ff ff       	call   c000ca02 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c462:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c464:	83 c4 20             	add    esp,0x20
c001c467:	83 ec 0c             	sub    esp,0xc
c001c46a:	53                   	push   ebx
c001c46b:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001c46e:	83 c4 0c             	add    esp,0xc
c001c471:	6a 07                	push   0x7
c001c473:	6a 00                	push   0x0
c001c475:	53                   	push   ebx
c001c476:	e8 61 fa ff ff       	call   c001bedc <IDE::read(unsigned char, unsigned char)>
c001c47b:	83 c4 0c             	add    esp,0xc
c001c47e:	6a 07                	push   0x7
c001c480:	6a 01                	push   0x1
c001c482:	53                   	push   ebx
c001c483:	e8 54 fa ff ff       	call   c001bedc <IDE::read(unsigned char, unsigned char)>
c001c488:	83 c4 0c             	add    esp,0xc
c001c48b:	6a 01                	push   0x1
c001c48d:	6a 00                	push   0x0
c001c48f:	53                   	push   ebx
c001c490:	e8 8f fb ff ff       	call   c001c024 <IDE::enableIRQs(unsigned char, bool)>
c001c495:	83 c4 0c             	add    esp,0xc
c001c498:	6a 01                	push   0x1
c001c49a:	6a 01                	push   0x1
c001c49c:	53                   	push   ebx
c001c49d:	e8 82 fb ff ff       	call   c001c024 <IDE::enableIRQs(unsigned char, bool)>
c001c4a2:	83 c4 2c             	add    esp,0x2c
c001c4a5:	31 c0                	xor    eax,eax
c001c4a7:	5b                   	pop    ebx
c001c4a8:	5e                   	pop    esi
c001c4a9:	5f                   	pop    edi
c001c4aa:	5d                   	pop    ebp
c001c4ab:	c3                   	ret    

c001c4ac <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001c4ac:	55                   	push   ebp
c001c4ad:	57                   	push   edi
c001c4ae:	56                   	push   esi
c001c4af:	53                   	push   ebx
c001c4b0:	83 ec 1c             	sub    esp,0x1c
c001c4b3:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001c4b7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c4bb:	8d 42 f8             	lea    eax,[edx-0x8]
c001c4be:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c4c2:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001c4c6:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001c4ca:	3c 03                	cmp    al,0x3
c001c4cc:	77 5a                	ja     c001c528 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001c4ce:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c4d2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c4d6:	0f b6 db             	movzx  ebx,bl
c001c4d9:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001c4dc:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c4e1:	0c 80                	or     al,0x80
c001c4e3:	50                   	push   eax
c001c4e4:	6a 0c                	push   0xc
c001c4e6:	53                   	push   ebx
c001c4e7:	56                   	push   esi
c001c4e8:	e8 2f f9 ff ff       	call   c001be1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c4ed:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001c4f2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c4f6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c4fa:	0f b6 d2             	movzx  edx,dl
c001c4fd:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001c501:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c503:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c508:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001c50c:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001c510:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c514:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c51c:	83 c4 2c             	add    esp,0x2c
c001c51f:	5b                   	pop    ebx
c001c520:	5e                   	pop    esi
c001c521:	5f                   	pop    edi
c001c522:	5d                   	pop    ebp
c001c523:	e9 f4 f8 ff ff       	jmp    c001be1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c528:	0f b6 c2             	movzx  eax,dl
c001c52b:	83 f8 07             	cmp    eax,0x7
c001c52e:	77 12                	ja     c001c542 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001c530:	0f b6 c2             	movzx  eax,dl
c001c533:	0f b6 db             	movzx  ebx,bl
c001c536:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001c53e:	01 c2                	add    edx,eax
c001c540:	eb 2f                	jmp    c001c571 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001c542:	83 f8 0d             	cmp    eax,0xd
c001c545:	77 13                	ja     c001c55a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001c547:	0f b6 db             	movzx  ebx,bl
c001c54a:	0f b6 d2             	movzx  edx,dl
c001c54d:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001c554:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001c558:	eb 17                	jmp    c001c571 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001c55a:	83 f8 15             	cmp    eax,0x15
c001c55d:	77 14                	ja     c001c573 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001c55f:	0f b6 db             	movzx  ebx,bl
c001c562:	0f b6 d2             	movzx  edx,dl
c001c565:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001c56d:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001c571:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c573:	83 c4 1c             	add    esp,0x1c
c001c576:	5b                   	pop    ebx
c001c577:	5e                   	pop    esi
c001c578:	5f                   	pop    edi
c001c579:	5d                   	pop    ebp
c001c57a:	c3                   	ret    
c001c57b:	90                   	nop

c001c57c <IDE::detect()>:
c001c57c:	55                   	push   ebp
c001c57d:	57                   	push   edi
c001c57e:	56                   	push   esi
c001c57f:	53                   	push   ebx
c001c580:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001c586:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001c58d:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001c594:	0f 85 a4 02 00 00    	jne    c001c83e <IDE::detect()+0x2c2>
c001c59a:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001c5a1:	31 f6                	xor    esi,esi
c001c5a3:	31 ed                	xor    ebp,ebp
c001c5a5:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c5ad:	89 e8                	mov    eax,ebp
c001c5af:	c1 e0 06             	shl    eax,0x6
c001c5b2:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001c5ba:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c5be:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c5c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5c6:	c1 e0 04             	shl    eax,0x4
c001c5c9:	83 c8 a0             	or     eax,0xffffffa0
c001c5cc:	0f b6 c0             	movzx  eax,al
c001c5cf:	50                   	push   eax
c001c5d0:	6a 06                	push   0x6
c001c5d2:	56                   	push   esi
c001c5d3:	53                   	push   ebx
c001c5d4:	e8 43 f8 ff ff       	call   c001be1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c5d9:	83 c4 0c             	add    esp,0xc
c001c5dc:	6a 0c                	push   0xc
c001c5de:	56                   	push   esi
c001c5df:	53                   	push   ebx
c001c5e0:	e8 f7 f8 ff ff       	call   c001bedc <IDE::read(unsigned char, unsigned char)>
c001c5e5:	83 c4 0c             	add    esp,0xc
c001c5e8:	6a 0c                	push   0xc
c001c5ea:	56                   	push   esi
c001c5eb:	53                   	push   ebx
c001c5ec:	e8 eb f8 ff ff       	call   c001bedc <IDE::read(unsigned char, unsigned char)>
c001c5f1:	83 c4 0c             	add    esp,0xc
c001c5f4:	6a 0c                	push   0xc
c001c5f6:	56                   	push   esi
c001c5f7:	53                   	push   ebx
c001c5f8:	e8 df f8 ff ff       	call   c001bedc <IDE::read(unsigned char, unsigned char)>
c001c5fd:	83 c4 0c             	add    esp,0xc
c001c600:	6a 0c                	push   0xc
c001c602:	56                   	push   esi
c001c603:	53                   	push   ebx
c001c604:	e8 d3 f8 ff ff       	call   c001bedc <IDE::read(unsigned char, unsigned char)>
c001c609:	68 ec 00 00 00       	push   0xec
c001c60e:	6a 07                	push   0x7
c001c610:	56                   	push   esi
c001c611:	53                   	push   ebx
c001c612:	e8 05 f8 ff ff       	call   c001be1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c617:	83 c4 1c             	add    esp,0x1c
c001c61a:	6a 0c                	push   0xc
c001c61c:	56                   	push   esi
c001c61d:	53                   	push   ebx
c001c61e:	e8 b9 f8 ff ff       	call   c001bedc <IDE::read(unsigned char, unsigned char)>
c001c623:	83 c4 0c             	add    esp,0xc
c001c626:	6a 0c                	push   0xc
c001c628:	56                   	push   esi
c001c629:	53                   	push   ebx
c001c62a:	e8 ad f8 ff ff       	call   c001bedc <IDE::read(unsigned char, unsigned char)>
c001c62f:	83 c4 0c             	add    esp,0xc
c001c632:	6a 0c                	push   0xc
c001c634:	56                   	push   esi
c001c635:	53                   	push   ebx
c001c636:	e8 a1 f8 ff ff       	call   c001bedc <IDE::read(unsigned char, unsigned char)>
c001c63b:	83 c4 0c             	add    esp,0xc
c001c63e:	6a 0c                	push   0xc
c001c640:	56                   	push   esi
c001c641:	53                   	push   ebx
c001c642:	e8 95 f8 ff ff       	call   c001bedc <IDE::read(unsigned char, unsigned char)>
c001c647:	83 c4 0c             	add    esp,0xc
c001c64a:	6a 0c                	push   0xc
c001c64c:	56                   	push   esi
c001c64d:	53                   	push   ebx
c001c64e:	e8 89 f8 ff ff       	call   c001bedc <IDE::read(unsigned char, unsigned char)>
c001c653:	83 c4 10             	add    esp,0x10
c001c656:	84 c0                	test   al,al
c001c658:	0f 84 60 01 00 00    	je     c001c7be <IDE::detect()+0x242>
c001c65e:	31 ff                	xor    edi,edi
c001c660:	50                   	push   eax
c001c661:	6a 0c                	push   0xc
c001c663:	56                   	push   esi
c001c664:	53                   	push   ebx
c001c665:	e8 72 f8 ff ff       	call   c001bedc <IDE::read(unsigned char, unsigned char)>
c001c66a:	83 c4 10             	add    esp,0x10
c001c66d:	a8 01                	test   al,0x1
c001c66f:	0f 85 6a 01 00 00    	jne    c001c7df <IDE::detect()+0x263>
c001c675:	a8 80                	test   al,0x80
c001c677:	75 04                	jne    c001c67d <IDE::detect()+0x101>
c001c679:	a8 08                	test   al,0x8
c001c67b:	75 23                	jne    c001c6a0 <IDE::detect()+0x124>
c001c67d:	47                   	inc    edi
c001c67e:	81 ff 17 01 00 00    	cmp    edi,0x117
c001c684:	7e da                	jle    c001c660 <IDE::detect()+0xe4>
c001c686:	83 ec 0c             	sub    esp,0xc
c001c689:	6a 32                	push   0x32
c001c68b:	e8 f0 9d ff ff       	call   c0016480 <milliTenthSleep(unsigned int)>
c001c690:	83 c4 10             	add    esp,0x10
c001c693:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001c699:	75 c5                	jne    c001c660 <IDE::detect()+0xe4>
c001c69b:	e9 3f 01 00 00       	jmp    c001c7df <IDE::detect()+0x263>
c001c6a0:	31 c9                	xor    ecx,ecx
c001c6a2:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001c6a6:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001c6aa:	83 ec 0c             	sub    esp,0xc
c001c6ad:	68 80 00 00 00       	push   0x80
c001c6b2:	57                   	push   edi
c001c6b3:	6a 00                	push   0x0
c001c6b5:	56                   	push   esi
c001c6b6:	53                   	push   ebx
c001c6b7:	e8 f0 fd ff ff       	call   c001c4ac <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001c6bc:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001c6c1:	89 e8                	mov    eax,ebp
c001c6c3:	89 d1                	mov    ecx,edx
c001c6c5:	c1 e0 06             	shl    eax,0x6
c001c6c8:	01 d8                	add    eax,ebx
c001c6ca:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001c6d1:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001c6d8:	89 f2                	mov    edx,esi
c001c6da:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001c6e0:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001c6e4:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001c6ea:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c6ee:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001c6f5:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001c6fd:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001c704:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001c70c:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001c712:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001c719:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001c71f:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c723:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c727:	83 c4 20             	add    esp,0x20
c001c72a:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001c72d:	83 c0 02             	add    eax,0x2
c001c730:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001c736:	83 c7 02             	add    edi,0x2
c001c739:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001c73c:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001c742:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001c746:	75 e2                	jne    c001c72a <IDE::detect()+0x1ae>
c001c748:	89 e8                	mov    eax,ebp
c001c74a:	c1 e0 06             	shl    eax,0x6
c001c74d:	01 d8                	add    eax,ebx
c001c74f:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001c756:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001c75d:	c1 ea 09             	shr    edx,0x9
c001c760:	83 e2 01             	and    edx,0x1
c001c763:	80 e1 01             	and    cl,0x1
c001c766:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001c76c:	75 22                	jne    c001c790 <IDE::detect()+0x214>
c001c76e:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001c775:	74 46                	je     c001c7bd <IDE::detect()+0x241>
c001c777:	83 ec 0c             	sub    esp,0xc
c001c77a:	68 7c 01 00 00       	push   0x17c
c001c77f:	e8 32 b3 fe ff       	call   c0007ab6 <malloc>
c001c784:	89 c7                	mov    edi,eax
c001c786:	89 04 24             	mov    DWORD PTR [esp],eax
c001c789:	e8 1a 05 00 00       	call   c001cca8 <ATA::ATA()>
c001c78e:	eb 17                	jmp    c001c7a7 <IDE::detect()+0x22b>
c001c790:	83 ec 0c             	sub    esp,0xc
c001c793:	68 84 01 00 00       	push   0x184
c001c798:	e8 19 b3 fe ff       	call   c0007ab6 <malloc>
c001c79d:	89 c7                	mov    edi,eax
c001c79f:	89 04 24             	mov    DWORD PTR [esp],eax
c001c7a2:	e8 45 0e 00 00       	call   c001d5ec <ATAPI::ATAPI()>
c001c7a7:	5a                   	pop    edx
c001c7a8:	59                   	pop    ecx
c001c7a9:	57                   	push   edi
c001c7aa:	53                   	push   ebx
c001c7ab:	e8 a6 02 ff ff       	call   c000ca56 <Device::addChild(Device*)>
c001c7b0:	8b 07                	mov    eax,DWORD PTR [edi]
c001c7b2:	53                   	push   ebx
c001c7b3:	55                   	push   ebp
c001c7b4:	6a 00                	push   0x0
c001c7b6:	57                   	push   edi
c001c7b7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c7ba:	83 c4 20             	add    esp,0x20
c001c7bd:	45                   	inc    ebp
c001c7be:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001c7c3:	74 0d                	je     c001c7d2 <IDE::detect()+0x256>
c001c7c5:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001c7cd:	e9 db fd ff ff       	jmp    c001c5ad <IDE::detect()+0x31>
c001c7d2:	4e                   	dec    esi
c001c7d3:	74 69                	je     c001c83e <IDE::detect()+0x2c2>
c001c7d5:	be 01 00 00 00       	mov    esi,0x1
c001c7da:	e9 c6 fd ff ff       	jmp    c001c5a5 <IDE::detect()+0x29>
c001c7df:	50                   	push   eax
c001c7e0:	6a 04                	push   0x4
c001c7e2:	56                   	push   esi
c001c7e3:	53                   	push   ebx
c001c7e4:	e8 f3 f6 ff ff       	call   c001bedc <IDE::read(unsigned char, unsigned char)>
c001c7e9:	83 c4 0c             	add    esp,0xc
c001c7ec:	89 c7                	mov    edi,eax
c001c7ee:	6a 05                	push   0x5
c001c7f0:	56                   	push   esi
c001c7f1:	53                   	push   ebx
c001c7f2:	e8 e5 f6 ff ff       	call   c001bedc <IDE::read(unsigned char, unsigned char)>
c001c7f7:	83 c4 10             	add    esp,0x10
c001c7fa:	89 f9                	mov    ecx,edi
c001c7fc:	0f b6 c0             	movzx  eax,al
c001c7ff:	0f b6 f9             	movzx  edi,cl
c001c802:	83 ff 14             	cmp    edi,0x14
c001c805:	75 07                	jne    c001c80e <IDE::detect()+0x292>
c001c807:	3d eb 00 00 00       	cmp    eax,0xeb
c001c80c:	eb 0a                	jmp    c001c818 <IDE::detect()+0x29c>
c001c80e:	3d 96 00 00 00       	cmp    eax,0x96
c001c813:	75 a9                	jne    c001c7be <IDE::detect()+0x242>
c001c815:	83 ff 69             	cmp    edi,0x69
c001c818:	75 a4                	jne    c001c7be <IDE::detect()+0x242>
c001c81a:	68 a1 00 00 00       	push   0xa1
c001c81f:	6a 07                	push   0x7
c001c821:	56                   	push   esi
c001c822:	53                   	push   ebx
c001c823:	e8 f4 f5 ff ff       	call   c001be1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c828:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001c82f:	e8 4c 9c ff ff       	call   c0016480 <milliTenthSleep(unsigned int)>
c001c834:	83 c4 10             	add    esp,0x10
c001c837:	b1 01                	mov    cl,0x1
c001c839:	e9 64 fe ff ff       	jmp    c001c6a2 <IDE::detect()+0x126>
c001c83e:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c844:	5b                   	pop    ebx
c001c845:	5e                   	pop    esi
c001c846:	5f                   	pop    edi
c001c847:	5d                   	pop    ebp
c001c848:	c3                   	ret    
c001c849:	90                   	nop

c001c84a <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001c84a:	55                   	push   ebp
c001c84b:	57                   	push   edi
c001c84c:	56                   	push   esi
c001c84d:	53                   	push   ebx
c001c84e:	83 ec 1c             	sub    esp,0x1c
c001c851:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c855:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c859:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c85d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001c861:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c865:	88 c3                	mov    bl,al
c001c867:	25 ff 00 00 00       	and    eax,0xff
c001c86c:	0f 84 88 00 00 00    	je     c001c8fa <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c872:	83 ec 0c             	sub    esp,0xc
c001c875:	89 c7                	mov    edi,eax
c001c877:	68 eb 32 02 c0       	push   0xc00232eb
c001c87c:	e8 c4 e0 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001c881:	83 c4 10             	add    esp,0x10
c001c884:	83 ff 01             	cmp    edi,0x1
c001c887:	74 6b                	je     c001c8f4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001c889:	83 ff 02             	cmp    edi,0x2
c001c88c:	75 58                	jne    c001c8e6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001c88e:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001c893:	01 ff                	add    edi,edi
c001c895:	50                   	push   eax
c001c896:	09 fe                	or     esi,edi
c001c898:	6a 01                	push   0x1
c001c89a:	89 f0                	mov    eax,esi
c001c89c:	0f b6 f0             	movzx  esi,al
c001c89f:	c1 e6 06             	shl    esi,0x6
c001c8a2:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001c8aa:	50                   	push   eax
c001c8ab:	55                   	push   ebp
c001c8ac:	e8 2b f6 ff ff       	call   c001bedc <IDE::read(unsigned char, unsigned char)>
c001c8b1:	83 c4 10             	add    esp,0x10
c001c8b4:	a8 01                	test   al,0x1
c001c8b6:	74 02                	je     c001c8ba <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001c8b8:	b3 07                	mov    bl,0x7
c001c8ba:	a8 02                	test   al,0x2
c001c8bc:	74 02                	je     c001c8c0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001c8be:	b3 03                	mov    bl,0x3
c001c8c0:	a8 04                	test   al,0x4
c001c8c2:	74 02                	je     c001c8c6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001c8c4:	b3 14                	mov    bl,0x14
c001c8c6:	a8 08                	test   al,0x8
c001c8c8:	74 02                	je     c001c8cc <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001c8ca:	b3 03                	mov    bl,0x3
c001c8cc:	a8 10                	test   al,0x10
c001c8ce:	74 02                	je     c001c8d2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001c8d0:	b3 15                	mov    bl,0x15
c001c8d2:	a8 20                	test   al,0x20
c001c8d4:	74 02                	je     c001c8d8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001c8d6:	b3 03                	mov    bl,0x3
c001c8d8:	a8 40                	test   al,0x40
c001c8da:	74 02                	je     c001c8de <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001c8dc:	b3 16                	mov    bl,0x16
c001c8de:	a8 80                	test   al,0x80
c001c8e0:	74 18                	je     c001c8fa <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c8e2:	b3 0d                	mov    bl,0xd
c001c8e4:	eb 14                	jmp    c001c8fa <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c8e6:	83 ff 03             	cmp    edi,0x3
c001c8e9:	74 0d                	je     c001c8f8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001c8eb:	83 ff 04             	cmp    edi,0x4
c001c8ee:	75 0a                	jne    c001c8fa <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c8f0:	b3 08                	mov    bl,0x8
c001c8f2:	eb 06                	jmp    c001c8fa <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c8f4:	b3 13                	mov    bl,0x13
c001c8f6:	eb 02                	jmp    c001c8fa <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c8f8:	b3 17                	mov    bl,0x17
c001c8fa:	83 c4 1c             	add    esp,0x1c
c001c8fd:	88 d8                	mov    al,bl
c001c8ff:	5b                   	pop    ebx
c001c900:	5e                   	pop    esi
c001c901:	5f                   	pop    edi
c001c902:	5d                   	pop    ebp
c001c903:	c3                   	ret    

c001c904 <IDE::polling(unsigned char, unsigned int)>:
c001c904:	57                   	push   edi
c001c905:	56                   	push   esi
c001c906:	53                   	push   ebx
c001c907:	bb 04 00 00 00       	mov    ebx,0x4
c001c90c:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001c910:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c915:	52                   	push   edx
c001c916:	6a 0c                	push   0xc
c001c918:	56                   	push   esi
c001c919:	57                   	push   edi
c001c91a:	e8 bd f5 ff ff       	call   c001bedc <IDE::read(unsigned char, unsigned char)>
c001c91f:	83 c4 10             	add    esp,0x10
c001c922:	4b                   	dec    ebx
c001c923:	75 f0                	jne    c001c915 <IDE::polling(unsigned char, unsigned int)+0x11>
c001c925:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c92a:	50                   	push   eax
c001c92b:	6a 0c                	push   0xc
c001c92d:	56                   	push   esi
c001c92e:	57                   	push   edi
c001c92f:	e8 a8 f5 ff ff       	call   c001bedc <IDE::read(unsigned char, unsigned char)>
c001c934:	83 c4 10             	add    esp,0x10
c001c937:	a8 01                	test   al,0x1
c001c939:	75 17                	jne    c001c952 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c93b:	a8 20                	test   al,0x20
c001c93d:	75 0f                	jne    c001c94e <IDE::polling(unsigned char, unsigned int)+0x4a>
c001c93f:	4b                   	dec    ebx
c001c940:	74 10                	je     c001c952 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c942:	a8 80                	test   al,0x80
c001c944:	75 e4                	jne    c001c92a <IDE::polling(unsigned char, unsigned int)+0x26>
c001c946:	a8 08                	test   al,0x8
c001c948:	74 e0                	je     c001c92a <IDE::polling(unsigned char, unsigned int)+0x26>
c001c94a:	31 c0                	xor    eax,eax
c001c94c:	eb 06                	jmp    c001c954 <IDE::polling(unsigned char, unsigned int)+0x50>
c001c94e:	b0 01                	mov    al,0x1
c001c950:	eb 02                	jmp    c001c954 <IDE::polling(unsigned char, unsigned int)+0x50>
c001c952:	b0 02                	mov    al,0x2
c001c954:	5b                   	pop    ebx
c001c955:	5e                   	pop    esi
c001c956:	5f                   	pop    edi
c001c957:	c3                   	ret    

c001c958 <SATABus::close(int, int, void*)>:
c001c958:	31 c0                	xor    eax,eax
c001c95a:	c3                   	ret    
c001c95b:	90                   	nop

c001c95c <SATABus::detect()>:
c001c95c:	c3                   	ret    
c001c95d:	90                   	nop

c001c95e <SATABus::SATABus()>:
c001c95e:	83 ec 0c             	sub    esp,0xc
c001c961:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c965:	83 ec 08             	sub    esp,0x8
c001c968:	68 24 33 02 c0       	push   0xc0023324
c001c96d:	50                   	push   eax
c001c96e:	e8 25 04 ff ff       	call   c000cd98 <HardDiskController::HardDiskController(char const*)>
c001c973:	83 c4 10             	add    esp,0x10
c001c976:	ba 50 33 02 c0       	mov    edx,0xc0023350
c001c97b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c97f:	89 10                	mov    DWORD PTR [eax],edx
c001c981:	83 ec 0c             	sub    esp,0xc
c001c984:	6a 50                	push   0x50
c001c986:	e8 03 b5 fe ff       	call   c0007e8e <Phys::allocateContiguousPages(int)>
c001c98b:	83 c4 10             	add    esp,0x10
c001c98e:	89 c2                	mov    edx,eax
c001c990:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c994:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001c99a:	83 ec 0c             	sub    esp,0xc
c001c99d:	6a 50                	push   0x50
c001c99f:	e8 69 cc fe ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c001c9a4:	83 c4 10             	add    esp,0x10
c001c9a7:	89 c2                	mov    edx,eax
c001c9a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9ad:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001c9b3:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c001c9b8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c9bc:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001c9c2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c9c6:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001c9cc:	83 ec 0c             	sub    esp,0xc
c001c9cf:	6a 03                	push   0x3
c001c9d1:	6a 50                	push   0x50
c001c9d3:	51                   	push   ecx
c001c9d4:	52                   	push   edx
c001c9d5:	50                   	push   eax
c001c9d6:	e8 3f d5 fe ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001c9db:	83 c4 20             	add    esp,0x20
c001c9de:	90                   	nop
c001c9df:	83 c4 0c             	add    esp,0xc
c001c9e2:	c3                   	ret    
c001c9e3:	90                   	nop

c001c9e4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001c9e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c9e8:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001c9eb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001c9ee:	09 c2                	or     edx,eax
c001c9f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c9f4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001c9fa:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c9fc:	31 c0                	xor    eax,eax
c001c9fe:	c1 e9 08             	shr    ecx,0x8
c001ca01:	83 e1 0f             	and    ecx,0xf
c001ca04:	39 c8                	cmp    eax,ecx
c001ca06:	74 0a                	je     c001ca12 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001ca08:	f6 c2 01             	test   dl,0x1
c001ca0b:	74 08                	je     c001ca15 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001ca0d:	d1 ea                	shr    edx,1
c001ca0f:	40                   	inc    eax
c001ca10:	eb f2                	jmp    c001ca04 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001ca12:	83 c8 ff             	or     eax,0xffffffff
c001ca15:	c3                   	ret    

c001ca16 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001ca16:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ca1a:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001ca1d:	89 c2                	mov    edx,eax
c001ca1f:	c1 ea 08             	shr    edx,0x8
c001ca22:	83 e2 0f             	and    edx,0xf
c001ca25:	4a                   	dec    edx
c001ca26:	75 32                	jne    c001ca5a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001ca28:	83 e0 0f             	and    eax,0xf
c001ca2b:	83 f8 03             	cmp    eax,0x3
c001ca2e:	75 2a                	jne    c001ca5a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001ca30:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001ca33:	b8 02 00 00 00       	mov    eax,0x2
c001ca38:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001ca3e:	74 1c                	je     c001ca5c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001ca40:	b8 04 00 00 00       	mov    eax,0x4
c001ca45:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001ca4b:	74 0f                	je     c001ca5c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001ca4d:	31 c0                	xor    eax,eax
c001ca4f:	83 fa 03             	cmp    edx,0x3
c001ca52:	0f 94 c0             	sete   al
c001ca55:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001ca59:	c3                   	ret    
c001ca5a:	31 c0                	xor    eax,eax
c001ca5c:	c3                   	ret    
c001ca5d:	90                   	nop

c001ca5e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001ca5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ca62:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ca65:	0f ba e2 0f          	bt     edx,0xf
c001ca69:	72 f7                	jb     c001ca62 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001ca6b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ca6e:	83 ca 10             	or     edx,0x10
c001ca71:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001ca74:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ca77:	83 ca 01             	or     edx,0x1
c001ca7a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001ca7d:	c3                   	ret    

c001ca7e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001ca7e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ca82:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ca85:	83 e2 fe             	and    edx,0xfffffffe
c001ca88:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001ca8b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ca8e:	83 e2 ef             	and    edx,0xffffffef
c001ca91:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001ca94:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ca97:	0f ba e2 0e          	bt     edx,0xe
c001ca9b:	72 f7                	jb     c001ca94 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001ca9d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001caa0:	0f ba e2 0f          	bt     edx,0xf
c001caa4:	72 ee                	jb     c001ca94 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001caa6:	c3                   	ret    
c001caa7:	90                   	nop

c001caa8 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001caa8:	55                   	push   ebp
c001caa9:	57                   	push   edi
c001caaa:	56                   	push   esi
c001caab:	53                   	push   ebx
c001caac:	83 ec 1c             	sub    esp,0x1c
c001caaf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001cab3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001cab7:	53                   	push   ebx
c001cab8:	56                   	push   esi
c001cab9:	e8 c0 ff ff ff       	call   c001ca7e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001cabe:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001cac2:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001cac8:	83 ec 0c             	sub    esp,0xc
c001cacb:	c1 e5 0a             	shl    ebp,0xa
c001cace:	01 e8                	add    eax,ebp
c001cad0:	89 03                	mov    DWORD PTR [ebx],eax
c001cad2:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cad4:	68 00 04 00 00       	push   0x400
c001cad9:	6a 00                	push   0x0
c001cadb:	50                   	push   eax
c001cadc:	e8 0f 3a fe ff       	call   c00004f0 <memset>
c001cae1:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001cae7:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001caeb:	01 e8                	add    eax,ebp
c001caed:	83 c4 1c             	add    esp,0x1c
c001caf0:	89 03                	mov    DWORD PTR [ebx],eax
c001caf2:	c1 e2 08             	shl    edx,0x8
c001caf5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001cafc:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c001cb02:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001cb08:	01 f8                	add    eax,edi
c001cb0a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001cb0d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001cb10:	68 00 01 00 00       	push   0x100
c001cb15:	6a 00                	push   0x0
c001cb17:	50                   	push   eax
c001cb18:	e8 d3 39 fe ff       	call   c00004f0 <memset>
c001cb1d:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c001cb23:	01 fa                	add    edx,edi
c001cb25:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001cb29:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001cb2c:	c1 e7 0d             	shl    edi,0xd
c001cb2f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001cb36:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001cb3c:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001cb42:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cb46:	31 ff                	xor    edi,edi
c001cb48:	83 c4 10             	add    esp,0x10
c001cb4b:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001cb51:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cb55:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001cb5b:	83 c5 20             	add    ebp,0x20
c001cb5e:	01 f8                	add    eax,edi
c001cb60:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001cb63:	52                   	push   edx
c001cb64:	68 00 01 00 00       	push   0x100
c001cb69:	6a 00                	push   0x0
c001cb6b:	50                   	push   eax
c001cb6c:	e8 7f 39 fe ff       	call   c00004f0 <memset>
c001cb71:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cb75:	83 c4 10             	add    esp,0x10
c001cb78:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001cb7e:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001cb85:	01 f8                	add    eax,edi
c001cb87:	81 c7 00 01 00 00    	add    edi,0x100
c001cb8d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001cb90:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001cb96:	75 b3                	jne    c001cb4b <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c001cb98:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001cb9f:	50                   	push   eax
c001cba0:	50                   	push   eax
c001cba1:	53                   	push   ebx
c001cba2:	56                   	push   esi
c001cba3:	e8 b6 fe ff ff       	call   c001ca5e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001cba8:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001cbaf:	83 c4 2c             	add    esp,0x2c
c001cbb2:	5b                   	pop    ebx
c001cbb3:	5e                   	pop    esi
c001cbb4:	5f                   	pop    edi
c001cbb5:	5d                   	pop    ebp
c001cbb6:	c3                   	ret    
c001cbb7:	90                   	nop

c001cbb8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001cbb8:	55                   	push   ebp
c001cbb9:	57                   	push   edi
c001cbba:	56                   	push   esi
c001cbbb:	53                   	push   ebx
c001cbbc:	31 db                	xor    ebx,ebx
c001cbbe:	83 ec 0c             	sub    esp,0xc
c001cbc1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cbc5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001cbc9:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001cbcc:	f7 c7 01 00 00 00    	test   edi,0x1
c001cbd2:	74 7a                	je     c001cc4e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001cbd4:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001cbd8:	89 d8                	mov    eax,ebx
c001cbda:	c1 e0 07             	shl    eax,0x7
c001cbdd:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001cbe4:	55                   	push   ebp
c001cbe5:	56                   	push   esi
c001cbe6:	e8 2b fe ff ff       	call   c001ca16 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001cbeb:	5a                   	pop    edx
c001cbec:	83 f8 01             	cmp    eax,0x1
c001cbef:	59                   	pop    ecx
c001cbf0:	75 21                	jne    c001cc13 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001cbf2:	50                   	push   eax
c001cbf3:	53                   	push   ebx
c001cbf4:	55                   	push   ebp
c001cbf5:	56                   	push   esi
c001cbf6:	e8 ad fe ff ff       	call   c001caa8 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001cbfb:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001cc02:	e8 af ae fe ff       	call   c0007ab6 <malloc>
c001cc07:	89 c5                	mov    ebp,eax
c001cc09:	89 04 24             	mov    DWORD PTR [esp],eax
c001cc0c:	e8 99 10 00 00       	call   c001dcaa <SATA::SATA()>
c001cc11:	eb 24                	jmp    c001cc37 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001cc13:	83 f8 04             	cmp    eax,0x4
c001cc16:	75 36                	jne    c001cc4e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001cc18:	51                   	push   ecx
c001cc19:	53                   	push   ebx
c001cc1a:	55                   	push   ebp
c001cc1b:	56                   	push   esi
c001cc1c:	e8 87 fe ff ff       	call   c001caa8 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001cc21:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001cc28:	e8 89 ae fe ff       	call   c0007ab6 <malloc>
c001cc2d:	89 c5                	mov    ebp,eax
c001cc2f:	89 04 24             	mov    DWORD PTR [esp],eax
c001cc32:	e8 d5 17 00 00       	call   c001e40c <SATAPI::SATAPI()>
c001cc37:	58                   	pop    eax
c001cc38:	5a                   	pop    edx
c001cc39:	55                   	push   ebp
c001cc3a:	56                   	push   esi
c001cc3b:	e8 16 fe fe ff       	call   c000ca56 <Device::addChild(Device*)>
c001cc40:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001cc43:	56                   	push   esi
c001cc44:	6a 00                	push   0x0
c001cc46:	53                   	push   ebx
c001cc47:	55                   	push   ebp
c001cc48:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001cc4b:	83 c4 20             	add    esp,0x20
c001cc4e:	d1 ef                	shr    edi,1
c001cc50:	43                   	inc    ebx
c001cc51:	83 fb 20             	cmp    ebx,0x20
c001cc54:	0f 85 72 ff ff ff    	jne    c001cbcc <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001cc5a:	83 c4 0c             	add    esp,0xc
c001cc5d:	5b                   	pop    ebx
c001cc5e:	5e                   	pop    esi
c001cc5f:	5f                   	pop    edi
c001cc60:	5d                   	pop    ebp
c001cc61:	c3                   	ret    

c001cc62 <SATABus::open(int, int, void*)>:
c001cc62:	83 ec 14             	sub    esp,0x14
c001cc65:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cc69:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001cc6f:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001cc75:	52                   	push   edx
c001cc76:	50                   	push   eax
c001cc77:	e8 3c ff ff ff       	call   c001cbb8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001cc7c:	31 c0                	xor    eax,eax
c001cc7e:	83 c4 1c             	add    esp,0x1c
c001cc81:	c3                   	ret    

c001cc82 <ATA::close(int, int, void*)>:
c001cc82:	83 ec 0c             	sub    esp,0xc
c001cc85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc89:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cc8f:	85 c0                	test   eax,eax
c001cc91:	74 0c                	je     c001cc9f <ATA::close(int, int, void*)+0x1d>
c001cc93:	83 ec 0c             	sub    esp,0xc
c001cc96:	8b 10                	mov    edx,DWORD PTR [eax]
c001cc98:	50                   	push   eax
c001cc99:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001cc9c:	83 c4 10             	add    esp,0x10
c001cc9f:	31 c0                	xor    eax,eax
c001cca1:	83 c4 0c             	add    esp,0xc
c001cca4:	c3                   	ret    
c001cca5:	90                   	nop

c001cca6 <ATA::powerSaving(PowerSavingLevel)>:
c001cca6:	c3                   	ret    
c001cca7:	90                   	nop

c001cca8 <ATA::ATA()>:
c001cca8:	83 ec 0c             	sub    esp,0xc
c001ccab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccaf:	83 ec 04             	sub    esp,0x4
c001ccb2:	68 00 02 00 00       	push   0x200
c001ccb7:	68 1d 34 02 c0       	push   0xc002341d
c001ccbc:	50                   	push   eax
c001ccbd:	e8 60 01 ff ff       	call   c000ce22 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ccc2:	83 c4 10             	add    esp,0x10
c001ccc5:	ba 90 33 02 c0       	mov    edx,0xc0023390
c001ccca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccce:	89 10                	mov    DWORD PTR [eax],edx
c001ccd0:	90                   	nop
c001ccd1:	83 c4 0c             	add    esp,0xc
c001ccd4:	c3                   	ret    
c001ccd5:	90                   	nop

c001ccd6 <ATA::flush(bool)>:
c001ccd6:	53                   	push   ebx
c001ccd7:	83 ec 08             	sub    esp,0x8
c001ccda:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ccde:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001cce3:	83 f8 01             	cmp    eax,0x1
c001cce6:	19 c0                	sbb    eax,eax
c001cce8:	83 e0 fd             	and    eax,0xfffffffd
c001cceb:	05 ea 00 00 00       	add    eax,0xea
c001ccf0:	50                   	push   eax
c001ccf1:	6a 07                	push   0x7
c001ccf3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ccfa:	50                   	push   eax
c001ccfb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cd01:	e8 16 f1 ff ff       	call   c001be1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cd06:	83 c4 0c             	add    esp,0xc
c001cd09:	6a 00                	push   0x0
c001cd0b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cd12:	50                   	push   eax
c001cd13:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cd19:	e8 e6 fb ff ff       	call   c001c904 <IDE::polling(unsigned char, unsigned int)>
c001cd1e:	83 c4 18             	add    esp,0x18
c001cd21:	5b                   	pop    ebx
c001cd22:	c3                   	ret    
c001cd23:	90                   	nop

c001cd24 <ATA::readyForCommand()>:
c001cd24:	56                   	push   esi
c001cd25:	53                   	push   ebx
c001cd26:	53                   	push   ebx
c001cd27:	31 db                	xor    ebx,ebx
c001cd29:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cd2d:	51                   	push   ecx
c001cd2e:	6a 0c                	push   0xc
c001cd30:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001cd37:	50                   	push   eax
c001cd38:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001cd3e:	e8 99 f1 ff ff       	call   c001bedc <IDE::read(unsigned char, unsigned char)>
c001cd43:	83 c4 10             	add    esp,0x10
c001cd46:	a8 88                	test   al,0x88
c001cd48:	74 1f                	je     c001cd69 <ATA::readyForCommand()+0x45>
c001cd4a:	43                   	inc    ebx
c001cd4b:	83 fb 63             	cmp    ebx,0x63
c001cd4e:	7e dd                	jle    c001cd2d <ATA::readyForCommand()+0x9>
c001cd50:	83 ec 0c             	sub    esp,0xc
c001cd53:	6a 0a                	push   0xa
c001cd55:	e8 26 97 ff ff       	call   c0016480 <milliTenthSleep(unsigned int)>
c001cd5a:	83 c4 10             	add    esp,0x10
c001cd5d:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001cd63:	75 c8                	jne    c001cd2d <ATA::readyForCommand()+0x9>
c001cd65:	31 c0                	xor    eax,eax
c001cd67:	eb 02                	jmp    c001cd6b <ATA::readyForCommand()+0x47>
c001cd69:	b0 01                	mov    al,0x1
c001cd6b:	5a                   	pop    edx
c001cd6c:	5b                   	pop    ebx
c001cd6d:	5e                   	pop    esi
c001cd6e:	c3                   	ret    
c001cd6f:	90                   	nop

c001cd70 <ATA::access(unsigned long long, int, void*, bool)>:
c001cd70:	55                   	push   ebp
c001cd71:	57                   	push   edi
c001cd72:	56                   	push   esi
c001cd73:	53                   	push   ebx
c001cd74:	83 ec 2c             	sub    esp,0x2c
c001cd77:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001cd7b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001cd7f:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001cd83:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cd87:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001cd8b:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001cd8f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001cd93:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001cd99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cd9d:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001cda3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001cda7:	c1 e0 06             	shl    eax,0x6
c001cdaa:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001cdb2:	74 5d                	je     c001ce11 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001cdb4:	89 fa                	mov    edx,edi
c001cdb6:	89 f0                	mov    eax,esi
c001cdb8:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001cdbc:	c1 ea 1c             	shr    edx,0x1c
c001cdbf:	89 d1                	mov    ecx,edx
c001cdc1:	09 c1                	or     ecx,eax
c001cdc3:	74 25                	je     c001cdea <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001cdc5:	31 ed                	xor    ebp,ebp
c001cdc7:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001cdce:	89 fa                	mov    edx,edi
c001cdd0:	89 f0                	mov    eax,esi
c001cdd2:	0f ad d0             	shrd   eax,edx,cl
c001cdd5:	d3 ea                	shr    edx,cl
c001cdd7:	f6 c1 20             	test   cl,0x20
c001cdda:	74 02                	je     c001cdde <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001cddc:	89 d0                	mov    eax,edx
c001cdde:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001cde2:	45                   	inc    ebp
c001cde3:	83 fd 06             	cmp    ebp,0x6
c001cde6:	75 df                	jne    c001cdc7 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001cde8:	eb 76                	jmp    c001ce60 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001cdea:	89 f0                	mov    eax,esi
c001cdec:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001cdf1:	89 fa                	mov    edx,edi
c001cdf3:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001cdfa:	0f ac d0 10          	shrd   eax,edx,0x10
c001cdfe:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001ce03:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001ce07:	c1 ee 18             	shr    esi,0x18
c001ce0a:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001ce0f:	eb 56                	jmp    c001ce67 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001ce11:	6a 00                	push   0x0
c001ce13:	6a 3f                	push   0x3f
c001ce15:	57                   	push   edi
c001ce16:	56                   	push   esi
c001ce17:	e8 a4 2a 00 00       	call   c001f8c0 <__umoddi3>
c001ce1c:	83 c4 10             	add    esp,0x10
c001ce1f:	40                   	inc    eax
c001ce20:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001ce24:	6a 00                	push   0x0
c001ce26:	68 f0 03 00 00       	push   0x3f0
c001ce2b:	57                   	push   edi
c001ce2c:	56                   	push   esi
c001ce2d:	e8 8e 29 00 00       	call   c001f7c0 <__udivdi3>
c001ce32:	83 c4 10             	add    esp,0x10
c001ce35:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001ce3a:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001ce41:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001ce46:	6a 00                	push   0x0
c001ce48:	6a 3f                	push   0x3f
c001ce4a:	57                   	push   edi
c001ce4b:	56                   	push   esi
c001ce4c:	e8 6f 29 00 00       	call   c001f7c0 <__udivdi3>
c001ce51:	83 c4 10             	add    esp,0x10
c001ce54:	83 e0 0f             	and    eax,0xf
c001ce57:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001ce5c:	89 c6                	mov    esi,eax
c001ce5e:	eb 07                	jmp    c001ce67 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001ce60:	31 f6                	xor    esi,esi
c001ce62:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001ce67:	bf 01 00 00 00       	mov    edi,0x1
c001ce6c:	50                   	push   eax
c001ce6d:	6a 00                	push   0x0
c001ce6f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce76:	50                   	push   eax
c001ce77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ce7b:	e8 a4 f1 ff ff       	call   c001c024 <IDE::enableIRQs(unsigned char, bool)>
c001ce80:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ce83:	e8 9c fe ff ff       	call   c001cd24 <ATA::readyForCommand()>
c001ce88:	83 c4 10             	add    esp,0x10
c001ce8b:	84 c0                	test   al,al
c001ce8d:	0f 84 69 02 00 00    	je     c001d0fc <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c001ce93:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001ce99:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001ce9f:	c1 e0 04             	shl    eax,0x4
c001cea2:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001cea9:	09 c6                	or     esi,eax
c001ceab:	f6 44 24 0e 03       	test   BYTE PTR [esp+0xe],0x3
c001ceb0:	75 05                	jne    c001ceb7 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001ceb2:	83 ce a0             	or     esi,0xffffffa0
c001ceb5:	eb 03                	jmp    c001ceba <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001ceb7:	83 ce e0             	or     esi,0xffffffe0
c001ceba:	89 f0                	mov    eax,esi
c001cebc:	0f b6 f0             	movzx  esi,al
c001cebf:	56                   	push   esi
c001cec0:	6a 06                	push   0x6
c001cec2:	51                   	push   ecx
c001cec3:	52                   	push   edx
c001cec4:	e8 53 ef ff ff       	call   c001be1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cec9:	83 c4 10             	add    esp,0x10
c001cecc:	6a 00                	push   0x0
c001cece:	6a 01                	push   0x1
c001ced0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ced7:	50                   	push   eax
c001ced8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cede:	e8 39 ef ff ff       	call   c001be1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cee3:	83 c4 10             	add    esp,0x10
c001cee6:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001ceeb:	83 f8 02             	cmp    eax,0x2
c001ceee:	75 6e                	jne    c001cf5e <ATA::access(unsigned long long, int, void*, bool)+0x1ee>
c001cef0:	6a 00                	push   0x0
c001cef2:	6a 08                	push   0x8
c001cef4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cefb:	50                   	push   eax
c001cefc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf02:	e8 15 ef ff ff       	call   c001be1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf07:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001cf0c:	50                   	push   eax
c001cf0d:	6a 09                	push   0x9
c001cf0f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf16:	50                   	push   eax
c001cf17:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf1d:	e8 fa ee ff ff       	call   c001be1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf22:	83 c4 20             	add    esp,0x20
c001cf25:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001cf2a:	50                   	push   eax
c001cf2b:	6a 0a                	push   0xa
c001cf2d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf34:	50                   	push   eax
c001cf35:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf3b:	e8 dc ee ff ff       	call   c001be1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf40:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001cf45:	50                   	push   eax
c001cf46:	6a 0b                	push   0xb
c001cf48:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf4f:	50                   	push   eax
c001cf50:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf56:	e8 c1 ee ff ff       	call   c001be1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf5b:	83 c4 20             	add    esp,0x20
c001cf5e:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001cf63:	50                   	push   eax
c001cf64:	6a 02                	push   0x2
c001cf66:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf6d:	50                   	push   eax
c001cf6e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf74:	e8 a3 ee ff ff       	call   c001be1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf79:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001cf7e:	50                   	push   eax
c001cf7f:	6a 03                	push   0x3
c001cf81:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf88:	50                   	push   eax
c001cf89:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf8f:	e8 88 ee ff ff       	call   c001be1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf94:	83 c4 20             	add    esp,0x20
c001cf97:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001cf9c:	50                   	push   eax
c001cf9d:	6a 04                	push   0x4
c001cf9f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cfa6:	50                   	push   eax
c001cfa7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cfad:	e8 6a ee ff ff       	call   c001be1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cfb2:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cfb7:	50                   	push   eax
c001cfb8:	6a 05                	push   0x5
c001cfba:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cfc1:	50                   	push   eax
c001cfc2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cfc8:	e8 4f ee ff ff       	call   c001be1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cfcd:	83 c4 20             	add    esp,0x20
c001cfd0:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001cfd5:	0f b6 54 24 0e       	movzx  edx,BYTE PTR [esp+0xe]
c001cfda:	74 11                	je     c001cfed <ATA::access(unsigned long long, int, void*, bool)+0x27d>
c001cfdc:	b8 30 00 00 00       	mov    eax,0x30
c001cfe1:	83 fa 02             	cmp    edx,0x2
c001cfe4:	75 16                	jne    c001cffc <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001cfe6:	b8 34 00 00 00       	mov    eax,0x34
c001cfeb:	eb 0f                	jmp    c001cffc <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001cfed:	b8 20 00 00 00       	mov    eax,0x20
c001cff2:	83 fa 02             	cmp    edx,0x2
c001cff5:	75 05                	jne    c001cffc <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001cff7:	b8 24 00 00 00       	mov    eax,0x24
c001cffc:	50                   	push   eax
c001cffd:	6a 07                	push   0x7
c001cfff:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d006:	50                   	push   eax
c001d007:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d00d:	e8 0a ee ff ff       	call   c001be1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d012:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001d016:	83 c4 10             	add    esp,0x10
c001d019:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001d01e:	85 f6                	test   esi,esi
c001d020:	0f 84 b3 00 00 00    	je     c001d0d9 <ATA::access(unsigned long long, int, void*, bool)+0x369>
c001d026:	50                   	push   eax
c001d027:	6a 01                	push   0x1
c001d029:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d030:	50                   	push   eax
c001d031:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d037:	e8 c8 f8 ff ff       	call   c001c904 <IDE::polling(unsigned char, unsigned int)>
c001d03c:	83 c4 10             	add    esp,0x10
c001d03f:	0f b6 f8             	movzx  edi,al
c001d042:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001d048:	85 ff                	test   edi,edi
c001d04a:	74 1d                	je     c001d069 <ATA::access(unsigned long long, int, void*, bool)+0x2f9>
c001d04c:	57                   	push   edi
c001d04d:	0f b6 d2             	movzx  edx,dl
c001d050:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001d057:	50                   	push   eax
c001d058:	52                   	push   edx
c001d059:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d05f:	e8 e6 f7 ff ff       	call   c001c84a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d064:	e9 90 00 00 00       	jmp    c001d0f9 <ATA::access(unsigned long long, int, void*, bool)+0x389>
c001d069:	85 ed                	test   ebp,ebp
c001d06b:	74 3b                	je     c001d0a8 <ATA::access(unsigned long long, int, void*, bool)+0x338>
c001d06d:	31 c9                	xor    ecx,ecx
c001d06f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001d073:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001d077:	66 8b 3c 48          	mov    di,WORD PTR [eax+ecx*2]
c001d07b:	50                   	push   eax
c001d07c:	50                   	push   eax
c001d07d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d084:	50                   	push   eax
c001d085:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d08b:	e8 7a ed ff ff       	call   c001be0a <IDE::getBase(unsigned char)>
c001d090:	89 c2                	mov    edx,eax
c001d092:	89 f8                	mov    eax,edi
c001d094:	66 ef                	out    dx,ax
c001d096:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001d09a:	83 c4 10             	add    esp,0x10
c001d09d:	41                   	inc    ecx
c001d09e:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001d0a4:	75 c9                	jne    c001d06f <ATA::access(unsigned long long, int, void*, bool)+0x2ff>
c001d0a6:	eb 23                	jmp    c001d0cb <ATA::access(unsigned long long, int, void*, bool)+0x35b>
c001d0a8:	0f b6 d2             	movzx  edx,dl
c001d0ab:	51                   	push   ecx
c001d0ac:	51                   	push   ecx
c001d0ad:	52                   	push   edx
c001d0ae:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d0b4:	e8 51 ed ff ff       	call   c001be0a <IDE::getBase(unsigned char)>
c001d0b9:	b9 00 01 00 00       	mov    ecx,0x100
c001d0be:	89 c2                	mov    edx,eax
c001d0c0:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001d0c4:	fc                   	cld    
c001d0c5:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001d0c8:	83 c4 10             	add    esp,0x10
c001d0cb:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001d0d3:	4e                   	dec    esi
c001d0d4:	e9 45 ff ff ff       	jmp    c001d01e <ATA::access(unsigned long long, int, void*, bool)+0x2ae>
c001d0d9:	31 ff                	xor    edi,edi
c001d0db:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001d0e0:	74 1a                	je     c001d0fc <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c001d0e2:	50                   	push   eax
c001d0e3:	50                   	push   eax
c001d0e4:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001d0e9:	83 f8 02             	cmp    eax,0x2
c001d0ec:	0f 94 c0             	sete   al
c001d0ef:	0f b6 c0             	movzx  eax,al
c001d0f2:	50                   	push   eax
c001d0f3:	53                   	push   ebx
c001d0f4:	e8 dd fb ff ff       	call   c001ccd6 <ATA::flush(bool)>
c001d0f9:	83 c4 10             	add    esp,0x10
c001d0fc:	83 c4 2c             	add    esp,0x2c
c001d0ff:	89 f8                	mov    eax,edi
c001d101:	5b                   	pop    ebx
c001d102:	5e                   	pop    esi
c001d103:	5f                   	pop    edi
c001d104:	5d                   	pop    ebp
c001d105:	c3                   	ret    

c001d106 <ATA::detectCHS()>:
c001d106:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d10a:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001d110:	c1 e0 06             	shl    eax,0x6
c001d113:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001d119:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001d123:	c7 44 24 04 74 33 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023374
c001d12b:	e9 7f 45 ff ff       	jmp    c00116af <KePanic(char const*)>

c001d130 <ATA::open(int, int, void*)>:
c001d130:	53                   	push   ebx
c001d131:	83 ec 08             	sub    esp,0x8
c001d134:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d138:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d13c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d140:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d146:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d14c:	c1 e0 06             	shl    eax,0x6
c001d14f:	01 d0                	add    eax,edx
c001d151:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001d158:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001d15e:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001d165:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001d16f:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001d175:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001d17c:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001d183:	75 0c                	jne    c001d191 <ATA::open(int, int, void*)+0x61>
c001d185:	83 ec 0c             	sub    esp,0xc
c001d188:	53                   	push   ebx
c001d189:	e8 78 ff ff ff       	call   c001d106 <ATA::detectCHS()>
c001d18e:	83 c4 10             	add    esp,0x10
c001d191:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001d197:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001d19d:	c1 e0 06             	shl    eax,0x6
c001d1a0:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001d1a7:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d1b1:	d1 e8                	shr    eax,1
c001d1b3:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001d1b9:	6a 04                	push   0x4
c001d1bb:	6a 0c                	push   0xc
c001d1bd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d1c4:	50                   	push   eax
c001d1c5:	52                   	push   edx
c001d1c6:	e8 51 ec ff ff       	call   c001be1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d1cb:	90                   	nop
c001d1cc:	90                   	nop
c001d1cd:	6a 00                	push   0x0
c001d1cf:	6a 0c                	push   0xc
c001d1d1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d1d8:	50                   	push   eax
c001d1d9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d1df:	e8 38 ec ff ff       	call   c001be1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d1e4:	83 c4 14             	add    esp,0x14
c001d1e7:	53                   	push   ebx
c001d1e8:	e8 9d fc fe ff       	call   c000ce8a <PhysicalDisk::startCache()>
c001d1ed:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d1f0:	e8 d9 0e ff ff       	call   c000e0ce <createPartitionsForDisk(PhysicalDisk*)>
c001d1f5:	31 c0                	xor    eax,eax
c001d1f7:	83 c4 18             	add    esp,0x18
c001d1fa:	5b                   	pop    ebx
c001d1fb:	c3                   	ret    

c001d1fc <combineCharAndColour(char, unsigned char)>:
c001d1fc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d201:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001d207:	c1 e0 08             	shl    eax,0x8
c001d20a:	09 d0                	or     eax,edx
c001d20c:	c3                   	ret    

c001d20d <combineColours(unsigned char, unsigned char)>:
c001d20d:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d212:	c1 e0 04             	shl    eax,0x4
c001d215:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001d219:	c3                   	ret    

c001d21a <ATA::read(unsigned long long, int, void*)>:
c001d21a:	55                   	push   ebp
c001d21b:	57                   	push   edi
c001d21c:	56                   	push   esi
c001d21d:	be 04 00 00 00       	mov    esi,0x4
c001d222:	53                   	push   ebx
c001d223:	83 ec 0c             	sub    esp,0xc
c001d226:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d22a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d22e:	8d 7b ff             	lea    edi,[ebx-0x1]
c001d231:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d235:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d239:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001d23f:	0f 87 a1 01 00 00    	ja     c001d3e6 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001d245:	be 06 00 00 00       	mov    esi,0x6
c001d24a:	85 c9                	test   ecx,ecx
c001d24c:	0f 84 94 01 00 00    	je     c001d3e6 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001d252:	55                   	push   ebp
c001d253:	55                   	push   ebp
c001d254:	6a 00                	push   0x0
c001d256:	51                   	push   ecx
c001d257:	53                   	push   ebx
c001d258:	52                   	push   edx
c001d259:	50                   	push   eax
c001d25a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d25e:	e8 0d fb ff ff       	call   c001cd70 <ATA::access(unsigned long long, int, void*, bool)>
c001d263:	83 c4 20             	add    esp,0x20
c001d266:	89 c6                	mov    esi,eax
c001d268:	85 c0                	test   eax,eax
c001d26a:	0f 85 71 01 00 00    	jne    c001d3e1 <ATA::read(unsigned long long, int, void*)+0x1c7>
c001d270:	03 1d b4 d0 02 c0    	add    ebx,DWORD PTR ds:0xc002d0b4
c001d276:	89 da                	mov    edx,ebx
c001d278:	50                   	push   eax
c001d279:	bd 10 27 00 00       	mov    ebp,0x2710
c001d27e:	50                   	push   eax
c001d27f:	89 1d b4 d0 02 c0    	mov    DWORD PTR ds:0xc002d0b4,ebx
c001d285:	6a 0f                	push   0xf
c001d287:	6a 00                	push   0x0
c001d289:	e8 7f ff ff ff       	call   c001d20d <combineColours(unsigned char, unsigned char)>
c001d28e:	59                   	pop    ecx
c001d28f:	b9 0a 00 00 00       	mov    ecx,0xa
c001d294:	5b                   	pop    ebx
c001d295:	0f b6 d8             	movzx  ebx,al
c001d298:	89 d0                	mov    eax,edx
c001d29a:	53                   	push   ebx
c001d29b:	99                   	cdq    
c001d29c:	f7 fd                	idiv   ebp
c001d29e:	99                   	cdq    
c001d29f:	f7 f9                	idiv   ecx
c001d2a1:	83 c2 30             	add    edx,0x30
c001d2a4:	0f b6 d2             	movzx  edx,dl
c001d2a7:	52                   	push   edx
c001d2a8:	e8 4f ff ff ff       	call   c001d1fc <combineCharAndColour(char, unsigned char)>
c001d2ad:	5f                   	pop    edi
c001d2ae:	bf e8 03 00 00       	mov    edi,0x3e8
c001d2b3:	5a                   	pop    edx
c001d2b4:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d2ba:	53                   	push   ebx
c001d2bb:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d2c0:	99                   	cdq    
c001d2c1:	f7 ff                	idiv   edi
c001d2c3:	99                   	cdq    
c001d2c4:	f7 f9                	idiv   ecx
c001d2c6:	8d 42 30             	lea    eax,[edx+0x30]
c001d2c9:	0f b6 c0             	movzx  eax,al
c001d2cc:	50                   	push   eax
c001d2cd:	e8 2a ff ff ff       	call   c001d1fc <combineCharAndColour(char, unsigned char)>
c001d2d2:	5f                   	pop    edi
c001d2d3:	bf 64 00 00 00       	mov    edi,0x64
c001d2d8:	5a                   	pop    edx
c001d2d9:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d2df:	53                   	push   ebx
c001d2e0:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d2e5:	99                   	cdq    
c001d2e6:	f7 ff                	idiv   edi
c001d2e8:	99                   	cdq    
c001d2e9:	f7 f9                	idiv   ecx
c001d2eb:	8d 42 30             	lea    eax,[edx+0x30]
c001d2ee:	0f b6 c0             	movzx  eax,al
c001d2f1:	50                   	push   eax
c001d2f2:	e8 05 ff ff ff       	call   c001d1fc <combineCharAndColour(char, unsigned char)>
c001d2f7:	5a                   	pop    edx
c001d2f8:	5a                   	pop    edx
c001d2f9:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d2ff:	53                   	push   ebx
c001d300:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d305:	99                   	cdq    
c001d306:	f7 f9                	idiv   ecx
c001d308:	99                   	cdq    
c001d309:	f7 f9                	idiv   ecx
c001d30b:	8d 42 30             	lea    eax,[edx+0x30]
c001d30e:	0f b6 c0             	movzx  eax,al
c001d311:	50                   	push   eax
c001d312:	e8 e5 fe ff ff       	call   c001d1fc <combineCharAndColour(char, unsigned char)>
c001d317:	5a                   	pop    edx
c001d318:	5a                   	pop    edx
c001d319:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d31f:	53                   	push   ebx
c001d320:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d325:	99                   	cdq    
c001d326:	f7 f9                	idiv   ecx
c001d328:	83 c2 30             	add    edx,0x30
c001d32b:	0f b6 d2             	movzx  edx,dl
c001d32e:	52                   	push   edx
c001d32f:	e8 c8 fe ff ff       	call   c001d1fc <combineCharAndColour(char, unsigned char)>
c001d334:	5a                   	pop    edx
c001d335:	5a                   	pop    edx
c001d336:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d33c:	53                   	push   ebx
c001d33d:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d342:	99                   	cdq    
c001d343:	f7 fd                	idiv   ebp
c001d345:	99                   	cdq    
c001d346:	f7 f9                	idiv   ecx
c001d348:	8d 42 30             	lea    eax,[edx+0x30]
c001d34b:	0f b6 c0             	movzx  eax,al
c001d34e:	50                   	push   eax
c001d34f:	e8 a8 fe ff ff       	call   c001d1fc <combineCharAndColour(char, unsigned char)>
c001d354:	5d                   	pop    ebp
c001d355:	bd e8 03 00 00       	mov    ebp,0x3e8
c001d35a:	5a                   	pop    edx
c001d35b:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d361:	53                   	push   ebx
c001d362:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d367:	99                   	cdq    
c001d368:	f7 fd                	idiv   ebp
c001d36a:	99                   	cdq    
c001d36b:	f7 f9                	idiv   ecx
c001d36d:	8d 42 30             	lea    eax,[edx+0x30]
c001d370:	0f b6 c0             	movzx  eax,al
c001d373:	50                   	push   eax
c001d374:	e8 83 fe ff ff       	call   c001d1fc <combineCharAndColour(char, unsigned char)>
c001d379:	5d                   	pop    ebp
c001d37a:	5a                   	pop    edx
c001d37b:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d381:	53                   	push   ebx
c001d382:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d387:	99                   	cdq    
c001d388:	f7 ff                	idiv   edi
c001d38a:	99                   	cdq    
c001d38b:	f7 f9                	idiv   ecx
c001d38d:	8d 42 30             	lea    eax,[edx+0x30]
c001d390:	0f b6 c0             	movzx  eax,al
c001d393:	50                   	push   eax
c001d394:	e8 63 fe ff ff       	call   c001d1fc <combineCharAndColour(char, unsigned char)>
c001d399:	5f                   	pop    edi
c001d39a:	5d                   	pop    ebp
c001d39b:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d3a1:	53                   	push   ebx
c001d3a2:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d3a7:	99                   	cdq    
c001d3a8:	f7 f9                	idiv   ecx
c001d3aa:	99                   	cdq    
c001d3ab:	f7 f9                	idiv   ecx
c001d3ad:	8d 42 30             	lea    eax,[edx+0x30]
c001d3b0:	0f b6 c0             	movzx  eax,al
c001d3b3:	50                   	push   eax
c001d3b4:	e8 43 fe ff ff       	call   c001d1fc <combineCharAndColour(char, unsigned char)>
c001d3b9:	5a                   	pop    edx
c001d3ba:	5f                   	pop    edi
c001d3bb:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d3c1:	53                   	push   ebx
c001d3c2:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d3c7:	99                   	cdq    
c001d3c8:	f7 f9                	idiv   ecx
c001d3ca:	83 c2 30             	add    edx,0x30
c001d3cd:	0f b6 d2             	movzx  edx,dl
c001d3d0:	52                   	push   edx
c001d3d1:	e8 26 fe ff ff       	call   c001d1fc <combineCharAndColour(char, unsigned char)>
c001d3d6:	83 c4 10             	add    esp,0x10
c001d3d9:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d3df:	eb 05                	jmp    c001d3e6 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001d3e1:	be 01 00 00 00       	mov    esi,0x1
c001d3e6:	83 c4 0c             	add    esp,0xc
c001d3e9:	89 f0                	mov    eax,esi
c001d3eb:	5b                   	pop    ebx
c001d3ec:	5e                   	pop    esi
c001d3ed:	5f                   	pop    edi
c001d3ee:	5d                   	pop    ebp
c001d3ef:	c3                   	ret    

c001d3f0 <ATA::write(unsigned long long, int, void*)>:
c001d3f0:	55                   	push   ebp
c001d3f1:	57                   	push   edi
c001d3f2:	56                   	push   esi
c001d3f3:	be 04 00 00 00       	mov    esi,0x4
c001d3f8:	53                   	push   ebx
c001d3f9:	83 ec 0c             	sub    esp,0xc
c001d3fc:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d400:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d404:	8d 7b ff             	lea    edi,[ebx-0x1]
c001d407:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d40b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d40f:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001d415:	0f 87 9c 01 00 00    	ja     c001d5b7 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d41b:	be 06 00 00 00       	mov    esi,0x6
c001d420:	85 c9                	test   ecx,ecx
c001d422:	0f 84 8f 01 00 00    	je     c001d5b7 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d428:	55                   	push   ebp
c001d429:	55                   	push   ebp
c001d42a:	6a 01                	push   0x1
c001d42c:	51                   	push   ecx
c001d42d:	53                   	push   ebx
c001d42e:	52                   	push   edx
c001d42f:	50                   	push   eax
c001d430:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d434:	e8 37 f9 ff ff       	call   c001cd70 <ATA::access(unsigned long long, int, void*, bool)>
c001d439:	83 c4 20             	add    esp,0x20
c001d43c:	89 c6                	mov    esi,eax
c001d43e:	85 c0                	test   eax,eax
c001d440:	0f 85 6c 01 00 00    	jne    c001d5b2 <ATA::write(unsigned long long, int, void*)+0x1c2>
c001d446:	01 1d b0 d0 02 c0    	add    DWORD PTR ds:0xc002d0b0,ebx
c001d44c:	bd 10 27 00 00       	mov    ebp,0x2710
c001d451:	50                   	push   eax
c001d452:	50                   	push   eax
c001d453:	6a 0f                	push   0xf
c001d455:	6a 00                	push   0x0
c001d457:	e8 b1 fd ff ff       	call   c001d20d <combineColours(unsigned char, unsigned char)>
c001d45c:	5a                   	pop    edx
c001d45d:	0f b6 d8             	movzx  ebx,al
c001d460:	59                   	pop    ecx
c001d461:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d466:	53                   	push   ebx
c001d467:	b9 0a 00 00 00       	mov    ecx,0xa
c001d46c:	99                   	cdq    
c001d46d:	f7 fd                	idiv   ebp
c001d46f:	99                   	cdq    
c001d470:	f7 f9                	idiv   ecx
c001d472:	8d 42 30             	lea    eax,[edx+0x30]
c001d475:	0f b6 c0             	movzx  eax,al
c001d478:	50                   	push   eax
c001d479:	e8 7e fd ff ff       	call   c001d1fc <combineCharAndColour(char, unsigned char)>
c001d47e:	5f                   	pop    edi
c001d47f:	bf e8 03 00 00       	mov    edi,0x3e8
c001d484:	5a                   	pop    edx
c001d485:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d48b:	53                   	push   ebx
c001d48c:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d491:	99                   	cdq    
c001d492:	f7 ff                	idiv   edi
c001d494:	99                   	cdq    
c001d495:	f7 f9                	idiv   ecx
c001d497:	8d 42 30             	lea    eax,[edx+0x30]
c001d49a:	0f b6 c0             	movzx  eax,al
c001d49d:	50                   	push   eax
c001d49e:	e8 59 fd ff ff       	call   c001d1fc <combineCharAndColour(char, unsigned char)>
c001d4a3:	5f                   	pop    edi
c001d4a4:	bf 64 00 00 00       	mov    edi,0x64
c001d4a9:	5a                   	pop    edx
c001d4aa:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d4b0:	53                   	push   ebx
c001d4b1:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d4b6:	99                   	cdq    
c001d4b7:	f7 ff                	idiv   edi
c001d4b9:	99                   	cdq    
c001d4ba:	f7 f9                	idiv   ecx
c001d4bc:	8d 42 30             	lea    eax,[edx+0x30]
c001d4bf:	0f b6 c0             	movzx  eax,al
c001d4c2:	50                   	push   eax
c001d4c3:	e8 34 fd ff ff       	call   c001d1fc <combineCharAndColour(char, unsigned char)>
c001d4c8:	5a                   	pop    edx
c001d4c9:	5a                   	pop    edx
c001d4ca:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d4d0:	53                   	push   ebx
c001d4d1:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d4d6:	99                   	cdq    
c001d4d7:	f7 f9                	idiv   ecx
c001d4d9:	99                   	cdq    
c001d4da:	f7 f9                	idiv   ecx
c001d4dc:	8d 42 30             	lea    eax,[edx+0x30]
c001d4df:	0f b6 c0             	movzx  eax,al
c001d4e2:	50                   	push   eax
c001d4e3:	e8 14 fd ff ff       	call   c001d1fc <combineCharAndColour(char, unsigned char)>
c001d4e8:	5a                   	pop    edx
c001d4e9:	5a                   	pop    edx
c001d4ea:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d4f0:	53                   	push   ebx
c001d4f1:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d4f6:	99                   	cdq    
c001d4f7:	f7 f9                	idiv   ecx
c001d4f9:	8d 42 30             	lea    eax,[edx+0x30]
c001d4fc:	0f b6 c0             	movzx  eax,al
c001d4ff:	50                   	push   eax
c001d500:	e8 f7 fc ff ff       	call   c001d1fc <combineCharAndColour(char, unsigned char)>
c001d505:	5a                   	pop    edx
c001d506:	5a                   	pop    edx
c001d507:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d50d:	53                   	push   ebx
c001d50e:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d513:	99                   	cdq    
c001d514:	f7 fd                	idiv   ebp
c001d516:	99                   	cdq    
c001d517:	f7 f9                	idiv   ecx
c001d519:	8d 42 30             	lea    eax,[edx+0x30]
c001d51c:	0f b6 c0             	movzx  eax,al
c001d51f:	50                   	push   eax
c001d520:	e8 d7 fc ff ff       	call   c001d1fc <combineCharAndColour(char, unsigned char)>
c001d525:	5d                   	pop    ebp
c001d526:	bd e8 03 00 00       	mov    ebp,0x3e8
c001d52b:	5a                   	pop    edx
c001d52c:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d532:	53                   	push   ebx
c001d533:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d538:	99                   	cdq    
c001d539:	f7 fd                	idiv   ebp
c001d53b:	99                   	cdq    
c001d53c:	f7 f9                	idiv   ecx
c001d53e:	8d 42 30             	lea    eax,[edx+0x30]
c001d541:	0f b6 c0             	movzx  eax,al
c001d544:	50                   	push   eax
c001d545:	e8 b2 fc ff ff       	call   c001d1fc <combineCharAndColour(char, unsigned char)>
c001d54a:	5d                   	pop    ebp
c001d54b:	5a                   	pop    edx
c001d54c:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d552:	53                   	push   ebx
c001d553:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d558:	99                   	cdq    
c001d559:	f7 ff                	idiv   edi
c001d55b:	99                   	cdq    
c001d55c:	f7 f9                	idiv   ecx
c001d55e:	8d 42 30             	lea    eax,[edx+0x30]
c001d561:	0f b6 c0             	movzx  eax,al
c001d564:	50                   	push   eax
c001d565:	e8 92 fc ff ff       	call   c001d1fc <combineCharAndColour(char, unsigned char)>
c001d56a:	5f                   	pop    edi
c001d56b:	5d                   	pop    ebp
c001d56c:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d572:	53                   	push   ebx
c001d573:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d578:	99                   	cdq    
c001d579:	f7 f9                	idiv   ecx
c001d57b:	99                   	cdq    
c001d57c:	f7 f9                	idiv   ecx
c001d57e:	8d 42 30             	lea    eax,[edx+0x30]
c001d581:	0f b6 c0             	movzx  eax,al
c001d584:	50                   	push   eax
c001d585:	e8 72 fc ff ff       	call   c001d1fc <combineCharAndColour(char, unsigned char)>
c001d58a:	5a                   	pop    edx
c001d58b:	5f                   	pop    edi
c001d58c:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d592:	53                   	push   ebx
c001d593:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d598:	99                   	cdq    
c001d599:	f7 f9                	idiv   ecx
c001d59b:	83 c2 30             	add    edx,0x30
c001d59e:	0f b6 d2             	movzx  edx,dl
c001d5a1:	52                   	push   edx
c001d5a2:	e8 55 fc ff ff       	call   c001d1fc <combineCharAndColour(char, unsigned char)>
c001d5a7:	83 c4 10             	add    esp,0x10
c001d5aa:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d5b0:	eb 05                	jmp    c001d5b7 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d5b2:	be 01 00 00 00       	mov    esi,0x1
c001d5b7:	83 c4 0c             	add    esp,0xc
c001d5ba:	89 f0                	mov    eax,esi
c001d5bc:	5b                   	pop    ebx
c001d5bd:	5e                   	pop    esi
c001d5be:	5f                   	pop    edi
c001d5bf:	5d                   	pop    ebp
c001d5c0:	c3                   	ret    
c001d5c1:	90                   	nop

c001d5c2 <ATAPI::write(unsigned long long, int, void*)>:
c001d5c2:	b8 03 00 00 00       	mov    eax,0x3
c001d5c7:	c3                   	ret    

c001d5c8 <ATAPI::close(int, int, void*)>:
c001d5c8:	83 ec 0c             	sub    esp,0xc
c001d5cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5cf:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d5d5:	85 c0                	test   eax,eax
c001d5d7:	74 0c                	je     c001d5e5 <ATAPI::close(int, int, void*)+0x1d>
c001d5d9:	83 ec 0c             	sub    esp,0xc
c001d5dc:	8b 10                	mov    edx,DWORD PTR [eax]
c001d5de:	50                   	push   eax
c001d5df:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d5e2:	83 c4 10             	add    esp,0x10
c001d5e5:	31 c0                	xor    eax,eax
c001d5e7:	83 c4 0c             	add    esp,0xc
c001d5ea:	c3                   	ret    
c001d5eb:	90                   	nop

c001d5ec <ATAPI::ATAPI()>:
c001d5ec:	83 ec 0c             	sub    esp,0xc
c001d5ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5f3:	83 ec 04             	sub    esp,0x4
c001d5f6:	68 00 08 00 00       	push   0x800
c001d5fb:	68 bd 34 02 c0       	push   0xc00234bd
c001d600:	50                   	push   eax
c001d601:	e8 1c f8 fe ff       	call   c000ce22 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d606:	83 c4 10             	add    esp,0x10
c001d609:	ba d8 33 02 c0       	mov    edx,0xc00233d8
c001d60e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d612:	89 10                	mov    DWORD PTR [eax],edx
c001d614:	90                   	nop
c001d615:	83 c4 0c             	add    esp,0xc
c001d618:	c3                   	ret    
c001d619:	90                   	nop

c001d61a <ATAPI::readyForCommand()>:
c001d61a:	56                   	push   esi
c001d61b:	53                   	push   ebx
c001d61c:	53                   	push   ebx
c001d61d:	31 db                	xor    ebx,ebx
c001d61f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d623:	51                   	push   ecx
c001d624:	6a 0c                	push   0xc
c001d626:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001d62d:	50                   	push   eax
c001d62e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001d634:	e8 a3 e8 ff ff       	call   c001bedc <IDE::read(unsigned char, unsigned char)>
c001d639:	83 c4 10             	add    esp,0x10
c001d63c:	a8 88                	test   al,0x88
c001d63e:	74 25                	je     c001d665 <ATAPI::readyForCommand()+0x4b>
c001d640:	43                   	inc    ebx
c001d641:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001d647:	7e da                	jle    c001d623 <ATAPI::readyForCommand()+0x9>
c001d649:	83 ec 0c             	sub    esp,0xc
c001d64c:	68 5e 01 00 00       	push   0x15e
c001d651:	e8 2a 8e ff ff       	call   c0016480 <milliTenthSleep(unsigned int)>
c001d656:	83 c4 10             	add    esp,0x10
c001d659:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001d65f:	75 c2                	jne    c001d623 <ATAPI::readyForCommand()+0x9>
c001d661:	31 c0                	xor    eax,eax
c001d663:	eb 02                	jmp    c001d667 <ATAPI::readyForCommand()+0x4d>
c001d665:	b0 01                	mov    al,0x1
c001d667:	5a                   	pop    edx
c001d668:	5b                   	pop    ebx
c001d669:	5e                   	pop    esi
c001d66a:	c3                   	ret    
c001d66b:	90                   	nop

c001d66c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001d66c:	55                   	push   ebp
c001d66d:	57                   	push   edi
c001d66e:	56                   	push   esi
c001d66f:	53                   	push   ebx
c001d670:	83 ec 20             	sub    esp,0x20
c001d673:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d677:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001d67b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001d67f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001d683:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001d687:	6a 01                	push   0x1
c001d689:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d690:	50                   	push   eax
c001d691:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d697:	e8 88 e9 ff ff       	call   c001c024 <IDE::enableIRQs(unsigned char, bool)>
c001d69c:	5e                   	pop    esi
c001d69d:	58                   	pop    eax
c001d69e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d6a5:	50                   	push   eax
c001d6a6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d6ac:	e8 45 e7 ff ff       	call   c001bdf6 <IDE::prepareInterrupt(unsigned char)>
c001d6b1:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d6b4:	e8 61 ff ff ff       	call   c001d61a <ATAPI::readyForCommand()>
c001d6b9:	83 c4 10             	add    esp,0x10
c001d6bc:	84 c0                	test   al,al
c001d6be:	75 0a                	jne    c001d6ca <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001d6c0:	bb 01 00 00 00       	mov    ebx,0x1
c001d6c5:	e9 60 02 00 00       	jmp    c001d92a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001d6ca:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001d6d0:	c1 e0 04             	shl    eax,0x4
c001d6d3:	0f b6 c0             	movzx  eax,al
c001d6d6:	50                   	push   eax
c001d6d7:	6a 06                	push   0x6
c001d6d9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d6e0:	50                   	push   eax
c001d6e1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d6e7:	e8 30 e7 ff ff       	call   c001be1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d6ec:	6a 00                	push   0x0
c001d6ee:	6a 01                	push   0x1
c001d6f0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d6f7:	50                   	push   eax
c001d6f8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d6fe:	e8 19 e7 ff ff       	call   c001be1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d703:	83 c4 20             	add    esp,0x20
c001d706:	0f b6 c3             	movzx  eax,bl
c001d709:	0f b6 df             	movzx  ebx,bh
c001d70c:	50                   	push   eax
c001d70d:	6a 04                	push   0x4
c001d70f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d716:	50                   	push   eax
c001d717:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d71d:	e8 fa e6 ff ff       	call   c001be1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d722:	53                   	push   ebx
c001d723:	6a 05                	push   0x5
c001d725:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d72c:	50                   	push   eax
c001d72d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d733:	e8 e4 e6 ff ff       	call   c001be1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d738:	83 c4 20             	add    esp,0x20
c001d73b:	68 a0 00 00 00       	push   0xa0
c001d740:	6a 07                	push   0x7
c001d742:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d749:	50                   	push   eax
c001d74a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d750:	e8 c7 e6 ff ff       	call   c001be1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d755:	83 c4 0c             	add    esp,0xc
c001d758:	6a 01                	push   0x1
c001d75a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d761:	50                   	push   eax
c001d762:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d768:	e8 97 f1 ff ff       	call   c001c904 <IDE::polling(unsigned char, unsigned int)>
c001d76d:	83 c4 10             	add    esp,0x10
c001d770:	0f b6 d8             	movzx  ebx,al
c001d773:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001d779:	85 db                	test   ebx,ebx
c001d77b:	74 20                	je     c001d79d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001d77d:	53                   	push   ebx
c001d77e:	0f b6 c0             	movzx  eax,al
c001d781:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001d788:	52                   	push   edx
c001d789:	50                   	push   eax
c001d78a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d790:	e8 b5 f0 ff ff       	call   c001c84a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d795:	83 c4 10             	add    esp,0x10
c001d798:	e9 8d 01 00 00       	jmp    c001d92a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001d79d:	0f b6 c0             	movzx  eax,al
c001d7a0:	53                   	push   ebx
c001d7a1:	53                   	push   ebx
c001d7a2:	50                   	push   eax
c001d7a3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d7a9:	e8 5c e6 ff ff       	call   c001be0a <IDE::getBase(unsigned char)>
c001d7ae:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d7b2:	b9 06 00 00 00       	mov    ecx,0x6
c001d7b7:	89 c2                	mov    edx,eax
c001d7b9:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001d7bc:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001d7c0:	83 c4 10             	add    esp,0x10
c001d7c3:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001d7c8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d7cc:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d7d2:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d7d9:	85 db                	test   ebx,ebx
c001d7db:	0f 84 ec 00 00 00    	je     c001d8cd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x261>
c001d7e1:	51                   	push   ecx
c001d7e2:	51                   	push   ecx
c001d7e3:	52                   	push   edx
c001d7e4:	50                   	push   eax
c001d7e5:	e8 a0 e7 ff ff       	call   c001bf8a <IDE::waitInterrupt(unsigned char)>
c001d7ea:	83 c4 10             	add    esp,0x10
c001d7ed:	84 c0                	test   al,al
c001d7ef:	0f 84 cb fe ff ff    	je     c001d6c0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001d7f5:	56                   	push   esi
c001d7f6:	56                   	push   esi
c001d7f7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d7fe:	50                   	push   eax
c001d7ff:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d805:	e8 ec e5 ff ff       	call   c001bdf6 <IDE::prepareInterrupt(unsigned char)>
c001d80a:	83 c4 0c             	add    esp,0xc
c001d80d:	6a 04                	push   0x4
c001d80f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d816:	50                   	push   eax
c001d817:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d81d:	e8 ba e6 ff ff       	call   c001bedc <IDE::read(unsigned char, unsigned char)>
c001d822:	83 c4 0c             	add    esp,0xc
c001d825:	89 c6                	mov    esi,eax
c001d827:	6a 05                	push   0x5
c001d829:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d830:	50                   	push   eax
c001d831:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d837:	e8 a0 e6 ff ff       	call   c001bedc <IDE::read(unsigned char, unsigned char)>
c001d83c:	89 f1                	mov    ecx,esi
c001d83e:	0f b6 c0             	movzx  eax,al
c001d841:	0f b6 f1             	movzx  esi,cl
c001d844:	c1 e0 08             	shl    eax,0x8
c001d847:	09 c6                	or     esi,eax
c001d849:	d1 fe                	sar    esi,1
c001d84b:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001d84f:	83 c4 10             	add    esp,0x10
c001d852:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001d857:	74 41                	je     c001d89a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x22e>
c001d859:	31 c9                	xor    ecx,ecx
c001d85b:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d861:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d868:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001d86c:	75 0a                	jne    c001d878 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x20c>
c001d86e:	01 c9                	add    ecx,ecx
c001d870:	01 cd                	add    ebp,ecx
c001d872:	4b                   	dec    ebx
c001d873:	e9 54 ff ff ff       	jmp    c001d7cc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x160>
c001d878:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001d87d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d881:	51                   	push   ecx
c001d882:	51                   	push   ecx
c001d883:	52                   	push   edx
c001d884:	50                   	push   eax
c001d885:	e8 80 e5 ff ff       	call   c001be0a <IDE::getBase(unsigned char)>
c001d88a:	89 c2                	mov    edx,eax
c001d88c:	89 f0                	mov    eax,esi
c001d88e:	66 ef                	out    dx,ax
c001d890:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d894:	83 c4 10             	add    esp,0x10
c001d897:	41                   	inc    ecx
c001d898:	eb c1                	jmp    c001d85b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1ef>
c001d89a:	31 f6                	xor    esi,esi
c001d89c:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d8a2:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d8a9:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001d8ad:	75 06                	jne    c001d8b5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x249>
c001d8af:	01 f6                	add    esi,esi
c001d8b1:	01 f5                	add    ebp,esi
c001d8b3:	eb bd                	jmp    c001d872 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x206>
c001d8b5:	51                   	push   ecx
c001d8b6:	51                   	push   ecx
c001d8b7:	52                   	push   edx
c001d8b8:	50                   	push   eax
c001d8b9:	e8 4c e5 ff ff       	call   c001be0a <IDE::getBase(unsigned char)>
c001d8be:	89 c2                	mov    edx,eax
c001d8c0:	66 ed                	in     ax,dx
c001d8c2:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001d8c7:	83 c4 10             	add    esp,0x10
c001d8ca:	46                   	inc    esi
c001d8cb:	eb cf                	jmp    c001d89c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x230>
c001d8cd:	51                   	push   ecx
c001d8ce:	51                   	push   ecx
c001d8cf:	52                   	push   edx
c001d8d0:	50                   	push   eax
c001d8d1:	e8 b4 e6 ff ff       	call   c001bf8a <IDE::waitInterrupt(unsigned char)>
c001d8d6:	83 c4 10             	add    esp,0x10
c001d8d9:	84 c0                	test   al,al
c001d8db:	0f 84 df fd ff ff    	je     c001d6c0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001d8e1:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d8e6:	52                   	push   edx
c001d8e7:	52                   	push   edx
c001d8e8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d8ef:	50                   	push   eax
c001d8f0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d8f6:	e8 fb e4 ff ff       	call   c001bdf6 <IDE::prepareInterrupt(unsigned char)>
c001d8fb:	83 c4 10             	add    esp,0x10
c001d8fe:	50                   	push   eax
c001d8ff:	50                   	push   eax
c001d900:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d907:	50                   	push   eax
c001d908:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d90e:	e8 f7 e4 ff ff       	call   c001be0a <IDE::getBase(unsigned char)>
c001d913:	8d 50 07             	lea    edx,[eax+0x7]
c001d916:	ec                   	in     al,dx
c001d917:	83 c4 10             	add    esp,0x10
c001d91a:	a8 88                	test   al,0x88
c001d91c:	74 0a                	je     c001d928 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2bc>
c001d91e:	4b                   	dec    ebx
c001d91f:	75 dd                	jne    c001d8fe <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x292>
c001d921:	bb 02 00 00 00       	mov    ebx,0x2
c001d926:	eb 02                	jmp    c001d92a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001d928:	31 db                	xor    ebx,ebx
c001d92a:	83 c4 1c             	add    esp,0x1c
c001d92d:	89 d8                	mov    eax,ebx
c001d92f:	5b                   	pop    ebx
c001d930:	5e                   	pop    esi
c001d931:	5f                   	pop    edi
c001d932:	5d                   	pop    ebp
c001d933:	c3                   	ret    

c001d934 <ATAPI::diskRemoved()>:
c001d934:	53                   	push   ebx
c001d935:	83 ec 14             	sub    esp,0x14
c001d938:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d93c:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d943:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001d949:	e8 70 04 ff ff       	call   c000ddbe <LogicalDisk::unmount()>
c001d94e:	58                   	pop    eax
c001d94f:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d955:	e8 46 0e ff ff       	call   c000e7a0 <VCache::writeWriteBuffer()>
c001d95a:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001d960:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d964:	83 c4 18             	add    esp,0x18
c001d967:	5b                   	pop    ebx
c001d968:	e9 23 0e ff ff       	jmp    c000e790 <VCache::invalidateReadBuffer()>
c001d96d:	90                   	nop

c001d96e <ATAPI::eject()>:
c001d96e:	57                   	push   edi
c001d96f:	b9 03 00 00 00       	mov    ecx,0x3
c001d974:	53                   	push   ebx
c001d975:	83 ec 14             	sub    esp,0x14
c001d978:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d97c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d980:	fc                   	cld    
c001d981:	31 c0                	xor    eax,eax
c001d983:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d985:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d98a:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d98f:	50                   	push   eax
c001d990:	50                   	push   eax
c001d991:	6a 00                	push   0x0
c001d993:	6a 00                	push   0x0
c001d995:	6a 00                	push   0x0
c001d997:	6a 02                	push   0x2
c001d999:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d99d:	50                   	push   eax
c001d99e:	53                   	push   ebx
c001d99f:	e8 c8 fc ff ff       	call   c001d66c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d9a4:	83 c4 14             	add    esp,0x14
c001d9a7:	53                   	push   ebx
c001d9a8:	e8 87 ff ff ff       	call   c001d934 <ATAPI::diskRemoved()>
c001d9ad:	83 c4 24             	add    esp,0x24
c001d9b0:	31 c0                	xor    eax,eax
c001d9b2:	5b                   	pop    ebx
c001d9b3:	5f                   	pop    edi
c001d9b4:	c3                   	ret    
c001d9b5:	90                   	nop

c001d9b6 <ATAPI::diskInserted()>:
c001d9b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d9ba:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001d9c1:	c3                   	ret    

c001d9c2 <ATAPI::detectMedia()>:
c001d9c2:	56                   	push   esi
c001d9c3:	53                   	push   ebx
c001d9c4:	83 ec 28             	sub    esp,0x28
c001d9c7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d9cb:	6a 0c                	push   0xc
c001d9cd:	6a 00                	push   0x0
c001d9cf:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001d9d3:	56                   	push   esi
c001d9d4:	e8 17 2b fe ff       	call   c00004f0 <memset>
c001d9d9:	58                   	pop    eax
c001d9da:	5a                   	pop    edx
c001d9db:	6a 00                	push   0x0
c001d9dd:	6a 00                	push   0x0
c001d9df:	6a 00                	push   0x0
c001d9e1:	6a 00                	push   0x0
c001d9e3:	56                   	push   esi
c001d9e4:	53                   	push   ebx
c001d9e5:	e8 82 fc ff ff       	call   c001d66c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d9ea:	83 c4 1c             	add    esp,0x1c
c001d9ed:	6a 0c                	push   0xc
c001d9ef:	6a 00                	push   0x0
c001d9f1:	56                   	push   esi
c001d9f2:	e8 f9 2a fe ff       	call   c00004f0 <memset>
c001d9f7:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001d9fc:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001da01:	59                   	pop    ecx
c001da02:	58                   	pop    eax
c001da03:	6a 01                	push   0x1
c001da05:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001da09:	50                   	push   eax
c001da0a:	6a 00                	push   0x0
c001da0c:	6a 12                	push   0x12
c001da0e:	56                   	push   esi
c001da0f:	53                   	push   ebx
c001da10:	e8 57 fc ff ff       	call   c001d66c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001da15:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001da19:	83 c4 20             	add    esp,0x20
c001da1c:	83 e0 7f             	and    eax,0x7f
c001da1f:	83 f8 70             	cmp    eax,0x70
c001da22:	74 15                	je     c001da39 <ATAPI::detectMedia()+0x77>
c001da24:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001da2b:	75 0c                	jne    c001da39 <ATAPI::detectMedia()+0x77>
c001da2d:	83 ec 0c             	sub    esp,0xc
c001da30:	53                   	push   ebx
c001da31:	e8 80 ff ff ff       	call   c001d9b6 <ATAPI::diskInserted()>
c001da36:	83 c4 10             	add    esp,0x10
c001da39:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001da3d:	83 e0 0f             	and    eax,0xf
c001da40:	83 f8 02             	cmp    eax,0x2
c001da43:	75 1b                	jne    c001da60 <ATAPI::detectMedia()+0x9e>
c001da45:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001da4a:	75 2d                	jne    c001da79 <ATAPI::detectMedia()+0xb7>
c001da4c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001da53:	74 24                	je     c001da79 <ATAPI::detectMedia()+0xb7>
c001da55:	83 ec 0c             	sub    esp,0xc
c001da58:	53                   	push   ebx
c001da59:	e8 d6 fe ff ff       	call   c001d934 <ATAPI::diskRemoved()>
c001da5e:	eb 16                	jmp    c001da76 <ATAPI::detectMedia()+0xb4>
c001da60:	85 c0                	test   eax,eax
c001da62:	75 15                	jne    c001da79 <ATAPI::detectMedia()+0xb7>
c001da64:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001da6b:	75 0c                	jne    c001da79 <ATAPI::detectMedia()+0xb7>
c001da6d:	83 ec 0c             	sub    esp,0xc
c001da70:	53                   	push   ebx
c001da71:	e8 40 ff ff ff       	call   c001d9b6 <ATAPI::diskInserted()>
c001da76:	83 c4 10             	add    esp,0x10
c001da79:	83 c4 24             	add    esp,0x24
c001da7c:	5b                   	pop    ebx
c001da7d:	5e                   	pop    esi
c001da7e:	c3                   	ret    
c001da7f:	90                   	nop

c001da80 <ATAPI::open(int, int, void*)>:
c001da80:	56                   	push   esi
c001da81:	53                   	push   ebx
c001da82:	50                   	push   eax
c001da83:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001da87:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001da8b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001da8f:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001da95:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001da9b:	c1 e0 06             	shl    eax,0x6
c001da9e:	01 d0                	add    eax,edx
c001daa0:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001daa7:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001daad:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001dab4:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001dabe:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001dac4:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001dacb:	6a 04                	push   0x4
c001dacd:	6a 0c                	push   0xc
c001dacf:	51                   	push   ecx
c001dad0:	52                   	push   edx
c001dad1:	e8 46 e3 ff ff       	call   c001be1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dad6:	90                   	nop
c001dad7:	90                   	nop
c001dad8:	6a 00                	push   0x0
c001dada:	6a 0c                	push   0xc
c001dadc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001dae3:	50                   	push   eax
c001dae4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001daea:	e8 2d e3 ff ff       	call   c001be1c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001daef:	83 c4 14             	add    esp,0x14
c001daf2:	68 78 01 00 00       	push   0x178
c001daf7:	e8 ba 9f fe ff       	call   c0007ab6 <malloc>
c001dafc:	83 c4 0c             	add    esp,0xc
c001daff:	89 c6                	mov    esi,eax
c001db01:	6a 00                	push   0x0
c001db03:	68 ff ff ff 7f       	push   0x7fffffff
c001db08:	6a 00                	push   0x0
c001db0a:	6a 00                	push   0x0
c001db0c:	53                   	push   ebx
c001db0d:	68 6f 35 02 c0       	push   0xc002356f
c001db12:	50                   	push   eax
c001db13:	e8 e4 00 ff ff       	call   c000dbfc <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001db18:	83 c4 14             	add    esp,0x14
c001db1b:	56                   	push   esi
c001db1c:	e8 9b 01 ff ff       	call   c000dcbc <LogicalDisk::assignDriveLetter()>
c001db21:	5a                   	pop    edx
c001db22:	0f be c0             	movsx  eax,al
c001db25:	59                   	pop    ecx
c001db26:	50                   	push   eax
c001db27:	68 c0 33 02 c0       	push   0xc00233c0
c001db2c:	e8 14 ce fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001db31:	58                   	pop    eax
c001db32:	5a                   	pop    edx
c001db33:	56                   	push   esi
c001db34:	53                   	push   ebx
c001db35:	e8 1c ef fe ff       	call   c000ca56 <Device::addChild(Device*)>
c001db3a:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001db40:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001db43:	e8 42 f3 fe ff       	call   c000ce8a <PhysicalDisk::startCache()>
c001db48:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001db4f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001db52:	e8 6b fe ff ff       	call   c001d9c2 <ATAPI::detectMedia()>
c001db57:	83 c4 14             	add    esp,0x14
c001db5a:	31 c0                	xor    eax,eax
c001db5c:	5b                   	pop    ebx
c001db5d:	5e                   	pop    esi
c001db5e:	c3                   	ret    
c001db5f:	90                   	nop

c001db60 <ATAPI::read(unsigned long long, int, void*)>:
c001db60:	55                   	push   ebp
c001db61:	57                   	push   edi
c001db62:	56                   	push   esi
c001db63:	53                   	push   ebx
c001db64:	83 ec 1c             	sub    esp,0x1c
c001db67:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001db6b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001db6f:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001db73:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001db7a:	74 3c                	je     c001dbb8 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001db7c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001db80:	b9 03 00 00 00       	mov    ecx,0x3
c001db85:	fc                   	cld    
c001db86:	31 c0                	xor    eax,eax
c001db88:	0f ce                	bswap  esi
c001db8a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001db8c:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001db91:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001db95:	89 e8                	mov    eax,ebp
c001db97:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001db9b:	50                   	push   eax
c001db9c:	50                   	push   eax
c001db9d:	55                   	push   ebp
c001db9e:	c1 e5 0b             	shl    ebp,0xb
c001dba1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001dba5:	6a 00                	push   0x0
c001dba7:	55                   	push   ebp
c001dba8:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001dbac:	50                   	push   eax
c001dbad:	53                   	push   ebx
c001dbae:	e8 b9 fa ff ff       	call   c001d66c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001dbb3:	83 c4 20             	add    esp,0x20
c001dbb6:	eb 1a                	jmp    c001dbd2 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001dbb8:	83 ec 0c             	sub    esp,0xc
c001dbbb:	53                   	push   ebx
c001dbbc:	e8 01 fe ff ff       	call   c001d9c2 <ATAPI::detectMedia()>
c001dbc1:	83 c4 10             	add    esp,0x10
c001dbc4:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001dbcb:	75 af                	jne    c001db7c <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001dbcd:	b8 02 00 00 00       	mov    eax,0x2
c001dbd2:	83 c4 1c             	add    esp,0x1c
c001dbd5:	5b                   	pop    ebx
c001dbd6:	5e                   	pop    esi
c001dbd7:	5f                   	pop    edi
c001dbd8:	5d                   	pop    ebp
c001dbd9:	c3                   	ret    

c001dbda <SATA::close(int, int, void*)>:
c001dbda:	83 ec 0c             	sub    esp,0xc
c001dbdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbe1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001dbe7:	85 c0                	test   eax,eax
c001dbe9:	74 0c                	je     c001dbf7 <SATA::close(int, int, void*)+0x1d>
c001dbeb:	83 ec 0c             	sub    esp,0xc
c001dbee:	8b 10                	mov    edx,DWORD PTR [eax]
c001dbf0:	50                   	push   eax
c001dbf1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001dbf4:	83 c4 10             	add    esp,0x10
c001dbf7:	31 c0                	xor    eax,eax
c001dbf9:	83 c4 0c             	add    esp,0xc
c001dbfc:	c3                   	ret    
c001dbfd:	90                   	nop

c001dbfe <SATA::powerSaving(PowerSavingLevel)>:
c001dbfe:	c3                   	ret    
c001dbff:	90                   	nop

c001dc00 <SATA::open(int, int, void*)>:
c001dc00:	56                   	push   esi
c001dc01:	53                   	push   ebx
c001dc02:	50                   	push   eax
c001dc03:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dc07:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dc0b:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001dc15:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001dc1b:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001dc25:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dc29:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001dc33:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001dc39:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001dc40:	e8 7a a1 fe ff       	call   c0007dbf <Phys::allocatePage()>
c001dc45:	89 c6                	mov    esi,eax
c001dc47:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001dc4d:	81 c6 00 10 00 00    	add    esi,0x1000
c001dc53:	e8 67 a1 fe ff       	call   c0007dbf <Phys::allocatePage()>
c001dc58:	39 c6                	cmp    esi,eax
c001dc5a:	74 10                	je     c001dc6c <SATA::open(int, int, void*)+0x6c>
c001dc5c:	83 ec 0c             	sub    esp,0xc
c001dc5f:	68 08 34 02 c0       	push   0xc0023408
c001dc64:	e8 46 3a ff ff       	call   c00116af <KePanic(char const*)>
c001dc69:	83 c4 10             	add    esp,0x10
c001dc6c:	83 ec 0c             	sub    esp,0xc
c001dc6f:	6a 02                	push   0x2
c001dc71:	e8 97 b9 fe ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c001dc76:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001dc7c:	6a 03                	push   0x3
c001dc7e:	50                   	push   eax
c001dc7f:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001dc85:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c001dc8b:	e8 90 c0 fe ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c001dc90:	83 c4 14             	add    esp,0x14
c001dc93:	53                   	push   ebx
c001dc94:	e8 f1 f1 fe ff       	call   c000ce8a <PhysicalDisk::startCache()>
c001dc99:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dc9c:	e8 2d 04 ff ff       	call   c000e0ce <createPartitionsForDisk(PhysicalDisk*)>
c001dca1:	83 c4 14             	add    esp,0x14
c001dca4:	31 c0                	xor    eax,eax
c001dca6:	5b                   	pop    ebx
c001dca7:	5e                   	pop    esi
c001dca8:	c3                   	ret    
c001dca9:	90                   	nop

c001dcaa <SATA::SATA()>:
c001dcaa:	83 ec 0c             	sub    esp,0xc
c001dcad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcb1:	83 ec 04             	sub    esp,0x4
c001dcb4:	68 00 02 00 00       	push   0x200
c001dcb9:	68 1c 34 02 c0       	push   0xc002341c
c001dcbe:	50                   	push   eax
c001dcbf:	e8 5e f1 fe ff       	call   c000ce22 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001dcc4:	83 c4 10             	add    esp,0x10
c001dcc7:	ba 8c 34 02 c0       	mov    edx,0xc002348c
c001dccc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcd0:	89 10                	mov    DWORD PTR [eax],edx
c001dcd2:	90                   	nop
c001dcd3:	83 c4 0c             	add    esp,0xc
c001dcd6:	c3                   	ret    
c001dcd7:	90                   	nop

c001dcd8 <SATA::access(unsigned long long, int, void*, bool)>:
c001dcd8:	55                   	push   ebp
c001dcd9:	57                   	push   edi
c001dcda:	56                   	push   esi
c001dcdb:	53                   	push   ebx
c001dcdc:	83 ec 2c             	sub    esp,0x2c
c001dcdf:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001dce3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001dce7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001dceb:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001dcef:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001dcf3:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001dcf8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001dcfc:	7e 10                	jle    c001dd0e <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001dcfe:	83 ec 0c             	sub    esp,0xc
c001dd01:	68 2c 34 02 c0       	push   0xc002342c
c001dd06:	e8 a4 39 ff ff       	call   c00116af <KePanic(char const*)>
c001dd0b:	83 c4 10             	add    esp,0x10
c001dd0e:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001dd14:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001dd1a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001dd20:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001dd24:	89 d0                	mov    eax,edx
c001dd26:	c1 e0 07             	shl    eax,0x7
c001dd29:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001dd2d:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001dd37:	51                   	push   ecx
c001dd38:	8d 42 02             	lea    eax,[edx+0x2]
c001dd3b:	51                   	push   ecx
c001dd3c:	c1 e0 07             	shl    eax,0x7
c001dd3f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001dd43:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001dd47:	50                   	push   eax
c001dd48:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001dd4e:	e8 91 ec ff ff       	call   c001c9e4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001dd53:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001dd57:	83 c4 10             	add    esp,0x10
c001dd5a:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001dd5f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dd63:	0f 84 57 01 00 00    	je     c001dec0 <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001dd69:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001dd6d:	c1 e0 09             	shl    eax,0x9
c001dd70:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001dd75:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001dd79:	74 0e                	je     c001dd89 <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001dd7b:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001dd81:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001dd85:	89 c1                	mov    ecx,eax
c001dd87:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001dd89:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001dd8f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001dd93:	8d 42 02             	lea    eax,[edx+0x2]
c001dd96:	c1 e0 07             	shl    eax,0x7
c001dd99:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001dd9d:	8b 00                	mov    eax,DWORD PTR [eax]
c001dd9f:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001dda5:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001ddab:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ddaf:	c1 e1 05             	shl    ecx,0x5
c001ddb2:	01 c8                	add    eax,ecx
c001ddb4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ddb8:	83 e1 01             	and    ecx,0x1
c001ddbb:	89 ce                	mov    esi,ecx
c001ddbd:	8a 08                	mov    cl,BYTE PTR [eax]
c001ddbf:	c1 e6 06             	shl    esi,0x6
c001ddc2:	83 e1 bf             	and    ecx,0xffffffbf
c001ddc5:	09 f1                	or     ecx,esi
c001ddc7:	88 08                	mov    BYTE PTR [eax],cl
c001ddc9:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ddcb:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001ddd1:	81 c9 05 00 01 00    	or     ecx,0x10005
c001ddd7:	89 08                	mov    DWORD PTR [eax],ecx
c001ddd9:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001dddf:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001dde5:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001ddeb:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001ddee:	50                   	push   eax
c001ddef:	68 90 00 00 00       	push   0x90
c001ddf4:	6a 00                	push   0x0
c001ddf6:	56                   	push   esi
c001ddf7:	e8 f4 26 fe ff       	call   c00004f0 <memset>
c001ddfc:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001de02:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001de08:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001de0c:	83 c4 10             	add    esp,0x10
c001de0f:	48                   	dec    eax
c001de10:	25 ff ff 3f 00       	and    eax,0x3fffff
c001de15:	89 c1                	mov    ecx,eax
c001de17:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001de1d:	25 00 00 c0 ff       	and    eax,0xffc00000
c001de22:	09 c8                	or     eax,ecx
c001de24:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001de2a:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001de30:	83 c8 80             	or     eax,0xffffff80
c001de33:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001de39:	66 8b 06             	mov    ax,WORD PTR [esi]
c001de3c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001de40:	25 00 7f 00 00       	and    eax,0x7f00
c001de45:	0d 27 80 ff ff       	or     eax,0xffff8027
c001de4a:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001de4f:	66 89 06             	mov    WORD PTR [esi],ax
c001de52:	b0 35                	mov    al,0x35
c001de54:	75 02                	jne    c001de58 <SATA::access(unsigned long long, int, void*, bool)+0x180>
c001de56:	b0 25                	mov    al,0x25
c001de58:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001de5b:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001de5f:	89 e8                	mov    eax,ebp
c001de61:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001de65:	c1 e8 10             	shr    eax,0x10
c001de68:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001de6b:	89 e8                	mov    eax,ebp
c001de6d:	c1 e8 18             	shr    eax,0x18
c001de70:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001de73:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001de77:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001de7a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001de7e:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001de81:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001de85:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001de89:	89 d6                	mov    esi,edx
c001de8b:	31 c0                	xor    eax,eax
c001de8d:	c1 e6 07             	shl    esi,0x7
c001de90:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001de94:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001de9a:	80 e1 88             	and    cl,0x88
c001de9d:	74 0a                	je     c001dea9 <SATA::access(unsigned long long, int, void*, bool)+0x1d1>
c001de9f:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001dea4:	74 0a                	je     c001deb0 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001dea6:	40                   	inc    eax
c001dea7:	eb eb                	jmp    c001de94 <SATA::access(unsigned long long, int, void*, bool)+0x1bc>
c001dea9:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001deae:	75 17                	jne    c001dec7 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c001deb0:	83 ec 0c             	sub    esp,0xc
c001deb3:	68 65 34 02 c0       	push   0xc0023465
c001deb8:	e8 88 ca fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001debd:	83 c4 10             	add    esp,0x10
c001dec0:	b8 01 00 00 00       	mov    eax,0x1
c001dec5:	eb 5d                	jmp    c001df24 <SATA::access(unsigned long long, int, void*, bool)+0x24c>
c001dec7:	b8 01 00 00 00       	mov    eax,0x1
c001decc:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001ded0:	c1 e2 07             	shl    edx,0x7
c001ded3:	d3 e0                	shl    eax,cl
c001ded5:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001ded9:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001dedf:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001dee5:	85 c8                	test   eax,ecx
c001dee7:	74 16                	je     c001deff <SATA::access(unsigned long long, int, void*, bool)+0x227>
c001dee9:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001deef:	0f ba e1 1e          	bt     ecx,0x1e
c001def3:	73 ea                	jae    c001dedf <SATA::access(unsigned long long, int, void*, bool)+0x207>
c001def5:	83 ec 0c             	sub    esp,0xc
c001def8:	68 73 34 02 c0       	push   0xc0023473
c001defd:	eb b9                	jmp    c001deb8 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001deff:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001df05:	0f ba e0 1e          	bt     eax,0x1e
c001df09:	72 b5                	jb     c001dec0 <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001df0b:	31 c0                	xor    eax,eax
c001df0d:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001df12:	75 10                	jne    c001df24 <SATA::access(unsigned long long, int, void*, bool)+0x24c>
c001df14:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001df1a:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001df1e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001df22:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001df24:	83 c4 2c             	add    esp,0x2c
c001df27:	5b                   	pop    ebx
c001df28:	5e                   	pop    esi
c001df29:	5f                   	pop    edi
c001df2a:	5d                   	pop    ebp
c001df2b:	c3                   	ret    

c001df2c <SATA::read(unsigned long long, int, void*)>:
c001df2c:	55                   	push   ebp
c001df2d:	57                   	push   edi
c001df2e:	56                   	push   esi
c001df2f:	be 04 00 00 00       	mov    esi,0x4
c001df34:	53                   	push   ebx
c001df35:	83 ec 0c             	sub    esp,0xc
c001df38:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001df3c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001df40:	8d 7b ff             	lea    edi,[ebx-0x1]
c001df43:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001df47:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001df4b:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001df51:	0f 87 1a 02 00 00    	ja     c001e171 <SATA::read(unsigned long long, int, void*)+0x245>
c001df57:	be 06 00 00 00       	mov    esi,0x6
c001df5c:	85 c9                	test   ecx,ecx
c001df5e:	0f 84 0d 02 00 00    	je     c001e171 <SATA::read(unsigned long long, int, void*)+0x245>
c001df64:	56                   	push   esi
c001df65:	56                   	push   esi
c001df66:	6a 00                	push   0x0
c001df68:	51                   	push   ecx
c001df69:	53                   	push   ebx
c001df6a:	52                   	push   edx
c001df6b:	50                   	push   eax
c001df6c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001df70:	e8 63 fd ff ff       	call   c001dcd8 <SATA::access(unsigned long long, int, void*, bool)>
c001df75:	83 c4 20             	add    esp,0x20
c001df78:	89 c6                	mov    esi,eax
c001df7a:	85 c0                	test   eax,eax
c001df7c:	0f 85 ea 01 00 00    	jne    c001e16c <SATA::read(unsigned long long, int, void*)+0x240>
c001df82:	01 1d b4 d0 02 c0    	add    DWORD PTR ds:0xc002d0b4,ebx
c001df88:	bb 0a 00 00 00       	mov    ebx,0xa
c001df8d:	50                   	push   eax
c001df8e:	50                   	push   eax
c001df8f:	6a 0f                	push   0xf
c001df91:	6a 00                	push   0x0
c001df93:	e8 75 f2 ff ff       	call   c001d20d <combineColours(unsigned char, unsigned char)>
c001df98:	5a                   	pop    edx
c001df99:	0f b6 c0             	movzx  eax,al
c001df9c:	59                   	pop    ecx
c001df9d:	b9 10 27 00 00       	mov    ecx,0x2710
c001dfa2:	50                   	push   eax
c001dfa3:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001dfa8:	99                   	cdq    
c001dfa9:	f7 f9                	idiv   ecx
c001dfab:	99                   	cdq    
c001dfac:	f7 fb                	idiv   ebx
c001dfae:	8d 42 30             	lea    eax,[edx+0x30]
c001dfb1:	0f b6 c0             	movzx  eax,al
c001dfb4:	50                   	push   eax
c001dfb5:	e8 42 f2 ff ff       	call   c001d1fc <combineCharAndColour(char, unsigned char)>
c001dfba:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001dfc0:	5f                   	pop    edi
c001dfc1:	5d                   	pop    ebp
c001dfc2:	bd e8 03 00 00       	mov    ebp,0x3e8
c001dfc7:	6a 0f                	push   0xf
c001dfc9:	6a 00                	push   0x0
c001dfcb:	e8 3d f2 ff ff       	call   c001d20d <combineColours(unsigned char, unsigned char)>
c001dfd0:	5a                   	pop    edx
c001dfd1:	0f b6 c0             	movzx  eax,al
c001dfd4:	59                   	pop    ecx
c001dfd5:	50                   	push   eax
c001dfd6:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001dfdb:	99                   	cdq    
c001dfdc:	f7 fd                	idiv   ebp
c001dfde:	99                   	cdq    
c001dfdf:	f7 fb                	idiv   ebx
c001dfe1:	8d 42 30             	lea    eax,[edx+0x30]
c001dfe4:	0f b6 c0             	movzx  eax,al
c001dfe7:	50                   	push   eax
c001dfe8:	e8 0f f2 ff ff       	call   c001d1fc <combineCharAndColour(char, unsigned char)>
c001dfed:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001dff3:	5f                   	pop    edi
c001dff4:	bf 64 00 00 00       	mov    edi,0x64
c001dff9:	58                   	pop    eax
c001dffa:	6a 0f                	push   0xf
c001dffc:	6a 00                	push   0x0
c001dffe:	e8 0a f2 ff ff       	call   c001d20d <combineColours(unsigned char, unsigned char)>
c001e003:	5a                   	pop    edx
c001e004:	0f b6 c0             	movzx  eax,al
c001e007:	59                   	pop    ecx
c001e008:	50                   	push   eax
c001e009:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e00e:	99                   	cdq    
c001e00f:	f7 ff                	idiv   edi
c001e011:	99                   	cdq    
c001e012:	f7 fb                	idiv   ebx
c001e014:	8d 42 30             	lea    eax,[edx+0x30]
c001e017:	0f b6 c0             	movzx  eax,al
c001e01a:	50                   	push   eax
c001e01b:	e8 dc f1 ff ff       	call   c001d1fc <combineCharAndColour(char, unsigned char)>
c001e020:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001e026:	58                   	pop    eax
c001e027:	5a                   	pop    edx
c001e028:	6a 0f                	push   0xf
c001e02a:	6a 00                	push   0x0
c001e02c:	e8 dc f1 ff ff       	call   c001d20d <combineColours(unsigned char, unsigned char)>
c001e031:	59                   	pop    ecx
c001e032:	0f b6 c0             	movzx  eax,al
c001e035:	5a                   	pop    edx
c001e036:	50                   	push   eax
c001e037:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e03c:	99                   	cdq    
c001e03d:	f7 fb                	idiv   ebx
c001e03f:	99                   	cdq    
c001e040:	f7 fb                	idiv   ebx
c001e042:	8d 42 30             	lea    eax,[edx+0x30]
c001e045:	0f b6 c0             	movzx  eax,al
c001e048:	50                   	push   eax
c001e049:	e8 ae f1 ff ff       	call   c001d1fc <combineCharAndColour(char, unsigned char)>
c001e04e:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001e054:	59                   	pop    ecx
c001e055:	58                   	pop    eax
c001e056:	6a 0f                	push   0xf
c001e058:	6a 00                	push   0x0
c001e05a:	e8 ae f1 ff ff       	call   c001d20d <combineColours(unsigned char, unsigned char)>
c001e05f:	5a                   	pop    edx
c001e060:	0f b6 c0             	movzx  eax,al
c001e063:	59                   	pop    ecx
c001e064:	50                   	push   eax
c001e065:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e06a:	99                   	cdq    
c001e06b:	f7 fb                	idiv   ebx
c001e06d:	8d 42 30             	lea    eax,[edx+0x30]
c001e070:	0f b6 c0             	movzx  eax,al
c001e073:	50                   	push   eax
c001e074:	e8 83 f1 ff ff       	call   c001d1fc <combineCharAndColour(char, unsigned char)>
c001e079:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001e07f:	58                   	pop    eax
c001e080:	5a                   	pop    edx
c001e081:	6a 0f                	push   0xf
c001e083:	6a 00                	push   0x0
c001e085:	e8 83 f1 ff ff       	call   c001d20d <combineColours(unsigned char, unsigned char)>
c001e08a:	59                   	pop    ecx
c001e08b:	0f b6 c0             	movzx  eax,al
c001e08e:	5a                   	pop    edx
c001e08f:	b9 10 27 00 00       	mov    ecx,0x2710
c001e094:	50                   	push   eax
c001e095:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e09a:	99                   	cdq    
c001e09b:	f7 f9                	idiv   ecx
c001e09d:	99                   	cdq    
c001e09e:	f7 fb                	idiv   ebx
c001e0a0:	8d 42 30             	lea    eax,[edx+0x30]
c001e0a3:	0f b6 c0             	movzx  eax,al
c001e0a6:	50                   	push   eax
c001e0a7:	e8 50 f1 ff ff       	call   c001d1fc <combineCharAndColour(char, unsigned char)>
c001e0ac:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001e0b2:	59                   	pop    ecx
c001e0b3:	58                   	pop    eax
c001e0b4:	6a 0f                	push   0xf
c001e0b6:	6a 00                	push   0x0
c001e0b8:	e8 50 f1 ff ff       	call   c001d20d <combineColours(unsigned char, unsigned char)>
c001e0bd:	5a                   	pop    edx
c001e0be:	0f b6 c0             	movzx  eax,al
c001e0c1:	59                   	pop    ecx
c001e0c2:	50                   	push   eax
c001e0c3:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e0c8:	99                   	cdq    
c001e0c9:	f7 fd                	idiv   ebp
c001e0cb:	99                   	cdq    
c001e0cc:	f7 fb                	idiv   ebx
c001e0ce:	8d 42 30             	lea    eax,[edx+0x30]
c001e0d1:	0f b6 c0             	movzx  eax,al
c001e0d4:	50                   	push   eax
c001e0d5:	e8 22 f1 ff ff       	call   c001d1fc <combineCharAndColour(char, unsigned char)>
c001e0da:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001e0e0:	5d                   	pop    ebp
c001e0e1:	58                   	pop    eax
c001e0e2:	6a 0f                	push   0xf
c001e0e4:	6a 00                	push   0x0
c001e0e6:	e8 22 f1 ff ff       	call   c001d20d <combineColours(unsigned char, unsigned char)>
c001e0eb:	5a                   	pop    edx
c001e0ec:	0f b6 c0             	movzx  eax,al
c001e0ef:	59                   	pop    ecx
c001e0f0:	50                   	push   eax
c001e0f1:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e0f6:	99                   	cdq    
c001e0f7:	f7 ff                	idiv   edi
c001e0f9:	99                   	cdq    
c001e0fa:	f7 fb                	idiv   ebx
c001e0fc:	8d 42 30             	lea    eax,[edx+0x30]
c001e0ff:	0f b6 c0             	movzx  eax,al
c001e102:	50                   	push   eax
c001e103:	e8 f4 f0 ff ff       	call   c001d1fc <combineCharAndColour(char, unsigned char)>
c001e108:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001e10e:	5f                   	pop    edi
c001e10f:	5d                   	pop    ebp
c001e110:	6a 0f                	push   0xf
c001e112:	6a 00                	push   0x0
c001e114:	e8 f4 f0 ff ff       	call   c001d20d <combineColours(unsigned char, unsigned char)>
c001e119:	5a                   	pop    edx
c001e11a:	0f b6 c0             	movzx  eax,al
c001e11d:	59                   	pop    ecx
c001e11e:	50                   	push   eax
c001e11f:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e124:	99                   	cdq    
c001e125:	f7 fb                	idiv   ebx
c001e127:	99                   	cdq    
c001e128:	f7 fb                	idiv   ebx
c001e12a:	8d 42 30             	lea    eax,[edx+0x30]
c001e12d:	0f b6 c0             	movzx  eax,al
c001e130:	50                   	push   eax
c001e131:	e8 c6 f0 ff ff       	call   c001d1fc <combineCharAndColour(char, unsigned char)>
c001e136:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001e13c:	5f                   	pop    edi
c001e13d:	5d                   	pop    ebp
c001e13e:	6a 0f                	push   0xf
c001e140:	6a 00                	push   0x0
c001e142:	e8 c6 f0 ff ff       	call   c001d20d <combineColours(unsigned char, unsigned char)>
c001e147:	5a                   	pop    edx
c001e148:	0f b6 c0             	movzx  eax,al
c001e14b:	59                   	pop    ecx
c001e14c:	50                   	push   eax
c001e14d:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e152:	99                   	cdq    
c001e153:	f7 fb                	idiv   ebx
c001e155:	83 c2 30             	add    edx,0x30
c001e158:	0f b6 d2             	movzx  edx,dl
c001e15b:	52                   	push   edx
c001e15c:	e8 9b f0 ff ff       	call   c001d1fc <combineCharAndColour(char, unsigned char)>
c001e161:	83 c4 10             	add    esp,0x10
c001e164:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001e16a:	eb 05                	jmp    c001e171 <SATA::read(unsigned long long, int, void*)+0x245>
c001e16c:	be 01 00 00 00       	mov    esi,0x1
c001e171:	83 c4 0c             	add    esp,0xc
c001e174:	89 f0                	mov    eax,esi
c001e176:	5b                   	pop    ebx
c001e177:	5e                   	pop    esi
c001e178:	5f                   	pop    edi
c001e179:	5d                   	pop    ebp
c001e17a:	c3                   	ret    
c001e17b:	90                   	nop

c001e17c <SATA::write(unsigned long long, int, void*)>:
c001e17c:	55                   	push   ebp
c001e17d:	b8 04 00 00 00       	mov    eax,0x4
c001e182:	57                   	push   edi
c001e183:	56                   	push   esi
c001e184:	53                   	push   ebx
c001e185:	83 ec 1c             	sub    esp,0x1c
c001e188:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001e18c:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001e190:	8d 75 ff             	lea    esi,[ebp-0x1]
c001e193:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001e197:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001e19b:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001e1a1:	0f 87 32 02 00 00    	ja     c001e3d9 <SATA::write(unsigned long long, int, void*)+0x25d>
c001e1a7:	b8 06 00 00 00       	mov    eax,0x6
c001e1ac:	85 ff                	test   edi,edi
c001e1ae:	0f 84 25 02 00 00    	je     c001e3d9 <SATA::write(unsigned long long, int, void*)+0x25d>
c001e1b4:	89 ee                	mov    esi,ebp
c001e1b6:	c1 e6 09             	shl    esi,0x9
c001e1b9:	01 fe                	add    esi,edi
c001e1bb:	89 c8                	mov    eax,ecx
c001e1bd:	89 da                	mov    edx,ebx
c001e1bf:	83 c0 01             	add    eax,0x1
c001e1c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e1c6:	83 d2 00             	adc    edx,0x0
c001e1c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e1cd:	50                   	push   eax
c001e1ce:	50                   	push   eax
c001e1cf:	6a 01                	push   0x1
c001e1d1:	57                   	push   edi
c001e1d2:	81 c7 00 02 00 00    	add    edi,0x200
c001e1d8:	6a 01                	push   0x1
c001e1da:	53                   	push   ebx
c001e1db:	51                   	push   ecx
c001e1dc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001e1e0:	e8 f3 fa ff ff       	call   c001dcd8 <SATA::access(unsigned long long, int, void*, bool)>
c001e1e5:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e1e9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001e1ed:	83 c4 20             	add    esp,0x20
c001e1f0:	39 f7                	cmp    edi,esi
c001e1f2:	75 c7                	jne    c001e1bb <SATA::write(unsigned long long, int, void*)+0x3f>
c001e1f4:	bb 0a 00 00 00       	mov    ebx,0xa
c001e1f9:	01 2d b0 d0 02 c0    	add    DWORD PTR ds:0xc002d0b0,ebp
c001e1ff:	bd 10 27 00 00       	mov    ebp,0x2710
c001e204:	50                   	push   eax
c001e205:	50                   	push   eax
c001e206:	6a 0f                	push   0xf
c001e208:	6a 00                	push   0x0
c001e20a:	e8 fe ef ff ff       	call   c001d20d <combineColours(unsigned char, unsigned char)>
c001e20f:	5a                   	pop    edx
c001e210:	0f b6 c0             	movzx  eax,al
c001e213:	59                   	pop    ecx
c001e214:	50                   	push   eax
c001e215:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e21a:	99                   	cdq    
c001e21b:	f7 fd                	idiv   ebp
c001e21d:	99                   	cdq    
c001e21e:	f7 fb                	idiv   ebx
c001e220:	8d 42 30             	lea    eax,[edx+0x30]
c001e223:	0f b6 c0             	movzx  eax,al
c001e226:	50                   	push   eax
c001e227:	e8 d0 ef ff ff       	call   c001d1fc <combineCharAndColour(char, unsigned char)>
c001e22c:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001e232:	5e                   	pop    esi
c001e233:	5f                   	pop    edi
c001e234:	bf e8 03 00 00       	mov    edi,0x3e8
c001e239:	6a 0f                	push   0xf
c001e23b:	6a 00                	push   0x0
c001e23d:	e8 cb ef ff ff       	call   c001d20d <combineColours(unsigned char, unsigned char)>
c001e242:	5a                   	pop    edx
c001e243:	0f b6 c0             	movzx  eax,al
c001e246:	59                   	pop    ecx
c001e247:	50                   	push   eax
c001e248:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e24d:	99                   	cdq    
c001e24e:	f7 ff                	idiv   edi
c001e250:	99                   	cdq    
c001e251:	f7 fb                	idiv   ebx
c001e253:	8d 42 30             	lea    eax,[edx+0x30]
c001e256:	0f b6 c0             	movzx  eax,al
c001e259:	50                   	push   eax
c001e25a:	e8 9d ef ff ff       	call   c001d1fc <combineCharAndColour(char, unsigned char)>
c001e25f:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001e265:	5e                   	pop    esi
c001e266:	be 64 00 00 00       	mov    esi,0x64
c001e26b:	58                   	pop    eax
c001e26c:	6a 0f                	push   0xf
c001e26e:	6a 00                	push   0x0
c001e270:	e8 98 ef ff ff       	call   c001d20d <combineColours(unsigned char, unsigned char)>
c001e275:	5a                   	pop    edx
c001e276:	0f b6 c0             	movzx  eax,al
c001e279:	59                   	pop    ecx
c001e27a:	50                   	push   eax
c001e27b:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e280:	99                   	cdq    
c001e281:	f7 fe                	idiv   esi
c001e283:	99                   	cdq    
c001e284:	f7 fb                	idiv   ebx
c001e286:	8d 42 30             	lea    eax,[edx+0x30]
c001e289:	0f b6 c0             	movzx  eax,al
c001e28c:	50                   	push   eax
c001e28d:	e8 6a ef ff ff       	call   c001d1fc <combineCharAndColour(char, unsigned char)>
c001e292:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001e298:	58                   	pop    eax
c001e299:	5a                   	pop    edx
c001e29a:	6a 0f                	push   0xf
c001e29c:	6a 00                	push   0x0
c001e29e:	e8 6a ef ff ff       	call   c001d20d <combineColours(unsigned char, unsigned char)>
c001e2a3:	59                   	pop    ecx
c001e2a4:	0f b6 c0             	movzx  eax,al
c001e2a7:	5a                   	pop    edx
c001e2a8:	50                   	push   eax
c001e2a9:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e2ae:	99                   	cdq    
c001e2af:	f7 fb                	idiv   ebx
c001e2b1:	99                   	cdq    
c001e2b2:	f7 fb                	idiv   ebx
c001e2b4:	8d 42 30             	lea    eax,[edx+0x30]
c001e2b7:	0f b6 c0             	movzx  eax,al
c001e2ba:	50                   	push   eax
c001e2bb:	e8 3c ef ff ff       	call   c001d1fc <combineCharAndColour(char, unsigned char)>
c001e2c0:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001e2c6:	59                   	pop    ecx
c001e2c7:	58                   	pop    eax
c001e2c8:	6a 0f                	push   0xf
c001e2ca:	6a 00                	push   0x0
c001e2cc:	e8 3c ef ff ff       	call   c001d20d <combineColours(unsigned char, unsigned char)>
c001e2d1:	5a                   	pop    edx
c001e2d2:	0f b6 c0             	movzx  eax,al
c001e2d5:	59                   	pop    ecx
c001e2d6:	50                   	push   eax
c001e2d7:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e2dc:	99                   	cdq    
c001e2dd:	f7 fb                	idiv   ebx
c001e2df:	83 c2 30             	add    edx,0x30
c001e2e2:	0f b6 d2             	movzx  edx,dl
c001e2e5:	52                   	push   edx
c001e2e6:	e8 11 ef ff ff       	call   c001d1fc <combineCharAndColour(char, unsigned char)>
c001e2eb:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001e2f1:	58                   	pop    eax
c001e2f2:	5a                   	pop    edx
c001e2f3:	6a 0f                	push   0xf
c001e2f5:	6a 00                	push   0x0
c001e2f7:	e8 11 ef ff ff       	call   c001d20d <combineColours(unsigned char, unsigned char)>
c001e2fc:	59                   	pop    ecx
c001e2fd:	0f b6 c0             	movzx  eax,al
c001e300:	5a                   	pop    edx
c001e301:	50                   	push   eax
c001e302:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e307:	99                   	cdq    
c001e308:	f7 fd                	idiv   ebp
c001e30a:	99                   	cdq    
c001e30b:	f7 fb                	idiv   ebx
c001e30d:	8d 42 30             	lea    eax,[edx+0x30]
c001e310:	0f b6 c0             	movzx  eax,al
c001e313:	50                   	push   eax
c001e314:	e8 e3 ee ff ff       	call   c001d1fc <combineCharAndColour(char, unsigned char)>
c001e319:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001e31f:	59                   	pop    ecx
c001e320:	5d                   	pop    ebp
c001e321:	6a 0f                	push   0xf
c001e323:	6a 00                	push   0x0
c001e325:	e8 e3 ee ff ff       	call   c001d20d <combineColours(unsigned char, unsigned char)>
c001e32a:	5a                   	pop    edx
c001e32b:	0f b6 c0             	movzx  eax,al
c001e32e:	59                   	pop    ecx
c001e32f:	50                   	push   eax
c001e330:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e335:	99                   	cdq    
c001e336:	f7 ff                	idiv   edi
c001e338:	99                   	cdq    
c001e339:	f7 fb                	idiv   ebx
c001e33b:	8d 42 30             	lea    eax,[edx+0x30]
c001e33e:	0f b6 c0             	movzx  eax,al
c001e341:	50                   	push   eax
c001e342:	e8 b5 ee ff ff       	call   c001d1fc <combineCharAndColour(char, unsigned char)>
c001e347:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001e34d:	5f                   	pop    edi
c001e34e:	5d                   	pop    ebp
c001e34f:	6a 0f                	push   0xf
c001e351:	6a 00                	push   0x0
c001e353:	e8 b5 ee ff ff       	call   c001d20d <combineColours(unsigned char, unsigned char)>
c001e358:	5a                   	pop    edx
c001e359:	0f b6 c0             	movzx  eax,al
c001e35c:	59                   	pop    ecx
c001e35d:	50                   	push   eax
c001e35e:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e363:	99                   	cdq    
c001e364:	f7 fe                	idiv   esi
c001e366:	99                   	cdq    
c001e367:	f7 fb                	idiv   ebx
c001e369:	8d 42 30             	lea    eax,[edx+0x30]
c001e36c:	0f b6 c0             	movzx  eax,al
c001e36f:	50                   	push   eax
c001e370:	e8 87 ee ff ff       	call   c001d1fc <combineCharAndColour(char, unsigned char)>
c001e375:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001e37b:	5e                   	pop    esi
c001e37c:	5f                   	pop    edi
c001e37d:	6a 0f                	push   0xf
c001e37f:	6a 00                	push   0x0
c001e381:	e8 87 ee ff ff       	call   c001d20d <combineColours(unsigned char, unsigned char)>
c001e386:	5d                   	pop    ebp
c001e387:	0f b6 c0             	movzx  eax,al
c001e38a:	5a                   	pop    edx
c001e38b:	50                   	push   eax
c001e38c:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e391:	99                   	cdq    
c001e392:	f7 fb                	idiv   ebx
c001e394:	99                   	cdq    
c001e395:	f7 fb                	idiv   ebx
c001e397:	8d 42 30             	lea    eax,[edx+0x30]
c001e39a:	0f b6 c0             	movzx  eax,al
c001e39d:	50                   	push   eax
c001e39e:	e8 59 ee ff ff       	call   c001d1fc <combineCharAndColour(char, unsigned char)>
c001e3a3:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001e3a9:	59                   	pop    ecx
c001e3aa:	5e                   	pop    esi
c001e3ab:	6a 0f                	push   0xf
c001e3ad:	6a 00                	push   0x0
c001e3af:	e8 59 ee ff ff       	call   c001d20d <combineColours(unsigned char, unsigned char)>
c001e3b4:	5f                   	pop    edi
c001e3b5:	0f b6 c0             	movzx  eax,al
c001e3b8:	5d                   	pop    ebp
c001e3b9:	50                   	push   eax
c001e3ba:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e3bf:	99                   	cdq    
c001e3c0:	f7 fb                	idiv   ebx
c001e3c2:	83 c2 30             	add    edx,0x30
c001e3c5:	0f b6 d2             	movzx  edx,dl
c001e3c8:	52                   	push   edx
c001e3c9:	e8 2e ee ff ff       	call   c001d1fc <combineCharAndColour(char, unsigned char)>
c001e3ce:	83 c4 10             	add    esp,0x10
c001e3d1:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001e3d7:	31 c0                	xor    eax,eax
c001e3d9:	83 c4 1c             	add    esp,0x1c
c001e3dc:	5b                   	pop    ebx
c001e3dd:	5e                   	pop    esi
c001e3de:	5f                   	pop    edi
c001e3df:	5d                   	pop    ebp
c001e3e0:	c3                   	ret    
c001e3e1:	90                   	nop

c001e3e2 <SATAPI::write(unsigned long long, int, void*)>:
c001e3e2:	b8 03 00 00 00       	mov    eax,0x3
c001e3e7:	c3                   	ret    

c001e3e8 <SATAPI::close(int, int, void*)>:
c001e3e8:	83 ec 0c             	sub    esp,0xc
c001e3eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3ef:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e3f5:	85 c0                	test   eax,eax
c001e3f7:	74 0c                	je     c001e405 <SATAPI::close(int, int, void*)+0x1d>
c001e3f9:	83 ec 0c             	sub    esp,0xc
c001e3fc:	8b 10                	mov    edx,DWORD PTR [eax]
c001e3fe:	50                   	push   eax
c001e3ff:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001e402:	83 c4 10             	add    esp,0x10
c001e405:	31 c0                	xor    eax,eax
c001e407:	83 c4 0c             	add    esp,0xc
c001e40a:	c3                   	ret    
c001e40b:	90                   	nop

c001e40c <SATAPI::SATAPI()>:
c001e40c:	83 ec 0c             	sub    esp,0xc
c001e40f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e413:	83 ec 04             	sub    esp,0x4
c001e416:	68 00 08 00 00       	push   0x800
c001e41b:	68 bc 34 02 c0       	push   0xc00234bc
c001e420:	50                   	push   eax
c001e421:	e8 fc e9 fe ff       	call   c000ce22 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001e426:	83 c4 10             	add    esp,0x10
c001e429:	ba b0 35 02 c0       	mov    edx,0xc00235b0
c001e42e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e432:	89 10                	mov    DWORD PTR [eax],edx
c001e434:	90                   	nop
c001e435:	83 c4 0c             	add    esp,0xc
c001e438:	c3                   	ret    
c001e439:	90                   	nop

c001e43a <SATAPI::diskRemoved()>:
c001e43a:	c3                   	ret    
c001e43b:	90                   	nop

c001e43c <SATAPI::diskInserted()>:
c001e43c:	83 ec 18             	sub    esp,0x18
c001e43f:	68 c8 34 02 c0       	push   0xc00234c8
c001e444:	e8 fc c4 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e449:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e44d:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001e454:	83 c4 1c             	add    esp,0x1c
c001e457:	c3                   	ret    

c001e458 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001e458:	55                   	push   ebp
c001e459:	57                   	push   edi
c001e45a:	56                   	push   esi
c001e45b:	53                   	push   ebx
c001e45c:	83 ec 34             	sub    esp,0x34
c001e45f:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001e463:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e467:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001e46b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e46f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001e473:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001e479:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e47f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e483:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001e489:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e48d:	83 c0 02             	add    eax,0x2
c001e490:	c1 e0 07             	shl    eax,0x7
c001e493:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e497:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e49b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e49f:	c1 e0 07             	shl    eax,0x7
c001e4a2:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e4a6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e4aa:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001e4b4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e4b8:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e4be:	e8 21 e5 ff ff       	call   c001c9e4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001e4c3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e4c7:	83 c4 10             	add    esp,0x10
c001e4ca:	b8 01 00 00 00       	mov    eax,0x1
c001e4cf:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001e4d4:	0f 84 53 02 00 00    	je     c001e72d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001e4da:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e4e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e4e4:	8b 00                	mov    eax,DWORD PTR [eax]
c001e4e6:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001e4ec:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001e4f2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e4f6:	c1 e1 05             	shl    ecx,0x5
c001e4f9:	01 c8                	add    eax,ecx
c001e4fb:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e4fd:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001e503:	81 c9 25 00 01 00    	or     ecx,0x10025
c001e509:	89 08                	mov    DWORD PTR [eax],ecx
c001e50b:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e511:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001e517:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001e51d:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001e520:	8d 7b 40             	lea    edi,[ebx+0x40]
c001e523:	50                   	push   eax
c001e524:	68 90 00 00 00       	push   0x90
c001e529:	6a 00                	push   0x0
c001e52b:	53                   	push   ebx
c001e52c:	e8 bf 1f fe ff       	call   c00004f0 <memset>
c001e531:	b9 0c 00 00 00       	mov    ecx,0xc
c001e536:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001e53a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e53c:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001e542:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001e546:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001e54c:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001e550:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e554:	48                   	dec    eax
c001e555:	25 ff ff 3f 00       	and    eax,0x3fffff
c001e55a:	89 c1                	mov    ecx,eax
c001e55c:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001e562:	25 00 00 c0 ff       	and    eax,0xffc00000
c001e567:	09 c8                	or     eax,ecx
c001e569:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001e56f:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001e575:	83 c8 80             	or     eax,0xffffff80
c001e578:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001e57e:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001e581:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001e585:	25 00 7f 00 00       	and    eax,0x7f00
c001e58a:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001e58e:	0d 27 80 ff ff       	or     eax,0xffff8027
c001e593:	66 89 03             	mov    WORD PTR [ebx],ax
c001e596:	89 d0                	mov    eax,edx
c001e598:	c1 ea 18             	shr    edx,0x18
c001e59b:	c1 e8 10             	shr    eax,0x10
c001e59e:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001e5a1:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001e5a4:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001e5a8:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001e5ab:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e5af:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001e5b2:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001e5b6:	83 c4 10             	add    esp,0x10
c001e5b9:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001e5bd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e5c1:	31 c0                	xor    eax,eax
c001e5c3:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001e5c9:	80 e1 88             	and    cl,0x88
c001e5cc:	74 0a                	je     c001e5d8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x180>
c001e5ce:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e5d3:	74 0a                	je     c001e5df <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x187>
c001e5d5:	40                   	inc    eax
c001e5d6:	eb eb                	jmp    c001e5c3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c001e5d8:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e5dd:	75 43                	jne    c001e622 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c001e5df:	83 ec 0c             	sub    esp,0xc
c001e5e2:	68 e0 34 02 c0       	push   0xc00234e0
c001e5e7:	e8 59 c3 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e5ec:	58                   	pop    eax
c001e5ed:	5a                   	pop    edx
c001e5ee:	68 f5 34 02 c0       	push   0xc00234f5
c001e5f3:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001e5f9:	e8 a8 a4 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001e5fe:	59                   	pop    ecx
c001e5ff:	5b                   	pop    ebx
c001e600:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e604:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e60a:	e8 6f e4 ff ff       	call   c001ca7e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001e60f:	5e                   	pop    esi
c001e610:	5f                   	pop    edi
c001e611:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e615:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e61b:	e8 3e e4 ff ff       	call   c001ca5e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001e620:	eb 48                	jmp    c001e66a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x212>
c001e622:	be 01 00 00 00       	mov    esi,0x1
c001e627:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001e62b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e62f:	d3 e6                	shl    esi,cl
c001e631:	c1 e7 07             	shl    edi,0x7
c001e634:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001e63a:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001e63f:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001e643:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001e649:	85 c6                	test   esi,eax
c001e64b:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001e651:	0f 84 a3 00 00 00    	je     c001e6fa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a2>
c001e657:	0f ba e0 1e          	bt     eax,0x1e
c001e65b:	73 1a                	jae    c001e677 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21f>
c001e65d:	83 ec 0c             	sub    esp,0xc
c001e660:	68 07 35 02 c0       	push   0xc0023507
c001e665:	e8 db c2 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e66a:	83 c4 10             	add    esp,0x10
c001e66d:	b8 01 00 00 00       	mov    eax,0x1
c001e672:	e9 b6 00 00 00       	jmp    c001e72d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001e677:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001e67d:	83 f8 0d             	cmp    eax,0xd
c001e680:	77 0a                	ja     c001e68c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x234>
c001e682:	83 ec 0c             	sub    esp,0xc
c001e685:	68 c8 00 00 00       	push   0xc8
c001e68a:	eb 28                	jmp    c001e6b4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001e68c:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001e692:	83 f8 0d             	cmp    eax,0xd
c001e695:	77 0a                	ja     c001e6a1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x249>
c001e697:	83 ec 0c             	sub    esp,0xc
c001e69a:	68 58 02 00 00       	push   0x258
c001e69f:	eb 13                	jmp    c001e6b4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001e6a1:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001e6a7:	83 f8 06             	cmp    eax,0x6
c001e6aa:	77 10                	ja     c001e6bc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001e6ac:	83 ec 0c             	sub    esp,0xc
c001e6af:	68 dc 05 00 00       	push   0x5dc
c001e6b4:	e8 c7 7d ff ff       	call   c0016480 <milliTenthSleep(unsigned int)>
c001e6b9:	83 c4 10             	add    esp,0x10
c001e6bc:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e6c0:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001e6c3:	75 06                	jne    c001e6cb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x273>
c001e6c5:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001e6c9:	74 15                	je     c001e6e0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001e6cb:	83 fb 06             	cmp    ebx,0x6
c001e6ce:	77 10                	ja     c001e6e0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001e6d0:	83 ec 0c             	sub    esp,0xc
c001e6d3:	68 c4 09 00 00       	push   0x9c4
c001e6d8:	e8 a3 7d ff ff       	call   c0016480 <milliTenthSleep(unsigned int)>
c001e6dd:	83 c4 10             	add    esp,0x10
c001e6e0:	43                   	inc    ebx
c001e6e1:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001e6e7:	0f 85 56 ff ff ff    	jne    c001e643 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1eb>
c001e6ed:	83 ec 0c             	sub    esp,0xc
c001e6f0:	68 1a 35 02 c0       	push   0xc002351a
c001e6f5:	e9 6b ff ff ff       	jmp    c001e665 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001e6fa:	0f ba e0 1e          	bt     eax,0x1e
c001e6fe:	73 0d                	jae    c001e70d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b5>
c001e700:	83 ec 0c             	sub    esp,0xc
c001e703:	68 2e 35 02 c0       	push   0xc002352e
c001e708:	e9 58 ff ff ff       	jmp    c001e665 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001e70d:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001e712:	74 17                	je     c001e72b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001e714:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001e719:	74 10                	je     c001e72b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001e71b:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001e721:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001e725:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001e729:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e72b:	31 c0                	xor    eax,eax
c001e72d:	83 c4 2c             	add    esp,0x2c
c001e730:	5b                   	pop    ebx
c001e731:	5e                   	pop    esi
c001e732:	5f                   	pop    edi
c001e733:	5d                   	pop    ebp
c001e734:	c3                   	ret    
c001e735:	90                   	nop

c001e736 <SATAPI::eject()>:
c001e736:	57                   	push   edi
c001e737:	b9 03 00 00 00       	mov    ecx,0x3
c001e73c:	83 ec 18             	sub    esp,0x18
c001e73f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e743:	fc                   	cld    
c001e744:	31 c0                	xor    eax,eax
c001e746:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e748:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001e74d:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001e752:	50                   	push   eax
c001e753:	6a 00                	push   0x0
c001e755:	6a 00                	push   0x0
c001e757:	6a 00                	push   0x0
c001e759:	6a 00                	push   0x0
c001e75b:	6a 02                	push   0x2
c001e75d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e761:	50                   	push   eax
c001e762:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e766:	e8 ed fc ff ff       	call   c001e458 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e76b:	31 c0                	xor    eax,eax
c001e76d:	83 c4 38             	add    esp,0x38
c001e770:	5f                   	pop    edi
c001e771:	c3                   	ret    

c001e772 <SATAPI::detectMedia()>:
c001e772:	53                   	push   ebx
c001e773:	83 ec 14             	sub    esp,0x14
c001e776:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001e77a:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e780:	e8 1b 00 ff ff       	call   c000e7a0 <VCache::writeWriteBuffer()>
c001e785:	59                   	pop    ecx
c001e786:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e78c:	e8 ff ff fe ff       	call   c000e790 <VCache::invalidateReadBuffer()>
c001e791:	c7 04 24 43 35 02 c0 	mov    DWORD PTR [esp],0xc0023543
c001e798:	e8 a8 c1 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e79d:	83 c4 10             	add    esp,0x10
c001e7a0:	31 c0                	xor    eax,eax
c001e7a2:	8b 14 85 80 b8 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4780]
c001e7a9:	85 d2                	test   edx,edx
c001e7ab:	74 0f                	je     c001e7bc <SATAPI::detectMedia()+0x4a>
c001e7ad:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001e7b3:	75 07                	jne    c001e7bc <SATAPI::detectMedia()+0x4a>
c001e7b5:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001e7bc:	40                   	inc    eax
c001e7bd:	83 f8 1a             	cmp    eax,0x1a
c001e7c0:	75 e0                	jne    c001e7a2 <SATAPI::detectMedia()+0x30>
c001e7c2:	83 c4 08             	add    esp,0x8
c001e7c5:	5b                   	pop    ebx
c001e7c6:	c3                   	ret    
c001e7c7:	90                   	nop

c001e7c8 <SATAPI::open(int, int, void*)>:
c001e7c8:	56                   	push   esi
c001e7c9:	53                   	push   ebx
c001e7ca:	51                   	push   ecx
c001e7cb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e7cf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e7d3:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001e7dd:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001e7e3:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001e7ed:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e7f1:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001e7fb:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001e801:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001e808:	e8 b2 95 fe ff       	call   c0007dbf <Phys::allocatePage()>
c001e80d:	89 c6                	mov    esi,eax
c001e80f:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001e815:	81 c6 00 10 00 00    	add    esi,0x1000
c001e81b:	e8 9f 95 fe ff       	call   c0007dbf <Phys::allocatePage()>
c001e820:	39 c6                	cmp    esi,eax
c001e822:	74 10                	je     c001e834 <SATAPI::open(int, int, void*)+0x6c>
c001e824:	83 ec 0c             	sub    esp,0xc
c001e827:	68 58 35 02 c0       	push   0xc0023558
c001e82c:	e8 7e 2e ff ff       	call   c00116af <KePanic(char const*)>
c001e831:	83 c4 10             	add    esp,0x10
c001e834:	83 ec 0c             	sub    esp,0xc
c001e837:	6a 02                	push   0x2
c001e839:	e8 cf ad fe ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c001e83e:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001e844:	6a 03                	push   0x3
c001e846:	50                   	push   eax
c001e847:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001e84d:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c001e853:	e8 c8 b4 fe ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c001e858:	83 c4 14             	add    esp,0x14
c001e85b:	68 78 01 00 00       	push   0x178
c001e860:	e8 51 92 fe ff       	call   c0007ab6 <malloc>
c001e865:	83 c4 0c             	add    esp,0xc
c001e868:	89 c6                	mov    esi,eax
c001e86a:	6a 00                	push   0x0
c001e86c:	68 ff ff ff 7f       	push   0x7fffffff
c001e871:	6a 00                	push   0x0
c001e873:	6a 00                	push   0x0
c001e875:	53                   	push   ebx
c001e876:	68 6e 35 02 c0       	push   0xc002356e
c001e87b:	50                   	push   eax
c001e87c:	e8 7b f3 fe ff       	call   c000dbfc <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001e881:	83 c4 14             	add    esp,0x14
c001e884:	56                   	push   esi
c001e885:	e8 32 f4 fe ff       	call   c000dcbc <LogicalDisk::assignDriveLetter()>
c001e88a:	5a                   	pop    edx
c001e88b:	0f be c0             	movsx  eax,al
c001e88e:	59                   	pop    ecx
c001e88f:	50                   	push   eax
c001e890:	68 c0 33 02 c0       	push   0xc00233c0
c001e895:	e8 ab c0 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e89a:	58                   	pop    eax
c001e89b:	5a                   	pop    edx
c001e89c:	56                   	push   esi
c001e89d:	53                   	push   ebx
c001e89e:	e8 b3 e1 fe ff       	call   c000ca56 <Device::addChild(Device*)>
c001e8a3:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001e8a9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e8ac:	e8 d9 e5 fe ff       	call   c000ce8a <PhysicalDisk::startCache()>
c001e8b1:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001e8b8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e8bb:	e8 b2 fe ff ff       	call   c001e772 <SATAPI::detectMedia()>
c001e8c0:	83 c4 14             	add    esp,0x14
c001e8c3:	31 c0                	xor    eax,eax
c001e8c5:	5b                   	pop    ebx
c001e8c6:	5e                   	pop    esi
c001e8c7:	c3                   	ret    

c001e8c8 <SATAPI::read(unsigned long long, int, void*)>:
c001e8c8:	57                   	push   edi
c001e8c9:	56                   	push   esi
c001e8ca:	53                   	push   ebx
c001e8cb:	83 ec 30             	sub    esp,0x30
c001e8ce:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e8d2:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c001e8d6:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001e8da:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001e8de:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e8e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e8e6:	83 fe 04             	cmp    esi,0x4
c001e8e9:	7e 10                	jle    c001e8fb <SATAPI::read(unsigned long long, int, void*)+0x33>
c001e8eb:	83 ec 0c             	sub    esp,0xc
c001e8ee:	68 7c 35 02 c0       	push   0xc002357c
c001e8f3:	e8 b7 2d ff ff       	call   c00116af <KePanic(char const*)>
c001e8f8:	83 c4 10             	add    esp,0x10
c001e8fb:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001e901:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001e907:	51                   	push   ecx
c001e908:	50                   	push   eax
c001e909:	83 c0 02             	add    eax,0x2
c001e90c:	c1 e0 07             	shl    eax,0x7
c001e90f:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001e915:	50                   	push   eax
c001e916:	52                   	push   edx
c001e917:	e8 8c e1 ff ff       	call   c001caa8 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e91c:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001e920:	b9 03 00 00 00       	mov    ecx,0x3
c001e925:	fc                   	cld    
c001e926:	31 c0                	xor    eax,eax
c001e928:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e92a:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001e92f:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001e934:	83 c4 0c             	add    esp,0xc
c001e937:	6a 00                	push   0x0
c001e939:	6a 00                	push   0x0
c001e93b:	6a 00                	push   0x0
c001e93d:	6a 00                	push   0x0
c001e93f:	6a 02                	push   0x2
c001e941:	8d 44 24 30          	lea    eax,[esp+0x30]
c001e945:	50                   	push   eax
c001e946:	53                   	push   ebx
c001e947:	e8 0c fb ff ff       	call   c001e458 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e94c:	83 c4 20             	add    esp,0x20
c001e94f:	85 c0                	test   eax,eax
c001e951:	75 44                	jne    c001e997 <SATAPI::read(unsigned long long, int, void*)+0xcf>
c001e953:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001e957:	b9 03 00 00 00       	mov    ecx,0x3
c001e95c:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e95e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e962:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001e967:	0f c8                	bswap  eax
c001e969:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001e96d:	89 f0                	mov    eax,esi
c001e96f:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001e973:	50                   	push   eax
c001e974:	56                   	push   esi
c001e975:	c1 e6 0b             	shl    esi,0xb
c001e978:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001e97c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e980:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e984:	56                   	push   esi
c001e985:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001e989:	50                   	push   eax
c001e98a:	53                   	push   ebx
c001e98b:	e8 c8 fa ff ff       	call   c001e458 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e990:	83 c4 20             	add    esp,0x20
c001e993:	85 c0                	test   eax,eax
c001e995:	74 14                	je     c001e9ab <SATAPI::read(unsigned long long, int, void*)+0xe3>
c001e997:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e99b:	83 ec 0c             	sub    esp,0xc
c001e99e:	53                   	push   ebx
c001e99f:	e8 ce fd ff ff       	call   c001e772 <SATAPI::detectMedia()>
c001e9a4:	83 c4 10             	add    esp,0x10
c001e9a7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e9ab:	83 c4 30             	add    esp,0x30
c001e9ae:	5b                   	pop    ebx
c001e9af:	5e                   	pop    esi
c001e9b0:	5f                   	pop    edi
c001e9b1:	c3                   	ret    

c001e9b2 <IOAPIC::close(int, int, void*)>:
c001e9b2:	b8 00 00 00 00       	mov    eax,0x0
c001e9b7:	c3                   	ret    

c001e9b8 <apicGetBase()>:
c001e9b8:	55                   	push   ebp
c001e9b9:	89 e5                	mov    ebp,esp
c001e9bb:	83 ec 18             	sub    esp,0x18
c001e9be:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001e9c3:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e9c9:	83 e0 08             	and    eax,0x8
c001e9cc:	0f b6 c0             	movzx  eax,al
c001e9cf:	85 c0                	test   eax,eax
c001e9d1:	75 07                	jne    c001e9da <apicGetBase()+0x22>
c001e9d3:	b8 00 00 00 00       	mov    eax,0x0
c001e9d8:	eb 21                	jmp    c001e9fb <apicGetBase()+0x43>
c001e9da:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001e9df:	83 ec 08             	sub    esp,0x8
c001e9e2:	6a 1b                	push   0x1b
c001e9e4:	50                   	push   eax
c001e9e5:	e8 d6 86 fe ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c001e9ea:	83 c4 10             	add    esp,0x10
c001e9ed:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e9f0:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001e9f3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e9f6:	25 00 00 ff ff       	and    eax,0xffff0000
c001e9fb:	c9                   	leave  
c001e9fc:	c3                   	ret    
c001e9fd:	90                   	nop

c001e9fe <IOAPIC::IOAPIC()>:
c001e9fe:	83 ec 0c             	sub    esp,0xc
c001ea01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea05:	83 ec 08             	sub    esp,0x8
c001ea08:	68 e0 35 02 c0       	push   0xc00235e0
c001ea0d:	50                   	push   eax
c001ea0e:	e8 db e1 fe ff       	call   c000cbee <Device::Device(char const*)>
c001ea13:	83 c4 10             	add    esp,0x10
c001ea16:	ba f0 35 02 c0       	mov    edx,0xc00235f0
c001ea1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea1f:	89 10                	mov    DWORD PTR [eax],edx
c001ea21:	90                   	nop
c001ea22:	83 c4 0c             	add    esp,0xc
c001ea25:	c3                   	ret    

c001ea26 <apicOpen()>:
c001ea26:	55                   	push   ebp
c001ea27:	89 e5                	mov    ebp,esp
c001ea29:	53                   	push   ebx
c001ea2a:	83 ec 34             	sub    esp,0x34
c001ea2d:	a0 00 d1 02 c0       	mov    al,ds:0xc002d100
c001ea32:	83 f0 01             	xor    eax,0x1
c001ea35:	0f b6 c0             	movzx  eax,al
c001ea38:	85 c0                	test   eax,eax
c001ea3a:	0f 84 a3 00 00 00    	je     c001eae3 <apicOpen()+0xbd>
c001ea40:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001ea44:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c001ea49:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001ea4d:	0f b6 c0             	movzx  eax,al
c001ea50:	39 c2                	cmp    edx,eax
c001ea52:	0f 83 84 00 00 00    	jae    c001eadc <apicOpen()+0xb6>
c001ea58:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001ea5f:	83 ec 0c             	sub    esp,0xc
c001ea62:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001ea65:	e8 4c 90 fe ff       	call   c0007ab6 <malloc>
c001ea6a:	83 c4 10             	add    esp,0x10
c001ea6d:	89 c3                	mov    ebx,eax
c001ea6f:	83 ec 0c             	sub    esp,0xc
c001ea72:	53                   	push   ebx
c001ea73:	e8 86 ff ff ff       	call   c001e9fe <IOAPIC::IOAPIC()>
c001ea78:	83 c4 10             	add    esp,0x10
c001ea7b:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001ea7e:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001ea82:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001ea85:	89 14 85 e0 d0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2f20],edx
c001ea8c:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c001ea91:	83 c0 01             	add    eax,0x1
c001ea94:	a3 c0 d0 02 c0       	mov    ds:0xc002d0c0,eax
c001ea99:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001ea9e:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001eaa4:	83 ec 08             	sub    esp,0x8
c001eaa7:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001eaaa:	50                   	push   eax
c001eaab:	e8 a6 df fe ff       	call   c000ca56 <Device::addChild(Device*)>
c001eab0:	83 c4 10             	add    esp,0x10
c001eab3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001eab6:	8b 00                	mov    eax,DWORD PTR [eax]
c001eab8:	83 c0 08             	add    eax,0x8
c001eabb:	8b 00                	mov    eax,DWORD PTR [eax]
c001eabd:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001eac1:	6a 00                	push   0x0
c001eac3:	6a 00                	push   0x0
c001eac5:	52                   	push   edx
c001eac6:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001eac9:	ff d0                	call   eax
c001eacb:	83 c4 10             	add    esp,0x10
c001eace:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001ead1:	83 c0 01             	add    eax,0x1
c001ead4:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001ead7:	e9 68 ff ff ff       	jmp    c001ea44 <apicOpen()+0x1e>
c001eadc:	c6 05 00 d1 02 c0 01 	mov    BYTE PTR ds:0xc002d100,0x1
c001eae3:	e8 d0 fe ff ff       	call   c001e9b8 <apicGetBase()>
c001eae8:	05 f0 00 00 00       	add    eax,0xf0
c001eaed:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001eaf0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001eaf3:	8b 00                	mov    eax,DWORD PTR [eax]
c001eaf5:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001eaf8:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001eaff:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001eb06:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001eb09:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001eb0c:	89 10                	mov    DWORD PTR [eax],edx
c001eb0e:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001eb15:	a1 30 bb 02 c0       	mov    eax,ds:0xc002bb30
c001eb1a:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001eb1d:	7d 7c                	jge    c001eb9b <apicOpen()+0x175>
c001eb1f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001eb22:	8b 04 85 40 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd44c0]
c001eb29:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001eb2c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001eb2f:	8b 04 85 40 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd44c0]
c001eb36:	c1 e8 08             	shr    eax,0x8
c001eb39:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001eb3d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001eb40:	8b 04 85 40 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd44c0]
c001eb47:	c1 e8 18             	shr    eax,0x18
c001eb4a:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001eb4d:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001eb51:	3d ff 00 00 00       	cmp    eax,0xff
c001eb56:	75 3a                	jne    c001eb92 <apicOpen()+0x16c>
c001eb58:	e8 5b fe ff ff       	call   c001e9b8 <apicGetBase()>
c001eb5d:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001eb61:	83 fa 01             	cmp    edx,0x1
c001eb64:	75 07                	jne    c001eb6d <apicOpen()+0x147>
c001eb66:	ba 60 03 00 00       	mov    edx,0x360
c001eb6b:	eb 05                	jmp    c001eb72 <apicOpen()+0x14c>
c001eb6d:	ba 50 03 00 00       	mov    edx,0x350
c001eb72:	01 d0                	add    eax,edx
c001eb74:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001eb77:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001eb7a:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb7c:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001eb7f:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001eb86:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001eb8a:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001eb8d:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001eb90:	89 10                	mov    DWORD PTR [eax],edx
c001eb92:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001eb96:	e9 7a ff ff ff       	jmp    c001eb15 <apicOpen()+0xef>
c001eb9b:	90                   	nop
c001eb9c:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001eb9f:	c9                   	leave  
c001eba0:	c3                   	ret    
c001eba1:	90                   	nop

c001eba2 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001eba2:	55                   	push   ebp
c001eba3:	89 e5                	mov    ebp,esp
c001eba5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eba8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ebae:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001ebb1:	72 1d                	jb     c001ebd0 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001ebb3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ebb6:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001ebbc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ebbf:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001ebc5:	01 d0                	add    eax,edx
c001ebc7:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001ebca:	73 04                	jae    c001ebd0 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001ebcc:	b0 01                	mov    al,0x1
c001ebce:	eb 02                	jmp    c001ebd2 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001ebd0:	b0 00                	mov    al,0x0
c001ebd2:	5d                   	pop    ebp
c001ebd3:	c3                   	ret    

c001ebd4 <IOAPIC::read(int)>:
c001ebd4:	55                   	push   ebp
c001ebd5:	89 e5                	mov    ebp,esp
c001ebd7:	83 ec 10             	sub    esp,0x10
c001ebda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ebdd:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ebe3:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001ebe6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ebe9:	0f b6 d0             	movzx  edx,al
c001ebec:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ebef:	89 10                	mov    DWORD PTR [eax],edx
c001ebf1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ebf4:	83 c0 10             	add    eax,0x10
c001ebf7:	8b 00                	mov    eax,DWORD PTR [eax]
c001ebf9:	c9                   	leave  
c001ebfa:	c3                   	ret    
c001ebfb:	90                   	nop

c001ebfc <IOAPIC::open(int, int, void*)>:
c001ebfc:	55                   	push   ebp
c001ebfd:	89 e5                	mov    ebp,esp
c001ebff:	57                   	push   edi
c001ec00:	56                   	push   esi
c001ec01:	53                   	push   ebx
c001ec02:	83 ec 04             	sub    esp,0x4
c001ec05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec08:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001ec0b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ec11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec14:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ec1a:	8b 14 85 20 bc 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd43e0]
c001ec21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec24:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001ec2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec2d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ec33:	8b 14 85 a0 bc 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4360]
c001ec3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec3d:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001ec43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec46:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001ec4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec4f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ec55:	0f b6 f0             	movzx  esi,al
c001ec58:	89 d0                	mov    eax,edx
c001ec5a:	ba 00 00 00 00       	mov    edx,0x0
c001ec5f:	89 c7                	mov    edi,eax
c001ec61:	83 e7 ff             	and    edi,0xffffffff
c001ec64:	89 f9                	mov    ecx,edi
c001ec66:	0f b6 da             	movzx  ebx,dl
c001ec69:	89 c8                	mov    eax,ecx
c001ec6b:	89 da                	mov    edx,ebx
c001ec6d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001ec70:	8d 5e 08             	lea    ebx,[esi+0x8]
c001ec73:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001ec77:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001ec7b:	83 e0 00             	and    eax,0x0
c001ec7e:	09 d0                	or     eax,edx
c001ec80:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001ec84:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec87:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ec8d:	8d 50 01             	lea    edx,[eax+0x1]
c001ec90:	88 d1                	mov    cl,dl
c001ec92:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001ec95:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001ec9b:	0f b6 d0             	movzx  edx,al
c001ec9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eca1:	83 c2 08             	add    edx,0x8
c001eca4:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001eca8:	0f b6 c9             	movzx  ecx,cl
c001ecab:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001ecb1:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001ecb5:	6a 01                	push   0x1
c001ecb7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ecba:	e8 15 ff ff ff       	call   c001ebd4 <IOAPIC::read(int)>
c001ecbf:	83 c4 08             	add    esp,0x8
c001ecc2:	c1 f8 10             	sar    eax,0x10
c001ecc5:	0f b6 c0             	movzx  eax,al
c001ecc8:	8d 50 01             	lea    edx,[eax+0x1]
c001eccb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ecce:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001ecd4:	b8 00 00 00 00       	mov    eax,0x0
c001ecd9:	8d 65 f4             	lea    esp,[ebp-0xc]
c001ecdc:	5b                   	pop    ebx
c001ecdd:	5e                   	pop    esi
c001ecde:	5f                   	pop    edi
c001ecdf:	5d                   	pop    ebp
c001ece0:	c3                   	ret    
c001ece1:	90                   	nop

c001ece2 <IOAPIC::write(int, int)>:
c001ece2:	55                   	push   ebp
c001ece3:	89 e5                	mov    ebp,esp
c001ece5:	83 ec 10             	sub    esp,0x10
c001ece8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eceb:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ecf1:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001ecf4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ecf7:	0f b6 d0             	movzx  edx,al
c001ecfa:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ecfd:	89 10                	mov    DWORD PTR [eax],edx
c001ecff:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ed02:	8d 50 10             	lea    edx,[eax+0x10]
c001ed05:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001ed08:	89 02                	mov    DWORD PTR [edx],eax
c001ed0a:	90                   	nop
c001ed0b:	c9                   	leave  
c001ed0c:	c3                   	ret    
c001ed0d:	90                   	nop

c001ed0e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001ed0e:	55                   	push   ebp
c001ed0f:	89 e5                	mov    ebp,esp
c001ed11:	53                   	push   ebx
c001ed12:	83 ec 2c             	sub    esp,0x2c
c001ed15:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ed18:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001ed1b:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001ed1e:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001ed21:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001ed24:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001ed27:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001ed2a:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001ed2d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001ed30:	88 d8                	mov    al,bl
c001ed32:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001ed35:	88 c8                	mov    al,cl
c001ed37:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001ed3a:	88 d0                	mov    al,dl
c001ed3c:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001ed3f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001ed43:	83 c0 08             	add    eax,0x8
c001ed46:	01 c0                	add    eax,eax
c001ed48:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001ed4b:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001ed4f:	83 c0 08             	add    eax,0x8
c001ed52:	01 c0                	add    eax,eax
c001ed54:	83 c0 01             	add    eax,0x1
c001ed57:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001ed5a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001ed5d:	50                   	push   eax
c001ed5e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ed61:	e8 6e fe ff ff       	call   c001ebd4 <IOAPIC::read(int)>
c001ed66:	83 c4 08             	add    esp,0x8
c001ed69:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001ed6c:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001ed73:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ed76:	c1 e0 18             	shl    eax,0x18
c001ed79:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001ed7c:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001ed7f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001ed82:	52                   	push   edx
c001ed83:	50                   	push   eax
c001ed84:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ed87:	e8 56 ff ff ff       	call   c001ece2 <IOAPIC::write(int, int)>
c001ed8c:	83 c4 0c             	add    esp,0xc
c001ed8f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ed92:	50                   	push   eax
c001ed93:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ed96:	e8 39 fe ff ff       	call   c001ebd4 <IOAPIC::read(int)>
c001ed9b:	83 c4 08             	add    esp,0x8
c001ed9e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001eda1:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001eda8:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001edaf:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001edb6:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001edba:	85 c0                	test   eax,eax
c001edbc:	74 09                	je     c001edc7 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001edbe:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001edc5:	eb 07                	jmp    c001edce <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001edc7:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001edce:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001edd2:	85 c0                	test   eax,eax
c001edd4:	74 09                	je     c001eddf <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001edd6:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001eddd:	eb 07                	jmp    c001ede6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001eddf:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001ede6:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001eded:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001edf1:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001edf4:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001edf7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001edfa:	52                   	push   edx
c001edfb:	50                   	push   eax
c001edfc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001edff:	e8 de fe ff ff       	call   c001ece2 <IOAPIC::write(int, int)>
c001ee04:	83 c4 0c             	add    esp,0xc
c001ee07:	90                   	nop
c001ee08:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001ee0b:	c9                   	leave  
c001ee0c:	c3                   	ret    
c001ee0d:	66 90                	xchg   ax,ax
c001ee0f:	90                   	nop

c001ee10 <APICTimer::close(int, int, void*)>:
c001ee10:	b8 00 00 00 00       	mov    eax,0x0
c001ee15:	c3                   	ret    
c001ee16:	66 90                	xchg   ax,ax

c001ee18 <apicTimerHandler(regs*, void*)>:
c001ee18:	83 ec 0c             	sub    esp,0xc
c001ee1b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ee1f:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ee21:	b8 10 27 00 00       	mov    eax,0x2710
c001ee26:	ba 00 00 00 00       	mov    edx,0x0
c001ee2b:	f7 f1                	div    ecx
c001ee2d:	83 ec 0c             	sub    esp,0xc
c001ee30:	50                   	push   eax
c001ee31:	e8 82 f6 fe ff       	call   c000e4b8 <timerHandler(unsigned int)>
c001ee36:	83 c4 10             	add    esp,0x10
c001ee39:	90                   	nop
c001ee3a:	83 c4 0c             	add    esp,0xc
c001ee3d:	c3                   	ret    
c001ee3e:	66 90                	xchg   ax,ax

c001ee40 <APICTimer::open(int, int, void*)>:
c001ee40:	83 ec 0c             	sub    esp,0xc
c001ee43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee47:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee49:	83 c0 24             	add    eax,0x24
c001ee4c:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee4e:	83 ec 08             	sub    esp,0x8
c001ee51:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee59:	ff d0                	call   eax
c001ee5b:	83 c4 10             	add    esp,0x10
c001ee5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee62:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ee66:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001ee6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee70:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ee74:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001ee7a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ee7e:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001ee84:	83 ec 0c             	sub    esp,0xc
c001ee87:	51                   	push   ecx
c001ee88:	6a 01                	push   0x1
c001ee8a:	68 18 ee 01 c0       	push   0xc001ee18
c001ee8f:	52                   	push   edx
c001ee90:	50                   	push   eax
c001ee91:	e8 6c db fe ff       	call   c000ca02 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ee96:	83 c4 20             	add    esp,0x20
c001ee99:	89 c2                	mov    edx,eax
c001ee9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee9f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001eea5:	b8 00 00 00 00       	mov    eax,0x0
c001eeaa:	83 c4 0c             	add    esp,0xc
c001eead:	c3                   	ret    
c001eeae:	66 90                	xchg   ax,ax

c001eeb0 <APICTimer::write(int)>:
c001eeb0:	83 ec 0c             	sub    esp,0xc
c001eeb3:	83 ec 0c             	sub    esp,0xc
c001eeb6:	68 14 36 02 c0       	push   0xc0023614
c001eebb:	e8 ef 27 ff ff       	call   c00116af <KePanic(char const*)>
c001eec0:	83 c4 10             	add    esp,0x10
c001eec3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eec7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eecb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001eed1:	90                   	nop
c001eed2:	83 c4 0c             	add    esp,0xc
c001eed5:	c3                   	ret    
c001eed6:	66 90                	xchg   ax,ax

c001eed8 <APICTimer::APICTimer()>:
c001eed8:	83 ec 0c             	sub    esp,0xc
c001eedb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eedf:	83 ec 08             	sub    esp,0x8
c001eee2:	68 24 36 02 c0       	push   0xc0023624
c001eee7:	50                   	push   eax
c001eee8:	e8 ff f4 fe ff       	call   c000e3ec <Timer::Timer(char const*)>
c001eeed:	83 c4 10             	add    esp,0x10
c001eef0:	ba 38 36 02 c0       	mov    edx,0xc0023638
c001eef5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eef9:	89 10                	mov    DWORD PTR [eax],edx
c001eefb:	90                   	nop
c001eefc:	83 c4 0c             	add    esp,0xc
c001eeff:	c3                   	ret    

c001ef00 <PIT::write(int)>:
c001ef00:	83 ec 10             	sub    esp,0x10
c001ef03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ef07:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ef0b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ef11:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ef15:	a3 04 d1 02 c0       	mov    ds:0xc002d104,eax
c001ef1a:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001ef1f:	89 c2                	mov    edx,eax
c001ef21:	c1 fa 1f             	sar    edx,0x1f
c001ef24:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001ef28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ef2c:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001ef33:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001ef38:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001ef3c:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001ef41:	ee                   	out    dx,al
c001ef42:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ef46:	0f b6 c0             	movzx  eax,al
c001ef49:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001ef50:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001ef54:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001ef58:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001ef5d:	ee                   	out    dx,al
c001ef5e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ef62:	c1 f8 08             	sar    eax,0x8
c001ef65:	0f b6 c0             	movzx  eax,al
c001ef68:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001ef6f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ef73:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ef77:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001ef7c:	ee                   	out    dx,al
c001ef7d:	90                   	nop
c001ef7e:	83 c4 10             	add    esp,0x10
c001ef81:	c3                   	ret    
c001ef82:	66 90                	xchg   ax,ax

c001ef84 <pitHandler(regs*, void*)>:
c001ef84:	83 ec 0c             	sub    esp,0xc
c001ef87:	8b 0d 04 d1 02 c0    	mov    ecx,DWORD PTR ds:0xc002d104
c001ef8d:	b8 10 27 00 00       	mov    eax,0x2710
c001ef92:	89 c2                	mov    edx,eax
c001ef94:	c1 fa 1f             	sar    edx,0x1f
c001ef97:	f7 f9                	idiv   ecx
c001ef99:	83 ec 0c             	sub    esp,0xc
c001ef9c:	50                   	push   eax
c001ef9d:	e8 16 f5 fe ff       	call   c000e4b8 <timerHandler(unsigned int)>
c001efa2:	83 c4 10             	add    esp,0x10
c001efa5:	90                   	nop
c001efa6:	83 c4 0c             	add    esp,0xc
c001efa9:	c3                   	ret    
c001efaa:	66 90                	xchg   ax,ax

c001efac <PIT::open(int, int, void*)>:
c001efac:	83 ec 0c             	sub    esp,0xc
c001efaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efb3:	8b 00                	mov    eax,DWORD PTR [eax]
c001efb5:	83 c0 24             	add    eax,0x24
c001efb8:	8b 00                	mov    eax,DWORD PTR [eax]
c001efba:	83 ec 08             	sub    esp,0x8
c001efbd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001efc1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001efc5:	ff d0                	call   eax
c001efc7:	83 c4 10             	add    esp,0x10
c001efca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efce:	83 ec 0c             	sub    esp,0xc
c001efd1:	6a 00                	push   0x0
c001efd3:	6a 01                	push   0x1
c001efd5:	68 84 ef 01 c0       	push   0xc001ef84
c001efda:	6a 00                	push   0x0
c001efdc:	50                   	push   eax
c001efdd:	e8 20 da fe ff       	call   c000ca02 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001efe2:	83 c4 20             	add    esp,0x20
c001efe5:	89 c2                	mov    edx,eax
c001efe7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efeb:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001eff1:	b8 00 00 00 00       	mov    eax,0x0
c001eff6:	83 c4 0c             	add    esp,0xc
c001eff9:	c3                   	ret    
c001effa:	66 90                	xchg   ax,ax

c001effc <PIT::close(int, int, void*)>:
c001effc:	83 ec 0c             	sub    esp,0xc
c001efff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f003:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001f00d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f011:	6a 01                	push   0x1
c001f013:	68 84 ef 01 c0       	push   0xc001ef84
c001f018:	6a 00                	push   0x0
c001f01a:	50                   	push   eax
c001f01b:	e8 18 da fe ff       	call   c000ca38 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001f020:	83 c4 10             	add    esp,0x10
c001f023:	b8 00 00 00 00       	mov    eax,0x0
c001f028:	83 c4 0c             	add    esp,0xc
c001f02b:	c3                   	ret    

c001f02c <PIT::PIT()>:
c001f02c:	83 ec 0c             	sub    esp,0xc
c001f02f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f033:	83 ec 08             	sub    esp,0x8
c001f036:	68 60 36 02 c0       	push   0xc0023660
c001f03b:	50                   	push   eax
c001f03c:	e8 ab f3 fe ff       	call   c000e3ec <Timer::Timer(char const*)>
c001f041:	83 c4 10             	add    esp,0x10
c001f044:	ba 88 36 02 c0       	mov    edx,0xc0023688
c001f049:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f04d:	89 10                	mov    DWORD PTR [eax],edx
c001f04f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f053:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f059:	0f b6 d0             	movzx  edx,al
c001f05c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f060:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001f067:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f06b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f071:	0f b6 d0             	movzx  edx,al
c001f074:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f078:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001f07d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f081:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f087:	8d 50 01             	lea    edx,[eax+0x1]
c001f08a:	88 d1                	mov    cl,dl
c001f08c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f090:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001f096:	0f b6 d0             	movzx  edx,al
c001f099:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f09d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001f0a1:	83 e1 3f             	and    ecx,0x3f
c001f0a4:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001f0a8:	90                   	nop
c001f0a9:	83 c4 0c             	add    esp,0xc
c001f0ac:	c3                   	ret    
c001f0ad:	66 90                	xchg   ax,ax
c001f0af:	90                   	nop

c001f0b0 <avxDetect>:
c001f0b0:	b8 01 00 00 00       	mov    eax,0x1
c001f0b5:	0f a2                	cpuid  
c001f0b7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001f0bd:	74 15                	je     c001f0d4 <avxDetect.noAVX>
c001f0bf:	b8 01 00 00 00       	mov    eax,0x1
c001f0c4:	0f a2                	cpuid  
c001f0c6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001f0cc:	74 06                	je     c001f0d4 <avxDetect.noAVX>
c001f0ce:	b8 01 00 00 00       	mov    eax,0x1
c001f0d3:	c3                   	ret    

c001f0d4 <avxDetect.noAVX>:
c001f0d4:	b8 00 00 00 00       	mov    eax,0x0
c001f0d9:	c3                   	ret    

c001f0da <avxSave>:
c001f0da:	53                   	push   ebx
c001f0db:	52                   	push   edx
c001f0dc:	31 c0                	xor    eax,eax
c001f0de:	48                   	dec    eax
c001f0df:	89 c2                	mov    edx,eax
c001f0e1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f0e5:	0f ae 23             	xsave  [ebx]
c001f0e8:	5a                   	pop    edx
c001f0e9:	5b                   	pop    ebx
c001f0ea:	c3                   	ret    

c001f0eb <avxLoad>:
c001f0eb:	53                   	push   ebx
c001f0ec:	52                   	push   edx
c001f0ed:	31 c0                	xor    eax,eax
c001f0ef:	48                   	dec    eax
c001f0f0:	89 c2                	mov    edx,eax
c001f0f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f0f6:	0f ae 2b             	xrstor [ebx]
c001f0f9:	5a                   	pop    edx
c001f0fa:	5b                   	pop    ebx
c001f0fb:	c3                   	ret    

c001f0fc <avxInit>:
c001f0fc:	e8 67 03 00 00       	call   c001f468 <sseInit>
c001f101:	50                   	push   eax
c001f102:	51                   	push   ecx
c001f103:	0f 20 e0             	mov    eax,cr4
c001f106:	0d 00 00 04 00       	or     eax,0x40000
c001f10b:	0f 22 e0             	mov    cr4,eax
c001f10e:	31 c9                	xor    ecx,ecx
c001f110:	0f 01 d0             	xgetbv 
c001f113:	0d 07 00 00 00       	or     eax,0x7
c001f118:	0f 01 d1             	xsetbv 
c001f11b:	59                   	pop    ecx
c001f11c:	58                   	pop    eax
c001f11d:	c3                   	ret    

c001f11e <avxClose>:
c001f11e:	c3                   	ret    

c001f11f <wouldSheSayYes>:
c001f11f:	c3                   	ret    
c001f120:	49                   	dec    ecx
c001f121:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001f125:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001f129:	75 20                	jne    c001f14b <isr0+0xb>
c001f12b:	4e                   	dec    esi
c001f12c:	79 61                	jns    c001f18f <isr7+0x3>
c001f12e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001f133:	66 90                	xchg   ax,ax
c001f135:	66 90                	xchg   ax,ax
c001f137:	66 90                	xchg   ax,ax
c001f139:	66 90                	xchg   ax,ax
c001f13b:	66 90                	xchg   ax,ax
c001f13d:	66 90                	xchg   ax,ax
c001f13f:	90                   	nop

c001f140 <isr0>:
c001f140:	fa                   	cli    
c001f141:	68 00 00 00 00       	push   0x0
c001f146:	68 00 00 00 00       	push   0x0
c001f14b:	e9 56 01 00 00       	jmp    c001f2a6 <int_common_stub>

c001f150 <isr1>:
c001f150:	fa                   	cli    
c001f151:	6a 00                	push   0x0
c001f153:	6a 01                	push   0x1
c001f155:	e9 4c 01 00 00       	jmp    c001f2a6 <int_common_stub>

c001f15a <isr2>:
c001f15a:	fa                   	cli    
c001f15b:	6a 00                	push   0x0
c001f15d:	6a 02                	push   0x2
c001f15f:	e9 42 01 00 00       	jmp    c001f2a6 <int_common_stub>

c001f164 <isr3>:
c001f164:	fa                   	cli    
c001f165:	6a 00                	push   0x0
c001f167:	6a 03                	push   0x3
c001f169:	e9 38 01 00 00       	jmp    c001f2a6 <int_common_stub>

c001f16e <isr4>:
c001f16e:	fa                   	cli    
c001f16f:	6a 00                	push   0x0
c001f171:	6a 04                	push   0x4
c001f173:	e9 2e 01 00 00       	jmp    c001f2a6 <int_common_stub>

c001f178 <isr5>:
c001f178:	fa                   	cli    
c001f179:	6a 00                	push   0x0
c001f17b:	6a 05                	push   0x5
c001f17d:	e9 24 01 00 00       	jmp    c001f2a6 <int_common_stub>

c001f182 <isr6>:
c001f182:	fa                   	cli    
c001f183:	6a 00                	push   0x0
c001f185:	6a 06                	push   0x6
c001f187:	e9 1a 01 00 00       	jmp    c001f2a6 <int_common_stub>

c001f18c <isr7>:
c001f18c:	fa                   	cli    
c001f18d:	6a 00                	push   0x0
c001f18f:	6a 07                	push   0x7
c001f191:	e9 10 01 00 00       	jmp    c001f2a6 <int_common_stub>

c001f196 <isr8>:
c001f196:	fa                   	cli    
c001f197:	6a 08                	push   0x8
c001f199:	e9 08 01 00 00       	jmp    c001f2a6 <int_common_stub>

c001f19e <isr9>:
c001f19e:	fa                   	cli    
c001f19f:	6a 00                	push   0x0
c001f1a1:	6a 09                	push   0x9
c001f1a3:	e9 fe 00 00 00       	jmp    c001f2a6 <int_common_stub>

c001f1a8 <isr10>:
c001f1a8:	fa                   	cli    
c001f1a9:	6a 0a                	push   0xa
c001f1ab:	e9 f6 00 00 00       	jmp    c001f2a6 <int_common_stub>

c001f1b0 <isr11>:
c001f1b0:	fa                   	cli    
c001f1b1:	6a 0b                	push   0xb
c001f1b3:	e9 ee 00 00 00       	jmp    c001f2a6 <int_common_stub>

c001f1b8 <isr12>:
c001f1b8:	fa                   	cli    
c001f1b9:	6a 0c                	push   0xc
c001f1bb:	e9 e6 00 00 00       	jmp    c001f2a6 <int_common_stub>

c001f1c0 <isr13>:
c001f1c0:	fa                   	cli    
c001f1c1:	6a 0d                	push   0xd
c001f1c3:	53                   	push   ebx
c001f1c4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f1c8:	81 fb 96 f3 01 c0    	cmp    ebx,0xc001f396
c001f1ce:	5b                   	pop    ebx
c001f1cf:	0f 84 c3 01 00 00    	je     c001f398 <finishSignal2>
c001f1d5:	e9 cc 00 00 00       	jmp    c001f2a6 <int_common_stub>

c001f1da <isr14>:
c001f1da:	fa                   	cli    
c001f1db:	6a 0e                	push   0xe
c001f1dd:	e9 c4 00 00 00       	jmp    c001f2a6 <int_common_stub>

c001f1e2 <isr15>:
c001f1e2:	fa                   	cli    
c001f1e3:	6a 00                	push   0x0
c001f1e5:	6a 0f                	push   0xf
c001f1e7:	e9 ba 00 00 00       	jmp    c001f2a6 <int_common_stub>

c001f1ec <isr16>:
c001f1ec:	fa                   	cli    
c001f1ed:	6a 00                	push   0x0
c001f1ef:	6a 10                	push   0x10
c001f1f1:	e9 b0 00 00 00       	jmp    c001f2a6 <int_common_stub>

c001f1f6 <isr17>:
c001f1f6:	fa                   	cli    
c001f1f7:	6a 00                	push   0x0
c001f1f9:	6a 11                	push   0x11
c001f1fb:	e9 a6 00 00 00       	jmp    c001f2a6 <int_common_stub>

c001f200 <isr18>:
c001f200:	fa                   	cli    
c001f201:	6a 00                	push   0x0
c001f203:	6a 12                	push   0x12
c001f205:	e9 9c 00 00 00       	jmp    c001f2a6 <int_common_stub>

c001f20a <irq3>:
c001f20a:	fa                   	cli    
c001f20b:	6a 00                	push   0x0
c001f20d:	6a 23                	push   0x23
c001f20f:	e9 92 00 00 00       	jmp    c001f2a6 <int_common_stub>

c001f214 <irq4>:
c001f214:	fa                   	cli    
c001f215:	6a 00                	push   0x0
c001f217:	6a 24                	push   0x24
c001f219:	e9 88 00 00 00       	jmp    c001f2a6 <int_common_stub>

c001f21e <irq5>:
c001f21e:	fa                   	cli    
c001f21f:	6a 00                	push   0x0
c001f221:	6a 25                	push   0x25
c001f223:	e9 7e 00 00 00       	jmp    c001f2a6 <int_common_stub>

c001f228 <irq6>:
c001f228:	fa                   	cli    
c001f229:	6a 00                	push   0x0
c001f22b:	6a 26                	push   0x26
c001f22d:	e9 74 00 00 00       	jmp    c001f2a6 <int_common_stub>

c001f232 <irq7>:
c001f232:	fa                   	cli    
c001f233:	6a 00                	push   0x0
c001f235:	6a 27                	push   0x27
c001f237:	e9 6a 00 00 00       	jmp    c001f2a6 <int_common_stub>

c001f23c <irq8>:
c001f23c:	fa                   	cli    
c001f23d:	6a 00                	push   0x0
c001f23f:	6a 28                	push   0x28
c001f241:	e9 60 00 00 00       	jmp    c001f2a6 <int_common_stub>

c001f246 <irq9>:
c001f246:	fa                   	cli    
c001f247:	6a 00                	push   0x0
c001f249:	6a 29                	push   0x29
c001f24b:	e9 56 00 00 00       	jmp    c001f2a6 <int_common_stub>

c001f250 <irq10>:
c001f250:	fa                   	cli    
c001f251:	6a 00                	push   0x0
c001f253:	6a 2a                	push   0x2a
c001f255:	e9 4c 00 00 00       	jmp    c001f2a6 <int_common_stub>

c001f25a <irq11>:
c001f25a:	fa                   	cli    
c001f25b:	6a 00                	push   0x0
c001f25d:	6a 2b                	push   0x2b
c001f25f:	e9 42 00 00 00       	jmp    c001f2a6 <int_common_stub>

c001f264 <irq12>:
c001f264:	fa                   	cli    
c001f265:	6a 00                	push   0x0
c001f267:	6a 2c                	push   0x2c
c001f269:	e9 38 00 00 00       	jmp    c001f2a6 <int_common_stub>

c001f26e <irq13>:
c001f26e:	fa                   	cli    
c001f26f:	6a 00                	push   0x0
c001f271:	6a 2d                	push   0x2d
c001f273:	e9 2e 00 00 00       	jmp    c001f2a6 <int_common_stub>

c001f278 <irq14>:
c001f278:	fa                   	cli    
c001f279:	6a 00                	push   0x0
c001f27b:	6a 2e                	push   0x2e
c001f27d:	e9 24 00 00 00       	jmp    c001f2a6 <int_common_stub>

c001f282 <irq15>:
c001f282:	fa                   	cli    
c001f283:	6a 00                	push   0x0
c001f285:	6a 2f                	push   0x2f
c001f287:	e9 1a 00 00 00       	jmp    c001f2a6 <int_common_stub>

c001f28c <irq1>:
c001f28c:	fa                   	cli    
c001f28d:	6a 00                	push   0x0
c001f28f:	6a 21                	push   0x21
c001f291:	eb 13                	jmp    c001f2a6 <int_common_stub>

c001f293 <irq2>:
c001f293:	fa                   	cli    
c001f294:	6a 00                	push   0x0
c001f296:	6a 22                	push   0x22
c001f298:	eb 0c                	jmp    c001f2a6 <int_common_stub>

c001f29a <isr96>:
c001f29a:	6a 00                	push   0x0
c001f29c:	6a 60                	push   0x60
c001f29e:	fb                   	sti    
c001f29f:	eb 37                	jmp    c001f2d8 <syscall_common_stub>

c001f2a1 <irq0>:
c001f2a1:	fa                   	cli    
c001f2a2:	6a 00                	push   0x0
c001f2a4:	6a 20                	push   0x20

c001f2a6 <int_common_stub>:
c001f2a6:	60                   	pusha  
c001f2a7:	1e                   	push   ds
c001f2a8:	06                   	push   es
c001f2a9:	0f a0                	push   fs
c001f2ab:	0f a8                	push   gs
c001f2ad:	66 b8 10 00          	mov    ax,0x10
c001f2b1:	66 8e d8             	mov    ds,ax
c001f2b4:	66 8e c0             	mov    es,ax
c001f2b7:	66 8e e0             	mov    fs,ax
c001f2ba:	66 8e e8             	mov    gs,ax
c001f2bd:	54                   	push   esp
c001f2be:	fc                   	cld    
c001f2bf:	e8 3c dc fe ff       	call   c000cf00 <int_handler>
c001f2c4:	81 c4 04 00 00 00    	add    esp,0x4
c001f2ca:	0f a9                	pop    gs
c001f2cc:	0f a1                	pop    fs
c001f2ce:	07                   	pop    es
c001f2cf:	1f                   	pop    ds
c001f2d0:	61                   	popa   
c001f2d1:	81 c4 08 00 00 00    	add    esp,0x8
c001f2d7:	cf                   	iret   

c001f2d8 <syscall_common_stub>:
c001f2d8:	60                   	pusha  
c001f2d9:	1e                   	push   ds
c001f2da:	06                   	push   es
c001f2db:	0f a0                	push   fs
c001f2dd:	0f a8                	push   gs
c001f2df:	66 b8 10 00          	mov    ax,0x10
c001f2e3:	66 8e d8             	mov    ds,ax
c001f2e6:	66 8e c0             	mov    es,ax
c001f2e9:	66 8e e0             	mov    fs,ax
c001f2ec:	66 8e e8             	mov    gs,ax
c001f2ef:	54                   	push   esp
c001f2f0:	fc                   	cld    
c001f2f1:	e8 0a dc fe ff       	call   c000cf00 <int_handler>
c001f2f6:	81 c4 04 00 00 00    	add    esp,0x4
c001f2fc:	0f a9                	pop    gs
c001f2fe:	0f a1                	pop    fs
c001f300:	07                   	pop    es
c001f301:	1f                   	pop    ds
c001f302:	e8 bf 29 ff ff       	call   c0011cc6 <KiCheckSignalZ>
c001f307:	3d 00 00 00 00       	cmp    eax,0x0
c001f30c:	0f 84 c0 00 00 00    	je     c001f3d2 <skipSignals>
c001f312:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001f317:	61                   	popa   
c001f318:	53                   	push   ebx
c001f319:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001f31f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001f322:	5b                   	pop    ebx
c001f323:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001f328:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001f32b:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001f32e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f331:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001f334:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001f337:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001f33a:	81 c4 08 00 00 00    	add    esp,0x8
c001f340:	5e                   	pop    esi
c001f341:	5b                   	pop    ebx
c001f342:	59                   	pop    ecx
c001f343:	5a                   	pop    edx
c001f344:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001f347:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001f34a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001f34d:	52                   	push   edx
c001f34e:	51                   	push   ecx
c001f34f:	53                   	push   ebx
c001f350:	56                   	push   esi
c001f351:	81 ec 08 00 00 00    	sub    esp,0x8
c001f357:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001f35a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001f35d:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001f360:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f363:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001f366:	60                   	pusha  
c001f367:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001f36d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001f370:	89 e3                	mov    ebx,esp
c001f372:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001f375:	52                   	push   edx
c001f376:	68 96 f3 01 c0       	push   0xc001f396
c001f37b:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001f37e:	89 dc                	mov    esp,ebx
c001f380:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001f383:	68 23 00 00 00       	push   0x23
c001f388:	51                   	push   ecx
c001f389:	68 02 02 00 00       	push   0x202
c001f38e:	68 1b 00 00 00       	push   0x1b
c001f393:	ff 36                	push   DWORD PTR [esi]
c001f395:	cf                   	iret   

c001f396 <finishSignal>:
c001f396:	cd 0f                	int    0xf

c001f398 <finishSignal2>:
c001f398:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001f39e:	e8 a0 29 ff ff       	call   c0011d43 <KiFinishSignalZ>
c001f3a3:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001f3a9:	68 23 00 00 00       	push   0x23
c001f3ae:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001f3b1:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001f3b4:	68 1b 00 00 00       	push   0x1b
c001f3b9:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001f3bc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001f3bf:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001f3c2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001f3c5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001f3c8:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001f3cb:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001f3ce:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001f3d1:	cf                   	iret   

c001f3d2 <skipSignals>:
c001f3d2:	61                   	popa   
c001f3d3:	81 c4 08 00 00 00    	add    esp,0x8
c001f3d9:	cf                   	iret   
c001f3da:	90                   	nop
c001f3db:	90                   	nop

c001f3dc <irq16>:
c001f3dc:	fa                   	cli    
c001f3dd:	6a 00                	push   0x0
c001f3df:	6a 30                	push   0x30
c001f3e1:	e9 c0 fe ff ff       	jmp    c001f2a6 <int_common_stub>

c001f3e6 <irq17>:
c001f3e6:	fa                   	cli    
c001f3e7:	6a 00                	push   0x0
c001f3e9:	6a 31                	push   0x31
c001f3eb:	e9 b6 fe ff ff       	jmp    c001f2a6 <int_common_stub>

c001f3f0 <irq18>:
c001f3f0:	fa                   	cli    
c001f3f1:	6a 00                	push   0x0
c001f3f3:	6a 32                	push   0x32
c001f3f5:	e9 ac fe ff ff       	jmp    c001f2a6 <int_common_stub>

c001f3fa <irq19>:
c001f3fa:	fa                   	cli    
c001f3fb:	6a 00                	push   0x0
c001f3fd:	6a 33                	push   0x33
c001f3ff:	e9 a2 fe ff ff       	jmp    c001f2a6 <int_common_stub>

c001f404 <irq20>:
c001f404:	fa                   	cli    
c001f405:	6a 00                	push   0x0
c001f407:	6a 34                	push   0x34
c001f409:	e9 98 fe ff ff       	jmp    c001f2a6 <int_common_stub>

c001f40e <irq21>:
c001f40e:	fa                   	cli    
c001f40f:	6a 00                	push   0x0
c001f411:	6a 35                	push   0x35
c001f413:	e9 8e fe ff ff       	jmp    c001f2a6 <int_common_stub>

c001f418 <irq22>:
c001f418:	fa                   	cli    
c001f419:	6a 00                	push   0x0
c001f41b:	6a 36                	push   0x36
c001f41d:	e9 84 fe ff ff       	jmp    c001f2a6 <int_common_stub>

c001f422 <irq23>:
c001f422:	fa                   	cli    
c001f423:	6a 00                	push   0x0
c001f425:	6a 37                	push   0x37
c001f427:	e9 7a fe ff ff       	jmp    c001f2a6 <int_common_stub>
c001f42c:	66 90                	xchg   ax,ax
c001f42e:	66 90                	xchg   ax,ax

c001f430 <i386GetRDRAND>:
c001f430:	b9 64 00 00 00       	mov    ecx,0x64

c001f435 <retry>:
c001f435:	0f c7 f0             	rdrand eax
c001f438:	72 05                	jb     c001f43f <retry.done>
c001f43a:	e2 f9                	loop   c001f435 <retry>

c001f43c <retry.fail>:
c001f43c:	31 c0                	xor    eax,eax
c001f43e:	c3                   	ret    

c001f43f <retry.done>:
c001f43f:	c3                   	ret    

c001f440 <absolutelyNoChanceInHell>:
c001f440:	b8 01 00 00 00       	mov    eax,0x1
c001f445:	0f a2                	cpuid  
c001f447:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001f44d:	74 06                	je     c001f455 <sseDetect.noSSE>
c001f44f:	b8 01 00 00 00       	mov    eax,0x1
c001f454:	c3                   	ret    

c001f455 <sseDetect.noSSE>:
c001f455:	31 c0                	xor    eax,eax
c001f457:	c3                   	ret    

c001f458 <sseSave>:
c001f458:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f45c:	0f ae 00             	fxsave [eax]
c001f45f:	c3                   	ret    

c001f460 <sseLoad>:
c001f460:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f464:	0f ae 08             	fxrstor [eax]
c001f467:	c3                   	ret    

c001f468 <sseInit>:
c001f468:	e8 42 00 00 00       	call   c001f4af <x87Init>
c001f46d:	0f 20 e0             	mov    eax,cr4
c001f470:	66 0d 00 06          	or     ax,0x600
c001f474:	0f 22 e0             	mov    cr4,eax
c001f477:	c3                   	ret    

c001f478 <sseClose>:
c001f478:	c3                   	ret    
c001f479:	66 90                	xchg   ax,ax
c001f47b:	66 90                	xchg   ax,ax
c001f47d:	66 90                	xchg   ax,ax
c001f47f:	90                   	nop

c001f480 <value_37F>:
c001f480:	7f 03                	jg     c001f485 <value_37A+0x1>

c001f482 <value_37E>:
c001f482:	7e 03                	jle    c001f487 <x87Detect+0x1>

c001f484 <value_37A>:
c001f484:	7a 03                	jp     c001f489 <x87Detect+0x3>

c001f486 <x87Detect>:
c001f486:	b8 01 00 00 00       	mov    eax,0x1
c001f48b:	0f a2                	cpuid  
c001f48d:	f7 c2 01 00 00 00    	test   edx,0x1
c001f493:	74 06                	je     c001f49b <x87Detect.nox87>
c001f495:	b8 01 00 00 00       	mov    eax,0x1
c001f49a:	c3                   	ret    

c001f49b <x87Detect.nox87>:
c001f49b:	b8 00 00 00 00       	mov    eax,0x0
c001f4a0:	c3                   	ret    

c001f4a1 <x87Save>:
c001f4a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f4a5:	dd 30                	fnsave [eax]
c001f4a7:	c3                   	ret    

c001f4a8 <x87Load>:
c001f4a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f4ac:	dd 20                	frstor [eax]
c001f4ae:	c3                   	ret    

c001f4af <x87Init>:
c001f4af:	0f 20 c0             	mov    eax,cr0
c001f4b2:	66 25 fb ff          	and    ax,0xfffb
c001f4b6:	66 0d 22 00          	or     ax,0x22
c001f4ba:	0f 22 c0             	mov    cr0,eax
c001f4bd:	db e3                	fninit 
c001f4bf:	0f 06                	clts   
c001f4c1:	d9 2d 84 f4 01 c0    	fldcw  WORD PTR ds:0xc001f484
c001f4c7:	c3                   	ret    

c001f4c8 <x87Close>:
c001f4c8:	c3                   	ret    
c001f4c9:	66 90                	xchg   ax,ax
c001f4cb:	90                   	nop

c001f4cc <__do_global_ctors_aux>:
c001f4cc:	a1 80 04 02 c0       	mov    eax,ds:0xc0020480
c001f4d1:	83 f8 ff             	cmp    eax,0xffffffff
c001f4d4:	74 1a                	je     c001f4f0 <__do_global_ctors_aux+0x24>
c001f4d6:	55                   	push   ebp
c001f4d7:	89 e5                	mov    ebp,esp
c001f4d9:	53                   	push   ebx
c001f4da:	52                   	push   edx
c001f4db:	bb 80 04 02 c0       	mov    ebx,0xc0020480
c001f4e0:	ff d0                	call   eax
c001f4e2:	83 eb 04             	sub    ebx,0x4
c001f4e5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f4e7:	83 f8 ff             	cmp    eax,0xffffffff
c001f4ea:	75 f4                	jne    c001f4e0 <__do_global_ctors_aux+0x14>
c001f4ec:	58                   	pop    eax
c001f4ed:	5b                   	pop    ebx
c001f4ee:	5d                   	pop    ebp
c001f4ef:	c3                   	ret    
c001f4f0:	c3                   	ret    
c001f4f1:	66 90                	xchg   ax,ax
c001f4f3:	90                   	nop

c001f4f4 <__divdi3>:
c001f4f4:	55                   	push   ebp
c001f4f5:	57                   	push   edi
c001f4f6:	56                   	push   esi
c001f4f7:	53                   	push   ebx
c001f4f8:	83 ec 1c             	sub    esp,0x1c
c001f4fb:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001f4ff:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f503:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f506:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f50a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f50e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f512:	85 db                	test   ebx,ebx
c001f514:	0f 88 8e 00 00 00    	js     c001f5a8 <__divdi3+0xb4>
c001f51a:	89 dd                	mov    ebp,ebx
c001f51c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001f524:	89 d3                	mov    ebx,edx
c001f526:	85 d2                	test   edx,edx
c001f528:	79 0d                	jns    c001f537 <__divdi3+0x43>
c001f52a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001f52e:	f7 d8                	neg    eax
c001f530:	83 d2 00             	adc    edx,0x0
c001f533:	f7 da                	neg    edx
c001f535:	89 d3                	mov    ebx,edx
c001f537:	89 c7                	mov    edi,eax
c001f539:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f53c:	85 db                	test   ebx,ebx
c001f53e:	75 48                	jne    c001f588 <__divdi3+0x94>
c001f540:	39 ef                	cmp    edi,ebp
c001f542:	76 24                	jbe    c001f568 <__divdi3+0x74>
c001f544:	89 ea                	mov    edx,ebp
c001f546:	f7 f7                	div    edi
c001f548:	89 c1                	mov    ecx,eax
c001f54a:	31 f6                	xor    esi,esi
c001f54c:	89 c8                	mov    eax,ecx
c001f54e:	89 f2                	mov    edx,esi
c001f550:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f554:	85 c9                	test   ecx,ecx
c001f556:	74 07                	je     c001f55f <__divdi3+0x6b>
c001f558:	f7 d8                	neg    eax
c001f55a:	83 d2 00             	adc    edx,0x0
c001f55d:	f7 da                	neg    edx
c001f55f:	83 c4 1c             	add    esp,0x1c
c001f562:	5b                   	pop    ebx
c001f563:	5e                   	pop    esi
c001f564:	5f                   	pop    edi
c001f565:	5d                   	pop    ebp
c001f566:	c3                   	ret    
c001f567:	90                   	nop
c001f568:	85 ff                	test   edi,edi
c001f56a:	75 0b                	jne    c001f577 <__divdi3+0x83>
c001f56c:	b8 01 00 00 00       	mov    eax,0x1
c001f571:	31 d2                	xor    edx,edx
c001f573:	f7 f3                	div    ebx
c001f575:	89 c7                	mov    edi,eax
c001f577:	31 d2                	xor    edx,edx
c001f579:	89 e8                	mov    eax,ebp
c001f57b:	f7 f7                	div    edi
c001f57d:	89 c6                	mov    esi,eax
c001f57f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f582:	f7 f7                	div    edi
c001f584:	89 c1                	mov    ecx,eax
c001f586:	eb c4                	jmp    c001f54c <__divdi3+0x58>
c001f588:	39 eb                	cmp    ebx,ebp
c001f58a:	77 3c                	ja     c001f5c8 <__divdi3+0xd4>
c001f58c:	0f bd f3             	bsr    esi,ebx
c001f58f:	83 f6 1f             	xor    esi,0x1f
c001f592:	75 40                	jne    c001f5d4 <__divdi3+0xe0>
c001f594:	39 eb                	cmp    ebx,ebp
c001f596:	72 09                	jb     c001f5a1 <__divdi3+0xad>
c001f598:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001f59b:	0f 87 97 00 00 00    	ja     c001f638 <__divdi3+0x144>
c001f5a1:	b9 01 00 00 00       	mov    ecx,0x1
c001f5a6:	eb a4                	jmp    c001f54c <__divdi3+0x58>
c001f5a8:	f7 d9                	neg    ecx
c001f5aa:	83 d3 00             	adc    ebx,0x0
c001f5ad:	f7 db                	neg    ebx
c001f5af:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f5b2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f5b6:	89 dd                	mov    ebp,ebx
c001f5b8:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001f5c0:	e9 5f ff ff ff       	jmp    c001f524 <__divdi3+0x30>
c001f5c5:	8d 76 00             	lea    esi,[esi+0x0]
c001f5c8:	31 f6                	xor    esi,esi
c001f5ca:	31 c9                	xor    ecx,ecx
c001f5cc:	e9 7b ff ff ff       	jmp    c001f54c <__divdi3+0x58>
c001f5d1:	8d 76 00             	lea    esi,[esi+0x0]
c001f5d4:	b8 20 00 00 00       	mov    eax,0x20
c001f5d9:	29 f0                	sub    eax,esi
c001f5db:	89 f1                	mov    ecx,esi
c001f5dd:	d3 e3                	shl    ebx,cl
c001f5df:	89 fa                	mov    edx,edi
c001f5e1:	88 c1                	mov    cl,al
c001f5e3:	d3 ea                	shr    edx,cl
c001f5e5:	09 da                	or     edx,ebx
c001f5e7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f5eb:	89 f1                	mov    ecx,esi
c001f5ed:	d3 e7                	shl    edi,cl
c001f5ef:	89 eb                	mov    ebx,ebp
c001f5f1:	88 c1                	mov    cl,al
c001f5f3:	d3 eb                	shr    ebx,cl
c001f5f5:	89 f1                	mov    ecx,esi
c001f5f7:	d3 e5                	shl    ebp,cl
c001f5f9:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001f5fc:	88 c1                	mov    cl,al
c001f5fe:	d3 ea                	shr    edx,cl
c001f600:	09 d5                	or     ebp,edx
c001f602:	89 e8                	mov    eax,ebp
c001f604:	89 da                	mov    edx,ebx
c001f606:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001f60a:	89 d3                	mov    ebx,edx
c001f60c:	89 c5                	mov    ebp,eax
c001f60e:	f7 e7                	mul    edi
c001f610:	39 d3                	cmp    ebx,edx
c001f612:	72 18                	jb     c001f62c <__divdi3+0x138>
c001f614:	74 0a                	je     c001f620 <__divdi3+0x12c>
c001f616:	89 e9                	mov    ecx,ebp
c001f618:	31 f6                	xor    esi,esi
c001f61a:	e9 2d ff ff ff       	jmp    c001f54c <__divdi3+0x58>
c001f61f:	90                   	nop
c001f620:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001f623:	89 f1                	mov    ecx,esi
c001f625:	d3 e7                	shl    edi,cl
c001f627:	39 c7                	cmp    edi,eax
c001f629:	73 eb                	jae    c001f616 <__divdi3+0x122>
c001f62b:	90                   	nop
c001f62c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001f62f:	31 f6                	xor    esi,esi
c001f631:	e9 16 ff ff ff       	jmp    c001f54c <__divdi3+0x58>
c001f636:	66 90                	xchg   ax,ax
c001f638:	31 c9                	xor    ecx,ecx
c001f63a:	e9 0d ff ff ff       	jmp    c001f54c <__divdi3+0x58>
c001f63f:	90                   	nop

c001f640 <__moddi3>:
c001f640:	55                   	push   ebp
c001f641:	57                   	push   edi
c001f642:	56                   	push   esi
c001f643:	53                   	push   ebx
c001f644:	83 ec 2c             	sub    esp,0x2c
c001f647:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f64b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001f64f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f653:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f657:	85 db                	test   ebx,ebx
c001f659:	0f 88 85 00 00 00    	js     c001f6e4 <__moddi3+0xa4>
c001f65f:	89 de                	mov    esi,ebx
c001f661:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001f669:	89 d7                	mov    edi,edx
c001f66b:	85 d2                	test   edx,edx
c001f66d:	79 09                	jns    c001f678 <__moddi3+0x38>
c001f66f:	f7 d8                	neg    eax
c001f671:	83 d2 00             	adc    edx,0x0
c001f674:	f7 da                	neg    edx
c001f676:	89 d7                	mov    edi,edx
c001f678:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f67c:	89 cd                	mov    ebp,ecx
c001f67e:	85 ff                	test   edi,edi
c001f680:	75 52                	jne    c001f6d4 <__moddi3+0x94>
c001f682:	89 c3                	mov    ebx,eax
c001f684:	39 f0                	cmp    eax,esi
c001f686:	76 24                	jbe    c001f6ac <__moddi3+0x6c>
c001f688:	89 c8                	mov    eax,ecx
c001f68a:	89 f2                	mov    edx,esi
c001f68c:	f7 f3                	div    ebx
c001f68e:	89 d6                	mov    esi,edx
c001f690:	89 f0                	mov    eax,esi
c001f692:	31 d2                	xor    edx,edx
c001f694:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f698:	85 c9                	test   ecx,ecx
c001f69a:	74 07                	je     c001f6a3 <__moddi3+0x63>
c001f69c:	f7 d8                	neg    eax
c001f69e:	83 d2 00             	adc    edx,0x0
c001f6a1:	f7 da                	neg    edx
c001f6a3:	83 c4 2c             	add    esp,0x2c
c001f6a6:	5b                   	pop    ebx
c001f6a7:	5e                   	pop    esi
c001f6a8:	5f                   	pop    edi
c001f6a9:	5d                   	pop    ebp
c001f6aa:	c3                   	ret    
c001f6ab:	90                   	nop
c001f6ac:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f6b0:	85 db                	test   ebx,ebx
c001f6b2:	75 0d                	jne    c001f6c1 <__moddi3+0x81>
c001f6b4:	b8 01 00 00 00       	mov    eax,0x1
c001f6b9:	31 d2                	xor    edx,edx
c001f6bb:	f7 f7                	div    edi
c001f6bd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f6c1:	89 f0                	mov    eax,esi
c001f6c3:	31 d2                	xor    edx,edx
c001f6c5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f6c9:	f7 f7                	div    edi
c001f6cb:	89 e8                	mov    eax,ebp
c001f6cd:	f7 f7                	div    edi
c001f6cf:	89 d6                	mov    esi,edx
c001f6d1:	eb bd                	jmp    c001f690 <__moddi3+0x50>
c001f6d3:	90                   	nop
c001f6d4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f6d8:	39 f7                	cmp    edi,esi
c001f6da:	76 20                	jbe    c001f6fc <__moddi3+0xbc>
c001f6dc:	89 c8                	mov    eax,ecx
c001f6de:	89 f2                	mov    edx,esi
c001f6e0:	eb b2                	jmp    c001f694 <__moddi3+0x54>
c001f6e2:	66 90                	xchg   ax,ax
c001f6e4:	f7 d9                	neg    ecx
c001f6e6:	83 d3 00             	adc    ebx,0x0
c001f6e9:	f7 db                	neg    ebx
c001f6eb:	89 de                	mov    esi,ebx
c001f6ed:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001f6f5:	e9 6f ff ff ff       	jmp    c001f669 <__moddi3+0x29>
c001f6fa:	66 90                	xchg   ax,ax
c001f6fc:	0f bd c7             	bsr    eax,edi
c001f6ff:	83 f0 1f             	xor    eax,0x1f
c001f702:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f706:	75 24                	jne    c001f72c <__moddi3+0xec>
c001f708:	39 f7                	cmp    edi,esi
c001f70a:	72 06                	jb     c001f712 <__moddi3+0xd2>
c001f70c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001f710:	77 0c                	ja     c001f71e <__moddi3+0xde>
c001f712:	89 e9                	mov    ecx,ebp
c001f714:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001f718:	19 fe                	sbb    esi,edi
c001f71a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f71e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f722:	89 f2                	mov    edx,esi
c001f724:	e9 6b ff ff ff       	jmp    c001f694 <__moddi3+0x54>
c001f729:	8d 76 00             	lea    esi,[esi+0x0]
c001f72c:	b8 20 00 00 00       	mov    eax,0x20
c001f731:	89 c2                	mov    edx,eax
c001f733:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f737:	29 da                	sub    edx,ebx
c001f739:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f73d:	88 d9                	mov    cl,bl
c001f73f:	d3 e7                	shl    edi,cl
c001f741:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f745:	88 d1                	mov    cl,dl
c001f747:	d3 e8                	shr    eax,cl
c001f749:	09 c7                	or     edi,eax
c001f74b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001f74f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f753:	89 d8                	mov    eax,ebx
c001f755:	88 d9                	mov    cl,bl
c001f757:	d3 e7                	shl    edi,cl
c001f759:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f75d:	89 f3                	mov    ebx,esi
c001f75f:	88 d1                	mov    cl,dl
c001f761:	d3 eb                	shr    ebx,cl
c001f763:	89 c7                	mov    edi,eax
c001f765:	88 c1                	mov    cl,al
c001f767:	d3 e6                	shl    esi,cl
c001f769:	89 e8                	mov    eax,ebp
c001f76b:	88 d1                	mov    cl,dl
c001f76d:	d3 e8                	shr    eax,cl
c001f76f:	09 f0                	or     eax,esi
c001f771:	89 f9                	mov    ecx,edi
c001f773:	d3 e5                	shl    ebp,cl
c001f775:	89 da                	mov    edx,ebx
c001f777:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001f77b:	89 d3                	mov    ebx,edx
c001f77d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f781:	89 c6                	mov    esi,eax
c001f783:	89 d1                	mov    ecx,edx
c001f785:	39 d3                	cmp    ebx,edx
c001f787:	72 27                	jb     c001f7b0 <__moddi3+0x170>
c001f789:	74 21                	je     c001f7ac <__moddi3+0x16c>
c001f78b:	29 f5                	sub    ebp,esi
c001f78d:	19 cb                	sbb    ebx,ecx
c001f78f:	89 de                	mov    esi,ebx
c001f791:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001f795:	d3 e6                	shl    esi,cl
c001f797:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f79b:	89 f9                	mov    ecx,edi
c001f79d:	d3 ed                	shr    ebp,cl
c001f79f:	09 ee                	or     esi,ebp
c001f7a1:	89 f0                	mov    eax,esi
c001f7a3:	d3 eb                	shr    ebx,cl
c001f7a5:	89 da                	mov    edx,ebx
c001f7a7:	e9 e8 fe ff ff       	jmp    c001f694 <__moddi3+0x54>
c001f7ac:	39 c5                	cmp    ebp,eax
c001f7ae:	73 db                	jae    c001f78b <__moddi3+0x14b>
c001f7b0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f7b4:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001f7b8:	89 d1                	mov    ecx,edx
c001f7ba:	89 c6                	mov    esi,eax
c001f7bc:	eb cd                	jmp    c001f78b <__moddi3+0x14b>
c001f7be:	66 90                	xchg   ax,ax

c001f7c0 <__udivdi3>:
c001f7c0:	55                   	push   ebp
c001f7c1:	57                   	push   edi
c001f7c2:	56                   	push   esi
c001f7c3:	53                   	push   ebx
c001f7c4:	83 ec 1c             	sub    esp,0x1c
c001f7c7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f7cb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f7cf:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f7d3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f7d7:	85 d2                	test   edx,edx
c001f7d9:	75 41                	jne    c001f81c <__udivdi3+0x5c>
c001f7db:	39 f7                	cmp    edi,esi
c001f7dd:	76 15                	jbe    c001f7f4 <__udivdi3+0x34>
c001f7df:	89 e8                	mov    eax,ebp
c001f7e1:	89 f2                	mov    edx,esi
c001f7e3:	f7 f7                	div    edi
c001f7e5:	31 db                	xor    ebx,ebx
c001f7e7:	89 da                	mov    edx,ebx
c001f7e9:	83 c4 1c             	add    esp,0x1c
c001f7ec:	5b                   	pop    ebx
c001f7ed:	5e                   	pop    esi
c001f7ee:	5f                   	pop    edi
c001f7ef:	5d                   	pop    ebp
c001f7f0:	c3                   	ret    
c001f7f1:	8d 76 00             	lea    esi,[esi+0x0]
c001f7f4:	89 f9                	mov    ecx,edi
c001f7f6:	85 ff                	test   edi,edi
c001f7f8:	75 0b                	jne    c001f805 <__udivdi3+0x45>
c001f7fa:	b8 01 00 00 00       	mov    eax,0x1
c001f7ff:	31 d2                	xor    edx,edx
c001f801:	f7 f7                	div    edi
c001f803:	89 c1                	mov    ecx,eax
c001f805:	31 d2                	xor    edx,edx
c001f807:	89 f0                	mov    eax,esi
c001f809:	f7 f1                	div    ecx
c001f80b:	89 c3                	mov    ebx,eax
c001f80d:	89 e8                	mov    eax,ebp
c001f80f:	f7 f1                	div    ecx
c001f811:	89 da                	mov    edx,ebx
c001f813:	83 c4 1c             	add    esp,0x1c
c001f816:	5b                   	pop    ebx
c001f817:	5e                   	pop    esi
c001f818:	5f                   	pop    edi
c001f819:	5d                   	pop    ebp
c001f81a:	c3                   	ret    
c001f81b:	90                   	nop
c001f81c:	39 f2                	cmp    edx,esi
c001f81e:	77 1c                	ja     c001f83c <__udivdi3+0x7c>
c001f820:	0f bd da             	bsr    ebx,edx
c001f823:	83 f3 1f             	xor    ebx,0x1f
c001f826:	75 24                	jne    c001f84c <__udivdi3+0x8c>
c001f828:	39 f2                	cmp    edx,esi
c001f82a:	72 08                	jb     c001f834 <__udivdi3+0x74>
c001f82c:	39 ef                	cmp    edi,ebp
c001f82e:	0f 87 84 00 00 00    	ja     c001f8b8 <__udivdi3+0xf8>
c001f834:	b8 01 00 00 00       	mov    eax,0x1
c001f839:	eb ac                	jmp    c001f7e7 <__udivdi3+0x27>
c001f83b:	90                   	nop
c001f83c:	31 db                	xor    ebx,ebx
c001f83e:	31 c0                	xor    eax,eax
c001f840:	89 da                	mov    edx,ebx
c001f842:	83 c4 1c             	add    esp,0x1c
c001f845:	5b                   	pop    ebx
c001f846:	5e                   	pop    esi
c001f847:	5f                   	pop    edi
c001f848:	5d                   	pop    ebp
c001f849:	c3                   	ret    
c001f84a:	66 90                	xchg   ax,ax
c001f84c:	b8 20 00 00 00       	mov    eax,0x20
c001f851:	29 d8                	sub    eax,ebx
c001f853:	88 d9                	mov    cl,bl
c001f855:	d3 e2                	shl    edx,cl
c001f857:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f85b:	89 fa                	mov    edx,edi
c001f85d:	88 c1                	mov    cl,al
c001f85f:	d3 ea                	shr    edx,cl
c001f861:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f865:	09 d1                	or     ecx,edx
c001f867:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f86b:	88 d9                	mov    cl,bl
c001f86d:	d3 e7                	shl    edi,cl
c001f86f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f873:	89 f7                	mov    edi,esi
c001f875:	88 c1                	mov    cl,al
c001f877:	d3 ef                	shr    edi,cl
c001f879:	88 d9                	mov    cl,bl
c001f87b:	d3 e6                	shl    esi,cl
c001f87d:	89 ea                	mov    edx,ebp
c001f87f:	88 c1                	mov    cl,al
c001f881:	d3 ea                	shr    edx,cl
c001f883:	09 d6                	or     esi,edx
c001f885:	89 f0                	mov    eax,esi
c001f887:	89 fa                	mov    edx,edi
c001f889:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f88d:	89 d7                	mov    edi,edx
c001f88f:	89 c6                	mov    esi,eax
c001f891:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f895:	39 d7                	cmp    edi,edx
c001f897:	72 13                	jb     c001f8ac <__udivdi3+0xec>
c001f899:	74 09                	je     c001f8a4 <__udivdi3+0xe4>
c001f89b:	89 f0                	mov    eax,esi
c001f89d:	31 db                	xor    ebx,ebx
c001f89f:	e9 43 ff ff ff       	jmp    c001f7e7 <__udivdi3+0x27>
c001f8a4:	88 d9                	mov    cl,bl
c001f8a6:	d3 e5                	shl    ebp,cl
c001f8a8:	39 c5                	cmp    ebp,eax
c001f8aa:	73 ef                	jae    c001f89b <__udivdi3+0xdb>
c001f8ac:	8d 46 ff             	lea    eax,[esi-0x1]
c001f8af:	31 db                	xor    ebx,ebx
c001f8b1:	e9 31 ff ff ff       	jmp    c001f7e7 <__udivdi3+0x27>
c001f8b6:	66 90                	xchg   ax,ax
c001f8b8:	31 c0                	xor    eax,eax
c001f8ba:	e9 28 ff ff ff       	jmp    c001f7e7 <__udivdi3+0x27>
c001f8bf:	90                   	nop

c001f8c0 <__umoddi3>:
c001f8c0:	55                   	push   ebp
c001f8c1:	57                   	push   edi
c001f8c2:	56                   	push   esi
c001f8c3:	53                   	push   ebx
c001f8c4:	83 ec 1c             	sub    esp,0x1c
c001f8c7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f8cb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f8cf:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f8d3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f8d7:	89 da                	mov    edx,ebx
c001f8d9:	85 c0                	test   eax,eax
c001f8db:	75 37                	jne    c001f914 <__umoddi3+0x54>
c001f8dd:	39 df                	cmp    edi,ebx
c001f8df:	76 13                	jbe    c001f8f4 <__umoddi3+0x34>
c001f8e1:	89 f0                	mov    eax,esi
c001f8e3:	f7 f7                	div    edi
c001f8e5:	89 d0                	mov    eax,edx
c001f8e7:	31 d2                	xor    edx,edx
c001f8e9:	83 c4 1c             	add    esp,0x1c
c001f8ec:	5b                   	pop    ebx
c001f8ed:	5e                   	pop    esi
c001f8ee:	5f                   	pop    edi
c001f8ef:	5d                   	pop    ebp
c001f8f0:	c3                   	ret    
c001f8f1:	8d 76 00             	lea    esi,[esi+0x0]
c001f8f4:	89 fd                	mov    ebp,edi
c001f8f6:	85 ff                	test   edi,edi
c001f8f8:	75 0b                	jne    c001f905 <__umoddi3+0x45>
c001f8fa:	b8 01 00 00 00       	mov    eax,0x1
c001f8ff:	31 d2                	xor    edx,edx
c001f901:	f7 f7                	div    edi
c001f903:	89 c5                	mov    ebp,eax
c001f905:	89 d8                	mov    eax,ebx
c001f907:	31 d2                	xor    edx,edx
c001f909:	f7 f5                	div    ebp
c001f90b:	89 f0                	mov    eax,esi
c001f90d:	f7 f5                	div    ebp
c001f90f:	89 d0                	mov    eax,edx
c001f911:	eb d4                	jmp    c001f8e7 <__umoddi3+0x27>
c001f913:	90                   	nop
c001f914:	89 f1                	mov    ecx,esi
c001f916:	39 d8                	cmp    eax,ebx
c001f918:	76 0a                	jbe    c001f924 <__umoddi3+0x64>
c001f91a:	89 f0                	mov    eax,esi
c001f91c:	83 c4 1c             	add    esp,0x1c
c001f91f:	5b                   	pop    ebx
c001f920:	5e                   	pop    esi
c001f921:	5f                   	pop    edi
c001f922:	5d                   	pop    ebp
c001f923:	c3                   	ret    
c001f924:	0f bd e8             	bsr    ebp,eax
c001f927:	83 f5 1f             	xor    ebp,0x1f
c001f92a:	75 1c                	jne    c001f948 <__umoddi3+0x88>
c001f92c:	39 d8                	cmp    eax,ebx
c001f92e:	72 04                	jb     c001f934 <__umoddi3+0x74>
c001f930:	39 f7                	cmp    edi,esi
c001f932:	77 08                	ja     c001f93c <__umoddi3+0x7c>
c001f934:	89 da                	mov    edx,ebx
c001f936:	29 fe                	sub    esi,edi
c001f938:	19 c2                	sbb    edx,eax
c001f93a:	89 f1                	mov    ecx,esi
c001f93c:	89 c8                	mov    eax,ecx
c001f93e:	83 c4 1c             	add    esp,0x1c
c001f941:	5b                   	pop    ebx
c001f942:	5e                   	pop    esi
c001f943:	5f                   	pop    edi
c001f944:	5d                   	pop    ebp
c001f945:	c3                   	ret    
c001f946:	66 90                	xchg   ax,ax
c001f948:	ba 20 00 00 00       	mov    edx,0x20
c001f94d:	29 ea                	sub    edx,ebp
c001f94f:	89 e9                	mov    ecx,ebp
c001f951:	d3 e0                	shl    eax,cl
c001f953:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f957:	89 f8                	mov    eax,edi
c001f959:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f95d:	88 d1                	mov    cl,dl
c001f95f:	d3 e8                	shr    eax,cl
c001f961:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f965:	09 c1                	or     ecx,eax
c001f967:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f96b:	89 e9                	mov    ecx,ebp
c001f96d:	d3 e7                	shl    edi,cl
c001f96f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f973:	89 d8                	mov    eax,ebx
c001f975:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f979:	88 d1                	mov    cl,dl
c001f97b:	d3 e8                	shr    eax,cl
c001f97d:	89 c7                	mov    edi,eax
c001f97f:	89 e9                	mov    ecx,ebp
c001f981:	d3 e3                	shl    ebx,cl
c001f983:	89 f0                	mov    eax,esi
c001f985:	88 d1                	mov    cl,dl
c001f987:	d3 e8                	shr    eax,cl
c001f989:	09 d8                	or     eax,ebx
c001f98b:	89 e9                	mov    ecx,ebp
c001f98d:	d3 e6                	shl    esi,cl
c001f98f:	89 f3                	mov    ebx,esi
c001f991:	89 fa                	mov    edx,edi
c001f993:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f997:	89 d1                	mov    ecx,edx
c001f999:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f99d:	89 c6                	mov    esi,eax
c001f99f:	89 d7                	mov    edi,edx
c001f9a1:	39 d1                	cmp    ecx,edx
c001f9a3:	72 27                	jb     c001f9cc <__umoddi3+0x10c>
c001f9a5:	74 21                	je     c001f9c8 <__umoddi3+0x108>
c001f9a7:	89 ca                	mov    edx,ecx
c001f9a9:	29 f3                	sub    ebx,esi
c001f9ab:	19 fa                	sbb    edx,edi
c001f9ad:	89 d0                	mov    eax,edx
c001f9af:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001f9b3:	d3 e0                	shl    eax,cl
c001f9b5:	89 e9                	mov    ecx,ebp
c001f9b7:	d3 eb                	shr    ebx,cl
c001f9b9:	09 d8                	or     eax,ebx
c001f9bb:	d3 ea                	shr    edx,cl
c001f9bd:	83 c4 1c             	add    esp,0x1c
c001f9c0:	5b                   	pop    ebx
c001f9c1:	5e                   	pop    esi
c001f9c2:	5f                   	pop    edi
c001f9c3:	5d                   	pop    ebp
c001f9c4:	c3                   	ret    
c001f9c5:	8d 76 00             	lea    esi,[esi+0x0]
c001f9c8:	39 c3                	cmp    ebx,eax
c001f9ca:	73 db                	jae    c001f9a7 <__umoddi3+0xe7>
c001f9cc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f9d0:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001f9d4:	89 d7                	mov    edi,edx
c001f9d6:	89 c6                	mov    esi,eax
c001f9d8:	eb cd                	jmp    c001f9a7 <__umoddi3+0xe7>

Disassembly of section .init:

c001f9da <_init>:
c001f9da:	55                   	push   ebp
c001f9db:	89 e5                	mov    ebp,esp
c001f9dd:	e8 12 07 fe ff       	call   c00000f4 <frame_dummy>
c001f9e2:	e8 e5 fa ff ff       	call   c001f4cc <__do_global_ctors_aux>
c001f9e7:	5d                   	pop    ebp
c001f9e8:	c3                   	ret    

Disassembly of section .fini:

c001f9e9 <_fini>:
c001f9e9:	55                   	push   ebp
c001f9ea:	89 e5                	mov    ebp,esp
c001f9ec:	e8 93 06 fe ff       	call   c0000084 <__do_global_dtors_aux>
c001f9f1:	5d                   	pop    ebp
c001f9f2:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001f9f4 <Computer::~Computer()>:
c001f9f4:	83 ec 0c             	sub    esp,0xc
c001f9f7:	ba 14 0d 02 c0       	mov    edx,0xc0020d14
c001f9fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa00:	89 10                	mov    DWORD PTR [eax],edx
c001fa02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa06:	83 ec 0c             	sub    esp,0xc
c001fa09:	50                   	push   eax
c001fa0a:	e8 49 cf fe ff       	call   c000c958 <Device::~Device()>
c001fa0f:	83 c4 10             	add    esp,0x10
c001fa12:	90                   	nop
c001fa13:	83 c4 0c             	add    esp,0xc
c001fa16:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001fa18 <Computer::~Computer()>:
c001fa18:	83 ec 0c             	sub    esp,0xc
c001fa1b:	83 ec 0c             	sub    esp,0xc
c001fa1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa22:	e8 cd ff ff ff       	call   c001f9f4 <Computer::~Computer()>
c001fa27:	83 c4 10             	add    esp,0x10
c001fa2a:	83 ec 08             	sub    esp,0x8
c001fa2d:	68 70 01 00 00       	push   0x170
c001fa32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa36:	e8 dd ad fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fa3b:	83 c4 10             	add    esp,0x10
c001fa3e:	83 c4 0c             	add    esp,0xc
c001fa41:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001fa42 <idleCommon()>:
c001fa42:	83 ec 0c             	sub    esp,0xc
c001fa45:	fa                   	cli    
c001fa46:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c001fa4c:	e8 ff 66 ff ff       	call   c0016150 <schedule()>
c001fa51:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001fa56:	48                   	dec    eax
c001fa57:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001fa5c:	75 01                	jne    c001fa5f <idleCommon()+0x1d>
c001fa5e:	fb                   	sti    
c001fa5f:	83 c4 0c             	add    esp,0xc
c001fa62:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001fa64 <LinkedList<UnixFile>::~LinkedList()>:
c001fa64:	90                   	nop
c001fa65:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001fa66 <LinkedList<UnixFile>::LinkedList()>:
c001fa66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa6a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fa70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa74:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fa7b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa7f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fa86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa8a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fa90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa94:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fa9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa9f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001faa6:	90                   	nop
c001faa7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001faa8 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001faa8:	83 ec 0c             	sub    esp,0xc
c001faab:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fab0:	75 10                	jne    c001fac2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001fab2:	83 ec 0c             	sub    esp,0xc
c001fab5:	68 28 0f 02 c0       	push   0xc0020f28
c001faba:	e8 f0 1b ff ff       	call   c00116af <KePanic(char const*)>
c001fabf:	83 c4 10             	add    esp,0x10
c001fac2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fac6:	8b 00                	mov    eax,DWORD PTR [eax]
c001fac8:	85 c0                	test   eax,eax
c001faca:	74 34                	je     c001fb00 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001facc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fad0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fad3:	85 c0                	test   eax,eax
c001fad5:	74 29                	je     c001fb00 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001fad7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fadb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fade:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fae2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fae5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fae9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001faed:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001faf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faf4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001faf7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fafe:	eb 65                	jmp    c001fb65 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001fb00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb04:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb06:	85 c0                	test   eax,eax
c001fb08:	75 4b                	jne    c001fb55 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001fb0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb0e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb11:	85 c0                	test   eax,eax
c001fb13:	75 40                	jne    c001fb55 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001fb15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb19:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fb1d:	89 10                	mov    DWORD PTR [eax],edx
c001fb1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb23:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fb27:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fb2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb2e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb31:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fb38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb3c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb3f:	85 c0                	test   eax,eax
c001fb41:	74 22                	je     c001fb65 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001fb43:	83 ec 0c             	sub    esp,0xc
c001fb46:	68 4a 0f 02 c0       	push   0xc0020f4a
c001fb4b:	e8 5f 1b ff ff       	call   c00116af <KePanic(char const*)>
c001fb50:	83 c4 10             	add    esp,0x10
c001fb53:	eb 10                	jmp    c001fb65 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001fb55:	83 ec 0c             	sub    esp,0xc
c001fb58:	68 54 0f 02 c0       	push   0xc0020f54
c001fb5d:	e8 4d 1b ff ff       	call   c00116af <KePanic(char const*)>
c001fb62:	83 c4 10             	add    esp,0x10
c001fb65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb69:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb6c:	8d 50 01             	lea    edx,[eax+0x1]
c001fb6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb73:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fb76:	90                   	nop
c001fb77:	83 c4 0c             	add    esp,0xc
c001fb7a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001fb7c <LinkedList<UnixFile>::getFirstElement()>:
c001fb7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb80:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb82:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001fb84 <LinkedList<UnixFile>::removeFirst()>:
c001fb84:	83 ec 0c             	sub    esp,0xc
c001fb87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb8b:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb8d:	85 c0                	test   eax,eax
c001fb8f:	75 12                	jne    c001fba3 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001fb91:	83 ec 0c             	sub    esp,0xc
c001fb94:	68 60 0f 02 c0       	push   0xc0020f60
c001fb99:	e8 11 1b ff ff       	call   c00116af <KePanic(char const*)>
c001fb9e:	83 c4 10             	add    esp,0x10
c001fba1:	eb 7e                	jmp    c001fc21 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001fba3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fba7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fbaa:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fbad:	85 c0                	test   eax,eax
c001fbaf:	74 10                	je     c001fbc1 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001fbb1:	83 ec 0c             	sub    esp,0xc
c001fbb4:	68 ab 0f 02 c0       	push   0xc0020fab
c001fbb9:	e8 f1 1a ff ff       	call   c00116af <KePanic(char const*)>
c001fbbe:	83 c4 10             	add    esp,0x10
c001fbc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbc5:	8b 00                	mov    eax,DWORD PTR [eax]
c001fbc7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fbca:	85 c0                	test   eax,eax
c001fbcc:	75 33                	jne    c001fc01 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001fbce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbd2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fbd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbdc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fbe3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbe7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fbea:	83 f8 01             	cmp    eax,0x1
c001fbed:	74 21                	je     c001fc10 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001fbef:	83 ec 0c             	sub    esp,0xc
c001fbf2:	68 84 0f 02 c0       	push   0xc0020f84
c001fbf7:	e8 b3 1a ff ff       	call   c00116af <KePanic(char const*)>
c001fbfc:	83 c4 10             	add    esp,0x10
c001fbff:	eb 0f                	jmp    c001fc10 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001fc01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc05:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc07:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001fc0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc0e:	89 10                	mov    DWORD PTR [eax],edx
c001fc10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc14:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fc17:	8d 50 ff             	lea    edx,[eax-0x1]
c001fc1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc1e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fc21:	83 c4 0c             	add    esp,0xc
c001fc24:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001fc26 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001fc26:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fc2a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fc2d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001fc2e <DriverlessDevice::~DriverlessDevice()>:
c001fc2e:	ba dc 1b 02 c0       	mov    edx,0xc0021bdc
c001fc33:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc37:	89 10                	mov    DWORD PTR [eax],edx
c001fc39:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc3d:	50                   	push   eax
c001fc3e:	e8 15 cd fe ff       	call   c000c958 <Device::~Device()>
c001fc43:	83 c4 04             	add    esp,0x4
c001fc46:	90                   	nop
c001fc47:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001fc48 <DriverlessDevice::~DriverlessDevice()>:
c001fc48:	83 ec 0c             	sub    esp,0xc
c001fc4b:	83 ec 0c             	sub    esp,0xc
c001fc4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc52:	e8 d7 ff ff ff       	call   c001fc2e <DriverlessDevice::~DriverlessDevice()>
c001fc57:	83 c4 10             	add    esp,0x10
c001fc5a:	83 ec 08             	sub    esp,0x8
c001fc5d:	68 58 01 00 00       	push   0x158
c001fc62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc66:	e8 ad ab fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fc6b:	83 c4 10             	add    esp,0x10
c001fc6e:	83 c4 0c             	add    esp,0xc
c001fc71:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001fc72 <LinkedList<Device>::addElement(Device*)>:
c001fc72:	83 ec 0c             	sub    esp,0xc
c001fc75:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fc7a:	75 10                	jne    c001fc8c <LinkedList<Device>::addElement(Device*)+0x1a>
c001fc7c:	83 ec 0c             	sub    esp,0xc
c001fc7f:	68 28 0f 02 c0       	push   0xc0020f28
c001fc84:	e8 26 1a ff ff       	call   c00116af <KePanic(char const*)>
c001fc89:	83 c4 10             	add    esp,0x10
c001fc8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc90:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc92:	85 c0                	test   eax,eax
c001fc94:	74 3a                	je     c001fcd0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001fc96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc9a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fc9d:	85 c0                	test   eax,eax
c001fc9f:	74 2f                	je     c001fcd0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001fca1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fca5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fca8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fcac:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001fcb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcb6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fcba:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fcbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcc1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fcc4:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001fcce:	eb 68                	jmp    c001fd38 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fcd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcd4:	8b 00                	mov    eax,DWORD PTR [eax]
c001fcd6:	85 c0                	test   eax,eax
c001fcd8:	75 4e                	jne    c001fd28 <LinkedList<Device>::addElement(Device*)+0xb6>
c001fcda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcde:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fce1:	85 c0                	test   eax,eax
c001fce3:	75 43                	jne    c001fd28 <LinkedList<Device>::addElement(Device*)+0xb6>
c001fce5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fce9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fced:	89 10                	mov    DWORD PTR [eax],edx
c001fcef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcf3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fcf7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fcfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcfe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd01:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001fd0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd0f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fd12:	85 c0                	test   eax,eax
c001fd14:	74 22                	je     c001fd38 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fd16:	83 ec 0c             	sub    esp,0xc
c001fd19:	68 4a 0f 02 c0       	push   0xc0020f4a
c001fd1e:	e8 8c 19 ff ff       	call   c00116af <KePanic(char const*)>
c001fd23:	83 c4 10             	add    esp,0x10
c001fd26:	eb 10                	jmp    c001fd38 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fd28:	83 ec 0c             	sub    esp,0xc
c001fd2b:	68 54 0f 02 c0       	push   0xc0020f54
c001fd30:	e8 7a 19 ff ff       	call   c00116af <KePanic(char const*)>
c001fd35:	83 c4 10             	add    esp,0x10
c001fd38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd3c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fd3f:	8d 50 01             	lea    edx,[eax+0x1]
c001fd42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd46:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fd49:	90                   	nop
c001fd4a:	83 c4 0c             	add    esp,0xc
c001fd4d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001fd4e <LinkedList<Device>::LinkedList()>:
c001fd4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd52:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fd58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd5c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fd63:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd67:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fd6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd72:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fd78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd7c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fd83:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd87:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fd8e:	90                   	nop
c001fd8f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001fd90 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001fd90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd94:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd96:	85 c0                	test   eax,eax
c001fd98:	75 0e                	jne    c001fda8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fd9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd9e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fda1:	85 c0                	test   eax,eax
c001fda3:	75 03                	jne    c001fda8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fda5:	b0 01                	mov    al,0x1
c001fda7:	c3                   	ret    
c001fda8:	b0 00                	mov    al,0x0
c001fdaa:	90                   	nop
c001fdab:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001fdac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001fdac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fdb0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fdb2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001fdb4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001fdb4:	83 ec 0c             	sub    esp,0xc
c001fdb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdbb:	8b 00                	mov    eax,DWORD PTR [eax]
c001fdbd:	85 c0                	test   eax,eax
c001fdbf:	75 17                	jne    c001fdd8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001fdc1:	83 ec 0c             	sub    esp,0xc
c001fdc4:	68 60 0f 02 c0       	push   0xc0020f60
c001fdc9:	e8 e1 18 ff ff       	call   c00116af <KePanic(char const*)>
c001fdce:	83 c4 10             	add    esp,0x10
c001fdd1:	e9 96 00 00 00       	jmp    c001fe6c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c001fdd6:	66 90                	xchg   ax,ax
c001fdd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fddc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fddf:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fde2:	85 c0                	test   eax,eax
c001fde4:	0f 95 c0             	setne  al
c001fde7:	0f b6 c0             	movzx  eax,al
c001fdea:	85 c0                	test   eax,eax
c001fdec:	74 12                	je     c001fe00 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c001fdee:	83 ec 0c             	sub    esp,0xc
c001fdf1:	68 ab 0f 02 c0       	push   0xc0020fab
c001fdf6:	e8 b4 18 ff ff       	call   c00116af <KePanic(char const*)>
c001fdfb:	83 c4 10             	add    esp,0x10
c001fdfe:	66 90                	xchg   ax,ax
c001fe00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe04:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe06:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fe09:	85 c0                	test   eax,eax
c001fe0b:	0f 94 c0             	sete   al
c001fe0e:	0f b6 c0             	movzx  eax,al
c001fe11:	85 c0                	test   eax,eax
c001fe13:	74 33                	je     c001fe48 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001fe15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe19:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fe1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe23:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fe2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe2e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fe31:	83 f8 01             	cmp    eax,0x1
c001fe34:	74 22                	je     c001fe58 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001fe36:	83 ec 0c             	sub    esp,0xc
c001fe39:	68 84 0f 02 c0       	push   0xc0020f84
c001fe3e:	e8 6c 18 ff ff       	call   c00116af <KePanic(char const*)>
c001fe43:	83 c4 10             	add    esp,0x10
c001fe46:	eb 10                	jmp    c001fe58 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001fe48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe4c:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe4e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001fe51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe55:	89 10                	mov    DWORD PTR [eax],edx
c001fe57:	90                   	nop
c001fe58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe5c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fe5f:	8d 50 ff             	lea    edx,[eax-0x1]
c001fe62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe66:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fe69:	8d 76 00             	lea    esi,[esi+0x0]
c001fe6c:	83 c4 0c             	add    esp,0xc
c001fe6f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001fe70 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001fe70:	83 ec 0c             	sub    esp,0xc
c001fe73:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fe78:	75 12                	jne    c001fe8c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001fe7a:	83 ec 0c             	sub    esp,0xc
c001fe7d:	68 28 0f 02 c0       	push   0xc0020f28
c001fe82:	e8 28 18 ff ff       	call   c00116af <KePanic(char const*)>
c001fe87:	83 c4 10             	add    esp,0x10
c001fe8a:	66 90                	xchg   ax,ax
c001fe8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe90:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe92:	85 c0                	test   eax,eax
c001fe94:	74 36                	je     c001fecc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001fe96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe9a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fe9d:	85 c0                	test   eax,eax
c001fe9f:	74 2b                	je     c001fecc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001fea1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fea5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fea8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001feac:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001feaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feb3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001feb7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001feba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001febe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fec1:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fec8:	eb 6a                	jmp    c001ff34 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001feca:	66 90                	xchg   ax,ax
c001fecc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fed0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fed2:	85 c0                	test   eax,eax
c001fed4:	75 4e                	jne    c001ff24 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001fed6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feda:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fedd:	85 c0                	test   eax,eax
c001fedf:	75 43                	jne    c001ff24 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001fee1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fee5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fee9:	89 10                	mov    DWORD PTR [eax],edx
c001feeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feef:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fef3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fef6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fefa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fefd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ff04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff08:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ff0b:	85 c0                	test   eax,eax
c001ff0d:	74 25                	je     c001ff34 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001ff0f:	83 ec 0c             	sub    esp,0xc
c001ff12:	68 4a 0f 02 c0       	push   0xc0020f4a
c001ff17:	e8 93 17 ff ff       	call   c00116af <KePanic(char const*)>
c001ff1c:	83 c4 10             	add    esp,0x10
c001ff1f:	eb 13                	jmp    c001ff34 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001ff21:	8d 76 00             	lea    esi,[esi+0x0]
c001ff24:	83 ec 0c             	sub    esp,0xc
c001ff27:	68 54 0f 02 c0       	push   0xc0020f54
c001ff2c:	e8 7e 17 ff ff       	call   c00116af <KePanic(char const*)>
c001ff31:	83 c4 10             	add    esp,0x10
c001ff34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff38:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ff3b:	8d 50 01             	lea    edx,[eax+0x1]
c001ff3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff42:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ff45:	90                   	nop
c001ff46:	83 c4 0c             	add    esp,0xc
c001ff49:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001ff4c <ACPI::~ACPI()>:
c001ff4c:	83 ec 0c             	sub    esp,0xc
c001ff4f:	ba c4 21 02 c0       	mov    edx,0xc00221c4
c001ff54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff58:	89 10                	mov    DWORD PTR [eax],edx
c001ff5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff5e:	83 ec 0c             	sub    esp,0xc
c001ff61:	50                   	push   eax
c001ff62:	e8 f1 c9 fe ff       	call   c000c958 <Device::~Device()>
c001ff67:	83 c4 10             	add    esp,0x10
c001ff6a:	90                   	nop
c001ff6b:	83 c4 0c             	add    esp,0xc
c001ff6e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001ff70 <ACPI::~ACPI()>:
c001ff70:	83 ec 0c             	sub    esp,0xc
c001ff73:	83 ec 0c             	sub    esp,0xc
c001ff76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff7a:	e8 cd ff ff ff       	call   c001ff4c <ACPI::~ACPI()>
c001ff7f:	83 c4 10             	add    esp,0x10
c001ff82:	83 ec 08             	sub    esp,0x8
c001ff85:	68 64 12 00 00       	push   0x1264
c001ff8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff8e:	e8 85 a8 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001ff93:	83 c4 10             	add    esp,0x10
c001ff96:	83 c4 0c             	add    esp,0xc
c001ff99:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001ff9c <LinkedList<Device>::~LinkedList()>:
c001ff9c:	90                   	nop
c001ff9d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001ffa0 <LinkedList<Device>::isEmpty()>:
c001ffa0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ffa4:	8b 00                	mov    eax,DWORD PTR [eax]
c001ffa6:	85 c0                	test   eax,eax
c001ffa8:	75 0e                	jne    c001ffb8 <LinkedList<Device>::isEmpty()+0x18>
c001ffaa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ffae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ffb1:	85 c0                	test   eax,eax
c001ffb3:	75 03                	jne    c001ffb8 <LinkedList<Device>::isEmpty()+0x18>
c001ffb5:	b0 01                	mov    al,0x1
c001ffb7:	c3                   	ret    
c001ffb8:	b0 00                	mov    al,0x0
c001ffba:	90                   	nop
c001ffbb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001ffbc <LinkedList<Device>::getFirstElement()>:
c001ffbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ffc0:	8b 00                	mov    eax,DWORD PTR [eax]
c001ffc2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001ffc4 <LinkedList<Device>::removeFirst()>:
c001ffc4:	83 ec 0c             	sub    esp,0xc
c001ffc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffcb:	8b 00                	mov    eax,DWORD PTR [eax]
c001ffcd:	85 c0                	test   eax,eax
c001ffcf:	75 17                	jne    c001ffe8 <LinkedList<Device>::removeFirst()+0x24>
c001ffd1:	83 ec 0c             	sub    esp,0xc
c001ffd4:	68 60 0f 02 c0       	push   0xc0020f60
c001ffd9:	e8 d1 16 ff ff       	call   c00116af <KePanic(char const*)>
c001ffde:	83 c4 10             	add    esp,0x10
c001ffe1:	e9 92 00 00 00       	jmp    c0020078 <LinkedList<Device>::removeFirst()+0xb4>
c001ffe6:	66 90                	xchg   ax,ax
c001ffe8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ffef:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001fff5:	85 c0                	test   eax,eax
c001fff7:	74 13                	je     c002000c <LinkedList<Device>::removeFirst()+0x48>
c001fff9:	83 ec 0c             	sub    esp,0xc
c001fffc:	68 ab 0f 02 c0       	push   0xc0020fab
c0020001:	e8 a9 16 ff ff       	call   c00116af <KePanic(char const*)>
c0020006:	83 c4 10             	add    esp,0x10
c0020009:	8d 76 00             	lea    esi,[esi+0x0]
c002000c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020010:	8b 00                	mov    eax,DWORD PTR [eax]
c0020012:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0020018:	85 c0                	test   eax,eax
c002001a:	75 34                	jne    c0020050 <LinkedList<Device>::removeFirst()+0x8c>
c002001c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020020:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020026:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002002a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020031:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020035:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020038:	83 f8 01             	cmp    eax,0x1
c002003b:	74 27                	je     c0020064 <LinkedList<Device>::removeFirst()+0xa0>
c002003d:	83 ec 0c             	sub    esp,0xc
c0020040:	68 84 0f 02 c0       	push   0xc0020f84
c0020045:	e8 65 16 ff ff       	call   c00116af <KePanic(char const*)>
c002004a:	83 c4 10             	add    esp,0x10
c002004d:	eb 15                	jmp    c0020064 <LinkedList<Device>::removeFirst()+0xa0>
c002004f:	90                   	nop
c0020050:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020054:	8b 00                	mov    eax,DWORD PTR [eax]
c0020056:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c002005c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020060:	89 10                	mov    DWORD PTR [eax],edx
c0020062:	66 90                	xchg   ax,ax
c0020064:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020068:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002006b:	8d 50 ff             	lea    edx,[eax-0x1]
c002006e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020072:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0020075:	8d 76 00             	lea    esi,[esi+0x0]
c0020078:	83 c4 0c             	add    esp,0xc
c002007b:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c002007c <CPU::~CPU()>:
c002007c:	83 ec 0c             	sub    esp,0xc
c002007f:	ba 6c 23 02 c0       	mov    edx,0xc002236c
c0020084:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020088:	89 10                	mov    DWORD PTR [eax],edx
c002008a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002008e:	83 ec 0c             	sub    esp,0xc
c0020091:	50                   	push   eax
c0020092:	e8 c1 c8 fe ff       	call   c000c958 <Device::~Device()>
c0020097:	83 c4 10             	add    esp,0x10
c002009a:	90                   	nop
c002009b:	83 c4 0c             	add    esp,0xc
c002009e:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c00200a0 <CPU::~CPU()>:
c00200a0:	83 ec 0c             	sub    esp,0xc
c00200a3:	83 ec 0c             	sub    esp,0xc
c00200a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200aa:	e8 cd ff ff ff       	call   c002007c <CPU::~CPU()>
c00200af:	83 c4 10             	add    esp,0x10
c00200b2:	83 ec 08             	sub    esp,0x8
c00200b5:	68 94 11 00 00       	push   0x1194
c00200ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200be:	e8 55 a7 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c00200c3:	83 c4 10             	add    esp,0x10
c00200c6:	83 c4 0c             	add    esp,0xc
c00200c9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c00200cc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c00200cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00200d0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00200d3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c00200d4 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c00200d4:	90                   	nop
c00200d5:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c00200d8 <ThreadControlBlock::ThreadControlBlock()>:
c00200d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00200dc:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00200e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00200e7:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00200ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00200f2:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c00200f9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00200fd:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c0020104:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020108:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c002010f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020113:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0020117:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002011b:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c002011f:	90                   	nop
c0020120:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0020124 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0020124:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020128:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002012e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020132:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020139:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002013d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0020144:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020148:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002014e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020152:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020159:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002015d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0020164:	90                   	nop
c0020165:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0020166 <PCI::~PCI()>:
c0020166:	83 ec 0c             	sub    esp,0xc
c0020169:	ba 4c 32 02 c0       	mov    edx,0xc002324c
c002016e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020172:	89 10                	mov    DWORD PTR [eax],edx
c0020174:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020178:	83 ec 0c             	sub    esp,0xc
c002017b:	50                   	push   eax
c002017c:	e8 6f c2 fe ff       	call   c000c3f0 <Bus::~Bus()>
c0020181:	83 c4 10             	add    esp,0x10
c0020184:	90                   	nop
c0020185:	83 c4 0c             	add    esp,0xc
c0020188:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c002018a <PCI::~PCI()>:
c002018a:	83 ec 0c             	sub    esp,0xc
c002018d:	83 ec 0c             	sub    esp,0xc
c0020190:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020194:	e8 cd ff ff ff       	call   c0020166 <PCI::~PCI()>
c0020199:	83 c4 10             	add    esp,0x10
c002019c:	83 ec 08             	sub    esp,0x8
c002019f:	68 5c 01 00 00       	push   0x15c
c00201a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201a8:	e8 6b a6 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c00201ad:	83 c4 10             	add    esp,0x10
c00201b0:	83 c4 0c             	add    esp,0xc
c00201b3:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c00201b4 <IDE::~IDE()>:
c00201b4:	83 ec 0c             	sub    esp,0xc
c00201b7:	ba 00 33 02 c0       	mov    edx,0xc0023300
c00201bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201c0:	89 10                	mov    DWORD PTR [eax],edx
c00201c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201c6:	83 ec 0c             	sub    esp,0xc
c00201c9:	50                   	push   eax
c00201ca:	e8 01 cc fe ff       	call   c000cdd0 <HardDiskController::~HardDiskController()>
c00201cf:	83 c4 10             	add    esp,0x10
c00201d2:	90                   	nop
c00201d3:	83 c4 0c             	add    esp,0xc
c00201d6:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c00201d8 <IDE::~IDE()>:
c00201d8:	83 ec 0c             	sub    esp,0xc
c00201db:	83 ec 0c             	sub    esp,0xc
c00201de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201e2:	e8 cd ff ff ff       	call   c00201b4 <IDE::~IDE()>
c00201e7:	83 c4 10             	add    esp,0x10
c00201ea:	83 ec 08             	sub    esp,0x8
c00201ed:	68 70 02 00 00       	push   0x270
c00201f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201f6:	e8 1d a6 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c00201fb:	83 c4 10             	add    esp,0x10
c00201fe:	83 c4 0c             	add    esp,0xc
c0020201:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0020202 <SATABus::~SATABus()>:
c0020202:	83 ec 0c             	sub    esp,0xc
c0020205:	ba 50 33 02 c0       	mov    edx,0xc0023350
c002020a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002020e:	89 10                	mov    DWORD PTR [eax],edx
c0020210:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020214:	83 ec 0c             	sub    esp,0xc
c0020217:	50                   	push   eax
c0020218:	e8 b3 cb fe ff       	call   c000cdd0 <HardDiskController::~HardDiskController()>
c002021d:	83 c4 10             	add    esp,0x10
c0020220:	90                   	nop
c0020221:	83 c4 0c             	add    esp,0xc
c0020224:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0020226 <SATABus::~SATABus()>:
c0020226:	83 ec 0c             	sub    esp,0xc
c0020229:	83 ec 0c             	sub    esp,0xc
c002022c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020230:	e8 cd ff ff ff       	call   c0020202 <SATABus::~SATABus()>
c0020235:	83 c4 10             	add    esp,0x10
c0020238:	83 ec 08             	sub    esp,0x8
c002023b:	68 64 01 00 00       	push   0x164
c0020240:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020244:	e8 cf a5 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0020249:	83 c4 10             	add    esp,0x10
c002024c:	83 c4 0c             	add    esp,0xc
c002024f:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0020250 <ATA::~ATA()>:
c0020250:	83 ec 0c             	sub    esp,0xc
c0020253:	ba 90 33 02 c0       	mov    edx,0xc0023390
c0020258:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002025c:	89 10                	mov    DWORD PTR [eax],edx
c002025e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020262:	83 ec 0c             	sub    esp,0xc
c0020265:	50                   	push   eax
c0020266:	e8 47 cc fe ff       	call   c000ceb2 <PhysicalDisk::~PhysicalDisk()>
c002026b:	83 c4 10             	add    esp,0x10
c002026e:	90                   	nop
c002026f:	83 c4 0c             	add    esp,0xc
c0020272:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0020274 <ATA::~ATA()>:
c0020274:	83 ec 0c             	sub    esp,0xc
c0020277:	83 ec 0c             	sub    esp,0xc
c002027a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002027e:	e8 cd ff ff ff       	call   c0020250 <ATA::~ATA()>
c0020283:	83 c4 10             	add    esp,0x10
c0020286:	83 ec 08             	sub    esp,0x8
c0020289:	68 7c 01 00 00       	push   0x17c
c002028e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020292:	e8 81 a5 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0020297:	83 c4 10             	add    esp,0x10
c002029a:	83 c4 0c             	add    esp,0xc
c002029d:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c002029e <ATAPI::~ATAPI()>:
c002029e:	83 ec 0c             	sub    esp,0xc
c00202a1:	ba d8 33 02 c0       	mov    edx,0xc00233d8
c00202a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202aa:	89 10                	mov    DWORD PTR [eax],edx
c00202ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202b0:	83 ec 0c             	sub    esp,0xc
c00202b3:	50                   	push   eax
c00202b4:	e8 f9 cb fe ff       	call   c000ceb2 <PhysicalDisk::~PhysicalDisk()>
c00202b9:	83 c4 10             	add    esp,0x10
c00202bc:	90                   	nop
c00202bd:	83 c4 0c             	add    esp,0xc
c00202c0:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c00202c2 <ATAPI::~ATAPI()>:
c00202c2:	83 ec 0c             	sub    esp,0xc
c00202c5:	83 ec 0c             	sub    esp,0xc
c00202c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202cc:	e8 cd ff ff ff       	call   c002029e <ATAPI::~ATAPI()>
c00202d1:	83 c4 10             	add    esp,0x10
c00202d4:	83 ec 08             	sub    esp,0x8
c00202d7:	68 84 01 00 00       	push   0x184
c00202dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202e0:	e8 33 a5 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c00202e5:	83 c4 10             	add    esp,0x10
c00202e8:	83 c4 0c             	add    esp,0xc
c00202eb:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c00202ec <SATA::~SATA()>:
c00202ec:	83 ec 0c             	sub    esp,0xc
c00202ef:	ba 8c 34 02 c0       	mov    edx,0xc002348c
c00202f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202f8:	89 10                	mov    DWORD PTR [eax],edx
c00202fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202fe:	83 ec 0c             	sub    esp,0xc
c0020301:	50                   	push   eax
c0020302:	e8 ab cb fe ff       	call   c000ceb2 <PhysicalDisk::~PhysicalDisk()>
c0020307:	83 c4 10             	add    esp,0x10
c002030a:	90                   	nop
c002030b:	83 c4 0c             	add    esp,0xc
c002030e:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0020310 <SATA::~SATA()>:
c0020310:	83 ec 0c             	sub    esp,0xc
c0020313:	83 ec 0c             	sub    esp,0xc
c0020316:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002031a:	e8 cd ff ff ff       	call   c00202ec <SATA::~SATA()>
c002031f:	83 c4 10             	add    esp,0x10
c0020322:	83 ec 08             	sub    esp,0x8
c0020325:	68 7c 01 00 00       	push   0x17c
c002032a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002032e:	e8 e5 a4 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0020333:	83 c4 10             	add    esp,0x10
c0020336:	83 c4 0c             	add    esp,0xc
c0020339:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c002033a <SATAPI::~SATAPI()>:
c002033a:	83 ec 0c             	sub    esp,0xc
c002033d:	ba b0 35 02 c0       	mov    edx,0xc00235b0
c0020342:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020346:	89 10                	mov    DWORD PTR [eax],edx
c0020348:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002034c:	83 ec 0c             	sub    esp,0xc
c002034f:	50                   	push   eax
c0020350:	e8 5d cb fe ff       	call   c000ceb2 <PhysicalDisk::~PhysicalDisk()>
c0020355:	83 c4 10             	add    esp,0x10
c0020358:	90                   	nop
c0020359:	83 c4 0c             	add    esp,0xc
c002035c:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c002035e <SATAPI::~SATAPI()>:
c002035e:	83 ec 0c             	sub    esp,0xc
c0020361:	83 ec 0c             	sub    esp,0xc
c0020364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020368:	e8 cd ff ff ff       	call   c002033a <SATAPI::~SATAPI()>
c002036d:	83 c4 10             	add    esp,0x10
c0020370:	83 ec 08             	sub    esp,0x8
c0020373:	68 84 01 00 00       	push   0x184
c0020378:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002037c:	e8 97 a4 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0020381:	83 c4 10             	add    esp,0x10
c0020384:	83 c4 0c             	add    esp,0xc
c0020387:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0020388 <IOAPIC::~IOAPIC()>:
c0020388:	83 ec 0c             	sub    esp,0xc
c002038b:	ba f0 35 02 c0       	mov    edx,0xc00235f0
c0020390:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020394:	89 10                	mov    DWORD PTR [eax],edx
c0020396:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002039a:	83 ec 0c             	sub    esp,0xc
c002039d:	50                   	push   eax
c002039e:	e8 b5 c5 fe ff       	call   c000c958 <Device::~Device()>
c00203a3:	83 c4 10             	add    esp,0x10
c00203a6:	90                   	nop
c00203a7:	83 c4 0c             	add    esp,0xc
c00203aa:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c00203ac <IOAPIC::~IOAPIC()>:
c00203ac:	83 ec 0c             	sub    esp,0xc
c00203af:	83 ec 0c             	sub    esp,0xc
c00203b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00203b6:	e8 cd ff ff ff       	call   c0020388 <IOAPIC::~IOAPIC()>
c00203bb:	83 c4 10             	add    esp,0x10
c00203be:	83 ec 08             	sub    esp,0x8
c00203c1:	68 68 01 00 00       	push   0x168
c00203c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00203ca:	e8 49 a4 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c00203cf:	83 c4 10             	add    esp,0x10
c00203d2:	83 c4 0c             	add    esp,0xc
c00203d5:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c00203d8 <APICTimer::~APICTimer()>:
c00203d8:	83 ec 0c             	sub    esp,0xc
c00203db:	ba 38 36 02 c0       	mov    edx,0xc0023638
c00203e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203e4:	89 10                	mov    DWORD PTR [eax],edx
c00203e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203ea:	83 ec 0c             	sub    esp,0xc
c00203ed:	50                   	push   eax
c00203ee:	e8 31 e0 fe ff       	call   c000e424 <Timer::~Timer()>
c00203f3:	83 c4 10             	add    esp,0x10
c00203f6:	90                   	nop
c00203f7:	83 c4 0c             	add    esp,0xc
c00203fa:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c00203fc <APICTimer::~APICTimer()>:
c00203fc:	83 ec 0c             	sub    esp,0xc
c00203ff:	83 ec 0c             	sub    esp,0xc
c0020402:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020406:	e8 cd ff ff ff       	call   c00203d8 <APICTimer::~APICTimer()>
c002040b:	83 c4 10             	add    esp,0x10
c002040e:	83 ec 08             	sub    esp,0x8
c0020411:	68 60 01 00 00       	push   0x160
c0020416:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002041a:	e8 f9 a3 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c002041f:	83 c4 10             	add    esp,0x10
c0020422:	83 c4 0c             	add    esp,0xc
c0020425:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0020428 <PIT::~PIT()>:
c0020428:	83 ec 0c             	sub    esp,0xc
c002042b:	ba 88 36 02 c0       	mov    edx,0xc0023688
c0020430:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020434:	89 10                	mov    DWORD PTR [eax],edx
c0020436:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002043a:	83 ec 0c             	sub    esp,0xc
c002043d:	50                   	push   eax
c002043e:	e8 e1 df fe ff       	call   c000e424 <Timer::~Timer()>
c0020443:	83 c4 10             	add    esp,0x10
c0020446:	90                   	nop
c0020447:	83 c4 0c             	add    esp,0xc
c002044a:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c002044c <PIT::~PIT()>:
c002044c:	83 ec 0c             	sub    esp,0xc
c002044f:	83 ec 0c             	sub    esp,0xc
c0020452:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020456:	e8 cd ff ff ff       	call   c0020428 <PIT::~PIT()>
c002045b:	83 c4 10             	add    esp,0x10
c002045e:	83 ec 08             	sub    esp,0x8
c0020461:	68 5c 01 00 00       	push   0x15c
c0020466:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002046a:	e8 a9 a3 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c002046f:	83 c4 10             	add    esp,0x10
c0020472:	83 c4 0c             	add    esp,0xc
c0020475:	c3                   	ret    

Disassembly of section userkernel:

c0025000 <KiDefaultSignalHandlerAbort(int)>:
c0025000:	57                   	push   edi
c0025001:	b9 07 00 00 00       	mov    ecx,0x7
c0025006:	56                   	push   esi
c0025007:	be 9d 24 02 c0       	mov    esi,0xc002249d
c002500c:	83 ec 24             	sub    esp,0x24
c002500f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025013:	fc                   	cld    
c0025014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0025016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002501a:	50                   	push   eax
c002501b:	6a 00                	push   0x0
c002501d:	6a 38                	push   0x38
c002501f:	6a 01                	push   0x1
c0025021:	e8 2c 00 00 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0025026:	83 c4 34             	add    esp,0x34
c0025029:	5e                   	pop    esi
c002502a:	5f                   	pop    edi
c002502b:	c3                   	ret    

c002502c <KiDefaultSignalHandlerTerminate(int)>:
c002502c:	57                   	push   edi
c002502d:	b9 08 00 00 00       	mov    ecx,0x8
c0025032:	56                   	push   esi
c0025033:	be b9 24 02 c0       	mov    esi,0xc00224b9
c0025038:	83 ec 24             	sub    esp,0x24
c002503b:	89 e7                	mov    edi,esp
c002503d:	fc                   	cld    
c002503e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0025040:	54                   	push   esp
c0025041:	6a 00                	push   0x0
c0025043:	6a 37                	push   0x37
c0025045:	6a 01                	push   0x1
c0025047:	e8 06 00 00 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002504c:	83 c4 34             	add    esp,0x34
c002504f:	5e                   	pop    esi
c0025050:	5f                   	pop    edi
c0025051:	c3                   	ret    

c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0025052:	53                   	push   ebx
c0025053:	83 ec 10             	sub    esp,0x10
c0025056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002505a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002505e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0025062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025066:	cd 60                	int    0x60
c0025068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002506c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0025074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025078:	83 c4 10             	add    esp,0x10
c002507b:	5b                   	pop    ebx
c002507c:	c3                   	ret    

Disassembly of section align_previous:

c0026000 <DO_NOT_DELETE()>:
c0026000:	c3                   	ret    
