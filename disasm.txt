
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 f0 7a 00 00       	call   c0007b10 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 a4 39 02 c0       	mov    eax,0xc00239a4
c0000025:	3d a4 39 02 c0       	cmp    eax,0xc00239a4
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 a4 39 02 c0       	push   0xc00239a4
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 a4 39 02 c0       	mov    eax,0xc00239a4
c0000051:	2d a4 39 02 c0       	sub    eax,0xc00239a4
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 a4 39 02 c0       	push   0xc00239a4
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 50 02 c0 00 	cmp    BYTE PTR ds:0xc00250c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 7c 00 02 c0       	mov    ebx,0xc002007c
c0000097:	81 eb 78 00 02 c0    	sub    ebx,0xc0020078
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 78 00 02 c0       	mov    esi,0xc0020078
c00000a6:	a1 c4 50 02 c0       	mov    eax,ds:0xc00250c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 50 02 c0       	mov    ds:0xc00250c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 50 02 c0       	mov    eax,ds:0xc00250c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 a4 39 02 c0       	push   0xc00239a4
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 50 02 c0 01 	mov    BYTE PTR ds:0xc00250c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 50 02 c0       	push   0xc00250c8
c0000108:	68 a4 39 02 c0       	push   0xc00239a4
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 c3 52 01 00       	call   c0015570 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 08 a4 00 00       	call   c000a6cd <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 a1 52 01 00       	call   c0015570 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 ae 57 01 00       	call   c0015a9c <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 6d 5e 01 00       	call   c0016164 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 5e 02 c0 	lgdtd  ds:0xc0025ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 e5 0f 01 00       	jmp    c0011364 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	31 c0                	xor    eax,eax
c00003b5:	5b                   	pop    ebx
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 0c             	cmp    esi,0xc
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	83 eb 01             	sub    ebx,0x1
c0000499:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004d8:	83 c3 01             	add    ebx,0x1
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000504:	89 f7                	mov    edi,esi
c0000506:	83 fa 04             	cmp    edx,0x4
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 03             	and    edx,0x3
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	89 f0                	mov    eax,esi
c000051e:	5b                   	pop    ebx
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 12                	jne    c0000556 <memset+0x66>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 14                	jne    c0000560 <memset+0x70>
c000054c:	89 d1                	mov    ecx,edx
c000054e:	c1 e9 02             	shr    ecx,0x2
c0000551:	fc                   	cld    
c0000552:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000554:	eb b5                	jmp    c000050b <memset+0x1b>
c0000556:	88 06                	mov    BYTE PTR [esi],al
c0000558:	8d 7e 01             	lea    edi,[esi+0x1]
c000055b:	83 ea 01             	sub    edx,0x1
c000055e:	eb e4                	jmp    c0000544 <memset+0x54>
c0000560:	66 89 07             	mov    WORD PTR [edi],ax
c0000563:	83 ea 02             	sub    edx,0x2
c0000566:	83 c7 02             	add    edi,0x2
c0000569:	eb e1                	jmp    c000054c <memset+0x5c>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0000570 <strlen>:
c0000570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000574:	31 c0                	xor    eax,eax
c0000576:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000579:	74 15                	je     c0000590 <strlen+0x20>
c000057b:	90                   	nop
c000057c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000580:	83 c0 01             	add    eax,0x1
c0000583:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000587:	75 f7                	jne    c0000580 <strlen+0x10>
c0000589:	c3                   	ret    
c000058a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000590:	c3                   	ret    
c0000591:	eb 0d                	jmp    c00005a0 <strpbrk>
c0000593:	90                   	nop
c0000594:	90                   	nop
c0000595:	90                   	nop
c0000596:	90                   	nop
c0000597:	90                   	nop
c0000598:	90                   	nop
c0000599:	90                   	nop
c000059a:	90                   	nop
c000059b:	90                   	nop
c000059c:	90                   	nop
c000059d:	90                   	nop
c000059e:	90                   	nop
c000059f:	90                   	nop

c00005a0 <strpbrk>:
c00005a0:	57                   	push   edi
c00005a1:	56                   	push   esi
c00005a2:	53                   	push   ebx
c00005a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005ab:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005ae:	85 db                	test   ebx,ebx
c00005b0:	74 36                	je     c00005e8 <strpbrk+0x48>
c00005b2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005b5:	85 f6                	test   esi,esi
c00005b7:	74 25                	je     c00005de <strpbrk+0x3e>
c00005b9:	39 de                	cmp    esi,ebx
c00005bb:	74 2d                	je     c00005ea <strpbrk+0x4a>
c00005bd:	89 fa                	mov    edx,edi
c00005bf:	eb 13                	jmp    c00005d4 <strpbrk+0x34>
c00005c1:	eb 0d                	jmp    c00005d0 <strpbrk+0x30>
c00005c3:	90                   	nop
c00005c4:	90                   	nop
c00005c5:	90                   	nop
c00005c6:	90                   	nop
c00005c7:	90                   	nop
c00005c8:	90                   	nop
c00005c9:	90                   	nop
c00005ca:	90                   	nop
c00005cb:	90                   	nop
c00005cc:	90                   	nop
c00005cd:	90                   	nop
c00005ce:	90                   	nop
c00005cf:	90                   	nop
c00005d0:	39 d9                	cmp    ecx,ebx
c00005d2:	74 16                	je     c00005ea <strpbrk+0x4a>
c00005d4:	83 c2 01             	add    edx,0x1
c00005d7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005da:	85 c9                	test   ecx,ecx
c00005dc:	75 f2                	jne    c00005d0 <strpbrk+0x30>
c00005de:	83 c0 01             	add    eax,0x1
c00005e1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005e4:	85 db                	test   ebx,ebx
c00005e6:	75 cd                	jne    c00005b5 <strpbrk+0x15>
c00005e8:	31 c0                	xor    eax,eax
c00005ea:	5b                   	pop    ebx
c00005eb:	5e                   	pop    esi
c00005ec:	5f                   	pop    edi
c00005ed:	c3                   	ret    
c00005ee:	66 90                	xchg   ax,ax

c00005f0 <strtok>:
c00005f0:	56                   	push   esi
c00005f1:	53                   	push   ebx
c00005f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005fa:	85 db                	test   ebx,ebx
c00005fc:	75 09                	jne    c0000607 <strtok+0x17>
c00005fe:	eb 30                	jmp    c0000630 <strtok+0x40>
c0000600:	83 c3 01             	add    ebx,0x1
c0000603:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000607:	56                   	push   esi
c0000608:	53                   	push   ebx
c0000609:	e8 92 ff ff ff       	call   c00005a0 <strpbrk>
c000060e:	5a                   	pop    edx
c000060f:	a3 e0 50 02 c0       	mov    ds:0xc00250e0,eax
c0000614:	59                   	pop    ecx
c0000615:	39 d8                	cmp    eax,ebx
c0000617:	74 e7                	je     c0000600 <strtok+0x10>
c0000619:	85 c0                	test   eax,eax
c000061b:	74 1d                	je     c000063a <strtok+0x4a>
c000061d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000620:	8d 50 01             	lea    edx,[eax+0x1]
c0000623:	89 d8                	mov    eax,ebx
c0000625:	89 15 e0 50 02 c0    	mov    DWORD PTR ds:0xc00250e0,edx
c000062b:	5b                   	pop    ebx
c000062c:	5e                   	pop    esi
c000062d:	c3                   	ret    
c000062e:	66 90                	xchg   ax,ax
c0000630:	8b 1d e0 50 02 c0    	mov    ebx,DWORD PTR ds:0xc00250e0
c0000636:	85 db                	test   ebx,ebx
c0000638:	75 cd                	jne    c0000607 <strtok+0x17>
c000063a:	31 c0                	xor    eax,eax
c000063c:	5b                   	pop    ebx
c000063d:	5e                   	pop    esi
c000063e:	c3                   	ret    
c000063f:	90                   	nop

c0000640 <strcpy>:
c0000640:	53                   	push   ebx
c0000641:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000645:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000649:	89 c3                	mov    ebx,eax
c000064b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000064d:	84 d2                	test   dl,dl
c000064f:	74 1d                	je     c000066e <strcpy+0x2e>
c0000651:	eb 0d                	jmp    c0000660 <strcpy+0x20>
c0000653:	90                   	nop
c0000654:	90                   	nop
c0000655:	90                   	nop
c0000656:	90                   	nop
c0000657:	90                   	nop
c0000658:	90                   	nop
c0000659:	90                   	nop
c000065a:	90                   	nop
c000065b:	90                   	nop
c000065c:	90                   	nop
c000065d:	90                   	nop
c000065e:	90                   	nop
c000065f:	90                   	nop
c0000660:	88 13                	mov    BYTE PTR [ebx],dl
c0000662:	83 c1 01             	add    ecx,0x1
c0000665:	83 c3 01             	add    ebx,0x1
c0000668:	8a 11                	mov    dl,BYTE PTR [ecx]
c000066a:	84 d2                	test   dl,dl
c000066c:	75 f2                	jne    c0000660 <strcpy+0x20>
c000066e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000671:	5b                   	pop    ebx
c0000672:	c3                   	ret    
c0000673:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000679:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000680 <strncpy>:
c0000680:	57                   	push   edi
c0000681:	56                   	push   esi
c0000682:	53                   	push   ebx
c0000683:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000687:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000068b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000068f:	85 f6                	test   esi,esi
c0000691:	74 44                	je     c00006d7 <strncpy+0x57>
c0000693:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000695:	8d 46 ff             	lea    eax,[esi-0x1]
c0000698:	8d 7a 01             	lea    edi,[edx+0x1]
c000069b:	88 0a                	mov    BYTE PTR [edx],cl
c000069d:	84 c9                	test   cl,cl
c000069f:	74 3f                	je     c00006e0 <strncpy+0x60>
c00006a1:	85 c0                	test   eax,eax
c00006a3:	74 32                	je     c00006d7 <strncpy+0x57>
c00006a5:	8d 4b 02             	lea    ecx,[ebx+0x2]
c00006a8:	8d 46 fe             	lea    eax,[esi-0x2]
c00006ab:	8a 5b 01             	mov    bl,BYTE PTR [ebx+0x1]
c00006ae:	8d 7a 02             	lea    edi,[edx+0x2]
c00006b1:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006b4:	84 db                	test   bl,bl
c00006b6:	75 1b                	jne    c00006d3 <strncpy+0x53>
c00006b8:	eb 26                	jmp    c00006e0 <strncpy+0x60>
c00006ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00006c0:	83 c1 01             	add    ecx,0x1
c00006c3:	83 c7 01             	add    edi,0x1
c00006c6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006c9:	83 e8 01             	sub    eax,0x1
c00006cc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006cf:	84 db                	test   bl,bl
c00006d1:	74 0d                	je     c00006e0 <strncpy+0x60>
c00006d3:	85 c0                	test   eax,eax
c00006d5:	75 e9                	jne    c00006c0 <strncpy+0x40>
c00006d7:	5b                   	pop    ebx
c00006d8:	89 d0                	mov    eax,edx
c00006da:	5e                   	pop    esi
c00006db:	5f                   	pop    edi
c00006dc:	c3                   	ret    
c00006dd:	8d 76 00             	lea    esi,[esi+0x0]
c00006e0:	85 c0                	test   eax,eax
c00006e2:	74 f3                	je     c00006d7 <strncpy+0x57>
c00006e4:	89 c3                	mov    ebx,eax
c00006e6:	83 f8 04             	cmp    eax,0x4
c00006e9:	73 25                	jae    c0000710 <strncpy+0x90>
c00006eb:	f6 c3 02             	test   bl,0x2
c00006ee:	74 08                	je     c00006f8 <strncpy+0x78>
c00006f0:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c00006f5:	83 c7 02             	add    edi,0x2
c00006f8:	80 e3 01             	and    bl,0x1
c00006fb:	74 da                	je     c00006d7 <strncpy+0x57>
c00006fd:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0000700:	89 d0                	mov    eax,edx
c0000702:	5b                   	pop    ebx
c0000703:	5e                   	pop    esi
c0000704:	5f                   	pop    edi
c0000705:	c3                   	ret    
c0000706:	8d 76 00             	lea    esi,[esi+0x0]
c0000709:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000710:	f7 c7 01 00 00 00    	test   edi,0x1
c0000716:	75 14                	jne    c000072c <strncpy+0xac>
c0000718:	f7 c7 02 00 00 00    	test   edi,0x2
c000071e:	75 17                	jne    c0000737 <strncpy+0xb7>
c0000720:	89 d9                	mov    ecx,ebx
c0000722:	c1 e9 02             	shr    ecx,0x2
c0000725:	fc                   	cld    
c0000726:	31 c0                	xor    eax,eax
c0000728:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000072a:	eb bf                	jmp    c00006eb <strncpy+0x6b>
c000072c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000072f:	83 eb 01             	sub    ebx,0x1
c0000732:	83 c7 01             	add    edi,0x1
c0000735:	eb e1                	jmp    c0000718 <strncpy+0x98>
c0000737:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c000073c:	83 eb 02             	sub    ebx,0x2
c000073f:	83 c7 02             	add    edi,0x2
c0000742:	eb dc                	jmp    c0000720 <strncpy+0xa0>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000750 <strcmp>:
c0000750:	57                   	push   edi
c0000751:	56                   	push   esi
c0000752:	53                   	push   ebx
c0000753:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000757:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000075b:	8a 17                	mov    dl,BYTE PTR [edi]
c000075d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000760:	38 c2                	cmp    dl,al
c0000762:	75 32                	jne    c0000796 <strcmp+0x46>
c0000764:	85 c0                	test   eax,eax
c0000766:	74 28                	je     c0000790 <strcmp+0x40>
c0000768:	b8 01 00 00 00       	mov    eax,0x1
c000076d:	eb 08                	jmp    c0000777 <strcmp+0x27>
c000076f:	90                   	nop
c0000770:	83 c0 01             	add    eax,0x1
c0000773:	85 db                	test   ebx,ebx
c0000775:	74 19                	je     c0000790 <strcmp+0x40>
c0000777:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c000077b:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c000077e:	89 da                	mov    edx,ebx
c0000780:	38 d9                	cmp    cl,bl
c0000782:	74 ec                	je     c0000770 <strcmp+0x20>
c0000784:	5b                   	pop    ebx
c0000785:	0f b6 c2             	movzx  eax,dl
c0000788:	0f b6 c9             	movzx  ecx,cl
c000078b:	5e                   	pop    esi
c000078c:	29 c8                	sub    eax,ecx
c000078e:	5f                   	pop    edi
c000078f:	c3                   	ret    
c0000790:	5b                   	pop    ebx
c0000791:	31 c0                	xor    eax,eax
c0000793:	5e                   	pop    esi
c0000794:	5f                   	pop    edi
c0000795:	c3                   	ret    
c0000796:	89 c1                	mov    ecx,eax
c0000798:	eb ea                	jmp    c0000784 <strcmp+0x34>
c000079a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007a0 <strchr>:
c00007a0:	53                   	push   ebx
c00007a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007a5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007a8:	85 db                	test   ebx,ebx
c00007aa:	74 22                	je     c00007ce <strchr+0x2e>
c00007ac:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007b1:	39 d3                	cmp    ebx,edx
c00007b3:	74 1b                	je     c00007d0 <strchr+0x30>
c00007b5:	89 d1                	mov    ecx,edx
c00007b7:	eb 0b                	jmp    c00007c4 <strchr+0x24>
c00007b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007c0:	39 ca                	cmp    edx,ecx
c00007c2:	74 0c                	je     c00007d0 <strchr+0x30>
c00007c4:	83 c0 01             	add    eax,0x1
c00007c7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007ca:	85 d2                	test   edx,edx
c00007cc:	75 f2                	jne    c00007c0 <strchr+0x20>
c00007ce:	31 c0                	xor    eax,eax
c00007d0:	5b                   	pop    ebx
c00007d1:	c3                   	ret    
c00007d2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00007e0 <strncmp>:
c00007e0:	55                   	push   ebp
c00007e1:	57                   	push   edi
c00007e2:	56                   	push   esi
c00007e3:	53                   	push   ebx
c00007e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00007e8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00007f0:	85 f6                	test   esi,esi
c00007f2:	74 35                	je     c0000829 <strncmp+0x49>
c00007f4:	8a 17                	mov    dl,BYTE PTR [edi]
c00007f6:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00007f9:	89 e9                	mov    ecx,ebp
c00007fb:	38 ca                	cmp    dl,cl
c00007fd:	75 31                	jne    c0000830 <strncmp+0x50>
c00007ff:	8d 47 01             	lea    eax,[edi+0x1]
c0000802:	85 ed                	test   ebp,ebp
c0000804:	74 23                	je     c0000829 <strncmp+0x49>
c0000806:	01 f7                	add    edi,esi
c0000808:	eb 18                	jmp    c0000822 <strncmp+0x42>
c000080a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000810:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000813:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000815:	89 f2                	mov    edx,esi
c0000817:	38 d1                	cmp    cl,dl
c0000819:	75 15                	jne    c0000830 <strncmp+0x50>
c000081b:	83 c0 01             	add    eax,0x1
c000081e:	85 f6                	test   esi,esi
c0000820:	74 07                	je     c0000829 <strncmp+0x49>
c0000822:	83 c3 01             	add    ebx,0x1
c0000825:	39 c7                	cmp    edi,eax
c0000827:	75 e7                	jne    c0000810 <strncmp+0x30>
c0000829:	5b                   	pop    ebx
c000082a:	31 c0                	xor    eax,eax
c000082c:	5e                   	pop    esi
c000082d:	5f                   	pop    edi
c000082e:	5d                   	pop    ebp
c000082f:	c3                   	ret    
c0000830:	5b                   	pop    ebx
c0000831:	0f b6 c2             	movzx  eax,dl
c0000834:	5e                   	pop    esi
c0000835:	0f b6 c9             	movzx  ecx,cl
c0000838:	5f                   	pop    edi
c0000839:	29 c8                	sub    eax,ecx
c000083b:	5d                   	pop    ebp
c000083c:	c3                   	ret    
c000083d:	8d 76 00             	lea    esi,[esi+0x0]

c0000840 <strcat>:
c0000840:	56                   	push   esi
c0000841:	53                   	push   ebx
c0000842:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000846:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000084a:	89 c3                	mov    ebx,eax
c000084c:	eb 04                	jmp    c0000852 <strcat+0x12>
c000084e:	66 90                	xchg   ax,ax
c0000850:	89 d3                	mov    ebx,edx
c0000852:	8d 53 01             	lea    edx,[ebx+0x1]
c0000855:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000859:	75 f5                	jne    c0000850 <strcat+0x10>
c000085b:	31 d2                	xor    edx,edx
c000085d:	8d 76 00             	lea    esi,[esi+0x0]
c0000860:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000863:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000866:	83 c2 01             	add    edx,0x1
c0000869:	84 c9                	test   cl,cl
c000086b:	75 f3                	jne    c0000860 <strcat+0x20>
c000086d:	5b                   	pop    ebx
c000086e:	5e                   	pop    esi
c000086f:	c3                   	ret    

c0000870 <strncat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000876:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000087a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000087e:	85 f6                	test   esi,esi
c0000880:	74 32                	je     c00008b4 <strncat+0x44>
c0000882:	89 c2                	mov    edx,eax
c0000884:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000088a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000890:	83 c2 01             	add    edx,0x1
c0000893:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000897:	75 f7                	jne    c0000890 <strncat+0x20>
c0000899:	01 ce                	add    esi,ecx
c000089b:	eb 0a                	jmp    c00008a7 <strncat+0x37>
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	39 f1                	cmp    ecx,esi
c00008a2:	74 1c                	je     c00008c0 <strncat+0x50>
c00008a4:	83 c2 01             	add    edx,0x1
c00008a7:	83 c1 01             	add    ecx,0x1
c00008aa:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008ad:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008b0:	84 db                	test   bl,bl
c00008b2:	75 ec                	jne    c00008a0 <strncat+0x30>
c00008b4:	5b                   	pop    ebx
c00008b5:	5e                   	pop    esi
c00008b6:	c3                   	ret    
c00008b7:	89 f6                	mov    esi,esi
c00008b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008c0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008c3:	5b                   	pop    ebx
c00008c4:	5e                   	pop    esi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <strstr>:
c00008d0:	57                   	push   edi
c00008d1:	56                   	push   esi
c00008d2:	53                   	push   ebx
c00008d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008db:	57                   	push   edi
c00008dc:	e8 8f fc ff ff       	call   c0000570 <strlen>
c00008e1:	59                   	pop    ecx
c00008e2:	85 c0                	test   eax,eax
c00008e4:	74 3a                	je     c0000920 <strstr+0x50>
c00008e6:	89 c6                	mov    esi,eax
c00008e8:	eb 18                	jmp    c0000902 <strstr+0x32>
c00008ea:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008f0:	56                   	push   esi
c00008f1:	57                   	push   edi
c00008f2:	53                   	push   ebx
c00008f3:	e8 88 fa ff ff       	call   c0000380 <memcmp>
c00008f8:	83 c4 0c             	add    esp,0xc
c00008fb:	85 c0                	test   eax,eax
c00008fd:	74 21                	je     c0000920 <strstr+0x50>
c00008ff:	83 c3 01             	add    ebx,0x1
c0000902:	53                   	push   ebx
c0000903:	e8 68 fc ff ff       	call   c0000570 <strlen>
c0000908:	5a                   	pop    edx
c0000909:	39 f0                	cmp    eax,esi
c000090b:	73 e3                	jae    c00008f0 <strstr+0x20>
c000090d:	5b                   	pop    ebx
c000090e:	31 c0                	xor    eax,eax
c0000910:	5e                   	pop    esi
c0000911:	5f                   	pop    edi
c0000912:	c3                   	ret    
c0000913:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	89 d8                	mov    eax,ebx
c0000922:	5b                   	pop    ebx
c0000923:	5e                   	pop    esi
c0000924:	5f                   	pop    edi
c0000925:	c3                   	ret    
c0000926:	8d 76 00             	lea    esi,[esi+0x0]
c0000929:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000930 <toupper>:
c0000930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000934:	0f b6 d0             	movzx  edx,al
c0000937:	f6 82 80 00 02 c0 02 	test   BYTE PTR [edx-0x3ffdff80],0x2
c000093e:	74 03                	je     c0000943 <toupper+0x13>
c0000940:	83 e8 20             	sub    eax,0x20
c0000943:	c3                   	ret    
c0000944:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000094a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000950 <tolower>:
c0000950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000954:	0f b6 d0             	movzx  edx,al
c0000957:	f6 82 80 00 02 c0 01 	test   BYTE PTR [edx-0x3ffdff80],0x1
c000095e:	74 03                	je     c0000963 <tolower+0x13>
c0000960:	83 c0 20             	add    eax,0x20
c0000963:	c3                   	ret    
c0000964:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000096a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000970 <simple_strtoul>:
c0000970:	55                   	push   ebp
c0000971:	57                   	push   edi
c0000972:	56                   	push   esi
c0000973:	53                   	push   ebx
c0000974:	83 ec 08             	sub    esp,0x8
c0000977:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000097b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000097f:	eb 12                	jmp    c0000993 <simple_strtoul+0x23>
c0000981:	eb 0d                	jmp    c0000990 <simple_strtoul+0x20>
c0000983:	90                   	nop
c0000984:	90                   	nop
c0000985:	90                   	nop
c0000986:	90                   	nop
c0000987:	90                   	nop
c0000988:	90                   	nop
c0000989:	90                   	nop
c000098a:	90                   	nop
c000098b:	90                   	nop
c000098c:	90                   	nop
c000098d:	90                   	nop
c000098e:	90                   	nop
c000098f:	90                   	nop
c0000990:	83 c3 01             	add    ebx,0x1
c0000993:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c0000996:	f6 82 80 00 02 c0 08 	test   BYTE PTR [edx-0x3ffdff80],0x8
c000099d:	75 f1                	jne    c0000990 <simple_strtoul+0x20>
c000099f:	0f be c2             	movsx  eax,dl
c00009a2:	83 f8 09             	cmp    eax,0x9
c00009a5:	74 e9                	je     c0000990 <simple_strtoul+0x20>
c00009a7:	83 f8 2d             	cmp    eax,0x2d
c00009aa:	0f 84 60 01 00 00    	je     c0000b10 <simple_strtoul+0x1a0>
c00009b0:	83 f8 2b             	cmp    eax,0x2b
c00009b3:	0f 84 e7 00 00 00    	je     c0000aa0 <simple_strtoul+0x130>
c00009b9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009c1:	85 f6                	test   esi,esi
c00009c3:	0f 85 ea 00 00 00    	jne    c0000ab3 <simple_strtoul+0x143>
c00009c9:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c00009cc:	89 d1                	mov    ecx,edx
c00009ce:	83 fa 30             	cmp    edx,0x30
c00009d1:	0f 84 90 01 00 00    	je     c0000b67 <simple_strtoul+0x1f7>
c00009d7:	be 0a 00 00 00       	mov    esi,0xa
c00009dc:	85 d2                	test   edx,edx
c00009de:	0f 84 c5 01 00 00    	je     c0000ba9 <simple_strtoul+0x239>
c00009e4:	31 ed                	xor    ebp,ebp
c00009e6:	31 ff                	xor    edi,edi
c00009e8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009ef:	eb 3e                	jmp    c0000a2f <simple_strtoul+0xbf>
c00009f1:	eb 0d                	jmp    c0000a00 <simple_strtoul+0x90>
c00009f3:	90                   	nop
c00009f4:	90                   	nop
c00009f5:	90                   	nop
c00009f6:	90                   	nop
c00009f7:	90                   	nop
c00009f8:	90                   	nop
c00009f9:	90                   	nop
c00009fa:	90                   	nop
c00009fb:	90                   	nop
c00009fc:	90                   	nop
c00009fd:	90                   	nop
c00009fe:	90                   	nop
c00009ff:	90                   	nop
c0000a00:	83 e9 30             	sub    ecx,0x30
c0000a03:	39 f1                	cmp    ecx,esi
c0000a05:	73 59                	jae    c0000a60 <simple_strtoul+0xf0>
c0000a07:	31 d2                	xor    edx,edx
c0000a09:	89 c8                	mov    eax,ecx
c0000a0b:	f7 d0                	not    eax
c0000a0d:	f7 f6                	div    esi
c0000a0f:	39 f8                	cmp    eax,edi
c0000a11:	0f 82 d9 00 00 00    	jb     c0000af0 <simple_strtoul+0x180>
c0000a17:	0f af fe             	imul   edi,esi
c0000a1a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a21:	01 cf                	add    edi,ecx
c0000a23:	83 c3 01             	add    ebx,0x1
c0000a26:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a29:	89 d1                	mov    ecx,edx
c0000a2b:	85 d2                	test   edx,edx
c0000a2d:	74 31                	je     c0000a60 <simple_strtoul+0xf0>
c0000a2f:	0f b6 c9             	movzx  ecx,cl
c0000a32:	f6 81 80 00 02 c0 04 	test   BYTE PTR [ecx-0x3ffdff80],0x4
c0000a39:	75 c5                	jne    c0000a00 <simple_strtoul+0x90>
c0000a3b:	52                   	push   edx
c0000a3c:	e8 ef fe ff ff       	call   c0000930 <toupper>
c0000a41:	59                   	pop    ecx
c0000a42:	0f b6 d0             	movzx  edx,al
c0000a45:	f6 82 80 00 02 c0 01 	test   BYTE PTR [edx-0x3ffdff80],0x1
c0000a4c:	74 12                	je     c0000a60 <simple_strtoul+0xf0>
c0000a4e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a51:	39 f1                	cmp    ecx,esi
c0000a53:	72 b2                	jb     c0000a07 <simple_strtoul+0x97>
c0000a55:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a59:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	85 c0                	test   eax,eax
c0000a66:	74 18                	je     c0000a80 <simple_strtoul+0x110>
c0000a68:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a6b:	09 f8                	or     eax,edi
c0000a6d:	0f 85 8d 00 00 00    	jne    c0000b00 <simple_strtoul+0x190>
c0000a73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a77:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a7b:	31 ff                	xor    edi,edi
c0000a7d:	89 30                	mov    DWORD PTR [eax],esi
c0000a7f:	90                   	nop
c0000a80:	83 fd 01             	cmp    ebp,0x1
c0000a83:	75 05                	jne    c0000a8a <simple_strtoul+0x11a>
c0000a85:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a8a:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a8f:	75 02                	jne    c0000a93 <simple_strtoul+0x123>
c0000a91:	f7 df                	neg    edi
c0000a93:	83 c4 08             	add    esp,0x8
c0000a96:	89 f8                	mov    eax,edi
c0000a98:	5b                   	pop    ebx
c0000a99:	5e                   	pop    esi
c0000a9a:	5f                   	pop    edi
c0000a9b:	5d                   	pop    ebp
c0000a9c:	c3                   	ret    
c0000a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0000aa0:	83 c3 01             	add    ebx,0x1
c0000aa3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000aab:	85 f6                	test   esi,esi
c0000aad:	0f 84 16 ff ff ff    	je     c00009c9 <simple_strtoul+0x59>
c0000ab3:	8d 46 fe             	lea    eax,[esi-0x2]
c0000ab6:	83 f8 22             	cmp    eax,0x22
c0000ab9:	0f 87 8b 00 00 00    	ja     c0000b4a <simple_strtoul+0x1da>
c0000abf:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000ac1:	83 fe 08             	cmp    esi,0x8
c0000ac4:	0f 84 c8 00 00 00    	je     c0000b92 <simple_strtoul+0x222>
c0000aca:	83 fe 10             	cmp    esi,0x10
c0000acd:	0f 85 0d 01 00 00    	jne    c0000be0 <simple_strtoul+0x270>
c0000ad3:	0f be d1             	movsx  edx,cl
c0000ad6:	83 fa 30             	cmp    edx,0x30
c0000ad9:	74 45                	je     c0000b20 <simple_strtoul+0x1b0>
c0000adb:	be 10 00 00 00       	mov    esi,0x10
c0000ae0:	e9 f7 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000ae5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000ae9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000af0:	bd 01 00 00 00       	mov    ebp,0x1
c0000af5:	31 ff                	xor    edi,edi
c0000af7:	e9 27 ff ff ff       	jmp    c0000a23 <simple_strtoul+0xb3>
c0000afc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	89 18                	mov    DWORD PTR [eax],ebx
c0000b06:	e9 75 ff ff ff       	jmp    c0000a80 <simple_strtoul+0x110>
c0000b0b:	90                   	nop
c0000b0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b10:	83 c3 01             	add    ebx,0x1
c0000b13:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b1b:	e9 a1 fe ff ff       	jmp    c00009c1 <simple_strtoul+0x51>
c0000b20:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b24:	52                   	push   edx
c0000b25:	89 d1                	mov    ecx,edx
c0000b27:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b2b:	e8 20 fe ff ff       	call   c0000950 <tolower>
c0000b30:	5e                   	pop    esi
c0000b31:	83 f8 78             	cmp    eax,0x78
c0000b34:	0f 84 93 00 00 00    	je     c0000bcd <simple_strtoul+0x25d>
c0000b3a:	83 c3 01             	add    ebx,0x1
c0000b3d:	be 10 00 00 00       	mov    esi,0x10
c0000b42:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b45:	e9 92 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b4a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000b4e:	85 ff                	test   edi,edi
c0000b50:	74 69                	je     c0000bbb <simple_strtoul+0x24b>
c0000b52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b56:	85 db                	test   ebx,ebx
c0000b58:	75 5b                	jne    c0000bb5 <simple_strtoul+0x245>
c0000b5a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000b60:	31 ff                	xor    edi,edi
c0000b62:	e9 23 ff ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000b67:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b6b:	52                   	push   edx
c0000b6c:	89 d1                	mov    ecx,edx
c0000b6e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b72:	e8 d9 fd ff ff       	call   c0000950 <tolower>
c0000b77:	5d                   	pop    ebp
c0000b78:	83 f8 78             	cmp    eax,0x78
c0000b7b:	74 45                	je     c0000bc2 <simple_strtoul+0x252>
c0000b7d:	83 c3 01             	add    ebx,0x1
c0000b80:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b83:	83 fa 30             	cmp    edx,0x30
c0000b86:	74 16                	je     c0000b9e <simple_strtoul+0x22e>
c0000b88:	be 08 00 00 00       	mov    esi,0x8
c0000b8d:	e9 4a fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b92:	0f be d1             	movsx  edx,cl
c0000b95:	83 fa 30             	cmp    edx,0x30
c0000b98:	0f 85 3e fe ff ff    	jne    c00009dc <simple_strtoul+0x6c>
c0000b9e:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000ba2:	83 c3 01             	add    ebx,0x1
c0000ba5:	89 d1                	mov    ecx,edx
c0000ba7:	eb df                	jmp    c0000b88 <simple_strtoul+0x218>
c0000ba9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bad:	85 d2                	test   edx,edx
c0000baf:	74 0a                	je     c0000bbb <simple_strtoul+0x24b>
c0000bb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bb5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000bb9:	89 30                	mov    DWORD PTR [eax],esi
c0000bbb:	31 ff                	xor    edi,edi
c0000bbd:	e9 c8 fe ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000bc2:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bc5:	83 c3 02             	add    ebx,0x2
c0000bc8:	e9 06 ff ff ff       	jmp    c0000ad3 <simple_strtoul+0x163>
c0000bcd:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000bd1:	be 10 00 00 00       	mov    esi,0x10
c0000bd6:	89 d1                	mov    ecx,edx
c0000bd8:	83 c3 02             	add    ebx,0x2
c0000bdb:	e9 fc fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000be0:	0f be d1             	movsx  edx,cl
c0000be3:	e9 f4 fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>

c0000be8 <largebin_index>:
c0000be8:	89 c2                	mov    edx,eax
c0000bea:	c1 ea 08             	shr    edx,0x8
c0000bed:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000bf3:	77 10                	ja     c0000c05 <largebin_index+0x1d>
c0000bf5:	0f bd d2             	bsr    edx,edx
c0000bf8:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000bfb:	d3 e8                	shr    eax,cl
c0000bfd:	83 e0 03             	and    eax,0x3
c0000c00:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c04:	c3                   	ret    
c0000c05:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c0a:	c3                   	ret    

c0000c0b <malloc_init_state>:
c0000c0b:	53                   	push   ebx
c0000c0c:	8d 50 34             	lea    edx,[eax+0x34]
c0000c0f:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c15:	89 d1                	mov    ecx,edx
c0000c17:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c1a:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c1d:	83 c2 08             	add    edx,0x8
c0000c20:	39 da                	cmp    edx,ebx
c0000c22:	75 f3                	jne    c0000c17 <malloc_init_state+0xc>
c0000c24:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c26:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c30:	83 e2 03             	and    edx,0x3
c0000c33:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c3d:	83 ca 48             	or     edx,0x48
c0000c40:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c4a:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c54:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c5b:	89 10                	mov    DWORD PTR [eax],edx
c0000c5d:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c60:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c6a:	5b                   	pop    ebx
c0000c6b:	c3                   	ret    

c0000c6c <malloc_consolidate>:
c0000c6c:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c6e:	85 d2                	test   edx,edx
c0000c70:	0f 84 d8 00 00 00    	je     c0000d4e <malloc_consolidate+0xe2>
c0000c76:	55                   	push   ebp
c0000c77:	83 e2 fd             	and    edx,0xfffffffd
c0000c7a:	57                   	push   edi
c0000c7b:	89 c5                	mov    ebp,eax
c0000c7d:	56                   	push   esi
c0000c7e:	8d 78 34             	lea    edi,[eax+0x34]
c0000c81:	53                   	push   ebx
c0000c82:	83 ec 10             	sub    esp,0x10
c0000c85:	89 10                	mov    DWORD PTR [eax],edx
c0000c87:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c8b:	c1 ea 03             	shr    edx,0x3
c0000c8e:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c92:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c96:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c99:	85 d2                	test   edx,edx
c0000c9b:	0f 84 98 00 00 00    	je     c0000d39 <malloc_consolidate+0xcd>
c0000ca1:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ca8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cab:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cb2:	89 f9                	mov    ecx,edi
c0000cb4:	83 e1 fe             	and    ecx,0xfffffffe
c0000cb7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cba:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cbd:	83 e3 fc             	and    ebx,0xfffffffc
c0000cc0:	83 e7 01             	and    edi,0x1
c0000cc3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cc6:	75 14                	jne    c0000cdc <malloc_consolidate+0x70>
c0000cc8:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cca:	29 fa                	sub    edx,edi
c0000ccc:	01 f9                	add    ecx,edi
c0000cce:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000cd1:	89 fb                	mov    ebx,edi
c0000cd3:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000cd6:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000cd9:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000cdc:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000cdf:	74 40                	je     c0000d21 <malloc_consolidate+0xb5>
c0000ce1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000ce4:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000ce7:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000ceb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000cee:	83 e7 01             	and    edi,0x1
c0000cf1:	75 0e                	jne    c0000d01 <malloc_consolidate+0x95>
c0000cf3:	01 d9                	add    ecx,ebx
c0000cf5:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000cf8:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000cfb:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000cfe:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d01:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d04:	89 ce                	mov    esi,ecx
c0000d06:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d09:	83 ce 01             	or     esi,0x1
c0000d0c:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d0f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d12:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d15:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d19:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d1c:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d1f:	eb 0c                	jmp    c0000d2d <malloc_consolidate+0xc1>
c0000d21:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d24:	83 c9 01             	or     ecx,0x1
c0000d27:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d2a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d2d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d31:	85 d2                	test   edx,edx
c0000d33:	0f 85 6f ff ff ff    	jne    c0000ca8 <malloc_consolidate+0x3c>
c0000d39:	83 c5 04             	add    ebp,0x4
c0000d3c:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d40:	0f 85 50 ff ff ff    	jne    c0000c96 <malloc_consolidate+0x2a>
c0000d46:	83 c4 10             	add    esp,0x10
c0000d49:	5b                   	pop    ebx
c0000d4a:	5e                   	pop    esi
c0000d4b:	5f                   	pop    edi
c0000d4c:	5d                   	pop    ebp
c0000d4d:	c3                   	ret    
c0000d4e:	e9 b8 fe ff ff       	jmp    c0000c0b <malloc_init_state>

c0000d53 <dlfree>:
c0000d53:	57                   	push   edi
c0000d54:	56                   	push   esi
c0000d55:	53                   	push   ebx
c0000d56:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d5a:	85 db                	test   ebx,ebx
c0000d5c:	0f 84 e2 00 00 00    	je     c0000e44 <dlfree+0xf1>
c0000d62:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000d65:	8b 0d 00 51 02 c0    	mov    ecx,DWORD PTR ds:0xc0025100
c0000d6b:	89 f0                	mov    eax,esi
c0000d6d:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000d70:	83 e0 fc             	and    eax,0xfffffffc
c0000d73:	39 c1                	cmp    ecx,eax
c0000d75:	72 24                	jb     c0000d9b <dlfree+0x48>
c0000d77:	83 c9 03             	or     ecx,0x3
c0000d7a:	c1 e8 03             	shr    eax,0x3
c0000d7d:	89 0d 00 51 02 c0    	mov    DWORD PTR ds:0xc0025100,ecx
c0000d83:	83 e8 02             	sub    eax,0x2
c0000d86:	8b 0c 85 04 51 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdaefc]
c0000d8d:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000d8f:	89 14 85 04 51 02 c0 	mov    DWORD PTR [eax*4-0x3ffdaefc],edx
c0000d96:	e9 a9 00 00 00       	jmp    c0000e44 <dlfree+0xf1>
c0000d9b:	83 e6 02             	and    esi,0x2
c0000d9e:	0f 85 a0 00 00 00    	jne    c0000e44 <dlfree+0xf1>
c0000da4:	83 c9 01             	or     ecx,0x1
c0000da7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000daa:	89 0d 00 51 02 c0    	mov    DWORD PTR ds:0xc0025100,ecx
c0000db0:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000db3:	83 e1 fc             	and    ecx,0xfffffffc
c0000db6:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dba:	75 13                	jne    c0000dcf <dlfree+0x7c>
c0000dbc:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000dbf:	29 da                	sub    edx,ebx
c0000dc1:	01 d8                	add    eax,ebx
c0000dc3:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000dc6:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000dc9:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dcc:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000dcf:	39 35 2c 51 02 c0    	cmp    DWORD PTR ds:0xc002512c,esi
c0000dd5:	74 40                	je     c0000e17 <dlfree+0xc4>
c0000dd7:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000ddb:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000dde:	80 e3 01             	and    bl,0x1
c0000de1:	75 0e                	jne    c0000df1 <dlfree+0x9e>
c0000de3:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000de6:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000de9:	01 c8                	add    eax,ecx
c0000deb:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dee:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000df1:	8b 0d 3c 51 02 c0    	mov    ecx,DWORD PTR ds:0xc002513c
c0000df7:	c7 42 0c 34 51 02 c0 	mov    DWORD PTR [edx+0xc],0xc0025134
c0000dfe:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e01:	89 15 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,edx
c0000e07:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e0a:	89 c1                	mov    ecx,eax
c0000e0c:	83 c9 01             	or     ecx,0x1
c0000e0f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e12:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e15:	eb 10                	jmp    c0000e27 <dlfree+0xd4>
c0000e17:	01 c8                	add    eax,ecx
c0000e19:	89 c1                	mov    ecx,eax
c0000e1b:	83 c9 01             	or     ecx,0x1
c0000e1e:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e21:	89 15 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,edx
c0000e27:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e2c:	76 16                	jbe    c0000e44 <dlfree+0xf1>
c0000e2e:	f6 05 00 51 02 c0 02 	test   BYTE PTR ds:0xc0025100,0x2
c0000e35:	74 0d                	je     c0000e44 <dlfree+0xf1>
c0000e37:	5b                   	pop    ebx
c0000e38:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0000e3d:	5e                   	pop    esi
c0000e3e:	5f                   	pop    edi
c0000e3f:	e9 28 fe ff ff       	jmp    c0000c6c <malloc_consolidate>
c0000e44:	5b                   	pop    ebx
c0000e45:	5e                   	pop    esi
c0000e46:	5f                   	pop    edi
c0000e47:	c3                   	ret    

c0000e48 <sYSMALLOc>:
c0000e48:	55                   	push   ebp
c0000e49:	57                   	push   edi
c0000e4a:	56                   	push   esi
c0000e4b:	53                   	push   ebx
c0000e4c:	89 d3                	mov    ebx,edx
c0000e4e:	83 ec 2c             	sub    esp,0x2c
c0000e51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e55:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e5b:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e5e:	8d 42 ff             	lea    eax,[edx-0x1]
c0000e61:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000e65:	74 1f                	je     c0000e86 <sYSMALLOc+0x3e>
c0000e67:	89 d8                	mov    eax,ebx
c0000e69:	e8 fe fd ff ff       	call   c0000c6c <malloc_consolidate>
c0000e6e:	83 ec 0c             	sub    esp,0xc
c0000e71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000e75:	83 e8 07             	sub    eax,0x7
c0000e78:	50                   	push   eax
c0000e79:	e8 2d 02 00 00       	call   c00010ab <dlmalloc>
c0000e7e:	83 c4 10             	add    esp,0x10
c0000e81:	e9 1d 02 00 00       	jmp    c00010a3 <sYSMALLOc+0x25b>
c0000e86:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000e89:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000e8f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000e92:	83 e0 fc             	and    eax,0xfffffffc
c0000e95:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e9d:	83 c0 10             	add    eax,0x10
c0000ea0:	01 c1                	add    ecx,eax
c0000ea2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0000ea6:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000ead:	74 04                	je     c0000eb3 <sYSMALLOc+0x6b>
c0000eaf:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000eb3:	f7 da                	neg    edx
c0000eb5:	03 4c 24 14          	add    ecx,DWORD PTR [esp+0x14]
c0000eb9:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0000ebd:	21 d1                	and    ecx,edx
c0000ebf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000ec3:	7f 07                	jg     c0000ecc <sYSMALLOc+0x84>
c0000ec5:	31 c0                	xor    eax,eax
c0000ec7:	e9 d7 01 00 00       	jmp    c00010a3 <sYSMALLOc+0x25b>
c0000ecc:	83 ec 0c             	sub    esp,0xc
c0000ecf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000ed3:	e8 b0 6a 00 00       	call   c0007988 <sbrk>
c0000ed8:	83 c4 10             	add    esp,0x10
c0000edb:	89 c6                	mov    esi,eax
c0000edd:	83 f8 ff             	cmp    eax,0xffffffff
c0000ee0:	74 e3                	je     c0000ec5 <sYSMALLOc+0x7d>
c0000ee2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000ee6:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000ee9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000eed:	03 83 68 03 00 00    	add    eax,DWORD PTR [ebx+0x368]
c0000ef3:	39 f1                	cmp    ecx,esi
c0000ef5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ef9:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000eff:	75 13                	jne    c0000f14 <sYSMALLOc+0xcc>
c0000f01:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f05:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f09:	83 c8 01             	or     eax,0x1
c0000f0c:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f0f:	e9 37 01 00 00       	jmp    c000104b <sYSMALLOc+0x203>
c0000f14:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f1a:	89 d5                	mov    ebp,edx
c0000f1c:	83 e5 01             	and    ebp,0x1
c0000f1f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f24:	0f 95 c0             	setne  al
c0000f27:	21 e8                	and    eax,ebp
c0000f29:	39 f1                	cmp    ecx,esi
c0000f2b:	76 12                	jbe    c0000f3f <sYSMALLOc+0xf7>
c0000f2d:	85 c0                	test   eax,eax
c0000f2f:	74 0e                	je     c0000f3f <sYSMALLOc+0xf7>
c0000f31:	83 e2 fe             	and    edx,0xfffffffe
c0000f34:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f3a:	e9 82 00 00 00       	jmp    c0000fc1 <sYSMALLOc+0x179>
c0000f3f:	85 ed                	test   ebp,ebp
c0000f41:	74 7e                	je     c0000fc1 <sYSMALLOc+0x179>
c0000f43:	85 c0                	test   eax,eax
c0000f45:	74 0e                	je     c0000f55 <sYSMALLOc+0x10d>
c0000f47:	89 f0                	mov    eax,esi
c0000f49:	29 c8                	sub    eax,ecx
c0000f4b:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0000f4f:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f55:	89 f2                	mov    edx,esi
c0000f57:	83 e2 07             	and    edx,0x7
c0000f5a:	74 0c                	je     c0000f68 <sYSMALLOc+0x120>
c0000f5c:	b8 08 00 00 00       	mov    eax,0x8
c0000f61:	29 d0                	sub    eax,edx
c0000f63:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000f66:	eb 04                	jmp    c0000f6c <sYSMALLOc+0x124>
c0000f68:	89 f5                	mov    ebp,esi
c0000f6a:	31 c0                	xor    eax,eax
c0000f6c:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f70:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f74:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0000f78:	01 c1                	add    ecx,eax
c0000f7a:	83 ec 0c             	sub    esp,0xc
c0000f7d:	01 f1                	add    ecx,esi
c0000f7f:	01 ca                	add    edx,ecx
c0000f81:	29 c8                	sub    eax,ecx
c0000f83:	23 54 24 24          	and    edx,DWORD PTR [esp+0x24]
c0000f87:	01 c2                	add    edx,eax
c0000f89:	52                   	push   edx
c0000f8a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000f8e:	e8 f5 69 00 00       	call   c0007988 <sbrk>
c0000f93:	83 c4 10             	add    esp,0x10
c0000f96:	83 f8 ff             	cmp    eax,0xffffffff
c0000f99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f9d:	75 0f                	jne    c0000fae <sYSMALLOc+0x166>
c0000f9f:	83 ec 0c             	sub    esp,0xc
c0000fa2:	6a 00                	push   0x0
c0000fa4:	e8 df 69 00 00       	call   c0007988 <sbrk>
c0000fa9:	83 c4 10             	add    esp,0x10
c0000fac:	eb 30                	jmp    c0000fde <sYSMALLOc+0x196>
c0000fae:	39 c6                	cmp    esi,eax
c0000fb0:	76 33                	jbe    c0000fe5 <sYSMALLOc+0x19d>
c0000fb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000fb6:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000fbd:	01 f0                	add    eax,esi
c0000fbf:	eb 1d                	jmp    c0000fde <sYSMALLOc+0x196>
c0000fc1:	83 ec 0c             	sub    esp,0xc
c0000fc4:	89 f5                	mov    ebp,esi
c0000fc6:	6a 00                	push   0x0
c0000fc8:	e8 bb 69 00 00       	call   c0007988 <sbrk>
c0000fcd:	89 c2                	mov    edx,eax
c0000fcf:	29 f2                	sub    edx,esi
c0000fd1:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000fd5:	83 c4 10             	add    esp,0x10
c0000fd8:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000fde:	31 d2                	xor    edx,edx
c0000fe0:	83 f8 ff             	cmp    eax,0xffffffff
c0000fe3:	74 66                	je     c000104b <sYSMALLOc+0x203>
c0000fe5:	29 e8                	sub    eax,ebp
c0000fe7:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000fea:	01 d0                	add    eax,edx
c0000fec:	83 c8 01             	or     eax,0x1
c0000fef:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000ff2:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000ff8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000ffd:	74 4c                	je     c000104b <sYSMALLOc+0x203>
c0000fff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001003:	83 e8 0c             	sub    eax,0xc
c0001006:	83 e0 f8             	and    eax,0xfffffff8
c0001009:	89 c2                	mov    edx,eax
c000100b:	83 ca 01             	or     edx,0x1
c000100e:	83 f8 0f             	cmp    eax,0xf
c0001011:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001014:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c000101c:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001024:	76 25                	jbe    c000104b <sYSMALLOc+0x203>
c0001026:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c000102c:	83 ec 0c             	sub    esp,0xc
c000102f:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0001039:	83 c7 08             	add    edi,0x8
c000103c:	57                   	push   edi
c000103d:	e8 11 fd ff ff       	call   c0000d53 <dlfree>
c0001042:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0001048:	83 c4 10             	add    esp,0x10
c000104b:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001051:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001057:	73 06                	jae    c000105f <sYSMALLOc+0x217>
c0001059:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c000105f:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0001065:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c000106b:	73 06                	jae    c0001073 <sYSMALLOc+0x22b>
c000106d:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0001073:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0001076:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001079:	83 e2 fc             	and    edx,0xfffffffc
c000107c:	3b 54 24 1c          	cmp    edx,DWORD PTR [esp+0x1c]
c0001080:	0f 82 3f fe ff ff    	jb     c0000ec5 <sYSMALLOc+0x7d>
c0001086:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000108a:	8d 0c 38             	lea    ecx,[eax+edi*1]
c000108d:	29 fa                	sub    edx,edi
c000108f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001092:	83 ca 01             	or     edx,0x1
c0001095:	89 fb                	mov    ebx,edi
c0001097:	83 c0 08             	add    eax,0x8
c000109a:	83 cb 01             	or     ebx,0x1
c000109d:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010a0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010a3:	83 c4 2c             	add    esp,0x2c
c00010a6:	5b                   	pop    ebx
c00010a7:	5e                   	pop    esi
c00010a8:	5f                   	pop    edi
c00010a9:	5d                   	pop    ebp
c00010aa:	c3                   	ret    

c00010ab <dlmalloc>:
c00010ab:	55                   	push   ebp
c00010ac:	57                   	push   edi
c00010ad:	56                   	push   esi
c00010ae:	53                   	push   ebx
c00010af:	83 ec 1c             	sub    esp,0x1c
c00010b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010b6:	83 f8 df             	cmp    eax,0xffffffdf
c00010b9:	0f 87 70 03 00 00    	ja     c000142f <dlmalloc+0x384>
c00010bf:	83 c0 0b             	add    eax,0xb
c00010c2:	be 10 00 00 00       	mov    esi,0x10
c00010c7:	83 f8 0f             	cmp    eax,0xf
c00010ca:	76 05                	jbe    c00010d1 <dlmalloc+0x26>
c00010cc:	83 e0 f8             	and    eax,0xfffffff8
c00010cf:	89 c6                	mov    esi,eax
c00010d1:	8b 3d 00 51 02 c0    	mov    edi,DWORD PTR ds:0xc0025100
c00010d7:	f7 c7 01 00 00 00    	test   edi,0x1
c00010dd:	75 17                	jne    c00010f6 <dlmalloc+0x4b>
c00010df:	85 ff                	test   edi,edi
c00010e1:	0f 85 05 03 00 00    	jne    c00013ec <dlmalloc+0x341>
c00010e7:	b8 00 51 02 c0       	mov    eax,0xc0025100
c00010ec:	e8 7b fb ff ff       	call   c0000c6c <malloc_consolidate>
c00010f1:	e9 f6 02 00 00       	jmp    c00013ec <dlmalloc+0x341>
c00010f6:	39 f7                	cmp    edi,esi
c00010f8:	72 1f                	jb     c0001119 <dlmalloc+0x6e>
c00010fa:	89 f2                	mov    edx,esi
c00010fc:	c1 ea 03             	shr    edx,0x3
c00010ff:	83 ea 02             	sub    edx,0x2
c0001102:	8b 04 95 04 51 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdaefc]
c0001109:	85 c0                	test   eax,eax
c000110b:	74 0c                	je     c0001119 <dlmalloc+0x6e>
c000110d:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001110:	89 0c 95 04 51 02 c0 	mov    DWORD PTR [edx*4-0x3ffdaefc],ecx
c0001117:	eb 30                	jmp    c0001149 <dlmalloc+0x9e>
c0001119:	89 f0                	mov    eax,esi
c000111b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001121:	77 2e                	ja     c0001151 <dlmalloc+0xa6>
c0001123:	c1 e8 03             	shr    eax,0x3
c0001126:	8d 14 c5 34 51 02 c0 	lea    edx,[eax*8-0x3ffdaecc]
c000112d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001131:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001134:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001137:	39 c3                	cmp    ebx,eax
c0001139:	74 2e                	je     c0001169 <dlmalloc+0xbe>
c000113b:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000113e:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001143:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0001146:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001149:	83 c0 08             	add    eax,0x8
c000114c:	e9 e0 02 00 00       	jmp    c0001431 <dlmalloc+0x386>
c0001151:	e8 92 fa ff ff       	call   c0000be8 <largebin_index>
c0001156:	83 e7 02             	and    edi,0x2
c0001159:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000115d:	74 0a                	je     c0001169 <dlmalloc+0xbe>
c000115f:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001164:	e8 03 fb ff ff       	call   c0000c6c <malloc_consolidate>
c0001169:	8d 46 10             	lea    eax,[esi+0x10]
c000116c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001170:	8b 1d 40 51 02 c0    	mov    ebx,DWORD PTR ds:0xc0025140
c0001176:	81 fb 34 51 02 c0    	cmp    ebx,0xc0025134
c000117c:	0f 84 13 01 00 00    	je     c0001295 <dlmalloc+0x1ea>
c0001182:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0001185:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001188:	83 e7 fc             	and    edi,0xfffffffc
c000118b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001191:	77 4c                	ja     c00011df <dlmalloc+0x134>
c0001193:	3d 34 51 02 c0       	cmp    eax,0xc0025134
c0001198:	75 45                	jne    c00011df <dlmalloc+0x134>
c000119a:	39 1d 30 51 02 c0    	cmp    DWORD PTR ds:0xc0025130,ebx
c00011a0:	75 3d                	jne    c00011df <dlmalloc+0x134>
c00011a2:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011a6:	73 37                	jae    c00011df <dlmalloc+0x134>
c00011a8:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ab:	89 fa                	mov    edx,edi
c00011ad:	a3 3c 51 02 c0       	mov    ds:0xc002513c,eax
c00011b2:	a3 40 51 02 c0       	mov    ds:0xc0025140,eax
c00011b7:	a3 30 51 02 c0       	mov    ds:0xc0025130,eax
c00011bc:	29 f2                	sub    edx,esi
c00011be:	c7 40 08 34 51 02 c0 	mov    DWORD PTR [eax+0x8],0xc0025134
c00011c5:	c7 40 0c 34 51 02 c0 	mov    DWORD PTR [eax+0xc],0xc0025134
c00011cc:	83 ce 01             	or     esi,0x1
c00011cf:	89 d1                	mov    ecx,edx
c00011d1:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c00011d4:	83 c9 01             	or     ecx,0x1
c00011d7:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00011da:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c00011dd:	eb 15                	jmp    c00011f4 <dlmalloc+0x149>
c00011df:	a3 40 51 02 c0       	mov    ds:0xc0025140,eax
c00011e4:	39 fe                	cmp    esi,edi
c00011e6:	c7 40 08 34 51 02 c0 	mov    DWORD PTR [eax+0x8],0xc0025134
c00011ed:	75 0d                	jne    c00011fc <dlmalloc+0x151>
c00011ef:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c00011f4:	8d 43 08             	lea    eax,[ebx+0x8]
c00011f7:	e9 35 02 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00011fc:	89 f8                	mov    eax,edi
c00011fe:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001204:	77 19                	ja     c000121f <dlmalloc+0x174>
c0001206:	c1 e8 03             	shr    eax,0x3
c0001209:	8d 14 00             	lea    edx,[eax+eax*1]
c000120c:	83 c2 0d             	add    edx,0xd
c000120f:	8d 2c 95 f8 50 02 c0 	lea    ebp,[edx*4-0x3ffdaf08]
c0001216:	8b 14 95 00 51 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdaf00]
c000121d:	eb 46                	jmp    c0001265 <dlmalloc+0x1ba>
c000121f:	e8 c4 f9 ff ff       	call   c0000be8 <largebin_index>
c0001224:	8d 14 00             	lea    edx,[eax+eax*1]
c0001227:	83 c2 0d             	add    edx,0xd
c000122a:	8d 0c 95 00 51 02 c0 	lea    ecx,[edx*4-0x3ffdaf00]
c0001231:	8b 14 95 00 51 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdaf00]
c0001238:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000123b:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000123f:	89 d5                	mov    ebp,edx
c0001241:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001245:	74 1e                	je     c0001265 <dlmalloc+0x1ba>
c0001247:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000124a:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c000124d:	77 12                	ja     c0001261 <dlmalloc+0x1b6>
c000124f:	83 cf 01             	or     edi,0x1
c0001252:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001255:	76 05                	jbe    c000125c <dlmalloc+0x1b1>
c0001257:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000125a:	eb f6                	jmp    c0001252 <dlmalloc+0x1a7>
c000125c:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c000125f:	eb 04                	jmp    c0001265 <dlmalloc+0x1ba>
c0001261:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001265:	89 c7                	mov    edi,eax
c0001267:	88 c1                	mov    cl,al
c0001269:	c1 ff 05             	sar    edi,0x5
c000126c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0001270:	bf 01 00 00 00       	mov    edi,0x1
c0001275:	d3 e7                	shl    edi,cl
c0001277:	89 f8                	mov    eax,edi
c0001279:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000127d:	09 04 bd 34 54 02 c0 	or     DWORD PTR [edi*4-0x3ffdabcc],eax
c0001284:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001287:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000128a:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c000128d:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001290:	e9 db fe ff ff       	jmp    c0001170 <dlmalloc+0xc5>
c0001295:	81 fe ff 00 00 00    	cmp    esi,0xff
c000129b:	76 78                	jbe    c0001315 <dlmalloc+0x26a>
c000129d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012a1:	8d 04 c5 34 51 02 c0 	lea    eax,[eax*8-0x3ffdaecc]
c00012a8:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ab:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012ae:	39 ca                	cmp    edx,ecx
c00012b0:	74 63                	je     c0001315 <dlmalloc+0x26a>
c00012b2:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012b5:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012b8:	83 e3 fc             	and    ebx,0xfffffffc
c00012bb:	39 de                	cmp    esi,ebx
c00012bd:	77 52                	ja     c0001311 <dlmalloc+0x266>
c00012bf:	89 df                	mov    edi,ebx
c00012c1:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00012c4:	29 f7                	sub    edi,esi
c00012c6:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00012c9:	01 d3                	add    ebx,edx
c00012cb:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c00012ce:	83 ff 0f             	cmp    edi,0xf
c00012d1:	8d 42 08             	lea    eax,[edx+0x8]
c00012d4:	77 09                	ja     c00012df <dlmalloc+0x234>
c00012d6:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c00012da:	e9 52 01 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00012df:	8d 0c 32             	lea    ecx,[edx+esi*1]
c00012e2:	83 ce 01             	or     esi,0x1
c00012e5:	89 0d 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,ecx
c00012eb:	89 0d 40 51 02 c0    	mov    DWORD PTR ds:0xc0025140,ecx
c00012f1:	c7 41 08 34 51 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0025134
c00012f8:	c7 41 0c 34 51 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0025134
c00012ff:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001302:	89 fa                	mov    edx,edi
c0001304:	83 ca 01             	or     edx,0x1
c0001307:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000130a:	89 3b                	mov    DWORD PTR [ebx],edi
c000130c:	e9 20 01 00 00       	jmp    c0001431 <dlmalloc+0x386>
c0001311:	89 c2                	mov    edx,eax
c0001313:	eb 99                	jmp    c00012ae <dlmalloc+0x203>
c0001315:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001319:	b8 01 00 00 00       	mov    eax,0x1
c000131e:	41                   	inc    ecx
c000131f:	89 cb                	mov    ebx,ecx
c0001321:	8d 14 cd 2c 51 02 c0 	lea    edx,[ecx*8-0x3ffdaed4]
c0001328:	c1 eb 05             	shr    ebx,0x5
c000132b:	d3 e0                	shl    eax,cl
c000132d:	8b 3c 9d 34 54 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdabcc]
c0001334:	39 f8                	cmp    eax,edi
c0001336:	77 04                	ja     c000133c <dlmalloc+0x291>
c0001338:	85 c0                	test   eax,eax
c000133a:	75 26                	jne    c0001362 <dlmalloc+0x2b7>
c000133c:	43                   	inc    ebx
c000133d:	83 fb 02             	cmp    ebx,0x2
c0001340:	0f 87 a6 00 00 00    	ja     c00013ec <dlmalloc+0x341>
c0001346:	8b 3c 9d 34 54 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdabcc]
c000134d:	85 ff                	test   edi,edi
c000134f:	74 eb                	je     c000133c <dlmalloc+0x291>
c0001351:	89 d8                	mov    eax,ebx
c0001353:	c1 e0 06             	shl    eax,0x6
c0001356:	8d 14 85 2c 51 02 c0 	lea    edx,[eax*4-0x3ffdaed4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	85 f8                	test   eax,edi
c0001364:	75 07                	jne    c000136d <dlmalloc+0x2c2>
c0001366:	83 c2 08             	add    edx,0x8
c0001369:	01 c0                	add    eax,eax
c000136b:	eb f5                	jmp    c0001362 <dlmalloc+0x2b7>
c000136d:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0001370:	39 ca                	cmp    edx,ecx
c0001372:	75 14                	jne    c0001388 <dlmalloc+0x2dd>
c0001374:	89 c1                	mov    ecx,eax
c0001376:	83 c2 08             	add    edx,0x8
c0001379:	f7 d1                	not    ecx
c000137b:	01 c0                	add    eax,eax
c000137d:	21 cf                	and    edi,ecx
c000137f:	89 3c 9d 34 54 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdabcc],edi
c0001386:	eb ac                	jmp    c0001334 <dlmalloc+0x289>
c0001388:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000138b:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000138e:	83 e0 fc             	and    eax,0xfffffffc
c0001391:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001394:	89 c3                	mov    ebx,eax
c0001396:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001399:	29 f3                	sub    ebx,esi
c000139b:	8d 14 01             	lea    edx,[ecx+eax*1]
c000139e:	83 fb 0f             	cmp    ebx,0xf
c00013a1:	8d 41 08             	lea    eax,[ecx+0x8]
c00013a4:	77 09                	ja     c00013af <dlmalloc+0x304>
c00013a6:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013aa:	e9 82 00 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00013af:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013b2:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013b8:	89 3d 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,edi
c00013be:	89 3d 40 51 02 c0    	mov    DWORD PTR ds:0xc0025140,edi
c00013c4:	c7 47 08 34 51 02 c0 	mov    DWORD PTR [edi+0x8],0xc0025134
c00013cb:	c7 47 0c 34 51 02 c0 	mov    DWORD PTR [edi+0xc],0xc0025134
c00013d2:	77 06                	ja     c00013da <dlmalloc+0x32f>
c00013d4:	89 3d 30 51 02 c0    	mov    DWORD PTR ds:0xc0025130,edi
c00013da:	83 ce 01             	or     esi,0x1
c00013dd:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c00013e0:	89 d9                	mov    ecx,ebx
c00013e2:	83 c9 01             	or     ecx,0x1
c00013e5:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c00013e8:	89 1a                	mov    DWORD PTR [edx],ebx
c00013ea:	eb 45                	jmp    c0001431 <dlmalloc+0x386>
c00013ec:	a1 2c 51 02 c0       	mov    eax,ds:0xc002512c
c00013f1:	8d 4e 10             	lea    ecx,[esi+0x10]
c00013f4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00013f7:	83 e2 fc             	and    edx,0xfffffffc
c00013fa:	39 d1                	cmp    ecx,edx
c00013fc:	77 1e                	ja     c000141c <dlmalloc+0x371>
c00013fe:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001401:	89 f3                	mov    ebx,esi
c0001403:	89 0d 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,ecx
c0001409:	83 cb 01             	or     ebx,0x1
c000140c:	29 f2                	sub    edx,esi
c000140e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001411:	83 ca 01             	or     edx,0x1
c0001414:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001417:	e9 2d fd ff ff       	jmp    c0001149 <dlmalloc+0x9e>
c000141c:	83 c4 1c             	add    esp,0x1c
c000141f:	89 f0                	mov    eax,esi
c0001421:	5b                   	pop    ebx
c0001422:	ba 00 51 02 c0       	mov    edx,0xc0025100
c0001427:	5e                   	pop    esi
c0001428:	5f                   	pop    edi
c0001429:	5d                   	pop    ebp
c000142a:	e9 19 fa ff ff       	jmp    c0000e48 <sYSMALLOc>
c000142f:	31 c0                	xor    eax,eax
c0001431:	83 c4 1c             	add    esp,0x1c
c0001434:	5b                   	pop    ebx
c0001435:	5e                   	pop    esi
c0001436:	5f                   	pop    edi
c0001437:	5d                   	pop    ebp
c0001438:	c3                   	ret    

c0001439 <iALLOc>:
c0001439:	55                   	push   ebp
c000143a:	89 c5                	mov    ebp,eax
c000143c:	57                   	push   edi
c000143d:	56                   	push   esi
c000143e:	53                   	push   ebx
c000143f:	83 ec 2c             	sub    esp,0x2c
c0001442:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001446:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000144a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000144e:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c0001455:	75 12                	jne    c0001469 <iALLOc+0x30>
c0001457:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000145b:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001460:	e8 07 f8 ff ff       	call   c0000c6c <malloc_consolidate>
c0001465:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001469:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000146e:	74 12                	je     c0001482 <iALLOc+0x49>
c0001470:	85 ed                	test   ebp,ebp
c0001472:	0f 84 64 01 00 00    	je     c00015dc <iALLOc+0x1a3>
c0001478:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0001480:	eb 33                	jmp    c00014b5 <iALLOc+0x7c>
c0001482:	85 ed                	test   ebp,ebp
c0001484:	75 14                	jne    c000149a <iALLOc+0x61>
c0001486:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000148e:	83 c4 2c             	add    esp,0x2c
c0001491:	5b                   	pop    ebx
c0001492:	5e                   	pop    esi
c0001493:	5f                   	pop    edi
c0001494:	5d                   	pop    ebp
c0001495:	e9 11 fc ff ff       	jmp    c00010ab <dlmalloc>
c000149a:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014a1:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014a9:	83 f8 0f             	cmp    eax,0xf
c00014ac:	76 07                	jbe    c00014b5 <iALLOc+0x7c>
c00014ae:	83 e0 f8             	and    eax,0xfffffff8
c00014b1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014b5:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014ba:	75 09                	jne    c00014c5 <iALLOc+0x8c>
c00014bc:	89 d0                	mov    eax,edx
c00014be:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00014c1:	31 f6                	xor    esi,esi
c00014c3:	eb 3b                	jmp    c0001500 <iALLOc+0xc7>
c00014c5:	8b 02                	mov    eax,DWORD PTR [edx]
c00014c7:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c00014cf:	83 c0 0b             	add    eax,0xb
c00014d2:	83 f8 0f             	cmp    eax,0xf
c00014d5:	76 07                	jbe    c00014de <iALLOc+0xa5>
c00014d7:	83 e0 f8             	and    eax,0xfffffff8
c00014da:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00014de:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00014e2:	0f af f5             	imul   esi,ebp
c00014e5:	eb 25                	jmp    c000150c <iALLOc+0xd3>
c00014e7:	8b 18                	mov    ebx,DWORD PTR [eax]
c00014e9:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c00014ec:	bb 10 00 00 00       	mov    ebx,0x10
c00014f1:	83 f9 0f             	cmp    ecx,0xf
c00014f4:	76 05                	jbe    c00014fb <iALLOc+0xc2>
c00014f6:	83 e1 f8             	and    ecx,0xfffffff8
c00014f9:	89 cb                	mov    ebx,ecx
c00014fb:	01 de                	add    esi,ebx
c00014fd:	83 c0 04             	add    eax,0x4
c0001500:	39 c7                	cmp    edi,eax
c0001502:	75 e3                	jne    c00014e7 <iALLOc+0xae>
c0001504:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000150c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001510:	8b 1d 54 54 02 c0    	mov    ebx,DWORD PTR ds:0xc0025454
c0001516:	83 ec 0c             	sub    esp,0xc
c0001519:	c7 05 54 54 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025454,0x0
c0001523:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001527:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000152b:	50                   	push   eax
c000152c:	e8 7a fb ff ff       	call   c00010ab <dlmalloc>
c0001531:	83 c4 10             	add    esp,0x10
c0001534:	89 1d 54 54 02 c0    	mov    DWORD PTR ds:0xc0025454,ebx
c000153a:	85 c0                	test   eax,eax
c000153c:	0f 84 92 00 00 00    	je     c00015d4 <iALLOc+0x19b>
c0001542:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001545:	8d 78 f8             	lea    edi,[eax-0x8]
c0001548:	83 e3 fc             	and    ebx,0xfffffffc
c000154b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000154f:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001554:	74 1e                	je     c0001574 <iALLOc+0x13b>
c0001556:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000155a:	89 d9                	mov    ecx,ebx
c000155c:	52                   	push   edx
c000155d:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0001561:	83 e9 04             	sub    ecx,0x4
c0001564:	51                   	push   ecx
c0001565:	6a 00                	push   0x0
c0001567:	50                   	push   eax
c0001568:	e8 83 ef ff ff       	call   c00004f0 <memset>
c000156d:	83 c4 10             	add    esp,0x10
c0001570:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001574:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001579:	75 14                	jne    c000158f <iALLOc+0x156>
c000157b:	8d 04 37             	lea    eax,[edi+esi*1]
c000157e:	29 f3                	sub    ebx,esi
c0001580:	8d 48 08             	lea    ecx,[eax+0x8]
c0001583:	83 cb 01             	or     ebx,0x1
c0001586:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000158a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000158d:	89 f3                	mov    ebx,esi
c000158f:	31 c0                	xor    eax,eax
c0001591:	4d                   	dec    ebp
c0001592:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001595:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001599:	39 c5                	cmp    ebp,eax
c000159b:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000159e:	74 2c                	je     c00015cc <iALLOc+0x193>
c00015a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015a4:	85 c9                	test   ecx,ecx
c00015a6:	75 15                	jne    c00015bd <iALLOc+0x184>
c00015a8:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ab:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015ae:	b9 10 00 00 00       	mov    ecx,0x10
c00015b3:	83 fe 0f             	cmp    esi,0xf
c00015b6:	76 05                	jbe    c00015bd <iALLOc+0x184>
c00015b8:	83 e6 f8             	and    esi,0xfffffff8
c00015bb:	89 f1                	mov    ecx,esi
c00015bd:	89 ce                	mov    esi,ecx
c00015bf:	29 cb                	sub    ebx,ecx
c00015c1:	83 ce 01             	or     esi,0x1
c00015c4:	40                   	inc    eax
c00015c5:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00015c8:	01 cf                	add    edi,ecx
c00015ca:	eb c6                	jmp    c0001592 <iALLOc+0x159>
c00015cc:	83 cb 01             	or     ebx,0x1
c00015cf:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c00015d2:	eb 08                	jmp    c00015dc <iALLOc+0x1a3>
c00015d4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00015dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015e0:	83 c4 2c             	add    esp,0x2c
c00015e3:	5b                   	pop    ebx
c00015e4:	5e                   	pop    esi
c00015e5:	5f                   	pop    edi
c00015e6:	5d                   	pop    ebp
c00015e7:	c3                   	ret    

c00015e8 <dlrealloc>:
c00015e8:	55                   	push   ebp
c00015e9:	57                   	push   edi
c00015ea:	56                   	push   esi
c00015eb:	53                   	push   ebx
c00015ec:	83 ec 1c             	sub    esp,0x1c
c00015ef:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00015f3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00015f7:	85 db                	test   ebx,ebx
c00015f9:	75 10                	jne    c000160b <dlrealloc+0x23>
c00015fb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00015ff:	83 c4 1c             	add    esp,0x1c
c0001602:	5b                   	pop    ebx
c0001603:	5e                   	pop    esi
c0001604:	5f                   	pop    edi
c0001605:	5d                   	pop    ebp
c0001606:	e9 a0 fa ff ff       	jmp    c00010ab <dlmalloc>
c000160b:	83 f8 df             	cmp    eax,0xffffffdf
c000160e:	76 07                	jbe    c0001617 <dlrealloc+0x2f>
c0001610:	31 db                	xor    ebx,ebx
c0001612:	e9 6a 01 00 00       	jmp    c0001781 <dlrealloc+0x199>
c0001617:	83 c0 0b             	add    eax,0xb
c000161a:	bd 10 00 00 00       	mov    ebp,0x10
c000161f:	83 f8 0f             	cmp    eax,0xf
c0001622:	76 05                	jbe    c0001629 <dlrealloc+0x41>
c0001624:	83 e0 f8             	and    eax,0xfffffff8
c0001627:	89 c5                	mov    ebp,eax
c0001629:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c000162c:	8d 7b f8             	lea    edi,[ebx-0x8]
c000162f:	89 c6                	mov    esi,eax
c0001631:	83 e6 fc             	and    esi,0xfffffffc
c0001634:	a8 02                	test   al,0x2
c0001636:	75 d8                	jne    c0001610 <dlrealloc+0x28>
c0001638:	39 f5                	cmp    ebp,esi
c000163a:	0f 86 04 01 00 00    	jbe    c0001744 <dlrealloc+0x15c>
c0001640:	8d 14 37             	lea    edx,[edi+esi*1]
c0001643:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0001646:	39 15 2c 51 02 c0    	cmp    DWORD PTR ds:0xc002512c,edx
c000164c:	75 33                	jne    c0001681 <dlrealloc+0x99>
c000164e:	83 e1 fc             	and    ecx,0xfffffffc
c0001651:	01 f1                	add    ecx,esi
c0001653:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001657:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000165a:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000165e:	77 49                	ja     c00016a9 <dlrealloc+0xc1>
c0001660:	01 ef                	add    edi,ebp
c0001662:	83 e0 01             	and    eax,0x1
c0001665:	09 e8                	or     eax,ebp
c0001667:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c000166a:	89 3d 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,edi
c0001670:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001674:	29 e8                	sub    eax,ebp
c0001676:	83 c8 01             	or     eax,0x1
c0001679:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c000167c:	e9 00 01 00 00       	jmp    c0001781 <dlrealloc+0x199>
c0001681:	89 c8                	mov    eax,ecx
c0001683:	83 e0 fe             	and    eax,0xfffffffe
c0001686:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c000168b:	75 1c                	jne    c00016a9 <dlrealloc+0xc1>
c000168d:	83 e1 fc             	and    ecx,0xfffffffc
c0001690:	01 f1                	add    ecx,esi
c0001692:	39 cd                	cmp    ebp,ecx
c0001694:	77 13                	ja     c00016a9 <dlrealloc+0xc1>
c0001696:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001699:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000169c:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000169f:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016a2:	89 ce                	mov    esi,ecx
c00016a4:	e9 9b 00 00 00       	jmp    c0001744 <dlrealloc+0x15c>
c00016a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016ad:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016b0:	83 ec 0c             	sub    esp,0xc
c00016b3:	50                   	push   eax
c00016b4:	e8 f2 f9 ff ff       	call   c00010ab <dlmalloc>
c00016b9:	83 c4 10             	add    esp,0x10
c00016bc:	85 c0                	test   eax,eax
c00016be:	0f 84 4c ff ff ff    	je     c0001610 <dlrealloc+0x28>
c00016c4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00016c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00016cb:	39 ca                	cmp    edx,ecx
c00016cd:	75 0a                	jne    c00016d9 <dlrealloc+0xf1>
c00016cf:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c00016d2:	83 e0 fc             	and    eax,0xfffffffc
c00016d5:	01 c6                	add    esi,eax
c00016d7:	eb 6b                	jmp    c0001744 <dlrealloc+0x15c>
c00016d9:	8d 4e fc             	lea    ecx,[esi-0x4]
c00016dc:	83 f9 27             	cmp    ecx,0x27
c00016df:	76 08                	jbe    c00016e9 <dlrealloc+0x101>
c00016e1:	89 de                	mov    esi,ebx
c00016e3:	89 c7                	mov    edi,eax
c00016e5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00016e7:	eb 43                	jmp    c000172c <dlrealloc+0x144>
c00016e9:	8b 13                	mov    edx,DWORD PTR [ebx]
c00016eb:	83 f9 13             	cmp    ecx,0x13
c00016ee:	89 10                	mov    DWORD PTR [eax],edx
c00016f0:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00016f3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00016f6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00016f9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00016fc:	76 2e                	jbe    c000172c <dlrealloc+0x144>
c00016fe:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001701:	83 f9 1b             	cmp    ecx,0x1b
c0001704:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001707:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000170a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000170d:	76 1d                	jbe    c000172c <dlrealloc+0x144>
c000170f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001712:	83 f9 23             	cmp    ecx,0x23
c0001715:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001718:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000171b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000171e:	76 0c                	jbe    c000172c <dlrealloc+0x144>
c0001720:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001723:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001726:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001729:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000172c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001730:	83 ec 0c             	sub    esp,0xc
c0001733:	53                   	push   ebx
c0001734:	e8 1a f6 ff ff       	call   c0000d53 <dlfree>
c0001739:	83 c4 10             	add    esp,0x10
c000173c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001740:	89 c3                	mov    ebx,eax
c0001742:	eb 3d                	jmp    c0001781 <dlrealloc+0x199>
c0001744:	89 f2                	mov    edx,esi
c0001746:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001749:	29 ea                	sub    edx,ebp
c000174b:	83 e1 01             	and    ecx,0x1
c000174e:	8d 04 37             	lea    eax,[edi+esi*1]
c0001751:	83 fa 0f             	cmp    edx,0xf
c0001754:	77 0b                	ja     c0001761 <dlrealloc+0x179>
c0001756:	09 ce                	or     esi,ecx
c0001758:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000175b:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000175f:	eb 20                	jmp    c0001781 <dlrealloc+0x199>
c0001761:	01 ef                	add    edi,ebp
c0001763:	83 ec 0c             	sub    esp,0xc
c0001766:	09 cd                	or     ebp,ecx
c0001768:	83 ca 01             	or     edx,0x1
c000176b:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c000176e:	83 c7 08             	add    edi,0x8
c0001771:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c0001774:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001778:	57                   	push   edi
c0001779:	e8 d5 f5 ff ff       	call   c0000d53 <dlfree>
c000177e:	83 c4 10             	add    esp,0x10
c0001781:	83 c4 1c             	add    esp,0x1c
c0001784:	89 d8                	mov    eax,ebx
c0001786:	5b                   	pop    ebx
c0001787:	5e                   	pop    esi
c0001788:	5f                   	pop    edi
c0001789:	5d                   	pop    ebp
c000178a:	c3                   	ret    

c000178b <dlmemalign>:
c000178b:	55                   	push   ebp
c000178c:	57                   	push   edi
c000178d:	56                   	push   esi
c000178e:	53                   	push   ebx
c000178f:	83 ec 0c             	sub    esp,0xc
c0001792:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001796:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000179a:	83 fa 08             	cmp    edx,0x8
c000179d:	77 10                	ja     c00017af <dlmemalign+0x24>
c000179f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017a3:	83 c4 0c             	add    esp,0xc
c00017a6:	5b                   	pop    ebx
c00017a7:	5e                   	pop    esi
c00017a8:	5f                   	pop    edi
c00017a9:	5d                   	pop    ebp
c00017aa:	e9 fc f8 ff ff       	jmp    c00010ab <dlmalloc>
c00017af:	bf 10 00 00 00       	mov    edi,0x10
c00017b4:	83 fa 0f             	cmp    edx,0xf
c00017b7:	76 13                	jbe    c00017cc <dlmemalign+0x41>
c00017b9:	8d 4a ff             	lea    ecx,[edx-0x1]
c00017bc:	85 d1                	test   ecx,edx
c00017be:	75 04                	jne    c00017c4 <dlmemalign+0x39>
c00017c0:	89 d7                	mov    edi,edx
c00017c2:	eb 08                	jmp    c00017cc <dlmemalign+0x41>
c00017c4:	39 d7                	cmp    edi,edx
c00017c6:	73 04                	jae    c00017cc <dlmemalign+0x41>
c00017c8:	01 ff                	add    edi,edi
c00017ca:	eb f8                	jmp    c00017c4 <dlmemalign+0x39>
c00017cc:	83 f8 df             	cmp    eax,0xffffffdf
c00017cf:	76 07                	jbe    c00017d8 <dlmemalign+0x4d>
c00017d1:	31 c0                	xor    eax,eax
c00017d3:	e9 ce 00 00 00       	jmp    c00018a6 <dlmemalign+0x11b>
c00017d8:	83 c0 0b             	add    eax,0xb
c00017db:	bd 10 00 00 00       	mov    ebp,0x10
c00017e0:	83 f8 0f             	cmp    eax,0xf
c00017e3:	76 05                	jbe    c00017ea <dlmemalign+0x5f>
c00017e5:	83 e0 f8             	and    eax,0xfffffff8
c00017e8:	89 c5                	mov    ebp,eax
c00017ea:	83 ec 0c             	sub    esp,0xc
c00017ed:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c00017f1:	50                   	push   eax
c00017f2:	e8 b4 f8 ff ff       	call   c00010ab <dlmalloc>
c00017f7:	83 c4 10             	add    esp,0x10
c00017fa:	89 c1                	mov    ecx,eax
c00017fc:	85 c0                	test   eax,eax
c00017fe:	74 d1                	je     c00017d1 <dlmemalign+0x46>
c0001800:	31 d2                	xor    edx,edx
c0001802:	8d 70 f8             	lea    esi,[eax-0x8]
c0001805:	f7 f7                	div    edi
c0001807:	85 d2                	test   edx,edx
c0001809:	74 62                	je     c000186d <dlmemalign+0xe2>
c000180b:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000180f:	89 f8                	mov    eax,edi
c0001811:	f7 d8                	neg    eax
c0001813:	21 c3                	and    ebx,eax
c0001815:	83 eb 08             	sub    ebx,0x8
c0001818:	89 d8                	mov    eax,ebx
c000181a:	29 f0                	sub    eax,esi
c000181c:	83 f8 0f             	cmp    eax,0xf
c000181f:	77 02                	ja     c0001823 <dlmemalign+0x98>
c0001821:	01 fb                	add    ebx,edi
c0001823:	89 d8                	mov    eax,ebx
c0001825:	29 f0                	sub    eax,esi
c0001827:	89 c6                	mov    esi,eax
c0001829:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000182c:	89 c2                	mov    edx,eax
c000182e:	83 e2 fc             	and    edx,0xfffffffc
c0001831:	29 f2                	sub    edx,esi
c0001833:	a8 02                	test   al,0x2
c0001835:	74 10                	je     c0001847 <dlmemalign+0xbc>
c0001837:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000183a:	83 ca 02             	or     edx,0x2
c000183d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001840:	89 33                	mov    DWORD PTR [ebx],esi
c0001842:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001845:	eb 5f                	jmp    c00018a6 <dlmemalign+0x11b>
c0001847:	83 ec 0c             	sub    esp,0xc
c000184a:	89 d0                	mov    eax,edx
c000184c:	83 c8 01             	or     eax,0x1
c000184f:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001852:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001857:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000185a:	83 e0 01             	and    eax,0x1
c000185d:	09 f0                	or     eax,esi
c000185f:	89 de                	mov    esi,ebx
c0001861:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001864:	51                   	push   ecx
c0001865:	e8 e9 f4 ff ff       	call   c0000d53 <dlfree>
c000186a:	83 c4 10             	add    esp,0x10
c000186d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001870:	a8 02                	test   al,0x2
c0001872:	75 2f                	jne    c00018a3 <dlmemalign+0x118>
c0001874:	83 e0 fc             	and    eax,0xfffffffc
c0001877:	8d 55 10             	lea    edx,[ebp+0x10]
c000187a:	39 c2                	cmp    edx,eax
c000187c:	73 25                	jae    c00018a3 <dlmemalign+0x118>
c000187e:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001881:	83 ec 0c             	sub    esp,0xc
c0001884:	29 e8                	sub    eax,ebp
c0001886:	83 c2 08             	add    edx,0x8
c0001889:	83 c8 01             	or     eax,0x1
c000188c:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000188f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001892:	83 e0 01             	and    eax,0x1
c0001895:	09 c5                	or     ebp,eax
c0001897:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c000189a:	52                   	push   edx
c000189b:	e8 b3 f4 ff ff       	call   c0000d53 <dlfree>
c00018a0:	83 c4 10             	add    esp,0x10
c00018a3:	8d 46 08             	lea    eax,[esi+0x8]
c00018a6:	83 c4 0c             	add    esp,0xc
c00018a9:	5b                   	pop    ebx
c00018aa:	5e                   	pop    esi
c00018ab:	5f                   	pop    edi
c00018ac:	5d                   	pop    ebp
c00018ad:	c3                   	ret    

c00018ae <dlcalloc>:
c00018ae:	53                   	push   ebx
c00018af:	83 ec 14             	sub    esp,0x14
c00018b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018b6:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018bb:	50                   	push   eax
c00018bc:	e8 ea f7 ff ff       	call   c00010ab <dlmalloc>
c00018c1:	83 c4 10             	add    esp,0x10
c00018c4:	89 c3                	mov    ebx,eax
c00018c6:	85 c0                	test   eax,eax
c00018c8:	74 77                	je     c0001941 <dlcalloc+0x93>
c00018ca:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c00018cd:	89 d0                	mov    eax,edx
c00018cf:	83 e0 fc             	and    eax,0xfffffffc
c00018d2:	80 e2 02             	and    dl,0x2
c00018d5:	75 5a                	jne    c0001931 <dlcalloc+0x83>
c00018d7:	83 e8 04             	sub    eax,0x4
c00018da:	83 f8 27             	cmp    eax,0x27
c00018dd:	76 03                	jbe    c00018e2 <dlcalloc+0x34>
c00018df:	51                   	push   ecx
c00018e0:	eb 53                	jmp    c0001935 <dlcalloc+0x87>
c00018e2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00018e8:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00018ef:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00018f6:	83 f8 13             	cmp    eax,0x13
c00018f9:	76 46                	jbe    c0001941 <dlcalloc+0x93>
c00018fb:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001902:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001909:	83 f8 1b             	cmp    eax,0x1b
c000190c:	76 33                	jbe    c0001941 <dlcalloc+0x93>
c000190e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001915:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000191c:	83 f8 23             	cmp    eax,0x23
c000191f:	76 20                	jbe    c0001941 <dlcalloc+0x93>
c0001921:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001928:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000192f:	eb 10                	jmp    c0001941 <dlcalloc+0x93>
c0001931:	83 e8 08             	sub    eax,0x8
c0001934:	52                   	push   edx
c0001935:	50                   	push   eax
c0001936:	6a 00                	push   0x0
c0001938:	53                   	push   ebx
c0001939:	e8 b2 eb ff ff       	call   c00004f0 <memset>
c000193e:	83 c4 10             	add    esp,0x10
c0001941:	89 d8                	mov    eax,ebx
c0001943:	83 c4 08             	add    esp,0x8
c0001946:	5b                   	pop    ebx
c0001947:	c3                   	ret    

c0001948 <dlcfree>:
c0001948:	e9 06 f4 ff ff       	jmp    c0000d53 <dlfree>

c000194d <dlindependent_calloc>:
c000194d:	83 ec 28             	sub    esp,0x28
c0001950:	b9 03 00 00 00       	mov    ecx,0x3
c0001955:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001959:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000195d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001961:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001965:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001969:	e8 cb fa ff ff       	call   c0001439 <iALLOc>
c000196e:	83 c4 2c             	add    esp,0x2c
c0001971:	c3                   	ret    

c0001972 <dlindependent_comalloc>:
c0001972:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001976:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000197a:	31 c9                	xor    ecx,ecx
c000197c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001980:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001984:	e9 b0 fa ff ff       	jmp    c0001439 <iALLOc>

c0001989 <dlvalloc>:
c0001989:	83 ec 0c             	sub    esp,0xc
c000198c:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c0001993:	75 0a                	jne    c000199f <dlvalloc+0x16>
c0001995:	b8 00 51 02 c0       	mov    eax,0xc0025100
c000199a:	e8 cd f2 ff ff       	call   c0000c6c <malloc_consolidate>
c000199f:	50                   	push   eax
c00019a0:	50                   	push   eax
c00019a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019a5:	ff 35 5c 54 02 c0    	push   DWORD PTR ds:0xc002545c
c00019ab:	e8 db fd ff ff       	call   c000178b <dlmemalign>
c00019b0:	83 c4 1c             	add    esp,0x1c
c00019b3:	c3                   	ret    

c00019b4 <dlpvalloc>:
c00019b4:	83 ec 0c             	sub    esp,0xc
c00019b7:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c00019be:	75 0a                	jne    c00019ca <dlpvalloc+0x16>
c00019c0:	b8 00 51 02 c0       	mov    eax,0xc0025100
c00019c5:	e8 a2 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c00019ca:	a1 5c 54 02 c0       	mov    eax,ds:0xc002545c
c00019cf:	89 c1                	mov    ecx,eax
c00019d1:	52                   	push   edx
c00019d2:	f7 d9                	neg    ecx
c00019d4:	52                   	push   edx
c00019d5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00019d9:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c00019dd:	21 ca                	and    edx,ecx
c00019df:	52                   	push   edx
c00019e0:	50                   	push   eax
c00019e1:	e8 a5 fd ff ff       	call   c000178b <dlmemalign>
c00019e6:	83 c4 1c             	add    esp,0x1c
c00019e9:	c3                   	ret    

c00019ea <dlmalloc_trim>:
c00019ea:	b8 00 51 02 c0       	mov    eax,0xc0025100
c00019ef:	e8 78 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c00019f4:	31 c0                	xor    eax,eax
c00019f6:	c3                   	ret    

c00019f7 <dlmalloc_usable_size>:
c00019f7:	53                   	push   ebx
c00019f8:	31 c0                	xor    eax,eax
c00019fa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00019fe:	85 c9                	test   ecx,ecx
c0001a00:	74 24                	je     c0001a26 <dlmalloc_usable_size+0x2f>
c0001a02:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a05:	f6 c2 02             	test   dl,0x2
c0001a08:	74 08                	je     c0001a12 <dlmalloc_usable_size+0x1b>
c0001a0a:	83 e2 fc             	and    edx,0xfffffffc
c0001a0d:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a10:	eb 14                	jmp    c0001a26 <dlmalloc_usable_size+0x2f>
c0001a12:	89 d3                	mov    ebx,edx
c0001a14:	31 c0                	xor    eax,eax
c0001a16:	83 e3 fe             	and    ebx,0xfffffffe
c0001a19:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a1e:	74 06                	je     c0001a26 <dlmalloc_usable_size+0x2f>
c0001a20:	83 e2 fc             	and    edx,0xfffffffc
c0001a23:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a26:	5b                   	pop    ebx
c0001a27:	c3                   	ret    

c0001a28 <dlmallinfo>:
c0001a28:	55                   	push   ebp
c0001a29:	57                   	push   edi
c0001a2a:	56                   	push   esi
c0001a2b:	53                   	push   ebx
c0001a2c:	83 ec 08             	sub    esp,0x8
c0001a2f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a33:	83 3d 2c 51 02 c0 00 	cmp    DWORD PTR ds:0xc002512c,0x0
c0001a3a:	75 0a                	jne    c0001a46 <dlmallinfo+0x1e>
c0001a3c:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001a41:	e8 26 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c0001a46:	a1 2c 51 02 c0       	mov    eax,ds:0xc002512c
c0001a4b:	31 ed                	xor    ebp,ebp
c0001a4d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a50:	31 c9                	xor    ecx,ecx
c0001a52:	83 e0 fc             	and    eax,0xfffffffc
c0001a55:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a59:	31 c0                	xor    eax,eax
c0001a5b:	8b 14 85 04 51 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdaefc]
c0001a62:	85 d2                	test   edx,edx
c0001a64:	74 0e                	je     c0001a74 <dlmallinfo+0x4c>
c0001a66:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001a69:	45                   	inc    ebp
c0001a6a:	83 e6 fc             	and    esi,0xfffffffc
c0001a6d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001a70:	01 f1                	add    ecx,esi
c0001a72:	eb ee                	jmp    c0001a62 <dlmallinfo+0x3a>
c0001a74:	40                   	inc    eax
c0001a75:	83 f8 0a             	cmp    eax,0xa
c0001a78:	75 e1                	jne    c0001a5b <dlmallinfo+0x33>
c0001a7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a7e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001a85:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001a88:	b8 34 51 02 c0       	mov    eax,0xc0025134
c0001a8d:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001a90:	39 f0                	cmp    eax,esi
c0001a92:	74 10                	je     c0001aa4 <dlmallinfo+0x7c>
c0001a94:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a97:	ff 04 24             	inc    DWORD PTR [esp]
c0001a9a:	83 e7 fc             	and    edi,0xfffffffc
c0001a9d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001aa0:	01 fa                	add    edx,edi
c0001aa2:	eb ec                	jmp    c0001a90 <dlmallinfo+0x68>
c0001aa4:	83 c0 08             	add    eax,0x8
c0001aa7:	3d 2c 54 02 c0       	cmp    eax,0xc002542c
c0001aac:	75 df                	jne    c0001a8d <dlmallinfo+0x65>
c0001aae:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001ab1:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001ab4:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001ab7:	a1 68 54 02 c0       	mov    eax,ds:0xc0025468
c0001abc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001abf:	89 03                	mov    DWORD PTR [ebx],eax
c0001ac1:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001ac4:	8b 35 50 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025450
c0001aca:	29 d0                	sub    eax,edx
c0001acc:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001acf:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001ad2:	8b 35 64 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025464
c0001ad8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001adc:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001adf:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001ae2:	8b 35 74 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025474
c0001ae8:	89 d8                	mov    eax,ebx
c0001aea:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001aed:	83 c4 08             	add    esp,0x8
c0001af0:	5b                   	pop    ebx
c0001af1:	5e                   	pop    esi
c0001af2:	5f                   	pop    edi
c0001af3:	5d                   	pop    ebp
c0001af4:	c2 04 00             	ret    0x4

c0001af7 <dlmalloc_stats>:
c0001af7:	83 ec 30             	sub    esp,0x30
c0001afa:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001afe:	50                   	push   eax
c0001aff:	e8 24 ff ff ff       	call   c0001a28 <dlmallinfo>
c0001b04:	83 c4 30             	add    esp,0x30
c0001b07:	c3                   	ret    

c0001b08 <dlmallopt>:
c0001b08:	56                   	push   esi
c0001b09:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001b0e:	53                   	push   ebx
c0001b0f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b13:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b17:	e8 50 f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b1c:	8d 46 04             	lea    eax,[esi+0x4]
c0001b1f:	83 f8 05             	cmp    eax,0x5
c0001b22:	77 67                	ja     c0001b8b <dlmallopt+0x83>
c0001b24:	ff 24 85 84 01 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdfe7c]
c0001b2b:	83 fb 50             	cmp    ebx,0x50
c0001b2e:	77 5b                	ja     c0001b8b <dlmallopt+0x83>
c0001b30:	ba 08 00 00 00       	mov    edx,0x8
c0001b35:	85 db                	test   ebx,ebx
c0001b37:	74 12                	je     c0001b4b <dlmallopt+0x43>
c0001b39:	83 c3 0b             	add    ebx,0xb
c0001b3c:	ba 10 00 00 00       	mov    edx,0x10
c0001b41:	83 fb 0f             	cmp    ebx,0xf
c0001b44:	76 05                	jbe    c0001b4b <dlmallopt+0x43>
c0001b46:	89 da                	mov    edx,ebx
c0001b48:	83 e2 f8             	and    edx,0xfffffff8
c0001b4b:	a1 00 51 02 c0       	mov    eax,ds:0xc0025100
c0001b50:	83 e0 03             	and    eax,0x3
c0001b53:	09 d0                	or     eax,edx
c0001b55:	a3 00 51 02 c0       	mov    ds:0xc0025100,eax
c0001b5a:	eb 31                	jmp    c0001b8d <dlmallopt+0x85>
c0001b5c:	89 1d 44 54 02 c0    	mov    DWORD PTR ds:0xc0025444,ebx
c0001b62:	eb 06                	jmp    c0001b6a <dlmallopt+0x62>
c0001b64:	89 1d 48 54 02 c0    	mov    DWORD PTR ds:0xc0025448,ebx
c0001b6a:	be 01 00 00 00       	mov    esi,0x1
c0001b6f:	eb 1c                	jmp    c0001b8d <dlmallopt+0x85>
c0001b71:	89 1d 4c 54 02 c0    	mov    DWORD PTR ds:0xc002544c,ebx
c0001b77:	eb f1                	jmp    c0001b6a <dlmallopt+0x62>
c0001b79:	31 f6                	xor    esi,esi
c0001b7b:	85 db                	test   ebx,ebx
c0001b7d:	75 0e                	jne    c0001b8d <dlmallopt+0x85>
c0001b7f:	c7 05 54 54 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025454,0x0
c0001b89:	eb df                	jmp    c0001b6a <dlmallopt+0x62>
c0001b8b:	31 f6                	xor    esi,esi
c0001b8d:	89 f0                	mov    eax,esi
c0001b8f:	5b                   	pop    ebx
c0001b90:	5e                   	pop    esi
c0001b91:	c3                   	ret    
c0001b92:	66 90                	xchg   ax,ax

c0001b94 <isblank>:
c0001b94:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b99:	74 09                	je     c0001ba4 <isblank+0x10>
c0001b9b:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001ba0:	75 0a                	jne    c0001bac <isblank+0x18>
c0001ba2:	66 90                	xchg   ax,ax
c0001ba4:	b8 01 00 00 00       	mov    eax,0x1
c0001ba9:	c3                   	ret    
c0001baa:	66 90                	xchg   ax,ax
c0001bac:	b8 00 00 00 00       	mov    eax,0x0
c0001bb1:	c3                   	ret    
c0001bb2:	66 90                	xchg   ax,ax

c0001bb4 <iscntrl>:
c0001bb4:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001bb9:	7e 09                	jle    c0001bc4 <iscntrl+0x10>
c0001bbb:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001bc0:	75 0a                	jne    c0001bcc <iscntrl+0x18>
c0001bc2:	66 90                	xchg   ax,ax
c0001bc4:	b8 01 00 00 00       	mov    eax,0x1
c0001bc9:	c3                   	ret    
c0001bca:	66 90                	xchg   ax,ax
c0001bcc:	b8 00 00 00 00       	mov    eax,0x0
c0001bd1:	c3                   	ret    
c0001bd2:	66 90                	xchg   ax,ax

c0001bd4 <isdigit>:
c0001bd4:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001bd9:	7e 0d                	jle    c0001be8 <isdigit+0x14>
c0001bdb:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001be0:	7f 06                	jg     c0001be8 <isdigit+0x14>
c0001be2:	b8 01 00 00 00       	mov    eax,0x1
c0001be7:	c3                   	ret    
c0001be8:	b8 00 00 00 00       	mov    eax,0x0
c0001bed:	c3                   	ret    
c0001bee:	66 90                	xchg   ax,ax

c0001bf0 <islower>:
c0001bf0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001bf5:	7e 0d                	jle    c0001c04 <islower+0x14>
c0001bf7:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001bfc:	7f 06                	jg     c0001c04 <islower+0x14>
c0001bfe:	b8 01 00 00 00       	mov    eax,0x1
c0001c03:	c3                   	ret    
c0001c04:	b8 00 00 00 00       	mov    eax,0x0
c0001c09:	c3                   	ret    
c0001c0a:	66 90                	xchg   ax,ax

c0001c0c <isspace>:
c0001c0c:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001c11:	7c 19                	jl     c0001c2c <isspace+0x20>
c0001c13:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001c18:	7e 0a                	jle    c0001c24 <isspace+0x18>
c0001c1a:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c1f:	75 0b                	jne    c0001c2c <isspace+0x20>
c0001c21:	8d 76 00             	lea    esi,[esi+0x0]
c0001c24:	b8 01 00 00 00       	mov    eax,0x1
c0001c29:	c3                   	ret    
c0001c2a:	66 90                	xchg   ax,ax
c0001c2c:	b8 00 00 00 00       	mov    eax,0x0
c0001c31:	c3                   	ret    
c0001c32:	66 90                	xchg   ax,ax

c0001c34 <isupper>:
c0001c34:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001c39:	7e 0d                	jle    c0001c48 <isupper+0x14>
c0001c3b:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001c40:	7f 06                	jg     c0001c48 <isupper+0x14>
c0001c42:	b8 01 00 00 00       	mov    eax,0x1
c0001c47:	c3                   	ret    
c0001c48:	b8 00 00 00 00       	mov    eax,0x0
c0001c4d:	c3                   	ret    
c0001c4e:	66 90                	xchg   ax,ax

c0001c50 <isalpha>:
c0001c50:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c54:	e8 db ff ff ff       	call   c0001c34 <isupper>
c0001c59:	83 c4 04             	add    esp,0x4
c0001c5c:	85 c0                	test   eax,eax
c0001c5e:	75 10                	jne    c0001c70 <isalpha+0x20>
c0001c60:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c64:	e8 87 ff ff ff       	call   c0001bf0 <islower>
c0001c69:	83 c4 04             	add    esp,0x4
c0001c6c:	85 c0                	test   eax,eax
c0001c6e:	74 08                	je     c0001c78 <isalpha+0x28>
c0001c70:	b8 01 00 00 00       	mov    eax,0x1
c0001c75:	c3                   	ret    
c0001c76:	66 90                	xchg   ax,ax
c0001c78:	b8 00 00 00 00       	mov    eax,0x0
c0001c7d:	c3                   	ret    
c0001c7e:	66 90                	xchg   ax,ax

c0001c80 <isalnum>:
c0001c80:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c84:	e8 c7 ff ff ff       	call   c0001c50 <isalpha>
c0001c89:	83 c4 04             	add    esp,0x4
c0001c8c:	85 c0                	test   eax,eax
c0001c8e:	75 10                	jne    c0001ca0 <isalnum+0x20>
c0001c90:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c94:	e8 3b ff ff ff       	call   c0001bd4 <isdigit>
c0001c99:	83 c4 04             	add    esp,0x4
c0001c9c:	85 c0                	test   eax,eax
c0001c9e:	74 08                	je     c0001ca8 <isalnum+0x28>
c0001ca0:	b8 01 00 00 00       	mov    eax,0x1
c0001ca5:	c3                   	ret    
c0001ca6:	66 90                	xchg   ax,ax
c0001ca8:	b8 00 00 00 00       	mov    eax,0x0
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax

c0001cb0 <ispunct>:
c0001cb0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cb4:	e8 c7 ff ff ff       	call   c0001c80 <isalnum>
c0001cb9:	83 c4 04             	add    esp,0x4
c0001cbc:	85 c0                	test   eax,eax
c0001cbe:	75 28                	jne    c0001ce8 <ispunct+0x38>
c0001cc0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cc4:	e8 43 ff ff ff       	call   c0001c0c <isspace>
c0001cc9:	83 c4 04             	add    esp,0x4
c0001ccc:	85 c0                	test   eax,eax
c0001cce:	75 18                	jne    c0001ce8 <ispunct+0x38>
c0001cd0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cd4:	e8 db fe ff ff       	call   c0001bb4 <iscntrl>
c0001cd9:	83 c4 04             	add    esp,0x4
c0001cdc:	85 c0                	test   eax,eax
c0001cde:	75 08                	jne    c0001ce8 <ispunct+0x38>
c0001ce0:	b8 01 00 00 00       	mov    eax,0x1
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax
c0001ce8:	b8 00 00 00 00       	mov    eax,0x0
c0001ced:	c3                   	ret    
c0001cee:	66 90                	xchg   ax,ax

c0001cf0 <isgraph>:
c0001cf0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cf4:	e8 87 ff ff ff       	call   c0001c80 <isalnum>
c0001cf9:	83 c4 04             	add    esp,0x4
c0001cfc:	85 c0                	test   eax,eax
c0001cfe:	75 10                	jne    c0001d10 <isgraph+0x20>
c0001d00:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d04:	e8 a7 ff ff ff       	call   c0001cb0 <ispunct>
c0001d09:	83 c4 04             	add    esp,0x4
c0001d0c:	85 c0                	test   eax,eax
c0001d0e:	74 08                	je     c0001d18 <isgraph+0x28>
c0001d10:	b8 01 00 00 00       	mov    eax,0x1
c0001d15:	c3                   	ret    
c0001d16:	66 90                	xchg   ax,ax
c0001d18:	b8 00 00 00 00       	mov    eax,0x0
c0001d1d:	c3                   	ret    
c0001d1e:	66 90                	xchg   ax,ax

c0001d20 <isprint>:
c0001d20:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d24:	e8 c7 ff ff ff       	call   c0001cf0 <isgraph>
c0001d29:	83 c4 04             	add    esp,0x4
c0001d2c:	85 c0                	test   eax,eax
c0001d2e:	75 08                	jne    c0001d38 <isprint+0x18>
c0001d30:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d35:	75 09                	jne    c0001d40 <isprint+0x20>
c0001d37:	90                   	nop
c0001d38:	b8 01 00 00 00       	mov    eax,0x1
c0001d3d:	c3                   	ret    
c0001d3e:	66 90                	xchg   ax,ax
c0001d40:	b8 00 00 00 00       	mov    eax,0x0
c0001d45:	c3                   	ret    
c0001d46:	66 90                	xchg   ax,ax

c0001d48 <isxdigit>:
c0001d48:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d4c:	e8 83 fe ff ff       	call   c0001bd4 <isdigit>
c0001d51:	83 c4 04             	add    esp,0x4
c0001d54:	85 c0                	test   eax,eax
c0001d56:	75 20                	jne    c0001d78 <isxdigit+0x30>
c0001d58:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001d5d:	7e 09                	jle    c0001d68 <isxdigit+0x20>
c0001d5f:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001d64:	7e 12                	jle    c0001d78 <isxdigit+0x30>
c0001d66:	66 90                	xchg   ax,ax
c0001d68:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001d6d:	7e 11                	jle    c0001d80 <isxdigit+0x38>
c0001d6f:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001d74:	7f 0a                	jg     c0001d80 <isxdigit+0x38>
c0001d76:	66 90                	xchg   ax,ax
c0001d78:	b8 01 00 00 00       	mov    eax,0x1
c0001d7d:	c3                   	ret    
c0001d7e:	66 90                	xchg   ax,ax
c0001d80:	b8 00 00 00 00       	mov    eax,0x0
c0001d85:	c3                   	ret    

c0001d86 <disk_status>:
c0001d86:	31 c0                	xor    eax,eax
c0001d88:	c3                   	ret    

c0001d89 <disk_initialize>:
c0001d89:	31 c0                	xor    eax,eax
c0001d8b:	c3                   	ret    

c0001d8c <disk_read>:
c0001d8c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d91:	0f b6 04 85 20 98 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd67e0]
c0001d99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d9d:	e9 6a 79 01 00       	jmp    c001970c <fatWrapperReadDisk>

c0001da2 <disk_write>:
c0001da2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001da7:	0f b6 04 85 20 98 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd67e0]
c0001daf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001db3:	e9 94 79 01 00       	jmp    c001974c <fatWrapperWriteDisk>

c0001db8 <disk_ioctl>:
c0001db8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001dbd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001dc1:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dc6:	0f b6 04 85 20 98 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd67e0]
c0001dce:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001dd2:	e9 b5 79 01 00       	jmp    c001978c <fatWrapperIoctl>

c0001dd7 <ld_word>:
c0001dd7:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001ddb:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001dde:	c1 e2 08             	shl    edx,0x8
c0001de1:	09 d0                	or     eax,edx
c0001de3:	c3                   	ret    

c0001de4 <ld_dword>:
c0001de4:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001de8:	89 d1                	mov    ecx,edx
c0001dea:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001dee:	c1 e1 08             	shl    ecx,0x8
c0001df1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001df4:	09 ca                	or     edx,ecx
c0001df6:	c1 e2 08             	shl    edx,0x8
c0001df9:	09 d0                	or     eax,edx
c0001dfb:	c3                   	ret    

c0001dfc <st_word>:
c0001dfc:	66 89 10             	mov    WORD PTR [eax],dx
c0001dff:	c3                   	ret    

c0001e00 <st_dword>:
c0001e00:	89 10                	mov    DWORD PTR [eax],edx
c0001e02:	c3                   	ret    

c0001e03 <mem_cpy>:
c0001e03:	85 c9                	test   ecx,ecx
c0001e05:	74 10                	je     c0001e17 <mem_cpy+0x14>
c0001e07:	57                   	push   edi
c0001e08:	01 c1                	add    ecx,eax
c0001e0a:	56                   	push   esi
c0001e0b:	89 c7                	mov    edi,eax
c0001e0d:	89 d6                	mov    esi,edx
c0001e0f:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001e10:	39 f9                	cmp    ecx,edi
c0001e12:	75 fb                	jne    c0001e0f <mem_cpy+0xc>
c0001e14:	5e                   	pop    esi
c0001e15:	5f                   	pop    edi
c0001e16:	c3                   	ret    
c0001e17:	c3                   	ret    

c0001e18 <mem_set>:
c0001e18:	01 c1                	add    ecx,eax
c0001e1a:	40                   	inc    eax
c0001e1b:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001e1e:	39 c8                	cmp    eax,ecx
c0001e20:	75 f8                	jne    c0001e1a <mem_set+0x2>
c0001e22:	c3                   	ret    

c0001e23 <mem_cmp>:
c0001e23:	57                   	push   edi
c0001e24:	56                   	push   esi
c0001e25:	89 c6                	mov    esi,eax
c0001e27:	53                   	push   ebx
c0001e28:	46                   	inc    esi
c0001e29:	42                   	inc    edx
c0001e2a:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001e2e:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001e32:	29 fb                	sub    ebx,edi
c0001e34:	89 cf                	mov    edi,ecx
c0001e36:	29 f7                	sub    edi,esi
c0001e38:	01 c7                	add    edi,eax
c0001e3a:	74 04                	je     c0001e40 <mem_cmp+0x1d>
c0001e3c:	85 db                	test   ebx,ebx
c0001e3e:	74 e8                	je     c0001e28 <mem_cmp+0x5>
c0001e40:	89 d8                	mov    eax,ebx
c0001e42:	5b                   	pop    ebx
c0001e43:	5e                   	pop    esi
c0001e44:	5f                   	pop    edi
c0001e45:	c3                   	ret    

c0001e46 <chk_chr>:
c0001e46:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001e49:	85 c9                	test   ecx,ecx
c0001e4b:	74 07                	je     c0001e54 <chk_chr+0xe>
c0001e4d:	39 d1                	cmp    ecx,edx
c0001e4f:	74 03                	je     c0001e54 <chk_chr+0xe>
c0001e51:	40                   	inc    eax
c0001e52:	eb f2                	jmp    c0001e46 <chk_chr>
c0001e54:	89 c8                	mov    eax,ecx
c0001e56:	c3                   	ret    

c0001e57 <dbc_1st>:
c0001e57:	31 c0                	xor    eax,eax
c0001e59:	c3                   	ret    

c0001e5a <dbc_2nd>:
c0001e5a:	31 c0                	xor    eax,eax
c0001e5c:	c3                   	ret    

c0001e5d <tchar2uni>:
c0001e5d:	57                   	push   edi
c0001e5e:	56                   	push   esi
c0001e5f:	53                   	push   ebx
c0001e60:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001e62:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001e64:	8d 73 01             	lea    esi,[ebx+0x1]
c0001e67:	f6 c1 80             	test   cl,0x80
c0001e6a:	75 0a                	jne    c0001e76 <tchar2uni+0x19>
c0001e6c:	0f b6 d1             	movzx  edx,cl
c0001e6f:	89 f3                	mov    ebx,esi
c0001e71:	e9 b2 00 00 00       	jmp    c0001f28 <tchar2uni+0xcb>
c0001e76:	89 ca                	mov    edx,ecx
c0001e78:	81 e2 e0 00 00 00    	and    edx,0xe0
c0001e7e:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0001e84:	89 ca                	mov    edx,ecx
c0001e86:	75 0a                	jne    c0001e92 <tchar2uni+0x35>
c0001e88:	83 e2 1f             	and    edx,0x1f
c0001e8b:	b9 01 00 00 00       	mov    ecx,0x1
c0001e90:	eb 37                	jmp    c0001ec9 <tchar2uni+0x6c>
c0001e92:	81 e2 f0 00 00 00    	and    edx,0xf0
c0001e98:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0001e9e:	75 0c                	jne    c0001eac <tchar2uni+0x4f>
c0001ea0:	89 ca                	mov    edx,ecx
c0001ea2:	b9 02 00 00 00       	mov    ecx,0x2
c0001ea7:	83 e2 0f             	and    edx,0xf
c0001eaa:	eb 1d                	jmp    c0001ec9 <tchar2uni+0x6c>
c0001eac:	89 cf                	mov    edi,ecx
c0001eae:	83 ca ff             	or     edx,0xffffffff
c0001eb1:	81 e7 f8 00 00 00    	and    edi,0xf8
c0001eb7:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0001ebd:	75 70                	jne    c0001f2f <tchar2uni+0xd2>
c0001ebf:	89 ca                	mov    edx,ecx
c0001ec1:	b9 03 00 00 00       	mov    ecx,0x3
c0001ec6:	83 e2 07             	and    edx,0x7
c0001ec9:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001ecd:	46                   	inc    esi
c0001ece:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001ed1:	89 cf                	mov    edi,ecx
c0001ed3:	81 e7 c0 00 00 00    	and    edi,0xc0
c0001ed9:	83 c7 80             	add    edi,0xffffff80
c0001edc:	75 4e                	jne    c0001f2c <tchar2uni+0xcf>
c0001ede:	c1 e2 06             	shl    edx,0x6
c0001ee1:	83 e1 3f             	and    ecx,0x3f
c0001ee4:	09 ca                	or     edx,ecx
c0001ee6:	39 de                	cmp    esi,ebx
c0001ee8:	75 e3                	jne    c0001ecd <tchar2uni+0x70>
c0001eea:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001eed:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001ef3:	77 37                	ja     c0001f2c <tchar2uni+0xcf>
c0001ef5:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001efb:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f01:	76 29                	jbe    c0001f2c <tchar2uni+0xcf>
c0001f03:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001f09:	76 1d                	jbe    c0001f28 <tchar2uni+0xcb>
c0001f0b:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001f11:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001f17:	c1 e1 06             	shl    ecx,0x6
c0001f1a:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001f20:	09 ca                	or     edx,ecx
c0001f22:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001f28:	89 18                	mov    DWORD PTR [eax],ebx
c0001f2a:	eb 03                	jmp    c0001f2f <tchar2uni+0xd2>
c0001f2c:	83 ca ff             	or     edx,0xffffffff
c0001f2f:	5b                   	pop    ebx
c0001f30:	89 d0                	mov    eax,edx
c0001f32:	5e                   	pop    esi
c0001f33:	5f                   	pop    edi
c0001f34:	c3                   	ret    

c0001f35 <put_utf>:
c0001f35:	53                   	push   ebx
c0001f36:	83 f8 7f             	cmp    eax,0x7f
c0001f39:	89 c3                	mov    ebx,eax
c0001f3b:	b0 00                	mov    al,0x0
c0001f3d:	77 11                	ja     c0001f50 <put_utf+0x1b>
c0001f3f:	85 c9                	test   ecx,ecx
c0001f41:	0f 84 e5 00 00 00    	je     c000202c <put_utf+0xf7>
c0001f47:	88 1a                	mov    BYTE PTR [edx],bl
c0001f49:	b0 01                	mov    al,0x1
c0001f4b:	e9 dc 00 00 00       	jmp    c000202c <put_utf+0xf7>
c0001f50:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001f56:	77 23                	ja     c0001f7b <put_utf+0x46>
c0001f58:	83 f9 01             	cmp    ecx,0x1
c0001f5b:	0f 86 cb 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f61:	89 d8                	mov    eax,ebx
c0001f63:	83 e3 3f             	and    ebx,0x3f
c0001f66:	c1 e8 06             	shr    eax,0x6
c0001f69:	83 cb 80             	or     ebx,0xffffff80
c0001f6c:	83 c8 c0             	or     eax,0xffffffc0
c0001f6f:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001f72:	88 02                	mov    BYTE PTR [edx],al
c0001f74:	b0 02                	mov    al,0x2
c0001f76:	e9 b1 00 00 00       	jmp    c000202c <put_utf+0xf7>
c0001f7b:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001f81:	77 40                	ja     c0001fc3 <put_utf+0x8e>
c0001f83:	83 f9 02             	cmp    ecx,0x2
c0001f86:	0f 86 a0 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f8c:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001f92:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f98:	0f 86 8e 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f9e:	89 d8                	mov    eax,ebx
c0001fa0:	c1 e8 0c             	shr    eax,0xc
c0001fa3:	83 c8 e0             	or     eax,0xffffffe0
c0001fa6:	88 02                	mov    BYTE PTR [edx],al
c0001fa8:	89 d8                	mov    eax,ebx
c0001faa:	83 e3 3f             	and    ebx,0x3f
c0001fad:	c1 e8 06             	shr    eax,0x6
c0001fb0:	83 cb 80             	or     ebx,0xffffff80
c0001fb3:	83 e0 3f             	and    eax,0x3f
c0001fb6:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001fb9:	83 c8 80             	or     eax,0xffffff80
c0001fbc:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001fbf:	b0 03                	mov    al,0x3
c0001fc1:	eb 69                	jmp    c000202c <put_utf+0xf7>
c0001fc3:	83 f9 03             	cmp    ecx,0x3
c0001fc6:	76 64                	jbe    c000202c <put_utf+0xf7>
c0001fc8:	89 d9                	mov    ecx,ebx
c0001fca:	0f b7 c3             	movzx  eax,bx
c0001fcd:	66 31 c9             	xor    cx,cx
c0001fd0:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001fd6:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001fdc:	c1 e9 06             	shr    ecx,0x6
c0001fdf:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001fe5:	77 43                	ja     c000202a <put_utf+0xf5>
c0001fe7:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001fed:	77 3b                	ja     c000202a <put_utf+0xf5>
c0001fef:	09 cb                	or     ebx,ecx
c0001ff1:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ff7:	89 d8                	mov    eax,ebx
c0001ff9:	c1 e8 12             	shr    eax,0x12
c0001ffc:	83 c8 f0             	or     eax,0xfffffff0
c0001fff:	88 02                	mov    BYTE PTR [edx],al
c0002001:	89 d8                	mov    eax,ebx
c0002003:	c1 e8 0c             	shr    eax,0xc
c0002006:	83 e0 3f             	and    eax,0x3f
c0002009:	83 c8 80             	or     eax,0xffffff80
c000200c:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c000200f:	89 d8                	mov    eax,ebx
c0002011:	83 e3 3f             	and    ebx,0x3f
c0002014:	c1 e8 06             	shr    eax,0x6
c0002017:	83 cb 80             	or     ebx,0xffffff80
c000201a:	83 e0 3f             	and    eax,0x3f
c000201d:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002020:	83 c8 80             	or     eax,0xffffff80
c0002023:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0002026:	b0 04                	mov    al,0x4
c0002028:	eb 02                	jmp    c000202c <put_utf+0xf7>
c000202a:	31 c0                	xor    eax,eax
c000202c:	5b                   	pop    ebx
c000202d:	c3                   	ret    

c000202e <clst2sect>:
c000202e:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002031:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0002034:	83 ea 02             	sub    edx,0x2
c0002037:	39 ca                	cmp    edx,ecx
c0002039:	76 0d                	jbe    c0002048 <clst2sect+0x1a>
c000203b:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000203f:	0f af d1             	imul   edx,ecx
c0002042:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0002045:	89 d0                	mov    eax,edx
c0002047:	c3                   	ret    
c0002048:	31 c0                	xor    eax,eax
c000204a:	c3                   	ret    

c000204b <pick_lfn>:
c000204b:	55                   	push   ebp
c000204c:	57                   	push   edi
c000204d:	89 c7                	mov    edi,eax
c000204f:	56                   	push   esi
c0002050:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002053:	53                   	push   ebx
c0002054:	89 d3                	mov    ebx,edx
c0002056:	e8 7c fd ff ff       	call   c0001dd7 <ld_word>
c000205b:	66 85 c0             	test   ax,ax
c000205e:	74 04                	je     c0002064 <pick_lfn+0x19>
c0002060:	31 c0                	xor    eax,eax
c0002062:	eb 62                	jmp    c00020c6 <pick_lfn+0x7b>
c0002064:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0002067:	bd 01 00 00 00       	mov    ebp,0x1
c000206c:	83 e1 bf             	and    ecx,0xffffffbf
c000206f:	31 f6                	xor    esi,esi
c0002071:	49                   	dec    ecx
c0002072:	6b c9 0d             	imul   ecx,ecx,0xd
c0002075:	0f b6 86 e0 02 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffdfd20]
c000207c:	01 d8                	add    eax,ebx
c000207e:	e8 54 fd ff ff       	call   c0001dd7 <ld_word>
c0002083:	66 85 ed             	test   bp,bp
c0002086:	74 11                	je     c0002099 <pick_lfn+0x4e>
c0002088:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c000208e:	77 d0                	ja     c0002060 <pick_lfn+0x15>
c0002090:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c0002094:	89 c5                	mov    ebp,eax
c0002096:	41                   	inc    ecx
c0002097:	eb 0a                	jmp    c00020a3 <pick_lfn+0x58>
c0002099:	0f b7 c0             	movzx  eax,ax
c000209c:	3d ff ff 00 00       	cmp    eax,0xffff
c00020a1:	75 bd                	jne    c0002060 <pick_lfn+0x15>
c00020a3:	46                   	inc    esi
c00020a4:	83 fe 0d             	cmp    esi,0xd
c00020a7:	75 cc                	jne    c0002075 <pick_lfn+0x2a>
c00020a9:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00020ac:	74 13                	je     c00020c1 <pick_lfn+0x76>
c00020ae:	66 85 ed             	test   bp,bp
c00020b1:	74 0e                	je     c00020c1 <pick_lfn+0x76>
c00020b3:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020b9:	77 a5                	ja     c0002060 <pick_lfn+0x15>
c00020bb:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00020c1:	b8 01 00 00 00       	mov    eax,0x1
c00020c6:	5b                   	pop    ebx
c00020c7:	5e                   	pop    esi
c00020c8:	5f                   	pop    edi
c00020c9:	5d                   	pop    ebp
c00020ca:	c3                   	ret    

c00020cb <put_lfn>:
c00020cb:	55                   	push   ebp
c00020cc:	57                   	push   edi
c00020cd:	89 d7                	mov    edi,edx
c00020cf:	56                   	push   esi
c00020d0:	31 f6                	xor    esi,esi
c00020d2:	53                   	push   ebx
c00020d3:	83 ec 0c             	sub    esp,0xc
c00020d6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00020da:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00020de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00020e2:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00020e8:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c00020eb:	8d 42 1a             	lea    eax,[edx+0x1a]
c00020ee:	31 d2                	xor    edx,edx
c00020f0:	e8 07 fd ff ff       	call   c0001dfc <st_word>
c00020f5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00020fc:	0f b6 d9             	movzx  ebx,cl
c00020ff:	4b                   	dec    ebx
c0002100:	6b db 0d             	imul   ebx,ebx,0xd
c0002103:	0f b7 c6             	movzx  eax,si
c0002106:	3d ff ff 00 00       	cmp    eax,0xffff
c000210b:	74 09                	je     c0002116 <put_lfn+0x4b>
c000210d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002111:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c0002115:	43                   	inc    ebx
c0002116:	0f b7 ee             	movzx  ebp,si
c0002119:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000211c:	89 ea                	mov    edx,ebp
c000211e:	0f b6 80 e0 02 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdfd20]
c0002125:	01 f8                	add    eax,edi
c0002127:	e8 d0 fc ff ff       	call   c0001dfc <st_word>
c000212c:	85 ed                	test   ebp,ebp
c000212e:	75 05                	jne    c0002135 <put_lfn+0x6a>
c0002130:	be ff ff 00 00       	mov    esi,0xffff
c0002135:	ff 04 24             	inc    DWORD PTR [esp]
c0002138:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c000213c:	75 c5                	jne    c0002103 <put_lfn+0x38>
c000213e:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002144:	74 0b                	je     c0002151 <put_lfn+0x86>
c0002146:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000214a:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000214f:	75 07                	jne    c0002158 <put_lfn+0x8d>
c0002151:	83 c9 40             	or     ecx,0x40
c0002154:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002158:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000215c:	88 07                	mov    BYTE PTR [edi],al
c000215e:	83 c4 0c             	add    esp,0xc
c0002161:	5b                   	pop    ebx
c0002162:	5e                   	pop    esi
c0002163:	5f                   	pop    edi
c0002164:	5d                   	pop    ebp
c0002165:	c3                   	ret    

c0002166 <gen_numname>:
c0002166:	57                   	push   edi
c0002167:	89 cf                	mov    edi,ecx
c0002169:	56                   	push   esi
c000216a:	b9 0b 00 00 00       	mov    ecx,0xb
c000216f:	53                   	push   ebx
c0002170:	89 c6                	mov    esi,eax
c0002172:	83 ec 10             	sub    esp,0x10
c0002175:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002179:	e8 85 fc ff ff       	call   c0001e03 <mem_cpy>
c000217e:	83 fb 05             	cmp    ebx,0x5
c0002181:	76 30                	jbe    c00021b3 <gen_numname+0x4d>
c0002183:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002186:	66 85 c0             	test   ax,ax
c0002189:	74 28                	je     c00021b3 <gen_numname+0x4d>
c000218b:	83 c7 02             	add    edi,0x2
c000218e:	ba 10 00 00 00       	mov    edx,0x10
c0002193:	01 db                	add    ebx,ebx
c0002195:	89 c1                	mov    ecx,eax
c0002197:	c1 e0 10             	shl    eax,0x10
c000219a:	83 e1 01             	and    ecx,0x1
c000219d:	c1 e8 11             	shr    eax,0x11
c00021a0:	01 cb                	add    ebx,ecx
c00021a2:	0f ba e3 10          	bt     ebx,0x10
c00021a6:	73 06                	jae    c00021ae <gen_numname+0x48>
c00021a8:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00021ae:	4a                   	dec    edx
c00021af:	75 e2                	jne    c0002193 <gen_numname+0x2d>
c00021b1:	eb d0                	jmp    c0002183 <gen_numname+0x1d>
c00021b3:	b8 07 00 00 00       	mov    eax,0x7
c00021b8:	89 d9                	mov    ecx,ebx
c00021ba:	83 e1 0f             	and    ecx,0xf
c00021bd:	8d 79 30             	lea    edi,[ecx+0x30]
c00021c0:	89 fa                	mov    edx,edi
c00021c2:	83 ff 39             	cmp    edi,0x39
c00021c5:	76 03                	jbe    c00021ca <gen_numname+0x64>
c00021c7:	8d 51 37             	lea    edx,[ecx+0x37]
c00021ca:	8d 48 ff             	lea    ecx,[eax-0x1]
c00021cd:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00021d1:	89 da                	mov    edx,ebx
c00021d3:	c1 ea 04             	shr    edx,0x4
c00021d6:	83 fb 0f             	cmp    ebx,0xf
c00021d9:	76 06                	jbe    c00021e1 <gen_numname+0x7b>
c00021db:	89 c8                	mov    eax,ecx
c00021dd:	89 d3                	mov    ebx,edx
c00021df:	eb d7                	jmp    c00021b8 <gen_numname+0x52>
c00021e1:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00021e6:	31 d2                	xor    edx,edx
c00021e8:	8d 58 fe             	lea    ebx,[eax-0x2]
c00021eb:	8d 04 16             	lea    eax,[esi+edx*1]
c00021ee:	39 ca                	cmp    edx,ecx
c00021f0:	73 19                	jae    c000220b <gen_numname+0xa5>
c00021f2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00021f5:	83 f8 20             	cmp    eax,0x20
c00021f8:	74 11                	je     c000220b <gen_numname+0xa5>
c00021fa:	e8 58 fc ff ff       	call   c0001e57 <dbc_1st>
c00021ff:	85 c0                	test   eax,eax
c0002201:	74 05                	je     c0002208 <gen_numname+0xa2>
c0002203:	39 d3                	cmp    ebx,edx
c0002205:	74 04                	je     c000220b <gen_numname+0xa5>
c0002207:	42                   	inc    edx
c0002208:	42                   	inc    edx
c0002209:	eb e0                	jmp    c00021eb <gen_numname+0x85>
c000220b:	b0 20                	mov    al,0x20
c000220d:	83 f9 07             	cmp    ecx,0x7
c0002210:	77 05                	ja     c0002217 <gen_numname+0xb1>
c0002212:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002216:	41                   	inc    ecx
c0002217:	42                   	inc    edx
c0002218:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c000221c:	83 fa 07             	cmp    edx,0x7
c000221f:	76 ea                	jbe    c000220b <gen_numname+0xa5>
c0002221:	83 c4 10             	add    esp,0x10
c0002224:	5b                   	pop    ebx
c0002225:	5e                   	pop    esi
c0002226:	5f                   	pop    edi
c0002227:	c3                   	ret    

c0002228 <sum_sfn>:
c0002228:	53                   	push   ebx
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	31 db                	xor    ebx,ebx
c000222d:	0f b6 d1             	movzx  edx,cl
c0002230:	c1 e1 07             	shl    ecx,0x7
c0002233:	d1 ea                	shr    edx,1
c0002235:	09 ca                	or     edx,ecx
c0002237:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c000223a:	43                   	inc    ebx
c000223b:	01 ca                	add    edx,ecx
c000223d:	83 fb 0b             	cmp    ebx,0xb
c0002240:	88 d1                	mov    cl,dl
c0002242:	75 e9                	jne    c000222d <sum_sfn+0x5>
c0002244:	88 d0                	mov    al,dl
c0002246:	5b                   	pop    ebx
c0002247:	c3                   	ret    

c0002248 <get_ldnumber>:
c0002248:	8b 10                	mov    edx,DWORD PTR [eax]
c000224a:	85 d2                	test   edx,edx
c000224c:	74 14                	je     c0002262 <get_ldnumber+0x1a>
c000224e:	56                   	push   esi
c000224f:	53                   	push   ebx
c0002250:	89 d3                	mov    ebx,edx
c0002252:	43                   	inc    ebx
c0002253:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002256:	80 f9 1f             	cmp    cl,0x1f
c0002259:	76 0d                	jbe    c0002268 <get_ldnumber+0x20>
c000225b:	80 f9 3a             	cmp    cl,0x3a
c000225e:	75 f2                	jne    c0002252 <get_ldnumber+0xa>
c0002260:	eb 0a                	jmp    c000226c <get_ldnumber+0x24>
c0002262:	83 c9 ff             	or     ecx,0xffffffff
c0002265:	89 c8                	mov    eax,ecx
c0002267:	c3                   	ret    
c0002268:	31 c9                	xor    ecx,ecx
c000226a:	eb 24                	jmp    c0002290 <get_ldnumber+0x48>
c000226c:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000226f:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002272:	80 f9 09             	cmp    cl,0x9
c0002275:	77 16                	ja     c000228d <get_ldnumber+0x45>
c0002277:	83 c2 02             	add    edx,0x2
c000227a:	83 c9 ff             	or     ecx,0xffffffff
c000227d:	39 d3                	cmp    ebx,edx
c000227f:	75 0f                	jne    c0002290 <get_ldnumber+0x48>
c0002281:	89 f2                	mov    edx,esi
c0002283:	89 18                	mov    DWORD PTR [eax],ebx
c0002285:	0f be ca             	movsx  ecx,dl
c0002288:	83 e9 30             	sub    ecx,0x30
c000228b:	eb 03                	jmp    c0002290 <get_ldnumber+0x48>
c000228d:	83 c9 ff             	or     ecx,0xffffffff
c0002290:	89 c8                	mov    eax,ecx
c0002292:	5b                   	pop    ebx
c0002293:	5e                   	pop    esi
c0002294:	c3                   	ret    

c0002295 <validate>:
c0002295:	56                   	push   esi
c0002296:	53                   	push   ebx
c0002297:	89 d6                	mov    esi,edx
c0002299:	51                   	push   ecx
c000229a:	85 c0                	test   eax,eax
c000229c:	75 09                	jne    c00022a7 <validate+0x12>
c000229e:	b8 09 00 00 00       	mov    eax,0x9
c00022a3:	31 c9                	xor    ecx,ecx
c00022a5:	eb 2e                	jmp    c00022d5 <validate+0x40>
c00022a7:	89 c3                	mov    ebx,eax
c00022a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00022ab:	85 c0                	test   eax,eax
c00022ad:	74 ef                	je     c000229e <validate+0x9>
c00022af:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00022b2:	74 ea                	je     c000229e <validate+0x9>
c00022b4:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00022b7:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00022bb:	75 e1                	jne    c000229e <validate+0x9>
c00022bd:	83 ec 0c             	sub    esp,0xc
c00022c0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022c4:	50                   	push   eax
c00022c5:	e8 bc fa ff ff       	call   c0001d86 <disk_status>
c00022ca:	83 c4 10             	add    esp,0x10
c00022cd:	a8 01                	test   al,0x1
c00022cf:	75 cd                	jne    c000229e <validate+0x9>
c00022d1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00022d3:	31 c0                	xor    eax,eax
c00022d5:	89 0e                	mov    DWORD PTR [esi],ecx
c00022d7:	5a                   	pop    edx
c00022d8:	5b                   	pop    ebx
c00022d9:	5e                   	pop    esi
c00022da:	c3                   	ret    

c00022db <sync_window>:
c00022db:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00022df:	74 58                	je     c0002339 <sync_window+0x5e>
c00022e1:	56                   	push   esi
c00022e2:	53                   	push   ebx
c00022e3:	8d 70 34             	lea    esi,[eax+0x34]
c00022e6:	51                   	push   ecx
c00022e7:	89 c3                	mov    ebx,eax
c00022e9:	6a 01                	push   0x1
c00022eb:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00022ee:	56                   	push   esi
c00022ef:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022f3:	50                   	push   eax
c00022f4:	e8 a9 fa ff ff       	call   c0001da2 <disk_write>
c00022f9:	83 c4 10             	add    esp,0x10
c00022fc:	ba 01 00 00 00       	mov    edx,0x1
c0002301:	85 c0                	test   eax,eax
c0002303:	75 2e                	jne    c0002333 <sync_window+0x58>
c0002305:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002308:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000230b:	89 c1                	mov    ecx,eax
c000230d:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002311:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c0002314:	39 d1                	cmp    ecx,edx
c0002316:	73 19                	jae    c0002331 <sync_window+0x56>
c0002318:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000231c:	75 13                	jne    c0002331 <sync_window+0x56>
c000231e:	6a 01                	push   0x1
c0002320:	01 d0                	add    eax,edx
c0002322:	50                   	push   eax
c0002323:	56                   	push   esi
c0002324:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002328:	50                   	push   eax
c0002329:	e8 74 fa ff ff       	call   c0001da2 <disk_write>
c000232e:	83 c4 10             	add    esp,0x10
c0002331:	31 d2                	xor    edx,edx
c0002333:	89 d0                	mov    eax,edx
c0002335:	5a                   	pop    edx
c0002336:	5b                   	pop    ebx
c0002337:	5e                   	pop    esi
c0002338:	c3                   	ret    
c0002339:	31 d2                	xor    edx,edx
c000233b:	89 d0                	mov    eax,edx
c000233d:	c3                   	ret    

c000233e <move_window>:
c000233e:	57                   	push   edi
c000233f:	56                   	push   esi
c0002340:	31 f6                	xor    esi,esi
c0002342:	53                   	push   ebx
c0002343:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002346:	74 32                	je     c000237a <move_window+0x3c>
c0002348:	89 c3                	mov    ebx,eax
c000234a:	89 d7                	mov    edi,edx
c000234c:	e8 8a ff ff ff       	call   c00022db <sync_window>
c0002351:	89 c6                	mov    esi,eax
c0002353:	85 c0                	test   eax,eax
c0002355:	75 23                	jne    c000237a <move_window+0x3c>
c0002357:	6a 01                	push   0x1
c0002359:	8d 43 34             	lea    eax,[ebx+0x34]
c000235c:	57                   	push   edi
c000235d:	50                   	push   eax
c000235e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002362:	50                   	push   eax
c0002363:	e8 24 fa ff ff       	call   c0001d8c <disk_read>
c0002368:	83 c4 10             	add    esp,0x10
c000236b:	85 c0                	test   eax,eax
c000236d:	74 08                	je     c0002377 <move_window+0x39>
c000236f:	be 01 00 00 00       	mov    esi,0x1
c0002374:	83 cf ff             	or     edi,0xffffffff
c0002377:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c000237a:	89 f0                	mov    eax,esi
c000237c:	5b                   	pop    ebx
c000237d:	5e                   	pop    esi
c000237e:	5f                   	pop    edi
c000237f:	c3                   	ret    

c0002380 <check_fs>:
c0002380:	53                   	push   ebx
c0002381:	89 c3                	mov    ebx,eax
c0002383:	83 ec 08             	sub    esp,0x8
c0002386:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000238a:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002391:	e8 a8 ff ff ff       	call   c000233e <move_window>
c0002396:	ba 04 00 00 00       	mov    edx,0x4
c000239b:	85 c0                	test   eax,eax
c000239d:	75 68                	jne    c0002407 <check_fs+0x87>
c000239f:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00023a5:	e8 2d fa ff ff       	call   c0001dd7 <ld_word>
c00023aa:	ba 03 00 00 00       	mov    edx,0x3
c00023af:	66 3d 55 aa          	cmp    ax,0xaa55
c00023b3:	75 52                	jne    c0002407 <check_fs+0x87>
c00023b5:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00023b8:	8d 50 18             	lea    edx,[eax+0x18]
c00023bb:	80 fa 01             	cmp    dl,0x1
c00023be:	76 09                	jbe    c00023c9 <check_fs+0x49>
c00023c0:	ba 02 00 00 00       	mov    edx,0x2
c00023c5:	3c eb                	cmp    al,0xeb
c00023c7:	75 3e                	jne    c0002407 <check_fs+0x87>
c00023c9:	ba c4 29 02 c0       	mov    edx,0xc00229c4
c00023ce:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00023d1:	b9 03 00 00 00       	mov    ecx,0x3
c00023d6:	e8 48 fa ff ff       	call   c0001e23 <mem_cmp>
c00023db:	31 d2                	xor    edx,edx
c00023dd:	85 c0                	test   eax,eax
c00023df:	74 26                	je     c0002407 <check_fs+0x87>
c00023e1:	ba 9c 01 02 c0       	mov    edx,0xc002019c
c00023e6:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00023ec:	b9 05 00 00 00       	mov    ecx,0x5
c00023f1:	e8 2d fa ff ff       	call   c0001e23 <mem_cmp>
c00023f6:	31 d2                	xor    edx,edx
c00023f8:	85 c0                	test   eax,eax
c00023fa:	74 0b                	je     c0002407 <check_fs+0x87>
c00023fc:	31 d2                	xor    edx,edx
c00023fe:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002402:	0f 95 c2             	setne  dl
c0002405:	01 d2                	add    edx,edx
c0002407:	89 d0                	mov    eax,edx
c0002409:	83 c4 08             	add    esp,0x8
c000240c:	5b                   	pop    ebx
c000240d:	c3                   	ret    

c000240e <find_volume>:
c000240e:	55                   	push   ebp
c000240f:	57                   	push   edi
c0002410:	56                   	push   esi
c0002411:	89 c6                	mov    esi,eax
c0002413:	53                   	push   ebx
c0002414:	89 d3                	mov    ebx,edx
c0002416:	83 ec 2c             	sub    esp,0x2c
c0002419:	31 d2                	xor    edx,edx
c000241b:	e8 60 ff ff ff       	call   c0002380 <check_fs>
c0002420:	83 f8 02             	cmp    eax,0x2
c0002423:	74 06                	je     c000242b <find_volume+0x1d>
c0002425:	77 62                	ja     c0002489 <find_volume+0x7b>
c0002427:	85 db                	test   ebx,ebx
c0002429:	74 5e                	je     c0002489 <find_volume+0x7b>
c000242b:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c000242f:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002435:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c000243b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000243f:	89 cf                	mov    edi,ecx
c0002441:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002445:	89 e8                	mov    eax,ebp
c0002447:	83 c5 10             	add    ebp,0x10
c000244a:	e8 95 f9 ff ff       	call   c0001de4 <ld_dword>
c000244f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002453:	89 01                	mov    DWORD PTR [ecx],eax
c0002455:	83 c1 04             	add    ecx,0x4
c0002458:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000245c:	75 e3                	jne    c0002441 <find_volume+0x33>
c000245e:	31 ed                	xor    ebp,ebp
c0002460:	85 db                	test   ebx,ebx
c0002462:	74 03                	je     c0002467 <find_volume+0x59>
c0002464:	8d 6b ff             	lea    ebp,[ebx-0x1]
c0002467:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c000246a:	b8 03 00 00 00       	mov    eax,0x3
c000246f:	85 d2                	test   edx,edx
c0002471:	74 0c                	je     c000247f <find_volume+0x71>
c0002473:	89 f0                	mov    eax,esi
c0002475:	e8 06 ff ff ff       	call   c0002380 <check_fs>
c000247a:	83 f8 01             	cmp    eax,0x1
c000247d:	76 0a                	jbe    c0002489 <find_volume+0x7b>
c000247f:	85 db                	test   ebx,ebx
c0002481:	75 06                	jne    c0002489 <find_volume+0x7b>
c0002483:	45                   	inc    ebp
c0002484:	83 fd 03             	cmp    ebp,0x3
c0002487:	76 de                	jbe    c0002467 <find_volume+0x59>
c0002489:	83 c4 2c             	add    esp,0x2c
c000248c:	5b                   	pop    ebx
c000248d:	5e                   	pop    esi
c000248e:	5f                   	pop    edi
c000248f:	5d                   	pop    ebp
c0002490:	c3                   	ret    

c0002491 <mount_volume>:
c0002491:	55                   	push   ebp
c0002492:	89 d5                	mov    ebp,edx
c0002494:	57                   	push   edi
c0002495:	89 cf                	mov    edi,ecx
c0002497:	56                   	push   esi
c0002498:	53                   	push   ebx
c0002499:	bb 0b 00 00 00       	mov    ebx,0xb
c000249e:	83 ec 1c             	sub    esp,0x1c
c00024a1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024a7:	e8 9c fd ff ff       	call   c0002248 <get_ldnumber>
c00024ac:	85 c0                	test   eax,eax
c00024ae:	0f 88 c4 02 00 00    	js     c0002778 <mount_volume+0x2e7>
c00024b4:	8b 34 85 a0 54 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdab60]
c00024bb:	89 c2                	mov    edx,eax
c00024bd:	bb 0c 00 00 00       	mov    ebx,0xc
c00024c2:	85 f6                	test   esi,esi
c00024c4:	0f 84 ae 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c00024ca:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00024cd:	83 e7 fe             	and    edi,0xfffffffe
c00024d0:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00024d3:	74 3a                	je     c000250f <mount_volume+0x7e>
c00024d5:	89 04 24             	mov    DWORD PTR [esp],eax
c00024d8:	83 ec 0c             	sub    esp,0xc
c00024db:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00024df:	50                   	push   eax
c00024e0:	e8 a1 f8 ff ff       	call   c0001d86 <disk_status>
c00024e5:	83 c4 10             	add    esp,0x10
c00024e8:	a8 01                	test   al,0x1
c00024ea:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00024ed:	75 20                	jne    c000250f <mount_volume+0x7e>
c00024ef:	31 db                	xor    ebx,ebx
c00024f1:	81 e7 fe 00 00 00    	and    edi,0xfe
c00024f7:	0f 84 7b 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c00024fd:	a8 04                	test   al,0x4
c00024ff:	0f 84 73 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c0002505:	bb 0a 00 00 00       	mov    ebx,0xa
c000250a:	e9 69 02 00 00       	jmp    c0002778 <mount_volume+0x2e7>
c000250f:	83 ec 0c             	sub    esp,0xc
c0002512:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002515:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c0002518:	0f b6 c2             	movzx  eax,dl
c000251b:	bb 03 00 00 00       	mov    ebx,0x3
c0002520:	50                   	push   eax
c0002521:	e8 63 f8 ff ff       	call   c0001d89 <disk_initialize>
c0002526:	83 c4 10             	add    esp,0x10
c0002529:	a8 01                	test   al,0x1
c000252b:	0f 85 47 02 00 00    	jne    c0002778 <mount_volume+0x2e7>
c0002531:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002537:	74 04                	je     c000253d <mount_volume+0xac>
c0002539:	a8 04                	test   al,0x4
c000253b:	75 c8                	jne    c0002505 <mount_volume+0x74>
c000253d:	31 d2                	xor    edx,edx
c000253f:	89 f0                	mov    eax,esi
c0002541:	bb 01 00 00 00       	mov    ebx,0x1
c0002546:	e8 c3 fe ff ff       	call   c000240e <find_volume>
c000254b:	83 f8 04             	cmp    eax,0x4
c000254e:	0f 84 24 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c0002554:	83 f8 01             	cmp    eax,0x1
c0002557:	76 0a                	jbe    c0002563 <mount_volume+0xd2>
c0002559:	bb 0d 00 00 00       	mov    ebx,0xd
c000255e:	e9 15 02 00 00       	jmp    c0002778 <mount_volume+0x2e7>
c0002563:	8d 46 3f             	lea    eax,[esi+0x3f]
c0002566:	e8 6c f8 ff ff       	call   c0001dd7 <ld_word>
c000256b:	66 3d 00 02          	cmp    ax,0x200
c000256f:	75 e8                	jne    c0002559 <mount_volume+0xc8>
c0002571:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002574:	e8 5e f8 ff ff       	call   c0001dd7 <ld_word>
c0002579:	0f b7 c0             	movzx  eax,ax
c000257c:	89 04 24             	mov    DWORD PTR [esp],eax
c000257f:	85 c0                	test   eax,eax
c0002581:	75 0b                	jne    c000258e <mount_volume+0xfd>
c0002583:	8d 46 58             	lea    eax,[esi+0x58]
c0002586:	e8 59 f8 ff ff       	call   c0001de4 <ld_dword>
c000258b:	89 04 24             	mov    DWORD PTR [esp],eax
c000258e:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c0002591:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002595:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002598:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c000259b:	8a 46 44             	mov    al,BYTE PTR [esi+0x44]
c000259e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00025a2:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00025a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00025a9:	48                   	dec    eax
c00025aa:	3c 01                	cmp    al,0x1
c00025ac:	77 ab                	ja     c0002559 <mount_volume+0xc8>
c00025ae:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00025b2:	89 c3                	mov    ebx,eax
c00025b4:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00025b8:	66 85 c0             	test   ax,ax
c00025bb:	74 9c                	je     c0002559 <mount_volume+0xc8>
c00025bd:	8d 40 ff             	lea    eax,[eax-0x1]
c00025c0:	85 d8                	test   eax,ebx
c00025c2:	75 95                	jne    c0002559 <mount_volume+0xc8>
c00025c4:	8d 46 45             	lea    eax,[esi+0x45]
c00025c7:	e8 0b f8 ff ff       	call   c0001dd7 <ld_word>
c00025cc:	89 c7                	mov    edi,eax
c00025ce:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00025d2:	a8 0f                	test   al,0xf
c00025d4:	75 83                	jne    c0002559 <mount_volume+0xc8>
c00025d6:	8d 46 47             	lea    eax,[esi+0x47]
c00025d9:	e8 f9 f7 ff ff       	call   c0001dd7 <ld_word>
c00025de:	0f b7 e8             	movzx  ebp,ax
c00025e1:	85 ed                	test   ebp,ebp
c00025e3:	75 0a                	jne    c00025ef <mount_volume+0x15e>
c00025e5:	8d 46 54             	lea    eax,[esi+0x54]
c00025e8:	e8 f7 f7 ff ff       	call   c0001de4 <ld_dword>
c00025ed:	89 c5                	mov    ebp,eax
c00025ef:	8d 46 42             	lea    eax,[esi+0x42]
c00025f2:	e8 e0 f7 ff ff       	call   c0001dd7 <ld_word>
c00025f7:	0f b7 c8             	movzx  ecx,ax
c00025fa:	85 c9                	test   ecx,ecx
c00025fc:	0f 84 57 ff ff ff    	je     c0002559 <mount_volume+0xc8>
c0002602:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002607:	0f af 04 24          	imul   eax,DWORD PTR [esp]
c000260b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000260f:	0f b7 c7             	movzx  eax,di
c0002612:	c1 e8 04             	shr    eax,0x4
c0002615:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0002619:	01 c8                	add    eax,ecx
c000261b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000261f:	39 c5                	cmp    ebp,eax
c0002621:	0f 82 32 ff ff ff    	jb     c0002559 <mount_volume+0xc8>
c0002627:	29 c5                	sub    ebp,eax
c0002629:	31 d2                	xor    edx,edx
c000262b:	89 e8                	mov    eax,ebp
c000262d:	f7 f3                	div    ebx
c000262f:	39 dd                	cmp    ebp,ebx
c0002631:	0f 82 22 ff ff ff    	jb     c0002559 <mount_volume+0xc8>
c0002637:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c000263c:	0f 87 17 ff ff ff    	ja     c0002559 <mount_volume+0xc8>
c0002642:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002647:	0f 86 1c 01 00 00    	jbe    c0002769 <mount_volume+0x2d8>
c000264d:	bb 03 00 00 00       	mov    ebx,0x3
c0002652:	8d 68 02             	lea    ebp,[eax+0x2]
c0002655:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002659:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000265d:	03 54 24 04          	add    edx,DWORD PTR [esp+0x4]
c0002661:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002664:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002667:	01 c8                	add    eax,ecx
c0002669:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c000266c:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000266f:	83 fb 03             	cmp    ebx,0x3
c0002672:	75 23                	jne    c0002697 <mount_volume+0x206>
c0002674:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002677:	e8 5b f7 ff ff       	call   c0001dd7 <ld_word>
c000267c:	09 c7                	or     edi,eax
c000267e:	66 85 ff             	test   di,di
c0002681:	0f 85 d2 fe ff ff    	jne    c0002559 <mount_volume+0xc8>
c0002687:	8d 46 60             	lea    eax,[esi+0x60]
c000268a:	c1 e5 02             	shl    ebp,0x2
c000268d:	e8 52 f7 ff ff       	call   c0001de4 <ld_dword>
c0002692:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002695:	eb 24                	jmp    c00026bb <mount_volume+0x22a>
c0002697:	66 85 ff             	test   di,di
c000269a:	0f 84 b9 fe ff ff    	je     c0002559 <mount_volume+0xc8>
c00026a0:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00026a4:	83 fb 02             	cmp    ebx,0x2
c00026a7:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026aa:	75 04                	jne    c00026b0 <mount_volume+0x21f>
c00026ac:	01 ed                	add    ebp,ebp
c00026ae:	eb 0b                	jmp    c00026bb <mount_volume+0x22a>
c00026b0:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00026b4:	83 e5 01             	and    ebp,0x1
c00026b7:	d1 e8                	shr    eax,1
c00026b9:	01 c5                	add    ebp,eax
c00026bb:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00026c1:	c1 ed 09             	shr    ebp,0x9
c00026c4:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c00026c7:	0f 87 8c fe ff ff    	ja     c0002559 <mount_volume+0xc8>
c00026cd:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00026d4:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00026db:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00026df:	83 fb 03             	cmp    ebx,0x3
c00026e2:	75 6e                	jne    c0002752 <mount_volume+0x2c1>
c00026e4:	8d 46 64             	lea    eax,[esi+0x64]
c00026e7:	e8 eb f6 ff ff       	call   c0001dd7 <ld_word>
c00026ec:	66 48                	dec    ax
c00026ee:	75 62                	jne    c0002752 <mount_volume+0x2c1>
c00026f0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00026f4:	89 f0                	mov    eax,esi
c00026f6:	42                   	inc    edx
c00026f7:	e8 42 fc ff ff       	call   c000233e <move_window>
c00026fc:	85 c0                	test   eax,eax
c00026fe:	75 52                	jne    c0002752 <mount_volume+0x2c1>
c0002700:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002704:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c000270a:	e8 c8 f6 ff ff       	call   c0001dd7 <ld_word>
c000270f:	66 3d 55 aa          	cmp    ax,0xaa55
c0002713:	75 3d                	jne    c0002752 <mount_volume+0x2c1>
c0002715:	8d 46 34             	lea    eax,[esi+0x34]
c0002718:	e8 c7 f6 ff ff       	call   c0001de4 <ld_dword>
c000271d:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002722:	75 2e                	jne    c0002752 <mount_volume+0x2c1>
c0002724:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c000272a:	e8 b5 f6 ff ff       	call   c0001de4 <ld_dword>
c000272f:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002734:	75 1c                	jne    c0002752 <mount_volume+0x2c1>
c0002736:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c000273c:	e8 a3 f6 ff ff       	call   c0001de4 <ld_dword>
c0002741:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002744:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c000274a:	e8 95 f6 ff ff       	call   c0001de4 <ld_dword>
c000274f:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0002752:	66 a1 80 54 02 c0    	mov    ax,ds:0xc0025480
c0002758:	88 1e                	mov    BYTE PTR [esi],bl
c000275a:	40                   	inc    eax
c000275b:	31 db                	xor    ebx,ebx
c000275d:	66 a3 80 54 02 c0    	mov    ds:0xc0025480,ax
c0002763:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002767:	eb 0f                	jmp    c0002778 <mount_volume+0x2e7>
c0002769:	3d f6 0f 00 00       	cmp    eax,0xff6
c000276e:	19 db                	sbb    ebx,ebx
c0002770:	83 c3 02             	add    ebx,0x2
c0002773:	e9 da fe ff ff       	jmp    c0002652 <mount_volume+0x1c1>
c0002778:	83 c4 1c             	add    esp,0x1c
c000277b:	89 d8                	mov    eax,ebx
c000277d:	5b                   	pop    ebx
c000277e:	5e                   	pop    esi
c000277f:	5f                   	pop    edi
c0002780:	5d                   	pop    ebp
c0002781:	c3                   	ret    

c0002782 <put_fat>:
c0002782:	55                   	push   ebp
c0002783:	bd 02 00 00 00       	mov    ebp,0x2
c0002788:	57                   	push   edi
c0002789:	56                   	push   esi
c000278a:	53                   	push   ebx
c000278b:	83 ec 1c             	sub    esp,0x1c
c000278e:	83 fa 01             	cmp    edx,0x1
c0002791:	0f 86 38 01 00 00    	jbe    c00028cf <put_fat+0x14d>
c0002797:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c000279a:	0f 86 2f 01 00 00    	jbe    c00028cf <put_fat+0x14d>
c00027a0:	89 c6                	mov    esi,eax
c00027a2:	89 cf                	mov    edi,ecx
c00027a4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00027a7:	89 d3                	mov    ebx,edx
c00027a9:	83 f8 02             	cmp    eax,0x2
c00027ac:	0f 84 b1 00 00 00    	je     c0002863 <put_fat+0xe1>
c00027b2:	83 f8 03             	cmp    eax,0x3
c00027b5:	0f 84 d5 00 00 00    	je     c0002890 <put_fat+0x10e>
c00027bb:	48                   	dec    eax
c00027bc:	0f 85 0d 01 00 00    	jne    c00028cf <put_fat+0x14d>
c00027c2:	89 d1                	mov    ecx,edx
c00027c4:	89 f0                	mov    eax,esi
c00027c6:	d1 e9                	shr    ecx,1
c00027c8:	01 d1                	add    ecx,edx
c00027ca:	89 ca                	mov    edx,ecx
c00027cc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00027d0:	c1 ea 09             	shr    edx,0x9
c00027d3:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027d6:	e8 63 fb ff ff       	call   c000233e <move_window>
c00027db:	89 c5                	mov    ebp,eax
c00027dd:	85 c0                	test   eax,eax
c00027df:	0f 85 ea 00 00 00    	jne    c00028cf <put_fat+0x14d>
c00027e5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00027e9:	8d 46 34             	lea    eax,[esi+0x34]
c00027ec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027f0:	8d 41 01             	lea    eax,[ecx+0x1]
c00027f3:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00027f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027fd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002801:	89 f8                	mov    eax,edi
c0002803:	83 e3 01             	and    ebx,0x1
c0002806:	74 11                	je     c0002819 <put_fat+0x97>
c0002808:	8a 11                	mov    dl,BYTE PTR [ecx]
c000280a:	89 f8                	mov    eax,edi
c000280c:	83 e2 0f             	and    edx,0xf
c000280f:	c1 e0 04             	shl    eax,0x4
c0002812:	25 f0 0f 00 00       	and    eax,0xff0
c0002817:	09 d0                	or     eax,edx
c0002819:	88 01                	mov    BYTE PTR [ecx],al
c000281b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000281f:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002823:	c1 ea 09             	shr    edx,0x9
c0002826:	89 f0                	mov    eax,esi
c0002828:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000282b:	e8 0e fb ff ff       	call   c000233e <move_window>
c0002830:	89 c5                	mov    ebp,eax
c0002832:	85 c0                	test   eax,eax
c0002834:	0f 85 95 00 00 00    	jne    c00028cf <put_fat+0x14d>
c000283a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000283e:	25 ff 01 00 00       	and    eax,0x1ff
c0002843:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002847:	85 db                	test   ebx,ebx
c0002849:	74 07                	je     c0002852 <put_fat+0xd0>
c000284b:	c1 ef 04             	shr    edi,0x4
c000284e:	89 f9                	mov    ecx,edi
c0002850:	eb 0d                	jmp    c000285f <put_fat+0xdd>
c0002852:	8a 08                	mov    cl,BYTE PTR [eax]
c0002854:	c1 ef 08             	shr    edi,0x8
c0002857:	83 e1 f0             	and    ecx,0xfffffff0
c000285a:	83 e7 0f             	and    edi,0xf
c000285d:	09 f9                	or     ecx,edi
c000285f:	88 08                	mov    BYTE PTR [eax],cl
c0002861:	eb 27                	jmp    c000288a <put_fat+0x108>
c0002863:	c1 ea 08             	shr    edx,0x8
c0002866:	89 f0                	mov    eax,esi
c0002868:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000286b:	e8 ce fa ff ff       	call   c000233e <move_window>
c0002870:	89 c5                	mov    ebp,eax
c0002872:	85 c0                	test   eax,eax
c0002874:	75 59                	jne    c00028cf <put_fat+0x14d>
c0002876:	01 db                	add    ebx,ebx
c0002878:	0f b7 d7             	movzx  edx,di
c000287b:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002881:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002885:	e8 72 f5 ff ff       	call   c0001dfc <st_word>
c000288a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c000288e:	eb 3f                	jmp    c00028cf <put_fat+0x14d>
c0002890:	c1 ea 07             	shr    edx,0x7
c0002893:	89 f0                	mov    eax,esi
c0002895:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002898:	e8 a1 fa ff ff       	call   c000233e <move_window>
c000289d:	89 c5                	mov    ebp,eax
c000289f:	85 c0                	test   eax,eax
c00028a1:	75 2c                	jne    c00028cf <put_fat+0x14d>
c00028a3:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00028a9:	c1 e3 02             	shl    ebx,0x2
c00028ac:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00028b2:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00028b6:	89 d8                	mov    eax,ebx
c00028b8:	e8 27 f5 ff ff       	call   c0001de4 <ld_dword>
c00028bd:	25 00 00 00 f0       	and    eax,0xf0000000
c00028c2:	09 f8                	or     eax,edi
c00028c4:	89 c2                	mov    edx,eax
c00028c6:	89 d8                	mov    eax,ebx
c00028c8:	e8 33 f5 ff ff       	call   c0001e00 <st_dword>
c00028cd:	eb bb                	jmp    c000288a <put_fat+0x108>
c00028cf:	83 c4 1c             	add    esp,0x1c
c00028d2:	89 e8                	mov    eax,ebp
c00028d4:	5b                   	pop    ebx
c00028d5:	5e                   	pop    esi
c00028d6:	5f                   	pop    edi
c00028d7:	5d                   	pop    ebp
c00028d8:	c3                   	ret    

c00028d9 <dir_clear>:
c00028d9:	55                   	push   ebp
c00028da:	57                   	push   edi
c00028db:	56                   	push   esi
c00028dc:	89 c6                	mov    esi,eax
c00028de:	53                   	push   ebx
c00028df:	83 ec 1c             	sub    esp,0x1c
c00028e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00028e6:	e8 f0 f9 ff ff       	call   c00022db <sync_window>
c00028eb:	85 c0                	test   eax,eax
c00028ed:	0f 85 c0 00 00 00    	jne    c00029b3 <dir_clear+0xda>
c00028f3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028f7:	89 f0                	mov    eax,esi
c00028f9:	e8 30 f7 ff ff       	call   c000202e <clst2sect>
c00028fe:	31 d2                	xor    edx,edx
c0002900:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002903:	89 c5                	mov    ebp,eax
c0002905:	b9 00 02 00 00       	mov    ecx,0x200
c000290a:	8d 46 34             	lea    eax,[esi+0x34]
c000290d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002911:	e8 02 f5 ff ff       	call   c0001e18 <mem_set>
c0002916:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000291a:	c1 e3 09             	shl    ebx,0x9
c000291d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002923:	76 1b                	jbe    c0002940 <dir_clear+0x67>
c0002925:	bb 00 80 00 00       	mov    ebx,0x8000
c000292a:	eb 14                	jmp    c0002940 <dir_clear+0x67>
c000292c:	83 ec 0c             	sub    esp,0xc
c000292f:	53                   	push   ebx
c0002930:	e8 eb 32 00 00       	call   c0005c20 <ff_memalloc>
c0002935:	83 c4 10             	add    esp,0x10
c0002938:	89 c7                	mov    edi,eax
c000293a:	85 c0                	test   eax,eax
c000293c:	75 7c                	jne    c00029ba <dir_clear+0xe1>
c000293e:	d1 eb                	shr    ebx,1
c0002940:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002946:	77 e4                	ja     c000292c <dir_clear+0x53>
c0002948:	31 db                	xor    ebx,ebx
c000294a:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000294e:	39 d8                	cmp    eax,ebx
c0002950:	76 53                	jbe    c00029a5 <dir_clear+0xcc>
c0002952:	6a 01                	push   0x1
c0002954:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002957:	50                   	push   eax
c0002958:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000295c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002960:	50                   	push   eax
c0002961:	e8 3c f4 ff ff       	call   c0001da2 <disk_write>
c0002966:	83 c4 10             	add    esp,0x10
c0002969:	85 c0                	test   eax,eax
c000296b:	75 38                	jne    c00029a5 <dir_clear+0xcc>
c000296d:	43                   	inc    ebx
c000296e:	eb da                	jmp    c000294a <dir_clear+0x71>
c0002970:	52                   	push   edx
c0002971:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002974:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002978:	50                   	push   eax
c0002979:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000297d:	57                   	push   edi
c000297e:	50                   	push   eax
c000297f:	e8 1e f4 ff ff       	call   c0001da2 <disk_write>
c0002984:	83 c4 10             	add    esp,0x10
c0002987:	85 c0                	test   eax,eax
c0002989:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000298d:	75 0a                	jne    c0002999 <dir_clear+0xc0>
c000298f:	01 d3                	add    ebx,edx
c0002991:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002995:	39 d8                	cmp    eax,ebx
c0002997:	77 d7                	ja     c0002970 <dir_clear+0x97>
c0002999:	83 ec 0c             	sub    esp,0xc
c000299c:	57                   	push   edi
c000299d:	e8 96 32 00 00       	call   c0005c38 <ff_memfree>
c00029a2:	83 c4 10             	add    esp,0x10
c00029a5:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029a9:	39 d8                	cmp    eax,ebx
c00029ab:	0f 95 c0             	setne  al
c00029ae:	0f b6 c0             	movzx  eax,al
c00029b1:	eb 19                	jmp    c00029cc <dir_clear+0xf3>
c00029b3:	b8 01 00 00 00       	mov    eax,0x1
c00029b8:	eb 12                	jmp    c00029cc <dir_clear+0xf3>
c00029ba:	89 d9                	mov    ecx,ebx
c00029bc:	31 d2                	xor    edx,edx
c00029be:	e8 55 f4 ff ff       	call   c0001e18 <mem_set>
c00029c3:	89 da                	mov    edx,ebx
c00029c5:	31 db                	xor    ebx,ebx
c00029c7:	c1 ea 09             	shr    edx,0x9
c00029ca:	eb c5                	jmp    c0002991 <dir_clear+0xb8>
c00029cc:	83 c4 1c             	add    esp,0x1c
c00029cf:	5b                   	pop    ebx
c00029d0:	5e                   	pop    esi
c00029d1:	5f                   	pop    edi
c00029d2:	5d                   	pop    ebp
c00029d3:	c3                   	ret    

c00029d4 <create_name>:
c00029d4:	55                   	push   ebp
c00029d5:	57                   	push   edi
c00029d6:	89 d7                	mov    edi,edx
c00029d8:	56                   	push   esi
c00029d9:	31 f6                	xor    esi,esi
c00029db:	53                   	push   ebx
c00029dc:	83 ec 3c             	sub    esp,0x3c
c00029df:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00029e3:	8b 02                	mov    eax,DWORD PTR [edx]
c00029e5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00029e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00029ef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00029f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00029f6:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00029fa:	e8 5e f4 ff ff       	call   c0001e5d <tchar2uni>
c00029ff:	89 c3                	mov    ebx,eax
c0002a01:	83 f8 ff             	cmp    eax,0xffffffff
c0002a04:	75 0a                	jne    c0002a10 <create_name+0x3c>
c0002a06:	b8 06 00 00 00       	mov    eax,0x6
c0002a0b:	e9 93 02 00 00       	jmp    c0002ca3 <create_name+0x2cf>
c0002a10:	3d ff ff 00 00       	cmp    eax,0xffff
c0002a15:	76 0c                	jbe    c0002a23 <create_name+0x4f>
c0002a17:	c1 e8 10             	shr    eax,0x10
c0002a1a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a1e:	66 89 04 72          	mov    WORD PTR [edx+esi*2],ax
c0002a22:	46                   	inc    esi
c0002a23:	0f b7 d3             	movzx  edx,bx
c0002a26:	83 fa 1f             	cmp    edx,0x1f
c0002a29:	76 4a                	jbe    c0002a75 <create_name+0xa1>
c0002a2b:	83 fa 5c             	cmp    edx,0x5c
c0002a2e:	74 30                	je     c0002a60 <create_name+0x8c>
c0002a30:	83 fa 2f             	cmp    edx,0x2f
c0002a33:	74 2b                	je     c0002a60 <create_name+0x8c>
c0002a35:	83 fa 7f             	cmp    edx,0x7f
c0002a38:	77 0e                	ja     c0002a48 <create_name+0x74>
c0002a3a:	b8 a2 01 02 c0       	mov    eax,0xc00201a2
c0002a3f:	e8 02 f4 ff ff       	call   c0001e46 <chk_chr>
c0002a44:	85 c0                	test   eax,eax
c0002a46:	75 be                	jne    c0002a06 <create_name+0x32>
c0002a48:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002a4e:	77 b6                	ja     c0002a06 <create_name+0x32>
c0002a50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a54:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002a58:	46                   	inc    esi
c0002a59:	eb 9b                	jmp    c00029f6 <create_name+0x22>
c0002a5b:	40                   	inc    eax
c0002a5c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a60:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002a64:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002a67:	83 fa 2f             	cmp    edx,0x2f
c0002a6a:	74 ef                	je     c0002a5b <create_name+0x87>
c0002a6c:	83 fa 5c             	cmp    edx,0x5c
c0002a6f:	74 ea                	je     c0002a5b <create_name+0x87>
c0002a71:	31 db                	xor    ebx,ebx
c0002a73:	eb 02                	jmp    c0002a77 <create_name+0xa3>
c0002a75:	b3 04                	mov    bl,0x4
c0002a77:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002a7b:	89 07                	mov    DWORD PTR [edi],eax
c0002a7d:	85 f6                	test   esi,esi
c0002a7f:	74 16                	je     c0002a97 <create_name+0xc3>
c0002a81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a85:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002a8a:	83 f8 20             	cmp    eax,0x20
c0002a8d:	74 05                	je     c0002a94 <create_name+0xc0>
c0002a8f:	83 f8 2e             	cmp    eax,0x2e
c0002a92:	75 03                	jne    c0002a97 <create_name+0xc3>
c0002a94:	4e                   	dec    esi
c0002a95:	eb e6                	jmp    c0002a7d <create_name+0xa9>
c0002a97:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a9b:	31 ff                	xor    edi,edi
c0002a9d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002aa3:	85 f6                	test   esi,esi
c0002aa5:	0f 84 5b ff ff ff    	je     c0002a06 <create_name+0x32>
c0002aab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aaf:	8d 57 01             	lea    edx,[edi+0x1]
c0002ab2:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002ab6:	83 f8 20             	cmp    eax,0x20
c0002ab9:	75 04                	jne    c0002abf <create_name+0xeb>
c0002abb:	89 d7                	mov    edi,edx
c0002abd:	eb ec                	jmp    c0002aab <create_name+0xd7>
c0002abf:	85 ff                	test   edi,edi
c0002ac1:	75 05                	jne    c0002ac8 <create_name+0xf4>
c0002ac3:	83 f8 2e             	cmp    eax,0x2e
c0002ac6:	75 08                	jne    c0002ad0 <create_name+0xfc>
c0002ac8:	83 cb 03             	or     ebx,0x3
c0002acb:	eb 03                	jmp    c0002ad0 <create_name+0xfc>
c0002acd:	4e                   	dec    esi
c0002ace:	74 0c                	je     c0002adc <create_name+0x108>
c0002ad0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ad4:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002ada:	75 f1                	jne    c0002acd <create_name+0xf9>
c0002adc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002ae0:	b9 0b 00 00 00       	mov    ecx,0xb
c0002ae5:	83 c0 20             	add    eax,0x20
c0002ae8:	ba 20 00 00 00       	mov    edx,0x20
c0002aed:	31 ed                	xor    ebp,ebp
c0002aef:	e8 24 f3 ff ff       	call   c0001e18 <mem_set>
c0002af4:	b9 08 00 00 00       	mov    ecx,0x8
c0002af9:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002afe:	8d 47 01             	lea    eax,[edi+0x1]
c0002b01:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002b05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b09:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b0d:	89 c7                	mov    edi,eax
c0002b0f:	85 c0                	test   eax,eax
c0002b11:	0f 84 25 01 00 00    	je     c0002c3c <create_name+0x268>
c0002b17:	83 f8 20             	cmp    eax,0x20
c0002b1a:	74 0f                	je     c0002b2b <create_name+0x157>
c0002b1c:	83 f8 2e             	cmp    eax,0x2e
c0002b1f:	75 13                	jne    c0002b34 <create_name+0x160>
c0002b21:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b25:	0f 84 6a 01 00 00    	je     c0002c95 <create_name+0x2c1>
c0002b2b:	83 cb 03             	or     ebx,0x3
c0002b2e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0002b32:	eb ca                	jmp    c0002afe <create_name+0x12a>
c0002b34:	39 cd                	cmp    ebp,ecx
c0002b36:	73 0b                	jae    c0002b43 <create_name+0x16f>
c0002b38:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b3c:	75 3f                	jne    c0002b7d <create_name+0x1a9>
c0002b3e:	e9 52 01 00 00       	jmp    c0002c95 <create_name+0x2c1>
c0002b43:	83 f9 0b             	cmp    ecx,0xb
c0002b46:	75 0d                	jne    c0002b55 <create_name+0x181>
c0002b48:	83 cb 03             	or     ebx,0x3
c0002b4b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b50:	e9 e7 00 00 00       	jmp    c0002c3c <create_name+0x268>
c0002b55:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b59:	74 0d                	je     c0002b68 <create_name+0x194>
c0002b5b:	83 cb 03             	or     ebx,0x3
c0002b5e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b62:	0f 87 d4 00 00 00    	ja     c0002c3c <create_name+0x268>
c0002b68:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002b6d:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002b71:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b76:	bd 08 00 00 00       	mov    ebp,0x8
c0002b7b:	eb b1                	jmp    c0002b2e <create_name+0x15a>
c0002b7d:	83 f8 7f             	cmp    eax,0x7f
c0002b80:	76 66                	jbe    c0002be8 <create_name+0x214>
c0002b82:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002b86:	89 d9                	mov    ecx,ebx
c0002b88:	83 c9 02             	or     ecx,0x2
c0002b8b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b8f:	52                   	push   edx
c0002b90:	52                   	push   edx
c0002b91:	68 b5 01 00 00       	push   0x1b5
c0002b96:	50                   	push   eax
c0002b97:	e8 b4 30 00 00       	call   c0005c50 <ff_uni2oem>
c0002b9c:	83 c4 10             	add    esp,0x10
c0002b9f:	89 c7                	mov    edi,eax
c0002ba1:	a8 80                	test   al,0x80
c0002ba3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002ba7:	74 0c                	je     c0002bb5 <create_name+0x1e1>
c0002ba9:	83 e7 7f             	and    edi,0x7f
c0002bac:	0f b6 bf 60 02 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffdfda0]
c0002bb3:	eb 2a                	jmp    c0002bdf <create_name+0x20b>
c0002bb5:	0f b7 c0             	movzx  eax,ax
c0002bb8:	3d ff 00 00 00       	cmp    eax,0xff
c0002bbd:	76 20                	jbe    c0002bdf <create_name+0x20b>
c0002bbf:	8d 51 ff             	lea    edx,[ecx-0x1]
c0002bc2:	39 ea                	cmp    edx,ebp
c0002bc4:	77 0a                	ja     c0002bd0 <create_name+0x1fc>
c0002bc6:	83 cb 03             	or     ebx,0x3
c0002bc9:	89 cd                	mov    ebp,ecx
c0002bcb:	e9 5e ff ff ff       	jmp    c0002b2e <create_name+0x15a>
c0002bd0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0002bd4:	88 64 2b 20          	mov    BYTE PTR [ebx+ebp*1+0x20],ah
c0002bd8:	45                   	inc    ebp
c0002bd9:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002bdd:	eb 4d                	jmp    c0002c2c <create_name+0x258>
c0002bdf:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002be3:	66 85 ff             	test   di,di
c0002be6:	74 19                	je     c0002c01 <create_name+0x22d>
c0002be8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002bec:	0f b7 d7             	movzx  edx,di
c0002bef:	b8 ab 01 02 c0       	mov    eax,0xc00201ab
c0002bf4:	e8 4d f2 ff ff       	call   c0001e46 <chk_chr>
c0002bf9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002bfd:	85 c0                	test   eax,eax
c0002bff:	74 0a                	je     c0002c0b <create_name+0x237>
c0002c01:	83 cb 03             	or     ebx,0x3
c0002c04:	bf 5f 00 00 00       	mov    edi,0x5f
c0002c09:	eb 21                	jmp    c0002c2c <create_name+0x258>
c0002c0b:	8d 47 bf             	lea    eax,[edi-0x41]
c0002c0e:	66 83 f8 19          	cmp    ax,0x19
c0002c12:	77 07                	ja     c0002c1b <create_name+0x247>
c0002c14:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002c19:	eb 11                	jmp    c0002c2c <create_name+0x258>
c0002c1b:	8d 47 9f             	lea    eax,[edi-0x61]
c0002c1e:	66 83 f8 19          	cmp    ax,0x19
c0002c22:	77 08                	ja     c0002c2c <create_name+0x258>
c0002c24:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002c29:	83 ef 20             	sub    edi,0x20
c0002c2c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002c30:	89 f8                	mov    eax,edi
c0002c32:	88 44 2a 20          	mov    BYTE PTR [edx+ebp*1+0x20],al
c0002c36:	45                   	inc    ebp
c0002c37:	e9 f2 fe ff ff       	jmp    c0002b2e <create_name+0x15a>
c0002c3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002c40:	80 78 20 e5          	cmp    BYTE PTR [eax+0x20],0xe5
c0002c44:	75 04                	jne    c0002c4a <create_name+0x276>
c0002c46:	c6 40 20 05          	mov    BYTE PTR [eax+0x20],0x5
c0002c4a:	83 f9 08             	cmp    ecx,0x8
c0002c4d:	75 05                	jne    c0002c54 <create_name+0x280>
c0002c4f:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002c54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c58:	83 e0 0c             	and    eax,0xc
c0002c5b:	83 f8 0c             	cmp    eax,0xc
c0002c5e:	74 0c                	je     c0002c6c <create_name+0x298>
c0002c60:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c64:	83 e0 03             	and    eax,0x3
c0002c67:	83 f8 03             	cmp    eax,0x3
c0002c6a:	75 05                	jne    c0002c71 <create_name+0x29d>
c0002c6c:	83 cb 02             	or     ebx,0x2
c0002c6f:	eb 19                	jmp    c0002c8a <create_name+0x2b6>
c0002c71:	f6 c3 02             	test   bl,0x2
c0002c74:	75 14                	jne    c0002c8a <create_name+0x2b6>
c0002c76:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002c7b:	74 03                	je     c0002c80 <create_name+0x2ac>
c0002c7d:	83 cb 10             	or     ebx,0x10
c0002c80:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002c85:	74 03                	je     c0002c8a <create_name+0x2b6>
c0002c87:	83 cb 08             	or     ebx,0x8
c0002c8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002c8e:	88 58 2b             	mov    BYTE PTR [eax+0x2b],bl
c0002c91:	31 c0                	xor    eax,eax
c0002c93:	eb 0e                	jmp    c0002ca3 <create_name+0x2cf>
c0002c95:	83 f9 0b             	cmp    ecx,0xb
c0002c98:	0f 85 ca fe ff ff    	jne    c0002b68 <create_name+0x194>
c0002c9e:	e9 a5 fe ff ff       	jmp    c0002b48 <create_name+0x174>
c0002ca3:	83 c4 3c             	add    esp,0x3c
c0002ca6:	5b                   	pop    ebx
c0002ca7:	5e                   	pop    esi
c0002ca8:	5f                   	pop    edi
c0002ca9:	5d                   	pop    ebp
c0002caa:	c3                   	ret    

c0002cab <cmp_lfn>:
c0002cab:	55                   	push   ebp
c0002cac:	57                   	push   edi
c0002cad:	89 d7                	mov    edi,edx
c0002caf:	56                   	push   esi
c0002cb0:	53                   	push   ebx
c0002cb1:	83 ec 1c             	sub    esp,0x1c
c0002cb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cb8:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002cbb:	e8 17 f1 ff ff       	call   c0001dd7 <ld_word>
c0002cc0:	66 85 c0             	test   ax,ax
c0002cc3:	74 07                	je     c0002ccc <cmp_lfn+0x21>
c0002cc5:	31 c0                	xor    eax,eax
c0002cc7:	e9 a1 00 00 00       	jmp    c0002d6d <cmp_lfn+0xc2>
c0002ccc:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002cce:	bd 01 00 00 00       	mov    ebp,0x1
c0002cd3:	83 e3 3f             	and    ebx,0x3f
c0002cd6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002cde:	4b                   	dec    ebx
c0002cdf:	6b db 0d             	imul   ebx,ebx,0xd
c0002ce2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ce6:	0f b6 80 e0 02 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdfd20]
c0002ced:	01 f8                	add    eax,edi
c0002cef:	e8 e3 f0 ff ff       	call   c0001dd7 <ld_word>
c0002cf4:	66 85 ed             	test   bp,bp
c0002cf7:	89 c6                	mov    esi,eax
c0002cf9:	74 3c                	je     c0002d37 <cmp_lfn+0x8c>
c0002cfb:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002d01:	77 c2                	ja     c0002cc5 <cmp_lfn+0x1a>
c0002d03:	83 ec 0c             	sub    esp,0xc
c0002d06:	0f b7 c0             	movzx  eax,ax
c0002d09:	50                   	push   eax
c0002d0a:	e8 59 30 00 00       	call   c0005d68 <ff_wtoupper>
c0002d0f:	89 c5                	mov    ebp,eax
c0002d11:	8d 43 01             	lea    eax,[ebx+0x1]
c0002d14:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002d18:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002d1c:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002d20:	89 04 24             	mov    DWORD PTR [esp],eax
c0002d23:	e8 40 30 00 00       	call   c0005d68 <ff_wtoupper>
c0002d28:	83 c4 10             	add    esp,0x10
c0002d2b:	39 c5                	cmp    ebp,eax
c0002d2d:	75 96                	jne    c0002cc5 <cmp_lfn+0x1a>
c0002d2f:	89 f5                	mov    ebp,esi
c0002d31:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002d35:	eb 0b                	jmp    c0002d42 <cmp_lfn+0x97>
c0002d37:	0f b7 c8             	movzx  ecx,ax
c0002d3a:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0002d40:	75 83                	jne    c0002cc5 <cmp_lfn+0x1a>
c0002d42:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002d46:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002d4b:	75 95                	jne    c0002ce2 <cmp_lfn+0x37>
c0002d4d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002d50:	74 16                	je     c0002d68 <cmp_lfn+0xbd>
c0002d52:	66 85 ed             	test   bp,bp
c0002d55:	74 11                	je     c0002d68 <cmp_lfn+0xbd>
c0002d57:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d5b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002d60:	0f 94 c0             	sete   al
c0002d63:	0f b6 c0             	movzx  eax,al
c0002d66:	eb 05                	jmp    c0002d6d <cmp_lfn+0xc2>
c0002d68:	b8 01 00 00 00       	mov    eax,0x1
c0002d6d:	83 c4 1c             	add    esp,0x1c
c0002d70:	5b                   	pop    ebx
c0002d71:	5e                   	pop    esi
c0002d72:	5f                   	pop    edi
c0002d73:	5d                   	pop    ebp
c0002d74:	c3                   	ret    

c0002d75 <sync_fs>:
c0002d75:	56                   	push   esi
c0002d76:	53                   	push   ebx
c0002d77:	53                   	push   ebx
c0002d78:	89 c3                	mov    ebx,eax
c0002d7a:	e8 5c f5 ff ff       	call   c00022db <sync_window>
c0002d7f:	85 c0                	test   eax,eax
c0002d81:	0f 85 9a 00 00 00    	jne    c0002e21 <sync_fs+0xac>
c0002d87:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002d8a:	75 7b                	jne    c0002e07 <sync_fs+0x92>
c0002d8c:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002d90:	75 75                	jne    c0002e07 <sync_fs+0x92>
c0002d92:	b9 00 02 00 00       	mov    ecx,0x200
c0002d97:	8d 73 34             	lea    esi,[ebx+0x34]
c0002d9a:	31 d2                	xor    edx,edx
c0002d9c:	89 f0                	mov    eax,esi
c0002d9e:	e8 75 f0 ff ff       	call   c0001e18 <mem_set>
c0002da3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002da9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002dae:	e8 49 f0 ff ff       	call   c0001dfc <st_word>
c0002db3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002db8:	89 f0                	mov    eax,esi
c0002dba:	e8 41 f0 ff ff       	call   c0001e00 <st_dword>
c0002dbf:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002dc5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002dca:	e8 31 f0 ff ff       	call   c0001e00 <st_dword>
c0002dcf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002dd2:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002dd8:	e8 23 f0 ff ff       	call   c0001e00 <st_dword>
c0002ddd:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002de0:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002de6:	e8 15 f0 ff ff       	call   c0001e00 <st_dword>
c0002deb:	6a 01                	push   0x1
c0002ded:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002df0:	40                   	inc    eax
c0002df1:	50                   	push   eax
c0002df2:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002df5:	56                   	push   esi
c0002df6:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002dfa:	50                   	push   eax
c0002dfb:	e8 a2 ef ff ff       	call   c0001da2 <disk_write>
c0002e00:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002e04:	83 c4 10             	add    esp,0x10
c0002e07:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e0b:	51                   	push   ecx
c0002e0c:	6a 00                	push   0x0
c0002e0e:	6a 00                	push   0x0
c0002e10:	50                   	push   eax
c0002e11:	e8 a2 ef ff ff       	call   c0001db8 <disk_ioctl>
c0002e16:	83 c4 10             	add    esp,0x10
c0002e19:	85 c0                	test   eax,eax
c0002e1b:	0f 95 c0             	setne  al
c0002e1e:	0f b6 c0             	movzx  eax,al
c0002e21:	5a                   	pop    edx
c0002e22:	5b                   	pop    ebx
c0002e23:	5e                   	pop    esi
c0002e24:	c3                   	ret    

c0002e25 <create_partition>:
c0002e25:	55                   	push   ebp
c0002e26:	0f b6 c0             	movzx  eax,al
c0002e29:	57                   	push   edi
c0002e2a:	56                   	push   esi
c0002e2b:	53                   	push   ebx
c0002e2c:	83 ec 40             	sub    esp,0x40
c0002e2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002e33:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002e37:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002e3b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002e3f:	50                   	push   eax
c0002e40:	6a 01                	push   0x1
c0002e42:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002e46:	e8 6d ef ff ff       	call   c0001db8 <disk_ioctl>
c0002e4b:	83 c4 10             	add    esp,0x10
c0002e4e:	85 c0                	test   eax,eax
c0002e50:	0f 85 6a 01 00 00    	jne    c0002fc0 <create_partition+0x19b>
c0002e56:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002e5a:	b9 05 00 00 00       	mov    ecx,0x5
c0002e5f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002e63:	be 08 00 00 00       	mov    esi,0x8
c0002e68:	89 f0                	mov    eax,esi
c0002e6a:	31 d2                	xor    edx,edx
c0002e6c:	0f b6 d8             	movzx  ebx,al
c0002e6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e73:	f7 f3                	div    ebx
c0002e75:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002e7a:	76 0a                	jbe    c0002e86 <create_partition+0x61>
c0002e7c:	d1 e6                	shl    esi,1
c0002e7e:	49                   	dec    ecx
c0002e7f:	75 e7                	jne    c0002e68 <create_partition+0x43>
c0002e81:	be ff ff ff ff       	mov    esi,0xffffffff
c0002e86:	b9 00 02 00 00       	mov    ecx,0x200
c0002e8b:	31 d2                	xor    edx,edx
c0002e8d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002e91:	e8 82 ef ff ff       	call   c0001e18 <mem_set>
c0002e96:	b9 64 00 00 00       	mov    ecx,0x64
c0002e9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e9f:	31 d2                	xor    edx,edx
c0002ea1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002ea9:	f7 f1                	div    ecx
c0002eab:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002eb0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002eb4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002eb8:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002ebe:	89 f0                	mov    eax,esi
c0002ec0:	0f b6 c0             	movzx  eax,al
c0002ec3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ec7:	85 c9                	test   ecx,ecx
c0002ec9:	75 34                	jne    c0002eff <create_partition+0xda>
c0002ecb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002ecf:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002ed4:	05 fe 01 00 00       	add    eax,0x1fe
c0002ed9:	e8 1e ef ff ff       	call   c0001dfc <st_word>
c0002ede:	6a 01                	push   0x1
c0002ee0:	6a 00                	push   0x0
c0002ee2:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002ee6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002eea:	e8 b3 ee ff ff       	call   c0001da2 <disk_write>
c0002eef:	83 c4 10             	add    esp,0x10
c0002ef2:	85 c0                	test   eax,eax
c0002ef4:	0f 95 c0             	setne  al
c0002ef7:	0f b6 c0             	movzx  eax,al
c0002efa:	e9 c6 00 00 00       	jmp    c0002fc5 <create_partition+0x1a0>
c0002eff:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002f03:	76 c6                	jbe    c0002ecb <create_partition+0xa6>
c0002f05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f09:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0002f0d:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002f10:	83 fe 64             	cmp    esi,0x64
c0002f13:	77 0d                	ja     c0002f22 <create_partition+0xfd>
c0002f15:	74 07                	je     c0002f1e <create_partition+0xf9>
c0002f17:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002f1c:	eb 04                	jmp    c0002f22 <create_partition+0xfd>
c0002f1e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002f22:	31 c0                	xor    eax,eax
c0002f24:	89 f2                	mov    edx,esi
c0002f26:	01 ca                	add    edx,ecx
c0002f28:	0f 92 c0             	setb   al
c0002f2b:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002f2f:	77 04                	ja     c0002f35 <create_partition+0x110>
c0002f31:	85 c0                	test   eax,eax
c0002f33:	74 08                	je     c0002f3d <create_partition+0x118>
c0002f35:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002f39:	29 ce                	sub    esi,ecx
c0002f3b:	eb 04                	jmp    c0002f41 <create_partition+0x11c>
c0002f3d:	85 f6                	test   esi,esi
c0002f3f:	74 8a                	je     c0002ecb <create_partition+0xa6>
c0002f41:	89 ca                	mov    edx,ecx
c0002f43:	89 d8                	mov    eax,ebx
c0002f45:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f4a:	e8 b1 ee ff ff       	call   c0001e00 <st_dword>
c0002f4f:	8d 43 04             	lea    eax,[ebx+0x4]
c0002f52:	89 f2                	mov    edx,esi
c0002f54:	83 c3 10             	add    ebx,0x10
c0002f57:	e8 a4 ee ff ff       	call   c0001e00 <st_dword>
c0002f5c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002f60:	31 d2                	xor    edx,edx
c0002f62:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002f65:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002f69:	89 c8                	mov    eax,ecx
c0002f6b:	01 f1                	add    ecx,esi
c0002f6d:	f7 f7                	div    edi
c0002f6f:	89 d5                	mov    ebp,edx
c0002f71:	31 d2                	xor    edx,edx
c0002f73:	45                   	inc    ebp
c0002f74:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f78:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002f7b:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002f7e:	89 c2                	mov    edx,eax
c0002f80:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002f83:	c1 ea 02             	shr    edx,0x2
c0002f86:	83 e2 c0             	and    edx,0xffffffc0
c0002f89:	09 ea                	or     edx,ebp
c0002f8b:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002f8e:	31 d2                	xor    edx,edx
c0002f90:	f7 f7                	div    edi
c0002f92:	89 d6                	mov    esi,edx
c0002f94:	31 d2                	xor    edx,edx
c0002f96:	46                   	inc    esi
c0002f97:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f9b:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002f9e:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002fa1:	89 c7                	mov    edi,eax
c0002fa3:	c1 ef 02             	shr    edi,0x2
c0002fa6:	83 e7 c0             	and    edi,0xffffffc0
c0002fa9:	09 fe                	or     esi,edi
c0002fab:	89 f2                	mov    edx,esi
c0002fad:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002fb0:	83 7c 24 08 04       	cmp    DWORD PTR [esp+0x8],0x4
c0002fb5:	0f 85 0c ff ff ff    	jne    c0002ec7 <create_partition+0xa2>
c0002fbb:	e9 0b ff ff ff       	jmp    c0002ecb <create_partition+0xa6>
c0002fc0:	b8 01 00 00 00       	mov    eax,0x1
c0002fc5:	83 c4 3c             	add    esp,0x3c
c0002fc8:	5b                   	pop    ebx
c0002fc9:	5e                   	pop    esi
c0002fca:	5f                   	pop    edi
c0002fcb:	5d                   	pop    ebp
c0002fcc:	c3                   	ret    

c0002fcd <get_fileinfo>:
c0002fcd:	55                   	push   ebp
c0002fce:	57                   	push   edi
c0002fcf:	56                   	push   esi
c0002fd0:	53                   	push   ebx
c0002fd1:	83 ec 1c             	sub    esp,0x1c
c0002fd4:	8b 30                	mov    esi,DWORD PTR [eax]
c0002fd6:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002fda:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002fde:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002fe2:	0f 84 d3 01 00 00    	je     c00031bb <get_fileinfo+0x1ee>
c0002fe8:	89 d3                	mov    ebx,edx
c0002fea:	89 c6                	mov    esi,eax
c0002fec:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002ff0:	74 72                	je     c0003064 <get_fileinfo+0x97>
c0002ff2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002ffa:	31 ed                	xor    ebp,ebp
c0002ffc:	31 ff                	xor    edi,edi
c0002ffe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003002:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0003006:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003009:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c000300d:	89 c2                	mov    edx,eax
c000300f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003013:	85 c0                	test   eax,eax
c0003015:	74 41                	je     c0003058 <get_fileinfo+0x8b>
c0003017:	0f b7 c5             	movzx  eax,bp
c000301a:	85 c0                	test   eax,eax
c000301c:	75 0d                	jne    c000302b <get_fileinfo+0x5e>
c000301e:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c0003024:	66 81 f9 ff 07       	cmp    cx,0x7ff
c0003029:	76 22                	jbe    c000304d <get_fileinfo+0x80>
c000302b:	c1 e0 10             	shl    eax,0x10
c000302e:	b9 ff 00 00 00       	mov    ecx,0xff
c0003033:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0003037:	29 f9                	sub    ecx,edi
c0003039:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c000303d:	e8 f3 ee ff ff       	call   c0001f35 <put_utf>
c0003042:	0f b6 c0             	movzx  eax,al
c0003045:	85 c0                	test   eax,eax
c0003047:	74 0d                	je     c0003056 <get_fileinfo+0x89>
c0003049:	01 c7                	add    edi,eax
c000304b:	31 d2                	xor    edx,edx
c000304d:	83 44 24 04 02       	add    DWORD PTR [esp+0x4],0x2
c0003052:	89 d5                	mov    ebp,edx
c0003054:	eb a8                	jmp    c0002ffe <get_fileinfo+0x31>
c0003056:	31 ff                	xor    edi,edi
c0003058:	66 85 ed             	test   bp,bp
c000305b:	74 02                	je     c000305f <get_fileinfo+0x92>
c000305d:	31 ff                	xor    edi,edi
c000305f:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0003064:	31 ff                	xor    edi,edi
c0003066:	31 c9                	xor    ecx,ecx
c0003068:	83 f9 0a             	cmp    ecx,0xa
c000306b:	0f 87 ac 00 00 00    	ja     c000311d <get_fileinfo+0x150>
c0003071:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003074:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003077:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c000307b:	89 c2                	mov    edx,eax
c000307d:	83 f8 20             	cmp    eax,0x20
c0003080:	0f 84 90 00 00 00    	je     c0003116 <get_fileinfo+0x149>
c0003086:	83 f8 05             	cmp    eax,0x5
c0003089:	75 05                	jne    c0003090 <get_fileinfo+0xc3>
c000308b:	ba e5 00 00 00       	mov    edx,0xe5
c0003090:	83 ff 0b             	cmp    edi,0xb
c0003093:	77 0b                	ja     c00030a0 <get_fileinfo+0xd3>
c0003095:	83 fd 09             	cmp    ebp,0x9
c0003098:	75 06                	jne    c00030a0 <get_fileinfo+0xd3>
c000309a:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c000309f:	47                   	inc    edi
c00030a0:	0f b7 c2             	movzx  eax,dx
c00030a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00030a7:	e8 ab ed ff ff       	call   c0001e57 <dbc_1st>
c00030ac:	85 c0                	test   eax,eax
c00030ae:	74 2f                	je     c00030df <get_fileinfo+0x112>
c00030b0:	83 fd 08             	cmp    ebp,0x8
c00030b3:	74 2a                	je     c00030df <get_fileinfo+0x112>
c00030b5:	83 fd 0b             	cmp    ebp,0xb
c00030b8:	74 25                	je     c00030df <get_fileinfo+0x112>
c00030ba:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030bd:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00030c1:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00030c5:	e8 90 ed ff ff       	call   c0001e5a <dbc_2nd>
c00030ca:	85 c0                	test   eax,eax
c00030cc:	74 11                	je     c00030df <get_fileinfo+0x112>
c00030ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00030d2:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00030d7:	c1 e0 08             	shl    eax,0x8
c00030da:	8d 69 02             	lea    ebp,[ecx+0x2]
c00030dd:	09 c2                	or     edx,eax
c00030df:	0f b7 d2             	movzx  edx,dx
c00030e2:	50                   	push   eax
c00030e3:	50                   	push   eax
c00030e4:	68 b5 01 00 00       	push   0x1b5
c00030e9:	52                   	push   edx
c00030ea:	e8 01 2c 00 00       	call   c0005cf0 <ff_oem2uni>
c00030ef:	83 c4 10             	add    esp,0x10
c00030f2:	0f b7 c0             	movzx  eax,ax
c00030f5:	85 c0                	test   eax,eax
c00030f7:	75 04                	jne    c00030fd <get_fileinfo+0x130>
c00030f9:	31 ff                	xor    edi,edi
c00030fb:	eb 20                	jmp    c000311d <get_fileinfo+0x150>
c00030fd:	b9 0c 00 00 00       	mov    ecx,0xc
c0003102:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c0003106:	29 f9                	sub    ecx,edi
c0003108:	e8 28 ee ff ff       	call   c0001f35 <put_utf>
c000310d:	0f b6 c0             	movzx  eax,al
c0003110:	85 c0                	test   eax,eax
c0003112:	74 e5                	je     c00030f9 <get_fileinfo+0x12c>
c0003114:	01 c7                	add    edi,eax
c0003116:	89 e9                	mov    ecx,ebp
c0003118:	e9 4b ff ff ff       	jmp    c0003068 <get_fileinfo+0x9b>
c000311d:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c0003122:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003126:	75 5f                	jne    c0003187 <get_fileinfo+0x1ba>
c0003128:	85 ff                	test   edi,edi
c000312a:	75 0b                	jne    c0003137 <get_fileinfo+0x16a>
c000312c:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003130:	ba 01 00 00 00       	mov    edx,0x1
c0003135:	eb 3e                	jmp    c0003175 <get_fileinfo+0x1a8>
c0003137:	bf 08 00 00 00       	mov    edi,0x8
c000313c:	31 d2                	xor    edx,edx
c000313e:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003144:	84 c0                	test   al,al
c0003146:	74 2d                	je     c0003175 <get_fileinfo+0x1a8>
c0003148:	66 83 f8 2e          	cmp    ax,0x2e
c000314c:	74 1b                	je     c0003169 <get_fileinfo+0x19c>
c000314e:	8d 48 bf             	lea    ecx,[eax-0x41]
c0003151:	66 83 f9 19          	cmp    cx,0x19
c0003155:	77 17                	ja     c000316e <get_fileinfo+0x1a1>
c0003157:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000315a:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000315d:	21 f9                	and    ecx,edi
c000315f:	80 e1 18             	and    cl,0x18
c0003162:	74 0a                	je     c000316e <get_fileinfo+0x1a1>
c0003164:	83 c0 20             	add    eax,0x20
c0003167:	eb 05                	jmp    c000316e <get_fileinfo+0x1a1>
c0003169:	bf 10 00 00 00       	mov    edi,0x10
c000316e:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c0003172:	42                   	inc    edx
c0003173:	eb c9                	jmp    c000313e <get_fileinfo+0x171>
c0003175:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c000317a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000317d:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0003181:	75 04                	jne    c0003187 <get_fileinfo+0x1ba>
c0003183:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003187:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000318a:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000318d:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0003190:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003193:	83 c0 1c             	add    eax,0x1c
c0003196:	e8 49 ec ff ff       	call   c0001de4 <ld_dword>
c000319b:	89 03                	mov    DWORD PTR [ebx],eax
c000319d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031a0:	83 c0 16             	add    eax,0x16
c00031a3:	e8 2f ec ff ff       	call   c0001dd7 <ld_word>
c00031a8:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00031ac:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031af:	83 c0 18             	add    eax,0x18
c00031b2:	e8 20 ec ff ff       	call   c0001dd7 <ld_word>
c00031b7:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00031bb:	83 c4 1c             	add    esp,0x1c
c00031be:	5b                   	pop    ebx
c00031bf:	5e                   	pop    esi
c00031c0:	5f                   	pop    edi
c00031c1:	5d                   	pop    ebp
c00031c2:	c3                   	ret    

c00031c3 <ld_clust.isra.0>:
c00031c3:	56                   	push   esi
c00031c4:	89 c6                	mov    esi,eax
c00031c6:	53                   	push   ebx
c00031c7:	8d 42 1a             	lea    eax,[edx+0x1a]
c00031ca:	89 d3                	mov    ebx,edx
c00031cc:	e8 06 ec ff ff       	call   c0001dd7 <ld_word>
c00031d1:	0f b7 c8             	movzx  ecx,ax
c00031d4:	89 f0                	mov    eax,esi
c00031d6:	3c 03                	cmp    al,0x3
c00031d8:	75 0d                	jne    c00031e7 <ld_clust.isra.0+0x24>
c00031da:	8d 43 14             	lea    eax,[ebx+0x14]
c00031dd:	e8 f5 eb ff ff       	call   c0001dd7 <ld_word>
c00031e2:	c1 e0 10             	shl    eax,0x10
c00031e5:	09 c1                	or     ecx,eax
c00031e7:	89 c8                	mov    eax,ecx
c00031e9:	5b                   	pop    ebx
c00031ea:	5e                   	pop    esi
c00031eb:	c3                   	ret    

c00031ec <st_clust.isra.1>:
c00031ec:	56                   	push   esi
c00031ed:	89 c6                	mov    esi,eax
c00031ef:	53                   	push   ebx
c00031f0:	89 d3                	mov    ebx,edx
c00031f2:	0f b7 d1             	movzx  edx,cx
c00031f5:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00031f8:	e8 ff eb ff ff       	call   c0001dfc <st_word>
c00031fd:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0003200:	75 0f                	jne    c0003211 <st_clust.isra.1+0x25>
c0003202:	c1 e9 10             	shr    ecx,0x10
c0003205:	8d 43 14             	lea    eax,[ebx+0x14]
c0003208:	89 ca                	mov    edx,ecx
c000320a:	5b                   	pop    ebx
c000320b:	5e                   	pop    esi
c000320c:	e9 eb eb ff ff       	jmp    c0001dfc <st_word>
c0003211:	5b                   	pop    ebx
c0003212:	5e                   	pop    esi
c0003213:	c3                   	ret    

c0003214 <get_fat.isra.2>:
c0003214:	b9 01 00 00 00       	mov    ecx,0x1
c0003219:	83 fa 01             	cmp    edx,0x1
c000321c:	0f 86 f3 00 00 00    	jbe    c0003315 <get_fat.isra.2+0x101>
c0003222:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003225:	0f 83 ea 00 00 00    	jae    c0003315 <get_fat.isra.2+0x101>
c000322b:	55                   	push   ebp
c000322c:	57                   	push   edi
c000322d:	89 c7                	mov    edi,eax
c000322f:	56                   	push   esi
c0003230:	89 d6                	mov    esi,edx
c0003232:	53                   	push   ebx
c0003233:	83 ec 0c             	sub    esp,0xc
c0003236:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003239:	83 f8 02             	cmp    eax,0x2
c000323c:	74 78                	je     c00032b6 <get_fat.isra.2+0xa2>
c000323e:	83 f8 03             	cmp    eax,0x3
c0003241:	0f 84 96 00 00 00    	je     c00032dd <get_fat.isra.2+0xc9>
c0003247:	48                   	dec    eax
c0003248:	0f 85 bd 00 00 00    	jne    c000330b <get_fat.isra.2+0xf7>
c000324e:	89 d3                	mov    ebx,edx
c0003250:	89 f8                	mov    eax,edi
c0003252:	d1 eb                	shr    ebx,1
c0003254:	01 d3                	add    ebx,edx
c0003256:	89 da                	mov    edx,ebx
c0003258:	c1 ea 09             	shr    edx,0x9
c000325b:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000325e:	e8 db f0 ff ff       	call   c000233e <move_window>
c0003263:	85 c0                	test   eax,eax
c0003265:	74 08                	je     c000326f <get_fat.isra.2+0x5b>
c0003267:	83 c9 ff             	or     ecx,0xffffffff
c000326a:	e9 9c 00 00 00       	jmp    c000330b <get_fat.isra.2+0xf7>
c000326f:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003272:	89 f8                	mov    eax,edi
c0003274:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000327a:	89 ea                	mov    edx,ebp
c000327c:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c0003280:	c1 ea 09             	shr    edx,0x9
c0003283:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003286:	e8 b3 f0 ff ff       	call   c000233e <move_window>
c000328b:	85 c0                	test   eax,eax
c000328d:	75 d8                	jne    c0003267 <get_fat.isra.2+0x53>
c000328f:	0f b6 c3             	movzx  eax,bl
c0003292:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003298:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c000329d:	c1 e3 08             	shl    ebx,0x8
c00032a0:	09 c3                	or     ebx,eax
c00032a2:	89 d9                	mov    ecx,ebx
c00032a4:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00032aa:	83 e6 01             	and    esi,0x1
c00032ad:	74 5c                	je     c000330b <get_fat.isra.2+0xf7>
c00032af:	89 d9                	mov    ecx,ebx
c00032b1:	c1 e9 04             	shr    ecx,0x4
c00032b4:	eb 55                	jmp    c000330b <get_fat.isra.2+0xf7>
c00032b6:	c1 ea 08             	shr    edx,0x8
c00032b9:	89 f8                	mov    eax,edi
c00032bb:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032be:	e8 7b f0 ff ff       	call   c000233e <move_window>
c00032c3:	85 c0                	test   eax,eax
c00032c5:	75 a0                	jne    c0003267 <get_fat.isra.2+0x53>
c00032c7:	01 f6                	add    esi,esi
c00032c9:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00032cf:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00032d3:	e8 ff ea ff ff       	call   c0001dd7 <ld_word>
c00032d8:	0f b7 c8             	movzx  ecx,ax
c00032db:	eb 2e                	jmp    c000330b <get_fat.isra.2+0xf7>
c00032dd:	c1 ea 07             	shr    edx,0x7
c00032e0:	89 f8                	mov    eax,edi
c00032e2:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032e5:	e8 54 f0 ff ff       	call   c000233e <move_window>
c00032ea:	85 c0                	test   eax,eax
c00032ec:	0f 85 75 ff ff ff    	jne    c0003267 <get_fat.isra.2+0x53>
c00032f2:	c1 e6 02             	shl    esi,0x2
c00032f5:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00032fb:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00032ff:	e8 e0 ea ff ff       	call   c0001de4 <ld_dword>
c0003304:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003309:	89 c1                	mov    ecx,eax
c000330b:	83 c4 0c             	add    esp,0xc
c000330e:	89 c8                	mov    eax,ecx
c0003310:	5b                   	pop    ebx
c0003311:	5e                   	pop    esi
c0003312:	5f                   	pop    edi
c0003313:	5d                   	pop    ebp
c0003314:	c3                   	ret    
c0003315:	89 c8                	mov    eax,ecx
c0003317:	c3                   	ret    

c0003318 <dir_sdi>:
c0003318:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000331e:	0f 87 b6 00 00 00    	ja     c00033da <dir_sdi+0xc2>
c0003324:	55                   	push   ebp
c0003325:	57                   	push   edi
c0003326:	56                   	push   esi
c0003327:	53                   	push   ebx
c0003328:	89 d3                	mov    ebx,edx
c000332a:	83 ec 1c             	sub    esp,0x1c
c000332d:	f6 c2 1f             	test   dl,0x1f
c0003330:	74 0a                	je     c000333c <dir_sdi+0x24>
c0003332:	b8 02 00 00 00       	mov    eax,0x2
c0003337:	e9 96 00 00 00       	jmp    c00033d2 <dir_sdi+0xba>
c000333c:	89 c6                	mov    esi,eax
c000333e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003340:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003343:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003346:	85 c9                	test   ecx,ecx
c0003348:	75 23                	jne    c000336d <dir_sdi+0x55>
c000334a:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000334d:	76 07                	jbe    c0003356 <dir_sdi+0x3e>
c000334f:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003352:	85 c0                	test   eax,eax
c0003354:	75 15                	jne    c000336b <dir_sdi+0x53>
c0003356:	89 da                	mov    edx,ebx
c0003358:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c000335c:	c1 ea 05             	shr    edx,0x5
c000335f:	39 c2                	cmp    edx,eax
c0003361:	73 cf                	jae    c0003332 <dir_sdi+0x1a>
c0003363:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003366:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003369:	eb 3d                	jmp    c00033a8 <dir_sdi+0x90>
c000336b:	89 c1                	mov    ecx,eax
c000336d:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003371:	c1 e5 09             	shl    ebp,0x9
c0003374:	89 ca                	mov    edx,ecx
c0003376:	39 eb                	cmp    ebx,ebp
c0003378:	72 1c                	jb     c0003396 <dir_sdi+0x7e>
c000337a:	8b 06                	mov    eax,DWORD PTR [esi]
c000337c:	e8 93 fe ff ff       	call   c0003214 <get_fat.isra.2>
c0003381:	89 c1                	mov    ecx,eax
c0003383:	83 f8 ff             	cmp    eax,0xffffffff
c0003386:	74 45                	je     c00033cd <dir_sdi+0xb5>
c0003388:	83 f8 01             	cmp    eax,0x1
c000338b:	76 a5                	jbe    c0003332 <dir_sdi+0x1a>
c000338d:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c0003390:	76 a0                	jbe    c0003332 <dir_sdi+0x1a>
c0003392:	29 eb                	sub    ebx,ebp
c0003394:	eb de                	jmp    c0003374 <dir_sdi+0x5c>
c0003396:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000339a:	89 f8                	mov    eax,edi
c000339c:	e8 8d ec ff ff       	call   c000202e <clst2sect>
c00033a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033a5:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033a8:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00033ab:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00033ae:	85 d2                	test   edx,edx
c00033b0:	74 80                	je     c0003332 <dir_sdi+0x1a>
c00033b2:	89 d8                	mov    eax,ebx
c00033b4:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00033ba:	c1 e8 09             	shr    eax,0x9
c00033bd:	01 d0                	add    eax,edx
c00033bf:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033c2:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00033c6:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00033c9:	31 c0                	xor    eax,eax
c00033cb:	eb 05                	jmp    c00033d2 <dir_sdi+0xba>
c00033cd:	b8 01 00 00 00       	mov    eax,0x1
c00033d2:	83 c4 1c             	add    esp,0x1c
c00033d5:	5b                   	pop    ebx
c00033d6:	5e                   	pop    esi
c00033d7:	5f                   	pop    edi
c00033d8:	5d                   	pop    ebp
c00033d9:	c3                   	ret    
c00033da:	b8 02 00 00 00       	mov    eax,0x2
c00033df:	c3                   	ret    

c00033e0 <create_chain>:
c00033e0:	55                   	push   ebp
c00033e1:	89 c5                	mov    ebp,eax
c00033e3:	57                   	push   edi
c00033e4:	89 d7                	mov    edi,edx
c00033e6:	56                   	push   esi
c00033e7:	53                   	push   ebx
c00033e8:	83 ec 1c             	sub    esp,0x1c
c00033eb:	85 d2                	test   edx,edx
c00033ed:	8b 30                	mov    esi,DWORD PTR [eax]
c00033ef:	75 0e                	jne    c00033ff <create_chain+0x1f>
c00033f1:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00033f4:	85 c9                	test   ecx,ecx
c00033f6:	74 34                	je     c000342c <create_chain+0x4c>
c00033f8:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00033fb:	77 34                	ja     c0003431 <create_chain+0x51>
c00033fd:	eb 2d                	jmp    c000342c <create_chain+0x4c>
c00033ff:	89 f0                	mov    eax,esi
c0003401:	e8 0e fe ff ff       	call   c0003214 <get_fat.isra.2>
c0003406:	89 c3                	mov    ebx,eax
c0003408:	83 f8 01             	cmp    eax,0x1
c000340b:	77 0a                	ja     c0003417 <create_chain+0x37>
c000340d:	bb 01 00 00 00       	mov    ebx,0x1
c0003412:	e9 fe 00 00 00       	jmp    c0003515 <create_chain+0x135>
c0003417:	83 f8 ff             	cmp    eax,0xffffffff
c000341a:	0f 84 f2 00 00 00    	je     c0003512 <create_chain+0x132>
c0003420:	89 f9                	mov    ecx,edi
c0003422:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003425:	76 0a                	jbe    c0003431 <create_chain+0x51>
c0003427:	e9 e9 00 00 00       	jmp    c0003515 <create_chain+0x135>
c000342c:	b9 01 00 00 00       	mov    ecx,0x1
c0003431:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003435:	75 07                	jne    c000343e <create_chain+0x5e>
c0003437:	31 db                	xor    ebx,ebx
c0003439:	e9 d7 00 00 00       	jmp    c0003515 <create_chain+0x135>
c000343e:	39 f9                	cmp    ecx,edi
c0003440:	75 46                	jne    c0003488 <create_chain+0xa8>
c0003442:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003445:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003448:	77 05                	ja     c000344f <create_chain+0x6f>
c000344a:	bb 02 00 00 00       	mov    ebx,0x2
c000344f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003453:	89 da                	mov    edx,ebx
c0003455:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003458:	e8 b7 fd ff ff       	call   c0003214 <get_fat.isra.2>
c000345d:	83 f8 01             	cmp    eax,0x1
c0003460:	74 ab                	je     c000340d <create_chain+0x2d>
c0003462:	83 f8 ff             	cmp    eax,0xffffffff
c0003465:	0f 84 a7 00 00 00    	je     c0003512 <create_chain+0x132>
c000346b:	85 c0                	test   eax,eax
c000346d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003471:	74 11                	je     c0003484 <create_chain+0xa4>
c0003473:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003476:	83 f8 01             	cmp    eax,0x1
c0003479:	76 0d                	jbe    c0003488 <create_chain+0xa8>
c000347b:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c000347e:	73 08                	jae    c0003488 <create_chain+0xa8>
c0003480:	89 c1                	mov    ecx,eax
c0003482:	eb 04                	jmp    c0003488 <create_chain+0xa8>
c0003484:	85 db                	test   ebx,ebx
c0003486:	75 3d                	jne    c00034c5 <create_chain+0xe5>
c0003488:	89 cb                	mov    ebx,ecx
c000348a:	43                   	inc    ebx
c000348b:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c000348e:	77 0a                	ja     c000349a <create_chain+0xba>
c0003490:	83 f9 01             	cmp    ecx,0x1
c0003493:	76 a2                	jbe    c0003437 <create_chain+0x57>
c0003495:	bb 02 00 00 00       	mov    ebx,0x2
c000349a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000349e:	89 da                	mov    edx,ebx
c00034a0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00034a3:	e8 6c fd ff ff       	call   c0003214 <get_fat.isra.2>
c00034a8:	85 c0                	test   eax,eax
c00034aa:	74 19                	je     c00034c5 <create_chain+0xe5>
c00034ac:	83 f8 01             	cmp    eax,0x1
c00034af:	0f 84 58 ff ff ff    	je     c000340d <create_chain+0x2d>
c00034b5:	40                   	inc    eax
c00034b6:	74 5a                	je     c0003512 <create_chain+0x132>
c00034b8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034bc:	39 cb                	cmp    ebx,ecx
c00034be:	75 ca                	jne    c000348a <create_chain+0xaa>
c00034c0:	e9 72 ff ff ff       	jmp    c0003437 <create_chain+0x57>
c00034c5:	83 c9 ff             	or     ecx,0xffffffff
c00034c8:	89 da                	mov    edx,ebx
c00034ca:	89 f0                	mov    eax,esi
c00034cc:	e8 b1 f2 ff ff       	call   c0002782 <put_fat>
c00034d1:	85 c0                	test   eax,eax
c00034d3:	75 36                	jne    c000350b <create_chain+0x12b>
c00034d5:	85 ff                	test   edi,edi
c00034d7:	75 16                	jne    c00034ef <create_chain+0x10f>
c00034d9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00034dc:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00034df:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00034e2:	8d 57 fe             	lea    edx,[edi-0x2]
c00034e5:	39 d0                	cmp    eax,edx
c00034e7:	77 17                	ja     c0003500 <create_chain+0x120>
c00034e9:	48                   	dec    eax
c00034ea:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00034ed:	eb 11                	jmp    c0003500 <create_chain+0x120>
c00034ef:	89 d9                	mov    ecx,ebx
c00034f1:	89 fa                	mov    edx,edi
c00034f3:	89 f0                	mov    eax,esi
c00034f5:	e8 88 f2 ff ff       	call   c0002782 <put_fat>
c00034fa:	85 c0                	test   eax,eax
c00034fc:	74 db                	je     c00034d9 <create_chain+0xf9>
c00034fe:	eb 0b                	jmp    c000350b <create_chain+0x12b>
c0003500:	8a 46 04             	mov    al,BYTE PTR [esi+0x4]
c0003503:	83 c8 01             	or     eax,0x1
c0003506:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0003509:	eb 0a                	jmp    c0003515 <create_chain+0x135>
c000350b:	48                   	dec    eax
c000350c:	0f 85 fb fe ff ff    	jne    c000340d <create_chain+0x2d>
c0003512:	83 cb ff             	or     ebx,0xffffffff
c0003515:	83 c4 1c             	add    esp,0x1c
c0003518:	89 d8                	mov    eax,ebx
c000351a:	5b                   	pop    ebx
c000351b:	5e                   	pop    esi
c000351c:	5f                   	pop    edi
c000351d:	5d                   	pop    ebp
c000351e:	c3                   	ret    

c000351f <remove_chain>:
c000351f:	55                   	push   ebp
c0003520:	57                   	push   edi
c0003521:	56                   	push   esi
c0003522:	89 d6                	mov    esi,edx
c0003524:	53                   	push   ebx
c0003525:	83 ec 0c             	sub    esp,0xc
c0003528:	83 fa 01             	cmp    edx,0x1
c000352b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000352d:	76 6a                	jbe    c0003599 <remove_chain+0x7a>
c000352f:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003532:	76 65                	jbe    c0003599 <remove_chain+0x7a>
c0003534:	89 c5                	mov    ebp,eax
c0003536:	89 ca                	mov    edx,ecx
c0003538:	85 c9                	test   ecx,ecx
c000353a:	74 0e                	je     c000354a <remove_chain+0x2b>
c000353c:	83 c9 ff             	or     ecx,0xffffffff
c000353f:	89 d8                	mov    eax,ebx
c0003541:	e8 3c f2 ff ff       	call   c0002782 <put_fat>
c0003546:	85 c0                	test   eax,eax
c0003548:	75 5b                	jne    c00035a5 <remove_chain+0x86>
c000354a:	89 f2                	mov    edx,esi
c000354c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000354f:	e8 c0 fc ff ff       	call   c0003214 <get_fat.isra.2>
c0003554:	89 c7                	mov    edi,eax
c0003556:	85 c0                	test   eax,eax
c0003558:	75 04                	jne    c000355e <remove_chain+0x3f>
c000355a:	31 c0                	xor    eax,eax
c000355c:	eb 47                	jmp    c00035a5 <remove_chain+0x86>
c000355e:	83 f8 01             	cmp    eax,0x1
c0003561:	74 36                	je     c0003599 <remove_chain+0x7a>
c0003563:	83 f8 ff             	cmp    eax,0xffffffff
c0003566:	74 38                	je     c00035a0 <remove_chain+0x81>
c0003568:	31 c9                	xor    ecx,ecx
c000356a:	89 f2                	mov    edx,esi
c000356c:	89 d8                	mov    eax,ebx
c000356e:	e8 0f f2 ff ff       	call   c0002782 <put_fat>
c0003573:	85 c0                	test   eax,eax
c0003575:	75 2e                	jne    c00035a5 <remove_chain+0x86>
c0003577:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000357a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000357d:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003580:	39 c8                	cmp    eax,ecx
c0003582:	73 0d                	jae    c0003591 <remove_chain+0x72>
c0003584:	40                   	inc    eax
c0003585:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003588:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000358b:	83 c8 01             	or     eax,0x1
c000358e:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003591:	89 fe                	mov    esi,edi
c0003593:	39 fa                	cmp    edx,edi
c0003595:	77 b3                	ja     c000354a <remove_chain+0x2b>
c0003597:	eb c1                	jmp    c000355a <remove_chain+0x3b>
c0003599:	b8 02 00 00 00       	mov    eax,0x2
c000359e:	eb 05                	jmp    c00035a5 <remove_chain+0x86>
c00035a0:	b8 01 00 00 00       	mov    eax,0x1
c00035a5:	83 c4 0c             	add    esp,0xc
c00035a8:	5b                   	pop    ebx
c00035a9:	5e                   	pop    esi
c00035aa:	5f                   	pop    edi
c00035ab:	5d                   	pop    ebp
c00035ac:	c3                   	ret    

c00035ad <dir_next>:
c00035ad:	55                   	push   ebp
c00035ae:	57                   	push   edi
c00035af:	56                   	push   esi
c00035b0:	53                   	push   ebx
c00035b1:	83 ec 1c             	sub    esp,0x1c
c00035b4:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00035b7:	8b 28                	mov    ebp,DWORD PTR [eax]
c00035b9:	83 c7 20             	add    edi,0x20
c00035bc:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00035c2:	76 07                	jbe    c00035cb <dir_next+0x1e>
c00035c4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00035cb:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00035ce:	b9 04 00 00 00       	mov    ecx,0x4
c00035d3:	85 f6                	test   esi,esi
c00035d5:	0f 84 cd 00 00 00    	je     c00036a8 <dir_next+0xfb>
c00035db:	89 c3                	mov    ebx,eax
c00035dd:	89 d1                	mov    ecx,edx
c00035df:	89 f8                	mov    eax,edi
c00035e1:	25 ff 01 00 00       	and    eax,0x1ff
c00035e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035ea:	0f 85 a8 00 00 00    	jne    c0003698 <dir_next+0xeb>
c00035f0:	46                   	inc    esi
c00035f1:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00035f4:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00035f7:	85 d2                	test   edx,edx
c00035f9:	75 22                	jne    c000361d <dir_next+0x70>
c00035fb:	89 fa                	mov    edx,edi
c00035fd:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003601:	c1 ea 05             	shr    edx,0x5
c0003604:	39 c2                	cmp    edx,eax
c0003606:	0f 82 8c 00 00 00    	jb     c0003698 <dir_next+0xeb>
c000360c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003613:	b9 04 00 00 00       	mov    ecx,0x4
c0003618:	e9 8b 00 00 00       	jmp    c00036a8 <dir_next+0xfb>
c000361d:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003621:	89 fe                	mov    esi,edi
c0003623:	48                   	dec    eax
c0003624:	c1 ee 09             	shr    esi,0x9
c0003627:	85 f0                	test   eax,esi
c0003629:	75 6d                	jne    c0003698 <dir_next+0xeb>
c000362b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000362f:	89 e8                	mov    eax,ebp
c0003631:	e8 de fb ff ff       	call   c0003214 <get_fat.isra.2>
c0003636:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000363a:	89 c6                	mov    esi,eax
c000363c:	83 f8 01             	cmp    eax,0x1
c000363f:	77 07                	ja     c0003648 <dir_next+0x9b>
c0003641:	b9 02 00 00 00       	mov    ecx,0x2
c0003646:	eb 60                	jmp    c00036a8 <dir_next+0xfb>
c0003648:	83 f8 ff             	cmp    eax,0xffffffff
c000364b:	75 07                	jne    c0003654 <dir_next+0xa7>
c000364d:	b9 01 00 00 00       	mov    ecx,0x1
c0003652:	eb 54                	jmp    c00036a8 <dir_next+0xfb>
c0003654:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003657:	77 30                	ja     c0003689 <dir_next+0xdc>
c0003659:	85 c9                	test   ecx,ecx
c000365b:	74 af                	je     c000360c <dir_next+0x5f>
c000365d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003660:	89 d8                	mov    eax,ebx
c0003662:	e8 79 fd ff ff       	call   c00033e0 <create_chain>
c0003667:	b9 07 00 00 00       	mov    ecx,0x7
c000366c:	89 c6                	mov    esi,eax
c000366e:	85 c0                	test   eax,eax
c0003670:	74 36                	je     c00036a8 <dir_next+0xfb>
c0003672:	83 f8 01             	cmp    eax,0x1
c0003675:	74 ca                	je     c0003641 <dir_next+0x94>
c0003677:	83 f8 ff             	cmp    eax,0xffffffff
c000367a:	74 d1                	je     c000364d <dir_next+0xa0>
c000367c:	89 c2                	mov    edx,eax
c000367e:	89 e8                	mov    eax,ebp
c0003680:	e8 54 f2 ff ff       	call   c00028d9 <dir_clear>
c0003685:	85 c0                	test   eax,eax
c0003687:	75 c4                	jne    c000364d <dir_next+0xa0>
c0003689:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000368c:	89 f2                	mov    edx,esi
c000368e:	89 e8                	mov    eax,ebp
c0003690:	e8 99 e9 ff ff       	call   c000202e <clst2sect>
c0003695:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003698:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000369c:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000369f:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00036a3:	31 c9                	xor    ecx,ecx
c00036a5:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00036a8:	83 c4 1c             	add    esp,0x1c
c00036ab:	89 c8                	mov    eax,ecx
c00036ad:	5b                   	pop    ebx
c00036ae:	5e                   	pop    esi
c00036af:	5f                   	pop    edi
c00036b0:	5d                   	pop    ebp
c00036b1:	c3                   	ret    

c00036b2 <dir_alloc>:
c00036b2:	55                   	push   ebp
c00036b3:	89 c5                	mov    ebp,eax
c00036b5:	57                   	push   edi
c00036b6:	89 d7                	mov    edi,edx
c00036b8:	56                   	push   esi
c00036b9:	31 d2                	xor    edx,edx
c00036bb:	53                   	push   ebx
c00036bc:	83 ec 0c             	sub    esp,0xc
c00036bf:	8b 30                	mov    esi,DWORD PTR [eax]
c00036c1:	e8 52 fc ff ff       	call   c0003318 <dir_sdi>
c00036c6:	85 c0                	test   eax,eax
c00036c8:	75 3b                	jne    c0003705 <dir_alloc+0x53>
c00036ca:	31 db                	xor    ebx,ebx
c00036cc:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00036cf:	89 f0                	mov    eax,esi
c00036d1:	e8 68 ec ff ff       	call   c000233e <move_window>
c00036d6:	85 c0                	test   eax,eax
c00036d8:	75 2b                	jne    c0003705 <dir_alloc+0x53>
c00036da:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00036dd:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00036e0:	85 d2                	test   edx,edx
c00036e2:	74 08                	je     c00036ec <dir_alloc+0x3a>
c00036e4:	81 fa e5 00 00 00    	cmp    edx,0xe5
c00036ea:	75 07                	jne    c00036f3 <dir_alloc+0x41>
c00036ec:	43                   	inc    ebx
c00036ed:	39 fb                	cmp    ebx,edi
c00036ef:	75 04                	jne    c00036f5 <dir_alloc+0x43>
c00036f1:	eb 1c                	jmp    c000370f <dir_alloc+0x5d>
c00036f3:	31 db                	xor    ebx,ebx
c00036f5:	ba 01 00 00 00       	mov    edx,0x1
c00036fa:	89 e8                	mov    eax,ebp
c00036fc:	e8 ac fe ff ff       	call   c00035ad <dir_next>
c0003701:	85 c0                	test   eax,eax
c0003703:	74 c7                	je     c00036cc <dir_alloc+0x1a>
c0003705:	83 f8 04             	cmp    eax,0x4
c0003708:	75 05                	jne    c000370f <dir_alloc+0x5d>
c000370a:	b8 07 00 00 00       	mov    eax,0x7
c000370f:	83 c4 0c             	add    esp,0xc
c0003712:	5b                   	pop    ebx
c0003713:	5e                   	pop    esi
c0003714:	5f                   	pop    edi
c0003715:	5d                   	pop    ebp
c0003716:	c3                   	ret    

c0003717 <dir_read>:
c0003717:	55                   	push   ebp
c0003718:	57                   	push   edi
c0003719:	bf ff ff ff ff       	mov    edi,0xffffffff
c000371e:	56                   	push   esi
c000371f:	be 04 00 00 00       	mov    esi,0x4
c0003724:	53                   	push   ebx
c0003725:	89 c3                	mov    ebx,eax
c0003727:	83 ec 1c             	sub    esp,0x1c
c000372a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000372e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003730:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003735:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003738:	85 d2                	test   edx,edx
c000373a:	0f 84 e3 00 00 00    	je     c0003823 <dir_read+0x10c>
c0003740:	89 e8                	mov    eax,ebp
c0003742:	e8 f7 eb ff ff       	call   c000233e <move_window>
c0003747:	89 c6                	mov    esi,eax
c0003749:	85 c0                	test   eax,eax
c000374b:	0f 85 dd 00 00 00    	jne    c000382e <dir_read+0x117>
c0003751:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003754:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003757:	88 04 24             	mov    BYTE PTR [esp],al
c000375a:	85 c0                	test   eax,eax
c000375c:	0f 84 c7 00 00 00    	je     c0003829 <dir_read+0x112>
c0003762:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c0003765:	83 e1 3f             	and    ecx,0x3f
c0003768:	83 f8 2e             	cmp    eax,0x2e
c000376b:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c000376e:	0f 84 95 00 00 00    	je     c0003809 <dir_read+0xf2>
c0003774:	3d e5 00 00 00       	cmp    eax,0xe5
c0003779:	0f 84 8a 00 00 00    	je     c0003809 <dir_read+0xf2>
c000377f:	0f b6 c9             	movzx  ecx,cl
c0003782:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003786:	83 e1 df             	and    ecx,0xffffffdf
c0003789:	83 f9 08             	cmp    ecx,0x8
c000378c:	0f 94 c1             	sete   cl
c000378f:	0f b6 c9             	movzx  ecx,cl
c0003792:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0003796:	75 71                	jne    c0003809 <dir_read+0xf2>
c0003798:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c000379d:	75 4a                	jne    c00037e9 <dir_read+0xd2>
c000379f:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00037a3:	74 16                	je     c00037bb <dir_read+0xa4>
c00037a5:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037a8:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00037af:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037b3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00037b6:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00037b9:	eb 0e                	jmp    c00037c9 <dir_read+0xb2>
c00037bb:	89 f9                	mov    ecx,edi
c00037bd:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037c2:	0f b6 c9             	movzx  ecx,cl
c00037c5:	39 c1                	cmp    ecx,eax
c00037c7:	75 45                	jne    c000380e <dir_read+0xf7>
c00037c9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00037cd:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037d2:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00037d5:	75 37                	jne    c000380e <dir_read+0xf7>
c00037d7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00037da:	e8 6c e8 ff ff       	call   c000204b <pick_lfn>
c00037df:	85 c0                	test   eax,eax
c00037e1:	74 2b                	je     c000380e <dir_read+0xf7>
c00037e3:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00037e6:	4f                   	dec    edi
c00037e7:	eb 25                	jmp    c000380e <dir_read+0xf7>
c00037e9:	89 f8                	mov    eax,edi
c00037eb:	84 c0                	test   al,al
c00037ed:	75 11                	jne    c0003800 <dir_read+0xe9>
c00037ef:	89 d0                	mov    eax,edx
c00037f1:	e8 32 ea ff ff       	call   c0002228 <sum_sfn>
c00037f6:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00037fa:	75 04                	jne    c0003800 <dir_read+0xe9>
c00037fc:	31 f6                	xor    esi,esi
c00037fe:	eb 35                	jmp    c0003835 <dir_read+0x11e>
c0003800:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003807:	eb 2c                	jmp    c0003835 <dir_read+0x11e>
c0003809:	bf ff ff ff ff       	mov    edi,0xffffffff
c000380e:	31 d2                	xor    edx,edx
c0003810:	89 d8                	mov    eax,ebx
c0003812:	e8 96 fd ff ff       	call   c00035ad <dir_next>
c0003817:	89 c6                	mov    esi,eax
c0003819:	85 c0                	test   eax,eax
c000381b:	0f 84 14 ff ff ff    	je     c0003735 <dir_read+0x1e>
c0003821:	eb 0b                	jmp    c000382e <dir_read+0x117>
c0003823:	85 f6                	test   esi,esi
c0003825:	74 d5                	je     c00037fc <dir_read+0xe5>
c0003827:	eb 05                	jmp    c000382e <dir_read+0x117>
c0003829:	be 04 00 00 00       	mov    esi,0x4
c000382e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003835:	83 c4 1c             	add    esp,0x1c
c0003838:	89 f0                	mov    eax,esi
c000383a:	5b                   	pop    ebx
c000383b:	5e                   	pop    esi
c000383c:	5f                   	pop    edi
c000383d:	5d                   	pop    ebp
c000383e:	c3                   	ret    

c000383f <dir_remove>:
c000383f:	57                   	push   edi
c0003840:	56                   	push   esi
c0003841:	53                   	push   ebx
c0003842:	89 c3                	mov    ebx,eax
c0003844:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003847:	8b 30                	mov    esi,DWORD PTR [eax]
c0003849:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000384c:	83 fa ff             	cmp    edx,0xffffffff
c000384f:	74 09                	je     c000385a <dir_remove+0x1b>
c0003851:	e8 c2 fa ff ff       	call   c0003318 <dir_sdi>
c0003856:	85 c0                	test   eax,eax
c0003858:	75 34                	jne    c000388e <dir_remove+0x4f>
c000385a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000385d:	89 f0                	mov    eax,esi
c000385f:	e8 da ea ff ff       	call   c000233e <move_window>
c0003864:	85 c0                	test   eax,eax
c0003866:	75 1c                	jne    c0003884 <dir_remove+0x45>
c0003868:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000386b:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c000386e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003872:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003875:	73 17                	jae    c000388e <dir_remove+0x4f>
c0003877:	31 d2                	xor    edx,edx
c0003879:	89 d8                	mov    eax,ebx
c000387b:	e8 2d fd ff ff       	call   c00035ad <dir_next>
c0003880:	85 c0                	test   eax,eax
c0003882:	74 d6                	je     c000385a <dir_remove+0x1b>
c0003884:	83 f8 04             	cmp    eax,0x4
c0003887:	75 05                	jne    c000388e <dir_remove+0x4f>
c0003889:	b8 02 00 00 00       	mov    eax,0x2
c000388e:	5b                   	pop    ebx
c000388f:	5e                   	pop    esi
c0003890:	5f                   	pop    edi
c0003891:	c3                   	ret    

c0003892 <dir_find>:
c0003892:	55                   	push   ebp
c0003893:	31 d2                	xor    edx,edx
c0003895:	57                   	push   edi
c0003896:	56                   	push   esi
c0003897:	53                   	push   ebx
c0003898:	89 c3                	mov    ebx,eax
c000389a:	83 ec 1c             	sub    esp,0x1c
c000389d:	8b 00                	mov    eax,DWORD PTR [eax]
c000389f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038a3:	89 d8                	mov    eax,ebx
c00038a5:	e8 6e fa ff ff       	call   c0003318 <dir_sdi>
c00038aa:	89 c6                	mov    esi,eax
c00038ac:	85 c0                	test   eax,eax
c00038ae:	0f 85 1d 01 00 00    	jne    c00039d1 <dir_find+0x13f>
c00038b4:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00038bb:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c00038c0:	bf ff ff ff ff       	mov    edi,0xffffffff
c00038c5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00038c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038cc:	e8 6d ea ff ff       	call   c000233e <move_window>
c00038d1:	89 c6                	mov    esi,eax
c00038d3:	85 c0                	test   eax,eax
c00038d5:	0f 85 f6 00 00 00    	jne    c00039d1 <dir_find+0x13f>
c00038db:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00038de:	0f b6 4d 00          	movzx  ecx,BYTE PTR [ebp+0x0]
c00038e2:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c00038e6:	85 c9                	test   ecx,ecx
c00038e8:	0f 84 de 00 00 00    	je     c00039cc <dir_find+0x13a>
c00038ee:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00038f1:	89 d0                	mov    eax,edx
c00038f3:	83 e0 3f             	and    eax,0x3f
c00038f6:	81 f9 e5 00 00 00    	cmp    ecx,0xe5
c00038fc:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00038ff:	0f 84 a6 00 00 00    	je     c00039ab <dir_find+0x119>
c0003905:	80 e2 08             	and    dl,0x8
c0003908:	0f b6 c0             	movzx  eax,al
c000390b:	74 0b                	je     c0003918 <dir_find+0x86>
c000390d:	83 f8 0f             	cmp    eax,0xf
c0003910:	0f 85 95 00 00 00    	jne    c00039ab <dir_find+0x119>
c0003916:	eb 05                	jmp    c000391d <dir_find+0x8b>
c0003918:	83 f8 0f             	cmp    eax,0xf
c000391b:	75 62                	jne    c000397f <dir_find+0xed>
c000391d:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003921:	0f 85 90 00 00 00    	jne    c00039b7 <dir_find+0x125>
c0003927:	f6 44 24 04 40       	test   BYTE PTR [esp+0x4],0x40
c000392c:	74 17                	je     c0003945 <dir_find+0xb3>
c000392e:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003931:	81 64 24 04 bf 00 00 00 	and    DWORD PTR [esp+0x4],0xbf
c0003939:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000393d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003940:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003943:	eb 13                	jmp    c0003958 <dir_find+0xc6>
c0003945:	89 f8                	mov    eax,edi
c0003947:	bf ff ff ff ff       	mov    edi,0xffffffff
c000394c:	0f b6 d0             	movzx  edx,al
c000394f:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0003954:	39 c2                	cmp    edx,eax
c0003956:	75 5f                	jne    c00039b7 <dir_find+0x125>
c0003958:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000395c:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003961:	3a 45 0d             	cmp    al,BYTE PTR [ebp+0xd]
c0003964:	75 51                	jne    c00039b7 <dir_find+0x125>
c0003966:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000396a:	89 ea                	mov    edx,ebp
c000396c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000396f:	e8 37 f3 ff ff       	call   c0002cab <cmp_lfn>
c0003974:	85 c0                	test   eax,eax
c0003976:	74 3f                	je     c00039b7 <dir_find+0x125>
c0003978:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000397c:	4f                   	dec    edi
c000397d:	eb 38                	jmp    c00039b7 <dir_find+0x125>
c000397f:	89 f8                	mov    eax,edi
c0003981:	84 c0                	test   al,al
c0003983:	75 0d                	jne    c0003992 <dir_find+0x100>
c0003985:	89 e8                	mov    eax,ebp
c0003987:	e8 9c e8 ff ff       	call   c0002228 <sum_sfn>
c000398c:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0003990:	74 3f                	je     c00039d1 <dir_find+0x13f>
c0003992:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003996:	75 13                	jne    c00039ab <dir_find+0x119>
c0003998:	8d 53 20             	lea    edx,[ebx+0x20]
c000399b:	b9 0b 00 00 00       	mov    ecx,0xb
c00039a0:	89 e8                	mov    eax,ebp
c00039a2:	e8 7c e4 ff ff       	call   c0001e23 <mem_cmp>
c00039a7:	85 c0                	test   eax,eax
c00039a9:	74 26                	je     c00039d1 <dir_find+0x13f>
c00039ab:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039b2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039b7:	31 d2                	xor    edx,edx
c00039b9:	89 d8                	mov    eax,ebx
c00039bb:	e8 ed fb ff ff       	call   c00035ad <dir_next>
c00039c0:	89 c6                	mov    esi,eax
c00039c2:	85 c0                	test   eax,eax
c00039c4:	0f 84 fb fe ff ff    	je     c00038c5 <dir_find+0x33>
c00039ca:	eb 05                	jmp    c00039d1 <dir_find+0x13f>
c00039cc:	be 04 00 00 00       	mov    esi,0x4
c00039d1:	83 c4 1c             	add    esp,0x1c
c00039d4:	89 f0                	mov    eax,esi
c00039d6:	5b                   	pop    ebx
c00039d7:	5e                   	pop    esi
c00039d8:	5f                   	pop    edi
c00039d9:	5d                   	pop    ebp
c00039da:	c3                   	ret    

c00039db <follow_path>:
c00039db:	56                   	push   esi
c00039dc:	53                   	push   ebx
c00039dd:	89 c3                	mov    ebx,eax
c00039df:	83 ec 14             	sub    esp,0x14
c00039e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039e6:	8b 30                	mov    esi,DWORD PTR [eax]
c00039e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039ec:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00039ef:	83 fa 5c             	cmp    edx,0x5c
c00039f2:	75 07                	jne    c00039fb <follow_path+0x20>
c00039f4:	40                   	inc    eax
c00039f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00039f9:	eb ed                	jmp    c00039e8 <follow_path+0xd>
c00039fb:	83 fa 2f             	cmp    edx,0x2f
c00039fe:	74 f4                	je     c00039f4 <follow_path+0x19>
c0003a00:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003a07:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003a0a:	77 3e                	ja     c0003a4a <follow_path+0x6f>
c0003a0c:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003a10:	31 d2                	xor    edx,edx
c0003a12:	89 d8                	mov    eax,ebx
c0003a14:	e8 ff f8 ff ff       	call   c0003318 <dir_sdi>
c0003a19:	eb 4f                	jmp    c0003a6a <follow_path+0x8f>
c0003a1b:	89 d8                	mov    eax,ebx
c0003a1d:	e8 70 fe ff ff       	call   c0003892 <dir_find>
c0003a22:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003a25:	85 c0                	test   eax,eax
c0003a27:	75 32                	jne    c0003a5b <follow_path+0x80>
c0003a29:	80 e2 04             	and    dl,0x4
c0003a2c:	75 3c                	jne    c0003a6a <follow_path+0x8f>
c0003a2e:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003a32:	74 31                	je     c0003a65 <follow_path+0x8a>
c0003a34:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003a37:	25 ff 01 00 00       	and    eax,0x1ff
c0003a3c:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003a40:	8a 06                	mov    al,BYTE PTR [esi]
c0003a42:	e8 7c f7 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003a47:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003a4a:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003a4e:	89 d8                	mov    eax,ebx
c0003a50:	e8 7f ef ff ff       	call   c00029d4 <create_name>
c0003a55:	85 c0                	test   eax,eax
c0003a57:	74 c2                	je     c0003a1b <follow_path+0x40>
c0003a59:	eb 0f                	jmp    c0003a6a <follow_path+0x8f>
c0003a5b:	83 f8 04             	cmp    eax,0x4
c0003a5e:	75 0a                	jne    c0003a6a <follow_path+0x8f>
c0003a60:	80 e2 04             	and    dl,0x4
c0003a63:	75 05                	jne    c0003a6a <follow_path+0x8f>
c0003a65:	b8 05 00 00 00       	mov    eax,0x5
c0003a6a:	83 c4 14             	add    esp,0x14
c0003a6d:	5b                   	pop    ebx
c0003a6e:	5e                   	pop    esi
c0003a6f:	c3                   	ret    

c0003a70 <dir_register>:
c0003a70:	55                   	push   ebp
c0003a71:	57                   	push   edi
c0003a72:	56                   	push   esi
c0003a73:	be 06 00 00 00       	mov    esi,0x6
c0003a78:	53                   	push   ebx
c0003a79:	83 ec 2c             	sub    esp,0x2c
c0003a7c:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003a7f:	80 e2 a0             	and    dl,0xa0
c0003a82:	0f 85 66 01 00 00    	jne    c0003bee <dir_register+0x17e>
c0003a88:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a8a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003a92:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003a95:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003a99:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003a9e:	74 06                	je     c0003aa6 <dir_register+0x36>
c0003aa0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003aa4:	eb ef                	jmp    c0003a95 <dir_register+0x25>
c0003aa6:	89 c3                	mov    ebx,eax
c0003aa8:	b9 0c 00 00 00       	mov    ecx,0xc
c0003aad:	8d 40 20             	lea    eax,[eax+0x20]
c0003ab0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003ab4:	89 c2                	mov    edx,eax
c0003ab6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003aba:	e8 44 e3 ff ff       	call   c0001e03 <mem_cpy>
c0003abf:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003ac4:	74 48                	je     c0003b0e <dir_register+0x9e>
c0003ac6:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003aca:	bd 01 00 00 00       	mov    ebp,0x1
c0003acf:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003ad2:	55                   	push   ebp
c0003ad3:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003ad7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003adb:	e8 86 e6 ff ff       	call   c0002166 <gen_numname>
c0003ae0:	58                   	pop    eax
c0003ae1:	89 d8                	mov    eax,ebx
c0003ae3:	e8 aa fd ff ff       	call   c0003892 <dir_find>
c0003ae8:	89 c6                	mov    esi,eax
c0003aea:	85 c0                	test   eax,eax
c0003aec:	75 10                	jne    c0003afe <dir_register+0x8e>
c0003aee:	45                   	inc    ebp
c0003aef:	83 fd 64             	cmp    ebp,0x64
c0003af2:	75 db                	jne    c0003acf <dir_register+0x5f>
c0003af4:	be 07 00 00 00       	mov    esi,0x7
c0003af9:	e9 f0 00 00 00       	jmp    c0003bee <dir_register+0x17e>
c0003afe:	83 f8 04             	cmp    eax,0x4
c0003b01:	0f 85 e7 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b07:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003b0b:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003b0e:	bd 01 00 00 00       	mov    ebp,0x1
c0003b13:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003b18:	74 13                	je     c0003b2d <dir_register+0xbd>
c0003b1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b1e:	b9 0d 00 00 00       	mov    ecx,0xd
c0003b23:	83 c0 0c             	add    eax,0xc
c0003b26:	31 d2                	xor    edx,edx
c0003b28:	f7 f1                	div    ecx
c0003b2a:	8d 68 01             	lea    ebp,[eax+0x1]
c0003b2d:	89 ea                	mov    edx,ebp
c0003b2f:	89 d8                	mov    eax,ebx
c0003b31:	e8 7c fb ff ff       	call   c00036b2 <dir_alloc>
c0003b36:	89 c6                	mov    esi,eax
c0003b38:	85 c0                	test   eax,eax
c0003b3a:	0f 85 ae 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b40:	4d                   	dec    ebp
c0003b41:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003b45:	74 67                	je     c0003bae <dir_register+0x13e>
c0003b47:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003b4a:	89 e8                	mov    eax,ebp
c0003b4c:	c1 e0 05             	shl    eax,0x5
c0003b4f:	29 c2                	sub    edx,eax
c0003b51:	89 d8                	mov    eax,ebx
c0003b53:	e8 c0 f7 ff ff       	call   c0003318 <dir_sdi>
c0003b58:	89 c6                	mov    esi,eax
c0003b5a:	85 c0                	test   eax,eax
c0003b5c:	0f 85 8c 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003b66:	e8 bd e6 ff ff       	call   c0002228 <sum_sfn>
c0003b6b:	0f b6 e8             	movzx  ebp,al
c0003b6e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003b71:	89 f8                	mov    eax,edi
c0003b73:	e8 c6 e7 ff ff       	call   c000233e <move_window>
c0003b78:	89 c6                	mov    esi,eax
c0003b7a:	85 c0                	test   eax,eax
c0003b7c:	75 70                	jne    c0003bee <dir_register+0x17e>
c0003b7e:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0003b83:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003b86:	83 ec 0c             	sub    esp,0xc
c0003b89:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003b8c:	55                   	push   ebp
c0003b8d:	e8 39 e5 ff ff       	call   c00020cb <put_lfn>
c0003b92:	31 d2                	xor    edx,edx
c0003b94:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003b98:	89 d8                	mov    eax,ebx
c0003b9a:	e8 0e fa ff ff       	call   c00035ad <dir_next>
c0003b9f:	83 c4 10             	add    esp,0x10
c0003ba2:	89 c6                	mov    esi,eax
c0003ba4:	85 c0                	test   eax,eax
c0003ba6:	75 46                	jne    c0003bee <dir_register+0x17e>
c0003ba8:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0003bac:	75 c0                	jne    c0003b6e <dir_register+0xfe>
c0003bae:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bb1:	89 f8                	mov    eax,edi
c0003bb3:	e8 86 e7 ff ff       	call   c000233e <move_window>
c0003bb8:	89 c6                	mov    esi,eax
c0003bba:	85 c0                	test   eax,eax
c0003bbc:	75 30                	jne    c0003bee <dir_register+0x17e>
c0003bbe:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003bc1:	b9 20 00 00 00       	mov    ecx,0x20
c0003bc6:	31 d2                	xor    edx,edx
c0003bc8:	e8 4b e2 ff ff       	call   c0001e18 <mem_set>
c0003bcd:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003bd0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003bd4:	b9 0b 00 00 00       	mov    ecx,0xb
c0003bd9:	e8 25 e2 ff ff       	call   c0001e03 <mem_cpy>
c0003bde:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003be1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003be4:	83 e0 18             	and    eax,0x18
c0003be7:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003bea:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003bee:	83 c4 2c             	add    esp,0x2c
c0003bf1:	89 f0                	mov    eax,esi
c0003bf3:	5b                   	pop    ebx
c0003bf4:	5e                   	pop    esi
c0003bf5:	5f                   	pop    edi
c0003bf6:	5d                   	pop    ebp
c0003bf7:	c3                   	ret    

c0003bf8 <f_mount>:
c0003bf8:	53                   	push   ebx
c0003bf9:	83 ec 18             	sub    esp,0x18
c0003bfc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003c00:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003c04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c08:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003c0c:	e8 37 e6 ff ff       	call   c0002248 <get_ldnumber>
c0003c11:	89 c2                	mov    edx,eax
c0003c13:	b8 0b 00 00 00       	mov    eax,0xb
c0003c18:	85 d2                	test   edx,edx
c0003c1a:	78 39                	js     c0003c55 <f_mount+0x5d>
c0003c1c:	8b 04 95 a0 54 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdab60]
c0003c23:	85 c0                	test   eax,eax
c0003c25:	74 03                	je     c0003c2a <f_mount+0x32>
c0003c27:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c2e:	85 c0                	test   eax,eax
c0003c30:	74 03                	je     c0003c35 <f_mount+0x3d>
c0003c32:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c39:	89 04 95 a0 54 02 c0 	mov    DWORD PTR [edx*4-0x3ffdab60],eax
c0003c40:	31 c0                	xor    eax,eax
c0003c42:	84 db                	test   bl,bl
c0003c44:	74 0f                	je     c0003c55 <f_mount+0x5d>
c0003c46:	31 c9                	xor    ecx,ecx
c0003c48:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003c4c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003c50:	e8 3c e8 ff ff       	call   c0002491 <mount_volume>
c0003c55:	83 c4 18             	add    esp,0x18
c0003c58:	5b                   	pop    ebx
c0003c59:	c3                   	ret    

c0003c5a <f_open>:
c0003c5a:	55                   	push   ebp
c0003c5b:	b8 09 00 00 00       	mov    eax,0x9
c0003c60:	57                   	push   edi
c0003c61:	56                   	push   esi
c0003c62:	53                   	push   ebx
c0003c63:	83 ec 5c             	sub    esp,0x5c
c0003c66:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003c6a:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003c6e:	85 db                	test   ebx,ebx
c0003c70:	0f 84 9f 02 00 00    	je     c0003f15 <f_open+0x2bb>
c0003c76:	89 fd                	mov    ebp,edi
c0003c78:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003c7c:	83 e5 3f             	and    ebp,0x3f
c0003c7f:	89 e8                	mov    eax,ebp
c0003c81:	89 ee                	mov    esi,ebp
c0003c83:	0f b6 c8             	movzx  ecx,al
c0003c86:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003c8a:	e8 02 e8 ff ff       	call   c0002491 <mount_volume>
c0003c8f:	85 c0                	test   eax,eax
c0003c91:	0f 85 78 02 00 00    	jne    c0003f0f <f_open+0x2b5>
c0003c97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c9b:	83 ec 0c             	sub    esp,0xc
c0003c9e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ca2:	68 00 02 00 00       	push   0x200
c0003ca7:	e8 74 1f 00 00       	call   c0005c20 <ff_memalloc>
c0003cac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003cb0:	83 c4 10             	add    esp,0x10
c0003cb3:	b8 11 00 00 00       	mov    eax,0x11
c0003cb8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003cbd:	0f 84 52 02 00 00    	je     c0003f15 <f_open+0x2bb>
c0003cc3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003cc7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003ccb:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003ccf:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003cd2:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003cd6:	e8 00 fd ff ff       	call   c00039db <follow_path>
c0003cdb:	85 c0                	test   eax,eax
c0003cdd:	75 0c                	jne    c0003ceb <f_open+0x91>
c0003cdf:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003ce4:	74 05                	je     c0003ceb <f_open+0x91>
c0003ce6:	b8 06 00 00 00       	mov    eax,0x6
c0003ceb:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003cf1:	0f 84 d5 00 00 00    	je     c0003dcc <f_open+0x172>
c0003cf7:	85 c0                	test   eax,eax
c0003cf9:	74 21                	je     c0003d1c <f_open+0xc2>
c0003cfb:	83 f8 04             	cmp    eax,0x4
c0003cfe:	0f 85 f0 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d04:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d08:	e8 63 fd ff ff       	call   c0003a70 <dir_register>
c0003d0d:	85 c0                	test   eax,eax
c0003d0f:	0f 85 df 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d15:	83 cd 08             	or     ebp,0x8
c0003d18:	89 ee                	mov    esi,ebp
c0003d1a:	eb 2c                	jmp    c0003d48 <f_open+0xee>
c0003d1c:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003d20:	b8 07 00 00 00       	mov    eax,0x7
c0003d25:	80 e2 11             	and    dl,0x11
c0003d28:	0f 85 c6 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d2e:	b8 08 00 00 00       	mov    eax,0x8
c0003d33:	f7 c7 04 00 00 00    	test   edi,0x4
c0003d39:	0f 85 b5 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d3f:	83 e7 08             	and    edi,0x8
c0003d42:	0f 84 b1 00 00 00    	je     c0003df9 <f_open+0x19f>
c0003d48:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003d4c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d50:	89 ea                	mov    edx,ebp
c0003d52:	8a 00                	mov    al,BYTE PTR [eax]
c0003d54:	e8 6a f4 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003d59:	ba 00 00 21 50       	mov    edx,0x50210000
c0003d5e:	89 c7                	mov    edi,eax
c0003d60:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003d63:	e8 98 e0 ff ff       	call   c0001e00 <st_dword>
c0003d68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003d6c:	31 c9                	xor    ecx,ecx
c0003d6e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003d72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d76:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003d7a:	e8 6d f4 ff ff       	call   c00031ec <st_clust.isra.1>
c0003d7f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003d83:	31 d2                	xor    edx,edx
c0003d85:	83 c0 1c             	add    eax,0x1c
c0003d88:	e8 73 e0 ff ff       	call   c0001e00 <st_dword>
c0003d8d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d91:	85 ff                	test   edi,edi
c0003d93:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003d97:	74 60                	je     c0003df9 <f_open+0x19f>
c0003d99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d9d:	31 c9                	xor    ecx,ecx
c0003d9f:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003da2:	89 fa                	mov    edx,edi
c0003da4:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003da8:	e8 72 f7 ff ff       	call   c000351f <remove_chain>
c0003dad:	85 c0                	test   eax,eax
c0003daf:	0f 85 3f 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003db5:	89 ea                	mov    edx,ebp
c0003db7:	4f                   	dec    edi
c0003db8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dbc:	e8 7d e5 ff ff       	call   c000233e <move_window>
c0003dc1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003dc5:	85 c0                	test   eax,eax
c0003dc7:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003dca:	eb 27                	jmp    c0003df3 <f_open+0x199>
c0003dcc:	85 c0                	test   eax,eax
c0003dce:	0f 85 20 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003dd4:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003dd8:	b8 04 00 00 00       	mov    eax,0x4
c0003ddd:	f6 c2 10             	test   dl,0x10
c0003de0:	0f 85 0e 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003de6:	83 e7 02             	and    edi,0x2
c0003de9:	74 0e                	je     c0003df9 <f_open+0x19f>
c0003deb:	b8 07 00 00 00       	mov    eax,0x7
c0003df0:	80 e2 01             	and    dl,0x1
c0003df3:	0f 85 fb 00 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003df9:	f7 c6 08 00 00 00    	test   esi,0x8
c0003dff:	74 03                	je     c0003e04 <f_open+0x1aa>
c0003e01:	83 ce 40             	or     esi,0x40
c0003e04:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003e08:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003e0c:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003e0f:	89 fa                	mov    edx,edi
c0003e11:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003e14:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003e17:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003e1a:	e8 a4 f3 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003e1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003e22:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003e25:	8d 7b 28             	lea    edi,[ebx+0x28]
c0003e28:	e8 b7 df ff ff       	call   c0001de4 <ld_dword>
c0003e2d:	89 2b                	mov    DWORD PTR [ebx],ebp
c0003e2f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003e32:	31 d2                	xor    edx,edx
c0003e34:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0003e38:	b9 00 02 00 00       	mov    ecx,0x200
c0003e3d:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003e41:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003e45:	89 f0                	mov    eax,esi
c0003e47:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003e4e:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003e51:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003e58:	89 f8                	mov    eax,edi
c0003e5a:	e8 b9 df ff ff       	call   c0001e18 <mem_set>
c0003e5f:	83 e6 20             	and    esi,0x20
c0003e62:	75 07                	jne    c0003e6b <f_open+0x211>
c0003e64:	31 c0                	xor    eax,eax
c0003e66:	e9 89 00 00 00       	jmp    c0003ef4 <f_open+0x29a>
c0003e6b:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0003e6e:	85 ed                	test   ebp,ebp
c0003e70:	74 f2                	je     c0003e64 <f_open+0x20a>
c0003e72:	89 6b 14             	mov    DWORD PTR [ebx+0x14],ebp
c0003e75:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e79:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003e7c:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003e80:	c1 e6 09             	shl    esi,0x9
c0003e83:	39 ee                	cmp    esi,ebp
c0003e85:	73 1c                	jae    c0003ea3 <f_open+0x249>
c0003e87:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003e89:	29 f5                	sub    ebp,esi
c0003e8b:	e8 84 f3 ff ff       	call   c0003214 <get_fat.isra.2>
c0003e90:	89 c2                	mov    edx,eax
c0003e92:	83 f8 01             	cmp    eax,0x1
c0003e95:	76 10                	jbe    c0003ea7 <f_open+0x24d>
c0003e97:	83 f8 ff             	cmp    eax,0xffffffff
c0003e9a:	75 e7                	jne    c0003e83 <f_open+0x229>
c0003e9c:	b8 01 00 00 00       	mov    eax,0x1
c0003ea1:	eb 09                	jmp    c0003eac <f_open+0x252>
c0003ea3:	31 c0                	xor    eax,eax
c0003ea5:	eb 05                	jmp    c0003eac <f_open+0x252>
c0003ea7:	b8 02 00 00 00       	mov    eax,0x2
c0003eac:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003eaf:	85 c0                	test   eax,eax
c0003eb1:	75 41                	jne    c0003ef4 <f_open+0x29a>
c0003eb3:	f7 c5 ff 01 00 00    	test   ebp,0x1ff
c0003eb9:	74 a9                	je     c0003e64 <f_open+0x20a>
c0003ebb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003ebf:	89 f0                	mov    eax,esi
c0003ec1:	e8 68 e1 ff ff       	call   c000202e <clst2sect>
c0003ec6:	89 c2                	mov    edx,eax
c0003ec8:	b8 02 00 00 00       	mov    eax,0x2
c0003ecd:	85 d2                	test   edx,edx
c0003ecf:	74 23                	je     c0003ef4 <f_open+0x29a>
c0003ed1:	c1 ed 09             	shr    ebp,0x9
c0003ed4:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
c0003ed8:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003edb:	6a 01                	push   0x1
c0003edd:	50                   	push   eax
c0003ede:	57                   	push   edi
c0003edf:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003ee3:	50                   	push   eax
c0003ee4:	e8 a3 de ff ff       	call   c0001d8c <disk_read>
c0003ee9:	83 c4 10             	add    esp,0x10
c0003eec:	85 c0                	test   eax,eax
c0003eee:	0f 95 c0             	setne  al
c0003ef1:	0f b6 c0             	movzx  eax,al
c0003ef4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003ef8:	83 ec 0c             	sub    esp,0xc
c0003efb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003eff:	e8 34 1d 00 00       	call   c0005c38 <ff_memfree>
c0003f04:	83 c4 10             	add    esp,0x10
c0003f07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003f0b:	85 c0                	test   eax,eax
c0003f0d:	74 06                	je     c0003f15 <f_open+0x2bb>
c0003f0f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003f15:	83 c4 5c             	add    esp,0x5c
c0003f18:	5b                   	pop    ebx
c0003f19:	5e                   	pop    esi
c0003f1a:	5f                   	pop    edi
c0003f1b:	5d                   	pop    ebp
c0003f1c:	c3                   	ret    

c0003f1d <f_read>:
c0003f1d:	55                   	push   ebp
c0003f1e:	57                   	push   edi
c0003f1f:	56                   	push   esi
c0003f20:	53                   	push   ebx
c0003f21:	83 ec 2c             	sub    esp,0x2c
c0003f24:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003f28:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003f2c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003f32:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003f36:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003f3a:	89 d8                	mov    eax,ebx
c0003f3c:	e8 54 e3 ff ff       	call   c0002295 <validate>
c0003f41:	89 c5                	mov    ebp,eax
c0003f43:	85 c0                	test   eax,eax
c0003f45:	0f 85 c7 01 00 00    	jne    c0004112 <f_read+0x1f5>
c0003f4b:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003f4f:	85 ed                	test   ebp,ebp
c0003f51:	0f 85 bb 01 00 00    	jne    c0004112 <f_read+0x1f5>
c0003f57:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003f5b:	0f 84 ac 01 00 00    	je     c000410d <f_read+0x1f0>
c0003f61:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003f64:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003f67:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f6b:	39 f0                	cmp    eax,esi
c0003f6d:	0f 86 b0 00 00 00    	jbe    c0004023 <f_read+0x106>
c0003f73:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0003f77:	e9 a7 00 00 00       	jmp    c0004023 <f_read+0x106>
c0003f7c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003f7f:	a9 ff 01 00 00       	test   eax,0x1ff
c0003f84:	0f 85 56 01 00 00    	jne    c00040e0 <f_read+0x1c3>
c0003f8a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003f8e:	0f b7 7a 0a          	movzx  edi,WORD PTR [edx+0xa]
c0003f92:	89 c2                	mov    edx,eax
c0003f94:	4f                   	dec    edi
c0003f95:	c1 ea 09             	shr    edx,0x9
c0003f98:	21 d7                	and    edi,edx
c0003f9a:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0003f9e:	0f 84 8f 00 00 00    	je     c0004033 <f_read+0x116>
c0003fa4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003fa8:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003fab:	89 c8                	mov    eax,ecx
c0003fad:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003fb1:	e8 78 e0 ff ff       	call   c000202e <clst2sect>
c0003fb6:	85 c0                	test   eax,eax
c0003fb8:	0f 84 8d 00 00 00    	je     c000404b <f_read+0x12e>
c0003fbe:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003fc2:	81 7c 24 04 ff 01 00 00 	cmp    DWORD PTR [esp+0x4],0x1ff
c0003fca:	8d 3c 01             	lea    edi,[ecx+eax*1]
c0003fcd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003fd1:	0f 86 bf 00 00 00    	jbe    c0004096 <f_read+0x179>
c0003fd7:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0003fdb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003fdf:	c1 ee 09             	shr    esi,0x9
c0003fe2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fe6:	01 f2                	add    edx,esi
c0003fe8:	39 c2                	cmp    edx,eax
c0003fea:	76 06                	jbe    c0003ff2 <f_read+0xd5>
c0003fec:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003ff0:	89 c6                	mov    esi,eax
c0003ff2:	56                   	push   esi
c0003ff3:	57                   	push   edi
c0003ff4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ff8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ffc:	50                   	push   eax
c0003ffd:	e8 8a dd ff ff       	call   c0001d8c <disk_read>
c0004002:	83 c4 10             	add    esp,0x10
c0004005:	85 c0                	test   eax,eax
c0004007:	75 55                	jne    c000405e <f_read+0x141>
c0004009:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000400d:	75 65                	jne    c0004074 <f_read+0x157>
c000400f:	c1 e6 09             	shl    esi,0x9
c0004012:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004016:	29 74 24 04          	sub    DWORD PTR [esp+0x4],esi
c000401a:	01 30                	add    DWORD PTR [eax],esi
c000401c:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004020:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004023:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0004028:	0f 85 4e ff ff ff    	jne    c0003f7c <f_read+0x5f>
c000402e:	e9 df 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c0004033:	85 c0                	test   eax,eax
c0004035:	75 05                	jne    c000403c <f_read+0x11f>
c0004037:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000403a:	eb 0a                	jmp    c0004046 <f_read+0x129>
c000403c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000403f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004041:	e8 ce f1 ff ff       	call   c0003214 <get_fat.isra.2>
c0004046:	83 f8 01             	cmp    eax,0x1
c0004049:	77 0e                	ja     c0004059 <f_read+0x13c>
c000404b:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000404f:	bd 02 00 00 00       	mov    ebp,0x2
c0004054:	e9 b9 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c0004059:	83 f8 ff             	cmp    eax,0xffffffff
c000405c:	75 0e                	jne    c000406c <f_read+0x14f>
c000405e:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004062:	bd 01 00 00 00       	mov    ebp,0x1
c0004067:	e9 a6 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c000406c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000406f:	e9 30 ff ff ff       	jmp    c0003fa4 <f_read+0x87>
c0004074:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004077:	29 f8                	sub    eax,edi
c0004079:	39 f0                	cmp    eax,esi
c000407b:	73 92                	jae    c000400f <f_read+0xf2>
c000407d:	c1 e0 09             	shl    eax,0x9
c0004080:	8d 53 28             	lea    edx,[ebx+0x28]
c0004083:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0004087:	b9 00 02 00 00       	mov    ecx,0x200
c000408c:	e8 72 dd ff ff       	call   c0001e03 <mem_cpy>
c0004091:	e9 79 ff ff ff       	jmp    c000400f <f_read+0xf2>
c0004096:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004099:	39 f8                	cmp    eax,edi
c000409b:	74 40                	je     c00040dd <f_read+0x1c0>
c000409d:	8d 73 28             	lea    esi,[ebx+0x28]
c00040a0:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00040a4:	74 1e                	je     c00040c4 <f_read+0x1a7>
c00040a6:	6a 01                	push   0x1
c00040a8:	50                   	push   eax
c00040a9:	56                   	push   esi
c00040aa:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040ae:	50                   	push   eax
c00040af:	e8 ee dc ff ff       	call   c0001da2 <disk_write>
c00040b4:	83 c4 10             	add    esp,0x10
c00040b7:	85 c0                	test   eax,eax
c00040b9:	75 a3                	jne    c000405e <f_read+0x141>
c00040bb:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00040be:	83 e0 7f             	and    eax,0x7f
c00040c1:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00040c4:	6a 01                	push   0x1
c00040c6:	57                   	push   edi
c00040c7:	56                   	push   esi
c00040c8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00040cc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00040d0:	50                   	push   eax
c00040d1:	e8 b6 dc ff ff       	call   c0001d8c <disk_read>
c00040d6:	83 c4 10             	add    esp,0x10
c00040d9:	85 c0                	test   eax,eax
c00040db:	75 81                	jne    c000405e <f_read+0x141>
c00040dd:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00040e0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00040e3:	ba 00 02 00 00       	mov    edx,0x200
c00040e8:	25 ff 01 00 00       	and    eax,0x1ff
c00040ed:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00040f1:	29 c2                	sub    edx,eax
c00040f3:	39 d6                	cmp    esi,edx
c00040f5:	76 02                	jbe    c00040f9 <f_read+0x1dc>
c00040f7:	89 d6                	mov    esi,edx
c00040f9:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00040fd:	89 f1                	mov    ecx,esi
c00040ff:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004103:	e8 fb dc ff ff       	call   c0001e03 <mem_cpy>
c0004108:	e9 05 ff ff ff       	jmp    c0004012 <f_read+0xf5>
c000410d:	bd 07 00 00 00       	mov    ebp,0x7
c0004112:	83 c4 2c             	add    esp,0x2c
c0004115:	89 e8                	mov    eax,ebp
c0004117:	5b                   	pop    ebx
c0004118:	5e                   	pop    esi
c0004119:	5f                   	pop    edi
c000411a:	5d                   	pop    ebp
c000411b:	c3                   	ret    

c000411c <f_write>:
c000411c:	55                   	push   ebp
c000411d:	57                   	push   edi
c000411e:	56                   	push   esi
c000411f:	53                   	push   ebx
c0004120:	83 ec 2c             	sub    esp,0x2c
c0004123:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004127:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000412b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0004131:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004135:	89 d8                	mov    eax,ebx
c0004137:	e8 59 e1 ff ff       	call   c0002295 <validate>
c000413c:	89 c5                	mov    ebp,eax
c000413e:	85 c0                	test   eax,eax
c0004140:	0f 85 14 02 00 00    	jne    c000435a <f_write+0x23e>
c0004146:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c000414a:	85 ed                	test   ebp,ebp
c000414c:	0f 85 08 02 00 00    	jne    c000435a <f_write+0x23e>
c0004152:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004156:	0f 84 f9 01 00 00    	je     c0004355 <f_write+0x239>
c000415c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000415f:	89 c7                	mov    edi,eax
c0004161:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004165:	0f 83 ef 00 00 00    	jae    c000425a <f_write+0x13e>
c000416b:	f7 d0                	not    eax
c000416d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0004171:	e9 e4 00 00 00       	jmp    c000425a <f_write+0x13e>
c0004176:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004179:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000417f:	0f 85 9a 01 00 00    	jne    c000431f <f_write+0x203>
c0004185:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004189:	89 d1                	mov    ecx,edx
c000418b:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000418f:	c1 e9 09             	shr    ecx,0x9
c0004192:	48                   	dec    eax
c0004193:	21 c8                	and    eax,ecx
c0004195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004199:	0f 84 c8 00 00 00    	je     c0004267 <f_write+0x14b>
c000419f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041a3:	0f 85 22 01 00 00    	jne    c00042cb <f_write+0x1af>
c00041a9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00041ad:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041b0:	89 c8                	mov    eax,ecx
c00041b2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041b6:	e8 73 de ff ff       	call   c000202e <clst2sect>
c00041bb:	85 c0                	test   eax,eax
c00041bd:	0f 84 d2 00 00 00    	je     c0004295 <f_write+0x179>
c00041c3:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00041c7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041cb:	01 c7                	add    edi,eax
c00041cd:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00041d5:	0f 86 1c 01 00 00    	jbe    c00042f7 <f_write+0x1db>
c00041db:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00041df:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00041e3:	c1 ee 09             	shr    esi,0x9
c00041e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00041ea:	01 f2                	add    edx,esi
c00041ec:	39 c2                	cmp    edx,eax
c00041ee:	76 06                	jbe    c00041f6 <f_write+0xda>
c00041f0:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00041f4:	89 c6                	mov    esi,eax
c00041f6:	56                   	push   esi
c00041f7:	57                   	push   edi
c00041f8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00041fc:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004200:	50                   	push   eax
c0004201:	e8 9c db ff ff       	call   c0001da2 <disk_write>
c0004206:	83 c4 10             	add    esp,0x10
c0004209:	85 c0                	test   eax,eax
c000420b:	0f 85 97 00 00 00    	jne    c00042a8 <f_write+0x18c>
c0004211:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004214:	29 fa                	sub    edx,edi
c0004216:	39 f2                	cmp    edx,esi
c0004218:	73 1d                	jae    c0004237 <f_write+0x11b>
c000421a:	8d 43 28             	lea    eax,[ebx+0x28]
c000421d:	c1 e2 09             	shl    edx,0x9
c0004220:	b9 00 02 00 00       	mov    ecx,0x200
c0004225:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c0004229:	e8 d5 db ff ff       	call   c0001e03 <mem_cpy>
c000422e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004231:	83 e0 7f             	and    eax,0x7f
c0004234:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004237:	c1 e6 09             	shl    esi,0x9
c000423a:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000423e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004242:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004246:	01 30                	add    DWORD PTR [eax],esi
c0004248:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000424b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000424e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004251:	39 f0                	cmp    eax,esi
c0004253:	73 02                	jae    c0004257 <f_write+0x13b>
c0004255:	89 f0                	mov    eax,esi
c0004257:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000425a:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000425f:	0f 85 11 ff ff ff    	jne    c0004176 <f_write+0x5a>
c0004265:	eb 1b                	jmp    c0004282 <f_write+0x166>
c0004267:	85 d2                	test   edx,edx
c0004269:	75 09                	jne    c0004274 <f_write+0x158>
c000426b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000426e:	85 c0                	test   eax,eax
c0004270:	75 1e                	jne    c0004290 <f_write+0x174>
c0004272:	eb 03                	jmp    c0004277 <f_write+0x15b>
c0004274:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004277:	89 d8                	mov    eax,ebx
c0004279:	e8 62 f1 ff ff       	call   c00033e0 <create_chain>
c000427e:	85 c0                	test   eax,eax
c0004280:	75 0e                	jne    c0004290 <f_write+0x174>
c0004282:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004285:	83 c8 40             	or     eax,0x40
c0004288:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000428b:	e9 ca 00 00 00       	jmp    c000435a <f_write+0x23e>
c0004290:	83 f8 01             	cmp    eax,0x1
c0004293:	75 0e                	jne    c00042a3 <f_write+0x187>
c0004295:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004299:	bd 02 00 00 00       	mov    ebp,0x2
c000429e:	e9 b7 00 00 00       	jmp    c000435a <f_write+0x23e>
c00042a3:	83 f8 ff             	cmp    eax,0xffffffff
c00042a6:	75 0e                	jne    c00042b6 <f_write+0x19a>
c00042a8:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00042ac:	bd 01 00 00 00       	mov    ebp,0x1
c00042b1:	e9 a4 00 00 00       	jmp    c000435a <f_write+0x23e>
c00042b6:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00042b9:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00042bd:	0f 85 dc fe ff ff    	jne    c000419f <f_write+0x83>
c00042c3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00042c6:	e9 d4 fe ff ff       	jmp    c000419f <f_write+0x83>
c00042cb:	6a 01                	push   0x1
c00042cd:	8d 43 28             	lea    eax,[ebx+0x28]
c00042d0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00042d3:	50                   	push   eax
c00042d4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042d8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042dc:	50                   	push   eax
c00042dd:	e8 c0 da ff ff       	call   c0001da2 <disk_write>
c00042e2:	83 c4 10             	add    esp,0x10
c00042e5:	85 c0                	test   eax,eax
c00042e7:	75 bf                	jne    c00042a8 <f_write+0x18c>
c00042e9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042ec:	83 e0 7f             	and    eax,0x7f
c00042ef:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042f2:	e9 b2 fe ff ff       	jmp    c00041a9 <f_write+0x8d>
c00042f7:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00042fa:	74 20                	je     c000431c <f_write+0x200>
c00042fc:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042ff:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0004302:	76 18                	jbe    c000431c <f_write+0x200>
c0004304:	6a 01                	push   0x1
c0004306:	8d 43 28             	lea    eax,[ebx+0x28]
c0004309:	57                   	push   edi
c000430a:	50                   	push   eax
c000430b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000430f:	50                   	push   eax
c0004310:	e8 77 da ff ff       	call   c0001d8c <disk_read>
c0004315:	83 c4 10             	add    esp,0x10
c0004318:	85 c0                	test   eax,eax
c000431a:	75 8c                	jne    c00042a8 <f_write+0x18c>
c000431c:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c000431f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004322:	ba 00 02 00 00       	mov    edx,0x200
c0004327:	25 ff 01 00 00       	and    eax,0x1ff
c000432c:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004330:	29 c2                	sub    edx,eax
c0004332:	39 d6                	cmp    esi,edx
c0004334:	76 02                	jbe    c0004338 <f_write+0x21c>
c0004336:	89 d6                	mov    esi,edx
c0004338:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c000433c:	89 f1                	mov    ecx,esi
c000433e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004342:	e8 bc da ff ff       	call   c0001e03 <mem_cpy>
c0004347:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000434a:	83 c8 80             	or     eax,0xffffff80
c000434d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004350:	e9 e5 fe ff ff       	jmp    c000423a <f_write+0x11e>
c0004355:	bd 07 00 00 00       	mov    ebp,0x7
c000435a:	83 c4 2c             	add    esp,0x2c
c000435d:	89 e8                	mov    eax,ebp
c000435f:	5b                   	pop    ebx
c0004360:	5e                   	pop    esi
c0004361:	5f                   	pop    edi
c0004362:	5d                   	pop    ebp
c0004363:	c3                   	ret    

c0004364 <f_sync>:
c0004364:	56                   	push   esi
c0004365:	53                   	push   ebx
c0004366:	83 ec 14             	sub    esp,0x14
c0004369:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000436d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004371:	89 d8                	mov    eax,ebx
c0004373:	e8 1d df ff ff       	call   c0002295 <validate>
c0004378:	85 c0                	test   eax,eax
c000437a:	0f 85 a3 00 00 00    	jne    c0004423 <f_sync+0xbf>
c0004380:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004383:	f6 c2 40             	test   dl,0x40
c0004386:	0f 84 97 00 00 00    	je     c0004423 <f_sync+0xbf>
c000438c:	80 e2 80             	and    dl,0x80
c000438f:	74 2e                	je     c00043bf <f_sync+0x5b>
c0004391:	6a 01                	push   0x1
c0004393:	8d 43 28             	lea    eax,[ebx+0x28]
c0004396:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004399:	50                   	push   eax
c000439a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000439e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00043a2:	50                   	push   eax
c00043a3:	e8 fa d9 ff ff       	call   c0001da2 <disk_write>
c00043a8:	83 c4 10             	add    esp,0x10
c00043ab:	89 c2                	mov    edx,eax
c00043ad:	b8 01 00 00 00       	mov    eax,0x1
c00043b2:	85 d2                	test   edx,edx
c00043b4:	75 6d                	jne    c0004423 <f_sync+0xbf>
c00043b6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00043b9:	83 e0 7f             	and    eax,0x7f
c00043bc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00043bf:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00043c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00043c6:	e8 73 df ff ff       	call   c000233e <move_window>
c00043cb:	85 c0                	test   eax,eax
c00043cd:	75 54                	jne    c0004423 <f_sync+0xbf>
c00043cf:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00043d2:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00043d5:	89 f2                	mov    edx,esi
c00043d7:	83 c8 20             	or     eax,0x20
c00043da:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00043dd:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00043e0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00043e2:	e8 05 ee ff ff       	call   c00031ec <st_clust.isra.1>
c00043e7:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043ea:	8d 46 1c             	lea    eax,[esi+0x1c]
c00043ed:	e8 0e da ff ff       	call   c0001e00 <st_dword>
c00043f2:	8d 46 16             	lea    eax,[esi+0x16]
c00043f5:	ba 00 00 21 50       	mov    edx,0x50210000
c00043fa:	e8 01 da ff ff       	call   c0001e00 <st_dword>
c00043ff:	31 d2                	xor    edx,edx
c0004401:	8d 46 12             	lea    eax,[esi+0x12]
c0004404:	e8 f3 d9 ff ff       	call   c0001dfc <st_word>
c0004409:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000440d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004411:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004415:	e8 5b e9 ff ff       	call   c0002d75 <sync_fs>
c000441a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000441d:	83 e2 bf             	and    edx,0xffffffbf
c0004420:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004423:	83 c4 14             	add    esp,0x14
c0004426:	5b                   	pop    ebx
c0004427:	5e                   	pop    esi
c0004428:	c3                   	ret    

c0004429 <f_close>:
c0004429:	53                   	push   ebx
c000442a:	83 ec 24             	sub    esp,0x24
c000442d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004431:	53                   	push   ebx
c0004432:	e8 2d ff ff ff       	call   c0004364 <f_sync>
c0004437:	83 c4 10             	add    esp,0x10
c000443a:	85 c0                	test   eax,eax
c000443c:	75 15                	jne    c0004453 <f_close+0x2a>
c000443e:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004442:	89 d8                	mov    eax,ebx
c0004444:	e8 4c de ff ff       	call   c0002295 <validate>
c0004449:	85 c0                	test   eax,eax
c000444b:	75 06                	jne    c0004453 <f_close+0x2a>
c000444d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004453:	83 c4 18             	add    esp,0x18
c0004456:	5b                   	pop    ebx
c0004457:	c3                   	ret    

c0004458 <f_lseek>:
c0004458:	55                   	push   ebp
c0004459:	57                   	push   edi
c000445a:	56                   	push   esi
c000445b:	53                   	push   ebx
c000445c:	83 ec 2c             	sub    esp,0x2c
c000445f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004463:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004467:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000446b:	89 d8                	mov    eax,ebx
c000446d:	e8 23 de ff ff       	call   c0002295 <validate>
c0004472:	89 c5                	mov    ebp,eax
c0004474:	85 c0                	test   eax,eax
c0004476:	0f 85 83 01 00 00    	jne    c00045ff <f_lseek+0x1a7>
c000447c:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004480:	85 ed                	test   ebp,ebp
c0004482:	0f 85 77 01 00 00    	jne    c00045ff <f_lseek+0x1a7>
c0004488:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000448b:	39 f0                	cmp    eax,esi
c000448d:	73 08                	jae    c0004497 <f_lseek+0x3f>
c000448f:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004493:	75 02                	jne    c0004497 <f_lseek+0x3f>
c0004495:	89 c6                	mov    esi,eax
c0004497:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000449a:	85 f6                	test   esi,esi
c000449c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00044a3:	75 07                	jne    c00044ac <f_lseek+0x54>
c00044a5:	31 f6                	xor    esi,esi
c00044a7:	e9 e2 00 00 00       	jmp    c000458e <f_lseek+0x136>
c00044ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044b0:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00044b4:	c1 e7 09             	shl    edi,0x9
c00044b7:	85 c9                	test   ecx,ecx
c00044b9:	74 28                	je     c00044e3 <f_lseek+0x8b>
c00044bb:	49                   	dec    ecx
c00044bc:	31 d2                	xor    edx,edx
c00044be:	8d 46 ff             	lea    eax,[esi-0x1]
c00044c1:	f7 f7                	div    edi
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00044c9:	89 c8                	mov    eax,ecx
c00044cb:	f7 f7                	div    edi
c00044cd:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00044d1:	72 10                	jb     c00044e3 <f_lseek+0x8b>
c00044d3:	89 f8                	mov    eax,edi
c00044d5:	f7 d8                	neg    eax
c00044d7:	21 c1                	and    ecx,eax
c00044d9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00044dc:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00044df:	29 ce                	sub    esi,ecx
c00044e1:	eb 3c                	jmp    c000451f <f_lseek+0xc7>
c00044e3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00044e6:	85 c0                	test   eax,eax
c00044e8:	75 32                	jne    c000451c <f_lseek+0xc4>
c00044ea:	31 d2                	xor    edx,edx
c00044ec:	89 d8                	mov    eax,ebx
c00044ee:	e8 ed ee ff ff       	call   c00033e0 <create_chain>
c00044f3:	83 f8 01             	cmp    eax,0x1
c00044f6:	75 0e                	jne    c0004506 <f_lseek+0xae>
c00044f8:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00044fc:	bd 02 00 00 00       	mov    ebp,0x2
c0004501:	e9 f9 00 00 00       	jmp    c00045ff <f_lseek+0x1a7>
c0004506:	83 f8 ff             	cmp    eax,0xffffffff
c0004509:	75 0e                	jne    c0004519 <f_lseek+0xc1>
c000450b:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000450f:	bd 01 00 00 00       	mov    ebp,0x1
c0004514:	e9 e6 00 00 00       	jmp    c00045ff <f_lseek+0x1a7>
c0004519:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000451c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000451f:	85 c0                	test   eax,eax
c0004521:	74 82                	je     c00044a5 <f_lseek+0x4d>
c0004523:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004526:	39 fe                	cmp    esi,edi
c0004528:	76 3d                	jbe    c0004567 <f_lseek+0x10f>
c000452a:	01 fa                	add    edx,edi
c000452c:	29 fe                	sub    esi,edi
c000452e:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c0004531:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004535:	89 c2                	mov    edx,eax
c0004537:	74 0d                	je     c0004546 <f_lseek+0xee>
c0004539:	89 d8                	mov    eax,ebx
c000453b:	e8 a0 ee ff ff       	call   c00033e0 <create_chain>
c0004540:	85 c0                	test   eax,eax
c0004542:	75 09                	jne    c000454d <f_lseek+0xf5>
c0004544:	eb 1f                	jmp    c0004565 <f_lseek+0x10d>
c0004546:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004548:	e8 c7 ec ff ff       	call   c0003214 <get_fat.isra.2>
c000454d:	83 f8 ff             	cmp    eax,0xffffffff
c0004550:	74 b9                	je     c000450b <f_lseek+0xb3>
c0004552:	83 f8 01             	cmp    eax,0x1
c0004555:	76 a1                	jbe    c00044f8 <f_lseek+0xa0>
c0004557:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000455b:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c000455e:	76 98                	jbe    c00044f8 <f_lseek+0xa0>
c0004560:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004563:	eb be                	jmp    c0004523 <f_lseek+0xcb>
c0004565:	31 f6                	xor    esi,esi
c0004567:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000456a:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004570:	0f 84 2f ff ff ff    	je     c00044a5 <f_lseek+0x4d>
c0004576:	89 c2                	mov    edx,eax
c0004578:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000457c:	e8 ad da ff ff       	call   c000202e <clst2sect>
c0004581:	85 c0                	test   eax,eax
c0004583:	0f 84 6f ff ff ff    	je     c00044f8 <f_lseek+0xa0>
c0004589:	c1 ee 09             	shr    esi,0x9
c000458c:	01 c6                	add    esi,eax
c000458e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004591:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004594:	76 0c                	jbe    c00045a2 <f_lseek+0x14a>
c0004596:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004599:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000459c:	83 ca 40             	or     edx,0x40
c000459f:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00045a2:	a9 ff 01 00 00       	test   eax,0x1ff
c00045a7:	74 56                	je     c00045ff <f_lseek+0x1a7>
c00045a9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00045ac:	39 f0                	cmp    eax,esi
c00045ae:	74 4f                	je     c00045ff <f_lseek+0x1a7>
c00045b0:	8d 7b 28             	lea    edi,[ebx+0x28]
c00045b3:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00045b7:	74 26                	je     c00045df <f_lseek+0x187>
c00045b9:	6a 01                	push   0x1
c00045bb:	50                   	push   eax
c00045bc:	57                   	push   edi
c00045bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045c1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045c5:	50                   	push   eax
c00045c6:	e8 d7 d7 ff ff       	call   c0001da2 <disk_write>
c00045cb:	83 c4 10             	add    esp,0x10
c00045ce:	85 c0                	test   eax,eax
c00045d0:	0f 85 35 ff ff ff    	jne    c000450b <f_lseek+0xb3>
c00045d6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045d9:	83 e0 7f             	and    eax,0x7f
c00045dc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045df:	6a 01                	push   0x1
c00045e1:	56                   	push   esi
c00045e2:	57                   	push   edi
c00045e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045eb:	50                   	push   eax
c00045ec:	e8 9b d7 ff ff       	call   c0001d8c <disk_read>
c00045f1:	83 c4 10             	add    esp,0x10
c00045f4:	85 c0                	test   eax,eax
c00045f6:	0f 85 0f ff ff ff    	jne    c000450b <f_lseek+0xb3>
c00045fc:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00045ff:	83 c4 2c             	add    esp,0x2c
c0004602:	89 e8                	mov    eax,ebp
c0004604:	5b                   	pop    ebx
c0004605:	5e                   	pop    esi
c0004606:	5f                   	pop    edi
c0004607:	5d                   	pop    ebp
c0004608:	c3                   	ret    

c0004609 <f_opendir>:
c0004609:	56                   	push   esi
c000460a:	b8 09 00 00 00       	mov    eax,0x9
c000460f:	53                   	push   ebx
c0004610:	83 ec 24             	sub    esp,0x24
c0004613:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004617:	85 db                	test   ebx,ebx
c0004619:	0f 84 af 00 00 00    	je     c00046ce <f_opendir+0xc5>
c000461f:	31 c9                	xor    ecx,ecx
c0004621:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004625:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004629:	e8 63 de ff ff       	call   c0002491 <mount_volume>
c000462e:	85 c0                	test   eax,eax
c0004630:	0f 85 92 00 00 00    	jne    c00046c8 <f_opendir+0xbf>
c0004636:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000463a:	83 ec 0c             	sub    esp,0xc
c000463d:	89 03                	mov    DWORD PTR [ebx],eax
c000463f:	68 00 02 00 00       	push   0x200
c0004644:	e8 d7 15 00 00       	call   c0005c20 <ff_memalloc>
c0004649:	83 c4 10             	add    esp,0x10
c000464c:	89 c6                	mov    esi,eax
c000464e:	b8 11 00 00 00       	mov    eax,0x11
c0004653:	85 f6                	test   esi,esi
c0004655:	74 77                	je     c00046ce <f_opendir+0xc5>
c0004657:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000465b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000465f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004662:	89 d8                	mov    eax,ebx
c0004664:	e8 72 f3 ff ff       	call   c00039db <follow_path>
c0004669:	85 c0                	test   eax,eax
c000466b:	75 37                	jne    c00046a4 <f_opendir+0x9b>
c000466d:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004671:	75 1c                	jne    c000468f <f_opendir+0x86>
c0004673:	b8 05 00 00 00       	mov    eax,0x5
c0004678:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000467c:	74 26                	je     c00046a4 <f_opendir+0x9b>
c000467e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004681:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004685:	8a 00                	mov    al,BYTE PTR [eax]
c0004687:	e8 37 eb ff ff       	call   c00031c3 <ld_clust.isra.0>
c000468c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000468f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004693:	31 d2                	xor    edx,edx
c0004695:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004699:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000469d:	89 d8                	mov    eax,ebx
c000469f:	e8 74 ec ff ff       	call   c0003318 <dir_sdi>
c00046a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046a8:	83 ec 0c             	sub    esp,0xc
c00046ab:	56                   	push   esi
c00046ac:	e8 87 15 00 00       	call   c0005c38 <ff_memfree>
c00046b1:	83 c4 10             	add    esp,0x10
c00046b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00046b8:	83 f8 04             	cmp    eax,0x4
c00046bb:	74 06                	je     c00046c3 <f_opendir+0xba>
c00046bd:	85 c0                	test   eax,eax
c00046bf:	74 0d                	je     c00046ce <f_opendir+0xc5>
c00046c1:	eb 05                	jmp    c00046c8 <f_opendir+0xbf>
c00046c3:	b8 05 00 00 00       	mov    eax,0x5
c00046c8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046ce:	83 c4 24             	add    esp,0x24
c00046d1:	5b                   	pop    ebx
c00046d2:	5e                   	pop    esi
c00046d3:	c3                   	ret    

c00046d4 <f_closedir>:
c00046d4:	53                   	push   ebx
c00046d5:	83 ec 18             	sub    esp,0x18
c00046d8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00046dc:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00046e0:	89 d8                	mov    eax,ebx
c00046e2:	e8 ae db ff ff       	call   c0002295 <validate>
c00046e7:	85 c0                	test   eax,eax
c00046e9:	75 06                	jne    c00046f1 <f_closedir+0x1d>
c00046eb:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046f1:	83 c4 18             	add    esp,0x18
c00046f4:	5b                   	pop    ebx
c00046f5:	c3                   	ret    

c00046f6 <f_readdir>:
c00046f6:	57                   	push   edi
c00046f7:	56                   	push   esi
c00046f8:	53                   	push   ebx
c00046f9:	83 ec 20             	sub    esp,0x20
c00046fc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004700:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0004704:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004708:	89 d8                	mov    eax,ebx
c000470a:	e8 86 db ff ff       	call   c0002295 <validate>
c000470f:	85 c0                	test   eax,eax
c0004711:	75 6e                	jne    c0004781 <f_readdir+0x8b>
c0004713:	85 ff                	test   edi,edi
c0004715:	75 0b                	jne    c0004722 <f_readdir+0x2c>
c0004717:	31 d2                	xor    edx,edx
c0004719:	89 d8                	mov    eax,ebx
c000471b:	e8 f8 eb ff ff       	call   c0003318 <dir_sdi>
c0004720:	eb 5f                	jmp    c0004781 <f_readdir+0x8b>
c0004722:	83 ec 0c             	sub    esp,0xc
c0004725:	68 00 02 00 00       	push   0x200
c000472a:	e8 f1 14 00 00       	call   c0005c20 <ff_memalloc>
c000472f:	83 c4 10             	add    esp,0x10
c0004732:	89 c6                	mov    esi,eax
c0004734:	b8 11 00 00 00       	mov    eax,0x11
c0004739:	85 f6                	test   esi,esi
c000473b:	74 44                	je     c0004781 <f_readdir+0x8b>
c000473d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004741:	31 d2                	xor    edx,edx
c0004743:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004746:	89 d8                	mov    eax,ebx
c0004748:	e8 ca ef ff ff       	call   c0003717 <dir_read>
c000474d:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004752:	75 19                	jne    c000476d <f_readdir+0x77>
c0004754:	89 fa                	mov    edx,edi
c0004756:	89 d8                	mov    eax,ebx
c0004758:	e8 70 e8 ff ff       	call   c0002fcd <get_fileinfo>
c000475d:	31 d2                	xor    edx,edx
c000475f:	89 d8                	mov    eax,ebx
c0004761:	e8 47 ee ff ff       	call   c00035ad <dir_next>
c0004766:	83 f8 04             	cmp    eax,0x4
c0004769:	75 02                	jne    c000476d <f_readdir+0x77>
c000476b:	31 c0                	xor    eax,eax
c000476d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004771:	83 ec 0c             	sub    esp,0xc
c0004774:	56                   	push   esi
c0004775:	e8 be 14 00 00       	call   c0005c38 <ff_memfree>
c000477a:	83 c4 10             	add    esp,0x10
c000477d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004781:	83 c4 20             	add    esp,0x20
c0004784:	5b                   	pop    ebx
c0004785:	5e                   	pop    esi
c0004786:	5f                   	pop    edi
c0004787:	c3                   	ret    

c0004788 <f_stat>:
c0004788:	57                   	push   edi
c0004789:	31 c9                	xor    ecx,ecx
c000478b:	56                   	push   esi
c000478c:	53                   	push   ebx
c000478d:	83 ec 30             	sub    esp,0x30
c0004790:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004794:	89 e2                	mov    edx,esp
c0004796:	8d 44 24 40          	lea    eax,[esp+0x40]
c000479a:	e8 f2 dc ff ff       	call   c0002491 <mount_volume>
c000479f:	89 c3                	mov    ebx,eax
c00047a1:	85 c0                	test   eax,eax
c00047a3:	75 59                	jne    c00047fe <f_stat+0x76>
c00047a5:	83 ec 0c             	sub    esp,0xc
c00047a8:	bb 11 00 00 00       	mov    ebx,0x11
c00047ad:	68 00 02 00 00       	push   0x200
c00047b2:	e8 69 14 00 00       	call   c0005c20 <ff_memalloc>
c00047b7:	83 c4 10             	add    esp,0x10
c00047ba:	89 c6                	mov    esi,eax
c00047bc:	85 c0                	test   eax,eax
c00047be:	74 3e                	je     c00047fe <f_stat+0x76>
c00047c0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047c3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00047c7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00047ca:	89 e0                	mov    eax,esp
c00047cc:	e8 0a f2 ff ff       	call   c00039db <follow_path>
c00047d1:	89 c3                	mov    ebx,eax
c00047d3:	85 c0                	test   eax,eax
c00047d5:	75 1b                	jne    c00047f2 <f_stat+0x6a>
c00047d7:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00047dc:	75 0f                	jne    c00047ed <f_stat+0x65>
c00047de:	85 ff                	test   edi,edi
c00047e0:	74 10                	je     c00047f2 <f_stat+0x6a>
c00047e2:	89 fa                	mov    edx,edi
c00047e4:	89 e0                	mov    eax,esp
c00047e6:	e8 e2 e7 ff ff       	call   c0002fcd <get_fileinfo>
c00047eb:	eb 05                	jmp    c00047f2 <f_stat+0x6a>
c00047ed:	bb 06 00 00 00       	mov    ebx,0x6
c00047f2:	83 ec 0c             	sub    esp,0xc
c00047f5:	56                   	push   esi
c00047f6:	e8 3d 14 00 00       	call   c0005c38 <ff_memfree>
c00047fb:	83 c4 10             	add    esp,0x10
c00047fe:	83 c4 30             	add    esp,0x30
c0004801:	89 d8                	mov    eax,ebx
c0004803:	5b                   	pop    ebx
c0004804:	5e                   	pop    esi
c0004805:	5f                   	pop    edi
c0004806:	c3                   	ret    

c0004807 <f_getfree>:
c0004807:	55                   	push   ebp
c0004808:	31 c9                	xor    ecx,ecx
c000480a:	57                   	push   edi
c000480b:	56                   	push   esi
c000480c:	53                   	push   ebx
c000480d:	83 ec 2c             	sub    esp,0x2c
c0004810:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004814:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004818:	e8 74 dc ff ff       	call   c0002491 <mount_volume>
c000481d:	89 c7                	mov    edi,eax
c000481f:	85 c0                	test   eax,eax
c0004821:	0f 85 df 00 00 00    	jne    c0004906 <f_getfree+0xff>
c0004827:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000482b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000482f:	89 30                	mov    DWORD PTR [eax],esi
c0004831:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0004834:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c0004837:	8d 55 fe             	lea    edx,[ebp-0x2]
c000483a:	39 d0                	cmp    eax,edx
c000483c:	77 0b                	ja     c0004849 <f_getfree+0x42>
c000483e:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004842:	89 01                	mov    DWORD PTR [ecx],eax
c0004844:	e9 bd 00 00 00       	jmp    c0004906 <f_getfree+0xff>
c0004849:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c000484c:	75 29                	jne    c0004877 <f_getfree+0x70>
c000484e:	bd 02 00 00 00       	mov    ebp,0x2
c0004853:	31 db                	xor    ebx,ebx
c0004855:	89 ea                	mov    edx,ebp
c0004857:	89 f0                	mov    eax,esi
c0004859:	e8 b6 e9 ff ff       	call   c0003214 <get_fat.isra.2>
c000485e:	83 f8 ff             	cmp    eax,0xffffffff
c0004861:	74 7d                	je     c00048e0 <f_getfree+0xd9>
c0004863:	83 f8 01             	cmp    eax,0x1
c0004866:	74 7f                	je     c00048e7 <f_getfree+0xe0>
c0004868:	83 d3 00             	adc    ebx,0x0
c000486b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000486f:	45                   	inc    ebp
c0004870:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004873:	77 e0                	ja     c0004855 <f_getfree+0x4e>
c0004875:	eb 79                	jmp    c00048f0 <f_getfree+0xe9>
c0004877:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c000487a:	31 db                	xor    ebx,ebx
c000487c:	31 f6                	xor    esi,esi
c000487e:	85 f6                	test   esi,esi
c0004880:	75 18                	jne    c000489a <f_getfree+0x93>
c0004882:	8d 42 01             	lea    eax,[edx+0x1]
c0004885:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004889:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000488d:	e8 ac da ff ff       	call   c000233e <move_window>
c0004892:	85 c0                	test   eax,eax
c0004894:	75 58                	jne    c00048ee <f_getfree+0xe7>
c0004896:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000489a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000489e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00048a2:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c00048a6:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c00048a9:	75 13                	jne    c00048be <f_getfree+0xb7>
c00048ab:	e8 27 d5 ff ff       	call   c0001dd7 <ld_word>
c00048b0:	0f b7 c0             	movzx  eax,ax
c00048b3:	83 f8 01             	cmp    eax,0x1
c00048b6:	83 d3 00             	adc    ebx,0x0
c00048b9:	83 c6 02             	add    esi,0x2
c00048bc:	eb 13                	jmp    c00048d1 <f_getfree+0xca>
c00048be:	e8 21 d5 ff ff       	call   c0001de4 <ld_dword>
c00048c3:	25 ff ff ff 0f       	and    eax,0xfffffff
c00048c8:	83 f8 01             	cmp    eax,0x1
c00048cb:	83 d3 00             	adc    ebx,0x0
c00048ce:	83 c6 04             	add    esi,0x4
c00048d1:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00048d7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00048db:	4d                   	dec    ebp
c00048dc:	75 a0                	jne    c000487e <f_getfree+0x77>
c00048de:	eb 10                	jmp    c00048f0 <f_getfree+0xe9>
c00048e0:	bf 01 00 00 00       	mov    edi,0x1
c00048e5:	eb 09                	jmp    c00048f0 <f_getfree+0xe9>
c00048e7:	bf 02 00 00 00       	mov    edi,0x2
c00048ec:	eb 02                	jmp    c00048f0 <f_getfree+0xe9>
c00048ee:	89 c7                	mov    edi,eax
c00048f0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00048f4:	89 18                	mov    DWORD PTR [eax],ebx
c00048f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048fa:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c00048fd:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004900:	83 ca 01             	or     edx,0x1
c0004903:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004906:	83 c4 2c             	add    esp,0x2c
c0004909:	89 f8                	mov    eax,edi
c000490b:	5b                   	pop    ebx
c000490c:	5e                   	pop    esi
c000490d:	5f                   	pop    edi
c000490e:	5d                   	pop    ebp
c000490f:	c3                   	ret    

c0004910 <f_truncate>:
c0004910:	56                   	push   esi
c0004911:	53                   	push   ebx
c0004912:	83 ec 14             	sub    esp,0x14
c0004915:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004919:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000491d:	89 d8                	mov    eax,ebx
c000491f:	e8 71 d9 ff ff       	call   c0002295 <validate>
c0004924:	89 c6                	mov    esi,eax
c0004926:	85 c0                	test   eax,eax
c0004928:	0f 85 c4 00 00 00    	jne    c00049f2 <f_truncate+0xe2>
c000492e:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004932:	85 f6                	test   esi,esi
c0004934:	0f 85 b8 00 00 00    	jne    c00049f2 <f_truncate+0xe2>
c000493a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000493e:	0f 84 a9 00 00 00    	je     c00049ed <f_truncate+0xdd>
c0004944:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004947:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000494a:	0f 83 a2 00 00 00    	jae    c00049f2 <f_truncate+0xe2>
c0004950:	85 c0                	test   eax,eax
c0004952:	75 15                	jne    c0004969 <f_truncate+0x59>
c0004954:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004957:	31 c9                	xor    ecx,ecx
c0004959:	89 d8                	mov    eax,ebx
c000495b:	e8 bf eb ff ff       	call   c000351f <remove_chain>
c0004960:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004967:	eb 35                	jmp    c000499e <f_truncate+0x8e>
c0004969:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000496c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000496e:	e8 a1 e8 ff ff       	call   c0003214 <get_fat.isra.2>
c0004973:	89 c2                	mov    edx,eax
c0004975:	b8 01 00 00 00       	mov    eax,0x1
c000497a:	83 fa ff             	cmp    edx,0xffffffff
c000497d:	74 1f                	je     c000499e <f_truncate+0x8e>
c000497f:	b8 02 00 00 00       	mov    eax,0x2
c0004984:	83 fa 01             	cmp    edx,0x1
c0004987:	74 15                	je     c000499e <f_truncate+0x8e>
c0004989:	31 c0                	xor    eax,eax
c000498b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000498f:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004992:	76 0a                	jbe    c000499e <f_truncate+0x8e>
c0004994:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004997:	89 d8                	mov    eax,ebx
c0004999:	e8 81 eb ff ff       	call   c000351f <remove_chain>
c000499e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00049a1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00049a4:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00049a7:	83 ca 40             	or     edx,0x40
c00049aa:	85 c0                	test   eax,eax
c00049ac:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00049af:	75 35                	jne    c00049e6 <f_truncate+0xd6>
c00049b1:	80 e2 80             	and    dl,0x80
c00049b4:	74 3c                	je     c00049f2 <f_truncate+0xe2>
c00049b6:	6a 01                	push   0x1
c00049b8:	8d 43 28             	lea    eax,[ebx+0x28]
c00049bb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00049be:	50                   	push   eax
c00049bf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00049c3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00049c7:	50                   	push   eax
c00049c8:	e8 d5 d3 ff ff       	call   c0001da2 <disk_write>
c00049cd:	83 c4 10             	add    esp,0x10
c00049d0:	85 c0                	test   eax,eax
c00049d2:	75 0d                	jne    c00049e1 <f_truncate+0xd1>
c00049d4:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00049d7:	31 f6                	xor    esi,esi
c00049d9:	83 e0 7f             	and    eax,0x7f
c00049dc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00049df:	eb 11                	jmp    c00049f2 <f_truncate+0xe2>
c00049e1:	b8 01 00 00 00       	mov    eax,0x1
c00049e6:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c00049e9:	89 c6                	mov    esi,eax
c00049eb:	eb 05                	jmp    c00049f2 <f_truncate+0xe2>
c00049ed:	be 07 00 00 00       	mov    esi,0x7
c00049f2:	89 f0                	mov    eax,esi
c00049f4:	83 c4 14             	add    esp,0x14
c00049f7:	5b                   	pop    ebx
c00049f8:	5e                   	pop    esi
c00049f9:	c3                   	ret    

c00049fa <f_unlink>:
c00049fa:	55                   	push   ebp
c00049fb:	b9 02 00 00 00       	mov    ecx,0x2
c0004a00:	57                   	push   edi
c0004a01:	56                   	push   esi
c0004a02:	53                   	push   ebx
c0004a03:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004a09:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a0d:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004a14:	e8 78 da ff ff       	call   c0002491 <mount_volume>
c0004a19:	85 c0                	test   eax,eax
c0004a1b:	0f 85 f0 00 00 00    	jne    c0004b11 <f_unlink+0x117>
c0004a21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a25:	83 ec 0c             	sub    esp,0xc
c0004a28:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004a2c:	68 00 02 00 00       	push   0x200
c0004a31:	e8 ea 11 00 00       	call   c0005c20 <ff_memalloc>
c0004a36:	83 c4 10             	add    esp,0x10
c0004a39:	89 c3                	mov    ebx,eax
c0004a3b:	b8 11 00 00 00       	mov    eax,0x11
c0004a40:	85 db                	test   ebx,ebx
c0004a42:	0f 84 c9 00 00 00    	je     c0004b11 <f_unlink+0x117>
c0004a48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a4c:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004a53:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004a56:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a5a:	e8 7c ef ff ff       	call   c00039db <follow_path>
c0004a5f:	85 c0                	test   eax,eax
c0004a61:	0f 85 96 00 00 00    	jne    c0004afd <f_unlink+0x103>
c0004a67:	b8 06 00 00 00       	mov    eax,0x6
c0004a6c:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004a71:	0f 85 86 00 00 00    	jne    c0004afd <f_unlink+0x103>
c0004a77:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004a7c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004a82:	74 07                	je     c0004a8b <f_unlink+0x91>
c0004a84:	b8 07 00 00 00       	mov    eax,0x7
c0004a89:	eb 72                	jmp    c0004afd <f_unlink+0x103>
c0004a8b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004a8f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004a93:	8a 07                	mov    al,BYTE PTR [edi]
c0004a95:	e8 29 e7 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0004a9a:	83 e5 10             	and    ebp,0x10
c0004a9d:	89 c6                	mov    esi,eax
c0004a9f:	75 0f                	jne    c0004ab0 <f_unlink+0xb6>
c0004aa1:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004aa5:	e8 95 ed ff ff       	call   c000383f <dir_remove>
c0004aaa:	85 c0                	test   eax,eax
c0004aac:	74 2f                	je     c0004add <f_unlink+0xe3>
c0004aae:	eb 4d                	jmp    c0004afd <f_unlink+0x103>
c0004ab0:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004ab4:	31 d2                	xor    edx,edx
c0004ab6:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004aba:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004abe:	e8 55 e8 ff ff       	call   c0003318 <dir_sdi>
c0004ac3:	85 c0                	test   eax,eax
c0004ac5:	75 36                	jne    c0004afd <f_unlink+0x103>
c0004ac7:	31 d2                	xor    edx,edx
c0004ac9:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004acd:	e8 45 ec ff ff       	call   c0003717 <dir_read>
c0004ad2:	85 c0                	test   eax,eax
c0004ad4:	74 ae                	je     c0004a84 <f_unlink+0x8a>
c0004ad6:	83 f8 04             	cmp    eax,0x4
c0004ad9:	75 22                	jne    c0004afd <f_unlink+0x103>
c0004adb:	eb c4                	jmp    c0004aa1 <f_unlink+0xa7>
c0004add:	85 f6                	test   esi,esi
c0004adf:	75 0b                	jne    c0004aec <f_unlink+0xf2>
c0004ae1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ae5:	e8 8b e2 ff ff       	call   c0002d75 <sync_fs>
c0004aea:	eb 11                	jmp    c0004afd <f_unlink+0x103>
c0004aec:	31 c9                	xor    ecx,ecx
c0004aee:	89 f2                	mov    edx,esi
c0004af0:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004af4:	e8 26 ea ff ff       	call   c000351f <remove_chain>
c0004af9:	85 c0                	test   eax,eax
c0004afb:	74 e4                	je     c0004ae1 <f_unlink+0xe7>
c0004afd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004b01:	83 ec 0c             	sub    esp,0xc
c0004b04:	53                   	push   ebx
c0004b05:	e8 2e 11 00 00       	call   c0005c38 <ff_memfree>
c0004b0a:	83 c4 10             	add    esp,0x10
c0004b0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b11:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004b17:	5b                   	pop    ebx
c0004b18:	5e                   	pop    esi
c0004b19:	5f                   	pop    edi
c0004b1a:	5d                   	pop    ebp
c0004b1b:	c3                   	ret    

c0004b1c <f_mkdir>:
c0004b1c:	57                   	push   edi
c0004b1d:	b9 02 00 00 00       	mov    ecx,0x2
c0004b22:	56                   	push   esi
c0004b23:	53                   	push   ebx
c0004b24:	83 ec 50             	sub    esp,0x50
c0004b27:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b2b:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b2f:	e8 5d d9 ff ff       	call   c0002491 <mount_volume>
c0004b34:	89 c3                	mov    ebx,eax
c0004b36:	85 c0                	test   eax,eax
c0004b38:	0f 85 70 01 00 00    	jne    c0004cae <f_mkdir+0x192>
c0004b3e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b42:	bb 11 00 00 00       	mov    ebx,0x11
c0004b47:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004b4b:	83 ec 0c             	sub    esp,0xc
c0004b4e:	68 00 02 00 00       	push   0x200
c0004b53:	e8 c8 10 00 00       	call   c0005c20 <ff_memalloc>
c0004b58:	83 c4 10             	add    esp,0x10
c0004b5b:	89 c7                	mov    edi,eax
c0004b5d:	85 c0                	test   eax,eax
c0004b5f:	0f 84 49 01 00 00    	je     c0004cae <f_mkdir+0x192>
c0004b65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b69:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b6d:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004b70:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b74:	e8 62 ee ff ff       	call   c00039db <follow_path>
c0004b79:	89 c3                	mov    ebx,eax
c0004b7b:	85 c0                	test   eax,eax
c0004b7d:	74 3e                	je     c0004bbd <f_mkdir+0xa1>
c0004b7f:	83 f8 04             	cmp    eax,0x4
c0004b82:	75 3e                	jne    c0004bc2 <f_mkdir+0xa6>
c0004b84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b88:	31 d2                	xor    edx,edx
c0004b8a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004b8e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004b92:	e8 49 e8 ff ff       	call   c00033e0 <create_chain>
c0004b97:	89 c6                	mov    esi,eax
c0004b99:	85 c0                	test   eax,eax
c0004b9b:	74 0c                	je     c0004ba9 <f_mkdir+0x8d>
c0004b9d:	bb 02 00 00 00       	mov    ebx,0x2
c0004ba2:	83 f8 01             	cmp    eax,0x1
c0004ba5:	74 07                	je     c0004bae <f_mkdir+0x92>
c0004ba7:	eb 2a                	jmp    c0004bd3 <f_mkdir+0xb7>
c0004ba9:	bb 07 00 00 00       	mov    ebx,0x7
c0004bae:	31 c9                	xor    ecx,ecx
c0004bb0:	89 f2                	mov    edx,esi
c0004bb2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bb6:	e8 64 e9 ff ff       	call   c000351f <remove_chain>
c0004bbb:	eb 05                	jmp    c0004bc2 <f_mkdir+0xa6>
c0004bbd:	bb 08 00 00 00       	mov    ebx,0x8
c0004bc2:	83 ec 0c             	sub    esp,0xc
c0004bc5:	57                   	push   edi
c0004bc6:	e8 6d 10 00 00       	call   c0005c38 <ff_memfree>
c0004bcb:	83 c4 10             	add    esp,0x10
c0004bce:	e9 db 00 00 00       	jmp    c0004cae <f_mkdir+0x192>
c0004bd3:	bb 01 00 00 00       	mov    ebx,0x1
c0004bd8:	83 f8 ff             	cmp    eax,0xffffffff
c0004bdb:	74 d1                	je     c0004bae <f_mkdir+0x92>
c0004bdd:	89 f2                	mov    edx,esi
c0004bdf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004be3:	e8 f1 dc ff ff       	call   c00028d9 <dir_clear>
c0004be8:	89 c3                	mov    ebx,eax
c0004bea:	85 c0                	test   eax,eax
c0004bec:	75 c0                	jne    c0004bae <f_mkdir+0x92>
c0004bee:	b9 0b 00 00 00       	mov    ecx,0xb
c0004bf3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bf7:	ba 20 00 00 00       	mov    edx,0x20
c0004bfc:	83 c0 34             	add    eax,0x34
c0004bff:	e8 14 d2 ff ff       	call   c0001e18 <mem_set>
c0004c04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c08:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c0d:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004c11:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004c15:	83 c0 4a             	add    eax,0x4a
c0004c18:	e8 e3 d1 ff ff       	call   c0001e00 <st_dword>
c0004c1d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c21:	89 f1                	mov    ecx,esi
c0004c23:	8d 50 34             	lea    edx,[eax+0x34]
c0004c26:	e8 c1 e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c2f:	b9 20 00 00 00       	mov    ecx,0x20
c0004c34:	8d 50 34             	lea    edx,[eax+0x34]
c0004c37:	83 c0 54             	add    eax,0x54
c0004c3a:	e8 c4 d1 ff ff       	call   c0001e03 <mem_cpy>
c0004c3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c43:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004c47:	8d 50 54             	lea    edx,[eax+0x54]
c0004c4a:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004c4e:	e8 99 e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c53:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c57:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c5b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c5f:	e8 0c ee ff ff       	call   c0003a70 <dir_register>
c0004c64:	89 c3                	mov    ebx,eax
c0004c66:	85 c0                	test   eax,eax
c0004c68:	0f 85 40 ff ff ff    	jne    c0004bae <f_mkdir+0x92>
c0004c6e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c72:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c77:	83 c0 16             	add    eax,0x16
c0004c7a:	e8 81 d1 ff ff       	call   c0001e00 <st_dword>
c0004c7f:	89 f1                	mov    ecx,esi
c0004c81:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c89:	e8 5e e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c8e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c92:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004c96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c9a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c9e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ca2:	e8 ce e0 ff ff       	call   c0002d75 <sync_fs>
c0004ca7:	89 c3                	mov    ebx,eax
c0004ca9:	e9 14 ff ff ff       	jmp    c0004bc2 <f_mkdir+0xa6>
c0004cae:	83 c4 50             	add    esp,0x50
c0004cb1:	89 d8                	mov    eax,ebx
c0004cb3:	5b                   	pop    ebx
c0004cb4:	5e                   	pop    esi
c0004cb5:	5f                   	pop    edi
c0004cb6:	c3                   	ret    

c0004cb7 <f_rename>:
c0004cb7:	57                   	push   edi
c0004cb8:	56                   	push   esi
c0004cb9:	53                   	push   ebx
c0004cba:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004cc0:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004cc7:	e8 7c d5 ff ff       	call   c0002248 <get_ldnumber>
c0004ccc:	b9 02 00 00 00       	mov    ecx,0x2
c0004cd1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004cd5:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004cdc:	e8 b0 d7 ff ff       	call   c0002491 <mount_volume>
c0004ce1:	85 c0                	test   eax,eax
c0004ce3:	0f 85 7c 01 00 00    	jne    c0004e65 <f_rename+0x1ae>
c0004ce9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ced:	83 ec 0c             	sub    esp,0xc
c0004cf0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004cf4:	68 00 02 00 00       	push   0x200
c0004cf9:	e8 22 0f 00 00       	call   c0005c20 <ff_memalloc>
c0004cfe:	83 c4 10             	add    esp,0x10
c0004d01:	89 c6                	mov    esi,eax
c0004d03:	b8 11 00 00 00       	mov    eax,0x11
c0004d08:	85 f6                	test   esi,esi
c0004d0a:	0f 84 55 01 00 00    	je     c0004e65 <f_rename+0x1ae>
c0004d10:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d14:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004d1b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d1e:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004d22:	e8 b4 ec ff ff       	call   c00039db <follow_path>
c0004d27:	85 c0                	test   eax,eax
c0004d29:	0f 85 22 01 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d2f:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004d33:	b8 06 00 00 00       	mov    eax,0x6
c0004d38:	80 e2 a0             	and    dl,0xa0
c0004d3b:	0f 85 10 01 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d41:	b9 20 00 00 00       	mov    ecx,0x20
c0004d46:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004d4a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d4e:	e8 b0 d0 ff ff       	call   c0001e03 <mem_cpy>
c0004d53:	b9 30 00 00 00       	mov    ecx,0x30
c0004d58:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004d5c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d60:	e8 9e d0 ff ff       	call   c0001e03 <mem_cpy>
c0004d65:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004d6c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d70:	e8 66 ec ff ff       	call   c00039db <follow_path>
c0004d75:	85 c0                	test   eax,eax
c0004d77:	75 20                	jne    c0004d99 <f_rename+0xe2>
c0004d79:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004d7d:	b8 08 00 00 00       	mov    eax,0x8
c0004d82:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004d86:	0f 85 c5 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d8c:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004d90:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004d97:	eb 03                	jmp    c0004d9c <f_rename+0xe5>
c0004d99:	83 f8 04             	cmp    eax,0x4
c0004d9c:	0f 85 af 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004da2:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004da6:	e8 c5 ec ff ff       	call   c0003a70 <dir_register>
c0004dab:	85 c0                	test   eax,eax
c0004dad:	0f 85 9e 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004db3:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004dba:	b9 13 00 00 00       	mov    ecx,0x13
c0004dbf:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004dc2:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004dc6:	e8 38 d0 ff ff       	call   c0001e03 <mem_cpy>
c0004dcb:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004dcf:	a8 10                	test   al,0x10
c0004dd1:	75 03                	jne    c0004dd6 <f_rename+0x11f>
c0004dd3:	83 c8 20             	or     eax,0x20
c0004dd6:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004dd9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ddd:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004de1:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004de5:	74 54                	je     c0004e3b <f_rename+0x184>
c0004de7:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004deb:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004def:	74 4a                	je     c0004e3b <f_rename+0x184>
c0004df1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004df5:	89 da                	mov    edx,ebx
c0004df7:	8a 07                	mov    al,BYTE PTR [edi]
c0004df9:	e8 c5 e3 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0004dfe:	89 c2                	mov    edx,eax
c0004e00:	89 f8                	mov    eax,edi
c0004e02:	e8 27 d2 ff ff       	call   c000202e <clst2sect>
c0004e07:	89 c2                	mov    edx,eax
c0004e09:	b8 02 00 00 00       	mov    eax,0x2
c0004e0e:	85 d2                	test   edx,edx
c0004e10:	74 3f                	je     c0004e51 <f_rename+0x19a>
c0004e12:	89 f8                	mov    eax,edi
c0004e14:	e8 25 d5 ff ff       	call   c000233e <move_window>
c0004e19:	85 c0                	test   eax,eax
c0004e1b:	75 34                	jne    c0004e51 <f_rename+0x19a>
c0004e1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e21:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004e25:	75 14                	jne    c0004e3b <f_rename+0x184>
c0004e27:	8d 50 54             	lea    edx,[eax+0x54]
c0004e2a:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004e2e:	e8 b9 e3 ff ff       	call   c00031ec <st_clust.isra.1>
c0004e33:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e37:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e3b:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004e3f:	e8 fb e9 ff ff       	call   c000383f <dir_remove>
c0004e44:	85 c0                	test   eax,eax
c0004e46:	75 09                	jne    c0004e51 <f_rename+0x19a>
c0004e48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e4c:	e8 24 df ff ff       	call   c0002d75 <sync_fs>
c0004e51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e55:	83 ec 0c             	sub    esp,0xc
c0004e58:	56                   	push   esi
c0004e59:	e8 da 0d 00 00       	call   c0005c38 <ff_memfree>
c0004e5e:	83 c4 10             	add    esp,0x10
c0004e61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e65:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004e6b:	5b                   	pop    ebx
c0004e6c:	5e                   	pop    esi
c0004e6d:	5f                   	pop    edi
c0004e6e:	c3                   	ret    

c0004e6f <f_chmod>:
c0004e6f:	57                   	push   edi
c0004e70:	b9 02 00 00 00       	mov    ecx,0x2
c0004e75:	56                   	push   esi
c0004e76:	53                   	push   ebx
c0004e77:	83 ec 50             	sub    esp,0x50
c0004e7a:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0004e7e:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0004e82:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e86:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004e8a:	e8 02 d6 ff ff       	call   c0002491 <mount_volume>
c0004e8f:	85 c0                	test   eax,eax
c0004e91:	0f 85 81 00 00 00    	jne    c0004f18 <f_chmod+0xa9>
c0004e97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e9b:	83 ec 0c             	sub    esp,0xc
c0004e9e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004ea2:	68 00 02 00 00       	push   0x200
c0004ea7:	e8 74 0d 00 00       	call   c0005c20 <ff_memalloc>
c0004eac:	83 c4 10             	add    esp,0x10
c0004eaf:	89 c6                	mov    esi,eax
c0004eb1:	b8 11 00 00 00       	mov    eax,0x11
c0004eb6:	85 f6                	test   esi,esi
c0004eb8:	74 5e                	je     c0004f18 <f_chmod+0xa9>
c0004eba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ebe:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004ec2:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004ec5:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ec9:	e8 0d eb ff ff       	call   c00039db <follow_path>
c0004ece:	85 c0                	test   eax,eax
c0004ed0:	75 32                	jne    c0004f04 <f_chmod+0x95>
c0004ed2:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004ed6:	b8 06 00 00 00       	mov    eax,0x6
c0004edb:	80 e2 a0             	and    dl,0xa0
c0004ede:	75 24                	jne    c0004f04 <f_chmod+0x95>
c0004ee0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004ee4:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0004ee7:	31 d7                	xor    edi,edx
c0004ee9:	21 fb                	and    ebx,edi
c0004eeb:	83 e3 27             	and    ebx,0x27
c0004eee:	31 d3                	xor    ebx,edx
c0004ef0:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004ef3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ef7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004efb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004eff:	e8 71 de ff ff       	call   c0002d75 <sync_fs>
c0004f04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f08:	83 ec 0c             	sub    esp,0xc
c0004f0b:	56                   	push   esi
c0004f0c:	e8 27 0d 00 00       	call   c0005c38 <ff_memfree>
c0004f11:	83 c4 10             	add    esp,0x10
c0004f14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f18:	83 c4 50             	add    esp,0x50
c0004f1b:	5b                   	pop    ebx
c0004f1c:	5e                   	pop    esi
c0004f1d:	5f                   	pop    edi
c0004f1e:	c3                   	ret    

c0004f1f <f_utime>:
c0004f1f:	56                   	push   esi
c0004f20:	b9 02 00 00 00       	mov    ecx,0x2
c0004f25:	53                   	push   ebx
c0004f26:	83 ec 54             	sub    esp,0x54
c0004f29:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004f2d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f31:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004f35:	e8 57 d5 ff ff       	call   c0002491 <mount_volume>
c0004f3a:	85 c0                	test   eax,eax
c0004f3c:	0f 85 87 00 00 00    	jne    c0004fc9 <f_utime+0xaa>
c0004f42:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f46:	83 ec 0c             	sub    esp,0xc
c0004f49:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004f4d:	68 00 02 00 00       	push   0x200
c0004f52:	e8 c9 0c 00 00       	call   c0005c20 <ff_memalloc>
c0004f57:	83 c4 10             	add    esp,0x10
c0004f5a:	89 c3                	mov    ebx,eax
c0004f5c:	b8 11 00 00 00       	mov    eax,0x11
c0004f61:	85 db                	test   ebx,ebx
c0004f63:	74 64                	je     c0004fc9 <f_utime+0xaa>
c0004f65:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f69:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004f6d:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004f70:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f74:	e8 62 ea ff ff       	call   c00039db <follow_path>
c0004f79:	85 c0                	test   eax,eax
c0004f7b:	75 38                	jne    c0004fb5 <f_utime+0x96>
c0004f7d:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004f81:	b8 06 00 00 00       	mov    eax,0x6
c0004f86:	80 e2 a0             	and    dl,0xa0
c0004f89:	75 2a                	jne    c0004fb5 <f_utime+0x96>
c0004f8b:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004f8f:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004f93:	c1 e2 10             	shl    edx,0x10
c0004f96:	09 c2                	or     edx,eax
c0004f98:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f9c:	83 c0 16             	add    eax,0x16
c0004f9f:	e8 5c ce ff ff       	call   c0001e00 <st_dword>
c0004fa4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fa8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fb0:	e8 c0 dd ff ff       	call   c0002d75 <sync_fs>
c0004fb5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004fb9:	83 ec 0c             	sub    esp,0xc
c0004fbc:	53                   	push   ebx
c0004fbd:	e8 76 0c 00 00       	call   c0005c38 <ff_memfree>
c0004fc2:	83 c4 10             	add    esp,0x10
c0004fc5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fc9:	83 c4 54             	add    esp,0x54
c0004fcc:	5b                   	pop    ebx
c0004fcd:	5e                   	pop    esi
c0004fce:	c3                   	ret    

c0004fcf <f_getlabel>:
c0004fcf:	55                   	push   ebp
c0004fd0:	31 c9                	xor    ecx,ecx
c0004fd2:	57                   	push   edi
c0004fd3:	56                   	push   esi
c0004fd4:	53                   	push   ebx
c0004fd5:	83 ec 5c             	sub    esp,0x5c
c0004fd8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004fdc:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004fe0:	e8 ac d4 ff ff       	call   c0002491 <mount_volume>
c0004fe5:	89 c6                	mov    esi,eax
c0004fe7:	85 c0                	test   eax,eax
c0004fe9:	0f 85 27 01 00 00    	jne    c0005116 <f_getlabel+0x147>
c0004fef:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004ff4:	0f 84 d0 00 00 00    	je     c00050ca <f_getlabel+0xfb>
c0004ffa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ffe:	31 d2                	xor    edx,edx
c0005000:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005004:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000500c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005010:	e8 03 e3 ff ff       	call   c0003318 <dir_sdi>
c0005015:	85 c0                	test   eax,eax
c0005017:	0f 85 a1 00 00 00    	jne    c00050be <f_getlabel+0xef>
c000501d:	ba 01 00 00 00       	mov    edx,0x1
c0005022:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005026:	e8 ec e6 ff ff       	call   c0003717 <dir_read>
c000502b:	85 c0                	test   eax,eax
c000502d:	0f 85 8b 00 00 00    	jne    c00050be <f_getlabel+0xef>
c0005033:	31 db                	xor    ebx,ebx
c0005035:	31 c9                	xor    ecx,ecx
c0005037:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000503b:	8d 79 01             	lea    edi,[ecx+0x1]
c000503e:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0005043:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0005048:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000504c:	e8 06 ce ff ff       	call   c0001e57 <dbc_1st>
c0005051:	85 c0                	test   eax,eax
c0005053:	74 16                	je     c000506b <f_getlabel+0x9c>
c0005055:	83 ff 0b             	cmp    edi,0xb
c0005058:	74 11                	je     c000506b <f_getlabel+0x9c>
c000505a:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c000505f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005063:	8d 79 02             	lea    edi,[ecx+0x2]
c0005066:	c1 e0 08             	shl    eax,0x8
c0005069:	09 c2                	or     edx,eax
c000506b:	0f b7 d2             	movzx  edx,dx
c000506e:	50                   	push   eax
c000506f:	50                   	push   eax
c0005070:	68 b5 01 00 00       	push   0x1b5
c0005075:	52                   	push   edx
c0005076:	e8 75 0c 00 00       	call   c0005cf0 <ff_oem2uni>
c000507b:	83 c4 10             	add    esp,0x10
c000507e:	0f b7 c0             	movzx  eax,ax
c0005081:	85 c0                	test   eax,eax
c0005083:	74 22                	je     c00050a7 <f_getlabel+0xd8>
c0005085:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0005089:	b9 04 00 00 00       	mov    ecx,0x4
c000508e:	01 da                	add    edx,ebx
c0005090:	e8 a0 ce ff ff       	call   c0001f35 <put_utf>
c0005095:	0f b6 c0             	movzx  eax,al
c0005098:	85 c0                	test   eax,eax
c000509a:	74 0b                	je     c00050a7 <f_getlabel+0xd8>
c000509c:	01 c3                	add    ebx,eax
c000509e:	83 ff 0b             	cmp    edi,0xb
c00050a1:	74 06                	je     c00050a9 <f_getlabel+0xda>
c00050a3:	89 f9                	mov    ecx,edi
c00050a5:	eb 90                	jmp    c0005037 <f_getlabel+0x68>
c00050a7:	31 db                	xor    ebx,ebx
c00050a9:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c00050ad:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00050b0:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c00050b4:	74 14                	je     c00050ca <f_getlabel+0xfb>
c00050b6:	4b                   	dec    ebx
c00050b7:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c00050ba:	74 f1                	je     c00050ad <f_getlabel+0xde>
c00050bc:	eb 0c                	jmp    c00050ca <f_getlabel+0xfb>
c00050be:	83 f8 04             	cmp    eax,0x4
c00050c1:	75 51                	jne    c0005114 <f_getlabel+0x145>
c00050c3:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00050c7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00050ca:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00050cf:	74 45                	je     c0005116 <f_getlabel+0x147>
c00050d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050d5:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00050d8:	e8 61 d2 ff ff       	call   c000233e <move_window>
c00050dd:	89 c6                	mov    esi,eax
c00050df:	85 c0                	test   eax,eax
c00050e1:	75 33                	jne    c0005116 <f_getlabel+0x147>
c00050e3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00050e7:	b8 43 00 00 00       	mov    eax,0x43
c00050ec:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00050ef:	83 f9 03             	cmp    ecx,0x3
c00050f2:	74 0f                	je     c0005103 <f_getlabel+0x134>
c00050f4:	31 c0                	xor    eax,eax
c00050f6:	83 f9 04             	cmp    ecx,0x4
c00050f9:	0f 94 c0             	sete   al
c00050fc:	48                   	dec    eax
c00050fd:	83 e0 c3             	and    eax,0xffffffc3
c0005100:	83 c0 64             	add    eax,0x64
c0005103:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005107:	e8 d8 cc ff ff       	call   c0001de4 <ld_dword>
c000510c:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0005110:	89 07                	mov    DWORD PTR [edi],eax
c0005112:	eb 02                	jmp    c0005116 <f_getlabel+0x147>
c0005114:	89 c6                	mov    esi,eax
c0005116:	83 c4 5c             	add    esp,0x5c
c0005119:	89 f0                	mov    eax,esi
c000511b:	5b                   	pop    ebx
c000511c:	5e                   	pop    esi
c000511d:	5f                   	pop    edi
c000511e:	5d                   	pop    ebp
c000511f:	c3                   	ret    

c0005120 <f_setlabel>:
c0005120:	57                   	push   edi
c0005121:	b9 02 00 00 00       	mov    ecx,0x2
c0005126:	56                   	push   esi
c0005127:	53                   	push   ebx
c0005128:	83 ec 50             	sub    esp,0x50
c000512b:	8d 54 24 04          	lea    edx,[esp+0x4]
c000512f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005133:	e8 59 d3 ff ff       	call   c0002491 <mount_volume>
c0005138:	89 c6                	mov    esi,eax
c000513a:	85 c0                	test   eax,eax
c000513c:	0f 85 65 01 00 00    	jne    c00052a7 <f_setlabel+0x187>
c0005142:	b9 0b 00 00 00       	mov    ecx,0xb
c0005147:	ba 20 00 00 00       	mov    edx,0x20
c000514c:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005150:	31 db                	xor    ebx,ebx
c0005152:	e8 c1 cc ff ff       	call   c0001e18 <mem_set>
c0005157:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000515b:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c000515e:	76 5d                	jbe    c00051bd <f_setlabel+0x9d>
c0005160:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005164:	e8 f4 cc ff ff       	call   c0001e5d <tchar2uni>
c0005169:	3d ff ff 00 00       	cmp    eax,0xffff
c000516e:	76 0a                	jbe    c000517a <f_setlabel+0x5a>
c0005170:	be 06 00 00 00       	mov    esi,0x6
c0005175:	e9 2d 01 00 00       	jmp    c00052a7 <f_setlabel+0x187>
c000517a:	83 ec 0c             	sub    esp,0xc
c000517d:	50                   	push   eax
c000517e:	e8 e5 0b 00 00       	call   c0005d68 <ff_wtoupper>
c0005183:	5a                   	pop    edx
c0005184:	59                   	pop    ecx
c0005185:	68 b5 01 00 00       	push   0x1b5
c000518a:	50                   	push   eax
c000518b:	e8 c0 0a 00 00       	call   c0005c50 <ff_uni2oem>
c0005190:	83 c4 10             	add    esp,0x10
c0005193:	0f b7 f0             	movzx  esi,ax
c0005196:	89 f7                	mov    edi,esi
c0005198:	85 f6                	test   esi,esi
c000519a:	74 d4                	je     c0005170 <f_setlabel+0x50>
c000519c:	89 f2                	mov    edx,esi
c000519e:	b8 30 02 02 c0       	mov    eax,0xc0020230
c00051a3:	e8 9e cc ff ff       	call   c0001e46 <chk_chr>
c00051a8:	85 c0                	test   eax,eax
c00051aa:	75 c4                	jne    c0005170 <f_setlabel+0x50>
c00051ac:	81 fe ff 00 00 00    	cmp    esi,0xff
c00051b2:	0f 87 c9 00 00 00    	ja     c0005281 <f_setlabel+0x161>
c00051b8:	e9 e0 00 00 00       	jmp    c000529d <f_setlabel+0x17d>
c00051bd:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00051c2:	74 ac                	je     c0005170 <f_setlabel+0x50>
c00051c4:	85 db                	test   ebx,ebx
c00051c6:	74 0e                	je     c00051d6 <f_setlabel+0xb6>
c00051c8:	8d 43 ff             	lea    eax,[ebx-0x1]
c00051cb:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00051d0:	75 04                	jne    c00051d6 <f_setlabel+0xb6>
c00051d2:	89 c3                	mov    ebx,eax
c00051d4:	eb ee                	jmp    c00051c4 <f_setlabel+0xa4>
c00051d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00051da:	31 d2                	xor    edx,edx
c00051dc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00051e0:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00051e8:	8d 44 24 20          	lea    eax,[esp+0x20]
c00051ec:	e8 27 e1 ff ff       	call   c0003318 <dir_sdi>
c00051f1:	89 c6                	mov    esi,eax
c00051f3:	85 c0                	test   eax,eax
c00051f5:	0f 85 ac 00 00 00    	jne    c00052a7 <f_setlabel+0x187>
c00051fb:	ba 01 00 00 00       	mov    edx,0x1
c0005200:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005204:	e8 0e e5 ff ff       	call   c0003717 <dir_read>
c0005209:	85 c0                	test   eax,eax
c000520b:	75 18                	jne    c0005225 <f_setlabel+0x105>
c000520d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005211:	85 db                	test   ebx,ebx
c0005213:	74 0b                	je     c0005220 <f_setlabel+0x100>
c0005215:	b9 0b 00 00 00       	mov    ecx,0xb
c000521a:	8d 54 24 0a          	lea    edx,[esp+0xa]
c000521e:	eb 47                	jmp    c0005267 <f_setlabel+0x147>
c0005220:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0005223:	eb 47                	jmp    c000526c <f_setlabel+0x14c>
c0005225:	83 f8 04             	cmp    eax,0x4
c0005228:	75 53                	jne    c000527d <f_setlabel+0x15d>
c000522a:	85 db                	test   ebx,ebx
c000522c:	74 79                	je     c00052a7 <f_setlabel+0x187>
c000522e:	ba 01 00 00 00       	mov    edx,0x1
c0005233:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005237:	e8 76 e4 ff ff       	call   c00036b2 <dir_alloc>
c000523c:	89 c6                	mov    esi,eax
c000523e:	85 c0                	test   eax,eax
c0005240:	75 65                	jne    c00052a7 <f_setlabel+0x187>
c0005242:	b9 20 00 00 00       	mov    ecx,0x20
c0005247:	31 d2                	xor    edx,edx
c0005249:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000524d:	e8 c6 cb ff ff       	call   c0001e18 <mem_set>
c0005252:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005256:	b9 0b 00 00 00       	mov    ecx,0xb
c000525b:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000525f:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005263:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005267:	e8 97 cb ff ff       	call   c0001e03 <mem_cpy>
c000526c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005270:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005274:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005278:	e8 f8 da ff ff       	call   c0002d75 <sync_fs>
c000527d:	89 c6                	mov    esi,eax
c000527f:	eb 26                	jmp    c00052a7 <f_setlabel+0x187>
c0005281:	83 fb 09             	cmp    ebx,0x9
c0005284:	0f 87 e6 fe ff ff    	ja     c0005170 <f_setlabel+0x50>
c000528a:	89 f0                	mov    eax,esi
c000528c:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005290:	43                   	inc    ebx
c0005291:	89 f8                	mov    eax,edi
c0005293:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005297:	43                   	inc    ebx
c0005298:	e9 ba fe ff ff       	jmp    c0005157 <f_setlabel+0x37>
c000529d:	83 fb 0a             	cmp    ebx,0xa
c00052a0:	76 ef                	jbe    c0005291 <f_setlabel+0x171>
c00052a2:	e9 c9 fe ff ff       	jmp    c0005170 <f_setlabel+0x50>
c00052a7:	83 c4 50             	add    esp,0x50
c00052aa:	89 f0                	mov    eax,esi
c00052ac:	5b                   	pop    ebx
c00052ad:	5e                   	pop    esi
c00052ae:	5f                   	pop    edi
c00052af:	c3                   	ret    

c00052b0 <f_expand>:
c00052b0:	55                   	push   ebp
c00052b1:	57                   	push   edi
c00052b2:	56                   	push   esi
c00052b3:	53                   	push   ebx
c00052b4:	83 ec 2c             	sub    esp,0x2c
c00052b7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00052bb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052c3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052c7:	89 d8                	mov    eax,ebx
c00052c9:	e8 c7 cf ff ff       	call   c0002295 <validate>
c00052ce:	89 c6                	mov    esi,eax
c00052d0:	85 c0                	test   eax,eax
c00052d2:	0f 85 3b 01 00 00    	jne    c0005413 <f_expand+0x163>
c00052d8:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00052dc:	85 f6                	test   esi,esi
c00052de:	0f 85 2f 01 00 00    	jne    c0005413 <f_expand+0x163>
c00052e4:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00052e9:	75 0a                	jne    c00052f5 <f_expand+0x45>
c00052eb:	be 07 00 00 00       	mov    esi,0x7
c00052f0:	e9 1e 01 00 00       	jmp    c0005413 <f_expand+0x163>
c00052f5:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c00052f9:	75 f0                	jne    c00052eb <f_expand+0x3b>
c00052fb:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00052ff:	74 ea                	je     c00052eb <f_expand+0x3b>
c0005301:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0005305:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c0005309:	c1 e1 09             	shl    ecx,0x9
c000530c:	8d 41 ff             	lea    eax,[ecx-0x1]
c000530f:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0005313:	0f 95 c0             	setne  al
c0005316:	31 d2                	xor    edx,edx
c0005318:	0f b6 c0             	movzx  eax,al
c000531b:	89 c7                	mov    edi,eax
c000531d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005321:	f7 f1                	div    ecx
c0005323:	01 f8                	add    eax,edi
c0005325:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c0005328:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000532c:	83 ff 01             	cmp    edi,0x1
c000532f:	76 05                	jbe    c0005336 <f_expand+0x86>
c0005331:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c0005334:	77 05                	ja     c000533b <f_expand+0x8b>
c0005336:	bf 02 00 00 00       	mov    edi,0x2
c000533b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000533e:	89 fd                	mov    ebp,edi
c0005340:	31 c9                	xor    ecx,ecx
c0005342:	89 ea                	mov    edx,ebp
c0005344:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005348:	8b 03                	mov    eax,DWORD PTR [ebx]
c000534a:	45                   	inc    ebp
c000534b:	e8 c4 de ff ff       	call   c0003214 <get_fat.isra.2>
c0005350:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005354:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005358:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c000535b:	77 05                	ja     c0005362 <f_expand+0xb2>
c000535d:	bd 02 00 00 00       	mov    ebp,0x2
c0005362:	83 f8 01             	cmp    eax,0x1
c0005365:	74 20                	je     c0005387 <f_expand+0xd7>
c0005367:	83 f8 ff             	cmp    eax,0xffffffff
c000536a:	74 25                	je     c0005391 <f_expand+0xe1>
c000536c:	85 c0                	test   eax,eax
c000536e:	75 09                	jne    c0005379 <f_expand+0xc9>
c0005370:	41                   	inc    ecx
c0005371:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0005375:	75 07                	jne    c000537e <f_expand+0xce>
c0005377:	eb 1f                	jmp    c0005398 <f_expand+0xe8>
c0005379:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000537c:	31 c9                	xor    ecx,ecx
c000537e:	39 fd                	cmp    ebp,edi
c0005380:	75 c0                	jne    c0005342 <f_expand+0x92>
c0005382:	e9 64 ff ff ff       	jmp    c00052eb <f_expand+0x3b>
c0005387:	be 02 00 00 00       	mov    esi,0x2
c000538c:	e9 82 00 00 00       	jmp    c0005413 <f_expand+0x163>
c0005391:	be 01 00 00 00       	mov    esi,0x1
c0005396:	eb 7b                	jmp    c0005413 <f_expand+0x163>
c0005398:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000539d:	74 2b                	je     c00053ca <f_expand+0x11a>
c000539f:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00053a2:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00053a6:	85 ed                	test   ebp,ebp
c00053a8:	74 24                	je     c00053ce <f_expand+0x11e>
c00053aa:	83 c9 ff             	or     ecx,0xffffffff
c00053ad:	83 fd 01             	cmp    ebp,0x1
c00053b0:	74 03                	je     c00053b5 <f_expand+0x105>
c00053b2:	8d 4f 01             	lea    ecx,[edi+0x1]
c00053b5:	89 fa                	mov    edx,edi
c00053b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053bb:	e8 c2 d3 ff ff       	call   c0002782 <put_fat>
c00053c0:	85 c0                	test   eax,eax
c00053c2:	75 4d                	jne    c0005411 <f_expand+0x161>
c00053c4:	89 f8                	mov    eax,edi
c00053c6:	4d                   	dec    ebp
c00053c7:	47                   	inc    edi
c00053c8:	eb dc                	jmp    c00053a6 <f_expand+0xf6>
c00053ca:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053cd:	48                   	dec    eax
c00053ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00053d2:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053d7:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00053da:	74 37                	je     c0005413 <f_expand+0x163>
c00053dc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053df:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00053e2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00053e6:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00053e9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00053ec:	83 c8 40             	or     eax,0x40
c00053ef:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00053f2:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00053f5:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00053f8:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00053fb:	39 c8                	cmp    eax,ecx
c00053fd:	77 14                	ja     c0005413 <f_expand+0x163>
c00053ff:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0005403:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005406:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005409:	83 c8 01             	or     eax,0x1
c000540c:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c000540f:	eb 02                	jmp    c0005413 <f_expand+0x163>
c0005411:	89 c6                	mov    esi,eax
c0005413:	83 c4 2c             	add    esp,0x2c
c0005416:	89 f0                	mov    eax,esi
c0005418:	5b                   	pop    ebx
c0005419:	5e                   	pop    esi
c000541a:	5f                   	pop    edi
c000541b:	5d                   	pop    ebp
c000541c:	c3                   	ret    

c000541d <f_mkfs>:
c000541d:	55                   	push   ebp
c000541e:	57                   	push   edi
c000541f:	56                   	push   esi
c0005420:	be 0b 00 00 00       	mov    esi,0xb
c0005425:	53                   	push   ebx
c0005426:	83 ec 5c             	sub    esp,0x5c
c0005429:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000542d:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c0005431:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005435:	e8 0e ce ff ff       	call   c0002248 <get_ldnumber>
c000543a:	85 c0                	test   eax,eax
c000543c:	0f 88 d1 07 00 00    	js     c0005c13 <f_mkfs+0x7f6>
c0005442:	8b 14 85 a0 54 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdab60]
c0005449:	85 d2                	test   edx,edx
c000544b:	74 03                	je     c0005450 <f_mkfs+0x33>
c000544d:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005450:	85 db                	test   ebx,ebx
c0005452:	75 05                	jne    c0005459 <f_mkfs+0x3c>
c0005454:	bb 20 02 02 c0       	mov    ebx,0xc0020220
c0005459:	83 ec 0c             	sub    esp,0xc
c000545c:	0f b6 c0             	movzx  eax,al
c000545f:	be 03 00 00 00       	mov    esi,0x3
c0005464:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005468:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000546c:	e8 18 c9 ff ff       	call   c0001d89 <disk_initialize>
c0005471:	83 c4 10             	add    esp,0x10
c0005474:	a8 01                	test   al,0x1
c0005476:	0f 85 97 07 00 00    	jne    c0005c13 <f_mkfs+0x7f6>
c000547c:	be 0a 00 00 00       	mov    esi,0xa
c0005481:	a8 04                	test   al,0x4
c0005483:	0f 85 8a 07 00 00    	jne    c0005c13 <f_mkfs+0x7f6>
c0005489:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000548c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005490:	85 c0                	test   eax,eax
c0005492:	75 20                	jne    c00054b4 <f_mkfs+0x97>
c0005494:	51                   	push   ecx
c0005495:	8d 44 24 44          	lea    eax,[esp+0x44]
c0005499:	50                   	push   eax
c000549a:	6a 03                	push   0x3
c000549c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00054a0:	e8 13 c9 ff ff       	call   c0001db8 <disk_ioctl>
c00054a5:	83 c4 10             	add    esp,0x10
c00054a8:	85 c0                	test   eax,eax
c00054aa:	74 08                	je     c00054b4 <f_mkfs+0x97>
c00054ac:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054b4:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00054b8:	8d 42 ff             	lea    eax,[edx-0x1]
c00054bb:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054c0:	77 04                	ja     c00054c6 <f_mkfs+0xa9>
c00054c2:	85 c2                	test   edx,eax
c00054c4:	74 08                	je     c00054ce <f_mkfs+0xb1>
c00054c6:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054ce:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00054d1:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00054d5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00054d9:	48                   	dec    eax
c00054da:	3c 01                	cmp    al,0x1
c00054dc:	76 05                	jbe    c00054e3 <f_mkfs+0xc6>
c00054de:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00054e3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054e6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00054ea:	48                   	dec    eax
c00054eb:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054f0:	77 07                	ja     c00054f9 <f_mkfs+0xdc>
c00054f2:	f6 44 24 14 0f       	test   BYTE PTR [esp+0x14],0xf
c00054f7:	74 08                	je     c0005501 <f_mkfs+0xe4>
c00054f9:	c7 44 24 14 00 02 00 00 	mov    DWORD PTR [esp+0x14],0x200
c0005501:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005504:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000550a:	77 07                	ja     c0005513 <f_mkfs+0xf6>
c000550c:	8d 47 ff             	lea    eax,[edi-0x1]
c000550f:	85 f8                	test   eax,edi
c0005511:	74 02                	je     c0005515 <f_mkfs+0xf8>
c0005513:	31 ff                	xor    edi,edi
c0005515:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000551d:	77 0a                	ja     c0005529 <f_mkfs+0x10c>
c000551f:	be 11 00 00 00       	mov    esi,0x11
c0005524:	e9 ea 06 00 00       	jmp    c0005c13 <f_mkfs+0x7f6>
c0005529:	8b 33                	mov    esi,DWORD PTR [ebx]
c000552b:	85 ed                	test   ebp,ebp
c000552d:	89 eb                	mov    ebx,ebp
c000552f:	75 1e                	jne    c000554f <f_mkfs+0x132>
c0005531:	83 ec 0c             	sub    esp,0xc
c0005534:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c000553b:	25 00 fe ff ff       	and    eax,0xfffffe00
c0005540:	50                   	push   eax
c0005541:	e8 da 06 00 00       	call   c0005c20 <ff_memalloc>
c0005546:	83 c4 10             	add    esp,0x10
c0005549:	89 c3                	mov    ebx,eax
c000554b:	85 c0                	test   eax,eax
c000554d:	74 d0                	je     c000551f <f_mkfs+0x102>
c000554f:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005557:	52                   	push   edx
c0005558:	8d 44 24 48          	lea    eax,[esp+0x48]
c000555c:	50                   	push   eax
c000555d:	6a 01                	push   0x1
c000555f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005563:	e8 50 c8 ff ff       	call   c0001db8 <disk_ioctl>
c0005568:	83 c4 10             	add    esp,0x10
c000556b:	85 c0                	test   eax,eax
c000556d:	0f 85 49 06 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005573:	89 f0                	mov    eax,esi
c0005575:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000557d:	83 e0 08             	and    eax,0x8
c0005580:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0005584:	75 18                	jne    c000559e <f_mkfs+0x181>
c0005586:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000558a:	83 f8 3f             	cmp    eax,0x3f
c000558d:	76 0f                	jbe    c000559e <f_mkfs+0x181>
c000558f:	83 e8 3f             	sub    eax,0x3f
c0005592:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c000559a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000559e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055a2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00055a6:	83 f8 7f             	cmp    eax,0x7f
c00055a9:	0f 86 5b 02 00 00    	jbe    c000580a <f_mkfs+0x3ed>
c00055af:	b9 80 00 00 00       	mov    ecx,0x80
c00055b4:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00055ba:	77 05                	ja     c00055c1 <f_mkfs+0x1a4>
c00055bc:	c1 ef 09             	shr    edi,0x9
c00055bf:	89 f9                	mov    ecx,edi
c00055c1:	89 f0                	mov    eax,esi
c00055c3:	89 f7                	mov    edi,esi
c00055c5:	83 e0 01             	and    eax,0x1
c00055c8:	83 e7 02             	and    edi,0x2
c00055cb:	0f b6 c0             	movzx  eax,al
c00055ce:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00055d2:	74 0a                	je     c00055de <f_mkfs+0x1c1>
c00055d4:	85 c0                	test   eax,eax
c00055d6:	0f 84 4f 01 00 00    	je     c000572b <f_mkfs+0x30e>
c00055dc:	eb 37                	jmp    c0005615 <f_mkfs+0x1f8>
c00055de:	be 13 00 00 00       	mov    esi,0x13
c00055e3:	85 c0                	test   eax,eax
c00055e5:	75 2e                	jne    c0005615 <f_mkfs+0x1f8>
c00055e7:	e9 e7 05 00 00       	jmp    c0005bd3 <f_mkfs+0x7b6>
c00055ec:	83 f8 02             	cmp    eax,0x2
c00055ef:	0f 85 0d 02 00 00    	jne    c0005802 <f_mkfs+0x3e5>
c00055f5:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00055fb:	0f 86 e4 01 00 00    	jbe    c00057e5 <f_mkfs+0x3c8>
c0005601:	85 c9                	test   ecx,ecx
c0005603:	0f 85 dc 05 00 00    	jne    c0005be5 <f_mkfs+0x7c8>
c0005609:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000560c:	83 f9 40             	cmp    ecx,0x40
c000560f:	0f 87 e0 05 00 00    	ja     c0005bf5 <f_mkfs+0x7d8>
c0005615:	89 cf                	mov    edi,ecx
c0005617:	85 c9                	test   ecx,ecx
c0005619:	75 1c                	jne    c0005637 <f_mkfs+0x21a>
c000561b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000561f:	b8 00 02 02 c0       	mov    eax,0xc0020200
c0005624:	c1 ee 0c             	shr    esi,0xc
c0005627:	bf 01 00 00 00       	mov    edi,0x1
c000562c:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000562f:	85 d2                	test   edx,edx
c0005631:	0f 85 63 01 00 00    	jne    c000579a <f_mkfs+0x37d>
c0005637:	31 d2                	xor    edx,edx
c0005639:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000563d:	f7 f7                	div    edi
c000563f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005644:	0f 86 62 01 00 00    	jbe    c00057ac <f_mkfs+0x38f>
c000564a:	83 c0 02             	add    eax,0x2
c000564d:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c0005652:	01 c0                	add    eax,eax
c0005654:	05 ff 01 00 00       	add    eax,0x1ff
c0005659:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005661:	c1 e8 09             	shr    eax,0x9
c0005664:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005668:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000566c:	c1 e0 05             	shl    eax,0x5
c000566f:	c1 e8 09             	shr    eax,0x9
c0005672:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005676:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000567b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000567f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005683:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005687:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000568b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000568f:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005694:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0005698:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c000569c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00056a0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00056a4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056a8:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00056ac:	f7 d8                	neg    eax
c00056ae:	21 c6                	and    esi,eax
c00056b0:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00056b5:	29 d6                	sub    esi,edx
c00056b7:	83 f8 03             	cmp    eax,0x3
c00056ba:	0f 85 ff 00 00 00    	jne    c00057bf <f_mkfs+0x3a2>
c00056c0:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00056c4:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00056c8:	89 f8                	mov    eax,edi
c00056ca:	c1 e0 04             	shl    eax,0x4
c00056cd:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c00056d1:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00056d5:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00056d9:	0f 82 2b 01 00 00    	jb     c000580a <f_mkfs+0x3ed>
c00056df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056e3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00056e7:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00056eb:	0f af 54 24 28       	imul   edx,DWORD PTR [esp+0x28]
c00056f0:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00056f4:	29 d0                	sub    eax,edx
c00056f6:	31 d2                	xor    edx,edx
c00056f8:	f7 f7                	div    edi
c00056fa:	89 c6                	mov    esi,eax
c00056fc:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005701:	83 f8 03             	cmp    eax,0x3
c0005704:	0f 85 e2 fe ff ff    	jne    c00055ec <f_mkfs+0x1cf>
c000570a:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005710:	0f 87 03 01 00 00    	ja     c0005819 <f_mkfs+0x3fc>
c0005716:	85 c9                	test   ecx,ecx
c0005718:	0f 85 ec 00 00 00    	jne    c000580a <f_mkfs+0x3ed>
c000571e:	83 ff 01             	cmp    edi,0x1
c0005721:	0f 86 e3 00 00 00    	jbe    c000580a <f_mkfs+0x3ed>
c0005727:	d1 ef                	shr    edi,1
c0005729:	89 f9                	mov    ecx,edi
c000572b:	89 ce                	mov    esi,ecx
c000572d:	85 c9                	test   ecx,ecx
c000572f:	75 25                	jne    c0005756 <f_mkfs+0x339>
c0005731:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005735:	b8 10 02 02 c0       	mov    eax,0xc0020210
c000573a:	c1 ee 11             	shr    esi,0x11
c000573d:	b9 01 00 00 00       	mov    ecx,0x1
c0005742:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005745:	85 d2                	test   edx,edx
c0005747:	74 0b                	je     c0005754 <f_mkfs+0x337>
c0005749:	83 c0 02             	add    eax,0x2
c000574c:	39 f2                	cmp    edx,esi
c000574e:	77 04                	ja     c0005754 <f_mkfs+0x337>
c0005750:	01 c9                	add    ecx,ecx
c0005752:	eb ee                	jmp    c0005742 <f_mkfs+0x325>
c0005754:	31 f6                	xor    esi,esi
c0005756:	31 d2                	xor    edx,edx
c0005758:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000575c:	f7 f1                	div    ecx
c000575e:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0005765:	2d f6 ff 00 00       	sub    eax,0xfff6
c000576a:	c1 ea 09             	shr    edx,0x9
c000576d:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005772:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0005776:	0f 87 8e 00 00 00    	ja     c000580a <f_mkfs+0x3ed>
c000577c:	89 cf                	mov    edi,ecx
c000577e:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c0005786:	89 f1                	mov    ecx,esi
c0005788:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c0005790:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c0005795:	e9 dc fe ff ff       	jmp    c0005676 <f_mkfs+0x259>
c000579a:	83 c0 02             	add    eax,0x2
c000579d:	39 f2                	cmp    edx,esi
c000579f:	0f 87 92 fe ff ff    	ja     c0005637 <f_mkfs+0x21a>
c00057a5:	01 ff                	add    edi,edi
c00057a7:	e9 80 fe ff ff       	jmp    c000562c <f_mkfs+0x20f>
c00057ac:	8d 04 40             	lea    eax,[eax+eax*2]
c00057af:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00057b4:	40                   	inc    eax
c00057b5:	d1 e8                	shr    eax,1
c00057b7:	83 c0 03             	add    eax,0x3
c00057ba:	e9 95 fe ff ff       	jmp    c0005654 <f_mkfs+0x237>
c00057bf:	31 d2                	xor    edx,edx
c00057c1:	89 f0                	mov    eax,esi
c00057c3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00057c7:	85 d2                	test   edx,edx
c00057c9:	74 09                	je     c00057d4 <f_mkfs+0x3b7>
c00057cb:	4e                   	dec    esi
c00057cc:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00057d0:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00057d4:	89 f0                	mov    eax,esi
c00057d6:	31 d2                	xor    edx,edx
c00057d8:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00057dc:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c00057e0:	e9 e3 fe ff ff       	jmp    c00056c8 <f_mkfs+0x2ab>
c00057e5:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00057eb:	77 2c                	ja     c0005819 <f_mkfs+0x3fc>
c00057ed:	85 c9                	test   ecx,ecx
c00057ef:	75 19                	jne    c000580a <f_mkfs+0x3ed>
c00057f1:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00057f4:	81 f9 80 00 00 00    	cmp    ecx,0x80
c00057fa:	0f 86 15 fe ff ff    	jbe    c0005615 <f_mkfs+0x1f8>
c0005800:	eb 08                	jmp    c000580a <f_mkfs+0x3ed>
c0005802:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005808:	76 0a                	jbe    c0005814 <f_mkfs+0x3f7>
c000580a:	be 0e 00 00 00       	mov    esi,0xe
c000580f:	e9 bf 03 00 00       	jmp    c0005bd3 <f_mkfs+0x7b6>
c0005814:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005819:	31 d2                	xor    edx,edx
c000581b:	b9 00 02 00 00       	mov    ecx,0x200
c0005820:	89 d8                	mov    eax,ebx
c0005822:	e8 f1 c5 ff ff       	call   c0001e18 <mem_set>
c0005827:	b9 0b 00 00 00       	mov    ecx,0xb
c000582c:	ba b2 01 02 c0       	mov    edx,0xc00201b2
c0005831:	89 d8                	mov    eax,ebx
c0005833:	e8 cb c5 ff ff       	call   c0001e03 <mem_cpy>
c0005838:	8d 43 0b             	lea    eax,[ebx+0xb]
c000583b:	ba 00 02 00 00       	mov    edx,0x200
c0005840:	e8 b7 c5 ff ff       	call   c0001dfc <st_word>
c0005845:	89 f8                	mov    eax,edi
c0005847:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000584c:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c000584f:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005852:	e8 a5 c5 ff ff       	call   c0001dfc <st_word>
c0005857:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c000585b:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000585e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005863:	83 f8 03             	cmp    eax,0x3
c0005866:	75 08                	jne    c0005870 <f_mkfs+0x453>
c0005868:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005870:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005874:	8d 43 11             	lea    eax,[ebx+0x11]
c0005877:	e8 80 c5 ff ff       	call   c0001dfc <st_word>
c000587c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005880:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005886:	77 0a                	ja     c0005892 <f_mkfs+0x475>
c0005888:	8d 43 13             	lea    eax,[ebx+0x13]
c000588b:	e8 6c c5 ff ff       	call   c0001dfc <st_word>
c0005890:	eb 08                	jmp    c000589a <f_mkfs+0x47d>
c0005892:	8d 43 20             	lea    eax,[ebx+0x20]
c0005895:	e8 66 c5 ff ff       	call   c0001e00 <st_dword>
c000589a:	8d 43 18             	lea    eax,[ebx+0x18]
c000589d:	ba 3f 00 00 00       	mov    edx,0x3f
c00058a2:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c00058a6:	e8 51 c5 ff ff       	call   c0001dfc <st_word>
c00058ab:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00058ae:	ba ff 00 00 00       	mov    edx,0xff
c00058b3:	e8 44 c5 ff ff       	call   c0001dfc <st_word>
c00058b8:	8d 43 1c             	lea    eax,[ebx+0x1c]
c00058bb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00058bf:	e8 3c c5 ff ff       	call   c0001e00 <st_dword>
c00058c4:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058c9:	83 f8 03             	cmp    eax,0x3
c00058cc:	75 57                	jne    c0005925 <f_mkfs+0x508>
c00058ce:	8d 43 43             	lea    eax,[ebx+0x43]
c00058d1:	ba 00 00 21 50       	mov    edx,0x50210000
c00058d6:	e8 25 c5 ff ff       	call   c0001e00 <st_dword>
c00058db:	8d 43 24             	lea    eax,[ebx+0x24]
c00058de:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00058e2:	e8 19 c5 ff ff       	call   c0001e00 <st_dword>
c00058e7:	8d 43 2c             	lea    eax,[ebx+0x2c]
c00058ea:	ba 02 00 00 00       	mov    edx,0x2
c00058ef:	e8 0c c5 ff ff       	call   c0001e00 <st_dword>
c00058f4:	8d 43 30             	lea    eax,[ebx+0x30]
c00058f7:	ba 01 00 00 00       	mov    edx,0x1
c00058fc:	e8 fb c4 ff ff       	call   c0001dfc <st_word>
c0005901:	8d 43 32             	lea    eax,[ebx+0x32]
c0005904:	ba 06 00 00 00       	mov    edx,0x6
c0005909:	e8 ee c4 ff ff       	call   c0001dfc <st_word>
c000590e:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005912:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005916:	8d 43 47             	lea    eax,[ebx+0x47]
c0005919:	b9 13 00 00 00       	mov    ecx,0x13
c000591e:	ba be 01 02 c0       	mov    edx,0xc00201be
c0005923:	eb 2f                	jmp    c0005954 <f_mkfs+0x537>
c0005925:	8d 43 27             	lea    eax,[ebx+0x27]
c0005928:	ba 00 00 21 50       	mov    edx,0x50210000
c000592d:	e8 ce c4 ff ff       	call   c0001e00 <st_dword>
c0005932:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005937:	8d 43 16             	lea    eax,[ebx+0x16]
c000593a:	e8 bd c4 ff ff       	call   c0001dfc <st_word>
c000593f:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005943:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005947:	8d 43 2b             	lea    eax,[ebx+0x2b]
c000594a:	b9 13 00 00 00       	mov    ecx,0x13
c000594f:	ba d2 01 02 c0       	mov    edx,0xc00201d2
c0005954:	e8 aa c4 ff ff       	call   c0001e03 <mem_cpy>
c0005959:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c000595f:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005964:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005968:	e8 8f c4 ff ff       	call   c0001dfc <st_word>
c000596d:	6a 01                	push   0x1
c000596f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005973:	53                   	push   ebx
c0005974:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005978:	e8 25 c4 ff ff       	call   c0001da2 <disk_write>
c000597d:	83 c4 10             	add    esp,0x10
c0005980:	85 c0                	test   eax,eax
c0005982:	0f 85 34 02 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005988:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000598d:	83 f8 03             	cmp    eax,0x3
c0005990:	0f 85 98 00 00 00    	jne    c0005a2e <f_mkfs+0x611>
c0005996:	6a 01                	push   0x1
c0005998:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000599c:	83 c0 06             	add    eax,0x6
c000599f:	50                   	push   eax
c00059a0:	53                   	push   ebx
c00059a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059a5:	e8 f8 c3 ff ff       	call   c0001da2 <disk_write>
c00059aa:	b9 00 02 00 00       	mov    ecx,0x200
c00059af:	31 d2                	xor    edx,edx
c00059b1:	89 d8                	mov    eax,ebx
c00059b3:	e8 60 c4 ff ff       	call   c0001e18 <mem_set>
c00059b8:	ba 52 52 61 41       	mov    edx,0x41615252
c00059bd:	89 d8                	mov    eax,ebx
c00059bf:	e8 3c c4 ff ff       	call   c0001e00 <st_dword>
c00059c4:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c00059ca:	ba 72 72 41 61       	mov    edx,0x61417272
c00059cf:	e8 2c c4 ff ff       	call   c0001e00 <st_dword>
c00059d4:	8d 56 ff             	lea    edx,[esi-0x1]
c00059d7:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c00059dd:	e8 1e c4 ff ff       	call   c0001e00 <st_dword>
c00059e2:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c00059e8:	ba 02 00 00 00       	mov    edx,0x2
c00059ed:	e8 0e c4 ff ff       	call   c0001e00 <st_dword>
c00059f2:	ba 55 aa 00 00       	mov    edx,0xaa55
c00059f7:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00059fd:	e8 fa c3 ff ff       	call   c0001dfc <st_word>
c0005a02:	6a 01                	push   0x1
c0005a04:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005a08:	83 c0 07             	add    eax,0x7
c0005a0b:	50                   	push   eax
c0005a0c:	53                   	push   ebx
c0005a0d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005a11:	e8 8c c3 ff ff       	call   c0001da2 <disk_write>
c0005a16:	83 c4 20             	add    esp,0x20
c0005a19:	6a 01                	push   0x1
c0005a1b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005a1f:	40                   	inc    eax
c0005a20:	50                   	push   eax
c0005a21:	53                   	push   ebx
c0005a22:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005a26:	e8 77 c3 ff ff       	call   c0001da2 <disk_write>
c0005a2b:	83 c4 10             	add    esp,0x10
c0005a2e:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005a32:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005a36:	c1 e8 09             	shr    eax,0x9
c0005a39:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005a3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a43:	31 d2                	xor    edx,edx
c0005a45:	89 d8                	mov    eax,ebx
c0005a47:	e8 cc c3 ff ff       	call   c0001e18 <mem_set>
c0005a4c:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a51:	31 c9                	xor    ecx,ecx
c0005a53:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0005a5b:	83 f8 01             	cmp    eax,0x1
c0005a5e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005a62:	0f 94 c1             	sete   cl
c0005a65:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0005a69:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0005a6d:	81 64 24 14 00 00 00 ff 	and    DWORD PTR [esp+0x14],0xff000000
c0005a75:	81 44 24 14 f8 ff ff 00 	add    DWORD PTR [esp+0x14],0xfffff8
c0005a7d:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005a82:	75 21                	jne    c0005aa5 <f_mkfs+0x688>
c0005a84:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005a89:	89 d8                	mov    eax,ebx
c0005a8b:	e8 70 c3 ff ff       	call   c0001e00 <st_dword>
c0005a90:	8d 43 04             	lea    eax,[ebx+0x4]
c0005a93:	83 ca ff             	or     edx,0xffffffff
c0005a96:	e8 65 c3 ff ff       	call   c0001e00 <st_dword>
c0005a9b:	8d 43 08             	lea    eax,[ebx+0x8]
c0005a9e:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005aa3:	eb 06                	jmp    c0005aab <f_mkfs+0x68e>
c0005aa5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005aa9:	89 d8                	mov    eax,ebx
c0005aab:	e8 50 c3 ff ff       	call   c0001e00 <st_dword>
c0005ab0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ab4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005ab8:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005abc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ac0:	39 ce                	cmp    esi,ecx
c0005ac2:	76 02                	jbe    c0005ac6 <f_mkfs+0x6a9>
c0005ac4:	89 ce                	mov    esi,ecx
c0005ac6:	56                   	push   esi
c0005ac7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005acb:	53                   	push   ebx
c0005acc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005ad0:	e8 cd c2 ff ff       	call   c0001da2 <disk_write>
c0005ad5:	83 c4 10             	add    esp,0x10
c0005ad8:	85 c0                	test   eax,eax
c0005ada:	0f 85 dc 00 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005ae0:	31 d2                	xor    edx,edx
c0005ae2:	b9 00 02 00 00       	mov    ecx,0x200
c0005ae7:	89 d8                	mov    eax,ebx
c0005ae9:	e8 2a c3 ff ff       	call   c0001e18 <mem_set>
c0005aee:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005af2:	29 74 24 1c          	sub    DWORD PTR [esp+0x1c],esi
c0005af6:	75 c0                	jne    c0005ab8 <f_mkfs+0x69b>
c0005af8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005afc:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005b04:	40                   	inc    eax
c0005b05:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005b09:	0f 87 6e ff ff ff    	ja     c0005a7d <f_mkfs+0x660>
c0005b0f:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b14:	83 f8 03             	cmp    eax,0x3
c0005b17:	74 04                	je     c0005b1d <f_mkfs+0x700>
c0005b19:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0005b1d:	89 fe                	mov    esi,edi
c0005b1f:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005b23:	76 04                	jbe    c0005b29 <f_mkfs+0x70c>
c0005b25:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b29:	56                   	push   esi
c0005b2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b2e:	53                   	push   ebx
c0005b2f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b33:	e8 6a c2 ff ff       	call   c0001da2 <disk_write>
c0005b38:	83 c4 10             	add    esp,0x10
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	75 7d                	jne    c0005bbc <f_mkfs+0x79f>
c0005b3f:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005b43:	29 f7                	sub    edi,esi
c0005b45:	75 d6                	jne    c0005b1d <f_mkfs+0x700>
c0005b47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b4c:	b9 0c 00 00 00       	mov    ecx,0xc
c0005b51:	83 f8 03             	cmp    eax,0x3
c0005b54:	74 1e                	je     c0005b74 <f_mkfs+0x757>
c0005b56:	b9 06 00 00 00       	mov    ecx,0x6
c0005b5b:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005b63:	77 0f                	ja     c0005b74 <f_mkfs+0x757>
c0005b65:	b9 04 00 00 00       	mov    ecx,0x4
c0005b6a:	83 f8 02             	cmp    eax,0x2
c0005b6d:	74 05                	je     c0005b74 <f_mkfs+0x757>
c0005b6f:	b9 01 00 00 00       	mov    ecx,0x1
c0005b74:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005b79:	75 2a                	jne    c0005ba5 <f_mkfs+0x788>
c0005b7b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005b7f:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005b87:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005b8b:	83 ec 0c             	sub    esp,0xc
c0005b8e:	53                   	push   ebx
c0005b8f:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005b93:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005b97:	e8 89 d2 ff ff       	call   c0002e25 <create_partition>
c0005b9c:	83 c4 10             	add    esp,0x10
c0005b9f:	89 c6                	mov    esi,eax
c0005ba1:	85 c0                	test   eax,eax
c0005ba3:	75 2e                	jne    c0005bd3 <f_mkfs+0x7b6>
c0005ba5:	31 f6                	xor    esi,esi
c0005ba7:	50                   	push   eax
c0005ba8:	6a 00                	push   0x0
c0005baa:	6a 00                	push   0x0
c0005bac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005bb0:	e8 03 c2 ff ff       	call   c0001db8 <disk_ioctl>
c0005bb5:	83 c4 10             	add    esp,0x10
c0005bb8:	85 c0                	test   eax,eax
c0005bba:	74 17                	je     c0005bd3 <f_mkfs+0x7b6>
c0005bbc:	85 ed                	test   ebp,ebp
c0005bbe:	75 0c                	jne    c0005bcc <f_mkfs+0x7af>
c0005bc0:	83 ec 0c             	sub    esp,0xc
c0005bc3:	53                   	push   ebx
c0005bc4:	e8 6f 00 00 00       	call   c0005c38 <ff_memfree>
c0005bc9:	83 c4 10             	add    esp,0x10
c0005bcc:	be 01 00 00 00       	mov    esi,0x1
c0005bd1:	eb 40                	jmp    c0005c13 <f_mkfs+0x7f6>
c0005bd3:	85 ed                	test   ebp,ebp
c0005bd5:	75 3c                	jne    c0005c13 <f_mkfs+0x7f6>
c0005bd7:	83 ec 0c             	sub    esp,0xc
c0005bda:	53                   	push   ebx
c0005bdb:	e8 58 00 00 00       	call   c0005c38 <ff_memfree>
c0005be0:	83 c4 10             	add    esp,0x10
c0005be3:	eb 2e                	jmp    c0005c13 <f_mkfs+0x7f6>
c0005be5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005bea:	0f 85 3b fb ff ff    	jne    c000572b <f_mkfs+0x30e>
c0005bf0:	e9 15 fc ff ff       	jmp    c000580a <f_mkfs+0x3ed>
c0005bf5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005bfa:	0f 85 31 fb ff ff    	jne    c0005731 <f_mkfs+0x314>
c0005c00:	89 cf                	mov    edi,ecx
c0005c02:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005c08:	0f 86 29 fa ff ff    	jbe    c0005637 <f_mkfs+0x21a>
c0005c0e:	e9 f7 fb ff ff       	jmp    c000580a <f_mkfs+0x3ed>
c0005c13:	83 c4 5c             	add    esp,0x5c
c0005c16:	89 f0                	mov    eax,esi
c0005c18:	5b                   	pop    ebx
c0005c19:	5e                   	pop    esi
c0005c1a:	5f                   	pop    edi
c0005c1b:	5d                   	pop    ebp
c0005c1c:	c3                   	ret    
c0005c1d:	66 90                	xchg   ax,ax
c0005c1f:	90                   	nop

c0005c20 <ff_memalloc>:
c0005c20:	83 ec 0c             	sub    esp,0xc
c0005c23:	83 ec 0c             	sub    esp,0xc
c0005c26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c2a:	e8 87 1e 00 00       	call   c0007ab6 <malloc>
c0005c2f:	83 c4 10             	add    esp,0x10
c0005c32:	83 c4 0c             	add    esp,0xc
c0005c35:	c3                   	ret    
c0005c36:	66 90                	xchg   ax,ax

c0005c38 <ff_memfree>:
c0005c38:	83 ec 0c             	sub    esp,0xc
c0005c3b:	83 ec 0c             	sub    esp,0xc
c0005c3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c42:	e8 7f 1e 00 00       	call   c0007ac6 <free>
c0005c47:	83 c4 10             	add    esp,0x10
c0005c4a:	90                   	nop
c0005c4b:	83 c4 0c             	add    esp,0xc
c0005c4e:	c3                   	ret    
c0005c4f:	90                   	nop

c0005c50 <ff_uni2oem>:
c0005c50:	83 ec 14             	sub    esp,0x14
c0005c53:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005c57:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005c5b:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c62:	c7 44 24 0c 00 06 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020600
c0005c6a:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005c6f:	77 0b                	ja     c0005c7c <ff_uni2oem+0x2c>
c0005c71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c75:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005c7a:	eb 68                	jmp    c0005ce4 <ff_uni2oem+0x94>
c0005c7c:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005c84:	77 5e                	ja     c0005ce4 <ff_uni2oem+0x94>
c0005c86:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005c8a:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005c8f:	75 53                	jne    c0005ce4 <ff_uni2oem+0x94>
c0005c91:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c98:	eb 12                	jmp    c0005cac <ff_uni2oem+0x5c>
c0005c9a:	66 90                	xchg   ax,ax
c0005c9c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ca1:	83 c0 01             	add    eax,0x1
c0005ca4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ca9:	8d 76 00             	lea    esi,[esi+0x0]
c0005cac:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cb1:	83 f8 7f             	cmp    eax,0x7f
c0005cb4:	77 1e                	ja     c0005cd4 <ff_uni2oem+0x84>
c0005cb6:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cbb:	01 c0                	add    eax,eax
c0005cbd:	89 c2                	mov    edx,eax
c0005cbf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cc3:	01 d0                	add    eax,edx
c0005cc5:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cc8:	0f b7 c0             	movzx  eax,ax
c0005ccb:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005ccf:	75 cb                	jne    c0005c9c <ff_uni2oem+0x4c>
c0005cd1:	8d 76 00             	lea    esi,[esi+0x0]
c0005cd4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005cd9:	83 e8 80             	sub    eax,0xffffff80
c0005cdc:	0f b6 c0             	movzx  eax,al
c0005cdf:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ce4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ce9:	83 c4 14             	add    esp,0x14
c0005cec:	c3                   	ret    
c0005ced:	8d 76 00             	lea    esi,[esi+0x0]

c0005cf0 <ff_oem2uni>:
c0005cf0:	83 ec 18             	sub    esp,0x18
c0005cf3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005cf7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005cfb:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005d00:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005d04:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005d0b:	c7 44 24 10 00 06 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020600
c0005d13:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d18:	83 f8 7f             	cmp    eax,0x7f
c0005d1b:	77 0b                	ja     c0005d28 <ff_oem2uni+0x38>
c0005d1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005d21:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d26:	eb 34                	jmp    c0005d5c <ff_oem2uni+0x6c>
c0005d28:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005d2c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005d31:	75 29                	jne    c0005d5c <ff_oem2uni+0x6c>
c0005d33:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d38:	3d ff 00 00 00       	cmp    eax,0xff
c0005d3d:	77 1d                	ja     c0005d5c <ff_oem2uni+0x6c>
c0005d3f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d44:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005d49:	01 c0                	add    eax,eax
c0005d4b:	89 c2                	mov    edx,eax
c0005d4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d51:	01 d0                	add    eax,edx
c0005d53:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005d56:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d5b:	90                   	nop
c0005d5c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005d61:	83 c4 18             	add    esp,0x18
c0005d64:	c3                   	ret    
c0005d65:	8d 76 00             	lea    esi,[esi+0x0]

c0005d68 <ff_wtoupper>:
c0005d68:	83 ec 10             	sub    esp,0x10
c0005d6b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005d73:	0f 87 ab 01 00 00    	ja     c0005f24 <ff_wtoupper+0x1bc>
c0005d79:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d7d:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005d82:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005d87:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005d8c:	77 0a                	ja     c0005d98 <ff_wtoupper+0x30>
c0005d8e:	b8 00 04 02 c0       	mov    eax,0xc0020400
c0005d93:	eb 0b                	jmp    c0005da0 <ff_wtoupper+0x38>
c0005d95:	8d 76 00             	lea    esi,[esi+0x0]
c0005d98:	b8 40 03 02 c0       	mov    eax,0xc0020340
c0005d9d:	8d 76 00             	lea    esi,[esi+0x0]
c0005da0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005da4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005da8:	8d 50 02             	lea    edx,[eax+0x2]
c0005dab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005daf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005db2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005db7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dbc:	85 c0                	test   eax,eax
c0005dbe:	0f 84 54 01 00 00    	je     c0005f18 <ff_wtoupper+0x1b0>
c0005dc4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005dc9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dce:	39 c2                	cmp    edx,eax
c0005dd0:	0f 82 42 01 00 00    	jb     c0005f18 <ff_wtoupper+0x1b0>
c0005dd6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dda:	8d 50 02             	lea    edx,[eax+0x2]
c0005ddd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005de1:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005de4:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005de9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005dee:	c1 e8 08             	shr    eax,0x8
c0005df1:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005df6:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005dfb:	0f b6 c0             	movzx  eax,al
c0005dfe:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e03:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e08:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005e0d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005e12:	01 ca                	add    edx,ecx
c0005e14:	39 d0                	cmp    eax,edx
c0005e16:	0f 8d d8 00 00 00    	jge    c0005ef4 <ff_wtoupper+0x18c>
c0005e1c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e21:	83 f8 08             	cmp    eax,0x8
c0005e24:	0f 87 ea 00 00 00    	ja     c0005f14 <ff_wtoupper+0x1ac>
c0005e2a:	8b 04 85 00 03 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdfd00]
c0005e31:	ff e0                	jmp    eax
c0005e33:	90                   	nop
c0005e34:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e39:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005e3e:	29 c2                	sub    edx,eax
c0005e40:	89 d0                	mov    eax,edx
c0005e42:	01 c0                	add    eax,eax
c0005e44:	89 c2                	mov    edx,eax
c0005e46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e4a:	01 d0                	add    eax,edx
c0005e4c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e4f:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e54:	e9 97 00 00 00       	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e59:	8d 76 00             	lea    esi,[esi+0x0]
c0005e5c:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0005e61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005e65:	89 d1                	mov    ecx,edx
c0005e67:	29 c1                	sub    ecx,eax
c0005e69:	89 c8                	mov    eax,ecx
c0005e6b:	83 e0 01             	and    eax,0x1
c0005e6e:	89 c2                	mov    edx,eax
c0005e70:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e75:	29 d0                	sub    eax,edx
c0005e77:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e7c:	eb 72                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e7e:	66 90                	xchg   ax,ax
c0005e80:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e85:	83 e8 10             	sub    eax,0x10
c0005e88:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e8d:	eb 61                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e8f:	90                   	nop
c0005e90:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e95:	83 e8 20             	sub    eax,0x20
c0005e98:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e9d:	eb 51                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e9f:	90                   	nop
c0005ea0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ea5:	83 e8 30             	sub    eax,0x30
c0005ea8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ead:	eb 41                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005eaf:	90                   	nop
c0005eb0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005eb5:	83 e8 1a             	sub    eax,0x1a
c0005eb8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ebd:	eb 31                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005ebf:	90                   	nop
c0005ec0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ec5:	83 c0 08             	add    eax,0x8
c0005ec8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ecd:	eb 21                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005ecf:	90                   	nop
c0005ed0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ed5:	83 e8 50             	sub    eax,0x50
c0005ed8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005edd:	eb 11                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005edf:	90                   	nop
c0005ee0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ee5:	2d 60 1c 00 00       	sub    eax,0x1c60
c0005eea:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005eef:	90                   	nop
c0005ef0:	eb 22                	jmp    c0005f14 <ff_wtoupper+0x1ac>
c0005ef2:	66 90                	xchg   ax,ax
c0005ef4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005ef9:	85 c0                	test   eax,eax
c0005efb:	0f 85 a3 fe ff ff    	jne    c0005da4 <ff_wtoupper+0x3c>
c0005f01:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005f06:	01 c0                	add    eax,eax
c0005f08:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005f0c:	e9 93 fe ff ff       	jmp    c0005da4 <ff_wtoupper+0x3c>
c0005f11:	8d 76 00             	lea    esi,[esi+0x0]
c0005f14:	90                   	nop
c0005f15:	8d 76 00             	lea    esi,[esi+0x0]
c0005f18:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f1d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005f21:	8d 76 00             	lea    esi,[esi+0x0]
c0005f24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f28:	83 c4 10             	add    esp,0x10
c0005f2b:	c3                   	ret    

c0005f2c <utf2ucs>:
c0005f2c:	57                   	push   edi
c0005f2d:	31 c9                	xor    ecx,ecx
c0005f2f:	56                   	push   esi
c0005f30:	89 d7                	mov    edi,edx
c0005f32:	53                   	push   ebx
c0005f33:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005f37:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005f3b:	89 de                	mov    esi,ebx
c0005f3d:	c1 fe 08             	sar    esi,0x8
c0005f40:	89 f2                	mov    edx,esi
c0005f42:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005f45:	41                   	inc    ecx
c0005f46:	85 db                	test   ebx,ebx
c0005f48:	75 e9                	jne    c0005f33 <utf2ucs+0x7>
c0005f4a:	5b                   	pop    ebx
c0005f4b:	5e                   	pop    esi
c0005f4c:	5f                   	pop    edi
c0005f4d:	c3                   	ret    

c0005f4e <ucs2utfn>:
c0005f4e:	83 e1 fe             	and    ecx,0xfffffffe
c0005f51:	01 d1                	add    ecx,edx
c0005f53:	39 d1                	cmp    ecx,edx
c0005f55:	75 04                	jne    c0005f5b <ucs2utfn+0xd>
c0005f57:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005f5a:	c3                   	ret    
c0005f5b:	57                   	push   edi
c0005f5c:	56                   	push   esi
c0005f5d:	53                   	push   ebx
c0005f5e:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005f61:	83 c2 02             	add    edx,0x2
c0005f64:	89 de                	mov    esi,ebx
c0005f66:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005f6a:	c1 e6 08             	shl    esi,0x8
c0005f6d:	09 f3                	or     ebx,esi
c0005f6f:	83 fb 3b             	cmp    ebx,0x3b
c0005f72:	74 50                	je     c0005fc4 <ucs2utfn+0x76>
c0005f74:	83 fb 7f             	cmp    ebx,0x7f
c0005f77:	7f 05                	jg     c0005f7e <ucs2utfn+0x30>
c0005f79:	88 18                	mov    BYTE PTR [eax],bl
c0005f7b:	40                   	inc    eax
c0005f7c:	eb 42                	jmp    c0005fc0 <ucs2utfn+0x72>
c0005f7e:	89 de                	mov    esi,ebx
c0005f80:	89 df                	mov    edi,ebx
c0005f82:	c1 fe 06             	sar    esi,0x6
c0005f85:	83 e7 3f             	and    edi,0x3f
c0005f88:	83 cf 80             	or     edi,0xffffff80
c0005f8b:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005f91:	7f 12                	jg     c0005fa5 <ucs2utfn+0x57>
c0005f93:	83 ce c0             	or     esi,0xffffffc0
c0005f96:	83 c0 02             	add    eax,0x2
c0005f99:	89 f3                	mov    ebx,esi
c0005f9b:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005f9e:	89 fb                	mov    ebx,edi
c0005fa0:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fa3:	eb 1b                	jmp    c0005fc0 <ucs2utfn+0x72>
c0005fa5:	c1 fb 0c             	sar    ebx,0xc
c0005fa8:	83 e6 3f             	and    esi,0x3f
c0005fab:	83 cb e0             	or     ebx,0xffffffe0
c0005fae:	83 ce 80             	or     esi,0xffffff80
c0005fb1:	88 18                	mov    BYTE PTR [eax],bl
c0005fb3:	89 f3                	mov    ebx,esi
c0005fb5:	83 c0 03             	add    eax,0x3
c0005fb8:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fbb:	89 fb                	mov    ebx,edi
c0005fbd:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fc0:	39 d1                	cmp    ecx,edx
c0005fc2:	75 9a                	jne    c0005f5e <ucs2utfn+0x10>
c0005fc4:	5b                   	pop    ebx
c0005fc5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005fc8:	5e                   	pop    esi
c0005fc9:	5f                   	pop    edi
c0005fca:	c3                   	ret    

c0005fcb <isjoliet>:
c0005fcb:	31 d2                	xor    edx,edx
c0005fcd:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005fd0:	75 26                	jne    c0005ff8 <isjoliet+0x2d>
c0005fd2:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005fd6:	75 20                	jne    c0005ff8 <isjoliet+0x2d>
c0005fd8:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c0005fdc:	ba 02 00 00 00       	mov    edx,0x2
c0005fe1:	83 f8 43             	cmp    eax,0x43
c0005fe4:	74 12                	je     c0005ff8 <isjoliet+0x2d>
c0005fe6:	ba 03 00 00 00       	mov    edx,0x3
c0005feb:	83 f8 45             	cmp    eax,0x45
c0005fee:	74 08                	je     c0005ff8 <isjoliet+0x2d>
c0005ff0:	31 d2                	xor    edx,edx
c0005ff2:	83 f8 40             	cmp    eax,0x40
c0005ff5:	0f 94 c2             	sete   dl
c0005ff8:	89 d0                	mov    eax,edx
c0005ffa:	c3                   	ret    

c0005ffb <htohl_32>:
c0005ffb:	8b 00                	mov    eax,DWORD PTR [eax]
c0005ffd:	c3                   	ret    

c0005ffe <iso_733>:
c0005ffe:	eb fb                	jmp    c0005ffb <htohl_32>

c0006000 <bgrad_cache>:
c0006000:	83 fa 0e             	cmp    edx,0xe
c0006003:	77 16                	ja     c000601b <bgrad_cache+0x1b>
c0006005:	53                   	push   ebx
c0006006:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006009:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c000600d:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0006010:	42                   	inc    edx
c0006011:	83 fa 0f             	cmp    edx,0xf
c0006014:	75 f3                	jne    c0006009 <bgrad_cache+0x9>
c0006016:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006019:	5b                   	pop    ebx
c000601a:	c3                   	ret    
c000601b:	c3                   	ret    

c000601c <ucscompare>:
c000601c:	55                   	push   ebp
c000601d:	57                   	push   edi
c000601e:	89 c7                	mov    edi,eax
c0006020:	56                   	push   esi
c0006021:	89 d6                	mov    esi,edx
c0006023:	53                   	push   ebx
c0006024:	31 d2                	xor    edx,edx
c0006026:	83 ec 1c             	sub    esp,0x1c
c0006029:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c000602d:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0006032:	c1 e3 08             	shl    ebx,0x8
c0006035:	09 c3                	or     ebx,eax
c0006037:	39 ca                	cmp    edx,ecx
c0006039:	7d 42                	jge    c000607d <ucscompare+0x61>
c000603b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000603f:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006044:	c1 e0 08             	shl    eax,0x8
c0006047:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000604b:	09 e8                	or     eax,ebp
c000604d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006051:	83 f8 3b             	cmp    eax,0x3b
c0006054:	74 27                	je     c000607d <ucscompare+0x61>
c0006056:	83 ec 0c             	sub    esp,0xc
c0006059:	50                   	push   eax
c000605a:	e8 f1 a8 ff ff       	call   c0000950 <tolower>
c000605f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006062:	89 c5                	mov    ebp,eax
c0006064:	e8 e7 a8 ff ff       	call   c0000950 <tolower>
c0006069:	83 c4 10             	add    esp,0x10
c000606c:	39 c5                	cmp    ebp,eax
c000606e:	75 20                	jne    c0006090 <ucscompare+0x74>
c0006070:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006074:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006078:	83 c2 02             	add    edx,0x2
c000607b:	eb ac                	jmp    c0006029 <ucscompare+0xd>
c000607d:	85 db                	test   ebx,ebx
c000607f:	0f 95 c2             	setne  dl
c0006082:	31 c0                	xor    eax,eax
c0006084:	83 fb 2f             	cmp    ebx,0x2f
c0006087:	0f 95 c0             	setne  al
c000608a:	21 d0                	and    eax,edx
c000608c:	f7 d8                	neg    eax
c000608e:	eb 03                	jmp    c0006093 <ucscompare+0x77>
c0006090:	83 c8 ff             	or     eax,0xffffffff
c0006093:	83 c4 1c             	add    esp,0x1c
c0006096:	5b                   	pop    ebx
c0006097:	5e                   	pop    esi
c0006098:	5f                   	pop    edi
c0006099:	5d                   	pop    ebp
c000609a:	c3                   	ret    

c000609b <fncompare>:
c000609b:	55                   	push   ebp
c000609c:	57                   	push   edi
c000609d:	89 c7                	mov    edi,eax
c000609f:	56                   	push   esi
c00060a0:	89 ce                	mov    esi,ecx
c00060a2:	53                   	push   ebx
c00060a3:	31 db                	xor    ebx,ebx
c00060a5:	83 ec 1c             	sub    esp,0x1c
c00060a8:	39 d3                	cmp    ebx,edx
c00060aa:	7d 45                	jge    c00060f1 <fncompare+0x56>
c00060ac:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00060b0:	83 f8 3b             	cmp    eax,0x3b
c00060b3:	74 3c                	je     c00060f1 <fncompare+0x56>
c00060b5:	83 f8 2e             	cmp    eax,0x2e
c00060b8:	75 0e                	jne    c00060c8 <fncompare+0x2d>
c00060ba:	8d 4a ff             	lea    ecx,[edx-0x1]
c00060bd:	39 d9                	cmp    ecx,ebx
c00060bf:	74 30                	je     c00060f1 <fncompare+0x56>
c00060c1:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00060c6:	74 29                	je     c00060f1 <fncompare+0x56>
c00060c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00060cc:	83 ec 0c             	sub    esp,0xc
c00060cf:	50                   	push   eax
c00060d0:	e8 7b a8 ff ff       	call   c0000950 <tolower>
c00060d5:	89 c5                	mov    ebp,eax
c00060d7:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00060db:	89 04 24             	mov    DWORD PTR [esp],eax
c00060de:	e8 6d a8 ff ff       	call   c0000950 <tolower>
c00060e3:	83 c4 10             	add    esp,0x10
c00060e6:	39 c5                	cmp    ebp,eax
c00060e8:	75 1e                	jne    c0006108 <fncompare+0x6d>
c00060ea:	43                   	inc    ebx
c00060eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00060ef:	eb b7                	jmp    c00060a8 <fncompare+0xd>
c00060f1:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c00060f5:	85 d2                	test   edx,edx
c00060f7:	0f 95 c1             	setne  cl
c00060fa:	31 c0                	xor    eax,eax
c00060fc:	83 fa 2f             	cmp    edx,0x2f
c00060ff:	0f 95 c0             	setne  al
c0006102:	21 c8                	and    eax,ecx
c0006104:	f7 d8                	neg    eax
c0006106:	eb 03                	jmp    c000610b <fncompare+0x70>
c0006108:	83 c8 ff             	or     eax,0xffffffff
c000610b:	83 c4 1c             	add    esp,0x1c
c000610e:	5b                   	pop    ebx
c000610f:	5e                   	pop    esi
c0006110:	5f                   	pop    edi
c0006111:	5d                   	pop    ebp
c0006112:	c3                   	ret    

c0006113 <bclear_cache>:
c0006113:	83 ec 18             	sub    esp,0x18
c0006116:	68 00 07 02 c0       	push   0xc0020700
c000611b:	e8 88 3f 01 00       	call   c001a0a8 <iso_kprintf>
c0006120:	83 c4 10             	add    esp,0x10
c0006123:	31 c0                	xor    eax,eax
c0006125:	8b 14 85 20 50 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdafe0]
c000612c:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006132:	8b 14 85 80 50 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdaf80]
c0006139:	40                   	inc    eax
c000613a:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006140:	83 f8 10             	cmp    eax,0x10
c0006143:	75 e0                	jne    c0006125 <bclear_cache+0x12>
c0006145:	83 c4 0c             	add    esp,0xc
c0006148:	c3                   	ret    

c0006149 <bclear>:
c0006149:	eb c8                	jmp    c0006113 <bclear_cache>

c000614b <iso_break_all>:
c000614b:	83 ec 18             	sub    esp,0x18
c000614e:	68 0e 07 02 c0       	push   0xc002070e
c0006153:	e8 50 3f 01 00       	call   c001a0a8 <iso_kprintf>
c0006158:	83 c4 10             	add    esp,0x10
c000615b:	31 c0                	xor    eax,eax
c000615d:	c7 80 d0 55 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffdaa30],0x1
c0006167:	05 94 00 00 00       	add    eax,0x94
c000616c:	3d 40 09 00 00       	cmp    eax,0x940
c0006171:	75 ea                	jne    c000615d <iso_break_all+0x12>
c0006173:	83 c4 0c             	add    esp,0xc
c0006176:	c3                   	ret    

c0006177 <isoReadDiscSector>:
c0006177:	83 ec 0c             	sub    esp,0xc
c000617a:	0f be 05 60 50 02 c0 	movsx  eax,BYTE PTR ds:0xc0025060
c0006181:	50                   	push   eax
c0006182:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006186:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000618a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000618e:	e8 b9 3e 01 00       	call   c001a04c <isoReadDiscSectorHelper>
c0006193:	83 c4 1c             	add    esp,0x1c
c0006196:	c3                   	ret    

c0006197 <bread_cache>:
c0006197:	55                   	push   ebp
c0006198:	57                   	push   edi
c0006199:	89 d7                	mov    edi,edx
c000619b:	56                   	push   esi
c000619c:	ba 0f 00 00 00       	mov    edx,0xf
c00061a1:	53                   	push   ebx
c00061a2:	89 c6                	mov    esi,eax
c00061a4:	83 ec 0c             	sub    esp,0xc
c00061a7:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00061aa:	39 38                	cmp    DWORD PTR [eax],edi
c00061ac:	74 3c                	je     c00061ea <bread_cache+0x53>
c00061ae:	4a                   	dec    edx
c00061af:	83 fa ff             	cmp    edx,0xffffffff
c00061b2:	75 f3                	jne    c00061a7 <bread_cache+0x10>
c00061b4:	31 db                	xor    ebx,ebx
c00061b6:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00061b9:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00061bc:	74 08                	je     c00061c6 <bread_cache+0x2f>
c00061be:	43                   	inc    ebx
c00061bf:	83 fb 10             	cmp    ebx,0x10
c00061c2:	75 f2                	jne    c00061b6 <bread_cache+0x1f>
c00061c4:	31 db                	xor    ebx,ebx
c00061c6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00061c9:	50                   	push   eax
c00061ca:	6a 01                	push   0x1
c00061cc:	57                   	push   edi
c00061cd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061d0:	83 c0 04             	add    eax,0x4
c00061d3:	50                   	push   eax
c00061d4:	e8 9e ff ff ff       	call   c0006177 <isoReadDiscSector>
c00061d9:	83 c4 10             	add    esp,0x10
c00061dc:	83 c9 ff             	or     ecx,0xffffffff
c00061df:	85 c0                	test   eax,eax
c00061e1:	78 13                	js     c00061f6 <bread_cache+0x5f>
c00061e3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061e6:	89 da                	mov    edx,ebx
c00061e8:	89 38                	mov    DWORD PTR [eax],edi
c00061ea:	89 f0                	mov    eax,esi
c00061ec:	e8 0f fe ff ff       	call   c0006000 <bgrad_cache>
c00061f1:	b9 0f 00 00 00       	mov    ecx,0xf
c00061f6:	83 c4 0c             	add    esp,0xc
c00061f9:	89 c8                	mov    eax,ecx
c00061fb:	5b                   	pop    ebx
c00061fc:	5e                   	pop    esi
c00061fd:	5f                   	pop    edi
c00061fe:	5d                   	pop    ebp
c00061ff:	c3                   	ret    

c0006200 <biread>:
c0006200:	89 c2                	mov    edx,eax
c0006202:	b8 80 50 02 c0       	mov    eax,0xc0025080
c0006207:	eb 8e                	jmp    c0006197 <bread_cache>

c0006209 <bdread>:
c0006209:	89 c2                	mov    edx,eax
c000620b:	b8 20 50 02 c0       	mov    eax,0xc0025020
c0006210:	eb 85                	jmp    c0006197 <bread_cache>

c0006212 <strnicmp>:
c0006212:	55                   	push   ebp
c0006213:	57                   	push   edi
c0006214:	31 ff                	xor    edi,edi
c0006216:	56                   	push   esi
c0006217:	53                   	push   ebx
c0006218:	83 ec 0c             	sub    esp,0xc
c000621b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000621f:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c0006223:	74 43                	je     c0006268 <strnicmp+0x56>
c0006225:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006229:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c000622d:	85 c0                	test   eax,eax
c000622f:	74 37                	je     c0006268 <strnicmp+0x56>
c0006231:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006235:	85 d2                	test   edx,edx
c0006237:	74 2f                	je     c0006268 <strnicmp+0x56>
c0006239:	39 d0                	cmp    eax,edx
c000623b:	8d 6f 01             	lea    ebp,[edi+0x1]
c000623e:	75 04                	jne    c0006244 <strnicmp+0x32>
c0006240:	89 ef                	mov    edi,ebp
c0006242:	eb db                	jmp    c000621f <strnicmp+0xd>
c0006244:	83 ec 0c             	sub    esp,0xc
c0006247:	50                   	push   eax
c0006248:	e8 03 a7 ff ff       	call   c0000950 <tolower>
c000624d:	89 c3                	mov    ebx,eax
c000624f:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c0006253:	89 ef                	mov    edi,ebp
c0006255:	89 04 24             	mov    DWORD PTR [esp],eax
c0006258:	e8 f3 a6 ff ff       	call   c0000950 <tolower>
c000625d:	83 c4 10             	add    esp,0x10
c0006260:	29 c3                	sub    ebx,eax
c0006262:	89 d8                	mov    eax,ebx
c0006264:	74 b9                	je     c000621f <strnicmp+0xd>
c0006266:	eb 02                	jmp    c000626a <strnicmp+0x58>
c0006268:	31 c0                	xor    eax,eax
c000626a:	83 c4 0c             	add    esp,0xc
c000626d:	5b                   	pop    ebx
c000626e:	5e                   	pop    esi
c000626f:	5f                   	pop    edi
c0006270:	5d                   	pop    ebp
c0006271:	c3                   	ret    

c0006272 <find_object>:
c0006272:	55                   	push   ebp
c0006273:	57                   	push   edi
c0006274:	89 c7                	mov    edi,eax
c0006276:	56                   	push   esi
c0006277:	53                   	push   ebx
c0006278:	89 d3                	mov    ebx,edx
c000627a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006280:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006287:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000628b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000628f:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c0006296:	74 0b                	je     c00062a3 <find_object+0x31>
c0006298:	89 fa                	mov    edx,edi
c000629a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000629e:	e8 89 fc ff ff       	call   c0005f2c <utf2ucs>
c00062a3:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00062a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062aa:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00062af:	7e 11                	jle    c00062c2 <find_object+0x50>
c00062b1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b5:	e8 46 ff ff ff       	call   c0006200 <biread>
c00062ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00062be:	85 c0                	test   eax,eax
c00062c0:	79 07                	jns    c00062c9 <find_object+0x57>
c00062c2:	31 db                	xor    ebx,ebx
c00062c4:	e9 56 01 00 00       	jmp    c000641f <find_object+0x1ad>
c00062c9:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00062d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062d5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00062d9:	8b 04 85 80 50 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdaf80]
c00062e0:	8d 5c 08 04          	lea    ebx,[eax+ecx*1+0x4]
c00062e4:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00062e7:	85 f6                	test   esi,esi
c00062e9:	75 0e                	jne    c00062f9 <find_object+0x87>
c00062eb:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00062ef:	81 6c 24 0c 00 08 00 00 	sub    DWORD PTR [esp+0xc],0x800
c00062f7:	eb b1                	jmp    c00062aa <find_object+0x38>
c00062f9:	8b 2d b4 5e 02 c0    	mov    ebp,DWORD PTR ds:0xc0025eb4
c00062ff:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c0006303:	85 ed                	test   ebp,ebp
c0006305:	89 c8                	mov    eax,ecx
c0006307:	74 2b                	je     c0006334 <find_object+0xc2>
c0006309:	8d 43 21             	lea    eax,[ebx+0x21]
c000630c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006310:	e8 07 fd ff ff       	call   c000601c <ucscompare>
c0006315:	85 c0                	test   eax,eax
c0006317:	0f 84 bf 00 00 00    	je     c00063dc <find_object+0x16a>
c000631d:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006320:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c0006324:	81 7c 24 08 ff 07 00 00 	cmp    DWORD PTR [esp+0x8],0x7ff
c000632c:	0f 8e da 00 00 00    	jle    c000640c <find_object+0x19a>
c0006332:	eb b7                	jmp    c00062eb <find_object+0x79>
c0006334:	29 ce                	sub    esi,ecx
c0006336:	8d 54 0b 21          	lea    edx,[ebx+ecx*1+0x21]
c000633a:	a8 01                	test   al,0x1
c000633c:	74 05                	je     c0006343 <find_object+0xd1>
c000633e:	83 ee 21             	sub    esi,0x21
c0006341:	eb 5a                	jmp    c000639d <find_object+0x12b>
c0006343:	42                   	inc    edx
c0006344:	83 ee 22             	sub    esi,0x22
c0006347:	eb 54                	jmp    c000639d <find_object+0x12b>
c0006349:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000634c:	48                   	dec    eax
c000634d:	3c 01                	cmp    al,0x1
c000634f:	77 51                	ja     c00063a2 <find_object+0x130>
c0006351:	50                   	push   eax
c0006352:	6a 02                	push   0x2
c0006354:	68 1d 07 02 c0       	push   0xc002071d
c0006359:	52                   	push   edx
c000635a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000635e:	e8 7d a4 ff ff       	call   c00007e0 <strncmp>
c0006363:	83 c4 10             	add    esp,0x10
c0006366:	85 c0                	test   eax,eax
c0006368:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000636c:	75 27                	jne    c0006395 <find_object+0x123>
c000636e:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006372:	8d 68 fb             	lea    ebp,[eax-0x5]
c0006375:	50                   	push   eax
c0006376:	8d 42 05             	lea    eax,[edx+0x5]
c0006379:	55                   	push   ebp
c000637a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000637e:	50                   	push   eax
c000637f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006383:	50                   	push   eax
c0006384:	e8 f7 a2 ff ff       	call   c0000680 <strncpy>
c0006389:	c6 44 2c 30 00       	mov    BYTE PTR [esp+ebp*1+0x30],0x0
c000638e:	83 c4 10             	add    esp,0x10
c0006391:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006395:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006399:	29 c6                	sub    esi,eax
c000639b:	01 c2                	add    edx,eax
c000639d:	83 fe 03             	cmp    esi,0x3
c00063a0:	7f a7                	jg     c0006349 <find_object+0xd7>
c00063a2:	85 ed                	test   ebp,ebp
c00063a4:	7e 40                	jle    c00063e6 <find_object+0x174>
c00063a6:	51                   	push   ecx
c00063a7:	51                   	push   ecx
c00063a8:	6a 2f                	push   0x2f
c00063aa:	57                   	push   edi
c00063ab:	e8 f0 a3 ff ff       	call   c00007a0 <strchr>
c00063b0:	83 c4 10             	add    esp,0x10
c00063b3:	85 c0                	test   eax,eax
c00063b5:	74 04                	je     c00063bb <find_object+0x149>
c00063b7:	29 f8                	sub    eax,edi
c00063b9:	eb 0c                	jmp    c00063c7 <find_object+0x155>
c00063bb:	83 ec 0c             	sub    esp,0xc
c00063be:	57                   	push   edi
c00063bf:	e8 ac a1 ff ff       	call   c0000570 <strlen>
c00063c4:	83 c4 10             	add    esp,0x10
c00063c7:	52                   	push   edx
c00063c8:	50                   	push   eax
c00063c9:	57                   	push   edi
c00063ca:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00063ce:	50                   	push   eax
c00063cf:	e8 3e fe ff ff       	call   c0006212 <strnicmp>
c00063d4:	83 c4 10             	add    esp,0x10
c00063d7:	e9 39 ff ff ff       	jmp    c0006315 <find_object+0xa3>
c00063dc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00063e0:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c00063e4:	eb 1e                	jmp    c0006404 <find_object+0x192>
c00063e6:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00063ea:	8d 43 21             	lea    eax,[ebx+0x21]
c00063ed:	89 f9                	mov    ecx,edi
c00063ef:	e8 a7 fc ff ff       	call   c000609b <fncompare>
c00063f4:	85 c0                	test   eax,eax
c00063f6:	0f 85 21 ff ff ff    	jne    c000631d <find_object+0xab>
c00063fc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006400:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0006404:	0f 85 13 ff ff ff    	jne    c000631d <find_object+0xab>
c000640a:	eb 13                	jmp    c000641f <find_object+0x1ad>
c000640c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006410:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0006414:	0f 8f b7 fe ff ff    	jg     c00062d1 <find_object+0x5f>
c000641a:	e9 cc fe ff ff       	jmp    c00062eb <find_object+0x79>
c000641f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006425:	89 d8                	mov    eax,ebx
c0006427:	5b                   	pop    ebx
c0006428:	5e                   	pop    esi
c0006429:	5f                   	pop    edi
c000642a:	5d                   	pop    ebp
c000642b:	c3                   	ret    

c000642c <find_object_path>:
c000642c:	55                   	push   ebp
c000642d:	57                   	push   edi
c000642e:	89 d7                	mov    edi,edx
c0006430:	56                   	push   esi
c0006431:	89 c6                	mov    esi,eax
c0006433:	53                   	push   ebx
c0006434:	89 cb                	mov    ebx,ecx
c0006436:	83 ec 0c             	sub    esp,0xc
c0006439:	50                   	push   eax
c000643a:	50                   	push   eax
c000643b:	6a 2f                	push   0x2f
c000643d:	56                   	push   esi
c000643e:	e8 5d a3 ff ff       	call   c00007a0 <strchr>
c0006443:	83 c4 10             	add    esp,0x10
c0006446:	89 c5                	mov    ebp,eax
c0006448:	85 c0                	test   eax,eax
c000644a:	74 3a                	je     c0006486 <find_object_path+0x5a>
c000644c:	39 ee                	cmp    esi,ebp
c000644e:	74 31                	je     c0006481 <find_object_path+0x55>
c0006450:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006453:	e8 a6 fb ff ff       	call   c0005ffe <iso_733>
c0006458:	89 c2                	mov    edx,eax
c000645a:	8d 43 02             	lea    eax,[ebx+0x2]
c000645d:	e8 9c fb ff ff       	call   c0005ffe <iso_733>
c0006462:	83 ec 0c             	sub    esp,0xc
c0006465:	89 c1                	mov    ecx,eax
c0006467:	52                   	push   edx
c0006468:	89 f0                	mov    eax,esi
c000646a:	ba 01 00 00 00       	mov    edx,0x1
c000646f:	e8 fe fd ff ff       	call   c0006272 <find_object>
c0006474:	83 c4 10             	add    esp,0x10
c0006477:	89 c3                	mov    ebx,eax
c0006479:	85 c0                	test   eax,eax
c000647b:	75 04                	jne    c0006481 <find_object_path+0x55>
c000647d:	31 db                	xor    ebx,ebx
c000647f:	eb 36                	jmp    c00064b7 <find_object_path+0x8b>
c0006481:	8d 75 01             	lea    esi,[ebp+0x1]
c0006484:	eb b3                	jmp    c0006439 <find_object_path+0xd>
c0006486:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006489:	74 28                	je     c00064b3 <find_object_path+0x87>
c000648b:	8d 43 0a             	lea    eax,[ebx+0xa]
c000648e:	e8 6b fb ff ff       	call   c0005ffe <iso_733>
c0006493:	89 c2                	mov    edx,eax
c0006495:	8d 43 02             	lea    eax,[ebx+0x2]
c0006498:	e8 61 fb ff ff       	call   c0005ffe <iso_733>
c000649d:	83 ec 0c             	sub    esp,0xc
c00064a0:	89 c1                	mov    ecx,eax
c00064a2:	52                   	push   edx
c00064a3:	89 f0                	mov    eax,esi
c00064a5:	89 fa                	mov    edx,edi
c00064a7:	e8 c6 fd ff ff       	call   c0006272 <find_object>
c00064ac:	83 c4 10             	add    esp,0x10
c00064af:	89 c3                	mov    ebx,eax
c00064b1:	eb 04                	jmp    c00064b7 <find_object_path+0x8b>
c00064b3:	85 ff                	test   edi,edi
c00064b5:	74 c6                	je     c000647d <find_object_path+0x51>
c00064b7:	83 c4 0c             	add    esp,0xc
c00064ba:	89 d8                	mov    eax,ebx
c00064bc:	5b                   	pop    ebx
c00064bd:	5e                   	pop    esi
c00064be:	5f                   	pop    edi
c00064bf:	5d                   	pop    ebp
c00064c0:	c3                   	ret    

c00064c1 <stricmp>:
c00064c1:	57                   	push   edi
c00064c2:	56                   	push   esi
c00064c3:	31 f6                	xor    esi,esi
c00064c5:	53                   	push   ebx
c00064c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064ca:	83 ec 0c             	sub    esp,0xc
c00064cd:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00064d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064d5:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00064d9:	50                   	push   eax
c00064da:	e8 51 a4 ff ff       	call   c0000930 <toupper>
c00064df:	89 04 24             	mov    DWORD PTR [esp],eax
c00064e2:	e8 69 a4 ff ff       	call   c0000950 <tolower>
c00064e7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00064ea:	89 c3                	mov    ebx,eax
c00064ec:	e8 3f a4 ff ff       	call   c0000930 <toupper>
c00064f1:	89 04 24             	mov    DWORD PTR [esp],eax
c00064f4:	e8 57 a4 ff ff       	call   c0000950 <tolower>
c00064f9:	83 c4 10             	add    esp,0x10
c00064fc:	39 c3                	cmp    ebx,eax
c00064fe:	75 05                	jne    c0006505 <stricmp+0x44>
c0006500:	46                   	inc    esi
c0006501:	85 db                	test   ebx,ebx
c0006503:	75 c1                	jne    c00064c6 <stricmp+0x5>
c0006505:	29 c3                	sub    ebx,eax
c0006507:	89 d8                	mov    eax,ebx
c0006509:	5b                   	pop    ebx
c000650a:	5e                   	pop    esi
c000650b:	5f                   	pop    edi
c000650c:	c3                   	ret    

c000650d <iso_open>:
c000650d:	57                   	push   edi
c000650e:	31 c0                	xor    eax,eax
c0006510:	56                   	push   esi
c0006511:	b9 80 5e 02 c0       	mov    ecx,0xc0025e80
c0006516:	53                   	push   ebx
c0006517:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000651c:	0f 95 c0             	setne  al
c000651f:	89 c2                	mov    edx,eax
c0006521:	89 c6                	mov    esi,eax
c0006523:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006527:	e8 00 ff ff ff       	call   c000642c <find_object_path>
c000652c:	83 ca ff             	or     edx,0xffffffff
c000652f:	85 c0                	test   eax,eax
c0006531:	74 5e                	je     c0006591 <iso_open+0x84>
c0006533:	89 c1                	mov    ecx,eax
c0006535:	31 d2                	xor    edx,edx
c0006537:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000653d:	83 bf 40 55 02 c0 00 	cmp    DWORD PTR [edi-0x3ffdaac0],0x0
c0006544:	75 42                	jne    c0006588 <iso_open+0x7b>
c0006546:	8d 41 02             	lea    eax,[ecx+0x2]
c0006549:	c7 87 40 55 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffdaac0],0xffffffff
c0006553:	e8 a6 fa ff ff       	call   c0005ffe <iso_733>
c0006558:	89 b7 44 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaabc],esi
c000655e:	89 87 40 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaac0],eax
c0006564:	c7 87 48 55 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdaab8],0x0
c000656e:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006571:	e8 88 fa ff ff       	call   c0005ffe <iso_733>
c0006576:	c7 87 d0 55 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdaa30],0x0
c0006580:	89 87 4c 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaab4],eax
c0006586:	eb 09                	jmp    c0006591 <iso_open+0x84>
c0006588:	42                   	inc    edx
c0006589:	83 fa 10             	cmp    edx,0x10
c000658c:	75 a9                	jne    c0006537 <iso_open+0x2a>
c000658e:	83 ca ff             	or     edx,0xffffffff
c0006591:	5b                   	pop    ebx
c0006592:	89 d0                	mov    eax,edx
c0006594:	5e                   	pop    esi
c0006595:	5f                   	pop    edi
c0006596:	c3                   	ret    

c0006597 <iso_close>:
c0006597:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000659b:	83 f8 0f             	cmp    eax,0xf
c000659e:	7f 10                	jg     c00065b0 <iso_close+0x19>
c00065a0:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00065a6:	c7 80 40 55 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdaac0],0x0
c00065b0:	e9 5e fb ff ff       	jmp    c0006113 <bclear_cache>

c00065b5 <iso_read>:
c00065b5:	55                   	push   ebp
c00065b6:	57                   	push   edi
c00065b7:	56                   	push   esi
c00065b8:	53                   	push   ebx
c00065b9:	83 ec 1c             	sub    esp,0x1c
c00065bc:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00065c0:	83 fd 0f             	cmp    ebp,0xf
c00065c3:	7e 0a                	jle    c00065cf <iso_read+0x1a>
c00065c5:	83 c8 ff             	or     eax,0xffffffff
c00065c8:	89 c2                	mov    edx,eax
c00065ca:	e9 f4 00 00 00       	jmp    c00066c3 <iso_read+0x10e>
c00065cf:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00065d5:	83 bd 40 55 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdaac0],0x0
c00065dc:	74 e7                	je     c00065c5 <iso_read+0x10>
c00065de:	8b 95 d0 55 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffdaa30]
c00065e4:	85 d2                	test   edx,edx
c00065e6:	75 dd                	jne    c00065c5 <iso_read+0x10>
c00065e8:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00065ed:	0f 84 cd 00 00 00    	je     c00066c0 <iso_read+0x10b>
c00065f3:	8b 85 48 55 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdaab8]
c00065f9:	8b 8d 4c 55 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffdaab4]
c00065ff:	29 c1                	sub    ecx,eax
c0006601:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c0006605:	76 04                	jbe    c000660b <iso_read+0x56>
c0006607:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000660b:	85 c9                	test   ecx,ecx
c000660d:	0f 84 ad 00 00 00    	je     c00066c0 <iso_read+0x10b>
c0006613:	89 c6                	mov    esi,eax
c0006615:	bb 00 08 00 00       	mov    ebx,0x800
c000661a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006620:	c1 e8 0b             	shr    eax,0xb
c0006623:	29 f3                	sub    ebx,esi
c0006625:	03 85 40 55 02 c0    	add    eax,DWORD PTR [ebp-0x3ffdaac0]
c000662b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006631:	7e 3f                	jle    c0006672 <iso_read+0xbd>
c0006633:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006639:	75 37                	jne    c0006672 <iso_read+0xbd>
c000663b:	be 20 00 00 00       	mov    esi,0x20
c0006640:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c0006646:	7f 05                	jg     c000664d <iso_read+0x98>
c0006648:	89 ce                	mov    esi,ecx
c000664a:	c1 fe 0b             	sar    esi,0xb
c000664d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006651:	89 f3                	mov    ebx,esi
c0006653:	c1 e3 0b             	shl    ebx,0xb
c0006656:	52                   	push   edx
c0006657:	56                   	push   esi
c0006658:	50                   	push   eax
c0006659:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000665d:	e8 15 fb ff ff       	call   c0006177 <isoReadDiscSector>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	85 c0                	test   eax,eax
c0006667:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000666b:	7f 3e                	jg     c00066ab <iso_read+0xf6>
c000666d:	e9 53 ff ff ff       	jmp    c00065c5 <iso_read+0x10>
c0006672:	39 cb                	cmp    ebx,ecx
c0006674:	7e 02                	jle    c0006678 <iso_read+0xc3>
c0006676:	89 cb                	mov    ebx,ecx
c0006678:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000667c:	e8 88 fb ff ff       	call   c0006209 <bdread>
c0006681:	85 c0                	test   eax,eax
c0006683:	0f 88 3c ff ff ff    	js     c00065c5 <iso_read+0x10>
c0006689:	8b 0c 85 20 50 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdafe0]
c0006690:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006694:	8b 85 48 55 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdaab8]
c000669a:	25 ff 07 00 00       	and    eax,0x7ff
c000669f:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00066a3:	89 d9                	mov    ecx,ebx
c00066a5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00066a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00066ab:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00066af:	01 9d 48 55 02 c0    	add    DWORD PTR [ebp-0x3ffdaab8],ebx
c00066b5:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00066b9:	01 da                	add    edx,ebx
c00066bb:	e9 28 ff ff ff       	jmp    c00065e8 <iso_read+0x33>
c00066c0:	89 d0                	mov    eax,edx
c00066c2:	99                   	cdq    
c00066c3:	83 c4 1c             	add    esp,0x1c
c00066c6:	5b                   	pop    ebx
c00066c7:	5e                   	pop    esi
c00066c8:	5f                   	pop    edi
c00066c9:	5d                   	pop    ebp
c00066ca:	c3                   	ret    

c00066cb <iso_seek>:
c00066cb:	55                   	push   ebp
c00066cc:	83 c8 ff             	or     eax,0xffffffff
c00066cf:	57                   	push   edi
c00066d0:	89 c2                	mov    edx,eax
c00066d2:	56                   	push   esi
c00066d3:	53                   	push   ebx
c00066d4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00066d8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066dc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00066e0:	83 fe 0f             	cmp    esi,0xf
c00066e3:	7f 65                	jg     c000674a <iso_seek+0x7f>
c00066e5:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00066eb:	8d 8d 40 55 02 c0    	lea    ecx,[ebp-0x3ffdaac0]
c00066f1:	83 bd 40 55 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdaac0],0x0
c00066f8:	74 50                	je     c000674a <iso_seek+0x7f>
c00066fa:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c0006701:	75 47                	jne    c000674a <iso_seek+0x7f>
c0006703:	83 fb 01             	cmp    ebx,0x1
c0006706:	74 0e                	je     c0006716 <iso_seek+0x4b>
c0006708:	83 fb 02             	cmp    ebx,0x2
c000670b:	74 0e                	je     c000671b <iso_seek+0x50>
c000670d:	85 db                	test   ebx,ebx
c000670f:	75 39                	jne    c000674a <iso_seek+0x7f>
c0006711:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006714:	eb 0d                	jmp    c0006723 <iso_seek+0x58>
c0006716:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006719:	eb 08                	jmp    c0006723 <iso_seek+0x58>
c000671b:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000671e:	01 f8                	add    eax,edi
c0006720:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006723:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006729:	8b 88 4c 55 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffdaab4]
c000672f:	05 40 55 02 c0       	add    eax,0xc0025540
c0006734:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006737:	76 03                	jbe    c000673c <iso_seek+0x71>
c0006739:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000673c:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006742:	8b 82 48 55 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdaab8]
c0006748:	31 d2                	xor    edx,edx
c000674a:	5b                   	pop    ebx
c000674b:	5e                   	pop    esi
c000674c:	5f                   	pop    edi
c000674d:	5d                   	pop    ebp
c000674e:	c3                   	ret    

c000674f <iso_tell>:
c000674f:	83 c8 ff             	or     eax,0xffffffff
c0006752:	53                   	push   ebx
c0006753:	89 c2                	mov    edx,eax
c0006755:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006759:	83 f9 0f             	cmp    ecx,0xf
c000675c:	7f 20                	jg     c000677e <iso_tell+0x2f>
c000675e:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006764:	83 bb 40 55 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdaac0],0x0
c000676b:	74 11                	je     c000677e <iso_tell+0x2f>
c000676d:	83 bb d0 55 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdaa30],0x0
c0006774:	75 08                	jne    c000677e <iso_tell+0x2f>
c0006776:	8b 83 48 55 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffdaab8]
c000677c:	31 d2                	xor    edx,edx
c000677e:	5b                   	pop    ebx
c000677f:	c3                   	ret    

c0006780 <iso_total>:
c0006780:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006784:	83 c8 ff             	or     eax,0xffffffff
c0006787:	83 fa 0f             	cmp    edx,0xf
c000678a:	7f 1e                	jg     c00067aa <iso_total+0x2a>
c000678c:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006792:	83 ba 40 55 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdaac0],0x0
c0006799:	74 0f                	je     c00067aa <iso_total+0x2a>
c000679b:	83 ba d0 55 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdaa30],0x0
c00067a2:	75 06                	jne    c00067aa <iso_total+0x2a>
c00067a4:	8b 82 4c 55 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdaab4]
c00067aa:	c3                   	ret    

c00067ab <fn_postprocess>:
c00067ab:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067af:	89 d0                	mov    eax,edx
c00067b1:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00067b4:	83 f9 3b             	cmp    ecx,0x3b
c00067b7:	74 07                	je     c00067c0 <fn_postprocess+0x15>
c00067b9:	85 c9                	test   ecx,ecx
c00067bb:	74 03                	je     c00067c0 <fn_postprocess+0x15>
c00067bd:	40                   	inc    eax
c00067be:	eb f1                	jmp    c00067b1 <fn_postprocess+0x6>
c00067c0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00067c3:	39 d0                	cmp    eax,edx
c00067c5:	76 0a                	jbe    c00067d1 <fn_postprocess+0x26>
c00067c7:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00067cb:	75 04                	jne    c00067d1 <fn_postprocess+0x26>
c00067cd:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00067d1:	c3                   	ret    

c00067d2 <iso_readdir>:
c00067d2:	55                   	push   ebp
c00067d3:	57                   	push   edi
c00067d4:	56                   	push   esi
c00067d5:	53                   	push   ebx
c00067d6:	83 ec 1c             	sub    esp,0x1c
c00067d9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00067dd:	83 fb 0f             	cmp    ebx,0xf
c00067e0:	7f 28                	jg     c000680a <iso_readdir+0x38>
c00067e2:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00067e8:	8d b8 40 55 02 c0    	lea    edi,[eax-0x3ffdaac0]
c00067ee:	83 b8 40 55 02 c0 00 	cmp    DWORD PTR [eax-0x3ffdaac0],0x0
c00067f5:	74 13                	je     c000680a <iso_readdir+0x38>
c00067f7:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00067fb:	74 0d                	je     c000680a <iso_readdir+0x38>
c00067fd:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006804:	0f 84 b1 00 00 00    	je     c00068bb <iso_readdir+0xe9>
c000680a:	83 ec 0c             	sub    esp,0xc
c000680d:	68 20 07 02 c0       	push   0xc0020720
c0006812:	e8 91 38 01 00       	call   c001a0a8 <iso_kprintf>
c0006817:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000681a:	e8 a5 38 01 00       	call   c001a0c4 <iso_kprintfd>
c000681f:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006825:	c7 04 24 25 07 02 c0 	mov    DWORD PTR [esp],0xc0020725
c000682c:	e8 77 38 01 00       	call   c001a0a8 <iso_kprintf>
c0006831:	5d                   	pop    ebp
c0006832:	ff b3 40 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaac0]
c0006838:	e8 87 38 01 00       	call   c001a0c4 <iso_kprintfd>
c000683d:	c7 04 24 2b 07 02 c0 	mov    DWORD PTR [esp],0xc002072b
c0006844:	e8 5f 38 01 00       	call   c001a0a8 <iso_kprintf>
c0006849:	58                   	pop    eax
c000684a:	ff b3 44 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaabc]
c0006850:	e8 6f 38 01 00       	call   c001a0c4 <iso_kprintfd>
c0006855:	c7 04 24 31 07 02 c0 	mov    DWORD PTR [esp],0xc0020731
c000685c:	e8 47 38 01 00       	call   c001a0a8 <iso_kprintf>
c0006861:	58                   	pop    eax
c0006862:	ff b3 d0 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaa30]
c0006868:	e8 57 38 01 00       	call   c001a0c4 <iso_kprintfd>
c000686d:	83 c4 10             	add    esp,0x10
c0006870:	eb 42                	jmp    c00068b4 <iso_readdir+0xe2>
c0006872:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006875:	8b 34 85 80 50 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdaf80]
c000687c:	89 d1                	mov    ecx,edx
c000687e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006884:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006888:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000688b:	75 35                	jne    c00068c2 <iso_readdir+0xf0>
c000688d:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006893:	81 c2 00 08 00 00    	add    edx,0x800
c0006899:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c000689c:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000689f:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00068a2:	73 1e                	jae    c00068c2 <iso_readdir+0xf0>
c00068a4:	c1 ea 0b             	shr    edx,0xb
c00068a7:	8b 07                	mov    eax,DWORD PTR [edi]
c00068a9:	01 d0                	add    eax,edx
c00068ab:	e8 50 f9 ff ff       	call   c0006200 <biread>
c00068b0:	85 c0                	test   eax,eax
c00068b2:	79 be                	jns    c0006872 <iso_readdir+0xa0>
c00068b4:	31 c0                	xor    eax,eax
c00068b6:	e9 66 01 00 00       	jmp    c0006a21 <iso_readdir+0x24f>
c00068bb:	31 f6                	xor    esi,esi
c00068bd:	83 c8 ff             	or     eax,0xffffffff
c00068c0:	eb da                	jmp    c000689c <iso_readdir+0xca>
c00068c2:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00068c8:	8b ba 48 55 02 c0    	mov    edi,DWORD PTR [edx-0x3ffdaab8]
c00068ce:	81 c2 40 55 02 c0    	add    edx,0xc0025540
c00068d4:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00068d7:	73 db                	jae    c00068b4 <iso_readdir+0xe2>
c00068d9:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00068dd:	75 34                	jne    c0006913 <iso_readdir+0x141>
c00068df:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c00068e3:	75 2e                	jne    c0006913 <iso_readdir+0x141>
c00068e5:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c00068e8:	8b 34 85 80 50 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdaf80]
c00068ef:	01 f9                	add    ecx,edi
c00068f1:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00068f4:	89 c8                	mov    eax,ecx
c00068f6:	25 ff 07 00 00       	and    eax,0x7ff
c00068fb:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006900:	01 c8                	add    eax,ecx
c0006902:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006905:	25 ff 07 00 00       	and    eax,0x7ff
c000690a:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c000690e:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006911:	74 a1                	je     c00068b4 <iso_readdir+0xe2>
c0006913:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006919:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c000691d:	8d 56 21             	lea    edx,[esi+0x21]
c0006920:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006924:	8d a8 58 55 02 c0    	lea    ebp,[eax-0x3ffdaaa8]
c000692a:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c0006931:	74 0c                	je     c000693f <iso_readdir+0x16d>
c0006933:	89 e8                	mov    eax,ebp
c0006935:	e8 14 f6 ff ff       	call   c0005f4e <ucs2utfn>
c000693a:	e9 a6 00 00 00       	jmp    c00069e5 <iso_readdir+0x213>
c000693f:	57                   	push   edi
c0006940:	51                   	push   ecx
c0006941:	52                   	push   edx
c0006942:	55                   	push   ebp
c0006943:	e8 38 9d ff ff       	call   c0000680 <strncpy>
c0006948:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c000694c:	69 cb 94 00 00 00    	imul   ecx,ebx,0x94
c0006952:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006955:	c6 84 01 58 55 02 c0 00 	mov    BYTE PTR [ecx+eax*1-0x3ffdaaa8],0x0
c000695d:	e8 49 fe ff ff       	call   c00067ab <fn_postprocess>
c0006962:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006966:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006969:	83 c4 10             	add    esp,0x10
c000696c:	29 d0                	sub    eax,edx
c000696e:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006972:	f6 46 20 01          	test   BYTE PTR [esi+0x20],0x1
c0006976:	74 05                	je     c000697d <iso_readdir+0x1ab>
c0006978:	83 e8 21             	sub    eax,0x21
c000697b:	eb 04                	jmp    c0006981 <iso_readdir+0x1af>
c000697d:	47                   	inc    edi
c000697e:	83 e8 22             	sub    eax,0x22
c0006981:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006985:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000698b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000698f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006994:	7e 4f                	jle    c00069e5 <iso_readdir+0x213>
c0006996:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006999:	48                   	dec    eax
c000699a:	3c 01                	cmp    al,0x1
c000699c:	77 47                	ja     c00069e5 <iso_readdir+0x213>
c000699e:	52                   	push   edx
c000699f:	6a 02                	push   0x2
c00069a1:	68 1d 07 02 c0       	push   0xc002071d
c00069a6:	57                   	push   edi
c00069a7:	e8 34 9e ff ff       	call   c00007e0 <strncmp>
c00069ac:	83 c4 10             	add    esp,0x10
c00069af:	85 c0                	test   eax,eax
c00069b1:	75 26                	jne    c00069d9 <iso_readdir+0x207>
c00069b3:	50                   	push   eax
c00069b4:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069b8:	83 e8 05             	sub    eax,0x5
c00069bb:	50                   	push   eax
c00069bc:	8d 47 05             	lea    eax,[edi+0x5]
c00069bf:	50                   	push   eax
c00069c0:	55                   	push   ebp
c00069c1:	e8 ba 9c ff ff       	call   c0000680 <strncpy>
c00069c6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00069ca:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069ce:	83 c4 10             	add    esp,0x10
c00069d1:	c6 84 08 53 55 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffdaaad],0x0
c00069d9:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069dd:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c00069e1:	01 c7                	add    edi,eax
c00069e3:	eb aa                	jmp    c000698f <iso_readdir+0x1bd>
c00069e5:	83 c8 ff             	or     eax,0xffffffff
c00069e8:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c00069ec:	89 c2                	mov    edx,eax
c00069ee:	75 0a                	jne    c00069fa <iso_readdir+0x228>
c00069f0:	8d 46 0a             	lea    eax,[esi+0xa]
c00069f3:	e8 06 f6 ff ff       	call   c0005ffe <iso_733>
c00069f8:	31 d2                	xor    edx,edx
c00069fa:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a00:	89 83 50 55 02 c0    	mov    DWORD PTR [ebx-0x3ffdaab0],eax
c0006a06:	89 93 54 55 02 c0    	mov    DWORD PTR [ebx-0x3ffdaaac],edx
c0006a0c:	81 c3 40 55 02 c0    	add    ebx,0xc0025540
c0006a12:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006a15:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006a18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006a1c:	05 50 55 02 c0       	add    eax,0xc0025550
c0006a21:	83 c4 1c             	add    esp,0x1c
c0006a24:	5b                   	pop    ebx
c0006a25:	5e                   	pop    esi
c0006a26:	5f                   	pop    edi
c0006a27:	5d                   	pop    ebp
c0006a28:	c3                   	ret    

c0006a29 <iso_reset>:
c0006a29:	83 ec 18             	sub    esp,0x18
c0006a2c:	68 3a 07 02 c0       	push   0xc002073a
c0006a31:	e8 72 36 01 00       	call   c001a0a8 <iso_kprintf>
c0006a36:	e8 10 f7 ff ff       	call   c000614b <iso_break_all>
c0006a3b:	e8 09 f7 ff ff       	call   c0006149 <bclear>
c0006a40:	31 c0                	xor    eax,eax
c0006a42:	83 c4 1c             	add    esp,0x1c
c0006a45:	c3                   	ret    

c0006a46 <init_percd>:
c0006a46:	57                   	push   edi
c0006a47:	56                   	push   esi
c0006a48:	53                   	push   ebx
c0006a49:	bb 01 00 00 00       	mov    ebx,0x1
c0006a4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a52:	a2 60 50 02 c0       	mov    ds:0xc0025060,al
c0006a57:	e8 cd ff ff ff       	call   c0006a29 <iso_reset>
c0006a5c:	c7 05 b4 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025eb4,0x0
c0006a66:	a1 ac 5e 02 c0       	mov    eax,ds:0xc0025eac
c0006a6b:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006a6f:	e8 8c f7 ff ff       	call   c0006200 <biread>
c0006a74:	89 c6                	mov    esi,eax
c0006a76:	85 c0                	test   eax,eax
c0006a78:	0f 88 ba 00 00 00    	js     c0006b38 <init_percd+0xf2>
c0006a7e:	8b 04 85 80 50 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdaf80]
c0006a85:	83 c0 04             	add    eax,0x4
c0006a88:	52                   	push   edx
c0006a89:	6a 06                	push   0x6
c0006a8b:	68 45 07 02 c0       	push   0xc0020745
c0006a90:	50                   	push   eax
c0006a91:	e8 ea 98 ff ff       	call   c0000380 <memcmp>
c0006a96:	83 c4 10             	add    esp,0x10
c0006a99:	85 c0                	test   eax,eax
c0006a9b:	74 08                	je     c0006aa5 <init_percd+0x5f>
c0006a9d:	43                   	inc    ebx
c0006a9e:	83 fb 04             	cmp    ebx,0x4
c0006aa1:	75 c3                	jne    c0006a66 <init_percd+0x20>
c0006aa3:	eb 1a                	jmp    c0006abf <init_percd+0x79>
c0006aa5:	8b 04 b5 80 50 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdaf80]
c0006aac:	83 c0 5c             	add    eax,0x5c
c0006aaf:	e8 17 f5 ff ff       	call   c0005fcb <isjoliet>
c0006ab4:	a3 b4 5e 02 c0       	mov    ds:0xc0025eb4,eax
c0006ab9:	85 c0                	test   eax,eax
c0006abb:	74 e0                	je     c0006a9d <init_percd+0x57>
c0006abd:	eb 3e                	jmp    c0006afd <init_percd+0xb7>
c0006abf:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c0006ac6:	75 35                	jne    c0006afd <init_percd+0xb7>
c0006ac8:	a1 ac 5e 02 c0       	mov    eax,ds:0xc0025eac
c0006acd:	83 c0 10             	add    eax,0x10
c0006ad0:	e8 2b f7 ff ff       	call   c0006200 <biread>
c0006ad5:	89 c6                	mov    esi,eax
c0006ad7:	85 c0                	test   eax,eax
c0006ad9:	78 5f                	js     c0006b3a <init_percd+0xf4>
c0006adb:	83 cb ff             	or     ebx,0xffffffff
c0006ade:	50                   	push   eax
c0006adf:	8b 04 b5 80 50 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdaf80]
c0006ae6:	6a 06                	push   0x6
c0006ae8:	83 c0 04             	add    eax,0x4
c0006aeb:	68 4c 07 02 c0       	push   0xc002074c
c0006af0:	50                   	push   eax
c0006af1:	e8 8a 98 ff ff       	call   c0000380 <memcmp>
c0006af6:	83 c4 10             	add    esp,0x10
c0006af9:	85 c0                	test   eax,eax
c0006afb:	75 3d                	jne    c0006b3a <init_percd+0xf4>
c0006afd:	8b 34 b5 80 50 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffdaf80]
c0006b04:	bf 80 5e 02 c0       	mov    edi,0xc0025e80
c0006b09:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006b0f:	b9 22 00 00 00       	mov    ecx,0x22
c0006b14:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006b16:	b8 82 5e 02 c0       	mov    eax,0xc0025e82
c0006b1b:	31 db                	xor    ebx,ebx
c0006b1d:	e8 dc f4 ff ff       	call   c0005ffe <iso_733>
c0006b22:	a3 a8 5e 02 c0       	mov    ds:0xc0025ea8,eax
c0006b27:	b8 8a 5e 02 c0       	mov    eax,0xc0025e8a
c0006b2c:	e8 cd f4 ff ff       	call   c0005ffe <iso_733>
c0006b31:	a3 a4 5e 02 c0       	mov    ds:0xc0025ea4,eax
c0006b36:	eb 02                	jmp    c0006b3a <init_percd+0xf4>
c0006b38:	89 c3                	mov    ebx,eax
c0006b3a:	89 d8                	mov    eax,ebx
c0006b3c:	5b                   	pop    ebx
c0006b3d:	5e                   	pop    esi
c0006b3e:	5f                   	pop    edi
c0006b3f:	c3                   	ret    

c0006b40 <iso_ioctl>:
c0006b40:	83 ec 18             	sub    esp,0x18
c0006b43:	68 53 07 02 c0       	push   0xc0020753
c0006b48:	e8 5b 35 01 00       	call   c001a0a8 <iso_kprintf>
c0006b4d:	e8 d7 fe ff ff       	call   c0006a29 <iso_reset>
c0006b52:	31 c0                	xor    eax,eax
c0006b54:	83 c4 1c             	add    esp,0x1c
c0006b57:	c3                   	ret    

c0006b58 <fs_iso9660_init>:
c0006b58:	53                   	push   ebx
c0006b59:	31 db                	xor    ebx,ebx
c0006b5b:	83 ec 14             	sub    esp,0x14
c0006b5e:	68 5e 07 02 c0       	push   0xc002075e
c0006b63:	e8 40 35 01 00       	call   c001a0a8 <iso_kprintf>
c0006b68:	83 c4 0c             	add    esp,0xc
c0006b6b:	68 40 09 00 00       	push   0x940
c0006b70:	6a 00                	push   0x0
c0006b72:	68 40 55 02 c0       	push   0xc0025540
c0006b77:	e8 74 99 ff ff       	call   c00004f0 <memset>
c0006b7c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b83:	c7 05 40 55 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0025540,0xffffffff
c0006b8d:	e8 24 0f 00 00       	call   c0007ab6 <malloc>
c0006b92:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b99:	a3 b0 5e 02 c0       	mov    ds:0xc0025eb0,eax
c0006b9e:	e8 13 0f 00 00       	call   c0007ab6 <malloc>
c0006ba3:	83 c4 10             	add    esp,0x10
c0006ba6:	a3 20 55 02 c0       	mov    ds:0xc0025520,eax
c0006bab:	83 ec 0c             	sub    esp,0xc
c0006bae:	68 04 08 00 00       	push   0x804
c0006bb3:	e8 fe 0e 00 00       	call   c0007ab6 <malloc>
c0006bb8:	89 04 9d 80 50 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdaf80],eax
c0006bbf:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006bc5:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006bcc:	e8 e5 0e 00 00       	call   c0007ab6 <malloc>
c0006bd1:	83 c4 10             	add    esp,0x10
c0006bd4:	89 04 9d 20 50 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdafe0],eax
c0006bdb:	43                   	inc    ebx
c0006bdc:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006be2:	83 fb 10             	cmp    ebx,0x10
c0006be5:	75 c4                	jne    c0006bab <fs_iso9660_init+0x53>
c0006be7:	31 c0                	xor    eax,eax
c0006be9:	83 c4 08             	add    esp,0x8
c0006bec:	5b                   	pop    ebx
c0006bed:	c3                   	ret    

c0006bee <fs_iso9660_shutdown>:
c0006bee:	53                   	push   ebx
c0006bef:	31 db                	xor    ebx,ebx
c0006bf1:	83 ec 08             	sub    esp,0x8
c0006bf4:	83 ec 0c             	sub    esp,0xc
c0006bf7:	ff 34 9d 80 50 02 c0 	push   DWORD PTR [ebx*4-0x3ffdaf80]
c0006bfe:	e8 c3 0e 00 00       	call   c0007ac6 <free>
c0006c03:	58                   	pop    eax
c0006c04:	ff 34 9d 20 50 02 c0 	push   DWORD PTR [ebx*4-0x3ffdafe0]
c0006c0b:	43                   	inc    ebx
c0006c0c:	e8 b5 0e 00 00       	call   c0007ac6 <free>
c0006c11:	83 c4 10             	add    esp,0x10
c0006c14:	83 fb 10             	cmp    ebx,0x10
c0006c17:	75 db                	jne    c0006bf4 <fs_iso9660_shutdown+0x6>
c0006c19:	a1 b0 5e 02 c0       	mov    eax,ds:0xc0025eb0
c0006c1e:	85 c0                	test   eax,eax
c0006c20:	74 0c                	je     c0006c2e <fs_iso9660_shutdown+0x40>
c0006c22:	83 ec 0c             	sub    esp,0xc
c0006c25:	50                   	push   eax
c0006c26:	e8 9b 0e 00 00       	call   c0007ac6 <free>
c0006c2b:	83 c4 10             	add    esp,0x10
c0006c2e:	a1 20 55 02 c0       	mov    eax,ds:0xc0025520
c0006c33:	85 c0                	test   eax,eax
c0006c35:	74 0c                	je     c0006c43 <fs_iso9660_shutdown+0x55>
c0006c37:	83 ec 0c             	sub    esp,0xc
c0006c3a:	50                   	push   eax
c0006c3b:	e8 86 0e 00 00       	call   c0007ac6 <free>
c0006c40:	83 c4 10             	add    esp,0x10
c0006c43:	c7 05 20 55 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025520,0x0
c0006c4d:	c7 05 b0 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025eb0,0x0
c0006c57:	31 c0                	xor    eax,eax
c0006c59:	83 c4 08             	add    esp,0x8
c0006c5c:	5b                   	pop    ebx
c0006c5d:	c3                   	ret    

c0006c5e <Computer::close(int, int, void*)>:
c0006c5e:	57                   	push   edi
c0006c5f:	56                   	push   esi
c0006c60:	53                   	push   ebx
c0006c61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006c65:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006c69:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006c6d:	e8 52 9f 00 00       	call   c0010bc4 <KeExecuteAtexit()>
c0006c72:	83 ec 0c             	sub    esp,0xc
c0006c75:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c7b:	50                   	push   eax
c0006c7c:	e8 e7 5b 00 00       	call   c000c868 <Device::closeAll()>
c0006c81:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c87:	83 c4 10             	add    esp,0x10
c0006c8a:	8b 10                	mov    edx,DWORD PTR [eax]
c0006c8c:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0006c90:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0006c98:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006c9c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006ca0:	5b                   	pop    ebx
c0006ca1:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006ca4:	5e                   	pop    esi
c0006ca5:	5f                   	pop    edi
c0006ca6:	ff e0                	jmp    eax

c0006ca8 <Krnl::firstTask()>:
c0006ca8:	53                   	push   ebx
c0006ca9:	83 ec 14             	sub    esp,0x14
c0006cac:	fb                   	sti    
c0006cad:	68 6f 07 02 c0       	push   0xc002076f
c0006cb2:	e8 ec 9f 00 00       	call   c0010ca3 <KeSetBootMessage(char const*)>
c0006cb7:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006cbe:	e8 f3 0d 00 00       	call   c0007ab6 <malloc>
c0006cc3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006cca:	89 c3                	mov    ebx,eax
c0006ccc:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0006cd1:	50                   	push   eax
c0006cd2:	68 88 07 02 c0       	push   0xc0020788
c0006cd7:	6a 01                	push   0x1
c0006cd9:	53                   	push   ebx
c0006cda:	e8 e9 eb 00 00       	call   c00158c8 <Process::Process(bool, char const*, Process*, char**)>
c0006cdf:	83 c4 20             	add    esp,0x20
c0006ce2:	68 ff 00 00 00       	push   0xff
c0006ce7:	6a 00                	push   0x0
c0006ce9:	68 fd 74 00 c0       	push   0xc00074fd
c0006cee:	53                   	push   ebx
c0006cef:	e8 f8 ed 00 00       	call   c0015aec <Process::createThread(void (*)(void*), void*, int)>
c0006cf4:	8b 15 f0 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296f0
c0006cfa:	6a 7a                	push   0x7a
c0006cfc:	6a 00                	push   0x0
c0006cfe:	68 d4 65 01 c0       	push   0xc00165d4
c0006d03:	52                   	push   edx
c0006d04:	e8 e3 ed 00 00       	call   c0015aec <Process::createThread(void (*)(void*), void*, int)>
c0006d09:	83 c4 14             	add    esp,0x14
c0006d0c:	a3 a8 96 02 c0       	mov    ds:0xc00296a8,eax
c0006d11:	68 84 08 02 c0       	push   0xc0020884
c0006d16:	e8 88 9f 00 00       	call   c0010ca3 <KeSetBootMessage(char const*)>
c0006d1b:	c6 05 bd 5e 02 c0 01 	mov    BYTE PTR ds:0xc0025ebd,0x1
c0006d22:	e8 0b a8 00 00       	call   c0011532 <KeInitRand()>
c0006d27:	e8 cb fc 00 00       	call   c00169f7 <Vm::initialise8086()>
c0006d2c:	e8 8d 48 00 00       	call   c000b5be <Fs::initVFS()>
c0006d31:	c7 04 24 95 07 02 c0 	mov    DWORD PTR [esp],0xc0020795
c0006d38:	e8 66 9f 00 00       	call   c0010ca3 <KeSetBootMessage(char const*)>
c0006d3d:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0006d42:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006d48:	8b 10                	mov    edx,DWORD PTR [eax]
c0006d4a:	6a 00                	push   0x0
c0006d4c:	6a 00                	push   0x0
c0006d4e:	6a 00                	push   0x0
c0006d50:	50                   	push   eax
c0006d51:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006d54:	83 c4 14             	add    esp,0x14
c0006d57:	68 84 08 02 c0       	push   0xc0020884
c0006d5c:	e8 42 9f 00 00       	call   c0010ca3 <KeSetBootMessage(char const*)>
c0006d61:	e8 36 45 00 00       	call   c000b29c <KeInitialiseSymlinks()>
c0006d66:	e8 71 a4 00 00       	call   c00111dc <KeLoadSystemEnv()>
c0006d6b:	e8 ce a6 00 00       	call   c001143e <KeSetupPowerManager()>
c0006d70:	83 c4 0c             	add    esp,0xc
c0006d73:	6a 3a                	push   0x3a
c0006d75:	68 af 07 02 c0       	push   0xc00207af
c0006d7a:	68 b8 07 02 c0       	push   0xc00207b8
c0006d7f:	e8 60 cd 00 00       	call   c0013ae4 <Reg::readIntWithDefault(char*, char*, int)>
c0006d84:	89 04 24             	mov    DWORD PTR [esp],eax
c0006d87:	e8 3c 54 00 00       	call   c000c1c8 <User::loadClockSettings(int)>
c0006d8c:	c7 04 24 a8 08 02 c0 	mov    DWORD PTR [esp],0xc00208a8
c0006d93:	e8 0b 9f 00 00       	call   c0010ca3 <KeSetBootMessage(char const*)>
c0006d98:	59                   	pop    ecx
c0006d99:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0006d9e:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006da4:	53                   	push   ebx
c0006da5:	e8 bc 5a 00 00       	call   c000c866 <Device::loadDriversForAll()>
c0006daa:	c7 04 24 c0 07 02 c0 	mov    DWORD PTR [esp],0xc00207c0
c0006db1:	e8 ed 9e 00 00       	call   c0010ca3 <KeSetBootMessage(char const*)>
c0006db6:	58                   	pop    eax
c0006db7:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c0006dbd:	5a                   	pop    edx
c0006dbe:	6a 01                	push   0x1
c0006dc0:	68 d1 07 02 c0       	push   0xc00207d1
c0006dc5:	e8 11 e5 00 00       	call   c00152db <Thr::loadDLL(char const*, bool)>
c0006dca:	59                   	pop    ecx
c0006dcb:	5a                   	pop    edx
c0006dcc:	53                   	push   ebx
c0006dcd:	50                   	push   eax
c0006dce:	e8 39 e7 00 00       	call   c001550c <Thr::executeDLL(unsigned long, void*)>
c0006dd3:	83 c4 10             	add    esp,0x10
c0006dd6:	83 ec 0c             	sub    esp,0xc
c0006dd9:	6a 02                	push   0x2
c0006ddb:	e8 70 f1 00 00       	call   c0015f50 <blockTask(TaskState)>
c0006de0:	83 c4 10             	add    esp,0x10
c0006de3:	eb f1                	jmp    c0006dd6 <Krnl::firstTask()+0x12e>
c0006de5:	90                   	nop

c0006de6 <Computer::Computer()>:
c0006de6:	83 ec 0c             	sub    esp,0xc
c0006de9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ded:	83 ec 08             	sub    esp,0x8
c0006df0:	68 ed 07 02 c0       	push   0xc00207ed
c0006df5:	50                   	push   eax
c0006df6:	e8 e7 5a 00 00       	call   c000c8e2 <Device::Device(char const*)>
c0006dfb:	83 c4 10             	add    esp,0x10
c0006dfe:	ba f4 08 02 c0       	mov    edx,0xc00208f4
c0006e03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e07:	89 10                	mov    DWORD PTR [eax],edx
c0006e09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e0d:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006e17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e1b:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006e25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e29:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006e2f:	83 ca 04             	or     edx,0x4
c0006e32:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006e38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e3c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e42:	0f b6 d0             	movzx  edx,al
c0006e45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e49:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006e50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e54:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e5a:	0f b6 d0             	movzx  edx,al
c0006e5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e61:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006e66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e6a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e70:	8d 50 01             	lea    edx,[eax+0x1]
c0006e73:	88 d1                	mov    cl,dl
c0006e75:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006e79:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0006e7f:	0f b6 d0             	movzx  edx,al
c0006e82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e86:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006e8a:	83 e1 3f             	and    ecx,0x3f
c0006e8d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006e91:	90                   	nop
c0006e92:	83 c4 0c             	add    esp,0xc
c0006e95:	c3                   	ret    

c0006e96 <Computer::setBootMessage(char const*)>:
c0006e96:	c3                   	ret    
c0006e97:	90                   	nop

c0006e98 <Computer::detectFeatures()>:
c0006e98:	55                   	push   ebp
c0006e99:	57                   	push   edi
c0006e9a:	56                   	push   esi
c0006e9b:	53                   	push   ebx
c0006e9c:	83 ec 1c             	sub    esp,0x1c
c0006e9f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006ea3:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0006ea9:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c0006eaf:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0006eb5:	e8 3f 93 ff ff       	call   c00001f9 <detectCPUID>
c0006eba:	31 d2                	xor    edx,edx
c0006ebc:	85 c0                	test   eax,eax
c0006ebe:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ec4:	0f 95 c2             	setne  dl
c0006ec7:	83 e0 fd             	and    eax,0xfffffffd
c0006eca:	d1 e2                	shl    edx,1
c0006ecc:	09 d0                	or     eax,edx
c0006ece:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ed4:	a8 02                	test   al,0x2
c0006ed6:	75 51                	jne    c0006f29 <Computer::detectFeatures()+0x91>
c0006ed8:	f6 05 d1 5e 02 c0 04 	test   BYTE PTR ds:0xc0025ed1,0x4
c0006edf:	74 0f                	je     c0006ef0 <Computer::detectFeatures()+0x58>
c0006ee1:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ee7:	83 e0 fb             	and    eax,0xfffffffb
c0006eea:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ef0:	e8 81 81 01 00       	call   c001f076 <x87Detect>
c0006ef5:	83 e0 01             	and    eax,0x1
c0006ef8:	c1 e0 04             	shl    eax,0x4
c0006efb:	89 c2                	mov    edx,eax
c0006efd:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f03:	83 e0 ef             	and    eax,0xffffffef
c0006f06:	09 d0                	or     eax,edx
c0006f08:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f0e:	88 c2                	mov    dl,al
c0006f10:	a8 10                	test   al,0x10
c0006f12:	0f 85 33 01 00 00    	jne    c000704b <Computer::detectFeatures()+0x1b3>
c0006f18:	80 e2 80             	and    dl,0x80
c0006f1b:	0f 85 4c 01 00 00    	jne    c000706d <Computer::detectFeatures()+0x1d5>
c0006f21:	83 c4 1c             	add    esp,0x1c
c0006f24:	5b                   	pop    ebx
c0006f25:	5e                   	pop    esi
c0006f26:	5f                   	pop    edi
c0006f27:	5d                   	pop    ebp
c0006f28:	c3                   	ret    
c0006f29:	83 ec 0c             	sub    esp,0xc
c0006f2c:	6a 20                	push   0x20
c0006f2e:	e8 a9 91 00 00       	call   c00100dc <CPU::cpuidCheckEDX(unsigned int)>
c0006f33:	83 e0 01             	and    eax,0x1
c0006f36:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006f3d:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f43:	83 e0 f7             	and    eax,0xfffffff7
c0006f46:	09 d0                	or     eax,edx
c0006f48:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f4e:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006f55:	e8 82 91 00 00       	call   c00100dc <CPU::cpuidCheckEDX(unsigned int)>
c0006f5a:	89 c2                	mov    edx,eax
c0006f5c:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f62:	83 e2 01             	and    edx,0x1
c0006f65:	83 e0 fe             	and    eax,0xfffffffe
c0006f68:	09 d0                	or     eax,edx
c0006f6a:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f70:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006f77:	e8 60 91 00 00       	call   c00100dc <CPU::cpuidCheckEDX(unsigned int)>
c0006f7c:	89 c2                	mov    edx,eax
c0006f7e:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f84:	c1 e2 07             	shl    edx,0x7
c0006f87:	83 e0 7f             	and    eax,0x7f
c0006f8a:	09 d0                	or     eax,edx
c0006f8c:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f92:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006f99:	e8 3e 91 00 00       	call   c00100dc <CPU::cpuidCheckEDX(unsigned int)>
c0006f9e:	83 c4 10             	add    esp,0x10
c0006fa1:	83 e0 01             	and    eax,0x1
c0006fa4:	c1 e0 05             	shl    eax,0x5
c0006fa7:	89 c2                	mov    edx,eax
c0006fa9:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006faf:	83 e0 df             	and    eax,0xffffffdf
c0006fb2:	09 d0                	or     eax,edx
c0006fb4:	f7 05 d0 5e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0025ed0,0x401
c0006fbe:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fc4:	0f 84 c9 00 00 00    	je     c0007093 <Computer::detectFeatures()+0x1fb>
c0006fca:	83 e0 fe             	and    eax,0xfffffffe
c0006fcd:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fd3:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006fd9:	89 c2                	mov    edx,eax
c0006fdb:	83 e2 09             	and    edx,0x9
c0006fde:	83 fa 01             	cmp    edx,0x1
c0006fe1:	75 09                	jne    c0006fec <Computer::detectFeatures()+0x154>
c0006fe3:	83 e0 fe             	and    eax,0xfffffffe
c0006fe6:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fec:	83 ec 0c             	sub    esp,0xc
c0006fef:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006ff3:	50                   	push   eax
c0006ff4:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0006ff8:	55                   	push   ebp
c0006ff9:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0006ffd:	57                   	push   edi
c0006ffe:	8d 74 24 18          	lea    esi,[esp+0x18]
c0007002:	56                   	push   esi
c0007003:	68 00 00 00 80       	push   0x80000000
c0007008:	e8 4b 90 00 00       	call   c0010058 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000700d:	83 c4 20             	add    esp,0x20
c0007010:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0007017:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000701b:	0f 86 b7 fe ff ff    	jbe    c0006ed8 <Computer::detectFeatures()+0x40>
c0007021:	83 ec 0c             	sub    esp,0xc
c0007024:	50                   	push   eax
c0007025:	55                   	push   ebp
c0007026:	57                   	push   edi
c0007027:	56                   	push   esi
c0007028:	68 01 00 00 80       	push   0x80000001
c000702d:	e8 26 90 00 00       	call   c0010058 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007032:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0007038:	83 c4 20             	add    esp,0x20
c000703b:	25 bf ff fc ff       	and    eax,0xfffcffbf
c0007040:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0007046:	e9 8d fe ff ff       	jmp    c0006ed8 <Computer::detectFeatures()+0x40>
c000704b:	e8 e0 7f 01 00       	call   c001f030 <absolutelyNoChanceInHell>
c0007050:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c0007056:	c1 e0 07             	shl    eax,0x7
c0007059:	83 e2 7f             	and    edx,0x7f
c000705c:	09 c2                	or     edx,eax
c000705e:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c0007064:	80 e2 80             	and    dl,0x80
c0007067:	0f 84 b4 fe ff ff    	je     c0006f21 <Computer::detectFeatures()+0x89>
c000706d:	e8 2e 7c 01 00       	call   c001eca0 <avxDetect>
c0007072:	83 e0 01             	and    eax,0x1
c0007075:	c1 e0 05             	shl    eax,0x5
c0007078:	89 c2                	mov    edx,eax
c000707a:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0007080:	83 e0 df             	and    eax,0xffffffdf
c0007083:	09 d0                	or     eax,edx
c0007085:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c000708b:	83 c4 1c             	add    esp,0x1c
c000708e:	5b                   	pop    ebx
c000708f:	5e                   	pop    esi
c0007090:	5f                   	pop    edi
c0007091:	5d                   	pop    ebp
c0007092:	c3                   	ret    
c0007093:	83 ec 0c             	sub    esp,0xc
c0007096:	68 00 02 00 00       	push   0x200
c000709b:	e8 3c 90 00 00       	call   c00100dc <CPU::cpuidCheckEDX(unsigned int)>
c00070a0:	83 c4 10             	add    esp,0x10
c00070a3:	89 c2                	mov    edx,eax
c00070a5:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00070ab:	83 e2 01             	and    edx,0x1
c00070ae:	83 e0 fe             	and    eax,0xfffffffe
c00070b1:	09 d0                	or     eax,edx
c00070b3:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00070b9:	e9 15 ff ff ff       	jmp    c0006fd3 <Computer::detectFeatures()+0x13b>

c00070be <Computer::displayFeatures()>:
c00070be:	c3                   	ret    
c00070bf:	90                   	nop

c00070c0 <Computer::rdmsr(unsigned int)>:
c00070c0:	83 ec 0c             	sub    esp,0xc
c00070c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070c7:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00070ce:	74 0a                	je     c00070da <Computer::rdmsr(unsigned int)+0x1a>
c00070d0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00070d4:	0f 32                	rdmsr  
c00070d6:	83 c4 0c             	add    esp,0xc
c00070d9:	c3                   	ret    
c00070da:	83 ec 0c             	sub    esp,0xc
c00070dd:	68 f6 07 02 c0       	push   0xc00207f6
c00070e2:	e8 92 a2 00 00       	call   c0011379 <KePanic(char const*)>
c00070e7:	83 c4 10             	add    esp,0x10
c00070ea:	eb e4                	jmp    c00070d0 <Computer::rdmsr(unsigned int)+0x10>

c00070ec <Computer::wrmsr(unsigned int, unsigned long long)>:
c00070ec:	57                   	push   edi
c00070ed:	56                   	push   esi
c00070ee:	83 ec 04             	sub    esp,0x4
c00070f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070f5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00070f9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00070fd:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0007104:	74 10                	je     c0007116 <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c0007106:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000710a:	89 f0                	mov    eax,esi
c000710c:	89 fa                	mov    edx,edi
c000710e:	0f 30                	wrmsr  
c0007110:	83 c4 04             	add    esp,0x4
c0007113:	5e                   	pop    esi
c0007114:	5f                   	pop    edi
c0007115:	c3                   	ret    
c0007116:	83 ec 0c             	sub    esp,0xc
c0007119:	68 fc 07 02 c0       	push   0xc00207fc
c000711e:	e8 56 a2 00 00       	call   c0011379 <KePanic(char const*)>
c0007123:	83 c4 10             	add    esp,0x10
c0007126:	eb de                	jmp    c0007106 <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c0007128 <Computer::shutdown()>:
c0007128:	83 ec 0c             	sub    esp,0xc
c000712b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000712f:	8b 10                	mov    edx,DWORD PTR [eax]
c0007131:	6a 00                	push   0x0
c0007133:	6a 00                	push   0x0
c0007135:	6a 00                	push   0x0
c0007137:	50                   	push   eax
c0007138:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000713b:	83 c4 1c             	add    esp,0x1c
c000713e:	c3                   	ret    
c000713f:	90                   	nop

c0007140 <Computer::restart()>:
c0007140:	83 ec 0c             	sub    esp,0xc
c0007143:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007147:	8b 10                	mov    edx,DWORD PTR [eax]
c0007149:	6a 00                	push   0x0
c000714b:	6a 00                	push   0x0
c000714d:	6a 01                	push   0x1
c000714f:	50                   	push   eax
c0007150:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007153:	83 c4 1c             	add    esp,0x1c
c0007156:	c3                   	ret    
c0007157:	90                   	nop

c0007158 <Computer::sleep()>:
c0007158:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000715c:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0007162:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007166:	e9 89 89 00 00       	jmp    c000faf4 <ACPI::sleep()>
c000716b:	90                   	nop

c000716c <Computer::nmiEnabled()>:
c000716c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007170:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0007176:	c3                   	ret    
c0007177:	90                   	nop

c0007178 <Computer::readCMOS(unsigned char)>:
c0007178:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000717c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007180:	80 ba 58 01 00 00 00 	cmp    BYTE PTR [edx+0x158],0x0
c0007187:	75 09                	jne    c0007192 <Computer::readCMOS(unsigned char)+0x1a>
c0007189:	b2 80                	mov    dl,0x80
c000718b:	09 d0                	or     eax,edx
c000718d:	e6 70                	out    0x70,al
c000718f:	e4 71                	in     al,0x71
c0007191:	c3                   	ret    
c0007192:	31 d2                	xor    edx,edx
c0007194:	eb f5                	jmp    c000718b <Computer::readCMOS(unsigned char)+0x13>

c0007196 <Computer::enableNMI(bool)>:
c0007196:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000719a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000719e:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c00071a4:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c00071ac:	eb ca                	jmp    c0007178 <Computer::readCMOS(unsigned char)>

c00071ae <Computer::open(int, int, void*)>:
c00071ae:	56                   	push   esi
c00071af:	53                   	push   ebx
c00071b0:	83 ec 10             	sub    esp,0x10
c00071b3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00071b7:	f6 05 d0 5e 02 c0 04 	test   BYTE PTR ds:0xc0025ed0,0x4
c00071be:	68 02 08 02 c0       	push   0xc0020802
c00071c3:	0f 94 05 00 32 02 c0 	sete   BYTE PTR ds:0xc0023200
c00071ca:	e8 d4 9a 00 00       	call   c0010ca3 <KeSetBootMessage(char const*)>
c00071cf:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00071d6:	e8 db 08 00 00       	call   c0007ab6 <malloc>
c00071db:	89 04 24             	mov    DWORD PTR [esp],eax
c00071de:	89 c6                	mov    esi,eax
c00071e0:	e8 83 84 00 00       	call   c000f668 <ACPI::ACPI()>
c00071e5:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c00071eb:	58                   	pop    eax
c00071ec:	5a                   	pop    edx
c00071ed:	56                   	push   esi
c00071ee:	53                   	push   ebx
c00071ef:	e8 56 55 00 00       	call   c000c74a <Device::addChild(Device*)>
c00071f4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00071f7:	e8 9c fc ff ff       	call   c0006e98 <Computer::detectFeatures()>
c00071fc:	59                   	pop    ecx
c00071fd:	5e                   	pop    esi
c00071fe:	6a 01                	push   0x1
c0007200:	53                   	push   ebx
c0007201:	e8 90 ff ff ff       	call   c0007196 <Computer::enableNMI(bool)>
c0007206:	c7 04 24 1a 08 02 c0 	mov    DWORD PTR [esp],0xc002081a
c000720d:	e8 91 9a 00 00       	call   c0010ca3 <KeSetBootMessage(char const*)>
c0007212:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0007219:	e8 98 08 00 00       	call   c0007ab6 <malloc>
c000721e:	89 04 24             	mov    DWORD PTR [esp],eax
c0007221:	89 c6                	mov    esi,eax
c0007223:	e8 6c 8f 00 00       	call   c0010194 <CPU::CPU()>
c0007228:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000722e:	58                   	pop    eax
c000722f:	5a                   	pop    edx
c0007230:	56                   	push   esi
c0007231:	53                   	push   ebx
c0007232:	e8 13 55 00 00       	call   c000c74a <Device::addChild(Device*)>
c0007237:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000723d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007241:	8b 10                	mov    edx,DWORD PTR [eax]
c0007243:	51                   	push   ecx
c0007244:	6a 00                	push   0x0
c0007246:	6a 00                	push   0x0
c0007248:	50                   	push   eax
c0007249:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000724c:	83 c4 14             	add    esp,0x14
c000724f:	68 c8 08 02 c0       	push   0xc00208c8
c0007254:	e8 4a 9a 00 00       	call   c0010ca3 <KeSetBootMessage(char const*)>
c0007259:	e8 d6 09 01 00       	call   c0017c34 <HalInitialiseCoprocessor()>
c000725e:	c7 04 24 34 08 02 c0 	mov    DWORD PTR [esp],0xc0020834
c0007265:	e8 39 9a 00 00       	call   c0010ca3 <KeSetBootMessage(char const*)>
c000726a:	c7 04 24 a8 6c 00 c0 	mov    DWORD PTR [esp],0xc0006ca8
c0007271:	e8 a2 e9 00 00       	call   c0015c18 <setupMultitasking(void (*)())>
c0007276:	83 c4 14             	add    esp,0x14
c0007279:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000727e:	5b                   	pop    ebx
c000727f:	5e                   	pop    esi
c0007280:	c3                   	ret    
c0007281:	90                   	nop

c0007282 <Computer::disableNMI()>:
c0007282:	6a 00                	push   0x0
c0007284:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007288:	50                   	push   eax
c0007289:	e8 08 ff ff ff       	call   c0007196 <Computer::enableNMI(bool)>
c000728e:	5a                   	pop    edx
c000728f:	59                   	pop    ecx
c0007290:	c3                   	ret    
c0007291:	90                   	nop

c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0007292:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007296:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000729a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000729e:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c00072a5:	75 0b                	jne    c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)+0x20>
c00072a7:	b1 80                	mov    cl,0x80
c00072a9:	09 c8                	or     eax,ecx
c00072ab:	e6 70                	out    0x70,al
c00072ad:	88 d0                	mov    al,dl
c00072af:	e6 71                	out    0x71,al
c00072b1:	c3                   	ret    
c00072b2:	31 c9                	xor    ecx,ecx
c00072b4:	eb f3                	jmp    c00072a9 <Computer::writeCMOS(unsigned char, unsigned char)+0x17>

c00072b6 <Computer::handleNMI()>:
c00072b6:	56                   	push   esi
c00072b7:	53                   	push   ebx
c00072b8:	83 ec 10             	sub    esp,0x10
c00072bb:	e4 92                	in     al,0x92
c00072bd:	89 c6                	mov    esi,eax
c00072bf:	e4 61                	in     al,0x61
c00072c1:	68 4f 08 02 c0       	push   0xc002084f
c00072c6:	88 c3                	mov    bl,al
c00072c8:	e8 78 36 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00072cd:	83 c4 10             	add    esp,0x10
c00072d0:	83 e6 10             	and    esi,0x10
c00072d3:	75 10                	jne    c00072e5 <Computer::handleNMI()+0x2f>
c00072d5:	f6 c3 40             	test   bl,0x40
c00072d8:	75 20                	jne    c00072fa <Computer::handleNMI()+0x44>
c00072da:	80 e3 80             	and    bl,0x80
c00072dd:	75 30                	jne    c000730f <Computer::handleNMI()+0x59>
c00072df:	83 c4 04             	add    esp,0x4
c00072e2:	5b                   	pop    ebx
c00072e3:	5e                   	pop    esi
c00072e4:	c3                   	ret    
c00072e5:	83 ec 0c             	sub    esp,0xc
c00072e8:	68 60 08 02 c0       	push   0xc0020860
c00072ed:	e8 87 a0 00 00       	call   c0011379 <KePanic(char const*)>
c00072f2:	83 c4 10             	add    esp,0x10
c00072f5:	f6 c3 40             	test   bl,0x40
c00072f8:	74 e0                	je     c00072da <Computer::handleNMI()+0x24>
c00072fa:	83 ec 0c             	sub    esp,0xc
c00072fd:	68 6d 08 02 c0       	push   0xc002086d
c0007302:	e8 72 a0 00 00       	call   c0011379 <KePanic(char const*)>
c0007307:	83 c4 10             	add    esp,0x10
c000730a:	80 e3 80             	and    bl,0x80
c000730d:	74 d0                	je     c00072df <Computer::handleNMI()+0x29>
c000730f:	c7 44 24 10 77 08 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020877
c0007317:	83 c4 04             	add    esp,0x4
c000731a:	5b                   	pop    ebx
c000731b:	5e                   	pop    esi
c000731c:	e9 58 a0 00 00       	jmp    c0011379 <KePanic(char const*)>
c0007321:	90                   	nop

c0007322 <GDTEntry::setBase(unsigned int)>:
c0007322:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007326:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000732a:	89 c1                	mov    ecx,eax
c000732c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007330:	c1 e9 10             	shr    ecx,0x10
c0007333:	c1 e8 18             	shr    eax,0x18
c0007336:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007339:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000733c:	c3                   	ret    
c000733d:	90                   	nop

c000733e <GDTEntry::setLimit(unsigned int)>:
c000733e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007342:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007346:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007349:	66 89 01             	mov    WORD PTR [ecx],ax
c000734c:	83 e2 f0             	and    edx,0xfffffff0
c000734f:	c1 e8 10             	shr    eax,0x10
c0007352:	83 e0 0f             	and    eax,0xf
c0007355:	09 d0                	or     eax,edx
c0007357:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000735a:	c3                   	ret    
c000735b:	90                   	nop

c000735c <GDT::GDT()>:
c000735c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007360:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007366:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000736a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007370:	90                   	nop
c0007371:	c3                   	ret    

c0007372 <GDT::addEntry(GDTEntry)>:
c0007372:	53                   	push   ebx
c0007373:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007377:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000737b:	8b 02                	mov    eax,DWORD PTR [edx]
c000737d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007381:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0007385:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0007389:	8d 48 01             	lea    ecx,[eax+0x1]
c000738c:	c1 e0 03             	shl    eax,0x3
c000738f:	89 0a                	mov    DWORD PTR [edx],ecx
c0007391:	5b                   	pop    ebx
c0007392:	c3                   	ret    
c0007393:	90                   	nop

c0007394 <GDT::getNumberOfEntries()>:
c0007394:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007398:	8b 00                	mov    eax,DWORD PTR [eax]
c000739a:	c3                   	ret    
c000739b:	90                   	nop

c000739c <GDT::flush()>:
c000739c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073a0:	8b 10                	mov    edx,DWORD PTR [eax]
c00073a2:	83 c0 04             	add    eax,0x4
c00073a5:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00073ac:	a3 c2 5e 02 c0       	mov    ds:0xc0025ec2,eax
c00073b1:	66 89 15 c0 5e 02 c0 	mov    WORD PTR ds:0xc0025ec0,dx
c00073b8:	e9 9d 8f ff ff       	jmp    c000035a <loadGDT>
c00073bd:	90                   	nop

c00073be <GDT::setup()>:
c00073be:	57                   	push   edi
c00073bf:	56                   	push   esi
c00073c0:	53                   	push   ebx
c00073c1:	83 ec 30             	sub    esp,0x30
c00073c4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00073c8:	6a 00                	push   0x0
c00073ca:	8d 74 24 14          	lea    esi,[esp+0x14]
c00073ce:	56                   	push   esi
c00073cf:	e8 4e ff ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c00073d4:	6a 00                	push   0x0
c00073d6:	56                   	push   esi
c00073d7:	e8 62 ff ff ff       	call   c000733e <GDTEntry::setLimit(unsigned int)>
c00073dc:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c00073e4:	6a 00                	push   0x0
c00073e6:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00073ea:	56                   	push   esi
c00073eb:	e8 32 ff ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c00073f0:	68 ff ff ff 00       	push   0xffffff
c00073f5:	56                   	push   esi
c00073f6:	e8 43 ff ff ff       	call   c000733e <GDTEntry::setLimit(unsigned int)>
c00073fb:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00073ff:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0007403:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007407:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000740b:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0007410:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007415:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007419:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000741d:	89 f8                	mov    eax,edi
c000741f:	89 fa                	mov    edx,edi
c0007421:	80 e4 f7             	and    ah,0xf7
c0007424:	80 ce 60             	or     dh,0x60
c0007427:	89 c7                	mov    edi,eax
c0007429:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000742d:	80 cc 60             	or     ah,0x60
c0007430:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007434:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007438:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000743c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007440:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007444:	83 c4 20             	add    esp,0x20
c0007447:	6a 00                	push   0x0
c0007449:	8d 44 24 24          	lea    eax,[esp+0x24]
c000744d:	50                   	push   eax
c000744e:	e8 cf fe ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c0007453:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0007457:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000745b:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000745f:	83 e0 3f             	and    eax,0x3f
c0007462:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0007466:	6a 00                	push   0x0
c0007468:	8d 44 24 34          	lea    eax,[esp+0x34]
c000746c:	50                   	push   eax
c000746d:	e8 b0 fe ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c0007472:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c0007476:	83 e0 3f             	and    eax,0x3f
c0007479:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000747d:	83 c4 0c             	add    esp,0xc
c0007480:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007484:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007488:	53                   	push   ebx
c0007489:	e8 e4 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c000748e:	83 c4 0c             	add    esp,0xc
c0007491:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007495:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007499:	53                   	push   ebx
c000749a:	e8 d3 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c000749f:	83 c4 0c             	add    esp,0xc
c00074a2:	57                   	push   edi
c00074a3:	56                   	push   esi
c00074a4:	53                   	push   ebx
c00074a5:	e8 c8 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074aa:	83 c4 0c             	add    esp,0xc
c00074ad:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074b1:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074b5:	53                   	push   ebx
c00074b6:	e8 b7 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074bb:	83 c4 0c             	add    esp,0xc
c00074be:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074c2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074c6:	53                   	push   ebx
c00074c7:	e8 a6 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074cc:	83 c4 0c             	add    esp,0xc
c00074cf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074d3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074d7:	53                   	push   ebx
c00074d8:	e8 95 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074dd:	83 c4 0c             	add    esp,0xc
c00074e0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00074e4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00074e8:	53                   	push   ebx
c00074e9:	e8 84 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074ee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00074f1:	e8 a6 fe ff ff       	call   c000739c <GDT::flush()>
c00074f6:	83 c4 40             	add    esp,0x40
c00074f9:	5b                   	pop    ebx
c00074fa:	5e                   	pop    esi
c00074fb:	5f                   	pop    edi
c00074fc:	c3                   	ret    

c00074fd <idleFunction(void*)>:
c00074fd:	83 ec 0c             	sub    esp,0xc
c0007500:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0007505:	48                   	dec    eax
c0007506:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000750b:	75 01                	jne    c000750e <idleFunction(void*)+0x11>
c000750d:	fb                   	sti    
c000750e:	e8 ed 03 01 00       	call   c0017900 <HalSystemIdle()>
c0007513:	e8 1a 81 01 00       	call   c001f632 <idleCommon()>
c0007518:	eb f4                	jmp    c000750e <idleFunction(void*)+0x11>
c000751a:	66 90                	xchg   ax,ax

c000751c <IDTEntry::IDTEntry(bool)>:
c000751c:	53                   	push   ebx
c000751d:	83 ec 04             	sub    esp,0x4
c0007520:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007524:	88 04 24             	mov    BYTE PTR [esp],al
c0007527:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000752b:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007531:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007535:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007539:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000753d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007540:	83 e2 f0             	and    edx,0xfffffff0
c0007543:	83 ca 0e             	or     edx,0xe
c0007546:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007549:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000754d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007550:	83 e2 ef             	and    edx,0xffffffef
c0007553:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007556:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000755a:	85 c0                	test   eax,eax
c000755c:	74 06                	je     c0007564 <IDTEntry::IDTEntry(bool)+0x48>
c000755e:	b2 03                	mov    dl,0x3
c0007560:	eb 06                	jmp    c0007568 <IDTEntry::IDTEntry(bool)+0x4c>
c0007562:	66 90                	xchg   ax,ax
c0007564:	b2 00                	mov    dl,0x0
c0007566:	66 90                	xchg   ax,ax
c0007568:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000756c:	83 e2 03             	and    edx,0x3
c000756f:	89 d3                	mov    ebx,edx
c0007571:	c1 e3 05             	shl    ebx,0x5
c0007574:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007577:	83 e2 9f             	and    edx,0xffffff9f
c000757a:	88 d1                	mov    cl,dl
c000757c:	88 da                	mov    dl,bl
c000757e:	09 ca                	or     edx,ecx
c0007580:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007583:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007587:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000758a:	83 ca 80             	or     edx,0xffffff80
c000758d:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007590:	90                   	nop
c0007591:	83 c4 04             	add    esp,0x4
c0007594:	5b                   	pop    ebx
c0007595:	c3                   	ret    

c0007596 <IDTEntry::setOffset(unsigned int)>:
c0007596:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000759a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000759e:	66 89 02             	mov    WORD PTR [edx],ax
c00075a1:	c1 e8 10             	shr    eax,0x10
c00075a4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00075a8:	c3                   	ret    
c00075a9:	90                   	nop
c00075aa:	66 90                	xchg   ax,ax

c00075ac <IDT::IDT()>:
c00075ac:	90                   	nop
c00075ad:	c3                   	ret    

c00075ae <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00075ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075b2:	83 c0 30             	add    eax,0x30
c00075b5:	c3                   	ret    

c00075b6 <IDT::addEntry(IDTEntry, int)>:
c00075b6:	53                   	push   ebx
c00075b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00075bf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00075c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00075c7:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00075ca:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00075ce:	5b                   	pop    ebx
c00075cf:	c3                   	ret    

c00075d0 <IDT::addEntry(int, void (*)(), bool)>:
c00075d0:	53                   	push   ebx
c00075d1:	83 ec 10             	sub    esp,0x10
c00075d4:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00075d9:	50                   	push   eax
c00075da:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00075de:	53                   	push   ebx
c00075df:	e8 38 ff ff ff       	call   c000751c <IDTEntry::IDTEntry(bool)>
c00075e4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00075e8:	53                   	push   ebx
c00075e9:	e8 a8 ff ff ff       	call   c0007596 <IDTEntry::setOffset(unsigned int)>
c00075ee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00075f2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00075f6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00075fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00075fe:	e8 b3 ff ff ff       	call   c00075b6 <IDT::addEntry(IDTEntry, int)>
c0007603:	83 c4 30             	add    esp,0x30
c0007606:	5b                   	pop    ebx
c0007607:	c3                   	ret    

c0007608 <IDT::flush()>:
c0007608:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000760c:	66 c7 05 c8 5e 02 c0 ff 07 	mov    WORD PTR ds:0xc0025ec8,0x7ff
c0007615:	a3 ca 5e 02 c0       	mov    ds:0xc0025eca,eax
c000761a:	0f 01 1d c8 5e 02 c0 	lidtd  ds:0xc0025ec8
c0007621:	c3                   	ret    

c0007622 <IDT::setup()>:
c0007622:	57                   	push   edi
c0007623:	56                   	push   esi
c0007624:	53                   	push   ebx
c0007625:	83 ec 10             	sub    esp,0x10
c0007628:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000762c:	6a 00                	push   0x0
c000762e:	68 30 ed 01 c0       	push   0xc001ed30
c0007633:	6a 00                	push   0x0
c0007635:	53                   	push   ebx
c0007636:	e8 95 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000763b:	6a 00                	push   0x0
c000763d:	68 40 ed 01 c0       	push   0xc001ed40
c0007642:	6a 01                	push   0x1
c0007644:	53                   	push   ebx
c0007645:	e8 86 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000764a:	83 c4 20             	add    esp,0x20
c000764d:	6a 00                	push   0x0
c000764f:	68 4a ed 01 c0       	push   0xc001ed4a
c0007654:	6a 02                	push   0x2
c0007656:	53                   	push   ebx
c0007657:	e8 74 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000765c:	6a 00                	push   0x0
c000765e:	68 54 ed 01 c0       	push   0xc001ed54
c0007663:	6a 03                	push   0x3
c0007665:	53                   	push   ebx
c0007666:	e8 65 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000766b:	83 c4 20             	add    esp,0x20
c000766e:	6a 00                	push   0x0
c0007670:	68 5e ed 01 c0       	push   0xc001ed5e
c0007675:	6a 04                	push   0x4
c0007677:	53                   	push   ebx
c0007678:	e8 53 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000767d:	6a 00                	push   0x0
c000767f:	68 68 ed 01 c0       	push   0xc001ed68
c0007684:	6a 05                	push   0x5
c0007686:	53                   	push   ebx
c0007687:	e8 44 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000768c:	83 c4 20             	add    esp,0x20
c000768f:	6a 00                	push   0x0
c0007691:	68 72 ed 01 c0       	push   0xc001ed72
c0007696:	6a 06                	push   0x6
c0007698:	53                   	push   ebx
c0007699:	e8 32 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000769e:	6a 00                	push   0x0
c00076a0:	68 7c ed 01 c0       	push   0xc001ed7c
c00076a5:	6a 07                	push   0x7
c00076a7:	53                   	push   ebx
c00076a8:	e8 23 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076ad:	83 c4 20             	add    esp,0x20
c00076b0:	6a 00                	push   0x0
c00076b2:	68 86 ed 01 c0       	push   0xc001ed86
c00076b7:	6a 08                	push   0x8
c00076b9:	53                   	push   ebx
c00076ba:	e8 11 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076bf:	6a 00                	push   0x0
c00076c1:	68 8e ed 01 c0       	push   0xc001ed8e
c00076c6:	6a 09                	push   0x9
c00076c8:	53                   	push   ebx
c00076c9:	e8 02 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076ce:	83 c4 20             	add    esp,0x20
c00076d1:	6a 00                	push   0x0
c00076d3:	68 98 ed 01 c0       	push   0xc001ed98
c00076d8:	6a 0a                	push   0xa
c00076da:	53                   	push   ebx
c00076db:	e8 f0 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076e0:	6a 00                	push   0x0
c00076e2:	68 a0 ed 01 c0       	push   0xc001eda0
c00076e7:	6a 0b                	push   0xb
c00076e9:	53                   	push   ebx
c00076ea:	e8 e1 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076ef:	83 c4 20             	add    esp,0x20
c00076f2:	6a 00                	push   0x0
c00076f4:	68 a8 ed 01 c0       	push   0xc001eda8
c00076f9:	6a 0c                	push   0xc
c00076fb:	53                   	push   ebx
c00076fc:	e8 cf fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007701:	6a 00                	push   0x0
c0007703:	68 b0 ed 01 c0       	push   0xc001edb0
c0007708:	6a 0d                	push   0xd
c000770a:	53                   	push   ebx
c000770b:	e8 c0 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007710:	83 c4 20             	add    esp,0x20
c0007713:	6a 00                	push   0x0
c0007715:	68 ca ed 01 c0       	push   0xc001edca
c000771a:	6a 0e                	push   0xe
c000771c:	53                   	push   ebx
c000771d:	e8 ae fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007722:	6a 00                	push   0x0
c0007724:	68 d2 ed 01 c0       	push   0xc001edd2
c0007729:	6a 0f                	push   0xf
c000772b:	53                   	push   ebx
c000772c:	e8 9f fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007731:	83 c4 20             	add    esp,0x20
c0007734:	6a 00                	push   0x0
c0007736:	68 dc ed 01 c0       	push   0xc001eddc
c000773b:	6a 10                	push   0x10
c000773d:	53                   	push   ebx
c000773e:	e8 8d fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007743:	6a 00                	push   0x0
c0007745:	68 e6 ed 01 c0       	push   0xc001ede6
c000774a:	6a 11                	push   0x11
c000774c:	53                   	push   ebx
c000774d:	e8 7e fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007752:	83 c4 20             	add    esp,0x20
c0007755:	6a 00                	push   0x0
c0007757:	68 f0 ed 01 c0       	push   0xc001edf0
c000775c:	6a 12                	push   0x12
c000775e:	53                   	push   ebx
c000775f:	e8 6c fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007764:	6a 01                	push   0x1
c0007766:	68 8a ee 01 c0       	push   0xc001ee8a
c000776b:	6a 60                	push   0x60
c000776d:	53                   	push   ebx
c000776e:	e8 5d fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007773:	83 c4 20             	add    esp,0x20
c0007776:	6a 00                	push   0x0
c0007778:	68 91 ee 01 c0       	push   0xc001ee91
c000777d:	6a 20                	push   0x20
c000777f:	53                   	push   ebx
c0007780:	e8 4b fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007785:	6a 00                	push   0x0
c0007787:	68 7c ee 01 c0       	push   0xc001ee7c
c000778c:	6a 21                	push   0x21
c000778e:	53                   	push   ebx
c000778f:	e8 3c fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007794:	83 c4 20             	add    esp,0x20
c0007797:	6a 00                	push   0x0
c0007799:	68 83 ee 01 c0       	push   0xc001ee83
c000779e:	6a 22                	push   0x22
c00077a0:	53                   	push   ebx
c00077a1:	e8 2a fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077a6:	6a 00                	push   0x0
c00077a8:	68 fa ed 01 c0       	push   0xc001edfa
c00077ad:	6a 23                	push   0x23
c00077af:	53                   	push   ebx
c00077b0:	e8 1b fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077b5:	83 c4 20             	add    esp,0x20
c00077b8:	6a 00                	push   0x0
c00077ba:	68 04 ee 01 c0       	push   0xc001ee04
c00077bf:	6a 24                	push   0x24
c00077c1:	53                   	push   ebx
c00077c2:	e8 09 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077c7:	6a 00                	push   0x0
c00077c9:	68 0e ee 01 c0       	push   0xc001ee0e
c00077ce:	6a 25                	push   0x25
c00077d0:	53                   	push   ebx
c00077d1:	e8 fa fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077d6:	83 c4 20             	add    esp,0x20
c00077d9:	6a 00                	push   0x0
c00077db:	68 18 ee 01 c0       	push   0xc001ee18
c00077e0:	6a 26                	push   0x26
c00077e2:	53                   	push   ebx
c00077e3:	e8 e8 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077e8:	6a 00                	push   0x0
c00077ea:	68 22 ee 01 c0       	push   0xc001ee22
c00077ef:	6a 27                	push   0x27
c00077f1:	53                   	push   ebx
c00077f2:	e8 d9 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077f7:	83 c4 20             	add    esp,0x20
c00077fa:	6a 00                	push   0x0
c00077fc:	68 2c ee 01 c0       	push   0xc001ee2c
c0007801:	6a 28                	push   0x28
c0007803:	53                   	push   ebx
c0007804:	e8 c7 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007809:	6a 00                	push   0x0
c000780b:	68 36 ee 01 c0       	push   0xc001ee36
c0007810:	6a 29                	push   0x29
c0007812:	53                   	push   ebx
c0007813:	e8 b8 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007818:	83 c4 20             	add    esp,0x20
c000781b:	6a 00                	push   0x0
c000781d:	68 40 ee 01 c0       	push   0xc001ee40
c0007822:	6a 2a                	push   0x2a
c0007824:	53                   	push   ebx
c0007825:	e8 a6 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000782a:	6a 00                	push   0x0
c000782c:	68 4a ee 01 c0       	push   0xc001ee4a
c0007831:	6a 2b                	push   0x2b
c0007833:	53                   	push   ebx
c0007834:	e8 97 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007839:	83 c4 20             	add    esp,0x20
c000783c:	6a 00                	push   0x0
c000783e:	68 54 ee 01 c0       	push   0xc001ee54
c0007843:	6a 2c                	push   0x2c
c0007845:	53                   	push   ebx
c0007846:	e8 85 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000784b:	6a 00                	push   0x0
c000784d:	68 5e ee 01 c0       	push   0xc001ee5e
c0007852:	6a 2d                	push   0x2d
c0007854:	53                   	push   ebx
c0007855:	e8 76 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000785a:	83 c4 20             	add    esp,0x20
c000785d:	6a 00                	push   0x0
c000785f:	68 68 ee 01 c0       	push   0xc001ee68
c0007864:	6a 2e                	push   0x2e
c0007866:	53                   	push   ebx
c0007867:	e8 64 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000786c:	6a 00                	push   0x0
c000786e:	68 72 ee 01 c0       	push   0xc001ee72
c0007873:	6a 2f                	push   0x2f
c0007875:	53                   	push   ebx
c0007876:	e8 55 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000787b:	83 c4 20             	add    esp,0x20
c000787e:	6a 00                	push   0x0
c0007880:	68 cc ef 01 c0       	push   0xc001efcc
c0007885:	6a 30                	push   0x30
c0007887:	53                   	push   ebx
c0007888:	e8 43 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000788d:	6a 00                	push   0x0
c000788f:	68 d6 ef 01 c0       	push   0xc001efd6
c0007894:	6a 31                	push   0x31
c0007896:	53                   	push   ebx
c0007897:	e8 34 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000789c:	83 c4 20             	add    esp,0x20
c000789f:	6a 00                	push   0x0
c00078a1:	68 e0 ef 01 c0       	push   0xc001efe0
c00078a6:	6a 32                	push   0x32
c00078a8:	53                   	push   ebx
c00078a9:	e8 22 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078ae:	6a 00                	push   0x0
c00078b0:	68 ea ef 01 c0       	push   0xc001efea
c00078b5:	6a 33                	push   0x33
c00078b7:	53                   	push   ebx
c00078b8:	e8 13 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078bd:	83 c4 20             	add    esp,0x20
c00078c0:	6a 00                	push   0x0
c00078c2:	68 f4 ef 01 c0       	push   0xc001eff4
c00078c7:	6a 34                	push   0x34
c00078c9:	53                   	push   ebx
c00078ca:	e8 01 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078cf:	6a 00                	push   0x0
c00078d1:	68 fe ef 01 c0       	push   0xc001effe
c00078d6:	6a 35                	push   0x35
c00078d8:	53                   	push   ebx
c00078d9:	e8 f2 fc ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078de:	83 c4 20             	add    esp,0x20
c00078e1:	6a 00                	push   0x0
c00078e3:	68 08 f0 01 c0       	push   0xc001f008
c00078e8:	6a 36                	push   0x36
c00078ea:	53                   	push   ebx
c00078eb:	e8 e0 fc ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078f0:	6a 00                	push   0x0
c00078f2:	68 12 f0 01 c0       	push   0xc001f012
c00078f7:	6a 37                	push   0x37
c00078f9:	53                   	push   ebx
c00078fa:	e8 d1 fc ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078ff:	83 c4 1c             	add    esp,0x1c
c0007902:	6a 03                	push   0x3
c0007904:	6a 02                	push   0x2
c0007906:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c000790c:	e8 13 25 00 00       	call   c0009e24 <VAS::allocatePages(int, int)>
c0007911:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007918:	89 c6                	mov    esi,eax
c000791a:	e8 97 01 00 00       	call   c0007ab6 <malloc>
c000791f:	81 c6 00 20 00 00    	add    esi,0x2000
c0007925:	89 04 24             	mov    DWORD PTR [esp],eax
c0007928:	89 c7                	mov    edi,eax
c000792a:	e8 15 16 00 00       	call   c0008f44 <TSS::TSS()>
c000792f:	83 c4 0c             	add    esp,0xc
c0007932:	68 86 ed 01 c0       	push   0xc001ed86
c0007937:	56                   	push   esi
c0007938:	57                   	push   edi
c0007939:	e8 4a 16 00 00       	call   c0008f88 <TSS::setup(unsigned long, unsigned long)>
c000793e:	89 c6                	mov    esi,eax
c0007940:	58                   	pop    eax
c0007941:	5a                   	pop    edx
c0007942:	6a 00                	push   0x0
c0007944:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007948:	50                   	push   eax
c0007949:	e8 ce fb ff ff       	call   c000751c <IDTEntry::IDTEntry(bool)>
c000794e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007952:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0007957:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000795e:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0007964:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007968:	80 ce 05             	or     dh,0x5
c000796b:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000796e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007972:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007976:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007979:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000797c:	e8 87 fc ff ff       	call   c0007608 <IDT::flush()>
c0007981:	83 c4 20             	add    esp,0x20
c0007984:	5b                   	pop    ebx
c0007985:	5e                   	pop    esi
c0007986:	5f                   	pop    edi
c0007987:	c3                   	ret    

c0007988 <sbrk>:
c0007988:	55                   	push   ebp
c0007989:	57                   	push   edi
c000798a:	56                   	push   esi
c000798b:	53                   	push   ebx
c000798c:	83 ec 1c             	sub    esp,0x1c
c000798f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007993:	85 c0                	test   eax,eax
c0007995:	74 61                	je     c00079f8 <sbrk+0x70>
c0007997:	78 66                	js     c00079ff <sbrk+0x77>
c0007999:	8b 15 f4 31 02 c0    	mov    edx,DWORD PTR ds:0xc00231f4
c000799f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00079a3:	05 ff 0f 00 00       	add    eax,0xfff
c00079a8:	89 c5                	mov    ebp,eax
c00079aa:	78 6b                	js     c0007a17 <sbrk+0x8f>
c00079ac:	c1 fd 0c             	sar    ebp,0xc
c00079af:	bb 00 00 00 00       	mov    ebx,0x0
c00079b4:	8b 35 b0 5f 02 c0    	mov    esi,DWORD PTR ds:0xc0025fb0
c00079ba:	8b 3d f4 31 02 c0    	mov    edi,DWORD PTR ds:0xc00231f4
c00079c0:	e8 fa 03 00 00       	call   c0007dbf <Phys::allocatePage()>
c00079c5:	68 01 04 00 00       	push   0x401
c00079ca:	57                   	push   edi
c00079cb:	50                   	push   eax
c00079cc:	56                   	push   esi
c00079cd:	e8 4e 23 00 00       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c00079d2:	81 05 f4 31 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc00231f4,0x1000
c00079dc:	83 c3 01             	add    ebx,0x1
c00079df:	83 c4 10             	add    esp,0x10
c00079e2:	39 dd                	cmp    ebp,ebx
c00079e4:	75 ce                	jne    c00079b4 <sbrk+0x2c>
c00079e6:	0f 20 d8             	mov    eax,cr3
c00079e9:	0f 22 d8             	mov    cr3,eax
c00079ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00079f0:	83 c4 1c             	add    esp,0x1c
c00079f3:	5b                   	pop    ebx
c00079f4:	5e                   	pop    esi
c00079f5:	5f                   	pop    edi
c00079f6:	5d                   	pop    ebp
c00079f7:	c3                   	ret    
c00079f8:	a1 f4 31 02 c0       	mov    eax,ds:0xc00231f4
c00079fd:	eb f1                	jmp    c00079f0 <sbrk+0x68>
c00079ff:	83 ec 08             	sub    esp,0x8
c0007a02:	50                   	push   eax
c0007a03:	68 18 09 02 c0       	push   0xc0020918
c0007a08:	e8 38 2f 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0007a0d:	83 c4 10             	add    esp,0x10
c0007a10:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007a15:	eb d9                	jmp    c00079f0 <sbrk+0x68>
c0007a17:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0007a1d:	eb 8d                	jmp    c00079ac <sbrk+0x24>

c0007a1f <mmap>:
c0007a1f:	83 ec 18             	sub    esp,0x18
c0007a22:	68 48 09 02 c0       	push   0xc0020948
c0007a27:	e8 4d 99 00 00       	call   c0011379 <KePanic(char const*)>
c0007a2c:	b8 00 00 00 00       	mov    eax,0x0
c0007a31:	83 c4 1c             	add    esp,0x1c
c0007a34:	c3                   	ret    

c0007a35 <munmap>:
c0007a35:	83 ec 18             	sub    esp,0x18
c0007a38:	68 4d 09 02 c0       	push   0xc002094d
c0007a3d:	e8 37 99 00 00       	call   c0011379 <KePanic(char const*)>
c0007a42:	b8 00 00 00 00       	mov    eax,0x0
c0007a47:	83 c4 1c             	add    esp,0x1c
c0007a4a:	c3                   	ret    

c0007a4b <liballoc_lock()>:
c0007a4b:	fa                   	cli    
c0007a4c:	83 05 c8 96 02 c0 01 	add    DWORD PTR ds:0xc00296c8,0x1
c0007a53:	b8 00 00 00 00       	mov    eax,0x0
c0007a58:	c3                   	ret    

c0007a59 <liballoc_unlock()>:
c0007a59:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0007a5e:	83 e8 01             	sub    eax,0x1
c0007a61:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0007a66:	75 01                	jne    c0007a69 <liballoc_unlock()+0x10>
c0007a68:	fb                   	sti    
c0007a69:	b8 00 00 00 00       	mov    eax,0x0
c0007a6e:	c3                   	ret    

c0007a6f <liballoc_alloc(int)>:
c0007a6f:	83 ec 10             	sub    esp,0x10
c0007a72:	6a 01                	push   0x1
c0007a74:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a78:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0007a7e:	e8 a1 23 00 00       	call   c0009e24 <VAS::allocatePages(int, int)>
c0007a83:	83 c4 1c             	add    esp,0x1c
c0007a86:	c3                   	ret    

c0007a87 <liballoc_free(void*, int)>:
c0007a87:	83 ec 14             	sub    esp,0x14
c0007a8a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a8e:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0007a94:	e8 cf 1f 00 00       	call   c0009a68 <VAS::freeAllocatedPages(unsigned long)>
c0007a99:	b8 00 00 00 00       	mov    eax,0x0
c0007a9e:	83 c4 1c             	add    esp,0x1c
c0007aa1:	c3                   	ret    

c0007aa2 <realloc>:
c0007aa2:	83 ec 14             	sub    esp,0x14
c0007aa5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aa9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aad:	e8 36 9b ff ff       	call   c00015e8 <dlrealloc>
c0007ab2:	83 c4 1c             	add    esp,0x1c
c0007ab5:	c3                   	ret    

c0007ab6 <malloc>:
c0007ab6:	83 ec 18             	sub    esp,0x18
c0007ab9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007abd:	e8 e9 95 ff ff       	call   c00010ab <dlmalloc>
c0007ac2:	83 c4 1c             	add    esp,0x1c
c0007ac5:	c3                   	ret    

c0007ac6 <free>:
c0007ac6:	83 ec 18             	sub    esp,0x18
c0007ac9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007acd:	e8 81 92 ff ff       	call   c0000d53 <dlfree>
c0007ad2:	83 c4 1c             	add    esp,0x1c
c0007ad5:	c3                   	ret    

c0007ad6 <rfree>:
c0007ad6:	83 ec 18             	sub    esp,0x18
c0007ad9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007add:	e8 71 92 ff ff       	call   c0000d53 <dlfree>
c0007ae2:	83 c4 1c             	add    esp,0x1c
c0007ae5:	c3                   	ret    

c0007ae6 <calloc>:
c0007ae6:	56                   	push   esi
c0007ae7:	53                   	push   ebx
c0007ae8:	83 ec 10             	sub    esp,0x10
c0007aeb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007aef:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007af4:	53                   	push   ebx
c0007af5:	e8 bc ff ff ff       	call   c0007ab6 <malloc>
c0007afa:	89 c6                	mov    esi,eax
c0007afc:	83 c4 0c             	add    esp,0xc
c0007aff:	53                   	push   ebx
c0007b00:	6a 00                	push   0x0
c0007b02:	50                   	push   eax
c0007b03:	e8 e8 89 ff ff       	call   c00004f0 <memset>
c0007b08:	89 f0                	mov    eax,esi
c0007b0a:	83 c4 14             	add    esp,0x14
c0007b0d:	5b                   	pop    ebx
c0007b0e:	5e                   	pop    esi
c0007b0f:	c3                   	ret    

c0007b10 <KeEntryPoint>:
c0007b10:	57                   	push   edi
c0007b11:	bf f9 03 00 00       	mov    edi,0x3f9
c0007b16:	56                   	push   esi
c0007b17:	89 fa                	mov    edx,edi
c0007b19:	53                   	push   ebx
c0007b1a:	31 f6                	xor    esi,esi
c0007b1c:	83 ec 2c             	sub    esp,0x2c
c0007b1f:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007b24:	a3 d0 5e 02 c0       	mov    ds:0xc0025ed0,eax
c0007b29:	89 f0                	mov    eax,esi
c0007b2b:	ee                   	out    dx,al
c0007b2c:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007b31:	b0 80                	mov    al,0x80
c0007b33:	89 da                	mov    edx,ebx
c0007b35:	ee                   	out    dx,al
c0007b36:	b1 03                	mov    cl,0x3
c0007b38:	ba f8 03 00 00       	mov    edx,0x3f8
c0007b3d:	88 c8                	mov    al,cl
c0007b3f:	ee                   	out    dx,al
c0007b40:	89 f0                	mov    eax,esi
c0007b42:	89 fa                	mov    edx,edi
c0007b44:	ee                   	out    dx,al
c0007b45:	88 c8                	mov    al,cl
c0007b47:	89 da                	mov    edx,ebx
c0007b49:	ee                   	out    dx,al
c0007b4a:	b0 c7                	mov    al,0xc7
c0007b4c:	ba fa 03 00 00       	mov    edx,0x3fa
c0007b51:	ee                   	out    dx,al
c0007b52:	b0 0b                	mov    al,0xb
c0007b54:	ba fc 03 00 00       	mov    edx,0x3fc
c0007b59:	ee                   	out    dx,al
c0007b5a:	68 54 09 02 c0       	push   0xc0020954
c0007b5f:	e8 e1 2d 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0007b64:	e8 be 90 00 00       	call   c0010c27 <KeDisplaySplashScreen()>
c0007b69:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007b6e:	05 ff 0f 00 00       	add    eax,0xfff
c0007b73:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007b78:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b7b:	e8 ad 03 00 00       	call   c0007f2d <Phys::physicalMemorySetup(unsigned int)>
c0007b80:	e8 66 1c 00 00       	call   c00097eb <Virt::virtualMemorySetup()>
c0007b85:	e8 e7 8f 00 00       	call   c0010b71 <KeInitialiseAtexit()>
c0007b8a:	58                   	pop    eax
c0007b8b:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007b8f:	53                   	push   ebx
c0007b90:	e8 53 1f 00 00       	call   c0009ae8 <VAS::VAS()>
c0007b95:	89 1d b0 5f 02 c0    	mov    DWORD PTR ds:0xc0025fb0,ebx
c0007b9b:	e8 2a 7a 01 00       	call   c001f5ca <_init>
c0007ba0:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007ba7:	e8 0a ff ff ff       	call   c0007ab6 <malloc>
c0007bac:	89 04 24             	mov    DWORD PTR [esp],eax
c0007baf:	89 c6                	mov    esi,eax
c0007bb1:	e8 30 f2 ff ff       	call   c0006de6 <Computer::Computer()>
c0007bb6:	53                   	push   ebx
c0007bb7:	89 35 b8 5e 02 c0    	mov    DWORD PTR ds:0xc0025eb8,esi
c0007bbd:	6a 00                	push   0x0
c0007bbf:	6a 00                	push   0x0
c0007bc1:	56                   	push   esi
c0007bc2:	e8 e7 f5 ff ff       	call   c00071ae <Computer::open(int, int, void*)>
c0007bc7:	83 c4 14             	add    esp,0x14
c0007bca:	53                   	push   ebx
c0007bcb:	e8 e2 1f 00 00       	call   c0009bb2 <VAS::~VAS()>
c0007bd0:	83 c4 30             	add    esp,0x30
c0007bd3:	5b                   	pop    ebx
c0007bd4:	5e                   	pop    esi
c0007bd5:	5f                   	pop    edi
c0007bd6:	c3                   	ret    

c0007bd7 <Phys::allocateDMA(unsigned long)>:
c0007bd7:	55                   	push   ebp
c0007bd8:	31 ed                	xor    ebp,ebp
c0007bda:	57                   	push   edi
c0007bdb:	56                   	push   esi
c0007bdc:	53                   	push   ebx
c0007bdd:	31 db                	xor    ebx,ebx
c0007bdf:	83 ec 1c             	sub    esp,0x1c
c0007be2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007be6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0007bee:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0007bf4:	31 c0                	xor    eax,eax
c0007bf6:	c1 ef 0c             	shr    edi,0xc
c0007bf9:	eb 1b                	jmp    c0007c16 <Phys::allocateDMA(unsigned long)+0x3f>
c0007bfb:	85 c0                	test   eax,eax
c0007bfd:	75 06                	jne    c0007c05 <Phys::allocateDMA(unsigned long)+0x2e>
c0007bff:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007c03:	89 dd                	mov    ebp,ebx
c0007c05:	8d 70 01             	lea    esi,[eax+0x1]
c0007c08:	39 f7                	cmp    edi,esi
c0007c0a:	74 37                	je     c0007c43 <Phys::allocateDMA(unsigned long)+0x6c>
c0007c0c:	89 f0                	mov    eax,esi
c0007c0e:	83 c3 01             	add    ebx,0x1
c0007c11:	83 fb 0f             	cmp    ebx,0xf
c0007c14:	7f 13                	jg     c0007c29 <Phys::allocateDMA(unsigned long)+0x52>
c0007c16:	80 bb ec 5e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffda114],0x0
c0007c1d:	74 dc                	je     c0007bfb <Phys::allocateDMA(unsigned long)+0x24>
c0007c1f:	31 c0                	xor    eax,eax
c0007c21:	83 c3 01             	add    ebx,0x1
c0007c24:	83 fb 0f             	cmp    ebx,0xf
c0007c27:	7e ed                	jle    c0007c16 <Phys::allocateDMA(unsigned long)+0x3f>
c0007c29:	83 ec 0c             	sub    esp,0xc
c0007c2c:	68 6c 09 02 c0       	push   0xc002096c
c0007c31:	e8 43 97 00 00       	call   c0011379 <KePanic(char const*)>
c0007c36:	83 c4 10             	add    esp,0x10
c0007c39:	31 c0                	xor    eax,eax
c0007c3b:	83 c4 1c             	add    esp,0x1c
c0007c3e:	5b                   	pop    ebx
c0007c3f:	5e                   	pop    esi
c0007c40:	5f                   	pop    edi
c0007c41:	5d                   	pop    ebp
c0007c42:	c3                   	ret    
c0007c43:	89 e9                	mov    ecx,ebp
c0007c45:	c1 f9 04             	sar    ecx,0x4
c0007c48:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007c4c:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0007c50:	89 ca                	mov    edx,ecx
c0007c52:	83 ea 01             	sub    edx,0x1
c0007c55:	79 03                	jns    c0007c5a <Phys::allocateDMA(unsigned long)+0x83>
c0007c57:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007c5a:	c1 fa 04             	sar    edx,0x4
c0007c5d:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0007c61:	74 08                	je     c0007c6b <Phys::allocateDMA(unsigned long)+0x94>
c0007c63:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007c67:	31 c0                	xor    eax,eax
c0007c69:	eb b6                	jmp    c0007c21 <Phys::allocateDMA(unsigned long)+0x4a>
c0007c6b:	85 f6                	test   esi,esi
c0007c6d:	74 17                	je     c0007c86 <Phys::allocateDMA(unsigned long)+0xaf>
c0007c6f:	8d 95 ec 5e 02 c0    	lea    edx,[ebp-0x3ffda114]
c0007c75:	8d 84 05 ed 5e 02 c0 	lea    eax,[ebp+eax*1-0x3ffda113]
c0007c7c:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007c7f:	83 c2 01             	add    edx,0x1
c0007c82:	39 d0                	cmp    eax,edx
c0007c84:	75 f6                	jne    c0007c7c <Phys::allocateDMA(unsigned long)+0xa5>
c0007c86:	a1 e4 5e 02 c0       	mov    eax,ds:0xc0025ee4
c0007c8b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007c8f:	01 f8                	add    eax,edi
c0007c91:	85 d2                	test   edx,edx
c0007c93:	a3 e4 5e 02 c0       	mov    ds:0xc0025ee4,eax
c0007c98:	74 17                	je     c0007cb1 <Phys::allocateDMA(unsigned long)+0xda>
c0007c9a:	83 ec 0c             	sub    esp,0xc
c0007c9d:	68 6c 09 02 c0       	push   0xc002096c
c0007ca2:	e8 d2 96 00 00       	call   c0011379 <KePanic(char const*)>
c0007ca7:	83 c4 10             	add    esp,0x10
c0007caa:	89 f0                	mov    eax,esi
c0007cac:	e9 5d ff ff ff       	jmp    c0007c0e <Phys::allocateDMA(unsigned long)+0x37>
c0007cb1:	c1 e5 0c             	shl    ebp,0xc
c0007cb4:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0007cba:	e9 7c ff ff ff       	jmp    c0007c3b <Phys::allocateDMA(unsigned long)+0x64>

c0007cbf <Phys::freeDMA(unsigned long, unsigned long)>:
c0007cbf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cc3:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007cc9:	a1 e4 5e 02 c0       	mov    eax,ds:0xc0025ee4
c0007cce:	c1 ea 0c             	shr    edx,0xc
c0007cd1:	29 d0                	sub    eax,edx
c0007cd3:	a3 e4 5e 02 c0       	mov    ds:0xc0025ee4,eax
c0007cd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cdc:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007ce1:	c1 e8 0c             	shr    eax,0xc
c0007ce4:	85 d2                	test   edx,edx
c0007ce6:	74 11                	je     c0007cf9 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0007ce8:	05 ec 5e 02 c0       	add    eax,0xc0025eec
c0007ced:	01 c2                	add    edx,eax
c0007cef:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007cf2:	83 c0 01             	add    eax,0x1
c0007cf5:	39 d0                	cmp    eax,edx
c0007cf7:	75 f6                	jne    c0007cef <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0007cf9:	c3                   	ret    

c0007cfa <Phys::setPageState(unsigned long, bool)>:
c0007cfa:	57                   	push   edi
c0007cfb:	56                   	push   esi
c0007cfc:	8b 35 f8 31 02 c0    	mov    esi,DWORD PTR ds:0xc00231f8
c0007d02:	53                   	push   ebx
c0007d03:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0007d08:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d0c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007d10:	0f b6 c0             	movzx  eax,al
c0007d13:	89 ca                	mov    edx,ecx
c0007d15:	83 e1 07             	and    ecx,0x7
c0007d18:	c1 ea 03             	shr    edx,0x3
c0007d1b:	d3 c3                	rol    ebx,cl
c0007d1d:	01 d6                	add    esi,edx
c0007d1f:	d3 e0                	shl    eax,cl
c0007d21:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0007d24:	21 fb                	and    ebx,edi
c0007d26:	88 1e                	mov    BYTE PTR [esi],bl
c0007d28:	8b 1d f8 31 02 c0    	mov    ebx,DWORD PTR ds:0xc00231f8
c0007d2e:	01 da                	add    edx,ebx
c0007d30:	8a 0a                	mov    cl,BYTE PTR [edx]
c0007d32:	09 c8                	or     eax,ecx
c0007d34:	88 02                	mov    BYTE PTR [edx],al
c0007d36:	5b                   	pop    ebx
c0007d37:	5e                   	pop    esi
c0007d38:	5f                   	pop    edi
c0007d39:	c3                   	ret    

c0007d3a <Phys::getPageState(unsigned long)>:
c0007d3a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007d3e:	8b 15 f8 31 02 c0    	mov    edx,DWORD PTR ds:0xc00231f8
c0007d44:	89 c8                	mov    eax,ecx
c0007d46:	83 e1 07             	and    ecx,0x7
c0007d49:	c1 e8 03             	shr    eax,0x3
c0007d4c:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0007d50:	d3 f8                	sar    eax,cl
c0007d52:	83 e0 01             	and    eax,0x1
c0007d55:	c3                   	ret    

c0007d56 <Phys::freePage(unsigned long)>:
c0007d56:	53                   	push   ebx
c0007d57:	83 ec 08             	sub    esp,0x8
c0007d5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d5e:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007d64:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007d6a:	76 41                	jbe    c0007dad <Phys::freePage(unsigned long)+0x57>
c0007d6c:	c1 e8 0c             	shr    eax,0xc
c0007d6f:	50                   	push   eax
c0007d70:	89 c3                	mov    ebx,eax
c0007d72:	e8 c3 ff ff ff       	call   c0007d3a <Phys::getPageState(unsigned long)>
c0007d77:	5a                   	pop    edx
c0007d78:	84 c0                	test   al,al
c0007d7a:	74 20                	je     c0007d9c <Phys::freePage(unsigned long)+0x46>
c0007d7c:	83 ec 08             	sub    esp,0x8
c0007d7f:	a1 e4 5e 02 c0       	mov    eax,ds:0xc0025ee4
c0007d84:	6a 00                	push   0x0
c0007d86:	83 e8 01             	sub    eax,0x1
c0007d89:	53                   	push   ebx
c0007d8a:	a3 e4 5e 02 c0       	mov    ds:0xc0025ee4,eax
c0007d8f:	e8 66 ff ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007d94:	83 c4 10             	add    esp,0x10
c0007d97:	83 c4 08             	add    esp,0x8
c0007d9a:	5b                   	pop    ebx
c0007d9b:	c3                   	ret    
c0007d9c:	c7 44 24 10 11 0a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020a11
c0007da4:	83 c4 08             	add    esp,0x8
c0007da7:	5b                   	pop    ebx
c0007da8:	e9 cc 95 00 00       	jmp    c0011379 <KePanic(char const*)>
c0007dad:	68 00 10 00 00       	push   0x1000
c0007db2:	50                   	push   eax
c0007db3:	e8 07 ff ff ff       	call   c0007cbf <Phys::freeDMA(unsigned long, unsigned long)>
c0007db8:	59                   	pop    ecx
c0007db9:	5b                   	pop    ebx
c0007dba:	83 c4 08             	add    esp,0x8
c0007dbd:	5b                   	pop    ebx
c0007dbe:	c3                   	ret    

c0007dbf <Phys::allocatePage()>:
c0007dbf:	56                   	push   esi
c0007dc0:	53                   	push   ebx
c0007dc1:	83 ec 14             	sub    esp,0x14
c0007dc4:	8b 35 d8 5e 02 c0    	mov    esi,DWORD PTR ds:0xc0025ed8
c0007dca:	89 f3                	mov    ebx,esi
c0007dcc:	eb 0a                	jmp    c0007dd8 <Phys::allocatePage()+0x19>
c0007dce:	89 1d d8 5e 02 c0    	mov    DWORD PTR ds:0xc0025ed8,ebx
c0007dd4:	39 de                	cmp    esi,ebx
c0007dd6:	74 26                	je     c0007dfe <Phys::allocatePage()+0x3f>
c0007dd8:	53                   	push   ebx
c0007dd9:	e8 5c ff ff ff       	call   c0007d3a <Phys::getPageState(unsigned long)>
c0007dde:	5a                   	pop    edx
c0007ddf:	84 c0                	test   al,al
c0007de1:	74 67                	je     c0007e4a <Phys::allocatePage()+0x8b>
c0007de3:	83 c3 01             	add    ebx,0x1
c0007de6:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007dec:	75 e0                	jne    c0007dce <Phys::allocatePage()+0xf>
c0007dee:	31 db                	xor    ebx,ebx
c0007df0:	c7 05 d8 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025ed8,0x0
c0007dfa:	39 de                	cmp    esi,ebx
c0007dfc:	75 da                	jne    c0007dd8 <Phys::allocatePage()+0x19>
c0007dfe:	83 ec 0c             	sub    esp,0xc
c0007e01:	a0 fc 5e 02 c0       	mov    al,ds:0xc0025efc
c0007e06:	83 f0 01             	xor    eax,0x1
c0007e09:	a2 fc 5e 02 c0       	mov    ds:0xc0025efc,al
c0007e0e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007e13:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007e16:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007e1c:	50                   	push   eax
c0007e1d:	e8 a8 27 00 00       	call   c000a5ca <VAS::scanForEviction()>
c0007e22:	83 c4 10             	add    esp,0x10
c0007e25:	85 c0                	test   eax,eax
c0007e27:	75 48                	jne    c0007e71 <Phys::allocatePage()+0xb2>
c0007e29:	83 ec 0c             	sub    esp,0xc
c0007e2c:	68 94 09 02 c0       	push   0xc0020994
c0007e31:	e8 43 95 00 00       	call   c0011379 <KePanic(char const*)>
c0007e36:	83 c4 10             	add    esp,0x10
c0007e39:	8b 1d d8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025ed8
c0007e3f:	53                   	push   ebx
c0007e40:	e8 f5 fe ff ff       	call   c0007d3a <Phys::getPageState(unsigned long)>
c0007e45:	5a                   	pop    edx
c0007e46:	84 c0                	test   al,al
c0007e48:	75 99                	jne    c0007de3 <Phys::allocatePage()+0x24>
c0007e4a:	6a 01                	push   0x1
c0007e4c:	53                   	push   ebx
c0007e4d:	e8 a8 fe ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007e52:	8b 15 e4 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025ee4
c0007e58:	a1 d8 5e 02 c0       	mov    eax,ds:0xc0025ed8
c0007e5d:	83 c2 01             	add    edx,0x1
c0007e60:	59                   	pop    ecx
c0007e61:	89 15 e4 5e 02 c0    	mov    DWORD PTR ds:0xc0025ee4,edx
c0007e67:	c1 e0 0c             	shl    eax,0xc
c0007e6a:	5b                   	pop    ebx
c0007e6b:	83 c4 14             	add    esp,0x14
c0007e6e:	5b                   	pop    ebx
c0007e6f:	5e                   	pop    esi
c0007e70:	c3                   	ret    
c0007e71:	83 ec 08             	sub    esp,0x8
c0007e74:	89 c2                	mov    edx,eax
c0007e76:	6a 01                	push   0x1
c0007e78:	c1 ea 0c             	shr    edx,0xc
c0007e7b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007e7f:	52                   	push   edx
c0007e80:	e8 75 fe ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007e85:	83 c4 10             	add    esp,0x10
c0007e88:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007e8c:	eb dd                	jmp    c0007e6b <Phys::allocatePage()+0xac>

c0007e8e <Phys::allocateContiguousPages(int)>:
c0007e8e:	57                   	push   edi
c0007e8f:	56                   	push   esi
c0007e90:	53                   	push   ebx
c0007e91:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007e95:	fa                   	cli    
c0007e96:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0007e9b:	31 db                	xor    ebx,ebx
c0007e9d:	83 c0 01             	add    eax,0x1
c0007ea0:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0007ea5:	85 db                	test   ebx,ebx
c0007ea7:	75 11                	jne    c0007eba <Phys::allocateContiguousPages(int)+0x2c>
c0007ea9:	e8 11 ff ff ff       	call   c0007dbf <Phys::allocatePage()>
c0007eae:	83 fe 01             	cmp    esi,0x1
c0007eb1:	89 c7                	mov    edi,eax
c0007eb3:	74 21                	je     c0007ed6 <Phys::allocateContiguousPages(int)+0x48>
c0007eb5:	bb 01 00 00 00       	mov    ebx,0x1
c0007eba:	e8 00 ff ff ff       	call   c0007dbf <Phys::allocatePage()>
c0007ebf:	89 da                	mov    edx,ebx
c0007ec1:	c1 e2 0c             	shl    edx,0xc
c0007ec4:	01 fa                	add    edx,edi
c0007ec6:	39 c2                	cmp    edx,eax
c0007ec8:	74 22                	je     c0007eec <Phys::allocateContiguousPages(int)+0x5e>
c0007eca:	bb 01 00 00 00       	mov    ebx,0x1
c0007ecf:	89 c7                	mov    edi,eax
c0007ed1:	83 fe 01             	cmp    esi,0x1
c0007ed4:	75 e4                	jne    c0007eba <Phys::allocateContiguousPages(int)+0x2c>
c0007ed6:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0007edb:	83 e8 01             	sub    eax,0x1
c0007ede:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0007ee3:	75 01                	jne    c0007ee6 <Phys::allocateContiguousPages(int)+0x58>
c0007ee5:	fb                   	sti    
c0007ee6:	89 f8                	mov    eax,edi
c0007ee8:	5b                   	pop    ebx
c0007ee9:	5e                   	pop    esi
c0007eea:	5f                   	pop    edi
c0007eeb:	c3                   	ret    
c0007eec:	83 c3 01             	add    ebx,0x1
c0007eef:	39 f3                	cmp    ebx,esi
c0007ef1:	75 b2                	jne    c0007ea5 <Phys::allocateContiguousPages(int)+0x17>
c0007ef3:	eb e1                	jmp    c0007ed6 <Phys::allocateContiguousPages(int)+0x48>

c0007ef5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007ef5:	56                   	push   esi
c0007ef6:	53                   	push   ebx
c0007ef7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007efb:	39 1d dc 5e 02 c0    	cmp    DWORD PTR ds:0xc0025edc,ebx
c0007f01:	73 06                	jae    c0007f09 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007f03:	89 1d dc 5e 02 c0    	mov    DWORD PTR ds:0xc0025edc,ebx
c0007f09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f0d:	c1 eb 0c             	shr    ebx,0xc
c0007f10:	c1 e8 0c             	shr    eax,0xc
c0007f13:	39 d8                	cmp    eax,ebx
c0007f15:	73 13                	jae    c0007f2a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007f17:	6a 00                	push   0x0
c0007f19:	8d 70 01             	lea    esi,[eax+0x1]
c0007f1c:	50                   	push   eax
c0007f1d:	e8 d8 fd ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007f22:	5a                   	pop    edx
c0007f23:	89 f0                	mov    eax,esi
c0007f25:	59                   	pop    ecx
c0007f26:	39 f3                	cmp    ebx,esi
c0007f28:	75 ed                	jne    c0007f17 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007f2a:	5b                   	pop    ebx
c0007f2b:	5e                   	pop    esi
c0007f2c:	c3                   	ret    

c0007f2d <Phys::physicalMemorySetup(unsigned int)>:
c0007f2d:	55                   	push   ebp
c0007f2e:	57                   	push   edi
c0007f2f:	56                   	push   esi
c0007f30:	53                   	push   ebx
c0007f31:	83 ec 40             	sub    esp,0x40
c0007f34:	6a 10                	push   0x10
c0007f36:	6a 00                	push   0x0
c0007f38:	68 ec 5e 02 c0       	push   0xc0025eec
c0007f3d:	e8 ae 85 ff ff       	call   c00004f0 <memset>
c0007f42:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007f46:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007f4b:	05 00 10 00 00       	add    eax,0x1000
c0007f50:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007f54:	5b                   	pop    ebx
c0007f55:	31 db                	xor    ebx,ebx
c0007f57:	5e                   	pop    esi
c0007f58:	50                   	push   eax
c0007f59:	68 27 0a 02 c0       	push   0xc0020a27
c0007f5e:	e8 e2 29 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0007f63:	83 c4 10             	add    esp,0x10
c0007f66:	83 ec 08             	sub    esp,0x8
c0007f69:	6a 01                	push   0x1
c0007f6b:	53                   	push   ebx
c0007f6c:	83 c3 01             	add    ebx,0x1
c0007f6f:	e8 86 fd ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007f74:	83 c4 10             	add    esp,0x10
c0007f77:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007f7d:	75 e7                	jne    c0007f66 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007f7f:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c0007f86:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c0007f8d:	c1 e0 08             	shl    eax,0x8
c0007f90:	09 c2                	or     edx,eax
c0007f92:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0007f96:	0f 84 98 01 00 00    	je     c0008134 <Phys::physicalMemorySetup(unsigned int)+0x207>
c0007f9c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007fa0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007fa8:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007fad:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007fb1:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007fb9:	eb 1c                	jmp    c0007fd7 <Phys::physicalMemorySetup(unsigned int)+0xaa>
c0007fbb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0007fbf:	83 c3 18             	add    ebx,0x18
c0007fc2:	83 c6 01             	add    esi,0x1
c0007fc5:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0007fc9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007fcd:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0007fd1:	0f 84 6d 01 00 00    	je     c0008144 <Phys::physicalMemorySetup(unsigned int)+0x217>
c0007fd7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0007fda:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007fdd:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0007fe0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007fe4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007fe8:	8b 33                	mov    esi,DWORD PTR [ebx]
c0007fea:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0007fed:	01 f0                	add    eax,esi
c0007fef:	55                   	push   ebp
c0007ff0:	11 fa                	adc    edx,edi
c0007ff2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007ff6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0007ffa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007ffe:	51                   	push   ecx
c0007fff:	56                   	push   esi
c0008000:	68 c4 09 02 c0       	push   0xc00209c4
c0008005:	e8 3b 29 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000800a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000800e:	83 c4 10             	add    esp,0x10
c0008011:	09 f8                	or     eax,edi
c0008013:	0f 85 2b 01 00 00    	jne    c0008144 <Phys::physicalMemorySetup(unsigned int)+0x217>
c0008019:	83 fd 01             	cmp    ebp,0x1
c000801c:	75 9d                	jne    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c000801e:	ba 00 00 08 00       	mov    edx,0x80000
c0008023:	89 c1                	mov    ecx,eax
c0008025:	39 f2                	cmp    edx,esi
c0008027:	19 f9                	sbb    ecx,edi
c0008029:	0f 82 ab 00 00 00    	jb     c00080da <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c000802f:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0008033:	89 c1                	mov    ecx,eax
c0008035:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0008039:	0f 83 9b 00 00 00    	jae    c00080da <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c000803f:	ba 00 00 0a 00       	mov    edx,0xa0000
c0008044:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008048:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000804c:	39 fa                	cmp    edx,edi
c000804e:	19 e8                	sbb    eax,ebp
c0008050:	0f 82 b0 01 00 00    	jb     c0008206 <Phys::physicalMemorySetup(unsigned int)+0x2d9>
c0008056:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000805a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000805e:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0008064:	ba ff 1f 00 00       	mov    edx,0x1fff
c0008069:	83 d5 ff             	adc    ebp,0xffffffff
c000806c:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0008070:	31 c0                	xor    eax,eax
c0008072:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0008076:	39 fa                	cmp    edx,edi
c0008078:	89 c1                	mov    ecx,eax
c000807a:	19 e9                	sbb    ecx,ebp
c000807c:	0f 83 39 ff ff ff    	jae    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0008082:	be 00 00 08 00       	mov    esi,0x80000
c0008087:	83 ec 04             	sub    esp,0x4
c000808a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000808e:	57                   	push   edi
c000808f:	56                   	push   esi
c0008090:	68 e8 09 02 c0       	push   0xc00209e8
c0008095:	e8 ab 28 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000809a:	5d                   	pop    ebp
c000809b:	58                   	pop    eax
c000809c:	57                   	push   edi
c000809d:	56                   	push   esi
c000809e:	e8 52 fe ff ff       	call   c0007ef5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00080a3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00080a7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00080ab:	83 c4 0c             	add    esp,0xc
c00080ae:	0f ac d0 0c          	shrd   eax,edx,0xc
c00080b2:	8b 15 e8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025ee8
c00080b8:	01 d0                	add    eax,edx
c00080ba:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00080c1:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c00080c6:	52                   	push   edx
c00080c7:	50                   	push   eax
c00080c8:	68 4d 0a 02 c0       	push   0xc0020a4d
c00080cd:	e8 73 28 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00080d2:	83 c4 10             	add    esp,0x10
c00080d5:	e9 e1 fe ff ff       	jmp    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00080da:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00080de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00080e2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00080e6:	39 ea                	cmp    edx,ebp
c00080e8:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c00080ec:	0f 82 c9 fe ff ff    	jb     c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00080f2:	ba ff 1f 00 00       	mov    edx,0x1fff
c00080f7:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00080fb:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c00080ff:	0f 83 b6 fe ff ff    	jae    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0008105:	39 ee                	cmp    esi,ebp
c0008107:	89 f8                	mov    eax,edi
c0008109:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000810d:	0f 83 74 ff ff ff    	jae    c0008087 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0008113:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008117:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000811b:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000811f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008123:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0008127:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000812b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000812f:	e9 53 ff ff ff       	jmp    c0008087 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0008134:	83 ec 0c             	sub    esp,0xc
c0008137:	68 3f 0a 02 c0       	push   0xc0020a3f
c000813c:	e8 38 92 00 00       	call   c0011379 <KePanic(char const*)>
c0008141:	83 c4 10             	add    esp,0x10
c0008144:	83 ec 08             	sub    esp,0x8
c0008147:	bb 60 00 00 00       	mov    ebx,0x60
c000814c:	6a 00                	push   0x0
c000814e:	6a 06                	push   0x6
c0008150:	e8 a5 fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0008155:	58                   	pop    eax
c0008156:	5a                   	pop    edx
c0008157:	6a 00                	push   0x0
c0008159:	6a 07                	push   0x7
c000815b:	e8 9a fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0008160:	8b 0d e8 5e 02 c0    	mov    ecx,DWORD PTR ds:0xc0025ee8
c0008166:	83 c4 10             	add    esp,0x10
c0008169:	83 c1 02             	add    ecx,0x2
c000816c:	89 0d e8 5e 02 c0    	mov    DWORD PTR ds:0xc0025ee8,ecx
c0008172:	83 ec 08             	sub    esp,0x8
c0008175:	6a 00                	push   0x0
c0008177:	53                   	push   ebx
c0008178:	83 c3 01             	add    ebx,0x1
c000817b:	e8 7a fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0008180:	83 c4 10             	add    esp,0x10
c0008183:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0008189:	75 e7                	jne    c0008172 <Phys::physicalMemorySetup(unsigned int)+0x245>
c000818b:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c0008190:	bb 40 01 00 00       	mov    ebx,0x140
c0008195:	83 c0 20             	add    eax,0x20
c0008198:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c000819d:	eb 26                	jmp    c00081c5 <Phys::physicalMemorySetup(unsigned int)+0x298>
c000819f:	83 ec 08             	sub    esp,0x8
c00081a2:	6a 00                	push   0x0
c00081a4:	53                   	push   ebx
c00081a5:	83 c3 01             	add    ebx,0x1
c00081a8:	e8 4d fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c00081ad:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c00081b2:	83 c4 10             	add    esp,0x10
c00081b5:	83 c0 01             	add    eax,0x1
c00081b8:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c00081be:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c00081c3:	74 07                	je     c00081cc <Phys::physicalMemorySetup(unsigned int)+0x29f>
c00081c5:	3d ff 03 00 00       	cmp    eax,0x3ff
c00081ca:	7e d3                	jle    c000819f <Phys::physicalMemorySetup(unsigned int)+0x272>
c00081cc:	bb d0 01 00 00       	mov    ebx,0x1d0
c00081d1:	3d ff 07 00 00       	cmp    eax,0x7ff
c00081d6:	7f 26                	jg     c00081fe <Phys::physicalMemorySetup(unsigned int)+0x2d1>
c00081d8:	83 ec 08             	sub    esp,0x8
c00081db:	6a 00                	push   0x0
c00081dd:	53                   	push   ebx
c00081de:	83 c3 01             	add    ebx,0x1
c00081e1:	e8 14 fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c00081e6:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c00081eb:	83 c4 10             	add    esp,0x10
c00081ee:	83 c0 01             	add    eax,0x1
c00081f1:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c00081f7:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c00081fc:	75 d3                	jne    c00081d1 <Phys::physicalMemorySetup(unsigned int)+0x2a4>
c00081fe:	83 c4 3c             	add    esp,0x3c
c0008201:	5b                   	pop    ebx
c0008202:	5e                   	pop    esi
c0008203:	5f                   	pop    edi
c0008204:	5d                   	pop    ebp
c0008205:	c3                   	ret    
c0008206:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000820e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0008216:	e9 3b fe ff ff       	jmp    c0008056 <Phys::physicalMemorySetup(unsigned int)+0x129>
c000821b:	90                   	nop

c000821c <Pipe::isAtty()>:
c000821c:	31 c0                	xor    eax,eax
c000821e:	c3                   	ret    
c000821f:	90                   	nop

c0008220 <Pipe::~Pipe()>:
c0008220:	83 ec 0c             	sub    esp,0xc
c0008223:	ba ac 0a 02 c0       	mov    edx,0xc0020aac
c0008228:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000822c:	89 10                	mov    DWORD PTR [eax],edx
c000822e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008232:	83 ec 0c             	sub    esp,0xc
c0008235:	50                   	push   eax
c0008236:	e8 69 11 00 00       	call   c00093a4 <UnixFile::~UnixFile()>
c000823b:	83 c4 10             	add    esp,0x10
c000823e:	90                   	nop
c000823f:	83 c4 0c             	add    esp,0xc
c0008242:	c3                   	ret    
c0008243:	90                   	nop

c0008244 <Pipe::~Pipe()>:
c0008244:	83 ec 0c             	sub    esp,0xc
c0008247:	83 ec 0c             	sub    esp,0xc
c000824a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000824e:	e8 cd ff ff ff       	call   c0008220 <Pipe::~Pipe()>
c0008253:	83 c4 10             	add    esp,0x10
c0008256:	83 ec 08             	sub    esp,0x8
c0008259:	6a 20                	push   0x20
c000825b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000825f:	e8 b4 25 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c0008264:	83 c4 10             	add    esp,0x10
c0008267:	83 c4 0c             	add    esp,0xc
c000826a:	c3                   	ret    
c000826b:	90                   	nop

c000826c <Pipe::write(unsigned long long, void*, int*)>:
c000826c:	55                   	push   ebp
c000826d:	57                   	push   edi
c000826e:	56                   	push   esi
c000826f:	53                   	push   ebx
c0008270:	83 ec 1c             	sub    esp,0x1c
c0008273:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008277:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000827b:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000827e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008282:	89 04 24             	mov    DWORD PTR [esp],eax
c0008285:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008289:	89 d8                	mov    eax,ebx
c000828b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000828e:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0008292:	89 d6                	mov    esi,edx
c0008294:	89 d7                	mov    edi,edx
c0008296:	c1 ff 1f             	sar    edi,0x1f
c0008299:	03 34 24             	add    esi,DWORD PTR [esp]
c000829c:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00082a0:	c1 f8 1f             	sar    eax,0x1f
c00082a3:	39 f3                	cmp    ebx,esi
c00082a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00082a9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082ad:	19 f8                	sbb    eax,edi
c00082af:	b8 01 00 00 00       	mov    eax,0x1
c00082b4:	72 6e                	jb     c0008324 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c00082b6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00082b9:	01 d0                	add    eax,edx
c00082bb:	99                   	cdq    
c00082bc:	f7 fb                	idiv   ebx
c00082be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082c2:	29 d3                	sub    ebx,edx
c00082c4:	89 d7                	mov    edi,edx
c00082c6:	89 de                	mov    esi,ebx
c00082c8:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00082cb:	c1 fb 1f             	sar    ebx,0x1f
c00082ce:	39 f2                	cmp    edx,esi
c00082d0:	19 d8                	sbb    eax,ebx
c00082d2:	b8 00 00 00 00       	mov    eax,0x0
c00082d7:	72 04                	jb     c00082dd <Pipe::write(unsigned long long, void*, int*)+0x71>
c00082d9:	89 d0                	mov    eax,edx
c00082db:	29 f0                	sub    eax,esi
c00082dd:	89 d3                	mov    ebx,edx
c00082df:	29 c3                	sub    ebx,eax
c00082e1:	74 0b                	je     c00082ee <Pipe::write(unsigned long long, void*, int*)+0x82>
c00082e3:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c00082e6:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00082ea:	89 d9                	mov    ecx,ebx
c00082ec:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00082ee:	85 c0                	test   eax,eax
c00082f0:	74 0d                	je     c00082ff <Pipe::write(unsigned long long, void*, int*)+0x93>
c00082f2:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00082f6:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00082f9:	89 de                	mov    esi,ebx
c00082fb:	89 c1                	mov    ecx,eax
c00082fd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00082ff:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0008302:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008307:	75 10                	jne    c0008319 <Pipe::write(unsigned long long, void*, int*)+0xad>
c0008309:	83 ec 0c             	sub    esp,0xc
c000830c:	68 69 0a 02 c0       	push   0xc0020a69
c0008311:	e8 63 90 00 00       	call   c0011379 <KePanic(char const*)>
c0008316:	83 c4 10             	add    esp,0x10
c0008319:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000831d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008320:	89 08                	mov    DWORD PTR [eax],ecx
c0008322:	31 c0                	xor    eax,eax
c0008324:	83 c4 1c             	add    esp,0x1c
c0008327:	5b                   	pop    ebx
c0008328:	5e                   	pop    esi
c0008329:	5f                   	pop    edi
c000832a:	5d                   	pop    ebp
c000832b:	c3                   	ret    

c000832c <Pipe::read(unsigned long long, void*, int*)>:
c000832c:	55                   	push   ebp
c000832d:	57                   	push   edi
c000832e:	56                   	push   esi
c000832f:	53                   	push   ebx
c0008330:	83 ec 1c             	sub    esp,0x1c
c0008333:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008337:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000833b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000833f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0008342:	89 c8                	mov    eax,ecx
c0008344:	99                   	cdq    
c0008345:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0008349:	74 24                	je     c000836f <Pipe::read(unsigned long long, void*, int*)+0x43>
c000834b:	39 f9                	cmp    ecx,edi
c000834d:	89 d1                	mov    ecx,edx
c000834f:	19 f1                	sbb    ecx,esi
c0008351:	73 1c                	jae    c000836f <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008353:	fa                   	cli    
c0008354:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c000835a:	e8 dd d9 00 00       	call   c0015d3c <schedule()>
c000835f:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0008364:	48                   	dec    eax
c0008365:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000836a:	75 d3                	jne    c000833f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000836c:	fb                   	sti    
c000836d:	eb d0                	jmp    c000833f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000836f:	39 f8                	cmp    eax,edi
c0008371:	89 d1                	mov    ecx,edx
c0008373:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008376:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000837a:	19 f1                	sbb    ecx,esi
c000837c:	73 07                	jae    c0008385 <Pipe::read(unsigned long long, void*, int*)+0x59>
c000837e:	89 04 24             	mov    DWORD PTR [esp],eax
c0008381:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008385:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c0008388:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000838b:	29 f7                	sub    edi,esi
c000838d:	89 f8                	mov    eax,edi
c000838f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0008393:	99                   	cdq    
c0008394:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0008397:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000839b:	19 d0                	sbb    eax,edx
c000839d:	73 07                	jae    c00083a6 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000839f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00083a2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00083a6:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c00083a9:	89 ea                	mov    edx,ebp
c00083ab:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c00083af:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00083b4:	74 0d                	je     c00083c3 <Pipe::read(unsigned long long, void*, int*)+0x97>
c00083b6:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00083b9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00083bd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00083c1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083c3:	85 d2                	test   edx,edx
c00083c5:	74 11                	je     c00083d8 <Pipe::read(unsigned long long, void*, int*)+0xac>
c00083c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083cb:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00083ce:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00083d2:	89 d1                	mov    ecx,edx
c00083d4:	89 c7                	mov    edi,eax
c00083d6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083d8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00083db:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00083de:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00083e1:	99                   	cdq    
c00083e2:	89 f7                	mov    edi,esi
c00083e4:	03 04 24             	add    eax,DWORD PTR [esp]
c00083e7:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c00083eb:	c1 ff 1f             	sar    edi,0x1f
c00083ee:	57                   	push   edi
c00083ef:	56                   	push   esi
c00083f0:	52                   	push   edx
c00083f1:	50                   	push   eax
c00083f2:	e8 b9 70 01 00       	call   c001f4b0 <__umoddi3>
c00083f7:	83 c4 10             	add    esp,0x10
c00083fa:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00083fd:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008402:	75 10                	jne    c0008414 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c0008404:	83 ec 0c             	sub    esp,0xc
c0008407:	68 86 0a 02 c0       	push   0xc0020a86
c000840c:	e8 68 8f 00 00       	call   c0011379 <KePanic(char const*)>
c0008411:	83 c4 10             	add    esp,0x10
c0008414:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008418:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000841b:	89 10                	mov    DWORD PTR [eax],edx
c000841d:	83 c4 1c             	add    esp,0x1c
c0008420:	31 c0                	xor    eax,eax
c0008422:	5b                   	pop    ebx
c0008423:	5e                   	pop    esi
c0008424:	5f                   	pop    edi
c0008425:	5d                   	pop    ebp
c0008426:	c3                   	ret    
c0008427:	90                   	nop

c0008428 <Pipe::Pipe(int)>:
c0008428:	83 ec 0c             	sub    esp,0xc
c000842b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000842f:	83 ec 08             	sub    esp,0x8
c0008432:	6a 00                	push   0x0
c0008434:	50                   	push   eax
c0008435:	e8 84 0d 00 00       	call   c00091be <UnixFile::UnixFile(int)>
c000843a:	83 c4 10             	add    esp,0x10
c000843d:	ba ac 0a 02 c0       	mov    edx,0xc0020aac
c0008442:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008446:	89 10                	mov    DWORD PTR [eax],edx
c0008448:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000844c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008450:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008453:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008457:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000845e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008462:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0008469:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000846d:	83 ec 0c             	sub    esp,0xc
c0008470:	50                   	push   eax
c0008471:	e8 40 f6 ff ff       	call   c0007ab6 <malloc>
c0008476:	83 c4 10             	add    esp,0x10
c0008479:	89 c2                	mov    edx,eax
c000847b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000847f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008482:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008486:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000848a:	90                   	nop
c000848b:	83 c4 0c             	add    esp,0xc
c000848e:	c3                   	ret    
c000848f:	90                   	nop

c0008490 <VgaText::isAtty()>:
c0008490:	b0 01                	mov    al,0x1
c0008492:	c3                   	ret    
c0008493:	90                   	nop

c0008494 <VgaText::~VgaText()>:
c0008494:	83 ec 0c             	sub    esp,0xc
c0008497:	ba f4 0a 02 c0       	mov    edx,0xc0020af4
c000849c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084a0:	89 10                	mov    DWORD PTR [eax],edx
c00084a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084a6:	83 ec 0c             	sub    esp,0xc
c00084a9:	50                   	push   eax
c00084aa:	e8 f5 0e 00 00       	call   c00093a4 <UnixFile::~UnixFile()>
c00084af:	83 c4 10             	add    esp,0x10
c00084b2:	90                   	nop
c00084b3:	83 c4 0c             	add    esp,0xc
c00084b6:	c3                   	ret    
c00084b7:	90                   	nop

c00084b8 <VgaText::~VgaText()>:
c00084b8:	83 ec 0c             	sub    esp,0xc
c00084bb:	83 ec 0c             	sub    esp,0xc
c00084be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084c2:	e8 cd ff ff ff       	call   c0008494 <VgaText::~VgaText()>
c00084c7:	83 c4 10             	add    esp,0x10
c00084ca:	83 ec 08             	sub    esp,0x8
c00084cd:	68 84 01 00 00       	push   0x184
c00084d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084d6:	e8 3d 23 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c00084db:	83 c4 10             	add    esp,0x10
c00084de:	83 c4 0c             	add    esp,0xc
c00084e1:	c3                   	ret    

c00084e2 <VgaText::read(unsigned long long, void*, int*)>:
c00084e2:	83 ec 10             	sub    esp,0x10
c00084e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00084ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084f1:	e8 2e 51 00 00       	call   c000d624 <readKeyboard(VgaText*, char*, unsigned long)>
c00084f6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00084fa:	89 02                	mov    DWORD PTR [edx],eax
c00084fc:	31 c0                	xor    eax,eax
c00084fe:	83 c4 1c             	add    esp,0x1c
c0008501:	c3                   	ret    

c0008502 <setTerminalScrollLock(bool)>:
c0008502:	c3                   	ret    

c0008503 <doTerminalCycle()>:
c0008503:	c3                   	ret    

c0008504 <addToTerminalCycle(VgaText*)>:
c0008504:	c3                   	ret    

c0008505 <scrollTerminalScrollLock(int)>:
c0008505:	c3                   	ret    

c0008506 <VgaText::updateTitle()>:
c0008506:	c3                   	ret    
c0008507:	90                   	nop

c0008508 <VgaText::load()>:
c0008508:	c3                   	ret    
c0008509:	90                   	nop

c000850a <VgaText::updateCursor()>:
c000850a:	83 ec 14             	sub    esp,0x14
c000850d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008511:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008514:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008517:	e8 d8 05 01 00       	call   c0018af4 <HalConsoleCursorUpdate(int, int)>
c000851c:	83 c4 1c             	add    esp,0x1c
c000851f:	c3                   	ret    

c0008520 <VgaText::doANSI_SGR(int)>:
c0008520:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008524:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008528:	85 d2                	test   edx,edx
c000852a:	75 0b                	jne    c0008537 <VgaText::doANSI_SGR(int)+0x17>
c000852c:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000852f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008532:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0008535:	eb 59                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c0008537:	83 fa 07             	cmp    edx,0x7
c000853a:	75 0b                	jne    c0008547 <VgaText::doANSI_SGR(int)+0x27>
c000853c:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000853f:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0008542:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0008545:	eb 49                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c0008547:	83 fa 1b             	cmp    edx,0x1b
c000854a:	74 e0                	je     c000852c <VgaText::doANSI_SGR(int)+0xc>
c000854c:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000854f:	83 f9 07             	cmp    ecx,0x7
c0008552:	77 09                	ja     c000855d <VgaText::doANSI_SGR(int)+0x3d>
c0008554:	8b 14 8d 20 32 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdcde0]
c000855b:	eb 20                	jmp    c000857d <VgaText::doANSI_SGR(int)+0x5d>
c000855d:	8d 4a d8             	lea    ecx,[edx-0x28]
c0008560:	83 f9 07             	cmp    ecx,0x7
c0008563:	77 09                	ja     c000856e <VgaText::doANSI_SGR(int)+0x4e>
c0008565:	8b 14 8d 20 32 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdcde0]
c000856c:	eb 22                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c000856e:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008571:	83 f9 07             	cmp    ecx,0x7
c0008574:	77 0b                	ja     c0008581 <VgaText::doANSI_SGR(int)+0x61>
c0008576:	8b 14 95 d8 30 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcf28]
c000857d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008580:	c3                   	ret    
c0008581:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0008584:	83 f9 07             	cmp    ecx,0x7
c0008587:	77 0a                	ja     c0008593 <VgaText::doANSI_SGR(int)+0x73>
c0008589:	8b 14 95 b0 30 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcf50]
c0008590:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008593:	c3                   	ret    

c0008594 <VgaText::setDefaultBgColour(VgaColour)>:
c0008594:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008598:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000859c:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000859f:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085a2:	c3                   	ret    
c00085a3:	90                   	nop

c00085a4 <VgaText::setDefaultFgColour(VgaColour)>:
c00085a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085a8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085ac:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00085af:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00085b2:	c3                   	ret    
c00085b3:	90                   	nop

c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00085b4:	53                   	push   ebx
c00085b5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00085b9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00085bd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00085c1:	51                   	push   ecx
c00085c2:	e8 cd ff ff ff       	call   c0008594 <VgaText::setDefaultBgColour(VgaColour)>
c00085c7:	58                   	pop    eax
c00085c8:	5a                   	pop    edx
c00085c9:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00085cd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00085d1:	5b                   	pop    ebx
c00085d2:	eb d0                	jmp    c00085a4 <VgaText::setDefaultFgColour(VgaColour)>

c00085d4 <VgaText::setTitleTextColour(VgaColour)>:
c00085d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085dc:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00085df:	c3                   	ret    

c00085e0 <VgaText::setTitleColour(VgaColour)>:
c00085e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085e8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00085eb:	c3                   	ret    

c00085ec <VgaText::setTitle(char*)>:
c00085ec:	c3                   	ret    
c00085ed:	90                   	nop

c00085ee <VgaText::combineColours(unsigned char, unsigned char)>:
c00085ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085f2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00085f7:	83 e0 0f             	and    eax,0xf
c00085fa:	c1 e2 04             	shl    edx,0x4
c00085fd:	09 d0                	or     eax,edx
c00085ff:	c3                   	ret    

c0008600 <VgaText::scrollScreen()>:
c0008600:	55                   	push   ebp
c0008601:	57                   	push   edi
c0008602:	56                   	push   esi
c0008603:	be 01 00 00 00       	mov    esi,0x1
c0008608:	53                   	push   ebx
c0008609:	83 ec 0c             	sub    esp,0xc
c000860c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008610:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0008613:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0008619:	31 ff                	xor    edi,edi
c000861b:	01 e9                	add    ecx,ebp
c000861d:	8a 01                	mov    al,BYTE PTR [ecx]
c000861f:	83 fe 18             	cmp    esi,0x18
c0008622:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0008628:	75 20                	jne    c000864a <VgaText::scrollScreen()+0x4a>
c000862a:	f7 c7 01 00 00 00    	test   edi,0x1
c0008630:	74 15                	je     c0008647 <VgaText::scrollScreen()+0x47>
c0008632:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008636:	50                   	push   eax
c0008637:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000863b:	50                   	push   eax
c000863c:	e8 ad ff ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c0008641:	5a                   	pop    edx
c0008642:	5a                   	pop    edx
c0008643:	88 01                	mov    BYTE PTR [ecx],al
c0008645:	eb 03                	jmp    c000864a <VgaText::scrollScreen()+0x4a>
c0008647:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c000864a:	47                   	inc    edi
c000864b:	41                   	inc    ecx
c000864c:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0008652:	75 c9                	jne    c000861d <VgaText::scrollScreen()+0x1d>
c0008654:	46                   	inc    esi
c0008655:	83 fe 19             	cmp    esi,0x19
c0008658:	75 b9                	jne    c0008613 <VgaText::scrollScreen()+0x13>
c000865a:	39 1d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebx
c0008660:	75 1f                	jne    c0008681 <VgaText::scrollScreen()+0x81>
c0008662:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0008666:	74 05                	je     c000866d <VgaText::scrollScreen()+0x6d>
c0008668:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000866b:	eb 14                	jmp    c0008681 <VgaText::scrollScreen()+0x81>
c000866d:	50                   	push   eax
c000866e:	50                   	push   eax
c000866f:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008673:	50                   	push   eax
c0008674:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008678:	50                   	push   eax
c0008679:	e8 0a 03 01 00       	call   c0018988 <HalConsoleScroll(int, int)>
c000867e:	83 c4 10             	add    esp,0x10
c0008681:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0008685:	83 c4 0c             	add    esp,0xc
c0008688:	5b                   	pop    ebx
c0008689:	5e                   	pop    esi
c000868a:	5f                   	pop    edi
c000868b:	5d                   	pop    ebp
c000868c:	e9 79 fe ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008691:	90                   	nop

c0008692 <VgaText::combineCharAndColour(char, unsigned char)>:
c0008692:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0008697:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000869c:	c1 e0 08             	shl    eax,0x8
c000869f:	09 d0                	or     eax,edx
c00086a1:	c3                   	ret    

c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00086a2:	55                   	push   ebp
c00086a3:	57                   	push   edi
c00086a4:	56                   	push   esi
c00086a5:	53                   	push   ebx
c00086a6:	83 ec 1c             	sub    esp,0x1c
c00086a9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00086ad:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00086b1:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00086b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00086b9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00086bd:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00086c1:	0f b6 c3             	movzx  eax,bl
c00086c4:	50                   	push   eax
c00086c5:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00086ca:	50                   	push   eax
c00086cb:	e8 1e ff ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c00086d0:	5a                   	pop    edx
c00086d1:	0f b6 c0             	movzx  eax,al
c00086d4:	59                   	pop    ecx
c00086d5:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00086da:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00086de:	50                   	push   eax
c00086df:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00086e3:	e8 aa ff ff ff       	call   c0008692 <VgaText::combineCharAndColour(char, unsigned char)>
c00086e8:	5a                   	pop    edx
c00086e9:	6b d7 50             	imul   edx,edi,0x50
c00086ec:	59                   	pop    ecx
c00086ed:	01 f2                	add    edx,esi
c00086ef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00086f2:	0f b7 d2             	movzx  edx,dx
c00086f5:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c00086f9:	39 2d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebp
c00086ff:	75 28                	jne    c0008729 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c0008701:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008705:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0008709:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c000870d:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008711:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0008715:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008719:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000871d:	83 c4 1c             	add    esp,0x1c
c0008720:	5b                   	pop    ebx
c0008721:	5e                   	pop    esi
c0008722:	5f                   	pop    edi
c0008723:	5d                   	pop    ebp
c0008724:	e9 67 03 01 00       	jmp    c0018a90 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008729:	83 c4 1c             	add    esp,0x1c
c000872c:	5b                   	pop    ebx
c000872d:	5e                   	pop    esi
c000872e:	5f                   	pop    edi
c000872f:	5d                   	pop    ebp
c0008730:	c3                   	ret    
c0008731:	90                   	nop

c0008732 <VgaText::getCursorX()>:
c0008732:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008736:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0008739:	c3                   	ret    

c000873a <VgaText::getCursorY()>:
c000873a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000873e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008741:	c3                   	ret    

c0008742 <VgaText::setCursor(int, int)>:
c0008742:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008746:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000874a:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000874d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008751:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008754:	e9 b1 fd ff ff       	jmp    c000850a <VgaText::updateCursor()>

c0008759 <setActiveTerminal(VgaText*)>:
c0008759:	53                   	push   ebx
c000875a:	83 ec 08             	sub    esp,0x8
c000875d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008761:	85 db                	test   ebx,ebx
c0008763:	75 11                	jne    c0008776 <setActiveTerminal(VgaText*)+0x1d>
c0008765:	c7 44 24 10 c0 0a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020ac0
c000876d:	83 c4 08             	add    esp,0x8
c0008770:	5b                   	pop    ebx
c0008771:	e9 03 8c 00 00       	jmp    c0011379 <KePanic(char const*)>
c0008776:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c000877b:	85 c0                	test   eax,eax
c000877d:	74 0c                	je     c000878b <setActiveTerminal(VgaText*)+0x32>
c000877f:	83 ec 0c             	sub    esp,0xc
c0008782:	50                   	push   eax
c0008783:	e8 82 fd ff ff       	call   c000850a <VgaText::updateCursor()>
c0008788:	83 c4 10             	add    esp,0x10
c000878b:	89 1d 04 5f 02 c0    	mov    DWORD PTR ds:0xc0025f04,ebx
c0008791:	50                   	push   eax
c0008792:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008795:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008798:	53                   	push   ebx
c0008799:	e8 a4 ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c000879e:	83 c4 18             	add    esp,0x18
c00087a1:	5b                   	pop    ebx
c00087a2:	c3                   	ret    
c00087a3:	90                   	nop

c00087a4 <VgaText::clearScreen()>:
c00087a4:	57                   	push   edi
c00087a5:	56                   	push   esi
c00087a6:	31 f6                	xor    esi,esi
c00087a8:	53                   	push   ebx
c00087a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00087ad:	52                   	push   edx
c00087ae:	6a 00                	push   0x0
c00087b0:	6a 00                	push   0x0
c00087b2:	53                   	push   ebx
c00087b3:	e8 8a ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c00087b8:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087bf:	83 c4 10             	add    esp,0x10
c00087c2:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00087c5:	7e 20                	jle    c00087e7 <VgaText::clearScreen()+0x43>
c00087c7:	31 ff                	xor    edi,edi
c00087c9:	50                   	push   eax
c00087ca:	50                   	push   eax
c00087cb:	56                   	push   esi
c00087cc:	57                   	push   edi
c00087cd:	47                   	inc    edi
c00087ce:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087d1:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00087d4:	6a 20                	push   0x20
c00087d6:	53                   	push   ebx
c00087d7:	e8 c6 fe ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00087dc:	83 c4 20             	add    esp,0x20
c00087df:	83 ff 50             	cmp    edi,0x50
c00087e2:	75 e5                	jne    c00087c9 <VgaText::clearScreen()+0x25>
c00087e4:	46                   	inc    esi
c00087e5:	eb db                	jmp    c00087c2 <VgaText::clearScreen()+0x1e>
c00087e7:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00087ee:	5b                   	pop    ebx
c00087ef:	5e                   	pop    esi
c00087f0:	5f                   	pop    edi
c00087f1:	c3                   	ret    

c00087f2 <VgaText::setCursorX(int)>:
c00087f2:	83 ec 10             	sub    esp,0x10
c00087f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00087f9:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00087fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008800:	50                   	push   eax
c0008801:	e8 3c ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008806:	83 c4 1c             	add    esp,0x1c
c0008809:	c3                   	ret    

c000880a <VgaText::setCursorY(int)>:
c000880a:	83 ec 10             	sub    esp,0x10
c000880d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008811:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008815:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008818:	50                   	push   eax
c0008819:	e8 24 ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c000881e:	83 c4 1c             	add    esp,0x1c
c0008821:	c3                   	ret    

c0008822 <VgaText::incrementCursor(bool)>:
c0008822:	56                   	push   esi
c0008823:	53                   	push   ebx
c0008824:	51                   	push   ecx
c0008825:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008829:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000882d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008830:	40                   	inc    eax
c0008831:	83 f8 50             	cmp    eax,0x50
c0008834:	74 05                	je     c000883b <VgaText::incrementCursor(bool)+0x19>
c0008836:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008839:	eb 24                	jmp    c000885f <VgaText::incrementCursor(bool)+0x3d>
c000883b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000883e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008845:	8d 50 01             	lea    edx,[eax+0x1]
c0008848:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000884b:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000884e:	75 0f                	jne    c000885f <VgaText::incrementCursor(bool)+0x3d>
c0008850:	83 ec 0c             	sub    esp,0xc
c0008853:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008856:	53                   	push   ebx
c0008857:	e8 a4 fd ff ff       	call   c0008600 <VgaText::scrollScreen()>
c000885c:	83 c4 10             	add    esp,0x10
c000885f:	89 f0                	mov    eax,esi
c0008861:	84 c0                	test   al,al
c0008863:	74 0c                	je     c0008871 <VgaText::incrementCursor(bool)+0x4f>
c0008865:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008869:	5a                   	pop    edx
c000886a:	5b                   	pop    ebx
c000886b:	5e                   	pop    esi
c000886c:	e9 99 fc ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008871:	58                   	pop    eax
c0008872:	5b                   	pop    ebx
c0008873:	5e                   	pop    esi
c0008874:	c3                   	ret    
c0008875:	90                   	nop

c0008876 <VgaText::decrementCursor(bool)>:
c0008876:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000887a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000887e:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008881:	85 c0                	test   eax,eax
c0008883:	74 04                	je     c0008889 <VgaText::decrementCursor(bool)+0x13>
c0008885:	48                   	dec    eax
c0008886:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0008889:	84 c9                	test   cl,cl
c000888b:	74 09                	je     c0008896 <VgaText::decrementCursor(bool)+0x20>
c000888d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008891:	e9 74 fc ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008896:	c3                   	ret    
c0008897:	90                   	nop

c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0008898:	53                   	push   ebx
c0008899:	83 ec 08             	sub    esp,0x8
c000889c:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00088a1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088a5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00088a9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00088ad:	83 f8 07             	cmp    eax,0x7
c00088b0:	75 21                	jne    c00088d3 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00088b2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00088ba:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00088c2:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00088ca:	83 c4 08             	add    esp,0x8
c00088cd:	5b                   	pop    ebx
c00088ce:	e9 9c 38 00 00       	jmp    c000c16f <Krnl::beep(int, int, bool)>
c00088d3:	83 f8 0d             	cmp    eax,0xd
c00088d6:	75 09                	jne    c00088e1 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00088d8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088df:	eb 2d                	jmp    c000890e <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00088e1:	83 f8 0a             	cmp    eax,0xa
c00088e4:	75 31                	jne    c0008917 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00088e6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00088e9:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088f0:	8d 50 01             	lea    edx,[eax+0x1]
c00088f3:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00088f6:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00088f9:	75 0f                	jne    c000890a <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c00088fb:	83 ec 0c             	sub    esp,0xc
c00088fe:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008901:	53                   	push   ebx
c0008902:	e8 f9 fc ff ff       	call   c0008600 <VgaText::scrollScreen()>
c0008907:	83 c4 10             	add    esp,0x10
c000890a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000890e:	83 c4 08             	add    esp,0x8
c0008911:	5b                   	pop    ebx
c0008912:	e9 f3 fb ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008917:	83 f8 08             	cmp    eax,0x8
c000891a:	75 25                	jne    c0008941 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c000891c:	50                   	push   eax
c000891d:	50                   	push   eax
c000891e:	6a 01                	push   0x1
c0008920:	53                   	push   ebx
c0008921:	e8 50 ff ff ff       	call   c0008876 <VgaText::decrementCursor(bool)>
c0008926:	5a                   	pop    edx
c0008927:	59                   	pop    ecx
c0008928:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000892b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000892e:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008931:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008934:	6a 20                	push   0x20
c0008936:	53                   	push   ebx
c0008937:	e8 66 fd ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000893c:	83 c4 28             	add    esp,0x28
c000893f:	5b                   	pop    ebx
c0008940:	c3                   	ret    
c0008941:	83 ec 08             	sub    esp,0x8
c0008944:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008947:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000894a:	51                   	push   ecx
c000894b:	52                   	push   edx
c000894c:	50                   	push   eax
c000894d:	53                   	push   ebx
c000894e:	e8 4f fd ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008953:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0008957:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000895f:	83 c4 28             	add    esp,0x28
c0008962:	5b                   	pop    ebx
c0008963:	e9 ba fe ff ff       	jmp    c0008822 <VgaText::incrementCursor(bool)>

c0008968 <VgaText::putchar(char)>:
c0008968:	57                   	push   edi
c0008969:	56                   	push   esi
c000896a:	53                   	push   ebx
c000896b:	83 ec 10             	sub    esp,0x10
c000896e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008972:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008976:	89 f8                	mov    eax,edi
c0008978:	0f be c0             	movsx  eax,al
c000897b:	83 f8 5b             	cmp    eax,0x5b
c000897e:	75 18                	jne    c0008998 <VgaText::putchar(char)+0x30>
c0008980:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008984:	74 20                	je     c00089a6 <VgaText::putchar(char)+0x3e>
c0008986:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000898c:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0008993:	e9 c1 00 00 00       	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c0008998:	83 f8 1b             	cmp    eax,0x1b
c000899b:	75 09                	jne    c00089a6 <VgaText::putchar(char)+0x3e>
c000899d:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00089a1:	e9 b3 00 00 00       	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c00089a6:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c00089a9:	84 c9                	test   cl,cl
c00089ab:	0f 84 98 00 00 00    	je     c0008a49 <VgaText::putchar(char)+0xe1>
c00089b1:	8d 77 c0             	lea    esi,[edi-0x40]
c00089b4:	89 f2                	mov    edx,esi
c00089b6:	80 fa 3e             	cmp    dl,0x3e
c00089b9:	77 78                	ja     c0008a33 <VgaText::putchar(char)+0xcb>
c00089bb:	83 f8 6d             	cmp    eax,0x6d
c00089be:	75 47                	jne    c0008a07 <VgaText::putchar(char)+0x9f>
c00089c0:	31 f6                	xor    esi,esi
c00089c2:	31 d2                	xor    edx,edx
c00089c4:	31 c0                	xor    eax,eax
c00089c6:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00089c9:	7e 2d                	jle    c00089f8 <VgaText::putchar(char)+0x90>
c00089cb:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00089d0:	83 fa 3b             	cmp    edx,0x3b
c00089d3:	75 17                	jne    c00089ec <VgaText::putchar(char)+0x84>
c00089d5:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00089d9:	50                   	push   eax
c00089da:	53                   	push   ebx
c00089db:	e8 40 fb ff ff       	call   c0008520 <VgaText::doANSI_SGR(int)>
c00089e0:	59                   	pop    ecx
c00089e1:	31 d2                	xor    edx,edx
c00089e3:	5f                   	pop    edi
c00089e4:	31 c0                	xor    eax,eax
c00089e6:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00089ea:	eb 09                	jmp    c00089f5 <VgaText::putchar(char)+0x8d>
c00089ec:	6b c0 0a             	imul   eax,eax,0xa
c00089ef:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00089f3:	88 ca                	mov    dl,cl
c00089f5:	46                   	inc    esi
c00089f6:	eb ce                	jmp    c00089c6 <VgaText::putchar(char)+0x5e>
c00089f8:	84 d2                	test   dl,dl
c00089fa:	74 2f                	je     c0008a2b <VgaText::putchar(char)+0xc3>
c00089fc:	50                   	push   eax
c00089fd:	53                   	push   ebx
c00089fe:	e8 1d fb ff ff       	call   c0008520 <VgaText::doANSI_SGR(int)>
c0008a03:	58                   	pop    eax
c0008a04:	5a                   	pop    edx
c0008a05:	eb 24                	jmp    c0008a2b <VgaText::putchar(char)+0xc3>
c0008a07:	83 f8 4a             	cmp    eax,0x4a
c0008a0a:	75 1f                	jne    c0008a2b <VgaText::putchar(char)+0xc3>
c0008a0c:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008a10:	75 19                	jne    c0008a2b <VgaText::putchar(char)+0xc3>
c0008a12:	83 ec 0c             	sub    esp,0xc
c0008a15:	53                   	push   ebx
c0008a16:	e8 89 fd ff ff       	call   c00087a4 <VgaText::clearScreen()>
c0008a1b:	83 c4 0c             	add    esp,0xc
c0008a1e:	6a 00                	push   0x0
c0008a20:	6a 00                	push   0x0
c0008a22:	53                   	push   ebx
c0008a23:	e8 1a fd ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008a28:	83 c4 10             	add    esp,0x10
c0008a2b:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008a31:	eb 26                	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c0008a33:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0008a36:	83 f8 0e             	cmp    eax,0xe
c0008a39:	7f 1e                	jg     c0008a59 <VgaText::putchar(char)+0xf1>
c0008a3b:	8d 48 01             	lea    ecx,[eax+0x1]
c0008a3e:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008a41:	89 f9                	mov    ecx,edi
c0008a43:	88 4c 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],cl
c0008a47:	eb 10                	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c0008a49:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a4c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008a4f:	50                   	push   eax
c0008a50:	53                   	push   ebx
c0008a51:	e8 42 fe ff ff       	call   c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008a56:	83 c4 10             	add    esp,0x10
c0008a59:	83 c4 10             	add    esp,0x10
c0008a5c:	5b                   	pop    ebx
c0008a5d:	5e                   	pop    esi
c0008a5e:	5f                   	pop    edi
c0008a5f:	c3                   	ret    

c0008a60 <VgaText::putx(unsigned int)>:
c0008a60:	57                   	push   edi
c0008a61:	b9 11 00 00 00       	mov    ecx,0x11
c0008a66:	56                   	push   esi
c0008a67:	be ce 0a 02 c0       	mov    esi,0xc0020ace
c0008a6c:	53                   	push   ebx
c0008a6d:	83 ec 20             	sub    esp,0x20
c0008a70:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008a74:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008a78:	fc                   	cld    
c0008a79:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008a7b:	be 08 00 00 00       	mov    esi,0x8
c0008a80:	50                   	push   eax
c0008a81:	50                   	push   eax
c0008a82:	89 d8                	mov    eax,ebx
c0008a84:	c1 e3 04             	shl    ebx,0x4
c0008a87:	c1 e8 1c             	shr    eax,0x1c
c0008a8a:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008a8f:	50                   	push   eax
c0008a90:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008a94:	e8 cf fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008a99:	83 c4 10             	add    esp,0x10
c0008a9c:	4e                   	dec    esi
c0008a9d:	75 e1                	jne    c0008a80 <VgaText::putx(unsigned int)+0x20>
c0008a9f:	83 c4 20             	add    esp,0x20
c0008aa2:	5b                   	pop    ebx
c0008aa3:	5e                   	pop    esi
c0008aa4:	5f                   	pop    edi
c0008aa5:	c3                   	ret    

c0008aa6 <VgaText::puts(char const*)>:
c0008aa6:	53                   	push   ebx
c0008aa7:	83 ec 08             	sub    esp,0x8
c0008aaa:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008aae:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008ab1:	85 c0                	test   eax,eax
c0008ab3:	74 12                	je     c0008ac7 <VgaText::puts(char const*)+0x21>
c0008ab5:	43                   	inc    ebx
c0008ab6:	51                   	push   ecx
c0008ab7:	51                   	push   ecx
c0008ab8:	50                   	push   eax
c0008ab9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008abd:	e8 a6 fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008ac2:	83 c4 10             	add    esp,0x10
c0008ac5:	eb e7                	jmp    c0008aae <VgaText::puts(char const*)+0x8>
c0008ac7:	83 c4 08             	add    esp,0x8
c0008aca:	5b                   	pop    ebx
c0008acb:	c3                   	ret    

c0008acc <VgaText::write(unsigned long long, void*, int*)>:
c0008acc:	55                   	push   ebp
c0008acd:	57                   	push   edi
c0008ace:	56                   	push   esi
c0008acf:	53                   	push   ebx
c0008ad0:	83 ec 0c             	sub    esp,0xc
c0008ad3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008ad7:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008adb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008adf:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008ae6:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008ae9:	39 eb                	cmp    ebx,ebp
c0008aeb:	74 13                	je     c0008b00 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008aed:	43                   	inc    ebx
c0008aee:	50                   	push   eax
c0008aef:	50                   	push   eax
c0008af0:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008af4:	50                   	push   eax
c0008af5:	56                   	push   esi
c0008af6:	e8 6d fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008afb:	83 c4 10             	add    esp,0x10
c0008afe:	eb e9                	jmp    c0008ae9 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008b00:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008b07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b0b:	89 38                	mov    DWORD PTR [eax],edi
c0008b0d:	83 c4 0c             	add    esp,0xc
c0008b10:	31 c0                	xor    eax,eax
c0008b12:	5b                   	pop    ebx
c0008b13:	5e                   	pop    esi
c0008b14:	5f                   	pop    edi
c0008b15:	5d                   	pop    ebp
c0008b16:	c3                   	ret    
c0008b17:	90                   	nop

c0008b18 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008b18:	55                   	push   ebp
c0008b19:	57                   	push   edi
c0008b1a:	56                   	push   esi
c0008b1b:	53                   	push   ebx
c0008b1c:	83 ec 0c             	sub    esp,0xc
c0008b1f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008b23:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b28:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008b2f:	50                   	push   eax
c0008b30:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b35:	50                   	push   eax
c0008b36:	e8 b3 fa ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c0008b3b:	5a                   	pop    edx
c0008b3c:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008b40:	59                   	pop    ecx
c0008b41:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008b44:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008b48:	0f b7 f6             	movzx  esi,si
c0008b4b:	0f b6 e8             	movzx  ebp,al
c0008b4e:	01 f6                	add    esi,esi
c0008b50:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008b53:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008b56:	85 c0                	test   eax,eax
c0008b58:	0f 84 ef 00 00 00    	je     c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c0008b5e:	83 f8 0d             	cmp    eax,0xd
c0008b61:	75 0c                	jne    c0008b6f <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0008b63:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008b6a:	e9 d8 00 00 00       	jmp    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008b6f:	83 f8 0a             	cmp    eax,0xa
c0008b72:	75 44                	jne    c0008bb8 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0008b74:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008b77:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008b7e:	8d 48 01             	lea    ecx,[eax+0x1]
c0008b81:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008b84:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008b87:	75 0f                	jne    c0008b98 <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0008b89:	83 ec 0c             	sub    esp,0xc
c0008b8c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008b8f:	53                   	push   ebx
c0008b90:	e8 6b fa ff ff       	call   c0008600 <VgaText::scrollScreen()>
c0008b95:	83 c4 10             	add    esp,0x10
c0008b98:	83 ec 0c             	sub    esp,0xc
c0008b9b:	53                   	push   ebx
c0008b9c:	e8 69 f9 ff ff       	call   c000850a <VgaText::updateCursor()>
c0008ba1:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008ba5:	83 c4 10             	add    esp,0x10
c0008ba8:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008bab:	0f b7 f6             	movzx  esi,si
c0008bae:	01 f6                	add    esi,esi
c0008bb0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008bb3:	e9 8f 00 00 00       	jmp    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bb8:	83 f8 08             	cmp    eax,0x8
c0008bbb:	75 34                	jne    c0008bf1 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c0008bbd:	51                   	push   ecx
c0008bbe:	51                   	push   ecx
c0008bbf:	6a 01                	push   0x1
c0008bc1:	53                   	push   ebx
c0008bc2:	e8 af fc ff ff       	call   c0008876 <VgaText::decrementCursor(bool)>
c0008bc7:	5e                   	pop    esi
c0008bc8:	58                   	pop    eax
c0008bc9:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008bcc:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008bcf:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008bd2:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008bd5:	6a 20                	push   0x20
c0008bd7:	53                   	push   ebx
c0008bd8:	e8 c5 fa ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008bdd:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008be1:	83 c4 20             	add    esp,0x20
c0008be4:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008be7:	0f b7 f6             	movzx  esi,si
c0008bea:	01 f6                	add    esi,esi
c0008bec:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008bef:	eb 56                	jmp    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bf1:	52                   	push   edx
c0008bf2:	52                   	push   edx
c0008bf3:	55                   	push   ebp
c0008bf4:	50                   	push   eax
c0008bf5:	e8 98 fa ff ff       	call   c0008692 <VgaText::combineCharAndColour(char, unsigned char)>
c0008bfa:	83 c4 10             	add    esp,0x10
c0008bfd:	66 89 06             	mov    WORD PTR [esi],ax
c0008c00:	39 1d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebx
c0008c06:	75 1d                	jne    c0008c25 <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0008c08:	83 ec 0c             	sub    esp,0xc
c0008c0b:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008c0e:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008c11:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c15:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c19:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008c1c:	50                   	push   eax
c0008c1d:	e8 6e fe 00 00       	call   c0018a90 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008c22:	83 c4 20             	add    esp,0x20
c0008c25:	83 c6 02             	add    esi,0x2
c0008c28:	50                   	push   eax
c0008c29:	50                   	push   eax
c0008c2a:	6a 00                	push   0x0
c0008c2c:	53                   	push   ebx
c0008c2d:	e8 f0 fb ff ff       	call   c0008822 <VgaText::incrementCursor(bool)>
c0008c32:	83 c4 10             	add    esp,0x10
c0008c35:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0008c39:	75 0c                	jne    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008c3b:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008c3f:	0f b7 f6             	movzx  esi,si
c0008c42:	01 f6                	add    esi,esi
c0008c44:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008c47:	47                   	inc    edi
c0008c48:	e9 06 ff ff ff       	jmp    c0008b53 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008c4d:	83 ec 0c             	sub    esp,0xc
c0008c50:	53                   	push   ebx
c0008c51:	e8 b4 f8 ff ff       	call   c000850a <VgaText::updateCursor()>
c0008c56:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008c5d:	83 c4 1c             	add    esp,0x1c
c0008c60:	5b                   	pop    ebx
c0008c61:	5e                   	pop    esi
c0008c62:	5f                   	pop    edi
c0008c63:	5d                   	pop    ebp
c0008c64:	c3                   	ret    
c0008c65:	90                   	nop

c0008c66 <VgaText::VgaText(char const*)>:
c0008c66:	56                   	push   esi
c0008c67:	53                   	push   ebx
c0008c68:	83 ec 04             	sub    esp,0x4
c0008c6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c6f:	83 ec 08             	sub    esp,0x8
c0008c72:	6a 00                	push   0x0
c0008c74:	50                   	push   eax
c0008c75:	e8 44 05 00 00       	call   c00091be <UnixFile::UnixFile(int)>
c0008c7a:	83 c4 10             	add    esp,0x10
c0008c7d:	ba f4 0a 02 c0       	mov    edx,0xc0020af4
c0008c82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c86:	89 10                	mov    DWORD PTR [eax],edx
c0008c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8c:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008c93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c97:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008c9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ca2:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008ca6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008caa:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008cae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb2:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008cb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cbd:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008cc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc8:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008ccf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd3:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008cda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cde:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008ce5:	83 ec 0c             	sub    esp,0xc
c0008ce8:	6a 01                	push   0x1
c0008cea:	e8 1e 09 00 00       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c0008cef:	83 c4 10             	add    esp,0x10
c0008cf2:	89 c2                	mov    edx,eax
c0008cf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cf8:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008cfb:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c0008d01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d05:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d08:	89 c6                	mov    esi,eax
c0008d0a:	e8 b0 f0 ff ff       	call   c0007dbf <Phys::allocatePage()>
c0008d0f:	68 05 0c 00 00       	push   0xc05
c0008d14:	56                   	push   esi
c0008d15:	50                   	push   eax
c0008d16:	53                   	push   ebx
c0008d17:	e8 04 10 00 00       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0008d1c:	83 c4 10             	add    esp,0x10
c0008d1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d23:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d26:	83 ec 04             	sub    esp,0x4
c0008d29:	68 a0 0f 00 00       	push   0xfa0
c0008d2e:	6a 00                	push   0x0
c0008d30:	50                   	push   eax
c0008d31:	e8 ba 77 ff ff       	call   c00004f0 <memset>
c0008d36:	83 c4 10             	add    esp,0x10
c0008d39:	83 ec 04             	sub    esp,0x4
c0008d3c:	6a 00                	push   0x0
c0008d3e:	6a 07                	push   0x7
c0008d40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d44:	e8 6b f8 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008d49:	83 c4 10             	add    esp,0x10
c0008d4c:	83 ec 04             	sub    esp,0x4
c0008d4f:	6a 00                	push   0x0
c0008d51:	6a 00                	push   0x0
c0008d53:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d57:	e8 e6 f9 ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008d5c:	83 c4 10             	add    esp,0x10
c0008d5f:	83 ec 0c             	sub    esp,0xc
c0008d62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d66:	e8 39 fa ff ff       	call   c00087a4 <VgaText::clearScreen()>
c0008d6b:	83 c4 10             	add    esp,0x10
c0008d6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d72:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008d76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d7a:	05 82 00 00 00       	add    eax,0x82
c0008d7f:	83 ec 04             	sub    esp,0x4
c0008d82:	68 80 00 00 00       	push   0x80
c0008d87:	6a 00                	push   0x0
c0008d89:	50                   	push   eax
c0008d8a:	e8 61 77 ff ff       	call   c00004f0 <memset>
c0008d8f:	83 c4 10             	add    esp,0x10
c0008d92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d96:	05 02 01 00 00       	add    eax,0x102
c0008d9b:	83 ec 04             	sub    esp,0x4
c0008d9e:	68 80 00 00 00       	push   0x80
c0008da3:	6a 00                	push   0x0
c0008da5:	50                   	push   eax
c0008da6:	e8 45 77 ff ff       	call   c00004f0 <memset>
c0008dab:	83 c4 10             	add    esp,0x10
c0008dae:	90                   	nop
c0008daf:	83 c4 04             	add    esp,0x4
c0008db2:	5b                   	pop    ebx
c0008db3:	5e                   	pop    esi
c0008db4:	c3                   	ret    
c0008db5:	90                   	nop

c0008db6 <VgaText::receiveKey(unsigned char)>:
c0008db6:	55                   	push   ebp
c0008db7:	57                   	push   edi
c0008db8:	56                   	push   esi
c0008db9:	53                   	push   ebx
c0008dba:	83 ec 2c             	sub    esp,0x2c
c0008dbd:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0008dc1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0008dc5:	89 ef                	mov    edi,ebp
c0008dc7:	81 e7 ff 00 00 00    	and    edi,0xff
c0008dcd:	0f 84 66 01 00 00    	je     c0008f39 <VgaText::receiveKey(unsigned char)+0x183>
c0008dd3:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0008dd9:	83 ff 08             	cmp    edi,0x8
c0008ddc:	75 73                	jne    c0008e51 <VgaText::receiveKey(unsigned char)+0x9b>
c0008dde:	83 ec 0c             	sub    esp,0xc
c0008de1:	56                   	push   esi
c0008de2:	e8 89 77 ff ff       	call   c0000570 <strlen>
c0008de7:	83 c4 10             	add    esp,0x10
c0008dea:	85 c0                	test   eax,eax
c0008dec:	0f 84 02 01 00 00    	je     c0008ef4 <VgaText::receiveKey(unsigned char)+0x13e>
c0008df2:	50                   	push   eax
c0008df3:	50                   	push   eax
c0008df4:	6a 08                	push   0x8
c0008df6:	53                   	push   ebx
c0008df7:	e8 6c fb ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008dfc:	89 34 24             	mov    DWORD PTR [esp],esi
c0008dff:	e8 6c 77 ff ff       	call   c0000570 <strlen>
c0008e04:	83 c4 10             	add    esp,0x10
c0008e07:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0008e0f:	83 fa 0d             	cmp    edx,0xd
c0008e12:	89 d0                	mov    eax,edx
c0008e14:	0f 95 c1             	setne  cl
c0008e17:	83 fa 1f             	cmp    edx,0x1f
c0008e1a:	0f 9e c2             	setle  dl
c0008e1d:	0f b6 d2             	movzx  edx,dl
c0008e20:	85 ca                	test   edx,ecx
c0008e22:	74 17                	je     c0008e3b <VgaText::receiveKey(unsigned char)+0x85>
c0008e24:	83 e8 08             	sub    eax,0x8
c0008e27:	3c 02                	cmp    al,0x2
c0008e29:	76 10                	jbe    c0008e3b <VgaText::receiveKey(unsigned char)+0x85>
c0008e2b:	55                   	push   ebp
c0008e2c:	55                   	push   ebp
c0008e2d:	68 df 0a 02 c0       	push   0xc0020adf
c0008e32:	53                   	push   ebx
c0008e33:	e8 6e fc ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0008e38:	83 c4 10             	add    esp,0x10
c0008e3b:	83 ec 0c             	sub    esp,0xc
c0008e3e:	56                   	push   esi
c0008e3f:	e8 2c 77 ff ff       	call   c0000570 <strlen>
c0008e44:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008e4c:	e9 a0 00 00 00       	jmp    c0008ef1 <VgaText::receiveKey(unsigned char)+0x13b>
c0008e51:	83 ec 0c             	sub    esp,0xc
c0008e54:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008e5a:	50                   	push   eax
c0008e5b:	e8 10 77 ff ff       	call   c0000570 <strlen>
c0008e60:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e63:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008e67:	e8 04 77 ff ff       	call   c0000570 <strlen>
c0008e6c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008e70:	83 c4 10             	add    esp,0x10
c0008e73:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0008e77:	3d 80 00 00 00       	cmp    eax,0x80
c0008e7c:	0f 87 b7 00 00 00    	ja     c0008f39 <VgaText::receiveKey(unsigned char)+0x183>
c0008e82:	8d 45 ff             	lea    eax,[ebp-0x1]
c0008e85:	8d 55 f7             	lea    edx,[ebp-0x9]
c0008e88:	3c 1e                	cmp    al,0x1e
c0008e8a:	0f 96 c0             	setbe  al
c0008e8d:	80 fa 01             	cmp    dl,0x1
c0008e90:	0f 97 c2             	seta   dl
c0008e93:	0f b6 d2             	movzx  edx,dl
c0008e96:	85 c2                	test   edx,eax
c0008e98:	74 2e                	je     c0008ec8 <VgaText::receiveKey(unsigned char)+0x112>
c0008e9a:	83 ff 0d             	cmp    edi,0xd
c0008e9d:	74 29                	je     c0008ec8 <VgaText::receiveKey(unsigned char)+0x112>
c0008e9f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008ea2:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008ea5:	68 e5 0a 02 c0       	push   0xc0020ae5
c0008eaa:	53                   	push   ebx
c0008eab:	e8 68 fc ff ff       	call   c0008b18 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008eb0:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008eb3:	8d 45 40             	lea    eax,[ebp+0x40]
c0008eb6:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008eb9:	0f b6 c0             	movzx  eax,al
c0008ebc:	50                   	push   eax
c0008ebd:	53                   	push   ebx
c0008ebe:	e8 d5 f9 ff ff       	call   c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008ec3:	83 c4 20             	add    esp,0x20
c0008ec6:	eb 11                	jmp    c0008ed9 <VgaText::receiveKey(unsigned char)+0x123>
c0008ec8:	89 e8                	mov    eax,ebp
c0008eca:	51                   	push   ecx
c0008ecb:	0f be c0             	movsx  eax,al
c0008ece:	51                   	push   ecx
c0008ecf:	50                   	push   eax
c0008ed0:	53                   	push   ebx
c0008ed1:	e8 92 fa ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008ed6:	83 c4 10             	add    esp,0x10
c0008ed9:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0008ede:	89 e8                	mov    eax,ebp
c0008ee0:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0008ee4:	52                   	push   edx
c0008ee5:	52                   	push   edx
c0008ee6:	8d 44 24 26          	lea    eax,[esp+0x26]
c0008eea:	50                   	push   eax
c0008eeb:	56                   	push   esi
c0008eec:	e8 4f 79 ff ff       	call   c0000840 <strcat>
c0008ef1:	83 c4 10             	add    esp,0x10
c0008ef4:	8a 93 80 00 00 00    	mov    dl,BYTE PTR [ebx+0x80]
c0008efa:	b0 01                	mov    al,0x1
c0008efc:	83 ff 1c             	cmp    edi,0x1c
c0008eff:	77 0e                	ja     c0008f0f <VgaText::receiveKey(unsigned char)+0x159>
c0008f01:	b8 08 04 00 10       	mov    eax,0x10000408
c0008f06:	89 f9                	mov    ecx,edi
c0008f08:	d3 e8                	shr    eax,cl
c0008f0a:	f7 d0                	not    eax
c0008f0c:	83 e0 01             	and    eax,0x1
c0008f0f:	84 c0                	test   al,al
c0008f11:	74 04                	je     c0008f17 <VgaText::receiveKey(unsigned char)+0x161>
c0008f13:	84 d2                	test   dl,dl
c0008f15:	74 22                	je     c0008f39 <VgaText::receiveKey(unsigned char)+0x183>
c0008f17:	81 c3 02 01 00 00    	add    ebx,0x102
c0008f1d:	50                   	push   eax
c0008f1e:	50                   	push   eax
c0008f1f:	56                   	push   esi
c0008f20:	53                   	push   ebx
c0008f21:	e8 1a 79 ff ff       	call   c0000840 <strcat>
c0008f26:	83 c4 0c             	add    esp,0xc
c0008f29:	68 80 00 00 00       	push   0x80
c0008f2e:	6a 00                	push   0x0
c0008f30:	56                   	push   esi
c0008f31:	e8 ba 75 ff ff       	call   c00004f0 <memset>
c0008f36:	83 c4 10             	add    esp,0x10
c0008f39:	83 c4 2c             	add    esp,0x2c
c0008f3c:	5b                   	pop    ebx
c0008f3d:	5e                   	pop    esi
c0008f3e:	5f                   	pop    edi
c0008f3f:	5d                   	pop    ebp
c0008f40:	c3                   	ret    
c0008f41:	90                   	nop

c0008f42 <VgaText::doUpdate()>:
c0008f42:	c3                   	ret    
c0008f43:	90                   	nop

c0008f44 <TSS::TSS()>:
c0008f44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f48:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008f4f:	90                   	nop
c0008f50:	c3                   	ret    
c0008f51:	90                   	nop
c0008f52:	66 90                	xchg   ax,ax

c0008f54 <TSS::setESP(unsigned long)>:
c0008f54:	55                   	push   ebp
c0008f55:	89 e5                	mov    ebp,esp
c0008f57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f5a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f5d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008f60:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f63:	90                   	nop
c0008f64:	5d                   	pop    ebp
c0008f65:	c3                   	ret    
c0008f66:	66 90                	xchg   ax,ax

c0008f68 <TSS::flush()>:
c0008f68:	55                   	push   ebp
c0008f69:	89 e5                	mov    ebp,esp
c0008f6b:	83 ec 10             	sub    esp,0x10
c0008f6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f71:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f73:	83 c8 03             	or     eax,0x3
c0008f76:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008f7a:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008f7e:	66 89 d0             	mov    ax,dx
c0008f81:	0f 00 d8             	ltr    ax
c0008f84:	90                   	nop
c0008f85:	c9                   	leave  
c0008f86:	c3                   	ret    
c0008f87:	90                   	nop

c0008f88 <TSS::setup(unsigned long, unsigned long)>:
c0008f88:	55                   	push   ebp
c0008f89:	89 e5                	mov    ebp,esp
c0008f8b:	83 ec 18             	sub    esp,0x18
c0008f8e:	83 ec 0c             	sub    esp,0xc
c0008f91:	6a 68                	push   0x68
c0008f93:	e8 1e eb ff ff       	call   c0007ab6 <malloc>
c0008f98:	83 c4 10             	add    esp,0x10
c0008f9b:	89 c2                	mov    edx,eax
c0008f9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fa0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fa3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fa6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fa9:	83 ec 04             	sub    esp,0x4
c0008fac:	6a 68                	push   0x68
c0008fae:	6a 00                	push   0x0
c0008fb0:	50                   	push   eax
c0008fb1:	e8 3a 75 ff ff       	call   c00004f0 <memset>
c0008fb6:	83 c4 10             	add    esp,0x10
c0008fb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fbf:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008fc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fcb:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008fd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fd4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fd7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008fda:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fe0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fe3:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008fe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fef:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008ff5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ff8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ffb:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0009001:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009004:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009007:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c000900d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009010:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009013:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0009019:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000901c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000901f:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0009025:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009028:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000902b:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000902e:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0009031:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009034:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009037:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000903a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000903d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009040:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009043:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000904a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000904d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009050:	0f 20 da             	mov    edx,cr3
c0009053:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0009056:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009059:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000905c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000905f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009062:	83 ec 08             	sub    esp,0x8
c0009065:	50                   	push   eax
c0009066:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009069:	50                   	push   eax
c000906a:	e8 b3 e2 ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c000906f:	83 c4 10             	add    esp,0x10
c0009072:	83 ec 08             	sub    esp,0x8
c0009075:	6a 68                	push   0x68
c0009077:	8d 45 ec             	lea    eax,[ebp-0x14]
c000907a:	50                   	push   eax
c000907b:	e8 be e2 ff ff       	call   c000733e <GDTEntry::setLimit(unsigned int)>
c0009080:	83 c4 10             	add    esp,0x10
c0009083:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0009087:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000908a:	83 e0 0f             	and    eax,0xf
c000908d:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009090:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0009093:	83 c8 40             	or     eax,0x40
c0009096:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009099:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000909e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090a4:	05 78 01 00 00       	add    eax,0x178
c00090a9:	83 ec 04             	sub    esp,0x4
c00090ac:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00090af:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00090b2:	50                   	push   eax
c00090b3:	e8 ba e2 ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00090b8:	83 c4 10             	add    esp,0x10
c00090bb:	89 c2                	mov    edx,eax
c00090bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090c0:	89 10                	mov    DWORD PTR [eax],edx
c00090c2:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00090c7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090cd:	05 78 01 00 00       	add    eax,0x178
c00090d2:	83 ec 0c             	sub    esp,0xc
c00090d5:	50                   	push   eax
c00090d6:	e8 c1 e2 ff ff       	call   c000739c <GDT::flush()>
c00090db:	83 c4 10             	add    esp,0x10
c00090de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00090e3:	c9                   	leave  
c00090e4:	c3                   	ret    
c00090e5:	90                   	nop

c00090e6 <ReservedFilename::read(unsigned long long, void*, int*)>:
c00090e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00090ea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00090ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00090f1:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00090f6:	75 08                	jne    c0009100 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00090f8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00090fe:	eb 38                	jmp    c0009138 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0009100:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009105:	75 17                	jne    c000911e <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0009107:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000910c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000910f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009115:	8b 10                	mov    edx,DWORD PTR [eax]
c0009117:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000911b:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000911e:	89 c1                	mov    ecx,eax
c0009120:	83 e1 fd             	and    ecx,0xfffffffd
c0009123:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0009129:	74 cd                	je     c00090f8 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000912b:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009130:	83 e0 ef             	and    eax,0xffffffef
c0009133:	83 f8 08             	cmp    eax,0x8
c0009136:	76 c0                	jbe    c00090f8 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009138:	31 c0                	xor    eax,eax
c000913a:	c3                   	ret    
c000913b:	90                   	nop

c000913c <ReservedFilename::isAtty()>:
c000913c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009140:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009143:	31 c0                	xor    eax,eax
c0009145:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000914b:	74 09                	je     c0009156 <ReservedFilename::isAtty()+0x1a>
c000914d:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0009153:	0f 94 c0             	sete   al
c0009156:	c3                   	ret    
c0009157:	90                   	nop

c0009158 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0009158:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000915c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009160:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009163:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009167:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000916c:	75 08                	jne    c0009176 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000916e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0009174:	eb 3d                	jmp    c00091b3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0009176:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000917b:	75 17                	jne    c0009194 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000917d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0009182:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009185:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000918b:	8b 10                	mov    edx,DWORD PTR [eax]
c000918d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009191:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0009194:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0009199:	75 04                	jne    c000919f <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000919b:	89 0a                	mov    DWORD PTR [edx],ecx
c000919d:	eb 14                	jmp    c00091b3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000919f:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00091a4:	74 c8                	je     c000916e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091a6:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00091ab:	83 e0 ef             	and    eax,0xffffffef
c00091ae:	83 f8 08             	cmp    eax,0x8
c00091b1:	76 bb                	jbe    c000916e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091b3:	31 c0                	xor    eax,eax
c00091b5:	c3                   	ret    

c00091b6 <UnixFile::getFileDescriptor()>:
c00091b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00091bd:	c3                   	ret    

c00091be <UnixFile::UnixFile(int)>:
c00091be:	53                   	push   ebx
c00091bf:	83 ec 28             	sub    esp,0x28
c00091c2:	ba bc 0b 02 c0       	mov    edx,0xc0020bbc
c00091c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091cb:	89 10                	mov    DWORD PTR [eax],edx
c00091cd:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00091d5:	0f 8f 90 01 00 00    	jg     c000936b <UnixFile::UnixFile(int)+0x1ad>
c00091db:	a1 60 32 02 c0       	mov    eax,ds:0xc0023260
c00091e0:	8d 50 01             	lea    edx,[eax+0x1]
c00091e3:	89 15 60 32 02 c0    	mov    DWORD PTR ds:0xc0023260,edx
c00091e9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00091ed:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00091f0:	83 ec 08             	sub    esp,0x8
c00091f3:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00091f7:	68 98 5f 02 c0       	push   0xc0025f98
c00091fc:	e8 97 64 01 00       	call   c001f698 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009201:	83 c4 10             	add    esp,0x10
c0009204:	a0 94 5f 02 c0       	mov    al,ds:0xc0025f94
c0009209:	83 f0 01             	xor    eax,0x1
c000920c:	0f b6 c0             	movzx  eax,al
c000920f:	85 c0                	test   eax,eax
c0009211:	0f 84 55 01 00 00    	je     c000936c <UnixFile::UnixFile(int)+0x1ae>
c0009217:	c6 05 94 5f 02 c0 01 	mov    BYTE PTR ds:0xc0025f94,0x1
c000921e:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0009226:	83 ec 0c             	sub    esp,0xc
c0009229:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000922d:	e8 84 e8 ff ff       	call   c0007ab6 <malloc>
c0009232:	83 c4 10             	add    esp,0x10
c0009235:	89 c3                	mov    ebx,eax
c0009237:	83 ec 08             	sub    esp,0x8
c000923a:	68 03 ff ff 0f       	push   0xfffff03
c000923f:	53                   	push   ebx
c0009240:	e8 2d 01 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009245:	83 c4 10             	add    esp,0x10
c0009248:	89 1d 8c 5f 02 c0    	mov    DWORD PTR ds:0xc0025f8c,ebx
c000924e:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0009256:	83 ec 0c             	sub    esp,0xc
c0009259:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000925d:	e8 54 e8 ff ff       	call   c0007ab6 <malloc>
c0009262:	83 c4 10             	add    esp,0x10
c0009265:	89 c3                	mov    ebx,eax
c0009267:	83 ec 08             	sub    esp,0x8
c000926a:	68 01 ff ff 0f       	push   0xfffff01
c000926f:	53                   	push   ebx
c0009270:	e8 fd 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009275:	83 c4 10             	add    esp,0x10
c0009278:	89 1d 90 5f 02 c0    	mov    DWORD PTR ds:0xc0025f90,ebx
c000927e:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0009286:	83 ec 0c             	sub    esp,0xc
c0009289:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000928d:	e8 24 e8 ff ff       	call   c0007ab6 <malloc>
c0009292:	83 c4 10             	add    esp,0x10
c0009295:	89 c3                	mov    ebx,eax
c0009297:	83 ec 08             	sub    esp,0x8
c000929a:	68 00 ff ff 0f       	push   0xfffff00
c000929f:	53                   	push   ebx
c00092a0:	e8 cd 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c00092a5:	83 c4 10             	add    esp,0x10
c00092a8:	89 1d 84 5f 02 c0    	mov    DWORD PTR ds:0xc0025f84,ebx
c00092ae:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00092b6:	83 ec 0c             	sub    esp,0xc
c00092b9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092bd:	e8 f4 e7 ff ff       	call   c0007ab6 <malloc>
c00092c2:	83 c4 10             	add    esp,0x10
c00092c5:	89 c3                	mov    ebx,eax
c00092c7:	83 ec 08             	sub    esp,0x8
c00092ca:	68 02 ff ff 0f       	push   0xfffff02
c00092cf:	53                   	push   ebx
c00092d0:	e8 9d 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c00092d5:	83 c4 10             	add    esp,0x10
c00092d8:	89 1d 88 5f 02 c0    	mov    DWORD PTR ds:0xc0025f88,ebx
c00092de:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00092e6:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00092eb:	7f 7f                	jg     c000936c <UnixFile::UnixFile(int)+0x1ae>
c00092ed:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00092f5:	83 ec 0c             	sub    esp,0xc
c00092f8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00092fc:	e8 b5 e7 ff ff       	call   c0007ab6 <malloc>
c0009301:	83 c4 10             	add    esp,0x10
c0009304:	89 c3                	mov    ebx,eax
c0009306:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000930a:	05 10 ff ff 0f       	add    eax,0xfffff10
c000930f:	83 ec 08             	sub    esp,0x8
c0009312:	50                   	push   eax
c0009313:	53                   	push   ebx
c0009314:	e8 59 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009319:	83 c4 10             	add    esp,0x10
c000931c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009320:	89 1c 85 60 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda0a0],ebx
c0009327:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000932f:	83 ec 0c             	sub    esp,0xc
c0009332:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009336:	e8 7b e7 ff ff       	call   c0007ab6 <malloc>
c000933b:	83 c4 10             	add    esp,0x10
c000933e:	89 c3                	mov    ebx,eax
c0009340:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009344:	05 20 ff ff 0f       	add    eax,0xfffff20
c0009349:	83 ec 08             	sub    esp,0x8
c000934c:	50                   	push   eax
c000934d:	53                   	push   ebx
c000934e:	e8 1f 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009353:	83 c4 10             	add    esp,0x10
c0009356:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000935a:	89 1c 85 20 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda0e0],ebx
c0009361:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009366:	e9 7b ff ff ff       	jmp    c00092e6 <UnixFile::UnixFile(int)+0x128>
c000936b:	90                   	nop
c000936c:	83 c4 28             	add    esp,0x28
c000936f:	5b                   	pop    ebx
c0009370:	c3                   	ret    
c0009371:	90                   	nop

c0009372 <ReservedFilename::ReservedFilename(int)>:
c0009372:	83 ec 0c             	sub    esp,0xc
c0009375:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009379:	83 ec 08             	sub    esp,0x8
c000937c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009380:	50                   	push   eax
c0009381:	e8 38 fe ff ff       	call   c00091be <UnixFile::UnixFile(int)>
c0009386:	83 c4 10             	add    esp,0x10
c0009389:	ba d8 0b 02 c0       	mov    edx,0xc0020bd8
c000938e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009392:	89 10                	mov    DWORD PTR [eax],edx
c0009394:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009398:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000939c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000939f:	90                   	nop
c00093a0:	83 c4 0c             	add    esp,0xc
c00093a3:	c3                   	ret    

c00093a4 <UnixFile::~UnixFile()>:
c00093a4:	83 ec 1c             	sub    esp,0x1c
c00093a7:	ba bc 0b 02 c0       	mov    edx,0xc0020bbc
c00093ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093b0:	89 10                	mov    DWORD PTR [eax],edx
c00093b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093b9:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00093be:	7f 76                	jg     c0009436 <UnixFile::~UnixFile()+0x92>
c00093c0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00093c8:	83 ec 0c             	sub    esp,0xc
c00093cb:	68 98 5f 02 c0       	push   0xc0025f98
c00093d0:	e8 97 63 01 00       	call   c001f76c <LinkedList<UnixFile>::getFirstElement()>
c00093d5:	83 c4 10             	add    esp,0x10
c00093d8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093dc:	83 ec 0c             	sub    esp,0xc
c00093df:	68 98 5f 02 c0       	push   0xc0025f98
c00093e4:	e8 8b 63 01 00       	call   c001f774 <LinkedList<UnixFile>::removeFirst()>
c00093e9:	83 c4 10             	add    esp,0x10
c00093ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00093f0:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00093f4:	74 43                	je     c0009439 <UnixFile::~UnixFile()+0x95>
c00093f6:	83 ec 08             	sub    esp,0x8
c00093f9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00093fd:	68 98 5f 02 c0       	push   0xc0025f98
c0009402:	e8 91 62 01 00       	call   c001f698 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009407:	83 c4 10             	add    esp,0x10
c000940a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000940e:	8d 50 01             	lea    edx,[eax+0x1]
c0009411:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009415:	3d 20 a1 07 00       	cmp    eax,0x7a120
c000941a:	0f 94 c0             	sete   al
c000941d:	0f b6 c0             	movzx  eax,al
c0009420:	85 c0                	test   eax,eax
c0009422:	74 a4                	je     c00093c8 <UnixFile::~UnixFile()+0x24>
c0009424:	83 ec 0c             	sub    esp,0xc
c0009427:	68 94 0b 02 c0       	push   0xc0020b94
c000942c:	e8 48 7f 00 00       	call   c0011379 <KePanic(char const*)>
c0009431:	83 c4 10             	add    esp,0x10
c0009434:	eb 92                	jmp    c00093c8 <UnixFile::~UnixFile()+0x24>
c0009436:	90                   	nop
c0009437:	eb 01                	jmp    c000943a <UnixFile::~UnixFile()+0x96>
c0009439:	90                   	nop
c000943a:	90                   	nop
c000943b:	83 c4 1c             	add    esp,0x1c
c000943e:	c3                   	ret    
c000943f:	90                   	nop

c0009440 <UnixFile::~UnixFile()>:
c0009440:	83 ec 0c             	sub    esp,0xc
c0009443:	83 ec 0c             	sub    esp,0xc
c0009446:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000944a:	e8 55 ff ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c000944f:	83 c4 10             	add    esp,0x10
c0009452:	83 ec 08             	sub    esp,0x8
c0009455:	6a 0c                	push   0xc
c0009457:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000945b:	e8 b8 13 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c0009460:	83 c4 10             	add    esp,0x10
c0009463:	83 c4 0c             	add    esp,0xc
c0009466:	c3                   	ret    
c0009467:	90                   	nop

c0009468 <ReservedFilename::~ReservedFilename()>:
c0009468:	83 ec 0c             	sub    esp,0xc
c000946b:	ba d8 0b 02 c0       	mov    edx,0xc0020bd8
c0009470:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009474:	89 10                	mov    DWORD PTR [eax],edx
c0009476:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000947a:	83 ec 0c             	sub    esp,0xc
c000947d:	50                   	push   eax
c000947e:	e8 21 ff ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c0009483:	83 c4 10             	add    esp,0x10
c0009486:	90                   	nop
c0009487:	83 c4 0c             	add    esp,0xc
c000948a:	c3                   	ret    
c000948b:	90                   	nop

c000948c <ReservedFilename::~ReservedFilename()>:
c000948c:	83 ec 0c             	sub    esp,0xc
c000948f:	83 ec 0c             	sub    esp,0xc
c0009492:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009496:	e8 cd ff ff ff       	call   c0009468 <ReservedFilename::~ReservedFilename()>
c000949b:	83 c4 10             	add    esp,0x10
c000949e:	83 ec 08             	sub    esp,0x8
c00094a1:	6a 0c                	push   0xc
c00094a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00094a7:	e8 6c 13 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c00094ac:	83 c4 10             	add    esp,0x10
c00094af:	83 c4 0c             	add    esp,0xc
c00094b2:	c3                   	ret    

c00094b3 <KeGetFileFromDescriptor(int)>:
c00094b3:	53                   	push   ebx
c00094b4:	83 ec 08             	sub    esp,0x8
c00094b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094bb:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00094c1:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00094c7:	7f 2c                	jg     c00094f5 <KeGetFileFromDescriptor(int)+0x42>
c00094c9:	83 ec 0c             	sub    esp,0xc
c00094cc:	68 98 5f 02 c0       	push   0xc0025f98
c00094d1:	e8 96 62 01 00       	call   c001f76c <LinkedList<UnixFile>::getFirstElement()>
c00094d6:	83 c4 10             	add    esp,0x10
c00094d9:	85 c0                	test   eax,eax
c00094db:	75 04                	jne    c00094e1 <KeGetFileFromDescriptor(int)+0x2e>
c00094dd:	31 c0                	xor    eax,eax
c00094df:	eb 6e                	jmp    c000954f <KeGetFileFromDescriptor(int)+0x9c>
c00094e1:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00094e4:	74 69                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c00094e6:	52                   	push   edx
c00094e7:	52                   	push   edx
c00094e8:	50                   	push   eax
c00094e9:	68 98 5f 02 c0       	push   0xc0025f98
c00094ee:	e8 23 63 01 00       	call   c001f816 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00094f3:	eb e1                	jmp    c00094d6 <KeGetFileFromDescriptor(int)+0x23>
c00094f5:	a1 8c 5f 02 c0       	mov    eax,ds:0xc0025f8c
c00094fa:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0009500:	74 4d                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c0009502:	a1 90 5f 02 c0       	mov    eax,ds:0xc0025f90
c0009507:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000950d:	74 40                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c000950f:	a1 88 5f 02 c0       	mov    eax,ds:0xc0025f88
c0009514:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000951a:	74 33                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c000951c:	a1 84 5f 02 c0       	mov    eax,ds:0xc0025f84
c0009521:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0009527:	74 26                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c0009529:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000952f:	83 f8 08             	cmp    eax,0x8
c0009532:	77 09                	ja     c000953d <KeGetFileFromDescriptor(int)+0x8a>
c0009534:	8b 04 85 60 5f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda0a0]
c000953b:	eb 12                	jmp    c000954f <KeGetFileFromDescriptor(int)+0x9c>
c000953d:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0009543:	83 fb 08             	cmp    ebx,0x8
c0009546:	77 95                	ja     c00094dd <KeGetFileFromDescriptor(int)+0x2a>
c0009548:	8b 04 9d 20 5f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffda0e0]
c000954f:	83 c4 08             	add    esp,0x8
c0009552:	5b                   	pop    ebx
c0009553:	c3                   	ret    

c0009554 <__static_initialization_and_destruction_0(int, int)>:
c0009554:	83 ec 0c             	sub    esp,0xc
c0009557:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000955c:	75 34                	jne    c0009592 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000955e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0009566:	75 2a                	jne    c0009592 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009568:	83 ec 0c             	sub    esp,0xc
c000956b:	68 98 5f 02 c0       	push   0xc0025f98
c0009570:	e8 e1 60 01 00       	call   c001f656 <LinkedList<UnixFile>::LinkedList()>
c0009575:	83 c4 10             	add    esp,0x10
c0009578:	83 ec 04             	sub    esp,0x4
c000957b:	68 f0 31 02 c0       	push   0xc00231f0
c0009580:	68 98 5f 02 c0       	push   0xc0025f98
c0009585:	68 54 f6 01 c0       	push   0xc001f654
c000958a:	e8 39 12 00 00       	call   c000a7c8 <__cxa_atexit>
c000958f:	83 c4 10             	add    esp,0x10
c0009592:	90                   	nop
c0009593:	83 c4 0c             	add    esp,0xc
c0009596:	c3                   	ret    

c0009597 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0009597:	83 ec 0c             	sub    esp,0xc
c000959a:	83 ec 08             	sub    esp,0x8
c000959d:	68 ff ff 00 00       	push   0xffff
c00095a2:	6a 01                	push   0x1
c00095a4:	e8 ab ff ff ff       	call   c0009554 <__static_initialization_and_destruction_0(int, int)>
c00095a9:	83 c4 10             	add    esp,0x10
c00095ac:	83 c4 0c             	add    esp,0xc
c00095af:	c3                   	ret    

c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00095b0:	53                   	push   ebx
c00095b1:	8b 15 68 32 02 c0    	mov    edx,DWORD PTR ds:0xc0023268
c00095b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095bb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00095bf:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00095c5:	89 d8                	mov    eax,ebx
c00095c7:	d1 e8                	shr    eax,1
c00095c9:	01 d0                	add    eax,edx
c00095cb:	80 e3 01             	and    bl,0x1
c00095ce:	8a 10                	mov    dl,BYTE PTR [eax]
c00095d0:	75 09                	jne    c00095db <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00095d2:	83 e2 f0             	and    edx,0xfffffff0
c00095d5:	09 ca                	or     edx,ecx
c00095d7:	88 10                	mov    BYTE PTR [eax],dl
c00095d9:	5b                   	pop    ebx
c00095da:	c3                   	ret    
c00095db:	83 e2 0f             	and    edx,0xf
c00095de:	0f b6 c9             	movzx  ecx,cl
c00095e1:	c1 e1 04             	shl    ecx,0x4
c00095e4:	09 ca                	or     edx,ecx
c00095e6:	88 10                	mov    BYTE PTR [eax],dl
c00095e8:	5b                   	pop    ebx
c00095e9:	c3                   	ret    

c00095ea <Virt::getPageState(unsigned long)>:
c00095ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095ee:	8b 0d 68 32 02 c0    	mov    ecx,DWORD PTR ds:0xc0023268
c00095f4:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00095fa:	89 d0                	mov    eax,edx
c00095fc:	d1 e8                	shr    eax,1
c00095fe:	80 e2 01             	and    dl,0x1
c0009601:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0009604:	74 03                	je     c0009609 <Virt::getPageState(unsigned long)+0x1f>
c0009606:	c1 e8 04             	shr    eax,0x4
c0009609:	83 e0 0f             	and    eax,0xf
c000960c:	c3                   	ret    

c000960d <Virt::allocateKernelVirtualPages(int)>:
c000960d:	55                   	push   ebp
c000960e:	31 ed                	xor    ebp,ebp
c0009610:	57                   	push   edi
c0009611:	31 ff                	xor    edi,edi
c0009613:	56                   	push   esi
c0009614:	53                   	push   ebx
c0009615:	31 db                	xor    ebx,ebx
c0009617:	83 ec 0c             	sub    esp,0xc
c000961a:	8b 35 64 32 02 c0    	mov    esi,DWORD PTR ds:0xc0023264
c0009620:	56                   	push   esi
c0009621:	e8 c4 ff ff ff       	call   c00095ea <Virt::getPageState(unsigned long)>
c0009626:	5a                   	pop    edx
c0009627:	84 c0                	test   al,al
c0009629:	75 41                	jne    c000966c <Virt::allocateKernelVirtualPages(int)+0x5f>
c000962b:	85 db                	test   ebx,ebx
c000962d:	75 02                	jne    c0009631 <Virt::allocateKernelVirtualPages(int)+0x24>
c000962f:	89 f5                	mov    ebp,esi
c0009631:	83 c3 01             	add    ebx,0x1
c0009634:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0009638:	74 5f                	je     c0009699 <Virt::allocateKernelVirtualPages(int)+0x8c>
c000963a:	83 c6 01             	add    esi,0x1
c000963d:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0009643:	76 34                	jbe    c0009679 <Virt::allocateKernelVirtualPages(int)+0x6c>
c0009645:	c7 05 64 32 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0023264,0xc8000
c000964f:	f7 c7 01 00 00 00    	test   edi,0x1
c0009655:	75 2a                	jne    c0009681 <Virt::allocateKernelVirtualPages(int)+0x74>
c0009657:	be 00 80 0c 00       	mov    esi,0xc8000
c000965c:	bf 01 00 00 00       	mov    edi,0x1
c0009661:	56                   	push   esi
c0009662:	e8 83 ff ff ff       	call   c00095ea <Virt::getPageState(unsigned long)>
c0009667:	5a                   	pop    edx
c0009668:	84 c0                	test   al,al
c000966a:	74 bf                	je     c000962b <Virt::allocateKernelVirtualPages(int)+0x1e>
c000966c:	31 db                	xor    ebx,ebx
c000966e:	83 c6 01             	add    esi,0x1
c0009671:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0009677:	77 cc                	ja     c0009645 <Virt::allocateKernelVirtualPages(int)+0x38>
c0009679:	89 35 64 32 02 c0    	mov    DWORD PTR ds:0xc0023264,esi
c000967f:	eb 9f                	jmp    c0009620 <Virt::allocateKernelVirtualPages(int)+0x13>
c0009681:	83 ec 0c             	sub    esp,0xc
c0009684:	68 ec 0b 02 c0       	push   0xc0020bec
c0009689:	e8 eb 7c 00 00       	call   c0011379 <KePanic(char const*)>
c000968e:	8b 35 64 32 02 c0    	mov    esi,DWORD PTR ds:0xc0023264
c0009694:	83 c4 10             	add    esp,0x10
c0009697:	eb 87                	jmp    c0009620 <Virt::allocateKernelVirtualPages(int)+0x13>
c0009699:	89 2d 64 32 02 c0    	mov    DWORD PTR ds:0xc0023264,ebp
c000969f:	83 fb 01             	cmp    ebx,0x1
c00096a2:	74 6f                	je     c0009713 <Virt::allocateKernelVirtualPages(int)+0x106>
c00096a4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00096a8:	85 c9                	test   ecx,ecx
c00096aa:	74 49                	je     c00096f5 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00096ac:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00096b0:	89 e8                	mov    eax,ebp
c00096b2:	31 db                	xor    ebx,ebx
c00096b4:	8d 79 ff             	lea    edi,[ecx-0x1]
c00096b7:	eb 18                	jmp    c00096d1 <Virt::allocateKernelVirtualPages(int)+0xc4>
c00096b9:	6a 01                	push   0x1
c00096bb:	83 c3 01             	add    ebx,0x1
c00096be:	50                   	push   eax
c00096bf:	e8 ec fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096c4:	58                   	pop    eax
c00096c5:	5a                   	pop    edx
c00096c6:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00096ca:	74 29                	je     c00096f5 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00096cc:	a1 64 32 02 c0       	mov    eax,ds:0xc0023264
c00096d1:	8d 50 01             	lea    edx,[eax+0x1]
c00096d4:	85 db                	test   ebx,ebx
c00096d6:	89 15 64 32 02 c0    	mov    DWORD PTR ds:0xc0023264,edx
c00096dc:	74 24                	je     c0009702 <Virt::allocateKernelVirtualPages(int)+0xf5>
c00096de:	39 df                	cmp    edi,ebx
c00096e0:	75 d7                	jne    c00096b9 <Virt::allocateKernelVirtualPages(int)+0xac>
c00096e2:	6a 03                	push   0x3
c00096e4:	83 c3 01             	add    ebx,0x1
c00096e7:	50                   	push   eax
c00096e8:	e8 c3 fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096ed:	59                   	pop    ecx
c00096ee:	5e                   	pop    esi
c00096ef:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00096f3:	75 d7                	jne    c00096cc <Virt::allocateKernelVirtualPages(int)+0xbf>
c00096f5:	83 c4 0c             	add    esp,0xc
c00096f8:	89 e8                	mov    eax,ebp
c00096fa:	5b                   	pop    ebx
c00096fb:	c1 e0 0c             	shl    eax,0xc
c00096fe:	5e                   	pop    esi
c00096ff:	5f                   	pop    edi
c0009700:	5d                   	pop    ebp
c0009701:	c3                   	ret    
c0009702:	6a 02                	push   0x2
c0009704:	bb 01 00 00 00       	mov    ebx,0x1
c0009709:	50                   	push   eax
c000970a:	e8 a1 fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000970f:	58                   	pop    eax
c0009710:	5a                   	pop    edx
c0009711:	eb b9                	jmp    c00096cc <Virt::allocateKernelVirtualPages(int)+0xbf>
c0009713:	6a 04                	push   0x4
c0009715:	8d 45 01             	lea    eax,[ebp+0x1]
c0009718:	55                   	push   ebp
c0009719:	a3 64 32 02 c0       	mov    ds:0xc0023264,eax
c000971e:	e8 8d fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009723:	5b                   	pop    ebx
c0009724:	89 e8                	mov    eax,ebp
c0009726:	5e                   	pop    esi
c0009727:	c1 e0 0c             	shl    eax,0xc
c000972a:	83 c4 0c             	add    esp,0xc
c000972d:	5b                   	pop    ebx
c000972e:	5e                   	pop    esi
c000972f:	5f                   	pop    edi
c0009730:	5d                   	pop    ebp
c0009731:	c3                   	ret    

c0009732 <Virt::freeSwapfilePage(unsigned long)>:
c0009732:	53                   	push   ebx
c0009733:	8b 15 ac 5f 02 c0    	mov    edx,DWORD PTR ds:0xc0025fac
c0009739:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000973d:	b8 01 00 00 00       	mov    eax,0x1
c0009742:	89 cb                	mov    ebx,ecx
c0009744:	d3 e0                	shl    eax,cl
c0009746:	c1 eb 05             	shr    ebx,0x5
c0009749:	f7 d0                	not    eax
c000974b:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c000974e:	21 c1                	and    ecx,eax
c0009750:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0009753:	5b                   	pop    ebx
c0009754:	c3                   	ret    

c0009755 <Virt::swapIDToSector(unsigned long)>:
c0009755:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009759:	8b 15 6c 32 02 c0    	mov    edx,DWORD PTR ds:0xc002326c
c000975f:	8b 0d 74 32 02 c0    	mov    ecx,DWORD PTR ds:0xc0023274
c0009765:	0f af c2             	imul   eax,edx
c0009768:	01 c8                	add    eax,ecx
c000976a:	c3                   	ret    

c000976b <Virt::allocateSwapfilePage()>:
c000976b:	55                   	push   ebp
c000976c:	31 d2                	xor    edx,edx
c000976e:	57                   	push   edi
c000976f:	56                   	push   esi
c0009770:	53                   	push   ebx
c0009771:	83 ec 0c             	sub    esp,0xc
c0009774:	8b 0d 6c 32 02 c0    	mov    ecx,DWORD PTR ds:0xc002326c
c000977a:	a1 70 32 02 c0       	mov    eax,ds:0xc0023270
c000977f:	f7 f1                	div    ecx
c0009781:	39 0d 70 32 02 c0    	cmp    DWORD PTR ds:0xc0023270,ecx
c0009787:	72 2f                	jb     c00097b8 <Virt::allocateSwapfilePage()+0x4d>
c0009789:	8b 35 ac 5f 02 c0    	mov    esi,DWORD PTR ds:0xc0025fac
c000978f:	8b 16                	mov    edx,DWORD PTR [esi]
c0009791:	f6 c2 01             	test   dl,0x1
c0009794:	74 3e                	je     c00097d4 <Virt::allocateSwapfilePage()+0x69>
c0009796:	31 c9                	xor    ecx,ecx
c0009798:	bf 01 00 00 00       	mov    edi,0x1
c000979d:	eb 12                	jmp    c00097b1 <Virt::allocateSwapfilePage()+0x46>
c000979f:	89 fd                	mov    ebp,edi
c00097a1:	89 ca                	mov    edx,ecx
c00097a3:	d3 e5                	shl    ebp,cl
c00097a5:	c1 ea 05             	shr    edx,0x5
c00097a8:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00097ab:	8b 13                	mov    edx,DWORD PTR [ebx]
c00097ad:	85 ea                	test   edx,ebp
c00097af:	74 2c                	je     c00097dd <Virt::allocateSwapfilePage()+0x72>
c00097b1:	83 c1 01             	add    ecx,0x1
c00097b4:	39 c8                	cmp    eax,ecx
c00097b6:	77 e7                	ja     c000979f <Virt::allocateSwapfilePage()+0x34>
c00097b8:	83 ec 0c             	sub    esp,0xc
c00097bb:	68 80 0e 02 c0       	push   0xc0020e80
c00097c0:	e8 b4 7b 00 00       	call   c0011379 <KePanic(char const*)>
c00097c5:	83 c4 10             	add    esp,0x10
c00097c8:	31 c9                	xor    ecx,ecx
c00097ca:	83 c4 0c             	add    esp,0xc
c00097cd:	89 c8                	mov    eax,ecx
c00097cf:	5b                   	pop    ebx
c00097d0:	5e                   	pop    esi
c00097d1:	5f                   	pop    edi
c00097d2:	5d                   	pop    ebp
c00097d3:	c3                   	ret    
c00097d4:	89 f3                	mov    ebx,esi
c00097d6:	bd 01 00 00 00       	mov    ebp,0x1
c00097db:	31 c9                	xor    ecx,ecx
c00097dd:	09 ea                	or     edx,ebp
c00097df:	89 c8                	mov    eax,ecx
c00097e1:	89 13                	mov    DWORD PTR [ebx],edx
c00097e3:	83 c4 0c             	add    esp,0xc
c00097e6:	5b                   	pop    ebx
c00097e7:	5e                   	pop    esi
c00097e8:	5f                   	pop    edi
c00097e9:	5d                   	pop    ebp
c00097ea:	c3                   	ret    

c00097eb <Virt::virtualMemorySetup()>:
c00097eb:	53                   	push   ebx
c00097ec:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097f1:	6a 0f                	push   0xf
c00097f3:	53                   	push   ebx
c00097f4:	83 c3 01             	add    ebx,0x1
c00097f7:	e8 b4 fd ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097fc:	58                   	pop    eax
c00097fd:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009803:	5a                   	pop    edx
c0009804:	75 eb                	jne    c00097f1 <Virt::virtualMemorySetup()+0x6>
c0009806:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000980b:	6a 00                	push   0x0
c000980d:	53                   	push   ebx
c000980e:	83 c3 01             	add    ebx,0x1
c0009811:	e8 9a fd ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009816:	59                   	pop    ecx
c0009817:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000981d:	58                   	pop    eax
c000981e:	75 eb                	jne    c000980b <Virt::virtualMemorySetup()+0x20>
c0009820:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009825:	6a 0f                	push   0xf
c0009827:	53                   	push   ebx
c0009828:	83 c3 01             	add    ebx,0x1
c000982b:	e8 80 fd ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009830:	58                   	pop    eax
c0009831:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009837:	5a                   	pop    edx
c0009838:	75 eb                	jne    c0009825 <Virt::virtualMemorySetup()+0x3a>
c000983a:	5b                   	pop    ebx
c000983b:	c3                   	ret    

c000983c <Virt::setupPageSwapping(int)>:
c000983c:	53                   	push   ebx
c000983d:	83 ec 0c             	sub    esp,0xc
c0009840:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009844:	a1 88 88 02 c0       	mov    eax,ds:0xc0028888
c0009849:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000984f:	8b 10                	mov    edx,DWORD PTR [eax]
c0009851:	53                   	push   ebx
c0009852:	c1 e3 0b             	shl    ebx,0xb
c0009855:	68 97 0e 02 c0       	push   0xc0020e97
c000985a:	50                   	push   eax
c000985b:	ff 52 60             	call   DWORD PTR [edx+0x60]
c000985e:	89 1d 70 32 02 c0    	mov    DWORD PTR ds:0xc0023270,ebx
c0009864:	c6 05 78 32 02 c0 43 	mov    BYTE PTR ds:0xc0023278,0x43
c000986b:	c1 eb 08             	shr    ebx,0x8
c000986e:	a3 74 32 02 c0       	mov    ds:0xc0023274,eax
c0009873:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009876:	c7 05 6c 32 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002326c,0x8
c0009880:	e8 31 e2 ff ff       	call   c0007ab6 <malloc>
c0009885:	83 c4 0c             	add    esp,0xc
c0009888:	89 c1                	mov    ecx,eax
c000988a:	a3 ac 5f 02 c0       	mov    ds:0xc0025fac,eax
c000988f:	31 d2                	xor    edx,edx
c0009891:	a1 70 32 02 c0       	mov    eax,ds:0xc0023270
c0009896:	f7 35 6c 32 02 c0    	div    DWORD PTR ds:0xc002326c
c000989c:	c1 e8 05             	shr    eax,0x5
c000989f:	50                   	push   eax
c00098a0:	6a 00                	push   0x0
c00098a2:	51                   	push   ecx
c00098a3:	e8 48 6c ff ff       	call   c00004f0 <memset>
c00098a8:	83 c4 18             	add    esp,0x18
c00098ab:	5b                   	pop    ebx
c00098ac:	c3                   	ret    
c00098ad:	90                   	nop

c00098ae <VAS::setCPUSpecific(unsigned long)>:
c00098ae:	c3                   	ret    
c00098af:	90                   	nop

c00098b0 <VAS::VAS(VAS*)>:
c00098b0:	83 ec 0c             	sub    esp,0xc
c00098b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098b7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00098be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098c2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00098c9:	83 ec 0c             	sub    esp,0xc
c00098cc:	68 0c 0c 02 c0       	push   0xc0020c0c
c00098d1:	e8 a3 7a 00 00       	call   c0011379 <KePanic(char const*)>
c00098d6:	83 c4 10             	add    esp,0x10
c00098d9:	90                   	nop
c00098da:	83 c4 0c             	add    esp,0xc
c00098dd:	c3                   	ret    

c00098de <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00098de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098e2:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00098e7:	89 c2                	mov    edx,eax
c00098e9:	c1 e8 0a             	shr    eax,0xa
c00098ec:	c1 ea 16             	shr    edx,0x16
c00098ef:	83 f9 01             	cmp    ecx,0x1
c00098f2:	19 c9                	sbb    ecx,ecx
c00098f4:	c1 e2 0c             	shl    edx,0xc
c00098f7:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00098fd:	25 fc 0f 00 00       	and    eax,0xffc
c0009902:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0009909:	01 d0                	add    eax,edx
c000990b:	c3                   	ret    

c000990c <VAS::getPageTableEntry(unsigned long)>:
c000990c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009910:	89 ca                	mov    edx,ecx
c0009912:	c1 e9 0a             	shr    ecx,0xa
c0009915:	c1 ea 16             	shr    edx,0x16
c0009918:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000991e:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0009924:	c1 e0 0c             	shl    eax,0xc
c0009927:	8d 04 08             	lea    eax,[eax+ecx*1]
c000992a:	c3                   	ret    

c000992b <Virt::freeKernelVirtualPages(unsigned long)>:
c000992b:	55                   	push   ebp
c000992c:	57                   	push   edi
c000992d:	bf 01 00 00 00       	mov    edi,0x1
c0009932:	56                   	push   esi
c0009933:	53                   	push   ebx
c0009934:	83 ec 1c             	sub    esp,0x1c
c0009937:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000993b:	c1 ee 0c             	shr    esi,0xc
c000993e:	eb 48                	jmp    c0009988 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c0009940:	83 ec 08             	sub    esp,0x8
c0009943:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c0009948:	55                   	push   ebp
c0009949:	50                   	push   eax
c000994a:	e8 bd ff ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000994f:	83 c4 10             	add    esp,0x10
c0009952:	8b 10                	mov    edx,DWORD PTR [eax]
c0009954:	f6 c6 04             	test   dh,0x4
c0009957:	75 70                	jne    c00099c9 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0009959:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000995f:	83 fb 04             	cmp    ebx,0x4
c0009962:	0f 84 8a 00 00 00    	je     c00099f2 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0009968:	83 fb 02             	cmp    ebx,0x2
c000996b:	0f 84 9a 00 00 00    	je     c0009a0b <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c0009971:	83 fb 03             	cmp    ebx,0x3
c0009974:	0f 84 be 00 00 00    	je     c0009a38 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c000997a:	83 fb 01             	cmp    ebx,0x1
c000997d:	0f 84 a2 00 00 00    	je     c0009a25 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009983:	83 c6 01             	add    esi,0x1
c0009986:	31 ff                	xor    edi,edi
c0009988:	56                   	push   esi
c0009989:	89 f5                	mov    ebp,esi
c000998b:	e8 5a fc ff ff       	call   c00095ea <Virt::getPageState(unsigned long)>
c0009990:	c1 e5 0c             	shl    ebp,0xc
c0009993:	0f b6 d8             	movzx  ebx,al
c0009996:	5a                   	pop    edx
c0009997:	85 db                	test   ebx,ebx
c0009999:	75 a5                	jne    c0009940 <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c000999b:	83 ec 0c             	sub    esp,0xc
c000999e:	68 ae 0e 02 c0       	push   0xc0020eae
c00099a3:	e8 d1 79 00 00       	call   c0011379 <KePanic(char const*)>
c00099a8:	5a                   	pop    edx
c00099a9:	59                   	pop    ecx
c00099aa:	55                   	push   ebp
c00099ab:	8b 2d b0 5f 02 c0    	mov    ebp,DWORD PTR ds:0xc0025fb0
c00099b1:	55                   	push   ebp
c00099b2:	e8 55 ff ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c00099b7:	83 c4 10             	add    esp,0x10
c00099ba:	8b 10                	mov    edx,DWORD PTR [eax]
c00099bc:	f6 c6 04             	test   dh,0x4
c00099bf:	75 08                	jne    c00099c9 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c00099c1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099c7:	eb ba                	jmp    c0009983 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00099c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00099cd:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00099d3:	83 ec 0c             	sub    esp,0xc
c00099d6:	52                   	push   edx
c00099d7:	e8 7a e3 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c00099dc:	83 c4 10             	add    esp,0x10
c00099df:	83 fb 04             	cmp    ebx,0x4
c00099e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099e6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099ec:	0f 85 76 ff ff ff    	jne    c0009968 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c00099f2:	83 e7 01             	and    edi,0x1
c00099f5:	75 46                	jne    c0009a3d <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c00099f7:	c7 44 24 30 30 0c 02 c0 	mov    DWORD PTR [esp+0x30],0xc0020c30
c00099ff:	83 c4 1c             	add    esp,0x1c
c0009a02:	5b                   	pop    ebx
c0009a03:	5e                   	pop    esi
c0009a04:	5f                   	pop    edi
c0009a05:	5d                   	pop    ebp
c0009a06:	e9 6e 79 00 00       	jmp    c0011379 <KePanic(char const*)>
c0009a0b:	83 e7 01             	and    edi,0x1
c0009a0e:	75 15                	jne    c0009a25 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009a10:	83 ec 0c             	sub    esp,0xc
c0009a13:	68 ca 0e 02 c0       	push   0xc0020eca
c0009a18:	e8 5c 79 00 00       	call   c0011379 <KePanic(char const*)>
c0009a1d:	83 c4 10             	add    esp,0x10
c0009a20:	e9 5e ff ff ff       	jmp    c0009983 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a25:	83 ec 08             	sub    esp,0x8
c0009a28:	6a 00                	push   0x0
c0009a2a:	56                   	push   esi
c0009a2b:	e8 80 fb ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a30:	83 c4 10             	add    esp,0x10
c0009a33:	e9 4b ff ff ff       	jmp    c0009983 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a38:	83 e7 01             	and    edi,0x1
c0009a3b:	75 16                	jne    c0009a53 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0009a3d:	83 ec 08             	sub    esp,0x8
c0009a40:	6a 00                	push   0x0
c0009a42:	56                   	push   esi
c0009a43:	e8 68 fb ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a48:	83 c4 10             	add    esp,0x10
c0009a4b:	83 c4 1c             	add    esp,0x1c
c0009a4e:	5b                   	pop    ebx
c0009a4f:	5e                   	pop    esi
c0009a50:	5f                   	pop    edi
c0009a51:	5d                   	pop    ebp
c0009a52:	c3                   	ret    
c0009a53:	c7 44 24 30 e6 0e 02 c0 	mov    DWORD PTR [esp+0x30],0xc0020ee6
c0009a5b:	83 c4 1c             	add    esp,0x1c
c0009a5e:	5b                   	pop    ebx
c0009a5f:	5e                   	pop    esi
c0009a60:	5f                   	pop    edi
c0009a61:	5d                   	pop    ebp
c0009a62:	e9 12 79 00 00       	jmp    c0011379 <KePanic(char const*)>
c0009a67:	90                   	nop

c0009a68 <VAS::freeAllocatedPages(unsigned long)>:
c0009a68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a6c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a70:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009a74:	74 09                	je     c0009a7f <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009a76:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009a7a:	e9 ac fe ff ff       	jmp    c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0009a7f:	c7 44 24 04 54 0c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020c54
c0009a87:	e9 b9 0e 00 00       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>

c0009a8c <VAS::virtualToPhysical(unsigned long)>:
c0009a8c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a90:	50                   	push   eax
c0009a91:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a95:	52                   	push   edx
c0009a96:	e8 71 fe ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c0009a9b:	59                   	pop    ecx
c0009a9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a9e:	5a                   	pop    edx
c0009a9f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009aa4:	c3                   	ret    
c0009aa5:	90                   	nop

c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0009aa6:	55                   	push   ebp
c0009aa7:	57                   	push   edi
c0009aa8:	56                   	push   esi
c0009aa9:	53                   	push   ebx
c0009aaa:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009aae:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009ab2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009ab6:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009aba:	85 db                	test   ebx,ebx
c0009abc:	7e 24                	jle    c0009ae2 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0009abe:	c1 e3 0c             	shl    ebx,0xc
c0009ac1:	01 f3                	add    ebx,esi
c0009ac3:	56                   	push   esi
c0009ac4:	81 c6 00 10 00 00    	add    esi,0x1000
c0009aca:	55                   	push   ebp
c0009acb:	e8 3c fe ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c0009ad0:	5a                   	pop    edx
c0009ad1:	59                   	pop    ecx
c0009ad2:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009ad4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009ad8:	21 f9                	and    ecx,edi
c0009ada:	09 d1                	or     ecx,edx
c0009adc:	39 f3                	cmp    ebx,esi
c0009ade:	89 08                	mov    DWORD PTR [eax],ecx
c0009ae0:	75 e1                	jne    c0009ac3 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0009ae2:	5b                   	pop    ebx
c0009ae3:	5e                   	pop    esi
c0009ae4:	5f                   	pop    edi
c0009ae5:	5d                   	pop    ebp
c0009ae6:	c3                   	ret    
c0009ae7:	90                   	nop

c0009ae8 <VAS::VAS()>:
c0009ae8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009aec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009af3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009af7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009afe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b02:	a3 b0 5f 02 c0       	mov    ds:0xc0025fb0,eax
c0009b07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b0b:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009b0f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b13:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009b16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b1a:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009b21:	ba 7d 40 02 c0       	mov    edx,0xc002407d
c0009b26:	b8 00 40 02 c0       	mov    eax,0xc0024000
c0009b2b:	29 c2                	sub    edx,eax
c0009b2d:	89 d0                	mov    eax,edx
c0009b2f:	05 ff 0f 00 00       	add    eax,0xfff
c0009b34:	c1 e8 0c             	shr    eax,0xc
c0009b37:	89 c2                	mov    edx,eax
c0009b39:	b8 00 40 02 c0       	mov    eax,0xc0024000
c0009b3e:	6a 04                	push   0x4
c0009b40:	6a ff                	push   0xffffffff
c0009b42:	52                   	push   edx
c0009b43:	50                   	push   eax
c0009b44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b48:	e8 59 ff ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b4d:	83 c4 14             	add    esp,0x14
c0009b50:	90                   	nop
c0009b51:	c3                   	ret    

c0009b52 <VAS::setToWriteCombining(unsigned long, int)>:
c0009b52:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0009b57:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b5d:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009b64:	75 01                	jne    c0009b67 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009b66:	c3                   	ret    
c0009b67:	68 80 00 00 00       	push   0x80
c0009b6c:	6a ff                	push   0xffffffff
c0009b6e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009b72:	50                   	push   eax
c0009b73:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009b77:	52                   	push   edx
c0009b78:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009b7c:	51                   	push   ecx
c0009b7d:	e8 24 ff ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b82:	83 c4 14             	add    esp,0x14
c0009b85:	c3                   	ret    

c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>:
c0009b86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b8a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009b8d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b91:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009b94:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0009b99:	83 f8 01             	cmp    eax,0x1
c0009b9c:	19 c0                	sbb    eax,eax
c0009b9e:	83 ca 03             	or     edx,0x3
c0009ba1:	83 e0 fc             	and    eax,0xfffffffc
c0009ba4:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009bab:	0f 20 d8             	mov    eax,cr3
c0009bae:	0f 22 d8             	mov    cr3,eax
c0009bb1:	c3                   	ret    

c0009bb2 <VAS::~VAS()>:
c0009bb2:	83 ec 2c             	sub    esp,0x2c
c0009bb5:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009bbd:	fa                   	cli    
c0009bbe:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0009bc3:	83 c0 01             	add    eax,0x1
c0009bc6:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0009bcb:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009bd0:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bd2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009bd5:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009bdb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009bdf:	6a 01                	push   0x1
c0009be1:	50                   	push   eax
c0009be2:	e8 9f ff ff ff       	call   c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>
c0009be7:	83 c4 0c             	add    esp,0xc
c0009bea:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009bf2:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009bfa:	0f 8f d8 00 00 00    	jg     c0009cd8 <VAS::~VAS()+0x126>
c0009c00:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009c04:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009c07:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009c0b:	c1 e2 02             	shl    edx,0x2
c0009c0e:	01 d0                	add    eax,edx
c0009c10:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c12:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009c16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c1a:	83 e0 01             	and    eax,0x1
c0009c1d:	0f 84 ab 00 00 00    	je     c0009cce <VAS::~VAS()+0x11c>
c0009c23:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009c2b:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009c33:	7f 74                	jg     c0009ca9 <VAS::~VAS()+0xf7>
c0009c35:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c39:	c1 e0 0a             	shl    eax,0xa
c0009c3c:	89 c2                	mov    edx,eax
c0009c3e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009c42:	01 d0                	add    eax,edx
c0009c44:	c1 e0 0c             	shl    eax,0xc
c0009c47:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c4b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c50:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c52:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c55:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009c5b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009c5f:	6a 01                	push   0x1
c0009c61:	50                   	push   eax
c0009c62:	e8 77 fc ff ff       	call   c00098de <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009c67:	83 c4 0c             	add    esp,0xc
c0009c6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c6e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c72:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c74:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009c78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c7c:	25 01 04 00 00       	and    eax,0x401
c0009c81:	3d 01 04 00 00       	cmp    eax,0x401
c0009c86:	75 1a                	jne    c0009ca2 <VAS::~VAS()+0xf0>
c0009c88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c8c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c91:	83 ec 0c             	sub    esp,0xc
c0009c94:	50                   	push   eax
c0009c95:	e8 bc e0 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c0009c9a:	83 c4 10             	add    esp,0x10
c0009c9d:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009ca2:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0009ca7:	eb 82                	jmp    c0009c2b <VAS::~VAS()+0x79>
c0009ca9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cad:	25 00 04 00 00       	and    eax,0x400
c0009cb2:	74 1a                	je     c0009cce <VAS::~VAS()+0x11c>
c0009cb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cb8:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009cbd:	83 ec 0c             	sub    esp,0xc
c0009cc0:	50                   	push   eax
c0009cc1:	e8 90 e0 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c0009cc6:	83 c4 10             	add    esp,0x10
c0009cc9:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009cce:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0009cd3:	e9 1a ff ff ff       	jmp    c0009bf2 <VAS::~VAS()+0x40>
c0009cd8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cdc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009cdf:	83 ec 0c             	sub    esp,0xc
c0009ce2:	50                   	push   eax
c0009ce3:	e8 43 fc ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0009ce8:	83 c4 10             	add    esp,0x10
c0009ceb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009cf2:	83 ec 0c             	sub    esp,0xc
c0009cf5:	50                   	push   eax
c0009cf6:	e8 5b e0 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c0009cfb:	83 c4 10             	add    esp,0x10
c0009cfe:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009d03:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0009d08:	83 e8 01             	sub    eax,0x1
c0009d0b:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0009d10:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0009d15:	85 c0                	test   eax,eax
c0009d17:	75 01                	jne    c0009d1a <VAS::~VAS()+0x168>
c0009d19:	fb                   	sti    
c0009d1a:	90                   	nop
c0009d1b:	83 c4 2c             	add    esp,0x2c
c0009d1e:	c3                   	ret    
c0009d1f:	90                   	nop

c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009d20:	55                   	push   ebp
c0009d21:	57                   	push   edi
c0009d22:	56                   	push   esi
c0009d23:	53                   	push   ebx
c0009d24:	83 ec 1c             	sub    esp,0x1c
c0009d27:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009d2b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009d2f:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009d35:	77 08                	ja     c0009d3f <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0009d37:	0f 20 d8             	mov    eax,cr3
c0009d3a:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0009d3d:	75 49                	jne    c0009d88 <VAS::mapPage(unsigned long, unsigned long, int)+0x68>
c0009d3f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d43:	09 d8                	or     eax,ebx
c0009d45:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d4a:	75 59                	jne    c0009da5 <VAS::mapPage(unsigned long, unsigned long, int)+0x85>
c0009d4c:	89 de                	mov    esi,ebx
c0009d4e:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009d51:	c1 ee 16             	shr    esi,0x16
c0009d54:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009d5b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009d5f:	74 56                	je     c0009db7 <VAS::mapPage(unsigned long, unsigned long, int)+0x97>
c0009d61:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d65:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009d69:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009d6f:	c1 eb 0a             	shr    ebx,0xa
c0009d72:	c1 e6 0c             	shl    esi,0xc
c0009d75:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009d7b:	09 d0                	or     eax,edx
c0009d7d:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0009d80:	83 c4 1c             	add    esp,0x1c
c0009d83:	5b                   	pop    ebx
c0009d84:	5e                   	pop    esi
c0009d85:	5f                   	pop    edi
c0009d86:	5d                   	pop    ebp
c0009d87:	c3                   	ret    
c0009d88:	83 ec 0c             	sub    esp,0xc
c0009d8b:	68 78 0c 02 c0       	push   0xc0020c78
c0009d90:	e8 b0 0b 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0009d95:	83 c4 10             	add    esp,0x10
c0009d98:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d9c:	09 d8                	or     eax,ebx
c0009d9e:	a9 ff 0f 00 00       	test   eax,0xfff
c0009da3:	74 a7                	je     c0009d4c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0009da5:	83 ec 0c             	sub    esp,0xc
c0009da8:	68 e0 0c 02 c0       	push   0xc0020ce0
c0009dad:	e8 c7 75 00 00       	call   c0011379 <KePanic(char const*)>
c0009db2:	83 c4 10             	add    esp,0x10
c0009db5:	eb 95                	jmp    c0009d4c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0009db7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009dbb:	e8 ff df ff ff       	call   c0007dbf <Phys::allocatePage()>
c0009dc0:	83 ec 0c             	sub    esp,0xc
c0009dc3:	89 c5                	mov    ebp,eax
c0009dc5:	8b 0d b0 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fb0
c0009dcb:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009dcf:	6a 01                	push   0x1
c0009dd1:	e8 37 f8 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c0009dd6:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009ddd:	6a 01                	push   0x1
c0009ddf:	50                   	push   eax
c0009de0:	55                   	push   ebp
c0009de1:	81 cd 07 04 00 00    	or     ebp,0x407
c0009de7:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009deb:	51                   	push   ecx
c0009dec:	e8 29 01 00 00       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009df1:	83 c4 1c             	add    esp,0x1c
c0009df4:	68 00 10 00 00       	push   0x1000
c0009df9:	6a 00                	push   0x0
c0009dfb:	50                   	push   eax
c0009dfc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009e00:	e8 eb 66 ff ff       	call   c00004f0 <memset>
c0009e05:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009e09:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e0c:	e8 1a fb ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0009e11:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009e15:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009e18:	83 c4 10             	add    esp,0x10
c0009e1b:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0009e1e:	e9 3e ff ff ff       	jmp    c0009d61 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0009e23:	90                   	nop

c0009e24 <VAS::allocatePages(int, int)>:
c0009e24:	55                   	push   ebp
c0009e25:	57                   	push   edi
c0009e26:	56                   	push   esi
c0009e27:	53                   	push   ebx
c0009e28:	83 ec 1c             	sub    esp,0x1c
c0009e2b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009e2f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0009e33:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0009e37:	75 71                	jne    c0009eaa <VAS::allocatePages(int, int)+0x86>
c0009e39:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e3c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e40:	85 c0                	test   eax,eax
c0009e42:	74 4d                	je     c0009e91 <VAS::allocatePages(int, int)+0x6d>
c0009e44:	89 dd                	mov    ebp,ebx
c0009e46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e4a:	c1 e5 0c             	shl    ebp,0xc
c0009e4d:	01 c5                	add    ebp,eax
c0009e4f:	85 db                	test   ebx,ebx
c0009e51:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0009e54:	7e 29                	jle    c0009e7f <VAS::allocatePages(int, int)+0x5b>
c0009e56:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009e5a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009e5e:	81 cf 00 04 00 00    	or     edi,0x400
c0009e64:	e8 56 df ff ff       	call   c0007dbf <Phys::allocatePage()>
c0009e69:	57                   	push   edi
c0009e6a:	53                   	push   ebx
c0009e6b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009e71:	50                   	push   eax
c0009e72:	56                   	push   esi
c0009e73:	e8 a8 fe ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009e78:	83 c4 10             	add    esp,0x10
c0009e7b:	39 dd                	cmp    ebp,ebx
c0009e7d:	75 e5                	jne    c0009e64 <VAS::allocatePages(int, int)+0x40>
c0009e7f:	0f 20 d8             	mov    eax,cr3
c0009e82:	0f 22 d8             	mov    cr3,eax
c0009e85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e89:	83 c4 1c             	add    esp,0x1c
c0009e8c:	5b                   	pop    ebx
c0009e8d:	5e                   	pop    esi
c0009e8e:	5f                   	pop    edi
c0009e8f:	5d                   	pop    ebp
c0009e90:	c3                   	ret    
c0009e91:	83 ec 0c             	sub    esp,0xc
c0009e94:	68 04 0d 02 c0       	push   0xc0020d04
c0009e99:	e8 db 74 00 00       	call   c0011379 <KePanic(char const*)>
c0009e9e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009ea1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009ea5:	83 c4 10             	add    esp,0x10
c0009ea8:	eb 9a                	jmp    c0009e44 <VAS::allocatePages(int, int)+0x20>
c0009eaa:	83 ec 0c             	sub    esp,0xc
c0009ead:	53                   	push   ebx
c0009eae:	e8 5a f7 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c0009eb3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009eb7:	83 c4 10             	add    esp,0x10
c0009eba:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009ebf:	77 37                	ja     c0009ef8 <VAS::allocatePages(int, int)+0xd4>
c0009ec1:	85 db                	test   ebx,ebx
c0009ec3:	7e ba                	jle    c0009e7f <VAS::allocatePages(int, int)+0x5b>
c0009ec5:	c1 e3 0c             	shl    ebx,0xc
c0009ec8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ecc:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009ed0:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c0009ed3:	81 cf 00 04 00 00    	or     edi,0x400
c0009ed9:	89 c3                	mov    ebx,eax
c0009edb:	e8 df de ff ff       	call   c0007dbf <Phys::allocatePage()>
c0009ee0:	57                   	push   edi
c0009ee1:	53                   	push   ebx
c0009ee2:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ee8:	50                   	push   eax
c0009ee9:	56                   	push   esi
c0009eea:	e8 31 fe ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009eef:	83 c4 10             	add    esp,0x10
c0009ef2:	39 dd                	cmp    ebp,ebx
c0009ef4:	75 e5                	jne    c0009edb <VAS::allocatePages(int, int)+0xb7>
c0009ef6:	eb 87                	jmp    c0009e7f <VAS::allocatePages(int, int)+0x5b>
c0009ef8:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0009efd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f03:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009f0a:	74 b5                	je     c0009ec1 <VAS::allocatePages(int, int)+0x9d>
c0009f0c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0009f10:	80 ce 01             	or     dh,0x1
c0009f13:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0009f17:	eb a8                	jmp    c0009ec1 <VAS::allocatePages(int, int)+0x9d>
c0009f19:	90                   	nop

c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009f1a:	55                   	push   ebp
c0009f1b:	57                   	push   edi
c0009f1c:	56                   	push   esi
c0009f1d:	53                   	push   ebx
c0009f1e:	83 ec 0c             	sub    esp,0xc
c0009f21:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0009f25:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009f29:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0009f2d:	85 db                	test   ebx,ebx
c0009f2f:	7e 2f                	jle    c0009f60 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x46>
c0009f31:	c1 e3 0c             	shl    ebx,0xc
c0009f34:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009f38:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0009f3c:	01 d3                	add    ebx,edx
c0009f3e:	55                   	push   ebp
c0009f3f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0009f43:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f47:	29 c2                	sub    edx,eax
c0009f49:	01 f2                	add    edx,esi
c0009f4b:	52                   	push   edx
c0009f4c:	56                   	push   esi
c0009f4d:	81 c6 00 10 00 00    	add    esi,0x1000
c0009f53:	57                   	push   edi
c0009f54:	e8 c7 fd ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009f59:	83 c4 10             	add    esp,0x10
c0009f5c:	39 de                	cmp    esi,ebx
c0009f5e:	75 de                	jne    c0009f3e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x24>
c0009f60:	0f 20 d8             	mov    eax,cr3
c0009f63:	0f 22 d8             	mov    cr3,eax
c0009f66:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f6a:	83 c4 0c             	add    esp,0xc
c0009f6d:	5b                   	pop    ebx
c0009f6e:	5e                   	pop    esi
c0009f6f:	5f                   	pop    edi
c0009f70:	5d                   	pop    ebp
c0009f71:	c3                   	ret    

c0009f72 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009f72:	55                   	push   ebp
c0009f73:	57                   	push   edi
c0009f74:	56                   	push   esi
c0009f75:	53                   	push   ebx
c0009f76:	83 ec 1c             	sub    esp,0x1c
c0009f79:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009f7d:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0009f81:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009f85:	09 f8                	or     eax,edi
c0009f87:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009f8b:	a9 ff 0f 00 00       	test   eax,0xfff
c0009f90:	75 4f                	jne    c0009fe1 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0009f92:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009f96:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0009f99:	c1 eb 16             	shr    ebx,0x16
c0009f9c:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
c0009fa3:	f6 04 38 01          	test   BYTE PTR [eax+edi*1],0x1
c0009fa7:	74 52                	je     c0009ffb <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x89>
c0009fa9:	0f b6 f2             	movzx  esi,dl
c0009fac:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009fb0:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0009fb4:	c1 e8 0a             	shr    eax,0xa
c0009fb7:	83 fe 01             	cmp    esi,0x1
c0009fba:	19 d2                	sbb    edx,edx
c0009fbc:	c1 e3 0c             	shl    ebx,0xc
c0009fbf:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0009fc5:	25 fc 0f 00 00       	and    eax,0xffc
c0009fca:	01 d8                	add    eax,ebx
c0009fcc:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0009fd0:	09 d9                	or     ecx,ebx
c0009fd2:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0009fd9:	83 c4 1c             	add    esp,0x1c
c0009fdc:	5b                   	pop    ebx
c0009fdd:	5e                   	pop    esi
c0009fde:	5f                   	pop    edi
c0009fdf:	5d                   	pop    ebp
c0009fe0:	c3                   	ret    
c0009fe1:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009fe5:	83 ec 0c             	sub    esp,0xc
c0009fe8:	68 30 0d 02 c0       	push   0xc0020d30
c0009fed:	e8 87 73 00 00       	call   c0011379 <KePanic(char const*)>
c0009ff2:	83 c4 10             	add    esp,0x10
c0009ff5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009ff9:	eb 97                	jmp    c0009f92 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c0009ffb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009fff:	e8 bb dd ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a004:	83 ec 0c             	sub    esp,0xc
c000a007:	89 c5                	mov    ebp,eax
c000a009:	8b 0d b0 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fb0
c000a00f:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a013:	6a 01                	push   0x1
c000a015:	e8 f3 f5 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000a01a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a021:	6a 01                	push   0x1
c000a023:	50                   	push   eax
c000a024:	55                   	push   ebp
c000a025:	81 cd 07 04 00 00    	or     ebp,0x407
c000a02b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000a02f:	51                   	push   ecx
c000a030:	e8 e5 fe ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a035:	83 c4 1c             	add    esp,0x1c
c000a038:	68 00 10 00 00       	push   0x1000
c000a03d:	6a 00                	push   0x0
c000a03f:	50                   	push   eax
c000a040:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a044:	e8 a7 64 ff ff       	call   c00004f0 <memset>
c000a049:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a04d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a050:	e8 d6 f8 ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c000a055:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a058:	83 c4 10             	add    esp,0x10
c000a05b:	89 2c 38             	mov    DWORD PTR [eax+edi*1],ebp
c000a05e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a062:	e9 42 ff ff ff       	jmp    c0009fa9 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c000a067:	90                   	nop

c000a068 <VAS::VAS(bool)>:
c000a068:	53                   	push   ebx
c000a069:	83 ec 28             	sub    esp,0x28
c000a06c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a070:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a074:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a078:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a07f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a083:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a08a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a08e:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a092:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a095:	e8 25 dd ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a09a:	89 c2                	mov    edx,eax
c000a09c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0a0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a0a3:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000a0a9:	83 ec 0c             	sub    esp,0xc
c000a0ac:	6a 01                	push   0x1
c000a0ae:	e8 5a f5 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000a0b3:	83 c4 10             	add    esp,0x10
c000a0b6:	89 c2                	mov    edx,eax
c000a0b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0bc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a0bf:	83 ec 0c             	sub    esp,0xc
c000a0c2:	6a 03                	push   0x3
c000a0c4:	6a 01                	push   0x1
c000a0c6:	52                   	push   edx
c000a0c7:	50                   	push   eax
c000a0c8:	53                   	push   ebx
c000a0c9:	e8 4c fe ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a0ce:	83 c4 20             	add    esp,0x20
c000a0d1:	89 c2                	mov    edx,eax
c000a0d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0d7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a0da:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a0e2:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a0ea:	7f 1d                	jg     c000a109 <VAS::VAS(bool)+0xa1>
c000a0ec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0f0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a0f3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a0f7:	c1 e2 02             	shl    edx,0x2
c000a0fa:	01 d0                	add    eax,edx
c000a0fc:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a102:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000a107:	eb d9                	jmp    c000a0e2 <VAS::VAS(bool)+0x7a>
c000a109:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a111:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a119:	7f 7e                	jg     c000a199 <VAS::VAS(bool)+0x131>
c000a11b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a11f:	2d 00 02 00 00       	sub    eax,0x200
c000a124:	c1 e0 0c             	shl    eax,0xc
c000a127:	83 c8 05             	or     eax,0x5
c000a12a:	89 c2                	mov    edx,eax
c000a12c:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a131:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a137:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a13d:	83 e0 10             	and    eax,0x10
c000a140:	0f b6 c0             	movzx  eax,al
c000a143:	85 c0                	test   eax,eax
c000a145:	74 07                	je     c000a14e <VAS::VAS(bool)+0xe6>
c000a147:	b8 00 01 00 00       	mov    eax,0x100
c000a14c:	eb 05                	jmp    c000a153 <VAS::VAS(bool)+0xeb>
c000a14e:	b8 00 00 00 00       	mov    eax,0x0
c000a153:	09 d0                	or     eax,edx
c000a155:	89 c1                	mov    ecx,eax
c000a157:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a15b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a15e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a162:	c1 e2 02             	shl    edx,0x2
c000a165:	01 d0                	add    eax,edx
c000a167:	89 ca                	mov    edx,ecx
c000a169:	89 10                	mov    DWORD PTR [eax],edx
c000a16b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a16f:	2d 40 03 00 00       	sub    eax,0x340
c000a174:	83 f8 7f             	cmp    eax,0x7f
c000a177:	77 16                	ja     c000a18f <VAS::VAS(bool)+0x127>
c000a179:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a17d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a180:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a184:	c1 e2 02             	shl    edx,0x2
c000a187:	01 d0                	add    eax,edx
c000a189:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a18f:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000a194:	e9 78 ff ff ff       	jmp    c000a111 <VAS::VAS(bool)+0xa9>
c000a199:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a19e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1a4:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1aa:	83 e0 10             	and    eax,0x10
c000a1ad:	0f b6 c0             	movzx  eax,al
c000a1b0:	85 c0                	test   eax,eax
c000a1b2:	74 07                	je     c000a1bb <VAS::VAS(bool)+0x153>
c000a1b4:	b8 03 41 00 00       	mov    eax,0x4103
c000a1b9:	eb 05                	jmp    c000a1c0 <VAS::VAS(bool)+0x158>
c000a1bb:	b8 03 40 00 00       	mov    eax,0x4003
c000a1c0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a1c4:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a1c7:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a1cd:	89 02                	mov    DWORD PTR [edx],eax
c000a1cf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1d3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a1d6:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a1db:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1e1:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1e7:	83 e0 10             	and    eax,0x10
c000a1ea:	0f b6 c0             	movzx  eax,al
c000a1ed:	85 c0                	test   eax,eax
c000a1ef:	74 07                	je     c000a1f8 <VAS::VAS(bool)+0x190>
c000a1f1:	b8 00 01 00 00       	mov    eax,0x100
c000a1f6:	eb 05                	jmp    c000a1fd <VAS::VAS(bool)+0x195>
c000a1f8:	b8 00 00 00 00       	mov    eax,0x0
c000a1fd:	09 c2                	or     edx,eax
c000a1ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a203:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a206:	05 fc 0f 00 00       	add    eax,0xffc
c000a20b:	83 ca 03             	or     edx,0x3
c000a20e:	89 10                	mov    DWORD PTR [eax],edx
c000a210:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a215:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a21b:	83 ec 0c             	sub    esp,0xc
c000a21e:	50                   	push   eax
c000a21f:	e8 ba 27 00 00       	call   c000c9de <Device::getName()>
c000a224:	83 c4 10             	add    esp,0x10
c000a227:	83 ec 08             	sub    esp,0x8
c000a22a:	68 00 0f 02 c0       	push   0xc0020f00
c000a22f:	50                   	push   eax
c000a230:	e8 1b 65 ff ff       	call   c0000750 <strcmp>
c000a235:	83 c4 10             	add    esp,0x10
c000a238:	85 c0                	test   eax,eax
c000a23a:	0f 94 c0             	sete   al
c000a23d:	0f b6 c0             	movzx  eax,al
c000a240:	85 c0                	test   eax,eax
c000a242:	74 68                	je     c000a2ac <VAS::VAS(bool)+0x244>
c000a244:	fa                   	cli    
c000a245:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a24a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a250:	05 7c 09 00 00       	add    eax,0x97c
c000a255:	83 ec 0c             	sub    esp,0xc
c000a258:	50                   	push   eax
c000a259:	e8 50 d3 ff ff       	call   c00075ae <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a25e:	83 c4 10             	add    esp,0x10
c000a261:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a266:	89 c3                	mov    ebx,eax
c000a268:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a26d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a273:	05 7c 09 00 00       	add    eax,0x97c
c000a278:	83 ec 0c             	sub    esp,0xc
c000a27b:	50                   	push   eax
c000a27c:	e8 2d d3 ff ff       	call   c00075ae <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a281:	83 c4 10             	add    esp,0x10
c000a284:	83 ec 08             	sub    esp,0x8
c000a287:	50                   	push   eax
c000a288:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a28c:	e8 7b f6 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a291:	83 c4 10             	add    esp,0x10
c000a294:	8b 00                	mov    eax,DWORD PTR [eax]
c000a296:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a29b:	6a 11                	push   0x11
c000a29d:	53                   	push   ebx
c000a29e:	50                   	push   eax
c000a29f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a2a3:	e8 78 fa ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a2a8:	83 c4 10             	add    esp,0x10
c000a2ab:	fb                   	sti    
c000a2ac:	90                   	nop
c000a2ad:	83 c4 28             	add    esp,0x28
c000a2b0:	5b                   	pop    ebx
c000a2b1:	c3                   	ret    

c000a2b2 <VAS::evict(unsigned long)>:
c000a2b2:	55                   	push   ebp
c000a2b3:	57                   	push   edi
c000a2b4:	56                   	push   esi
c000a2b5:	53                   	push   ebx
c000a2b6:	83 ec 1c             	sub    esp,0x1c
c000a2b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2bd:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a2c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a2c5:	e8 a1 f4 ff ff       	call   c000976b <Virt::allocateSwapfilePage()>
c000a2ca:	89 c7                	mov    edi,eax
c000a2cc:	a1 6c 32 02 c0       	mov    eax,ds:0xc002326c
c000a2d1:	85 c0                	test   eax,eax
c000a2d3:	7e 40                	jle    c000a315 <VAS::evict(unsigned long)+0x63>
c000a2d5:	89 ee                	mov    esi,ebp
c000a2d7:	31 db                	xor    ebx,ebx
c000a2d9:	83 ec 0c             	sub    esp,0xc
c000a2dc:	57                   	push   edi
c000a2dd:	e8 73 f4 ff ff       	call   c0009755 <Virt::swapIDToSector(unsigned long)>
c000a2e2:	89 34 24             	mov    DWORD PTR [esp],esi
c000a2e5:	01 d8                	add    eax,ebx
c000a2e7:	6a 01                	push   0x1
c000a2e9:	31 d2                	xor    edx,edx
c000a2eb:	83 c3 01             	add    ebx,0x1
c000a2ee:	52                   	push   edx
c000a2ef:	81 c6 00 02 00 00    	add    esi,0x200
c000a2f5:	50                   	push   eax
c000a2f6:	0f be 05 78 32 02 c0 	movsx  eax,BYTE PTR ds:0xc0023278
c000a2fd:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c000a304:	50                   	push   eax
c000a305:	e8 8e 38 00 00       	call   c000db98 <LogicalDisk::write(unsigned long long, int, void*)>
c000a30a:	83 c4 20             	add    esp,0x20
c000a30d:	39 1d 6c 32 02 c0    	cmp    DWORD PTR ds:0xc002326c,ebx
c000a313:	7f c4                	jg     c000a2d9 <VAS::evict(unsigned long)+0x27>
c000a315:	83 ec 08             	sub    esp,0x8
c000a318:	c1 e7 0c             	shl    edi,0xc
c000a31b:	55                   	push   ebp
c000a31c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a320:	50                   	push   eax
c000a321:	e8 e6 f5 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a326:	8b 10                	mov    edx,DWORD PTR [eax]
c000a328:	89 d3                	mov    ebx,edx
c000a32a:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000a330:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a336:	09 d7                	or     edi,edx
c000a338:	89 38                	mov    DWORD PTR [eax],edi
c000a33a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a33d:	8b 15 a8 5f 02 c0    	mov    edx,DWORD PTR ds:0xc0025fa8
c000a343:	83 c2 01             	add    edx,0x1
c000a346:	89 15 a8 5f 02 c0    	mov    DWORD PTR ds:0xc0025fa8,edx
c000a34c:	e8 05 da ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c000a351:	0f 20 d8             	mov    eax,cr3
c000a354:	0f 22 d8             	mov    cr3,eax
c000a357:	8b 0d a8 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fa8
c000a35d:	51                   	push   ecx
c000a35e:	55                   	push   ebp
c000a35f:	53                   	push   ebx
c000a360:	68 54 0d 02 c0       	push   0xc0020d54
c000a365:	e8 db 05 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a36a:	a1 a4 5f 02 c0       	mov    eax,ds:0xc0025fa4
c000a36f:	c7 44 24 50 0e 0f 02 c0 	mov    DWORD PTR [esp+0x50],0xc0020f0e
c000a377:	8d 50 01             	lea    edx,[eax+0x1]
c000a37a:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a37e:	89 15 a4 5f 02 c0    	mov    DWORD PTR ds:0xc0025fa4,edx
c000a384:	83 c4 3c             	add    esp,0x3c
c000a387:	5b                   	pop    ebx
c000a388:	5e                   	pop    esi
c000a389:	5f                   	pop    edi
c000a38a:	5d                   	pop    ebp
c000a38b:	e9 b5 05 00 00       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>

c000a390 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a390:	55                   	push   ebp
c000a391:	57                   	push   edi
c000a392:	56                   	push   esi
c000a393:	53                   	push   ebx
c000a394:	81 ec 1c 10 00 00    	sub    esp,0x101c
c000a39a:	8b b4 24 34 10 00 00 	mov    esi,DWORD PTR [esp+0x1034]
c000a3a1:	89 f3                	mov    ebx,esi
c000a3a3:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a3a9:	81 fe ff ff bf ff    	cmp    esi,0xffbfffff
c000a3af:	77 22                	ja     c000a3d3 <VAS::tryLoadBackOffDisk(unsigned long)+0x43>
c000a3b1:	83 ec 08             	sub    esp,0x8
c000a3b4:	56                   	push   esi
c000a3b5:	68 31 0f 02 c0       	push   0xc0020f31
c000a3ba:	e8 86 05 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a3bf:	83 c4 10             	add    esp,0x10
c000a3c2:	85 db                	test   ebx,ebx
c000a3c4:	75 2a                	jne    c000a3f0 <VAS::tryLoadBackOffDisk(unsigned long)+0x60>
c000a3c6:	31 c0                	xor    eax,eax
c000a3c8:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a3ce:	5b                   	pop    ebx
c000a3cf:	5e                   	pop    esi
c000a3d0:	5f                   	pop    edi
c000a3d1:	5d                   	pop    ebp
c000a3d2:	c3                   	ret    
c000a3d3:	83 ec 0c             	sub    esp,0xc
c000a3d6:	68 1f 0f 02 c0       	push   0xc0020f1f
c000a3db:	e8 99 6f 00 00       	call   c0011379 <KePanic(char const*)>
c000a3e0:	5f                   	pop    edi
c000a3e1:	5d                   	pop    ebp
c000a3e2:	56                   	push   esi
c000a3e3:	68 31 0f 02 c0       	push   0xc0020f31
c000a3e8:	e8 58 05 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a3ed:	83 c4 10             	add    esp,0x10
c000a3f0:	83 ec 08             	sub    esp,0x8
c000a3f3:	53                   	push   ebx
c000a3f4:	8b 8c 24 3c 10 00 00 	mov    ecx,DWORD PTR [esp+0x103c]
c000a3fb:	51                   	push   ecx
c000a3fc:	e8 0b f5 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a401:	83 c4 10             	add    esp,0x10
c000a404:	89 c2                	mov    edx,eax
c000a406:	85 c0                	test   eax,eax
c000a408:	74 bc                	je     c000a3c6 <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c000a40a:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a40c:	f7 c5 00 02 00 00    	test   ebp,0x200
c000a412:	0f 85 c0 00 00 00    	jne    c000a4d8 <VAS::tryLoadBackOffDisk(unsigned long)+0x148>
c000a418:	89 e8                	mov    eax,ebp
c000a41a:	25 01 04 00 00       	and    eax,0x401
c000a41f:	3d 00 04 00 00       	cmp    eax,0x400
c000a424:	75 a0                	jne    c000a3c6 <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c000a426:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a42a:	c1 ed 0c             	shr    ebp,0xc
c000a42d:	e8 8d d9 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a432:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a436:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000a438:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000a43e:	09 c1                	or     ecx,eax
c000a440:	81 c9 01 08 00 00    	or     ecx,0x801
c000a446:	89 0a                	mov    DWORD PTR [edx],ecx
c000a448:	8b 15 6c 32 02 c0    	mov    edx,DWORD PTR ds:0xc002326c
c000a44e:	85 d2                	test   edx,edx
c000a450:	7e 40                	jle    c000a492 <VAS::tryLoadBackOffDisk(unsigned long)+0x102>
c000a452:	89 df                	mov    edi,ebx
c000a454:	31 f6                	xor    esi,esi
c000a456:	83 ec 0c             	sub    esp,0xc
c000a459:	55                   	push   ebp
c000a45a:	e8 f6 f2 ff ff       	call   c0009755 <Virt::swapIDToSector(unsigned long)>
c000a45f:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a462:	01 f0                	add    eax,esi
c000a464:	6a 01                	push   0x1
c000a466:	31 d2                	xor    edx,edx
c000a468:	83 c6 01             	add    esi,0x1
c000a46b:	52                   	push   edx
c000a46c:	81 c7 00 02 00 00    	add    edi,0x200
c000a472:	50                   	push   eax
c000a473:	0f be 05 78 32 02 c0 	movsx  eax,BYTE PTR ds:0xc0023278
c000a47a:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c000a481:	50                   	push   eax
c000a482:	e8 a5 36 00 00       	call   c000db2c <LogicalDisk::read(unsigned long long, int, void*)>
c000a487:	83 c4 20             	add    esp,0x20
c000a48a:	39 35 6c 32 02 c0    	cmp    DWORD PTR ds:0xc002326c,esi
c000a490:	7f c4                	jg     c000a456 <VAS::tryLoadBackOffDisk(unsigned long)+0xc6>
c000a492:	83 ec 04             	sub    esp,0x4
c000a495:	a1 a8 5f 02 c0       	mov    eax,ds:0xc0025fa8
c000a49a:	83 e8 01             	sub    eax,0x1
c000a49d:	50                   	push   eax
c000a49e:	a3 a8 5f 02 c0       	mov    ds:0xc0025fa8,eax
c000a4a3:	53                   	push   ebx
c000a4a4:	68 44 0f 02 c0       	push   0xc0020f44
c000a4a9:	e8 97 04 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a4ae:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a4b1:	e8 7c f2 ff ff       	call   c0009732 <Virt::freeSwapfilePage(unsigned long)>
c000a4b6:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000a4bb:	83 c4 10             	add    esp,0x10
c000a4be:	83 e8 01             	sub    eax,0x1
c000a4c1:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000a4c6:	85 c0                	test   eax,eax
c000a4c8:	75 01                	jne    c000a4cb <VAS::tryLoadBackOffDisk(unsigned long)+0x13b>
c000a4ca:	fb                   	sti    
c000a4cb:	0f 20 d8             	mov    eax,cr3
c000a4ce:	0f 22 d8             	mov    cr3,eax
c000a4d1:	b0 01                	mov    al,0x1
c000a4d3:	e9 f0 fe ff ff       	jmp    c000a3c8 <VAS::tryLoadBackOffDisk(unsigned long)+0x38>
c000a4d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a4dc:	bd 00 10 00 00       	mov    ebp,0x1000
c000a4e1:	83 ec 0c             	sub    esp,0xc
c000a4e4:	89 de                	mov    esi,ebx
c000a4e6:	68 84 0d 02 c0       	push   0xc0020d84
c000a4eb:	e8 55 04 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a4f0:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000a4f4:	e8 c6 d8 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a4f9:	89 e9                	mov    ecx,ebp
c000a4fb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a4fd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a501:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000a503:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c000a509:	09 c8                	or     eax,ecx
c000a50b:	83 c8 02             	or     eax,0x2
c000a50e:	89 02                	mov    DWORD PTR [edx],eax
c000a510:	0f 20 d8             	mov    eax,cr3
c000a513:	0f 22 d8             	mov    cr3,eax
c000a516:	8d 74 24 20          	lea    esi,[esp+0x20]
c000a51a:	89 df                	mov    edi,ebx
c000a51c:	89 e9                	mov    ecx,ebp
c000a51e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a520:	b0 01                	mov    al,0x1
c000a522:	83 c4 10             	add    esp,0x10
c000a525:	e9 9e fe ff ff       	jmp    c000a3c8 <VAS::tryLoadBackOffDisk(unsigned long)+0x38>

c000a52a <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c000a52a:	55                   	push   ebp
c000a52b:	57                   	push   edi
c000a52c:	56                   	push   esi
c000a52d:	53                   	push   ebx
c000a52e:	83 ec 28             	sub    esp,0x28
c000a531:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000a535:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a539:	50                   	push   eax
c000a53a:	e8 ce f0 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000a53f:	83 c4 0c             	add    esp,0xc
c000a542:	89 c5                	mov    ebp,eax
c000a544:	6a 07                	push   0x7
c000a546:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a54a:	52                   	push   edx
c000a54b:	56                   	push   esi
c000a54c:	e8 d3 f8 ff ff       	call   c0009e24 <VAS::allocatePages(int, int)>
c000a551:	83 c4 10             	add    esp,0x10
c000a554:	89 c7                	mov    edi,eax
c000a556:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000a55a:	85 c9                	test   ecx,ecx
c000a55c:	74 2f                	je     c000a58d <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c000a55e:	31 db                	xor    ebx,ebx
c000a560:	e8 5a d8 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a565:	83 c3 01             	add    ebx,0x1
c000a568:	6a 03                	push   0x3
c000a56a:	55                   	push   ebp
c000a56b:	50                   	push   eax
c000a56c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a570:	56                   	push   esi
c000a571:	e8 aa f7 ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a576:	6a 07                	push   0x7
c000a578:	57                   	push   edi
c000a579:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a57d:	50                   	push   eax
c000a57e:	56                   	push   esi
c000a57f:	e8 9c f7 ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a584:	83 c4 20             	add    esp,0x20
c000a587:	39 5c 24 34          	cmp    DWORD PTR [esp+0x34],ebx
c000a58b:	75 d3                	jne    c000a560 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c000a58d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a591:	89 28                	mov    DWORD PTR [eax],ebp
c000a593:	83 c4 1c             	add    esp,0x1c
c000a596:	89 f8                	mov    eax,edi
c000a598:	5b                   	pop    ebx
c000a599:	5e                   	pop    esi
c000a59a:	5f                   	pop    edi
c000a59b:	5d                   	pop    ebp
c000a59c:	c3                   	ret    
c000a59d:	90                   	nop

c000a59e <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c000a59e:	53                   	push   ebx
c000a59f:	83 ec 14             	sub    esp,0x14
c000a5a2:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000a5a6:	68 a4 0d 02 c0       	push   0xc0020da4
c000a5ab:	e8 95 03 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a5b0:	c7 04 24 04 0e 02 c0 	mov    DWORD PTR [esp],0xc0020e04
c000a5b7:	e8 89 03 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a5bc:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a5c0:	83 c4 18             	add    esp,0x18
c000a5c3:	5b                   	pop    ebx
c000a5c4:	e9 62 f3 ff ff       	jmp    c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c000a5c9:	90                   	nop

c000a5ca <VAS::scanForEviction()>:
c000a5ca:	57                   	push   edi
c000a5cb:	56                   	push   esi
c000a5cc:	31 f6                	xor    esi,esi
c000a5ce:	53                   	push   ebx
c000a5cf:	83 ec 10             	sub    esp,0x10
c000a5d2:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000a5d6:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a5d9:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a5df:	75 0e                	jne    c000a5ef <VAS::scanForEviction()+0x25>
c000a5e1:	89 da                	mov    edx,ebx
c000a5e3:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a5e6:	c1 ea 16             	shr    edx,0x16
c000a5e9:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a5ed:	74 57                	je     c000a646 <VAS::scanForEviction()+0x7c>
c000a5ef:	53                   	push   ebx
c000a5f0:	57                   	push   edi
c000a5f1:	e8 16 f3 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a5f6:	5a                   	pop    edx
c000a5f7:	8b 10                	mov    edx,DWORD PTR [eax]
c000a5f9:	59                   	pop    ecx
c000a5fa:	89 d1                	mov    ecx,edx
c000a5fc:	c1 e9 0c             	shr    ecx,0xc
c000a5ff:	74 10                	je     c000a611 <VAS::scanForEviction()+0x47>
c000a601:	89 d1                	mov    ecx,edx
c000a603:	81 e1 01 08 00 00    	and    ecx,0x801
c000a609:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a60f:	74 40                	je     c000a651 <VAS::scanForEviction()+0x87>
c000a611:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a617:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a61d:	76 2d                	jbe    c000a64c <VAS::scanForEviction()+0x82>
c000a61f:	83 c6 01             	add    esi,0x1
c000a622:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c000a629:	83 fe 03             	cmp    esi,0x3
c000a62c:	74 32                	je     c000a660 <VAS::scanForEviction()+0x96>
c000a62e:	31 db                	xor    ebx,ebx
c000a630:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a636:	75 b7                	jne    c000a5ef <VAS::scanForEviction()+0x25>
c000a638:	89 da                	mov    edx,ebx
c000a63a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a63d:	c1 ea 16             	shr    edx,0x16
c000a640:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a644:	75 a9                	jne    c000a5ef <VAS::scanForEviction()+0x25>
c000a646:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a64c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c000a64f:	eb 88                	jmp    c000a5d9 <VAS::scanForEviction()+0xf>
c000a651:	f6 c2 20             	test   dl,0x20
c000a654:	74 13                	je     c000a669 <VAS::scanForEviction()+0x9f>
c000a656:	83 e2 df             	and    edx,0xffffffdf
c000a659:	89 10                	mov    DWORD PTR [eax],edx
c000a65b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a65e:	eb b1                	jmp    c000a611 <VAS::scanForEviction()+0x47>
c000a660:	83 c4 10             	add    esp,0x10
c000a663:	31 c0                	xor    eax,eax
c000a665:	5b                   	pop    ebx
c000a666:	5e                   	pop    esi
c000a667:	5f                   	pop    edi
c000a668:	c3                   	ret    
c000a669:	83 ec 08             	sub    esp,0x8
c000a66c:	89 d0                	mov    eax,edx
c000a66e:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a673:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a677:	53                   	push   ebx
c000a678:	68 59 0f 02 c0       	push   0xc0020f59
c000a67d:	e8 c3 02 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a682:	58                   	pop    eax
c000a683:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a686:	5a                   	pop    edx
c000a687:	51                   	push   ecx
c000a688:	57                   	push   edi
c000a689:	e8 24 fc ff ff       	call   c000a2b2 <VAS::evict(unsigned long)>
c000a68e:	5b                   	pop    ebx
c000a68f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000a692:	5e                   	pop    esi
c000a693:	50                   	push   eax
c000a694:	68 6d 0f 02 c0       	push   0xc0020f6d
c000a699:	e8 a7 02 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a69e:	58                   	pop    eax
c000a69f:	5a                   	pop    edx
c000a6a0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a6a4:	50                   	push   eax
c000a6a5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a6a9:	68 80 0f 02 c0       	push   0xc0020f80
c000a6ae:	e8 92 02 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a6b3:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a6b6:	83 c4 10             	add    esp,0x10
c000a6b9:	81 c1 00 10 00 00    	add    ecx,0x1000
c000a6bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a6c3:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c000a6c6:	83 c4 10             	add    esp,0x10
c000a6c9:	5b                   	pop    ebx
c000a6ca:	5e                   	pop    esi
c000a6cb:	5f                   	pop    edi
c000a6cc:	c3                   	ret    

c000a6cd <mapVASFirstTime>:
c000a6cd:	55                   	push   ebp
c000a6ce:	57                   	push   edi
c000a6cf:	56                   	push   esi
c000a6d0:	53                   	push   ebx
c000a6d1:	83 ec 0c             	sub    esp,0xc
c000a6d4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a6d9:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a6dc:	83 fa 01             	cmp    edx,0x1
c000a6df:	0f 84 cb 00 00 00    	je     c000a7b0 <mapVASFirstTime+0xe3>
c000a6e5:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a6e8:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a6eb:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a6f0:	c1 e5 15             	shl    ebp,0x15
c000a6f3:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a6f8:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a6fe:	29 eb                	sub    ebx,ebp
c000a700:	29 ef                	sub    edi,ebp
c000a702:	e8 b8 d6 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a707:	83 ec 0c             	sub    esp,0xc
c000a70a:	68 03 04 00 00       	push   0x403
c000a70f:	6a 01                	push   0x1
c000a711:	53                   	push   ebx
c000a712:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a718:	50                   	push   eax
c000a719:	56                   	push   esi
c000a71a:	e8 fb f7 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a71f:	83 c4 20             	add    esp,0x20
c000a722:	39 fb                	cmp    ebx,edi
c000a724:	75 dc                	jne    c000a702 <mapVASFirstTime+0x35>
c000a726:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a72b:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a730:	29 eb                	sub    ebx,ebp
c000a732:	29 ef                	sub    edi,ebp
c000a734:	e8 86 d6 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a739:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c000a73d:	83 fa 01             	cmp    edx,0x1
c000a740:	19 d2                	sbb    edx,edx
c000a742:	83 ec 0c             	sub    esp,0xc
c000a745:	83 e2 04             	and    edx,0x4
c000a748:	81 c2 03 04 00 00    	add    edx,0x403
c000a74e:	52                   	push   edx
c000a74f:	6a 01                	push   0x1
c000a751:	53                   	push   ebx
c000a752:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a758:	50                   	push   eax
c000a759:	56                   	push   esi
c000a75a:	e8 bb f7 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a75f:	83 c4 20             	add    esp,0x20
c000a762:	39 df                	cmp    edi,ebx
c000a764:	75 ce                	jne    c000a734 <mapVASFirstTime+0x67>
c000a766:	83 ec 0c             	sub    esp,0xc
c000a769:	bb 7c 50 02 c0       	mov    ebx,0xc002507c
c000a76e:	6a 04                	push   0x4
c000a770:	81 eb 00 40 02 c0    	sub    ebx,0xc0024000
c000a776:	6a ff                	push   0xffffffff
c000a778:	c1 eb 0c             	shr    ebx,0xc
c000a77b:	53                   	push   ebx
c000a77c:	68 00 40 02 c0       	push   0xc0024000
c000a781:	56                   	push   esi
c000a782:	e8 1f f3 ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a787:	83 c4 14             	add    esp,0x14
c000a78a:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c000a78f:	6a 04                	push   0x4
c000a791:	6a ff                	push   0xffffffff
c000a793:	53                   	push   ebx
c000a794:	68 00 40 02 c0       	push   0xc0024000
c000a799:	50                   	push   eax
c000a79a:	e8 07 f3 ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a79f:	0f 20 d8             	mov    eax,cr3
c000a7a2:	0f 22 d8             	mov    cr3,eax
c000a7a5:	83 c4 20             	add    esp,0x20
c000a7a8:	83 c4 0c             	add    esp,0xc
c000a7ab:	5b                   	pop    ebx
c000a7ac:	5e                   	pop    esi
c000a7ad:	5f                   	pop    edi
c000a7ae:	5d                   	pop    ebp
c000a7af:	c3                   	ret    
c000a7b0:	83 ec 0c             	sub    esp,0xc
c000a7b3:	68 8d 0f 02 c0       	push   0xc0020f8d
c000a7b8:	e8 88 01 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a7bd:	83 c4 10             	add    esp,0x10
c000a7c0:	83 c4 0c             	add    esp,0xc
c000a7c3:	5b                   	pop    ebx
c000a7c4:	5e                   	pop    esi
c000a7c5:	5f                   	pop    edi
c000a7c6:	5d                   	pop    ebp
c000a7c7:	c3                   	ret    

c000a7c8 <__cxa_atexit>:
c000a7c8:	31 c0                	xor    eax,eax
c000a7ca:	c3                   	ret    

c000a7cb <__cxa_finalize>:
c000a7cb:	c3                   	ret    

c000a7cc <__stack_chk_fail>:
c000a7cc:	55                   	push   ebp
c000a7cd:	89 e5                	mov    ebp,esp
c000a7cf:	83 ec 10             	sub    esp,0x10
c000a7d2:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a7d5:	68 a6 0f 02 c0       	push   0xc0020fa6
c000a7da:	e8 66 01 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a7df:	58                   	pop    eax
c000a7e0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a7e3:	5a                   	pop    edx
c000a7e4:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a7e7:	68 a6 0f 02 c0       	push   0xc0020fa6
c000a7ec:	e8 54 01 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a7f1:	c7 04 24 ae 0f 02 c0 	mov    DWORD PTR [esp],0xc0020fae
c000a7f8:	e8 7c 6b 00 00       	call   c0011379 <KePanic(char const*)>
c000a7fd:	83 c4 10             	add    esp,0x10
c000a800:	c9                   	leave  
c000a801:	c3                   	ret    

c000a802 <__cxa_pure_virtual>:
c000a802:	83 ec 18             	sub    esp,0x18
c000a805:	68 c6 0f 02 c0       	push   0xc0020fc6
c000a80a:	e8 6a 6b 00 00       	call   c0011379 <KePanic(char const*)>
c000a80f:	83 c4 1c             	add    esp,0x1c
c000a812:	c3                   	ret    

c000a813 <operator new[](unsigned long)>:
c000a813:	e9 9e d2 ff ff       	jmp    c0007ab6 <malloc>

c000a818 <operator delete(void*, unsigned long)>:
c000a818:	e9 b9 d2 ff ff       	jmp    c0007ad6 <rfree>

c000a81d <operator delete[](void*)>:
c000a81d:	e9 b4 d2 ff ff       	jmp    c0007ad6 <rfree>

c000a822 <operator delete[](void*, unsigned long)>:
c000a822:	e9 af d2 ff ff       	jmp    c0007ad6 <rfree>

c000a827 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a827:	55                   	push   ebp
c000a828:	57                   	push   edi
c000a829:	56                   	push   esi
c000a82a:	be cf 0a 02 c0       	mov    esi,0xc0020acf
c000a82f:	53                   	push   ebx
c000a830:	83 ec 20             	sub    esp,0x20
c000a833:	a0 ce 0a 02 c0       	mov    al,ds:0xc0020ace
c000a838:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000a83c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000a840:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a844:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a848:	b8 10 00 00 00       	mov    eax,0x10
c000a84d:	f7 c7 02 00 00 00    	test   edi,0x2
c000a853:	75 60                	jne    c000a8b5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x8e>
c000a855:	89 c1                	mov    ecx,eax
c000a857:	c1 e9 02             	shr    ecx,0x2
c000a85a:	fc                   	cld    
c000a85b:	31 d2                	xor    edx,edx
c000a85d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000a85f:	a8 02                	test   al,0x2
c000a861:	74 0b                	je     c000a86e <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x47>
c000a863:	66 8b 16             	mov    dx,WORD PTR [esi]
c000a866:	66 89 17             	mov    WORD PTR [edi],dx
c000a869:	ba 02 00 00 00       	mov    edx,0x2
c000a86e:	a8 01                	test   al,0x1
c000a870:	74 06                	je     c000a878 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x51>
c000a872:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c000a875:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c000a878:	89 ee                	mov    esi,ebp
c000a87a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a87e:	eb 02                	jmp    c000a882 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5b>
c000a880:	89 c6                	mov    esi,eax
c000a882:	31 d2                	xor    edx,edx
c000a884:	83 c1 01             	add    ecx,0x1
c000a887:	89 f0                	mov    eax,esi
c000a889:	f7 f3                	div    ebx
c000a88b:	39 de                	cmp    esi,ebx
c000a88d:	73 f1                	jae    c000a880 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x59>
c000a88f:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a892:	eb 02                	jmp    c000a896 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6f>
c000a894:	89 c5                	mov    ebp,eax
c000a896:	31 d2                	xor    edx,edx
c000a898:	83 e9 01             	sub    ecx,0x1
c000a89b:	89 e8                	mov    eax,ebp
c000a89d:	f7 f3                	div    ebx
c000a89f:	39 dd                	cmp    ebp,ebx
c000a8a1:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a8a5:	88 11                	mov    BYTE PTR [ecx],dl
c000a8a7:	73 eb                	jae    c000a894 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6d>
c000a8a9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a8ad:	83 c4 20             	add    esp,0x20
c000a8b0:	5b                   	pop    ebx
c000a8b1:	5e                   	pop    esi
c000a8b2:	5f                   	pop    edi
c000a8b3:	5d                   	pop    ebp
c000a8b4:	c3                   	ret    
c000a8b5:	66 8b 16             	mov    dx,WORD PTR [esi]
c000a8b8:	83 c7 02             	add    edi,0x2
c000a8bb:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c000a8bf:	83 c6 02             	add    esi,0x2
c000a8c2:	83 e8 02             	sub    eax,0x2
c000a8c5:	eb 8e                	jmp    c000a855 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2e>

c000a8c7 <Dbg::logc(char)>:
c000a8c7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a8cb:	f6 05 d0 5e 02 c0 10 	test   BYTE PTR ds:0xc0025ed0,0x10
c000a8d2:	75 12                	jne    c000a8e6 <Dbg::logc(char)+0x1f>
c000a8d4:	ba fd 03 00 00       	mov    edx,0x3fd
c000a8d9:	ec                   	in     al,dx
c000a8da:	a8 20                	test   al,0x20
c000a8dc:	74 fb                	je     c000a8d9 <Dbg::logc(char)+0x12>
c000a8de:	ba f8 03 00 00       	mov    edx,0x3f8
c000a8e3:	88 c8                	mov    al,cl
c000a8e5:	ee                   	out    dx,al
c000a8e6:	c3                   	ret    

c000a8e7 <Dbg::logs(char*)>:
c000a8e7:	53                   	push   ebx
c000a8e8:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a8ec:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8ef:	85 c0                	test   eax,eax
c000a8f1:	74 11                	je     c000a904 <Dbg::logs(char*)+0x1d>
c000a8f3:	83 c3 01             	add    ebx,0x1
c000a8f6:	50                   	push   eax
c000a8f7:	e8 cb ff ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000a8fc:	58                   	pop    eax
c000a8fd:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a900:	85 c0                	test   eax,eax
c000a902:	75 ef                	jne    c000a8f3 <Dbg::logs(char*)+0xc>
c000a904:	5b                   	pop    ebx
c000a905:	c3                   	ret    

c000a906 <Dbg::logWriteInt(unsigned int)>:
c000a906:	83 ec 10             	sub    esp,0x10
c000a909:	6a 0a                	push   0xa
c000a90b:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a90f:	50                   	push   eax
c000a910:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a914:	50                   	push   eax
c000a915:	e8 0d ff ff ff       	call   c000a827 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a91a:	50                   	push   eax
c000a91b:	e8 c7 ff ff ff       	call   c000a8e7 <Dbg::logs(char*)>
c000a920:	83 c4 20             	add    esp,0x20
c000a923:	c3                   	ret    

c000a924 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a924:	83 ec 10             	sub    esp,0x10
c000a927:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a92b:	50                   	push   eax
c000a92c:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a930:	50                   	push   eax
c000a931:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a935:	52                   	push   edx
c000a936:	e8 ec fe ff ff       	call   c000a827 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a93b:	50                   	push   eax
c000a93c:	e8 a6 ff ff ff       	call   c000a8e7 <Dbg::logs(char*)>
c000a941:	83 c4 20             	add    esp,0x20
c000a944:	c3                   	ret    

c000a945 <Dbg::kprintf(char const*, ...)>:
c000a945:	55                   	push   ebp
c000a946:	57                   	push   edi
c000a947:	56                   	push   esi
c000a948:	53                   	push   ebx
c000a949:	83 ec 0c             	sub    esp,0xc
c000a94c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a950:	f6 05 d0 5e 02 c0 10 	test   BYTE PTR ds:0xc0025ed0,0x10
c000a957:	74 08                	je     c000a961 <Dbg::kprintf(char const*, ...)+0x1c>
c000a959:	83 c4 0c             	add    esp,0xc
c000a95c:	5b                   	pop    ebx
c000a95d:	5e                   	pop    esi
c000a95e:	5f                   	pop    edi
c000a95f:	5d                   	pop    ebp
c000a960:	c3                   	ret    
c000a961:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a965:	31 ff                	xor    edi,edi
c000a967:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a96b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a96e:	85 c0                	test   eax,eax
c000a970:	74 e7                	je     c000a959 <Dbg::kprintf(char const*, ...)+0x14>
c000a972:	8d 77 01             	lea    esi,[edi+0x1]
c000a975:	83 f8 25             	cmp    eax,0x25
c000a978:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a97b:	75 47                	jne    c000a9c4 <Dbg::kprintf(char const*, ...)+0x7f>
c000a97d:	83 c7 02             	add    edi,0x2
c000a980:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a983:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a986:	83 e8 25             	sub    eax,0x25
c000a989:	0f b6 c0             	movzx  eax,al
c000a98c:	83 f8 53             	cmp    eax,0x53
c000a98f:	0f 87 ce 00 00 00    	ja     c000aa63 <Dbg::kprintf(char const*, ...)+0x11e>
c000a995:	ff 24 85 dc 0f 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdf024]
c000a99c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9a0:	89 c8                	mov    eax,ecx
c000a9a2:	83 c1 04             	add    ecx,0x4
c000a9a5:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9a9:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a9ab:	55                   	push   ebp
c000a9ac:	e8 55 ff ff ff       	call   c000a906 <Dbg::logWriteInt(unsigned int)>
c000a9b1:	58                   	pop    eax
c000a9b2:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a9b5:	85 c0                	test   eax,eax
c000a9b7:	74 a0                	je     c000a959 <Dbg::kprintf(char const*, ...)+0x14>
c000a9b9:	8d 77 01             	lea    esi,[edi+0x1]
c000a9bc:	83 f8 25             	cmp    eax,0x25
c000a9bf:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a9c2:	74 b9                	je     c000a97d <Dbg::kprintf(char const*, ...)+0x38>
c000a9c4:	50                   	push   eax
c000a9c5:	89 f7                	mov    edi,esi
c000a9c7:	e8 fb fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000a9cc:	89 ee                	mov    esi,ebp
c000a9ce:	58                   	pop    eax
c000a9cf:	eb e1                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9d1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9d5:	89 c8                	mov    eax,ecx
c000a9d7:	83 c1 04             	add    ecx,0x4
c000a9da:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9dc:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9e0:	50                   	push   eax
c000a9e1:	e8 01 ff ff ff       	call   c000a8e7 <Dbg::logs(char*)>
c000a9e6:	58                   	pop    eax
c000a9e7:	eb c9                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9e9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9ed:	89 d0                	mov    eax,edx
c000a9ef:	83 c2 04             	add    edx,0x4
c000a9f2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9f6:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9f8:	50                   	push   eax
c000a9f9:	e8 08 ff ff ff       	call   c000a906 <Dbg::logWriteInt(unsigned int)>
c000a9fe:	58                   	pop    eax
c000a9ff:	eb b1                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa01:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa05:	89 d0                	mov    eax,edx
c000aa07:	83 c2 04             	add    edx,0x4
c000aa0a:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000aa0d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa11:	50                   	push   eax
c000aa12:	e8 b0 fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa17:	58                   	pop    eax
c000aa18:	eb 98                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa1a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000aa1e:	89 c8                	mov    eax,ecx
c000aa20:	83 c1 04             	add    ecx,0x4
c000aa23:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000aa27:	6a 10                	push   0x10
c000aa29:	8b 08                	mov    ecx,DWORD PTR [eax]
c000aa2b:	51                   	push   ecx
c000aa2c:	e8 f3 fe ff ff       	call   c000a924 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa31:	5d                   	pop    ebp
c000aa32:	58                   	pop    eax
c000aa33:	e9 7a ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa38:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa3c:	89 d0                	mov    eax,edx
c000aa3e:	83 c2 08             	add    edx,0x8
c000aa41:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa45:	6a 10                	push   0x10
c000aa47:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa49:	50                   	push   eax
c000aa4a:	e8 d5 fe ff ff       	call   c000a924 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa4f:	58                   	pop    eax
c000aa50:	5a                   	pop    edx
c000aa51:	e9 5c ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa56:	6a 25                	push   0x25
c000aa58:	e8 6a fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa5d:	5a                   	pop    edx
c000aa5e:	e9 4f ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa63:	6a 25                	push   0x25
c000aa65:	e8 5d fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa6a:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000aa6e:	50                   	push   eax
c000aa6f:	e8 53 fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa74:	5a                   	pop    edx
c000aa75:	59                   	pop    ecx
c000aa76:	e9 37 ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa7b:	90                   	nop

c000aa7c <KiUbsanPrintDetails(char const*, void*)>:
c000aa7c:	83 ec 1c             	sub    esp,0x1c
c000aa7f:	83 ec 08             	sub    esp,0x8
c000aa82:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000aa86:	68 2c 11 02 c0       	push   0xc002112c
c000aa8b:	e8 b5 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aa90:	83 c4 10             	add    esp,0x10
c000aa93:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aa97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa9f:	8b 00                	mov    eax,DWORD PTR [eax]
c000aaa1:	83 ec 08             	sub    esp,0x8
c000aaa4:	50                   	push   eax
c000aaa5:	68 40 11 02 c0       	push   0xc0021140
c000aaaa:	e8 96 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aaaf:	83 c4 10             	add    esp,0x10
c000aab2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aab6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000aab9:	83 ec 08             	sub    esp,0x8
c000aabc:	50                   	push   eax
c000aabd:	68 4a 11 02 c0       	push   0xc002114a
c000aac2:	e8 7e fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aac7:	83 c4 10             	add    esp,0x10
c000aaca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aace:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000aad1:	83 ec 08             	sub    esp,0x8
c000aad4:	50                   	push   eax
c000aad5:	68 54 11 02 c0       	push   0xc0021154
c000aada:	e8 66 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aadf:	83 c4 10             	add    esp,0x10
c000aae2:	90                   	nop
c000aae3:	83 c4 1c             	add    esp,0x1c
c000aae6:	c3                   	ret    
c000aae7:	90                   	nop

c000aae8 <__ubsan_handle_type_mismatch_v1>:
c000aae8:	83 ec 0c             	sub    esp,0xc
c000aaeb:	83 ec 08             	sub    esp,0x8
c000aaee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aaf2:	68 98 12 02 c0       	push   0xc0021298
c000aaf7:	e8 80 ff ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000aafc:	83 c4 10             	add    esp,0x10
c000aaff:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000ab04:	75 16                	jne    c000ab1c <__ubsan_handle_type_mismatch_v1+0x34>
c000ab06:	83 ec 0c             	sub    esp,0xc
c000ab09:	68 5e 11 02 c0       	push   0xc002115e
c000ab0e:	e8 32 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab13:	83 c4 10             	add    esp,0x10
c000ab16:	e9 91 00 00 00       	jmp    c000abac <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab1b:	90                   	nop
c000ab1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab20:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ab23:	85 c0                	test   eax,eax
c000ab25:	74 29                	je     c000ab50 <__ubsan_handle_type_mismatch_v1+0x68>
c000ab27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab2b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ab2e:	83 e8 01             	sub    eax,0x1
c000ab31:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c000ab35:	75 19                	jne    c000ab50 <__ubsan_handle_type_mismatch_v1+0x68>
c000ab37:	83 ec 08             	sub    esp,0x8
c000ab3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab3e:	68 b8 12 02 c0       	push   0xc00212b8
c000ab43:	e8 fd fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab48:	83 c4 10             	add    esp,0x10
c000ab4b:	eb 5f                	jmp    c000abac <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab4d:	8d 76 00             	lea    esi,[esi+0x0]
c000ab50:	83 ec 0c             	sub    esp,0xc
c000ab53:	68 73 11 02 c0       	push   0xc0021173
c000ab58:	e8 e8 fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab5d:	83 c4 10             	add    esp,0x10
c000ab60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab64:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab67:	0f b6 c0             	movzx  eax,al
c000ab6a:	83 ec 08             	sub    esp,0x8
c000ab6d:	50                   	push   eax
c000ab6e:	68 8d 11 02 c0       	push   0xc002118d
c000ab73:	e8 cd fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab78:	83 c4 10             	add    esp,0x10
c000ab7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab7f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab82:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000ab85:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ab89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab8d:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab90:	0f b6 c0             	movzx  eax,al
c000ab93:	8b 04 85 80 32 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcd80]
c000ab9a:	51                   	push   ecx
c000ab9b:	52                   	push   edx
c000ab9c:	50                   	push   eax
c000ab9d:	68 e0 12 02 c0       	push   0xc00212e0
c000aba2:	e8 9e fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aba7:	83 c4 10             	add    esp,0x10
c000abaa:	66 90                	xchg   ax,ax
c000abac:	83 ec 0c             	sub    esp,0xc
c000abaf:	68 98 12 02 c0       	push   0xc0021298
c000abb4:	e8 c0 67 00 00       	call   c0011379 <KePanic(char const*)>
c000abb9:	83 c4 10             	add    esp,0x10
c000abbc:	90                   	nop
c000abbd:	83 c4 0c             	add    esp,0xc
c000abc0:	c3                   	ret    
c000abc1:	8d 76 00             	lea    esi,[esi+0x0]

c000abc4 <__ubsan_handle_pointer_overflow>:
c000abc4:	83 ec 0c             	sub    esp,0xc
c000abc7:	83 ec 08             	sub    esp,0x8
c000abca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abce:	68 28 13 02 c0       	push   0xc0021328
c000abd3:	e8 a4 fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000abd8:	83 c4 10             	add    esp,0x10
c000abdb:	83 ec 0c             	sub    esp,0xc
c000abde:	68 28 13 02 c0       	push   0xc0021328
c000abe3:	e8 91 67 00 00       	call   c0011379 <KePanic(char const*)>
c000abe8:	83 c4 10             	add    esp,0x10
c000abeb:	90                   	nop
c000abec:	83 c4 0c             	add    esp,0xc
c000abef:	c3                   	ret    

c000abf0 <__ubsan_handle_out_of_bounds>:
c000abf0:	83 ec 0c             	sub    esp,0xc
c000abf3:	83 ec 08             	sub    esp,0x8
c000abf6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abfa:	68 98 11 02 c0       	push   0xc0021198
c000abff:	e8 78 fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac04:	83 c4 10             	add    esp,0x10
c000ac07:	83 ec 0c             	sub    esp,0xc
c000ac0a:	68 98 11 02 c0       	push   0xc0021198
c000ac0f:	e8 65 67 00 00       	call   c0011379 <KePanic(char const*)>
c000ac14:	83 c4 10             	add    esp,0x10
c000ac17:	90                   	nop
c000ac18:	83 c4 0c             	add    esp,0xc
c000ac1b:	c3                   	ret    

c000ac1c <__ubsan_handle_add_overflow>:
c000ac1c:	83 ec 0c             	sub    esp,0xc
c000ac1f:	83 ec 08             	sub    esp,0x8
c000ac22:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac26:	68 b5 11 02 c0       	push   0xc00211b5
c000ac2b:	e8 4c fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac30:	83 c4 10             	add    esp,0x10
c000ac33:	83 ec 0c             	sub    esp,0xc
c000ac36:	68 b5 11 02 c0       	push   0xc00211b5
c000ac3b:	e8 39 67 00 00       	call   c0011379 <KePanic(char const*)>
c000ac40:	83 c4 10             	add    esp,0x10
c000ac43:	90                   	nop
c000ac44:	83 c4 0c             	add    esp,0xc
c000ac47:	c3                   	ret    

c000ac48 <__ubsan_handle_load_invalid_value>:
c000ac48:	83 ec 0c             	sub    esp,0xc
c000ac4b:	83 ec 08             	sub    esp,0x8
c000ac4e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac52:	68 48 13 02 c0       	push   0xc0021348
c000ac57:	e8 20 fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac5c:	83 c4 10             	add    esp,0x10
c000ac5f:	83 ec 0c             	sub    esp,0xc
c000ac62:	68 48 13 02 c0       	push   0xc0021348
c000ac67:	e8 0d 67 00 00       	call   c0011379 <KePanic(char const*)>
c000ac6c:	83 c4 10             	add    esp,0x10
c000ac6f:	90                   	nop
c000ac70:	83 c4 0c             	add    esp,0xc
c000ac73:	c3                   	ret    

c000ac74 <__ubsan_handle_divrem_overflow>:
c000ac74:	83 ec 0c             	sub    esp,0xc
c000ac77:	83 ec 08             	sub    esp,0x8
c000ac7a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac7e:	68 6c 13 02 c0       	push   0xc002136c
c000ac83:	e8 f4 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac88:	83 c4 10             	add    esp,0x10
c000ac8b:	83 ec 0c             	sub    esp,0xc
c000ac8e:	68 6c 13 02 c0       	push   0xc002136c
c000ac93:	e8 e1 66 00 00       	call   c0011379 <KePanic(char const*)>
c000ac98:	83 c4 10             	add    esp,0x10
c000ac9b:	90                   	nop
c000ac9c:	83 c4 0c             	add    esp,0xc
c000ac9f:	c3                   	ret    

c000aca0 <__ubsan_handle_mul_overflow>:
c000aca0:	83 ec 0c             	sub    esp,0xc
c000aca3:	83 ec 08             	sub    esp,0x8
c000aca6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acaa:	68 d1 11 02 c0       	push   0xc00211d1
c000acaf:	e8 c8 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000acb4:	83 c4 10             	add    esp,0x10
c000acb7:	83 ec 0c             	sub    esp,0xc
c000acba:	68 d1 11 02 c0       	push   0xc00211d1
c000acbf:	e8 b5 66 00 00       	call   c0011379 <KePanic(char const*)>
c000acc4:	83 c4 10             	add    esp,0x10
c000acc7:	90                   	nop
c000acc8:	83 c4 0c             	add    esp,0xc
c000accb:	c3                   	ret    

c000accc <__ubsan_handle_sub_overflow>:
c000accc:	83 ec 0c             	sub    esp,0xc
c000accf:	83 ec 08             	sub    esp,0x8
c000acd2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acd6:	68 ed 11 02 c0       	push   0xc00211ed
c000acdb:	e8 9c fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ace0:	83 c4 10             	add    esp,0x10
c000ace3:	83 ec 0c             	sub    esp,0xc
c000ace6:	68 ed 11 02 c0       	push   0xc00211ed
c000aceb:	e8 89 66 00 00       	call   c0011379 <KePanic(char const*)>
c000acf0:	83 c4 10             	add    esp,0x10
c000acf3:	90                   	nop
c000acf4:	83 c4 0c             	add    esp,0xc
c000acf7:	c3                   	ret    

c000acf8 <__ubsan_handle_shift_out_of_bounds>:
c000acf8:	83 ec 0c             	sub    esp,0xc
c000acfb:	83 ec 08             	sub    esp,0x8
c000acfe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad02:	68 8c 13 02 c0       	push   0xc002138c
c000ad07:	e8 70 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ad0c:	83 c4 10             	add    esp,0x10
c000ad0f:	83 ec 0c             	sub    esp,0xc
c000ad12:	68 8c 13 02 c0       	push   0xc002138c
c000ad17:	e8 5d 66 00 00       	call   c0011379 <KePanic(char const*)>
c000ad1c:	83 c4 10             	add    esp,0x10
c000ad1f:	90                   	nop
c000ad20:	83 c4 0c             	add    esp,0xc
c000ad23:	c3                   	ret    

c000ad24 <__ubsan_handle_negate_overflow>:
c000ad24:	83 ec 0c             	sub    esp,0xc
c000ad27:	83 ec 08             	sub    esp,0x8
c000ad2a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad2e:	68 b0 13 02 c0       	push   0xc00213b0
c000ad33:	e8 44 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ad38:	83 c4 10             	add    esp,0x10
c000ad3b:	83 ec 0c             	sub    esp,0xc
c000ad3e:	68 b0 13 02 c0       	push   0xc00213b0
c000ad43:	e8 31 66 00 00       	call   c0011379 <KePanic(char const*)>
c000ad48:	83 c4 10             	add    esp,0x10
c000ad4b:	90                   	nop
c000ad4c:	83 c4 0c             	add    esp,0xc
c000ad4f:	c3                   	ret    

c000ad50 <KiCreateSymlinkID()>:
c000ad50:	55                   	push   ebp
c000ad51:	57                   	push   edi
c000ad52:	56                   	push   esi
c000ad53:	53                   	push   ebx
c000ad54:	31 db                	xor    ebx,ebx
c000ad56:	83 ec 1c             	sub    esp,0x1c
c000ad59:	e8 69 67 00 00       	call   c00114c7 <KeRand()>
c000ad5e:	43                   	inc    ebx
c000ad5f:	8b 2d 00 64 02 c0    	mov    ebp,DWORD PTR ds:0xc0026400
c000ad65:	31 d2                	xor    edx,edx
c000ad67:	8d 4d 01             	lea    ecx,[ebp+0x1]
c000ad6a:	0f a4 c2 1b          	shld   edx,eax,0x1b
c000ad6e:	89 0d 00 64 02 c0    	mov    DWORD PTR ds:0xc0026400,ecx
c000ad74:	c1 e0 1b             	shl    eax,0x1b
c000ad77:	89 d7                	mov    edi,edx
c000ad79:	89 c6                	mov    esi,eax
c000ad7b:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000ad7f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ad87:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c000ad8d:	75 10                	jne    c000ad9f <KiCreateSymlinkID()+0x4f>
c000ad8f:	83 ec 0c             	sub    esp,0xc
c000ad92:	68 cf 13 02 c0       	push   0xc00213cf
c000ad97:	e8 dd 65 00 00       	call   c0011379 <KePanic(char const*)>
c000ad9c:	83 c4 10             	add    esp,0x10
c000ad9f:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000ada3:	75 04                	jne    c000ada9 <KiCreateSymlinkID()+0x59>
c000ada5:	39 f5                	cmp    ebp,esi
c000ada7:	74 b0                	je     c000ad59 <KiCreateSymlinkID()+0x9>
c000ada9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000adad:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000adb1:	31 f0                	xor    eax,esi
c000adb3:	83 c4 1c             	add    esp,0x1c
c000adb6:	31 fa                	xor    edx,edi
c000adb8:	5b                   	pop    ebx
c000adb9:	5e                   	pop    esi
c000adba:	5f                   	pop    edi
c000adbb:	5d                   	pop    ebp
c000adbc:	c3                   	ret    

c000adbd <KiFlushSymlinkChanges()>:
c000adbd:	56                   	push   esi
c000adbe:	53                   	push   ebx
c000adbf:	83 ec 20             	sub    esp,0x20
c000adc2:	68 14 01 00 00       	push   0x114
c000adc7:	e8 ea cc ff ff       	call   c0007ab6 <malloc>
c000adcc:	83 c4 0c             	add    esp,0xc
c000adcf:	89 c3                	mov    ebx,eax
c000add1:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000add7:	68 d8 13 02 c0       	push   0xc00213d8
c000addc:	50                   	push   eax
c000addd:	e8 ee 0a 00 00       	call   c000b8d0 <File::File(char const*, Process*)>
c000ade2:	83 c4 10             	add    esp,0x10
c000ade5:	85 db                	test   ebx,ebx
c000ade7:	75 10                	jne    c000adf9 <KiFlushSymlinkChanges()+0x3c>
c000ade9:	83 ec 0c             	sub    esp,0xc
c000adec:	68 f6 13 02 c0       	push   0xc00213f6
c000adf1:	e8 83 65 00 00       	call   c0011379 <KePanic(char const*)>
c000adf6:	83 c4 10             	add    esp,0x10
c000adf9:	50                   	push   eax
c000adfa:	50                   	push   eax
c000adfb:	6a 06                	push   0x6
c000adfd:	53                   	push   ebx
c000adfe:	e8 eb 0a 00 00       	call   c000b8ee <File::open(FileOpenMode)>
c000ae03:	83 c4 10             	add    esp,0x10
c000ae06:	85 c0                	test   eax,eax
c000ae08:	74 10                	je     c000ae1a <KiFlushSymlinkChanges()+0x5d>
c000ae0a:	83 ec 0c             	sub    esp,0xc
c000ae0d:	68 10 14 02 c0       	push   0xc0021410
c000ae12:	e8 62 65 00 00       	call   c0011379 <KePanic(char const*)>
c000ae17:	83 c4 10             	add    esp,0x10
c000ae1a:	31 f6                	xor    esi,esi
c000ae1c:	39 35 c0 5f 02 c0    	cmp    DWORD PTR ds:0xc0025fc0,esi
c000ae22:	7e 40                	jle    c000ae64 <KiFlushSymlinkChanges()+0xa7>
c000ae24:	83 ec 0c             	sub    esp,0xc
c000ae27:	8b 13                	mov    edx,DWORD PTR [ebx]
c000ae29:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ae2d:	50                   	push   eax
c000ae2e:	89 f0                	mov    eax,esi
c000ae30:	c1 e0 08             	shl    eax,0x8
c000ae33:	05 00 60 02 c0       	add    eax,0xc0026000
c000ae38:	50                   	push   eax
c000ae39:	6a 00                	push   0x0
c000ae3b:	68 00 01 00 00       	push   0x100
c000ae40:	53                   	push   ebx
c000ae41:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000ae44:	83 c4 20             	add    esp,0x20
c000ae47:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c000ae4f:	74 10                	je     c000ae61 <KiFlushSymlinkChanges()+0xa4>
c000ae51:	83 ec 0c             	sub    esp,0xc
c000ae54:	68 2a 14 02 c0       	push   0xc002142a
c000ae59:	e8 1b 65 00 00       	call   c0011379 <KePanic(char const*)>
c000ae5e:	83 c4 10             	add    esp,0x10
c000ae61:	46                   	inc    esi
c000ae62:	eb b8                	jmp    c000ae1c <KiFlushSymlinkChanges()+0x5f>
c000ae64:	83 ec 0c             	sub    esp,0xc
c000ae67:	c7 05 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025fc0,0x0
c000ae71:	53                   	push   ebx
c000ae72:	e8 d5 0a 00 00       	call   c000b94c <File::close()>
c000ae77:	83 c4 10             	add    esp,0x10
c000ae7a:	85 db                	test   ebx,ebx
c000ae7c:	74 0c                	je     c000ae8a <KiFlushSymlinkChanges()+0xcd>
c000ae7e:	83 ec 0c             	sub    esp,0xc
c000ae81:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ae83:	53                   	push   ebx
c000ae84:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000ae87:	83 c4 10             	add    esp,0x10
c000ae8a:	83 c4 14             	add    esp,0x14
c000ae8d:	5b                   	pop    ebx
c000ae8e:	5e                   	pop    esi
c000ae8f:	c3                   	ret    

c000ae90 <KiDeinitialiseSymlinks(void*)>:
c000ae90:	e9 28 ff ff ff       	jmp    c000adbd <KiFlushSymlinkChanges()>

c000ae95 <KeRegisterSymlink(char const*, unsigned long long)>:
c000ae95:	53                   	push   ebx
c000ae96:	83 ec 0c             	sub    esp,0xc
c000ae99:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000ae9d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000aea1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000aea5:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000aeaa:	68 00 01 00 00       	push   0x100
c000aeaf:	89 14 c5 e0 5f 02 c0 	mov    DWORD PTR [eax*8-0x3ffda020],edx
c000aeb6:	6a 00                	push   0x0
c000aeb8:	89 0c c5 e4 5f 02 c0 	mov    DWORD PTR [eax*8-0x3ffda01c],ecx
c000aebf:	c1 e0 08             	shl    eax,0x8
c000aec2:	05 00 60 02 c0       	add    eax,0xc0026000
c000aec7:	50                   	push   eax
c000aec8:	e8 23 56 ff ff       	call   c00004f0 <memset>
c000aecd:	58                   	pop    eax
c000aece:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000aed3:	5a                   	pop    edx
c000aed4:	c1 e0 08             	shl    eax,0x8
c000aed7:	53                   	push   ebx
c000aed8:	05 00 60 02 c0       	add    eax,0xc0026000
c000aedd:	50                   	push   eax
c000aede:	e8 5d 57 ff ff       	call   c0000640 <strcpy>
c000aee3:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000aee8:	83 c4 10             	add    esp,0x10
c000aeeb:	40                   	inc    eax
c000aeec:	a3 c0 5f 02 c0       	mov    ds:0xc0025fc0,eax
c000aef1:	83 f8 03             	cmp    eax,0x3
c000aef4:	7e 09                	jle    c000aeff <KeRegisterSymlink(char const*, unsigned long long)+0x6a>
c000aef6:	83 c4 08             	add    esp,0x8
c000aef9:	5b                   	pop    ebx
c000aefa:	e9 be fe ff ff       	jmp    c000adbd <KiFlushSymlinkChanges()>
c000aeff:	83 c4 08             	add    esp,0x8
c000af02:	5b                   	pop    ebx
c000af03:	c3                   	ret    

c000af04 <KiIsSymlinkRegistered(char const*)>:
c000af04:	53                   	push   ebx
c000af05:	31 db                	xor    ebx,ebx
c000af07:	83 ec 08             	sub    esp,0x8
c000af0a:	39 1d c0 5f 02 c0    	cmp    DWORD PTR ds:0xc0025fc0,ebx
c000af10:	7e 30                	jle    c000af42 <KiIsSymlinkRegistered(char const*)+0x3e>
c000af12:	50                   	push   eax
c000af13:	50                   	push   eax
c000af14:	89 d8                	mov    eax,ebx
c000af16:	c1 e0 08             	shl    eax,0x8
c000af19:	05 00 60 02 c0       	add    eax,0xc0026000
c000af1e:	50                   	push   eax
c000af1f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af23:	e8 28 58 ff ff       	call   c0000750 <strcmp>
c000af28:	83 c4 10             	add    esp,0x10
c000af2b:	85 c0                	test   eax,eax
c000af2d:	75 10                	jne    c000af3f <KiIsSymlinkRegistered(char const*)+0x3b>
c000af2f:	8b 04 dd e0 5f 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffda020]
c000af36:	8b 14 dd e4 5f 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffda01c]
c000af3d:	eb 07                	jmp    c000af46 <KiIsSymlinkRegistered(char const*)+0x42>
c000af3f:	43                   	inc    ebx
c000af40:	eb c8                	jmp    c000af0a <KiIsSymlinkRegistered(char const*)+0x6>
c000af42:	31 c0                	xor    eax,eax
c000af44:	31 d2                	xor    edx,edx
c000af46:	83 c4 08             	add    esp,0x8
c000af49:	5b                   	pop    ebx
c000af4a:	c3                   	ret    

c000af4b <KeDereferenceSymlink(char const*, char*)>:
c000af4b:	55                   	push   ebp
c000af4c:	57                   	push   edi
c000af4d:	56                   	push   esi
c000af4e:	53                   	push   ebx
c000af4f:	83 ec 44             	sub    esp,0x44
c000af52:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c000af56:	56                   	push   esi
c000af57:	68 44 14 02 c0       	push   0xc0021444
c000af5c:	e8 e4 f9 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000af61:	89 34 24             	mov    DWORD PTR [esp],esi
c000af64:	e8 9b ff ff ff       	call   c000af04 <KiIsSymlinkRegistered(char const*)>
c000af69:	83 c4 10             	add    esp,0x10
c000af6c:	89 c7                	mov    edi,eax
c000af6e:	89 d0                	mov    eax,edx
c000af70:	09 f8                	or     eax,edi
c000af72:	0f 84 de 01 00 00    	je     c000b156 <KeDereferenceSymlink(char const*, char*)+0x20b>
c000af78:	89 d5                	mov    ebp,edx
c000af7a:	53                   	push   ebx
c000af7b:	53                   	push   ebx
c000af7c:	57                   	push   edi
c000af7d:	68 5e 14 02 c0       	push   0xc002145e
c000af82:	e8 be f9 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000af87:	58                   	pop    eax
c000af88:	5a                   	pop    edx
c000af89:	55                   	push   ebp
c000af8a:	68 6c 14 02 c0       	push   0xc002146c
c000af8f:	e8 b1 f9 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000af94:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000af9b:	e8 16 cb ff ff       	call   c0007ab6 <malloc>
c000afa0:	83 c4 0c             	add    esp,0xc
c000afa3:	89 c3                	mov    ebx,eax
c000afa5:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000afab:	56                   	push   esi
c000afac:	50                   	push   eax
c000afad:	e8 1e 09 00 00       	call   c000b8d0 <File::File(char const*, Process*)>
c000afb2:	83 c4 10             	add    esp,0x10
c000afb5:	85 db                	test   ebx,ebx
c000afb7:	0f 84 68 01 00 00    	je     c000b125 <KeDereferenceSymlink(char const*, char*)+0x1da>
c000afbd:	83 ec 0c             	sub    esp,0xc
c000afc0:	68 60 20 02 c0       	push   0xc0022060
c000afc5:	e8 7b f9 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000afca:	5a                   	pop    edx
c000afcb:	59                   	pop    ecx
c000afcc:	6a 01                	push   0x1
c000afce:	53                   	push   ebx
c000afcf:	e8 1a 09 00 00       	call   c000b8ee <File::open(FileOpenMode)>
c000afd4:	83 c4 10             	add    esp,0x10
c000afd7:	85 c0                	test   eax,eax
c000afd9:	74 0b                	je     c000afe6 <KeDereferenceSymlink(char const*, char*)+0x9b>
c000afdb:	83 ec 0c             	sub    esp,0xc
c000afde:	8b 03                	mov    eax,DWORD PTR [ebx]
c000afe0:	53                   	push   ebx
c000afe1:	e9 39 01 00 00       	jmp    c000b11f <KeDereferenceSymlink(char const*, char*)+0x1d4>
c000afe6:	83 ec 0c             	sub    esp,0xc
c000afe9:	68 66 0a 02 c0       	push   0xc0020a66
c000afee:	e8 52 f9 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aff3:	58                   	pop    eax
c000aff4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000aff6:	8d 74 24 18          	lea    esi,[esp+0x18]
c000affa:	56                   	push   esi
c000affb:	8d 54 24 37          	lea    edx,[esp+0x37]
c000afff:	52                   	push   edx
c000b000:	6a 00                	push   0x0
c000b002:	6a 08                	push   0x8
c000b004:	53                   	push   ebx
c000b005:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b008:	83 c4 20             	add    esp,0x20
c000b00b:	85 c0                	test   eax,eax
c000b00d:	0f 85 fe 00 00 00    	jne    c000b111 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000b013:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000b018:	0f 85 f3 00 00 00    	jne    c000b111 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000b01e:	83 ec 0c             	sub    esp,0xc
c000b021:	68 92 20 02 c0       	push   0xc0022092
c000b026:	e8 1a f9 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b02b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b02d:	8d 54 24 20          	lea    edx,[esp+0x20]
c000b031:	89 34 24             	mov    DWORD PTR [esp],esi
c000b034:	52                   	push   edx
c000b035:	6a 00                	push   0x0
c000b037:	6a 08                	push   0x8
c000b039:	53                   	push   ebx
c000b03a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b03d:	83 c4 20             	add    esp,0x20
c000b040:	85 c0                	test   eax,eax
c000b042:	0f 85 c9 00 00 00    	jne    c000b111 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000b048:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000b04d:	0f 85 be 00 00 00    	jne    c000b111 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000b053:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c000b057:	0f 85 f9 00 00 00    	jne    c000b156 <KeDereferenceSymlink(char const*, char*)+0x20b>
c000b05d:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c000b061:	0f 85 ef 00 00 00    	jne    c000b156 <KeDereferenceSymlink(char const*, char*)+0x20b>
c000b067:	83 ec 0c             	sub    esp,0xc
c000b06a:	68 7a 14 02 c0       	push   0xc002147a
c000b06f:	e8 d1 f8 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b074:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000b07c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000b084:	83 c4 0c             	add    esp,0xc
c000b087:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000b08b:	50                   	push   eax
c000b08c:	8d 44 24 20          	lea    eax,[esp+0x20]
c000b090:	50                   	push   eax
c000b091:	53                   	push   ebx
c000b092:	e8 59 0b 00 00       	call   c000bbf0 <File::stat(unsigned long long*, bool*)>
c000b097:	83 c4 10             	add    esp,0x10
c000b09a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000b09f:	75 70                	jne    c000b111 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000b0a1:	31 ff                	xor    edi,edi
c000b0a3:	b8 0f 00 00 00       	mov    eax,0xf
c000b0a8:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c000b0ac:	89 f8                	mov    eax,edi
c000b0ae:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000b0b2:	73 5d                	jae    c000b111 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000b0b4:	83 ec 0c             	sub    esp,0xc
c000b0b7:	68 7a 14 02 c0       	push   0xc002147a
c000b0bc:	e8 84 f8 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b0c1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b0c5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000b0c9:	83 c0 f0             	add    eax,0xfffffff0
c000b0cc:	b9 ff 00 00 00       	mov    ecx,0xff
c000b0d1:	83 d2 ff             	adc    edx,0xffffffff
c000b0d4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b0d8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b0dc:	83 c4 10             	add    esp,0x10
c000b0df:	39 c1                	cmp    ecx,eax
c000b0e1:	19 d7                	sbb    edi,edx
c000b0e3:	72 40                	jb     c000b125 <KeDereferenceSymlink(char const*, char*)+0x1da>
c000b0e5:	83 ec 0c             	sub    esp,0xc
c000b0e8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000b0ea:	56                   	push   esi
c000b0eb:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000b0ef:	52                   	push   edx
c000b0f0:	50                   	push   eax
c000b0f1:	53                   	push   ebx
c000b0f2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000b0f5:	83 c4 20             	add    esp,0x20
c000b0f8:	85 c0                	test   eax,eax
c000b0fa:	75 15                	jne    c000b111 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000b0fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b100:	89 c7                	mov    edi,eax
c000b102:	c1 ff 1f             	sar    edi,0x1f
c000b105:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000b109:	75 06                	jne    c000b111 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000b10b:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c000b10f:	74 19                	je     c000b12a <KeDereferenceSymlink(char const*, char*)+0x1df>
c000b111:	83 ec 0c             	sub    esp,0xc
c000b114:	53                   	push   ebx
c000b115:	e8 32 08 00 00       	call   c000b94c <File::close()>
c000b11a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b11c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b11f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b122:	83 c4 10             	add    esp,0x10
c000b125:	83 c8 ff             	or     eax,0xffffffff
c000b128:	eb 2e                	jmp    c000b158 <KeDereferenceSymlink(char const*, char*)+0x20d>
c000b12a:	83 ec 0c             	sub    esp,0xc
c000b12d:	68 72 2b 02 c0       	push   0xc0022b72
c000b132:	e8 0e f8 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b137:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b13a:	e8 0d 08 00 00       	call   c000b94c <File::close()>
c000b13f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b141:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b144:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b147:	c7 04 24 7d 14 02 c0 	mov    DWORD PTR [esp],0xc002147d
c000b14e:	e8 f2 f7 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b153:	83 c4 10             	add    esp,0x10
c000b156:	31 c0                	xor    eax,eax
c000b158:	83 c4 3c             	add    esp,0x3c
c000b15b:	5b                   	pop    ebx
c000b15c:	5e                   	pop    esi
c000b15d:	5f                   	pop    edi
c000b15e:	5d                   	pop    ebp
c000b15f:	c3                   	ret    

c000b160 <KeCreateSymlink(char const*, char const*)>:
c000b160:	55                   	push   ebp
c000b161:	57                   	push   edi
c000b162:	56                   	push   esi
c000b163:	53                   	push   ebx
c000b164:	83 ec 38             	sub    esp,0x38
c000b167:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c000b16b:	68 14 01 00 00       	push   0x114
c000b170:	e8 41 c9 ff ff       	call   c0007ab6 <malloc>
c000b175:	6a 00                	push   0x0
c000b177:	89 c3                	mov    ebx,eax
c000b179:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000b17f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000b183:	50                   	push   eax
c000b184:	e8 69 06 00 00       	call   c000b7f2 <File::File(char const*, Process*, bool)>
c000b189:	83 c4 20             	add    esp,0x20
c000b18c:	b8 01 00 00 00       	mov    eax,0x1
c000b191:	85 db                	test   ebx,ebx
c000b193:	0f 84 fb 00 00 00    	je     c000b294 <KeCreateSymlink(char const*, char const*)+0x134>
c000b199:	52                   	push   edx
c000b19a:	52                   	push   edx
c000b19b:	6a 12                	push   0x12
c000b19d:	53                   	push   ebx
c000b19e:	e8 4b 07 00 00       	call   c000b8ee <File::open(FileOpenMode)>
c000b1a3:	83 c4 10             	add    esp,0x10
c000b1a6:	85 c0                	test   eax,eax
c000b1a8:	74 0b                	je     c000b1b5 <KeCreateSymlink(char const*, char const*)+0x55>
c000b1aa:	83 ec 0c             	sub    esp,0xc
c000b1ad:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b1af:	53                   	push   ebx
c000b1b0:	e9 d4 00 00 00       	jmp    c000b289 <KeCreateSymlink(char const*, char const*)+0x129>
c000b1b5:	8d 7c 24 17          	lea    edi,[esp+0x17]
c000b1b9:	be 80 14 02 c0       	mov    esi,0xc0021480
c000b1be:	b9 09 00 00 00       	mov    ecx,0x9
c000b1c3:	fc                   	cld    
c000b1c4:	83 ec 0c             	sub    esp,0xc
c000b1c7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b1c9:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b1cd:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b1cf:	56                   	push   esi
c000b1d0:	8d 54 24 27          	lea    edx,[esp+0x27]
c000b1d4:	52                   	push   edx
c000b1d5:	6a 00                	push   0x0
c000b1d7:	6a 08                	push   0x8
c000b1d9:	53                   	push   ebx
c000b1da:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b1dd:	83 c4 20             	add    esp,0x20
c000b1e0:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b1e5:	0f 85 90 00 00 00    	jne    c000b27b <KeCreateSymlink(char const*, char const*)+0x11b>
c000b1eb:	85 c0                	test   eax,eax
c000b1ed:	0f 85 88 00 00 00    	jne    c000b27b <KeCreateSymlink(char const*, char const*)+0x11b>
c000b1f3:	e8 58 fb ff ff       	call   c000ad50 <KiCreateSymlinkID()>
c000b1f8:	83 ec 0c             	sub    esp,0xc
c000b1fb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b1ff:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b203:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b205:	56                   	push   esi
c000b206:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b20a:	52                   	push   edx
c000b20b:	6a 00                	push   0x0
c000b20d:	6a 08                	push   0x8
c000b20f:	53                   	push   ebx
c000b210:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b213:	83 c4 20             	add    esp,0x20
c000b216:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b21b:	75 5e                	jne    c000b27b <KeCreateSymlink(char const*, char const*)+0x11b>
c000b21d:	85 c0                	test   eax,eax
c000b21f:	75 5a                	jne    c000b27b <KeCreateSymlink(char const*, char const*)+0x11b>
c000b221:	83 ec 0c             	sub    esp,0xc
c000b224:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b226:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000b229:	55                   	push   ebp
c000b22a:	e8 41 53 ff ff       	call   c0000570 <strlen>
c000b22f:	89 34 24             	mov    DWORD PTR [esp],esi
c000b232:	31 d2                	xor    edx,edx
c000b234:	55                   	push   ebp
c000b235:	52                   	push   edx
c000b236:	50                   	push   eax
c000b237:	53                   	push   ebx
c000b238:	ff d7                	call   edi
c000b23a:	83 c4 14             	add    esp,0x14
c000b23d:	89 c6                	mov    esi,eax
c000b23f:	55                   	push   ebp
c000b240:	e8 2b 53 ff ff       	call   c0000570 <strlen>
c000b245:	83 c4 10             	add    esp,0x10
c000b248:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000b24c:	75 2d                	jne    c000b27b <KeCreateSymlink(char const*, char const*)+0x11b>
c000b24e:	85 f6                	test   esi,esi
c000b250:	75 29                	jne    c000b27b <KeCreateSymlink(char const*, char const*)+0x11b>
c000b252:	50                   	push   eax
c000b253:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b257:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b25b:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000b25f:	e8 31 fc ff ff       	call   c000ae95 <KeRegisterSymlink(char const*, unsigned long long)>
c000b264:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b267:	e8 e0 06 00 00       	call   c000b94c <File::close()>
c000b26c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b26e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b271:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b274:	83 c4 10             	add    esp,0x10
c000b277:	31 c0                	xor    eax,eax
c000b279:	eb 19                	jmp    c000b294 <KeCreateSymlink(char const*, char const*)+0x134>
c000b27b:	83 ec 0c             	sub    esp,0xc
c000b27e:	53                   	push   ebx
c000b27f:	e8 c8 06 00 00       	call   c000b94c <File::close()>
c000b284:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b286:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b289:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b28c:	83 c4 10             	add    esp,0x10
c000b28f:	b8 01 00 00 00       	mov    eax,0x1
c000b294:	83 c4 2c             	add    esp,0x2c
c000b297:	5b                   	pop    ebx
c000b298:	5e                   	pop    esi
c000b299:	5f                   	pop    edi
c000b29a:	5d                   	pop    ebp
c000b29b:	c3                   	ret    

c000b29c <KeInitialiseSymlinks()>:
c000b29c:	53                   	push   ebx
c000b29d:	83 ec 10             	sub    esp,0x10
c000b2a0:	c7 05 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025fc0,0x0
c000b2aa:	6a 00                	push   0x0
c000b2ac:	68 90 ae 00 c0       	push   0xc000ae90
c000b2b1:	e8 da 58 00 00       	call   c0010b90 <KeRegisterAtexit(void (*)(void*), void*)>
c000b2b6:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000b2bd:	e8 f4 c7 ff ff       	call   c0007ab6 <malloc>
c000b2c2:	83 c4 0c             	add    esp,0xc
c000b2c5:	89 c3                	mov    ebx,eax
c000b2c7:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000b2cd:	68 d8 13 02 c0       	push   0xc00213d8
c000b2d2:	50                   	push   eax
c000b2d3:	e8 f8 05 00 00       	call   c000b8d0 <File::File(char const*, Process*)>
c000b2d8:	83 c4 10             	add    esp,0x10
c000b2db:	85 db                	test   ebx,ebx
c000b2dd:	75 10                	jne    c000b2ef <KeInitialiseSymlinks()+0x53>
c000b2df:	83 ec 0c             	sub    esp,0xc
c000b2e2:	68 89 14 02 c0       	push   0xc0021489
c000b2e7:	e8 8d 60 00 00       	call   c0011379 <KePanic(char const*)>
c000b2ec:	83 c4 10             	add    esp,0x10
c000b2ef:	83 ec 0c             	sub    esp,0xc
c000b2f2:	53                   	push   ebx
c000b2f3:	e8 ba 08 00 00       	call   c000bbb2 <File::exists()>
c000b2f8:	83 c4 10             	add    esp,0x10
c000b2fb:	84 c0                	test   al,al
c000b2fd:	75 2d                	jne    c000b32c <KeInitialiseSymlinks()+0x90>
c000b2ff:	52                   	push   edx
c000b300:	52                   	push   edx
c000b301:	6a 12                	push   0x12
c000b303:	53                   	push   ebx
c000b304:	e8 e5 05 00 00       	call   c000b8ee <File::open(FileOpenMode)>
c000b309:	83 c4 10             	add    esp,0x10
c000b30c:	85 c0                	test   eax,eax
c000b30e:	74 10                	je     c000b320 <KeInitialiseSymlinks()+0x84>
c000b310:	83 ec 0c             	sub    esp,0xc
c000b313:	68 a6 14 02 c0       	push   0xc00214a6
c000b318:	e8 5c 60 00 00       	call   c0011379 <KePanic(char const*)>
c000b31d:	83 c4 10             	add    esp,0x10
c000b320:	83 ec 0c             	sub    esp,0xc
c000b323:	53                   	push   ebx
c000b324:	e8 23 06 00 00       	call   c000b94c <File::close()>
c000b329:	83 c4 10             	add    esp,0x10
c000b32c:	85 db                	test   ebx,ebx
c000b32e:	74 0c                	je     c000b33c <KeInitialiseSymlinks()+0xa0>
c000b330:	83 ec 0c             	sub    esp,0xc
c000b333:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b335:	53                   	push   ebx
c000b336:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b339:	83 c4 10             	add    esp,0x10
c000b33c:	50                   	push   eax
c000b33d:	50                   	push   eax
c000b33e:	68 c3 14 02 c0       	push   0xc00214c3
c000b343:	68 d1 14 02 c0       	push   0xc00214d1
c000b348:	e8 13 fe ff ff       	call   c000b160 <KeCreateSymlink(char const*, char const*)>
c000b34d:	83 c4 18             	add    esp,0x18
c000b350:	5b                   	pop    ebx
c000b351:	c3                   	ret    

c000b352 <File::read(unsigned long long, void*, int*)>:
c000b352:	53                   	push   ebx
c000b353:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b357:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b35b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b362:	83 f8 19             	cmp    eax,0x19
c000b365:	77 35                	ja     c000b39c <File::read(unsigned long long, void*, int*)+0x4a>
c000b367:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b36e:	85 c0                	test   eax,eax
c000b370:	74 2a                	je     c000b39c <File::read(unsigned long long, void*, int*)+0x4a>
c000b372:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b378:	85 c0                	test   eax,eax
c000b37a:	74 20                	je     c000b39c <File::read(unsigned long long, void*, int*)+0x4a>
c000b37c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b380:	74 21                	je     c000b3a3 <File::read(unsigned long long, void*, int*)+0x51>
c000b382:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b384:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b388:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b38e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b392:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b396:	5b                   	pop    ebx
c000b397:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000b39a:	ff e0                	jmp    eax
c000b39c:	b8 0b 00 00 00       	mov    eax,0xb
c000b3a1:	eb 05                	jmp    c000b3a8 <File::read(unsigned long long, void*, int*)+0x56>
c000b3a3:	b8 05 00 00 00       	mov    eax,0x5
c000b3a8:	5b                   	pop    ebx
c000b3a9:	c3                   	ret    

c000b3aa <File::write(unsigned long long, void*, int*)>:
c000b3aa:	53                   	push   ebx
c000b3ab:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b3af:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b3b3:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b3ba:	83 f8 19             	cmp    eax,0x19
c000b3bd:	77 35                	ja     c000b3f4 <File::write(unsigned long long, void*, int*)+0x4a>
c000b3bf:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b3c6:	85 c0                	test   eax,eax
c000b3c8:	74 2a                	je     c000b3f4 <File::write(unsigned long long, void*, int*)+0x4a>
c000b3ca:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b3d0:	85 c0                	test   eax,eax
c000b3d2:	74 20                	je     c000b3f4 <File::write(unsigned long long, void*, int*)+0x4a>
c000b3d4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b3d8:	74 21                	je     c000b3fb <File::write(unsigned long long, void*, int*)+0x51>
c000b3da:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b3dc:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b3e0:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b3e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b3ea:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b3ee:	5b                   	pop    ebx
c000b3ef:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000b3f2:	ff e0                	jmp    eax
c000b3f4:	b8 0b 00 00 00       	mov    eax,0xb
c000b3f9:	eb 05                	jmp    c000b400 <File::write(unsigned long long, void*, int*)+0x56>
c000b3fb:	b8 05 00 00 00       	mov    eax,0x5
c000b400:	5b                   	pop    ebx
c000b401:	c3                   	ret    

c000b402 <Directory::read(unsigned long long, void*, int*)>:
c000b402:	53                   	push   ebx
c000b403:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b407:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b40b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b412:	83 f8 19             	cmp    eax,0x19
c000b415:	77 35                	ja     c000b44c <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b417:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b41e:	85 c0                	test   eax,eax
c000b420:	74 2a                	je     c000b44c <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b422:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b428:	85 c0                	test   eax,eax
c000b42a:	74 20                	je     c000b44c <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b42c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b430:	74 21                	je     c000b453 <Directory::read(unsigned long long, void*, int*)+0x51>
c000b432:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b434:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b438:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b43e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b442:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b446:	5b                   	pop    ebx
c000b447:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c000b44a:	ff e0                	jmp    eax
c000b44c:	b8 0b 00 00 00       	mov    eax,0xb
c000b451:	eb 05                	jmp    c000b458 <Directory::read(unsigned long long, void*, int*)+0x56>
c000b453:	b8 05 00 00 00       	mov    eax,0x5
c000b458:	5b                   	pop    ebx
c000b459:	c3                   	ret    

c000b45a <Directory::write(unsigned long long, void*, int*)>:
c000b45a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b45e:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000b465:	b8 0b 00 00 00       	mov    eax,0xb
c000b46a:	83 fa 19             	cmp    edx,0x19
c000b46d:	77 18                	ja     c000b487 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b46f:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000b476:	85 d2                	test   edx,edx
c000b478:	74 0d                	je     c000b487 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b47a:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000b481:	19 c0                	sbb    eax,eax
c000b483:	83 e0 0a             	and    eax,0xa
c000b486:	40                   	inc    eax
c000b487:	c3                   	ret    

c000b488 <File::isAtty()>:
c000b488:	31 c0                	xor    eax,eax
c000b48a:	c3                   	ret    
c000b48b:	90                   	nop

c000b48c <Directory::isAtty()>:
c000b48c:	31 c0                	xor    eax,eax
c000b48e:	c3                   	ret    
c000b48f:	90                   	nop

c000b490 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000b490:	b8 0a 00 00 00       	mov    eax,0xa
c000b495:	c3                   	ret    

c000b496 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000b496:	b8 0a 00 00 00       	mov    eax,0xa
c000b49b:	c3                   	ret    

c000b49c <Filesystem::allocateSwapfile(char const*, int)>:
c000b49c:	31 c0                	xor    eax,eax
c000b49e:	31 d2                	xor    edx,edx
c000b4a0:	c3                   	ret    
c000b4a1:	90                   	nop

c000b4a2 <File::~File()>:
c000b4a2:	83 ec 0c             	sub    esp,0xc
c000b4a5:	ba 8c 15 02 c0       	mov    edx,0xc002158c
c000b4aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4ae:	89 10                	mov    DWORD PTR [eax],edx
c000b4b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4b4:	83 ec 0c             	sub    esp,0xc
c000b4b7:	50                   	push   eax
c000b4b8:	e8 e7 de ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c000b4bd:	83 c4 10             	add    esp,0x10
c000b4c0:	90                   	nop
c000b4c1:	83 c4 0c             	add    esp,0xc
c000b4c4:	c3                   	ret    
c000b4c5:	90                   	nop

c000b4c6 <File::~File()>:
c000b4c6:	83 ec 0c             	sub    esp,0xc
c000b4c9:	83 ec 0c             	sub    esp,0xc
c000b4cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4d0:	e8 cd ff ff ff       	call   c000b4a2 <File::~File()>
c000b4d5:	83 c4 10             	add    esp,0x10
c000b4d8:	83 ec 08             	sub    esp,0x8
c000b4db:	68 14 01 00 00       	push   0x114
c000b4e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4e4:	e8 2f f3 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000b4e9:	83 c4 10             	add    esp,0x10
c000b4ec:	83 c4 0c             	add    esp,0xc
c000b4ef:	c3                   	ret    

c000b4f0 <Directory::~Directory()>:
c000b4f0:	83 ec 0c             	sub    esp,0xc
c000b4f3:	ba a8 15 02 c0       	mov    edx,0xc00215a8
c000b4f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4fc:	89 10                	mov    DWORD PTR [eax],edx
c000b4fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b502:	83 ec 0c             	sub    esp,0xc
c000b505:	50                   	push   eax
c000b506:	e8 99 de ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c000b50b:	83 c4 10             	add    esp,0x10
c000b50e:	90                   	nop
c000b50f:	83 c4 0c             	add    esp,0xc
c000b512:	c3                   	ret    
c000b513:	90                   	nop

c000b514 <Directory::~Directory()>:
c000b514:	83 ec 0c             	sub    esp,0xc
c000b517:	83 ec 0c             	sub    esp,0xc
c000b51a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b51e:	e8 cd ff ff ff       	call   c000b4f0 <Directory::~Directory()>
c000b523:	83 c4 10             	add    esp,0x10
c000b526:	83 ec 08             	sub    esp,0x8
c000b529:	68 14 01 00 00       	push   0x114
c000b52e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b532:	e8 e1 f2 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000b537:	83 c4 10             	add    esp,0x10
c000b53a:	83 c4 0c             	add    esp,0xc
c000b53d:	c3                   	ret    

c000b53e <Filesystem::Filesystem()>:
c000b53e:	ba 20 15 02 c0       	mov    edx,0xc0021520
c000b543:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b547:	89 10                	mov    DWORD PTR [eax],edx
c000b549:	8b 15 04 64 02 c0    	mov    edx,DWORD PTR ds:0xc0026404
c000b54f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b553:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b556:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b55a:	a3 04 64 02 c0       	mov    ds:0xc0026404,eax
c000b55f:	90                   	nop
c000b560:	c3                   	ret    
c000b561:	90                   	nop

c000b562 <Filesystem::~Filesystem()>:
c000b562:	ba 20 15 02 c0       	mov    edx,0xc0021520
c000b567:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b56b:	89 10                	mov    DWORD PTR [eax],edx
c000b56d:	90                   	nop
c000b56e:	c3                   	ret    
c000b56f:	90                   	nop

c000b570 <Filesystem::~Filesystem()>:
c000b570:	83 ec 0c             	sub    esp,0xc
c000b573:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b577:	e8 e6 ff ff ff       	call   c000b562 <Filesystem::~Filesystem()>
c000b57c:	83 c4 04             	add    esp,0x4
c000b57f:	83 ec 08             	sub    esp,0x8
c000b582:	6a 08                	push   0x8
c000b584:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b588:	e8 8b f2 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000b58d:	83 c4 10             	add    esp,0x10
c000b590:	83 c4 0c             	add    esp,0xc
c000b593:	c3                   	ret    

c000b594 <Fs::getcwd(Process*, char*, int)>:
c000b594:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b598:	31 c0                	xor    eax,eax
c000b59a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000b59d:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000b5a1:	7d 15                	jge    c000b5b8 <Fs::getcwd(Process*, char*, int)+0x24>
c000b5a3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b5a7:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000b5ae:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000b5b1:	84 c9                	test   cl,cl
c000b5b3:	74 06                	je     c000b5bb <Fs::getcwd(Process*, char*, int)+0x27>
c000b5b5:	40                   	inc    eax
c000b5b6:	eb e2                	jmp    c000b59a <Fs::getcwd(Process*, char*, int)+0x6>
c000b5b8:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000b5bb:	31 c0                	xor    eax,eax
c000b5bd:	c3                   	ret    

c000b5be <Fs::initVFS()>:
c000b5be:	83 ec 18             	sub    esp,0x18
c000b5c1:	6a 08                	push   0x8
c000b5c3:	e8 ee c4 ff ff       	call   c0007ab6 <malloc>
c000b5c8:	89 04 24             	mov    DWORD PTR [esp],eax
c000b5cb:	e8 d8 e2 00 00       	call   c00198a8 <FAT::FAT()>
c000b5d0:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000b5d7:	e8 da c4 ff ff       	call   c0007ab6 <malloc>
c000b5dc:	89 04 24             	mov    DWORD PTR [esp],eax
c000b5df:	e8 f0 f1 00 00       	call   c001a7d4 <ISO9660::ISO9660()>
c000b5e4:	83 c4 1c             	add    esp,0x1c
c000b5e7:	c3                   	ret    

c000b5e8 <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c000b5e8:	55                   	push   ebp
c000b5e9:	57                   	push   edi
c000b5ea:	56                   	push   esi
c000b5eb:	53                   	push   ebx
c000b5ec:	81 ec 10 04 00 00    	sub    esp,0x410
c000b5f2:	8b ac 24 28 04 00 00 	mov    ebp,DWORD PTR [esp+0x428]
c000b5f9:	8b b4 24 24 04 00 00 	mov    esi,DWORD PTR [esp+0x424]
c000b600:	0f b6 9c 24 30 04 00 00 	movzx  ebx,BYTE PTR [esp+0x430]
c000b608:	68 00 04 00 00       	push   0x400
c000b60d:	6a 00                	push   0x0
c000b60f:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c000b613:	57                   	push   edi
c000b614:	e8 d7 4e ff ff       	call   c00004f0 <memset>
c000b619:	83 c4 10             	add    esp,0x10
c000b61c:	80 7d 01 3a          	cmp    BYTE PTR [ebp+0x1],0x3a
c000b620:	75 0b                	jne    c000b62d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x45>
c000b622:	50                   	push   eax
c000b623:	50                   	push   eax
c000b624:	55                   	push   ebp
c000b625:	57                   	push   edi
c000b626:	e8 15 50 ff ff       	call   c0000640 <strcpy>
c000b62b:	eb 51                	jmp    c000b67e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x96>
c000b62d:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000b631:	83 f8 5c             	cmp    eax,0x5c
c000b634:	74 05                	je     c000b63b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x53>
c000b636:	83 f8 2f             	cmp    eax,0x2f
c000b639:	75 1e                	jne    c000b659 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x71>
c000b63b:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c000b642:	8a 00                	mov    al,BYTE PTR [eax]
c000b644:	3c 60                	cmp    al,0x60
c000b646:	7e 03                	jle    c000b64b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x63>
c000b648:	83 e8 20             	sub    eax,0x20
c000b64b:	88 04 24             	mov    BYTE PTR [esp],al
c000b64e:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000b655:	50                   	push   eax
c000b656:	50                   	push   eax
c000b657:	eb 1e                	jmp    c000b677 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8f>
c000b659:	50                   	push   eax
c000b65a:	50                   	push   eax
c000b65b:	ff b4 24 30 04 00 00 	push   DWORD PTR [esp+0x430]
c000b662:	57                   	push   edi
c000b663:	e8 d8 4f ff ff       	call   c0000640 <strcpy>
c000b668:	58                   	pop    eax
c000b669:	5a                   	pop    edx
c000b66a:	68 e3 24 02 c0       	push   0xc00224e3
c000b66f:	57                   	push   edi
c000b670:	e8 cb 51 ff ff       	call   c0000840 <strcat>
c000b675:	59                   	pop    ecx
c000b676:	58                   	pop    eax
c000b677:	55                   	push   ebp
c000b678:	57                   	push   edi
c000b679:	e8 c2 51 ff ff       	call   c0000840 <strcat>
c000b67e:	83 c4 10             	add    esp,0x10
c000b681:	8a 04 24             	mov    al,BYTE PTR [esp]
c000b684:	3c 60                	cmp    al,0x60
c000b686:	7e 03                	jle    c000b68b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa3>
c000b688:	83 e8 20             	sub    eax,0x20
c000b68b:	88 04 24             	mov    BYTE PTR [esp],al
c000b68e:	88 06                	mov    BYTE PTR [esi],al
c000b690:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000b697:	66 c7 46 01 3a 2f    	mov    WORD PTR [esi+0x1],0x2f3a
c000b69d:	c6 46 03 00          	mov    BYTE PTR [esi+0x3],0x0
c000b6a1:	bf 03 00 00 00       	mov    edi,0x3
c000b6a6:	b8 03 00 00 00       	mov    eax,0x3
c000b6ab:	0f be 2c 3c          	movsx  ebp,BYTE PTR [esp+edi*1]
c000b6af:	89 e9                	mov    ecx,ebp
c000b6b1:	85 ed                	test   ebp,ebp
c000b6b3:	0f 84 97 00 00 00    	je     c000b750 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x168>
c000b6b9:	8d 57 01             	lea    edx,[edi+0x1]
c000b6bc:	83 fd 5c             	cmp    ebp,0x5c
c000b6bf:	74 05                	je     c000b6c6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xde>
c000b6c1:	83 fd 2f             	cmp    ebp,0x2f
c000b6c4:	75 12                	jne    c000b6d8 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b6c6:	89 c5                	mov    ebp,eax
c000b6c8:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c000b6cd:	74 09                	je     c000b6d8 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b6cf:	40                   	inc    eax
c000b6d0:	c6 04 2e 2f          	mov    BYTE PTR [esi+ebp*1],0x2f
c000b6d4:	89 d7                	mov    edi,edx
c000b6d6:	eb d3                	jmp    c000b6ab <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c000b6d8:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000b6dd:	0f be e9             	movsx  ebp,cl
c000b6e0:	75 5e                	jne    c000b740 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c000b6e2:	83 fd 2e             	cmp    ebp,0x2e
c000b6e5:	75 59                	jne    c000b740 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c000b6e7:	80 3c 14 2e          	cmp    BYTE PTR [esp+edx*1],0x2e
c000b6eb:	0f be 6c 3c 02       	movsx  ebp,BYTE PTR [esp+edi*1+0x2]
c000b6f0:	74 18                	je     c000b70a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x122>
c000b6f2:	83 fd 2e             	cmp    ebp,0x2e
c000b6f5:	74 53                	je     c000b74a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c000b6f7:	89 fa                	mov    edx,edi
c000b6f9:	42                   	inc    edx
c000b6fa:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c000b6fe:	83 f9 2f             	cmp    ecx,0x2f
c000b701:	74 f6                	je     c000b6f9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c000b703:	83 f9 5c             	cmp    ecx,0x5c
c000b706:	74 f1                	je     c000b6f9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c000b708:	eb ca                	jmp    c000b6d4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b70a:	83 fd 2e             	cmp    ebp,0x2e
c000b70d:	74 3b                	je     c000b74a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c000b70f:	83 f8 03             	cmp    eax,0x3
c000b712:	74 c0                	je     c000b6d4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b714:	42                   	inc    edx
c000b715:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c000b719:	83 f9 5c             	cmp    ecx,0x5c
c000b71c:	74 f6                	je     c000b714 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c000b71e:	83 f9 2f             	cmp    ecx,0x2f
c000b721:	74 f1                	je     c000b714 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c000b723:	48                   	dec    eax
c000b724:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c000b728:	75 06                	jne    c000b730 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c000b72a:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c000b72e:	eb f3                	jmp    c000b723 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x13b>
c000b730:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c000b734:	74 07                	je     c000b73d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x155>
c000b736:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c000b73a:	48                   	dec    eax
c000b73b:	eb f3                	jmp    c000b730 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c000b73d:	40                   	inc    eax
c000b73e:	eb 94                	jmp    c000b6d4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b740:	83 fd 5c             	cmp    ebp,0x5c
c000b743:	74 8f                	je     c000b6d4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b745:	83 fd 2f             	cmp    ebp,0x2f
c000b748:	74 8a                	je     c000b6d4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b74a:	88 0c 06             	mov    BYTE PTR [esi+eax*1],cl
c000b74d:	40                   	inc    eax
c000b74e:	eb 84                	jmp    c000b6d4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b750:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c000b754:	83 ec 0c             	sub    esp,0xc
c000b757:	56                   	push   esi
c000b758:	e8 13 4e ff ff       	call   c0000570 <strlen>
c000b75d:	83 c4 10             	add    esp,0x10
c000b760:	80 7c 06 ff 2e       	cmp    BYTE PTR [esi+eax*1-0x1],0x2e
c000b765:	74 17                	je     c000b77e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c000b767:	83 ec 0c             	sub    esp,0xc
c000b76a:	56                   	push   esi
c000b76b:	e8 00 4e ff ff       	call   c0000570 <strlen>
c000b770:	83 c4 10             	add    esp,0x10
c000b773:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c000b778:	74 04                	je     c000b77e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c000b77a:	31 ff                	xor    edi,edi
c000b77c:	eb 4c                	jmp    c000b7ca <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1e2>
c000b77e:	83 ec 0c             	sub    esp,0xc
c000b781:	56                   	push   esi
c000b782:	e8 e9 4d ff ff       	call   c0000570 <strlen>
c000b787:	83 c4 10             	add    esp,0x10
c000b78a:	80 7c 06 fe 3a       	cmp    BYTE PTR [esi+eax*1-0x2],0x3a
c000b78f:	74 e9                	je     c000b77a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x192>
c000b791:	83 ec 0c             	sub    esp,0xc
c000b794:	56                   	push   esi
c000b795:	e8 d6 4d ff ff       	call   c0000570 <strlen>
c000b79a:	83 c4 10             	add    esp,0x10
c000b79d:	c6 44 06 ff 00       	mov    BYTE PTR [esi+eax*1-0x1],0x0
c000b7a2:	eb b0                	jmp    c000b754 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16c>
c000b7a4:	50                   	push   eax
c000b7a5:	50                   	push   eax
c000b7a6:	56                   	push   esi
c000b7a7:	8d 6c 24 0c          	lea    ebp,[esp+0xc]
c000b7ab:	55                   	push   ebp
c000b7ac:	e8 8f 4e ff ff       	call   c0000640 <strcpy>
c000b7b1:	5a                   	pop    edx
c000b7b2:	59                   	pop    ecx
c000b7b3:	56                   	push   esi
c000b7b4:	55                   	push   ebp
c000b7b5:	e8 91 f7 ff ff       	call   c000af4b <KeDereferenceSymlink(char const*, char*)>
c000b7ba:	83 c4 10             	add    esp,0x10
c000b7bd:	48                   	dec    eax
c000b7be:	75 27                	jne    c000b7e7 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1ff>
c000b7c0:	8d 47 01             	lea    eax,[edi+0x1]
c000b7c3:	83 ff 14             	cmp    edi,0x14
c000b7c6:	74 08                	je     c000b7d0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1e8>
c000b7c8:	89 c7                	mov    edi,eax
c000b7ca:	85 db                	test   ebx,ebx
c000b7cc:	75 d6                	jne    c000b7a4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1bc>
c000b7ce:	eb 17                	jmp    c000b7e7 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1ff>
c000b7d0:	83 ec 0c             	sub    esp,0xc
c000b7d3:	bf 15 00 00 00       	mov    edi,0x15
c000b7d8:	68 ef 14 02 c0       	push   0xc00214ef
c000b7dd:	e8 97 5b 00 00       	call   c0011379 <KePanic(char const*)>
c000b7e2:	83 c4 10             	add    esp,0x10
c000b7e5:	eb e3                	jmp    c000b7ca <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1e2>
c000b7e7:	81 c4 0c 04 00 00    	add    esp,0x40c
c000b7ed:	5b                   	pop    ebx
c000b7ee:	5e                   	pop    esi
c000b7ef:	5f                   	pop    edi
c000b7f0:	5d                   	pop    ebp
c000b7f1:	c3                   	ret    

c000b7f2 <File::File(char const*, Process*, bool)>:
c000b7f2:	83 ec 1c             	sub    esp,0x1c
c000b7f5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b7f9:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000b7fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b801:	83 ec 08             	sub    esp,0x8
c000b804:	6a 00                	push   0x0
c000b806:	50                   	push   eax
c000b807:	e8 b2 d9 ff ff       	call   c00091be <UnixFile::UnixFile(int)>
c000b80c:	83 c4 10             	add    esp,0x10
c000b80f:	ba 8c 15 02 c0       	mov    edx,0xc002158c
c000b814:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b818:	89 10                	mov    DWORD PTR [eax],edx
c000b81a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000b81f:	85 c0                	test   eax,eax
c000b821:	74 0f                	je     c000b832 <File::File(char const*, Process*, bool)+0x40>
c000b823:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000b828:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c000b82c:	74 04                	je     c000b832 <File::File(char const*, Process*, bool)+0x40>
c000b82e:	b0 01                	mov    al,0x1
c000b830:	eb 02                	jmp    c000b834 <File::File(char const*, Process*, bool)+0x42>
c000b832:	b0 00                	mov    al,0x0
c000b834:	0f b6 c0             	movzx  eax,al
c000b837:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b83b:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000b841:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b845:	83 c2 0d             	add    edx,0xd
c000b848:	50                   	push   eax
c000b849:	51                   	push   ecx
c000b84a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b84e:	52                   	push   edx
c000b84f:	e8 94 fd ff ff       	call   c000b5e8 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000b854:	83 c4 10             	add    esp,0x10
c000b857:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b85b:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b85e:	83 e8 41             	sub    eax,0x41
c000b861:	88 c2                	mov    dl,al
c000b863:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b867:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b86d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b871:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b875:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b879:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b87f:	0f b6 c0             	movzx  eax,al
c000b882:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b889:	85 c0                	test   eax,eax
c000b88b:	74 3e                	je     c000b8cb <File::File(char const*, Process*, bool)+0xd9>
c000b88d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b891:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b897:	0f b6 c0             	movzx  eax,al
c000b89a:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b8a1:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b8a7:	85 c0                	test   eax,eax
c000b8a9:	75 20                	jne    c000b8cb <File::File(char const*, Process*, bool)+0xd9>
c000b8ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b8af:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b8b5:	0f b6 c0             	movzx  eax,al
c000b8b8:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b8bf:	83 ec 0c             	sub    esp,0xc
c000b8c2:	50                   	push   eax
c000b8c3:	e8 a2 21 00 00       	call   c000da6a <LogicalDisk::mount()>
c000b8c8:	83 c4 10             	add    esp,0x10
c000b8cb:	90                   	nop
c000b8cc:	83 c4 1c             	add    esp,0x1c
c000b8cf:	c3                   	ret    

c000b8d0 <File::File(char const*, Process*)>:
c000b8d0:	83 ec 0c             	sub    esp,0xc
c000b8d3:	6a 01                	push   0x1
c000b8d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8e1:	e8 0c ff ff ff       	call   c000b7f2 <File::File(char const*, Process*, bool)>
c000b8e6:	83 c4 10             	add    esp,0x10
c000b8e9:	90                   	nop
c000b8ea:	83 c4 0c             	add    esp,0xc
c000b8ed:	c3                   	ret    

c000b8ee <File::open(FileOpenMode)>:
c000b8ee:	53                   	push   ebx
c000b8ef:	b8 0b 00 00 00       	mov    eax,0xb
c000b8f4:	83 ec 08             	sub    esp,0x8
c000b8f7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b8fb:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b902:	83 fa 19             	cmp    edx,0x19
c000b905:	77 40                	ja     c000b947 <File::open(FileOpenMode)+0x59>
c000b907:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000b90e:	85 d2                	test   edx,edx
c000b910:	74 35                	je     c000b947 <File::open(FileOpenMode)+0x59>
c000b912:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b918:	85 d2                	test   edx,edx
c000b91a:	74 2b                	je     c000b947 <File::open(FileOpenMode)+0x59>
c000b91c:	b8 06 00 00 00       	mov    eax,0x6
c000b921:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b925:	75 20                	jne    c000b947 <File::open(FileOpenMode)+0x59>
c000b927:	8b 02                	mov    eax,DWORD PTR [edx]
c000b929:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b92f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b933:	51                   	push   ecx
c000b934:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b937:	51                   	push   ecx
c000b938:	52                   	push   edx
c000b939:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b93c:	83 c4 10             	add    esp,0x10
c000b93f:	85 c0                	test   eax,eax
c000b941:	75 04                	jne    c000b947 <File::open(FileOpenMode)+0x59>
c000b943:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b947:	83 c4 08             	add    esp,0x8
c000b94a:	5b                   	pop    ebx
c000b94b:	c3                   	ret    

c000b94c <File::close()>:
c000b94c:	53                   	push   ebx
c000b94d:	b8 0b 00 00 00       	mov    eax,0xb
c000b952:	83 ec 08             	sub    esp,0x8
c000b955:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b959:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b960:	83 f9 19             	cmp    ecx,0x19
c000b963:	77 41                	ja     c000b9a6 <File::close()+0x5a>
c000b965:	8b 1c 8d 80 88 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd7780]
c000b96c:	85 db                	test   ebx,ebx
c000b96e:	74 36                	je     c000b9a6 <File::close()+0x5a>
c000b970:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b977:	74 2d                	je     c000b9a6 <File::close()+0x5a>
c000b979:	b8 05 00 00 00       	mov    eax,0x5
c000b97e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b982:	74 22                	je     c000b9a6 <File::close()+0x5a>
c000b984:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000b988:	8b 04 8d 80 88 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd7780]
c000b98f:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b995:	53                   	push   ebx
c000b996:	53                   	push   ebx
c000b997:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b999:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b99f:	50                   	push   eax
c000b9a0:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000b9a3:	83 c4 10             	add    esp,0x10
c000b9a6:	83 c4 08             	add    esp,0x8
c000b9a9:	5b                   	pop    ebx
c000b9aa:	c3                   	ret    
c000b9ab:	90                   	nop

c000b9ac <File::seek(unsigned long long)>:
c000b9ac:	56                   	push   esi
c000b9ad:	53                   	push   ebx
c000b9ae:	b8 0b 00 00 00       	mov    eax,0xb
c000b9b3:	51                   	push   ecx
c000b9b4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b9b8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b9bc:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b9c3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b9c7:	83 fa 19             	cmp    edx,0x19
c000b9ca:	77 31                	ja     c000b9fd <File::seek(unsigned long long)+0x51>
c000b9cc:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000b9d3:	85 d2                	test   edx,edx
c000b9d5:	74 26                	je     c000b9fd <File::seek(unsigned long long)+0x51>
c000b9d7:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b9dd:	85 d2                	test   edx,edx
c000b9df:	74 1c                	je     c000b9fd <File::seek(unsigned long long)+0x51>
c000b9e1:	b8 05 00 00 00       	mov    eax,0x5
c000b9e6:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000b9ea:	74 11                	je     c000b9fd <File::seek(unsigned long long)+0x51>
c000b9ec:	8b 02                	mov    eax,DWORD PTR [edx]
c000b9ee:	53                   	push   ebx
c000b9ef:	51                   	push   ecx
c000b9f0:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000b9f6:	52                   	push   edx
c000b9f7:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b9fa:	83 c4 10             	add    esp,0x10
c000b9fd:	5a                   	pop    edx
c000b9fe:	5b                   	pop    ebx
c000b9ff:	5e                   	pop    esi
c000ba00:	c3                   	ret    
c000ba01:	90                   	nop

c000ba02 <File::truncate(unsigned long long)>:
c000ba02:	56                   	push   esi
c000ba03:	53                   	push   ebx
c000ba04:	b8 0b 00 00 00       	mov    eax,0xb
c000ba09:	51                   	push   ecx
c000ba0a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ba0e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ba12:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000ba19:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ba1d:	83 fa 19             	cmp    edx,0x19
c000ba20:	77 31                	ja     c000ba53 <File::truncate(unsigned long long)+0x51>
c000ba22:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000ba29:	85 d2                	test   edx,edx
c000ba2b:	74 26                	je     c000ba53 <File::truncate(unsigned long long)+0x51>
c000ba2d:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000ba33:	85 d2                	test   edx,edx
c000ba35:	74 1c                	je     c000ba53 <File::truncate(unsigned long long)+0x51>
c000ba37:	b8 05 00 00 00       	mov    eax,0x5
c000ba3c:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000ba40:	74 11                	je     c000ba53 <File::truncate(unsigned long long)+0x51>
c000ba42:	8b 02                	mov    eax,DWORD PTR [edx]
c000ba44:	53                   	push   ebx
c000ba45:	51                   	push   ecx
c000ba46:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000ba4c:	52                   	push   edx
c000ba4d:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000ba50:	83 c4 10             	add    esp,0x10
c000ba53:	5a                   	pop    edx
c000ba54:	5b                   	pop    ebx
c000ba55:	5e                   	pop    esi
c000ba56:	c3                   	ret    
c000ba57:	90                   	nop

c000ba58 <File::tell(unsigned long long*)>:
c000ba58:	83 ec 0c             	sub    esp,0xc
c000ba5b:	b8 0b 00 00 00       	mov    eax,0xb
c000ba60:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ba64:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000ba6b:	83 fa 19             	cmp    edx,0x19
c000ba6e:	77 34                	ja     c000baa4 <File::tell(unsigned long long*)+0x4c>
c000ba70:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000ba77:	85 d2                	test   edx,edx
c000ba79:	74 29                	je     c000baa4 <File::tell(unsigned long long*)+0x4c>
c000ba7b:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000ba81:	85 d2                	test   edx,edx
c000ba83:	74 1f                	je     c000baa4 <File::tell(unsigned long long*)+0x4c>
c000ba85:	b8 05 00 00 00       	mov    eax,0x5
c000ba8a:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000ba8e:	74 14                	je     c000baa4 <File::tell(unsigned long long*)+0x4c>
c000ba90:	50                   	push   eax
c000ba91:	8b 02                	mov    eax,DWORD PTR [edx]
c000ba93:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ba97:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000ba9d:	52                   	push   edx
c000ba9e:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000baa1:	83 c4 10             	add    esp,0x10
c000baa4:	83 c4 0c             	add    esp,0xc
c000baa7:	c3                   	ret    

c000baa8 <File::rewind()>:
c000baa8:	83 ec 10             	sub    esp,0x10
c000baab:	6a 00                	push   0x0
c000baad:	6a 00                	push   0x0
c000baaf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab3:	e8 f4 fe ff ff       	call   c000b9ac <File::seek(unsigned long long)>
c000bab8:	83 c4 1c             	add    esp,0x1c
c000babb:	c3                   	ret    

c000babc <File::unlink()>:
c000babc:	83 ec 0c             	sub    esp,0xc
c000babf:	b8 0b 00 00 00       	mov    eax,0xb
c000bac4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bac8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bacf:	83 f9 19             	cmp    ecx,0x19
c000bad2:	77 2f                	ja     c000bb03 <File::unlink()+0x47>
c000bad4:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000badb:	85 c9                	test   ecx,ecx
c000badd:	74 24                	je     c000bb03 <File::unlink()+0x47>
c000badf:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bae5:	85 c9                	test   ecx,ecx
c000bae7:	74 1a                	je     c000bb03 <File::unlink()+0x47>
c000bae9:	b8 06 00 00 00       	mov    eax,0x6
c000baee:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000baf2:	75 0f                	jne    c000bb03 <File::unlink()+0x47>
c000baf4:	83 c2 0d             	add    edx,0xd
c000baf7:	50                   	push   eax
c000baf8:	50                   	push   eax
c000baf9:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bafb:	52                   	push   edx
c000bafc:	51                   	push   ecx
c000bafd:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000bb00:	83 c4 10             	add    esp,0x10
c000bb03:	83 c4 0c             	add    esp,0xc
c000bb06:	c3                   	ret    
c000bb07:	90                   	nop

c000bb08 <File::rename(char const*)>:
c000bb08:	83 ec 0c             	sub    esp,0xc
c000bb0b:	b8 0b 00 00 00       	mov    eax,0xb
c000bb10:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bb14:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bb1b:	83 f9 19             	cmp    ecx,0x19
c000bb1e:	77 32                	ja     c000bb52 <File::rename(char const*)+0x4a>
c000bb20:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bb27:	85 c9                	test   ecx,ecx
c000bb29:	74 27                	je     c000bb52 <File::rename(char const*)+0x4a>
c000bb2b:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bb31:	85 c9                	test   ecx,ecx
c000bb33:	74 1d                	je     c000bb52 <File::rename(char const*)+0x4a>
c000bb35:	b8 06 00 00 00       	mov    eax,0x6
c000bb3a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bb3e:	75 12                	jne    c000bb52 <File::rename(char const*)+0x4a>
c000bb40:	83 c2 0d             	add    edx,0xd
c000bb43:	50                   	push   eax
c000bb44:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bb46:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bb4a:	52                   	push   edx
c000bb4b:	51                   	push   ecx
c000bb4c:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000bb4f:	83 c4 10             	add    esp,0x10
c000bb52:	83 c4 0c             	add    esp,0xc
c000bb55:	c3                   	ret    

c000bb56 <File::chfatattr(unsigned char, unsigned char)>:
c000bb56:	57                   	push   edi
c000bb57:	b8 0b 00 00 00       	mov    eax,0xb
c000bb5c:	56                   	push   esi
c000bb5d:	53                   	push   ebx
c000bb5e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bb62:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000bb66:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bb6d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000bb71:	83 f9 19             	cmp    ecx,0x19
c000bb74:	77 37                	ja     c000bbad <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bb76:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bb7d:	85 c9                	test   ecx,ecx
c000bb7f:	74 2c                	je     c000bbad <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bb81:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bb87:	85 c9                	test   ecx,ecx
c000bb89:	74 22                	je     c000bbad <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bb8b:	b8 06 00 00 00       	mov    eax,0x6
c000bb90:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bb94:	75 17                	jne    c000bbad <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bb96:	8b 39                	mov    edi,DWORD PTR [ecx]
c000bb98:	89 f0                	mov    eax,esi
c000bb9a:	83 c2 0d             	add    edx,0xd
c000bb9d:	0f b6 f0             	movzx  esi,al
c000bba0:	0f b6 db             	movzx  ebx,bl
c000bba3:	56                   	push   esi
c000bba4:	53                   	push   ebx
c000bba5:	52                   	push   edx
c000bba6:	51                   	push   ecx
c000bba7:	ff 57 38             	call   DWORD PTR [edi+0x38]
c000bbaa:	83 c4 10             	add    esp,0x10
c000bbad:	5b                   	pop    ebx
c000bbae:	5e                   	pop    esi
c000bbaf:	5f                   	pop    edi
c000bbb0:	c3                   	ret    
c000bbb1:	90                   	nop

c000bbb2 <File::exists()>:
c000bbb2:	83 ec 0c             	sub    esp,0xc
c000bbb5:	31 c0                	xor    eax,eax
c000bbb7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bbbb:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bbc2:	83 f9 19             	cmp    ecx,0x19
c000bbc5:	77 24                	ja     c000bbeb <File::exists()+0x39>
c000bbc7:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bbce:	85 c9                	test   ecx,ecx
c000bbd0:	74 19                	je     c000bbeb <File::exists()+0x39>
c000bbd2:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bbd8:	85 c9                	test   ecx,ecx
c000bbda:	74 0f                	je     c000bbeb <File::exists()+0x39>
c000bbdc:	83 c2 0d             	add    edx,0xd
c000bbdf:	50                   	push   eax
c000bbe0:	50                   	push   eax
c000bbe1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bbe3:	52                   	push   edx
c000bbe4:	51                   	push   ecx
c000bbe5:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000bbe8:	83 c4 10             	add    esp,0x10
c000bbeb:	83 c4 0c             	add    esp,0xc
c000bbee:	c3                   	ret    
c000bbef:	90                   	nop

c000bbf0 <File::stat(unsigned long long*, bool*)>:
c000bbf0:	56                   	push   esi
c000bbf1:	53                   	push   ebx
c000bbf2:	50                   	push   eax
c000bbf3:	b8 0b 00 00 00       	mov    eax,0xb
c000bbf8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bbfc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bc00:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bc07:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bc0b:	83 f9 19             	cmp    ecx,0x19
c000bc0e:	77 3d                	ja     c000bc4d <File::stat(unsigned long long*, bool*)+0x5d>
c000bc10:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bc17:	85 c9                	test   ecx,ecx
c000bc19:	74 32                	je     c000bc4d <File::stat(unsigned long long*, bool*)+0x5d>
c000bc1b:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bc21:	85 c9                	test   ecx,ecx
c000bc23:	74 28                	je     c000bc4d <File::stat(unsigned long long*, bool*)+0x5d>
c000bc25:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bc27:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bc2b:	74 13                	je     c000bc40 <File::stat(unsigned long long*, bool*)+0x50>
c000bc2d:	83 ec 04             	sub    esp,0x4
c000bc30:	56                   	push   esi
c000bc31:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000bc37:	51                   	push   ecx
c000bc38:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000bc3b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000bc3e:	eb 0a                	jmp    c000bc4a <File::stat(unsigned long long*, bool*)+0x5a>
c000bc40:	53                   	push   ebx
c000bc41:	83 c2 0d             	add    edx,0xd
c000bc44:	56                   	push   esi
c000bc45:	52                   	push   edx
c000bc46:	51                   	push   ecx
c000bc47:	ff 50 34             	call   DWORD PTR [eax+0x34]
c000bc4a:	83 c4 10             	add    esp,0x10
c000bc4d:	5a                   	pop    edx
c000bc4e:	5b                   	pop    ebx
c000bc4f:	5e                   	pop    esi
c000bc50:	c3                   	ret    

c000bc51 <Fs::setcwd(Process*, char*)>:
c000bc51:	55                   	push   ebp
c000bc52:	57                   	push   edi
c000bc53:	56                   	push   esi
c000bc54:	53                   	push   ebx
c000bc55:	81 ec 1c 02 00 00    	sub    esp,0x21c
c000bc5b:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c000bc62:	6a 00                	push   0x0
c000bc64:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000bc6a:	57                   	push   edi
c000bc6b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000bc72:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000bc76:	56                   	push   esi
c000bc77:	e8 6c f9 ff ff       	call   c000b5e8 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000bc7c:	89 34 24             	mov    DWORD PTR [esp],esi
c000bc7f:	e8 ec 48 ff ff       	call   c0000570 <strlen>
c000bc84:	83 c4 10             	add    esp,0x10
c000bc87:	83 f8 02             	cmp    eax,0x2
c000bc8a:	77 15                	ja     c000bca1 <Fs::setcwd(Process*, char*)+0x50>
c000bc8c:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000bc91:	83 eb 41             	sub    ebx,0x41
c000bc94:	8b 04 9d 80 88 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd7780]
c000bc9b:	85 c0                	test   eax,eax
c000bc9d:	75 1c                	jne    c000bcbb <Fs::setcwd(Process*, char*)+0x6a>
c000bc9f:	eb 2f                	jmp    c000bcd0 <Fs::setcwd(Process*, char*)+0x7f>
c000bca1:	83 ec 0c             	sub    esp,0xc
c000bca4:	56                   	push   esi
c000bca5:	e8 c6 48 ff ff       	call   c0000570 <strlen>
c000bcaa:	83 c4 10             	add    esp,0x10
c000bcad:	83 f8 03             	cmp    eax,0x3
c000bcb0:	75 57                	jne    c000bd09 <Fs::setcwd(Process*, char*)+0xb8>
c000bcb2:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000bcb7:	75 50                	jne    c000bd09 <Fs::setcwd(Process*, char*)+0xb8>
c000bcb9:	eb d1                	jmp    c000bc8c <Fs::setcwd(Process*, char*)+0x3b>
c000bcbb:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000bcc2:	75 0c                	jne    c000bcd0 <Fs::setcwd(Process*, char*)+0x7f>
c000bcc4:	83 ec 0c             	sub    esp,0xc
c000bcc7:	50                   	push   eax
c000bcc8:	e8 9d 1d 00 00       	call   c000da6a <LogicalDisk::mount()>
c000bccd:	83 c4 10             	add    esp,0x10
c000bcd0:	b8 03 00 00 00       	mov    eax,0x3
c000bcd5:	83 fb 19             	cmp    ebx,0x19
c000bcd8:	0f 87 c6 00 00 00    	ja     c000bda4 <Fs::setcwd(Process*, char*)+0x153>
c000bcde:	8b 14 9d 80 88 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd7780]
c000bce5:	b8 05 00 00 00       	mov    eax,0x5
c000bcea:	85 d2                	test   edx,edx
c000bcec:	0f 84 b2 00 00 00    	je     c000bda4 <Fs::setcwd(Process*, char*)+0x153>
c000bcf2:	b8 06 00 00 00       	mov    eax,0x6
c000bcf7:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000bcfe:	0f 85 92 00 00 00    	jne    c000bd96 <Fs::setcwd(Process*, char*)+0x145>
c000bd04:	e9 9b 00 00 00       	jmp    c000bda4 <Fs::setcwd(Process*, char*)+0x153>
c000bd09:	83 ec 0c             	sub    esp,0xc
c000bd0c:	68 14 01 00 00       	push   0x114
c000bd11:	e8 a0 bd ff ff       	call   c0007ab6 <malloc>
c000bd16:	83 c4 0c             	add    esp,0xc
c000bd19:	89 c3                	mov    ebx,eax
c000bd1b:	55                   	push   ebp
c000bd1c:	56                   	push   esi
c000bd1d:	50                   	push   eax
c000bd1e:	e8 ad fb ff ff       	call   c000b8d0 <File::File(char const*, Process*)>
c000bd23:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000bd28:	83 c4 0c             	add    esp,0xc
c000bd2b:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000bd2f:	50                   	push   eax
c000bd30:	8d 44 24 10          	lea    eax,[esp+0x10]
c000bd34:	50                   	push   eax
c000bd35:	53                   	push   ebx
c000bd36:	e8 b5 fe ff ff       	call   c000bbf0 <File::stat(unsigned long long*, bool*)>
c000bd3b:	83 c4 10             	add    esp,0x10
c000bd3e:	83 f8 02             	cmp    eax,0x2
c000bd41:	74 27                	je     c000bd6a <Fs::setcwd(Process*, char*)+0x119>
c000bd43:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bd48:	75 1c                	jne    c000bd66 <Fs::setcwd(Process*, char*)+0x115>
c000bd4a:	b8 02 00 00 00       	mov    eax,0x2
c000bd4f:	85 db                	test   ebx,ebx
c000bd51:	74 51                	je     c000bda4 <Fs::setcwd(Process*, char*)+0x153>
c000bd53:	83 ec 0c             	sub    esp,0xc
c000bd56:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bd58:	53                   	push   ebx
c000bd59:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bd5c:	83 c4 10             	add    esp,0x10
c000bd5f:	b8 02 00 00 00       	mov    eax,0x2
c000bd64:	eb 3e                	jmp    c000bda4 <Fs::setcwd(Process*, char*)+0x153>
c000bd66:	85 c0                	test   eax,eax
c000bd68:	74 1c                	je     c000bd86 <Fs::setcwd(Process*, char*)+0x135>
c000bd6a:	b8 01 00 00 00       	mov    eax,0x1
c000bd6f:	85 db                	test   ebx,ebx
c000bd71:	74 31                	je     c000bda4 <Fs::setcwd(Process*, char*)+0x153>
c000bd73:	83 ec 0c             	sub    esp,0xc
c000bd76:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bd78:	53                   	push   ebx
c000bd79:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bd7c:	83 c4 10             	add    esp,0x10
c000bd7f:	b8 01 00 00 00       	mov    eax,0x1
c000bd84:	eb 1e                	jmp    c000bda4 <Fs::setcwd(Process*, char*)+0x153>
c000bd86:	85 db                	test   ebx,ebx
c000bd88:	74 0c                	je     c000bd96 <Fs::setcwd(Process*, char*)+0x145>
c000bd8a:	83 ec 0c             	sub    esp,0xc
c000bd8d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bd8f:	53                   	push   ebx
c000bd90:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bd93:	83 c4 10             	add    esp,0x10
c000bd96:	50                   	push   eax
c000bd97:	50                   	push   eax
c000bd98:	56                   	push   esi
c000bd99:	57                   	push   edi
c000bd9a:	e8 a1 48 ff ff       	call   c0000640 <strcpy>
c000bd9f:	83 c4 10             	add    esp,0x10
c000bda2:	31 c0                	xor    eax,eax
c000bda4:	81 c4 1c 02 00 00    	add    esp,0x21c
c000bdaa:	5b                   	pop    ebx
c000bdab:	5e                   	pop    esi
c000bdac:	5f                   	pop    edi
c000bdad:	5d                   	pop    ebp
c000bdae:	c3                   	ret    
c000bdaf:	90                   	nop

c000bdb0 <Directory::Directory(char const*, Process*)>:
c000bdb0:	83 ec 0c             	sub    esp,0xc
c000bdb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdb7:	83 ec 08             	sub    esp,0x8
c000bdba:	6a 00                	push   0x0
c000bdbc:	50                   	push   eax
c000bdbd:	e8 fc d3 ff ff       	call   c00091be <UnixFile::UnixFile(int)>
c000bdc2:	83 c4 10             	add    esp,0x10
c000bdc5:	ba a8 15 02 c0       	mov    edx,0xc00215a8
c000bdca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdce:	89 10                	mov    DWORD PTR [eax],edx
c000bdd0:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000bdd5:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000bdd9:	0f 95 c0             	setne  al
c000bddc:	0f b6 c0             	movzx  eax,al
c000bddf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bde3:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000bde9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bded:	83 c2 0d             	add    edx,0xd
c000bdf0:	50                   	push   eax
c000bdf1:	51                   	push   ecx
c000bdf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bdf6:	52                   	push   edx
c000bdf7:	e8 ec f7 ff ff       	call   c000b5e8 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000bdfc:	83 c4 10             	add    esp,0x10
c000bdff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be03:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000be06:	83 e8 41             	sub    eax,0x41
c000be09:	88 c2                	mov    dl,al
c000be0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be0f:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000be15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be19:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000be1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be21:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000be27:	0f b6 c0             	movzx  eax,al
c000be2a:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000be31:	85 c0                	test   eax,eax
c000be33:	74 3e                	je     c000be73 <Directory::Directory(char const*, Process*)+0xc3>
c000be35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be39:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000be3f:	0f b6 c0             	movzx  eax,al
c000be42:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000be49:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000be4f:	85 c0                	test   eax,eax
c000be51:	75 20                	jne    c000be73 <Directory::Directory(char const*, Process*)+0xc3>
c000be53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be57:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000be5d:	0f b6 c0             	movzx  eax,al
c000be60:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000be67:	83 ec 0c             	sub    esp,0xc
c000be6a:	50                   	push   eax
c000be6b:	e8 fa 1b 00 00       	call   c000da6a <LogicalDisk::mount()>
c000be70:	83 c4 10             	add    esp,0x10
c000be73:	90                   	nop
c000be74:	83 c4 0c             	add    esp,0xc
c000be77:	c3                   	ret    

c000be78 <Directory::open()>:
c000be78:	53                   	push   ebx
c000be79:	b8 0b 00 00 00       	mov    eax,0xb
c000be7e:	83 ec 08             	sub    esp,0x8
c000be81:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000be85:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000be8c:	83 fa 19             	cmp    edx,0x19
c000be8f:	77 3d                	ja     c000bece <Directory::open()+0x56>
c000be91:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000be98:	85 d2                	test   edx,edx
c000be9a:	74 32                	je     c000bece <Directory::open()+0x56>
c000be9c:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bea2:	85 d2                	test   edx,edx
c000bea4:	74 28                	je     c000bece <Directory::open()+0x56>
c000bea6:	b8 06 00 00 00       	mov    eax,0x6
c000beab:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000beaf:	75 1d                	jne    c000bece <Directory::open()+0x56>
c000beb1:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000beb7:	50                   	push   eax
c000beb8:	8b 02                	mov    eax,DWORD PTR [edx]
c000beba:	51                   	push   ecx
c000bebb:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000bebe:	51                   	push   ecx
c000bebf:	52                   	push   edx
c000bec0:	ff 50 50             	call   DWORD PTR [eax+0x50]
c000bec3:	83 c4 10             	add    esp,0x10
c000bec6:	85 c0                	test   eax,eax
c000bec8:	75 04                	jne    c000bece <Directory::open()+0x56>
c000beca:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000bece:	83 c4 08             	add    esp,0x8
c000bed1:	5b                   	pop    ebx
c000bed2:	c3                   	ret    
c000bed3:	90                   	nop

c000bed4 <Directory::close()>:
c000bed4:	53                   	push   ebx
c000bed5:	b8 0b 00 00 00       	mov    eax,0xb
c000beda:	83 ec 08             	sub    esp,0x8
c000bedd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bee1:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bee8:	83 f9 19             	cmp    ecx,0x19
c000beeb:	77 41                	ja     c000bf2e <Directory::close()+0x5a>
c000beed:	8b 1c 8d 80 88 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd7780]
c000bef4:	85 db                	test   ebx,ebx
c000bef6:	74 36                	je     c000bf2e <Directory::close()+0x5a>
c000bef8:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000beff:	74 2d                	je     c000bf2e <Directory::close()+0x5a>
c000bf01:	b8 05 00 00 00       	mov    eax,0x5
c000bf06:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bf0a:	74 22                	je     c000bf2e <Directory::close()+0x5a>
c000bf0c:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000bf10:	8b 04 8d 80 88 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd7780]
c000bf17:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bf1d:	53                   	push   ebx
c000bf1e:	53                   	push   ebx
c000bf1f:	8b 08                	mov    ecx,DWORD PTR [eax]
c000bf21:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000bf27:	50                   	push   eax
c000bf28:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000bf2b:	83 c4 10             	add    esp,0x10
c000bf2e:	83 c4 08             	add    esp,0x8
c000bf31:	5b                   	pop    ebx
c000bf32:	c3                   	ret    
c000bf33:	90                   	nop

c000bf34 <Directory::unlink()>:
c000bf34:	83 ec 0c             	sub    esp,0xc
c000bf37:	b8 0b 00 00 00       	mov    eax,0xb
c000bf3c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf40:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bf47:	83 f9 19             	cmp    ecx,0x19
c000bf4a:	77 2f                	ja     c000bf7b <Directory::unlink()+0x47>
c000bf4c:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bf53:	85 c9                	test   ecx,ecx
c000bf55:	74 24                	je     c000bf7b <Directory::unlink()+0x47>
c000bf57:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bf5d:	85 c9                	test   ecx,ecx
c000bf5f:	74 1a                	je     c000bf7b <Directory::unlink()+0x47>
c000bf61:	b8 06 00 00 00       	mov    eax,0x6
c000bf66:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bf6a:	75 0f                	jne    c000bf7b <Directory::unlink()+0x47>
c000bf6c:	83 c2 0d             	add    edx,0xd
c000bf6f:	50                   	push   eax
c000bf70:	50                   	push   eax
c000bf71:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bf73:	52                   	push   edx
c000bf74:	51                   	push   ecx
c000bf75:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000bf78:	83 c4 10             	add    esp,0x10
c000bf7b:	83 c4 0c             	add    esp,0xc
c000bf7e:	c3                   	ret    
c000bf7f:	90                   	nop

c000bf80 <Directory::rename(char const*)>:
c000bf80:	83 ec 0c             	sub    esp,0xc
c000bf83:	b8 0b 00 00 00       	mov    eax,0xb
c000bf88:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf8c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bf93:	83 f9 19             	cmp    ecx,0x19
c000bf96:	77 32                	ja     c000bfca <Directory::rename(char const*)+0x4a>
c000bf98:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bf9f:	85 c9                	test   ecx,ecx
c000bfa1:	74 27                	je     c000bfca <Directory::rename(char const*)+0x4a>
c000bfa3:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bfa9:	85 c9                	test   ecx,ecx
c000bfab:	74 1d                	je     c000bfca <Directory::rename(char const*)+0x4a>
c000bfad:	b8 06 00 00 00       	mov    eax,0x6
c000bfb2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bfb6:	75 12                	jne    c000bfca <Directory::rename(char const*)+0x4a>
c000bfb8:	83 c2 0d             	add    edx,0xd
c000bfbb:	50                   	push   eax
c000bfbc:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bfbe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bfc2:	52                   	push   edx
c000bfc3:	51                   	push   ecx
c000bfc4:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000bfc7:	83 c4 10             	add    esp,0x10
c000bfca:	83 c4 0c             	add    esp,0xc
c000bfcd:	c3                   	ret    

c000bfce <Directory::exists()>:
c000bfce:	83 ec 0c             	sub    esp,0xc
c000bfd1:	31 c0                	xor    eax,eax
c000bfd3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bfd7:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bfde:	83 f9 19             	cmp    ecx,0x19
c000bfe1:	77 24                	ja     c000c007 <Directory::exists()+0x39>
c000bfe3:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bfea:	85 c9                	test   ecx,ecx
c000bfec:	74 19                	je     c000c007 <Directory::exists()+0x39>
c000bfee:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bff4:	85 c9                	test   ecx,ecx
c000bff6:	74 0f                	je     c000c007 <Directory::exists()+0x39>
c000bff8:	83 c2 0d             	add    edx,0xd
c000bffb:	50                   	push   eax
c000bffc:	50                   	push   eax
c000bffd:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bfff:	52                   	push   edx
c000c000:	51                   	push   ecx
c000c001:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000c004:	83 c4 10             	add    esp,0x10
c000c007:	83 c4 0c             	add    esp,0xc
c000c00a:	c3                   	ret    
c000c00b:	90                   	nop

c000c00c <Directory::read(dirent*)>:
c000c00c:	83 ec 1c             	sub    esp,0x1c
c000c00f:	b8 0b 00 00 00       	mov    eax,0xb
c000c014:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c018:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c01f:	83 f9 19             	cmp    ecx,0x19
c000c022:	77 30                	ja     c000c054 <Directory::read(dirent*)+0x48>
c000c024:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000c02b:	85 c9                	test   ecx,ecx
c000c02d:	74 25                	je     c000c054 <Directory::read(dirent*)+0x48>
c000c02f:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c000c036:	74 1c                	je     c000c054 <Directory::read(dirent*)+0x48>
c000c038:	83 ec 0c             	sub    esp,0xc
c000c03b:	8b 02                	mov    eax,DWORD PTR [edx]
c000c03d:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000c041:	51                   	push   ecx
c000c042:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c046:	6a 00                	push   0x0
c000c048:	68 10 01 00 00       	push   0x110
c000c04d:	52                   	push   edx
c000c04e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c051:	83 c4 20             	add    esp,0x20
c000c054:	83 c4 1c             	add    esp,0x1c
c000c057:	c3                   	ret    

c000c058 <Directory::create()>:
c000c058:	83 ec 0c             	sub    esp,0xc
c000c05b:	b8 0b 00 00 00       	mov    eax,0xb
c000c060:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c064:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c06b:	83 f9 19             	cmp    ecx,0x19
c000c06e:	77 2f                	ja     c000c09f <Directory::create()+0x47>
c000c070:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000c077:	85 c9                	test   ecx,ecx
c000c079:	74 24                	je     c000c09f <Directory::create()+0x47>
c000c07b:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c081:	85 c9                	test   ecx,ecx
c000c083:	74 1a                	je     c000c09f <Directory::create()+0x47>
c000c085:	b8 06 00 00 00       	mov    eax,0x6
c000c08a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c08e:	75 0f                	jne    c000c09f <Directory::create()+0x47>
c000c090:	83 c2 0d             	add    edx,0xd
c000c093:	50                   	push   eax
c000c094:	50                   	push   eax
c000c095:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c097:	52                   	push   edx
c000c098:	51                   	push   ecx
c000c099:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000c09c:	83 c4 10             	add    esp,0x10
c000c09f:	83 c4 0c             	add    esp,0xc
c000c0a2:	c3                   	ret    
c000c0a3:	90                   	nop

c000c0a4 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000c0a4:	b8 0a 00 00 00       	mov    eax,0xa
c000c0a9:	c3                   	ret    
c000c0aa:	66 90                	xchg   ax,ax

c000c0ac <Bus::Bus(char const*)>:
c000c0ac:	83 ec 0c             	sub    esp,0xc
c000c0af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0b3:	83 ec 08             	sub    esp,0x8
c000c0b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0ba:	50                   	push   eax
c000c0bb:	e8 22 08 00 00       	call   c000c8e2 <Device::Device(char const*)>
c000c0c0:	83 c4 10             	add    esp,0x10
c000c0c3:	ba c4 15 02 c0       	mov    edx,0xc00215c4
c000c0c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0cc:	89 10                	mov    DWORD PTR [eax],edx
c000c0ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0d2:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000c0dc:	90                   	nop
c000c0dd:	83 c4 0c             	add    esp,0xc
c000c0e0:	c3                   	ret    
c000c0e1:	90                   	nop
c000c0e2:	66 90                	xchg   ax,ax

c000c0e4 <Bus::~Bus()>:
c000c0e4:	83 ec 0c             	sub    esp,0xc
c000c0e7:	ba c4 15 02 c0       	mov    edx,0xc00215c4
c000c0ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0f0:	89 10                	mov    DWORD PTR [eax],edx
c000c0f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0f6:	83 ec 0c             	sub    esp,0xc
c000c0f9:	50                   	push   eax
c000c0fa:	e8 4d 05 00 00       	call   c000c64c <Device::~Device()>
c000c0ff:	83 c4 10             	add    esp,0x10
c000c102:	90                   	nop
c000c103:	83 c4 0c             	add    esp,0xc
c000c106:	c3                   	ret    
c000c107:	90                   	nop

c000c108 <Bus::~Bus()>:
c000c108:	83 ec 0c             	sub    esp,0xc
c000c10b:	83 ec 0c             	sub    esp,0xc
c000c10e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c112:	e8 cd ff ff ff       	call   c000c0e4 <Bus::~Bus()>
c000c117:	83 c4 10             	add    esp,0x10
c000c11a:	83 ec 08             	sub    esp,0x8
c000c11d:	68 58 01 00 00       	push   0x158
c000c122:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c126:	e8 ed e6 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000c12b:	83 c4 10             	add    esp,0x10
c000c12e:	83 c4 0c             	add    esp,0xc
c000c131:	c3                   	ret    

c000c132 <beepThread(void*)>:
c000c132:	83 ec 0c             	sub    esp,0xc
c000c135:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000c13a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c13e:	48                   	dec    eax
c000c13f:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000c144:	75 01                	jne    c000c147 <beepThread(void*)+0x15>
c000c146:	fb                   	sti    
c000c147:	83 ec 0c             	sub    esp,0xc
c000c14a:	6b c2 0a             	imul   eax,edx,0xa
c000c14d:	50                   	push   eax
c000c14e:	e8 19 9f 00 00       	call   c001606c <milliTenthSleep(unsigned int)>
c000c153:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000c15a:	e8 68 be 00 00       	call   c0017fc7 <HalMakeBeep(int)>
c000c15f:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000c167:	83 c4 1c             	add    esp,0x1c
c000c16a:	e9 e1 9d 00 00       	jmp    c0015f50 <blockTask(TaskState)>

c000c16f <Krnl::beep(int, int, bool)>:
c000c16f:	56                   	push   esi
c000c170:	53                   	push   ebx
c000c171:	83 ec 10             	sub    esp,0x10
c000c174:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c178:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c17c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c180:	e8 42 be 00 00       	call   c0017fc7 <HalMakeBeep(int)>
c000c185:	83 c4 10             	add    esp,0x10
c000c188:	89 f0                	mov    eax,esi
c000c18a:	84 c0                	test   al,al
c000c18c:	74 1e                	je     c000c1ac <Krnl::beep(int, int, bool)+0x3d>
c000c18e:	83 ec 0c             	sub    esp,0xc
c000c191:	6b db 0a             	imul   ebx,ebx,0xa
c000c194:	53                   	push   ebx
c000c195:	e8 d2 9e 00 00       	call   c001606c <milliTenthSleep(unsigned int)>
c000c19a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000c1a2:	83 c4 14             	add    esp,0x14
c000c1a5:	5b                   	pop    ebx
c000c1a6:	5e                   	pop    esi
c000c1a7:	e9 1b be 00 00       	jmp    c0017fc7 <HalMakeBeep(int)>
c000c1ac:	68 e6 00 00 00       	push   0xe6
c000c1b1:	53                   	push   ebx
c000c1b2:	68 32 c1 00 c0       	push   0xc000c132
c000c1b7:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000c1bd:	e8 2a 99 00 00       	call   c0015aec <Process::createThread(void (*)(void*), void*, int)>
c000c1c2:	83 c4 14             	add    esp,0x14
c000c1c5:	5b                   	pop    ebx
c000c1c6:	5e                   	pop    esi
c000c1c7:	c3                   	ret    

c000c1c8 <User::loadClockSettings(int)>:
c000c1c8:	53                   	push   ebx
c000c1c9:	83 ec 14             	sub    esp,0x14
c000c1cc:	68 14 01 00 00       	push   0x114
c000c1d1:	e8 e0 b8 ff ff       	call   c0007ab6 <malloc>
c000c1d6:	83 c4 0c             	add    esp,0xc
c000c1d9:	89 c3                	mov    ebx,eax
c000c1db:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000c1e1:	68 e8 15 02 c0       	push   0xc00215e8
c000c1e6:	50                   	push   eax
c000c1e7:	e8 e4 f6 ff ff       	call   c000b8d0 <File::File(char const*, Process*)>
c000c1ec:	58                   	pop    eax
c000c1ed:	5a                   	pop    edx
c000c1ee:	6a 01                	push   0x1
c000c1f0:	53                   	push   ebx
c000c1f1:	e8 f8 f6 ff ff       	call   c000b8ee <File::open(FileOpenMode)>
c000c1f6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c1f9:	e8 4e f7 ff ff       	call   c000b94c <File::close()>
c000c1fe:	83 c4 10             	add    esp,0x10
c000c201:	85 db                	test   ebx,ebx
c000c203:	74 0f                	je     c000c214 <User::loadClockSettings(int)+0x4c>
c000c205:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c207:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000c20b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c20e:	83 c4 08             	add    esp,0x8
c000c211:	5b                   	pop    ebx
c000c212:	ff e0                	jmp    eax
c000c214:	83 c4 08             	add    esp,0x8
c000c217:	5b                   	pop    ebx
c000c218:	c3                   	ret    
c000c219:	90                   	nop

c000c21a <Clock::Clock(char const*)>:
c000c21a:	83 ec 0c             	sub    esp,0xc
c000c21d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c221:	83 ec 08             	sub    esp,0x8
c000c224:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c228:	50                   	push   eax
c000c229:	e8 b4 06 00 00       	call   c000c8e2 <Device::Device(char const*)>
c000c22e:	83 c4 10             	add    esp,0x10
c000c231:	ba 10 16 02 c0       	mov    edx,0xc0021610
c000c236:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c23a:	89 10                	mov    DWORD PTR [eax],edx
c000c23c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c240:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000c24a:	90                   	nop
c000c24b:	83 c4 0c             	add    esp,0xc
c000c24e:	c3                   	ret    
c000c24f:	90                   	nop

c000c250 <Clock::~Clock()>:
c000c250:	83 ec 0c             	sub    esp,0xc
c000c253:	ba 10 16 02 c0       	mov    edx,0xc0021610
c000c258:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c25c:	89 10                	mov    DWORD PTR [eax],edx
c000c25e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c262:	83 ec 0c             	sub    esp,0xc
c000c265:	50                   	push   eax
c000c266:	e8 e1 03 00 00       	call   c000c64c <Device::~Device()>
c000c26b:	83 c4 10             	add    esp,0x10
c000c26e:	90                   	nop
c000c26f:	83 c4 0c             	add    esp,0xc
c000c272:	c3                   	ret    
c000c273:	90                   	nop

c000c274 <Clock::~Clock()>:
c000c274:	83 ec 0c             	sub    esp,0xc
c000c277:	83 ec 0c             	sub    esp,0xc
c000c27a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c27e:	e8 cd ff ff ff       	call   c000c250 <Clock::~Clock()>
c000c283:	83 c4 10             	add    esp,0x10
c000c286:	83 ec 08             	sub    esp,0x8
c000c289:	68 58 01 00 00       	push   0x158
c000c28e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c292:	e8 81 e5 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000c297:	83 c4 10             	add    esp,0x10
c000c29a:	83 c4 0c             	add    esp,0xc
c000c29d:	c3                   	ret    

c000c29e <Clock::timeInSecondsLocal()>:
c000c29e:	53                   	push   ebx
c000c29f:	83 ec 14             	sub    esp,0x14
c000c2a2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c2a6:	8b 10                	mov    edx,DWORD PTR [eax]
c000c2a8:	50                   	push   eax
c000c2a9:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000c2ac:	0f b6 0d 08 64 02 c0 	movzx  ecx,BYTE PTR ds:0xc0026408
c000c2b3:	03 0d 0c 64 02 c0    	add    ecx,DWORD PTR ds:0xc002640c
c000c2b9:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c2bf:	89 cb                	mov    ebx,ecx
c000c2c1:	c1 fb 1f             	sar    ebx,0x1f
c000c2c4:	01 c8                	add    eax,ecx
c000c2c6:	11 da                	adc    edx,ebx
c000c2c8:	83 c4 10             	add    esp,0x10
c000c2cb:	31 c9                	xor    ecx,ecx
c000c2cd:	80 3d 09 64 02 c0 00 	cmp    BYTE PTR ds:0xc0026409,0x0
c000c2d4:	74 05                	je     c000c2db <Clock::timeInSecondsLocal()+0x3d>
c000c2d6:	b9 08 07 00 00       	mov    ecx,0x708
c000c2db:	31 db                	xor    ebx,ebx
c000c2dd:	01 c8                	add    eax,ecx
c000c2df:	11 da                	adc    edx,ebx
c000c2e1:	83 c4 08             	add    esp,0x8
c000c2e4:	5b                   	pop    ebx
c000c2e5:	c3                   	ret    

c000c2e6 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000c2e6:	57                   	push   edi
c000c2e7:	56                   	push   esi
c000c2e8:	53                   	push   ebx
c000c2e9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c2ed:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c2f1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c2f3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c2f7:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000c2fa:	0f b6 05 08 64 02 c0 	movzx  eax,BYTE PTR ds:0xc0026408
c000c301:	03 05 0c 64 02 c0    	add    eax,DWORD PTR ds:0xc002640c
c000c307:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000c30d:	99                   	cdq    
c000c30e:	29 c6                	sub    esi,eax
c000c310:	19 d7                	sbb    edi,edx
c000c312:	89 f0                	mov    eax,esi
c000c314:	89 fa                	mov    edx,edi
c000c316:	31 f6                	xor    esi,esi
c000c318:	80 3d 09 64 02 c0 00 	cmp    BYTE PTR ds:0xc0026409,0x0
c000c31f:	74 05                	je     c000c326 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000c321:	be 08 07 00 00       	mov    esi,0x708
c000c326:	31 ff                	xor    edi,edi
c000c328:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000c32c:	29 f0                	sub    eax,esi
c000c32e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c332:	19 fa                	sbb    edx,edi
c000c334:	89 d8                	mov    eax,ebx
c000c336:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c33a:	5b                   	pop    ebx
c000c33b:	5e                   	pop    esi
c000c33c:	5f                   	pop    edi
c000c33d:	ff e0                	jmp    eax

c000c33f <datetimeToSeconds(datetime_t)>:
c000c33f:	55                   	push   ebp
c000c340:	57                   	push   edi
c000c341:	56                   	push   esi
c000c342:	53                   	push   ebx
c000c343:	83 ec 0c             	sub    esp,0xc
c000c346:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c34a:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000c34e:	89 d6                	mov    esi,edx
c000c350:	0f b6 c7             	movzx  eax,bh
c000c353:	c1 ee 10             	shr    esi,0x10
c000c356:	6b e8 3c             	imul   ebp,eax,0x3c
c000c359:	81 ee 6c 07 00 00    	sub    esi,0x76c
c000c35f:	0f b6 ce             	movzx  ecx,dh
c000c362:	89 df                	mov    edi,ebx
c000c364:	49                   	dec    ecx
c000c365:	c1 ef 10             	shr    edi,0x10
c000c368:	0f b6 db             	movzx  ebx,bl
c000c36b:	89 f8                	mov    eax,edi
c000c36d:	69 db 10 0e 00 00    	imul   ebx,ebx,0xe10
c000c373:	0f b6 f8             	movzx  edi,al
c000c376:	0f b6 d2             	movzx  edx,dl
c000c379:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000c37d:	01 d8                	add    eax,ebx
c000c37f:	0f b7 de             	movzx  ebx,si
c000c382:	89 04 24             	mov    DWORD PTR [esp],eax
c000c385:	c1 f8 1f             	sar    eax,0x1f
c000c388:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c38c:	0f b6 c1             	movzx  eax,cl
c000c38f:	8b 0c 85 60 16 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffde9a0]
c000c396:	83 f8 01             	cmp    eax,0x1
c000c399:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000c39d:	76 27                	jbe    c000c3c6 <datetimeToSeconds(datetime_t)+0x87>
c000c39f:	83 e6 03             	and    esi,0x3
c000c3a2:	75 22                	jne    c000c3c6 <datetimeToSeconds(datetime_t)+0x87>
c000c3a4:	31 d2                	xor    edx,edx
c000c3a6:	be 64 00 00 00       	mov    esi,0x64
c000c3ab:	89 d8                	mov    eax,ebx
c000c3ad:	f7 f6                	div    esi
c000c3af:	85 d2                	test   edx,edx
c000c3b1:	75 12                	jne    c000c3c5 <datetimeToSeconds(datetime_t)+0x86>
c000c3b3:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000c3b9:	be 90 01 00 00       	mov    esi,0x190
c000c3be:	99                   	cdq    
c000c3bf:	f7 fe                	idiv   esi
c000c3c1:	85 d2                	test   edx,edx
c000c3c3:	75 01                	jne    c000c3c6 <datetimeToSeconds(datetime_t)+0x87>
c000c3c5:	41                   	inc    ecx
c000c3c6:	83 fb 46             	cmp    ebx,0x46
c000c3c9:	76 48                	jbe    c000c413 <datetimeToSeconds(datetime_t)+0xd4>
c000c3cb:	be 46 00 00 00       	mov    esi,0x46
c000c3d0:	bf 64 00 00 00       	mov    edi,0x64
c000c3d5:	bd 90 01 00 00       	mov    ebp,0x190
c000c3da:	b8 6d 01 00 00       	mov    eax,0x16d
c000c3df:	f7 c6 03 00 00 00    	test   esi,0x3
c000c3e5:	75 23                	jne    c000c40a <datetimeToSeconds(datetime_t)+0xcb>
c000c3e7:	89 f0                	mov    eax,esi
c000c3e9:	99                   	cdq    
c000c3ea:	f7 ff                	idiv   edi
c000c3ec:	b8 6e 01 00 00       	mov    eax,0x16e
c000c3f1:	85 d2                	test   edx,edx
c000c3f3:	75 15                	jne    c000c40a <datetimeToSeconds(datetime_t)+0xcb>
c000c3f5:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000c3fb:	99                   	cdq    
c000c3fc:	f7 fd                	idiv   ebp
c000c3fe:	83 fa 01             	cmp    edx,0x1
c000c401:	19 c0                	sbb    eax,eax
c000c403:	f7 d0                	not    eax
c000c405:	05 6e 01 00 00       	add    eax,0x16e
c000c40a:	01 c1                	add    ecx,eax
c000c40c:	46                   	inc    esi
c000c40d:	39 de                	cmp    esi,ebx
c000c40f:	7c c9                	jl     c000c3da <datetimeToSeconds(datetime_t)+0x9b>
c000c411:	eb 34                	jmp    c000c447 <datetimeToSeconds(datetime_t)+0x108>
c000c413:	74 32                	je     c000c447 <datetimeToSeconds(datetime_t)+0x108>
c000c415:	b8 45 00 00 00       	mov    eax,0x45
c000c41a:	89 c2                	mov    edx,eax
c000c41c:	83 e2 03             	and    edx,0x3
c000c41f:	39 d8                	cmp    eax,ebx
c000c421:	7e 0f                	jle    c000c432 <datetimeToSeconds(datetime_t)+0xf3>
c000c423:	83 fa 01             	cmp    edx,0x1
c000c426:	19 d2                	sbb    edx,edx
c000c428:	48                   	dec    eax
c000c429:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000c430:	eb e8                	jmp    c000c41a <datetimeToSeconds(datetime_t)+0xdb>
c000c432:	b8 6d 01 00 00       	mov    eax,0x16d
c000c437:	85 d2                	test   edx,edx
c000c439:	75 0a                	jne    c000c445 <datetimeToSeconds(datetime_t)+0x106>
c000c43b:	83 fb 01             	cmp    ebx,0x1
c000c43e:	19 c0                	sbb    eax,eax
c000c440:	05 6e 01 00 00       	add    eax,0x16e
c000c445:	29 c1                	sub    ecx,eax
c000c447:	b8 80 51 01 00       	mov    eax,0x15180
c000c44c:	f7 e9                	imul   ecx
c000c44e:	03 04 24             	add    eax,DWORD PTR [esp]
c000c451:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000c455:	83 c4 0c             	add    esp,0xc
c000c458:	5b                   	pop    ebx
c000c459:	5e                   	pop    esi
c000c45a:	5f                   	pop    edi
c000c45b:	5d                   	pop    ebp
c000c45c:	c3                   	ret    
c000c45d:	90                   	nop

c000c45e <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000c45e:	57                   	push   edi
c000c45f:	56                   	push   esi
c000c460:	53                   	push   ebx
c000c461:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c465:	8b 06                	mov    eax,DWORD PTR [esi]
c000c467:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000c46a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c46e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c472:	e8 c8 fe ff ff       	call   c000c33f <datetimeToSeconds(datetime_t)>
c000c477:	59                   	pop    ecx
c000c478:	0f b6 0d 08 64 02 c0 	movzx  ecx,BYTE PTR ds:0xc0026408
c000c47f:	5b                   	pop    ebx
c000c480:	03 0d 0c 64 02 c0    	add    ecx,DWORD PTR ds:0xc002640c
c000c486:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c48c:	89 cb                	mov    ebx,ecx
c000c48e:	c1 fb 1f             	sar    ebx,0x1f
c000c491:	29 c8                	sub    eax,ecx
c000c493:	19 da                	sbb    edx,ebx
c000c495:	31 c9                	xor    ecx,ecx
c000c497:	80 3d 09 64 02 c0 00 	cmp    BYTE PTR ds:0xc0026409,0x0
c000c49e:	74 05                	je     c000c4a5 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000c4a0:	b9 08 07 00 00       	mov    ecx,0x708
c000c4a5:	31 db                	xor    ebx,ebx
c000c4a7:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000c4ab:	29 c8                	sub    eax,ecx
c000c4ad:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c4b1:	19 da                	sbb    edx,ebx
c000c4b3:	89 f8                	mov    eax,edi
c000c4b5:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c4b9:	5b                   	pop    ebx
c000c4ba:	5e                   	pop    esi
c000c4bb:	5f                   	pop    edi
c000c4bc:	ff e0                	jmp    eax

c000c4be <secondsToDatetime(unsigned long long)>:
c000c4be:	55                   	push   ebp
c000c4bf:	57                   	push   edi
c000c4c0:	56                   	push   esi
c000c4c1:	53                   	push   ebx
c000c4c2:	83 ec 1c             	sub    esp,0x1c
c000c4c5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000c4c9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c4cd:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000c4d1:	6a 00                	push   0x0
c000c4d3:	68 80 51 01 00       	push   0x15180
c000c4d8:	55                   	push   ebp
c000c4d9:	57                   	push   edi
c000c4da:	e8 d1 2e 01 00       	call   c001f3b0 <__udivdi3>
c000c4df:	83 c4 10             	add    esp,0x10
c000c4e2:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000c4e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c4ec:	6a 00                	push   0x0
c000c4ee:	68 80 51 01 00       	push   0x15180
c000c4f3:	55                   	push   ebp
c000c4f4:	57                   	push   edi
c000c4f5:	bf 10 0e 00 00       	mov    edi,0xe10
c000c4fa:	e8 b1 2f 01 00       	call   c001f4b0 <__umoddi3>
c000c4ff:	83 c4 10             	add    esp,0x10
c000c502:	99                   	cdq    
c000c503:	f7 ff                	idiv   edi
c000c505:	bf 3c 00 00 00       	mov    edi,0x3c
c000c50a:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000c50d:	89 d0                	mov    eax,edx
c000c50f:	99                   	cdq    
c000c510:	f7 ff                	idiv   edi
c000c512:	85 db                	test   ebx,ebx
c000c514:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000c517:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000c51a:	79 11                	jns    c000c52d <secondsToDatetime(unsigned long long)+0x6f>
c000c51c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c520:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000c526:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c52b:	eb 07                	jmp    c000c534 <secondsToDatetime(unsigned long long)+0x76>
c000c52d:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c532:	89 d8                	mov    eax,ebx
c000c534:	bf b4 05 00 00       	mov    edi,0x5b4
c000c539:	99                   	cdq    
c000c53a:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000c53f:	f7 f9                	idiv   ecx
c000c541:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000c546:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c54a:	31 d2                	xor    edx,edx
c000c54c:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000c554:	01 c3                	add    ebx,eax
c000c556:	89 d8                	mov    eax,ebx
c000c558:	f7 f1                	div    ecx
c000c55a:	31 d2                	xor    edx,edx
c000c55c:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000c55f:	89 d8                	mov    eax,ebx
c000c561:	f7 f7                	div    edi
c000c563:	31 d2                	xor    edx,edx
c000c565:	29 c1                	sub    ecx,eax
c000c567:	89 d8                	mov    eax,ebx
c000c569:	f7 f5                	div    ebp
c000c56b:	bd 6d 01 00 00       	mov    ebp,0x16d
c000c570:	29 c1                	sub    ecx,eax
c000c572:	31 d2                	xor    edx,edx
c000c574:	89 c8                	mov    eax,ecx
c000c576:	f7 f5                	div    ebp
c000c578:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000c57d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c581:	31 d2                	xor    edx,edx
c000c583:	89 c8                	mov    eax,ecx
c000c585:	f7 f5                	div    ebp
c000c587:	31 d2                	xor    edx,edx
c000c589:	01 c3                	add    ebx,eax
c000c58b:	89 c8                	mov    eax,ecx
c000c58d:	f7 f7                	div    edi
c000c58f:	bf 99 00 00 00       	mov    edi,0x99
c000c594:	29 c3                	sub    ebx,eax
c000c596:	31 d2                	xor    edx,edx
c000c598:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000c5a0:	29 c3                	sub    ebx,eax
c000c5a2:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000c5a5:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000c5a8:	bb 05 00 00 00       	mov    ebx,0x5
c000c5ad:	83 c1 02             	add    ecx,0x2
c000c5b0:	89 c8                	mov    eax,ecx
c000c5b2:	f7 f7                	div    edi
c000c5b4:	31 d2                	xor    edx,edx
c000c5b6:	89 c7                	mov    edi,eax
c000c5b8:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000c5be:	83 c0 02             	add    eax,0x2
c000c5c1:	f7 f3                	div    ebx
c000c5c3:	89 eb                	mov    ebx,ebp
c000c5c5:	29 c3                	sub    ebx,eax
c000c5c7:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000c5cd:	88 1e                	mov    BYTE PTR [esi],bl
c000c5cf:	19 c0                	sbb    eax,eax
c000c5d1:	31 d2                	xor    edx,edx
c000c5d3:	83 e0 0c             	and    eax,0xc
c000c5d6:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000c5da:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000c5e2:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000c5e6:	83 f9 01             	cmp    ecx,0x1
c000c5e9:	0f 96 c2             	setbe  dl
c000c5ec:	41                   	inc    ecx
c000c5ed:	01 d0                	add    eax,edx
c000c5ef:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000c5f2:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000c5f6:	83 c4 1c             	add    esp,0x1c
c000c5f9:	89 f0                	mov    eax,esi
c000c5fb:	5b                   	pop    ebx
c000c5fc:	5e                   	pop    esi
c000c5fd:	5f                   	pop    edi
c000c5fe:	5d                   	pop    ebp
c000c5ff:	c2 04 00             	ret    0x4

c000c602 <Clock::timeInDatetimeLocal()>:
c000c602:	53                   	push   ebx
c000c603:	83 ec 14             	sub    esp,0x14
c000c606:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c60a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c60e:	e8 8b fc ff ff       	call   c000c29e <Clock::timeInSecondsLocal()>
c000c613:	83 c4 0c             	add    esp,0xc
c000c616:	52                   	push   edx
c000c617:	50                   	push   eax
c000c618:	53                   	push   ebx
c000c619:	e8 a0 fe ff ff       	call   c000c4be <secondsToDatetime(unsigned long long)>
c000c61e:	89 d8                	mov    eax,ebx
c000c620:	83 c4 14             	add    esp,0x14
c000c623:	5b                   	pop    ebx
c000c624:	c2 04 00             	ret    0x4
c000c627:	90                   	nop

c000c628 <Device::hibernate()>:
c000c628:	c3                   	ret    
c000c629:	90                   	nop

c000c62a <Device::wake()>:
c000c62a:	c3                   	ret    
c000c62b:	90                   	nop

c000c62c <Device::detect()>:
c000c62c:	c3                   	ret    
c000c62d:	90                   	nop

c000c62e <Device::disableLegacy()>:
c000c62e:	c3                   	ret    
c000c62f:	90                   	nop

c000c630 <Device::powerSaving(PowerSavingLevel)>:
c000c630:	c3                   	ret    
c000c631:	90                   	nop

c000c632 <DriverlessDevice::close(int, int, void*)>:
c000c632:	31 c0                	xor    eax,eax
c000c634:	c3                   	ret    
c000c635:	90                   	nop

c000c636 <DriverlessDevice::detect()>:
c000c636:	c3                   	ret    
c000c637:	90                   	nop

c000c638 <DriverlessDevice::open(int, int, void*)>:
c000c638:	83 ec 18             	sub    esp,0x18
c000c63b:	68 90 16 02 c0       	push   0xc0021690
c000c640:	e8 34 4d 00 00       	call   c0011379 <KePanic(char const*)>
c000c645:	83 c8 ff             	or     eax,0xffffffff
c000c648:	83 c4 1c             	add    esp,0x1c
c000c64b:	c3                   	ret    

c000c64c <Device::~Device()>:
c000c64c:	ba f0 16 02 c0       	mov    edx,0xc00216f0
c000c651:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c655:	89 10                	mov    DWORD PTR [eax],edx
c000c657:	90                   	nop
c000c658:	c3                   	ret    
c000c659:	90                   	nop

c000c65a <Device::~Device()>:
c000c65a:	83 ec 0c             	sub    esp,0xc
c000c65d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c661:	e8 e6 ff ff ff       	call   c000c64c <Device::~Device()>
c000c666:	83 c4 04             	add    esp,0x4
c000c669:	83 ec 08             	sub    esp,0x8
c000c66c:	68 58 01 00 00       	push   0x158
c000c671:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c675:	e8 9e e1 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000c67a:	83 c4 10             	add    esp,0x10
c000c67d:	83 c4 0c             	add    esp,0xc
c000c680:	c3                   	ret    
c000c681:	90                   	nop

c000c682 <Device::findAndLoadDriver()>:
c000c682:	c7 44 24 04 ae 16 02 c0 	mov    DWORD PTR [esp+0x4],0xc00216ae
c000c68a:	e9 b6 e2 ff ff       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>
c000c68f:	90                   	nop

c000c690 <Device::preOpenPCI(PCIDeviceInfo)>:
c000c690:	57                   	push   edi
c000c691:	b9 09 00 00 00       	mov    ecx,0x9
c000c696:	56                   	push   esi
c000c697:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000c69b:	8d 74 24 10          	lea    esi,[esp+0x10]
c000c69f:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000c6a9:	81 c7 18 01 00 00    	add    edi,0x118
c000c6af:	fc                   	cld    
c000c6b0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000c6b2:	5e                   	pop    esi
c000c6b3:	5f                   	pop    edi
c000c6b4:	c3                   	ret    
c000c6b5:	90                   	nop

c000c6b6 <Device::preOpenACPI(void*, char*, char*)>:
c000c6b6:	57                   	push   edi
c000c6b7:	b9 1e 00 00 00       	mov    ecx,0x1e
c000c6bc:	56                   	push   esi
c000c6bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c6c1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c6c5:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000c6cf:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000c6d5:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000c6db:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c6df:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c6e1:	b9 0e 00 00 00       	mov    ecx,0xe
c000c6e6:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000c6ec:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000c6f0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c6f2:	5e                   	pop    esi
c000c6f3:	5f                   	pop    edi
c000c6f4:	c3                   	ret    
c000c6f5:	90                   	nop

c000c6f6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c6f6:	53                   	push   ebx
c000c6f7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c6fb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c6ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c703:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c707:	0f b6 c0             	movzx  eax,al
c000c70a:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000c70e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c712:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c716:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c71a:	5b                   	pop    ebx
c000c71b:	e9 a8 05 00 00       	jmp    c000ccc8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000c720 <Device::getParent()>:
c000c720:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c724:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000c72a:	c3                   	ret    
c000c72b:	90                   	nop

c000c72c <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c72c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c730:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c734:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000c739:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c73d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c741:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c745:	e9 e6 06 00 00       	jmp    c000ce30 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000c74a <Device::addChild(Device*)>:
c000c74a:	53                   	push   ebx
c000c74b:	83 ec 08             	sub    esp,0x8
c000c74e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c752:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c756:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000c75c:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000c762:	8b 13                	mov    edx,DWORD PTR [ebx]
c000c764:	85 d2                	test   edx,edx
c000c766:	74 04                	je     c000c76c <Device::addChild(Device*)+0x22>
c000c768:	89 d3                	mov    ebx,edx
c000c76a:	eb f6                	jmp    c000c762 <Device::addChild(Device*)+0x18>
c000c76c:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000c76f:	83 ec 0c             	sub    esp,0xc
c000c772:	6a 08                	push   0x8
c000c774:	e8 3d b3 ff ff       	call   c0007ab6 <malloc>
c000c779:	89 03                	mov    DWORD PTR [ebx],eax
c000c77b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c781:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c788:	83 c4 18             	add    esp,0x18
c000c78b:	5b                   	pop    ebx
c000c78c:	c3                   	ret    
c000c78d:	90                   	nop

c000c78e <Device::removeAllChildren()>:
c000c78e:	56                   	push   esi
c000c78f:	53                   	push   ebx
c000c790:	52                   	push   edx
c000c791:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c795:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000c79b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c79e:	74 17                	je     c000c7b7 <Device::removeAllChildren()+0x29>
c000c7a0:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000c7a3:	85 c0                	test   eax,eax
c000c7a5:	74 0c                	je     c000c7b3 <Device::removeAllChildren()+0x25>
c000c7a7:	83 ec 0c             	sub    esp,0xc
c000c7aa:	8b 10                	mov    edx,DWORD PTR [eax]
c000c7ac:	50                   	push   eax
c000c7ad:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000c7b0:	83 c4 10             	add    esp,0x10
c000c7b3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c7b5:	eb e4                	jmp    c000c79b <Device::removeAllChildren()+0xd>
c000c7b7:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c7bd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c7c3:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c7c9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c7d0:	58                   	pop    eax
c000c7d1:	5b                   	pop    ebx
c000c7d2:	5e                   	pop    esi
c000c7d3:	c3                   	ret    

c000c7d4 <Device::hibernateAll()>:
c000c7d4:	53                   	push   ebx
c000c7d5:	83 ec 14             	sub    esp,0x14
c000c7d8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c7dc:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c7de:	53                   	push   ebx
c000c7df:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000c7e2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c7e8:	83 c4 10             	add    esp,0x10
c000c7eb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c7ee:	74 0f                	je     c000c7ff <Device::hibernateAll()+0x2b>
c000c7f0:	83 ec 0c             	sub    esp,0xc
c000c7f3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c7f6:	e8 d9 ff ff ff       	call   c000c7d4 <Device::hibernateAll()>
c000c7fb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c7fd:	eb e9                	jmp    c000c7e8 <Device::hibernateAll()+0x14>
c000c7ff:	83 c4 08             	add    esp,0x8
c000c802:	5b                   	pop    ebx
c000c803:	c3                   	ret    

c000c804 <Device::wakeAll()>:
c000c804:	53                   	push   ebx
c000c805:	83 ec 14             	sub    esp,0x14
c000c808:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c80c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c80e:	53                   	push   ebx
c000c80f:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000c812:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c818:	83 c4 10             	add    esp,0x10
c000c81b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c81e:	74 0f                	je     c000c82f <Device::wakeAll()+0x2b>
c000c820:	83 ec 0c             	sub    esp,0xc
c000c823:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c826:	e8 d9 ff ff ff       	call   c000c804 <Device::wakeAll()>
c000c82b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c82d:	eb e9                	jmp    c000c818 <Device::wakeAll()+0x14>
c000c82f:	83 c4 08             	add    esp,0x8
c000c832:	5b                   	pop    ebx
c000c833:	c3                   	ret    

c000c834 <Device::detectAll()>:
c000c834:	53                   	push   ebx
c000c835:	83 ec 14             	sub    esp,0x14
c000c838:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c83c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c83e:	53                   	push   ebx
c000c83f:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000c842:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c848:	83 c4 10             	add    esp,0x10
c000c84b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c84e:	74 0f                	je     c000c85f <Device::detectAll()+0x2b>
c000c850:	83 ec 0c             	sub    esp,0xc
c000c853:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c856:	e8 d9 ff ff ff       	call   c000c834 <Device::detectAll()>
c000c85b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c85d:	eb e9                	jmp    c000c848 <Device::detectAll()+0x14>
c000c85f:	83 c4 08             	add    esp,0x8
c000c862:	5b                   	pop    ebx
c000c863:	c3                   	ret    

c000c864 <Device::disableLegacyAll()>:
c000c864:	c3                   	ret    
c000c865:	90                   	nop

c000c866 <Device::loadDriversForAll()>:
c000c866:	c3                   	ret    
c000c867:	90                   	nop

c000c868 <Device::closeAll()>:
c000c868:	53                   	push   ebx
c000c869:	83 ec 08             	sub    esp,0x8
c000c86c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c870:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c872:	6a 00                	push   0x0
c000c874:	6a 00                	push   0x0
c000c876:	6a 00                	push   0x0
c000c878:	53                   	push   ebx
c000c879:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c87c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c882:	83 c4 10             	add    esp,0x10
c000c885:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c888:	74 0f                	je     c000c899 <Device::closeAll()+0x31>
c000c88a:	83 ec 0c             	sub    esp,0xc
c000c88d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c890:	e8 d3 ff ff ff       	call   c000c868 <Device::closeAll()>
c000c895:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c897:	eb e9                	jmp    c000c882 <Device::closeAll()+0x1a>
c000c899:	83 c4 08             	add    esp,0x8
c000c89c:	5b                   	pop    ebx
c000c89d:	c3                   	ret    

c000c89e <Device::powerSavingAll(PowerSavingLevel)>:
c000c89e:	56                   	push   esi
c000c89f:	53                   	push   ebx
c000c8a0:	83 ec 0c             	sub    esp,0xc
c000c8a3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c8a7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000c8ab:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c8ad:	56                   	push   esi
c000c8ae:	53                   	push   ebx
c000c8af:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000c8b2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c8b8:	83 c4 10             	add    esp,0x10
c000c8bb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c8be:	74 0f                	je     c000c8cf <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000c8c0:	52                   	push   edx
c000c8c1:	52                   	push   edx
c000c8c2:	56                   	push   esi
c000c8c3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c8c6:	e8 d3 ff ff ff       	call   c000c89e <Device::powerSavingAll(PowerSavingLevel)>
c000c8cb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c8cd:	eb e9                	jmp    c000c8b8 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000c8cf:	58                   	pop    eax
c000c8d0:	5b                   	pop    ebx
c000c8d1:	5e                   	pop    esi
c000c8d2:	c3                   	ret    
c000c8d3:	90                   	nop

c000c8d4 <Device::setName(char const*)>:
c000c8d4:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000c8dc:	e9 5f 3d ff ff       	jmp    c0000640 <strcpy>
c000c8e1:	90                   	nop

c000c8e2 <Device::Device(char const*)>:
c000c8e2:	83 ec 1c             	sub    esp,0x1c
c000c8e5:	ba f0 16 02 c0       	mov    edx,0xc00216f0
c000c8ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c8ee:	89 10                	mov    DWORD PTR [eax],edx
c000c8f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c8f4:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000c8fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c902:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c90c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c910:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c91a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c91e:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c928:	83 ec 08             	sub    esp,0x8
c000c92b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c92f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c933:	e8 9c ff ff ff       	call   c000c8d4 <Device::setName(char const*)>
c000c938:	83 c4 10             	add    esp,0x10
c000c93b:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000c943:	83 ec 0c             	sub    esp,0xc
c000c946:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c94a:	e8 67 b1 ff ff       	call   c0007ab6 <malloc>
c000c94f:	83 c4 10             	add    esp,0x10
c000c952:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c958:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c95f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c963:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000c969:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c96d:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c973:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c979:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c97d:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c983:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c98a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c98e:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000c995:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c999:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000c9a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9a4:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c9ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9b2:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c9bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9c0:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c9ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9ce:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000c9d8:	90                   	nop
c000c9d9:	83 c4 1c             	add    esp,0x1c
c000c9dc:	c3                   	ret    
c000c9dd:	90                   	nop

c000c9de <Device::getName()>:
c000c9de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c9e2:	05 d0 00 00 00       	add    eax,0xd0
c000c9e7:	c3                   	ret    

c000c9e8 <DriverlessDevice::DriverlessDevice(char const*)>:
c000c9e8:	83 ec 0c             	sub    esp,0xc
c000c9eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9ef:	83 ec 08             	sub    esp,0x8
c000c9f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f6:	50                   	push   eax
c000c9f7:	e8 e6 fe ff ff       	call   c000c8e2 <Device::Device(char const*)>
c000c9fc:	83 c4 10             	add    esp,0x10
c000c9ff:	ba 1c 17 02 c0       	mov    edx,0xc002171c
c000ca04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca08:	89 10                	mov    DWORD PTR [eax],edx
c000ca0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca0e:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000ca18:	90                   	nop
c000ca19:	83 c4 0c             	add    esp,0xc
c000ca1c:	c3                   	ret    
c000ca1d:	90                   	nop

c000ca1e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000ca1e:	57                   	push   edi
c000ca1f:	56                   	push   esi
c000ca20:	53                   	push   ebx
c000ca21:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ca25:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000ca29:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ca2d:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000ca33:	75 0c                	jne    c000ca41 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000ca35:	52                   	push   edx
c000ca36:	52                   	push   edx
c000ca37:	53                   	push   ebx
c000ca38:	56                   	push   esi
c000ca39:	e8 24 2e 01 00       	call   c001f862 <LinkedList<Device>::addElement(Device*)>
c000ca3e:	83 c4 10             	add    esp,0x10
c000ca41:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ca47:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ca4a:	74 12                	je     c000ca5e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000ca4c:	50                   	push   eax
c000ca4d:	57                   	push   edi
c000ca4e:	56                   	push   esi
c000ca4f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ca52:	e8 c7 ff ff ff       	call   c000ca1e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000ca57:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ca59:	83 c4 10             	add    esp,0x10
c000ca5c:	eb e9                	jmp    c000ca47 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000ca5e:	5b                   	pop    ebx
c000ca5f:	5e                   	pop    esi
c000ca60:	5f                   	pop    edi
c000ca61:	c3                   	ret    

c000ca62 <getDevicesOfType(DeviceType)>:
c000ca62:	53                   	push   ebx
c000ca63:	83 ec 14             	sub    esp,0x14
c000ca66:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ca6a:	53                   	push   ebx
c000ca6b:	e8 ce 2e 01 00       	call   c001f93e <LinkedList<Device>::LinkedList()>
c000ca70:	83 c4 0c             	add    esp,0xc
c000ca73:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ca77:	53                   	push   ebx
c000ca78:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c000ca7e:	e8 9b ff ff ff       	call   c000ca1e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000ca83:	89 d8                	mov    eax,ebx
c000ca85:	83 c4 18             	add    esp,0x18
c000ca88:	5b                   	pop    ebx
c000ca89:	c2 04 00             	ret    0x4

c000ca8c <HardDiskController::HardDiskController(char const*)>:
c000ca8c:	83 ec 0c             	sub    esp,0xc
c000ca8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca93:	83 ec 08             	sub    esp,0x8
c000ca96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca9a:	50                   	push   eax
c000ca9b:	e8 42 fe ff ff       	call   c000c8e2 <Device::Device(char const*)>
c000caa0:	83 c4 10             	add    esp,0x10
c000caa3:	ba 48 17 02 c0       	mov    edx,0xc0021748
c000caa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000caac:	89 10                	mov    DWORD PTR [eax],edx
c000caae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cab2:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000cabc:	90                   	nop
c000cabd:	83 c4 0c             	add    esp,0xc
c000cac0:	c3                   	ret    
c000cac1:	90                   	nop
c000cac2:	66 90                	xchg   ax,ax

c000cac4 <HardDiskController::~HardDiskController()>:
c000cac4:	83 ec 0c             	sub    esp,0xc
c000cac7:	ba 48 17 02 c0       	mov    edx,0xc0021748
c000cacc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cad0:	89 10                	mov    DWORD PTR [eax],edx
c000cad2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cad6:	83 ec 0c             	sub    esp,0xc
c000cad9:	50                   	push   eax
c000cada:	e8 6d fb ff ff       	call   c000c64c <Device::~Device()>
c000cadf:	83 c4 10             	add    esp,0x10
c000cae2:	90                   	nop
c000cae3:	83 c4 0c             	add    esp,0xc
c000cae6:	c3                   	ret    
c000cae7:	90                   	nop

c000cae8 <HardDiskController::~HardDiskController()>:
c000cae8:	83 ec 0c             	sub    esp,0xc
c000caeb:	83 ec 0c             	sub    esp,0xc
c000caee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000caf2:	e8 cd ff ff ff       	call   c000cac4 <HardDiskController::~HardDiskController()>
c000caf7:	83 c4 10             	add    esp,0x10
c000cafa:	83 ec 08             	sub    esp,0x8
c000cafd:	68 58 01 00 00       	push   0x158
c000cb02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb06:	e8 0d dd ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000cb0b:	83 c4 10             	add    esp,0x10
c000cb0e:	83 c4 0c             	add    esp,0xc
c000cb11:	c3                   	ret    

c000cb12 <PhysicalDisk::eject()>:
c000cb12:	83 c8 ff             	or     eax,0xffffffff
c000cb15:	c3                   	ret    

c000cb16 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000cb16:	83 ec 0c             	sub    esp,0xc
c000cb19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb1d:	83 ec 08             	sub    esp,0x8
c000cb20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb24:	50                   	push   eax
c000cb25:	e8 b8 fd ff ff       	call   c000c8e2 <Device::Device(char const*)>
c000cb2a:	83 c4 10             	add    esp,0x10
c000cb2d:	ba 74 17 02 c0       	mov    edx,0xc0021774
c000cb32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb36:	89 10                	mov    DWORD PTR [eax],edx
c000cb38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb3c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cb43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb47:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000cb4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb52:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000cb5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb60:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000cb64:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000cb6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb6e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000cb78:	90                   	nop
c000cb79:	83 c4 0c             	add    esp,0xc
c000cb7c:	c3                   	ret    
c000cb7d:	90                   	nop

c000cb7e <PhysicalDisk::startCache()>:
c000cb7e:	56                   	push   esi
c000cb7f:	53                   	push   ebx
c000cb80:	83 ec 10             	sub    esp,0x10
c000cb83:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000cb87:	6a 44                	push   0x44
c000cb89:	e8 28 af ff ff       	call   c0007ab6 <malloc>
c000cb8e:	89 c6                	mov    esi,eax
c000cb90:	58                   	pop    eax
c000cb91:	5a                   	pop    edx
c000cb92:	53                   	push   ebx
c000cb93:	56                   	push   esi
c000cb94:	e8 7b 17 00 00       	call   c000e314 <VCache::VCache(PhysicalDisk*)>
c000cb99:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000cb9f:	83 c4 14             	add    esp,0x14
c000cba2:	5b                   	pop    ebx
c000cba3:	5e                   	pop    esi
c000cba4:	c3                   	ret    
c000cba5:	90                   	nop

c000cba6 <PhysicalDisk::~PhysicalDisk()>:
c000cba6:	83 ec 0c             	sub    esp,0xc
c000cba9:	ba 74 17 02 c0       	mov    edx,0xc0021774
c000cbae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cbb2:	89 10                	mov    DWORD PTR [eax],edx
c000cbb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cbb8:	83 ec 0c             	sub    esp,0xc
c000cbbb:	50                   	push   eax
c000cbbc:	e8 8b fa ff ff       	call   c000c64c <Device::~Device()>
c000cbc1:	83 c4 10             	add    esp,0x10
c000cbc4:	90                   	nop
c000cbc5:	83 c4 0c             	add    esp,0xc
c000cbc8:	c3                   	ret    
c000cbc9:	90                   	nop

c000cbca <PhysicalDisk::~PhysicalDisk()>:
c000cbca:	83 ec 0c             	sub    esp,0xc
c000cbcd:	83 ec 0c             	sub    esp,0xc
c000cbd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbd4:	e8 cd ff ff ff       	call   c000cba6 <PhysicalDisk::~PhysicalDisk()>
c000cbd9:	83 c4 10             	add    esp,0x10
c000cbdc:	83 ec 08             	sub    esp,0x8
c000cbdf:	68 6c 01 00 00       	push   0x16c
c000cbe4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbe8:	e8 2b dc ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000cbed:	83 c4 10             	add    esp,0x10
c000cbf0:	83 c4 0c             	add    esp,0xc
c000cbf3:	c3                   	ret    

c000cbf4 <int_handler>:
c000cbf4:	55                   	push   ebp
c000cbf5:	57                   	push   edi
c000cbf6:	56                   	push   esi
c000cbf7:	53                   	push   ebx
c000cbf8:	83 ec 0c             	sub    esp,0xc
c000cbfb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000cbff:	80 3d 88 8e 02 c0 00 	cmp    BYTE PTR ds:0xc0028e88,0x0
c000cc06:	74 0b                	je     c000cc13 <int_handler+0x1f>
c000cc08:	fa                   	cli    
c000cc09:	f4                   	hlt    
c000cc0a:	80 3d 88 8e 02 c0 00 	cmp    BYTE PTR ds:0xc0028e88,0x0
c000cc11:	75 f5                	jne    c000cc08 <int_handler+0x14>
c000cc13:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000cc16:	8d 46 e0             	lea    eax,[esi-0x20]
c000cc19:	83 f8 17             	cmp    eax,0x17
c000cc1c:	76 40                	jbe    c000cc5e <int_handler+0x6a>
c000cc1e:	c1 e6 04             	shl    esi,0x4
c000cc21:	31 db                	xor    ebx,ebx
c000cc23:	8d ae 20 74 02 c0    	lea    ebp,[esi-0x3ffd8be0]
c000cc29:	81 c6 20 64 02 c0    	add    esi,0xc0026420
c000cc2f:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000cc33:	85 c0                	test   eax,eax
c000cc35:	74 13                	je     c000cc4a <int_handler+0x56>
c000cc37:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000cc3a:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000cc3e:	74 2c                	je     c000cc6c <int_handler+0x78>
c000cc40:	83 ec 08             	sub    esp,0x8
c000cc43:	52                   	push   edx
c000cc44:	57                   	push   edi
c000cc45:	ff d0                	call   eax
c000cc47:	83 c4 10             	add    esp,0x10
c000cc4a:	83 c3 01             	add    ebx,0x1
c000cc4d:	83 fb 04             	cmp    ebx,0x4
c000cc50:	75 dd                	jne    c000cc2f <int_handler+0x3b>
c000cc52:	83 c4 0c             	add    esp,0xc
c000cc55:	31 c0                	xor    eax,eax
c000cc57:	5b                   	pop    ebx
c000cc58:	31 d2                	xor    edx,edx
c000cc5a:	5e                   	pop    esi
c000cc5b:	5f                   	pop    edi
c000cc5c:	5d                   	pop    ebp
c000cc5d:	c3                   	ret    
c000cc5e:	83 ec 0c             	sub    esp,0xc
c000cc61:	50                   	push   eax
c000cc62:	e8 9d b3 00 00       	call   c0018004 <HalEndOfInterrupt(int)>
c000cc67:	83 c4 10             	add    esp,0x10
c000cc6a:	eb b2                	jmp    c000cc1e <int_handler+0x2a>
c000cc6c:	83 ec 08             	sub    esp,0x8
c000cc6f:	52                   	push   edx
c000cc70:	57                   	push   edi
c000cc71:	ff d0                	call   eax
c000cc73:	83 c4 10             	add    esp,0x10
c000cc76:	83 c4 0c             	add    esp,0xc
c000cc79:	5b                   	pop    ebx
c000cc7a:	5e                   	pop    esi
c000cc7b:	5f                   	pop    edi
c000cc7c:	5d                   	pop    ebp
c000cc7d:	c3                   	ret    

c000cc7e <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000cc7e:	56                   	push   esi
c000cc7f:	31 c0                	xor    eax,eax
c000cc81:	53                   	push   ebx
c000cc82:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cc86:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cc8a:	89 ca                	mov    edx,ecx
c000cc8c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cc90:	c1 e2 04             	shl    edx,0x4
c000cc93:	83 bc 82 20 74 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd8be0],0x0
c000cc9b:	74 17                	je     c000ccb4 <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c000cc9d:	83 c0 01             	add    eax,0x1
c000cca0:	83 f8 04             	cmp    eax,0x4
c000cca3:	75 ee                	jne    c000cc93 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000cca5:	c7 44 24 0c a4 17 02 c0 	mov    DWORD PTR [esp+0xc],0xc00217a4
c000ccad:	5b                   	pop    ebx
c000ccae:	5e                   	pop    esi
c000ccaf:	e9 c5 46 00 00       	jmp    c0011379 <KePanic(char const*)>
c000ccb4:	8d 04 88             	lea    eax,[eax+ecx*4]
c000ccb7:	89 1c 85 20 74 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8be0],ebx
c000ccbe:	89 34 85 20 64 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9be0],esi
c000ccc5:	5b                   	pop    ebx
c000ccc6:	5e                   	pop    esi
c000ccc7:	c3                   	ret    

c000ccc8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000ccc8:	57                   	push   edi
c000ccc9:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c000cccf:	56                   	push   esi
c000ccd0:	53                   	push   ebx
c000ccd1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ccd5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccd9:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000cce0:	74 54                	je     c000cd36 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6e>
c000cce2:	89 c7                	mov    edi,eax
c000cce4:	84 c0                	test   al,al
c000cce6:	74 1d                	je     c000cd05 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c000cce8:	83 fe 0f             	cmp    esi,0xf
c000cceb:	0f 8f d5 00 00 00    	jg     c000cdc6 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xfe>
c000ccf1:	0f b6 b6 a8 32 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdcd58]
c000ccf8:	0f b7 bc 36 c0 8b 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd7440]
c000cd00:	d1 ef                	shr    edi,1
c000cd02:	83 e7 01             	and    edi,0x1
c000cd05:	83 ec 08             	sub    esp,0x8
c000cd08:	a1 c0 a0 02 c0       	mov    eax,ds:0xc002a0c0
c000cd0d:	31 db                	xor    ebx,ebx
c000cd0f:	50                   	push   eax
c000cd10:	68 b1 17 02 c0       	push   0xc00217b1
c000cd15:	e8 2b dc ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000cd1a:	83 c4 10             	add    esp,0x10
c000cd1d:	a1 c0 a0 02 c0       	mov    eax,ds:0xc002a0c0
c000cd22:	85 c0                	test   eax,eax
c000cd24:	7f 55                	jg     c000cd7b <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c000cd26:	83 ec 0c             	sub    esp,0xc
c000cd29:	68 c8 17 02 c0       	push   0xc00217c8
c000cd2e:	e8 46 46 00 00       	call   c0011379 <KePanic(char const*)>
c000cd33:	83 c4 10             	add    esp,0x10
c000cd36:	8d 7e 20             	lea    edi,[esi+0x20]
c000cd39:	89 f8                	mov    eax,edi
c000cd3b:	31 d2                	xor    edx,edx
c000cd3d:	c1 e0 04             	shl    eax,0x4
c000cd40:	8b 8c 90 20 74 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd8be0]
c000cd47:	85 c9                	test   ecx,ecx
c000cd49:	0f 84 8e 00 00 00    	je     c000cddd <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x115>
c000cd4f:	83 c2 01             	add    edx,0x1
c000cd52:	83 fa 04             	cmp    edx,0x4
c000cd55:	75 e9                	jne    c000cd40 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000cd57:	83 ec 0c             	sub    esp,0xc
c000cd5a:	68 1c 18 02 c0       	push   0xc002181c
c000cd5f:	e8 15 46 00 00       	call   c0011379 <KePanic(char const*)>
c000cd64:	83 c4 10             	add    esp,0x10
c000cd67:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000cd6c:	5b                   	pop    ebx
c000cd6d:	5e                   	pop    esi
c000cd6e:	5f                   	pop    edi
c000cd6f:	c3                   	ret    
c000cd70:	83 c3 01             	add    ebx,0x1
c000cd73:	39 1d c0 a0 02 c0    	cmp    DWORD PTR ds:0xc002a0c0,ebx
c000cd79:	7e ab                	jle    c000cd26 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5e>
c000cd7b:	83 ec 08             	sub    esp,0x8
c000cd7e:	8b 04 9d e0 a0 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd5f20]
c000cd85:	56                   	push   esi
c000cd86:	50                   	push   eax
c000cd87:	e8 02 1a 01 00       	call   c001e78e <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000cd8c:	83 c4 10             	add    esp,0x10
c000cd8f:	84 c0                	test   al,al
c000cd91:	74 dd                	je     c000cd70 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa8>
c000cd93:	83 ec 04             	sub    esp,0x4
c000cd96:	89 f8                	mov    eax,edi
c000cd98:	8b 1c 9d e0 a0 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd5f20]
c000cd9f:	0f b6 f8             	movzx  edi,al
c000cda2:	57                   	push   edi
c000cda3:	8d 7e 20             	lea    edi,[esi+0x20]
c000cda6:	6a 00                	push   0x0
c000cda8:	89 f8                	mov    eax,edi
c000cdaa:	0f b6 c0             	movzx  eax,al
c000cdad:	50                   	push   eax
c000cdae:	89 f0                	mov    eax,esi
c000cdb0:	6a 00                	push   0x0
c000cdb2:	0f b6 c0             	movzx  eax,al
c000cdb5:	6a 00                	push   0x0
c000cdb7:	50                   	push   eax
c000cdb8:	53                   	push   ebx
c000cdb9:	e8 3c 1b 01 00       	call   c001e8fa <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000cdbe:	83 c4 20             	add    esp,0x20
c000cdc1:	e9 73 ff ff ff       	jmp    c000cd39 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x71>
c000cdc6:	83 ec 0c             	sub    esp,0xc
c000cdc9:	31 ff                	xor    edi,edi
c000cdcb:	68 e4 17 02 c0       	push   0xc00217e4
c000cdd0:	e8 a4 45 00 00       	call   c0011379 <KePanic(char const*)>
c000cdd5:	83 c4 10             	add    esp,0x10
c000cdd8:	e9 28 ff ff ff       	jmp    c000cd05 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c000cddd:	8d 04 ba             	lea    eax,[edx+edi*4]
c000cde0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cde4:	89 14 85 20 74 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8be0],edx
c000cdeb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cdef:	5b                   	pop    ebx
c000cdf0:	89 14 85 20 64 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9be0],edx
c000cdf7:	89 f0                	mov    eax,esi
c000cdf9:	5e                   	pop    esi
c000cdfa:	5f                   	pop    edi
c000cdfb:	c3                   	ret    

c000cdfc <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000cdfc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ce00:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ce04:	c1 e0 04             	shl    eax,0x4
c000ce07:	8d 50 10             	lea    edx,[eax+0x10]
c000ce0a:	39 88 20 74 02 c0    	cmp    DWORD PTR [eax-0x3ffd8be0],ecx
c000ce10:	74 08                	je     c000ce1a <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000ce12:	83 c0 04             	add    eax,0x4
c000ce15:	39 d0                	cmp    eax,edx
c000ce17:	75 f1                	jne    c000ce0a <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000ce19:	c3                   	ret    
c000ce1a:	c7 80 20 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8be0],0x0
c000ce24:	c7 80 20 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9be0],0x0
c000ce2e:	eb e2                	jmp    c000ce12 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000ce30 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000ce30:	53                   	push   ebx
c000ce31:	83 ec 08             	sub    esp,0x8
c000ce34:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ce38:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000ce3d:	74 0e                	je     c000ce4d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000ce3f:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ce44:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000ce4b:	75 37                	jne    c000ce84 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000ce4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce51:	83 c0 20             	add    eax,0x20
c000ce54:	c1 e0 04             	shl    eax,0x4
c000ce57:	8d 50 10             	lea    edx,[eax+0x10]
c000ce5a:	39 98 20 74 02 c0    	cmp    DWORD PTR [eax-0x3ffd8be0],ebx
c000ce60:	74 0c                	je     c000ce6e <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000ce62:	83 c0 04             	add    eax,0x4
c000ce65:	39 d0                	cmp    eax,edx
c000ce67:	75 f1                	jne    c000ce5a <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000ce69:	83 c4 08             	add    esp,0x8
c000ce6c:	5b                   	pop    ebx
c000ce6d:	c3                   	ret    
c000ce6e:	c7 80 20 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8be0],0x0
c000ce78:	c7 80 20 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9be0],0x0
c000ce82:	eb de                	jmp    c000ce62 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000ce84:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000ce89:	7f 11                	jg     c000ce9c <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6c>
c000ce8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce8f:	0f b6 80 a8 32 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdcd58]
c000ce96:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ce9a:	eb b1                	jmp    c000ce4d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000ce9c:	83 ec 0c             	sub    esp,0xc
c000ce9f:	68 d5 17 02 c0       	push   0xc00217d5
c000cea4:	e8 d0 44 00 00       	call   c0011379 <KePanic(char const*)>
c000cea9:	83 c4 10             	add    esp,0x10
c000ceac:	eb 9f                	jmp    c000ce4d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000ceae <setupINTS()>:
c000ceae:	31 c0                	xor    eax,eax
c000ceb0:	c7 80 20 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8be0],0x0
c000ceba:	c7 80 20 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9be0],0x0
c000cec4:	c7 80 24 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8bdc],0x0
c000cece:	c7 80 24 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9bdc],0x0
c000ced8:	c7 80 28 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8bd8],0x0
c000cee2:	c7 80 28 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9bd8],0x0
c000ceec:	c7 80 2c 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8bd4],0x0
c000cef6:	c7 80 2c 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9bd4],0x0
c000cf00:	83 c0 10             	add    eax,0x10
c000cf03:	3d 00 10 00 00       	cmp    eax,0x1000
c000cf08:	75 a6                	jne    c000ceb0 <setupINTS()+0x2>
c000cf0a:	c3                   	ret    

c000cf0b <convertLegacyIRQNumber(int)>:
c000cf0b:	83 ec 0c             	sub    esp,0xc
c000cf0e:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c000cf14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf18:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000cf1f:	74 0c                	je     c000cf2d <convertLegacyIRQNumber(int)+0x22>
c000cf21:	83 f8 0f             	cmp    eax,0xf
c000cf24:	7f 0b                	jg     c000cf31 <convertLegacyIRQNumber(int)+0x26>
c000cf26:	0f b6 80 a8 32 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdcd58]
c000cf2d:	83 c4 0c             	add    esp,0xc
c000cf30:	c3                   	ret    
c000cf31:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cf35:	83 ec 0c             	sub    esp,0xc
c000cf38:	68 e4 17 02 c0       	push   0xc00217e4
c000cf3d:	e8 37 44 00 00       	call   c0011379 <KePanic(char const*)>
c000cf42:	83 c4 10             	add    esp,0x10
c000cf45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf49:	83 c4 0c             	add    esp,0xc
c000cf4c:	c3                   	ret    
c000cf4d:	90                   	nop

c000cf4e <startGUI(void*)>:
c000cf4e:	55                   	push   ebp
c000cf4f:	89 e5                	mov    ebp,esp
c000cf51:	53                   	push   ebx
c000cf52:	83 ec 04             	sub    esp,0x4
c000cf55:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000cf5a:	83 e8 01             	sub    eax,0x1
c000cf5d:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000cf62:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000cf67:	85 c0                	test   eax,eax
c000cf69:	75 01                	jne    c000cf6c <startGUI(void*)+0x1e>
c000cf6b:	fb                   	sti    
c000cf6c:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000cf72:	83 ec 08             	sub    esp,0x8
c000cf75:	6a 01                	push   0x1
c000cf77:	68 41 18 02 c0       	push   0xc0021841
c000cf7c:	e8 5a 83 00 00       	call   c00152db <Thr::loadDLL(char const*, bool)>
c000cf81:	83 c4 10             	add    esp,0x10
c000cf84:	83 ec 08             	sub    esp,0x8
c000cf87:	53                   	push   ebx
c000cf88:	50                   	push   eax
c000cf89:	e8 7e 85 00 00       	call   c001550c <Thr::executeDLL(unsigned long, void*)>
c000cf8e:	83 c4 10             	add    esp,0x10
c000cf91:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000cf97:	83 ec 08             	sub    esp,0x8
c000cf9a:	6a 01                	push   0x1
c000cf9c:	68 5b 18 02 c0       	push   0xc002185b
c000cfa1:	e8 35 83 00 00       	call   c00152db <Thr::loadDLL(char const*, bool)>
c000cfa6:	83 c4 10             	add    esp,0x10
c000cfa9:	83 ec 08             	sub    esp,0x8
c000cfac:	53                   	push   ebx
c000cfad:	50                   	push   eax
c000cfae:	e8 59 85 00 00       	call   c001550c <Thr::executeDLL(unsigned long, void*)>
c000cfb3:	83 c4 10             	add    esp,0x10
c000cfb6:	90                   	nop
c000cfb7:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000cfba:	c9                   	leave  
c000cfbb:	c3                   	ret    

c000cfbc <startGUIVESA(void*)>:
c000cfbc:	55                   	push   ebp
c000cfbd:	89 e5                	mov    ebp,esp
c000cfbf:	53                   	push   ebx
c000cfc0:	83 ec 04             	sub    esp,0x4
c000cfc3:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000cfc8:	83 e8 01             	sub    eax,0x1
c000cfcb:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000cfd0:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000cfd5:	85 c0                	test   eax,eax
c000cfd7:	75 01                	jne    c000cfda <startGUIVESA(void*)+0x1e>
c000cfd9:	fb                   	sti    
c000cfda:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000cfe0:	83 ec 08             	sub    esp,0x8
c000cfe3:	6a 01                	push   0x1
c000cfe5:	68 79 18 02 c0       	push   0xc0021879
c000cfea:	e8 ec 82 00 00       	call   c00152db <Thr::loadDLL(char const*, bool)>
c000cfef:	83 c4 10             	add    esp,0x10
c000cff2:	83 ec 08             	sub    esp,0x8
c000cff5:	53                   	push   ebx
c000cff6:	50                   	push   eax
c000cff7:	e8 10 85 00 00       	call   c001550c <Thr::executeDLL(unsigned long, void*)>
c000cffc:	83 c4 10             	add    esp,0x10
c000cfff:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000d005:	83 ec 08             	sub    esp,0x8
c000d008:	6a 01                	push   0x1
c000d00a:	68 5b 18 02 c0       	push   0xc002185b
c000d00f:	e8 c7 82 00 00       	call   c00152db <Thr::loadDLL(char const*, bool)>
c000d014:	83 c4 10             	add    esp,0x10
c000d017:	83 ec 08             	sub    esp,0x8
c000d01a:	53                   	push   ebx
c000d01b:	50                   	push   eax
c000d01c:	e8 eb 84 00 00       	call   c001550c <Thr::executeDLL(unsigned long, void*)>
c000d021:	83 c4 10             	add    esp,0x10
c000d024:	90                   	nop
c000d025:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d028:	c9                   	leave  
c000d029:	c3                   	ret    

c000d02a <sendKeyToTerminal(unsigned char)>:
c000d02a:	55                   	push   ebp
c000d02b:	89 e5                	mov    ebp,esp
c000d02d:	83 ec 28             	sub    esp,0x28
c000d030:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d033:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000d036:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c000d03b:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000d03f:	83 ec 08             	sub    esp,0x8
c000d042:	52                   	push   edx
c000d043:	50                   	push   eax
c000d044:	e8 6d bd ff ff       	call   c0008db6 <VgaText::receiveKey(unsigned char)>
c000d049:	83 c4 10             	add    esp,0x10
c000d04c:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d050:	83 f8 0a             	cmp    eax,0xa
c000d053:	74 16                	je     c000d06b <sendKeyToTerminal(unsigned char)+0x41>
c000d055:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d059:	83 f8 03             	cmp    eax,0x3
c000d05c:	74 0d                	je     c000d06b <sendKeyToTerminal(unsigned char)+0x41>
c000d05e:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d062:	83 f8 1c             	cmp    eax,0x1c
c000d065:	0f 85 97 00 00 00    	jne    c000d102 <sendKeyToTerminal(unsigned char)+0xd8>
c000d06b:	fa                   	cli    
c000d06c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d071:	83 c0 01             	add    eax,0x1
c000d074:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000d079:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c000d07e:	83 c0 01             	add    eax,0x1
c000d081:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c000d086:	a1 20 84 02 c0       	mov    eax,ds:0xc0028420
c000d08b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d08e:	c7 05 20 84 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028420,0x0
c000d098:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000d09c:	74 1f                	je     c000d0bd <sendKeyToTerminal(unsigned char)+0x93>
c000d09e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d0a1:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000d0a4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000d0a7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000d0aa:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d0ad:	83 ec 0c             	sub    esp,0xc
c000d0b0:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000d0b3:	e8 9c 91 00 00       	call   c0016254 <unblockTask(ThreadControlBlock*)>
c000d0b8:	83 c4 10             	add    esp,0x10
c000d0bb:	eb db                	jmp    c000d098 <sendKeyToTerminal(unsigned char)+0x6e>
c000d0bd:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c000d0c2:	83 e8 01             	sub    eax,0x1
c000d0c5:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c000d0ca:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c000d0cf:	85 c0                	test   eax,eax
c000d0d1:	75 18                	jne    c000d0eb <sendKeyToTerminal(unsigned char)+0xc1>
c000d0d3:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c000d0d8:	85 c0                	test   eax,eax
c000d0da:	74 0f                	je     c000d0eb <sendKeyToTerminal(unsigned char)+0xc1>
c000d0dc:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c000d0e6:	e8 51 8c 00 00       	call   c0015d3c <schedule()>
c000d0eb:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d0f0:	83 e8 01             	sub    eax,0x1
c000d0f3:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000d0f8:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d0fd:	85 c0                	test   eax,eax
c000d0ff:	75 01                	jne    c000d102 <sendKeyToTerminal(unsigned char)+0xd8>
c000d101:	fb                   	sti    
c000d102:	90                   	nop
c000d103:	c9                   	leave  
c000d104:	c3                   	ret    

c000d105 <sendKeyboardToken(KeyboardToken)>:
c000d105:	55                   	push   ebp
c000d106:	89 e5                	mov    ebp,esp
c000d108:	83 ec 18             	sub    esp,0x18
c000d10b:	e8 b9 42 00 00       	call   c00113c9 <KeUserIOReceived()>
c000d110:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000d113:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d116:	0f b7 c0             	movzx  eax,ax
c000d119:	83 f2 01             	xor    edx,0x1
c000d11c:	88 90 40 84 02 c0    	mov    BYTE PTR [eax-0x3ffd7bc0],dl
c000d122:	a1 28 84 02 c0       	mov    eax,ds:0xc0028428
c000d127:	85 c0                	test   eax,eax
c000d129:	74 24                	je     c000d14f <sendKeyboardToken(KeyboardToken)+0x4a>
c000d12b:	8b 0d 28 84 02 c0    	mov    ecx,DWORD PTR ds:0xc0028428
c000d131:	83 ec 04             	sub    esp,0x4
c000d134:	68 40 84 02 c0       	push   0xc0028440
c000d139:	83 ec 08             	sub    esp,0x8
c000d13c:	89 e2                	mov    edx,esp
c000d13e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d141:	89 02                	mov    DWORD PTR [edx],eax
c000d143:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000d146:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000d14a:	ff d1                	call   ecx
c000d14c:	83 c4 10             	add    esp,0x10
c000d14f:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000d153:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000d156:	a0 48 88 02 c0       	mov    al,ds:0xc0028848
c000d15b:	0f b6 d2             	movzx  edx,dl
c000d15e:	0f b6 c0             	movzx  eax,al
c000d161:	39 c2                	cmp    edx,eax
c000d163:	74 1c                	je     c000d181 <sendKeyboardToken(KeyboardToken)+0x7c>
c000d165:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000d168:	a2 48 88 02 c0       	mov    ds:0xc0028848,al
c000d16d:	a0 48 88 02 c0       	mov    al,ds:0xc0028848
c000d172:	0f b6 c0             	movzx  eax,al
c000d175:	83 ec 0c             	sub    esp,0xc
c000d178:	50                   	push   eax
c000d179:	e8 84 b3 ff ff       	call   c0008502 <setTerminalScrollLock(bool)>
c000d17e:	83 c4 10             	add    esp,0x10
c000d181:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000d184:	0f b6 c0             	movzx  eax,al
c000d187:	85 c0                	test   eax,eax
c000d189:	0f 84 da 00 00 00    	je     c000d269 <sendKeyboardToken(KeyboardToken)+0x164>
c000d18f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d192:	0f b7 c0             	movzx  eax,ax
c000d195:	3d 18 03 00 00       	cmp    eax,0x318
c000d19a:	75 06                	jne    c000d1a2 <sendKeyboardToken(KeyboardToken)+0x9d>
c000d19c:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000d1a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1a5:	0f b7 c0             	movzx  eax,ax
c000d1a8:	3d 19 03 00 00       	cmp    eax,0x319
c000d1ad:	75 06                	jne    c000d1b5 <sendKeyboardToken(KeyboardToken)+0xb0>
c000d1af:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000d1b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1b8:	0f b7 c0             	movzx  eax,ax
c000d1bb:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d1c0:	75 06                	jne    c000d1c8 <sendKeyboardToken(KeyboardToken)+0xc3>
c000d1c2:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000d1c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1cb:	0f b7 c0             	movzx  eax,ax
c000d1ce:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d1d3:	75 06                	jne    c000d1db <sendKeyboardToken(KeyboardToken)+0xd6>
c000d1d5:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000d1db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1de:	0f b7 c0             	movzx  eax,ax
c000d1e1:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d1e6:	75 06                	jne    c000d1ee <sendKeyboardToken(KeyboardToken)+0xe9>
c000d1e8:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000d1ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1f1:	0f b7 c0             	movzx  eax,ax
c000d1f4:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d1f9:	75 06                	jne    c000d201 <sendKeyboardToken(KeyboardToken)+0xfc>
c000d1fb:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d201:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d204:	0f b7 c0             	movzx  eax,ax
c000d207:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d20c:	75 06                	jne    c000d214 <sendKeyboardToken(KeyboardToken)+0x10f>
c000d20e:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000d214:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d217:	0f b7 c0             	movzx  eax,ax
c000d21a:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d21f:	75 06                	jne    c000d227 <sendKeyboardToken(KeyboardToken)+0x122>
c000d221:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000d227:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d22a:	0f b7 c0             	movzx  eax,ax
c000d22d:	3d 20 03 00 00       	cmp    eax,0x320
c000d232:	75 06                	jne    c000d23a <sendKeyboardToken(KeyboardToken)+0x135>
c000d234:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000d23a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d23d:	0f b7 c0             	movzx  eax,ax
c000d240:	3d 21 03 00 00       	cmp    eax,0x321
c000d245:	75 06                	jne    c000d24d <sendKeyboardToken(KeyboardToken)+0x148>
c000d247:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000d24d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d250:	0f b7 c0             	movzx  eax,ax
c000d253:	3d 22 03 00 00       	cmp    eax,0x322
c000d258:	0f 85 f1 00 00 00    	jne    c000d34f <sendKeyboardToken(KeyboardToken)+0x24a>
c000d25e:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000d264:	e9 e6 00 00 00       	jmp    c000d34f <sendKeyboardToken(KeyboardToken)+0x24a>
c000d269:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d26c:	0f b7 c0             	movzx  eax,ax
c000d26f:	3d 18 03 00 00       	cmp    eax,0x318
c000d274:	75 0a                	jne    c000d280 <sendKeyboardToken(KeyboardToken)+0x17b>
c000d276:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000d27c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d280:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d283:	0f b7 c0             	movzx  eax,ax
c000d286:	3d 19 03 00 00       	cmp    eax,0x319
c000d28b:	75 0a                	jne    c000d297 <sendKeyboardToken(KeyboardToken)+0x192>
c000d28d:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000d293:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d297:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d29a:	0f b7 c0             	movzx  eax,ax
c000d29d:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d2a2:	75 0a                	jne    c000d2ae <sendKeyboardToken(KeyboardToken)+0x1a9>
c000d2a4:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000d2aa:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d2ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2b1:	0f b7 c0             	movzx  eax,ax
c000d2b4:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d2b9:	75 0a                	jne    c000d2c5 <sendKeyboardToken(KeyboardToken)+0x1c0>
c000d2bb:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000d2c1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d2c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2c8:	0f b7 c0             	movzx  eax,ax
c000d2cb:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d2d0:	75 0a                	jne    c000d2dc <sendKeyboardToken(KeyboardToken)+0x1d7>
c000d2d2:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000d2d8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d2dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2df:	0f b7 c0             	movzx  eax,ax
c000d2e2:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d2e7:	75 0a                	jne    c000d2f3 <sendKeyboardToken(KeyboardToken)+0x1ee>
c000d2e9:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d2ef:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d2f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2f6:	0f b7 c0             	movzx  eax,ax
c000d2f9:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d2fe:	75 0a                	jne    c000d30a <sendKeyboardToken(KeyboardToken)+0x205>
c000d300:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000d306:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d30a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d30d:	0f b7 c0             	movzx  eax,ax
c000d310:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d315:	75 0a                	jne    c000d321 <sendKeyboardToken(KeyboardToken)+0x21c>
c000d317:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000d31d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d321:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d324:	0f b7 c0             	movzx  eax,ax
c000d327:	3d 20 03 00 00       	cmp    eax,0x320
c000d32c:	75 0a                	jne    c000d338 <sendKeyboardToken(KeyboardToken)+0x233>
c000d32e:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000d334:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d338:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d33b:	0f b7 c0             	movzx  eax,ax
c000d33e:	3d 21 03 00 00       	cmp    eax,0x321
c000d343:	75 0a                	jne    c000d34f <sendKeyboardToken(KeyboardToken)+0x24a>
c000d345:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000d34b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d34f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d352:	0f b7 c0             	movzx  eax,ax
c000d355:	3d 00 02 00 00       	cmp    eax,0x200
c000d35a:	75 2f                	jne    c000d38b <sendKeyboardToken(KeyboardToken)+0x286>
c000d35c:	a0 40 88 02 c0       	mov    al,ds:0xc0028840
c000d361:	83 f0 01             	xor    eax,0x1
c000d364:	0f b6 c0             	movzx  eax,al
c000d367:	85 c0                	test   eax,eax
c000d369:	74 20                	je     c000d38b <sendKeyboardToken(KeyboardToken)+0x286>
c000d36b:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000d370:	6a 01                	push   0x1
c000d372:	6a 00                	push   0x0
c000d374:	68 4e cf 00 c0       	push   0xc000cf4e
c000d379:	50                   	push   eax
c000d37a:	e8 6d 87 00 00       	call   c0015aec <Process::createThread(void (*)(void*), void*, int)>
c000d37f:	83 c4 10             	add    esp,0x10
c000d382:	c6 05 40 88 02 c0 01 	mov    BYTE PTR ds:0xc0028840,0x1
c000d389:	eb 3a                	jmp    c000d3c5 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d38b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d38e:	0f b7 c0             	movzx  eax,ax
c000d391:	3d 01 02 00 00       	cmp    eax,0x201
c000d396:	75 2d                	jne    c000d3c5 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d398:	a0 40 88 02 c0       	mov    al,ds:0xc0028840
c000d39d:	83 f0 01             	xor    eax,0x1
c000d3a0:	0f b6 c0             	movzx  eax,al
c000d3a3:	85 c0                	test   eax,eax
c000d3a5:	74 1e                	je     c000d3c5 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d3a7:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000d3ac:	6a 01                	push   0x1
c000d3ae:	6a 00                	push   0x0
c000d3b0:	68 bc cf 00 c0       	push   0xc000cfbc
c000d3b5:	50                   	push   eax
c000d3b6:	e8 31 87 00 00       	call   c0015aec <Process::createThread(void (*)(void*), void*, int)>
c000d3bb:	83 c4 10             	add    esp,0x10
c000d3be:	c6 05 40 88 02 c0 01 	mov    BYTE PTR ds:0xc0028840,0x1
c000d3c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3c8:	0f b7 c0             	movzx  eax,ax
c000d3cb:	3d 25 03 00 00       	cmp    eax,0x325
c000d3d0:	75 06                	jne    c000d3d8 <sendKeyboardToken(KeyboardToken)+0x2d3>
c000d3d2:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000d3d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3db:	0f b7 c0             	movzx  eax,ax
c000d3de:	3d 24 03 00 00       	cmp    eax,0x324
c000d3e3:	75 06                	jne    c000d3eb <sendKeyboardToken(KeyboardToken)+0x2e6>
c000d3e5:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000d3eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3ee:	0f b7 c0             	movzx  eax,ax
c000d3f1:	3d 23 03 00 00       	cmp    eax,0x323
c000d3f6:	75 06                	jne    c000d3fe <sendKeyboardToken(KeyboardToken)+0x2f9>
c000d3f8:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000d3fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d401:	0f b7 c0             	movzx  eax,ax
c000d404:	3d 26 03 00 00       	cmp    eax,0x326
c000d409:	75 06                	jne    c000d411 <sendKeyboardToken(KeyboardToken)+0x30c>
c000d40b:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000d411:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d414:	0f b7 c0             	movzx  eax,ax
c000d417:	3d 27 03 00 00       	cmp    eax,0x327
c000d41c:	75 06                	jne    c000d424 <sendKeyboardToken(KeyboardToken)+0x31f>
c000d41e:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000d424:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d427:	0f b7 c0             	movzx  eax,ax
c000d42a:	3d 22 03 00 00       	cmp    eax,0x322
c000d42f:	75 06                	jne    c000d437 <sendKeyboardToken(KeyboardToken)+0x332>
c000d431:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000d437:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000d43b:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d43e:	83 f0 01             	xor    eax,0x1
c000d441:	0f b6 c0             	movzx  eax,al
c000d444:	85 c0                	test   eax,eax
c000d446:	74 7c                	je     c000d4c4 <sendKeyboardToken(KeyboardToken)+0x3bf>
c000d448:	a0 41 85 02 c0       	mov    al,ds:0xc0028541
c000d44d:	0f b6 c0             	movzx  eax,al
c000d450:	85 c0                	test   eax,eax
c000d452:	74 43                	je     c000d497 <sendKeyboardToken(KeyboardToken)+0x392>
c000d454:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d458:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000d45c:	85 c0                	test   eax,eax
c000d45e:	74 2b                	je     c000d48b <sendKeyboardToken(KeyboardToken)+0x386>
c000d460:	8b 15 44 88 02 c0    	mov    edx,DWORD PTR ds:0xc0028844
c000d466:	89 d0                	mov    eax,edx
c000d468:	c1 e0 02             	shl    eax,0x2
c000d46b:	01 d0                	add    eax,edx
c000d46d:	01 c0                	add    eax,eax
c000d46f:	a3 44 88 02 c0       	mov    ds:0xc0028844,eax
c000d474:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d477:	0f b7 c0             	movzx  eax,ax
c000d47a:	8d 50 d0             	lea    edx,[eax-0x30]
c000d47d:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d482:	01 d0                	add    eax,edx
c000d484:	a3 44 88 02 c0       	mov    ds:0xc0028844,eax
c000d489:	eb 71                	jmp    c000d4fc <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d48b:	c7 05 44 88 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028844,0x0
c000d495:	eb 65                	jmp    c000d4fc <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d497:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d49c:	85 c0                	test   eax,eax
c000d49e:	74 18                	je     c000d4b8 <sendKeyboardToken(KeyboardToken)+0x3b3>
c000d4a0:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d4a5:	0f b6 c0             	movzx  eax,al
c000d4a8:	83 ec 0c             	sub    esp,0xc
c000d4ab:	50                   	push   eax
c000d4ac:	e8 79 fb ff ff       	call   c000d02a <sendKeyToTerminal(unsigned char)>
c000d4b1:	83 c4 10             	add    esp,0x10
c000d4b4:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d4b8:	c7 05 44 88 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028844,0x0
c000d4c2:	eb 38                	jmp    c000d4fc <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d4c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4c7:	0f b7 c0             	movzx  eax,ax
c000d4ca:	3d 01 01 00 00       	cmp    eax,0x101
c000d4cf:	75 2b                	jne    c000d4fc <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d4d1:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d4d6:	85 c0                	test   eax,eax
c000d4d8:	74 18                	je     c000d4f2 <sendKeyboardToken(KeyboardToken)+0x3ed>
c000d4da:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d4df:	0f b6 c0             	movzx  eax,al
c000d4e2:	83 ec 0c             	sub    esp,0xc
c000d4e5:	50                   	push   eax
c000d4e6:	e8 3f fb ff ff       	call   c000d02a <sendKeyToTerminal(unsigned char)>
c000d4eb:	83 c4 10             	add    esp,0x10
c000d4ee:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d4f2:	c7 05 44 88 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028844,0x0
c000d4fc:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d4ff:	83 f0 01             	xor    eax,0x1
c000d502:	0f b6 c0             	movzx  eax,al
c000d505:	85 c0                	test   eax,eax
c000d507:	74 5a                	je     c000d563 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d509:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d50c:	83 f0 01             	xor    eax,0x1
c000d50f:	0f b6 c0             	movzx  eax,al
c000d512:	85 c0                	test   eax,eax
c000d514:	74 4d                	je     c000d563 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d516:	a0 40 85 02 c0       	mov    al,ds:0xc0028540
c000d51b:	83 f0 01             	xor    eax,0x1
c000d51e:	0f b6 c0             	movzx  eax,al
c000d521:	85 c0                	test   eax,eax
c000d523:	74 3e                	je     c000d563 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d525:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d528:	0f b7 c0             	movzx  eax,ax
c000d52b:	83 f8 1f             	cmp    eax,0x1f
c000d52e:	76 0b                	jbe    c000d53b <sendKeyboardToken(KeyboardToken)+0x436>
c000d530:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d533:	0f b7 c0             	movzx  eax,ax
c000d536:	83 f8 7e             	cmp    eax,0x7e
c000d539:	76 16                	jbe    c000d551 <sendKeyboardToken(KeyboardToken)+0x44c>
c000d53b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d53e:	0f b7 c0             	movzx  eax,ax
c000d541:	83 f8 0a             	cmp    eax,0xa
c000d544:	74 0b                	je     c000d551 <sendKeyboardToken(KeyboardToken)+0x44c>
c000d546:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d549:	0f b7 c0             	movzx  eax,ax
c000d54c:	83 f8 08             	cmp    eax,0x8
c000d54f:	75 12                	jne    c000d563 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d551:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d554:	0f b6 c0             	movzx  eax,al
c000d557:	83 ec 0c             	sub    esp,0xc
c000d55a:	50                   	push   eax
c000d55b:	e8 ca fa ff ff       	call   c000d02a <sendKeyToTerminal(unsigned char)>
c000d560:	83 c4 10             	add    esp,0x10
c000d563:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d566:	83 f0 01             	xor    eax,0x1
c000d569:	0f b6 c0             	movzx  eax,al
c000d56c:	85 c0                	test   eax,eax
c000d56e:	74 5d                	je     c000d5cd <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d570:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d573:	83 f0 01             	xor    eax,0x1
c000d576:	0f b6 c0             	movzx  eax,al
c000d579:	85 c0                	test   eax,eax
c000d57b:	74 50                	je     c000d5cd <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d57d:	a0 40 85 02 c0       	mov    al,ds:0xc0028540
c000d582:	0f b6 c0             	movzx  eax,al
c000d585:	85 c0                	test   eax,eax
c000d587:	74 44                	je     c000d5cd <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d589:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d58c:	0f b7 c0             	movzx  eax,ax
c000d58f:	83 f8 3f             	cmp    eax,0x3f
c000d592:	76 39                	jbe    c000d5cd <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d594:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d597:	0f b7 c0             	movzx  eax,ax
c000d59a:	83 f8 7f             	cmp    eax,0x7f
c000d59d:	77 2e                	ja     c000d5cd <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d59f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5a2:	88 c2                	mov    dl,al
c000d5a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5a7:	0f b7 c0             	movzx  eax,ax
c000d5aa:	83 f8 5f             	cmp    eax,0x5f
c000d5ad:	76 04                	jbe    c000d5b3 <sendKeyboardToken(KeyboardToken)+0x4ae>
c000d5af:	b0 20                	mov    al,0x20
c000d5b1:	eb 02                	jmp    c000d5b5 <sendKeyboardToken(KeyboardToken)+0x4b0>
c000d5b3:	b0 00                	mov    al,0x0
c000d5b5:	89 d1                	mov    ecx,edx
c000d5b7:	29 c1                	sub    ecx,eax
c000d5b9:	89 c8                	mov    eax,ecx
c000d5bb:	83 e8 40             	sub    eax,0x40
c000d5be:	0f b6 c0             	movzx  eax,al
c000d5c1:	83 ec 0c             	sub    esp,0xc
c000d5c4:	50                   	push   eax
c000d5c5:	e8 60 fa ff ff       	call   c000d02a <sendKeyToTerminal(unsigned char)>
c000d5ca:	83 c4 10             	add    esp,0x10
c000d5cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5d0:	0f b7 c0             	movzx  eax,ax
c000d5d3:	3d 00 03 00 00       	cmp    eax,0x300
c000d5d8:	75 12                	jne    c000d5ec <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d5da:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d5dd:	83 f0 01             	xor    eax,0x1
c000d5e0:	0f b6 c0             	movzx  eax,al
c000d5e3:	85 c0                	test   eax,eax
c000d5e5:	74 05                	je     c000d5ec <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d5e7:	e8 17 af ff ff       	call   c0008503 <doTerminalCycle()>
c000d5ec:	90                   	nop
c000d5ed:	c9                   	leave  
c000d5ee:	c3                   	ret    

c000d5ef <clearInternalKeybuffer(VgaText*)>:
c000d5ef:	55                   	push   ebp
c000d5f0:	89 e5                	mov    ebp,esp
c000d5f2:	83 ec 08             	sub    esp,0x8
c000d5f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5f8:	05 02 01 00 00       	add    eax,0x102
c000d5fd:	83 ec 0c             	sub    esp,0xc
c000d600:	50                   	push   eax
c000d601:	e8 6a 2f ff ff       	call   c0000570 <strlen>
c000d606:	83 c4 10             	add    esp,0x10
c000d609:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d60c:	81 c2 02 01 00 00    	add    edx,0x102
c000d612:	83 ec 04             	sub    esp,0x4
c000d615:	50                   	push   eax
c000d616:	6a 00                	push   0x0
c000d618:	52                   	push   edx
c000d619:	e8 d2 2e ff ff       	call   c00004f0 <memset>
c000d61e:	83 c4 10             	add    esp,0x10
c000d621:	90                   	nop
c000d622:	c9                   	leave  
c000d623:	c3                   	ret    

c000d624 <readKeyboard(VgaText*, char*, unsigned long)>:
c000d624:	55                   	push   ebp
c000d625:	89 e5                	mov    ebp,esp
c000d627:	83 ec 18             	sub    esp,0x18
c000d62a:	a1 28 84 02 c0       	mov    eax,ds:0xc0028428
c000d62f:	85 c0                	test   eax,eax
c000d631:	74 2a                	je     c000d65d <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000d633:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000d639:	8b 0d 28 84 02 c0    	mov    ecx,DWORD PTR ds:0xc0028428
c000d63f:	83 ec 04             	sub    esp,0x4
c000d642:	68 40 84 02 c0       	push   0xc0028440
c000d647:	83 ec 08             	sub    esp,0x8
c000d64a:	89 e2                	mov    edx,esp
c000d64c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000d64f:	89 02                	mov    DWORD PTR [edx],eax
c000d651:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000d654:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000d658:	ff d1                	call   ecx
c000d65a:	83 c4 10             	add    esp,0x10
c000d65d:	fb                   	sti    
c000d65e:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000d665:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000d669:	0f 84 0d 01 00 00    	je     c000d77c <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c000d66f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d672:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d678:	0f be c0             	movsx  eax,al
c000d67b:	85 c0                	test   eax,eax
c000d67d:	75 2c                	jne    c000d6ab <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c000d67f:	fa                   	cli    
c000d680:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d685:	83 c0 01             	add    eax,0x1
c000d688:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000d68d:	e8 aa 86 00 00       	call   c0015d3c <schedule()>
c000d692:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d697:	83 e8 01             	sub    eax,0x1
c000d69a:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000d69f:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d6a4:	85 c0                	test   eax,eax
c000d6a6:	75 c7                	jne    c000d66f <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d6a8:	fb                   	sti    
c000d6a9:	eb c4                	jmp    c000d66f <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d6ab:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000d6ae:	8d 50 01             	lea    edx,[eax+0x1]
c000d6b1:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d6b4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d6b7:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000d6bd:	88 10                	mov    BYTE PTR [eax],dl
c000d6bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6c2:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d6c8:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000d6cb:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d6cf:	83 f8 03             	cmp    eax,0x3
c000d6d2:	75 1e                	jne    c000d6f2 <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c000d6d4:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d6d9:	8b 00                	mov    eax,DWORD PTR [eax]
c000d6db:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d6de:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d6e4:	83 ec 08             	sub    esp,0x8
c000d6e7:	6a 02                	push   0x2
c000d6e9:	50                   	push   eax
c000d6ea:	e8 2b 41 00 00       	call   c001181a <KeRaiseSignal(SigHandlerBlock*, int)>
c000d6ef:	83 c4 10             	add    esp,0x10
c000d6f2:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d6f6:	83 f8 1c             	cmp    eax,0x1c
c000d6f9:	75 1e                	jne    c000d719 <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c000d6fb:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d700:	8b 00                	mov    eax,DWORD PTR [eax]
c000d702:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d705:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d70b:	83 ec 08             	sub    esp,0x8
c000d70e:	6a 09                	push   0x9
c000d710:	50                   	push   eax
c000d711:	e8 04 41 00 00       	call   c001181a <KeRaiseSignal(SigHandlerBlock*, int)>
c000d716:	83 c4 10             	add    esp,0x10
c000d719:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d71c:	05 02 01 00 00       	add    eax,0x102
c000d721:	83 ec 0c             	sub    esp,0xc
c000d724:	50                   	push   eax
c000d725:	e8 46 2e ff ff       	call   c0000570 <strlen>
c000d72a:	83 c4 10             	add    esp,0x10
c000d72d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d730:	81 c2 02 01 00 00    	add    edx,0x102
c000d736:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d739:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d73c:	81 c2 02 01 00 00    	add    edx,0x102
c000d742:	83 ec 04             	sub    esp,0x4
c000d745:	50                   	push   eax
c000d746:	51                   	push   ecx
c000d747:	52                   	push   edx
c000d748:	e8 83 2c ff ff       	call   c00003d0 <memmove>
c000d74d:	83 c4 10             	add    esp,0x10
c000d750:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000d754:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000d758:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d75c:	83 f8 0a             	cmp    eax,0xa
c000d75f:	74 16                	je     c000d777 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d761:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d765:	83 f8 03             	cmp    eax,0x3
c000d768:	74 0d                	je     c000d777 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d76a:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d76e:	83 f8 1c             	cmp    eax,0x1c
c000d771:	0f 85 ee fe ff ff    	jne    c000d665 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000d777:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d77a:	eb 03                	jmp    c000d77f <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c000d77c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d77f:	c9                   	leave  
c000d780:	c3                   	ret    
c000d781:	90                   	nop

c000d782 <Keyboard::Keyboard(char const*)>:
c000d782:	83 ec 0c             	sub    esp,0xc
c000d785:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d789:	83 ec 08             	sub    esp,0x8
c000d78c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d790:	50                   	push   eax
c000d791:	e8 4c f1 ff ff       	call   c000c8e2 <Device::Device(char const*)>
c000d796:	83 c4 10             	add    esp,0x10
c000d799:	ba 9c 18 02 c0       	mov    edx,0xc002189c
c000d79e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7a2:	89 10                	mov    DWORD PTR [eax],edx
c000d7a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7a8:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000d7b2:	c6 05 24 84 02 c0 01 	mov    BYTE PTR ds:0xc0028424,0x1
c000d7b9:	90                   	nop
c000d7ba:	83 c4 0c             	add    esp,0xc
c000d7bd:	c3                   	ret    

c000d7be <Keyboard::~Keyboard()>:
c000d7be:	83 ec 0c             	sub    esp,0xc
c000d7c1:	ba 9c 18 02 c0       	mov    edx,0xc002189c
c000d7c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7ca:	89 10                	mov    DWORD PTR [eax],edx
c000d7cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7d0:	83 ec 0c             	sub    esp,0xc
c000d7d3:	50                   	push   eax
c000d7d4:	e8 73 ee ff ff       	call   c000c64c <Device::~Device()>
c000d7d9:	83 c4 10             	add    esp,0x10
c000d7dc:	90                   	nop
c000d7dd:	83 c4 0c             	add    esp,0xc
c000d7e0:	c3                   	ret    
c000d7e1:	90                   	nop

c000d7e2 <Keyboard::~Keyboard()>:
c000d7e2:	83 ec 0c             	sub    esp,0xc
c000d7e5:	83 ec 0c             	sub    esp,0xc
c000d7e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7ec:	e8 cd ff ff ff       	call   c000d7be <Keyboard::~Keyboard()>
c000d7f1:	83 c4 10             	add    esp,0x10
c000d7f4:	83 ec 08             	sub    esp,0x8
c000d7f7:	68 5c 01 00 00       	push   0x15c
c000d7fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d800:	e8 13 d0 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000d805:	83 c4 10             	add    esp,0x10
c000d808:	83 c4 0c             	add    esp,0xc
c000d80b:	c3                   	ret    

c000d80c <LogicalDisk::close(int, int, void*)>:
c000d80c:	83 c8 ff             	or     eax,0xffffffff
c000d80f:	c3                   	ret    

c000d810 <LogicalDisk::~LogicalDisk()>:
c000d810:	83 ec 0c             	sub    esp,0xc
c000d813:	ba 14 19 02 c0       	mov    edx,0xc0021914
c000d818:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d81c:	89 10                	mov    DWORD PTR [eax],edx
c000d81e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d822:	83 ec 0c             	sub    esp,0xc
c000d825:	50                   	push   eax
c000d826:	e8 21 ee ff ff       	call   c000c64c <Device::~Device()>
c000d82b:	83 c4 10             	add    esp,0x10
c000d82e:	90                   	nop
c000d82f:	83 c4 0c             	add    esp,0xc
c000d832:	c3                   	ret    
c000d833:	90                   	nop

c000d834 <LogicalDisk::~LogicalDisk()>:
c000d834:	83 ec 0c             	sub    esp,0xc
c000d837:	83 ec 0c             	sub    esp,0xc
c000d83a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d83e:	e8 cd ff ff ff       	call   c000d810 <LogicalDisk::~LogicalDisk()>
c000d843:	83 c4 10             	add    esp,0x10
c000d846:	83 ec 08             	sub    esp,0x8
c000d849:	68 78 01 00 00       	push   0x178
c000d84e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d852:	e8 c1 cf ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000d857:	83 c4 10             	add    esp,0x10
c000d85a:	83 c4 0c             	add    esp,0xc
c000d85d:	c3                   	ret    

c000d85e <LogicalDisk::open(int, int, void*)>:
c000d85e:	83 ec 18             	sub    esp,0x18
c000d861:	68 c8 18 02 c0       	push   0xc00218c8
c000d866:	e8 0e 3b 00 00       	call   c0011379 <KePanic(char const*)>
c000d86b:	83 c8 ff             	or     eax,0xffffffff
c000d86e:	83 c4 1c             	add    esp,0x1c
c000d871:	c3                   	ret    

c000d872 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000d872:	53                   	push   ebx
c000d873:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d877:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d87b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d87f:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000d885:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000d88b:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000d891:	77 10                	ja     c000d8a3 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000d893:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000d899:	89 d3                	mov    ebx,edx
c000d89b:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000d8a1:	72 05                	jb     c000d8a8 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000d8a3:	83 c8 ff             	or     eax,0xffffffff
c000d8a6:	89 c2                	mov    edx,eax
c000d8a8:	5b                   	pop    ebx
c000d8a9:	c3                   	ret    

c000d8aa <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000d8aa:	56                   	push   esi
c000d8ab:	83 c8 ff             	or     eax,0xffffffff
c000d8ae:	53                   	push   ebx
c000d8af:	89 c2                	mov    edx,eax
c000d8b1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d8b5:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d8b9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d8bd:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d8c3:	77 27                	ja     c000d8ec <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d8c5:	89 d8                	mov    eax,ebx
c000d8c7:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000d8cd:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000d8d3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d8d8:	89 c2                	mov    edx,eax
c000d8da:	73 10                	jae    c000d8ec <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d8dc:	89 c8                	mov    eax,ecx
c000d8de:	89 da                	mov    edx,ebx
c000d8e0:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000d8e6:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000d8ec:	5b                   	pop    ebx
c000d8ed:	5e                   	pop    esi
c000d8ee:	c3                   	ret    
c000d8ef:	90                   	nop

c000d8f0 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000d8f0:	83 ec 1c             	sub    esp,0x1c
c000d8f3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d8f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d8fb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d8ff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d903:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d907:	89 04 24             	mov    DWORD PTR [esp],eax
c000d90a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d90e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d912:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d916:	83 ec 08             	sub    esp,0x8
c000d919:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d91d:	50                   	push   eax
c000d91e:	e8 bf ef ff ff       	call   c000c8e2 <Device::Device(char const*)>
c000d923:	83 c4 10             	add    esp,0x10
c000d926:	ba 14 19 02 c0       	mov    edx,0xc0021914
c000d92b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d92f:	89 10                	mov    DWORD PTR [eax],edx
c000d931:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d935:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d93c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d940:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000d947:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d94b:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d952:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d956:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000d960:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d964:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d968:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d96c:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000d972:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000d978:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d97c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000d97f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d983:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000d989:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000d98f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d993:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d997:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000d99d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9a1:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d9ab:	90                   	nop
c000d9ac:	83 c4 1c             	add    esp,0x1c
c000d9af:	c3                   	ret    

c000d9b0 <LogicalDisk::assignDriveLetter()>:
c000d9b0:	55                   	push   ebp
c000d9b1:	57                   	push   edi
c000d9b2:	56                   	push   esi
c000d9b3:	53                   	push   ebx
c000d9b4:	83 ec 14             	sub    esp,0x14
c000d9b7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d9bb:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000d9c1:	b0 41                	mov    al,0x41
c000d9c3:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000d9c9:	84 d2                	test   dl,dl
c000d9cb:	75 02                	jne    c000d9cf <LogicalDisk::assignDriveLetter()+0x1f>
c000d9cd:	b0 43                	mov    al,0x43
c000d9cf:	8b 3d 60 88 02 c0    	mov    edi,DWORD PTR ds:0xc0028860
c000d9d5:	0f b6 ca             	movzx  ecx,dl
c000d9d8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000d9dc:	0f be e8             	movsx  ebp,al
c000d9df:	8b 3d 64 88 02 c0    	mov    edi,DWORD PTR ds:0xc0028864
c000d9e5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000d9e9:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000d9ed:	3c 43                	cmp    al,0x43
c000d9ef:	75 10                	jne    c000da01 <LogicalDisk::assignDriveLetter()+0x51>
c000d9f1:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000d9f8:	75 5a                	jne    c000da54 <LogicalDisk::assignDriveLetter()+0xa4>
c000d9fa:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000d9ff:	75 53                	jne    c000da54 <LogicalDisk::assignDriveLetter()+0xa4>
c000da01:	8d 75 bf             	lea    esi,[ebp-0x41]
c000da04:	ba 01 00 00 00       	mov    edx,0x1
c000da09:	89 34 24             	mov    DWORD PTR [esp],esi
c000da0c:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000da0f:	d3 e2                	shl    edx,cl
c000da11:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000da15:	89 d7                	mov    edi,edx
c000da17:	89 d6                	mov    esi,edx
c000da19:	c1 ff 1f             	sar    edi,0x1f
c000da1c:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000da20:	21 f9                	and    ecx,edi
c000da22:	09 d1                	or     ecx,edx
c000da24:	75 2e                	jne    c000da54 <LogicalDisk::assignDriveLetter()+0xa4>
c000da26:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000da2a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000da2e:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000da34:	09 f2                	or     edx,esi
c000da36:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000da39:	89 15 60 88 02 c0    	mov    DWORD PTR ds:0xc0028860,edx
c000da3f:	89 1c b5 80 88 02 c0 	mov    DWORD PTR [esi*4-0x3ffd7780],ebx
c000da46:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000da4a:	09 fa                	or     edx,edi
c000da4c:	89 15 64 88 02 c0    	mov    DWORD PTR ds:0xc0028864,edx
c000da52:	eb 0d                	jmp    c000da61 <LogicalDisk::assignDriveLetter()+0xb1>
c000da54:	8d 50 01             	lea    edx,[eax+0x1]
c000da57:	45                   	inc    ebp
c000da58:	88 d0                	mov    al,dl
c000da5a:	80 fa 5b             	cmp    dl,0x5b
c000da5d:	75 8e                	jne    c000d9ed <LogicalDisk::assignDriveLetter()+0x3d>
c000da5f:	31 c0                	xor    eax,eax
c000da61:	83 c4 14             	add    esp,0x14
c000da64:	5b                   	pop    ebx
c000da65:	5e                   	pop    esi
c000da66:	5f                   	pop    edi
c000da67:	5d                   	pop    ebp
c000da68:	c3                   	ret    
c000da69:	90                   	nop

c000da6a <LogicalDisk::mount()>:
c000da6a:	56                   	push   esi
c000da6b:	53                   	push   ebx
c000da6c:	53                   	push   ebx
c000da6d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000da71:	8b 1d 04 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026404
c000da77:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000da81:	85 db                	test   ebx,ebx
c000da83:	74 27                	je     c000daac <LogicalDisk::mount()+0x42>
c000da85:	51                   	push   ecx
c000da86:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000da8d:	8b 13                	mov    edx,DWORD PTR [ebx]
c000da8f:	83 e8 41             	sub    eax,0x41
c000da92:	50                   	push   eax
c000da93:	56                   	push   esi
c000da94:	53                   	push   ebx
c000da95:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000da98:	83 c4 10             	add    esp,0x10
c000da9b:	84 c0                	test   al,al
c000da9d:	74 08                	je     c000daa7 <LogicalDisk::mount()+0x3d>
c000da9f:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000daa5:	eb 07                	jmp    c000daae <LogicalDisk::mount()+0x44>
c000daa7:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000daaa:	eb d5                	jmp    c000da81 <LogicalDisk::mount()+0x17>
c000daac:	31 c0                	xor    eax,eax
c000daae:	5a                   	pop    edx
c000daaf:	5b                   	pop    ebx
c000dab0:	5e                   	pop    esi
c000dab1:	c3                   	ret    

c000dab2 <LogicalDisk::unmount()>:
c000dab2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dab6:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000dac0:	c3                   	ret    
c000dac1:	90                   	nop

c000dac2 <LogicalDisk::eject()>:
c000dac2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dac6:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000dacc:	8b 10                	mov    edx,DWORD PTR [eax]
c000dace:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dad2:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000dad5:	90                   	nop

c000dad6 <LogicalDisk::unassignDriveLetter()>:
c000dad6:	57                   	push   edi
c000dad7:	56                   	push   esi
c000dad8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000dadc:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000dae3:	85 c9                	test   ecx,ecx
c000dae5:	75 0f                	jne    c000daf6 <LogicalDisk::unassignDriveLetter()+0x20>
c000dae7:	c7 44 24 0c ec 18 02 c0 	mov    DWORD PTR [esp+0xc],0xc00218ec
c000daef:	5e                   	pop    esi
c000daf0:	5f                   	pop    edi
c000daf1:	e9 83 38 00 00       	jmp    c0011379 <KePanic(char const*)>
c000daf6:	83 e9 41             	sub    ecx,0x41
c000daf9:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000db00:	b8 01 00 00 00       	mov    eax,0x1
c000db05:	c7 04 8d 80 88 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd7780],0x0
c000db10:	d3 e0                	shl    eax,cl
c000db12:	89 c7                	mov    edi,eax
c000db14:	f7 d0                	not    eax
c000db16:	c1 ff 1f             	sar    edi,0x1f
c000db19:	21 05 60 88 02 c0    	and    DWORD PTR ds:0xc0028860,eax
c000db1f:	89 fe                	mov    esi,edi
c000db21:	f7 d6                	not    esi
c000db23:	21 35 64 88 02 c0    	and    DWORD PTR ds:0xc0028864,esi
c000db29:	5e                   	pop    esi
c000db2a:	5f                   	pop    edi
c000db2b:	c3                   	ret    

c000db2c <LogicalDisk::read(unsigned long long, int, void*)>:
c000db2c:	57                   	push   edi
c000db2d:	56                   	push   esi
c000db2e:	53                   	push   ebx
c000db2f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000db33:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000db37:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000db3b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000db3f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000db45:	77 41                	ja     c000db88 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000db47:	99                   	cdq    
c000db48:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000db4e:	01 c8                	add    eax,ecx
c000db50:	11 da                	adc    edx,ebx
c000db52:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000db58:	19 d7                	sbb    edi,edx
c000db5a:	72 33                	jb     c000db8f <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000db5c:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000db62:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000db68:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000db6c:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000db70:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000db76:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000db7c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000db80:	5b                   	pop    ebx
c000db81:	5e                   	pop    esi
c000db82:	5f                   	pop    edi
c000db83:	e9 c6 0a 00 00       	jmp    c000e64e <VCache::read(unsigned long long, int, void*)>
c000db88:	b8 05 00 00 00       	mov    eax,0x5
c000db8d:	eb 05                	jmp    c000db94 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000db8f:	b8 07 00 00 00       	mov    eax,0x7
c000db94:	5b                   	pop    ebx
c000db95:	5e                   	pop    esi
c000db96:	5f                   	pop    edi
c000db97:	c3                   	ret    

c000db98 <LogicalDisk::write(unsigned long long, int, void*)>:
c000db98:	57                   	push   edi
c000db99:	56                   	push   esi
c000db9a:	53                   	push   ebx
c000db9b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000db9f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dba3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000dba7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000dbab:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000dbb1:	77 41                	ja     c000dbf4 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000dbb3:	99                   	cdq    
c000dbb4:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000dbba:	01 c8                	add    eax,ecx
c000dbbc:	11 da                	adc    edx,ebx
c000dbbe:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000dbc4:	19 d7                	sbb    edi,edx
c000dbc6:	72 33                	jb     c000dbfb <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000dbc8:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000dbce:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000dbd4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000dbd8:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000dbdc:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000dbe2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000dbe8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dbec:	5b                   	pop    ebx
c000dbed:	5e                   	pop    esi
c000dbee:	5f                   	pop    edi
c000dbef:	e9 6c 09 00 00       	jmp    c000e560 <VCache::write(unsigned long long, int, void*)>
c000dbf4:	b8 05 00 00 00       	mov    eax,0x5
c000dbf9:	eb 05                	jmp    c000dc00 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000dbfb:	b8 07 00 00 00       	mov    eax,0x7
c000dc00:	5b                   	pop    ebx
c000dc01:	5e                   	pop    esi
c000dc02:	5f                   	pop    edi
c000dc03:	c3                   	ret    

c000dc04 <Mouse::Mouse(char const*)>:
c000dc04:	83 ec 0c             	sub    esp,0xc
c000dc07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc0b:	83 ec 08             	sub    esp,0x8
c000dc0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc12:	50                   	push   eax
c000dc13:	e8 ca ec ff ff       	call   c000c8e2 <Device::Device(char const*)>
c000dc18:	83 c4 10             	add    esp,0x10
c000dc1b:	ba 40 19 02 c0       	mov    edx,0xc0021940
c000dc20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc24:	89 10                	mov    DWORD PTR [eax],edx
c000dc26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc2a:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000dc34:	90                   	nop
c000dc35:	83 c4 0c             	add    esp,0xc
c000dc38:	c3                   	ret    
c000dc39:	90                   	nop
c000dc3a:	66 90                	xchg   ax,ax

c000dc3c <Mouse::~Mouse()>:
c000dc3c:	83 ec 0c             	sub    esp,0xc
c000dc3f:	ba 40 19 02 c0       	mov    edx,0xc0021940
c000dc44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc48:	89 10                	mov    DWORD PTR [eax],edx
c000dc4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc4e:	83 ec 0c             	sub    esp,0xc
c000dc51:	50                   	push   eax
c000dc52:	e8 f5 e9 ff ff       	call   c000c64c <Device::~Device()>
c000dc57:	83 c4 10             	add    esp,0x10
c000dc5a:	90                   	nop
c000dc5b:	83 c4 0c             	add    esp,0xc
c000dc5e:	c3                   	ret    
c000dc5f:	90                   	nop

c000dc60 <Mouse::~Mouse()>:
c000dc60:	83 ec 0c             	sub    esp,0xc
c000dc63:	83 ec 0c             	sub    esp,0xc
c000dc66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc6a:	e8 cd ff ff ff       	call   c000dc3c <Mouse::~Mouse()>
c000dc6f:	83 c4 10             	add    esp,0x10
c000dc72:	83 ec 08             	sub    esp,0x8
c000dc75:	68 58 01 00 00       	push   0x158
c000dc7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc7e:	e8 95 cb ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000dc83:	83 c4 10             	add    esp,0x10
c000dc86:	83 c4 0c             	add    esp,0xc
c000dc89:	c3                   	ret    

c000dc8a <NIC::getMAC()>:
c000dc8a:	31 c0                	xor    eax,eax
c000dc8c:	31 d2                	xor    edx,edx
c000dc8e:	c3                   	ret    
c000dc8f:	90                   	nop

c000dc90 <NIC::write(int, unsigned char*, int*)>:
c000dc90:	b8 01 00 00 00       	mov    eax,0x1
c000dc95:	c3                   	ret    

c000dc96 <NIC::NIC(char const*)>:
c000dc96:	83 ec 0c             	sub    esp,0xc
c000dc99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc9d:	83 ec 08             	sub    esp,0x8
c000dca0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dca4:	50                   	push   eax
c000dca5:	e8 38 ec ff ff       	call   c000c8e2 <Device::Device(char const*)>
c000dcaa:	83 c4 10             	add    esp,0x10
c000dcad:	ba 6c 19 02 c0       	mov    edx,0xc002196c
c000dcb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dcb6:	89 10                	mov    DWORD PTR [eax],edx
c000dcb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dcbc:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000dcc6:	90                   	nop
c000dcc7:	83 c4 0c             	add    esp,0xc
c000dcca:	c3                   	ret    
c000dccb:	90                   	nop

c000dccc <NIC::~NIC()>:
c000dccc:	83 ec 0c             	sub    esp,0xc
c000dccf:	ba 6c 19 02 c0       	mov    edx,0xc002196c
c000dcd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dcd8:	89 10                	mov    DWORD PTR [eax],edx
c000dcda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dcde:	83 ec 0c             	sub    esp,0xc
c000dce1:	50                   	push   eax
c000dce2:	e8 65 e9 ff ff       	call   c000c64c <Device::~Device()>
c000dce7:	83 c4 10             	add    esp,0x10
c000dcea:	90                   	nop
c000dceb:	83 c4 0c             	add    esp,0xc
c000dcee:	c3                   	ret    
c000dcef:	90                   	nop

c000dcf0 <NIC::~NIC()>:
c000dcf0:	83 ec 0c             	sub    esp,0xc
c000dcf3:	83 ec 0c             	sub    esp,0xc
c000dcf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dcfa:	e8 cd ff ff ff       	call   c000dccc <NIC::~NIC()>
c000dcff:	83 c4 10             	add    esp,0x10
c000dd02:	83 ec 08             	sub    esp,0x8
c000dd05:	68 58 01 00 00       	push   0x158
c000dd0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd0e:	e8 05 cb ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000dd13:	83 c4 10             	add    esp,0x10
c000dd16:	83 c4 0c             	add    esp,0xc
c000dd19:	c3                   	ret    

c000dd1a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000dd1a:	55                   	push   ebp
c000dd1b:	57                   	push   edi
c000dd1c:	56                   	push   esi
c000dd1d:	53                   	push   ebx
c000dd1e:	81 ec 28 01 00 00    	sub    esp,0x128
c000dd24:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000dd2b:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000dd32:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000dd39:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000dd40:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dd44:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dd48:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000dd4f:	e8 8a ec ff ff       	call   c000c9de <Device::getName()>
c000dd54:	5a                   	pop    edx
c000dd55:	59                   	pop    ecx
c000dd56:	50                   	push   eax
c000dd57:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000dd5b:	55                   	push   ebp
c000dd5c:	e8 df 28 ff ff       	call   c0000640 <strcpy>
c000dd61:	5b                   	pop    ebx
c000dd62:	58                   	pop    eax
c000dd63:	68 98 19 02 c0       	push   0xc0021998
c000dd68:	55                   	push   ebp
c000dd69:	e8 d2 2a ff ff       	call   c0000840 <strcat>
c000dd6e:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000dd75:	e8 3c 9d ff ff       	call   c0007ab6 <malloc>
c000dd7a:	83 c4 0c             	add    esp,0xc
c000dd7d:	89 c3                	mov    ebx,eax
c000dd7f:	57                   	push   edi
c000dd80:	56                   	push   esi
c000dd81:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dd85:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dd89:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000dd90:	55                   	push   ebp
c000dd91:	50                   	push   eax
c000dd92:	e8 59 fb ff ff       	call   c000d8f0 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000dd97:	83 c4 14             	add    esp,0x14
c000dd9a:	53                   	push   ebx
c000dd9b:	e8 10 fc ff ff       	call   c000d9b0 <LogicalDisk::assignDriveLetter()>
c000dda0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000dda3:	e8 c2 fc ff ff       	call   c000da6a <LogicalDisk::mount()>
c000dda8:	58                   	pop    eax
c000dda9:	5a                   	pop    edx
c000ddaa:	53                   	push   ebx
c000ddab:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000ddb2:	e8 93 e9 ff ff       	call   c000c74a <Device::addChild(Device*)>
c000ddb7:	81 c4 2c 01 00 00    	add    esp,0x12c
c000ddbd:	5b                   	pop    ebx
c000ddbe:	5e                   	pop    esi
c000ddbf:	5f                   	pop    edi
c000ddc0:	5d                   	pop    ebp
c000ddc1:	c3                   	ret    

c000ddc2 <createPartitionsForDisk(PhysicalDisk*)>:
c000ddc2:	55                   	push   ebp
c000ddc3:	57                   	push   edi
c000ddc4:	56                   	push   esi
c000ddc5:	53                   	push   ebx
c000ddc6:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000ddcc:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000ddd3:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000ddd9:	3d 00 02 00 00       	cmp    eax,0x200
c000ddde:	74 27                	je     c000de07 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000dde0:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000dde6:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000ddec:	83 ec 10             	sub    esp,0x10
c000ddef:	0f a4 f7 0a          	shld   edi,esi,0xa
c000ddf3:	99                   	cdq    
c000ddf4:	c1 e6 0a             	shl    esi,0xa
c000ddf7:	52                   	push   edx
c000ddf8:	89 fd                	mov    ebp,edi
c000ddfa:	50                   	push   eax
c000ddfb:	55                   	push   ebp
c000ddfc:	56                   	push   esi
c000ddfd:	e8 ae 15 01 00       	call   c001f3b0 <__udivdi3>
c000de02:	e9 b9 00 00 00       	jmp    c000dec0 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000de07:	83 ec 0c             	sub    esp,0xc
c000de0a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000de0c:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000de10:	56                   	push   esi
c000de11:	6a 01                	push   0x1
c000de13:	6a 00                	push   0x0
c000de15:	6a 00                	push   0x0
c000de17:	53                   	push   ebx
c000de18:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000de1b:	83 c4 20             	add    esp,0x20
c000de1e:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000de26:	75 0a                	jne    c000de32 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000de28:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000de30:	74 2c                	je     c000de5e <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000de32:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000de38:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000de3e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000de44:	83 ec 10             	sub    esp,0x10
c000de47:	0f a4 c2 0a          	shld   edx,eax,0xa
c000de4b:	89 f7                	mov    edi,esi
c000de4d:	c1 e0 0a             	shl    eax,0xa
c000de50:	c1 ff 1f             	sar    edi,0x1f
c000de53:	57                   	push   edi
c000de54:	56                   	push   esi
c000de55:	52                   	push   edx
c000de56:	50                   	push   eax
c000de57:	e8 54 15 01 00       	call   c001f3b0 <__udivdi3>
c000de5c:	eb 62                	jmp    c000dec0 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000de5e:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000de65:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000de6c:	89 cf                	mov    edi,ecx
c000de6e:	83 e2 7f             	and    edx,0x7f
c000de71:	83 e7 7f             	and    edi,0x7f
c000de74:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000de7b:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000de7e:	83 e0 7f             	and    eax,0x7f
c000de81:	8d 14 01             	lea    edx,[ecx+eax*1]
c000de84:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000de8b:	83 e0 7f             	and    eax,0x7f
c000de8e:	01 d0                	add    eax,edx
c000de90:	89 c5                	mov    ebp,eax
c000de92:	84 c0                	test   al,al
c000de94:	74 41                	je     c000ded7 <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000de96:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000de9c:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000dea2:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000dea8:	83 ec 10             	sub    esp,0x10
c000deab:	0f a4 c2 0a          	shld   edx,eax,0xa
c000deaf:	89 f7                	mov    edi,esi
c000deb1:	c1 e0 0a             	shl    eax,0xa
c000deb4:	c1 ff 1f             	sar    edi,0x1f
c000deb7:	57                   	push   edi
c000deb8:	56                   	push   esi
c000deb9:	52                   	push   edx
c000deba:	50                   	push   eax
c000debb:	e8 f0 14 01 00       	call   c001f3b0 <__udivdi3>
c000dec0:	83 c4 14             	add    esp,0x14
c000dec3:	52                   	push   edx
c000dec4:	50                   	push   eax
c000dec5:	6a 00                	push   0x0
c000dec7:	6a 00                	push   0x0
c000dec9:	53                   	push   ebx
c000deca:	e8 4b fe ff ff       	call   c000dd1a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000decf:	83 c4 20             	add    esp,0x20
c000ded2:	e9 73 01 00 00       	jmp    c000e04a <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000ded7:	89 f0                	mov    eax,esi
c000ded9:	31 c9                	xor    ecx,ecx
c000dedb:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000dee2:	75 02                	jne    c000dee6 <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000dee4:	89 cd                	mov    ebp,ecx
c000dee6:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000deed:	0f b6 b0 c8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c8]
c000def4:	c1 e2 08             	shl    edx,0x8
c000def7:	c1 e6 10             	shl    esi,0x10
c000defa:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000df02:	09 f2                	or     edx,esi
c000df04:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000df0c:	0f b6 b0 c6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c6]
c000df13:	83 c0 10             	add    eax,0x10
c000df16:	09 f2                	or     edx,esi
c000df18:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000df1f:	c1 e6 18             	shl    esi,0x18
c000df22:	09 f2                	or     edx,esi
c000df24:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000df2b:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000df2f:	c1 e6 10             	shl    esi,0x10
c000df32:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000df39:	c1 e2 08             	shl    edx,0x8
c000df3c:	09 f2                	or     edx,esi
c000df3e:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000df45:	09 f2                	or     edx,esi
c000df47:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000df4e:	c1 e6 18             	shl    esi,0x18
c000df51:	09 f2                	or     edx,esi
c000df53:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000df57:	41                   	inc    ecx
c000df58:	83 f9 04             	cmp    ecx,0x4
c000df5b:	0f 85 7a ff ff ff    	jne    c000dedb <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000df61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df65:	83 f0 01             	xor    eax,0x1
c000df68:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000df6c:	75 4f                	jne    c000dfbd <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000df6e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000df72:	83 f0 01             	xor    eax,0x1
c000df75:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000df79:	75 42                	jne    c000dfbd <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000df7b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000df83:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000df8b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000df91:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000df97:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000df9d:	0f a4 c2 0a          	shld   edx,eax,0xa
c000dfa1:	89 f7                	mov    edi,esi
c000dfa3:	c1 e0 0a             	shl    eax,0xa
c000dfa6:	c1 ff 1f             	sar    edi,0x1f
c000dfa9:	57                   	push   edi
c000dfaa:	56                   	push   esi
c000dfab:	52                   	push   edx
c000dfac:	50                   	push   eax
c000dfad:	e8 fe 13 01 00       	call   c001f3b0 <__udivdi3>
c000dfb2:	83 c4 10             	add    esp,0x10
c000dfb5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dfb9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dfbd:	89 e8                	mov    eax,ebp
c000dfbf:	0f b6 e8             	movzx  ebp,al
c000dfc2:	85 ed                	test   ebp,ebp
c000dfc4:	74 50                	je     c000e016 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000dfc6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dfca:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000dfce:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dfd2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000dfd6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfda:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfde:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000dfe2:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000dfe6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dfea:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dfee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dff2:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000dff6:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000dffa:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000dffe:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000e002:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e006:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000e00a:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000e00e:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000e012:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000e016:	31 ed                	xor    ebp,ebp
c000e018:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000e01c:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000e020:	89 f8                	mov    eax,edi
c000e022:	09 f0                	or     eax,esi
c000e024:	74 1e                	je     c000e044 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000e026:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000e02a:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000e02e:	89 d1                	mov    ecx,edx
c000e030:	09 c1                	or     ecx,eax
c000e032:	74 10                	je     c000e044 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000e034:	83 ec 0c             	sub    esp,0xc
c000e037:	57                   	push   edi
c000e038:	56                   	push   esi
c000e039:	52                   	push   edx
c000e03a:	50                   	push   eax
c000e03b:	53                   	push   ebx
c000e03c:	e8 d9 fc ff ff       	call   c000dd1a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000e041:	83 c4 20             	add    esp,0x20
c000e044:	45                   	inc    ebp
c000e045:	83 fd 04             	cmp    ebp,0x4
c000e048:	75 ce                	jne    c000e018 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000e04a:	81 c4 5c 02 00 00    	add    esp,0x25c
c000e050:	5b                   	pop    ebx
c000e051:	5e                   	pop    esi
c000e052:	5f                   	pop    edi
c000e053:	5d                   	pop    ebp
c000e054:	c3                   	ret    
c000e055:	66 90                	xchg   ax,ax
c000e057:	90                   	nop

c000e058 <Serial::Serial(char const*)>:
c000e058:	83 ec 0c             	sub    esp,0xc
c000e05b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e05f:	83 ec 08             	sub    esp,0x8
c000e062:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e066:	50                   	push   eax
c000e067:	e8 76 e8 ff ff       	call   c000c8e2 <Device::Device(char const*)>
c000e06c:	83 c4 10             	add    esp,0x10
c000e06f:	ba ac 19 02 c0       	mov    edx,0xc00219ac
c000e074:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e078:	89 10                	mov    DWORD PTR [eax],edx
c000e07a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e07e:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000e088:	90                   	nop
c000e089:	83 c4 0c             	add    esp,0xc
c000e08c:	c3                   	ret    
c000e08d:	90                   	nop
c000e08e:	66 90                	xchg   ax,ax

c000e090 <Serial::~Serial()>:
c000e090:	83 ec 0c             	sub    esp,0xc
c000e093:	ba ac 19 02 c0       	mov    edx,0xc00219ac
c000e098:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e09c:	89 10                	mov    DWORD PTR [eax],edx
c000e09e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0a2:	83 ec 0c             	sub    esp,0xc
c000e0a5:	50                   	push   eax
c000e0a6:	e8 a1 e5 ff ff       	call   c000c64c <Device::~Device()>
c000e0ab:	83 c4 10             	add    esp,0x10
c000e0ae:	90                   	nop
c000e0af:	83 c4 0c             	add    esp,0xc
c000e0b2:	c3                   	ret    
c000e0b3:	90                   	nop

c000e0b4 <Serial::~Serial()>:
c000e0b4:	83 ec 0c             	sub    esp,0xc
c000e0b7:	83 ec 0c             	sub    esp,0xc
c000e0ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0be:	e8 cd ff ff ff       	call   c000e090 <Serial::~Serial()>
c000e0c3:	83 c4 10             	add    esp,0x10
c000e0c6:	83 ec 08             	sub    esp,0x8
c000e0c9:	68 58 01 00 00       	push   0x158
c000e0ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0d2:	e8 41 c7 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000e0d7:	83 c4 10             	add    esp,0x10
c000e0da:	83 c4 0c             	add    esp,0xc
c000e0dd:	c3                   	ret    
c000e0de:	66 90                	xchg   ax,ax

c000e0e0 <Timer::Timer(char const*)>:
c000e0e0:	83 ec 0c             	sub    esp,0xc
c000e0e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0e7:	83 ec 08             	sub    esp,0x8
c000e0ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0ee:	50                   	push   eax
c000e0ef:	e8 ee e7 ff ff       	call   c000c8e2 <Device::Device(char const*)>
c000e0f4:	83 c4 10             	add    esp,0x10
c000e0f7:	ba f0 19 02 c0       	mov    edx,0xc00219f0
c000e0fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e100:	89 10                	mov    DWORD PTR [eax],edx
c000e102:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e106:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000e110:	90                   	nop
c000e111:	83 c4 0c             	add    esp,0xc
c000e114:	c3                   	ret    
c000e115:	90                   	nop
c000e116:	66 90                	xchg   ax,ax

c000e118 <Timer::~Timer()>:
c000e118:	83 ec 0c             	sub    esp,0xc
c000e11b:	ba f0 19 02 c0       	mov    edx,0xc00219f0
c000e120:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e124:	89 10                	mov    DWORD PTR [eax],edx
c000e126:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e12a:	83 ec 0c             	sub    esp,0xc
c000e12d:	50                   	push   eax
c000e12e:	e8 19 e5 ff ff       	call   c000c64c <Device::~Device()>
c000e133:	83 c4 10             	add    esp,0x10
c000e136:	90                   	nop
c000e137:	83 c4 0c             	add    esp,0xc
c000e13a:	c3                   	ret    
c000e13b:	90                   	nop

c000e13c <Timer::~Timer()>:
c000e13c:	83 ec 0c             	sub    esp,0xc
c000e13f:	83 ec 0c             	sub    esp,0xc
c000e142:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e146:	e8 cd ff ff ff       	call   c000e118 <Timer::~Timer()>
c000e14b:	83 c4 10             	add    esp,0x10
c000e14e:	83 ec 08             	sub    esp,0x8
c000e151:	68 5c 01 00 00       	push   0x15c
c000e156:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e15a:	e8 b9 c6 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000e15f:	83 c4 10             	add    esp,0x10
c000e162:	83 c4 0c             	add    esp,0xc
c000e165:	c3                   	ret    

c000e166 <Timer::read()>:
c000e166:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e16a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e170:	c3                   	ret    

c000e171 <setupTimer(int)>:
c000e171:	53                   	push   ebx
c000e172:	83 ec 14             	sub    esp,0x14
c000e175:	68 5c 01 00 00       	push   0x15c
c000e17a:	e8 37 99 ff ff       	call   c0007ab6 <malloc>
c000e17f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e182:	89 c3                	mov    ebx,eax
c000e184:	e8 8f 0a 01 00       	call   c001ec18 <PIT::PIT()>
c000e189:	58                   	pop    eax
c000e18a:	5a                   	pop    edx
c000e18b:	53                   	push   ebx
c000e18c:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c000e192:	e8 b3 e5 ff ff       	call   c000c74a <Device::addChild(Device*)>
c000e197:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e199:	6a 00                	push   0x0
c000e19b:	6a 00                	push   0x0
c000e19d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e1a1:	53                   	push   ebx
c000e1a2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e1a5:	89 d8                	mov    eax,ebx
c000e1a7:	83 c4 28             	add    esp,0x28
c000e1aa:	5b                   	pop    ebx
c000e1ab:	c3                   	ret    

c000e1ac <timerHandler(unsigned int)>:
c000e1ac:	56                   	push   esi
c000e1ad:	53                   	push   ebx
c000e1ae:	51                   	push   ecx
c000e1af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e1b3:	01 05 ec 88 02 c0    	add    DWORD PTR ds:0xc00288ec,eax
c000e1b9:	80 3d bd 5e 02 c0 00 	cmp    BYTE PTR ds:0xc0025ebd,0x0
c000e1c0:	0f 84 4a 01 00 00    	je     c000e310 <timerHandler(unsigned int)+0x164>
c000e1c6:	fa                   	cli    
c000e1c7:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c000e1cd:	83 ec 0c             	sub    esp,0xc
c000e1d0:	ff 05 c4 96 02 c0    	inc    DWORD PTR ds:0xc00296c4
c000e1d6:	68 d8 96 02 c0       	push   0xc00296d8
c000e1db:	e8 a0 17 01 00       	call   c001f980 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e1e0:	83 c4 10             	add    esp,0x10
c000e1e3:	84 c0                	test   al,al
c000e1e5:	0f 85 a1 00 00 00    	jne    c000e28c <timerHandler(unsigned int)+0xe0>
c000e1eb:	83 ec 0c             	sub    esp,0xc
c000e1ee:	68 d8 96 02 c0       	push   0xc00296d8
c000e1f3:	e8 a4 17 01 00       	call   c001f99c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e1f8:	83 c4 10             	add    esp,0x10
c000e1fb:	89 c6                	mov    esi,eax
c000e1fd:	8d 76 00             	lea    esi,[esi+0x0]
c000e200:	83 ec 0c             	sub    esp,0xc
c000e203:	68 d8 96 02 c0       	push   0xc00296d8
c000e208:	e8 8f 17 01 00       	call   c001f99c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e20d:	c7 04 24 d8 96 02 c0 	mov    DWORD PTR [esp],0xc00296d8
c000e214:	89 c3                	mov    ebx,eax
c000e216:	e8 89 17 01 00       	call   c001f9a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000e21b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000e21e:	83 c4 10             	add    esp,0x10
c000e221:	3b 05 ec 88 02 c0    	cmp    eax,DWORD PTR ds:0xc00288ec
c000e227:	77 23                	ja     c000e24c <timerHandler(unsigned int)+0xa0>
c000e229:	83 ec 0c             	sub    esp,0xc
c000e22c:	53                   	push   ebx
c000e22d:	e8 22 80 00 00       	call   c0016254 <unblockTask(ThreadControlBlock*)>
c000e232:	83 c4 10             	add    esp,0x10
c000e235:	39 de                	cmp    esi,ebx
c000e237:	75 27                	jne    c000e260 <timerHandler(unsigned int)+0xb4>
c000e239:	83 ec 0c             	sub    esp,0xc
c000e23c:	68 d8 96 02 c0       	push   0xc00296d8
c000e241:	e8 56 17 01 00       	call   c001f99c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e246:	89 c6                	mov    esi,eax
c000e248:	eb 12                	jmp    c000e25c <timerHandler(unsigned int)+0xb0>
c000e24a:	66 90                	xchg   ax,ax
c000e24c:	52                   	push   edx
c000e24d:	52                   	push   edx
c000e24e:	53                   	push   ebx
c000e24f:	68 d8 96 02 c0       	push   0xc00296d8
c000e254:	e8 07 18 01 00       	call   c001fa60 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e259:	8d 76 00             	lea    esi,[esi+0x0]
c000e25c:	83 c4 10             	add    esp,0x10
c000e25f:	90                   	nop
c000e260:	83 ec 0c             	sub    esp,0xc
c000e263:	68 d8 96 02 c0       	push   0xc00296d8
c000e268:	e8 13 17 01 00       	call   c001f980 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e26d:	83 c4 10             	add    esp,0x10
c000e270:	84 c0                	test   al,al
c000e272:	75 18                	jne    c000e28c <timerHandler(unsigned int)+0xe0>
c000e274:	83 ec 0c             	sub    esp,0xc
c000e277:	68 d8 96 02 c0       	push   0xc00296d8
c000e27c:	e8 1b 17 01 00       	call   c001f99c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e281:	83 c4 10             	add    esp,0x10
c000e284:	39 f0                	cmp    eax,esi
c000e286:	0f 85 74 ff ff ff    	jne    c000e200 <timerHandler(unsigned int)+0x54>
c000e28c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e291:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000e295:	74 41                	je     c000e2d8 <timerHandler(unsigned int)+0x12c>
c000e297:	80 3d bc 5e 02 c0 00 	cmp    BYTE PTR ds:0xc0025ebc,0x0
c000e29e:	74 38                	je     c000e2d8 <timerHandler(unsigned int)+0x12c>
c000e2a0:	fa                   	cli    
c000e2a1:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c000e2a7:	a1 ec 88 02 c0       	mov    eax,ds:0xc00288ec
c000e2ac:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e2b2:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000e2b5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e2bb:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000e2be:	72 08                	jb     c000e2c8 <timerHandler(unsigned int)+0x11c>
c000e2c0:	e8 77 7a 00 00       	call   c0015d3c <schedule()>
c000e2c5:	8d 76 00             	lea    esi,[esi+0x0]
c000e2c8:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000e2cd:	48                   	dec    eax
c000e2ce:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000e2d3:	75 03                	jne    c000e2d8 <timerHandler(unsigned int)+0x12c>
c000e2d5:	fb                   	sti    
c000e2d6:	66 90                	xchg   ax,ax
c000e2d8:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c000e2dd:	48                   	dec    eax
c000e2de:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c000e2e3:	75 1b                	jne    c000e300 <timerHandler(unsigned int)+0x154>
c000e2e5:	83 3d c0 96 02 c0 00 	cmp    DWORD PTR ds:0xc00296c0,0x0
c000e2ec:	74 12                	je     c000e300 <timerHandler(unsigned int)+0x154>
c000e2ee:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c000e2f8:	e8 3f 7a 00 00       	call   c0015d3c <schedule()>
c000e2fd:	8d 76 00             	lea    esi,[esi+0x0]
c000e300:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000e305:	48                   	dec    eax
c000e306:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000e30b:	75 03                	jne    c000e310 <timerHandler(unsigned int)+0x164>
c000e30d:	fb                   	sti    
c000e30e:	66 90                	xchg   ax,ax
c000e310:	58                   	pop    eax
c000e311:	5b                   	pop    ebx
c000e312:	5e                   	pop    esi
c000e313:	c3                   	ret    

c000e314 <VCache::VCache(PhysicalDisk*)>:
c000e314:	53                   	push   ebx
c000e315:	83 ec 18             	sub    esp,0x18
c000e318:	ba 20 1a 02 c0       	mov    edx,0xc0021a20
c000e31d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e321:	89 10                	mov    DWORD PTR [eax],edx
c000e323:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e327:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000e32e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e332:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000e339:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e33d:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000e344:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000e34b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e34f:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000e356:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000e35d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e361:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000e368:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e36c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e370:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e374:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000e37b:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000e382:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e386:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e38a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e38e:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000e392:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e396:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e39a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e39e:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e3a5:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000e3ad:	83 ec 0c             	sub    esp,0xc
c000e3b0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e3b4:	e8 fd 96 ff ff       	call   c0007ab6 <malloc>
c000e3b9:	83 c4 10             	add    esp,0x10
c000e3bc:	89 c3                	mov    ebx,eax
c000e3be:	83 ec 0c             	sub    esp,0xc
c000e3c1:	53                   	push   ebx
c000e3c2:	e8 11 77 00 00       	call   c0015ad8 <Mutex::Mutex()>
c000e3c7:	83 c4 10             	add    esp,0x10
c000e3ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3ce:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000e3d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3d5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e3d9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e3dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3e0:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000e3e7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e3eb:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e3f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3f5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e3f8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e3fc:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000e402:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e408:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000e40c:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000e40f:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000e412:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e416:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e41a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e41e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e424:	05 00 02 00 00       	add    eax,0x200
c000e429:	c1 e0 03             	shl    eax,0x3
c000e42c:	83 ec 0c             	sub    esp,0xc
c000e42f:	50                   	push   eax
c000e430:	e8 81 96 ff ff       	call   c0007ab6 <malloc>
c000e435:	83 c4 10             	add    esp,0x10
c000e438:	89 c2                	mov    edx,eax
c000e43a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e43e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000e441:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e445:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e44c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e450:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e454:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e458:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e45e:	89 d0                	mov    eax,edx
c000e460:	c1 e0 02             	shl    eax,0x2
c000e463:	01 d0                	add    eax,edx
c000e465:	c1 e0 04             	shl    eax,0x4
c000e468:	83 ec 0c             	sub    esp,0xc
c000e46b:	50                   	push   eax
c000e46c:	e8 45 96 ff ff       	call   c0007ab6 <malloc>
c000e471:	83 c4 10             	add    esp,0x10
c000e474:	89 c2                	mov    edx,eax
c000e476:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e47a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000e47d:	90                   	nop
c000e47e:	83 c4 18             	add    esp,0x18
c000e481:	5b                   	pop    ebx
c000e482:	c3                   	ret    
c000e483:	90                   	nop

c000e484 <VCache::invalidateReadBuffer()>:
c000e484:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e488:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000e48e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e492:	c3                   	ret    
c000e493:	90                   	nop

c000e494 <VCache::writeWriteBuffer()>:
c000e494:	53                   	push   ebx
c000e495:	83 ec 08             	sub    esp,0x8
c000e498:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e49c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e4a0:	74 1e                	je     c000e4c0 <VCache::writeWriteBuffer()+0x2c>
c000e4a2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e4a5:	83 ec 0c             	sub    esp,0xc
c000e4a8:	8b 10                	mov    edx,DWORD PTR [eax]
c000e4aa:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000e4ad:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000e4b0:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000e4b3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000e4b6:	50                   	push   eax
c000e4b7:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000e4ba:	83 c4 20             	add    esp,0x20
c000e4bd:	8d 76 00             	lea    esi,[esi+0x0]
c000e4c0:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e4c7:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000e4ce:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000e4d2:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000e4d9:	83 c4 08             	add    esp,0x8
c000e4dc:	5b                   	pop    ebx
c000e4dd:	c3                   	ret    
c000e4de:	66 90                	xchg   ax,ax

c000e4e0 <VCache::~VCache()>:
c000e4e0:	83 ec 0c             	sub    esp,0xc
c000e4e3:	ba 20 1a 02 c0       	mov    edx,0xc0021a20
c000e4e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4ec:	89 10                	mov    DWORD PTR [eax],edx
c000e4ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4f2:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000e4f5:	0f b6 c0             	movzx  eax,al
c000e4f8:	85 c0                	test   eax,eax
c000e4fa:	74 10                	je     c000e50c <VCache::~VCache()+0x2c>
c000e4fc:	83 ec 0c             	sub    esp,0xc
c000e4ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e503:	e8 8c ff ff ff       	call   c000e494 <VCache::writeWriteBuffer()>
c000e508:	83 c4 10             	add    esp,0x10
c000e50b:	90                   	nop
c000e50c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e510:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000e513:	83 ec 0c             	sub    esp,0xc
c000e516:	50                   	push   eax
c000e517:	e8 aa 95 ff ff       	call   c0007ac6 <free>
c000e51c:	83 c4 10             	add    esp,0x10
c000e51f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e523:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000e526:	83 ec 0c             	sub    esp,0xc
c000e529:	50                   	push   eax
c000e52a:	e8 97 95 ff ff       	call   c0007ac6 <free>
c000e52f:	83 c4 10             	add    esp,0x10
c000e532:	90                   	nop
c000e533:	83 c4 0c             	add    esp,0xc
c000e536:	c3                   	ret    
c000e537:	90                   	nop

c000e538 <VCache::~VCache()>:
c000e538:	83 ec 0c             	sub    esp,0xc
c000e53b:	83 ec 0c             	sub    esp,0xc
c000e53e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e542:	e8 99 ff ff ff       	call   c000e4e0 <VCache::~VCache()>
c000e547:	83 c4 10             	add    esp,0x10
c000e54a:	83 ec 08             	sub    esp,0x8
c000e54d:	6a 44                	push   0x44
c000e54f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e553:	e8 c0 c2 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000e558:	83 c4 10             	add    esp,0x10
c000e55b:	83 c4 0c             	add    esp,0xc
c000e55e:	c3                   	ret    
c000e55f:	90                   	nop

c000e560 <VCache::write(unsigned long long, int, void*)>:
c000e560:	55                   	push   ebp
c000e561:	57                   	push   edi
c000e562:	56                   	push   esi
c000e563:	53                   	push   ebx
c000e564:	83 ec 1c             	sub    esp,0x1c
c000e567:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e56b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e56f:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e573:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e577:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e57b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000e57f:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000e583:	74 07                	je     c000e58c <VCache::write(unsigned long long, int, void*)+0x2c>
c000e585:	53                   	push   ebx
c000e586:	e8 f9 fe ff ff       	call   c000e484 <VCache::invalidateReadBuffer()>
c000e58b:	58                   	pop    eax
c000e58c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e590:	74 62                	je     c000e5f4 <VCache::write(unsigned long long, int, void*)+0x94>
c000e592:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e595:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e599:	99                   	cdq    
c000e59a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e59e:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000e5a1:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000e5a4:	31 c1                	xor    ecx,eax
c000e5a6:	89 d0                	mov    eax,edx
c000e5a8:	89 ca                	mov    edx,ecx
c000e5aa:	31 e8                	xor    eax,ebp
c000e5ac:	09 c2                	or     edx,eax
c000e5ae:	75 38                	jne    c000e5e8 <VCache::write(unsigned long long, int, void*)+0x88>
c000e5b0:	83 ff 01             	cmp    edi,0x1
c000e5b3:	75 33                	jne    c000e5e8 <VCache::write(unsigned long long, int, void*)+0x88>
c000e5b5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e5b8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e5bc:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e5c2:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000e5c5:	0f af c8             	imul   ecx,eax
c000e5c8:	01 cf                	add    edi,ecx
c000e5ca:	89 c1                	mov    ecx,eax
c000e5cc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e5ce:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e5d1:	40                   	inc    eax
c000e5d2:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000e5d5:	83 f8 50             	cmp    eax,0x50
c000e5d8:	75 6a                	jne    c000e644 <VCache::write(unsigned long long, int, void*)+0xe4>
c000e5da:	83 ec 0c             	sub    esp,0xc
c000e5dd:	53                   	push   ebx
c000e5de:	e8 b1 fe ff ff       	call   c000e494 <VCache::writeWriteBuffer()>
c000e5e3:	83 c4 10             	add    esp,0x10
c000e5e6:	eb 5c                	jmp    c000e644 <VCache::write(unsigned long long, int, void*)+0xe4>
c000e5e8:	83 ec 0c             	sub    esp,0xc
c000e5eb:	53                   	push   ebx
c000e5ec:	e8 a3 fe ff ff       	call   c000e494 <VCache::writeWriteBuffer()>
c000e5f1:	83 c4 10             	add    esp,0x10
c000e5f4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e5f7:	83 ff 4f             	cmp    edi,0x4f
c000e5fa:	7f 20                	jg     c000e61c <VCache::write(unsigned long long, int, void*)+0xbc>
c000e5fc:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000e5ff:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e603:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000e606:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
c000e609:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000e60d:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000e610:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e616:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e618:	eb 2a                	jmp    c000e644 <VCache::write(unsigned long long, int, void*)+0xe4>
c000e61a:	66 90                	xchg   ax,ax
c000e61c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e61e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000e622:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000e626:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e62a:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000e62e:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000e632:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e636:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000e639:	83 c4 1c             	add    esp,0x1c
c000e63c:	5b                   	pop    ebx
c000e63d:	5e                   	pop    esi
c000e63e:	5f                   	pop    edi
c000e63f:	5d                   	pop    ebp
c000e640:	ff e0                	jmp    eax
c000e642:	66 90                	xchg   ax,ax
c000e644:	83 c4 1c             	add    esp,0x1c
c000e647:	31 c0                	xor    eax,eax
c000e649:	5b                   	pop    ebx
c000e64a:	5e                   	pop    esi
c000e64b:	5f                   	pop    edi
c000e64c:	5d                   	pop    ebp
c000e64d:	c3                   	ret    

c000e64e <VCache::read(unsigned long long, int, void*)>:
c000e64e:	55                   	push   ebp
c000e64f:	57                   	push   edi
c000e650:	56                   	push   esi
c000e651:	53                   	push   ebx
c000e652:	83 ec 1c             	sub    esp,0x1c
c000e655:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e659:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e65d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000e661:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e665:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e669:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e66d:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000e671:	74 0d                	je     c000e680 <VCache::read(unsigned long long, int, void*)+0x32>
c000e673:	83 ec 0c             	sub    esp,0xc
c000e676:	57                   	push   edi
c000e677:	e8 18 fe ff ff       	call   c000e494 <VCache::writeWriteBuffer()>
c000e67c:	83 c4 10             	add    esp,0x10
c000e67f:	90                   	nop
c000e680:	83 fd 01             	cmp    ebp,0x1
c000e683:	0f 85 93 00 00 00    	jne    c000e71c <VCache::read(unsigned long long, int, void*)+0xce>
c000e689:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e68c:	89 04 24             	mov    DWORD PTR [esp],eax
c000e68f:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000e696:	0f 85 80 00 00 00    	jne    c000e71c <VCache::read(unsigned long long, int, void*)+0xce>
c000e69c:	8b 6f 40             	mov    ebp,DWORD PTR [edi+0x40]
c000e69f:	89 e9                	mov    ecx,ebp
c000e6a1:	f7 d9                	neg    ecx
c000e6a3:	89 c8                	mov    eax,ecx
c000e6a5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000e6a9:	c1 f8 1f             	sar    eax,0x1f
c000e6ac:	21 d9                	and    ecx,ebx
c000e6ae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e6b2:	89 c8                	mov    eax,ecx
c000e6b4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e6b8:	21 f1                	and    ecx,esi
c000e6ba:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000e6be:	89 ca                	mov    edx,ecx
c000e6c0:	74 2e                	je     c000e6f0 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e6c2:	39 4f 34             	cmp    DWORD PTR [edi+0x34],ecx
c000e6c5:	75 29                	jne    c000e6f0 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e6c7:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000e6ca:	75 24                	jne    c000e6f0 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e6cc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e6cf:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e6d5:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000e6d8:	8d 70 ff             	lea    esi,[eax-0x1]
c000e6db:	21 f3                	and    ebx,esi
c000e6dd:	0f af d9             	imul   ebx,ecx
c000e6e0:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000e6e3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000e6e7:	89 de                	mov    esi,ebx
c000e6e9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e6eb:	31 c0                	xor    eax,eax
c000e6ed:	eb 61                	jmp    c000e750 <VCache::read(unsigned long long, int, void*)+0x102>
c000e6ef:	90                   	nop
c000e6f0:	83 ec 0c             	sub    esp,0xc
c000e6f3:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000e6f7:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000e6fb:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000e6fe:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000e701:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e703:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000e706:	55                   	push   ebp
c000e707:	52                   	push   edx
c000e708:	50                   	push   eax
c000e709:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e70d:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000e710:	83 c4 20             	add    esp,0x20
c000e713:	85 c0                	test   eax,eax
c000e715:	75 39                	jne    c000e750 <VCache::read(unsigned long long, int, void*)+0x102>
c000e717:	eb b3                	jmp    c000e6cc <VCache::read(unsigned long long, int, void*)+0x7e>
c000e719:	8d 76 00             	lea    esi,[esi+0x0]
c000e71c:	83 ec 0c             	sub    esp,0xc
c000e71f:	57                   	push   edi
c000e720:	e8 5f fd ff ff       	call   c000e484 <VCache::invalidateReadBuffer()>
c000e725:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e728:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e72c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e72e:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000e732:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000e736:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000e73a:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000e73e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e742:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000e745:	83 c4 2c             	add    esp,0x2c
c000e748:	5b                   	pop    ebx
c000e749:	5e                   	pop    esi
c000e74a:	5f                   	pop    edi
c000e74b:	5d                   	pop    ebp
c000e74c:	ff e0                	jmp    eax
c000e74e:	66 90                	xchg   ax,ax
c000e750:	83 c4 1c             	add    esp,0x1c
c000e753:	5b                   	pop    ebx
c000e754:	5e                   	pop    esi
c000e755:	5f                   	pop    edi
c000e756:	5d                   	pop    ebp
c000e757:	c3                   	ret    

c000e758 <Video::putrect(int, int, int, int, unsigned int)>:
c000e758:	55                   	push   ebp
c000e759:	57                   	push   edi
c000e75a:	56                   	push   esi
c000e75b:	53                   	push   ebx
c000e75c:	83 ec 1c             	sub    esp,0x1c
c000e75f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e763:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e767:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000e76b:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000e76f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e773:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e777:	01 df                	add    edi,ebx
c000e779:	39 fb                	cmp    ebx,edi
c000e77b:	7d 1f                	jge    c000e79c <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000e77d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e781:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000e785:	7d 12                	jge    c000e799 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000e787:	8b 16                	mov    edx,DWORD PTR [esi]
c000e789:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000e78d:	53                   	push   ebx
c000e78e:	55                   	push   ebp
c000e78f:	45                   	inc    ebp
c000e790:	56                   	push   esi
c000e791:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000e794:	83 c4 10             	add    esp,0x10
c000e797:	eb e8                	jmp    c000e781 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000e799:	43                   	inc    ebx
c000e79a:	eb dd                	jmp    c000e779 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000e79c:	83 c4 1c             	add    esp,0x1c
c000e79f:	5b                   	pop    ebx
c000e7a0:	5e                   	pop    esi
c000e7a1:	5f                   	pop    edi
c000e7a2:	5d                   	pop    ebp
c000e7a3:	c3                   	ret    

c000e7a4 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000e7a4:	55                   	push   ebp
c000e7a5:	57                   	push   edi
c000e7a6:	31 ff                	xor    edi,edi
c000e7a8:	56                   	push   esi
c000e7a9:	53                   	push   ebx
c000e7aa:	83 ec 1c             	sub    esp,0x1c
c000e7ad:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000e7b1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000e7b5:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000e7bc:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000e7c1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e7c5:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000e7c9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e7cd:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000e7d0:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e7d4:	01 f9                	add    ecx,edi
c000e7d6:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000e7da:	7d 2f                	jge    c000e80b <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000e7dc:	31 f6                	xor    esi,esi
c000e7de:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e7e2:	01 f2                	add    edx,esi
c000e7e4:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000e7e8:	7d 1a                	jge    c000e804 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000e7ea:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e7ed:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000e7f0:	46                   	inc    esi
c000e7f1:	51                   	push   ecx
c000e7f2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000e7f6:	52                   	push   edx
c000e7f7:	55                   	push   ebp
c000e7f8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e7fb:	83 c4 10             	add    esp,0x10
c000e7fe:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e802:	eb da                	jmp    c000e7de <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000e804:	47                   	inc    edi
c000e805:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000e809:	eb c5                	jmp    c000e7d0 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000e80b:	83 c4 1c             	add    esp,0x1c
c000e80e:	5b                   	pop    ebx
c000e80f:	5e                   	pop    esi
c000e810:	5f                   	pop    edi
c000e811:	5d                   	pop    ebp
c000e812:	c3                   	ret    
c000e813:	90                   	nop

c000e814 <Video::blit(unsigned int*, int, int, int, int)>:
c000e814:	55                   	push   ebp
c000e815:	57                   	push   edi
c000e816:	56                   	push   esi
c000e817:	53                   	push   ebx
c000e818:	83 ec 1c             	sub    esp,0x1c
c000e81b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e81f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e823:	85 c0                	test   eax,eax
c000e825:	79 02                	jns    c000e829 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000e827:	31 c0                	xor    eax,eax
c000e829:	c1 e0 02             	shl    eax,0x2
c000e82c:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000e830:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e834:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e838:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000e83c:	39 d8                	cmp    eax,ebx
c000e83e:	7e 49                	jle    c000e889 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000e840:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000e846:	7c 41                	jl     c000e889 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000e848:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000e84c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e850:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e854:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000e858:	39 f9                	cmp    ecx,edi
c000e85a:	7e 22                	jle    c000e87e <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000e85c:	83 c5 04             	add    ebp,0x4
c000e85f:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000e865:	7c 14                	jl     c000e87b <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000e867:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e869:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000e86c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000e870:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000e874:	56                   	push   esi
c000e875:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000e878:	83 c4 10             	add    esp,0x10
c000e87b:	47                   	inc    edi
c000e87c:	eb d2                	jmp    c000e850 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000e87e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e882:	43                   	inc    ebx
c000e883:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000e887:	eb ab                	jmp    c000e834 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000e889:	83 c4 1c             	add    esp,0x1c
c000e88c:	5b                   	pop    ebx
c000e88d:	5e                   	pop    esi
c000e88e:	5f                   	pop    edi
c000e88f:	5d                   	pop    ebp
c000e890:	c3                   	ret    
c000e891:	90                   	nop

c000e892 <Video::clearScreen(unsigned int)>:
c000e892:	57                   	push   edi
c000e893:	56                   	push   esi
c000e894:	53                   	push   ebx
c000e895:	31 db                	xor    ebx,ebx
c000e897:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e89b:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000e8a1:	7e 1f                	jle    c000e8c2 <Video::clearScreen(unsigned int)+0x30>
c000e8a3:	31 ff                	xor    edi,edi
c000e8a5:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000e8ab:	7e 12                	jle    c000e8bf <Video::clearScreen(unsigned int)+0x2d>
c000e8ad:	8b 06                	mov    eax,DWORD PTR [esi]
c000e8af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e8b3:	53                   	push   ebx
c000e8b4:	57                   	push   edi
c000e8b5:	47                   	inc    edi
c000e8b6:	56                   	push   esi
c000e8b7:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e8ba:	83 c4 10             	add    esp,0x10
c000e8bd:	eb e6                	jmp    c000e8a5 <Video::clearScreen(unsigned int)+0x13>
c000e8bf:	43                   	inc    ebx
c000e8c0:	eb d9                	jmp    c000e89b <Video::clearScreen(unsigned int)+0x9>
c000e8c2:	5b                   	pop    ebx
c000e8c3:	5e                   	pop    esi
c000e8c4:	5f                   	pop    edi
c000e8c5:	c3                   	ret    

c000e8c6 <Video::putpixel(int, int, unsigned int)>:
c000e8c6:	c7 44 24 04 28 1a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021a28
c000e8ce:	e9 a6 2a 00 00       	jmp    c0011379 <KePanic(char const*)>
c000e8d3:	90                   	nop

c000e8d4 <Video::readPixelApprox(int, int)>:
c000e8d4:	83 ec 18             	sub    esp,0x18
c000e8d7:	68 49 1a 02 c0       	push   0xc0021a49
c000e8dc:	e8 98 2a 00 00       	call   c0011379 <KePanic(char const*)>
c000e8e1:	31 c0                	xor    eax,eax
c000e8e3:	83 c4 1c             	add    esp,0x1c
c000e8e6:	c3                   	ret    
c000e8e7:	90                   	nop

c000e8e8 <Video::Video(char const*)>:
c000e8e8:	83 ec 0c             	sub    esp,0xc
c000e8eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8ef:	83 ec 08             	sub    esp,0x8
c000e8f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e8f6:	50                   	push   eax
c000e8f7:	e8 e6 df ff ff       	call   c000c8e2 <Device::Device(char const*)>
c000e8fc:	83 c4 10             	add    esp,0x10
c000e8ff:	ba c4 1a 02 c0       	mov    edx,0xc0021ac4
c000e904:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e908:	89 10                	mov    DWORD PTR [eax],edx
c000e90a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e90e:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000e918:	90                   	nop
c000e919:	83 c4 0c             	add    esp,0xc
c000e91c:	c3                   	ret    
c000e91d:	90                   	nop

c000e91e <Video::~Video()>:
c000e91e:	83 ec 0c             	sub    esp,0xc
c000e921:	ba c4 1a 02 c0       	mov    edx,0xc0021ac4
c000e926:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e92a:	89 10                	mov    DWORD PTR [eax],edx
c000e92c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e930:	83 ec 0c             	sub    esp,0xc
c000e933:	50                   	push   eax
c000e934:	e8 13 dd ff ff       	call   c000c64c <Device::~Device()>
c000e939:	83 c4 10             	add    esp,0x10
c000e93c:	90                   	nop
c000e93d:	83 c4 0c             	add    esp,0xc
c000e940:	c3                   	ret    
c000e941:	90                   	nop

c000e942 <Video::~Video()>:
c000e942:	83 ec 0c             	sub    esp,0xc
c000e945:	83 ec 0c             	sub    esp,0xc
c000e948:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e94c:	e8 cd ff ff ff       	call   c000e91e <Video::~Video()>
c000e951:	83 c4 10             	add    esp,0x10
c000e954:	83 ec 08             	sub    esp,0x8
c000e957:	68 64 01 00 00       	push   0x164
c000e95c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e960:	e8 b3 be ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000e965:	83 c4 10             	add    esp,0x10
c000e968:	83 c4 0c             	add    esp,0xc
c000e96b:	c3                   	ret    

c000e96c <Video::isMonochrome()>:
c000e96c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e970:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000e976:	c3                   	ret    
c000e977:	90                   	nop

c000e978 <Video::getWidth()>:
c000e978:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e97c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e982:	c3                   	ret    
c000e983:	90                   	nop

c000e984 <Video::getHeight()>:
c000e984:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e988:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e98e:	c3                   	ret    
c000e98f:	90                   	nop

c000e990 <Video::drawCursor(int, int, unsigned int*, int)>:
c000e990:	55                   	push   ebp
c000e991:	57                   	push   edi
c000e992:	56                   	push   esi
c000e993:	53                   	push   ebx
c000e994:	83 ec 2c             	sub    esp,0x2c
c000e997:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e99b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000e99f:	83 f8 01             	cmp    eax,0x1
c000e9a2:	19 c9                	sbb    ecx,ecx
c000e9a4:	31 db                	xor    ebx,ebx
c000e9a6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000e9aa:	89 cd                	mov    ebp,ecx
c000e9ac:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000e9b4:	f7 d5                	not    ebp
c000e9b6:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000e9bc:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e9c0:	01 d8                	add    eax,ebx
c000e9c2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e9c6:	56                   	push   esi
c000e9c7:	e8 b8 ff ff ff       	call   c000e984 <Video::getHeight()>
c000e9cc:	59                   	pop    ecx
c000e9cd:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000e9d1:	7e 70                	jle    c000ea43 <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000e9d3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e9d7:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000e9db:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000e9de:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e9e2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e9e6:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000e9ed:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e9f1:	89 f8                	mov    eax,edi
c000e9f3:	83 c0 20             	add    eax,0x20
c000e9f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e9fa:	56                   	push   esi
c000e9fb:	e8 78 ff ff ff       	call   c000e978 <Video::getWidth()>
c000ea00:	5a                   	pop    edx
c000ea01:	39 c7                	cmp    edi,eax
c000ea03:	7d 34                	jge    c000ea39 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000ea05:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000ea0a:	74 05                	je     c000ea11 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000ea0c:	8b 06                	mov    eax,DWORD PTR [esi]
c000ea0e:	55                   	push   ebp
c000ea0f:	eb 0d                	jmp    c000ea1e <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000ea11:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000ea16:	74 12                	je     c000ea2a <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000ea18:	8b 06                	mov    eax,DWORD PTR [esi]
c000ea1a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ea1e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ea22:	57                   	push   edi
c000ea23:	56                   	push   esi
c000ea24:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ea27:	83 c4 10             	add    esp,0x10
c000ea2a:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000ea2e:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000ea32:	47                   	inc    edi
c000ea33:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000ea37:	75 c1                	jne    c000e9fa <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000ea39:	43                   	inc    ebx
c000ea3a:	83 fb 20             	cmp    ebx,0x20
c000ea3d:	0f 85 79 ff ff ff    	jne    c000e9bc <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000ea43:	83 c4 2c             	add    esp,0x2c
c000ea46:	5b                   	pop    ebx
c000ea47:	5e                   	pop    esi
c000ea48:	5f                   	pop    edi
c000ea49:	5d                   	pop    ebp
c000ea4a:	c3                   	ret    
c000ea4b:	90                   	nop

c000ea4c <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000ea4c:	55                   	push   ebp
c000ea4d:	57                   	push   edi
c000ea4e:	56                   	push   esi
c000ea4f:	53                   	push   ebx
c000ea50:	83 ec 28             	sub    esp,0x28
c000ea53:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000ea57:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000ea5b:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000ea5f:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000ea63:	c1 e6 08             	shl    esi,0x8
c000ea66:	01 c6                	add    esi,eax
c000ea68:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000ea6c:	c1 e0 08             	shl    eax,0x8
c000ea6f:	01 d0                	add    eax,edx
c000ea71:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ea75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea79:	0f af c6             	imul   eax,esi
c000ea7c:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000ea83:	50                   	push   eax
c000ea84:	e8 2d 90 ff ff       	call   c0007ab6 <malloc>
c000ea89:	83 c4 10             	add    esp,0x10
c000ea8c:	89 c7                	mov    edi,eax
c000ea8e:	85 c0                	test   eax,eax
c000ea90:	75 10                	jne    c000eaa2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000ea92:	83 ec 0c             	sub    esp,0xc
c000ea95:	68 74 1a 02 c0       	push   0xc0021a74
c000ea9a:	e8 da 28 00 00       	call   c0011379 <KePanic(char const*)>
c000ea9f:	83 c4 10             	add    esp,0x10
c000eaa2:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000eaa6:	ba 12 00 00 00       	mov    edx,0x12
c000eaab:	85 c0                	test   eax,eax
c000eaad:	74 11                	je     c000eac0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x74>
c000eaaf:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000eab3:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000eab7:	c1 fa 03             	sar    edx,0x3
c000eaba:	0f af d1             	imul   edx,ecx
c000eabd:	83 c2 12             	add    edx,0x12
c000eac0:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000eac4:	74 04                	je     c000eaca <Video::tgaParse(unsigned char*, int, int*, int*)+0x7e>
c000eac6:	85 f6                	test   esi,esi
c000eac8:	75 12                	jne    c000eadc <Video::tgaParse(unsigned char*, int, int*, int*)+0x90>
c000eaca:	83 ec 0c             	sub    esp,0xc
c000eacd:	68 84 1a 02 c0       	push   0xc0021a84
c000ead2:	e8 6e be ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ead7:	e9 b8 00 00 00       	jmp    c000eb94 <Video::tgaParse(unsigned char*, int, int*, int*)+0x148>
c000eadc:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000eae0:	83 f9 02             	cmp    ecx,0x2
c000eae3:	0f 85 96 00 00 00    	jne    c000eb7f <Video::tgaParse(unsigned char*, int, int*, int*)+0x133>
c000eae9:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000eaee:	75 0e                	jne    c000eafe <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000eaf0:	85 c0                	test   eax,eax
c000eaf2:	75 0a                	jne    c000eafe <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000eaf4:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000eaf7:	83 e8 18             	sub    eax,0x18
c000eafa:	a8 f7                	test   al,0xf7
c000eafc:	74 0a                	je     c000eb08 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000eafe:	83 ec 0c             	sub    esp,0xc
c000eb01:	68 99 1a 02 c0       	push   0xc0021a99
c000eb06:	eb 7f                	jmp    c000eb87 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13b>
c000eb08:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000eb10:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000eb18:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000eb1c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000eb24:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000eb28:	75 0c                	jne    c000eb36 <Video::tgaParse(unsigned char*, int, int*, int*)+0xea>
c000eb2a:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000eb2f:	c1 e0 18             	shl    eax,0x18
c000eb32:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000eb36:	45                   	inc    ebp
c000eb37:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000eb3c:	c1 e1 10             	shl    ecx,0x10
c000eb3f:	89 c8                	mov    eax,ecx
c000eb41:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000eb46:	c1 e1 08             	shl    ecx,0x8
c000eb49:	09 c1                	or     ecx,eax
c000eb4b:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000eb4f:	09 c1                	or     ecx,eax
c000eb51:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000eb55:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000eb59:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000eb5d:	c1 f8 03             	sar    eax,0x3
c000eb60:	01 c2                	add    edx,eax
c000eb62:	89 e8                	mov    eax,ebp
c000eb64:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000eb68:	39 c6                	cmp    esi,eax
c000eb6a:	7f b0                	jg     c000eb1c <Video::tgaParse(unsigned char*, int, int*, int*)+0xd0>
c000eb6c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000eb70:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000eb74:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000eb77:	7e 22                	jle    c000eb9b <Video::tgaParse(unsigned char*, int, int*, int*)+0x14f>
c000eb79:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000eb7d:	eb 99                	jmp    c000eb18 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcc>
c000eb7f:	50                   	push   eax
c000eb80:	50                   	push   eax
c000eb81:	51                   	push   ecx
c000eb82:	68 a7 1a 02 c0       	push   0xc0021aa7
c000eb87:	e8 b9 bd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000eb8c:	89 3c 24             	mov    DWORD PTR [esp],edi
c000eb8f:	e8 32 8f ff ff       	call   c0007ac6 <free>
c000eb94:	83 c4 10             	add    esp,0x10
c000eb97:	31 ff                	xor    edi,edi
c000eb99:	eb 0f                	jmp    c000ebaa <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000eb9b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eb9f:	89 30                	mov    DWORD PTR [eax],esi
c000eba1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000eba5:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000eba8:	89 30                	mov    DWORD PTR [eax],esi
c000ebaa:	83 c4 1c             	add    esp,0x1c
c000ebad:	89 f8                	mov    eax,edi
c000ebaf:	5b                   	pop    ebx
c000ebb0:	5e                   	pop    esi
c000ebb1:	5f                   	pop    edi
c000ebb2:	5d                   	pop    ebp
c000ebb3:	c3                   	ret    

c000ebb4 <Video::putTGA(int, int, unsigned char*, int)>:
c000ebb4:	55                   	push   ebp
c000ebb5:	57                   	push   edi
c000ebb6:	56                   	push   esi
c000ebb7:	53                   	push   ebx
c000ebb8:	83 ec 28             	sub    esp,0x28
c000ebbb:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000ebbf:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ebc3:	50                   	push   eax
c000ebc4:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ebc8:	50                   	push   eax
c000ebc9:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000ebcd:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000ebd1:	56                   	push   esi
c000ebd2:	e8 75 fe ff ff       	call   c000ea4c <Video::tgaParse(unsigned char*, int, int*, int*)>
c000ebd7:	83 c4 20             	add    esp,0x20
c000ebda:	85 c0                	test   eax,eax
c000ebdc:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000ebe0:	74 35                	je     c000ec17 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000ebe2:	89 c7                	mov    edi,eax
c000ebe4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ebe8:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000ebec:	39 d8                	cmp    eax,ebx
c000ebee:	7e 27                	jle    c000ec17 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000ebf0:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ebf4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ebf8:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000ebfc:	39 e8                	cmp    eax,ebp
c000ebfe:	7e 14                	jle    c000ec14 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000ec00:	8b 06                	mov    eax,DWORD PTR [esi]
c000ec02:	83 c7 04             	add    edi,0x4
c000ec05:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000ec08:	53                   	push   ebx
c000ec09:	55                   	push   ebp
c000ec0a:	45                   	inc    ebp
c000ec0b:	56                   	push   esi
c000ec0c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ec0f:	83 c4 10             	add    esp,0x10
c000ec12:	eb e0                	jmp    c000ebf4 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000ec14:	43                   	inc    ebx
c000ec15:	eb cd                	jmp    c000ebe4 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000ec17:	83 c4 1c             	add    esp,0x1c
c000ec1a:	5b                   	pop    ebx
c000ec1b:	5e                   	pop    esi
c000ec1c:	5f                   	pop    edi
c000ec1d:	5d                   	pop    ebp
c000ec1e:	c3                   	ret    
c000ec1f:	90                   	nop

c000ec20 <ACPI::close(int, int, void*)>:
c000ec20:	83 ec 1c             	sub    esp,0x1c
c000ec23:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000ec2b:	74 0b                	je     c000ec38 <ACPI::close(int, int, void*)+0x18>
c000ec2d:	b8 00 00 00 00       	mov    eax,0x0
c000ec32:	e9 99 00 00 00       	jmp    c000ecd0 <ACPI::close(int, int, void*)+0xb0>
c000ec37:	90                   	nop
c000ec38:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000ec3d:	75 29                	jne    c000ec68 <ACPI::close(int, int, void*)+0x48>
c000ec3f:	a1 08 89 02 c0       	mov    eax,ds:0xc0028908
c000ec44:	85 c0                	test   eax,eax
c000ec46:	74 08                	je     c000ec50 <ACPI::close(int, int, void*)+0x30>
c000ec48:	a1 08 89 02 c0       	mov    eax,ds:0xc0028908
c000ec4d:	ff d0                	call   eax
c000ec4f:	90                   	nop
c000ec50:	83 ec 0c             	sub    esp,0xc
c000ec53:	68 08 1b 02 c0       	push   0xc0021b08
c000ec58:	e8 1c 27 00 00       	call   c0011379 <KePanic(char const*)>
c000ec5d:	83 c4 10             	add    esp,0x10
c000ec60:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ec65:	eb 69                	jmp    c000ecd0 <ACPI::close(int, int, void*)+0xb0>
c000ec67:	90                   	nop
c000ec68:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000ec6d:	75 59                	jne    c000ecc8 <ACPI::close(int, int, void*)+0xa8>
c000ec6f:	a1 04 89 02 c0       	mov    eax,ds:0xc0028904
c000ec74:	85 c0                	test   eax,eax
c000ec76:	74 08                	je     c000ec80 <ACPI::close(int, int, void*)+0x60>
c000ec78:	a1 04 89 02 c0       	mov    eax,ds:0xc0028904
c000ec7d:	ff d0                	call   eax
c000ec7f:	90                   	nop
c000ec80:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000ec85:	8d 76 00             	lea    esi,[esi+0x0]
c000ec88:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000ec8d:	83 e0 02             	and    eax,0x2
c000ec90:	74 1e                	je     c000ecb0 <ACPI::close(int, int, void*)+0x90>
c000ec92:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000ec99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ec9d:	89 c2                	mov    edx,eax
c000ec9f:	ec                   	in     al,dx
c000eca0:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000eca4:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000eca8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000ecac:	eb da                	jmp    c000ec88 <ACPI::close(int, int, void*)+0x68>
c000ecae:	66 90                	xchg   ax,ax
c000ecb0:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000ecb7:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000ecbc:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000ecc0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ecc4:	ee                   	out    dx,al
c000ecc5:	8d 76 00             	lea    esi,[esi+0x0]
c000ecc8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000eccd:	8d 76 00             	lea    esi,[esi+0x0]
c000ecd0:	83 c4 1c             	add    esp,0x1c
c000ecd3:	c3                   	ret    

c000ecd4 <findRSDP()>:
c000ecd4:	83 ec 1c             	sub    esp,0x1c
c000ecd7:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ecdc:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ece2:	83 e0 04             	and    eax,0x4
c000ece5:	0f b6 c0             	movzx  eax,al
c000ece8:	85 c0                	test   eax,eax
c000ecea:	75 08                	jne    c000ecf4 <findRSDP()+0x20>
c000ecec:	b8 00 00 00 00       	mov    eax,0x0
c000ecf1:	eb 75                	jmp    c000ed68 <findRSDP()+0x94>
c000ecf3:	90                   	nop
c000ecf4:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c000ecf9:	3d ff 07 00 00       	cmp    eax,0x7ff
c000ecfe:	7f 1c                	jg     c000ed1c <findRSDP()+0x48>
c000ed00:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ed05:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000ed0b:	83 e2 fb             	and    edx,0xfffffffb
c000ed0e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000ed14:	b8 00 00 00 00       	mov    eax,0x0
c000ed19:	eb 4d                	jmp    c000ed68 <findRSDP()+0x94>
c000ed1b:	90                   	nop
c000ed1c:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000ed24:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000ed2c:	77 32                	ja     c000ed60 <findRSDP()+0x8c>
c000ed2e:	83 ec 04             	sub    esp,0x4
c000ed31:	6a 08                	push   0x8
c000ed33:	68 a3 1b 02 c0       	push   0xc0021ba3
c000ed38:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ed3c:	e8 3f 16 ff ff       	call   c0000380 <memcmp>
c000ed41:	83 c4 10             	add    esp,0x10
c000ed44:	85 c0                	test   eax,eax
c000ed46:	0f 94 c0             	sete   al
c000ed49:	0f b6 c0             	movzx  eax,al
c000ed4c:	85 c0                	test   eax,eax
c000ed4e:	74 08                	je     c000ed58 <findRSDP()+0x84>
c000ed50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ed54:	eb 12                	jmp    c000ed68 <findRSDP()+0x94>
c000ed56:	66 90                	xchg   ax,ax
c000ed58:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000ed5d:	eb c5                	jmp    c000ed24 <findRSDP()+0x50>
c000ed5f:	90                   	nop
c000ed60:	b8 00 00 00 00       	mov    eax,0x0
c000ed65:	8d 76 00             	lea    esi,[esi+0x0]
c000ed68:	83 c4 1c             	add    esp,0x1c
c000ed6b:	c3                   	ret    

c000ed6c <loadACPITables(unsigned char*)>:
c000ed6c:	57                   	push   edi
c000ed6d:	56                   	push   esi
c000ed6e:	53                   	push   ebx
c000ed6f:	83 ec 60             	sub    esp,0x60
c000ed72:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ed77:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ed7d:	83 e0 04             	and    eax,0x4
c000ed80:	0f b6 c0             	movzx  eax,al
c000ed83:	85 c0                	test   eax,eax
c000ed85:	0f 84 41 02 00 00    	je     c000efcc <loadACPITables(unsigned char*)+0x260>
c000ed8b:	a0 20 8b 02 c0       	mov    al,ds:0xc0028b20
c000ed90:	0f b6 c0             	movzx  eax,al
c000ed93:	85 c0                	test   eax,eax
c000ed95:	74 79                	je     c000ee10 <loadACPITables(unsigned char*)+0xa4>
c000ed97:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ed9b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ed9f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000eda3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000eda6:	83 e8 24             	sub    eax,0x24
c000eda9:	c1 e8 03             	shr    eax,0x3
c000edac:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000edb0:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000edb8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000edbc:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000edc0:	0f 8d ba 00 00 00    	jge    c000ee80 <loadACPITables(unsigned char*)+0x114>
c000edc6:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000edca:	83 c0 24             	add    eax,0x24
c000edcd:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000edd1:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000edd5:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000edd9:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000eddd:	c1 e0 03             	shl    eax,0x3
c000ede0:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000ede4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ede8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000edeb:	8b 00                	mov    eax,DWORD PTR [eax]
c000eded:	89 c1                	mov    ecx,eax
c000edef:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c000edf4:	8d 50 01             	lea    edx,[eax+0x1]
c000edf7:	89 15 0c 89 02 c0    	mov    DWORD PTR ds:0xc002890c,edx
c000edfd:	89 ca                	mov    edx,ecx
c000edff:	89 14 c5 24 89 02 c0 	mov    DWORD PTR [eax*8-0x3ffd76dc],edx
c000ee06:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000ee0b:	eb ab                	jmp    c000edb8 <loadACPITables(unsigned char*)+0x4c>
c000ee0d:	8d 76 00             	lea    esi,[esi+0x0]
c000ee10:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ee14:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ee18:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ee1c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ee1f:	83 e8 24             	sub    eax,0x24
c000ee22:	c1 e8 02             	shr    eax,0x2
c000ee25:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000ee29:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000ee31:	8d 76 00             	lea    esi,[esi+0x0]
c000ee34:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000ee38:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000ee3c:	7d 42                	jge    c000ee80 <loadACPITables(unsigned char*)+0x114>
c000ee3e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ee42:	83 c0 24             	add    eax,0x24
c000ee45:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ee49:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ee4d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ee51:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000ee55:	c1 e0 02             	shl    eax,0x2
c000ee58:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000ee5c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ee60:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ee62:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c000ee67:	8d 50 01             	lea    edx,[eax+0x1]
c000ee6a:	89 15 0c 89 02 c0    	mov    DWORD PTR ds:0xc002890c,edx
c000ee70:	89 ca                	mov    edx,ecx
c000ee72:	89 14 c5 24 89 02 c0 	mov    DWORD PTR [eax*8-0x3ffd76dc],edx
c000ee79:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000ee7e:	eb b4                	jmp    c000ee34 <loadACPITables(unsigned char*)+0xc8>
c000ee80:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000ee88:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c000ee8d:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000ee91:	0f 8d 39 01 00 00    	jge    c000efd0 <loadACPITables(unsigned char*)+0x264>
c000ee97:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ee9b:	8b 04 c5 24 89 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd76dc]
c000eea2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000eea6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eeaa:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000eeae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eeb2:	25 ff 0f 00 00       	and    eax,0xfff
c000eeb7:	89 c6                	mov    esi,eax
c000eeb9:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000eebf:	83 ec 0c             	sub    esp,0xc
c000eec2:	6a 01                	push   0x1
c000eec4:	e8 44 a7 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000eec9:	83 c4 10             	add    esp,0x10
c000eecc:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000eed0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000eed6:	83 ec 0c             	sub    esp,0xc
c000eed9:	6a 01                	push   0x1
c000eedb:	6a 01                	push   0x1
c000eedd:	50                   	push   eax
c000eede:	52                   	push   edx
c000eedf:	53                   	push   ebx
c000eee0:	e8 35 b0 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000eee5:	83 c4 20             	add    esp,0x20
c000eee8:	09 f0                	or     eax,esi
c000eeea:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000eeee:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000eef2:	c1 e0 03             	shl    eax,0x3
c000eef5:	05 20 89 02 c0       	add    eax,0xc0028920
c000eefa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000eefe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ef02:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ef06:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000ef0e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ef12:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ef16:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ef1a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ef1e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ef22:	89 c6                	mov    esi,eax
c000ef24:	89 d7                	mov    edi,edx
c000ef26:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ef28:	89 c8                	mov    eax,ecx
c000ef2a:	89 fa                	mov    edx,edi
c000ef2c:	89 f3                	mov    ebx,esi
c000ef2e:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000ef32:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ef36:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ef3a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ef3e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ef41:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ef45:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ef49:	05 00 10 00 00       	add    eax,0x1000
c000ef4e:	c1 e8 0c             	shr    eax,0xc
c000ef51:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000ef55:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ef59:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ef5d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ef61:	25 ff 0f 00 00       	and    eax,0xfff
c000ef66:	89 c6                	mov    esi,eax
c000ef68:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000ef6e:	83 ec 0c             	sub    esp,0xc
c000ef71:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ef75:	e8 93 a6 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000ef7a:	83 c4 10             	add    esp,0x10
c000ef7d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ef81:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000ef87:	83 ec 0c             	sub    esp,0xc
c000ef8a:	6a 01                	push   0x1
c000ef8c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ef90:	50                   	push   eax
c000ef91:	52                   	push   edx
c000ef92:	53                   	push   ebx
c000ef93:	e8 82 af ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ef98:	83 c4 20             	add    esp,0x20
c000ef9b:	09 f0                	or     eax,esi
c000ef9d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000efa1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000efa5:	83 ec 0c             	sub    esp,0xc
c000efa8:	50                   	push   eax
c000efa9:	e8 7d a9 ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c000efae:	83 c4 10             	add    esp,0x10
c000efb1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000efb5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000efb9:	89 14 c5 24 89 02 c0 	mov    DWORD PTR [eax*8-0x3ffd76dc],edx
c000efc0:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000efc5:	e9 be fe ff ff       	jmp    c000ee88 <loadACPITables(unsigned char*)+0x11c>
c000efca:	66 90                	xchg   ax,ax
c000efcc:	90                   	nop
c000efcd:	8d 76 00             	lea    esi,[esi+0x0]
c000efd0:	83 c4 60             	add    esp,0x60
c000efd3:	5b                   	pop    ebx
c000efd4:	5e                   	pop    esi
c000efd5:	5f                   	pop    edi
c000efd6:	c3                   	ret    
c000efd7:	90                   	nop

c000efd8 <findRSDT(unsigned char*)>:
c000efd8:	57                   	push   edi
c000efd9:	56                   	push   esi
c000efda:	53                   	push   ebx
c000efdb:	83 ec 50             	sub    esp,0x50
c000efde:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000efe3:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000efe9:	83 e0 04             	and    eax,0x4
c000efec:	0f b6 c0             	movzx  eax,al
c000efef:	85 c0                	test   eax,eax
c000eff1:	75 0d                	jne    c000f000 <findRSDT(unsigned char*)+0x28>
c000eff3:	b8 00 00 00 00       	mov    eax,0x0
c000eff8:	e9 2b 01 00 00       	jmp    c000f128 <findRSDT(unsigned char*)+0x150>
c000effd:	8d 76 00             	lea    esi,[esi+0x0]
c000f000:	89 e0                	mov    eax,esp
c000f002:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f006:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f00a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000f00e:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000f016:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f01a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f01e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f022:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000f026:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000f02a:	89 c6                	mov    esi,eax
c000f02c:	89 d7                	mov    edi,edx
c000f02e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f030:	89 c8                	mov    eax,ecx
c000f032:	89 fa                	mov    edx,edi
c000f034:	89 f3                	mov    ebx,esi
c000f036:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000f03a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000f03e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f042:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f046:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000f04a:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000f052:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f056:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f05a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f05e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f062:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f066:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f06a:	25 ff 0f 00 00       	and    eax,0xfff
c000f06f:	89 c6                	mov    esi,eax
c000f071:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000f077:	83 ec 0c             	sub    esp,0xc
c000f07a:	6a 02                	push   0x2
c000f07c:	e8 8c a5 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000f081:	83 c4 10             	add    esp,0x10
c000f084:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000f088:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f08e:	83 ec 0c             	sub    esp,0xc
c000f091:	6a 01                	push   0x1
c000f093:	6a 02                	push   0x2
c000f095:	50                   	push   eax
c000f096:	52                   	push   edx
c000f097:	53                   	push   ebx
c000f098:	e8 7d ae ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f09d:	83 c4 20             	add    esp,0x20
c000f0a0:	09 f0                	or     eax,esi
c000f0a2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f0a6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f0aa:	25 ff 0f 00 00       	and    eax,0xfff
c000f0af:	89 c6                	mov    esi,eax
c000f0b1:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000f0b7:	83 ec 0c             	sub    esp,0xc
c000f0ba:	6a 02                	push   0x2
c000f0bc:	e8 4c a5 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000f0c1:	83 c4 10             	add    esp,0x10
c000f0c4:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000f0c8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f0ce:	83 ec 0c             	sub    esp,0xc
c000f0d1:	6a 01                	push   0x1
c000f0d3:	6a 02                	push   0x2
c000f0d5:	50                   	push   eax
c000f0d6:	52                   	push   edx
c000f0d7:	53                   	push   ebx
c000f0d8:	e8 3d ae ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f0dd:	83 c4 20             	add    esp,0x20
c000f0e0:	09 f0                	or     eax,esi
c000f0e2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f0e6:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f0eb:	85 c0                	test   eax,eax
c000f0ed:	75 11                	jne    c000f100 <findRSDT(unsigned char*)+0x128>
c000f0ef:	c6 05 20 8b 02 c0 00 	mov    BYTE PTR ds:0xc0028b20,0x0
c000f0f6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f0fa:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f0fe:	eb 24                	jmp    c000f124 <findRSDT(unsigned char*)+0x14c>
c000f100:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f105:	83 f8 02             	cmp    eax,0x2
c000f108:	75 12                	jne    c000f11c <findRSDT(unsigned char*)+0x144>
c000f10a:	c6 05 20 8b 02 c0 01 	mov    BYTE PTR ds:0xc0028b20,0x1
c000f111:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f115:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f119:	eb 09                	jmp    c000f124 <findRSDT(unsigned char*)+0x14c>
c000f11b:	90                   	nop
c000f11c:	b8 00 00 00 00       	mov    eax,0x0
c000f121:	eb 05                	jmp    c000f128 <findRSDT(unsigned char*)+0x150>
c000f123:	90                   	nop
c000f124:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f128:	83 c4 50             	add    esp,0x50
c000f12b:	5b                   	pop    ebx
c000f12c:	5e                   	pop    esi
c000f12d:	5f                   	pop    edi
c000f12e:	c3                   	ret    
c000f12f:	90                   	nop

c000f130 <findDataTable(unsigned char*, char*)>:
c000f130:	83 ec 1c             	sub    esp,0x1c
c000f133:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f138:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f13e:	83 e0 04             	and    eax,0x4
c000f141:	0f b6 c0             	movzx  eax,al
c000f144:	85 c0                	test   eax,eax
c000f146:	75 08                	jne    c000f150 <findDataTable(unsigned char*, char*)+0x20>
c000f148:	b8 00 00 00 00       	mov    eax,0x0
c000f14d:	eb 5d                	jmp    c000f1ac <findDataTable(unsigned char*, char*)+0x7c>
c000f14f:	90                   	nop
c000f150:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f158:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c000f15d:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000f161:	7d 41                	jge    c000f1a4 <findDataTable(unsigned char*, char*)+0x74>
c000f163:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f167:	c1 e0 03             	shl    eax,0x3
c000f16a:	05 20 89 02 c0       	add    eax,0xc0028920
c000f16f:	83 ec 04             	sub    esp,0x4
c000f172:	6a 04                	push   0x4
c000f174:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f178:	50                   	push   eax
c000f179:	e8 02 12 ff ff       	call   c0000380 <memcmp>
c000f17e:	83 c4 10             	add    esp,0x10
c000f181:	85 c0                	test   eax,eax
c000f183:	0f 94 c0             	sete   al
c000f186:	0f b6 c0             	movzx  eax,al
c000f189:	85 c0                	test   eax,eax
c000f18b:	74 0f                	je     c000f19c <findDataTable(unsigned char*, char*)+0x6c>
c000f18d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f191:	8b 04 c5 24 89 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd76dc]
c000f198:	eb 12                	jmp    c000f1ac <findDataTable(unsigned char*, char*)+0x7c>
c000f19a:	66 90                	xchg   ax,ax
c000f19c:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000f1a1:	eb b5                	jmp    c000f158 <findDataTable(unsigned char*, char*)+0x28>
c000f1a3:	90                   	nop
c000f1a4:	b8 00 00 00 00       	mov    eax,0x0
c000f1a9:	8d 76 00             	lea    esi,[esi+0x0]
c000f1ac:	83 c4 1c             	add    esp,0x1c
c000f1af:	c3                   	ret    

c000f1b0 <scanMADT()>:
c000f1b0:	53                   	push   ebx
c000f1b1:	83 ec 38             	sub    esp,0x38
c000f1b4:	a1 d0 5e 02 c0       	mov    eax,ds:0xc0025ed0
c000f1b9:	25 00 04 00 00       	and    eax,0x400
c000f1be:	74 14                	je     c000f1d4 <scanMADT()+0x24>
c000f1c0:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f1c5:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f1cb:	83 e2 fb             	and    edx,0xfffffffb
c000f1ce:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f1d4:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f1d9:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f1df:	83 e0 04             	and    eax,0x4
c000f1e2:	0f b6 c0             	movzx  eax,al
c000f1e5:	85 c0                	test   eax,eax
c000f1e7:	0f 84 6b 04 00 00    	je     c000f658 <scanMADT()+0x4a8>
c000f1ed:	e8 e2 fa ff ff       	call   c000ecd4 <findRSDP()>
c000f1f2:	a3 2c 8b 02 c0       	mov    ds:0xc0028b2c,eax
c000f1f7:	a1 2c 8b 02 c0       	mov    eax,ds:0xc0028b2c
c000f1fc:	85 c0                	test   eax,eax
c000f1fe:	75 1c                	jne    c000f21c <scanMADT()+0x6c>
c000f200:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f205:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f20b:	83 e2 fb             	and    edx,0xfffffffb
c000f20e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f214:	e9 47 04 00 00       	jmp    c000f660 <scanMADT()+0x4b0>
c000f219:	8d 76 00             	lea    esi,[esi+0x0]
c000f21c:	a1 2c 8b 02 c0       	mov    eax,ds:0xc0028b2c
c000f221:	83 ec 0c             	sub    esp,0xc
c000f224:	50                   	push   eax
c000f225:	e8 ae fd ff ff       	call   c000efd8 <findRSDT(unsigned char*)>
c000f22a:	83 c4 10             	add    esp,0x10
c000f22d:	a3 28 8b 02 c0       	mov    ds:0xc0028b28,eax
c000f232:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000f237:	85 c0                	test   eax,eax
c000f239:	75 19                	jne    c000f254 <scanMADT()+0xa4>
c000f23b:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f240:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f246:	83 e2 fb             	and    edx,0xfffffffb
c000f249:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f24f:	e9 0c 04 00 00       	jmp    c000f660 <scanMADT()+0x4b0>
c000f254:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000f259:	83 ec 0c             	sub    esp,0xc
c000f25c:	50                   	push   eax
c000f25d:	e8 0a fb ff ff       	call   c000ed6c <loadACPITables(unsigned char*)>
c000f262:	83 c4 10             	add    esp,0x10
c000f265:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000f26a:	83 ec 08             	sub    esp,0x8
c000f26d:	68 ac 1b 02 c0       	push   0xc0021bac
c000f272:	50                   	push   eax
c000f273:	e8 b8 fe ff ff       	call   c000f130 <findDataTable(unsigned char*, char*)>
c000f278:	83 c4 10             	add    esp,0x10
c000f27b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f27f:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000f284:	75 1a                	jne    c000f2a0 <scanMADT()+0xf0>
c000f286:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f28b:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f291:	83 e2 fe             	and    edx,0xfffffffe
c000f294:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f29a:	e9 c1 03 00 00       	jmp    c000f660 <scanMADT()+0x4b0>
c000f29f:	90                   	nop
c000f2a0:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000f2a8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f2ac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f2af:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000f2b3:	0f 87 a7 03 00 00    	ja     c000f660 <scanMADT()+0x4b0>
c000f2b9:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000f2c1:	0f 87 99 03 00 00    	ja     c000f660 <scanMADT()+0x4b0>
c000f2c7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f2cb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f2cf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f2d3:	8d 50 01             	lea    edx,[eax+0x1]
c000f2d6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f2da:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f2de:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f2e2:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000f2e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f2ea:	8d 50 01             	lea    edx,[eax+0x1]
c000f2ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f2f1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f2f5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f2f9:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000f2fd:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000f302:	83 f8 02             	cmp    eax,0x2
c000f305:	0f 86 51 03 00 00    	jbe    c000f65c <scanMADT()+0x4ac>
c000f30b:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f310:	85 c0                	test   eax,eax
c000f312:	75 58                	jne    c000f36c <scanMADT()+0x1bc>
c000f314:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f318:	8d 50 01             	lea    edx,[eax+0x1]
c000f31b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f31f:	8a 15 20 8d 02 c0    	mov    dl,BYTE PTR ds:0xc0028d20
c000f325:	0f b6 d2             	movzx  edx,dl
c000f328:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f32c:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f330:	88 82 60 8d 02 c0    	mov    BYTE PTR [edx-0x3ffd72a0],al
c000f336:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f33a:	8d 50 01             	lea    edx,[eax+0x1]
c000f33d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f341:	8a 15 20 8d 02 c0    	mov    dl,BYTE PTR ds:0xc0028d20
c000f347:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f34a:	88 0d 20 8d 02 c0    	mov    BYTE PTR ds:0xc0028d20,cl
c000f350:	0f b6 d2             	movzx  edx,dl
c000f353:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f357:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f35b:	88 82 40 8d 02 c0    	mov    BYTE PTR [edx-0x3ffd72c0],al
c000f361:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f366:	e9 d9 02 00 00       	jmp    c000f644 <scanMADT()+0x494>
c000f36b:	90                   	nop
c000f36c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f371:	83 f8 01             	cmp    eax,0x1
c000f374:	0f 85 1a 01 00 00    	jne    c000f494 <scanMADT()+0x2e4>
c000f37a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f37e:	8d 50 01             	lea    edx,[eax+0x1]
c000f381:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f385:	8a 15 e0 8b 02 c0    	mov    dl,BYTE PTR ds:0xc0028be0
c000f38b:	0f b6 d2             	movzx  edx,dl
c000f38e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f392:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f396:	88 82 00 8c 02 c0    	mov    BYTE PTR [edx-0x3ffd7400],al
c000f39c:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000f3a1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f3a5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3a9:	01 d0                	add    eax,edx
c000f3ab:	83 c0 2c             	add    eax,0x2c
c000f3ae:	8a 00                	mov    al,BYTE PTR [eax]
c000f3b0:	0f b6 d0             	movzx  edx,al
c000f3b3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3b7:	8d 48 01             	lea    ecx,[eax+0x1]
c000f3ba:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f3be:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f3c2:	0f b6 c0             	movzx  eax,al
c000f3c5:	c1 e0 08             	shl    eax,0x8
c000f3c8:	89 d1                	mov    ecx,edx
c000f3ca:	09 c1                	or     ecx,eax
c000f3cc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3d0:	8d 50 02             	lea    edx,[eax+0x2]
c000f3d3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f3d7:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f3db:	0f b6 c0             	movzx  eax,al
c000f3de:	c1 e0 10             	shl    eax,0x10
c000f3e1:	09 c1                	or     ecx,eax
c000f3e3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3e7:	8d 50 03             	lea    edx,[eax+0x3]
c000f3ea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f3ee:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f3f2:	0f b6 c0             	movzx  eax,al
c000f3f5:	c1 e0 18             	shl    eax,0x18
c000f3f8:	09 c1                	or     ecx,eax
c000f3fa:	89 ca                	mov    edx,ecx
c000f3fc:	a0 e0 8b 02 c0       	mov    al,ds:0xc0028be0
c000f401:	0f b6 c0             	movzx  eax,al
c000f404:	89 14 85 20 8c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd73e0],edx
c000f40b:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f410:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f414:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f418:	01 d0                	add    eax,edx
c000f41a:	83 c0 2c             	add    eax,0x2c
c000f41d:	8a 00                	mov    al,BYTE PTR [eax]
c000f41f:	0f b6 d0             	movzx  edx,al
c000f422:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f426:	8d 48 01             	lea    ecx,[eax+0x1]
c000f429:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f42d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f431:	0f b6 c0             	movzx  eax,al
c000f434:	c1 e0 08             	shl    eax,0x8
c000f437:	89 d1                	mov    ecx,edx
c000f439:	09 c1                	or     ecx,eax
c000f43b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f43f:	8d 50 02             	lea    edx,[eax+0x2]
c000f442:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f446:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f44a:	0f b6 c0             	movzx  eax,al
c000f44d:	c1 e0 10             	shl    eax,0x10
c000f450:	09 c1                	or     ecx,eax
c000f452:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f456:	8d 50 03             	lea    edx,[eax+0x3]
c000f459:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f45d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f461:	0f b6 c0             	movzx  eax,al
c000f464:	c1 e0 18             	shl    eax,0x18
c000f467:	09 c1                	or     ecx,eax
c000f469:	89 ca                	mov    edx,ecx
c000f46b:	a0 e0 8b 02 c0       	mov    al,ds:0xc0028be0
c000f470:	0f b6 c0             	movzx  eax,al
c000f473:	89 14 85 a0 8c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7360],edx
c000f47a:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f47f:	a0 e0 8b 02 c0       	mov    al,ds:0xc0028be0
c000f484:	83 c0 01             	add    eax,0x1
c000f487:	a2 e0 8b 02 c0       	mov    ds:0xc0028be0,al
c000f48c:	e9 b3 01 00 00       	jmp    c000f644 <scanMADT()+0x494>
c000f491:	8d 76 00             	lea    esi,[esi+0x0]
c000f494:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f499:	83 f8 02             	cmp    eax,0x2
c000f49c:	0f 85 ea 00 00 00    	jne    c000f58c <scanMADT()+0x3dc>
c000f4a2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4a6:	8d 50 01             	lea    edx,[eax+0x1]
c000f4a9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f4ad:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f4b1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f4b5:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000f4b9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4bd:	8d 50 01             	lea    edx,[eax+0x1]
c000f4c0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f4c4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f4c8:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f4cc:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000f4d0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f4d4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4d8:	01 d0                	add    eax,edx
c000f4da:	83 c0 2c             	add    eax,0x2c
c000f4dd:	8a 00                	mov    al,BYTE PTR [eax]
c000f4df:	0f b6 d0             	movzx  edx,al
c000f4e2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4e6:	8d 48 01             	lea    ecx,[eax+0x1]
c000f4e9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f4ed:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f4f1:	0f b6 c0             	movzx  eax,al
c000f4f4:	c1 e0 08             	shl    eax,0x8
c000f4f7:	89 d1                	mov    ecx,edx
c000f4f9:	09 c1                	or     ecx,eax
c000f4fb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4ff:	8d 50 02             	lea    edx,[eax+0x2]
c000f502:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f506:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f50a:	0f b6 c0             	movzx  eax,al
c000f50d:	c1 e0 10             	shl    eax,0x10
c000f510:	09 c1                	or     ecx,eax
c000f512:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f516:	8d 50 03             	lea    edx,[eax+0x3]
c000f519:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f51d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f521:	0f b6 c0             	movzx  eax,al
c000f524:	c1 e0 18             	shl    eax,0x18
c000f527:	09 c8                	or     eax,ecx
c000f529:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f52d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f532:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f536:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f53a:	01 d0                	add    eax,edx
c000f53c:	83 c0 2c             	add    eax,0x2c
c000f53f:	8a 00                	mov    al,BYTE PTR [eax]
c000f541:	0f b6 c0             	movzx  eax,al
c000f544:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f548:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f54b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f54f:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000f553:	0f b6 d2             	movzx  edx,dl
c000f556:	c1 e2 08             	shl    edx,0x8
c000f559:	09 d0                	or     eax,edx
c000f55b:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000f560:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f565:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000f56a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f56e:	88 90 a8 32 02 c0    	mov    BYTE PTR [eax-0x3ffdcd58],dl
c000f574:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c000f579:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000f57e:	66 89 84 12 c0 8b 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd7440],ax
c000f586:	e9 b9 00 00 00       	jmp    c000f644 <scanMADT()+0x494>
c000f58b:	90                   	nop
c000f58c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f591:	83 f8 04             	cmp    eax,0x4
c000f594:	0f 85 9a 00 00 00    	jne    c000f634 <scanMADT()+0x484>
c000f59a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f59e:	8d 50 01             	lea    edx,[eax+0x1]
c000f5a1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f5a5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f5a9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f5ad:	0f b6 c0             	movzx  eax,al
c000f5b0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f5b4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f5b8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5bc:	01 d0                	add    eax,edx
c000f5be:	83 c0 2c             	add    eax,0x2c
c000f5c1:	8a 00                	mov    al,BYTE PTR [eax]
c000f5c3:	0f b6 d0             	movzx  edx,al
c000f5c6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5ca:	8d 48 01             	lea    ecx,[eax+0x1]
c000f5cd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f5d1:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f5d5:	0f b6 c0             	movzx  eax,al
c000f5d8:	c1 e0 08             	shl    eax,0x8
c000f5db:	09 d0                	or     eax,edx
c000f5dd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f5e1:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f5e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5ea:	8d 50 01             	lea    edx,[eax+0x1]
c000f5ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f5f1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f5f5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f5f9:	0f b6 c0             	movzx  eax,al
c000f5fc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f600:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f604:	c1 e0 08             	shl    eax,0x8
c000f607:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000f60b:	89 c1                	mov    ecx,eax
c000f60d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f611:	c1 e0 18             	shl    eax,0x18
c000f614:	89 c3                	mov    ebx,eax
c000f616:	a1 30 8b 02 c0       	mov    eax,ds:0xc0028b30
c000f61b:	8d 50 01             	lea    edx,[eax+0x1]
c000f61e:	89 15 30 8b 02 c0    	mov    DWORD PTR ds:0xc0028b30,edx
c000f624:	09 d9                	or     ecx,ebx
c000f626:	89 ca                	mov    edx,ecx
c000f628:	89 14 85 40 8b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd74c0],edx
c000f62f:	eb 13                	jmp    c000f644 <scanMADT()+0x494>
c000f631:	8d 76 00             	lea    esi,[esi+0x0]
c000f634:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f639:	83 f8 05             	cmp    eax,0x5
c000f63c:	75 06                	jne    c000f644 <scanMADT()+0x494>
c000f63e:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000f643:	90                   	nop
c000f644:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000f649:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f64d:	01 d0                	add    eax,edx
c000f64f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f653:	e9 50 fc ff ff       	jmp    c000f2a8 <scanMADT()+0xf8>
c000f658:	90                   	nop
c000f659:	eb 05                	jmp    c000f660 <scanMADT()+0x4b0>
c000f65b:	90                   	nop
c000f65c:	90                   	nop
c000f65d:	8d 76 00             	lea    esi,[esi+0x0]
c000f660:	83 c4 38             	add    esp,0x38
c000f663:	5b                   	pop    ebx
c000f664:	c3                   	ret    
c000f665:	90                   	nop
c000f666:	66 90                	xchg   ax,ax

c000f668 <ACPI::ACPI()>:
c000f668:	83 ec 0c             	sub    esp,0xc
c000f66b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f66f:	83 ec 08             	sub    esp,0x8
c000f672:	68 b1 1b 02 c0       	push   0xc0021bb1
c000f677:	50                   	push   eax
c000f678:	e8 65 d2 ff ff       	call   c000c8e2 <Device::Device(char const*)>
c000f67d:	83 c4 10             	add    esp,0x10
c000f680:	ba 04 1d 02 c0       	mov    edx,0xc0021d04
c000f685:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f689:	89 10                	mov    DWORD PTR [eax],edx
c000f68b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f68f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000f696:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f69a:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000f6a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6a8:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000f6b2:	e8 f9 fa ff ff       	call   c000f1b0 <scanMADT()>
c000f6b7:	90                   	nop
c000f6b8:	83 c4 0c             	add    esp,0xc
c000f6bb:	c3                   	ret    

c000f6bc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000f6bc:	83 ec 2c             	sub    esp,0x2c
c000f6bf:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000f6c3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f6c7:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000f6cb:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000f6cf:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000f6d4:	88 d0                	mov    al,dl
c000f6d6:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f6da:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f6df:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000f6e7:	90                   	nop
c000f6e8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f6ec:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f6f2:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000f6f6:	0f 8d b0 00 00 00    	jge    c000f7ac <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000f6fc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f700:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f704:	83 c2 2a             	add    edx,0x2a
c000f707:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000f70b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000f710:	0f b7 c0             	movzx  eax,ax
c000f713:	39 c2                	cmp    edx,eax
c000f715:	0f 85 85 00 00 00    	jne    c000f7a0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f71b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f71f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f723:	83 c2 2a             	add    edx,0x2a
c000f726:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000f72a:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000f72f:	0f b6 c0             	movzx  eax,al
c000f732:	39 c2                	cmp    edx,eax
c000f734:	75 6a                	jne    c000f7a0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f736:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f73b:	85 c0                	test   eax,eax
c000f73d:	74 3d                	je     c000f77c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000f73f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f743:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f747:	83 c2 2a             	add    edx,0x2a
c000f74a:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000f74e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f752:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f755:	39 c2                	cmp    edx,eax
c000f757:	74 13                	je     c000f76c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000f759:	83 ec 0c             	sub    esp,0xc
c000f75c:	68 2c 1b 02 c0       	push   0xc0021b2c
c000f761:	e8 13 1c 00 00       	call   c0011379 <KePanic(char const*)>
c000f766:	83 c4 10             	add    esp,0x10
c000f769:	8d 76 00             	lea    esi,[esi+0x0]
c000f76c:	83 ec 0c             	sub    esp,0xc
c000f76f:	68 b6 1b 02 c0       	push   0xc0021bb6
c000f774:	e8 00 1c 00 00       	call   c0011379 <KePanic(char const*)>
c000f779:	83 c4 10             	add    esp,0x10
c000f77c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f780:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f784:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f788:	83 c2 2a             	add    edx,0x2a
c000f78b:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000f78f:	8b 02                	mov    eax,DWORD PTR [edx]
c000f791:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000f794:	89 01                	mov    DWORD PTR [ecx],eax
c000f796:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000f799:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f79e:	66 90                	xchg   ax,ax
c000f7a0:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000f7a5:	e9 3e ff ff ff       	jmp    c000f6e8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000f7aa:	66 90                	xchg   ax,ax
c000f7ac:	90                   	nop
c000f7ad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f7b1:	83 c4 2c             	add    esp,0x2c
c000f7b4:	c2 04 00             	ret    0x4
c000f7b7:	90                   	nop

c000f7b8 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000f7b8:	83 ec 1c             	sub    esp,0x1c
c000f7bb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f7bf:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000f7c3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f7c7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000f7cc:	88 c8                	mov    al,cl
c000f7ce:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000f7d2:	88 d0                	mov    al,dl
c000f7d4:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f7d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f7dc:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f7e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f7e6:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000f7e9:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000f7ed:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000f7f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f7f5:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f7fb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000f7ff:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000f802:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f806:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000f80b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f80f:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f815:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000f819:	83 c0 01             	add    eax,0x1
c000f81c:	88 c1                	mov    cl,al
c000f81e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f822:	83 c2 2a             	add    edx,0x2a
c000f825:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000f829:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f82d:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f833:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f837:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000f83a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f83e:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000f842:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f846:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f84c:	8d 50 01             	lea    edx,[eax+0x1]
c000f84f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f853:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000f859:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f85d:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f863:	3d 00 02 00 00       	cmp    eax,0x200
c000f868:	75 12                	jne    c000f87c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000f86a:	83 ec 0c             	sub    esp,0xc
c000f86d:	68 c5 1b 02 c0       	push   0xc0021bc5
c000f872:	e8 02 1b 00 00       	call   c0011379 <KePanic(char const*)>
c000f877:	83 c4 10             	add    esp,0x10
c000f87a:	66 90                	xchg   ax,ax
c000f87c:	90                   	nop
c000f87d:	83 c4 1c             	add    esp,0x1c
c000f880:	c3                   	ret    
c000f881:	90                   	nop
c000f882:	66 90                	xchg   ax,ax

c000f884 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000f884:	b8 00 00 00 00       	mov    eax,0x0
c000f889:	c3                   	ret    
c000f88a:	66 90                	xchg   ax,ax

c000f88c <ACPI::detectPCI()>:
c000f88c:	53                   	push   ebx
c000f88d:	83 ec 28             	sub    esp,0x28
c000f890:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f895:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000f89a:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f89f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f8a5:	83 e0 04             	and    eax,0x4
c000f8a8:	0f b6 c0             	movzx  eax,al
c000f8ab:	85 c0                	test   eax,eax
c000f8ad:	74 2d                	je     c000f8dc <ACPI::detectPCI()+0x50>
c000f8af:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000f8b4:	83 ec 08             	sub    esp,0x8
c000f8b7:	68 e2 1b 02 c0       	push   0xc0021be2
c000f8bc:	50                   	push   eax
c000f8bd:	e8 6e f8 ff ff       	call   c000f130 <findDataTable(unsigned char*, char*)>
c000f8c2:	83 c4 10             	add    esp,0x10
c000f8c5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f8c9:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000f8ce:	74 0c                	je     c000f8dc <ACPI::detectPCI()+0x50>
c000f8d0:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f8d5:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f8da:	66 90                	xchg   ax,ax
c000f8dc:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000f8e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f8e8:	8a 00                	mov    al,BYTE PTR [eax]
c000f8ea:	0f b6 c0             	movzx  eax,al
c000f8ed:	83 f8 01             	cmp    eax,0x1
c000f8f0:	75 0e                	jne    c000f900 <ACPI::detectPCI()+0x74>
c000f8f2:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f8f7:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f8fc:	eb 2e                	jmp    c000f92c <ACPI::detectPCI()+0xa0>
c000f8fe:	66 90                	xchg   ax,ax
c000f900:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f904:	8a 00                	mov    al,BYTE PTR [eax]
c000f906:	0f b6 c0             	movzx  eax,al
c000f909:	83 f8 02             	cmp    eax,0x2
c000f90c:	75 1e                	jne    c000f92c <ACPI::detectPCI()+0xa0>
c000f90e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f913:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000f918:	85 c0                	test   eax,eax
c000f91a:	74 10                	je     c000f92c <ACPI::detectPCI()+0xa0>
c000f91c:	83 ec 0c             	sub    esp,0xc
c000f91f:	68 5c 1b 02 c0       	push   0xc0021b5c
c000f924:	e8 50 1a 00 00       	call   c0011379 <KePanic(char const*)>
c000f929:	83 c4 10             	add    esp,0x10
c000f92c:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000f930:	83 f0 01             	xor    eax,0x1
c000f933:	0f b6 c0             	movzx  eax,al
c000f936:	85 c0                	test   eax,eax
c000f938:	74 46                	je     c000f980 <ACPI::detectPCI()+0xf4>
c000f93a:	e8 f1 07 ff ff       	call   c0000130 <manualPCIProbe>
c000f93f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f943:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f948:	75 0e                	jne    c000f958 <ACPI::detectPCI()+0xcc>
c000f94a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f94f:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f954:	eb 2a                	jmp    c000f980 <ACPI::detectPCI()+0xf4>
c000f956:	66 90                	xchg   ax,ax
c000f958:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000f95d:	75 21                	jne    c000f980 <ACPI::detectPCI()+0xf4>
c000f95f:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f964:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000f969:	85 c0                	test   eax,eax
c000f96b:	74 13                	je     c000f980 <ACPI::detectPCI()+0xf4>
c000f96d:	83 ec 0c             	sub    esp,0xc
c000f970:	68 5c 1b 02 c0       	push   0xc0021b5c
c000f975:	e8 ff 19 00 00       	call   c0011379 <KePanic(char const*)>
c000f97a:	83 c4 10             	add    esp,0x10
c000f97d:	8d 76 00             	lea    esi,[esi+0x0]
c000f980:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f985:	85 c0                	test   eax,eax
c000f987:	0f 84 87 00 00 00    	je     c000fa14 <ACPI::detectPCI()+0x188>
c000f98d:	83 ec 0c             	sub    esp,0xc
c000f990:	68 e7 1b 02 c0       	push   0xc0021be7
c000f995:	e8 09 13 00 00       	call   c0010ca3 <KeSetBootMessage(char const*)>
c000f99a:	83 c4 10             	add    esp,0x10
c000f99d:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000f9a5:	83 ec 0c             	sub    esp,0xc
c000f9a8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f9ac:	e8 05 81 ff ff       	call   c0007ab6 <malloc>
c000f9b1:	83 c4 10             	add    esp,0x10
c000f9b4:	89 c3                	mov    ebx,eax
c000f9b6:	83 ec 0c             	sub    esp,0xc
c000f9b9:	53                   	push   ebx
c000f9ba:	e8 55 b4 00 00       	call   c001ae14 <PCI::PCI()>
c000f9bf:	83 c4 10             	add    esp,0x10
c000f9c2:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000f9c6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f9ca:	83 ec 08             	sub    esp,0x8
c000f9cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f9d1:	50                   	push   eax
c000f9d2:	e8 73 cd ff ff       	call   c000c74a <Device::addChild(Device*)>
c000f9d7:	83 c4 10             	add    esp,0x10
c000f9da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f9de:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9e0:	83 c0 08             	add    eax,0x8
c000f9e3:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9e5:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000f9ea:	85 d2                	test   edx,edx
c000f9ec:	74 0a                	je     c000f9f8 <ACPI::detectPCI()+0x16c>
c000f9ee:	ba 01 00 00 00       	mov    edx,0x1
c000f9f3:	eb 0b                	jmp    c000fa00 <ACPI::detectPCI()+0x174>
c000f9f5:	8d 76 00             	lea    esi,[esi+0x0]
c000f9f8:	ba 02 00 00 00       	mov    edx,0x2
c000f9fd:	8d 76 00             	lea    esi,[esi+0x0]
c000fa00:	6a 00                	push   0x0
c000fa02:	6a 00                	push   0x0
c000fa04:	52                   	push   edx
c000fa05:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fa09:	ff d0                	call   eax
c000fa0b:	83 c4 10             	add    esp,0x10
c000fa0e:	e9 91 00 00 00       	jmp    c000faa4 <ACPI::detectPCI()+0x218>
c000fa13:	90                   	nop
c000fa14:	83 ec 0c             	sub    esp,0xc
c000fa17:	68 ff 1b 02 c0       	push   0xc0021bff
c000fa1c:	e8 82 12 00 00       	call   c0010ca3 <KeSetBootMessage(char const*)>
c000fa21:	83 c4 10             	add    esp,0x10
c000fa24:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000fa2b:	83 ec 0c             	sub    esp,0xc
c000fa2e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fa32:	e8 7f 80 ff ff       	call   c0007ab6 <malloc>
c000fa37:	83 c4 10             	add    esp,0x10
c000fa3a:	89 c3                	mov    ebx,eax
c000fa3c:	83 ec 0c             	sub    esp,0xc
c000fa3f:	53                   	push   ebx
c000fa40:	e8 69 bf 00 00       	call   c001b9ae <IDE::IDE()>
c000fa45:	83 c4 10             	add    esp,0x10
c000fa48:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000fa4c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fa50:	83 ec 08             	sub    esp,0x8
c000fa53:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fa57:	50                   	push   eax
c000fa58:	e8 ed cc ff ff       	call   c000c74a <Device::addChild(Device*)>
c000fa5d:	83 c4 10             	add    esp,0x10
c000fa60:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa64:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000fa6e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa72:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000fa7b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa7f:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000fa88:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa8c:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa8e:	83 c0 08             	add    eax,0x8
c000fa91:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa93:	6a 00                	push   0x0
c000fa95:	6a 00                	push   0x0
c000fa97:	6a 00                	push   0x0
c000fa99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fa9d:	ff d0                	call   eax
c000fa9f:	83 c4 10             	add    esp,0x10
c000faa2:	66 90                	xchg   ax,ax
c000faa4:	90                   	nop
c000faa5:	83 c4 28             	add    esp,0x28
c000faa8:	5b                   	pop    ebx
c000faa9:	c3                   	ret    
c000faaa:	66 90                	xchg   ax,ax

c000faac <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000faac:	83 ec 1c             	sub    esp,0x1c
c000faaf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fab3:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fab6:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000faba:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000fabf:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000fac4:	83 ec 08             	sub    esp,0x8
c000fac7:	52                   	push   edx
c000fac8:	50                   	push   eax
c000fac9:	e8 aa 76 ff ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c000face:	83 c4 10             	add    esp,0x10
c000fad1:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000fad5:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000fada:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000fadf:	83 ec 04             	sub    esp,0x4
c000fae2:	6a 01                	push   0x1
c000fae4:	52                   	push   edx
c000fae5:	50                   	push   eax
c000fae6:	e8 a7 77 ff ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c000faeb:	83 c4 10             	add    esp,0x10
c000faee:	90                   	nop
c000faef:	83 c4 1c             	add    esp,0x1c
c000faf2:	c3                   	ret    
c000faf3:	90                   	nop

c000faf4 <ACPI::sleep()>:
c000faf4:	83 ec 0c             	sub    esp,0xc
c000faf7:	a1 00 89 02 c0       	mov    eax,ds:0xc0028900
c000fafc:	85 c0                	test   eax,eax
c000fafe:	74 08                	je     c000fb08 <ACPI::sleep()+0x14>
c000fb00:	a1 00 89 02 c0       	mov    eax,ds:0xc0028900
c000fb05:	ff d0                	call   eax
c000fb07:	90                   	nop
c000fb08:	90                   	nop
c000fb09:	83 c4 0c             	add    esp,0xc
c000fb0c:	c3                   	ret    
c000fb0d:	90                   	nop
c000fb0e:	66 90                	xchg   ax,ax

c000fb10 <ACPI::open(int, int, void*)>:
c000fb10:	57                   	push   edi
c000fb11:	56                   	push   esi
c000fb12:	53                   	push   ebx
c000fb13:	81 ec 70 01 00 00    	sub    esp,0x170
c000fb19:	83 ec 0c             	sub    esp,0xc
c000fb1c:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000fb23:	e8 64 fd ff ff       	call   c000f88c <ACPI::detectPCI()>
c000fb28:	83 c4 10             	add    esp,0x10
c000fb2b:	83 ec 0c             	sub    esp,0xc
c000fb2e:	68 84 1b 02 c0       	push   0xc0021b84
c000fb33:	e8 6b 11 00 00       	call   c0010ca3 <KeSetBootMessage(char const*)>
c000fb38:	83 c4 10             	add    esp,0x10
c000fb3b:	b8 4c 05 00 00       	mov    eax,0x54c
c000fb40:	8a 00                	mov    al,BYTE PTR [eax]
c000fb42:	88 84 24 6e 01 00 00 	mov    BYTE PTR [esp+0x16e],al
c000fb49:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000fb51:	83 f8 01             	cmp    eax,0x1
c000fb54:	75 12                	jne    c000fb68 <ACPI::open(int, int, void*)+0x58>
c000fb56:	83 ec 0c             	sub    esp,0xc
c000fb59:	68 d1 14 02 c0       	push   0xc00214d1
c000fb5e:	e8 fe 4c 00 00       	call   c0014861 <Thr::loadKernelSymbolTable(char const*)>
c000fb63:	83 c4 10             	add    esp,0x10
c000fb66:	eb 34                	jmp    c000fb9c <ACPI::open(int, int, void*)+0x8c>
c000fb68:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000fb70:	3d bb 00 00 00       	cmp    eax,0xbb
c000fb75:	75 15                	jne    c000fb8c <ACPI::open(int, int, void*)+0x7c>
c000fb77:	83 ec 0c             	sub    esp,0xc
c000fb7a:	68 14 1c 02 c0       	push   0xc0021c14
c000fb7f:	e8 dd 4c 00 00       	call   c0014861 <Thr::loadKernelSymbolTable(char const*)>
c000fb84:	83 c4 10             	add    esp,0x10
c000fb87:	eb 13                	jmp    c000fb9c <ACPI::open(int, int, void*)+0x8c>
c000fb89:	8d 76 00             	lea    esi,[esi+0x0]
c000fb8c:	83 ec 0c             	sub    esp,0xc
c000fb8f:	68 32 1c 02 c0       	push   0xc0021c32
c000fb94:	e8 e0 17 00 00       	call   c0011379 <KePanic(char const*)>
c000fb99:	83 c4 10             	add    esp,0x10
c000fb9c:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000fba4:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000fbaf:	83 ec 0c             	sub    esp,0xc
c000fbb2:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000fbb9:	e8 f8 7e ff ff       	call   c0007ab6 <malloc>
c000fbbe:	83 c4 10             	add    esp,0x10
c000fbc1:	89 c3                	mov    ebx,eax
c000fbc3:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000fbc8:	83 ec 04             	sub    esp,0x4
c000fbcb:	50                   	push   eax
c000fbcc:	68 4c 1c 02 c0       	push   0xc0021c4c
c000fbd1:	53                   	push   ebx
c000fbd2:	e8 f9 bc ff ff       	call   c000b8d0 <File::File(char const*, Process*)>
c000fbd7:	83 c4 10             	add    esp,0x10
c000fbda:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000fbe1:	83 ec 08             	sub    esp,0x8
c000fbe4:	6a 01                	push   0x1
c000fbe6:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000fbed:	e8 fc bc ff ff       	call   c000b8ee <File::open(FileOpenMode)>
c000fbf2:	83 c4 10             	add    esp,0x10
c000fbf5:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000fbfc:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000fc04:	75 16                	jne    c000fc1c <ACPI::open(int, int, void*)+0x10c>
c000fc06:	83 ec 0c             	sub    esp,0xc
c000fc09:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000fc10:	e8 37 bd ff ff       	call   c000b94c <File::close()>
c000fc15:	83 c4 10             	add    esp,0x10
c000fc18:	eb 0a                	jmp    c000fc24 <ACPI::open(int, int, void*)+0x114>
c000fc1a:	66 90                	xchg   ax,ax
c000fc1c:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000fc24:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000fc2c:	74 1e                	je     c000fc4c <ACPI::open(int, int, void*)+0x13c>
c000fc2e:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000fc35:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc37:	83 c0 08             	add    eax,0x8
c000fc3a:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc3c:	83 ec 0c             	sub    esp,0xc
c000fc3f:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000fc46:	ff d0                	call   eax
c000fc48:	83 c4 10             	add    esp,0x10
c000fc4b:	90                   	nop
c000fc4c:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000fc53:	83 f0 01             	xor    eax,0x1
c000fc56:	0f b6 c0             	movzx  eax,al
c000fc59:	85 c0                	test   eax,eax
c000fc5b:	74 43                	je     c000fca0 <ACPI::open(int, int, void*)+0x190>
c000fc5d:	83 ec 0c             	sub    esp,0xc
c000fc60:	68 6a 1c 02 c0       	push   0xc0021c6a
c000fc65:	e8 39 10 00 00       	call   c0010ca3 <KeSetBootMessage(char const*)>
c000fc6a:	83 c4 10             	add    esp,0x10
c000fc6d:	83 ec 04             	sub    esp,0x4
c000fc70:	6a 0c                	push   0xc
c000fc72:	68 85 1c 02 c0       	push   0xc0021c85
c000fc77:	68 96 1c 02 c0       	push   0xc0021c96
c000fc7c:	e8 63 3e 00 00       	call   c0013ae4 <Reg::readIntWithDefault(char*, char*, int)>
c000fc81:	83 c4 10             	add    esp,0x10
c000fc84:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000fc8b:	83 ec 0c             	sub    esp,0xc
c000fc8e:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000fc95:	e8 a2 9b ff ff       	call   c000983c <Virt::setupPageSwapping(int)>
c000fc9a:	83 c4 10             	add    esp,0x10
c000fc9d:	8d 76 00             	lea    esi,[esi+0x0]
c000fca0:	83 ec 0c             	sub    esp,0xc
c000fca3:	68 95 07 02 c0       	push   0xc0020795
c000fca8:	e8 f6 0f 00 00       	call   c0010ca3 <KeSetBootMessage(char const*)>
c000fcad:	83 c4 10             	add    esp,0x10
c000fcb0:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000fcb7:	83 ec 08             	sub    esp,0x8
c000fcba:	6a 13                	push   0x13
c000fcbc:	50                   	push   eax
c000fcbd:	e8 a0 cd ff ff       	call   c000ca62 <getDevicesOfType(DeviceType)>
c000fcc2:	83 c4 0c             	add    esp,0xc
c000fcc5:	8d 76 00             	lea    esi,[esi+0x0]
c000fcc8:	83 ec 0c             	sub    esp,0xc
c000fccb:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000fcd2:	50                   	push   eax
c000fcd3:	e8 b8 fe 00 00       	call   c001fb90 <LinkedList<Device>::isEmpty()>
c000fcd8:	83 c4 10             	add    esp,0x10
c000fcdb:	83 f0 01             	xor    eax,0x1
c000fcde:	0f b6 c0             	movzx  eax,al
c000fce1:	85 c0                	test   eax,eax
c000fce3:	0f 84 47 01 00 00    	je     c000fe30 <ACPI::open(int, int, void*)+0x320>
c000fce9:	83 ec 0c             	sub    esp,0xc
c000fcec:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000fcf3:	50                   	push   eax
c000fcf4:	e8 b3 fe 00 00       	call   c001fbac <LinkedList<Device>::getFirstElement()>
c000fcf9:	83 c4 10             	add    esp,0x10
c000fcfc:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000fd03:	83 ec 0c             	sub    esp,0xc
c000fd06:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000fd0d:	50                   	push   eax
c000fd0e:	e8 a1 fe 00 00       	call   c001fbb4 <LinkedList<Device>::removeFirst()>
c000fd13:	83 c4 10             	add    esp,0x10
c000fd16:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000fd1d:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000fd24:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000fd2b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fd2f:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000fd35:	ba 09 00 00 00       	mov    edx,0x9
c000fd3a:	fc                   	cld    
c000fd3b:	89 c7                	mov    edi,eax
c000fd3d:	89 de                	mov    esi,ebx
c000fd3f:	89 d1                	mov    ecx,edx
c000fd41:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000fd43:	83 ec 08             	sub    esp,0x8
c000fd46:	8d 44 24 38          	lea    eax,[esp+0x38]
c000fd4a:	50                   	push   eax
c000fd4b:	83 ec 24             	sub    esp,0x24
c000fd4e:	89 e0                	mov    eax,esp
c000fd50:	89 c3                	mov    ebx,eax
c000fd52:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000fd56:	ba 09 00 00 00       	mov    edx,0x9
c000fd5b:	89 df                	mov    edi,ebx
c000fd5d:	89 c6                	mov    esi,eax
c000fd5f:	89 d1                	mov    ecx,edx
c000fd61:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000fd63:	e8 96 b5 00 00       	call   c001b2fe <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000fd68:	83 c4 30             	add    esp,0x30
c000fd6b:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000fd72:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000fd7a:	0f 84 48 ff ff ff    	je     c000fcc8 <ACPI::open(int, int, void*)+0x1b8>
c000fd80:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000fd8b:	83 ec 0c             	sub    esp,0xc
c000fd8e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000fd95:	e8 1c 7d ff ff       	call   c0007ab6 <malloc>
c000fd9a:	83 c4 10             	add    esp,0x10
c000fd9d:	89 c3                	mov    ebx,eax
c000fd9f:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000fda4:	83 ec 04             	sub    esp,0x4
c000fda7:	50                   	push   eax
c000fda8:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000fdaf:	53                   	push   ebx
c000fdb0:	e8 1b bb ff ff       	call   c000b8d0 <File::File(char const*, Process*)>
c000fdb5:	83 c4 10             	add    esp,0x10
c000fdb8:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000fdbf:	83 ec 0c             	sub    esp,0xc
c000fdc2:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000fdc9:	e8 e4 bd ff ff       	call   c000bbb2 <File::exists()>
c000fdce:	83 c4 10             	add    esp,0x10
c000fdd1:	0f b6 c0             	movzx  eax,al
c000fdd4:	85 c0                	test   eax,eax
c000fdd6:	74 28                	je     c000fe00 <ACPI::open(int, int, void*)+0x2f0>
c000fdd8:	83 ec 08             	sub    esp,0x8
c000fddb:	6a 01                	push   0x1
c000fddd:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000fde4:	e8 f2 54 00 00       	call   c00152db <Thr::loadDLL(char const*, bool)>
c000fde9:	83 c4 10             	add    esp,0x10
c000fdec:	83 ec 08             	sub    esp,0x8
c000fdef:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000fdf6:	50                   	push   eax
c000fdf7:	e8 10 57 00 00       	call   c001550c <Thr::executeDLL(unsigned long, void*)>
c000fdfc:	83 c4 10             	add    esp,0x10
c000fdff:	90                   	nop
c000fe00:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000fe08:	0f 84 ba fe ff ff    	je     c000fcc8 <ACPI::open(int, int, void*)+0x1b8>
c000fe0e:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000fe15:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe17:	83 c0 08             	add    eax,0x8
c000fe1a:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe1c:	83 ec 0c             	sub    esp,0xc
c000fe1f:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000fe26:	ff d0                	call   eax
c000fe28:	83 c4 10             	add    esp,0x10
c000fe2b:	e9 98 fe ff ff       	jmp    c000fcc8 <ACPI::open(int, int, void*)+0x1b8>
c000fe30:	83 ec 0c             	sub    esp,0xc
c000fe33:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000fe3a:	50                   	push   eax
c000fe3b:	e8 4c fd 00 00       	call   c001fb8c <LinkedList<Device>::~LinkedList()>
c000fe40:	83 c4 10             	add    esp,0x10
c000fe43:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000fe49:	83 ec 08             	sub    esp,0x8
c000fe4c:	6a 01                	push   0x1
c000fe4e:	68 9d 1c 02 c0       	push   0xc0021c9d
c000fe53:	e8 83 54 00 00       	call   c00152db <Thr::loadDLL(char const*, bool)>
c000fe58:	83 c4 10             	add    esp,0x10
c000fe5b:	83 ec 08             	sub    esp,0x8
c000fe5e:	53                   	push   ebx
c000fe5f:	50                   	push   eax
c000fe60:	e8 a7 56 00 00       	call   c001550c <Thr::executeDLL(unsigned long, void*)>
c000fe65:	83 c4 10             	add    esp,0x10
c000fe68:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000fe6d:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000fe73:	83 e0 04             	and    eax,0x4
c000fe76:	0f b6 c0             	movzx  eax,al
c000fe79:	85 c0                	test   eax,eax
c000fe7b:	0f 84 1b 01 00 00    	je     c000ff9c <ACPI::open(int, int, void*)+0x48c>
c000fe81:	83 ec 0c             	sub    esp,0xc
c000fe84:	68 ba 1c 02 c0       	push   0xc0021cba
c000fe89:	e8 15 0e 00 00       	call   c0010ca3 <KeSetBootMessage(char const*)>
c000fe8e:	83 c4 10             	add    esp,0x10
c000fe91:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000fe9c:	83 ec 0c             	sub    esp,0xc
c000fe9f:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000fea6:	e8 0b 7c ff ff       	call   c0007ab6 <malloc>
c000feab:	83 c4 10             	add    esp,0x10
c000feae:	89 c3                	mov    ebx,eax
c000feb0:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000feb5:	83 ec 04             	sub    esp,0x4
c000feb8:	50                   	push   eax
c000feb9:	68 d7 1c 02 c0       	push   0xc0021cd7
c000febe:	53                   	push   ebx
c000febf:	e8 0c ba ff ff       	call   c000b8d0 <File::File(char const*, Process*)>
c000fec4:	83 c4 10             	add    esp,0x10
c000fec7:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000fece:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000fed6:	74 20                	je     c000fef8 <ACPI::open(int, int, void*)+0x3e8>
c000fed8:	83 ec 0c             	sub    esp,0xc
c000fedb:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000fee2:	e8 cb bc ff ff       	call   c000bbb2 <File::exists()>
c000fee7:	83 c4 10             	add    esp,0x10
c000feea:	0f b6 c0             	movzx  eax,al
c000feed:	85 c0                	test   eax,eax
c000feef:	74 07                	je     c000fef8 <ACPI::open(int, int, void*)+0x3e8>
c000fef1:	b0 01                	mov    al,0x1
c000fef3:	eb 07                	jmp    c000fefc <ACPI::open(int, int, void*)+0x3ec>
c000fef5:	8d 76 00             	lea    esi,[esi+0x0]
c000fef8:	b0 00                	mov    al,0x0
c000fefa:	66 90                	xchg   ax,ax
c000fefc:	0f b6 c0             	movzx  eax,al
c000feff:	85 c0                	test   eax,eax
c000ff01:	74 25                	je     c000ff28 <ACPI::open(int, int, void*)+0x418>
c000ff03:	83 ec 08             	sub    esp,0x8
c000ff06:	6a 01                	push   0x1
c000ff08:	68 d7 1c 02 c0       	push   0xc0021cd7
c000ff0d:	e8 c9 53 00 00       	call   c00152db <Thr::loadDLL(char const*, bool)>
c000ff12:	83 c4 10             	add    esp,0x10
c000ff15:	83 ec 08             	sub    esp,0x8
c000ff18:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000ff1f:	50                   	push   eax
c000ff20:	e8 e7 55 00 00       	call   c001550c <Thr::executeDLL(unsigned long, void*)>
c000ff25:	83 c4 10             	add    esp,0x10
c000ff28:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000ff30:	74 2a                	je     c000ff5c <ACPI::open(int, int, void*)+0x44c>
c000ff32:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000ff3a:	74 20                	je     c000ff5c <ACPI::open(int, int, void*)+0x44c>
c000ff3c:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000ff43:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff45:	83 c0 08             	add    eax,0x8
c000ff48:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff4a:	83 ec 0c             	sub    esp,0xc
c000ff4d:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000ff54:	ff d0                	call   eax
c000ff56:	83 c4 10             	add    esp,0x10
c000ff59:	8d 76 00             	lea    esi,[esi+0x0]
c000ff5c:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000ff61:	83 ec 08             	sub    esp,0x8
c000ff64:	68 f4 1c 02 c0       	push   0xc0021cf4
c000ff69:	50                   	push   eax
c000ff6a:	e8 c1 f1 ff ff       	call   c000f130 <findDataTable(unsigned char*, char*)>
c000ff6f:	83 c4 10             	add    esp,0x10
c000ff72:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000ff79:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000ff81:	74 19                	je     c000ff9c <ACPI::open(int, int, void*)+0x48c>
c000ff83:	83 ec 08             	sub    esp,0x8
c000ff86:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000ff8d:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000ff94:	e8 13 fb ff ff       	call   c000faac <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000ff99:	83 c4 10             	add    esp,0x10
c000ff9c:	b8 00 00 00 00       	mov    eax,0x0
c000ffa1:	81 c4 70 01 00 00    	add    esp,0x170
c000ffa7:	5b                   	pop    ebx
c000ffa8:	5e                   	pop    esi
c000ffa9:	5f                   	pop    edi
c000ffaa:	c3                   	ret    
c000ffab:	90                   	nop

c000ffac <CPU::close(int, int, void*)>:
c000ffac:	31 c0                	xor    eax,eax
c000ffae:	c3                   	ret    
c000ffaf:	90                   	nop

c000ffb0 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000ffb0:	60                   	pusha  
c000ffb1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ffb5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ffb9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ffbd:	9c                   	pushf  
c000ffbe:	fa                   	cli    
c000ffbf:	0f 09                	wbinvd 
c000ffc1:	0f 30                	wrmsr  
c000ffc3:	9d                   	popf   
c000ffc4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ffc8:	89 02                	mov    DWORD PTR [edx],eax
c000ffca:	61                   	popa   
c000ffcb:	c3                   	ret    

c000ffcc <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000ffcc:	60                   	pusha  
c000ffcd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ffd1:	9c                   	pushf  
c000ffd2:	fa                   	cli    
c000ffd3:	0f 09                	wbinvd 
c000ffd5:	31 c0                	xor    eax,eax
c000ffd7:	31 d2                	xor    edx,edx
c000ffd9:	0f 32                	rdmsr  
c000ffdb:	9d                   	popf   
c000ffdc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ffe0:	89 02                	mov    DWORD PTR [edx],eax
c000ffe2:	61                   	popa   
c000ffe3:	c3                   	ret    

c000ffe4 <CPU::AMD_K6_writeback(int, int, int)>:
c000ffe4:	56                   	push   esi
c000ffe5:	53                   	push   ebx
c000ffe6:	83 ec 10             	sub    esp,0x10
c000ffe9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ffed:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000fff2:	75 5d                	jne    c0010051 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000fff4:	83 f8 08             	cmp    eax,0x8
c000fff7:	75 09                	jne    c0010002 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000fff9:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000fffe:	7e 13                	jle    c0010013 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0010000:	eb 30                	jmp    c0010032 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0010002:	83 f8 06             	cmp    eax,0x6
c0010005:	7c 4a                	jl     c0010051 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0010007:	83 f8 07             	cmp    eax,0x7
c001000a:	7e 07                	jle    c0010013 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001000c:	83 f8 09             	cmp    eax,0x9
c001000f:	74 21                	je     c0010032 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0010011:	eb 3e                	jmp    c0010051 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0010013:	89 e6                	mov    esi,esp
c0010015:	8b 1d dc 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025edc
c001001b:	56                   	push   esi
c001001c:	c1 eb 15             	shr    ebx,0x15
c001001f:	68 82 00 00 c0       	push   0xc0000082
c0010024:	83 e3 7e             	and    ebx,0x7e
c0010027:	e8 a0 ff ff ff       	call   c000ffcc <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001002c:	56                   	push   esi
c001002d:	6a 00                	push   0x0
c001002f:	53                   	push   ebx
c0010030:	eb 12                	jmp    c0010044 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0010032:	89 e3                	mov    ebx,esp
c0010034:	53                   	push   ebx
c0010035:	68 82 00 00 c0       	push   0xc0000082
c001003a:	e8 8d ff ff ff       	call   c000ffcc <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001003f:	53                   	push   ebx
c0010040:	6a 00                	push   0x0
c0010042:	6a 00                	push   0x0
c0010044:	68 82 00 00 c0       	push   0xc0000082
c0010049:	e8 62 ff ff ff       	call   c000ffb0 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c001004e:	83 c4 18             	add    esp,0x18
c0010051:	83 c4 10             	add    esp,0x10
c0010054:	5b                   	pop    ebx
c0010055:	5e                   	pop    esi
c0010056:	c3                   	ret    
c0010057:	90                   	nop

c0010058 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0010058:	55                   	push   ebp
c0010059:	57                   	push   edi
c001005a:	56                   	push   esi
c001005b:	53                   	push   ebx
c001005c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010060:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0010064:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010068:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001006c:	39 05 b8 32 02 c0    	cmp    DWORD PTR ds:0xc00232b8,eax
c0010072:	75 23                	jne    c0010097 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0010074:	a1 8c 8d 02 c0       	mov    eax,ds:0xc0028d8c
c0010079:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001007d:	89 06                	mov    DWORD PTR [esi],eax
c001007f:	a1 88 8d 02 c0       	mov    eax,ds:0xc0028d88
c0010084:	89 07                	mov    DWORD PTR [edi],eax
c0010086:	a1 84 8d 02 c0       	mov    eax,ds:0xc0028d84
c001008b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001008e:	a1 80 8d 02 c0       	mov    eax,ds:0xc0028d80
c0010093:	89 02                	mov    DWORD PTR [edx],eax
c0010095:	eb 3f                	jmp    c00100d6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0010097:	31 c9                	xor    ecx,ecx
c0010099:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001009d:	0f a2                	cpuid  
c001009f:	89 06                	mov    DWORD PTR [esi],eax
c00100a1:	89 1f                	mov    DWORD PTR [edi],ebx
c00100a3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00100a7:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00100aa:	89 10                	mov    DWORD PTR [eax],edx
c00100ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00100b0:	a3 b8 32 02 c0       	mov    ds:0xc00232b8,eax
c00100b5:	8b 06                	mov    eax,DWORD PTR [esi]
c00100b7:	a3 8c 8d 02 c0       	mov    ds:0xc0028d8c,eax
c00100bc:	8b 07                	mov    eax,DWORD PTR [edi]
c00100be:	a3 88 8d 02 c0       	mov    ds:0xc0028d88,eax
c00100c3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00100c6:	a3 84 8d 02 c0       	mov    ds:0xc0028d84,eax
c00100cb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00100cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00100d1:	a3 80 8d 02 c0       	mov    ds:0xc0028d80,eax
c00100d6:	5b                   	pop    ebx
c00100d7:	5e                   	pop    esi
c00100d8:	5f                   	pop    edi
c00100d9:	5d                   	pop    ebp
c00100da:	c3                   	ret    
c00100db:	90                   	nop

c00100dc <CPU::cpuidCheckEDX(unsigned int)>:
c00100dc:	83 ec 10             	sub    esp,0x10
c00100df:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00100e3:	50                   	push   eax
c00100e4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00100e8:	50                   	push   eax
c00100e9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00100ed:	50                   	push   eax
c00100ee:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00100f2:	50                   	push   eax
c00100f3:	6a 01                	push   0x1
c00100f5:	e8 5e ff ff ff       	call   c0010058 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00100fa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00100fe:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0010102:	0f 95 c0             	setne  al
c0010105:	83 c4 24             	add    esp,0x24
c0010108:	c3                   	ret    
c0010109:	90                   	nop

c001010a <CPU::cpuidCheckECX(unsigned int)>:
c001010a:	83 ec 10             	sub    esp,0x10
c001010d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010111:	50                   	push   eax
c0010112:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010116:	50                   	push   eax
c0010117:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001011b:	50                   	push   eax
c001011c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010120:	50                   	push   eax
c0010121:	6a 01                	push   0x1
c0010123:	e8 30 ff ff ff       	call   c0010058 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010128:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001012c:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0010130:	0f 95 c0             	setne  al
c0010133:	83 c4 24             	add    esp,0x24
c0010136:	c3                   	ret    
c0010137:	90                   	nop

c0010138 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0010138:	83 ec 10             	sub    esp,0x10
c001013b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001013f:	50                   	push   eax
c0010140:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010144:	50                   	push   eax
c0010145:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010149:	50                   	push   eax
c001014a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001014e:	50                   	push   eax
c001014f:	6a 07                	push   0x7
c0010151:	e8 02 ff ff ff       	call   c0010058 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010156:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001015a:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c001015e:	0f 95 c0             	setne  al
c0010161:	83 c4 24             	add    esp,0x24
c0010164:	c3                   	ret    
c0010165:	90                   	nop

c0010166 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0010166:	83 ec 10             	sub    esp,0x10
c0010169:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001016d:	50                   	push   eax
c001016e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010172:	50                   	push   eax
c0010173:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010177:	50                   	push   eax
c0010178:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001017c:	50                   	push   eax
c001017d:	6a 07                	push   0x7
c001017f:	e8 d4 fe ff ff       	call   c0010058 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010184:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010188:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001018c:	0f 95 c0             	setne  al
c001018f:	83 c4 24             	add    esp,0x24
c0010192:	c3                   	ret    
c0010193:	90                   	nop

c0010194 <CPU::CPU()>:
c0010194:	83 ec 0c             	sub    esp,0xc
c0010197:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001019b:	83 ec 08             	sub    esp,0x8
c001019e:	68 19 1e 02 c0       	push   0xc0021e19
c00101a3:	50                   	push   eax
c00101a4:	e8 39 c7 ff ff       	call   c000c8e2 <Device::Device(char const*)>
c00101a9:	83 c4 10             	add    esp,0x10
c00101ac:	ba ac 1e 02 c0       	mov    edx,0xc0021eac
c00101b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101b5:	89 10                	mov    DWORD PTR [eax],edx
c00101b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101bb:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c00101c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101c9:	05 78 01 00 00       	add    eax,0x178
c00101ce:	83 ec 0c             	sub    esp,0xc
c00101d1:	50                   	push   eax
c00101d2:	e8 85 71 ff ff       	call   c000735c <GDT::GDT()>
c00101d7:	83 c4 10             	add    esp,0x10
c00101da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101de:	05 7c 09 00 00       	add    eax,0x97c
c00101e3:	83 ec 0c             	sub    esp,0xc
c00101e6:	50                   	push   eax
c00101e7:	e8 c0 73 ff ff       	call   c00075ac <IDT::IDT()>
c00101ec:	83 c4 10             	add    esp,0x10
c00101ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101f3:	05 7c 11 00 00       	add    eax,0x117c
c00101f8:	83 ec 0c             	sub    esp,0xc
c00101fb:	50                   	push   eax
c00101fc:	e8 43 8d ff ff       	call   c0008f44 <TSS::TSS()>
c0010201:	83 c4 10             	add    esp,0x10
c0010204:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010208:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c001020f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010213:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c001021d:	90                   	nop
c001021e:	83 c4 0c             	add    esp,0xc
c0010221:	c3                   	ret    

c0010222 <CPU::displayFeatures()>:
c0010222:	c3                   	ret    
c0010223:	90                   	nop

c0010224 <CPU::detectFeatures()>:
c0010224:	55                   	push   ebp
c0010225:	57                   	push   edi
c0010226:	56                   	push   esi
c0010227:	53                   	push   ebx
c0010228:	83 ec 30             	sub    esp,0x30
c001022b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001022f:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c0010239:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c0010240:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0010246:	6a 0d                	push   0xd
c0010248:	6a 00                	push   0x0
c001024a:	55                   	push   ebp
c001024b:	e8 a0 02 ff ff       	call   c00004f0 <memset>
c0010250:	83 c4 10             	add    esp,0x10
c0010253:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0010258:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c001025f:	0f 84 db 05 00 00    	je     c0010840 <CPU::detectFeatures()+0x61c>
c0010265:	83 ec 0c             	sub    esp,0xc
c0010268:	89 ef                	mov    edi,ebp
c001026a:	6a 10                	push   0x10
c001026c:	e8 6b fe ff ff       	call   c00100dc <CPU::cpuidCheckEDX(unsigned int)>
c0010271:	83 e0 01             	and    eax,0x1
c0010274:	8d 14 00             	lea    edx,[eax+eax*1]
c0010277:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001027d:	83 e0 fd             	and    eax,0xfffffffd
c0010280:	09 d0                	or     eax,edx
c0010282:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010288:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c001028f:	e8 48 fe ff ff       	call   c00100dc <CPU::cpuidCheckEDX(unsigned int)>
c0010294:	83 e0 01             	and    eax,0x1
c0010297:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001029e:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00102a4:	83 e0 fb             	and    eax,0xfffffffb
c00102a7:	09 d0                	or     eax,edx
c00102a9:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00102af:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00102b6:	e8 21 fe ff ff       	call   c00100dc <CPU::cpuidCheckEDX(unsigned int)>
c00102bb:	83 e0 01             	and    eax,0x1
c00102be:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00102c5:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00102cb:	83 e0 f7             	and    eax,0xfffffff7
c00102ce:	09 d0                	or     eax,edx
c00102d0:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00102d6:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c00102dd:	e8 fa fd ff ff       	call   c00100dc <CPU::cpuidCheckEDX(unsigned int)>
c00102e2:	83 e0 01             	and    eax,0x1
c00102e5:	c1 e0 04             	shl    eax,0x4
c00102e8:	89 c2                	mov    edx,eax
c00102ea:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00102f0:	83 e0 ef             	and    eax,0xffffffef
c00102f3:	09 d0                	or     eax,edx
c00102f5:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00102fb:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0010302:	e8 d5 fd ff ff       	call   c00100dc <CPU::cpuidCheckEDX(unsigned int)>
c0010307:	83 e0 01             	and    eax,0x1
c001030a:	c1 e0 05             	shl    eax,0x5
c001030d:	89 c2                	mov    edx,eax
c001030f:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010315:	83 e0 df             	and    eax,0xffffffdf
c0010318:	09 d0                	or     eax,edx
c001031a:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010320:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0010327:	e8 b0 fd ff ff       	call   c00100dc <CPU::cpuidCheckEDX(unsigned int)>
c001032c:	83 e0 01             	and    eax,0x1
c001032f:	8d 14 00             	lea    edx,[eax+eax*1]
c0010332:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010338:	83 e0 fd             	and    eax,0xfffffffd
c001033b:	09 d0                	or     eax,edx
c001033d:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010343:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c001034a:	e8 8d fd ff ff       	call   c00100dc <CPU::cpuidCheckEDX(unsigned int)>
c001034f:	83 e0 01             	and    eax,0x1
c0010352:	c1 e0 06             	shl    eax,0x6
c0010355:	89 c2                	mov    edx,eax
c0010357:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001035d:	83 e0 bf             	and    eax,0xffffffbf
c0010360:	09 d0                	or     eax,edx
c0010362:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010368:	58                   	pop    eax
c0010369:	8d 44 24 28          	lea    eax,[esp+0x28]
c001036d:	50                   	push   eax
c001036e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010372:	50                   	push   eax
c0010373:	8d 74 24 28          	lea    esi,[esp+0x28]
c0010377:	56                   	push   esi
c0010378:	8d 44 24 28          	lea    eax,[esp+0x28]
c001037c:	50                   	push   eax
c001037d:	6a 00                	push   0x0
c001037f:	e8 d4 fc ff ff       	call   c0010058 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010384:	b8 04 00 00 00       	mov    eax,0x4
c0010389:	89 c1                	mov    ecx,eax
c001038b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001038d:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0010393:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0010397:	89 c1                	mov    ecx,eax
c0010399:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001039b:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c00103a1:	8d 74 24 38          	lea    esi,[esp+0x38]
c00103a5:	89 c1                	mov    ecx,eax
c00103a7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00103a9:	83 c4 18             	add    esp,0x18
c00103ac:	68 28 1d 02 c0       	push   0xc0021d28
c00103b1:	55                   	push   ebp
c00103b2:	e8 99 03 ff ff       	call   c0000750 <strcmp>
c00103b7:	83 c4 10             	add    esp,0x10
c00103ba:	85 c0                	test   eax,eax
c00103bc:	75 0f                	jne    c00103cd <CPU::detectFeatures()+0x1a9>
c00103be:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c00103c8:	e9 22 02 00 00       	jmp    c00105ef <CPU::detectFeatures()+0x3cb>
c00103cd:	50                   	push   eax
c00103ce:	50                   	push   eax
c00103cf:	68 35 1d 02 c0       	push   0xc0021d35
c00103d4:	55                   	push   ebp
c00103d5:	e8 76 03 ff ff       	call   c0000750 <strcmp>
c00103da:	83 c4 10             	add    esp,0x10
c00103dd:	85 c0                	test   eax,eax
c00103df:	74 dd                	je     c00103be <CPU::detectFeatures()+0x19a>
c00103e1:	50                   	push   eax
c00103e2:	50                   	push   eax
c00103e3:	68 42 1d 02 c0       	push   0xc0021d42
c00103e8:	55                   	push   ebp
c00103e9:	e8 62 03 ff ff       	call   c0000750 <strcmp>
c00103ee:	83 c4 10             	add    esp,0x10
c00103f1:	85 c0                	test   eax,eax
c00103f3:	74 2a                	je     c001041f <CPU::detectFeatures()+0x1fb>
c00103f5:	50                   	push   eax
c00103f6:	50                   	push   eax
c00103f7:	68 4f 1d 02 c0       	push   0xc0021d4f
c00103fc:	55                   	push   ebp
c00103fd:	e8 4e 03 ff ff       	call   c0000750 <strcmp>
c0010402:	83 c4 10             	add    esp,0x10
c0010405:	85 c0                	test   eax,eax
c0010407:	74 16                	je     c001041f <CPU::detectFeatures()+0x1fb>
c0010409:	50                   	push   eax
c001040a:	50                   	push   eax
c001040b:	68 5c 1d 02 c0       	push   0xc0021d5c
c0010410:	55                   	push   ebp
c0010411:	e8 3a 03 ff ff       	call   c0000750 <strcmp>
c0010416:	83 c4 10             	add    esp,0x10
c0010419:	85 c0                	test   eax,eax
c001041b:	74 48                	je     c0010465 <CPU::detectFeatures()+0x241>
c001041d:	eb 0f                	jmp    c001042e <CPU::detectFeatures()+0x20a>
c001041f:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0010429:	e9 c1 01 00 00       	jmp    c00105ef <CPU::detectFeatures()+0x3cb>
c001042e:	50                   	push   eax
c001042f:	50                   	push   eax
c0010430:	68 69 1d 02 c0       	push   0xc0021d69
c0010435:	55                   	push   ebp
c0010436:	e8 15 03 ff ff       	call   c0000750 <strcmp>
c001043b:	83 c4 10             	add    esp,0x10
c001043e:	85 c0                	test   eax,eax
c0010440:	74 23                	je     c0010465 <CPU::detectFeatures()+0x241>
c0010442:	57                   	push   edi
c0010443:	57                   	push   edi
c0010444:	68 76 1d 02 c0       	push   0xc0021d76
c0010449:	55                   	push   ebp
c001044a:	e8 01 03 ff ff       	call   c0000750 <strcmp>
c001044f:	83 c4 10             	add    esp,0x10
c0010452:	85 c0                	test   eax,eax
c0010454:	75 1e                	jne    c0010474 <CPU::detectFeatures()+0x250>
c0010456:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0010460:	e9 8a 01 00 00       	jmp    c00105ef <CPU::detectFeatures()+0x3cb>
c0010465:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c001046f:	e9 7b 01 00 00       	jmp    c00105ef <CPU::detectFeatures()+0x3cb>
c0010474:	56                   	push   esi
c0010475:	56                   	push   esi
c0010476:	68 83 1d 02 c0       	push   0xc0021d83
c001047b:	55                   	push   ebp
c001047c:	e8 cf 02 ff ff       	call   c0000750 <strcmp>
c0010481:	83 c4 10             	add    esp,0x10
c0010484:	85 c0                	test   eax,eax
c0010486:	75 0f                	jne    c0010497 <CPU::detectFeatures()+0x273>
c0010488:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0010492:	e9 58 01 00 00       	jmp    c00105ef <CPU::detectFeatures()+0x3cb>
c0010497:	51                   	push   ecx
c0010498:	51                   	push   ecx
c0010499:	68 42 1d 02 c0       	push   0xc0021d42
c001049e:	55                   	push   ebp
c001049f:	e8 ac 02 ff ff       	call   c0000750 <strcmp>
c00104a4:	83 c4 10             	add    esp,0x10
c00104a7:	85 c0                	test   eax,eax
c00104a9:	75 0f                	jne    c00104ba <CPU::detectFeatures()+0x296>
c00104ab:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c00104b5:	e9 35 01 00 00       	jmp    c00105ef <CPU::detectFeatures()+0x3cb>
c00104ba:	52                   	push   edx
c00104bb:	52                   	push   edx
c00104bc:	68 90 1d 02 c0       	push   0xc0021d90
c00104c1:	55                   	push   ebp
c00104c2:	e8 89 02 ff ff       	call   c0000750 <strcmp>
c00104c7:	83 c4 10             	add    esp,0x10
c00104ca:	85 c0                	test   eax,eax
c00104cc:	75 0f                	jne    c00104dd <CPU::detectFeatures()+0x2b9>
c00104ce:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c00104d8:	e9 12 01 00 00       	jmp    c00105ef <CPU::detectFeatures()+0x3cb>
c00104dd:	50                   	push   eax
c00104de:	50                   	push   eax
c00104df:	68 9d 1d 02 c0       	push   0xc0021d9d
c00104e4:	55                   	push   ebp
c00104e5:	e8 66 02 ff ff       	call   c0000750 <strcmp>
c00104ea:	83 c4 10             	add    esp,0x10
c00104ed:	85 c0                	test   eax,eax
c00104ef:	75 0f                	jne    c0010500 <CPU::detectFeatures()+0x2dc>
c00104f1:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c00104fb:	e9 ef 00 00 00       	jmp    c00105ef <CPU::detectFeatures()+0x3cb>
c0010500:	50                   	push   eax
c0010501:	50                   	push   eax
c0010502:	68 aa 1d 02 c0       	push   0xc0021daa
c0010507:	55                   	push   ebp
c0010508:	e8 43 02 ff ff       	call   c0000750 <strcmp>
c001050d:	83 c4 10             	add    esp,0x10
c0010510:	85 c0                	test   eax,eax
c0010512:	75 0f                	jne    c0010523 <CPU::detectFeatures()+0x2ff>
c0010514:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c001051e:	e9 cc 00 00 00       	jmp    c00105ef <CPU::detectFeatures()+0x3cb>
c0010523:	50                   	push   eax
c0010524:	50                   	push   eax
c0010525:	68 b7 1d 02 c0       	push   0xc0021db7
c001052a:	55                   	push   ebp
c001052b:	e8 20 02 ff ff       	call   c0000750 <strcmp>
c0010530:	83 c4 10             	add    esp,0x10
c0010533:	85 c0                	test   eax,eax
c0010535:	75 0f                	jne    c0010546 <CPU::detectFeatures()+0x322>
c0010537:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0010541:	e9 a9 00 00 00       	jmp    c00105ef <CPU::detectFeatures()+0x3cb>
c0010546:	50                   	push   eax
c0010547:	50                   	push   eax
c0010548:	68 c4 1d 02 c0       	push   0xc0021dc4
c001054d:	55                   	push   ebp
c001054e:	e8 fd 01 ff ff       	call   c0000750 <strcmp>
c0010553:	83 c4 10             	add    esp,0x10
c0010556:	85 c0                	test   eax,eax
c0010558:	75 0f                	jne    c0010569 <CPU::detectFeatures()+0x345>
c001055a:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0010564:	e9 86 00 00 00       	jmp    c00105ef <CPU::detectFeatures()+0x3cb>
c0010569:	50                   	push   eax
c001056a:	50                   	push   eax
c001056b:	68 d1 1d 02 c0       	push   0xc0021dd1
c0010570:	55                   	push   ebp
c0010571:	e8 da 01 ff ff       	call   c0000750 <strcmp>
c0010576:	83 c4 10             	add    esp,0x10
c0010579:	85 c0                	test   eax,eax
c001057b:	75 0c                	jne    c0010589 <CPU::detectFeatures()+0x365>
c001057d:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0010587:	eb 66                	jmp    c00105ef <CPU::detectFeatures()+0x3cb>
c0010589:	50                   	push   eax
c001058a:	50                   	push   eax
c001058b:	68 de 1d 02 c0       	push   0xc0021dde
c0010590:	55                   	push   ebp
c0010591:	e8 ba 01 ff ff       	call   c0000750 <strcmp>
c0010596:	83 c4 10             	add    esp,0x10
c0010599:	85 c0                	test   eax,eax
c001059b:	75 0c                	jne    c00105a9 <CPU::detectFeatures()+0x385>
c001059d:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c00105a7:	eb 46                	jmp    c00105ef <CPU::detectFeatures()+0x3cb>
c00105a9:	57                   	push   edi
c00105aa:	57                   	push   edi
c00105ab:	68 eb 1d 02 c0       	push   0xc0021deb
c00105b0:	55                   	push   ebp
c00105b1:	e8 9a 01 ff ff       	call   c0000750 <strcmp>
c00105b6:	83 c4 10             	add    esp,0x10
c00105b9:	85 c0                	test   eax,eax
c00105bb:	74 e0                	je     c001059d <CPU::detectFeatures()+0x379>
c00105bd:	56                   	push   esi
c00105be:	56                   	push   esi
c00105bf:	68 f8 1d 02 c0       	push   0xc0021df8
c00105c4:	55                   	push   ebp
c00105c5:	e8 86 01 ff ff       	call   c0000750 <strcmp>
c00105ca:	83 c4 10             	add    esp,0x10
c00105cd:	85 c0                	test   eax,eax
c00105cf:	74 cc                	je     c001059d <CPU::detectFeatures()+0x379>
c00105d1:	51                   	push   ecx
c00105d2:	51                   	push   ecx
c00105d3:	68 05 1e 02 c0       	push   0xc0021e05
c00105d8:	55                   	push   ebp
c00105d9:	e8 72 01 ff ff       	call   c0000750 <strcmp>
c00105de:	83 c4 10             	add    esp,0x10
c00105e1:	85 c0                	test   eax,eax
c00105e3:	74 b8                	je     c001059d <CPU::detectFeatures()+0x379>
c00105e5:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c00105ef:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c00105f4:	0f 86 be 00 00 00    	jbe    c00106b8 <CPU::detectFeatures()+0x494>
c00105fa:	83 ec 0c             	sub    esp,0xc
c00105fd:	68 80 00 00 00       	push   0x80
c0010602:	e8 31 fb ff ff       	call   c0010138 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0010607:	83 e0 01             	and    eax,0x1
c001060a:	c1 e0 06             	shl    eax,0x6
c001060d:	89 c2                	mov    edx,eax
c001060f:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010615:	83 e0 bf             	and    eax,0xffffffbf
c0010618:	09 d0                	or     eax,edx
c001061a:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010620:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0010627:	e8 0c fb ff ff       	call   c0010138 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001062c:	83 e0 01             	and    eax,0x1
c001062f:	c1 e0 04             	shl    eax,0x4
c0010632:	89 c2                	mov    edx,eax
c0010634:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001063a:	83 e0 ef             	and    eax,0xffffffef
c001063d:	09 d0                	or     eax,edx
c001063f:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010645:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c001064c:	e8 e7 fa ff ff       	call   c0010138 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0010651:	89 c2                	mov    edx,eax
c0010653:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010659:	c1 e2 07             	shl    edx,0x7
c001065c:	83 e0 7f             	and    eax,0x7f
c001065f:	09 d0                	or     eax,edx
c0010661:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010667:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001066e:	e8 f3 fa ff ff       	call   c0010166 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0010673:	83 e0 01             	and    eax,0x1
c0010676:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001067d:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010683:	83 e0 f7             	and    eax,0xfffffff7
c0010686:	09 d0                	or     eax,edx
c0010688:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001068e:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0010695:	e8 cc fa ff ff       	call   c0010166 <CPU::cpuidCheckExtendedECX(unsigned int)>
c001069a:	83 c4 10             	add    esp,0x10
c001069d:	83 e0 01             	and    eax,0x1
c00106a0:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00106a7:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00106ad:	83 e0 fb             	and    eax,0xfffffffb
c00106b0:	09 d0                	or     eax,edx
c00106b2:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c00106b8:	83 ec 0c             	sub    esp,0xc
c00106bb:	8d 44 24 28          	lea    eax,[esp+0x28]
c00106bf:	50                   	push   eax
c00106c0:	8d 44 24 28          	lea    eax,[esp+0x28]
c00106c4:	50                   	push   eax
c00106c5:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00106c9:	57                   	push   edi
c00106ca:	8d 74 24 28          	lea    esi,[esp+0x28]
c00106ce:	56                   	push   esi
c00106cf:	6a 01                	push   0x1
c00106d1:	e8 82 f9 ff ff       	call   c0010058 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00106d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00106da:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c00106e0:	89 c1                	mov    ecx,eax
c00106e2:	83 e2 f0             	and    edx,0xfffffff0
c00106e5:	83 e1 0f             	and    ecx,0xf
c00106e8:	09 ca                	or     edx,ecx
c00106ea:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00106f0:	89 c2                	mov    edx,eax
c00106f2:	c1 ea 04             	shr    edx,0x4
c00106f5:	83 e2 0f             	and    edx,0xf
c00106f8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00106fc:	89 d1                	mov    ecx,edx
c00106fe:	83 c4 20             	add    esp,0x20
c0010701:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0010707:	c1 e1 06             	shl    ecx,0x6
c001070a:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c0010710:	09 ca                	or     edx,ecx
c0010712:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0010719:	89 c2                	mov    edx,eax
c001071b:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c0010721:	c1 ea 08             	shr    edx,0x8
c0010724:	83 e1 3f             	and    ecx,0x3f
c0010727:	83 e2 0f             	and    edx,0xf
c001072a:	89 d5                	mov    ebp,edx
c001072c:	83 e5 03             	and    ebp,0x3
c001072f:	c1 e5 06             	shl    ebp,0x6
c0010732:	09 e9                	or     ecx,ebp
c0010734:	89 d5                	mov    ebp,edx
c0010736:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c001073c:	c1 ed 02             	shr    ebp,0x2
c001073f:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c0010745:	83 e1 c0             	and    ecx,0xffffffc0
c0010748:	09 e9                	or     ecx,ebp
c001074a:	89 c5                	mov    ebp,eax
c001074c:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0010752:	c1 ed 08             	shr    ebp,0x8
c0010755:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c001075b:	83 e5 30             	and    ebp,0x30
c001075e:	83 e1 cf             	and    ecx,0xffffffcf
c0010761:	09 e9                	or     ecx,ebp
c0010763:	83 fa 06             	cmp    edx,0x6
c0010766:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c001076c:	74 05                	je     c0010773 <CPU::detectFeatures()+0x54f>
c001076e:	83 fa 0f             	cmp    edx,0xf
c0010771:	75 64                	jne    c00107d7 <CPU::detectFeatures()+0x5b3>
c0010773:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0010779:	89 c1                	mov    ecx,eax
c001077b:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c0010781:	c1 e9 10             	shr    ecx,0x10
c0010784:	c1 e1 04             	shl    ecx,0x4
c0010787:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c001078b:	0f b6 c9             	movzx  ecx,cl
c001078e:	c1 e1 06             	shl    ecx,0x6
c0010791:	09 e9                	or     ecx,ebp
c0010793:	83 fa 0f             	cmp    edx,0xf
c0010796:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c001079d:	75 38                	jne    c00107d7 <CPU::detectFeatures()+0x5b3>
c001079f:	c1 e8 14             	shr    eax,0x14
c00107a2:	83 c0 0f             	add    eax,0xf
c00107a5:	0f b6 c0             	movzx  eax,al
c00107a8:	89 c2                	mov    edx,eax
c00107aa:	c1 e8 02             	shr    eax,0x2
c00107ad:	83 e2 03             	and    edx,0x3
c00107b0:	89 d1                	mov    ecx,edx
c00107b2:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c00107b8:	c1 e1 06             	shl    ecx,0x6
c00107bb:	83 e2 3f             	and    edx,0x3f
c00107be:	09 ca                	or     edx,ecx
c00107c0:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c00107c6:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c00107cc:	83 e2 c0             	and    edx,0xffffffc0
c00107cf:	09 d0                	or     eax,edx
c00107d1:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c00107d7:	83 ec 0c             	sub    esp,0xc
c00107da:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00107e0:	83 c8 07             	or     eax,0x7
c00107e3:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00107e9:	8d 44 24 28          	lea    eax,[esp+0x28]
c00107ed:	50                   	push   eax
c00107ee:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00107f2:	55                   	push   ebp
c00107f3:	57                   	push   edi
c00107f4:	56                   	push   esi
c00107f5:	68 00 00 00 80       	push   0x80000000
c00107fa:	e8 59 f8 ff ff       	call   c0010058 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00107ff:	83 c4 20             	add    esp,0x20
c0010802:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c001080a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001080e:	76 1e                	jbe    c001082e <CPU::detectFeatures()+0x60a>
c0010810:	83 ec 0c             	sub    esp,0xc
c0010813:	50                   	push   eax
c0010814:	55                   	push   ebp
c0010815:	57                   	push   edi
c0010816:	56                   	push   esi
c0010817:	68 01 00 00 80       	push   0x80000001
c001081c:	e8 37 f8 ff ff       	call   c0010058 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010821:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c001082b:	83 c4 20             	add    esp,0x20
c001082e:	52                   	push   edx
c001082f:	52                   	push   edx
c0010830:	68 11 1e 02 c0       	push   0xc0021e11
c0010835:	53                   	push   ebx
c0010836:	e8 99 c0 ff ff       	call   c000c8d4 <Device::setName(char const*)>
c001083b:	83 c4 10             	add    esp,0x10
c001083e:	eb 69                	jmp    c00108a9 <CPU::detectFeatures()+0x685>
c0010840:	50                   	push   eax
c0010841:	50                   	push   eax
c0010842:	68 76 1d 02 c0       	push   0xc0021d76
c0010847:	55                   	push   ebp
c0010848:	e8 f3 fd fe ff       	call   c0000640 <strcpy>
c001084d:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0010857:	e8 67 f9 fe ff       	call   c00001c3 <is486>
c001085c:	83 c4 10             	add    esp,0x10
c001085f:	85 c0                	test   eax,eax
c0010861:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010867:	74 1f                	je     c0010888 <CPU::detectFeatures()+0x664>
c0010869:	83 c8 07             	or     eax,0x7
c001086c:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010872:	0f 20 c0             	mov    eax,cr0
c0010875:	83 e0 14             	and    eax,0x14
c0010878:	83 f8 04             	cmp    eax,0x4
c001087b:	75 10                	jne    c001088d <CPU::detectFeatures()+0x669>
c001087d:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010883:	83 e0 fd             	and    eax,0xfffffffd
c0010886:	eb 1b                	jmp    c00108a3 <CPU::detectFeatures()+0x67f>
c0010888:	83 e0 f8             	and    eax,0xfffffff8
c001088b:	eb df                	jmp    c001086c <CPU::detectFeatures()+0x648>
c001088d:	e8 0c f9 fe ff       	call   c000019e <hasLegacyFPU>
c0010892:	83 e0 01             	and    eax,0x1
c0010895:	8d 14 00             	lea    edx,[eax+eax*1]
c0010898:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001089e:	83 e0 fd             	and    eax,0xfffffffd
c00108a1:	09 d0                	or     eax,edx
c00108a3:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c00108a9:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c00108b0:	74 17                	je     c00108c9 <CPU::detectFeatures()+0x6a5>
c00108b2:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c00108b8:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c00108be:	83 c8 10             	or     eax,0x10
c00108c1:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c00108c7:	eb 20                	jmp    c00108e9 <CPU::detectFeatures()+0x6c5>
c00108c9:	e8 d0 f8 fe ff       	call   c000019e <hasLegacyFPU>
c00108ce:	83 e0 01             	and    eax,0x1
c00108d1:	8d 14 00             	lea    edx,[eax+eax*1]
c00108d4:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00108da:	83 e0 fd             	and    eax,0xfffffffd
c00108dd:	09 d0                	or     eax,edx
c00108df:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c00108e5:	a8 02                	test   al,0x2
c00108e7:	75 c9                	jne    c00108b2 <CPU::detectFeatures()+0x68e>
c00108e9:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c00108f0:	83 c4 2c             	add    esp,0x2c
c00108f3:	5b                   	pop    ebx
c00108f4:	5e                   	pop    esi
c00108f5:	5f                   	pop    edi
c00108f6:	5d                   	pop    ebp
c00108f7:	c3                   	ret    

c00108f8 <CPU::setupSMEP()>:
c00108f8:	0f 20 e0             	mov    eax,cr4
c00108fb:	0d 00 00 10 00       	or     eax,0x100000
c0010900:	0f 22 e0             	mov    cr4,eax
c0010903:	c3                   	ret    

c0010904 <CPU::setupUMIP()>:
c0010904:	0f 20 e0             	mov    eax,cr4
c0010907:	80 cc 08             	or     ah,0x8
c001090a:	0f 22 e0             	mov    cr4,eax
c001090d:	c3                   	ret    

c001090e <CPU::setupTSC()>:
c001090e:	0f 20 e0             	mov    eax,cr4
c0010911:	83 c8 04             	or     eax,0x4
c0010914:	0f 22 e0             	mov    cr4,eax
c0010917:	c3                   	ret    

c0010918 <CPU::setupLargePages()>:
c0010918:	0f 20 e0             	mov    eax,cr4
c001091b:	83 c8 10             	or     eax,0x10
c001091e:	0f 22 e0             	mov    cr4,eax
c0010921:	c3                   	ret    

c0010922 <CPU::setupPAT()>:
c0010922:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0010927:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c001092e:	74 2c                	je     c001095c <CPU::setupPAT()+0x3a>
c0010930:	53                   	push   ebx
c0010931:	83 ec 10             	sub    esp,0x10
c0010934:	68 77 02 00 00       	push   0x277
c0010939:	50                   	push   eax
c001093a:	e8 81 67 ff ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c001093f:	83 e2 f8             	and    edx,0xfffffff8
c0010942:	83 ca 01             	or     edx,0x1
c0010945:	52                   	push   edx
c0010946:	50                   	push   eax
c0010947:	68 77 02 00 00       	push   0x277
c001094c:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0010952:	e8 95 67 ff ff       	call   c00070ec <Computer::wrmsr(unsigned int, unsigned long long)>
c0010957:	83 c4 28             	add    esp,0x28
c001095a:	5b                   	pop    ebx
c001095b:	c3                   	ret    
c001095c:	c3                   	ret    
c001095d:	90                   	nop

c001095e <CPU::setupMTRR()>:
c001095e:	c3                   	ret    
c001095f:	90                   	nop

c0010960 <CPU::setupGlobalPages()>:
c0010960:	0f 20 e0             	mov    eax,cr4
c0010963:	0c 80                	or     al,0x80
c0010965:	0f 22 e0             	mov    cr4,eax
c0010968:	c3                   	ret    
c0010969:	90                   	nop

c001096a <CPU::allowUsermodeDataAccess()>:
c001096a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001096e:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0010975:	74 03                	je     c001097a <CPU::allowUsermodeDataAccess()+0x10>
c0010977:	0f 01 cb             	stac   
c001097a:	c3                   	ret    
c001097b:	90                   	nop

c001097c <CPU::prohibitUsermodeDataAccess()>:
c001097c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010980:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0010987:	74 03                	je     c001098c <CPU::prohibitUsermodeDataAccess()+0x10>
c0010989:	0f 01 ca             	clac   
c001098c:	c3                   	ret    
c001098d:	90                   	nop

c001098e <CPU::setupSMAP()>:
c001098e:	0f 20 e0             	mov    eax,cr4
c0010991:	0d 00 00 20 00       	or     eax,0x200000
c0010996:	0f 22 e0             	mov    cr4,eax
c0010999:	eb e1                	jmp    c001097c <CPU::prohibitUsermodeDataAccess()>
c001099b:	90                   	nop

c001099c <CPU::setupFeatures()>:
c001099c:	53                   	push   ebx
c001099d:	83 ec 08             	sub    esp,0x8
c00109a0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00109a4:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c00109ab:	74 18                	je     c00109c5 <CPU::setupFeatures()+0x29>
c00109ad:	83 ec 0c             	sub    esp,0xc
c00109b0:	68 1d 1e 02 c0       	push   0xc0021e1d
c00109b5:	e8 8b 9f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00109ba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00109bd:	e8 42 ff ff ff       	call   c0010904 <CPU::setupUMIP()>
c00109c2:	83 c4 10             	add    esp,0x10
c00109c5:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c00109cc:	74 18                	je     c00109e6 <CPU::setupFeatures()+0x4a>
c00109ce:	83 ec 0c             	sub    esp,0xc
c00109d1:	68 27 1e 02 c0       	push   0xc0021e27
c00109d6:	e8 6a 9f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00109db:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00109de:	e8 2b ff ff ff       	call   c001090e <CPU::setupTSC()>
c00109e3:	83 c4 10             	add    esp,0x10
c00109e6:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c00109ed:	74 18                	je     c0010a07 <CPU::setupFeatures()+0x6b>
c00109ef:	83 ec 0c             	sub    esp,0xc
c00109f2:	68 30 1e 02 c0       	push   0xc0021e30
c00109f7:	e8 49 9f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00109fc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00109ff:	e8 14 ff ff ff       	call   c0010918 <CPU::setupLargePages()>
c0010a04:	83 c4 10             	add    esp,0x10
c0010a07:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c0010a0e:	74 18                	je     c0010a28 <CPU::setupFeatures()+0x8c>
c0010a10:	83 ec 0c             	sub    esp,0xc
c0010a13:	68 39 1e 02 c0       	push   0xc0021e39
c0010a18:	e8 28 9f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010a1d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010a20:	e8 3b ff ff ff       	call   c0010960 <CPU::setupGlobalPages()>
c0010a25:	83 c4 10             	add    esp,0x10
c0010a28:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c0010a2f:	74 18                	je     c0010a49 <CPU::setupFeatures()+0xad>
c0010a31:	83 ec 0c             	sub    esp,0xc
c0010a34:	68 4b 1e 02 c0       	push   0xc0021e4b
c0010a39:	e8 07 9f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010a3e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010a41:	e8 dc fe ff ff       	call   c0010922 <CPU::setupPAT()>
c0010a46:	83 c4 10             	add    esp,0x10
c0010a49:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c0010a50:	74 11                	je     c0010a63 <CPU::setupFeatures()+0xc7>
c0010a52:	c7 44 24 10 54 1e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0021e54
c0010a5a:	83 c4 08             	add    esp,0x8
c0010a5d:	5b                   	pop    ebx
c0010a5e:	e9 e2 9e ff ff       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>
c0010a63:	83 c4 08             	add    esp,0x8
c0010a66:	5b                   	pop    ebx
c0010a67:	c3                   	ret    

c0010a68 <CPU::open(int, int, void*)>:
c0010a68:	55                   	push   ebp
c0010a69:	57                   	push   edi
c0010a6a:	56                   	push   esi
c0010a6b:	53                   	push   ebx
c0010a6c:	83 ec 18             	sub    esp,0x18
c0010a6f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010a73:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0010a77:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010a7b:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0010a81:	89 bb 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edi
c0010a87:	8d ab 7c 11 00 00    	lea    ebp,[ebx+0x117c]
c0010a8d:	50                   	push   eax
c0010a8e:	e8 2b 69 ff ff       	call   c00073be <GDT::setup()>
c0010a93:	83 c4 0c             	add    esp,0xc
c0010a96:	6a 00                	push   0x0
c0010a98:	68 ef be ad de       	push   0xdeadbeef
c0010a9d:	55                   	push   ebp
c0010a9e:	e8 e5 84 ff ff       	call   c0008f88 <TSS::setup(unsigned long, unsigned long)>
c0010aa3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0010aa6:	e8 bd 84 ff ff       	call   c0008f68 <TSS::flush()>
c0010aab:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0010ab1:	89 04 24             	mov    DWORD PTR [esp],eax
c0010ab4:	e8 69 6b ff ff       	call   c0007622 <IDT::setup()>
c0010ab9:	b8 00 04 00 00       	mov    eax,0x400
c0010abe:	0f 23 f8             	mov    db7,eax
c0010ac1:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0010acb:	e8 ef 72 ff ff       	call   c0007dbf <Phys::allocatePage()>
c0010ad0:	83 c4 10             	add    esp,0x10
c0010ad3:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0010ad9:	85 f6                	test   esi,esi
c0010adb:	89 38                	mov    DWORD PTR [eax],edi
c0010add:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0010ae3:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0010ae6:	74 10                	je     c0010af8 <CPU::open(int, int, void*)+0x90>
c0010ae8:	50                   	push   eax
c0010ae9:	50                   	push   eax
c0010aea:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0010af0:	56                   	push   esi
c0010af1:	e8 b8 8d ff ff       	call   c00098ae <VAS::setCPUSpecific(unsigned long)>
c0010af6:	eb 0d                	jmp    c0010b05 <CPU::open(int, int, void*)+0x9d>
c0010af8:	83 ec 0c             	sub    esp,0xc
c0010afb:	68 5e 1e 02 c0       	push   0xc0021e5e
c0010b00:	e8 74 08 00 00       	call   c0011379 <KePanic(char const*)>
c0010b05:	83 c4 10             	add    esp,0x10
c0010b08:	83 ec 0c             	sub    esp,0xc
c0010b0b:	68 6c 1e 02 c0       	push   0xc0021e6c
c0010b10:	e8 8e 01 00 00       	call   c0010ca3 <KeSetBootMessage(char const*)>
c0010b15:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010b18:	e8 07 f7 ff ff       	call   c0010224 <CPU::detectFeatures()>
c0010b1d:	c7 04 24 8f 1e 02 c0 	mov    DWORD PTR [esp],0xc0021e8f
c0010b24:	e8 7a 01 00 00       	call   c0010ca3 <KeSetBootMessage(char const*)>
c0010b29:	e8 e3 72 00 00       	call   c0017e11 <HalInitialise()>
c0010b2e:	a1 d0 5e 02 c0       	mov    eax,ds:0xc0025ed0
c0010b33:	83 e0 10             	and    eax,0x10
c0010b36:	83 f8 01             	cmp    eax,0x1
c0010b39:	19 c0                	sbb    eax,eax
c0010b3b:	83 e0 46             	and    eax,0x46
c0010b3e:	83 c0 1e             	add    eax,0x1e
c0010b41:	89 04 24             	mov    DWORD PTR [esp],eax
c0010b44:	e8 28 d6 ff ff       	call   c000e171 <setupTimer(int)>
c0010b49:	83 c4 10             	add    esp,0x10
c0010b4c:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0010b52:	f6 05 d0 5e 02 c0 20 	test   BYTE PTR ds:0xc0025ed0,0x20
c0010b59:	74 0c                	je     c0010b67 <CPU::open(int, int, void*)+0xff>
c0010b5b:	83 ec 0c             	sub    esp,0xc
c0010b5e:	53                   	push   ebx
c0010b5f:	e8 38 fe ff ff       	call   c001099c <CPU::setupFeatures()>
c0010b64:	83 c4 10             	add    esp,0x10
c0010b67:	83 c4 0c             	add    esp,0xc
c0010b6a:	31 c0                	xor    eax,eax
c0010b6c:	5b                   	pop    ebx
c0010b6d:	5e                   	pop    esi
c0010b6e:	5f                   	pop    edi
c0010b6f:	5d                   	pop    ebp
c0010b70:	c3                   	ret    

c0010b71 <KeInitialiseAtexit()>:
c0010b71:	83 ec 10             	sub    esp,0x10
c0010b74:	c7 05 a0 8d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028da0,0x0
c0010b7e:	6a 60                	push   0x60
c0010b80:	6a 00                	push   0x0
c0010b82:	68 20 8e 02 c0       	push   0xc0028e20
c0010b87:	e8 64 f9 fe ff       	call   c00004f0 <memset>
c0010b8c:	83 c4 1c             	add    esp,0x1c
c0010b8f:	c3                   	ret    

c0010b90 <KeRegisterAtexit(void (*)(void*), void*)>:
c0010b90:	a1 a0 8d 02 c0       	mov    eax,ds:0xc0028da0
c0010b95:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010b99:	89 14 85 20 8e 02 c0 	mov    DWORD PTR [eax*4-0x3ffd71e0],edx
c0010ba0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010ba4:	89 14 85 c0 8d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7240],edx
c0010bab:	40                   	inc    eax
c0010bac:	a3 a0 8d 02 c0       	mov    ds:0xc0028da0,eax
c0010bb1:	83 f8 17             	cmp    eax,0x17
c0010bb4:	7e 0d                	jle    c0010bc3 <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c0010bb6:	c7 44 24 04 d0 1e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021ed0
c0010bbe:	e9 b6 07 00 00       	jmp    c0011379 <KePanic(char const*)>
c0010bc3:	c3                   	ret    

c0010bc4 <KeExecuteAtexit()>:
c0010bc4:	53                   	push   ebx
c0010bc5:	31 db                	xor    ebx,ebx
c0010bc7:	83 ec 08             	sub    esp,0x8
c0010bca:	39 1d a0 8d 02 c0    	cmp    DWORD PTR ds:0xc0028da0,ebx
c0010bd0:	7e 50                	jle    c0010c22 <KeExecuteAtexit()+0x5e>
c0010bd2:	8b 04 9d 20 8e 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd71e0]
c0010bd9:	85 c0                	test   eax,eax
c0010bdb:	74 42                	je     c0010c1f <KeExecuteAtexit()+0x5b>
c0010bdd:	51                   	push   ecx
c0010bde:	50                   	push   eax
c0010bdf:	53                   	push   ebx
c0010be0:	68 e9 1e 02 c0       	push   0xc0021ee9
c0010be5:	e8 5b 9d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010bea:	58                   	pop    eax
c0010beb:	ff 34 9d c0 8d 02 c0 	push   DWORD PTR [ebx*4-0x3ffd7240]
c0010bf2:	ff 14 9d 20 8e 02 c0 	call   DWORD PTR [ebx*4-0x3ffd71e0]
c0010bf9:	c7 04 24 0b 1f 02 c0 	mov    DWORD PTR [esp],0xc0021f0b
c0010c00:	e8 40 9d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010c05:	c7 04 24 6b 30 02 c0 	mov    DWORD PTR [esp],0xc002306b
c0010c0c:	c7 04 9d 20 8e 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd71e0],0x0
c0010c17:	e8 29 9d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010c1c:	83 c4 10             	add    esp,0x10
c0010c1f:	43                   	inc    ebx
c0010c20:	eb a8                	jmp    c0010bca <KeExecuteAtexit()+0x6>
c0010c22:	83 c4 08             	add    esp,0x8
c0010c25:	5b                   	pop    ebx
c0010c26:	c3                   	ret    

c0010c27 <KeDisplaySplashScreen()>:
c0010c27:	55                   	push   ebp
c0010c28:	bd 05 00 00 00       	mov    ebp,0x5
c0010c2d:	57                   	push   edi
c0010c2e:	bf 0a 00 00 00       	mov    edi,0xa
c0010c33:	56                   	push   esi
c0010c34:	31 f6                	xor    esi,esi
c0010c36:	53                   	push   ebx
c0010c37:	31 db                	xor    ebx,ebx
c0010c39:	83 ec 0c             	sub    esp,0xc
c0010c3c:	0f b6 96 c0 32 02 c0 	movzx  edx,BYTE PTR [esi-0x3ffdcd40]
c0010c43:	89 d0                	mov    eax,edx
c0010c45:	85 d2                	test   edx,edx
c0010c47:	74 52                	je     c0010c9b <KeDisplaySplashScreen()+0x74>
c0010c49:	80 bb f6 32 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffdcd0a],0xdb
c0010c50:	75 13                	jne    c0010c65 <KeDisplaySplashScreen()+0x3e>
c0010c52:	0f b6 8b f5 32 02 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffdcd0b]
c0010c59:	83 e1 fe             	and    ecx,0xfffffffe
c0010c5c:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c0010c62:	75 01                	jne    c0010c65 <KeDisplaySplashScreen()+0x3e>
c0010c64:	47                   	inc    edi
c0010c65:	83 fa 0d             	cmp    edx,0xd
c0010c68:	74 28                	je     c0010c92 <KeDisplaySplashScreen()+0x6b>
c0010c6a:	83 fa 0a             	cmp    edx,0xa
c0010c6d:	75 0a                	jne    c0010c79 <KeDisplaySplashScreen()+0x52>
c0010c6f:	45                   	inc    ebp
c0010c70:	bf 0a 00 00 00       	mov    edi,0xa
c0010c75:	31 db                	xor    ebx,ebx
c0010c77:	eb 19                	jmp    c0010c92 <KeDisplaySplashScreen()+0x6b>
c0010c79:	83 ec 0c             	sub    esp,0xc
c0010c7c:	8d 14 1f             	lea    edx,[edi+ebx*1]
c0010c7f:	55                   	push   ebp
c0010c80:	0f be c0             	movsx  eax,al
c0010c83:	52                   	push   edx
c0010c84:	43                   	inc    ebx
c0010c85:	6a 00                	push   0x0
c0010c87:	6a 0e                	push   0xe
c0010c89:	50                   	push   eax
c0010c8a:	e8 01 7e 00 00       	call   c0018a90 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0010c8f:	83 c4 20             	add    esp,0x20
c0010c92:	46                   	inc    esi
c0010c93:	81 fe 42 01 00 00    	cmp    esi,0x142
c0010c99:	75 a1                	jne    c0010c3c <KeDisplaySplashScreen()+0x15>
c0010c9b:	83 c4 0c             	add    esp,0xc
c0010c9e:	5b                   	pop    ebx
c0010c9f:	5e                   	pop    esi
c0010ca0:	5f                   	pop    edi
c0010ca1:	5d                   	pop    ebp
c0010ca2:	c3                   	ret    

c0010ca3 <KeSetBootMessage(char const*)>:
c0010ca3:	57                   	push   edi
c0010ca4:	56                   	push   esi
c0010ca5:	53                   	push   ebx
c0010ca6:	81 ec a4 00 00 00    	sub    esp,0xa4
c0010cac:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0010cb3:	68 9e 00 00 00       	push   0x9e
c0010cb8:	6a 00                	push   0x0
c0010cba:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0010cbe:	56                   	push   esi
c0010cbf:	e8 2c f8 fe ff       	call   c00004f0 <memset>
c0010cc4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010cc7:	e8 a4 f8 fe ff       	call   c0000570 <strlen>
c0010ccc:	ba 50 00 00 00       	mov    edx,0x50
c0010cd1:	83 c4 10             	add    esp,0x10
c0010cd4:	29 c2                	sub    edx,eax
c0010cd6:	31 c9                	xor    ecx,ecx
c0010cd8:	83 e2 fe             	and    edx,0xfffffffe
c0010cdb:	01 f2                	add    edx,esi
c0010cdd:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c0010ce2:	84 c0                	test   al,al
c0010ce4:	74 0a                	je     c0010cf0 <KeSetBootMessage(char const*)+0x4d>
c0010ce6:	80 cc 0f             	or     ah,0xf
c0010ce9:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c0010ced:	41                   	inc    ecx
c0010cee:	eb ed                	jmp    c0010cdd <KeSetBootMessage(char const*)+0x3a>
c0010cf0:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0010cf5:	b9 9e 00 00 00       	mov    ecx,0x9e
c0010cfa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010cfc:	81 c4 a0 00 00 00    	add    esp,0xa0
c0010d02:	5b                   	pop    ebx
c0010d03:	5e                   	pop    esi
c0010d04:	5f                   	pop    edi
c0010d05:	c3                   	ret    
c0010d06:	66 90                	xchg   ax,ax

c0010d08 <Krnl::handlePowerButton()>:
c0010d08:	83 ec 0c             	sub    esp,0xc
c0010d0b:	e8 c4 06 00 00       	call   c00113d4 <KeHandlePowerButton()>
c0010d10:	90                   	nop
c0010d11:	83 c4 0c             	add    esp,0xc
c0010d14:	c3                   	ret    
c0010d15:	8d 76 00             	lea    esi,[esi+0x0]

c0010d18 <Krnl::handleSleepButton()>:
c0010d18:	83 ec 0c             	sub    esp,0xc
c0010d1b:	e8 e9 06 00 00       	call   c0011409 <KeHandleSleepButton()>
c0010d20:	90                   	nop
c0010d21:	83 c4 0c             	add    esp,0xc
c0010d24:	c3                   	ret    
c0010d25:	90                   	nop

c0010d26 <EnvVarContainer::getEnv(char const*)>:
c0010d26:	57                   	push   edi
c0010d27:	56                   	push   esi
c0010d28:	53                   	push   ebx
c0010d29:	31 db                	xor    ebx,ebx
c0010d2b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010d2f:	39 1e                	cmp    DWORD PTR [esi],ebx
c0010d31:	7e 2b                	jle    c0010d5e <EnvVarContainer::getEnv(char const*)+0x38>
c0010d33:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0010d3a:	50                   	push   eax
c0010d3b:	50                   	push   eax
c0010d3c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010d3f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0010d42:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010d46:	e8 05 fa fe ff       	call   c0000750 <strcmp>
c0010d4b:	83 c4 10             	add    esp,0x10
c0010d4e:	85 c0                	test   eax,eax
c0010d50:	75 09                	jne    c0010d5b <EnvVarContainer::getEnv(char const*)+0x35>
c0010d52:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010d55:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0010d59:	eb 05                	jmp    c0010d60 <EnvVarContainer::getEnv(char const*)+0x3a>
c0010d5b:	43                   	inc    ebx
c0010d5c:	eb d1                	jmp    c0010d2f <EnvVarContainer::getEnv(char const*)+0x9>
c0010d5e:	31 c0                	xor    eax,eax
c0010d60:	5b                   	pop    ebx
c0010d61:	5e                   	pop    esi
c0010d62:	5f                   	pop    edi
c0010d63:	c3                   	ret    

c0010d64 <EnvVarContainer::setEnv(char const*, char const*)>:
c0010d64:	55                   	push   ebp
c0010d65:	57                   	push   edi
c0010d66:	56                   	push   esi
c0010d67:	53                   	push   ebx
c0010d68:	83 ec 28             	sub    esp,0x28
c0010d6b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0010d6f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0010d73:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0010d77:	56                   	push   esi
c0010d78:	e8 f3 f7 fe ff       	call   c0000570 <strlen>
c0010d7d:	40                   	inc    eax
c0010d7e:	89 04 24             	mov    DWORD PTR [esp],eax
c0010d81:	e8 30 6d ff ff       	call   c0007ab6 <malloc>
c0010d86:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d89:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010d8d:	e8 de f7 fe ff       	call   c0000570 <strlen>
c0010d92:	40                   	inc    eax
c0010d93:	89 04 24             	mov    DWORD PTR [esp],eax
c0010d96:	e8 1b 6d ff ff       	call   c0007ab6 <malloc>
c0010d9b:	89 34 24             	mov    DWORD PTR [esp],esi
c0010d9e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010da2:	e8 c9 f7 fe ff       	call   c0000570 <strlen>
c0010da7:	83 c4 0c             	add    esp,0xc
c0010daa:	40                   	inc    eax
c0010dab:	50                   	push   eax
c0010dac:	6a 00                	push   0x0
c0010dae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010db2:	e8 39 f7 fe ff       	call   c00004f0 <memset>
c0010db7:	89 34 24             	mov    DWORD PTR [esp],esi
c0010dba:	e8 b1 f7 fe ff       	call   c0000570 <strlen>
c0010dbf:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010dc3:	8d 48 01             	lea    ecx,[eax+0x1]
c0010dc6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010dc8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010dcb:	89 de                	mov    esi,ebx
c0010dcd:	e8 9e f7 fe ff       	call   c0000570 <strlen>
c0010dd2:	83 c4 0c             	add    esp,0xc
c0010dd5:	40                   	inc    eax
c0010dd6:	50                   	push   eax
c0010dd7:	6a 00                	push   0x0
c0010dd9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010ddd:	e8 0e f7 fe ff       	call   c00004f0 <memset>
c0010de2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010de5:	e8 86 f7 fe ff       	call   c0000570 <strlen>
c0010dea:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010dee:	8d 48 01             	lea    ecx,[eax+0x1]
c0010df1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010df3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010df6:	40                   	inc    eax
c0010df7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010dfa:	c1 e0 03             	shl    eax,0x3
c0010dfd:	5a                   	pop    edx
c0010dfe:	59                   	pop    ecx
c0010dff:	50                   	push   eax
c0010e00:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0010e03:	e8 9a 6c ff ff       	call   c0007aa2 <realloc>
c0010e08:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010e0c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010e0f:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010e12:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010e16:	b9 08 00 00 00       	mov    ecx,0x8
c0010e1b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010e1d:	83 c4 2c             	add    esp,0x2c
c0010e20:	5b                   	pop    ebx
c0010e21:	5e                   	pop    esi
c0010e22:	5f                   	pop    edi
c0010e23:	5d                   	pop    ebp
c0010e24:	c3                   	ret    
c0010e25:	90                   	nop

c0010e26 <EnvVarContainer::deleteEnv(char const*)>:
c0010e26:	c3                   	ret    
c0010e27:	90                   	nop

c0010e28 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0010e28:	55                   	push   ebp
c0010e29:	57                   	push   edi
c0010e2a:	56                   	push   esi
c0010e2b:	53                   	push   ebx
c0010e2c:	81 ec 38 01 00 00    	sub    esp,0x138
c0010e32:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0010e39:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0010e40:	68 14 01 00 00       	push   0x114
c0010e45:	e8 6c 6c ff ff       	call   c0007ab6 <malloc>
c0010e4a:	83 c4 0c             	add    esp,0xc
c0010e4d:	89 c3                	mov    ebx,eax
c0010e4f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0010e52:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0010e59:	50                   	push   eax
c0010e5a:	e8 71 aa ff ff       	call   c000b8d0 <File::File(char const*, Process*)>
c0010e5f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010e62:	e8 4b ad ff ff       	call   c000bbb2 <File::exists()>
c0010e67:	83 c4 10             	add    esp,0x10
c0010e6a:	84 c0                	test   al,al
c0010e6c:	75 31                	jne    c0010e9f <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0010e6e:	50                   	push   eax
c0010e6f:	50                   	push   eax
c0010e70:	6a 12                	push   0x12
c0010e72:	53                   	push   ebx
c0010e73:	e8 76 aa ff ff       	call   c000b8ee <File::open(FileOpenMode)>
c0010e78:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010e7a:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0010e7d:	89 34 24             	mov    DWORD PTR [esp],esi
c0010e80:	e8 eb f6 fe ff       	call   c0000570 <strlen>
c0010e85:	5a                   	pop    edx
c0010e86:	31 d2                	xor    edx,edx
c0010e88:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0010e8c:	51                   	push   ecx
c0010e8d:	56                   	push   esi
c0010e8e:	52                   	push   edx
c0010e8f:	50                   	push   eax
c0010e90:	53                   	push   ebx
c0010e91:	ff d7                	call   edi
c0010e93:	83 c4 14             	add    esp,0x14
c0010e96:	53                   	push   ebx
c0010e97:	e8 b0 aa ff ff       	call   c000b94c <File::close()>
c0010e9c:	83 c4 10             	add    esp,0x10
c0010e9f:	56                   	push   esi
c0010ea0:	31 f6                	xor    esi,esi
c0010ea2:	68 00 01 00 00       	push   0x100
c0010ea7:	6a 00                	push   0x0
c0010ea9:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0010ead:	50                   	push   eax
c0010eae:	e8 3d f6 fe ff       	call   c00004f0 <memset>
c0010eb3:	5f                   	pop    edi
c0010eb4:	58                   	pop    eax
c0010eb5:	6a 01                	push   0x1
c0010eb7:	53                   	push   ebx
c0010eb8:	e8 31 aa ff ff       	call   c000b8ee <File::open(FileOpenMode)>
c0010ebd:	83 c4 10             	add    esp,0x10
c0010ec0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010ec8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010ed0:	83 ec 0c             	sub    esp,0xc
c0010ed3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010ed5:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0010ed9:	51                   	push   ecx
c0010eda:	8d 54 24 23          	lea    edx,[esp+0x23]
c0010ede:	52                   	push   edx
c0010edf:	6a 00                	push   0x0
c0010ee1:	6a 01                	push   0x1
c0010ee3:	53                   	push   ebx
c0010ee4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0010ee7:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c0010eec:	83 c4 20             	add    esp,0x20
c0010eef:	89 c2                	mov    edx,eax
c0010ef1:	85 c0                	test   eax,eax
c0010ef3:	0f 84 36 01 00 00    	je     c001102f <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c0010ef9:	83 f8 0d             	cmp    eax,0xd
c0010efc:	0f 84 22 01 00 00    	je     c0011024 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010f02:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010f07:	0f 84 f0 00 00 00    	je     c0010ffd <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c0010f0d:	83 f8 0a             	cmp    eax,0xa
c0010f10:	74 13                	je     c0010f25 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c0010f12:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010f17:	74 0c                	je     c0010f25 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c0010f19:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0010f1f:	0f 8e f6 00 00 00    	jle    c001101b <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c0010f25:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010f29:	83 ec 0c             	sub    esp,0xc
c0010f2c:	8d 78 01             	lea    edi,[eax+0x1]
c0010f2f:	57                   	push   edi
c0010f30:	e8 81 6b ff ff       	call   c0007ab6 <malloc>
c0010f35:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0010f39:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0010f3d:	8d 56 04             	lea    edx,[esi+0x4]
c0010f40:	89 14 24             	mov    DWORD PTR [esp],edx
c0010f43:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010f47:	e8 6a 6b ff ff       	call   c0007ab6 <malloc>
c0010f4c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0010f50:	83 c4 0c             	add    esp,0xc
c0010f53:	57                   	push   edi
c0010f54:	6a 00                	push   0x0
c0010f56:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010f5a:	e8 91 f5 fe ff       	call   c00004f0 <memset>
c0010f5f:	8d 74 24 30          	lea    esi,[esp+0x30]
c0010f63:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010f67:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0010f6b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010f6d:	83 c4 0c             	add    esp,0xc
c0010f70:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010f74:	52                   	push   edx
c0010f75:	6a 00                	push   0x0
c0010f77:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010f7b:	e8 70 f5 fe ff       	call   c00004f0 <memset>
c0010f80:	8d 74 24 30          	lea    esi,[esp+0x30]
c0010f84:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0010f88:	89 34 24             	mov    DWORD PTR [esp],esi
c0010f8b:	e8 e0 f5 fe ff       	call   c0000570 <strlen>
c0010f90:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0010f94:	89 c1                	mov    ecx,eax
c0010f96:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010f98:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010f9b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0010f9e:	40                   	inc    eax
c0010f9f:	83 c4 10             	add    esp,0x10
c0010fa2:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010fa5:	85 d2                	test   edx,edx
c0010fa7:	75 0c                	jne    c0010fb5 <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c0010fa9:	83 ec 0c             	sub    esp,0xc
c0010fac:	6a 08                	push   0x8
c0010fae:	e8 03 6b ff ff       	call   c0007ab6 <malloc>
c0010fb3:	eb 0c                	jmp    c0010fc1 <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c0010fb5:	c1 e0 03             	shl    eax,0x3
c0010fb8:	51                   	push   ecx
c0010fb9:	51                   	push   ecx
c0010fba:	50                   	push   eax
c0010fbb:	52                   	push   edx
c0010fbc:	e8 e1 6a ff ff       	call   c0007aa2 <realloc>
c0010fc1:	83 c4 10             	add    esp,0x10
c0010fc4:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010fc7:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010fca:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0010fcd:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010fd1:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010fd5:	b9 08 00 00 00       	mov    ecx,0x8
c0010fda:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010fdc:	31 f6                	xor    esi,esi
c0010fde:	50                   	push   eax
c0010fdf:	68 00 01 00 00       	push   0x100
c0010fe4:	6a 00                	push   0x0
c0010fe6:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0010fea:	50                   	push   eax
c0010feb:	e8 00 f5 fe ff       	call   c00004f0 <memset>
c0010ff0:	83 c4 10             	add    esp,0x10
c0010ff3:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010ffb:	eb 27                	jmp    c0011024 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010ffd:	83 f8 3d             	cmp    eax,0x3d
c0011000:	74 1e                	je     c0011020 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c0011002:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0011008:	7f 07                	jg     c0011011 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c001100a:	88 54 34 20          	mov    BYTE PTR [esp+esi*1+0x20],dl
c001100e:	46                   	inc    esi
c001100f:	eb 13                	jmp    c0011024 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0011011:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0011019:	eb 09                	jmp    c0011024 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c001101b:	83 f8 3d             	cmp    eax,0x3d
c001101e:	75 ea                	jne    c001100a <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c0011020:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0011024:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0011029:	0f 85 99 fe ff ff    	jne    c0010ec8 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c001102f:	83 ec 0c             	sub    esp,0xc
c0011032:	53                   	push   ebx
c0011033:	e8 14 a9 ff ff       	call   c000b94c <File::close()>
c0011038:	8b 03                	mov    eax,DWORD PTR [ebx]
c001103a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001103d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011040:	81 c4 3c 01 00 00    	add    esp,0x13c
c0011046:	5b                   	pop    ebx
c0011047:	5e                   	pop    esi
c0011048:	5f                   	pop    edi
c0011049:	5d                   	pop    ebp
c001104a:	c3                   	ret    
c001104b:	90                   	nop

c001104c <EnvVarContainer::__loadSystem()>:
c001104c:	83 ec 10             	sub    esp,0x10
c001104f:	68 20 34 02 c0       	push   0xc0023420
c0011054:	68 10 1f 02 c0       	push   0xc0021f10
c0011059:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001105d:	e8 c6 fd ff ff       	call   c0010e28 <EnvVarContainer::loadFrom(char const*, char const*)>
c0011062:	83 c4 1c             	add    esp,0x1c
c0011065:	c3                   	ret    

c0011066 <EnvVarContainer::__loadUser()>:
c0011066:	c3                   	ret    
c0011067:	90                   	nop

c0011068 <EnvVarContainer::EnvVarContainer(Process*)>:
c0011068:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001106c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011072:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011076:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001107a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001107d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011081:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011088:	90                   	nop
c0011089:	c3                   	ret    

c001108a <EnvVarContainer::~EnvVarContainer()>:
c001108a:	83 ec 0c             	sub    esp,0xc
c001108d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011091:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011094:	85 c0                	test   eax,eax
c0011096:	74 1d                	je     c00110b5 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0011098:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001109c:	8b 00                	mov    eax,DWORD PTR [eax]
c001109e:	85 c0                	test   eax,eax
c00110a0:	74 13                	je     c00110b5 <EnvVarContainer::~EnvVarContainer()+0x2b>
c00110a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110a9:	83 ec 0c             	sub    esp,0xc
c00110ac:	50                   	push   eax
c00110ad:	e8 14 6a ff ff       	call   c0007ac6 <free>
c00110b2:	83 c4 10             	add    esp,0x10
c00110b5:	90                   	nop
c00110b6:	83 c4 0c             	add    esp,0xc
c00110b9:	c3                   	ret    

c00110ba <KeGetEnv(Process*, char const*)>:
c00110ba:	53                   	push   ebx
c00110bb:	83 ec 08             	sub    esp,0x8
c00110be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110c2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00110c6:	39 05 f0 96 02 c0    	cmp    DWORD PTR ds:0xc00296f0,eax
c00110cc:	74 04                	je     c00110d2 <KeGetEnv(Process*, char const*)+0x18>
c00110ce:	85 c0                	test   eax,eax
c00110d0:	75 0b                	jne    c00110dd <KeGetEnv(Process*, char const*)+0x23>
c00110d2:	a1 80 8e 02 c0       	mov    eax,ds:0xc0028e80
c00110d7:	85 c0                	test   eax,eax
c00110d9:	75 19                	jne    c00110f4 <KeGetEnv(Process*, char const*)+0x3a>
c00110db:	eb 27                	jmp    c0011104 <KeGetEnv(Process*, char const*)+0x4a>
c00110dd:	52                   	push   edx
c00110de:	52                   	push   edx
c00110df:	53                   	push   ebx
c00110e0:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c00110e6:	e8 3b fc ff ff       	call   c0010d26 <EnvVarContainer::getEnv(char const*)>
c00110eb:	83 c4 10             	add    esp,0x10
c00110ee:	85 c0                	test   eax,eax
c00110f0:	75 28                	jne    c001111a <KeGetEnv(Process*, char const*)+0x60>
c00110f2:	eb de                	jmp    c00110d2 <KeGetEnv(Process*, char const*)+0x18>
c00110f4:	52                   	push   edx
c00110f5:	52                   	push   edx
c00110f6:	53                   	push   ebx
c00110f7:	50                   	push   eax
c00110f8:	e8 29 fc ff ff       	call   c0010d26 <EnvVarContainer::getEnv(char const*)>
c00110fd:	83 c4 10             	add    esp,0x10
c0011100:	85 c0                	test   eax,eax
c0011102:	75 16                	jne    c001111a <KeGetEnv(Process*, char const*)+0x60>
c0011104:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0011108:	a1 84 8e 02 c0       	mov    eax,ds:0xc0028e84
c001110d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011111:	83 c4 08             	add    esp,0x8
c0011114:	5b                   	pop    ebx
c0011115:	e9 0c fc ff ff       	jmp    c0010d26 <EnvVarContainer::getEnv(char const*)>
c001111a:	83 c4 08             	add    esp,0x8
c001111d:	5b                   	pop    ebx
c001111e:	c3                   	ret    

c001111f <KeSetEnvSystem(char const*, char const*)>:
c001111f:	83 ec 10             	sub    esp,0x10
c0011122:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011126:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001112a:	ff 35 84 8e 02 c0    	push   DWORD PTR ds:0xc0028e84
c0011130:	e8 2f fc ff ff       	call   c0010d64 <EnvVarContainer::setEnv(char const*, char const*)>
c0011135:	83 c4 1c             	add    esp,0x1c
c0011138:	c3                   	ret    

c0011139 <KeSetEnvUser(char const*, char const*)>:
c0011139:	a1 80 8e 02 c0       	mov    eax,ds:0xc0028e80
c001113e:	85 c0                	test   eax,eax
c0011140:	74 15                	je     c0011157 <KeSetEnvUser(char const*, char const*)+0x1e>
c0011142:	83 ec 10             	sub    esp,0x10
c0011145:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011149:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001114d:	50                   	push   eax
c001114e:	e8 11 fc ff ff       	call   c0010d64 <EnvVarContainer::setEnv(char const*, char const*)>
c0011153:	83 c4 1c             	add    esp,0x1c
c0011156:	c3                   	ret    
c0011157:	c3                   	ret    

c0011158 <KeSetEnvProcess(Process*, char const*, char const*)>:
c0011158:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001115c:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0011162:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011166:	e9 f9 fb ff ff       	jmp    c0010d64 <EnvVarContainer::setEnv(char const*, char const*)>

c001116b <KeDeleteEnvSystem(char const*)>:
c001116b:	c3                   	ret    

c001116c <KeDeleteEnvUser(char const*)>:
c001116c:	c3                   	ret    

c001116d <KeDeleteEnvProcess(Process*, char const*)>:
c001116d:	c3                   	ret    

c001116e <KeNewProcessEnv(Process*)>:
c001116e:	83 ec 28             	sub    esp,0x28
c0011171:	6a 0c                	push   0xc
c0011173:	e8 3e 69 ff ff       	call   c0007ab6 <malloc>
c0011178:	5a                   	pop    edx
c0011179:	59                   	pop    ecx
c001117a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001117e:	50                   	push   eax
c001117f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011183:	e8 e0 fe ff ff       	call   c0011068 <EnvVarContainer::EnvVarContainer(Process*)>
c0011188:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001118c:	83 c4 2c             	add    esp,0x2c
c001118f:	c3                   	ret    

c0011190 <KeCopyProcessEnv(Process*, Process*)>:
c0011190:	57                   	push   edi
c0011191:	56                   	push   esi
c0011192:	53                   	push   ebx
c0011193:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011197:	83 ec 0c             	sub    esp,0xc
c001119a:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c00111a0:	6a 0c                	push   0xc
c00111a2:	e8 0f 69 ff ff       	call   c0007ab6 <malloc>
c00111a7:	89 c3                	mov    ebx,eax
c00111a9:	58                   	pop    eax
c00111aa:	5a                   	pop    edx
c00111ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00111af:	53                   	push   ebx
c00111b0:	e8 b3 fe ff ff       	call   c0011068 <EnvVarContainer::EnvVarContainer(Process*)>
c00111b5:	8b 07                	mov    eax,DWORD PTR [edi]
c00111b7:	89 03                	mov    DWORD PTR [ebx],eax
c00111b9:	c1 e0 03             	shl    eax,0x3
c00111bc:	89 04 24             	mov    DWORD PTR [esp],eax
c00111bf:	e8 f2 68 ff ff       	call   c0007ab6 <malloc>
c00111c4:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00111c7:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00111c9:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c00111cc:	c1 e1 03             	shl    ecx,0x3
c00111cf:	89 c7                	mov    edi,eax
c00111d1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00111d3:	83 c4 10             	add    esp,0x10
c00111d6:	89 d8                	mov    eax,ebx
c00111d8:	5b                   	pop    ebx
c00111d9:	5e                   	pop    esi
c00111da:	5f                   	pop    edi
c00111db:	c3                   	ret    

c00111dc <KeLoadSystemEnv()>:
c00111dc:	53                   	push   ebx
c00111dd:	83 ec 14             	sub    esp,0x14
c00111e0:	6a 0c                	push   0xc
c00111e2:	e8 cf 68 ff ff       	call   c0007ab6 <malloc>
c00111e7:	89 c3                	mov    ebx,eax
c00111e9:	58                   	pop    eax
c00111ea:	5a                   	pop    edx
c00111eb:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c00111f1:	53                   	push   ebx
c00111f2:	e8 71 fe ff ff       	call   c0011068 <EnvVarContainer::EnvVarContainer(Process*)>
c00111f7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00111fa:	89 1d 84 8e 02 c0    	mov    DWORD PTR ds:0xc0028e84,ebx
c0011200:	e8 47 fe ff ff       	call   c001104c <EnvVarContainer::__loadSystem()>
c0011205:	83 c4 18             	add    esp,0x18
c0011208:	5b                   	pop    ebx
c0011209:	c3                   	ret    

c001120a <KeLoadUserEnv()>:
c001120a:	53                   	push   ebx
c001120b:	83 ec 14             	sub    esp,0x14
c001120e:	6a 0c                	push   0xc
c0011210:	e8 a1 68 ff ff       	call   c0007ab6 <malloc>
c0011215:	89 c3                	mov    ebx,eax
c0011217:	58                   	pop    eax
c0011218:	5a                   	pop    edx
c0011219:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c001121f:	53                   	push   ebx
c0011220:	e8 43 fe ff ff       	call   c0011068 <EnvVarContainer::EnvVarContainer(Process*)>
c0011225:	89 1d 80 8e 02 c0    	mov    DWORD PTR ds:0xc0028e80,ebx
c001122b:	83 c4 18             	add    esp,0x18
c001122e:	5b                   	pop    ebx
c001122f:	c3                   	ret    

c0011230 <KeFlushEnv()>:
c0011230:	c3                   	ret    

c0011231 <KeGetProcessTotalEnvCount(Process*)>:
c0011231:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011235:	8b 15 80 8e 02 c0    	mov    edx,DWORD PTR ds:0xc0028e80
c001123b:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0011241:	a1 84 8e 02 c0       	mov    eax,ds:0xc0028e84
c0011246:	8b 00                	mov    eax,DWORD PTR [eax]
c0011248:	03 01                	add    eax,DWORD PTR [ecx]
c001124a:	85 d2                	test   edx,edx
c001124c:	74 02                	je     c0011250 <KeGetProcessTotalEnvCount(Process*)+0x1f>
c001124e:	03 02                	add    eax,DWORD PTR [edx]
c0011250:	c3                   	ret    

c0011251 <KeGetProcessEnvPair(Process*, int)>:
c0011251:	57                   	push   edi
c0011252:	56                   	push   esi
c0011253:	8b 35 80 8e 02 c0    	mov    esi,DWORD PTR ds:0xc0028e80
c0011259:	53                   	push   ebx
c001125a:	85 f6                	test   esi,esi
c001125c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011260:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011264:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c001126a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001126e:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011270:	75 16                	jne    c0011288 <KeGetProcessEnvPair(Process*, int)+0x37>
c0011272:	39 c2                	cmp    edx,eax
c0011274:	7c 16                	jl     c001128c <KeGetProcessEnvPair(Process*, int)+0x3b>
c0011276:	8b 0d 84 8e 02 c0    	mov    ecx,DWORD PTR ds:0xc0028e84
c001127c:	8b 31                	mov    esi,DWORD PTR [ecx]
c001127e:	01 c6                	add    esi,eax
c0011280:	39 d6                	cmp    esi,edx
c0011282:	7e 3c                	jle    c00112c0 <KeGetProcessEnvPair(Process*, int)+0x6f>
c0011284:	29 c2                	sub    edx,eax
c0011286:	eb 04                	jmp    c001128c <KeGetProcessEnvPair(Process*, int)+0x3b>
c0011288:	39 c2                	cmp    edx,eax
c001128a:	7d 05                	jge    c0011291 <KeGetProcessEnvPair(Process*, int)+0x40>
c001128c:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001128f:	eb 20                	jmp    c00112b1 <KeGetProcessEnvPair(Process*, int)+0x60>
c0011291:	8b 3e                	mov    edi,DWORD PTR [esi]
c0011293:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0011296:	39 d1                	cmp    ecx,edx
c0011298:	7e 04                	jle    c001129e <KeGetProcessEnvPair(Process*, int)+0x4d>
c001129a:	29 c2                	sub    edx,eax
c001129c:	eb 10                	jmp    c00112ae <KeGetProcessEnvPair(Process*, int)+0x5d>
c001129e:	8b 35 84 8e 02 c0    	mov    esi,DWORD PTR ds:0xc0028e84
c00112a4:	03 0e                	add    ecx,DWORD PTR [esi]
c00112a6:	39 d1                	cmp    ecx,edx
c00112a8:	7e 16                	jle    c00112c0 <KeGetProcessEnvPair(Process*, int)+0x6f>
c00112aa:	29 c2                	sub    edx,eax
c00112ac:	29 fa                	sub    edx,edi
c00112ae:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00112b1:	8d 14 d0             	lea    edx,[eax+edx*8]
c00112b4:	8b 02                	mov    eax,DWORD PTR [edx]
c00112b6:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00112b9:	89 03                	mov    DWORD PTR [ebx],eax
c00112bb:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00112be:	eb 1d                	jmp    c00112dd <KeGetProcessEnvPair(Process*, int)+0x8c>
c00112c0:	83 ec 0c             	sub    esp,0xc
c00112c3:	68 32 1f 02 c0       	push   0xc0021f32
c00112c8:	e8 ac 00 00 00       	call   c0011379 <KePanic(char const*)>
c00112cd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00112d3:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00112da:	83 c4 10             	add    esp,0x10
c00112dd:	89 d8                	mov    eax,ebx
c00112df:	5b                   	pop    ebx
c00112e0:	5e                   	pop    esi
c00112e1:	5f                   	pop    edi
c00112e2:	c2 04 00             	ret    0x4

c00112e5 <CPU::current()>:
c00112e5:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00112ea:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00112f0:	c3                   	ret    

c00112f1 <operator new(unsigned long)>:
c00112f1:	e9 c0 67 ff ff       	jmp    c0007ab6 <malloc>

c00112f6 <operator delete(void*)>:
c00112f6:	e9 db 67 ff ff       	jmp    c0007ad6 <rfree>

c00112fb <disableIRQs()>:
c00112fb:	fa                   	cli    
c00112fc:	c3                   	ret    

c00112fd <enableIRQs()>:
c00112fd:	fb                   	sti    
c00112fe:	c3                   	ret    

c00112ff <lockScheduler()>:
c00112ff:	fa                   	cli    
c0011300:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0011306:	c3                   	ret    

c0011307 <unlockScheduler()>:
c0011307:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001130c:	48                   	dec    eax
c001130d:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0011312:	75 01                	jne    c0011315 <unlockScheduler()+0xe>
c0011314:	fb                   	sti    
c0011315:	c3                   	ret    

c0011316 <lockStuff()>:
c0011316:	fa                   	cli    
c0011317:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c001131d:	ff 05 c4 96 02 c0    	inc    DWORD PTR ds:0xc00296c4
c0011323:	c3                   	ret    

c0011324 <unlockStuff()>:
c0011324:	83 ec 0c             	sub    esp,0xc
c0011327:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c001132c:	48                   	dec    eax
c001132d:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0011332:	75 18                	jne    c001134c <unlockStuff()+0x28>
c0011334:	83 3d c0 96 02 c0 00 	cmp    DWORD PTR ds:0xc00296c0,0x0
c001133b:	74 0f                	je     c001134c <unlockStuff()+0x28>
c001133d:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0011347:	e8 f0 49 00 00       	call   c0015d3c <schedule()>
c001134c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0011351:	48                   	dec    eax
c0011352:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0011357:	75 01                	jne    c001135a <unlockStuff()+0x36>
c0011359:	fb                   	sti    
c001135a:	83 c4 0c             	add    esp,0xc
c001135d:	c3                   	ret    

c001135e <Virt::getAKernelVAS()>:
c001135e:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c0011363:	c3                   	ret    

c0011364 <__not_memcpy>:
c0011364:	57                   	push   edi
c0011365:	56                   	push   esi
c0011366:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001136a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001136e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011372:	89 c7                	mov    edi,eax
c0011374:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011376:	5e                   	pop    esi
c0011377:	5f                   	pop    edi
c0011378:	c3                   	ret    

c0011379 <KePanic(char const*)>:
c0011379:	c6 05 88 8e 02 c0 01 	mov    BYTE PTR ds:0xc0028e88,0x1
c0011380:	e9 5d 69 00 00       	jmp    c0017ce2 <HalPanic(char const*)>

c0011385 <KePowerThread(void*)>:
c0011385:	83 ec 0c             	sub    esp,0xc
c0011388:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001138d:	48                   	dec    eax
c001138e:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0011393:	75 01                	jne    c0011396 <KePowerThread(void*)+0x11>
c0011395:	fb                   	sti    
c0011396:	83 ec 0c             	sub    esp,0xc
c0011399:	c6 05 a0 8e 02 c0 00 	mov    BYTE PTR ds:0xc0028ea0,0x0
c00113a0:	6a 0a                	push   0xa
c00113a2:	e8 d9 4c 00 00       	call   c0016080 <sleep(unsigned int)>
c00113a7:	83 05 e4 8e 02 c0 0a 	add    DWORD PTR ds:0xc0028ee4,0xa
c00113ae:	83 c4 10             	add    esp,0x10
c00113b1:	eb e3                	jmp    c0011396 <KePowerThread(void*)+0x11>

c00113b3 <KeChangePowerSettings(PowerSettings)>:
c00113b3:	57                   	push   edi
c00113b4:	b9 09 00 00 00       	mov    ecx,0x9
c00113b9:	56                   	push   esi
c00113ba:	bf c0 8e 02 c0       	mov    edi,0xc0028ec0
c00113bf:	fc                   	cld    
c00113c0:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00113c4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00113c6:	5e                   	pop    esi
c00113c7:	5f                   	pop    edi
c00113c8:	c3                   	ret    

c00113c9 <KeUserIOReceived()>:
c00113c9:	c7 05 e4 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ee4,0x0
c00113d3:	c3                   	ret    

c00113d4 <KeHandlePowerButton()>:
c00113d4:	83 ec 0c             	sub    esp,0xc
c00113d7:	a1 c0 8e 02 c0       	mov    eax,ds:0xc0028ec0
c00113dc:	83 f8 02             	cmp    eax,0x2
c00113df:	75 10                	jne    c00113f1 <KeHandlePowerButton()+0x1d>
c00113e1:	83 ec 0c             	sub    esp,0xc
c00113e4:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00113ea:	e8 39 5d ff ff       	call   c0007128 <Computer::shutdown()>
c00113ef:	eb 11                	jmp    c0011402 <KeHandlePowerButton()+0x2e>
c00113f1:	48                   	dec    eax
c00113f2:	75 11                	jne    c0011405 <KeHandlePowerButton()+0x31>
c00113f4:	83 ec 0c             	sub    esp,0xc
c00113f7:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00113fd:	e8 56 5d ff ff       	call   c0007158 <Computer::sleep()>
c0011402:	83 c4 10             	add    esp,0x10
c0011405:	83 c4 0c             	add    esp,0xc
c0011408:	c3                   	ret    

c0011409 <KeHandleSleepButton()>:
c0011409:	83 ec 0c             	sub    esp,0xc
c001140c:	a1 c4 8e 02 c0       	mov    eax,ds:0xc0028ec4
c0011411:	83 f8 02             	cmp    eax,0x2
c0011414:	75 10                	jne    c0011426 <KeHandleSleepButton()+0x1d>
c0011416:	83 ec 0c             	sub    esp,0xc
c0011419:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001141f:	e8 04 5d ff ff       	call   c0007128 <Computer::shutdown()>
c0011424:	eb 11                	jmp    c0011437 <KeHandleSleepButton()+0x2e>
c0011426:	48                   	dec    eax
c0011427:	75 11                	jne    c001143a <KeHandleSleepButton()+0x31>
c0011429:	83 ec 0c             	sub    esp,0xc
c001142c:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0011432:	e8 21 5d ff ff       	call   c0007158 <Computer::sleep()>
c0011437:	83 c4 10             	add    esp,0x10
c001143a:	83 c4 0c             	add    esp,0xc
c001143d:	c3                   	ret    

c001143e <KeSetupPowerManager()>:
c001143e:	83 ec 0c             	sub    esp,0xc
c0011441:	c7 05 e4 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ee4,0x0
c001144b:	68 f0 00 00 00       	push   0xf0
c0011450:	c6 05 a0 8e 02 c0 00 	mov    BYTE PTR ds:0xc0028ea0,0x0
c0011457:	6a 00                	push   0x0
c0011459:	68 85 13 01 c0       	push   0xc0011385
c001145e:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0011464:	e8 83 46 00 00       	call   c0015aec <Process::createThread(void (*)(void*), void*, int)>
c0011469:	c7 05 c0 8e 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0028ec0,0x2
c0011473:	c7 05 c4 8e 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0028ec4,0x1
c001147d:	c7 05 c8 8e 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0028ec8,0x3
c0011487:	c7 05 cc 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ecc,0x0
c0011491:	c7 05 d8 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ed8,0x0
c001149b:	c7 05 d0 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ed0,0x0
c00114a5:	c7 05 dc 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028edc,0x0
c00114af:	c7 05 d4 8e 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0028ed4,0x3c
c00114b9:	c7 05 e0 8e 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0028ee0,0x3c
c00114c3:	83 c4 1c             	add    esp,0x1c
c00114c6:	c3                   	ret    

c00114c7 <KeRand()>:
c00114c7:	69 05 e8 8e 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc0028ee8,0x2875
c00114d1:	69 0d ec 8e 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc0028eec,0xa2e7b175
c00114db:	53                   	push   ebx
c00114dc:	01 c1                	add    ecx,eax
c00114de:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c00114e3:	f7 25 e8 8e 02 c0    	mul    DWORD PTR ds:0xc0028ee8
c00114e9:	01 ca                	add    edx,ecx
c00114eb:	05 ef 04 b5 00       	add    eax,0xb504ef
c00114f0:	83 d2 00             	adc    edx,0x0
c00114f3:	a3 e8 8e 02 c0       	mov    ds:0xc0028ee8,eax
c00114f8:	0f b7 da             	movzx  ebx,dx
c00114fb:	89 da                	mov    edx,ebx
c00114fd:	89 1d ec 8e 02 c0    	mov    DWORD PTR ds:0xc0028eec,ebx
c0011503:	0f ac d0 0e          	shrd   eax,edx,0xe
c0011507:	5b                   	pop    ebx
c0011508:	c3                   	ret    

c0011509 <KeSeedRand(unsigned int)>:
c0011509:	53                   	push   ebx
c001150a:	83 ec 08             	sub    esp,0x8
c001150d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011511:	e8 eb 6a 00 00       	call   c0018001 <HalGetRand()>
c0011516:	c7 05 ec 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028eec,0x0
c0011520:	31 d8                	xor    eax,ebx
c0011522:	a3 e8 8e 02 c0       	mov    ds:0xc0028ee8,eax
c0011527:	e8 9b ff ff ff       	call   c00114c7 <KeRand()>
c001152c:	83 c4 08             	add    esp,0x8
c001152f:	5b                   	pop    ebx
c0011530:	eb 95                	jmp    c00114c7 <KeRand()>

c0011532 <KeInitRand()>:
c0011532:	83 ec 0c             	sub    esp,0xc
c0011535:	e8 bc 68 00 00       	call   c0017df6 <HalQueryPerformanceCounter()>
c001153a:	0f 20 da             	mov    edx,cr3
c001153d:	0f 22 da             	mov    cr3,edx
c0011540:	0f 20 da             	mov    edx,cr3
c0011543:	0f 22 da             	mov    cr3,edx
c0011546:	0f 20 da             	mov    edx,cr3
c0011549:	0f 22 da             	mov    cr3,edx
c001154c:	0f 20 da             	mov    edx,cr3
c001154f:	0f 22 da             	mov    cr3,edx
c0011552:	83 ec 0c             	sub    esp,0xc
c0011555:	35 03 8a 95 38       	xor    eax,0x38958a03
c001155a:	50                   	push   eax
c001155b:	e8 a9 ff ff ff       	call   c0011509 <KeSeedRand(unsigned int)>
c0011560:	83 c4 1c             	add    esp,0x1c
c0011563:	c3                   	ret    

c0011564 <KeResolveCompatibilitySymbol(char*)>:
c0011564:	83 ec 0c             	sub    esp,0xc
c0011567:	83 ec 08             	sub    esp,0x8
c001156a:	68 4c 1f 02 c0       	push   0xc0021f4c
c001156f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011573:	e8 d8 f1 fe ff       	call   c0000750 <strcmp>
c0011578:	83 c4 10             	add    esp,0x10
c001157b:	85 c0                	test   eax,eax
c001157d:	0f 94 c0             	sete   al
c0011580:	0f b6 c0             	movzx  eax,al
c0011583:	85 c0                	test   eax,eax
c0011585:	74 0d                	je     c0011594 <KeResolveCompatibilitySymbol(char*)+0x30>
c0011587:	b8 b8 5e 02 c0       	mov    eax,0xc0025eb8
c001158c:	e9 8b 01 00 00       	jmp    c001171c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011591:	8d 76 00             	lea    esi,[esi+0x0]
c0011594:	83 ec 08             	sub    esp,0x8
c0011597:	68 55 1f 02 c0       	push   0xc0021f55
c001159c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00115a0:	e8 ab f1 fe ff       	call   c0000750 <strcmp>
c00115a5:	83 c4 10             	add    esp,0x10
c00115a8:	85 c0                	test   eax,eax
c00115aa:	0f 94 c0             	sete   al
c00115ad:	0f b6 c0             	movzx  eax,al
c00115b0:	85 c0                	test   eax,eax
c00115b2:	74 0c                	je     c00115c0 <KeResolveCompatibilitySymbol(char*)+0x5c>
c00115b4:	b8 b0 f3 01 c0       	mov    eax,0xc001f3b0
c00115b9:	e9 5e 01 00 00       	jmp    c001171c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00115be:	66 90                	xchg   ax,ax
c00115c0:	83 ec 08             	sub    esp,0x8
c00115c3:	68 5f 1f 02 c0       	push   0xc0021f5f
c00115c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00115cc:	e8 7f f1 fe ff       	call   c0000750 <strcmp>
c00115d1:	83 c4 10             	add    esp,0x10
c00115d4:	85 c0                	test   eax,eax
c00115d6:	0f 94 c0             	sete   al
c00115d9:	0f b6 c0             	movzx  eax,al
c00115dc:	85 c0                	test   eax,eax
c00115de:	74 0c                	je     c00115ec <KeResolveCompatibilitySymbol(char*)+0x88>
c00115e0:	b8 e4 f0 01 c0       	mov    eax,0xc001f0e4
c00115e5:	e9 32 01 00 00       	jmp    c001171c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00115ea:	66 90                	xchg   ax,ax
c00115ec:	83 ec 08             	sub    esp,0x8
c00115ef:	68 68 1f 02 c0       	push   0xc0021f68
c00115f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00115f8:	e8 53 f1 fe ff       	call   c0000750 <strcmp>
c00115fd:	83 c4 10             	add    esp,0x10
c0011600:	85 c0                	test   eax,eax
c0011602:	0f 94 c0             	sete   al
c0011605:	0f b6 c0             	movzx  eax,al
c0011608:	85 c0                	test   eax,eax
c001160a:	74 0c                	je     c0011618 <KeResolveCompatibilitySymbol(char*)+0xb4>
c001160c:	b8 79 13 01 c0       	mov    eax,0xc0011379
c0011611:	e9 06 01 00 00       	jmp    c001171c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011616:	66 90                	xchg   ax,ax
c0011618:	83 ec 08             	sub    esp,0x8
c001161b:	68 7b 1f 02 c0       	push   0xc0021f7b
c0011620:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011624:	e8 27 f1 fe ff       	call   c0000750 <strcmp>
c0011629:	83 c4 10             	add    esp,0x10
c001162c:	85 c0                	test   eax,eax
c001162e:	0f 94 c0             	sete   al
c0011631:	0f b6 c0             	movzx  eax,al
c0011634:	85 c0                	test   eax,eax
c0011636:	74 0c                	je     c0011644 <KeResolveCompatibilitySymbol(char*)+0xe0>
c0011638:	b8 a3 0c 01 c0       	mov    eax,0xc0010ca3
c001163d:	e9 da 00 00 00       	jmp    c001171c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011642:	66 90                	xchg   ax,ax
c0011644:	83 ec 08             	sub    esp,0x8
c0011647:	68 98 1f 02 c0       	push   0xc0021f98
c001164c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011650:	e8 fb f0 fe ff       	call   c0000750 <strcmp>
c0011655:	83 c4 10             	add    esp,0x10
c0011658:	85 c0                	test   eax,eax
c001165a:	0f 94 c0             	sete   al
c001165d:	0f b6 c0             	movzx  eax,al
c0011660:	85 c0                	test   eax,eax
c0011662:	74 0c                	je     c0011670 <KeResolveCompatibilitySymbol(char*)+0x10c>
c0011664:	b8 b0 f4 01 c0       	mov    eax,0xc001f4b0
c0011669:	e9 ae 00 00 00       	jmp    c001171c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001166e:	66 90                	xchg   ax,ax
c0011670:	83 ec 08             	sub    esp,0x8
c0011673:	68 a2 1f 02 c0       	push   0xc0021fa2
c0011678:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001167c:	e8 cf f0 fe ff       	call   c0000750 <strcmp>
c0011681:	83 c4 10             	add    esp,0x10
c0011684:	85 c0                	test   eax,eax
c0011686:	0f 94 c0             	sete   al
c0011689:	0f b6 c0             	movzx  eax,al
c001168c:	85 c0                	test   eax,eax
c001168e:	74 0c                	je     c001169c <KeResolveCompatibilitySymbol(char*)+0x138>
c0011690:	b8 30 f2 01 c0       	mov    eax,0xc001f230
c0011695:	e9 82 00 00 00       	jmp    c001171c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001169a:	66 90                	xchg   ax,ax
c001169c:	83 ec 08             	sub    esp,0x8
c001169f:	68 ab 1f 02 c0       	push   0xc0021fab
c00116a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00116a8:	e8 a3 f0 fe ff       	call   c0000750 <strcmp>
c00116ad:	83 c4 10             	add    esp,0x10
c00116b0:	85 c0                	test   eax,eax
c00116b2:	0f 94 c0             	sete   al
c00116b5:	0f b6 c0             	movzx  eax,al
c00116b8:	85 c0                	test   eax,eax
c00116ba:	74 08                	je     c00116c4 <KeResolveCompatibilitySymbol(char*)+0x160>
c00116bc:	b8 bc 5e 02 c0       	mov    eax,0xc0025ebc
c00116c1:	eb 59                	jmp    c001171c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00116c3:	90                   	nop
c00116c4:	83 ec 08             	sub    esp,0x8
c00116c7:	68 c3 1f 02 c0       	push   0xc0021fc3
c00116cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00116d0:	e8 7b f0 fe ff       	call   c0000750 <strcmp>
c00116d5:	83 c4 10             	add    esp,0x10
c00116d8:	85 c0                	test   eax,eax
c00116da:	0f 94 c0             	sete   al
c00116dd:	0f b6 c0             	movzx  eax,al
c00116e0:	85 c0                	test   eax,eax
c00116e2:	74 08                	je     c00116ec <KeResolveCompatibilitySymbol(char*)+0x188>
c00116e4:	b8 bc 5e 02 c0       	mov    eax,0xc0025ebc
c00116e9:	eb 31                	jmp    c001171c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00116eb:	90                   	nop
c00116ec:	83 ec 08             	sub    esp,0x8
c00116ef:	68 d0 1f 02 c0       	push   0xc0021fd0
c00116f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00116f8:	e8 53 f0 fe ff       	call   c0000750 <strcmp>
c00116fd:	83 c4 10             	add    esp,0x10
c0011700:	85 c0                	test   eax,eax
c0011702:	0f 94 c0             	sete   al
c0011705:	0f b6 c0             	movzx  eax,al
c0011708:	85 c0                	test   eax,eax
c001170a:	74 08                	je     c0011714 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c001170c:	b8 bd 5e 02 c0       	mov    eax,0xc0025ebd
c0011711:	eb 09                	jmp    c001171c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011713:	90                   	nop
c0011714:	b8 00 00 00 00       	mov    eax,0x0
c0011719:	8d 76 00             	lea    esi,[esi+0x0]
c001171c:	83 c4 0c             	add    esp,0xc
c001171f:	c3                   	ret    

c0011720 <KiSigKill(int)>:
c0011720:	83 ec 0c             	sub    esp,0xc
c0011723:	6a 00                	push   0x0
c0011725:	6a 00                	push   0x0
c0011727:	6a ff                	push   0xffffffff
c0011729:	6a 01                	push   0x1
c001172b:	e8 22 29 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011730:	83 c4 1c             	add    esp,0x1c
c0011733:	c3                   	ret    

c0011734 <KiDefaultSignalHandlerIgnore(int)>:
c0011734:	c3                   	ret    

c0011735 <KiDefaultSignalHandlerPause(int)>:
c0011735:	57                   	push   edi
c0011736:	b9 07 00 00 00       	mov    ecx,0x7
c001173b:	56                   	push   esi
c001173c:	be 19 20 02 c0       	mov    esi,0xc0022019
c0011741:	83 ec 24             	sub    esp,0x24
c0011744:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0011748:	fc                   	cld    
c0011749:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001174b:	8d 44 24 04          	lea    eax,[esp+0x4]
c001174f:	50                   	push   eax
c0011750:	6a 00                	push   0x0
c0011752:	6a 00                	push   0x0
c0011754:	6a 27                	push   0x27
c0011756:	e8 f7 28 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c001175b:	83 c4 34             	add    esp,0x34
c001175e:	5e                   	pop    esi
c001175f:	5f                   	pop    edi
c0011760:	c3                   	ret    

c0011761 <KiDefaultSignalHandlerResume(int)>:
c0011761:	57                   	push   edi
c0011762:	b9 1d 00 00 00       	mov    ecx,0x1d
c0011767:	56                   	push   esi
c0011768:	be 35 20 02 c0       	mov    esi,0xc0022035
c001176d:	83 ec 24             	sub    esp,0x24
c0011770:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0011774:	fc                   	cld    
c0011775:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011777:	8d 44 24 03          	lea    eax,[esp+0x3]
c001177b:	50                   	push   eax
c001177c:	6a 00                	push   0x0
c001177e:	6a 00                	push   0x0
c0011780:	6a 27                	push   0x27
c0011782:	e8 cb 28 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011787:	83 c4 34             	add    esp,0x34
c001178a:	5e                   	pop    esi
c001178b:	5f                   	pop    edi
c001178c:	c3                   	ret    

c001178d <KeDeinitSignals(SigHandlerBlock*)>:
c001178d:	e9 34 63 ff ff       	jmp    c0007ac6 <free>

c0011792 <KeInitSignals()>:
c0011792:	53                   	push   ebx
c0011793:	83 ec 14             	sub    esp,0x14
c0011796:	68 c8 00 00 00       	push   0xc8
c001179b:	e8 16 63 ff ff       	call   c0007ab6 <malloc>
c00117a0:	83 c4 0c             	add    esp,0xc
c00117a3:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c00117ad:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c00117b7:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c00117be:	89 c3                	mov    ebx,eax
c00117c0:	6a 20                	push   0x20
c00117c2:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c00117c8:	6a 00                	push   0x0
c00117ca:	50                   	push   eax
c00117cb:	e8 20 ed fe ff       	call   c00004f0 <memset>
c00117d0:	83 c4 0c             	add    esp,0xc
c00117d3:	6a 44                	push   0x44
c00117d5:	6a 00                	push   0x0
c00117d7:	53                   	push   ebx
c00117d8:	e8 13 ed fe ff       	call   c00004f0 <memset>
c00117dd:	89 d8                	mov    eax,ebx
c00117df:	83 c4 18             	add    esp,0x18
c00117e2:	5b                   	pop    ebx
c00117e3:	c3                   	ret    

c00117e4 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c00117e4:	53                   	push   ebx
c00117e5:	b8 01 00 00 00       	mov    eax,0x1
c00117ea:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00117ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00117f2:	83 f9 10             	cmp    ecx,0x10
c00117f5:	7f 21                	jg     c0011818 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c00117f7:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c00117fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117fe:	89 03                	mov    DWORD PTR [ebx],eax
c0011800:	b8 01 00 00 00       	mov    eax,0x1
c0011805:	d3 e0                	shl    eax,cl
c0011807:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001180b:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001180e:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0011816:	31 c0                	xor    eax,eax
c0011818:	5b                   	pop    ebx
c0011819:	c3                   	ret    

c001181a <KeRaiseSignal(SigHandlerBlock*, int)>:
c001181a:	55                   	push   ebp
c001181b:	57                   	push   edi
c001181c:	bf 08 00 00 00       	mov    edi,0x8
c0011821:	56                   	push   esi
c0011822:	53                   	push   ebx
c0011823:	83 ec 18             	sub    esp,0x18
c0011826:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001182a:	68 52 20 02 c0       	push   0xc0022052
c001182f:	e8 11 91 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0011834:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c001183b:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0011841:	83 c4 10             	add    esp,0x10
c0011844:	31 c9                	xor    ecx,ecx
c0011846:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001184a:	99                   	cdq    
c001184b:	f7 ff                	idiv   edi
c001184d:	8d 42 24             	lea    eax,[edx+0x24]
c0011850:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0011854:	85 f6                	test   esi,esi
c0011856:	75 1a                	jne    c0011872 <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c0011858:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001185c:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0011860:	50                   	push   eax
c0011861:	50                   	push   eax
c0011862:	52                   	push   edx
c0011863:	68 63 20 02 c0       	push   0xc0022063
c0011868:	e8 d8 90 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001186d:	83 c4 10             	add    esp,0x10
c0011870:	eb 1b                	jmp    c001188d <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0011872:	41                   	inc    ecx
c0011873:	83 f9 08             	cmp    ecx,0x8
c0011876:	75 ce                	jne    c0011846 <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0011878:	83 ec 0c             	sub    esp,0xc
c001187b:	be 01 00 00 00       	mov    esi,0x1
c0011880:	68 84 20 02 c0       	push   0xc0022084
c0011885:	e8 bb 90 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001188a:	83 c4 10             	add    esp,0x10
c001188d:	83 c4 0c             	add    esp,0xc
c0011890:	89 f0                	mov    eax,esi
c0011892:	5b                   	pop    ebx
c0011893:	5e                   	pop    esi
c0011894:	5f                   	pop    edi
c0011895:	5d                   	pop    ebp
c0011896:	c3                   	ret    

c0011897 <KeCheckSignal(SigHandlerBlock*, int*)>:
c0011897:	55                   	push   ebp
c0011898:	57                   	push   edi
c0011899:	56                   	push   esi
c001189a:	53                   	push   ebx
c001189b:	51                   	push   ecx
c001189c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00118a0:	85 db                	test   ebx,ebx
c00118a2:	0f 84 bc 00 00 00    	je     c0011964 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c00118a8:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c00118af:	0f 84 af 00 00 00    	je     c0011964 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c00118b5:	31 c9                	xor    ecx,ecx
c00118b7:	bf 08 00 00 00       	mov    edi,0x8
c00118bc:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c00118c2:	8d 04 0e             	lea    eax,[esi+ecx*1]
c00118c5:	99                   	cdq    
c00118c6:	f7 ff                	idiv   edi
c00118c8:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c00118cf:	85 ed                	test   ebp,ebp
c00118d1:	0f 84 9e 00 00 00    	je     c0011975 <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c00118d7:	89 e9                	mov    ecx,ebp
c00118d9:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c00118df:	bf 01 00 00 00       	mov    edi,0x1
c00118e4:	89 04 24             	mov    DWORD PTR [esp],eax
c00118e7:	d3 e7                	shl    edi,cl
c00118e9:	31 c9                	xor    ecx,ecx
c00118eb:	b8 01 00 00 00       	mov    eax,0x1
c00118f0:	d3 e0                	shl    eax,cl
c00118f2:	85 04 24             	test   DWORD PTR [esp],eax
c00118f5:	74 06                	je     c00118fd <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c00118f7:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c00118fb:	75 67                	jne    c0011964 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c00118fd:	41                   	inc    ecx
c00118fe:	83 f9 11             	cmp    ecx,0x11
c0011901:	75 e8                	jne    c00118eb <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c0011903:	46                   	inc    esi
c0011904:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0011907:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c001190d:	09 f8                	or     eax,edi
c001190f:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c001191a:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0011920:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0011927:	31 c0                	xor    eax,eax
c0011929:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0011931:	74 09                	je     c001193c <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c0011933:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c001193a:	eb 06                	jmp    c0011942 <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c001193c:	40                   	inc    eax
c001193d:	83 f8 08             	cmp    eax,0x8
c0011940:	75 e7                	jne    c0011929 <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c0011942:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0011945:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011949:	83 fd 09             	cmp    ebp,0x9
c001194c:	89 2a                	mov    DWORD PTR [edx],ebp
c001194e:	75 07                	jne    c0011957 <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c0011950:	b8 20 17 01 c0       	mov    eax,0xc0011720
c0011955:	eb 31                	jmp    c0011988 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011957:	83 f8 01             	cmp    eax,0x1
c001195a:	75 0c                	jne    c0011968 <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c001195c:	f7 d7                	not    edi
c001195e:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0011964:	31 c0                	xor    eax,eax
c0011966:	eb 20                	jmp    c0011988 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011968:	85 c0                	test   eax,eax
c001196a:	75 1c                	jne    c0011988 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c001196c:	8b 04 ad 80 34 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffdcb80]
c0011973:	eb 13                	jmp    c0011988 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011975:	46                   	inc    esi
c0011976:	41                   	inc    ecx
c0011977:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c001197d:	83 f9 08             	cmp    ecx,0x8
c0011980:	0f 85 36 ff ff ff    	jne    c00118bc <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c0011986:	eb dc                	jmp    c0011964 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011988:	5a                   	pop    edx
c0011989:	5b                   	pop    ebx
c001198a:	5e                   	pop    esi
c001198b:	5f                   	pop    edi
c001198c:	5d                   	pop    ebp
c001198d:	c3                   	ret    

c001198e <KiCheckSignalZ>:
c001198e:	83 ec 10             	sub    esp,0x10
c0011991:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011995:	50                   	push   eax
c0011996:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001199b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001199e:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00119a4:	e8 ee fe ff ff       	call   c0011897 <KeCheckSignal(SigHandlerBlock*, int*)>
c00119a9:	5a                   	pop    edx
c00119aa:	31 d2                	xor    edx,edx
c00119ac:	59                   	pop    ecx
c00119ad:	85 c0                	test   eax,eax
c00119af:	74 19                	je     c00119ca <KiCheckSignalZ+0x3c>
c00119b1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00119b7:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00119ba:	89 02                	mov    DWORD PTR [edx],eax
c00119bc:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c00119c3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00119c7:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00119ca:	89 d0                	mov    eax,edx
c00119cc:	83 c4 10             	add    esp,0x10
c00119cf:	c3                   	ret    

c00119d0 <KeCompleteSignal(SigHandlerBlock*, int)>:
c00119d0:	56                   	push   esi
c00119d1:	53                   	push   ebx
c00119d2:	bb 01 00 00 00       	mov    ebx,0x1
c00119d7:	52                   	push   edx
c00119d8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00119dc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00119e0:	d3 e3                	shl    ebx,cl
c00119e2:	83 f9 10             	cmp    ecx,0x10
c00119e5:	7f 08                	jg     c00119ef <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c00119e7:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c00119ed:	75 10                	jne    c00119ff <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c00119ef:	83 ec 0c             	sub    esp,0xc
c00119f2:	68 95 20 02 c0       	push   0xc0022095
c00119f7:	e8 7d f9 ff ff       	call   c0011379 <KePanic(char const*)>
c00119fc:	83 c4 10             	add    esp,0x10
c00119ff:	f7 d3                	not    ebx
c0011a01:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0011a07:	58                   	pop    eax
c0011a08:	5b                   	pop    ebx
c0011a09:	5e                   	pop    esi
c0011a0a:	c3                   	ret    

c0011a0b <KiFinishSignalZ>:
c0011a0b:	53                   	push   ebx
c0011a0c:	83 ec 10             	sub    esp,0x10
c0011a0f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011a13:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0011a16:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011a1b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011a1e:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011a24:	e8 a7 ff ff ff       	call   c00119d0 <KeCompleteSignal(SigHandlerBlock*, int)>
c0011a29:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011a2f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0011a36:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0011a3d:	83 c4 18             	add    esp,0x18
c0011a40:	5b                   	pop    ebx
c0011a41:	c3                   	ret    

c0011a42 <SysSeekDir(regs*)>:
c0011a42:	31 c0                	xor    eax,eax
c0011a44:	31 d2                	xor    edx,edx
c0011a46:	c3                   	ret    

c0011a47 <SysTellDir(regs*)>:
c0011a47:	31 c0                	xor    eax,eax
c0011a49:	31 d2                	xor    edx,edx
c0011a4b:	c3                   	ret    

c0011a4c <SysVerify(regs*)>:
c0011a4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a50:	31 d2                	xor    edx,edx
c0011a52:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011a55:	c3                   	ret    

c0011a56 <SysGetArgc(regs*)>:
c0011a56:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011a5b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011a5e:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0011a64:	89 c2                	mov    edx,eax
c0011a66:	c1 fa 1f             	sar    edx,0x1f
c0011a69:	c3                   	ret    

c0011a6a <SysTTYName(regs*)>:
c0011a6a:	b8 01 00 00 00       	mov    eax,0x1
c0011a6f:	31 d2                	xor    edx,edx
c0011a71:	c3                   	ret    

c0011a72 <SysFormatDisk(regs*)>:
c0011a72:	56                   	push   esi
c0011a73:	53                   	push   ebx
c0011a74:	83 ec 04             	sub    esp,0x4
c0011a77:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011a7b:	8b 1d 04 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026404
c0011a81:	eb 28                	jmp    c0011aab <SysFormatDisk(regs*)+0x39>
c0011a83:	83 ec 0c             	sub    esp,0xc
c0011a86:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0011a89:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0011a8c:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011a8e:	51                   	push   ecx
c0011a8f:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0011a92:	51                   	push   ecx
c0011a93:	50                   	push   eax
c0011a94:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c0011a9b:	50                   	push   eax
c0011a9c:	53                   	push   ebx
c0011a9d:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0011aa0:	83 c4 20             	add    esp,0x20
c0011aa3:	83 f8 08             	cmp    eax,0x8
c0011aa6:	75 14                	jne    c0011abc <SysFormatDisk(regs*)+0x4a>
c0011aa8:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0011aab:	85 db                	test   ebx,ebx
c0011aad:	75 d4                	jne    c0011a83 <SysFormatDisk(regs*)+0x11>
c0011aaf:	83 c4 04             	add    esp,0x4
c0011ab2:	b8 03 00 00 00       	mov    eax,0x3
c0011ab7:	31 d2                	xor    edx,edx
c0011ab9:	5b                   	pop    ebx
c0011aba:	5e                   	pop    esi
c0011abb:	c3                   	ret    
c0011abc:	85 c0                	test   eax,eax
c0011abe:	74 1f                	je     c0011adf <SysFormatDisk(regs*)+0x6d>
c0011ac0:	83 f8 09             	cmp    eax,0x9
c0011ac3:	74 0d                	je     c0011ad2 <SysFormatDisk(regs*)+0x60>
c0011ac5:	83 c4 04             	add    esp,0x4
c0011ac8:	b8 02 00 00 00       	mov    eax,0x2
c0011acd:	31 d2                	xor    edx,edx
c0011acf:	5b                   	pop    ebx
c0011ad0:	5e                   	pop    esi
c0011ad1:	c3                   	ret    
c0011ad2:	83 c4 04             	add    esp,0x4
c0011ad5:	b8 01 00 00 00       	mov    eax,0x1
c0011ada:	31 d2                	xor    edx,edx
c0011adc:	5b                   	pop    ebx
c0011add:	5e                   	pop    esi
c0011ade:	c3                   	ret    
c0011adf:	83 c4 04             	add    esp,0x4
c0011ae2:	31 c0                	xor    eax,eax
c0011ae4:	31 d2                	xor    edx,edx
c0011ae6:	5b                   	pop    ebx
c0011ae7:	5e                   	pop    esi
c0011ae8:	c3                   	ret    

c0011ae9 <SysSetDiskVolumeLabel(regs*)>:
c0011ae9:	56                   	push   esi
c0011aea:	53                   	push   ebx
c0011aeb:	83 ec 04             	sub    esp,0x4
c0011aee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011af2:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011af5:	83 f8 19             	cmp    eax,0x19
c0011af8:	77 33                	ja     c0011b2d <SysSetDiskVolumeLabel(regs*)+0x44>
c0011afa:	8b 0c 85 80 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7780]
c0011b01:	85 c9                	test   ecx,ecx
c0011b03:	74 28                	je     c0011b2d <SysSetDiskVolumeLabel(regs*)+0x44>
c0011b05:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0011b08:	85 db                	test   ebx,ebx
c0011b0a:	74 21                	je     c0011b2d <SysSetDiskVolumeLabel(regs*)+0x44>
c0011b0c:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0011b12:	85 d2                	test   edx,edx
c0011b14:	74 17                	je     c0011b2d <SysSetDiskVolumeLabel(regs*)+0x44>
c0011b16:	8b 32                	mov    esi,DWORD PTR [edx]
c0011b18:	53                   	push   ebx
c0011b19:	50                   	push   eax
c0011b1a:	51                   	push   ecx
c0011b1b:	52                   	push   edx
c0011b1c:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0011b1f:	83 c4 10             	add    esp,0x10
c0011b22:	89 c2                	mov    edx,eax
c0011b24:	83 c4 04             	add    esp,0x4
c0011b27:	c1 fa 1f             	sar    edx,0x1f
c0011b2a:	5b                   	pop    ebx
c0011b2b:	5e                   	pop    esi
c0011b2c:	c3                   	ret    
c0011b2d:	83 c4 04             	add    esp,0x4
c0011b30:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011b35:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011b3a:	5b                   	pop    ebx
c0011b3b:	5e                   	pop    esi
c0011b3c:	c3                   	ret    

c0011b3d <SysGetDiskVolumeLabel(regs*)>:
c0011b3d:	57                   	push   edi
c0011b3e:	56                   	push   esi
c0011b3f:	53                   	push   ebx
c0011b40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011b44:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0011b47:	83 fa 19             	cmp    edx,0x19
c0011b4a:	77 3c                	ja     c0011b88 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011b4c:	8b 0c 95 80 88 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd7780]
c0011b53:	85 c9                	test   ecx,ecx
c0011b55:	74 31                	je     c0011b88 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011b57:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011b5a:	85 db                	test   ebx,ebx
c0011b5c:	74 2a                	je     c0011b88 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011b5e:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011b61:	85 f6                	test   esi,esi
c0011b63:	74 23                	je     c0011b88 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011b65:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0011b6b:	85 c0                	test   eax,eax
c0011b6d:	74 19                	je     c0011b88 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011b6f:	83 ec 0c             	sub    esp,0xc
c0011b72:	8b 38                	mov    edi,DWORD PTR [eax]
c0011b74:	56                   	push   esi
c0011b75:	53                   	push   ebx
c0011b76:	52                   	push   edx
c0011b77:	51                   	push   ecx
c0011b78:	50                   	push   eax
c0011b79:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0011b7c:	83 c4 20             	add    esp,0x20
c0011b7f:	89 c2                	mov    edx,eax
c0011b81:	5b                   	pop    ebx
c0011b82:	c1 fa 1f             	sar    edx,0x1f
c0011b85:	5e                   	pop    esi
c0011b86:	5f                   	pop    edi
c0011b87:	c3                   	ret    
c0011b88:	5b                   	pop    ebx
c0011b89:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011b8e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011b93:	5e                   	pop    esi
c0011b94:	5f                   	pop    edi
c0011b95:	c3                   	ret    

c0011b96 <SysShutdown(regs*)>:
c0011b96:	83 ec 0c             	sub    esp,0xc
c0011b99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011b9d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011ba0:	85 c0                	test   eax,eax
c0011ba2:	74 18                	je     c0011bbc <SysShutdown(regs*)+0x26>
c0011ba4:	83 f8 01             	cmp    eax,0x1
c0011ba7:	74 38                	je     c0011be1 <SysShutdown(regs*)+0x4b>
c0011ba9:	83 f8 02             	cmp    eax,0x2
c0011bac:	74 24                	je     c0011bd2 <SysShutdown(regs*)+0x3c>
c0011bae:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011bb3:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011bb8:	83 c4 0c             	add    esp,0xc
c0011bbb:	c3                   	ret    
c0011bbc:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0011bc1:	8b 10                	mov    edx,DWORD PTR [eax]
c0011bc3:	6a 00                	push   0x0
c0011bc5:	6a 00                	push   0x0
c0011bc7:	6a 00                	push   0x0
c0011bc9:	50                   	push   eax
c0011bca:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011bcd:	83 c4 10             	add    esp,0x10
c0011bd0:	eb dc                	jmp    c0011bae <SysShutdown(regs*)+0x18>
c0011bd2:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0011bd7:	8b 10                	mov    edx,DWORD PTR [eax]
c0011bd9:	6a 00                	push   0x0
c0011bdb:	6a 00                	push   0x0
c0011bdd:	6a 01                	push   0x1
c0011bdf:	eb e8                	jmp    c0011bc9 <SysShutdown(regs*)+0x33>
c0011be1:	a1 00 89 02 c0       	mov    eax,ds:0xc0028900
c0011be6:	85 c0                	test   eax,eax
c0011be8:	74 02                	je     c0011bec <SysShutdown(regs*)+0x56>
c0011bea:	ff d0                	call   eax
c0011bec:	31 c0                	xor    eax,eax
c0011bee:	31 d2                	xor    edx,edx
c0011bf0:	83 c4 0c             	add    esp,0xc
c0011bf3:	c3                   	ret    

c0011bf4 <SysRealpath(regs*)>:
c0011bf4:	83 ec 0c             	sub    esp,0xc
c0011bf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011bfb:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011bfe:	85 d2                	test   edx,edx
c0011c00:	74 07                	je     c0011c09 <SysRealpath(regs*)+0x15>
c0011c02:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011c05:	85 c0                	test   eax,eax
c0011c07:	75 0b                	jne    c0011c14 <SysRealpath(regs*)+0x20>
c0011c09:	b8 01 00 00 00       	mov    eax,0x1
c0011c0e:	31 d2                	xor    edx,edx
c0011c10:	83 c4 0c             	add    esp,0xc
c0011c13:	c3                   	ret    
c0011c14:	6a 00                	push   0x0
c0011c16:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0011c1c:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0011c1f:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0011c25:	51                   	push   ecx
c0011c26:	52                   	push   edx
c0011c27:	50                   	push   eax
c0011c28:	e8 bb 99 ff ff       	call   c000b5e8 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011c2d:	83 c4 10             	add    esp,0x10
c0011c30:	31 c0                	xor    eax,eax
c0011c32:	31 d2                	xor    edx,edx
c0011c34:	83 c4 0c             	add    esp,0xc
c0011c37:	c3                   	ret    

c0011c38 <SysReadDir(regs*)>:
c0011c38:	53                   	push   ebx
c0011c39:	83 ec 18             	sub    esp,0x18
c0011c3c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011c40:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011c43:	83 f8 02             	cmp    eax,0x2
c0011c46:	76 61                	jbe    c0011ca9 <SysReadDir(regs*)+0x71>
c0011c48:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0011c4f:	77 49                	ja     c0011c9a <SysReadDir(regs*)+0x62>
c0011c51:	83 ec 0c             	sub    esp,0xc
c0011c54:	50                   	push   eax
c0011c55:	e8 59 78 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011c5a:	83 c4 10             	add    esp,0x10
c0011c5d:	85 c0                	test   eax,eax
c0011c5f:	74 39                	je     c0011c9a <SysReadDir(regs*)+0x62>
c0011c61:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011c69:	83 ec 0c             	sub    esp,0xc
c0011c6c:	8b 10                	mov    edx,DWORD PTR [eax]
c0011c6e:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011c72:	51                   	push   ecx
c0011c73:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011c76:	51                   	push   ecx
c0011c77:	6a 00                	push   0x0
c0011c79:	68 10 01 00 00       	push   0x110
c0011c7e:	50                   	push   eax
c0011c7f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011c82:	83 c4 20             	add    esp,0x20
c0011c85:	85 c0                	test   eax,eax
c0011c87:	74 29                	je     c0011cb2 <SysReadDir(regs*)+0x7a>
c0011c89:	83 f8 07             	cmp    eax,0x7
c0011c8c:	74 1b                	je     c0011ca9 <SysReadDir(regs*)+0x71>
c0011c8e:	b8 02 00 00 00       	mov    eax,0x2
c0011c93:	31 d2                	xor    edx,edx
c0011c95:	83 c4 18             	add    esp,0x18
c0011c98:	5b                   	pop    ebx
c0011c99:	c3                   	ret    
c0011c9a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011c9f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011ca4:	83 c4 18             	add    esp,0x18
c0011ca7:	5b                   	pop    ebx
c0011ca8:	c3                   	ret    
c0011ca9:	b8 01 00 00 00       	mov    eax,0x1
c0011cae:	31 d2                	xor    edx,edx
c0011cb0:	eb e3                	jmp    c0011c95 <SysReadDir(regs*)+0x5d>
c0011cb2:	31 c0                	xor    eax,eax
c0011cb4:	31 d2                	xor    edx,edx
c0011cb6:	eb dd                	jmp    c0011c95 <SysReadDir(regs*)+0x5d>

c0011cb8 <SysIsATTY(regs*)>:
c0011cb8:	83 ec 0c             	sub    esp,0xc
c0011cbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011cbf:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011cc2:	83 f8 02             	cmp    eax,0x2
c0011cc5:	76 07                	jbe    c0011cce <SysIsATTY(regs*)+0x16>
c0011cc7:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011ccc:	75 26                	jne    c0011cf4 <SysIsATTY(regs*)+0x3c>
c0011cce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011cd3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011cd6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011cdc:	85 c0                	test   eax,eax
c0011cde:	74 24                	je     c0011d04 <SysIsATTY(regs*)+0x4c>
c0011ce0:	83 ec 0c             	sub    esp,0xc
c0011ce3:	8b 10                	mov    edx,DWORD PTR [eax]
c0011ce5:	50                   	push   eax
c0011ce6:	ff 12                	call   DWORD PTR [edx]
c0011ce8:	31 d2                	xor    edx,edx
c0011cea:	0f b6 c0             	movzx  eax,al
c0011ced:	83 c4 10             	add    esp,0x10
c0011cf0:	83 c4 0c             	add    esp,0xc
c0011cf3:	c3                   	ret    
c0011cf4:	83 ec 0c             	sub    esp,0xc
c0011cf7:	50                   	push   eax
c0011cf8:	e8 b6 77 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011cfd:	83 c4 10             	add    esp,0x10
c0011d00:	85 c0                	test   eax,eax
c0011d02:	75 dc                	jne    c0011ce0 <SysIsATTY(regs*)+0x28>
c0011d04:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011d09:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011d0e:	83 c4 0c             	add    esp,0xc
c0011d11:	c3                   	ret    

c0011d12 <SysSeek(regs*)>:
c0011d12:	53                   	push   ebx
c0011d13:	83 ec 08             	sub    esp,0x8
c0011d16:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011d1a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011d1d:	8d 50 fd             	lea    edx,[eax-0x3]
c0011d20:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0011d26:	77 32                	ja     c0011d5a <SysSeek(regs*)+0x48>
c0011d28:	83 ec 0c             	sub    esp,0xc
c0011d2b:	50                   	push   eax
c0011d2c:	e8 82 77 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011d31:	83 c4 0c             	add    esp,0xc
c0011d34:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011d37:	31 db                	xor    ebx,ebx
c0011d39:	53                   	push   ebx
c0011d3a:	51                   	push   ecx
c0011d3b:	50                   	push   eax
c0011d3c:	e8 6b 9c ff ff       	call   c000b9ac <File::seek(unsigned long long)>
c0011d41:	83 c4 10             	add    esp,0x10
c0011d44:	85 c0                	test   eax,eax
c0011d46:	0f 95 c0             	setne  al
c0011d49:	31 d2                	xor    edx,edx
c0011d4b:	0f b6 c0             	movzx  eax,al
c0011d4e:	f7 d8                	neg    eax
c0011d50:	83 d2 00             	adc    edx,0x0
c0011d53:	83 c4 08             	add    esp,0x8
c0011d56:	f7 da                	neg    edx
c0011d58:	5b                   	pop    ebx
c0011d59:	c3                   	ret    
c0011d5a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011d5f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011d64:	83 c4 08             	add    esp,0x8
c0011d67:	5b                   	pop    ebx
c0011d68:	c3                   	ret    

c0011d69 <SysTell(regs*)>:
c0011d69:	53                   	push   ebx
c0011d6a:	83 ec 08             	sub    esp,0x8
c0011d6d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011d71:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011d74:	83 f8 02             	cmp    eax,0x2
c0011d77:	76 4e                	jbe    c0011dc7 <SysTell(regs*)+0x5e>
c0011d79:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011d7e:	76 19                	jbe    c0011d99 <SysTell(regs*)+0x30>
c0011d80:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011d83:	31 d2                	xor    edx,edx
c0011d85:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011d8b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011d92:	31 c0                	xor    eax,eax
c0011d94:	83 c4 08             	add    esp,0x8
c0011d97:	5b                   	pop    ebx
c0011d98:	c3                   	ret    
c0011d99:	83 ec 0c             	sub    esp,0xc
c0011d9c:	50                   	push   eax
c0011d9d:	e8 11 77 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011da2:	5a                   	pop    edx
c0011da3:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0011da6:	59                   	pop    ecx
c0011da7:	53                   	push   ebx
c0011da8:	50                   	push   eax
c0011da9:	e8 aa 9c ff ff       	call   c000ba58 <File::tell(unsigned long long*)>
c0011dae:	83 c4 10             	add    esp,0x10
c0011db1:	85 c0                	test   eax,eax
c0011db3:	0f 95 c0             	setne  al
c0011db6:	31 d2                	xor    edx,edx
c0011db8:	0f b6 c0             	movzx  eax,al
c0011dbb:	f7 d8                	neg    eax
c0011dbd:	83 d2 00             	adc    edx,0x0
c0011dc0:	83 c4 08             	add    esp,0x8
c0011dc3:	f7 da                	neg    edx
c0011dc5:	5b                   	pop    ebx
c0011dc6:	c3                   	ret    
c0011dc7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011dcc:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011dd1:	83 c4 08             	add    esp,0x8
c0011dd4:	5b                   	pop    ebx
c0011dd5:	c3                   	ret    

c0011dd6 <SysSize(regs*)>:
c0011dd6:	53                   	push   ebx
c0011dd7:	83 ec 18             	sub    esp,0x18
c0011dda:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011dde:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011de1:	83 f8 02             	cmp    eax,0x2
c0011de4:	76 54                	jbe    c0011e3a <SysSize(regs*)+0x64>
c0011de6:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011deb:	76 19                	jbe    c0011e06 <SysSize(regs*)+0x30>
c0011ded:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011df0:	31 d2                	xor    edx,edx
c0011df2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011df8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011dff:	31 c0                	xor    eax,eax
c0011e01:	83 c4 18             	add    esp,0x18
c0011e04:	5b                   	pop    ebx
c0011e05:	c3                   	ret    
c0011e06:	83 ec 0c             	sub    esp,0xc
c0011e09:	50                   	push   eax
c0011e0a:	e8 a4 76 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011e0f:	83 c4 0c             	add    esp,0xc
c0011e12:	8d 54 24 13          	lea    edx,[esp+0x13]
c0011e16:	52                   	push   edx
c0011e17:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011e1a:	52                   	push   edx
c0011e1b:	50                   	push   eax
c0011e1c:	e8 cf 9d ff ff       	call   c000bbf0 <File::stat(unsigned long long*, bool*)>
c0011e21:	83 c4 10             	add    esp,0x10
c0011e24:	85 c0                	test   eax,eax
c0011e26:	0f 95 c0             	setne  al
c0011e29:	31 d2                	xor    edx,edx
c0011e2b:	0f b6 c0             	movzx  eax,al
c0011e2e:	f7 d8                	neg    eax
c0011e30:	83 d2 00             	adc    edx,0x0
c0011e33:	83 c4 18             	add    esp,0x18
c0011e36:	f7 da                	neg    edx
c0011e38:	5b                   	pop    ebx
c0011e39:	c3                   	ret    
c0011e3a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011e3f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011e44:	83 c4 18             	add    esp,0x18
c0011e47:	5b                   	pop    ebx
c0011e48:	c3                   	ret    

c0011e49 <SysSizeFromFilename(regs*)>:
c0011e49:	57                   	push   edi
c0011e4a:	56                   	push   esi
c0011e4b:	53                   	push   ebx
c0011e4c:	83 ec 20             	sub    esp,0x20
c0011e4f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011e53:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0011e56:	83 fb 02             	cmp    ebx,0x2
c0011e59:	0f 86 8a 00 00 00    	jbe    c0011ee9 <SysSizeFromFilename(regs*)+0xa0>
c0011e5f:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011e65:	76 1b                	jbe    c0011e82 <SysSizeFromFilename(regs*)+0x39>
c0011e67:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011e6a:	31 d2                	xor    edx,edx
c0011e6c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011e72:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e79:	83 c4 20             	add    esp,0x20
c0011e7c:	31 c0                	xor    eax,eax
c0011e7e:	5b                   	pop    ebx
c0011e7f:	5e                   	pop    esi
c0011e80:	5f                   	pop    edi
c0011e81:	c3                   	ret    
c0011e82:	83 ec 0c             	sub    esp,0xc
c0011e85:	68 14 01 00 00       	push   0x114
c0011e8a:	e8 27 5c ff ff       	call   c0007ab6 <malloc>
c0011e8f:	83 c4 0c             	add    esp,0xc
c0011e92:	89 c7                	mov    edi,eax
c0011e94:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011e99:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011e9c:	50                   	push   eax
c0011e9d:	53                   	push   ebx
c0011e9e:	57                   	push   edi
c0011e9f:	e8 2c 9a ff ff       	call   c000b8d0 <File::File(char const*, Process*)>
c0011ea4:	83 c4 0c             	add    esp,0xc
c0011ea7:	8d 44 24 23          	lea    eax,[esp+0x23]
c0011eab:	50                   	push   eax
c0011eac:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0011eaf:	52                   	push   edx
c0011eb0:	57                   	push   edi
c0011eb1:	e8 3a 9d ff ff       	call   c000bbf0 <File::stat(unsigned long long*, bool*)>
c0011eb6:	83 c4 10             	add    esp,0x10
c0011eb9:	85 ff                	test   edi,edi
c0011ebb:	74 14                	je     c0011ed1 <SysSizeFromFilename(regs*)+0x88>
c0011ebd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011ec1:	8b 17                	mov    edx,DWORD PTR [edi]
c0011ec3:	83 ec 0c             	sub    esp,0xc
c0011ec6:	57                   	push   edi
c0011ec7:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011eca:	83 c4 10             	add    esp,0x10
c0011ecd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ed1:	85 c0                	test   eax,eax
c0011ed3:	0f 95 c0             	setne  al
c0011ed6:	31 d2                	xor    edx,edx
c0011ed8:	0f b6 c0             	movzx  eax,al
c0011edb:	f7 d8                	neg    eax
c0011edd:	83 d2 00             	adc    edx,0x0
c0011ee0:	83 c4 20             	add    esp,0x20
c0011ee3:	f7 da                	neg    edx
c0011ee5:	5b                   	pop    ebx
c0011ee6:	5e                   	pop    esi
c0011ee7:	5f                   	pop    edi
c0011ee8:	c3                   	ret    
c0011ee9:	83 c4 20             	add    esp,0x20
c0011eec:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011ef1:	5b                   	pop    ebx
c0011ef2:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011ef7:	5e                   	pop    esi
c0011ef8:	5f                   	pop    edi
c0011ef9:	c3                   	ret    

c0011efa <SysSizeFromFilenameNoSymlink(regs*)>:
c0011efa:	55                   	push   ebp
c0011efb:	57                   	push   edi
c0011efc:	56                   	push   esi
c0011efd:	53                   	push   ebx
c0011efe:	81 ec 3c 01 00 00    	sub    esp,0x13c
c0011f04:	8b 9c 24 50 01 00 00 	mov    ebx,DWORD PTR [esp+0x150]
c0011f0b:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011f0e:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011f11:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0011f17:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011f1a:	83 f8 02             	cmp    eax,0x2
c0011f1d:	0f 86 97 00 00 00    	jbe    c0011fba <SysSizeFromFilenameNoSymlink(regs*)+0xc0>
c0011f23:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011f28:	76 1f                	jbe    c0011f49 <SysSizeFromFilenameNoSymlink(regs*)+0x4f>
c0011f2a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011f2d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011f33:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011f3a:	81 c4 3c 01 00 00    	add    esp,0x13c
c0011f40:	31 c0                	xor    eax,eax
c0011f42:	5b                   	pop    ebx
c0011f43:	31 d2                	xor    edx,edx
c0011f45:	5e                   	pop    esi
c0011f46:	5f                   	pop    edi
c0011f47:	5d                   	pop    ebp
c0011f48:	c3                   	ret    
c0011f49:	83 ec 0c             	sub    esp,0xc
c0011f4c:	68 14 01 00 00       	push   0x114
c0011f51:	e8 60 5b ff ff       	call   c0007ab6 <malloc>
c0011f56:	6a 00                	push   0x0
c0011f58:	89 c5                	mov    ebp,eax
c0011f5a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f5f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011f62:	50                   	push   eax
c0011f63:	57                   	push   edi
c0011f64:	55                   	push   ebp
c0011f65:	e8 88 98 ff ff       	call   c000b7f2 <File::File(char const*, Process*, bool)>
c0011f6a:	83 c4 1c             	add    esp,0x1c
c0011f6d:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0011f71:	50                   	push   eax
c0011f72:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011f75:	52                   	push   edx
c0011f76:	55                   	push   ebp
c0011f77:	e8 74 9c ff ff       	call   c000bbf0 <File::stat(unsigned long long*, bool*)>
c0011f7c:	83 c4 10             	add    esp,0x10
c0011f7f:	85 ed                	test   ebp,ebp
c0011f81:	74 15                	je     c0011f98 <SysSizeFromFilenameNoSymlink(regs*)+0x9e>
c0011f83:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011f87:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0011f8a:	83 ec 0c             	sub    esp,0xc
c0011f8d:	55                   	push   ebp
c0011f8e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011f91:	83 c4 10             	add    esp,0x10
c0011f94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011f98:	85 c0                	test   eax,eax
c0011f9a:	75 1e                	jne    c0011fba <SysSizeFromFilenameNoSymlink(regs*)+0xc0>
c0011f9c:	83 ec 08             	sub    esp,0x8
c0011f9f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0011fa3:	50                   	push   eax
c0011fa4:	57                   	push   edi
c0011fa5:	e8 a1 8f ff ff       	call   c000af4b <KeDereferenceSymlink(char const*, char*)>
c0011faa:	83 c4 10             	add    esp,0x10
c0011fad:	83 f8 01             	cmp    eax,0x1
c0011fb0:	75 88                	jne    c0011f3a <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0011fb2:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0011fb8:	eb 80                	jmp    c0011f3a <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0011fba:	81 c4 3c 01 00 00    	add    esp,0x13c
c0011fc0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011fc5:	5b                   	pop    ebx
c0011fc6:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011fcb:	5e                   	pop    esi
c0011fcc:	5f                   	pop    edi
c0011fcd:	5d                   	pop    ebp
c0011fce:	c3                   	ret    

c0011fcf <SysClose(regs*)>:
c0011fcf:	53                   	push   ebx
c0011fd0:	83 ec 08             	sub    esp,0x8
c0011fd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011fd7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011fda:	83 f8 02             	cmp    eax,0x2
c0011fdd:	76 41                	jbe    c0012020 <SysClose(regs*)+0x51>
c0011fdf:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0011fe5:	83 fa 01             	cmp    edx,0x1
c0011fe8:	76 2d                	jbe    c0012017 <SysClose(regs*)+0x48>
c0011fea:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011fef:	77 2f                	ja     c0012020 <SysClose(regs*)+0x51>
c0011ff1:	83 ec 0c             	sub    esp,0xc
c0011ff4:	50                   	push   eax
c0011ff5:	e8 b9 74 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011ffa:	89 c3                	mov    ebx,eax
c0011ffc:	89 04 24             	mov    DWORD PTR [esp],eax
c0011fff:	e8 48 99 ff ff       	call   c000b94c <File::close()>
c0012004:	83 c4 10             	add    esp,0x10
c0012007:	85 db                	test   ebx,ebx
c0012009:	74 0c                	je     c0012017 <SysClose(regs*)+0x48>
c001200b:	83 ec 0c             	sub    esp,0xc
c001200e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012010:	53                   	push   ebx
c0012011:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012014:	83 c4 10             	add    esp,0x10
c0012017:	31 c0                	xor    eax,eax
c0012019:	31 d2                	xor    edx,edx
c001201b:	83 c4 08             	add    esp,0x8
c001201e:	5b                   	pop    ebx
c001201f:	c3                   	ret    
c0012020:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012025:	ba ff ff ff ff       	mov    edx,0xffffffff
c001202a:	83 c4 08             	add    esp,0x8
c001202d:	5b                   	pop    ebx
c001202e:	c3                   	ret    

c001202f <SysOpenDir(regs*)>:
c001202f:	56                   	push   esi
c0012030:	53                   	push   ebx
c0012031:	83 ec 04             	sub    esp,0x4
c0012034:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012038:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001203b:	85 c9                	test   ecx,ecx
c001203d:	74 5d                	je     c001209c <SysOpenDir(regs*)+0x6d>
c001203f:	83 ec 0c             	sub    esp,0xc
c0012042:	68 14 01 00 00       	push   0x114
c0012047:	e8 6a 5a ff ff       	call   c0007ab6 <malloc>
c001204c:	83 c4 0c             	add    esp,0xc
c001204f:	89 c6                	mov    esi,eax
c0012051:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012056:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012059:	50                   	push   eax
c001205a:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001205d:	52                   	push   edx
c001205e:	56                   	push   esi
c001205f:	e8 4c 9d ff ff       	call   c000bdb0 <Directory::Directory(char const*, Process*)>
c0012064:	83 c4 10             	add    esp,0x10
c0012067:	85 f6                	test   esi,esi
c0012069:	74 31                	je     c001209c <SysOpenDir(regs*)+0x6d>
c001206b:	83 ec 0c             	sub    esp,0xc
c001206e:	56                   	push   esi
c001206f:	e8 04 9e ff ff       	call   c000be78 <Directory::open()>
c0012074:	83 c4 10             	add    esp,0x10
c0012077:	85 c0                	test   eax,eax
c0012079:	75 21                	jne    c001209c <SysOpenDir(regs*)+0x6d>
c001207b:	83 ec 0c             	sub    esp,0xc
c001207e:	56                   	push   esi
c001207f:	e8 32 71 ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c0012084:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0012087:	83 c4 10             	add    esp,0x10
c001208a:	89 02                	mov    DWORD PTR [edx],eax
c001208c:	c1 f8 1f             	sar    eax,0x1f
c001208f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012092:	83 c4 04             	add    esp,0x4
c0012095:	31 c0                	xor    eax,eax
c0012097:	31 d2                	xor    edx,edx
c0012099:	5b                   	pop    ebx
c001209a:	5e                   	pop    esi
c001209b:	c3                   	ret    
c001209c:	83 c4 04             	add    esp,0x4
c001209f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00120a4:	ba ff ff ff ff       	mov    edx,0xffffffff
c00120a9:	5b                   	pop    ebx
c00120aa:	5e                   	pop    esi
c00120ab:	c3                   	ret    

c00120ac <SysMakeDir(regs*)>:
c00120ac:	56                   	push   esi
c00120ad:	53                   	push   ebx
c00120ae:	83 ec 10             	sub    esp,0x10
c00120b1:	68 14 01 00 00       	push   0x114
c00120b6:	e8 fb 59 ff ff       	call   c0007ab6 <malloc>
c00120bb:	83 c4 0c             	add    esp,0xc
c00120be:	89 c3                	mov    ebx,eax
c00120c0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00120c5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00120c8:	50                   	push   eax
c00120c9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00120cd:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c00120d0:	52                   	push   edx
c00120d1:	53                   	push   ebx
c00120d2:	e8 d9 9c ff ff       	call   c000bdb0 <Directory::Directory(char const*, Process*)>
c00120d7:	83 c4 10             	add    esp,0x10
c00120da:	85 db                	test   ebx,ebx
c00120dc:	74 2c                	je     c001210a <SysMakeDir(regs*)+0x5e>
c00120de:	83 ec 0c             	sub    esp,0xc
c00120e1:	53                   	push   ebx
c00120e2:	e8 71 9f ff ff       	call   c000c058 <Directory::create()>
c00120e7:	89 c6                	mov    esi,eax
c00120e9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00120eb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00120ee:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00120f1:	83 c4 10             	add    esp,0x10
c00120f4:	31 c0                	xor    eax,eax
c00120f6:	85 f6                	test   esi,esi
c00120f8:	0f 95 c0             	setne  al
c00120fb:	31 d2                	xor    edx,edx
c00120fd:	f7 d8                	neg    eax
c00120ff:	83 d2 00             	adc    edx,0x0
c0012102:	83 c4 04             	add    esp,0x4
c0012105:	f7 da                	neg    edx
c0012107:	5b                   	pop    ebx
c0012108:	5e                   	pop    esi
c0012109:	c3                   	ret    
c001210a:	83 c4 04             	add    esp,0x4
c001210d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012112:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012117:	5b                   	pop    ebx
c0012118:	5e                   	pop    esi
c0012119:	c3                   	ret    

c001211a <SysCloseDir(regs*)>:
c001211a:	53                   	push   ebx
c001211b:	83 ec 08             	sub    esp,0x8
c001211e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012122:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0012125:	8d 50 fd             	lea    edx,[eax-0x3]
c0012128:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001212e:	77 2f                	ja     c001215f <SysCloseDir(regs*)+0x45>
c0012130:	83 ec 0c             	sub    esp,0xc
c0012133:	50                   	push   eax
c0012134:	e8 7a 73 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0012139:	89 c3                	mov    ebx,eax
c001213b:	89 04 24             	mov    DWORD PTR [esp],eax
c001213e:	e8 91 9d ff ff       	call   c000bed4 <Directory::close()>
c0012143:	83 c4 10             	add    esp,0x10
c0012146:	85 db                	test   ebx,ebx
c0012148:	74 0c                	je     c0012156 <SysCloseDir(regs*)+0x3c>
c001214a:	83 ec 0c             	sub    esp,0xc
c001214d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001214f:	53                   	push   ebx
c0012150:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012153:	83 c4 10             	add    esp,0x10
c0012156:	31 c0                	xor    eax,eax
c0012158:	31 d2                	xor    edx,edx
c001215a:	83 c4 08             	add    esp,0x8
c001215d:	5b                   	pop    ebx
c001215e:	c3                   	ret    
c001215f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012164:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012169:	83 c4 08             	add    esp,0x8
c001216c:	5b                   	pop    ebx
c001216d:	c3                   	ret    

c001216e <SysWait(regs*)>:
c001216e:	83 ec 10             	sub    esp,0x10
c0012171:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012175:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0012178:	52                   	push   edx
c0012179:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c001217c:	51                   	push   ecx
c001217d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0012180:	50                   	push   eax
c0012181:	e8 02 3e 00 00       	call   c0015f88 <waitTask(int, int*, int)>
c0012186:	83 c4 1c             	add    esp,0x1c
c0012189:	89 c2                	mov    edx,eax
c001218b:	c1 fa 1f             	sar    edx,0x1f
c001218e:	c3                   	ret    

c001218f <SysNotImpl(regs*)>:
c001218f:	83 ec 18             	sub    esp,0x18
c0012192:	68 a6 20 02 c0       	push   0xc00220a6
c0012197:	e8 dd f1 ff ff       	call   c0011379 <KePanic(char const*)>
c001219c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00121a1:	ba ff ff ff ff       	mov    edx,0xffffffff
c00121a6:	83 c4 1c             	add    esp,0x1c
c00121a9:	c3                   	ret    

c00121aa <SysPanic(regs*)>:
c00121aa:	83 ec 18             	sub    esp,0x18
c00121ad:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00121b1:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00121b4:	50                   	push   eax
c00121b5:	e8 bf f1 ff ff       	call   c0011379 <KePanic(char const*)>
c00121ba:	b8 01 00 00 00       	mov    eax,0x1
c00121bf:	31 d2                	xor    edx,edx
c00121c1:	83 c4 1c             	add    esp,0x1c
c00121c4:	c3                   	ret    

c00121c5 <SysRmdir(regs*)>:
c00121c5:	56                   	push   esi
c00121c6:	53                   	push   ebx
c00121c7:	83 ec 20             	sub    esp,0x20
c00121ca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00121ce:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00121d1:	68 14 01 00 00       	push   0x114
c00121d6:	e8 db 58 ff ff       	call   c0007ab6 <malloc>
c00121db:	6a 00                	push   0x0
c00121dd:	89 c3                	mov    ebx,eax
c00121df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00121e4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00121e7:	50                   	push   eax
c00121e8:	56                   	push   esi
c00121e9:	53                   	push   ebx
c00121ea:	e8 03 96 ff ff       	call   c000b7f2 <File::File(char const*, Process*, bool)>
c00121ef:	83 c4 14             	add    esp,0x14
c00121f2:	53                   	push   ebx
c00121f3:	e8 c4 98 ff ff       	call   c000babc <File::unlink()>
c00121f8:	83 c4 10             	add    esp,0x10
c00121fb:	85 db                	test   ebx,ebx
c00121fd:	74 14                	je     c0012213 <SysRmdir(regs*)+0x4e>
c00121ff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012203:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012205:	83 ec 0c             	sub    esp,0xc
c0012208:	53                   	push   ebx
c0012209:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001220c:	83 c4 10             	add    esp,0x10
c001220f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012213:	85 c0                	test   eax,eax
c0012215:	0f 95 c0             	setne  al
c0012218:	31 d2                	xor    edx,edx
c001221a:	0f b6 c0             	movzx  eax,al
c001221d:	f7 d8                	neg    eax
c001221f:	83 d2 00             	adc    edx,0x0
c0012222:	83 c4 14             	add    esp,0x14
c0012225:	f7 da                	neg    edx
c0012227:	5b                   	pop    ebx
c0012228:	5e                   	pop    esi
c0012229:	c3                   	ret    

c001222a <SysUnlink(regs*)>:
c001222a:	56                   	push   esi
c001222b:	53                   	push   ebx
c001222c:	83 ec 20             	sub    esp,0x20
c001222f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012233:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0012236:	68 14 01 00 00       	push   0x114
c001223b:	e8 76 58 ff ff       	call   c0007ab6 <malloc>
c0012240:	6a 00                	push   0x0
c0012242:	89 c3                	mov    ebx,eax
c0012244:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012249:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001224c:	50                   	push   eax
c001224d:	56                   	push   esi
c001224e:	53                   	push   ebx
c001224f:	e8 9e 95 ff ff       	call   c000b7f2 <File::File(char const*, Process*, bool)>
c0012254:	83 c4 14             	add    esp,0x14
c0012257:	53                   	push   ebx
c0012258:	e8 5f 98 ff ff       	call   c000babc <File::unlink()>
c001225d:	83 c4 10             	add    esp,0x10
c0012260:	85 db                	test   ebx,ebx
c0012262:	74 14                	je     c0012278 <SysUnlink(regs*)+0x4e>
c0012264:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012268:	8b 13                	mov    edx,DWORD PTR [ebx]
c001226a:	83 ec 0c             	sub    esp,0xc
c001226d:	53                   	push   ebx
c001226e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0012271:	83 c4 10             	add    esp,0x10
c0012274:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012278:	85 c0                	test   eax,eax
c001227a:	0f 95 c0             	setne  al
c001227d:	31 d2                	xor    edx,edx
c001227f:	0f b6 c0             	movzx  eax,al
c0012282:	f7 d8                	neg    eax
c0012284:	83 d2 00             	adc    edx,0x0
c0012287:	83 c4 14             	add    esp,0x14
c001228a:	f7 da                	neg    edx
c001228c:	5b                   	pop    ebx
c001228d:	5e                   	pop    esi
c001228e:	c3                   	ret    

c001228f <SysGetArgv(regs*)>:
c001228f:	83 ec 0c             	sub    esp,0xc
c0012292:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012296:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0012299:	85 c0                	test   eax,eax
c001229b:	78 2c                	js     c00122c9 <SysGetArgv(regs*)+0x3a>
c001229d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00122a3:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00122a6:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c00122ac:	7d 1b                	jge    c00122c9 <SysGetArgv(regs*)+0x3a>
c00122ae:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c00122b5:	85 c0                	test   eax,eax
c00122b7:	74 18                	je     c00122d1 <SysGetArgv(regs*)+0x42>
c00122b9:	83 ec 08             	sub    esp,0x8
c00122bc:	50                   	push   eax
c00122bd:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c00122c0:	50                   	push   eax
c00122c1:	e8 7a e3 fe ff       	call   c0000640 <strcpy>
c00122c6:	83 c4 10             	add    esp,0x10
c00122c9:	31 c0                	xor    eax,eax
c00122cb:	31 d2                	xor    edx,edx
c00122cd:	83 c4 0c             	add    esp,0xc
c00122d0:	c3                   	ret    
c00122d1:	b8 01 00 00 00       	mov    eax,0x1
c00122d6:	31 d2                	xor    edx,edx
c00122d8:	83 c4 0c             	add    esp,0xc
c00122db:	c3                   	ret    

c00122dc <SysUSleep(regs*)>:
c00122dc:	83 ec 1c             	sub    esp,0x1c
c00122df:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00122e3:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00122e6:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c00122e9:	6a 00                	push   0x0
c00122eb:	6a 64                	push   0x64
c00122ed:	52                   	push   edx
c00122ee:	50                   	push   eax
c00122ef:	e8 bc d0 00 00       	call   c001f3b0 <__udivdi3>
c00122f4:	83 c4 14             	add    esp,0x14
c00122f7:	50                   	push   eax
c00122f8:	e8 6f 3d 00 00       	call   c001606c <milliTenthSleep(unsigned int)>
c00122fd:	31 c0                	xor    eax,eax
c00122ff:	31 d2                	xor    edx,edx
c0012301:	83 c4 1c             	add    esp,0x1c
c0012304:	c3                   	ret    

c0012305 <SysSpawn(regs*)>:
c0012305:	56                   	push   esi
c0012306:	53                   	push   ebx
c0012307:	83 ec 04             	sub    esp,0x4
c001230a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001230e:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0012311:	85 f6                	test   esi,esi
c0012313:	75 0a                	jne    c001231f <SysSpawn(regs*)+0x1a>
c0012315:	83 c4 04             	add    esp,0x4
c0012318:	31 c0                	xor    eax,eax
c001231a:	31 d2                	xor    edx,edx
c001231c:	5b                   	pop    ebx
c001231d:	5e                   	pop    esi
c001231e:	c3                   	ret    
c001231f:	83 ec 0c             	sub    esp,0xc
c0012322:	68 24 07 00 00       	push   0x724
c0012327:	e8 8a 57 ff ff       	call   c0007ab6 <malloc>
c001232c:	83 c4 10             	add    esp,0x10
c001232f:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0012332:	89 c6                	mov    esi,eax
c0012334:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012337:	85 c9                	test   ecx,ecx
c0012339:	75 39                	jne    c0012374 <SysSpawn(regs*)+0x6f>
c001233b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012340:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012343:	52                   	push   edx
c0012344:	50                   	push   eax
c0012345:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012348:	50                   	push   eax
c0012349:	56                   	push   esi
c001234a:	e8 6d 33 00 00       	call   c00156bc <Process::Process(char const*, Process*, char**)>
c001234f:	83 c4 10             	add    esp,0x10
c0012352:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0012359:	75 ba                	jne    c0012315 <SysSpawn(regs*)+0x10>
c001235b:	83 ec 0c             	sub    esp,0xc
c001235e:	56                   	push   esi
c001235f:	e8 94 38 00 00       	call   c0015bf8 <Process::createUserThread()>
c0012364:	8b 06                	mov    eax,DWORD PTR [esi]
c0012366:	83 c4 10             	add    esp,0x10
c0012369:	89 c2                	mov    edx,eax
c001236b:	83 c4 04             	add    esp,0x4
c001236e:	c1 fa 1f             	sar    edx,0x1f
c0012371:	5b                   	pop    ebx
c0012372:	5e                   	pop    esi
c0012373:	c3                   	ret    
c0012374:	31 c0                	xor    eax,eax
c0012376:	eb cb                	jmp    c0012343 <SysSpawn(regs*)+0x3e>

c0012378 <SysGetEnv(regs*)>:
c0012378:	57                   	push   edi
c0012379:	56                   	push   esi
c001237a:	53                   	push   ebx
c001237b:	83 ec 1c             	sub    esp,0x1c
c001237e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012382:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012387:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001238a:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001238d:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0012390:	51                   	push   ecx
c0012391:	e8 9b ee ff ff       	call   c0011231 <KeGetProcessTotalEnvCount(Process*)>
c0012396:	83 c4 10             	add    esp,0x10
c0012399:	39 c7                	cmp    edi,eax
c001239b:	7c 14                	jl     c00123b1 <SysGetEnv(regs*)+0x39>
c001239d:	85 f6                	test   esi,esi
c001239f:	75 0b                	jne    c00123ac <SysGetEnv(regs*)+0x34>
c00123a1:	83 c4 10             	add    esp,0x10
c00123a4:	31 c0                	xor    eax,eax
c00123a6:	5b                   	pop    ebx
c00123a7:	31 d2                	xor    edx,edx
c00123a9:	5e                   	pop    esi
c00123aa:	5f                   	pop    edi
c00123ab:	c3                   	ret    
c00123ac:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00123af:	eb f0                	jmp    c00123a1 <SysGetEnv(regs*)+0x29>
c00123b1:	8d 44 24 08          	lea    eax,[esp+0x8]
c00123b5:	83 ec 04             	sub    esp,0x4
c00123b8:	57                   	push   edi
c00123b9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00123bf:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c00123c2:	57                   	push   edi
c00123c3:	50                   	push   eax
c00123c4:	e8 88 ee ff ff       	call   c0011251 <KeGetProcessEnvPair(Process*, int)>
c00123c9:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00123cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00123d0:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00123d4:	83 c4 0c             	add    esp,0xc
c00123d7:	85 d2                	test   edx,edx
c00123d9:	75 23                	jne    c00123fe <SysGetEnv(regs*)+0x86>
c00123db:	83 ec 0c             	sub    esp,0xc
c00123de:	50                   	push   eax
c00123df:	e8 8c e1 fe ff       	call   c0000570 <strlen>
c00123e4:	89 3c 24             	mov    DWORD PTR [esp],edi
c00123e7:	89 c3                	mov    ebx,eax
c00123e9:	e8 82 e1 fe ff       	call   c0000570 <strlen>
c00123ee:	83 c4 10             	add    esp,0x10
c00123f1:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00123f5:	83 c4 10             	add    esp,0x10
c00123f8:	31 d2                	xor    edx,edx
c00123fa:	5b                   	pop    ebx
c00123fb:	5e                   	pop    esi
c00123fc:	5f                   	pop    edi
c00123fd:	c3                   	ret    
c00123fe:	83 ec 08             	sub    esp,0x8
c0012401:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012404:	50                   	push   eax
c0012405:	56                   	push   esi
c0012406:	e8 35 e2 fe ff       	call   c0000640 <strcpy>
c001240b:	58                   	pop    eax
c001240c:	5a                   	pop    edx
c001240d:	68 c0 20 02 c0       	push   0xc00220c0
c0012412:	56                   	push   esi
c0012413:	e8 28 e4 fe ff       	call   c0000840 <strcat>
c0012418:	59                   	pop    ecx
c0012419:	5b                   	pop    ebx
c001241a:	57                   	push   edi
c001241b:	56                   	push   esi
c001241c:	e8 1f e4 fe ff       	call   c0000840 <strcat>
c0012421:	83 c4 10             	add    esp,0x10
c0012424:	e9 78 ff ff ff       	jmp    c00123a1 <SysGetEnv(regs*)+0x29>

c0012429 <SysSetFatAttrib(regs*)>:
c0012429:	57                   	push   edi
c001242a:	56                   	push   esi
c001242b:	53                   	push   ebx
c001242c:	83 ec 1c             	sub    esp,0x1c
c001242f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0012433:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0012436:	68 14 01 00 00       	push   0x114
c001243b:	e8 76 56 ff ff       	call   c0007ab6 <malloc>
c0012440:	83 c4 0c             	add    esp,0xc
c0012443:	89 c3                	mov    ebx,eax
c0012445:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001244a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001244d:	50                   	push   eax
c001244e:	57                   	push   edi
c001244f:	53                   	push   ebx
c0012450:	e8 7b 94 ff ff       	call   c000b8d0 <File::File(char const*, Process*)>
c0012455:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0012458:	83 c4 0c             	add    esp,0xc
c001245b:	0f b6 d4             	movzx  edx,ah
c001245e:	0f b6 c0             	movzx  eax,al
c0012461:	52                   	push   edx
c0012462:	50                   	push   eax
c0012463:	53                   	push   ebx
c0012464:	e8 ed 96 ff ff       	call   c000bb56 <File::chfatattr(unsigned char, unsigned char)>
c0012469:	83 c4 10             	add    esp,0x10
c001246c:	85 db                	test   ebx,ebx
c001246e:	74 14                	je     c0012484 <SysSetFatAttrib(regs*)+0x5b>
c0012470:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012474:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012476:	83 ec 0c             	sub    esp,0xc
c0012479:	53                   	push   ebx
c001247a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001247d:	83 c4 10             	add    esp,0x10
c0012480:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012484:	85 c0                	test   eax,eax
c0012486:	0f 95 c0             	setne  al
c0012489:	31 d2                	xor    edx,edx
c001248b:	0f b6 c0             	movzx  eax,al
c001248e:	f7 d8                	neg    eax
c0012490:	83 d2 00             	adc    edx,0x0
c0012493:	83 c4 10             	add    esp,0x10
c0012496:	f7 da                	neg    edx
c0012498:	5b                   	pop    ebx
c0012499:	5e                   	pop    esi
c001249a:	5f                   	pop    edi
c001249b:	c3                   	ret    

c001249c <SysPipe(regs*)>:
c001249c:	57                   	push   edi
c001249d:	56                   	push   esi
c001249e:	53                   	push   ebx
c001249f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124a3:	83 ec 0c             	sub    esp,0xc
c00124a6:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c00124a9:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00124ac:	6a 20                	push   0x20
c00124ae:	e8 03 56 ff ff       	call   c0007ab6 <malloc>
c00124b3:	89 c3                	mov    ebx,eax
c00124b5:	58                   	pop    eax
c00124b6:	5a                   	pop    edx
c00124b7:	68 00 50 00 00       	push   0x5000
c00124bc:	53                   	push   ebx
c00124bd:	e8 66 5f ff ff       	call   c0008428 <Pipe::Pipe(int)>
c00124c2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00124c5:	e8 ec 6c ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c00124ca:	89 07                	mov    DWORD PTR [edi],eax
c00124cc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00124cf:	e8 e2 6c ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c00124d4:	83 c4 10             	add    esp,0x10
c00124d7:	89 06                	mov    DWORD PTR [esi],eax
c00124d9:	31 d2                	xor    edx,edx
c00124db:	5b                   	pop    ebx
c00124dc:	31 c0                	xor    eax,eax
c00124de:	5e                   	pop    esi
c00124df:	5f                   	pop    edi
c00124e0:	c3                   	ret    

c00124e1 <SysGetUnixTime(regs*)>:
c00124e1:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00124e6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00124ec:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00124f0:	e9 a9 9d ff ff       	jmp    c000c29e <Clock::timeInSecondsLocal()>

c00124f5 <string_ends_with(char const*, char const*)>:
c00124f5:	57                   	push   edi
c00124f6:	56                   	push   esi
c00124f7:	53                   	push   ebx
c00124f8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00124fc:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0012500:	83 ec 0c             	sub    esp,0xc
c0012503:	53                   	push   ebx
c0012504:	e8 67 e0 fe ff       	call   c0000570 <strlen>
c0012509:	89 3c 24             	mov    DWORD PTR [esp],edi
c001250c:	89 c6                	mov    esi,eax
c001250e:	e8 5d e0 fe ff       	call   c0000570 <strlen>
c0012513:	83 c4 10             	add    esp,0x10
c0012516:	39 c6                	cmp    esi,eax
c0012518:	7d 06                	jge    c0012520 <string_ends_with(char const*, char const*)+0x2b>
c001251a:	5b                   	pop    ebx
c001251b:	31 c0                	xor    eax,eax
c001251d:	5e                   	pop    esi
c001251e:	5f                   	pop    edi
c001251f:	c3                   	ret    
c0012520:	83 ec 08             	sub    esp,0x8
c0012523:	29 c6                	sub    esi,eax
c0012525:	57                   	push   edi
c0012526:	01 f3                	add    ebx,esi
c0012528:	53                   	push   ebx
c0012529:	e8 22 e2 fe ff       	call   c0000750 <strcmp>
c001252e:	83 c4 10             	add    esp,0x10
c0012531:	85 c0                	test   eax,eax
c0012533:	5b                   	pop    ebx
c0012534:	0f 94 c0             	sete   al
c0012537:	5e                   	pop    esi
c0012538:	0f b6 c0             	movzx  eax,al
c001253b:	5f                   	pop    edi
c001253c:	c3                   	ret    

c001253d <SysOpen(regs*)>:
c001253d:	56                   	push   esi
c001253e:	53                   	push   ebx
c001253f:	81 ec 04 01 00 00    	sub    esp,0x104
c0012545:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001254c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001254f:	85 c0                	test   eax,eax
c0012551:	0f 84 bc 01 00 00    	je     c0012713 <SysOpen(regs*)+0x1d6>
c0012557:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001255a:	85 c0                	test   eax,eax
c001255c:	0f 84 b1 01 00 00    	je     c0012713 <SysOpen(regs*)+0x1d6>
c0012562:	6a 00                	push   0x0
c0012564:	68 c2 20 02 c0       	push   0xc00220c2
c0012569:	50                   	push   eax
c001256a:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001256e:	56                   	push   esi
c001256f:	e8 74 90 ff ff       	call   c000b5e8 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0012574:	89 34 24             	mov    DWORD PTR [esp],esi
c0012577:	e8 f4 df fe ff       	call   c0000570 <strlen>
c001257c:	83 c4 10             	add    esp,0x10
c001257f:	83 e8 01             	sub    eax,0x1
c0012582:	74 21                	je     c00125a5 <SysOpen(regs*)+0x68>
c0012584:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c0012588:	eb 12                	jmp    c001259c <SysOpen(regs*)+0x5f>
c001258a:	83 fa 3a             	cmp    edx,0x3a
c001258d:	74 12                	je     c00125a1 <SysOpen(regs*)+0x64>
c001258f:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0012593:	83 e8 01             	sub    eax,0x1
c0012596:	74 0d                	je     c00125a5 <SysOpen(regs*)+0x68>
c0012598:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c001259c:	83 fa 2e             	cmp    edx,0x2e
c001259f:	75 e9                	jne    c001258a <SysOpen(regs*)+0x4d>
c00125a1:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c00125a5:	83 ec 08             	sub    esp,0x8
c00125a8:	68 c6 20 02 c0       	push   0xc00220c6
c00125ad:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00125b0:	50                   	push   eax
c00125b1:	e8 3f ff ff ff       	call   c00124f5 <string_ends_with(char const*, char const*)>
c00125b6:	83 c4 10             	add    esp,0x10
c00125b9:	85 c0                	test   eax,eax
c00125bb:	74 1d                	je     c00125da <SysOpen(regs*)+0x9d>
c00125bd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00125c0:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c00125c6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00125cd:	81 c4 04 01 00 00    	add    esp,0x104
c00125d3:	31 c0                	xor    eax,eax
c00125d5:	31 d2                	xor    edx,edx
c00125d7:	5b                   	pop    ebx
c00125d8:	5e                   	pop    esi
c00125d9:	c3                   	ret    
c00125da:	83 ec 08             	sub    esp,0x8
c00125dd:	68 cb 20 02 c0       	push   0xc00220cb
c00125e2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00125e5:	50                   	push   eax
c00125e6:	e8 0a ff ff ff       	call   c00124f5 <string_ends_with(char const*, char const*)>
c00125eb:	83 c4 10             	add    esp,0x10
c00125ee:	85 c0                	test   eax,eax
c00125f0:	75 cb                	jne    c00125bd <SysOpen(regs*)+0x80>
c00125f2:	83 ec 08             	sub    esp,0x8
c00125f5:	68 c7 20 02 c0       	push   0xc00220c7
c00125fa:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00125fd:	50                   	push   eax
c00125fe:	e8 4d e1 fe ff       	call   c0000750 <strcmp>
c0012603:	83 c4 10             	add    esp,0x10
c0012606:	85 c0                	test   eax,eax
c0012608:	74 b3                	je     c00125bd <SysOpen(regs*)+0x80>
c001260a:	83 ec 08             	sub    esp,0x8
c001260d:	68 c6 20 02 c0       	push   0xc00220c6
c0012612:	56                   	push   esi
c0012613:	e8 dd fe ff ff       	call   c00124f5 <string_ends_with(char const*, char const*)>
c0012618:	83 c4 10             	add    esp,0x10
c001261b:	85 c0                	test   eax,eax
c001261d:	75 9e                	jne    c00125bd <SysOpen(regs*)+0x80>
c001261f:	83 ec 08             	sub    esp,0x8
c0012622:	68 d0 20 02 c0       	push   0xc00220d0
c0012627:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001262a:	50                   	push   eax
c001262b:	e8 c5 fe ff ff       	call   c00124f5 <string_ends_with(char const*, char const*)>
c0012630:	83 c4 10             	add    esp,0x10
c0012633:	85 c0                	test   eax,eax
c0012635:	0f 85 eb 00 00 00    	jne    c0012726 <SysOpen(regs*)+0x1e9>
c001263b:	83 ec 08             	sub    esp,0x8
c001263e:	68 d5 20 02 c0       	push   0xc00220d5
c0012643:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012646:	50                   	push   eax
c0012647:	e8 a9 fe ff ff       	call   c00124f5 <string_ends_with(char const*, char const*)>
c001264c:	83 c4 10             	add    esp,0x10
c001264f:	85 c0                	test   eax,eax
c0012651:	0f 85 cf 00 00 00    	jne    c0012726 <SysOpen(regs*)+0x1e9>
c0012657:	83 ec 08             	sub    esp,0x8
c001265a:	68 d1 20 02 c0       	push   0xc00220d1
c001265f:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0012662:	51                   	push   ecx
c0012663:	e8 e8 e0 fe ff       	call   c0000750 <strcmp>
c0012668:	83 c4 10             	add    esp,0x10
c001266b:	85 c0                	test   eax,eax
c001266d:	0f 84 b3 00 00 00    	je     c0012726 <SysOpen(regs*)+0x1e9>
c0012673:	83 ec 08             	sub    esp,0x8
c0012676:	68 d0 20 02 c0       	push   0xc00220d0
c001267b:	56                   	push   esi
c001267c:	e8 74 fe ff ff       	call   c00124f5 <string_ends_with(char const*, char const*)>
c0012681:	83 c4 10             	add    esp,0x10
c0012684:	85 c0                	test   eax,eax
c0012686:	0f 85 9a 00 00 00    	jne    c0012726 <SysOpen(regs*)+0x1e9>
c001268c:	83 ec 0c             	sub    esp,0xc
c001268f:	68 14 01 00 00       	push   0x114
c0012694:	e8 1d 54 ff ff       	call   c0007ab6 <malloc>
c0012699:	83 c4 0c             	add    esp,0xc
c001269c:	89 c6                	mov    esi,eax
c001269e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00126a3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00126a6:	50                   	push   eax
c00126a7:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00126aa:	52                   	push   edx
c00126ab:	56                   	push   esi
c00126ac:	e8 1f 92 ff ff       	call   c000b8d0 <File::File(char const*, Process*)>
c00126b1:	83 c4 10             	add    esp,0x10
c00126b4:	85 f6                	test   esi,esi
c00126b6:	74 5b                	je     c0012713 <SysOpen(regs*)+0x1d6>
c00126b8:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00126bb:	0f b6 c2             	movzx  eax,dl
c00126be:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c00126c1:	89 d0                	mov    eax,edx
c00126c3:	83 e0 01             	and    eax,0x1
c00126c6:	f6 c2 02             	test   dl,0x2
c00126c9:	74 03                	je     c00126ce <SysOpen(regs*)+0x191>
c00126cb:	83 c8 02             	or     eax,0x2
c00126ce:	f6 c2 04             	test   dl,0x4
c00126d1:	74 03                	je     c00126d6 <SysOpen(regs*)+0x199>
c00126d3:	83 c8 04             	or     eax,0x4
c00126d6:	f6 c2 08             	test   dl,0x8
c00126d9:	74 03                	je     c00126de <SysOpen(regs*)+0x1a1>
c00126db:	83 c8 0a             	or     eax,0xa
c00126de:	80 e2 10             	and    dl,0x10
c00126e1:	74 03                	je     c00126e6 <SysOpen(regs*)+0x1a9>
c00126e3:	83 c8 12             	or     eax,0x12
c00126e6:	83 ec 08             	sub    esp,0x8
c00126e9:	50                   	push   eax
c00126ea:	56                   	push   esi
c00126eb:	e8 fe 91 ff ff       	call   c000b8ee <File::open(FileOpenMode)>
c00126f0:	83 c4 10             	add    esp,0x10
c00126f3:	85 c0                	test   eax,eax
c00126f5:	75 1c                	jne    c0012713 <SysOpen(regs*)+0x1d6>
c00126f7:	83 ec 0c             	sub    esp,0xc
c00126fa:	56                   	push   esi
c00126fb:	e8 b6 6a ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c0012700:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0012703:	83 c4 10             	add    esp,0x10
c0012706:	89 02                	mov    DWORD PTR [edx],eax
c0012708:	c1 f8 1f             	sar    eax,0x1f
c001270b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001270e:	e9 ba fe ff ff       	jmp    c00125cd <SysOpen(regs*)+0x90>
c0012713:	81 c4 04 01 00 00    	add    esp,0x104
c0012719:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001271e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012723:	5b                   	pop    ebx
c0012724:	5e                   	pop    esi
c0012725:	c3                   	ret    
c0012726:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012729:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001272f:	e9 92 fe ff ff       	jmp    c00125c6 <SysOpen(regs*)+0x89>

c0012734 <KeSystemCall(regs*, void*)>:
c0012734:	53                   	push   ebx
c0012735:	83 ec 08             	sub    esp,0x8
c0012738:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001273c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001273f:	83 f8 3e             	cmp    eax,0x3e
c0012742:	77 16                	ja     c001275a <KeSystemCall(regs*, void*)+0x26>
c0012744:	8b 14 85 e0 34 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcb20]
c001274b:	85 d2                	test   edx,edx
c001274d:	74 0b                	je     c001275a <KeSystemCall(regs*, void*)+0x26>
c001274f:	83 ec 0c             	sub    esp,0xc
c0012752:	53                   	push   ebx
c0012753:	ff d2                	call   edx
c0012755:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0012758:	eb 0d                	jmp    c0012767 <KeSystemCall(regs*, void*)+0x33>
c001275a:	52                   	push   edx
c001275b:	52                   	push   edx
c001275c:	50                   	push   eax
c001275d:	68 da 20 02 c0       	push   0xc00220da
c0012762:	e8 de 81 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0012767:	83 c4 10             	add    esp,0x10
c001276a:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001276f:	31 d2                	xor    edx,edx
c0012771:	83 c4 08             	add    esp,0x8
c0012774:	5b                   	pop    ebx
c0012775:	c3                   	ret    
c0012776:	66 90                	xchg   ax,ax

c0012778 <KeSwitchEndian16(unsigned short)>:
c0012778:	83 ec 04             	sub    esp,0x4
c001277b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001277f:	66 89 04 24          	mov    WORD PTR [esp],ax
c0012783:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0012787:	c1 f8 08             	sar    eax,0x8
c001278a:	89 c2                	mov    edx,eax
c001278c:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0012790:	c1 e0 08             	shl    eax,0x8
c0012793:	09 d0                	or     eax,edx
c0012795:	83 c4 04             	add    esp,0x4
c0012798:	c3                   	ret    
c0012799:	8d 76 00             	lea    esi,[esi+0x0]

c001279c <KeSwitchEndian32(unsigned int)>:
c001279c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00127a0:	c1 e8 18             	shr    eax,0x18
c00127a3:	89 c2                	mov    edx,eax
c00127a5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00127a9:	c1 e0 08             	shl    eax,0x8
c00127ac:	25 00 00 ff 00       	and    eax,0xff0000
c00127b1:	09 c2                	or     edx,eax
c00127b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00127b7:	c1 e8 08             	shr    eax,0x8
c00127ba:	25 00 ff 00 00       	and    eax,0xff00
c00127bf:	09 c2                	or     edx,eax
c00127c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00127c5:	c1 e0 18             	shl    eax,0x18
c00127c8:	09 d0                	or     eax,edx
c00127ca:	c3                   	ret    
c00127cb:	90                   	nop

c00127cc <EthernetCRC32(unsigned char*, int)>:
c00127cc:	83 ec 10             	sub    esp,0x10
c00127cf:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00127d4:	75 0a                	jne    c00127e0 <EthernetCRC32(unsigned char*, int)+0x14>
c00127d6:	b8 00 00 00 00       	mov    eax,0x0
c00127db:	e9 8c 00 00 00       	jmp    c001286c <EthernetCRC32(unsigned char*, int)+0xa0>
c00127e0:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00127e5:	7f 09                	jg     c00127f0 <EthernetCRC32(unsigned char*, int)+0x24>
c00127e7:	b8 00 00 00 00       	mov    eax,0x0
c00127ec:	eb 7e                	jmp    c001286c <EthernetCRC32(unsigned char*, int)+0xa0>
c00127ee:	66 90                	xchg   ax,ax
c00127f0:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c00127f8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0012800:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012804:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0012808:	7d 5a                	jge    c0012864 <EthernetCRC32(unsigned char*, int)+0x98>
c001280a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001280e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012812:	01 d0                	add    eax,edx
c0012814:	8a 00                	mov    al,BYTE PTR [eax]
c0012816:	0f b6 c0             	movzx  eax,al
c0012819:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001281d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012825:	8d 76 00             	lea    esi,[esi+0x0]
c0012828:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001282d:	7f 2d                	jg     c001285c <EthernetCRC32(unsigned char*, int)+0x90>
c001282f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012833:	83 e0 01             	and    eax,0x1
c0012836:	74 10                	je     c0012848 <EthernetCRC32(unsigned char*, int)+0x7c>
c0012838:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001283c:	d1 e8                	shr    eax,1
c001283e:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0012843:	eb 0b                	jmp    c0012850 <EthernetCRC32(unsigned char*, int)+0x84>
c0012845:	8d 76 00             	lea    esi,[esi+0x0]
c0012848:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001284c:	d1 e8                	shr    eax,1
c001284e:	66 90                	xchg   ax,ax
c0012850:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012854:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0012859:	eb cd                	jmp    c0012828 <EthernetCRC32(unsigned char*, int)+0x5c>
c001285b:	90                   	nop
c001285c:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0012861:	eb 9d                	jmp    c0012800 <EthernetCRC32(unsigned char*, int)+0x34>
c0012863:	90                   	nop
c0012864:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012868:	f7 d0                	not    eax
c001286a:	66 90                	xchg   ax,ax
c001286c:	83 c4 10             	add    esp,0x10
c001286f:	c3                   	ret    

c0012870 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0012870:	83 ec 2c             	sub    esp,0x2c
c0012873:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012877:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001287c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012880:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012884:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012888:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001288b:	0f b7 c0             	movzx  eax,ax
c001288e:	3d 06 08 00 00       	cmp    eax,0x806
c0012893:	75 13                	jne    c00128a8 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c0012895:	83 ec 0c             	sub    esp,0xc
c0012898:	68 ee 20 02 c0       	push   0xc00220ee
c001289d:	e8 a3 80 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00128a2:	83 c4 10             	add    esp,0x10
c00128a5:	eb 25                	jmp    c00128cc <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c00128a7:	90                   	nop
c00128a8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00128ac:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00128af:	0f b7 c0             	movzx  eax,ax
c00128b2:	3d 00 08 00 00       	cmp    eax,0x800
c00128b7:	75 13                	jne    c00128cc <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c00128b9:	83 ec 0c             	sub    esp,0xc
c00128bc:	68 04 21 02 c0       	push   0xc0022104
c00128c1:	e8 7f 80 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00128c6:	83 c4 10             	add    esp,0x10
c00128c9:	8d 76 00             	lea    esi,[esi+0x0]
c00128cc:	90                   	nop
c00128cd:	83 c4 2c             	add    esp,0x2c
c00128d0:	c3                   	ret    

c00128d1 <CmOpen(char const*)>:
c00128d1:	57                   	push   edi
c00128d2:	56                   	push   esi
c00128d3:	53                   	push   ebx
c00128d4:	83 ec 1c             	sub    esp,0x1c
c00128d7:	6a 30                	push   0x30
c00128d9:	e8 d8 51 ff ff       	call   c0007ab6 <malloc>
c00128de:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00128e5:	89 c3                	mov    ebx,eax
c00128e7:	e8 ca 51 ff ff       	call   c0007ab6 <malloc>
c00128ec:	83 c4 0c             	add    esp,0xc
c00128ef:	89 c6                	mov    esi,eax
c00128f1:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c00128f7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00128fb:	50                   	push   eax
c00128fc:	e8 cf 8f ff ff       	call   c000b8d0 <File::File(char const*, Process*)>
c0012901:	83 c4 0c             	add    esp,0xc
c0012904:	89 33                	mov    DWORD PTR [ebx],esi
c0012906:	8d 44 24 07          	lea    eax,[esp+0x7]
c001290a:	50                   	push   eax
c001290b:	8d 44 24 10          	lea    eax,[esp+0x10]
c001290f:	50                   	push   eax
c0012910:	56                   	push   esi
c0012911:	e8 da 92 ff ff       	call   c000bbf0 <File::stat(unsigned long long*, bool*)>
c0012916:	5a                   	pop    edx
c0012917:	59                   	pop    ecx
c0012918:	6a 01                	push   0x1
c001291a:	ff 33                	push   DWORD PTR [ebx]
c001291c:	e8 cd 8f ff ff       	call   c000b8ee <File::open(FileOpenMode)>
c0012921:	5e                   	pop    esi
c0012922:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012926:	e8 8b 51 ff ff       	call   c0007ab6 <malloc>
c001292b:	5a                   	pop    edx
c001292c:	89 c7                	mov    edi,eax
c001292e:	8d 74 24 10          	lea    esi,[esp+0x10]
c0012932:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012934:	8b 10                	mov    edx,DWORD PTR [eax]
c0012936:	56                   	push   esi
c0012937:	57                   	push   edi
c0012938:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001293c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012940:	50                   	push   eax
c0012941:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012944:	83 c4 14             	add    esp,0x14
c0012947:	ff 33                	push   DWORD PTR [ebx]
c0012949:	e8 fe 8f ff ff       	call   c000b94c <File::close()>
c001294e:	59                   	pop    ecx
c001294f:	58                   	pop    eax
c0012950:	6a 13                	push   0x13
c0012952:	ff 33                	push   DWORD PTR [ebx]
c0012954:	e8 95 8f ff ff       	call   c000b8ee <File::open(FileOpenMode)>
c0012959:	8b 03                	mov    eax,DWORD PTR [ebx]
c001295b:	8b 10                	mov    edx,DWORD PTR [eax]
c001295d:	89 34 24             	mov    DWORD PTR [esp],esi
c0012960:	57                   	push   edi
c0012961:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012965:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012969:	50                   	push   eax
c001296a:	ff 52 10             	call   DWORD PTR [edx+0x10]
c001296d:	83 c4 14             	add    esp,0x14
c0012970:	57                   	push   edi
c0012971:	e8 50 51 ff ff       	call   c0007ac6 <free>
c0012976:	83 c4 10             	add    esp,0x10
c0012979:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001297c:	75 10                	jne    c001298e <CmOpen(char const*)+0xbd>
c001297e:	83 ec 0c             	sub    esp,0xc
c0012981:	68 19 21 02 c0       	push   0xc0022119
c0012986:	e8 ee e9 ff ff       	call   c0011379 <KePanic(char const*)>
c001298b:	83 c4 10             	add    esp,0x10
c001298e:	8d 7b 05             	lea    edi,[ebx+0x5]
c0012991:	50                   	push   eax
c0012992:	6a 00                	push   0x0
c0012994:	6a 00                	push   0x0
c0012996:	ff 33                	push   DWORD PTR [ebx]
c0012998:	e8 0f 90 ff ff       	call   c000b9ac <File::seek(unsigned long long)>
c001299d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001299f:	8b 10                	mov    edx,DWORD PTR [eax]
c00129a1:	89 34 24             	mov    DWORD PTR [esp],esi
c00129a4:	57                   	push   edi
c00129a5:	6a 00                	push   0x0
c00129a7:	6a 2b                	push   0x2b
c00129a9:	50                   	push   eax
c00129aa:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00129ad:	83 c4 1c             	add    esp,0x1c
c00129b0:	6a 00                	push   0x0
c00129b2:	6a 00                	push   0x0
c00129b4:	ff 33                	push   DWORD PTR [ebx]
c00129b6:	e8 f1 8f ff ff       	call   c000b9ac <File::seek(unsigned long long)>
c00129bb:	83 c4 0c             	add    esp,0xc
c00129be:	6a 08                	push   0x8
c00129c0:	68 2a 21 02 c0       	push   0xc002212a
c00129c5:	57                   	push   edi
c00129c6:	e8 b5 d9 fe ff       	call   c0000380 <memcmp>
c00129cb:	83 c4 10             	add    esp,0x10
c00129ce:	85 c0                	test   eax,eax
c00129d0:	74 10                	je     c00129e2 <CmOpen(char const*)+0x111>
c00129d2:	83 ec 0c             	sub    esp,0xc
c00129d5:	68 33 21 02 c0       	push   0xc0022133
c00129da:	e8 9a e9 ff ff       	call   c0011379 <KePanic(char const*)>
c00129df:	83 c4 10             	add    esp,0x10
c00129e2:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c00129e6:	89 d8                	mov    eax,ebx
c00129e8:	83 c4 10             	add    esp,0x10
c00129eb:	5b                   	pop    ebx
c00129ec:	5e                   	pop    esi
c00129ed:	5f                   	pop    edi
c00129ee:	c3                   	ret    

c00129ef <CmClose(Reghive_Tag*)>:
c00129ef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00129f3:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c00129f7:	74 0b                	je     c0012a04 <CmClose(Reghive_Tag*)+0x15>
c00129f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00129fb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00129ff:	e9 48 8f ff ff       	jmp    c000b94c <File::close()>
c0012a04:	c3                   	ret    

c0012a05 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0012a05:	53                   	push   ebx
c0012a06:	83 ec 18             	sub    esp,0x18
c0012a09:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012a0d:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012a11:	74 29                	je     c0012a3c <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012a13:	50                   	push   eax
c0012a14:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012a19:	99                   	cdq    
c0012a1a:	52                   	push   edx
c0012a1b:	50                   	push   eax
c0012a1c:	ff 33                	push   DWORD PTR [ebx]
c0012a1e:	e8 89 8f ff ff       	call   c000b9ac <File::seek(unsigned long long)>
c0012a23:	5a                   	pop    edx
c0012a24:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012a26:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012a2a:	8b 10                	mov    edx,DWORD PTR [eax]
c0012a2c:	51                   	push   ecx
c0012a2d:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012a31:	6a 00                	push   0x0
c0012a33:	6a 2b                	push   0x2b
c0012a35:	50                   	push   eax
c0012a36:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012a39:	83 c4 20             	add    esp,0x20
c0012a3c:	83 c4 18             	add    esp,0x18
c0012a3f:	5b                   	pop    ebx
c0012a40:	c3                   	ret    

c0012a41 <CmGetString(Reghive_Tag*, int, char*)>:
c0012a41:	55                   	push   ebp
c0012a42:	57                   	push   edi
c0012a43:	56                   	push   esi
c0012a44:	53                   	push   ebx
c0012a45:	31 db                	xor    ebx,ebx
c0012a47:	83 ec 70             	sub    esp,0x70
c0012a4a:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c0012a51:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0012a55:	50                   	push   eax
c0012a56:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0012a5d:	55                   	push   ebp
c0012a5e:	e8 a2 ff ff ff       	call   c0012a05 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012a63:	83 c4 10             	add    esp,0x10
c0012a66:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c0012a6b:	c1 e0 08             	shl    eax,0x8
c0012a6e:	89 c2                	mov    edx,eax
c0012a70:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0012a75:	09 d0                	or     eax,edx
c0012a77:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c0012a7c:	c1 e0 08             	shl    eax,0x8
c0012a7f:	09 d0                	or     eax,edx
c0012a81:	74 25                	je     c0012aa8 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c0012a83:	6b fb 0d             	imul   edi,ebx,0xd
c0012a86:	52                   	push   edx
c0012a87:	8d 54 24 39          	lea    edx,[esp+0x39]
c0012a8b:	52                   	push   edx
c0012a8c:	50                   	push   eax
c0012a8d:	55                   	push   ebp
c0012a8e:	e8 72 ff ff ff       	call   c0012a05 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012a93:	8d 74 24 49          	lea    esi,[esp+0x49]
c0012a97:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c0012a9e:	b9 27 00 00 00       	mov    ecx,0x27
c0012aa3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012aa5:	83 c4 10             	add    esp,0x10
c0012aa8:	83 c3 03             	add    ebx,0x3
c0012aab:	83 fb 15             	cmp    ebx,0x15
c0012aae:	75 b6                	jne    c0012a66 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c0012ab0:	83 c4 6c             	add    esp,0x6c
c0012ab3:	5b                   	pop    ebx
c0012ab4:	5e                   	pop    esi
c0012ab5:	5f                   	pop    edi
c0012ab6:	5d                   	pop    ebp
c0012ab7:	c3                   	ret    

c0012ab8 <CmEnterDirectory(Reghive_Tag*, int)>:
c0012ab8:	83 ec 40             	sub    esp,0x40
c0012abb:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012abf:	50                   	push   eax
c0012ac0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012ac4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012ac8:	e8 38 ff ff ff       	call   c0012a05 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012acd:	83 c4 10             	add    esp,0x10
c0012ad0:	83 c8 ff             	or     eax,0xffffffff
c0012ad3:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c0012ad8:	75 19                	jne    c0012af3 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c0012ada:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0012adf:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0012ae4:	c1 e0 08             	shl    eax,0x8
c0012ae7:	09 c2                	or     edx,eax
c0012ae9:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c0012aee:	c1 e0 10             	shl    eax,0x10
c0012af1:	09 d0                	or     eax,edx
c0012af3:	83 c4 3c             	add    esp,0x3c
c0012af6:	c3                   	ret    

c0012af7 <CmGetNext(Reghive_Tag*, int)>:
c0012af7:	83 ec 40             	sub    esp,0x40
c0012afa:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012afe:	50                   	push   eax
c0012aff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012b03:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012b07:	e8 f9 fe ff ff       	call   c0012a05 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012b0c:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c0012b11:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0012b16:	c1 e0 08             	shl    eax,0x8
c0012b19:	09 c2                	or     edx,eax
c0012b1b:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0012b20:	83 c4 4c             	add    esp,0x4c
c0012b23:	c1 e0 10             	shl    eax,0x10
c0012b26:	09 d0                	or     eax,edx
c0012b28:	c3                   	ret    

c0012b29 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c0012b29:	53                   	push   ebx
c0012b2a:	83 ec 18             	sub    esp,0x18
c0012b2d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012b31:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012b35:	74 29                	je     c0012b60 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012b37:	50                   	push   eax
c0012b38:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012b3d:	99                   	cdq    
c0012b3e:	52                   	push   edx
c0012b3f:	50                   	push   eax
c0012b40:	ff 33                	push   DWORD PTR [ebx]
c0012b42:	e8 65 8e ff ff       	call   c000b9ac <File::seek(unsigned long long)>
c0012b47:	5a                   	pop    edx
c0012b48:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012b4a:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012b4e:	8b 10                	mov    edx,DWORD PTR [eax]
c0012b50:	51                   	push   ecx
c0012b51:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012b55:	6a 00                	push   0x0
c0012b57:	6a 2b                	push   0x2b
c0012b59:	50                   	push   eax
c0012b5a:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012b5d:	83 c4 20             	add    esp,0x20
c0012b60:	83 c4 18             	add    esp,0x18
c0012b63:	5b                   	pop    ebx
c0012b64:	c3                   	ret    

c0012b65 <CmFreeExtent(Reghive_Tag*, int)>:
c0012b65:	53                   	push   ebx
c0012b66:	83 ec 3c             	sub    esp,0x3c
c0012b69:	6a 2b                	push   0x2b
c0012b6b:	6a 00                	push   0x0
c0012b6d:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012b71:	53                   	push   ebx
c0012b72:	e8 79 d9 fe ff       	call   c00004f0 <memset>
c0012b77:	83 c4 0c             	add    esp,0xc
c0012b7a:	53                   	push   ebx
c0012b7b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012b7f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012b83:	e8 a1 ff ff ff       	call   c0012b29 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012b88:	83 c4 48             	add    esp,0x48
c0012b8b:	5b                   	pop    ebx
c0012b8c:	c3                   	ret    

c0012b8d <CmUpdateHeader(Reghive_Tag*)>:
c0012b8d:	83 ec 0c             	sub    esp,0xc
c0012b90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b94:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012b98:	74 10                	je     c0012baa <CmUpdateHeader(Reghive_Tag*)+0x1d>
c0012b9a:	52                   	push   edx
c0012b9b:	8d 50 05             	lea    edx,[eax+0x5]
c0012b9e:	52                   	push   edx
c0012b9f:	6a 00                	push   0x0
c0012ba1:	50                   	push   eax
c0012ba2:	e8 82 ff ff ff       	call   c0012b29 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012ba7:	83 c4 10             	add    esp,0x10
c0012baa:	83 c4 0c             	add    esp,0xc
c0012bad:	c3                   	ret    

c0012bae <CmExpand(Reghive_Tag*, int)>:
c0012bae:	57                   	push   edi
c0012baf:	56                   	push   esi
c0012bb0:	83 ce ff             	or     esi,0xffffffff
c0012bb3:	53                   	push   ebx
c0012bb4:	83 ec 30             	sub    esp,0x30
c0012bb7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012bbb:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012bbf:	74 5f                	je     c0012c20 <CmExpand(Reghive_Tag*, int)+0x72>
c0012bc1:	31 d2                	xor    edx,edx
c0012bc3:	31 f6                	xor    esi,esi
c0012bc5:	50                   	push   eax
c0012bc6:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c0012bca:	52                   	push   edx
c0012bcb:	50                   	push   eax
c0012bcc:	ff 33                	push   DWORD PTR [ebx]
c0012bce:	e8 d9 8d ff ff       	call   c000b9ac <File::seek(unsigned long long)>
c0012bd3:	83 c4 0c             	add    esp,0xc
c0012bd6:	6a 2b                	push   0x2b
c0012bd8:	6a 00                	push   0x0
c0012bda:	8d 7c 24 11          	lea    edi,[esp+0x11]
c0012bde:	57                   	push   edi
c0012bdf:	e8 0c d9 fe ff       	call   c00004f0 <memset>
c0012be4:	83 c4 10             	add    esp,0x10
c0012be7:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0012beb:	7d 1b                	jge    c0012c08 <CmExpand(Reghive_Tag*, int)+0x5a>
c0012bed:	83 ec 0c             	sub    esp,0xc
c0012bf0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012bf2:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c0012bf6:	8b 10                	mov    edx,DWORD PTR [eax]
c0012bf8:	46                   	inc    esi
c0012bf9:	51                   	push   ecx
c0012bfa:	57                   	push   edi
c0012bfb:	6a 00                	push   0x0
c0012bfd:	6a 2b                	push   0x2b
c0012bff:	50                   	push   eax
c0012c00:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012c03:	83 c4 20             	add    esp,0x20
c0012c06:	eb df                	jmp    c0012be7 <CmExpand(Reghive_Tag*, int)+0x39>
c0012c08:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0012c0c:	8b 73 0d             	mov    esi,DWORD PTR [ebx+0xd]
c0012c0f:	83 ec 0c             	sub    esp,0xc
c0012c12:	01 f2                	add    edx,esi
c0012c14:	89 53 0d             	mov    DWORD PTR [ebx+0xd],edx
c0012c17:	53                   	push   ebx
c0012c18:	e8 70 ff ff ff       	call   c0012b8d <CmUpdateHeader(Reghive_Tag*)>
c0012c1d:	83 c4 10             	add    esp,0x10
c0012c20:	83 c4 30             	add    esp,0x30
c0012c23:	89 f0                	mov    eax,esi
c0012c25:	5b                   	pop    ebx
c0012c26:	5e                   	pop    esi
c0012c27:	5f                   	pop    edi
c0012c28:	c3                   	ret    

c0012c29 <CmFindUnusedExtent(Reghive_Tag*)>:
c0012c29:	55                   	push   ebp
c0012c2a:	57                   	push   edi
c0012c2b:	56                   	push   esi
c0012c2c:	53                   	push   ebx
c0012c2d:	83 cb ff             	or     ebx,0xffffffff
c0012c30:	83 ec 1c             	sub    esp,0x1c
c0012c33:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0012c37:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c0012c3b:	74 68                	je     c0012ca5 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012c3d:	be 2b 00 00 00       	mov    esi,0x2b
c0012c42:	51                   	push   ecx
c0012c43:	31 ff                	xor    edi,edi
c0012c45:	6a 00                	push   0x0
c0012c47:	31 db                	xor    ebx,ebx
c0012c49:	6a 00                	push   0x0
c0012c4b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012c4e:	e8 59 8d ff ff       	call   c000b9ac <File::seek(unsigned long long)>
c0012c53:	83 c4 10             	add    esp,0x10
c0012c56:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c0012c59:	76 3b                	jbe    c0012c96 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c0012c5b:	83 ec 0c             	sub    esp,0xc
c0012c5e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012c61:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012c65:	8b 10                	mov    edx,DWORD PTR [eax]
c0012c67:	51                   	push   ecx
c0012c68:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c0012c6c:	51                   	push   ecx
c0012c6d:	6a 00                	push   0x0
c0012c6f:	6a 01                	push   0x1
c0012c71:	50                   	push   eax
c0012c72:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012c75:	83 c4 20             	add    esp,0x20
c0012c78:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012c7d:	74 26                	je     c0012ca5 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012c7f:	43                   	inc    ebx
c0012c80:	52                   	push   edx
c0012c81:	57                   	push   edi
c0012c82:	56                   	push   esi
c0012c83:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012c86:	e8 21 8d ff ff       	call   c000b9ac <File::seek(unsigned long long)>
c0012c8b:	83 c6 2b             	add    esi,0x2b
c0012c8e:	83 d7 00             	adc    edi,0x0
c0012c91:	83 c4 10             	add    esp,0x10
c0012c94:	eb c0                	jmp    c0012c56 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c0012c96:	50                   	push   eax
c0012c97:	50                   	push   eax
c0012c98:	6a 40                	push   0x40
c0012c9a:	55                   	push   ebp
c0012c9b:	e8 0e ff ff ff       	call   c0012bae <CmExpand(Reghive_Tag*, int)>
c0012ca0:	83 c4 10             	add    esp,0x10
c0012ca3:	89 c3                	mov    ebx,eax
c0012ca5:	83 c4 1c             	add    esp,0x1c
c0012ca8:	89 d8                	mov    eax,ebx
c0012caa:	5b                   	pop    ebx
c0012cab:	5e                   	pop    esi
c0012cac:	5f                   	pop    edi
c0012cad:	5d                   	pop    ebp
c0012cae:	c3                   	ret    

c0012caf <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c0012caf:	55                   	push   ebp
c0012cb0:	57                   	push   edi
c0012cb1:	56                   	push   esi
c0012cb2:	53                   	push   ebx
c0012cb3:	81 ec 88 00 00 00    	sub    esp,0x88
c0012cb9:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c0012cc0:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012cc7:	e8 5d ff ff ff       	call   c0012c29 <CmFindUnusedExtent(Reghive_Tag*)>
c0012ccc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012cd0:	83 c4 0c             	add    esp,0xc
c0012cd3:	6a 2b                	push   0x2b
c0012cd5:	6a 00                	push   0x0
c0012cd7:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c0012cdb:	55                   	push   ebp
c0012cdc:	e8 0f d8 fe ff       	call   c00004f0 <memset>
c0012ce1:	83 c4 10             	add    esp,0x10
c0012ce4:	85 db                	test   ebx,ebx
c0012ce6:	74 12                	je     c0012cfa <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c0012ce8:	51                   	push   ecx
c0012ce9:	55                   	push   ebp
c0012cea:	53                   	push   ebx
c0012ceb:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012cf2:	e8 0e fd ff ff       	call   c0012a05 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012cf7:	83 c4 10             	add    esp,0x10
c0012cfa:	8d 7c 24 45          	lea    edi,[esp+0x45]
c0012cfe:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0012d05:	b9 2b 00 00 00       	mov    ecx,0x2b
c0012d0a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012d0c:	85 db                	test   ebx,ebx
c0012d0e:	74 49                	je     c0012d59 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c0012d10:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c0012d15:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0012d1a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012d1e:	c1 e0 08             	shl    eax,0x8
c0012d21:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0012d27:	09 c8                	or     eax,ecx
c0012d29:	74 11                	je     c0012d3c <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c0012d2b:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0012d2f:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c0012d33:	c1 e8 10             	shr    eax,0x10
c0012d36:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0012d3a:	eb 0f                	jmp    c0012d4b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c0012d3c:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012d41:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0012d46:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0012d4b:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c0012d4f:	c1 ea 08             	shr    edx,0x8
c0012d52:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c0012d57:	eb 0f                	jmp    c0012d68 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c0012d59:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012d5e:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0012d63:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0012d68:	52                   	push   edx
c0012d69:	8d 44 24 49          	lea    eax,[esp+0x49]
c0012d6d:	50                   	push   eax
c0012d6e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012d72:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012d79:	e8 ab fd ff ff       	call   c0012b29 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012d7e:	83 c4 10             	add    esp,0x10
c0012d81:	85 db                	test   ebx,ebx
c0012d83:	74 12                	je     c0012d97 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c0012d85:	50                   	push   eax
c0012d86:	55                   	push   ebp
c0012d87:	53                   	push   ebx
c0012d88:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012d8f:	e8 95 fd ff ff       	call   c0012b29 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012d94:	83 c4 10             	add    esp,0x10
c0012d97:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012d9b:	83 c4 7c             	add    esp,0x7c
c0012d9e:	5b                   	pop    ebx
c0012d9f:	5e                   	pop    esi
c0012da0:	5f                   	pop    edi
c0012da1:	5d                   	pop    ebp
c0012da2:	c3                   	ret    

c0012da3 <CmSetString(Reghive_Tag*, int, char const*)>:
c0012da3:	55                   	push   ebp
c0012da4:	57                   	push   edi
c0012da5:	56                   	push   esi
c0012da6:	53                   	push   ebx
c0012da7:	bb 27 00 00 00       	mov    ebx,0x27
c0012dac:	81 ec 88 00 00 00    	sub    esp,0x88
c0012db2:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0012db9:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c0012dc0:	e8 ab d7 fe ff       	call   c0000570 <strlen>
c0012dc5:	8d 48 26             	lea    ecx,[eax+0x26]
c0012dc8:	89 c8                	mov    eax,ecx
c0012dca:	99                   	cdq    
c0012dcb:	f7 fb                	idiv   ebx
c0012dcd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012dd1:	83 c4 10             	add    esp,0x10
c0012dd4:	81 f9 37 01 00 00    	cmp    ecx,0x137
c0012dda:	7e 10                	jle    c0012dec <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c0012ddc:	83 ec 0c             	sub    esp,0xc
c0012ddf:	68 44 21 02 c0       	push   0xc0022144
c0012de4:	e8 90 e5 ff ff       	call   c0011379 <KePanic(char const*)>
c0012de9:	83 c4 10             	add    esp,0x10
c0012dec:	31 ff                	xor    edi,edi
c0012dee:	50                   	push   eax
c0012def:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c0012df3:	53                   	push   ebx
c0012df4:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012dfb:	56                   	push   esi
c0012dfc:	e8 04 fc ff ff       	call   c0012a05 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012e01:	83 c4 10             	add    esp,0x10
c0012e04:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c0012e08:	89 d0                	mov    eax,edx
c0012e0a:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c0012e0e:	c1 e0 08             	shl    eax,0x8
c0012e11:	09 c2                	or     edx,eax
c0012e13:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c0012e17:	c1 e2 08             	shl    edx,0x8
c0012e1a:	09 c2                	or     edx,eax
c0012e1c:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0012e20:	7e 76                	jle    c0012e98 <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c0012e22:	85 d2                	test   edx,edx
c0012e24:	75 25                	jne    c0012e4b <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c0012e26:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c0012e2b:	8d 44 24 45          	lea    eax,[esp+0x45]
c0012e2f:	50                   	push   eax
c0012e30:	6a 00                	push   0x0
c0012e32:	6a 00                	push   0x0
c0012e34:	56                   	push   esi
c0012e35:	e8 75 fe ff ff       	call   c0012caf <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012e3a:	83 c4 10             	add    esp,0x10
c0012e3d:	89 c2                	mov    edx,eax
c0012e3f:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c0012e42:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c0012e45:	c1 f8 10             	sar    eax,0x10
c0012e48:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c0012e4b:	55                   	push   ebp
c0012e4c:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c0012e50:	55                   	push   ebp
c0012e51:	52                   	push   edx
c0012e52:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0012e56:	56                   	push   esi
c0012e57:	e8 a9 fb ff ff       	call   c0012a05 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012e5c:	83 c4 0c             	add    esp,0xc
c0012e5f:	6a 27                	push   0x27
c0012e61:	6a 00                	push   0x0
c0012e63:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0012e67:	51                   	push   ecx
c0012e68:	e8 83 d6 fe ff       	call   c00004f0 <memset>
c0012e6d:	83 c4 0c             	add    esp,0xc
c0012e70:	6b c7 27             	imul   eax,edi,0x27
c0012e73:	6a 27                	push   0x27
c0012e75:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c0012e7c:	50                   	push   eax
c0012e7d:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0012e81:	51                   	push   ecx
c0012e82:	e8 f9 d7 fe ff       	call   c0000680 <strncpy>
c0012e87:	83 c4 0c             	add    esp,0xc
c0012e8a:	55                   	push   ebp
c0012e8b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012e8f:	52                   	push   edx
c0012e90:	56                   	push   esi
c0012e91:	e8 93 fc ff ff       	call   c0012b29 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012e96:	eb 19                	jmp    c0012eb1 <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c0012e98:	85 d2                	test   edx,edx
c0012e9a:	74 18                	je     c0012eb4 <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c0012e9c:	51                   	push   ecx
c0012e9d:	51                   	push   ecx
c0012e9e:	52                   	push   edx
c0012e9f:	56                   	push   esi
c0012ea0:	e8 c0 fc ff ff       	call   c0012b65 <CmFreeExtent(Reghive_Tag*, int)>
c0012ea5:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c0012ea9:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c0012ead:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0012eb1:	83 c4 10             	add    esp,0x10
c0012eb4:	47                   	inc    edi
c0012eb5:	83 c3 03             	add    ebx,0x3
c0012eb8:	83 ff 07             	cmp    edi,0x7
c0012ebb:	0f 85 43 ff ff ff    	jne    c0012e04 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c0012ec1:	50                   	push   eax
c0012ec2:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c0012ec6:	50                   	push   eax
c0012ec7:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012ece:	56                   	push   esi
c0012ecf:	e8 55 fc ff ff       	call   c0012b29 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012ed4:	81 c4 8c 00 00 00    	add    esp,0x8c
c0012eda:	5b                   	pop    ebx
c0012edb:	5e                   	pop    esi
c0012edc:	5f                   	pop    edi
c0012edd:	5d                   	pop    ebp
c0012ede:	c3                   	ret    

c0012edf <CmGetMatch(char*, char*, bool, bool*)>:
c0012edf:	56                   	push   esi
c0012ee0:	53                   	push   ebx
c0012ee1:	50                   	push   eax
c0012ee2:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012ee6:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0012eeb:	74 25                	je     c0012f12 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c0012eed:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0012ef0:	31 db                	xor    ebx,ebx
c0012ef2:	50                   	push   eax
c0012ef3:	50                   	push   eax
c0012ef4:	8d 04 9d e0 35 02 c0 	lea    eax,[ebx*4-0x3ffdca20]
c0012efb:	50                   	push   eax
c0012efc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f00:	e8 4b d8 fe ff       	call   c0000750 <strcmp>
c0012f05:	83 c4 10             	add    esp,0x10
c0012f08:	85 c0                	test   eax,eax
c0012f0a:	74 2e                	je     c0012f3a <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0012f0c:	43                   	inc    ebx
c0012f0d:	83 fb 3f             	cmp    ebx,0x3f
c0012f10:	75 e0                	jne    c0012ef2 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c0012f12:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012f15:	31 db                	xor    ebx,ebx
c0012f17:	8d 04 9d e0 35 02 c0 	lea    eax,[ebx*4-0x3ffdca20]
c0012f1e:	51                   	push   ecx
c0012f1f:	51                   	push   ecx
c0012f20:	50                   	push   eax
c0012f21:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012f25:	e8 26 d8 fe ff       	call   c0000750 <strcmp>
c0012f2a:	83 c4 10             	add    esp,0x10
c0012f2d:	85 c0                	test   eax,eax
c0012f2f:	74 09                	je     c0012f3a <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0012f31:	43                   	inc    ebx
c0012f32:	83 fb 3f             	cmp    ebx,0x3f
c0012f35:	75 e0                	jne    c0012f17 <CmGetMatch(char*, char*, bool, bool*)+0x38>
c0012f37:	83 cb ff             	or     ebx,0xffffffff
c0012f3a:	89 d8                	mov    eax,ebx
c0012f3c:	5a                   	pop    edx
c0012f3d:	5b                   	pop    ebx
c0012f3e:	5e                   	pop    esi
c0012f3f:	c3                   	ret    

c0012f40 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c0012f40:	55                   	push   ebp
c0012f41:	31 c0                	xor    eax,eax
c0012f43:	57                   	push   edi
c0012f44:	56                   	push   esi
c0012f45:	53                   	push   ebx
c0012f46:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012f4a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012f4e:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0012f50:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0012f54:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c0012f57:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012f5b:	83 fd 1f             	cmp    ebp,0x1f
c0012f5e:	7f 0b                	jg     c0012f6b <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c0012f60:	0f b6 c2             	movzx  eax,dl
c0012f63:	d3 e0                	shl    eax,cl
c0012f65:	09 07                	or     DWORD PTR [edi],eax
c0012f67:	b0 01                	mov    al,0x1
c0012f69:	01 33                	add    DWORD PTR [ebx],esi
c0012f6b:	5b                   	pop    ebx
c0012f6c:	5e                   	pop    esi
c0012f6d:	5f                   	pop    edi
c0012f6e:	5d                   	pop    ebp
c0012f6f:	c3                   	ret    

c0012f70 <CmGetShift(unsigned int*, int*, int, bool*)>:
c0012f70:	57                   	push   edi
c0012f71:	56                   	push   esi
c0012f72:	53                   	push   ebx
c0012f73:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012f77:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012f7b:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0012f7f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012f83:	39 0b                	cmp    DWORD PTR [ebx],ecx
c0012f85:	7c 17                	jl     c0012f9e <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c0012f87:	8b 17                	mov    edx,DWORD PTR [edi]
c0012f89:	b8 01 00 00 00       	mov    eax,0x1
c0012f8e:	d3 e0                	shl    eax,cl
c0012f90:	48                   	dec    eax
c0012f91:	21 d0                	and    eax,edx
c0012f93:	d3 ea                	shr    edx,cl
c0012f95:	89 17                	mov    DWORD PTR [edi],edx
c0012f97:	29 0b                	sub    DWORD PTR [ebx],ecx
c0012f99:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0012f9c:	eb 05                	jmp    c0012fa3 <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c0012f9e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012fa1:	31 c0                	xor    eax,eax
c0012fa3:	5b                   	pop    ebx
c0012fa4:	5e                   	pop    esi
c0012fa5:	5f                   	pop    edi
c0012fa6:	c3                   	ret    

c0012fa7 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c0012fa7:	83 ec 40             	sub    esp,0x40
c0012faa:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012fae:	50                   	push   eax
c0012faf:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012fb3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012fb7:	e8 49 fa ff ff       	call   c0012a05 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012fbc:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0012fc0:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c0012fc4:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c0012fc8:	89 10                	mov    DWORD PTR [eax],edx
c0012fca:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0012fcd:	83 c4 4c             	add    esp,0x4c
c0012fd0:	c3                   	ret    

c0012fd1 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c0012fd1:	55                   	push   ebp
c0012fd2:	57                   	push   edi
c0012fd3:	56                   	push   esi
c0012fd4:	53                   	push   ebx
c0012fd5:	83 ec 40             	sub    esp,0x40
c0012fd8:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c0012fdc:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0012fe0:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c0012fe4:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c0012fe8:	53                   	push   ebx
c0012fe9:	56                   	push   esi
c0012fea:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012fee:	e8 12 fa ff ff       	call   c0012a05 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012ff3:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c0012ff7:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c0012ffb:	83 c4 0c             	add    esp,0xc
c0012ffe:	53                   	push   ebx
c0012fff:	56                   	push   esi
c0013000:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013004:	e8 20 fb ff ff       	call   c0012b29 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0013009:	83 c4 4c             	add    esp,0x4c
c001300c:	5b                   	pop    ebx
c001300d:	5e                   	pop    esi
c001300e:	5f                   	pop    edi
c001300f:	5d                   	pop    ebp
c0013010:	c3                   	ret    

c0013011 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c0013011:	55                   	push   ebp
c0013012:	57                   	push   edi
c0013013:	56                   	push   esi
c0013014:	31 f6                	xor    esi,esi
c0013016:	53                   	push   ebx
c0013017:	31 db                	xor    ebx,ebx
c0013019:	83 ec 40             	sub    esp,0x40
c001301c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013024:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001302c:	6a 12                	push   0x12
c001302e:	68 ee 00 00 00       	push   0xee
c0013033:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0013037:	e8 b4 d4 fe ff       	call   c00004f0 <memset>
c001303c:	83 c4 10             	add    esp,0x10
c001303f:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0013043:	6a 08                	push   0x8
c0013045:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0013049:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c001304d:	50                   	push   eax
c001304e:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0013052:	55                   	push   ebp
c0013053:	57                   	push   edi
c0013054:	e8 e7 fe ff ff       	call   c0012f40 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0013059:	83 c4 10             	add    esp,0x10
c001305c:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0013060:	50                   	push   eax
c0013061:	6a 06                	push   0x6
c0013063:	55                   	push   ebp
c0013064:	57                   	push   edi
c0013065:	e8 06 ff ff ff       	call   c0012f70 <CmGetShift(unsigned int*, int*, int, bool*)>
c001306a:	83 c4 10             	add    esp,0x10
c001306d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0013072:	74 07                	je     c001307b <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c0013074:	46                   	inc    esi
c0013075:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c0013079:	eb e1                	jmp    c001305c <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c001307b:	43                   	inc    ebx
c001307c:	83 fb 12             	cmp    ebx,0x12
c001307f:	75 c2                	jne    c0013043 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c0013081:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0013085:	31 db                	xor    ebx,ebx
c0013087:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001308a:	50                   	push   eax
c001308b:	50                   	push   eax
c001308c:	0f b6 44 1c 20       	movzx  eax,BYTE PTR [esp+ebx*1+0x20]
c0013091:	43                   	inc    ebx
c0013092:	8d 04 85 e0 35 02 c0 	lea    eax,[eax*4-0x3ffdca20]
c0013099:	50                   	push   eax
c001309a:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c001309e:	e8 9d d7 fe ff       	call   c0000840 <strcat>
c00130a3:	83 c4 10             	add    esp,0x10
c00130a6:	83 fb 18             	cmp    ebx,0x18
c00130a9:	75 df                	jne    c001308a <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c00130ab:	83 c4 3c             	add    esp,0x3c
c00130ae:	31 c0                	xor    eax,eax
c00130b0:	5b                   	pop    ebx
c00130b1:	5e                   	pop    esi
c00130b2:	5f                   	pop    edi
c00130b3:	5d                   	pop    ebp
c00130b4:	c3                   	ret    

c00130b5 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c00130b5:	83 ec 40             	sub    esp,0x40
c00130b8:	8d 44 24 09          	lea    eax,[esp+0x9]
c00130bc:	50                   	push   eax
c00130bd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00130c1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00130c5:	e8 3b f9 ff ff       	call   c0012a05 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00130ca:	58                   	pop    eax
c00130cb:	5a                   	pop    edx
c00130cc:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00130d0:	8d 44 24 15          	lea    eax,[esp+0x15]
c00130d4:	50                   	push   eax
c00130d5:	e8 37 ff ff ff       	call   c0013011 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c00130da:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c00130df:	83 c4 4c             	add    esp,0x4c
c00130e2:	c3                   	ret    

c00130e3 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c00130e3:	55                   	push   ebp
c00130e4:	57                   	push   edi
c00130e5:	56                   	push   esi
c00130e6:	53                   	push   ebx
c00130e7:	31 db                	xor    ebx,ebx
c00130e9:	83 ec 70             	sub    esp,0x70
c00130ec:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c00130f3:	6a 30                	push   0x30
c00130f5:	6a 00                	push   0x0
c00130f7:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00130fb:	56                   	push   esi
c00130fc:	e8 ef d3 fe ff       	call   c00004f0 <memset>
c0013101:	83 c4 10             	add    esp,0x10
c0013104:	83 ec 0c             	sub    esp,0xc
c0013107:	57                   	push   edi
c0013108:	e8 63 d4 fe ff       	call   c0000570 <strlen>
c001310d:	83 c4 10             	add    esp,0x10
c0013110:	39 d8                	cmp    eax,ebx
c0013112:	76 16                	jbe    c001312a <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c0013114:	83 ec 0c             	sub    esp,0xc
c0013117:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c001311b:	50                   	push   eax
c001311c:	e8 0f d8 fe ff       	call   c0000930 <toupper>
c0013121:	83 c4 10             	add    esp,0x10
c0013124:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0013127:	43                   	inc    ebx
c0013128:	eb da                	jmp    c0013104 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c001312a:	31 f6                	xor    esi,esi
c001312c:	52                   	push   edx
c001312d:	31 ff                	xor    edi,edi
c001312f:	6a 18                	push   0x18
c0013131:	6a 3f                	push   0x3f
c0013133:	8d 44 24 24          	lea    eax,[esp+0x24]
c0013137:	50                   	push   eax
c0013138:	e8 b3 d3 fe ff       	call   c00004f0 <memset>
c001313d:	83 c4 10             	add    esp,0x10
c0013140:	8a 44 34 30          	mov    al,BYTE PTR [esp+esi*1+0x30]
c0013144:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c0013148:	84 c0                	test   al,al
c001314a:	0f 84 b0 00 00 00    	je     c0013200 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c0013150:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c0013154:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c0013159:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c001315d:	c6 44 24 11 00       	mov    BYTE PTR [esp+0x11],0x0
c0013162:	8d 6e 01             	lea    ebp,[esi+0x1]
c0013165:	83 ec 0c             	sub    esp,0xc
c0013168:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c001316c:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c0013170:	53                   	push   ebx
c0013171:	e8 fa d3 fe ff       	call   c0000570 <strlen>
c0013176:	83 c4 10             	add    esp,0x10
c0013179:	85 c0                	test   eax,eax
c001317b:	8d 44 24 0f          	lea    eax,[esp+0xf]
c001317f:	74 0b                	je     c001318c <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c0013181:	50                   	push   eax
c0013182:	6a 01                	push   0x1
c0013184:	53                   	push   ebx
c0013185:	8d 44 24 20          	lea    eax,[esp+0x20]
c0013189:	50                   	push   eax
c001318a:	eb 0a                	jmp    c0013196 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c001318c:	50                   	push   eax
c001318d:	6a 00                	push   0x0
c001318f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0013193:	50                   	push   eax
c0013194:	6a 00                	push   0x0
c0013196:	e8 44 fd ff ff       	call   c0012edf <CmGetMatch(char*, char*, bool, bool*)>
c001319b:	83 c4 10             	add    esp,0x10
c001319e:	83 f8 ff             	cmp    eax,0xffffffff
c00131a1:	75 1a                	jne    c00131bd <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c00131a3:	83 ec 0c             	sub    esp,0xc
c00131a6:	68 59 21 02 c0       	push   0xc0022159
c00131ab:	e8 c9 e1 ff ff       	call   c0011379 <KePanic(char const*)>
c00131b0:	83 c4 10             	add    esp,0x10
c00131b3:	b8 02 00 00 00       	mov    eax,0x2
c00131b8:	e9 bc 00 00 00       	jmp    c0013279 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c00131bd:	83 ff 18             	cmp    edi,0x18
c00131c0:	75 1a                	jne    c00131dc <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c00131c2:	83 ec 0c             	sub    esp,0xc
c00131c5:	68 6e 21 02 c0       	push   0xc002216e
c00131ca:	e8 aa e1 ff ff       	call   c0011379 <KePanic(char const*)>
c00131cf:	83 c4 10             	add    esp,0x10
c00131d2:	b8 01 00 00 00       	mov    eax,0x1
c00131d7:	e9 9d 00 00 00       	jmp    c0013279 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c00131dc:	47                   	inc    edi
c00131dd:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00131e2:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c00131e6:	74 02                	je     c00131ea <CmConvertToInternalFilename(char const*, unsigned char*)+0x107>
c00131e8:	89 ee                	mov    esi,ebp
c00131ea:	83 ec 0c             	sub    esp,0xc
c00131ed:	53                   	push   ebx
c00131ee:	e8 7d d3 fe ff       	call   c0000570 <strlen>
c00131f3:	83 c4 10             	add    esp,0x10
c00131f6:	85 c0                	test   eax,eax
c00131f8:	74 06                	je     c0013200 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c00131fa:	46                   	inc    esi
c00131fb:	e9 40 ff ff ff       	jmp    c0013140 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c0013200:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0013208:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013210:	31 f6                	xor    esi,esi
c0013212:	50                   	push   eax
c0013213:	31 ff                	xor    edi,edi
c0013215:	6a 12                	push   0x12
c0013217:	68 ee 00 00 00       	push   0xee
c001321c:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0013223:	e8 c8 d2 fe ff       	call   c00004f0 <memset>
c0013228:	83 c4 10             	add    esp,0x10
c001322b:	83 fe 17             	cmp    esi,0x17
c001322e:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c0013232:	7e 26                	jle    c001325a <CmConvertToInternalFilename(char const*, unsigned char*)+0x177>
c0013234:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0013238:	50                   	push   eax
c0013239:	6a 08                	push   0x8
c001323b:	55                   	push   ebp
c001323c:	53                   	push   ebx
c001323d:	e8 2e fd ff ff       	call   c0012f70 <CmGetShift(unsigned int*, int*, int, bool*)>
c0013242:	83 c4 10             	add    esp,0x10
c0013245:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001324a:	74 26                	je     c0013272 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18f>
c001324c:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c0013253:	4e                   	dec    esi
c0013254:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c0013257:	47                   	inc    edi
c0013258:	eb 1c                	jmp    c0013276 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c001325a:	6a 06                	push   0x6
c001325c:	0f b6 44 34 1c       	movzx  eax,BYTE PTR [esp+esi*1+0x1c]
c0013261:	50                   	push   eax
c0013262:	55                   	push   ebp
c0013263:	53                   	push   ebx
c0013264:	e8 d7 fc ff ff       	call   c0012f40 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0013269:	83 c4 10             	add    esp,0x10
c001326c:	84 c0                	test   al,al
c001326e:	75 06                	jne    c0013276 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c0013270:	eb c2                	jmp    c0013234 <CmConvertToInternalFilename(char const*, unsigned char*)+0x151>
c0013272:	31 c0                	xor    eax,eax
c0013274:	eb 03                	jmp    c0013279 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0013276:	46                   	inc    esi
c0013277:	eb b2                	jmp    c001322b <CmConvertToInternalFilename(char const*, unsigned char*)+0x148>
c0013279:	83 c4 6c             	add    esp,0x6c
c001327c:	5b                   	pop    ebx
c001327d:	5e                   	pop    esi
c001327e:	5f                   	pop    edi
c001327f:	5d                   	pop    ebp
c0013280:	c3                   	ret    

c0013281 <CmCreateString(Reghive_Tag*, int, char const*)>:
c0013281:	53                   	push   ebx
c0013282:	83 ec 3c             	sub    esp,0x3c
c0013285:	6a 2b                	push   0x2b
c0013287:	6a 00                	push   0x0
c0013289:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c001328d:	53                   	push   ebx
c001328e:	e8 5d d2 fe ff       	call   c00004f0 <memset>
c0013293:	58                   	pop    eax
c0013294:	5a                   	pop    edx
c0013295:	8d 44 24 11          	lea    eax,[esp+0x11]
c0013299:	50                   	push   eax
c001329a:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001329e:	e8 40 fe ff ff       	call   c00130e3 <CmConvertToInternalFilename(char const*, unsigned char*)>
c00132a3:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c00132a8:	83 c4 0c             	add    esp,0xc
c00132ab:	6a 15                	push   0x15
c00132ad:	6a 00                	push   0x0
c00132af:	8d 44 24 27          	lea    eax,[esp+0x27]
c00132b3:	50                   	push   eax
c00132b4:	e8 37 d2 fe ff       	call   c00004f0 <memset>
c00132b9:	53                   	push   ebx
c00132ba:	6a 00                	push   0x0
c00132bc:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00132c0:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00132c4:	e8 e6 f9 ff ff       	call   c0012caf <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00132c9:	83 c4 58             	add    esp,0x58
c00132cc:	5b                   	pop    ebx
c00132cd:	c3                   	ret    

c00132ce <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c00132ce:	56                   	push   esi
c00132cf:	53                   	push   ebx
c00132d0:	83 ec 48             	sub    esp,0x48
c00132d3:	6a 12                	push   0x12
c00132d5:	68 ff 00 00 00       	push   0xff
c00132da:	8d 74 24 0f          	lea    esi,[esp+0xf]
c00132de:	56                   	push   esi
c00132df:	e8 0c d2 fe ff       	call   c00004f0 <memset>
c00132e4:	5a                   	pop    edx
c00132e5:	59                   	pop    ecx
c00132e6:	56                   	push   esi
c00132e7:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00132eb:	e8 f3 fd ff ff       	call   c00130e3 <CmConvertToInternalFilename(char const*, unsigned char*)>
c00132f0:	83 c4 10             	add    esp,0x10
c00132f3:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00132f7:	85 db                	test   ebx,ebx
c00132f9:	74 42                	je     c001333d <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c00132fb:	50                   	push   eax
c00132fc:	8d 44 24 19          	lea    eax,[esp+0x19]
c0013300:	50                   	push   eax
c0013301:	53                   	push   ebx
c0013302:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013306:	e8 fa f6 ff ff       	call   c0012a05 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001330b:	83 c4 0c             	add    esp,0xc
c001330e:	6a 12                	push   0x12
c0013310:	8d 44 24 21          	lea    eax,[esp+0x21]
c0013314:	50                   	push   eax
c0013315:	56                   	push   esi
c0013316:	e8 65 d0 fe ff       	call   c0000380 <memcmp>
c001331b:	83 c4 10             	add    esp,0x10
c001331e:	85 c0                	test   eax,eax
c0013320:	74 1e                	je     c0013340 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c0013322:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c0013327:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c001332c:	c1 e3 08             	shl    ebx,0x8
c001332f:	09 d8                	or     eax,ebx
c0013331:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c0013336:	c1 e3 10             	shl    ebx,0x10
c0013339:	09 c3                	or     ebx,eax
c001333b:	eb ba                	jmp    c00132f7 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c001333d:	83 cb ff             	or     ebx,0xffffffff
c0013340:	89 d8                	mov    eax,ebx
c0013342:	83 c4 44             	add    esp,0x44
c0013345:	5b                   	pop    ebx
c0013346:	5e                   	pop    esi
c0013347:	c3                   	ret    

c0013348 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c0013348:	57                   	push   edi
c0013349:	56                   	push   esi
c001334a:	53                   	push   ebx
c001334b:	83 ec 34             	sub    esp,0x34
c001334e:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0013352:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0013356:	6a 2b                	push   0x2b
c0013358:	6a 00                	push   0x0
c001335a:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c001335e:	53                   	push   ebx
c001335f:	e8 8c d1 fe ff       	call   c00004f0 <memset>
c0013364:	58                   	pop    eax
c0013365:	5a                   	pop    edx
c0013366:	8d 44 24 11          	lea    eax,[esp+0x11]
c001336a:	50                   	push   eax
c001336b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001336f:	e8 6f fd ff ff       	call   c00130e3 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0013374:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0013378:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c001337c:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c0013380:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0013384:	53                   	push   ebx
c0013385:	6a 00                	push   0x0
c0013387:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001338b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001338f:	e8 1b f9 ff ff       	call   c0012caf <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0013394:	83 c4 50             	add    esp,0x50
c0013397:	5b                   	pop    ebx
c0013398:	5e                   	pop    esi
c0013399:	5f                   	pop    edi
c001339a:	c3                   	ret    

c001339b <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c001339b:	55                   	push   ebp
c001339c:	57                   	push   edi
c001339d:	56                   	push   esi
c001339e:	53                   	push   ebx
c001339f:	83 ec 40             	sub    esp,0x40
c00133a2:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c00133a6:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00133aa:	6a 2b                	push   0x2b
c00133ac:	6a 00                	push   0x0
c00133ae:	8d 74 24 11          	lea    esi,[esp+0x11]
c00133b2:	56                   	push   esi
c00133b3:	e8 38 d1 fe ff       	call   c00004f0 <memset>
c00133b8:	5f                   	pop    edi
c00133b9:	89 ef                	mov    edi,ebp
c00133bb:	58                   	pop    eax
c00133bc:	8d 44 24 11          	lea    eax,[esp+0x11]
c00133c0:	50                   	push   eax
c00133c1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00133c5:	e8 19 fd ff ff       	call   c00130e3 <CmConvertToInternalFilename(char const*, unsigned char*)>
c00133ca:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c00133cf:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c00133d4:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c00133d9:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c00133de:	83 c4 10             	add    esp,0x10
c00133e1:	85 ed                	test   ebp,ebp
c00133e3:	74 14                	je     c00133f9 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c00133e5:	51                   	push   ecx
c00133e6:	51                   	push   ecx
c00133e7:	57                   	push   edi
c00133e8:	53                   	push   ebx
c00133e9:	e8 09 f7 ff ff       	call   c0012af7 <CmGetNext(Reghive_Tag*, int)>
c00133ee:	83 c4 10             	add    esp,0x10
c00133f1:	85 c0                	test   eax,eax
c00133f3:	74 04                	je     c00133f9 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c00133f5:	89 c7                	mov    edi,eax
c00133f7:	eb e8                	jmp    c00133e1 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c00133f9:	56                   	push   esi
c00133fa:	6a 00                	push   0x0
c00133fc:	57                   	push   edi
c00133fd:	53                   	push   ebx
c00133fe:	e8 ac f8 ff ff       	call   c0012caf <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0013403:	83 c4 0c             	add    esp,0xc
c0013406:	89 c7                	mov    edi,eax
c0013408:	56                   	push   esi
c0013409:	50                   	push   eax
c001340a:	53                   	push   ebx
c001340b:	e8 f5 f5 ff ff       	call   c0012a05 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013410:	58                   	pop    eax
c0013411:	5a                   	pop    edx
c0013412:	6a 6c                	push   0x6c
c0013414:	6a 00                	push   0x0
c0013416:	6a 00                	push   0x0
c0013418:	68 7f 21 02 c0       	push   0xc002217f
c001341d:	57                   	push   edi
c001341e:	53                   	push   ebx
c001341f:	e8 24 ff ff ff       	call   c0013348 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c0013424:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0013428:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c001342c:	c1 e8 10             	shr    eax,0x10
c001342f:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0013433:	83 c4 1c             	add    esp,0x1c
c0013436:	56                   	push   esi
c0013437:	57                   	push   edi
c0013438:	53                   	push   ebx
c0013439:	e8 eb f6 ff ff       	call   c0012b29 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001343e:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c0013443:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0013448:	c1 e0 08             	shl    eax,0x8
c001344b:	09 c2                	or     edx,eax
c001344d:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0013452:	83 c4 4c             	add    esp,0x4c
c0013455:	c1 e0 10             	shl    eax,0x10
c0013458:	5b                   	pop    ebx
c0013459:	09 d0                	or     eax,edx
c001345b:	5e                   	pop    esi
c001345c:	5f                   	pop    edi
c001345d:	5d                   	pop    ebp
c001345e:	c3                   	ret    

c001345f <zStrtok(char*, char const*)>:
c001345f:	55                   	push   ebp
c0013460:	57                   	push   edi
c0013461:	56                   	push   esi
c0013462:	53                   	push   ebx
c0013463:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013467:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001346b:	85 db                	test   ebx,ebx
c001346d:	74 2f                	je     c001349e <zStrtok(char*, char const*)+0x3f>
c001346f:	85 c0                	test   eax,eax
c0013471:	75 09                	jne    c001347c <zStrtok(char*, char const*)+0x1d>
c0013473:	a1 f0 8e 02 c0       	mov    eax,ds:0xc0028ef0
c0013478:	85 c0                	test   eax,eax
c001347a:	74 50                	je     c00134cc <zStrtok(char*, char const*)+0x6d>
c001347c:	31 c9                	xor    ecx,ecx
c001347e:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c0013482:	74 03                	je     c0013487 <zStrtok(char*, char const*)+0x28>
c0013484:	41                   	inc    ecx
c0013485:	eb f7                	jmp    c001347e <zStrtok(char*, char const*)+0x1f>
c0013487:	31 d2                	xor    edx,edx
c0013489:	39 ca                	cmp    edx,ecx
c001348b:	74 15                	je     c00134a2 <zStrtok(char*, char const*)+0x43>
c001348d:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c0013491:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c0013494:	8d 3c 10             	lea    edi,[eax+edx*1]
c0013497:	39 ee                	cmp    esi,ebp
c0013499:	74 13                	je     c00134ae <zStrtok(char*, char const*)+0x4f>
c001349b:	42                   	inc    edx
c001349c:	eb eb                	jmp    c0013489 <zStrtok(char*, char const*)+0x2a>
c001349e:	31 c0                	xor    eax,eax
c00134a0:	eb 2a                	jmp    c00134cc <zStrtok(char*, char const*)+0x6d>
c00134a2:	c7 05 f0 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ef0,0x0
c00134ac:	eb 1e                	jmp    c00134cc <zStrtok(char*, char const*)+0x6d>
c00134ae:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00134b1:	39 ce                	cmp    esi,ecx
c00134b3:	75 0a                	jne    c00134bf <zStrtok(char*, char const*)+0x60>
c00134b5:	40                   	inc    eax
c00134b6:	a3 f0 8e 02 c0       	mov    ds:0xc0028ef0,eax
c00134bb:	89 d8                	mov    eax,ebx
c00134bd:	eb 0d                	jmp    c00134cc <zStrtok(char*, char const*)+0x6d>
c00134bf:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c00134c3:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00134c6:	89 15 f0 8e 02 c0    	mov    DWORD PTR ds:0xc0028ef0,edx
c00134cc:	5b                   	pop    ebx
c00134cd:	5e                   	pop    esi
c00134ce:	5f                   	pop    edi
c00134cf:	5d                   	pop    ebp
c00134d0:	c3                   	ret    

c00134d1 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c00134d1:	57                   	push   edi
c00134d2:	56                   	push   esi
c00134d3:	53                   	push   ebx
c00134d4:	81 ec 08 01 00 00    	sub    esp,0x108
c00134da:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c00134e1:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c00134e8:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00134ec:	53                   	push   ebx
c00134ed:	e8 4e d1 fe ff       	call   c0000640 <strcpy>
c00134f2:	59                   	pop    ecx
c00134f3:	5e                   	pop    esi
c00134f4:	68 e3 24 02 c0       	push   0xc00224e3
c00134f9:	53                   	push   ebx
c00134fa:	bb 01 00 00 00       	mov    ebx,0x1
c00134ff:	e8 5b ff ff ff       	call   c001345f <zStrtok(char*, char const*)>
c0013504:	83 c4 10             	add    esp,0x10
c0013507:	85 c0                	test   eax,eax
c0013509:	74 3b                	je     c0013546 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c001350b:	52                   	push   edx
c001350c:	50                   	push   eax
c001350d:	6a 01                	push   0x1
c001350f:	57                   	push   edi
c0013510:	e8 b9 fd ff ff       	call   c00132ce <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c0013515:	59                   	pop    ecx
c0013516:	89 c3                	mov    ebx,eax
c0013518:	5e                   	pop    esi
c0013519:	68 e3 24 02 c0       	push   0xc00224e3
c001351e:	6a 00                	push   0x0
c0013520:	e8 3a ff ff ff       	call   c001345f <zStrtok(char*, char const*)>
c0013525:	83 c4 10             	add    esp,0x10
c0013528:	89 c6                	mov    esi,eax
c001352a:	85 c0                	test   eax,eax
c001352c:	74 18                	je     c0013546 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c001352e:	52                   	push   edx
c001352f:	52                   	push   edx
c0013530:	53                   	push   ebx
c0013531:	57                   	push   edi
c0013532:	e8 81 f5 ff ff       	call   c0012ab8 <CmEnterDirectory(Reghive_Tag*, int)>
c0013537:	83 c4 10             	add    esp,0x10
c001353a:	89 c3                	mov    ebx,eax
c001353c:	83 f8 ff             	cmp    eax,0xffffffff
c001353f:	74 05                	je     c0013546 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0013541:	50                   	push   eax
c0013542:	56                   	push   esi
c0013543:	53                   	push   ebx
c0013544:	eb c9                	jmp    c001350f <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c0013546:	81 c4 00 01 00 00    	add    esp,0x100
c001354c:	89 d8                	mov    eax,ebx
c001354e:	5b                   	pop    ebx
c001354f:	5e                   	pop    esi
c0013550:	5f                   	pop    edi
c0013551:	c3                   	ret    

c0013552 <CmDisplayTree(Reghive_Tag*, int, int)>:
c0013552:	55                   	push   ebp
c0013553:	57                   	push   edi
c0013554:	56                   	push   esi
c0013555:	53                   	push   ebx
c0013556:	83 ec 5c             	sub    esp,0x5c
c0013559:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c001355d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0013561:	85 db                	test   ebx,ebx
c0013563:	0f 8e 84 00 00 00    	jle    c00135ed <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c0013569:	31 ed                	xor    ebp,ebp
c001356b:	57                   	push   edi
c001356c:	6a 32                	push   0x32
c001356e:	6a 00                	push   0x0
c0013570:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c0013574:	57                   	push   edi
c0013575:	e8 76 cf fe ff       	call   c00004f0 <memset>
c001357a:	83 c4 0c             	add    esp,0xc
c001357d:	57                   	push   edi
c001357e:	53                   	push   ebx
c001357f:	56                   	push   esi
c0013580:	e8 30 fb ff ff       	call   c00130b5 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013585:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013589:	83 c4 10             	add    esp,0x10
c001358c:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c0013590:	7d 13                	jge    c00135a5 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c0013592:	83 ec 0c             	sub    esp,0xc
c0013595:	45                   	inc    ebp
c0013596:	68 87 28 02 c0       	push   0xc0022887
c001359b:	e8 a5 73 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00135a0:	83 c4 10             	add    esp,0x10
c00135a3:	eb e7                	jmp    c001358c <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c00135a5:	51                   	push   ecx
c00135a6:	57                   	push   edi
c00135a7:	53                   	push   ebx
c00135a8:	68 85 21 02 c0       	push   0xc0022185
c00135ad:	e8 93 73 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00135b2:	83 c4 10             	add    esp,0x10
c00135b5:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c00135ba:	75 1e                	jne    c00135da <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c00135bc:	52                   	push   edx
c00135bd:	52                   	push   edx
c00135be:	53                   	push   ebx
c00135bf:	56                   	push   esi
c00135c0:	e8 f3 f4 ff ff       	call   c0012ab8 <CmEnterDirectory(Reghive_Tag*, int)>
c00135c5:	83 c4 0c             	add    esp,0xc
c00135c8:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c00135cc:	8d 51 04             	lea    edx,[ecx+0x4]
c00135cf:	52                   	push   edx
c00135d0:	50                   	push   eax
c00135d1:	56                   	push   esi
c00135d2:	e8 7b ff ff ff       	call   c0013552 <CmDisplayTree(Reghive_Tag*, int, int)>
c00135d7:	83 c4 10             	add    esp,0x10
c00135da:	50                   	push   eax
c00135db:	50                   	push   eax
c00135dc:	53                   	push   ebx
c00135dd:	56                   	push   esi
c00135de:	e8 14 f5 ff ff       	call   c0012af7 <CmGetNext(Reghive_Tag*, int)>
c00135e3:	83 c4 10             	add    esp,0x10
c00135e6:	89 c3                	mov    ebx,eax
c00135e8:	e9 74 ff ff ff       	jmp    c0013561 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c00135ed:	83 c4 5c             	add    esp,0x5c
c00135f0:	5b                   	pop    ebx
c00135f1:	5e                   	pop    esi
c00135f2:	5f                   	pop    edi
c00135f3:	5d                   	pop    ebp
c00135f4:	c3                   	ret    

c00135f5 <CmSplitFinalSlashInPlace(char*)>:
c00135f5:	53                   	push   ebx
c00135f6:	83 ec 14             	sub    esp,0x14
c00135f9:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00135fd:	53                   	push   ebx
c00135fe:	e8 6d cf fe ff       	call   c0000570 <strlen>
c0013603:	83 c4 10             	add    esp,0x10
c0013606:	48                   	dec    eax
c0013607:	85 c0                	test   eax,eax
c0013609:	74 15                	je     c0013620 <CmSplitFinalSlashInPlace(char*)+0x2b>
c001360b:	8d 14 03             	lea    edx,[ebx+eax*1]
c001360e:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0013612:	75 09                	jne    c001361d <CmSplitFinalSlashInPlace(char*)+0x28>
c0013614:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0013617:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001361b:	eb 05                	jmp    c0013622 <CmSplitFinalSlashInPlace(char*)+0x2d>
c001361d:	48                   	dec    eax
c001361e:	eb e7                	jmp    c0013607 <CmSplitFinalSlashInPlace(char*)+0x12>
c0013620:	31 c0                	xor    eax,eax
c0013622:	83 c4 08             	add    esp,0x8
c0013625:	5b                   	pop    ebx
c0013626:	c3                   	ret    

c0013627 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0013627:	55                   	push   ebp
c0013628:	57                   	push   edi
c0013629:	56                   	push   esi
c001362a:	53                   	push   ebx
c001362b:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0013631:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c0013638:	8a 13                	mov    dl,BYTE PTR [ebx]
c001363a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001363d:	80 fa 40             	cmp    dl,0x40
c0013640:	75 1c                	jne    c001365e <Reg::findLineFromLoadedData(char*, char*, char*)+0x37>
c0013642:	0f be 0b             	movsx  ecx,BYTE PTR [ebx]
c0013645:	85 c9                	test   ecx,ecx
c0013647:	0f 84 09 01 00 00    	je     c0013756 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c001364d:	8d 43 01             	lea    eax,[ebx+0x1]
c0013650:	83 f9 3a             	cmp    ecx,0x3a
c0013653:	74 04                	je     c0013659 <Reg::findLineFromLoadedData(char*, char*, char*)+0x32>
c0013655:	89 c3                	mov    ebx,eax
c0013657:	eb e9                	jmp    c0013642 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0013659:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001365c:	89 c3                	mov    ebx,eax
c001365e:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0013662:	50                   	push   eax
c0013663:	6a 40                	push   0x40
c0013665:	6a 00                	push   0x0
c0013667:	8d 44 24 24          	lea    eax,[esp+0x24]
c001366b:	50                   	push   eax
c001366c:	e8 7f ce fe ff       	call   c00004f0 <memset>
c0013671:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0013678:	31 c0                	xor    eax,eax
c001367a:	83 c4 10             	add    esp,0x10
c001367d:	0f be 74 24 0c       	movsx  esi,BYTE PTR [esp+0xc]
c0013682:	0f be 17             	movsx  edx,BYTE PTR [edi]
c0013685:	89 d1                	mov    ecx,edx
c0013687:	85 d2                	test   edx,edx
c0013689:	0f 84 c7 00 00 00    	je     c0013756 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c001368f:	3d c7 00 00 00       	cmp    eax,0xc7
c0013694:	0f 8f bc 00 00 00    	jg     c0013756 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c001369a:	83 fa 0a             	cmp    edx,0xa
c001369d:	0f 85 a4 00 00 00    	jne    c0013747 <Reg::findLineFromLoadedData(char*, char*, char*)+0x120>
c00136a3:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c00136a8:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c00136ad:	89 c8                	mov    eax,ecx
c00136af:	a8 df                	test   al,0xdf
c00136b1:	0f 94 c2             	sete   dl
c00136b4:	83 f9 23             	cmp    ecx,0x23
c00136b7:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c00136bc:	0b 54 24 0c          	or     edx,DWORD PTR [esp+0xc]
c00136c0:	80 e2 01             	and    dl,0x1
c00136c3:	75 4a                	jne    c001370f <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c00136c5:	83 e8 09             	sub    eax,0x9
c00136c8:	3c 01                	cmp    al,0x1
c00136ca:	76 43                	jbe    c001370f <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c00136cc:	83 f9 5b             	cmp    ecx,0x5b
c00136cf:	75 42                	jne    c0013713 <Reg::findLineFromLoadedData(char*, char*, char*)+0xec>
c00136d1:	83 fe 40             	cmp    esi,0x40
c00136d4:	75 39                	jne    c001370f <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c00136d6:	83 ec 0c             	sub    esp,0xc
c00136d9:	8d 54 24 65          	lea    edx,[esp+0x65]
c00136dd:	52                   	push   edx
c00136de:	e8 8d ce fe ff       	call   c0000570 <strlen>
c00136e3:	83 c4 10             	add    esp,0x10
c00136e6:	83 f8 3f             	cmp    eax,0x3f
c00136e9:	77 6b                	ja     c0013756 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c00136eb:	50                   	push   eax
c00136ec:	50                   	push   eax
c00136ed:	8d 54 24 61          	lea    edx,[esp+0x61]
c00136f1:	52                   	push   edx
c00136f2:	8d 54 24 24          	lea    edx,[esp+0x24]
c00136f6:	52                   	push   edx
c00136f7:	e8 44 cf fe ff       	call   c0000640 <strcpy>
c00136fc:	58                   	pop    eax
c00136fd:	8d 54 24 24          	lea    edx,[esp+0x24]
c0013701:	52                   	push   edx
c0013702:	e8 69 ce fe ff       	call   c0000570 <strlen>
c0013707:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001370c:	83 c4 10             	add    esp,0x10
c001370f:	31 d2                	xor    edx,edx
c0013711:	eb 3b                	jmp    c001374e <Reg::findLineFromLoadedData(char*, char*, char*)+0x127>
c0013713:	83 fe 40             	cmp    esi,0x40
c0013716:	74 06                	je     c001371e <Reg::findLineFromLoadedData(char*, char*, char*)+0xf7>
c0013718:	8d 44 24 58          	lea    eax,[esp+0x58]
c001371c:	eb 20                	jmp    c001373e <Reg::findLineFromLoadedData(char*, char*, char*)+0x117>
c001371e:	50                   	push   eax
c001371f:	50                   	push   eax
c0013720:	55                   	push   ebp
c0013721:	8d 44 24 24          	lea    eax,[esp+0x24]
c0013725:	50                   	push   eax
c0013726:	e8 25 d0 fe ff       	call   c0000750 <strcmp>
c001372b:	83 c4 10             	add    esp,0x10
c001372e:	85 c0                	test   eax,eax
c0013730:	75 dd                	jne    c001370f <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013732:	eb e4                	jmp    c0013718 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c0013734:	8d 50 01             	lea    edx,[eax+0x1]
c0013737:	83 f9 3d             	cmp    ecx,0x3d
c001373a:	74 1e                	je     c001375a <Reg::findLineFromLoadedData(char*, char*, char*)+0x133>
c001373c:	89 d0                	mov    eax,edx
c001373e:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0013741:	85 c9                	test   ecx,ecx
c0013743:	75 ef                	jne    c0013734 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10d>
c0013745:	eb 0f                	jmp    c0013756 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0013747:	8d 50 01             	lea    edx,[eax+0x1]
c001374a:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001374e:	47                   	inc    edi
c001374f:	89 d0                	mov    eax,edx
c0013751:	e9 2c ff ff ff       	jmp    c0013682 <Reg::findLineFromLoadedData(char*, char*, char*)+0x5b>
c0013756:	31 c0                	xor    eax,eax
c0013758:	eb 33                	jmp    c001378d <Reg::findLineFromLoadedData(char*, char*, char*)+0x166>
c001375a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001375e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0013761:	50                   	push   eax
c0013762:	50                   	push   eax
c0013763:	8d 44 24 60          	lea    eax,[esp+0x60]
c0013767:	50                   	push   eax
c0013768:	53                   	push   ebx
c0013769:	e8 e2 cf fe ff       	call   c0000750 <strcmp>
c001376e:	83 c4 10             	add    esp,0x10
c0013771:	85 c0                	test   eax,eax
c0013773:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013777:	75 96                	jne    c001370f <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013779:	51                   	push   ecx
c001377a:	51                   	push   ecx
c001377b:	52                   	push   edx
c001377c:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0013783:	e8 b8 ce fe ff       	call   c0000640 <strcpy>
c0013788:	83 c4 10             	add    esp,0x10
c001378b:	b0 01                	mov    al,0x1
c001378d:	81 c4 2c 01 00 00    	add    esp,0x12c
c0013793:	5b                   	pop    ebx
c0013794:	5e                   	pop    esi
c0013795:	5f                   	pop    edi
c0013796:	5d                   	pop    ebp
c0013797:	c3                   	ret    

c0013798 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0013798:	57                   	push   edi
c0013799:	56                   	push   esi
c001379a:	53                   	push   ebx
c001379b:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00137a1:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c00137a8:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00137af:	53                   	push   ebx
c00137b0:	e8 bb cd fe ff       	call   c0000570 <strlen>
c00137b5:	89 34 24             	mov    DWORD PTR [esp],esi
c00137b8:	89 c7                	mov    edi,eax
c00137ba:	e8 b1 cd fe ff       	call   c0000570 <strlen>
c00137bf:	83 c4 10             	add    esp,0x10
c00137c2:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c00137c6:	3d ff 00 00 00       	cmp    eax,0xff
c00137cb:	0f 87 d3 00 00 00    	ja     c00138a4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c00137d1:	57                   	push   edi
c00137d2:	57                   	push   edi
c00137d3:	56                   	push   esi
c00137d4:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00137d8:	56                   	push   esi
c00137d9:	e8 62 ce fe ff       	call   c0000640 <strcpy>
c00137de:	58                   	pop    eax
c00137df:	5a                   	pop    edx
c00137e0:	68 e3 24 02 c0       	push   0xc00224e3
c00137e5:	56                   	push   esi
c00137e6:	e8 55 d0 fe ff       	call   c0000840 <strcat>
c00137eb:	59                   	pop    ecx
c00137ec:	5f                   	pop    edi
c00137ed:	53                   	push   ebx
c00137ee:	56                   	push   esi
c00137ef:	e8 4c d0 fe ff       	call   c0000840 <strcat>
c00137f4:	58                   	pop    eax
c00137f5:	5a                   	pop    edx
c00137f6:	68 8f 21 02 c0       	push   0xc002218f
c00137fb:	56                   	push   esi
c00137fc:	e8 3f d0 fe ff       	call   c0000840 <strcat>
c0013801:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0013808:	e8 a9 42 ff ff       	call   c0007ab6 <malloc>
c001380d:	83 c4 0c             	add    esp,0xc
c0013810:	89 c3                	mov    ebx,eax
c0013812:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0013818:	56                   	push   esi
c0013819:	50                   	push   eax
c001381a:	e8 b1 80 ff ff       	call   c000b8d0 <File::File(char const*, Process*)>
c001381f:	83 c4 10             	add    esp,0x10
c0013822:	85 db                	test   ebx,ebx
c0013824:	74 7e                	je     c00138a4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0013826:	51                   	push   ecx
c0013827:	51                   	push   ecx
c0013828:	6a 01                	push   0x1
c001382a:	53                   	push   ebx
c001382b:	e8 be 80 ff ff       	call   c000b8ee <File::open(FileOpenMode)>
c0013830:	83 c4 10             	add    esp,0x10
c0013833:	85 c0                	test   eax,eax
c0013835:	74 08                	je     c001383f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0013837:	83 ec 0c             	sub    esp,0xc
c001383a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001383c:	53                   	push   ebx
c001383d:	eb 5f                	jmp    c001389e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001383f:	52                   	push   edx
c0013840:	8d 44 24 17          	lea    eax,[esp+0x17]
c0013844:	50                   	push   eax
c0013845:	8d 44 24 20          	lea    eax,[esp+0x20]
c0013849:	50                   	push   eax
c001384a:	53                   	push   ebx
c001384b:	e8 a0 83 ff ff       	call   c000bbf0 <File::stat(unsigned long long*, bool*)>
c0013850:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013854:	83 c4 10             	add    esp,0x10
c0013857:	89 c1                	mov    ecx,eax
c0013859:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001385d:	74 31                	je     c0013890 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001385f:	83 ec 0c             	sub    esp,0xc
c0013862:	50                   	push   eax
c0013863:	e8 4e 42 ff ff       	call   c0007ab6 <malloc>
c0013868:	89 c6                	mov    esi,eax
c001386a:	58                   	pop    eax
c001386b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001386d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0013871:	52                   	push   edx
c0013872:	56                   	push   esi
c0013873:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013877:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001387b:	53                   	push   ebx
c001387c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001387f:	83 c4 20             	add    esp,0x20
c0013882:	85 c0                	test   eax,eax
c0013884:	75 0a                	jne    c0013890 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0013886:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001388a:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001388e:	74 18                	je     c00138a8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0013890:	83 ec 0c             	sub    esp,0xc
c0013893:	53                   	push   ebx
c0013894:	e8 b3 80 ff ff       	call   c000b94c <File::close()>
c0013899:	8b 03                	mov    eax,DWORD PTR [ebx]
c001389b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001389e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00138a1:	83 c4 10             	add    esp,0x10
c00138a4:	31 c0                	xor    eax,eax
c00138a6:	eb 3b                	jmp    c00138e3 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c00138a8:	83 ec 0c             	sub    esp,0xc
c00138ab:	53                   	push   ebx
c00138ac:	e8 9b 80 ff ff       	call   c000b94c <File::close()>
c00138b1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00138b3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00138b6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00138b9:	83 c4 0c             	add    esp,0xc
c00138bc:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00138c3:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00138ca:	56                   	push   esi
c00138cb:	e8 57 fd ff ff       	call   c0013627 <Reg::findLineFromLoadedData(char*, char*, char*)>
c00138d0:	89 34 24             	mov    DWORD PTR [esp],esi
c00138d3:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00138d7:	e8 ea 41 ff ff       	call   c0007ac6 <free>
c00138dc:	83 c4 10             	add    esp,0x10
c00138df:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00138e3:	81 c4 20 01 00 00    	add    esp,0x120
c00138e9:	5b                   	pop    ebx
c00138ea:	5e                   	pop    esi
c00138eb:	5f                   	pop    edi
c00138ec:	c3                   	ret    

c00138ed <Reg::getLine(char*, char*, char*)>:
c00138ed:	57                   	push   edi
c00138ee:	56                   	push   esi
c00138ef:	53                   	push   ebx
c00138f0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00138f4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00138f8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00138fc:	57                   	push   edi
c00138fd:	56                   	push   esi
c00138fe:	53                   	push   ebx
c00138ff:	68 94 21 02 c0       	push   0xc0022194
c0013904:	e8 8f fe ff ff       	call   c0013798 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013909:	83 c4 10             	add    esp,0x10
c001390c:	84 c0                	test   al,al
c001390e:	75 10                	jne    c0013920 <Reg::getLine(char*, char*, char*)+0x33>
c0013910:	57                   	push   edi
c0013911:	56                   	push   esi
c0013912:	53                   	push   ebx
c0013913:	68 b9 21 02 c0       	push   0xc00221b9
c0013918:	e8 7b fe ff ff       	call   c0013798 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001391d:	83 c4 10             	add    esp,0x10
c0013920:	5b                   	pop    ebx
c0013921:	5e                   	pop    esi
c0013922:	5f                   	pop    edi
c0013923:	c3                   	ret    

c0013924 <Reg::readInt(char*, char*, int*)>:
c0013924:	55                   	push   ebp
c0013925:	57                   	push   edi
c0013926:	56                   	push   esi
c0013927:	53                   	push   ebx
c0013928:	81 ec f0 00 00 00    	sub    esp,0xf0
c001392e:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0013932:	55                   	push   ebp
c0013933:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001393a:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013941:	e8 a7 ff ff ff       	call   c00138ed <Reg::getLine(char*, char*, char*)>
c0013946:	83 c4 10             	add    esp,0x10
c0013949:	84 c0                	test   al,al
c001394b:	0f 84 b6 00 00 00    	je     c0013a07 <Reg::readInt(char*, char*, int*)+0xe3>
c0013951:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c0013956:	83 fa 2b             	cmp    edx,0x2b
c0013959:	74 0c                	je     c0013967 <Reg::readInt(char*, char*, int*)+0x43>
c001395b:	83 fa 2d             	cmp    edx,0x2d
c001395e:	75 0e                	jne    c001396e <Reg::readInt(char*, char*, int*)+0x4a>
c0013960:	ba 01 00 00 00       	mov    edx,0x1
c0013965:	eb 0b                	jmp    c0013972 <Reg::readInt(char*, char*, int*)+0x4e>
c0013967:	ba 01 00 00 00       	mov    edx,0x1
c001396c:	eb 02                	jmp    c0013970 <Reg::readInt(char*, char*, int*)+0x4c>
c001396e:	31 d2                	xor    edx,edx
c0013970:	31 c0                	xor    eax,eax
c0013972:	be 0a 00 00 00       	mov    esi,0xa
c0013977:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001397c:	75 21                	jne    c001399f <Reg::readInt(char*, char*, int*)+0x7b>
c001397e:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c0013983:	83 f9 78             	cmp    ecx,0x78
c0013986:	75 0a                	jne    c0013992 <Reg::readInt(char*, char*, int*)+0x6e>
c0013988:	83 c2 02             	add    edx,0x2
c001398b:	be 10 00 00 00       	mov    esi,0x10
c0013990:	eb 0d                	jmp    c001399f <Reg::readInt(char*, char*, int*)+0x7b>
c0013992:	83 f9 62             	cmp    ecx,0x62
c0013995:	75 08                	jne    c001399f <Reg::readInt(char*, char*, int*)+0x7b>
c0013997:	83 c2 02             	add    edx,0x2
c001399a:	be 02 00 00 00       	mov    esi,0x2
c001399f:	01 d5                	add    ebp,edx
c00139a1:	31 d2                	xor    edx,edx
c00139a3:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c00139a7:	83 f9 0d             	cmp    ecx,0xd
c00139aa:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00139ae:	0f 94 c3             	sete   bl
c00139b1:	85 c9                	test   ecx,ecx
c00139b3:	89 df                	mov    edi,ebx
c00139b5:	0f 94 c3             	sete   bl
c00139b8:	09 df                	or     edi,ebx
c00139ba:	89 fb                	mov    ebx,edi
c00139bc:	83 e7 01             	and    edi,0x1
c00139bf:	75 35                	jne    c00139f6 <Reg::readInt(char*, char*, int*)+0xd2>
c00139c1:	0f af d6             	imul   edx,esi
c00139c4:	83 fe 10             	cmp    esi,0x10
c00139c7:	75 26                	jne    c00139ef <Reg::readInt(char*, char*, int*)+0xcb>
c00139c9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00139cd:	83 ef 41             	sub    edi,0x41
c00139d0:	89 fb                	mov    ebx,edi
c00139d2:	80 fb 05             	cmp    bl,0x5
c00139d5:	77 06                	ja     c00139dd <Reg::readInt(char*, char*, int*)+0xb9>
c00139d7:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c00139db:	eb 16                	jmp    c00139f3 <Reg::readInt(char*, char*, int*)+0xcf>
c00139dd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00139e1:	83 eb 61             	sub    ebx,0x61
c00139e4:	80 fb 05             	cmp    bl,0x5
c00139e7:	77 06                	ja     c00139ef <Reg::readInt(char*, char*, int*)+0xcb>
c00139e9:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c00139ed:	eb 04                	jmp    c00139f3 <Reg::readInt(char*, char*, int*)+0xcf>
c00139ef:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c00139f3:	45                   	inc    ebp
c00139f4:	eb ad                	jmp    c00139a3 <Reg::readInt(char*, char*, int*)+0x7f>
c00139f6:	84 c0                	test   al,al
c00139f8:	74 02                	je     c00139fc <Reg::readInt(char*, char*, int*)+0xd8>
c00139fa:	f7 da                	neg    edx
c00139fc:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0013a03:	89 10                	mov    DWORD PTR [eax],edx
c0013a05:	88 d8                	mov    al,bl
c0013a07:	81 c4 ec 00 00 00    	add    esp,0xec
c0013a0d:	5b                   	pop    ebx
c0013a0e:	5e                   	pop    esi
c0013a0f:	5f                   	pop    edi
c0013a10:	5d                   	pop    ebp
c0013a11:	c3                   	ret    

c0013a12 <Reg::readString(char*, char*, char*, int)>:
c0013a12:	57                   	push   edi
c0013a13:	56                   	push   esi
c0013a14:	53                   	push   ebx
c0013a15:	81 ec d4 00 00 00    	sub    esp,0xd4
c0013a1b:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0013a22:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0013a26:	57                   	push   edi
c0013a27:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013a2e:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013a35:	e8 b3 fe ff ff       	call   c00138ed <Reg::getLine(char*, char*, char*)>
c0013a3a:	83 c4 10             	add    esp,0x10
c0013a3d:	89 c6                	mov    esi,eax
c0013a3f:	84 c0                	test   al,al
c0013a41:	74 44                	je     c0013a87 <Reg::readString(char*, char*, char*, int)+0x75>
c0013a43:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0013a4a:	31 c0                	xor    eax,eax
c0013a4c:	4a                   	dec    edx
c0013a4d:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0013a50:	84 c9                	test   cl,cl
c0013a52:	74 0f                	je     c0013a63 <Reg::readString(char*, char*, char*, int)+0x51>
c0013a54:	39 c2                	cmp    edx,eax
c0013a56:	7e 0b                	jle    c0013a63 <Reg::readString(char*, char*, char*, int)+0x51>
c0013a58:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0013a5b:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0013a60:	40                   	inc    eax
c0013a61:	eb ea                	jmp    c0013a4d <Reg::readString(char*, char*, char*, int)+0x3b>
c0013a63:	83 ec 0c             	sub    esp,0xc
c0013a66:	53                   	push   ebx
c0013a67:	e8 04 cb fe ff       	call   c0000570 <strlen>
c0013a6c:	83 c4 10             	add    esp,0x10
c0013a6f:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0013a74:	75 11                	jne    c0013a87 <Reg::readString(char*, char*, char*, int)+0x75>
c0013a76:	83 ec 0c             	sub    esp,0xc
c0013a79:	53                   	push   ebx
c0013a7a:	e8 f1 ca fe ff       	call   c0000570 <strlen>
c0013a7f:	83 c4 10             	add    esp,0x10
c0013a82:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0013a87:	81 c4 d0 00 00 00    	add    esp,0xd0
c0013a8d:	89 f0                	mov    eax,esi
c0013a8f:	5b                   	pop    ebx
c0013a90:	5e                   	pop    esi
c0013a91:	5f                   	pop    edi
c0013a92:	c3                   	ret    

c0013a93 <Reg::readBool(char*, char*, bool*)>:
c0013a93:	83 ec 20             	sub    esp,0x20
c0013a96:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013a9a:	50                   	push   eax
c0013a9b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a9f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013aa3:	e8 7c fe ff ff       	call   c0013924 <Reg::readInt(char*, char*, int*)>
c0013aa8:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0013aad:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0013ab1:	0f 95 02             	setne  BYTE PTR [edx]
c0013ab4:	83 c4 2c             	add    esp,0x2c
c0013ab7:	c3                   	ret    

c0013ab8 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0013ab8:	53                   	push   ebx
c0013ab9:	83 ec 1c             	sub    esp,0x1c
c0013abc:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0013ac0:	8d 44 24 13          	lea    eax,[esp+0x13]
c0013ac4:	50                   	push   eax
c0013ac5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013ac9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013acd:	e8 c1 ff ff ff       	call   c0013a93 <Reg::readBool(char*, char*, bool*)>
c0013ad2:	83 c4 10             	add    esp,0x10
c0013ad5:	84 c0                	test   al,al
c0013ad7:	74 04                	je     c0013add <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0013ad9:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0013add:	88 d8                	mov    al,bl
c0013adf:	83 c4 18             	add    esp,0x18
c0013ae2:	5b                   	pop    ebx
c0013ae3:	c3                   	ret    

c0013ae4 <Reg::readIntWithDefault(char*, char*, int)>:
c0013ae4:	53                   	push   ebx
c0013ae5:	83 ec 1c             	sub    esp,0x1c
c0013ae8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013aec:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013af0:	50                   	push   eax
c0013af1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013af5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013af9:	e8 26 fe ff ff       	call   c0013924 <Reg::readInt(char*, char*, int*)>
c0013afe:	83 c4 10             	add    esp,0x10
c0013b01:	84 c0                	test   al,al
c0013b03:	74 04                	je     c0013b09 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0013b05:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013b09:	89 d8                	mov    eax,ebx
c0013b0b:	83 c4 18             	add    esp,0x18
c0013b0e:	5b                   	pop    ebx
c0013b0f:	c3                   	ret    

c0013b10 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0013b10:	57                   	push   edi
c0013b11:	56                   	push   esi
c0013b12:	56                   	push   esi
c0013b13:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013b17:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013b1b:	56                   	push   esi
c0013b1c:	57                   	push   edi
c0013b1d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b21:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b25:	e8 e8 fe ff ff       	call   c0013a12 <Reg::readString(char*, char*, char*, int)>
c0013b2a:	83 c4 10             	add    esp,0x10
c0013b2d:	84 c0                	test   al,al
c0013b2f:	75 1a                	jne    c0013b4b <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0013b31:	51                   	push   ecx
c0013b32:	56                   	push   esi
c0013b33:	6a 00                	push   0x0
c0013b35:	57                   	push   edi
c0013b36:	e8 b5 c9 fe ff       	call   c00004f0 <memset>
c0013b3b:	8d 4e ff             	lea    ecx,[esi-0x1]
c0013b3e:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013b42:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013b44:	83 c4 10             	add    esp,0x10
c0013b47:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0013b4b:	89 f8                	mov    eax,edi
c0013b4d:	5a                   	pop    edx
c0013b4e:	5e                   	pop    esi
c0013b4f:	5f                   	pop    edi
c0013b50:	c3                   	ret    

c0013b51 <SysEject(regs*)>:
c0013b51:	83 ec 0c             	sub    esp,0xc
c0013b54:	83 ca ff             	or     edx,0xffffffff
c0013b57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b5b:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013b5e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013b63:	83 e9 41             	sub    ecx,0x41
c0013b66:	83 f9 19             	cmp    ecx,0x19
c0013b69:	77 18                	ja     c0013b83 <SysEject(regs*)+0x32>
c0013b6b:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c0013b72:	85 c9                	test   ecx,ecx
c0013b74:	74 0d                	je     c0013b83 <SysEject(regs*)+0x32>
c0013b76:	83 ec 0c             	sub    esp,0xc
c0013b79:	51                   	push   ecx
c0013b7a:	e8 43 9f ff ff       	call   c000dac2 <LogicalDisk::eject()>
c0013b7f:	83 c4 10             	add    esp,0x10
c0013b82:	99                   	cdq    
c0013b83:	83 c4 0c             	add    esp,0xc
c0013b86:	c3                   	ret    

c0013b87 <SysExit(regs*)>:
c0013b87:	83 ec 18             	sub    esp,0x18
c0013b8a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b8e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013b91:	e8 46 2b 00 00       	call   c00166dc <terminateTask(int)>
c0013b96:	83 c8 ff             	or     eax,0xffffffff
c0013b99:	83 c4 1c             	add    esp,0x1c
c0013b9c:	89 c2                	mov    edx,eax
c0013b9e:	c3                   	ret    

c0013b9f <SysGetCwd(regs*)>:
c0013b9f:	83 ec 10             	sub    esp,0x10
c0013ba2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013ba6:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0013ba9:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013bac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013bb1:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013bb4:	e8 db 79 ff ff       	call   c000b594 <Fs::getcwd(Process*, char*, int)>
c0013bb9:	83 c4 1c             	add    esp,0x1c
c0013bbc:	99                   	cdq    
c0013bbd:	c3                   	ret    

c0013bbe <SysGetPID(regs*)>:
c0013bbe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013bc3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013bc6:	8b 00                	mov    eax,DWORD PTR [eax]
c0013bc8:	99                   	cdq    
c0013bc9:	c3                   	ret    

c0013bca <SysGetRAMData(regs*)>:
c0013bca:	8b 0d e8 5e 02 c0    	mov    ecx,DWORD PTR ds:0xc0025ee8
c0013bd0:	69 05 e4 5e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0025ee4,0xc8
c0013bda:	99                   	cdq    
c0013bdb:	f7 f9                	idiv   ecx
c0013bdd:	c1 e0 18             	shl    eax,0x18
c0013be0:	09 c8                	or     eax,ecx
c0013be2:	99                   	cdq    
c0013be3:	c3                   	ret    

c0013be4 <SysGetVGAPtr(regs*)>:
c0013be4:	55                   	push   ebp
c0013be5:	57                   	push   edi
c0013be6:	56                   	push   esi
c0013be7:	53                   	push   ebx
c0013be8:	83 ec 18             	sub    esp,0x18
c0013beb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013bef:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013bf2:	e8 b1 25 00 00       	call   c00161a8 <Thr::processFromPID(int)>
c0013bf7:	83 c4 10             	add    esp,0x10
c0013bfa:	89 c1                	mov    ecx,eax
c0013bfc:	b8 01 00 00 00       	mov    eax,0x1
c0013c01:	85 c9                	test   ecx,ecx
c0013c03:	74 57                	je     c0013c5c <SysGetVGAPtr(regs*)+0x78>
c0013c05:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0013c0b:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0013c0f:	74 0c                	je     c0013c1d <SysGetVGAPtr(regs*)+0x39>
c0013c11:	83 ec 0c             	sub    esp,0xc
c0013c14:	55                   	push   ebp
c0013c15:	e8 3f 4b ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c0013c1a:	83 c4 10             	add    esp,0x10
c0013c1d:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0013c20:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0013c23:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0013c28:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013c2a:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0013c2d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013c30:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0013c36:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013c39:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0013c3c:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0013c42:	50                   	push   eax
c0013c43:	50                   	push   eax
c0013c44:	68 d4 21 02 c0       	push   0xc00221d4
c0013c49:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013c4c:	05 a8 0f 00 00       	add    eax,0xfa8
c0013c51:	50                   	push   eax
c0013c52:	e8 e9 c9 fe ff       	call   c0000640 <strcpy>
c0013c57:	83 c4 10             	add    esp,0x10
c0013c5a:	31 c0                	xor    eax,eax
c0013c5c:	83 c4 0c             	add    esp,0xc
c0013c5f:	31 d2                	xor    edx,edx
c0013c61:	5b                   	pop    ebx
c0013c62:	5e                   	pop    esi
c0013c63:	5f                   	pop    edi
c0013c64:	5d                   	pop    ebp
c0013c65:	c3                   	ret    
c0013c66:	66 90                	xchg   ax,ax

c0013c68 <SysKill(regs*)>:
c0013c68:	53                   	push   ebx
c0013c69:	83 ec 08             	sub    esp,0x8
c0013c6c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013c70:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0013c74:	75 16                	jne    c0013c8c <SysKill(regs*)+0x24>
c0013c76:	83 ec 0c             	sub    esp,0xc
c0013c79:	68 de 21 02 c0       	push   0xc00221de
c0013c7e:	e8 f6 d6 ff ff       	call   c0011379 <KePanic(char const*)>
c0013c83:	83 c4 10             	add    esp,0x10
c0013c86:	e9 89 00 00 00       	jmp    c0013d14 <SysKill(regs*)+0xac>
c0013c8b:	90                   	nop
c0013c8c:	83 ec 0c             	sub    esp,0xc
c0013c8f:	68 e4 96 02 c0       	push   0xc00296e4
c0013c94:	e8 03 bd 00 00       	call   c001f99c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013c99:	8d 76 00             	lea    esi,[esi+0x0]
c0013c9c:	83 c4 10             	add    esp,0x10
c0013c9f:	85 c0                	test   eax,eax
c0013ca1:	74 19                	je     c0013cbc <SysKill(regs*)+0x54>
c0013ca3:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013ca6:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013ca9:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013cab:	74 33                	je     c0013ce0 <SysKill(regs*)+0x78>
c0013cad:	52                   	push   edx
c0013cae:	52                   	push   edx
c0013caf:	50                   	push   eax
c0013cb0:	68 e4 96 02 c0       	push   0xc00296e4
c0013cb5:	e8 02 c0 00 00       	call   c001fcbc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013cba:	eb e0                	jmp    c0013c9c <SysKill(regs*)+0x34>
c0013cbc:	83 ec 0c             	sub    esp,0xc
c0013cbf:	68 d8 96 02 c0       	push   0xc00296d8
c0013cc4:	e8 d3 bc 00 00       	call   c001f99c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013cc9:	8d 76 00             	lea    esi,[esi+0x0]
c0013ccc:	83 c4 10             	add    esp,0x10
c0013ccf:	85 c0                	test   eax,eax
c0013cd1:	74 41                	je     c0013d14 <SysKill(regs*)+0xac>
c0013cd3:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013cd6:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013cd9:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013cdb:	75 27                	jne    c0013d04 <SysKill(regs*)+0x9c>
c0013cdd:	8d 76 00             	lea    esi,[esi+0x0]
c0013ce0:	51                   	push   ecx
c0013ce1:	51                   	push   ecx
c0013ce2:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013ce5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013cea:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013ced:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013cf3:	e8 22 db ff ff       	call   c001181a <KeRaiseSignal(SigHandlerBlock*, int)>
c0013cf8:	83 c4 10             	add    esp,0x10
c0013cfb:	31 c0                	xor    eax,eax
c0013cfd:	31 d2                	xor    edx,edx
c0013cff:	eb 1b                	jmp    c0013d1c <SysKill(regs*)+0xb4>
c0013d01:	8d 76 00             	lea    esi,[esi+0x0]
c0013d04:	52                   	push   edx
c0013d05:	52                   	push   edx
c0013d06:	50                   	push   eax
c0013d07:	68 d8 96 02 c0       	push   0xc00296d8
c0013d0c:	e8 ab bf 00 00       	call   c001fcbc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013d11:	eb b9                	jmp    c0013ccc <SysKill(regs*)+0x64>
c0013d13:	90                   	nop
c0013d14:	83 c8 ff             	or     eax,0xffffffff
c0013d17:	89 c2                	mov    edx,eax
c0013d19:	8d 76 00             	lea    esi,[esi+0x0]
c0013d1c:	83 c4 08             	add    esp,0x8
c0013d1f:	5b                   	pop    ebx
c0013d20:	c3                   	ret    

c0013d21 <SysLoadDLL(regs*)>:
c0013d21:	56                   	push   esi
c0013d22:	53                   	push   ebx
c0013d23:	31 d2                	xor    edx,edx
c0013d25:	51                   	push   ecx
c0013d26:	b8 01 00 00 00       	mov    eax,0x1
c0013d2b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013d2f:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0013d33:	0f 84 8c 00 00 00    	je     c0013dc5 <SysLoadDLL(regs*)+0xa4>
c0013d39:	83 ec 0c             	sub    esp,0xc
c0013d3c:	68 14 01 00 00       	push   0x114
c0013d41:	e8 70 3d ff ff       	call   c0007ab6 <malloc>
c0013d46:	83 c4 0c             	add    esp,0xc
c0013d49:	89 c3                	mov    ebx,eax
c0013d4b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013d50:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013d53:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013d56:	53                   	push   ebx
c0013d57:	e8 74 7b ff ff       	call   c000b8d0 <File::File(char const*, Process*)>
c0013d5c:	83 c4 10             	add    esp,0x10
c0013d5f:	31 d2                	xor    edx,edx
c0013d61:	b8 02 00 00 00       	mov    eax,0x2
c0013d66:	85 db                	test   ebx,ebx
c0013d68:	74 5b                	je     c0013dc5 <SysLoadDLL(regs*)+0xa4>
c0013d6a:	83 ec 0c             	sub    esp,0xc
c0013d6d:	53                   	push   ebx
c0013d6e:	e8 3f 7e ff ff       	call   c000bbb2 <File::exists()>
c0013d73:	83 c4 10             	add    esp,0x10
c0013d76:	84 c0                	test   al,al
c0013d78:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d7a:	75 11                	jne    c0013d8d <SysLoadDLL(regs*)+0x6c>
c0013d7c:	83 ec 0c             	sub    esp,0xc
c0013d7f:	53                   	push   ebx
c0013d80:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013d83:	83 c4 10             	add    esp,0x10
c0013d86:	b8 03 00 00 00       	mov    eax,0x3
c0013d8b:	eb 36                	jmp    c0013dc3 <SysLoadDLL(regs*)+0xa2>
c0013d8d:	83 ec 0c             	sub    esp,0xc
c0013d90:	53                   	push   ebx
c0013d91:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013d94:	58                   	pop    eax
c0013d95:	5a                   	pop    edx
c0013d96:	6a 00                	push   0x0
c0013d98:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013d9b:	e8 3b 15 00 00       	call   c00152db <Thr::loadDLL(char const*, bool)>
c0013da0:	83 c4 10             	add    esp,0x10
c0013da3:	89 c1                	mov    ecx,eax
c0013da5:	31 d2                	xor    edx,edx
c0013da7:	b8 04 00 00 00       	mov    eax,0x4
c0013dac:	85 c9                	test   ecx,ecx
c0013dae:	74 15                	je     c0013dc5 <SysLoadDLL(regs*)+0xa4>
c0013db0:	53                   	push   ebx
c0013db1:	53                   	push   ebx
c0013db2:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0013db8:	51                   	push   ecx
c0013db9:	e8 4e 17 00 00       	call   c001550c <Thr::executeDLL(unsigned long, void*)>
c0013dbe:	83 c4 10             	add    esp,0x10
c0013dc1:	31 c0                	xor    eax,eax
c0013dc3:	31 d2                	xor    edx,edx
c0013dc5:	59                   	pop    ecx
c0013dc6:	5b                   	pop    ebx
c0013dc7:	5e                   	pop    esi
c0013dc8:	c3                   	ret    

c0013dc9 <SysRead(regs*)>:
c0013dc9:	57                   	push   edi
c0013dca:	56                   	push   esi
c0013dcb:	53                   	push   ebx
c0013dcc:	83 ec 10             	sub    esp,0x10
c0013dcf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013dd3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013dd6:	83 f8 02             	cmp    eax,0x2
c0013dd9:	77 10                	ja     c0013deb <SysRead(regs*)+0x22>
c0013ddb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013de0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013de3:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0013de9:	eb 0e                	jmp    c0013df9 <SysRead(regs*)+0x30>
c0013deb:	83 ec 0c             	sub    esp,0xc
c0013dee:	50                   	push   eax
c0013def:	e8 bf 56 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0013df4:	83 c4 10             	add    esp,0x10
c0013df7:	89 c1                	mov    ecx,eax
c0013df9:	83 c8 ff             	or     eax,0xffffffff
c0013dfc:	85 c9                	test   ecx,ecx
c0013dfe:	89 c2                	mov    edx,eax
c0013e00:	74 28                	je     c0013e2a <SysRead(regs*)+0x61>
c0013e02:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013e0a:	31 ff                	xor    edi,edi
c0013e0c:	83 ec 0c             	sub    esp,0xc
c0013e0f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013e11:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013e15:	52                   	push   edx
c0013e16:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013e19:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0013e1c:	57                   	push   edi
c0013e1d:	56                   	push   esi
c0013e1e:	51                   	push   ecx
c0013e1f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013e22:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0013e26:	83 c4 20             	add    esp,0x20
c0013e29:	99                   	cdq    
c0013e2a:	83 c4 10             	add    esp,0x10
c0013e2d:	5b                   	pop    ebx
c0013e2e:	5e                   	pop    esi
c0013e2f:	5f                   	pop    edi
c0013e30:	c3                   	ret    

c0013e31 <SysRegisterSignal(regs*)>:
c0013e31:	83 ec 18             	sub    esp,0x18
c0013e34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013e38:	6a 00                	push   0x0
c0013e3a:	6a 00                	push   0x0
c0013e3c:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013e3f:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013e42:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013e47:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013e4a:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013e50:	e8 8f d9 ff ff       	call   c00117e4 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0013e55:	83 c4 2c             	add    esp,0x2c
c0013e58:	99                   	cdq    
c0013e59:	c3                   	ret    

c0013e5a <SysRegistryGetTypeFromPath(regs*)>:
c0013e5a:	57                   	push   edi
c0013e5b:	56                   	push   esi
c0013e5c:	53                   	push   ebx
c0013e5d:	81 ec 38 01 00 00    	sub    esp,0x138
c0013e63:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0013e6a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013e6d:	68 ff 21 02 c0       	push   0xc00221ff
c0013e72:	e8 ce 6a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013e77:	5a                   	pop    edx
c0013e78:	59                   	pop    ecx
c0013e79:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013e7c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013e7f:	e8 4d f6 ff ff       	call   c00134d1 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013e84:	5f                   	pop    edi
c0013e85:	89 c6                	mov    esi,eax
c0013e87:	5a                   	pop    edx
c0013e88:	50                   	push   eax
c0013e89:	68 1f 22 02 c0       	push   0xc002221f
c0013e8e:	e8 b2 6a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013e93:	83 c4 10             	add    esp,0x10
c0013e96:	85 f6                	test   esi,esi
c0013e98:	74 28                	je     c0013ec2 <SysRegistryGetTypeFromPath(regs*)+0x68>
c0013e9a:	50                   	push   eax
c0013e9b:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0013e9f:	57                   	push   edi
c0013ea0:	56                   	push   esi
c0013ea1:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013ea4:	e8 0c f2 ff ff       	call   c00130b5 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013ea9:	83 c4 0c             	add    esp,0xc
c0013eac:	89 c3                	mov    ebx,eax
c0013eae:	57                   	push   edi
c0013eaf:	50                   	push   eax
c0013eb0:	68 27 22 02 c0       	push   0xc0022227
c0013eb5:	e8 8b 6a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013eba:	89 d8                	mov    eax,ebx
c0013ebc:	83 c4 10             	add    esp,0x10
c0013ebf:	99                   	cdq    
c0013ec0:	eb 05                	jmp    c0013ec7 <SysRegistryGetTypeFromPath(regs*)+0x6d>
c0013ec2:	83 c8 ff             	or     eax,0xffffffff
c0013ec5:	89 c2                	mov    edx,eax
c0013ec7:	81 c4 30 01 00 00    	add    esp,0x130
c0013ecd:	5b                   	pop    ebx
c0013ece:	5e                   	pop    esi
c0013ecf:	5f                   	pop    edi
c0013ed0:	c3                   	ret    

c0013ed1 <SysRegistryReadExtent(regs*)>:
c0013ed1:	83 ec 1c             	sub    esp,0x1c
c0013ed4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013ed8:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013edb:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0013ede:	85 c0                	test   eax,eax
c0013ee0:	79 1f                	jns    c0013f01 <SysRegistryReadExtent(regs*)+0x30>
c0013ee2:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0013ee7:	52                   	push   edx
c0013ee8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0013eec:	52                   	push   edx
c0013eed:	50                   	push   eax
c0013eee:	51                   	push   ecx
c0013eef:	e8 b3 f0 ff ff       	call   c0012fa7 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0013ef4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013ef8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013efc:	83 c4 10             	add    esp,0x10
c0013eff:	eb 14                	jmp    c0013f15 <SysRegistryReadExtent(regs*)+0x44>
c0013f01:	83 ec 04             	sub    esp,0x4
c0013f04:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0013f07:	50                   	push   eax
c0013f08:	51                   	push   ecx
c0013f09:	e8 33 eb ff ff       	call   c0012a41 <CmGetString(Reghive_Tag*, int, char*)>
c0013f0e:	83 c4 10             	add    esp,0x10
c0013f11:	31 c0                	xor    eax,eax
c0013f13:	31 d2                	xor    edx,edx
c0013f15:	83 c4 1c             	add    esp,0x1c
c0013f18:	c3                   	ret    

c0013f19 <SysRegistryPathToExtentLookup(regs*)>:
c0013f19:	53                   	push   ebx
c0013f1a:	83 ec 10             	sub    esp,0x10
c0013f1d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013f21:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013f24:	68 3d 22 02 c0       	push   0xc002223d
c0013f29:	e8 17 6a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013f2e:	58                   	pop    eax
c0013f2f:	5a                   	pop    edx
c0013f30:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013f33:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013f36:	e8 96 f5 ff ff       	call   c00134d1 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013f3b:	83 c4 18             	add    esp,0x18
c0013f3e:	99                   	cdq    
c0013f3f:	5b                   	pop    ebx
c0013f40:	c3                   	ret    

c0013f41 <SysRegistryEnterDirectory(regs*)>:
c0013f41:	53                   	push   ebx
c0013f42:	83 ec 10             	sub    esp,0x10
c0013f45:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013f49:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013f4c:	68 60 22 02 c0       	push   0xc0022260
c0013f51:	e8 ef 69 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013f56:	58                   	pop    eax
c0013f57:	5a                   	pop    edx
c0013f58:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013f5b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013f5e:	e8 55 eb ff ff       	call   c0012ab8 <CmEnterDirectory(Reghive_Tag*, int)>
c0013f63:	83 c4 18             	add    esp,0x18
c0013f66:	99                   	cdq    
c0013f67:	5b                   	pop    ebx
c0013f68:	c3                   	ret    

c0013f69 <SysRegistryGetNext(regs*)>:
c0013f69:	53                   	push   ebx
c0013f6a:	83 ec 10             	sub    esp,0x10
c0013f6d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013f71:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013f74:	68 7e 22 02 c0       	push   0xc002227e
c0013f79:	e8 c7 69 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013f7e:	58                   	pop    eax
c0013f7f:	5a                   	pop    edx
c0013f80:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013f83:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013f86:	e8 6c eb ff ff       	call   c0012af7 <CmGetNext(Reghive_Tag*, int)>
c0013f8b:	83 c4 18             	add    esp,0x18
c0013f8e:	99                   	cdq    
c0013f8f:	5b                   	pop    ebx
c0013f90:	c3                   	ret    

c0013f91 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0013f91:	57                   	push   edi
c0013f92:	56                   	push   esi
c0013f93:	53                   	push   ebx
c0013f94:	81 ec 34 01 00 00    	sub    esp,0x134
c0013f9a:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0013fa1:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0013fa5:	57                   	push   edi
c0013fa6:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0013fa9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013fac:	e8 04 f1 ff ff       	call   c00130b5 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013fb1:	89 c3                	mov    ebx,eax
c0013fb3:	58                   	pop    eax
c0013fb4:	5a                   	pop    edx
c0013fb5:	57                   	push   edi
c0013fb6:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0013fb9:	e8 82 c6 fe ff       	call   c0000640 <strcpy>
c0013fbe:	89 d8                	mov    eax,ebx
c0013fc0:	81 c4 40 01 00 00    	add    esp,0x140
c0013fc6:	99                   	cdq    
c0013fc7:	5b                   	pop    ebx
c0013fc8:	5e                   	pop    esi
c0013fc9:	5f                   	pop    edi
c0013fca:	c3                   	ret    

c0013fcb <SysRegistryOpen(regs*)>:
c0013fcb:	83 ec 18             	sub    esp,0x18
c0013fce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013fd2:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013fd5:	e8 f7 e8 ff ff       	call   c00128d1 <CmOpen(char const*)>
c0013fda:	83 c4 1c             	add    esp,0x1c
c0013fdd:	99                   	cdq    
c0013fde:	c3                   	ret    

c0013fdf <SysRegistryClose(regs*)>:
c0013fdf:	83 ec 18             	sub    esp,0x18
c0013fe2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013fe6:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013fe9:	e8 01 ea ff ff       	call   c00129ef <CmClose(Reghive_Tag*)>
c0013fee:	31 c0                	xor    eax,eax
c0013ff0:	31 d2                	xor    edx,edx
c0013ff2:	83 c4 1c             	add    esp,0x1c
c0013ff5:	c3                   	ret    

c0013ff6 <SysSbrk(regs*)>:
c0013ff6:	56                   	push   esi
c0013ff7:	53                   	push   ebx
c0013ff8:	50                   	push   eax
c0013ff9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013ffe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014002:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014005:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0014008:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c001400e:	85 db                	test   ebx,ebx
c0014010:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0014013:	74 02                	je     c0014017 <SysSbrk(regs*)+0x21>
c0014015:	79 06                	jns    c001401d <SysSbrk(regs*)+0x27>
c0014017:	89 f0                	mov    eax,esi
c0014019:	31 d2                	xor    edx,edx
c001401b:	eb 2a                	jmp    c0014047 <SysSbrk(regs*)+0x51>
c001401d:	83 c8 ff             	or     eax,0xffffffff
c0014020:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0014026:	89 c2                	mov    edx,eax
c0014028:	77 1d                	ja     c0014047 <SysSbrk(regs*)+0x51>
c001402a:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0014030:	50                   	push   eax
c0014031:	c1 ea 0c             	shr    edx,0xc
c0014034:	68 07 0c 00 00       	push   0xc07
c0014039:	52                   	push   edx
c001403a:	51                   	push   ecx
c001403b:	e8 e4 5d ff ff       	call   c0009e24 <VAS::allocatePages(int, int)>
c0014040:	89 f0                	mov    eax,esi
c0014042:	31 d2                	xor    edx,edx
c0014044:	83 c4 10             	add    esp,0x10
c0014047:	59                   	pop    ecx
c0014048:	5b                   	pop    ebx
c0014049:	5e                   	pop    esi
c001404a:	c3                   	ret    

c001404b <SysSetCwd(regs*)>:
c001404b:	83 ec 14             	sub    esp,0x14
c001404e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014052:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014055:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001405a:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001405d:	e8 ef 7b ff ff       	call   c000bc51 <Fs::setcwd(Process*, char*)>
c0014062:	83 c4 1c             	add    esp,0x1c
c0014065:	99                   	cdq    
c0014066:	c3                   	ret    

c0014067 <SysSetTime(regs*)>:
c0014067:	55                   	push   ebp
c0014068:	31 c9                	xor    ecx,ecx
c001406a:	57                   	push   edi
c001406b:	bd 0c 00 00 00       	mov    ebp,0xc
c0014070:	56                   	push   esi
c0014071:	53                   	push   ebx
c0014072:	31 db                	xor    ebx,ebx
c0014074:	83 ec 10             	sub    esp,0x10
c0014077:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001407b:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c001407e:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0014081:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0014084:	89 c2                	mov    edx,eax
c0014086:	81 ef 6c 07 00 00    	sub    edi,0x76c
c001408c:	83 e2 1f             	and    edx,0x1f
c001408f:	c1 e7 10             	shl    edi,0x10
c0014092:	42                   	inc    edx
c0014093:	c1 e8 05             	shr    eax,0x5
c0014096:	88 d1                	mov    cl,dl
c0014098:	31 d2                	xor    edx,edx
c001409a:	f7 f5                	div    ebp
c001409c:	89 dd                	mov    ebp,ebx
c001409e:	88 d5                	mov    ch,dl
c00140a0:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c00140a6:	0f b7 c1             	movzx  eax,cx
c00140a9:	31 d2                	xor    edx,edx
c00140ab:	09 f8                	or     eax,edi
c00140ad:	bf 3c 00 00 00       	mov    edi,0x3c
c00140b2:	89 c1                	mov    ecx,eax
c00140b4:	89 f0                	mov    eax,esi
c00140b6:	f7 f7                	div    edi
c00140b8:	c1 e2 10             	shl    edx,0x10
c00140bb:	09 d5                	or     ebp,edx
c00140bd:	31 d2                	xor    edx,edx
c00140bf:	89 eb                	mov    ebx,ebp
c00140c1:	f7 f7                	div    edi
c00140c3:	bf 10 0e 00 00       	mov    edi,0xe10
c00140c8:	88 d7                	mov    bh,dl
c00140ca:	89 f0                	mov    eax,esi
c00140cc:	31 d2                	xor    edx,edx
c00140ce:	f7 f7                	div    edi
c00140d0:	bf 18 00 00 00       	mov    edi,0x18
c00140d5:	31 d2                	xor    edx,edx
c00140d7:	f7 f7                	div    edi
c00140d9:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00140de:	88 d3                	mov    bl,dl
c00140e0:	53                   	push   ebx
c00140e1:	51                   	push   ecx
c00140e2:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00140e8:	e8 71 83 ff ff       	call   c000c45e <Clock::setTimeInDatetimeLocal(datetime_t)>
c00140ed:	83 c4 1c             	add    esp,0x1c
c00140f0:	83 f0 01             	xor    eax,0x1
c00140f3:	5b                   	pop    ebx
c00140f4:	0f b6 c0             	movzx  eax,al
c00140f7:	5e                   	pop    esi
c00140f8:	31 d2                	xor    edx,edx
c00140fa:	5f                   	pop    edi
c00140fb:	5d                   	pop    ebp
c00140fc:	c3                   	ret    

c00140fd <SysSymlink(regs*)>:
c00140fd:	53                   	push   ebx
c00140fe:	83 c8 ff             	or     eax,0xffffffff
c0014101:	83 ec 08             	sub    esp,0x8
c0014104:	89 c2                	mov    edx,eax
c0014106:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001410a:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001410d:	85 c9                	test   ecx,ecx
c001410f:	74 14                	je     c0014125 <SysSymlink(regs*)+0x28>
c0014111:	8b 5b 24             	mov    ebx,DWORD PTR [ebx+0x24]
c0014114:	85 db                	test   ebx,ebx
c0014116:	74 0d                	je     c0014125 <SysSymlink(regs*)+0x28>
c0014118:	50                   	push   eax
c0014119:	50                   	push   eax
c001411a:	53                   	push   ebx
c001411b:	51                   	push   ecx
c001411c:	e8 3f 70 ff ff       	call   c000b160 <KeCreateSymlink(char const*, char const*)>
c0014121:	83 c4 10             	add    esp,0x10
c0014124:	99                   	cdq    
c0014125:	83 c4 08             	add    esp,0x8
c0014128:	5b                   	pop    ebx
c0014129:	c3                   	ret    

c001412a <SysTimezone(regs*)>:
c001412a:	53                   	push   ebx
c001412b:	83 ec 08             	sub    esp,0x8
c001412e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014132:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0014136:	75 17                	jne    c001414f <SysTimezone(regs*)+0x25>
c0014138:	83 ec 0c             	sub    esp,0xc
c001413b:	68 95 22 02 c0       	push   0xc0022295
c0014140:	e8 00 68 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0014145:	83 c8 ff             	or     eax,0xffffffff
c0014148:	83 c4 10             	add    esp,0x10
c001414b:	89 c2                	mov    edx,eax
c001414d:	eb 20                	jmp    c001416f <SysTimezone(regs*)+0x45>
c001414f:	83 ec 0c             	sub    esp,0xc
c0014152:	68 aa 22 02 c0       	push   0xc00222aa
c0014157:	e8 e9 67 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001415c:	58                   	pop    eax
c001415d:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014160:	e8 63 80 ff ff       	call   c000c1c8 <User::loadClockSettings(int)>
c0014165:	83 c4 10             	add    esp,0x10
c0014168:	b8 01 00 00 00       	mov    eax,0x1
c001416d:	31 d2                	xor    edx,edx
c001416f:	83 c4 08             	add    esp,0x8
c0014172:	5b                   	pop    ebx
c0014173:	c3                   	ret    

c0014174 <SysTruncate(regs*)>:
c0014174:	55                   	push   ebp
c0014175:	57                   	push   edi
c0014176:	31 ff                	xor    edi,edi
c0014178:	56                   	push   esi
c0014179:	53                   	push   ebx
c001417a:	83 ec 0c             	sub    esp,0xc
c001417d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014181:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0014184:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c0014187:	89 ce                	mov    esi,ecx
c0014189:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c001418d:	0f 84 9a 00 00 00    	je     c001422d <SysTruncate(regs*)+0xb9>
c0014193:	83 ec 0c             	sub    esp,0xc
c0014196:	68 14 01 00 00       	push   0x114
c001419b:	e8 16 39 ff ff       	call   c0007ab6 <malloc>
c00141a0:	83 c4 0c             	add    esp,0xc
c00141a3:	89 c3                	mov    ebx,eax
c00141a5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00141aa:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00141ad:	55                   	push   ebp
c00141ae:	53                   	push   ebx
c00141af:	e8 1c 77 ff ff       	call   c000b8d0 <File::File(char const*, Process*)>
c00141b4:	83 c4 10             	add    esp,0x10
c00141b7:	31 d2                	xor    edx,edx
c00141b9:	b8 03 00 00 00       	mov    eax,0x3
c00141be:	85 db                	test   ebx,ebx
c00141c0:	0f 84 a2 00 00 00    	je     c0014268 <SysTruncate(regs*)+0xf4>
c00141c6:	51                   	push   ecx
c00141c7:	51                   	push   ecx
c00141c8:	6a 02                	push   0x2
c00141ca:	53                   	push   ebx
c00141cb:	e8 1e 77 ff ff       	call   c000b8ee <File::open(FileOpenMode)>
c00141d0:	83 c4 10             	add    esp,0x10
c00141d3:	85 c0                	test   eax,eax
c00141d5:	74 13                	je     c00141ea <SysTruncate(regs*)+0x76>
c00141d7:	83 ec 0c             	sub    esp,0xc
c00141da:	8b 03                	mov    eax,DWORD PTR [ebx]
c00141dc:	53                   	push   ebx
c00141dd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00141e0:	83 c4 10             	add    esp,0x10
c00141e3:	b8 04 00 00 00       	mov    eax,0x4
c00141e8:	eb 7c                	jmp    c0014266 <SysTruncate(regs*)+0xf2>
c00141ea:	52                   	push   edx
c00141eb:	57                   	push   edi
c00141ec:	56                   	push   esi
c00141ed:	53                   	push   ebx
c00141ee:	e8 0f 78 ff ff       	call   c000ba02 <File::truncate(unsigned long long)>
c00141f3:	83 c4 10             	add    esp,0x10
c00141f6:	85 c0                	test   eax,eax
c00141f8:	74 1b                	je     c0014215 <SysTruncate(regs*)+0xa1>
c00141fa:	83 ec 0c             	sub    esp,0xc
c00141fd:	53                   	push   ebx
c00141fe:	e8 49 77 ff ff       	call   c000b94c <File::close()>
c0014203:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014205:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014208:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001420b:	83 c4 10             	add    esp,0x10
c001420e:	b8 05 00 00 00       	mov    eax,0x5
c0014213:	eb 51                	jmp    c0014266 <SysTruncate(regs*)+0xf2>
c0014215:	83 ec 0c             	sub    esp,0xc
c0014218:	53                   	push   ebx
c0014219:	e8 2e 77 ff ff       	call   c000b94c <File::close()>
c001421e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014220:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014223:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014226:	83 c4 10             	add    esp,0x10
c0014229:	31 c0                	xor    eax,eax
c001422b:	eb 39                	jmp    c0014266 <SysTruncate(regs*)+0xf2>
c001422d:	31 d2                	xor    edx,edx
c001422f:	b8 01 00 00 00       	mov    eax,0x1
c0014234:	83 fd 02             	cmp    ebp,0x2
c0014237:	7e 2f                	jle    c0014268 <SysTruncate(regs*)+0xf4>
c0014239:	83 ec 0c             	sub    esp,0xc
c001423c:	51                   	push   ecx
c001423d:	e8 71 52 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0014242:	83 c4 10             	add    esp,0x10
c0014245:	89 c1                	mov    ecx,eax
c0014247:	31 d2                	xor    edx,edx
c0014249:	b8 02 00 00 00       	mov    eax,0x2
c001424e:	85 c9                	test   ecx,ecx
c0014250:	74 16                	je     c0014268 <SysTruncate(regs*)+0xf4>
c0014252:	50                   	push   eax
c0014253:	57                   	push   edi
c0014254:	56                   	push   esi
c0014255:	51                   	push   ecx
c0014256:	e8 a7 77 ff ff       	call   c000ba02 <File::truncate(unsigned long long)>
c001425b:	83 c4 10             	add    esp,0x10
c001425e:	85 c0                	test   eax,eax
c0014260:	0f 95 c0             	setne  al
c0014263:	0f b6 c0             	movzx  eax,al
c0014266:	31 d2                	xor    edx,edx
c0014268:	83 c4 0c             	add    esp,0xc
c001426b:	5b                   	pop    ebx
c001426c:	5e                   	pop    esi
c001426d:	5f                   	pop    edi
c001426e:	5d                   	pop    ebp
c001426f:	c3                   	ret    

c0014270 <SysWrite(regs*)>:
c0014270:	57                   	push   edi
c0014271:	56                   	push   esi
c0014272:	53                   	push   ebx
c0014273:	83 ec 10             	sub    esp,0x10
c0014276:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001427a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001427d:	83 f8 02             	cmp    eax,0x2
c0014280:	77 10                	ja     c0014292 <SysWrite(regs*)+0x22>
c0014282:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014287:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001428a:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0014290:	eb 0e                	jmp    c00142a0 <SysWrite(regs*)+0x30>
c0014292:	83 ec 0c             	sub    esp,0xc
c0014295:	50                   	push   eax
c0014296:	e8 18 52 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c001429b:	83 c4 10             	add    esp,0x10
c001429e:	89 c1                	mov    ecx,eax
c00142a0:	83 c8 ff             	or     eax,0xffffffff
c00142a3:	85 c9                	test   ecx,ecx
c00142a5:	89 c2                	mov    edx,eax
c00142a7:	74 28                	je     c00142d1 <SysWrite(regs*)+0x61>
c00142a9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00142b1:	31 ff                	xor    edi,edi
c00142b3:	83 ec 0c             	sub    esp,0xc
c00142b6:	8b 01                	mov    eax,DWORD PTR [ecx]
c00142b8:	8d 54 24 18          	lea    edx,[esp+0x18]
c00142bc:	52                   	push   edx
c00142bd:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00142c0:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00142c3:	57                   	push   edi
c00142c4:	56                   	push   esi
c00142c5:	51                   	push   ecx
c00142c6:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00142c9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00142cd:	83 c4 20             	add    esp,0x20
c00142d0:	99                   	cdq    
c00142d1:	83 c4 10             	add    esp,0x10
c00142d4:	5b                   	pop    ebx
c00142d5:	5e                   	pop    esi
c00142d6:	5f                   	pop    edi
c00142d7:	c3                   	ret    

c00142d8 <SysWsbe(regs*)>:
c00142d8:	57                   	push   edi
c00142d9:	b9 0b 00 00 00       	mov    ecx,0xb
c00142de:	56                   	push   esi
c00142df:	be e9 22 02 c0       	mov    esi,0xc00222e9
c00142e4:	53                   	push   ebx
c00142e5:	83 ec 30             	sub    esp,0x30
c00142e8:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00142ec:	fc                   	cld    
c00142ed:	83 ec 0c             	sub    esp,0xc
c00142f0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00142f2:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00142f6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00142fb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00142fe:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0014304:	8b 06                	mov    eax,DWORD PTR [esi]
c0014306:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0014309:	57                   	push   edi
c001430a:	e8 61 c2 fe ff       	call   c0000570 <strlen>
c001430f:	5a                   	pop    edx
c0014310:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0014314:	52                   	push   edx
c0014315:	31 d2                	xor    edx,edx
c0014317:	57                   	push   edi
c0014318:	52                   	push   edx
c0014319:	50                   	push   eax
c001431a:	56                   	push   esi
c001431b:	ff d3                	call   ebx
c001431d:	83 c4 14             	add    esp,0x14
c0014320:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0014324:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014327:	e8 b0 23 00 00       	call   c00166dc <terminateTask(int)>
c001432c:	83 c4 40             	add    esp,0x40
c001432f:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0014334:	5b                   	pop    ebx
c0014335:	31 d2                	xor    edx,edx
c0014337:	5e                   	pop    esi
c0014338:	5f                   	pop    edi
c0014339:	c3                   	ret    

c001433a <SysYield(regs*)>:
c001433a:	83 ec 0c             	sub    esp,0xc
c001433d:	fa                   	cli    
c001433e:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0014344:	e8 f3 19 00 00       	call   c0015d3c <schedule()>
c0014349:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001434e:	48                   	dec    eax
c001434f:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0014354:	75 01                	jne    c0014357 <SysYield(regs*)+0x1d>
c0014356:	fb                   	sti    
c0014357:	31 c0                	xor    eax,eax
c0014359:	31 d2                	xor    edx,edx
c001435b:	83 c4 0c             	add    esp,0xc
c001435e:	c3                   	ret    

c001435f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001435f:	55                   	push   ebp
c0014360:	57                   	push   edi
c0014361:	56                   	push   esi
c0014362:	53                   	push   ebx
c0014363:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0014369:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0014371:	0f 95 c0             	setne  al
c0014374:	31 d2                	xor    edx,edx
c0014376:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001437e:	0f 94 c2             	sete   dl
c0014381:	85 c2                	test   edx,eax
c0014383:	74 34                	je     c00143b9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0014385:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0014390:	74 27                	je     c00143b9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0014392:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0014399:	05 00 10 00 00       	add    eax,0x1000
c001439e:	89 c1                	mov    ecx,eax
c00143a0:	25 00 f0 ff ff       	and    eax,0xfffff000
c00143a5:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c00143ab:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c00143b2:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c00143b9:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c00143c0:	83 ec 0c             	sub    esp,0xc
c00143c3:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00143c9:	6a 01                	push   0x1
c00143cb:	e8 3d 52 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c00143d0:	83 c4 10             	add    esp,0x10
c00143d3:	89 c3                	mov    ebx,eax
c00143d5:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00143db:	0f 86 25 01 00 00    	jbe    c0014506 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c00143e1:	c1 ee 0c             	shr    esi,0xc
c00143e4:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00143eb:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00143ef:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00143f7:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c00143fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014402:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0014409:	29 ef                	sub    edi,ebp
c001440b:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c001440f:	0f 83 f8 00 00 00    	jae    c001450d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ae>
c0014415:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001441b:	76 05                	jbe    c0014422 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c001441d:	bf 00 10 00 00       	mov    edi,0x1000
c0014422:	83 ec 0c             	sub    esp,0xc
c0014425:	31 d2                	xor    edx,edx
c0014427:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001442e:	8b 08                	mov    ecx,DWORD PTR [eax]
c0014430:	8d 44 24 28          	lea    eax,[esp+0x28]
c0014434:	50                   	push   eax
c0014435:	8d 74 24 30          	lea    esi,[esp+0x30]
c0014439:	56                   	push   esi
c001443a:	52                   	push   edx
c001443b:	57                   	push   edi
c001443c:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0014443:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014446:	83 c4 20             	add    esp,0x20
c0014449:	85 c0                	test   eax,eax
c001444b:	75 06                	jne    c0014453 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf4>
c001444d:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0014451:	74 13                	je     c0014466 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x107>
c0014453:	83 ec 0c             	sub    esp,0xc
c0014456:	53                   	push   ebx
c0014457:	e8 cf 54 ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c001445c:	83 c4 10             	add    esp,0x10
c001445f:	31 c0                	xor    eax,eax
c0014461:	e9 7c 01 00 00       	jmp    c00145e2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c0014466:	fa                   	cli    
c0014467:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c001446d:	e8 4d 39 ff ff       	call   c0007dbf <Phys::allocatePage()>
c0014472:	6a 07                	push   0x7
c0014474:	89 c7                	mov    edi,eax
c0014476:	53                   	push   ebx
c0014477:	50                   	push   eax
c0014478:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001447d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014480:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014486:	e8 95 58 ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c001448b:	83 c4 0c             	add    esp,0xc
c001448e:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0014495:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001449b:	6a 00                	push   0x0
c001449d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00144a2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00144a5:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00144ab:	e8 d6 56 ff ff       	call   c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>
c00144b0:	58                   	pop    eax
c00144b1:	5a                   	pop    edx
c00144b2:	68 07 0c 00 00       	push   0xc07
c00144b7:	55                   	push   ebp
c00144b8:	57                   	push   edi
c00144b9:	89 df                	mov    edi,ebx
c00144bb:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00144c2:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00144c8:	6a 00                	push   0x0
c00144ca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00144cf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00144d2:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00144d8:	e8 95 5a ff ff       	call   c0009f72 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00144dd:	b9 00 10 00 00       	mov    ecx,0x1000
c00144e2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00144e4:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00144e9:	83 c4 20             	add    esp,0x20
c00144ec:	48                   	dec    eax
c00144ed:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00144f2:	85 c0                	test   eax,eax
c00144f4:	75 01                	jne    c00144f7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c00144f6:	fb                   	sti    
c00144f7:	81 c5 00 10 00 00    	add    ebp,0x1000
c00144fd:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014501:	e9 f1 fe ff ff       	jmp    c00143f7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x98>
c0014506:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c001450d:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0014514:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c001451a:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0014520:	0f 86 ae 00 00 00    	jbe    c00145d4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c0014526:	fa                   	cli    
c0014527:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c001452d:	c1 ee 0c             	shr    esi,0xc
c0014530:	51                   	push   ecx
c0014531:	31 ff                	xor    edi,edi
c0014533:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001453a:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014540:	6a 00                	push   0x0
c0014542:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014547:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001454a:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014550:	e8 31 56 ff ff       	call   c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>
c0014555:	83 c4 10             	add    esp,0x10
c0014558:	e8 62 38 ff ff       	call   c0007dbf <Phys::allocatePage()>
c001455d:	47                   	inc    edi
c001455e:	6a 07                	push   0x7
c0014560:	53                   	push   ebx
c0014561:	50                   	push   eax
c0014562:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014566:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001456c:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001456f:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0014575:	e8 a6 57 ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c001457a:	58                   	pop    eax
c001457b:	5a                   	pop    edx
c001457c:	68 07 0c 00 00       	push   0xc07
c0014581:	55                   	push   ebp
c0014582:	81 c5 00 10 00 00    	add    ebp,0x1000
c0014588:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001458c:	50                   	push   eax
c001458d:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0014594:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001459a:	6a 00                	push   0x0
c001459c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00145a1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00145a4:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00145aa:	e8 c3 59 ff ff       	call   c0009f72 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00145af:	83 c4 1c             	add    esp,0x1c
c00145b2:	68 00 10 00 00       	push   0x1000
c00145b7:	6a 00                	push   0x0
c00145b9:	53                   	push   ebx
c00145ba:	e8 31 bf fe ff       	call   c00004f0 <memset>
c00145bf:	83 c4 10             	add    esp,0x10
c00145c2:	39 fe                	cmp    esi,edi
c00145c4:	77 92                	ja     c0014558 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f9>
c00145c6:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00145cb:	48                   	dec    eax
c00145cc:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00145d1:	75 01                	jne    c00145d4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c00145d3:	fb                   	sti    
c00145d4:	83 ec 0c             	sub    esp,0xc
c00145d7:	53                   	push   ebx
c00145d8:	e8 4e 53 ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c00145dd:	83 c4 10             	add    esp,0x10
c00145e0:	b0 01                	mov    al,0x1
c00145e2:	81 c4 2c 10 00 00    	add    esp,0x102c
c00145e8:	5b                   	pop    ebx
c00145e9:	5e                   	pop    esi
c00145ea:	5f                   	pop    edi
c00145eb:	5d                   	pop    ebp
c00145ec:	c3                   	ret    

c00145ed <Thr::loadProgramIntoMemory(Process*, char const*)>:
c00145ed:	55                   	push   ebp
c00145ee:	57                   	push   edi
c00145ef:	56                   	push   esi
c00145f0:	53                   	push   ebx
c00145f1:	83 ec 48             	sub    esp,0x48
c00145f4:	68 14 01 00 00       	push   0x114
c00145f9:	e8 b8 34 ff ff       	call   c0007ab6 <malloc>
c00145fe:	83 c4 0c             	add    esp,0xc
c0014601:	89 c6                	mov    esi,eax
c0014603:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0014607:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001460b:	50                   	push   eax
c001460c:	e8 bf 72 ff ff       	call   c000b8d0 <File::File(char const*, Process*)>
c0014611:	58                   	pop    eax
c0014612:	5a                   	pop    edx
c0014613:	6a 01                	push   0x1
c0014615:	56                   	push   esi
c0014616:	e8 d3 72 ff ff       	call   c000b8ee <File::open(FileOpenMode)>
c001461b:	83 c4 10             	add    esp,0x10
c001461e:	85 c0                	test   eax,eax
c0014620:	0f 85 43 01 00 00    	jne    c0014769 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014626:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001462e:	83 ec 0c             	sub    esp,0xc
c0014631:	6a 34                	push   0x34
c0014633:	e8 7e 34 ff ff       	call   c0007ab6 <malloc>
c0014638:	89 c3                	mov    ebx,eax
c001463a:	58                   	pop    eax
c001463b:	8b 06                	mov    eax,DWORD PTR [esi]
c001463d:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0014641:	57                   	push   edi
c0014642:	53                   	push   ebx
c0014643:	6a 00                	push   0x0
c0014645:	6a 34                	push   0x34
c0014647:	56                   	push   esi
c0014648:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001464b:	83 c4 20             	add    esp,0x20
c001464e:	85 c0                	test   eax,eax
c0014650:	0f 85 13 01 00 00    	jne    c0014769 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014656:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001465c:	0f 85 07 01 00 00    	jne    c0014769 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014662:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014665:	85 c0                	test   eax,eax
c0014667:	0f 84 fc 00 00 00    	je     c0014769 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c001466d:	31 d2                	xor    edx,edx
c001466f:	55                   	push   ebp
c0014670:	52                   	push   edx
c0014671:	50                   	push   eax
c0014672:	56                   	push   esi
c0014673:	e8 34 73 ff ff       	call   c000b9ac <File::seek(unsigned long long)>
c0014678:	83 c4 10             	add    esp,0x10
c001467b:	85 c0                	test   eax,eax
c001467d:	0f 85 e6 00 00 00    	jne    c0014769 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014683:	83 ec 0c             	sub    esp,0xc
c0014686:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0014689:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001468d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014691:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0014695:	0f af c2             	imul   eax,edx
c0014698:	50                   	push   eax
c0014699:	e8 18 34 ff ff       	call   c0007ab6 <malloc>
c001469e:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00146a0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00146a4:	89 3c 24             	mov    DWORD PTR [esp],edi
c00146a7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00146ab:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00146af:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00146b3:	0f af c2             	imul   eax,edx
c00146b6:	99                   	cdq    
c00146b7:	52                   	push   edx
c00146b8:	50                   	push   eax
c00146b9:	56                   	push   esi
c00146ba:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00146bd:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00146c0:	83 c4 20             	add    esp,0x20
c00146c3:	85 c0                	test   eax,eax
c00146c5:	0f 84 9e 00 00 00    	je     c0014769 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00146cb:	31 d2                	xor    edx,edx
c00146cd:	51                   	push   ecx
c00146ce:	52                   	push   edx
c00146cf:	50                   	push   eax
c00146d0:	56                   	push   esi
c00146d1:	e8 d6 72 ff ff       	call   c000b9ac <File::seek(unsigned long long)>
c00146d6:	83 c4 10             	add    esp,0x10
c00146d9:	85 c0                	test   eax,eax
c00146db:	0f 85 88 00 00 00    	jne    c0014769 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00146e1:	83 ec 0c             	sub    esp,0xc
c00146e4:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00146e8:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00146ec:	31 ed                	xor    ebp,ebp
c00146ee:	0f af c2             	imul   eax,edx
c00146f1:	50                   	push   eax
c00146f2:	e8 bf 33 ff ff       	call   c0007ab6 <malloc>
c00146f7:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00146f9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00146fd:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014700:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014704:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0014708:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001470c:	0f af c2             	imul   eax,edx
c001470f:	99                   	cdq    
c0014710:	52                   	push   edx
c0014711:	50                   	push   eax
c0014712:	56                   	push   esi
c0014713:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014716:	83 c4 20             	add    esp,0x20
c0014719:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014721:	0f b7 fd             	movzx  edi,bp
c0014724:	66 3b 6b 2c          	cmp    bp,WORD PTR [ebx+0x2c]
c0014728:	73 7d                	jae    c00147a7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ba>
c001472a:	c1 e7 05             	shl    edi,0x5
c001472d:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0014731:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0014734:	75 6b                	jne    c00147a1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0014736:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0014739:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001473d:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0014740:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014744:	52                   	push   edx
c0014745:	31 d2                	xor    edx,edx
c0014747:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001474a:	52                   	push   edx
c001474b:	50                   	push   eax
c001474c:	56                   	push   esi
c001474d:	e8 5a 72 ff ff       	call   c000b9ac <File::seek(unsigned long long)>
c0014752:	83 c4 10             	add    esp,0x10
c0014755:	85 c0                	test   eax,eax
c0014757:	74 17                	je     c0014770 <Thr::loadProgramIntoMemory(Process*, char const*)+0x183>
c0014759:	83 ec 0c             	sub    esp,0xc
c001475c:	68 15 23 02 c0       	push   0xc0022315
c0014761:	e8 df 61 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0014766:	83 c4 10             	add    esp,0x10
c0014769:	31 c0                	xor    eax,eax
c001476b:	e9 87 00 00 00       	jmp    c00147f7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20a>
c0014770:	83 ec 0c             	sub    esp,0xc
c0014773:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014776:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0014779:	50                   	push   eax
c001477a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001477e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014782:	56                   	push   esi
c0014783:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0014787:	e8 d3 fb ff ff       	call   c001435f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001478c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014790:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0014794:	83 c4 20             	add    esp,0x20
c0014797:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001479b:	73 04                	jae    c00147a1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c001479d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00147a1:	45                   	inc    ebp
c00147a2:	e9 7a ff ff ff       	jmp    c0014721 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c00147a7:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00147ab:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00147af:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00147b3:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c00147b9:	83 ec 0c             	sub    esp,0xc
c00147bc:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c00147c2:	25 00 f0 ff ff       	and    eax,0xfffff000
c00147c7:	05 00 10 00 00       	add    eax,0x1000
c00147cc:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00147cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147d3:	e8 ee 32 ff ff       	call   c0007ac6 <free>
c00147d8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00147db:	e8 e6 32 ff ff       	call   c0007ac6 <free>
c00147e0:	58                   	pop    eax
c00147e1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00147e5:	e8 dc 32 ff ff       	call   c0007ac6 <free>
c00147ea:	89 34 24             	mov    DWORD PTR [esp],esi
c00147ed:	e8 5a 71 ff ff       	call   c000b94c <File::close()>
c00147f2:	83 c4 10             	add    esp,0x10
c00147f5:	b0 01                	mov    al,0x1
c00147f7:	83 c4 3c             	add    esp,0x3c
c00147fa:	5b                   	pop    ebx
c00147fb:	5e                   	pop    esi
c00147fc:	5f                   	pop    edi
c00147fd:	5d                   	pop    ebp
c00147fe:	c3                   	ret    

c00147ff <Thr::runtimeReferenceHelper()>:
c00147ff:	83 ec 18             	sub    esp,0x18
c0014802:	68 1d 23 02 c0       	push   0xc002231d
c0014807:	e8 39 61 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001480c:	fa                   	cli    
c001480d:	83 c4 10             	add    esp,0x10
c0014810:	eb fe                	jmp    c0014810 <Thr::runtimeReferenceHelper()+0x11>

c0014812 <Thr::getAddressOfKernelSymbol(char const*)>:
c0014812:	57                   	push   edi
c0014813:	56                   	push   esi
c0014814:	53                   	push   ebx
c0014815:	31 db                	xor    ebx,ebx
c0014817:	39 1d a0 96 02 c0    	cmp    DWORD PTR ds:0xc00296a0,ebx
c001481d:	7e 3c                	jle    c001485b <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001481f:	8b 34 9d 20 96 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd69e0]
c0014826:	31 ff                	xor    edi,edi
c0014828:	39 3c 9d 20 95 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd6ae0],edi
c001482f:	7e 27                	jle    c0014858 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0014831:	50                   	push   eax
c0014832:	50                   	push   eax
c0014833:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014837:	8b 06                	mov    eax,DWORD PTR [esi]
c0014839:	03 04 9d a0 95 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd6a60]
c0014840:	50                   	push   eax
c0014841:	e8 0a bf fe ff       	call   c0000750 <strcmp>
c0014846:	83 c4 10             	add    esp,0x10
c0014849:	85 c0                	test   eax,eax
c001484b:	75 05                	jne    c0014852 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001484d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014850:	eb 0b                	jmp    c001485d <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0014852:	83 c6 10             	add    esi,0x10
c0014855:	47                   	inc    edi
c0014856:	eb d0                	jmp    c0014828 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0014858:	43                   	inc    ebx
c0014859:	eb bc                	jmp    c0014817 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001485b:	31 c0                	xor    eax,eax
c001485d:	5b                   	pop    ebx
c001485e:	5e                   	pop    esi
c001485f:	5f                   	pop    edi
c0014860:	c3                   	ret    

c0014861 <Thr::loadKernelSymbolTable(char const*)>:
c0014861:	55                   	push   ebp
c0014862:	57                   	push   edi
c0014863:	56                   	push   esi
c0014864:	53                   	push   ebx
c0014865:	83 ec 68             	sub    esp,0x68
c0014868:	8b 35 f0 96 02 c0    	mov    esi,DWORD PTR ds:0xc00296f0
c001486e:	68 14 01 00 00       	push   0x114
c0014873:	e8 3e 32 ff ff       	call   c0007ab6 <malloc>
c0014878:	83 c4 0c             	add    esp,0xc
c001487b:	89 c3                	mov    ebx,eax
c001487d:	56                   	push   esi
c001487e:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0014882:	50                   	push   eax
c0014883:	e8 48 70 ff ff       	call   c000b8d0 <File::File(char const*, Process*)>
c0014888:	5e                   	pop    esi
c0014889:	5f                   	pop    edi
c001488a:	6a 01                	push   0x1
c001488c:	53                   	push   ebx
c001488d:	e8 5c 70 ff ff       	call   c000b8ee <File::open(FileOpenMode)>
c0014892:	83 c4 10             	add    esp,0x10
c0014895:	85 c0                	test   eax,eax
c0014897:	74 0a                	je     c00148a3 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0014899:	83 ec 0c             	sub    esp,0xc
c001489c:	68 3f 23 02 c0       	push   0xc002233f
c00148a1:	eb 34                	jmp    c00148d7 <Thr::loadKernelSymbolTable(char const*)+0x76>
c00148a3:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00148ab:	83 ec 0c             	sub    esp,0xc
c00148ae:	6a 34                	push   0x34
c00148b0:	e8 01 32 ff ff       	call   c0007ab6 <malloc>
c00148b5:	59                   	pop    ecx
c00148b6:	89 c7                	mov    edi,eax
c00148b8:	8d 74 24 34          	lea    esi,[esp+0x34]
c00148bc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00148be:	56                   	push   esi
c00148bf:	57                   	push   edi
c00148c0:	6a 00                	push   0x0
c00148c2:	6a 34                	push   0x34
c00148c4:	53                   	push   ebx
c00148c5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00148c8:	83 c4 20             	add    esp,0x20
c00148cb:	85 c0                	test   eax,eax
c00148cd:	74 17                	je     c00148e6 <Thr::loadKernelSymbolTable(char const*)+0x85>
c00148cf:	83 ec 0c             	sub    esp,0xc
c00148d2:	68 56 23 02 c0       	push   0xc0022356
c00148d7:	e8 9d ca ff ff       	call   c0011379 <KePanic(char const*)>
c00148dc:	83 c4 10             	add    esp,0x10
c00148df:	31 c0                	xor    eax,eax
c00148e1:	e9 31 02 00 00       	jmp    c0014b17 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c00148e6:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00148ec:	75 e1                	jne    c00148cf <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00148ee:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00148f1:	85 c0                	test   eax,eax
c00148f3:	74 da                	je     c00148cf <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00148f5:	52                   	push   edx
c00148f6:	31 d2                	xor    edx,edx
c00148f8:	52                   	push   edx
c00148f9:	50                   	push   eax
c00148fa:	53                   	push   ebx
c00148fb:	e8 ac 70 ff ff       	call   c000b9ac <File::seek(unsigned long long)>
c0014900:	83 c4 10             	add    esp,0x10
c0014903:	85 c0                	test   eax,eax
c0014905:	75 c8                	jne    c00148cf <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014907:	83 ec 0c             	sub    esp,0xc
c001490a:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001490e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014912:	31 ed                	xor    ebp,ebp
c0014914:	0f af c2             	imul   eax,edx
c0014917:	50                   	push   eax
c0014918:	e8 99 31 ff ff       	call   c0007ab6 <malloc>
c001491d:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001491f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014923:	89 34 24             	mov    DWORD PTR [esp],esi
c0014926:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001492a:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001492e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014932:	0f af c2             	imul   eax,edx
c0014935:	99                   	cdq    
c0014936:	52                   	push   edx
c0014937:	50                   	push   eax
c0014938:	53                   	push   ebx
c0014939:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001493c:	83 c4 20             	add    esp,0x20
c001493f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014947:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001494f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014957:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001495f:	0f b7 f5             	movzx  esi,bp
c0014962:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0014966:	0f 83 a7 00 00 00    	jae    c0014a13 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001496c:	6b f6 28             	imul   esi,esi,0x28
c001496f:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0014973:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014976:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001497a:	50                   	push   eax
c001497b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001497f:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0014983:	8b 16                	mov    edx,DWORD PTR [esi]
c0014985:	6b c0 28             	imul   eax,eax,0x28
c0014988:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001498c:	89 d0                	mov    eax,edx
c001498e:	31 d2                	xor    edx,edx
c0014990:	52                   	push   edx
c0014991:	50                   	push   eax
c0014992:	53                   	push   ebx
c0014993:	e8 14 70 ff ff       	call   c000b9ac <File::seek(unsigned long long)>
c0014998:	83 c4 0c             	add    esp,0xc
c001499b:	6a 20                	push   0x20
c001499d:	6a 00                	push   0x0
c001499f:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00149a3:	52                   	push   edx
c00149a4:	e8 47 bb fe ff       	call   c00004f0 <memset>
c00149a9:	58                   	pop    eax
c00149aa:	8b 03                	mov    eax,DWORD PTR [ebx]
c00149ac:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c00149b0:	51                   	push   ecx
c00149b1:	8d 54 24 40          	lea    edx,[esp+0x40]
c00149b5:	52                   	push   edx
c00149b6:	6a 00                	push   0x0
c00149b8:	6a 1f                	push   0x1f
c00149ba:	53                   	push   ebx
c00149bb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00149be:	83 c4 18             	add    esp,0x18
c00149c1:	68 6d 23 02 c0       	push   0xc002236d
c00149c6:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00149ca:	52                   	push   edx
c00149cb:	e8 80 bd fe ff       	call   c0000750 <strcmp>
c00149d0:	83 c4 10             	add    esp,0x10
c00149d3:	85 c0                	test   eax,eax
c00149d5:	75 0f                	jne    c00149e6 <Thr::loadKernelSymbolTable(char const*)+0x185>
c00149d7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00149da:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00149de:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00149e2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00149e6:	50                   	push   eax
c00149e7:	50                   	push   eax
c00149e8:	68 75 23 02 c0       	push   0xc0022375
c00149ed:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00149f1:	50                   	push   eax
c00149f2:	e8 59 bd fe ff       	call   c0000750 <strcmp>
c00149f7:	83 c4 10             	add    esp,0x10
c00149fa:	85 c0                	test   eax,eax
c00149fc:	75 0f                	jne    c0014a0d <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c00149fe:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014a01:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014a05:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014a09:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014a0d:	45                   	inc    ebp
c0014a0e:	e9 4c ff ff ff       	jmp    c001495f <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0014a13:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014a18:	75 10                	jne    c0014a2a <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0014a1a:	83 ec 0c             	sub    esp,0xc
c0014a1d:	68 7d 23 02 c0       	push   0xc002237d
c0014a22:	e8 52 c9 ff ff       	call   c0011379 <KePanic(char const*)>
c0014a27:	83 c4 10             	add    esp,0x10
c0014a2a:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014a2f:	75 10                	jne    c0014a41 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0014a31:	83 ec 0c             	sub    esp,0xc
c0014a34:	68 7d 23 02 c0       	push   0xc002237d
c0014a39:	e8 3b c9 ff ff       	call   c0011379 <KePanic(char const*)>
c0014a3e:	83 c4 10             	add    esp,0x10
c0014a41:	31 d2                	xor    edx,edx
c0014a43:	50                   	push   eax
c0014a44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014a48:	52                   	push   edx
c0014a49:	50                   	push   eax
c0014a4a:	53                   	push   ebx
c0014a4b:	e8 5c 6f ff ff       	call   c000b9ac <File::seek(unsigned long long)>
c0014a50:	5a                   	pop    edx
c0014a51:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014a55:	e8 5c 30 ff ff       	call   c0007ab6 <malloc>
c0014a5a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014a5e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014a62:	31 c9                	xor    ecx,ecx
c0014a64:	5e                   	pop    esi
c0014a65:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014a67:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0014a6b:	55                   	push   ebp
c0014a6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014a70:	51                   	push   ecx
c0014a71:	52                   	push   edx
c0014a72:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0014a76:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0014a7a:	53                   	push   ebx
c0014a7b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014a7e:	83 c4 14             	add    esp,0x14
c0014a81:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014a85:	e8 2c 30 ff ff       	call   c0007ab6 <malloc>
c0014a8a:	89 c6                	mov    esi,eax
c0014a8c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014a8e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014a91:	56                   	push   esi
c0014a92:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0014a96:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0014a9a:	51                   	push   ecx
c0014a9b:	52                   	push   edx
c0014a9c:	53                   	push   ebx
c0014a9d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014aa0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014aa4:	8b 15 a0 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296a0
c0014aaa:	83 c4 1c             	add    esp,0x1c
c0014aad:	c1 e8 04             	shr    eax,0x4
c0014ab0:	89 04 95 20 95 02 c0 	mov    DWORD PTR [edx*4-0x3ffd6ae0],eax
c0014ab7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014abb:	31 d2                	xor    edx,edx
c0014abd:	52                   	push   edx
c0014abe:	50                   	push   eax
c0014abf:	53                   	push   ebx
c0014ac0:	e8 e7 6e ff ff       	call   c000b9ac <File::seek(unsigned long long)>
c0014ac5:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014ac7:	31 d2                	xor    edx,edx
c0014ac9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014acc:	56                   	push   esi
c0014acd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014ad1:	52                   	push   edx
c0014ad2:	50                   	push   eax
c0014ad3:	53                   	push   ebx
c0014ad4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014ad7:	83 c4 14             	add    esp,0x14
c0014ada:	53                   	push   ebx
c0014adb:	e8 6c 6e ff ff       	call   c000b94c <File::close()>
c0014ae0:	5d                   	pop    ebp
c0014ae1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014ae5:	e8 dc 2f ff ff       	call   c0007ac6 <free>
c0014aea:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014aed:	e8 d4 2f ff ff       	call   c0007ac6 <free>
c0014af2:	a1 a0 96 02 c0       	mov    eax,ds:0xc00296a0
c0014af7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014afb:	8d 50 01             	lea    edx,[eax+0x1]
c0014afe:	89 0c 85 20 96 02 c0 	mov    DWORD PTR [eax*4-0x3ffd69e0],ecx
c0014b05:	89 34 85 a0 95 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6a60],esi
c0014b0c:	89 15 a0 96 02 c0    	mov    DWORD PTR ds:0xc00296a0,edx
c0014b12:	83 c4 10             	add    esp,0x10
c0014b15:	b0 01                	mov    al,0x1
c0014b17:	83 c4 5c             	add    esp,0x5c
c0014b1a:	5b                   	pop    ebx
c0014b1b:	5e                   	pop    esi
c0014b1c:	5f                   	pop    edi
c0014b1d:	5d                   	pop    ebp
c0014b1e:	c3                   	ret    

c0014b1f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0014b1f:	55                   	push   ebp
c0014b20:	57                   	push   edi
c0014b21:	56                   	push   esi
c0014b22:	53                   	push   ebx
c0014b23:	81 ec 68 03 00 00    	sub    esp,0x368
c0014b29:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0014b30:	8b 1d f0 96 02 c0    	mov    ebx,DWORD PTR ds:0xc00296f0
c0014b36:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0014b3a:	68 14 01 00 00       	push   0x114
c0014b3f:	e8 72 2f ff ff       	call   c0007ab6 <malloc>
c0014b44:	83 c4 0c             	add    esp,0xc
c0014b47:	89 c5                	mov    ebp,eax
c0014b49:	53                   	push   ebx
c0014b4a:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0014b51:	50                   	push   eax
c0014b52:	e8 79 6d ff ff       	call   c000b8d0 <File::File(char const*, Process*)>
c0014b57:	5e                   	pop    esi
c0014b58:	5f                   	pop    edi
c0014b59:	6a 01                	push   0x1
c0014b5b:	55                   	push   ebp
c0014b5c:	e8 8d 6d ff ff       	call   c000b8ee <File::open(FileOpenMode)>
c0014b61:	83 c4 10             	add    esp,0x10
c0014b64:	85 c0                	test   eax,eax
c0014b66:	0f 85 aa 06 00 00    	jne    c0015216 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014b6c:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0014b74:	83 ec 0c             	sub    esp,0xc
c0014b77:	6a 34                	push   0x34
c0014b79:	e8 38 2f ff ff       	call   c0007ab6 <malloc>
c0014b7e:	5b                   	pop    ebx
c0014b7f:	89 c7                	mov    edi,eax
c0014b81:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0014b85:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014b88:	53                   	push   ebx
c0014b89:	57                   	push   edi
c0014b8a:	6a 00                	push   0x0
c0014b8c:	6a 34                	push   0x34
c0014b8e:	55                   	push   ebp
c0014b8f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014b92:	83 c4 20             	add    esp,0x20
c0014b95:	85 c0                	test   eax,eax
c0014b97:	0f 85 79 06 00 00    	jne    c0015216 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014b9d:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0014ba3:	0f 85 6d 06 00 00    	jne    c0015216 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014ba9:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0014bac:	85 c0                	test   eax,eax
c0014bae:	0f 84 62 06 00 00    	je     c0015216 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014bb4:	31 d2                	xor    edx,edx
c0014bb6:	51                   	push   ecx
c0014bb7:	52                   	push   edx
c0014bb8:	50                   	push   eax
c0014bb9:	55                   	push   ebp
c0014bba:	e8 ed 6d ff ff       	call   c000b9ac <File::seek(unsigned long long)>
c0014bbf:	83 c4 10             	add    esp,0x10
c0014bc2:	85 c0                	test   eax,eax
c0014bc4:	0f 85 4c 06 00 00    	jne    c0015216 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014bca:	83 ec 0c             	sub    esp,0xc
c0014bcd:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0014bd0:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014bd4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0014bd8:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014bdc:	0f af c2             	imul   eax,edx
c0014bdf:	50                   	push   eax
c0014be0:	e8 d1 2e ff ff       	call   c0007ab6 <malloc>
c0014be5:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014be8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014bec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014bef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014bf3:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014bf7:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014bfb:	0f af c2             	imul   eax,edx
c0014bfe:	99                   	cdq    
c0014bff:	52                   	push   edx
c0014c00:	50                   	push   eax
c0014c01:	55                   	push   ebp
c0014c02:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014c05:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0014c08:	83 c4 20             	add    esp,0x20
c0014c0b:	85 c0                	test   eax,eax
c0014c0d:	0f 84 03 06 00 00    	je     c0015216 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014c13:	52                   	push   edx
c0014c14:	31 d2                	xor    edx,edx
c0014c16:	52                   	push   edx
c0014c17:	50                   	push   eax
c0014c18:	55                   	push   ebp
c0014c19:	e8 8e 6d ff ff       	call   c000b9ac <File::seek(unsigned long long)>
c0014c1e:	83 c4 10             	add    esp,0x10
c0014c21:	85 c0                	test   eax,eax
c0014c23:	0f 85 ed 05 00 00    	jne    c0015216 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014c29:	83 ec 0c             	sub    esp,0xc
c0014c2c:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0014c30:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0014c34:	31 f6                	xor    esi,esi
c0014c36:	0f af c2             	imul   eax,edx
c0014c39:	50                   	push   eax
c0014c3a:	e8 77 2e ff ff       	call   c0007ab6 <malloc>
c0014c3f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014c42:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014c46:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014c49:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014c4d:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0014c51:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0014c55:	0f af c2             	imul   eax,edx
c0014c58:	99                   	cdq    
c0014c59:	52                   	push   edx
c0014c5a:	50                   	push   eax
c0014c5b:	55                   	push   ebp
c0014c5c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014c5f:	83 c4 20             	add    esp,0x20
c0014c62:	0f b7 de             	movzx  ebx,si
c0014c65:	66 3b 77 2c          	cmp    si,WORD PTR [edi+0x2c]
c0014c69:	0f 83 87 00 00 00    	jae    c0014cf6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0014c6f:	c1 e3 05             	shl    ebx,0x5
c0014c72:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0014c76:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0014c79:	75 75                	jne    c0014cf0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0014c7b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0014c7e:	31 d2                	xor    edx,edx
c0014c80:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014c84:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014c87:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014c8b:	50                   	push   eax
c0014c8c:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0014c8f:	52                   	push   edx
c0014c90:	50                   	push   eax
c0014c91:	55                   	push   ebp
c0014c92:	e8 15 6d ff ff       	call   c000b9ac <File::seek(unsigned long long)>
c0014c97:	83 c4 10             	add    esp,0x10
c0014c9a:	85 c0                	test   eax,eax
c0014c9c:	0f 85 74 05 00 00    	jne    c0015216 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014ca2:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0014ca9:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014cac:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0014cb0:	31 d2                	xor    edx,edx
c0014cb2:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014cb6:	83 ec 0c             	sub    esp,0xc
c0014cb9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014cbd:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014cc4:	50                   	push   eax
c0014cc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014cc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ccd:	52                   	push   edx
c0014cce:	50                   	push   eax
c0014ccf:	55                   	push   ebp
c0014cd0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014cd3:	83 c4 1c             	add    esp,0x1c
c0014cd6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014cd9:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0014cdc:	50                   	push   eax
c0014cdd:	6a 00                	push   0x0
c0014cdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014ce3:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0014ce7:	50                   	push   eax
c0014ce8:	e8 03 b8 fe ff       	call   c00004f0 <memset>
c0014ced:	83 c4 10             	add    esp,0x10
c0014cf0:	46                   	inc    esi
c0014cf1:	e9 6c ff ff ff       	jmp    c0014c62 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0014cf6:	53                   	push   ebx
c0014cf7:	31 db                	xor    ebx,ebx
c0014cf9:	68 00 01 00 00       	push   0x100
c0014cfe:	6a 00                	push   0x0
c0014d00:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0014d04:	50                   	push   eax
c0014d05:	e8 e6 b7 fe ff       	call   c00004f0 <memset>
c0014d0a:	83 c4 0c             	add    esp,0xc
c0014d0d:	68 00 01 00 00       	push   0x100
c0014d12:	6a 00                	push   0x0
c0014d14:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0014d1b:	50                   	push   eax
c0014d1c:	e8 cf b7 fe ff       	call   c00004f0 <memset>
c0014d21:	83 c4 10             	add    esp,0x10
c0014d24:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014d2c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014d34:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0014d3c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014d44:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0014d4c:	0f b7 f3             	movzx  esi,bx
c0014d4f:	66 3b 5f 30          	cmp    bx,WORD PTR [edi+0x30]
c0014d53:	0f 83 2d 01 00 00    	jae    c0014e86 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0014d59:	6b f6 28             	imul   esi,esi,0x28
c0014d5c:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0014d60:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014d63:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014d67:	52                   	push   edx
c0014d68:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014d6c:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0014d70:	8b 06                	mov    eax,DWORD PTR [esi]
c0014d72:	6b d2 28             	imul   edx,edx,0x28
c0014d75:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0014d79:	31 d2                	xor    edx,edx
c0014d7b:	52                   	push   edx
c0014d7c:	50                   	push   eax
c0014d7d:	55                   	push   ebp
c0014d7e:	e8 29 6c ff ff       	call   c000b9ac <File::seek(unsigned long long)>
c0014d83:	83 c4 0c             	add    esp,0xc
c0014d86:	6a 20                	push   0x20
c0014d88:	6a 00                	push   0x0
c0014d8a:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014d91:	51                   	push   ecx
c0014d92:	e8 59 b7 fe ff       	call   c00004f0 <memset>
c0014d97:	59                   	pop    ecx
c0014d98:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014d9b:	8d 54 24 58          	lea    edx,[esp+0x58]
c0014d9f:	52                   	push   edx
c0014da0:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0014da7:	51                   	push   ecx
c0014da8:	6a 00                	push   0x0
c0014daa:	6a 1f                	push   0x1f
c0014dac:	55                   	push   ebp
c0014dad:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014db0:	83 c4 1c             	add    esp,0x1c
c0014db3:	6a 09                	push   0x9
c0014db5:	68 97 23 02 c0       	push   0xc0022397
c0014dba:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014dc1:	51                   	push   ecx
c0014dc2:	e8 b9 b5 fe ff       	call   c0000380 <memcmp>
c0014dc7:	83 c4 10             	add    esp,0x10
c0014dca:	85 c0                	test   eax,eax
c0014dcc:	75 21                	jne    c0014def <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0014dce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014dd2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014dd6:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0014dda:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014dde:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014de1:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0014de8:	89 d0                	mov    eax,edx
c0014dea:	40                   	inc    eax
c0014deb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014def:	50                   	push   eax
c0014df0:	6a 09                	push   0x9
c0014df2:	68 a1 23 02 c0       	push   0xc00223a1
c0014df7:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014dfe:	50                   	push   eax
c0014dff:	e8 7c b5 fe ff       	call   c0000380 <memcmp>
c0014e04:	83 c4 10             	add    esp,0x10
c0014e07:	85 c0                	test   eax,eax
c0014e09:	75 21                	jne    c0014e2c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0014e0b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014e0f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014e13:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014e17:	89 4c 84 50          	mov    DWORD PTR [esp+eax*4+0x50],ecx
c0014e1b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014e1e:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0014e25:	89 d0                	mov    eax,edx
c0014e27:	40                   	inc    eax
c0014e28:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014e2c:	50                   	push   eax
c0014e2d:	50                   	push   eax
c0014e2e:	68 6d 23 02 c0       	push   0xc002236d
c0014e33:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014e3a:	50                   	push   eax
c0014e3b:	e8 10 b9 fe ff       	call   c0000750 <strcmp>
c0014e40:	83 c4 10             	add    esp,0x10
c0014e43:	85 c0                	test   eax,eax
c0014e45:	75 0f                	jne    c0014e56 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0014e47:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014e4a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014e4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014e52:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014e56:	50                   	push   eax
c0014e57:	50                   	push   eax
c0014e58:	68 75 23 02 c0       	push   0xc0022375
c0014e5d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014e64:	50                   	push   eax
c0014e65:	e8 e6 b8 fe ff       	call   c0000750 <strcmp>
c0014e6a:	83 c4 10             	add    esp,0x10
c0014e6d:	85 c0                	test   eax,eax
c0014e6f:	75 0f                	jne    c0014e80 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0014e71:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014e74:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014e78:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014e7c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014e80:	43                   	inc    ebx
c0014e81:	e9 c6 fe ff ff       	jmp    c0014d4c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0014e86:	31 d2                	xor    edx,edx
c0014e88:	50                   	push   eax
c0014e89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e8d:	52                   	push   edx
c0014e8e:	50                   	push   eax
c0014e8f:	55                   	push   ebp
c0014e90:	e8 17 6b ff ff       	call   c000b9ac <File::seek(unsigned long long)>
c0014e95:	58                   	pop    eax
c0014e96:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014e9a:	e8 17 2c ff ff       	call   c0007ab6 <malloc>
c0014e9f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014ea2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0014ea6:	31 d2                	xor    edx,edx
c0014ea8:	58                   	pop    eax
c0014ea9:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0014ead:	53                   	push   ebx
c0014eae:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0014eb2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014eb6:	52                   	push   edx
c0014eb7:	50                   	push   eax
c0014eb8:	55                   	push   ebp
c0014eb9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014ebc:	83 c4 14             	add    esp,0x14
c0014ebf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014ec3:	e8 ee 2b ff ff       	call   c0007ab6 <malloc>
c0014ec8:	31 d2                	xor    edx,edx
c0014eca:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014ece:	83 c4 0c             	add    esp,0xc
c0014ed1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014ed5:	52                   	push   edx
c0014ed6:	50                   	push   eax
c0014ed7:	55                   	push   ebp
c0014ed8:	e8 cf 6a ff ff       	call   c000b9ac <File::seek(unsigned long long)>
c0014edd:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014ee0:	31 d2                	xor    edx,edx
c0014ee2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014ee5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014ee9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014eed:	52                   	push   edx
c0014eee:	50                   	push   eax
c0014eef:	55                   	push   ebp
c0014ef0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014ef3:	83 c4 20             	add    esp,0x20
c0014ef6:	0f b6 44 24 3b       	movzx  eax,BYTE PTR [esp+0x3b]
c0014efb:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014f03:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0014f07:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014f0b:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0014f0f:	0f 84 05 03 00 00    	je     c001521a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6fb>
c0014f15:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0014f1c:	31 d2                	xor    edx,edx
c0014f1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014f22:	c1 e8 03             	shr    eax,0x3
c0014f25:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0014f29:	51                   	push   ecx
c0014f2a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014f2e:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0014f32:	52                   	push   edx
c0014f33:	50                   	push   eax
c0014f34:	55                   	push   ebp
c0014f35:	e8 72 6a ff ff       	call   c000b9ac <File::seek(unsigned long long)>
c0014f3a:	5b                   	pop    ebx
c0014f3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f3f:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0014f46:	e8 6b 2b ff ff       	call   c0007ab6 <malloc>
c0014f4b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014f4e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014f52:	31 d2                	xor    edx,edx
c0014f54:	5e                   	pop    esi
c0014f55:	8d 44 24 58          	lea    eax,[esp+0x58]
c0014f59:	50                   	push   eax
c0014f5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014f5e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014f62:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0014f69:	52                   	push   edx
c0014f6a:	50                   	push   eax
c0014f6b:	55                   	push   ebp
c0014f6c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014f6f:	83 c4 20             	add    esp,0x20
c0014f72:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0014f7a:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0014f7e:	39 5c 24 20          	cmp    DWORD PTR [esp+0x20],ebx
c0014f82:	0f 8d 76 02 00 00    	jge    c00151fe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6df>
c0014f88:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0014f8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014f90:	c6 44 24 3a 00       	mov    BYTE PTR [esp+0x3a],0x0
c0014f95:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0014f98:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014f9c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014fa0:	8b 44 c8 04          	mov    eax,DWORD PTR [eax+ecx*8+0x4]
c0014fa4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014fa8:	c1 e8 08             	shr    eax,0x8
c0014fab:	89 c6                	mov    esi,eax
c0014fad:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014fb1:	c1 e6 04             	shl    esi,0x4
c0014fb4:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0014fb8:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0014fbb:	85 db                	test   ebx,ebx
c0014fbd:	0f 85 b3 00 00 00    	jne    c0015076 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0014fc3:	83 ec 0c             	sub    esp,0xc
c0014fc6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014fca:	03 06                	add    eax,DWORD PTR [esi]
c0014fcc:	50                   	push   eax
c0014fcd:	e8 40 f8 ff ff       	call   c0014812 <Thr::getAddressOfKernelSymbol(char const*)>
c0014fd2:	83 c4 10             	add    esp,0x10
c0014fd5:	89 c3                	mov    ebx,eax
c0014fd7:	c6 44 24 3a 01       	mov    BYTE PTR [esp+0x3a],0x1
c0014fdc:	85 c0                	test   eax,eax
c0014fde:	0f 85 92 00 00 00    	jne    c0015076 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0014fe4:	83 ec 0c             	sub    esp,0xc
c0014fe7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014feb:	03 06                	add    eax,DWORD PTR [esi]
c0014fed:	50                   	push   eax
c0014fee:	e8 71 c5 ff ff       	call   c0011564 <KeResolveCompatibilitySymbol(char*)>
c0014ff3:	83 c4 10             	add    esp,0x10
c0014ff6:	89 c3                	mov    ebx,eax
c0014ff8:	85 c0                	test   eax,eax
c0014ffa:	75 7a                	jne    c0015076 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0014ffc:	51                   	push   ecx
c0014ffd:	51                   	push   ecx
c0014ffe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015002:	03 06                	add    eax,DWORD PTR [esi]
c0015004:	50                   	push   eax
c0015005:	68 ab 23 02 c0       	push   0xc00223ab
c001500a:	e8 36 59 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001500f:	58                   	pop    eax
c0015010:	5a                   	pop    edx
c0015011:	68 c5 23 02 c0       	push   0xc00223c5
c0015016:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001501d:	50                   	push   eax
c001501e:	e8 1d b6 fe ff       	call   c0000640 <strcpy>
c0015023:	59                   	pop    ecx
c0015024:	58                   	pop    eax
c0015025:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015029:	03 06                	add    eax,DWORD PTR [esi]
c001502b:	50                   	push   eax
c001502c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015033:	50                   	push   eax
c0015034:	e8 07 b8 fe ff       	call   c0000840 <strcat>
c0015039:	58                   	pop    eax
c001503a:	5a                   	pop    edx
c001503b:	68 5b 24 02 c0       	push   0xc002245b
c0015040:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015047:	50                   	push   eax
c0015048:	e8 f3 b7 fe ff       	call   c0000840 <strcat>
c001504d:	83 c4 10             	add    esp,0x10
c0015050:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0015055:	0f 84 5d 01 00 00    	je     c00151b8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c001505b:	83 ec 0c             	sub    esp,0xc
c001505e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015065:	50                   	push   eax
c0015066:	e8 0e c3 ff ff       	call   c0011379 <KePanic(char const*)>
c001506b:	83 c4 10             	add    esp,0x10
c001506e:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0015072:	88 44 24 3a          	mov    BYTE PTR [esp+0x3a],al
c0015076:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c001507b:	83 f8 01             	cmp    eax,0x1
c001507e:	0f 85 8f 00 00 00    	jne    c0015113 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f4>
c0015084:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001508b:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001508f:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c0015093:	01 ce                	add    esi,ecx
c0015095:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001509d:	0f 94 c0             	sete   al
c00150a0:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c00150a8:	0f 94 c2             	sete   dl
c00150ab:	09 c2                	or     edx,eax
c00150ad:	8b 06                	mov    eax,DWORD PTR [esi]
c00150af:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c00150b4:	0f b6 d2             	movzx  edx,dl
c00150b7:	74 41                	je     c00150fa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5db>
c00150b9:	8d 0c 03             	lea    ecx,[ebx+eax*1]
c00150bc:	85 d2                	test   edx,edx
c00150be:	75 15                	jne    c00150d5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b6>
c00150c0:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00150c4:	66 83 f8 0c          	cmp    ax,0xc
c00150c8:	76 05                	jbe    c00150cf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b0>
c00150ca:	b8 0c 00 00 00       	mov    eax,0xc
c00150cf:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00150d3:	76 37                	jbe    c001510c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c00150d5:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00150d9:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00150de:	0f 84 d4 00 00 00    	je     c00151b8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c00150e4:	83 ec 0c             	sub    esp,0xc
c00150e7:	68 dc 23 02 c0       	push   0xc00223dc
c00150ec:	e8 88 c2 ff ff       	call   c0011379 <KePanic(char const*)>
c00150f1:	83 c4 10             	add    esp,0x10
c00150f4:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00150f8:	eb 12                	jmp    c001510c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c00150fa:	01 c1                	add    ecx,eax
c00150fc:	85 d2                	test   edx,edx
c00150fe:	75 0c                	jne    c001510c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0015100:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015104:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0015108:	77 02                	ja     c001510c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c001510a:	01 d9                	add    ecx,ebx
c001510c:	89 0e                	mov    DWORD PTR [esi],ecx
c001510e:	e9 e2 00 00 00       	jmp    c00151f5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0015113:	83 f8 02             	cmp    eax,0x2
c0015116:	75 77                	jne    c001518f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x670>
c0015118:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001511f:	2b 74 24 24          	sub    esi,DWORD PTR [esp+0x24]
c0015123:	03 74 24 28          	add    esi,DWORD PTR [esp+0x28]
c0015127:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001512f:	74 21                	je     c0015152 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c0015131:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0015139:	74 17                	je     c0015152 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c001513b:	0f b7 57 30          	movzx  edx,WORD PTR [edi+0x30]
c001513f:	b8 0a 00 00 00       	mov    eax,0xa
c0015144:	83 fa 0e             	cmp    edx,0xe
c0015147:	77 03                	ja     c001514c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62d>
c0015149:	8d 42 fc             	lea    eax,[edx-0x4]
c001514c:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0015150:	76 17                	jbe    c0015169 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c0015152:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0015157:	74 5f                	je     c00151b8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0015159:	83 ec 0c             	sub    esp,0xc
c001515c:	68 f8 23 02 c0       	push   0xc00223f8
c0015161:	e8 13 c2 ff ff       	call   c0011379 <KePanic(char const*)>
c0015166:	83 c4 10             	add    esp,0x10
c0015169:	8b 06                	mov    eax,DWORD PTR [esi]
c001516b:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c0015170:	74 13                	je     c0015185 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x666>
c0015172:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015176:	2b 94 24 74 03 00 00 	sub    edx,DWORD PTR [esp+0x374]
c001517d:	2b 54 24 28          	sub    edx,DWORD PTR [esp+0x28]
c0015181:	01 d0                	add    eax,edx
c0015183:	eb 04                	jmp    c0015189 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0015185:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0015189:	01 c3                	add    ebx,eax
c001518b:	89 1e                	mov    DWORD PTR [esi],ebx
c001518d:	eb 66                	jmp    c00151f5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c001518f:	52                   	push   edx
c0015190:	52                   	push   edx
c0015191:	50                   	push   eax
c0015192:	68 14 24 02 c0       	push   0xc0022414
c0015197:	e8 a9 57 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001519c:	83 c4 10             	add    esp,0x10
c001519f:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00151a4:	74 12                	je     c00151b8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c00151a6:	83 ec 0c             	sub    esp,0xc
c00151a9:	68 1f 24 02 c0       	push   0xc002241f
c00151ae:	e8 c6 c1 ff ff       	call   c0011379 <KePanic(char const*)>
c00151b3:	83 c4 10             	add    esp,0x10
c00151b6:	eb 3d                	jmp    c00151f5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c00151b8:	83 ec 0c             	sub    esp,0xc
c00151bb:	55                   	push   ebp
c00151bc:	e8 8b 67 ff ff       	call   c000b94c <File::close()>
c00151c1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00151c4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00151c7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00151ca:	59                   	pop    ecx
c00151cb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00151cf:	e8 f2 28 ff ff       	call   c0007ac6 <free>
c00151d4:	5b                   	pop    ebx
c00151d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00151d9:	e8 e8 28 ff ff       	call   c0007ac6 <free>
c00151de:	89 3c 24             	mov    DWORD PTR [esp],edi
c00151e1:	e8 e0 28 ff ff       	call   c0007ac6 <free>
c00151e6:	5e                   	pop    esi
c00151e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00151eb:	e8 d6 28 ff ff       	call   c0007ac6 <free>
c00151f0:	83 c4 10             	add    esp,0x10
c00151f3:	eb 21                	jmp    c0015216 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00151f5:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00151f9:	e9 7c fd ff ff       	jmp    c0014f7a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x45b>
c00151fe:	83 ec 0c             	sub    esp,0xc
c0015201:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015205:	e8 bc 28 ff ff       	call   c0007ac6 <free>
c001520a:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001520e:	83 c4 10             	add    esp,0x10
c0015211:	e9 f1 fc ff ff       	jmp    c0014f07 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3e8>
c0015216:	31 c0                	xor    eax,eax
c0015218:	eb 33                	jmp    c001524d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72e>
c001521a:	83 ec 0c             	sub    esp,0xc
c001521d:	55                   	push   ebp
c001521e:	e8 29 67 ff ff       	call   c000b94c <File::close()>
c0015223:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015226:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015229:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001522c:	58                   	pop    eax
c001522d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015231:	e8 90 28 ff ff       	call   c0007ac6 <free>
c0015236:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015239:	e8 88 28 ff ff       	call   c0007ac6 <free>
c001523e:	5a                   	pop    edx
c001523f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015243:	e8 7e 28 ff ff       	call   c0007ac6 <free>
c0015248:	83 c4 10             	add    esp,0x10
c001524b:	b0 01                	mov    al,0x1
c001524d:	81 c4 5c 03 00 00    	add    esp,0x35c
c0015253:	5b                   	pop    ebx
c0015254:	5e                   	pop    esi
c0015255:	5f                   	pop    edi
c0015256:	5d                   	pop    ebp
c0015257:	c3                   	ret    

c0015258 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0015258:	56                   	push   esi
c0015259:	31 d2                	xor    edx,edx
c001525b:	53                   	push   ebx
c001525c:	8b 1d 00 8f 02 c0    	mov    ebx,DWORD PTR ds:0xc0028f00
c0015262:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015266:	39 d3                	cmp    ebx,edx
c0015268:	7e 1b                	jle    c0015285 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001526a:	8b 04 95 20 91 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6ee0]
c0015271:	39 c8                	cmp    eax,ecx
c0015273:	77 0d                	ja     c0015282 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0015275:	8b 34 95 20 8f 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd70e0]
c001527c:	01 c6                	add    esi,eax
c001527e:	39 ce                	cmp    esi,ecx
c0015280:	77 05                	ja     c0015287 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0015282:	42                   	inc    edx
c0015283:	eb e1                	jmp    c0015266 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0015285:	31 c0                	xor    eax,eax
c0015287:	5b                   	pop    ebx
c0015288:	5e                   	pop    esi
c0015289:	c3                   	ret    

c001528a <Thr::getDriverNameFromAddress(unsigned long)>:
c001528a:	53                   	push   ebx
c001528b:	31 c0                	xor    eax,eax
c001528d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015291:	8b 1d 00 8f 02 c0    	mov    ebx,DWORD PTR ds:0xc0028f00
c0015297:	39 c3                	cmp    ebx,eax
c0015299:	7e 22                	jle    c00152bd <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001529b:	8b 14 85 20 91 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6ee0]
c00152a2:	39 ca                	cmp    edx,ecx
c00152a4:	77 14                	ja     c00152ba <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00152a6:	03 14 85 20 8f 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd70e0]
c00152ad:	39 ca                	cmp    edx,ecx
c00152af:	76 09                	jbe    c00152ba <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00152b1:	8b 04 85 20 93 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6ce0]
c00152b8:	eb 05                	jmp    c00152bf <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c00152ba:	40                   	inc    eax
c00152bb:	eb da                	jmp    c0015297 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c00152bd:	31 c0                	xor    eax,eax
c00152bf:	5b                   	pop    ebx
c00152c0:	c3                   	ret    

c00152c1 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c00152c1:	53                   	push   ebx
c00152c2:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00152c6:	53                   	push   ebx
c00152c7:	e8 8c ff ff ff       	call   c0015258 <Thr::getDriverBaseFromAddress(unsigned long)>
c00152cc:	5a                   	pop    edx
c00152cd:	31 d2                	xor    edx,edx
c00152cf:	85 c0                	test   eax,eax
c00152d1:	74 04                	je     c00152d7 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c00152d3:	89 da                	mov    edx,ebx
c00152d5:	29 c2                	sub    edx,eax
c00152d7:	89 d0                	mov    eax,edx
c00152d9:	5b                   	pop    ebx
c00152da:	c3                   	ret    

c00152db <Thr::loadDLL(char const*, bool)>:
c00152db:	55                   	push   ebp
c00152dc:	57                   	push   edi
c00152dd:	56                   	push   esi
c00152de:	53                   	push   ebx
c00152df:	81 ec 34 01 00 00    	sub    esp,0x134
c00152e5:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00152ec:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00152f3:	56                   	push   esi
c00152f4:	68 37 24 02 c0       	push   0xc0022437
c00152f9:	e8 47 56 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00152fe:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015305:	e8 ac 27 ff ff       	call   c0007ab6 <malloc>
c001530a:	83 c4 0c             	add    esp,0xc
c001530d:	89 c3                	mov    ebx,eax
c001530f:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0015315:	56                   	push   esi
c0015316:	50                   	push   eax
c0015317:	e8 b4 65 ff ff       	call   c000b8d0 <File::File(char const*, Process*)>
c001531c:	83 c4 10             	add    esp,0x10
c001531f:	85 db                	test   ebx,ebx
c0015321:	75 3c                	jne    c001535f <Thr::loadDLL(char const*, bool)+0x84>
c0015323:	89 f8                	mov    eax,edi
c0015325:	84 c0                	test   al,al
c0015327:	0f 84 d2 01 00 00    	je     c00154ff <Thr::loadDLL(char const*, bool)+0x224>
c001532d:	55                   	push   ebp
c001532e:	55                   	push   ebp
c001532f:	68 48 24 02 c0       	push   0xc0022448
c0015334:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0015338:	55                   	push   ebp
c0015339:	e8 02 b3 fe ff       	call   c0000640 <strcpy>
c001533e:	58                   	pop    eax
c001533f:	5a                   	pop    edx
c0015340:	56                   	push   esi
c0015341:	55                   	push   ebp
c0015342:	e8 f9 b4 fe ff       	call   c0000840 <strcat>
c0015347:	59                   	pop    ecx
c0015348:	58                   	pop    eax
c0015349:	68 5b 24 02 c0       	push   0xc002245b
c001534e:	55                   	push   ebp
c001534f:	e8 ec b4 fe ff       	call   c0000840 <strcat>
c0015354:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015357:	e8 1d c0 ff ff       	call   c0011379 <KePanic(char const*)>
c001535c:	83 c4 10             	add    esp,0x10
c001535f:	51                   	push   ecx
c0015360:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0015364:	50                   	push   eax
c0015365:	8d 44 24 20          	lea    eax,[esp+0x20]
c0015369:	50                   	push   eax
c001536a:	53                   	push   ebx
c001536b:	e8 80 68 ff ff       	call   c000bbf0 <File::stat(unsigned long long*, bool*)>
c0015370:	83 c4 10             	add    esp,0x10
c0015373:	85 db                	test   ebx,ebx
c0015375:	74 0c                	je     c0015383 <Thr::loadDLL(char const*, bool)+0xa8>
c0015377:	83 ec 0c             	sub    esp,0xc
c001537a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001537c:	53                   	push   ebx
c001537d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015380:	83 c4 10             	add    esp,0x10
c0015383:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0015388:	75 0a                	jne    c0015394 <Thr::loadDLL(char const*, bool)+0xb9>
c001538a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001538e:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0015392:	75 3c                	jne    c00153d0 <Thr::loadDLL(char const*, bool)+0xf5>
c0015394:	89 f8                	mov    eax,edi
c0015396:	84 c0                	test   al,al
c0015398:	0f 84 49 01 00 00    	je     c00154e7 <Thr::loadDLL(char const*, bool)+0x20c>
c001539e:	51                   	push   ecx
c001539f:	51                   	push   ecx
c00153a0:	68 48 24 02 c0       	push   0xc0022448
c00153a5:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00153a9:	53                   	push   ebx
c00153aa:	e8 91 b2 fe ff       	call   c0000640 <strcpy>
c00153af:	5d                   	pop    ebp
c00153b0:	58                   	pop    eax
c00153b1:	56                   	push   esi
c00153b2:	53                   	push   ebx
c00153b3:	e8 88 b4 fe ff       	call   c0000840 <strcat>
c00153b8:	58                   	pop    eax
c00153b9:	5a                   	pop    edx
c00153ba:	68 5b 24 02 c0       	push   0xc002245b
c00153bf:	53                   	push   ebx
c00153c0:	e8 7b b4 fe ff       	call   c0000840 <strcat>
c00153c5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00153c8:	e8 ac bf ff ff       	call   c0011379 <KePanic(char const*)>
c00153cd:	83 c4 10             	add    esp,0x10
c00153d0:	52                   	push   edx
c00153d1:	6a 03                	push   0x3
c00153d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00153d7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00153db:	05 ff 0f 00 00       	add    eax,0xfff
c00153e0:	83 d2 00             	adc    edx,0x0
c00153e3:	0f ac d0 0c          	shrd   eax,edx,0xc
c00153e7:	50                   	push   eax
c00153e8:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c00153ee:	e8 31 4a ff ff       	call   c0009e24 <VAS::allocatePages(int, int)>
c00153f3:	59                   	pop    ecx
c00153f4:	89 c3                	mov    ebx,eax
c00153f6:	5d                   	pop    ebp
c00153f7:	50                   	push   eax
c00153f8:	68 32 0a 02 c0       	push   0xc0020a32
c00153fd:	e8 43 55 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0015402:	89 34 24             	mov    DWORD PTR [esp],esi
c0015405:	e8 66 b1 fe ff       	call   c0000570 <strlen>
c001540a:	8b 2d 00 8f 02 c0    	mov    ebp,DWORD PTR ds:0xc0028f00
c0015410:	40                   	inc    eax
c0015411:	89 04 24             	mov    DWORD PTR [esp],eax
c0015414:	e8 9d 26 ff ff       	call   c0007ab6 <malloc>
c0015419:	89 04 ad 20 93 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd6ce0],eax
c0015420:	58                   	pop    eax
c0015421:	a1 00 8f 02 c0       	mov    eax,ds:0xc0028f00
c0015426:	5a                   	pop    edx
c0015427:	56                   	push   esi
c0015428:	ff 34 85 20 93 02 c0 	push   DWORD PTR [eax*4-0x3ffd6ce0]
c001542f:	e8 0c b2 fe ff       	call   c0000640 <strcpy>
c0015434:	a1 00 8f 02 c0       	mov    eax,ds:0xc0028f00
c0015439:	8d 50 01             	lea    edx,[eax+0x1]
c001543c:	89 1c 85 20 91 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6ee0],ebx
c0015443:	89 15 00 8f 02 c0    	mov    DWORD PTR ds:0xc0028f00,edx
c0015449:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001544d:	83 c4 0c             	add    esp,0xc
c0015450:	89 14 85 20 8f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd70e0],edx
c0015457:	6a 01                	push   0x1
c0015459:	53                   	push   ebx
c001545a:	56                   	push   esi
c001545b:	e8 bf f6 ff ff       	call   c0014b1f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0015460:	83 c4 10             	add    esp,0x10
c0015463:	0f b6 c0             	movzx  eax,al
c0015466:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001546a:	85 c0                	test   eax,eax
c001546c:	0f 85 89 00 00 00    	jne    c00154fb <Thr::loadDLL(char const*, bool)+0x220>
c0015472:	89 f8                	mov    eax,edi
c0015474:	84 c0                	test   al,al
c0015476:	74 73                	je     c00154eb <Thr::loadDLL(char const*, bool)+0x210>
c0015478:	83 ec 0c             	sub    esp,0xc
c001547b:	68 5d 24 02 c0       	push   0xc002245d
c0015480:	e8 f4 be ff ff       	call   c0011379 <KePanic(char const*)>
c0015485:	83 c4 10             	add    esp,0x10
c0015488:	eb 61                	jmp    c00154eb <Thr::loadDLL(char const*, bool)+0x210>
c001548a:	50                   	push   eax
c001548b:	50                   	push   eax
c001548c:	89 e8                	mov    eax,ebp
c001548e:	c1 e0 0c             	shl    eax,0xc
c0015491:	01 d8                	add    eax,ebx
c0015493:	50                   	push   eax
c0015494:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c001549a:	e8 6d 44 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c001549f:	83 c4 10             	add    esp,0x10
c00154a2:	8b 00                	mov    eax,DWORD PTR [eax]
c00154a4:	a8 60                	test   al,0x60
c00154a6:	75 11                	jne    c00154b9 <Thr::loadDLL(char const*, bool)+0x1de>
c00154a8:	83 ec 0c             	sub    esp,0xc
c00154ab:	25 00 f0 ff ff       	and    eax,0xfffff000
c00154b0:	50                   	push   eax
c00154b1:	e8 a0 28 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c00154b6:	83 c4 10             	add    esp,0x10
c00154b9:	45                   	inc    ebp
c00154ba:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00154be:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00154c2:	05 ff 0f 00 00       	add    eax,0xfff
c00154c7:	bf 00 00 00 00       	mov    edi,0x0
c00154cc:	83 d2 00             	adc    edx,0x0
c00154cf:	0f ac d0 0c          	shrd   eax,edx,0xc
c00154d3:	c1 ea 0c             	shr    edx,0xc
c00154d6:	39 c5                	cmp    ebp,eax
c00154d8:	89 d1                	mov    ecx,edx
c00154da:	89 f8                	mov    eax,edi
c00154dc:	19 c8                	sbb    eax,ecx
c00154de:	72 aa                	jb     c001548a <Thr::loadDLL(char const*, bool)+0x1af>
c00154e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00154e5:	75 18                	jne    c00154ff <Thr::loadDLL(char const*, bool)+0x224>
c00154e7:	31 db                	xor    ebx,ebx
c00154e9:	eb 14                	jmp    c00154ff <Thr::loadDLL(char const*, bool)+0x224>
c00154eb:	83 ec 0c             	sub    esp,0xc
c00154ee:	68 7c 24 02 c0       	push   0xc002247c
c00154f3:	e8 81 be ff ff       	call   c0011379 <KePanic(char const*)>
c00154f8:	83 c4 10             	add    esp,0x10
c00154fb:	31 ed                	xor    ebp,ebp
c00154fd:	eb bb                	jmp    c00154ba <Thr::loadDLL(char const*, bool)+0x1df>
c00154ff:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015505:	89 d8                	mov    eax,ebx
c0015507:	5b                   	pop    ebx
c0015508:	5e                   	pop    esi
c0015509:	5f                   	pop    edi
c001550a:	5d                   	pop    ebp
c001550b:	c3                   	ret    

c001550c <Thr::executeDLL(unsigned long, void*)>:
c001550c:	56                   	push   esi
c001550d:	53                   	push   ebx
c001550e:	52                   	push   edx
c001550f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015513:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015517:	85 db                	test   ebx,ebx
c0015519:	75 10                	jne    c001552b <Thr::executeDLL(unsigned long, void*)+0x1f>
c001551b:	83 ec 0c             	sub    esp,0xc
c001551e:	68 98 24 02 c0       	push   0xc0022498
c0015523:	e8 51 be ff ff       	call   c0011379 <KePanic(char const*)>
c0015528:	83 c4 10             	add    esp,0x10
c001552b:	50                   	push   eax
c001552c:	50                   	push   eax
c001552d:	53                   	push   ebx
c001552e:	68 c2 24 02 c0       	push   0xc00224c2
c0015533:	e8 0d 54 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0015538:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001553c:	89 d8                	mov    eax,ebx
c001553e:	83 c4 14             	add    esp,0x14
c0015541:	5b                   	pop    ebx
c0015542:	5e                   	pop    esi
c0015543:	ff e0                	jmp    eax
c0015545:	66 90                	xchg   ax,ax
c0015547:	90                   	nop

c0015548 <userModeEntryPoint(void*)>:
c0015548:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001554d:	83 e8 01             	sub    eax,0x1
c0015550:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015555:	75 01                	jne    c0015558 <userModeEntryPoint(void*)+0x10>
c0015557:	fb                   	sti    
c0015558:	fb                   	sti    
c0015559:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001555e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015561:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0015567:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001556b:	e9 cf ac fe ff       	jmp    c000023f <goToUsermode>

c0015570 <changeTSS>:
c0015570:	83 ec 14             	sub    esp,0x14
c0015573:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015578:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001557b:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0015580:	c1 e2 15             	shl    edx,0x15
c0015583:	29 d0                	sub    eax,edx
c0015585:	50                   	push   eax
c0015586:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001558b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015591:	05 7c 11 00 00       	add    eax,0x117c
c0015596:	50                   	push   eax
c0015597:	e8 b8 39 ff ff       	call   c0008f54 <TSS::setESP(unsigned long)>
c001559c:	83 c4 1c             	add    esp,0x1c
c001559f:	c3                   	ret    

c00155a0 <switchToThread(ThreadControlBlock*)>:
c00155a0:	57                   	push   edi
c00155a1:	8b 0d c4 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c4
c00155a7:	56                   	push   esi
c00155a8:	85 c9                	test   ecx,ecx
c00155aa:	53                   	push   ebx
c00155ab:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00155af:	0f 85 8b 00 00 00    	jne    c0015640 <switchToThread(ThreadControlBlock*)+0xa0>
c00155b5:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c00155b9:	81 fa ff 00 00 00    	cmp    edx,0xff
c00155bf:	74 7b                	je     c001563c <switchToThread(ThreadControlBlock*)+0x9c>
c00155c1:	b8 00 04 00 00       	mov    eax,0x400
c00155c6:	29 d0                	sub    eax,edx
c00155c8:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00155cb:	d1 f8                	sar    eax,1
c00155cd:	01 d0                	add    eax,edx
c00155cf:	90                   	nop
c00155d0:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00155d3:	e8 1e 28 00 00       	call   c0017df6 <HalQueryPerformanceCounter()>
c00155d8:	a3 08 97 02 c0       	mov    ds:0xc0029708,eax
c00155dd:	89 15 0c 97 02 c0    	mov    DWORD PTR ds:0xc002970c,edx
c00155e3:	89 c6                	mov    esi,eax
c00155e5:	89 d7                	mov    edi,edx
c00155e7:	2b 35 f8 96 02 c0    	sub    esi,DWORD PTR ds:0xc00296f8
c00155ed:	a3 f8 96 02 c0       	mov    ds:0xc00296f8,eax
c00155f2:	1b 3d fc 96 02 c0    	sbb    edi,DWORD PTR ds:0xc00296fc
c00155f8:	89 35 00 97 02 c0    	mov    DWORD PTR ds:0xc0029700,esi
c00155fe:	89 3d 04 97 02 c0    	mov    DWORD PTR ds:0xc0029704,edi
c0015604:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001560a:	89 15 fc 96 02 c0    	mov    DWORD PTR ds:0xc00296fc,edx
c0015610:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0015613:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0015616:	01 c6                	add    esi,eax
c0015618:	11 d7                	adc    edi,edx
c001561a:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c001561d:	83 ec 0c             	sub    esp,0xc
c0015620:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0015623:	53                   	push   ebx
c0015624:	e8 4e ac fe ff       	call   c0000277 <switchToThreadASM>
c0015629:	0f 20 c0             	mov    eax,cr0
c001562c:	83 c8 08             	or     eax,0x8
c001562f:	0f 22 c0             	mov    cr0,eax
c0015632:	83 c4 10             	add    esp,0x10
c0015635:	5b                   	pop    ebx
c0015636:	5e                   	pop    esi
c0015637:	5f                   	pop    edi
c0015638:	c3                   	ret    
c0015639:	8d 76 00             	lea    esi,[esi+0x0]
c001563c:	31 c0                	xor    eax,eax
c001563e:	eb 90                	jmp    c00155d0 <switchToThread(ThreadControlBlock*)+0x30>
c0015640:	5b                   	pop    ebx
c0015641:	c7 05 c0 96 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x1
c001564b:	5e                   	pop    esi
c001564c:	5f                   	pop    edi
c001564d:	c3                   	ret    
c001564e:	66 90                	xchg   ax,ax

c0015650 <Process::addArgs(char**)>:
c0015650:	57                   	push   edi
c0015651:	56                   	push   esi
c0015652:	53                   	push   ebx
c0015653:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015657:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001565b:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0015665:	85 ff                	test   edi,edi
c0015667:	74 4f                	je     c00156b8 <Process::addArgs(char**)+0x68>
c0015669:	8b 07                	mov    eax,DWORD PTR [edi]
c001566b:	85 c0                	test   eax,eax
c001566d:	74 49                	je     c00156b8 <Process::addArgs(char**)+0x68>
c001566f:	31 db                	xor    ebx,ebx
c0015671:	8d 76 00             	lea    esi,[esi+0x0]
c0015674:	83 ec 0c             	sub    esp,0xc
c0015677:	50                   	push   eax
c0015678:	e8 f3 ae fe ff       	call   c0000570 <strlen>
c001567d:	83 c0 01             	add    eax,0x1
c0015680:	89 04 24             	mov    DWORD PTR [esp],eax
c0015683:	e8 2e 24 ff ff       	call   c0007ab6 <malloc>
c0015688:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c001568f:	5a                   	pop    edx
c0015690:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0015693:	59                   	pop    ecx
c0015694:	83 c3 01             	add    ebx,0x1
c0015697:	52                   	push   edx
c0015698:	50                   	push   eax
c0015699:	e8 a2 af fe ff       	call   c0000640 <strcpy>
c001569e:	8b 8e 16 05 00 00    	mov    ecx,DWORD PTR [esi+0x516]
c00156a4:	83 c4 10             	add    esp,0x10
c00156a7:	83 c1 01             	add    ecx,0x1
c00156aa:	89 8e 16 05 00 00    	mov    DWORD PTR [esi+0x516],ecx
c00156b0:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00156b3:	85 c0                	test   eax,eax
c00156b5:	75 bd                	jne    c0015674 <Process::addArgs(char**)+0x24>
c00156b7:	90                   	nop
c00156b8:	5b                   	pop    ebx
c00156b9:	5e                   	pop    esi
c00156ba:	5f                   	pop    edi
c00156bb:	c3                   	ret    

c00156bc <Process::Process(char const*, Process*, char**)>:
c00156bc:	56                   	push   esi
c00156bd:	53                   	push   ebx
c00156be:	83 ec 14             	sub    esp,0x14
c00156c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00156c5:	05 0c 02 00 00       	add    eax,0x20c
c00156ca:	bb 07 00 00 00       	mov    ebx,0x7
c00156cf:	89 c6                	mov    esi,eax
c00156d1:	8d 76 00             	lea    esi,[esi+0x0]
c00156d4:	85 db                	test   ebx,ebx
c00156d6:	78 14                	js     c00156ec <Process::Process(char const*, Process*, char**)+0x30>
c00156d8:	83 ec 0c             	sub    esp,0xc
c00156db:	56                   	push   esi
c00156dc:	e8 e7 a5 00 00       	call   c001fcc8 <ThreadControlBlock::ThreadControlBlock()>
c00156e1:	83 c4 10             	add    esp,0x10
c00156e4:	83 c6 5f             	add    esi,0x5f
c00156e7:	83 eb 01             	sub    ebx,0x1
c00156ea:	eb e8                	jmp    c00156d4 <Process::Process(char const*, Process*, char**)+0x18>
c00156ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00156f0:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c00156f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00156fb:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0015702:	83 ec 0c             	sub    esp,0xc
c0015705:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015709:	e8 60 ba ff ff       	call   c001116e <KeNewProcessEnv(Process*)>
c001570e:	83 c4 10             	add    esp,0x10
c0015711:	89 c2                	mov    edx,eax
c0015713:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015717:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c001571d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015721:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c001572a:	a1 e0 36 02 c0       	mov    eax,ds:0xc00236e0
c001572f:	8d 50 01             	lea    edx,[eax+0x1]
c0015732:	89 15 e0 36 02 c0    	mov    DWORD PTR ds:0xc00236e0,edx
c0015738:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001573c:	89 02                	mov    DWORD PTR [edx],eax
c001573e:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0015746:	83 ec 0c             	sub    esp,0xc
c0015749:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001574d:	e8 64 23 ff ff       	call   c0007ab6 <malloc>
c0015752:	83 c4 10             	add    esp,0x10
c0015755:	89 c3                	mov    ebx,eax
c0015757:	83 ec 08             	sub    esp,0x8
c001575a:	6a 00                	push   0x0
c001575c:	53                   	push   ebx
c001575d:	e8 06 49 ff ff       	call   c000a068 <VAS::VAS(bool)>
c0015762:	83 c4 10             	add    esp,0x10
c0015765:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015769:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c001576f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015773:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001577d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015781:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015785:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c001578b:	e8 02 c0 ff ff       	call   c0011792 <KeInitSignals()>
c0015790:	89 c2                	mov    edx,eax
c0015792:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015796:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c001579c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00157a0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00157a6:	85 c0                	test   eax,eax
c00157a8:	74 42                	je     c00157ec <Process::Process(char const*, Process*, char**)+0x130>
c00157aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00157ae:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00157b4:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00157ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00157be:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00157c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00157c8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00157ce:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00157d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00157d8:	05 0c 01 00 00       	add    eax,0x10c
c00157dd:	83 ec 08             	sub    esp,0x8
c00157e0:	52                   	push   edx
c00157e1:	50                   	push   eax
c00157e2:	e8 59 ae fe ff       	call   c0000640 <strcpy>
c00157e7:	83 c4 10             	add    esp,0x10
c00157ea:	eb 64                	jmp    c0015850 <Process::Process(char const*, Process*, char**)+0x194>
c00157ec:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c00157f4:	83 ec 0c             	sub    esp,0xc
c00157f7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00157fb:	e8 b6 22 ff ff       	call   c0007ab6 <malloc>
c0015800:	83 c4 10             	add    esp,0x10
c0015803:	89 c3                	mov    ebx,eax
c0015805:	83 ec 08             	sub    esp,0x8
c0015808:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001580c:	53                   	push   ebx
c001580d:	e8 54 34 ff ff       	call   c0008c66 <VgaText::VgaText(char const*)>
c0015812:	83 c4 10             	add    esp,0x10
c0015815:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015819:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c001581f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015823:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015829:	83 ec 0c             	sub    esp,0xc
c001582c:	50                   	push   eax
c001582d:	e8 d2 2c ff ff       	call   c0008504 <addToTerminalCycle(VgaText*)>
c0015832:	83 c4 10             	add    esp,0x10
c0015835:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015839:	05 0c 01 00 00       	add    eax,0x10c
c001583e:	83 ec 08             	sub    esp,0x8
c0015841:	68 e1 24 02 c0       	push   0xc00224e1
c0015846:	50                   	push   eax
c0015847:	e8 f4 ad fe ff       	call   c0000640 <strcpy>
c001584c:	83 c4 10             	add    esp,0x10
c001584f:	90                   	nop
c0015850:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015854:	83 c0 0c             	add    eax,0xc
c0015857:	83 ec 08             	sub    esp,0x8
c001585a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001585e:	50                   	push   eax
c001585f:	e8 dc ad fe ff       	call   c0000640 <strcpy>
c0015864:	83 c4 10             	add    esp,0x10
c0015867:	83 ec 08             	sub    esp,0x8
c001586a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001586e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015872:	e8 d9 fd ff ff       	call   c0015650 <Process::addArgs(char**)>
c0015877:	83 c4 10             	add    esp,0x10
c001587a:	83 ec 08             	sub    esp,0x8
c001587d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015881:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015885:	e8 63 ed ff ff       	call   c00145ed <Thr::loadProgramIntoMemory(Process*, char const*)>
c001588a:	83 c4 10             	add    esp,0x10
c001588d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015891:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015895:	83 f0 01             	xor    eax,0x1
c0015898:	88 c2                	mov    dl,al
c001589a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001589e:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c00158a4:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00158a9:	83 ec 04             	sub    esp,0x4
c00158ac:	50                   	push   eax
c00158ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00158b1:	68 38 25 02 c0       	push   0xc0022538
c00158b6:	e8 8a 50 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00158bb:	83 c4 10             	add    esp,0x10
c00158be:	90                   	nop
c00158bf:	83 c4 14             	add    esp,0x14
c00158c2:	5b                   	pop    ebx
c00158c3:	5e                   	pop    esi
c00158c4:	c3                   	ret    
c00158c5:	90                   	nop
c00158c6:	66 90                	xchg   ax,ax

c00158c8 <Process::Process(bool, char const*, Process*, char**)>:
c00158c8:	56                   	push   esi
c00158c9:	53                   	push   ebx
c00158ca:	83 ec 24             	sub    esp,0x24
c00158cd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00158d1:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00158d5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00158d9:	05 0c 02 00 00       	add    eax,0x20c
c00158de:	bb 07 00 00 00       	mov    ebx,0x7
c00158e3:	89 c6                	mov    esi,eax
c00158e5:	8d 76 00             	lea    esi,[esi+0x0]
c00158e8:	85 db                	test   ebx,ebx
c00158ea:	78 14                	js     c0015900 <Process::Process(bool, char const*, Process*, char**)+0x38>
c00158ec:	83 ec 0c             	sub    esp,0xc
c00158ef:	56                   	push   esi
c00158f0:	e8 d3 a3 00 00       	call   c001fcc8 <ThreadControlBlock::ThreadControlBlock()>
c00158f5:	83 c4 10             	add    esp,0x10
c00158f8:	83 c6 5f             	add    esi,0x5f
c00158fb:	83 eb 01             	sub    ebx,0x1
c00158fe:	eb e8                	jmp    c00158e8 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0015900:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015904:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001590b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001590f:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0015916:	83 ec 0c             	sub    esp,0xc
c0015919:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001591d:	e8 4c b8 ff ff       	call   c001116e <KeNewProcessEnv(Process*)>
c0015922:	83 c4 10             	add    esp,0x10
c0015925:	89 c2                	mov    edx,eax
c0015927:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001592b:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015931:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015935:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c001593e:	a1 e0 36 02 c0       	mov    eax,ds:0xc00236e0
c0015943:	8d 50 01             	lea    edx,[eax+0x1]
c0015946:	89 15 e0 36 02 c0    	mov    DWORD PTR ds:0xc00236e0,edx
c001594c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015950:	89 02                	mov    DWORD PTR [edx],eax
c0015952:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001595a:	83 ec 0c             	sub    esp,0xc
c001595d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015961:	e8 50 21 ff ff       	call   c0007ab6 <malloc>
c0015966:	83 c4 10             	add    esp,0x10
c0015969:	89 c3                	mov    ebx,eax
c001596b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0015970:	83 ec 08             	sub    esp,0x8
c0015973:	50                   	push   eax
c0015974:	53                   	push   ebx
c0015975:	e8 ee 46 ff ff       	call   c000a068 <VAS::VAS(bool)>
c001597a:	83 c4 10             	add    esp,0x10
c001597d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015981:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015987:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001598b:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015995:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015999:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001599d:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00159a3:	e8 ea bd ff ff       	call   c0011792 <KeInitSignals()>
c00159a8:	89 c2                	mov    edx,eax
c00159aa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00159ae:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c00159b4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00159b8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00159be:	85 c0                	test   eax,eax
c00159c0:	74 42                	je     c0015a04 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c00159c2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00159c6:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00159cc:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00159d2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00159d6:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00159dc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00159e0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00159e6:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00159ec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00159f0:	05 0c 01 00 00       	add    eax,0x10c
c00159f5:	83 ec 08             	sub    esp,0x8
c00159f8:	52                   	push   edx
c00159f9:	50                   	push   eax
c00159fa:	e8 41 ac fe ff       	call   c0000640 <strcpy>
c00159ff:	83 c4 10             	add    esp,0x10
c0015a02:	eb 64                	jmp    c0015a68 <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c0015a04:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0015a0c:	83 ec 0c             	sub    esp,0xc
c0015a0f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015a13:	e8 9e 20 ff ff       	call   c0007ab6 <malloc>
c0015a18:	83 c4 10             	add    esp,0x10
c0015a1b:	89 c3                	mov    ebx,eax
c0015a1d:	83 ec 08             	sub    esp,0x8
c0015a20:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015a24:	53                   	push   ebx
c0015a25:	e8 3c 32 ff ff       	call   c0008c66 <VgaText::VgaText(char const*)>
c0015a2a:	83 c4 10             	add    esp,0x10
c0015a2d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015a31:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015a37:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015a3b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015a41:	83 ec 0c             	sub    esp,0xc
c0015a44:	50                   	push   eax
c0015a45:	e8 ba 2a ff ff       	call   c0008504 <addToTerminalCycle(VgaText*)>
c0015a4a:	83 c4 10             	add    esp,0x10
c0015a4d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015a51:	05 0c 01 00 00       	add    eax,0x10c
c0015a56:	83 ec 08             	sub    esp,0x8
c0015a59:	68 e1 24 02 c0       	push   0xc00224e1
c0015a5e:	50                   	push   eax
c0015a5f:	e8 dc ab fe ff       	call   c0000640 <strcpy>
c0015a64:	83 c4 10             	add    esp,0x10
c0015a67:	90                   	nop
c0015a68:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015a6c:	83 c0 0c             	add    eax,0xc
c0015a6f:	83 ec 08             	sub    esp,0x8
c0015a72:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015a76:	50                   	push   eax
c0015a77:	e8 c4 ab fe ff       	call   c0000640 <strcpy>
c0015a7c:	83 c4 10             	add    esp,0x10
c0015a7f:	83 ec 08             	sub    esp,0x8
c0015a82:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015a86:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015a8a:	e8 c1 fb ff ff       	call   c0015650 <Process::addArgs(char**)>
c0015a8f:	83 c4 10             	add    esp,0x10
c0015a92:	90                   	nop
c0015a93:	83 c4 24             	add    esp,0x24
c0015a96:	5b                   	pop    ebx
c0015a97:	5e                   	pop    esi
c0015a98:	c3                   	ret    
c0015a99:	8d 76 00             	lea    esi,[esi+0x0]

c0015a9c <taskStartupFunction>:
c0015a9c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015aa1:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0015aa4:	c3                   	ret    
c0015aa5:	90                   	nop
c0015aa6:	66 90                	xchg   ax,ax

c0015aa8 <Semaphore::Semaphore(int)>:
c0015aa8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015aac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015ab0:	89 10                	mov    DWORD PTR [eax],edx
c0015ab2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015ab6:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0015abd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015ac1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015ac8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015acc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0015ad3:	90                   	nop
c0015ad4:	c3                   	ret    
c0015ad5:	90                   	nop
c0015ad6:	66 90                	xchg   ax,ax

c0015ad8 <Mutex::Mutex()>:
c0015ad8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015adc:	6a 01                	push   0x1
c0015ade:	50                   	push   eax
c0015adf:	e8 c4 ff ff ff       	call   c0015aa8 <Semaphore::Semaphore(int)>
c0015ae4:	83 c4 08             	add    esp,0x8
c0015ae7:	90                   	nop
c0015ae8:	c3                   	ret    
c0015ae9:	90                   	nop
c0015aea:	66 90                	xchg   ax,ax

c0015aec <Process::createThread(void (*)(void*), void*, int)>:
c0015aec:	57                   	push   edi
c0015aed:	31 c9                	xor    ecx,ecx
c0015aef:	56                   	push   esi
c0015af0:	53                   	push   ebx
c0015af1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015af5:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0015afc:	89 f2                	mov    edx,esi
c0015afe:	66 90                	xchg   ax,ax
c0015b00:	0f b7 c2             	movzx  eax,dx
c0015b03:	80 e2 01             	and    dl,0x1
c0015b06:	74 14                	je     c0015b1c <Process::createThread(void (*)(void*), void*, int)+0x30>
c0015b08:	d1 f8                	sar    eax,1
c0015b0a:	83 c1 01             	add    ecx,0x1
c0015b0d:	89 c2                	mov    edx,eax
c0015b0f:	83 f9 10             	cmp    ecx,0x10
c0015b12:	75 ec                	jne    c0015b00 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0015b14:	31 db                	xor    ebx,ebx
c0015b16:	89 d8                	mov    eax,ebx
c0015b18:	5b                   	pop    ebx
c0015b19:	5e                   	pop    esi
c0015b1a:	5f                   	pop    edi
c0015b1b:	c3                   	ret    
c0015b1c:	b8 01 00 00 00       	mov    eax,0x1
c0015b21:	d3 e0                	shl    eax,cl
c0015b23:	09 c6                	or     esi,eax
c0015b25:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0015b28:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0015b2f:	01 c0                	add    eax,eax
c0015b31:	01 c8                	add    eax,ecx
c0015b33:	8d 04 80             	lea    eax,[eax+eax*4]
c0015b36:	01 d8                	add    eax,ebx
c0015b38:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0015b3f:	75 0b                	jne    c0015b4c <Process::createThread(void (*)(void*), void*, int)+0x60>
c0015b41:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0015b4b:	90                   	nop
c0015b4c:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015b52:	83 ec 0c             	sub    esp,0xc
c0015b55:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0015b58:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0015b5b:	01 c0                	add    eax,eax
c0015b5d:	01 c8                	add    eax,ecx
c0015b5f:	8d 3c 80             	lea    edi,[eax+eax*4]
c0015b62:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0015b65:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0015b6b:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c0015b71:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015b75:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0015b7b:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0015b81:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0015b87:	89 ca                	mov    edx,ecx
c0015b89:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0015b90:	f7 da                	neg    edx
c0015b92:	c1 e2 15             	shl    edx,0x15
c0015b95:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0015b9b:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0015ba1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015ba5:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0015baf:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0015bb5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015bb9:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0015bbf:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0015bc9:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0015bd3:	68 00 01 00 00       	push   0x100
c0015bd8:	e8 d9 1e ff ff       	call   c0007ab6 <malloc>
c0015bdd:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0015be0:	58                   	pop    eax
c0015be1:	5a                   	pop    edx
c0015be2:	53                   	push   ebx
c0015be3:	68 e4 96 02 c0       	push   0xc00296e4
c0015be8:	e8 73 9e 00 00       	call   c001fa60 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015bed:	83 c4 10             	add    esp,0x10
c0015bf0:	89 d8                	mov    eax,ebx
c0015bf2:	5b                   	pop    ebx
c0015bf3:	5e                   	pop    esi
c0015bf4:	5f                   	pop    edi
c0015bf5:	c3                   	ret    
c0015bf6:	66 90                	xchg   ax,ax

c0015bf8 <Process::createUserThread()>:
c0015bf8:	83 ec 0c             	sub    esp,0xc
c0015bfb:	68 80 00 00 00       	push   0x80
c0015c00:	6a 00                	push   0x0
c0015c02:	68 48 55 01 c0       	push   0xc0015548
c0015c07:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015c0b:	50                   	push   eax
c0015c0c:	e8 db fe ff ff       	call   c0015aec <Process::createThread(void (*)(void*), void*, int)>
c0015c11:	83 c4 1c             	add    esp,0x1c
c0015c14:	c3                   	ret    
c0015c15:	8d 76 00             	lea    esi,[esi+0x0]

c0015c18 <setupMultitasking(void (*)())>:
c0015c18:	56                   	push   esi
c0015c19:	53                   	push   ebx
c0015c1a:	83 ec 04             	sub    esp,0x4
c0015c1d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015c21:	eb 11                	jmp    c0015c34 <setupMultitasking(void (*)())+0x1c>
c0015c23:	90                   	nop
c0015c24:	83 ec 0c             	sub    esp,0xc
c0015c27:	68 e4 96 02 c0       	push   0xc00296e4
c0015c2c:	e8 73 9d 00 00       	call   c001f9a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015c31:	83 c4 10             	add    esp,0x10
c0015c34:	83 ec 0c             	sub    esp,0xc
c0015c37:	68 e4 96 02 c0       	push   0xc00296e4
c0015c3c:	e8 3f 9d 00 00       	call   c001f980 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015c41:	83 c4 10             	add    esp,0x10
c0015c44:	84 c0                	test   al,al
c0015c46:	74 dc                	je     c0015c24 <setupMultitasking(void (*)())+0xc>
c0015c48:	83 ec 0c             	sub    esp,0xc
c0015c4b:	68 24 07 00 00       	push   0x724
c0015c50:	e8 61 1e ff ff       	call   c0007ab6 <malloc>
c0015c55:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0015c5c:	89 c3                	mov    ebx,eax
c0015c5e:	6a 00                	push   0x0
c0015c60:	68 e5 24 02 c0       	push   0xc00224e5
c0015c65:	6a 01                	push   0x1
c0015c67:	50                   	push   eax
c0015c68:	e8 5b fc ff ff       	call   c00158c8 <Process::Process(bool, char const*, Process*, char**)>
c0015c6d:	83 c4 14             	add    esp,0x14
c0015c70:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0015c76:	89 1d f0 96 02 c0    	mov    DWORD PTR ds:0xc00296f0,ebx
c0015c7c:	50                   	push   eax
c0015c7d:	e8 d7 2a ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c0015c82:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c0015c89:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0015c93:	83 c8 01             	or     eax,0x1
c0015c96:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c0015c9d:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015ca3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0015ca6:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0015cb0:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0015cb6:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0015cbc:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0015cc6:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0015cd0:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0015cda:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0015ce0:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0015cea:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0015cf0:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0015cfa:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0015d01:	e8 b0 1d ff ff       	call   c0007ab6 <malloc>
c0015d06:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0015d0c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0015d12:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0015d18:	5a                   	pop    edx
c0015d19:	59                   	pop    ecx
c0015d1a:	68 e1 24 02 c0       	push   0xc00224e1
c0015d1f:	50                   	push   eax
c0015d20:	e8 1b a9 fe ff       	call   c0000640 <strcpy>
c0015d25:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0015d2c:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015d30:	83 c4 14             	add    esp,0x14
c0015d33:	5b                   	pop    ebx
c0015d34:	5e                   	pop    esi
c0015d35:	e9 2f a5 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c0015d3a:	66 90                	xchg   ax,ax

c0015d3c <schedule()>:
c0015d3c:	8b 15 c4 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c4
c0015d42:	85 d2                	test   edx,edx
c0015d44:	74 0e                	je     c0015d54 <schedule()+0x18>
c0015d46:	c7 05 c0 96 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x1
c0015d50:	c3                   	ret    
c0015d51:	8d 76 00             	lea    esi,[esi+0x0]
c0015d54:	53                   	push   ebx
c0015d55:	83 ec 14             	sub    esp,0x14
c0015d58:	68 e4 96 02 c0       	push   0xc00296e4
c0015d5d:	e8 1e 9c 00 00       	call   c001f980 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015d62:	83 c4 10             	add    esp,0x10
c0015d65:	84 c0                	test   al,al
c0015d67:	75 3f                	jne    c0015da8 <schedule()+0x6c>
c0015d69:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d6e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0015d71:	83 fa 01             	cmp    edx,0x1
c0015d74:	74 3a                	je     c0015db0 <schedule()+0x74>
c0015d76:	66 90                	xchg   ax,ax
c0015d78:	83 ec 0c             	sub    esp,0xc
c0015d7b:	68 e4 96 02 c0       	push   0xc00296e4
c0015d80:	e8 17 9c 00 00       	call   c001f99c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015d85:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c0015d8c:	89 c3                	mov    ebx,eax
c0015d8e:	e8 11 9c 00 00       	call   c001f9a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015d93:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0015d9a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015d9d:	e8 fe f7 ff ff       	call   c00155a0 <switchToThread(ThreadControlBlock*)>
c0015da2:	83 c4 10             	add    esp,0x10
c0015da5:	8d 76 00             	lea    esi,[esi+0x0]
c0015da8:	83 c4 08             	add    esp,0x8
c0015dab:	5b                   	pop    ebx
c0015dac:	c3                   	ret    
c0015dad:	8d 76 00             	lea    esi,[esi+0x0]
c0015db0:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0015db7:	83 ec 08             	sub    esp,0x8
c0015dba:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015dbf:	50                   	push   eax
c0015dc0:	68 e4 96 02 c0       	push   0xc00296e4
c0015dc5:	e8 96 9c 00 00       	call   c001fa60 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015dca:	83 c4 10             	add    esp,0x10
c0015dcd:	eb a9                	jmp    c0015d78 <schedule()+0x3c>
c0015dcf:	90                   	nop

c0015dd0 <Semaphore::tryAcquire()>:
c0015dd0:	53                   	push   ebx
c0015dd1:	83 ec 08             	sub    esp,0x8
c0015dd4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015dd8:	fa                   	cli    
c0015dd9:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015dde:	8d 50 01             	lea    edx,[eax+0x1]
c0015de1:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0015de7:	8b 15 c4 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c4
c0015ded:	8d 5a 01             	lea    ebx,[edx+0x1]
c0015df0:	89 1d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ebx
c0015df6:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0015df9:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0015dfb:	7c 33                	jl     c0015e30 <Semaphore::tryAcquire()+0x60>
c0015dfd:	89 15 c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,edx
c0015e03:	85 d2                	test   edx,edx
c0015e05:	75 0d                	jne    c0015e14 <Semaphore::tryAcquire()+0x44>
c0015e07:	8b 15 c0 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c0
c0015e0d:	85 d2                	test   edx,edx
c0015e0f:	75 6f                	jne    c0015e80 <Semaphore::tryAcquire()+0xb0>
c0015e11:	8d 76 00             	lea    esi,[esi+0x0]
c0015e14:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015e19:	85 c0                	test   eax,eax
c0015e1b:	74 0b                	je     c0015e28 <Semaphore::tryAcquire()+0x58>
c0015e1d:	8d 76 00             	lea    esi,[esi+0x0]
c0015e20:	31 c0                	xor    eax,eax
c0015e22:	83 c4 08             	add    esp,0x8
c0015e25:	5b                   	pop    ebx
c0015e26:	c3                   	ret    
c0015e27:	90                   	nop
c0015e28:	fb                   	sti    
c0015e29:	83 c4 08             	add    esp,0x8
c0015e2c:	5b                   	pop    ebx
c0015e2d:	c3                   	ret    
c0015e2e:	66 90                	xchg   ax,ax
c0015e30:	83 c3 01             	add    ebx,0x1
c0015e33:	89 15 c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,edx
c0015e39:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0015e3c:	85 d2                	test   edx,edx
c0015e3e:	75 24                	jne    c0015e64 <Semaphore::tryAcquire()+0x94>
c0015e40:	8b 0d c0 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c0
c0015e46:	85 c9                	test   ecx,ecx
c0015e48:	74 1a                	je     c0015e64 <Semaphore::tryAcquire()+0x94>
c0015e4a:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015e54:	e8 e3 fe ff ff       	call   c0015d3c <schedule()>
c0015e59:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015e5e:	83 e8 01             	sub    eax,0x1
c0015e61:	8d 76 00             	lea    esi,[esi+0x0]
c0015e64:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015e69:	85 c0                	test   eax,eax
c0015e6b:	75 0b                	jne    c0015e78 <Semaphore::tryAcquire()+0xa8>
c0015e6d:	fb                   	sti    
c0015e6e:	b0 01                	mov    al,0x1
c0015e70:	83 c4 08             	add    esp,0x8
c0015e73:	5b                   	pop    ebx
c0015e74:	c3                   	ret    
c0015e75:	8d 76 00             	lea    esi,[esi+0x0]
c0015e78:	b0 01                	mov    al,0x1
c0015e7a:	83 c4 08             	add    esp,0x8
c0015e7d:	5b                   	pop    ebx
c0015e7e:	c3                   	ret    
c0015e7f:	90                   	nop
c0015e80:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015e8a:	e8 ad fe ff ff       	call   c0015d3c <schedule()>
c0015e8f:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015e94:	83 e8 01             	sub    eax,0x1
c0015e97:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015e9c:	85 c0                	test   eax,eax
c0015e9e:	75 80                	jne    c0015e20 <Semaphore::tryAcquire()+0x50>
c0015ea0:	eb 86                	jmp    c0015e28 <Semaphore::tryAcquire()+0x58>
c0015ea2:	66 90                	xchg   ax,ax

c0015ea4 <Semaphore::assertLocked(char const*)>:
c0015ea4:	83 ec 0c             	sub    esp,0xc
c0015ea7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015eab:	fa                   	cli    
c0015eac:	8b 0d c8 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c8
c0015eb2:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015eb7:	83 c1 01             	add    ecx,0x1
c0015eba:	89 0d c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,ecx
c0015ec0:	8d 48 01             	lea    ecx,[eax+0x1]
c0015ec3:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c0015ec9:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0015ecb:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0015ece:	7c 28                	jl     c0015ef8 <Semaphore::assertLocked(char const*)+0x54>
c0015ed0:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0015ed5:	85 c0                	test   eax,eax
c0015ed7:	75 0b                	jne    c0015ee4 <Semaphore::assertLocked(char const*)+0x40>
c0015ed9:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c0015ede:	85 c0                	test   eax,eax
c0015ee0:	75 32                	jne    c0015f14 <Semaphore::assertLocked(char const*)+0x70>
c0015ee2:	66 90                	xchg   ax,ax
c0015ee4:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015ee9:	83 e8 01             	sub    eax,0x1
c0015eec:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015ef1:	75 01                	jne    c0015ef4 <Semaphore::assertLocked(char const*)+0x50>
c0015ef3:	fb                   	sti    
c0015ef4:	83 c4 0c             	add    esp,0xc
c0015ef7:	c3                   	ret    
c0015ef8:	83 ec 0c             	sub    esp,0xc
c0015efb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015eff:	52                   	push   edx
c0015f00:	e8 74 b4 ff ff       	call   c0011379 <KePanic(char const*)>
c0015f05:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015f0a:	83 c4 10             	add    esp,0x10
c0015f0d:	83 e8 01             	sub    eax,0x1
c0015f10:	eb be                	jmp    c0015ed0 <Semaphore::assertLocked(char const*)+0x2c>
c0015f12:	66 90                	xchg   ax,ax
c0015f14:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015f1e:	e8 19 fe ff ff       	call   c0015d3c <schedule()>
c0015f23:	eb bf                	jmp    c0015ee4 <Semaphore::assertLocked(char const*)+0x40>
c0015f25:	8d 76 00             	lea    esi,[esi+0x0]

c0015f28 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0015f28:	83 ec 0c             	sub    esp,0xc
c0015f2b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f30:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015f34:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015f37:	e8 00 fe ff ff       	call   c0015d3c <schedule()>
c0015f3c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015f41:	83 e8 01             	sub    eax,0x1
c0015f44:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015f49:	75 01                	jne    c0015f4c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0015f4b:	fb                   	sti    
c0015f4c:	83 c4 0c             	add    esp,0xc
c0015f4f:	c3                   	ret    

c0015f50 <blockTask(TaskState)>:
c0015f50:	83 ec 0c             	sub    esp,0xc
c0015f53:	fa                   	cli    
c0015f54:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015f59:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015f5d:	83 c0 01             	add    eax,0x1
c0015f60:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015f65:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f6a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015f6d:	e8 ca fd ff ff       	call   c0015d3c <schedule()>
c0015f72:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015f77:	83 e8 01             	sub    eax,0x1
c0015f7a:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015f7f:	75 03                	jne    c0015f84 <blockTask(TaskState)+0x34>
c0015f81:	fb                   	sti    
c0015f82:	66 90                	xchg   ax,ax
c0015f84:	83 c4 0c             	add    esp,0xc
c0015f87:	c3                   	ret    

c0015f88 <waitTask(int, int*, int)>:
c0015f88:	83 ec 18             	sub    esp,0x18
c0015f8b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f90:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015f94:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0015f97:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015f9b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015fa0:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0015fa3:	6a 07                	push   0x7
c0015fa5:	e8 a6 ff ff ff       	call   c0015f50 <blockTask(TaskState)>
c0015faa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015faf:	83 c4 10             	add    esp,0x10
c0015fb2:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0015fb5:	85 d2                	test   edx,edx
c0015fb7:	74 0b                	je     c0015fc4 <waitTask(int, int*, int)+0x3c>
c0015fb9:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0015fbc:	89 02                	mov    DWORD PTR [edx],eax
c0015fbe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015fc3:	90                   	nop
c0015fc4:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0015fc7:	83 c4 0c             	add    esp,0xc
c0015fca:	c3                   	ret    
c0015fcb:	90                   	nop

c0015fcc <milliTenthSleepUntil(unsigned int)>:
c0015fcc:	83 ec 0c             	sub    esp,0xc
c0015fcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015fd3:	39 05 ec 88 02 c0    	cmp    DWORD PTR ds:0xc00288ec,eax
c0015fd9:	76 05                	jbe    c0015fe0 <milliTenthSleepUntil(unsigned int)+0x14>
c0015fdb:	90                   	nop
c0015fdc:	83 c4 0c             	add    esp,0xc
c0015fdf:	c3                   	ret    
c0015fe0:	fa                   	cli    
c0015fe1:	8b 15 c8 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c8
c0015fe7:	83 ec 08             	sub    esp,0x8
c0015fea:	83 c2 01             	add    edx,0x1
c0015fed:	8b 0d c4 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c4
c0015ff3:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0015ff9:	83 c1 01             	add    ecx,0x1
c0015ffc:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c0016002:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016008:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c001600b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016010:	50                   	push   eax
c0016011:	68 d8 96 02 c0       	push   0xc00296d8
c0016016:	e8 45 9a 00 00       	call   c001fa60 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001601b:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0016022:	e8 29 ff ff ff       	call   c0015f50 <blockTask(TaskState)>
c0016027:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c001602c:	83 c4 10             	add    esp,0x10
c001602f:	83 e8 01             	sub    eax,0x1
c0016032:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0016037:	85 c0                	test   eax,eax
c0016039:	75 09                	jne    c0016044 <milliTenthSleepUntil(unsigned int)+0x78>
c001603b:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c0016040:	85 c0                	test   eax,eax
c0016042:	75 14                	jne    c0016058 <milliTenthSleepUntil(unsigned int)+0x8c>
c0016044:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016049:	83 e8 01             	sub    eax,0x1
c001604c:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016051:	75 89                	jne    c0015fdc <milliTenthSleepUntil(unsigned int)+0x10>
c0016053:	fb                   	sti    
c0016054:	83 c4 0c             	add    esp,0xc
c0016057:	c3                   	ret    
c0016058:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0016062:	e8 d5 fc ff ff       	call   c0015d3c <schedule()>
c0016067:	eb db                	jmp    c0016044 <milliTenthSleepUntil(unsigned int)+0x78>
c0016069:	8d 76 00             	lea    esi,[esi+0x0]

c001606c <milliTenthSleep(unsigned int)>:
c001606c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016070:	a1 ec 88 02 c0       	mov    eax,ds:0xc00288ec
c0016075:	01 c2                	add    edx,eax
c0016077:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001607b:	e9 4c ff ff ff       	jmp    c0015fcc <milliTenthSleepUntil(unsigned int)>

c0016080 <sleep(unsigned int)>:
c0016080:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016084:	8d 04 80             	lea    eax,[eax+eax*4]
c0016087:	8d 04 80             	lea    eax,[eax+eax*4]
c001608a:	8d 04 80             	lea    eax,[eax+eax*4]
c001608d:	8d 04 80             	lea    eax,[eax+eax*4]
c0016090:	c1 e0 04             	shl    eax,0x4
c0016093:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016097:	eb d3                	jmp    c001606c <milliTenthSleep(unsigned int)>
c0016099:	90                   	nop
c001609a:	66 90                	xchg   ax,ax

c001609c <Semaphore::acquire()>:
c001609c:	83 ec 0c             	sub    esp,0xc
c001609f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00160a3:	fa                   	cli    
c00160a4:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00160a9:	83 c0 01             	add    eax,0x1
c00160ac:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00160b1:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c00160b6:	8d 48 01             	lea    ecx,[eax+0x1]
c00160b9:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c00160bf:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00160c2:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c00160c4:	7d 2e                	jge    c00160f4 <Semaphore::acquire()+0x58>
c00160c6:	83 c1 01             	add    ecx,0x1
c00160c9:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c00160cc:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c00160d1:	85 c0                	test   eax,eax
c00160d3:	75 0b                	jne    c00160e0 <Semaphore::acquire()+0x44>
c00160d5:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c00160da:	85 c0                	test   eax,eax
c00160dc:	75 66                	jne    c0016144 <Semaphore::acquire()+0xa8>
c00160de:	66 90                	xchg   ax,ax
c00160e0:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00160e5:	83 e8 01             	sub    eax,0x1
c00160e8:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00160ed:	75 01                	jne    c00160f0 <Semaphore::acquire()+0x54>
c00160ef:	fb                   	sti    
c00160f0:	83 c4 0c             	add    esp,0xc
c00160f3:	c3                   	ret    
c00160f4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00160f9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016100:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0016103:	85 c9                	test   ecx,ecx
c0016105:	74 51                	je     c0016158 <Semaphore::acquire()+0xbc>
c0016107:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001610a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016110:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0016113:	90                   	nop
c0016114:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016119:	83 ec 0c             	sub    esp,0xc
c001611c:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001611f:	68 64 25 02 c0       	push   0xc0022564
c0016124:	e8 1c 48 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0016129:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0016130:	e8 1b fe ff ff       	call   c0015f50 <blockTask(TaskState)>
c0016135:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c001613a:	83 c4 10             	add    esp,0x10
c001613d:	83 e8 01             	sub    eax,0x1
c0016140:	eb 8a                	jmp    c00160cc <Semaphore::acquire()+0x30>
c0016142:	66 90                	xchg   ax,ax
c0016144:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c001614e:	e8 e9 fb ff ff       	call   c0015d3c <schedule()>
c0016153:	eb 8b                	jmp    c00160e0 <Semaphore::acquire()+0x44>
c0016155:	8d 76 00             	lea    esi,[esi+0x0]
c0016158:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001615d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016160:	eb b2                	jmp    c0016114 <Semaphore::acquire()+0x78>
c0016162:	66 90                	xchg   ax,ax

c0016164 <taskReturned>:
c0016164:	83 ec 18             	sub    esp,0x18
c0016167:	68 84 25 02 c0       	push   0xc0022584
c001616c:	e8 08 b2 ff ff       	call   c0011379 <KePanic(char const*)>
c0016171:	83 c4 10             	add    esp,0x10
c0016174:	83 ec 0c             	sub    esp,0xc
c0016177:	6a 02                	push   0x2
c0016179:	e8 d2 fd ff ff       	call   c0015f50 <blockTask(TaskState)>
c001617e:	fa                   	cli    
c001617f:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016184:	83 c0 01             	add    eax,0x1
c0016187:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001618c:	e8 ab fb ff ff       	call   c0015d3c <schedule()>
c0016191:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016196:	83 c4 10             	add    esp,0x10
c0016199:	83 e8 01             	sub    eax,0x1
c001619c:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00161a1:	85 c0                	test   eax,eax
c00161a3:	75 cf                	jne    c0016174 <taskReturned+0x10>
c00161a5:	fb                   	sti    
c00161a6:	eb cc                	jmp    c0016174 <taskReturned+0x10>

c00161a8 <Thr::processFromPID(int)>:
c00161a8:	57                   	push   edi
c00161a9:	56                   	push   esi
c00161aa:	53                   	push   ebx
c00161ab:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00161af:	fa                   	cli    
c00161b0:	8b 0d c8 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c8
c00161b6:	83 ec 0c             	sub    esp,0xc
c00161b9:	83 c1 01             	add    ecx,0x1
c00161bc:	68 e4 96 02 c0       	push   0xc00296e4
c00161c1:	89 0d c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,ecx
c00161c7:	e8 d0 97 00 00       	call   c001f99c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00161cc:	83 c4 10             	add    esp,0x10
c00161cf:	89 c7                	mov    edi,eax
c00161d1:	eb 15                	jmp    c00161e8 <Thr::processFromPID(int)+0x40>
c00161d3:	90                   	nop
c00161d4:	83 ec 0c             	sub    esp,0xc
c00161d7:	68 e4 96 02 c0       	push   0xc00296e4
c00161dc:	e8 bb 97 00 00       	call   c001f99c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00161e1:	83 c4 10             	add    esp,0x10
c00161e4:	39 f8                	cmp    eax,edi
c00161e6:	74 50                	je     c0016238 <Thr::processFromPID(int)+0x90>
c00161e8:	83 ec 0c             	sub    esp,0xc
c00161eb:	68 e4 96 02 c0       	push   0xc00296e4
c00161f0:	e8 a7 97 00 00       	call   c001f99c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00161f5:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c00161fc:	89 c3                	mov    ebx,eax
c00161fe:	e8 a1 97 00 00       	call   c001f9a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016203:	58                   	pop    eax
c0016204:	5a                   	pop    edx
c0016205:	53                   	push   ebx
c0016206:	68 e4 96 02 c0       	push   0xc00296e4
c001620b:	e8 50 98 00 00       	call   c001fa60 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016210:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016213:	83 c4 10             	add    esp,0x10
c0016216:	39 30                	cmp    DWORD PTR [eax],esi
c0016218:	75 ba                	jne    c00161d4 <Thr::processFromPID(int)+0x2c>
c001621a:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001621f:	83 e8 01             	sub    eax,0x1
c0016222:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016227:	74 0b                	je     c0016234 <Thr::processFromPID(int)+0x8c>
c0016229:	8d 76 00             	lea    esi,[esi+0x0]
c001622c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001622f:	5b                   	pop    ebx
c0016230:	5e                   	pop    esi
c0016231:	5f                   	pop    edi
c0016232:	c3                   	ret    
c0016233:	90                   	nop
c0016234:	fb                   	sti    
c0016235:	eb f5                	jmp    c001622c <Thr::processFromPID(int)+0x84>
c0016237:	90                   	nop
c0016238:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001623d:	83 e8 01             	sub    eax,0x1
c0016240:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016245:	75 05                	jne    c001624c <Thr::processFromPID(int)+0xa4>
c0016247:	fb                   	sti    
c0016248:	5b                   	pop    ebx
c0016249:	5e                   	pop    esi
c001624a:	5f                   	pop    edi
c001624b:	c3                   	ret    
c001624c:	5b                   	pop    ebx
c001624d:	31 c0                	xor    eax,eax
c001624f:	5e                   	pop    esi
c0016250:	5f                   	pop    edi
c0016251:	c3                   	ret    
c0016252:	66 90                	xchg   ax,ax

c0016254 <unblockTask(ThreadControlBlock*)>:
c0016254:	53                   	push   ebx
c0016255:	83 ec 08             	sub    esp,0x8
c0016258:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001625c:	fa                   	cli    
c001625d:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016262:	83 c0 01             	add    eax,0x1
c0016265:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001626a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001626d:	85 c0                	test   eax,eax
c001626f:	74 67                	je     c00162d8 <unblockTask(ThreadControlBlock*)+0x84>
c0016271:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016274:	83 f8 01             	cmp    eax,0x1
c0016277:	74 37                	je     c00162b0 <unblockTask(ThreadControlBlock*)+0x5c>
c0016279:	83 ec 0c             	sub    esp,0xc
c001627c:	68 e4 96 02 c0       	push   0xc00296e4
c0016281:	e8 16 97 00 00       	call   c001f99c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016286:	83 c4 10             	add    esp,0x10
c0016289:	85 c0                	test   eax,eax
c001628b:	75 1b                	jne    c00162a8 <unblockTask(ThreadControlBlock*)+0x54>
c001628d:	eb 5d                	jmp    c00162ec <unblockTask(ThreadControlBlock*)+0x98>
c001628f:	90                   	nop
c0016290:	83 ec 08             	sub    esp,0x8
c0016293:	50                   	push   eax
c0016294:	68 e4 96 02 c0       	push   0xc00296e4
c0016299:	e8 1e 9a 00 00       	call   c001fcbc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001629e:	83 c4 10             	add    esp,0x10
c00162a1:	85 c0                	test   eax,eax
c00162a3:	74 47                	je     c00162ec <unblockTask(ThreadControlBlock*)+0x98>
c00162a5:	8d 76 00             	lea    esi,[esi+0x0]
c00162a8:	39 c3                	cmp    ebx,eax
c00162aa:	75 e4                	jne    c0016290 <unblockTask(ThreadControlBlock*)+0x3c>
c00162ac:	eb 12                	jmp    c00162c0 <unblockTask(ThreadControlBlock*)+0x6c>
c00162ae:	66 90                	xchg   ax,ax
c00162b0:	83 ec 0c             	sub    esp,0xc
c00162b3:	68 03 25 02 c0       	push   0xc0022503
c00162b8:	e8 88 46 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00162bd:	83 c4 10             	add    esp,0x10
c00162c0:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00162c5:	83 e8 01             	sub    eax,0x1
c00162c8:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00162cd:	75 01                	jne    c00162d0 <unblockTask(ThreadControlBlock*)+0x7c>
c00162cf:	fb                   	sti    
c00162d0:	83 c4 08             	add    esp,0x8
c00162d3:	5b                   	pop    ebx
c00162d4:	c3                   	ret    
c00162d5:	8d 76 00             	lea    esi,[esi+0x0]
c00162d8:	83 ec 0c             	sub    esp,0xc
c00162db:	68 ec 24 02 c0       	push   0xc00224ec
c00162e0:	e8 60 46 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00162e5:	83 c4 10             	add    esp,0x10
c00162e8:	eb d6                	jmp    c00162c0 <unblockTask(ThreadControlBlock*)+0x6c>
c00162ea:	66 90                	xchg   ax,ax
c00162ec:	83 ec 08             	sub    esp,0x8
c00162ef:	53                   	push   ebx
c00162f0:	68 e4 96 02 c0       	push   0xc00296e4
c00162f5:	e8 66 97 00 00       	call   c001fa60 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00162fa:	83 c4 10             	add    esp,0x10
c00162fd:	eb c1                	jmp    c00162c0 <unblockTask(ThreadControlBlock*)+0x6c>
c00162ff:	90                   	nop

c0016300 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0016300:	55                   	push   ebp
c0016301:	57                   	push   edi
c0016302:	56                   	push   esi
c0016303:	53                   	push   ebx
c0016304:	83 ec 1c             	sub    esp,0x1c
c0016307:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001630b:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001630e:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0016314:	85 ed                	test   ebp,ebp
c0016316:	7e 28                	jle    c0016340 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c0016318:	31 f6                	xor    esi,esi
c001631a:	66 90                	xchg   ax,ax
c001631c:	83 ec 0c             	sub    esp,0xc
c001631f:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0016326:	83 c6 01             	add    esi,0x1
c0016329:	57                   	push   edi
c001632a:	e8 97 17 ff ff       	call   c0007ac6 <free>
c001632f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016332:	83 c4 10             	add    esp,0x10
c0016335:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c001633b:	7f df                	jg     c001631c <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c001633d:	8d 76 00             	lea    esi,[esi+0x0]
c0016340:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001634a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001634f:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0016352:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0016355:	d3 c0                	rol    eax,cl
c0016357:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c001635e:	21 c8                	and    eax,ecx
c0016360:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c0016367:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001636a:	89 f7                	mov    edi,esi
c001636c:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0016374:	0f 85 72 01 00 00    	jne    c00164ec <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c001637a:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0016380:	85 ed                	test   ebp,ebp
c0016382:	74 1c                	je     c00163a0 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c0016384:	83 ec 0c             	sub    esp,0xc
c0016387:	55                   	push   ebp
c0016388:	e8 fd ac ff ff       	call   c001108a <EnvVarContainer::~EnvVarContainer()>
c001638d:	59                   	pop    ecx
c001638e:	5e                   	pop    esi
c001638f:	6a 0c                	push   0xc
c0016391:	55                   	push   ebp
c0016392:	e8 81 44 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0016397:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001639a:	83 c4 10             	add    esp,0x10
c001639d:	89 f7                	mov    edi,esi
c001639f:	90                   	nop
c00163a0:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00163a6:	85 c0                	test   eax,eax
c00163a8:	0f 84 b2 00 00 00    	je     c0016460 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c00163ae:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c00163b1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00163b5:	31 c9                	xor    ecx,ecx
c00163b7:	eb 17                	jmp    c00163d0 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c00163b9:	8d 76 00             	lea    esi,[esi+0x0]
c00163bc:	83 c1 01             	add    ecx,0x1
c00163bf:	83 f9 10             	cmp    ecx,0x10
c00163c2:	0f 84 98 00 00 00    	je     c0016460 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c00163c8:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00163ce:	66 90                	xchg   ax,ax
c00163d0:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c00163d7:	d3 fa                	sar    edx,cl
c00163d9:	80 e2 01             	and    dl,0x1
c00163dc:	74 de                	je     c00163bc <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00163de:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c00163e1:	01 d2                	add    edx,edx
c00163e3:	01 ca                	add    edx,ecx
c00163e5:	8d 14 92             	lea    edx,[edx+edx*4]
c00163e8:	01 d0                	add    eax,edx
c00163ea:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c00163f0:	83 fd 07             	cmp    ebp,0x7
c00163f3:	75 c7                	jne    c00163bc <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00163f5:	05 40 02 00 00       	add    eax,0x240
c00163fa:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c00163fd:	83 fd ff             	cmp    ebp,0xffffffff
c0016400:	0f 8c ee 00 00 00    	jl     c00164f4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0016406:	0f 84 ac 01 00 00    	je     c00165b8 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c001640c:	85 ed                	test   ebp,ebp
c001640e:	0f 84 90 01 00 00    	je     c00165a4 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c0016414:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0016416:	75 a4                	jne    c00163bc <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016418:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001641e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016422:	01 d0                	add    eax,edx
c0016424:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0016428:	83 ec 0c             	sub    esp,0xc
c001642b:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0016431:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016434:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001643a:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0016441:	50                   	push   eax
c0016442:	e8 0d fe ff ff       	call   c0016254 <unblockTask(ThreadControlBlock*)>
c0016447:	83 c4 10             	add    esp,0x10
c001644a:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001644d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016451:	89 f7                	mov    edi,esi
c0016453:	83 c1 01             	add    ecx,0x1
c0016456:	83 f9 10             	cmp    ecx,0x10
c0016459:	0f 85 69 ff ff ff    	jne    c00163c8 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c001645f:	90                   	nop
c0016460:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0016466:	85 c0                	test   eax,eax
c0016468:	74 62                	je     c00164cc <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c001646a:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0016470:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0016476:	74 54                	je     c00164cc <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0016478:	83 ec 0c             	sub    esp,0xc
c001647b:	68 e4 96 02 c0       	push   0xc00296e4
c0016480:	e8 17 95 00 00       	call   c001f99c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016485:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c001648c:	89 c7                	mov    edi,eax
c001648e:	e8 ed 94 00 00       	call   c001f980 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016493:	83 c4 10             	add    esp,0x10
c0016496:	84 c0                	test   al,al
c0016498:	0f 84 ce 00 00 00    	je     c001656c <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c001649e:	66 90                	xchg   ax,ax
c00164a0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00164a3:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00164a9:	85 d2                	test   edx,edx
c00164ab:	74 0f                	je     c00164bc <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c00164ad:	83 ec 0c             	sub    esp,0xc
c00164b0:	8b 02                	mov    eax,DWORD PTR [edx]
c00164b2:	52                   	push   edx
c00164b3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00164b6:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00164b9:	83 c4 10             	add    esp,0x10
c00164bc:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c00164c6:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c00164c9:	8d 76 00             	lea    esi,[esi+0x0]
c00164cc:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c00164d2:	85 db                	test   ebx,ebx
c00164d4:	74 16                	je     c00164ec <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c00164d6:	83 ec 0c             	sub    esp,0xc
c00164d9:	53                   	push   ebx
c00164da:	e8 d3 36 ff ff       	call   c0009bb2 <VAS::~VAS()>
c00164df:	58                   	pop    eax
c00164e0:	5a                   	pop    edx
c00164e1:	6a 14                	push   0x14
c00164e3:	53                   	push   ebx
c00164e4:	e8 2f 43 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c00164e9:	83 c4 10             	add    esp,0x10
c00164ec:	83 c4 1c             	add    esp,0x1c
c00164ef:	5b                   	pop    ebx
c00164f0:	5e                   	pop    esi
c00164f1:	5f                   	pop    edi
c00164f2:	5d                   	pop    ebp
c00164f3:	c3                   	ret    
c00164f4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00164f8:	83 ec 0c             	sub    esp,0xc
c00164fb:	68 b8 25 02 c0       	push   0xc00225b8
c0016500:	e8 74 ae ff ff       	call   c0011379 <KePanic(char const*)>
c0016505:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016508:	83 c4 10             	add    esp,0x10
c001650b:	89 f7                	mov    edi,esi
c001650d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016511:	e9 a6 fe ff ff       	jmp    c00163bc <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016516:	66 90                	xchg   ax,ax
c0016518:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001651e:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0016524:	75 1e                	jne    c0016544 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0016526:	83 ec 0c             	sub    esp,0xc
c0016529:	68 20 26 02 c0       	push   0xc0022620
c001652e:	e8 12 44 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0016533:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001653a:	e8 11 fa ff ff       	call   c0015f50 <blockTask(TaskState)>
c001653f:	83 c4 10             	add    esp,0x10
c0016542:	66 90                	xchg   ax,ax
c0016544:	83 ec 08             	sub    esp,0x8
c0016547:	56                   	push   esi
c0016548:	68 e4 96 02 c0       	push   0xc00296e4
c001654d:	e8 0e 95 00 00       	call   c001fa60 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016552:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c0016559:	e8 3e 94 00 00       	call   c001f99c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001655e:	83 c4 10             	add    esp,0x10
c0016561:	39 f8                	cmp    eax,edi
c0016563:	0f 84 37 ff ff ff    	je     c00164a0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c0016569:	8d 76 00             	lea    esi,[esi+0x0]
c001656c:	83 ec 0c             	sub    esp,0xc
c001656f:	68 e4 96 02 c0       	push   0xc00296e4
c0016574:	e8 23 94 00 00       	call   c001f99c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016579:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c0016580:	89 c6                	mov    esi,eax
c0016582:	e8 1d 94 00 00       	call   c001f9a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016587:	83 c4 10             	add    esp,0x10
c001658a:	39 f3                	cmp    ebx,esi
c001658c:	74 b6                	je     c0016544 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c001658e:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0016591:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016594:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c001659a:	75 a8                	jne    c0016544 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c001659c:	e9 77 ff ff ff       	jmp    c0016518 <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c00165a1:	8d 76 00             	lea    esi,[esi+0x0]
c00165a4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00165a8:	83 ec 0c             	sub    esp,0xc
c00165ab:	68 ec 25 02 c0       	push   0xc00225ec
c00165b0:	e9 4b ff ff ff       	jmp    c0016500 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c00165b5:	8d 76 00             	lea    esi,[esi+0x0]
c00165b8:	8b 36                	mov    esi,DWORD PTR [esi]
c00165ba:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00165be:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c00165c1:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00165c4:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c00165ca:	01 d7                	add    edi,edx
c00165cc:	89 f8                	mov    eax,edi
c00165ce:	e9 51 fe ff ff       	jmp    c0016424 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c00165d3:	90                   	nop

c00165d4 <cleanerTaskFunction(void*)>:
c00165d4:	53                   	push   ebx
c00165d5:	83 ec 08             	sub    esp,0x8
c00165d8:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00165dd:	83 e8 01             	sub    eax,0x1
c00165e0:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00165e5:	75 01                	jne    c00165e8 <cleanerTaskFunction(void*)+0x14>
c00165e7:	fb                   	sti    
c00165e8:	fa                   	cli    
c00165e9:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00165ee:	80 3d ac 96 02 c0 00 	cmp    BYTE PTR ds:0xc00296ac,0x0
c00165f5:	8d 50 01             	lea    edx,[eax+0x1]
c00165f8:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c00165fe:	0f 84 c4 00 00 00    	je     c00166c8 <cleanerTaskFunction(void*)+0xf4>
c0016604:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016609:	85 c0                	test   eax,eax
c001660b:	75 03                	jne    c0016610 <cleanerTaskFunction(void*)+0x3c>
c001660d:	fb                   	sti    
c001660e:	66 90                	xchg   ax,ax
c0016610:	c6 05 ac 96 02 c0 00 	mov    BYTE PTR ds:0xc00296ac,0x0
c0016617:	fa                   	cli    
c0016618:	8b 15 c8 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c8
c001661e:	8b 0d c4 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c4
c0016624:	83 c2 01             	add    edx,0x1
c0016627:	83 c1 01             	add    ecx,0x1
c001662a:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0016630:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c0016636:	fa                   	cli    
c0016637:	8b 1d c8 96 02 c0    	mov    ebx,DWORD PTR ds:0xc00296c8
c001663d:	83 c3 01             	add    ebx,0x1
c0016640:	89 1d c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,ebx
c0016646:	eb 28                	jmp    c0016670 <cleanerTaskFunction(void*)+0x9c>
c0016648:	83 ec 0c             	sub    esp,0xc
c001664b:	68 cc 96 02 c0       	push   0xc00296cc
c0016650:	e8 47 93 00 00       	call   c001f99c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016655:	c7 04 24 cc 96 02 c0 	mov    DWORD PTR [esp],0xc00296cc
c001665c:	89 c3                	mov    ebx,eax
c001665e:	e8 41 93 00 00       	call   c001f9a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016663:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016666:	e8 95 fc ff ff       	call   c0016300 <cleanupTerminatedTask(ThreadControlBlock*)>
c001666b:	83 c4 10             	add    esp,0x10
c001666e:	66 90                	xchg   ax,ax
c0016670:	83 ec 0c             	sub    esp,0xc
c0016673:	68 cc 96 02 c0       	push   0xc00296cc
c0016678:	e8 03 93 00 00       	call   c001f980 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001667d:	83 c4 10             	add    esp,0x10
c0016680:	84 c0                	test   al,al
c0016682:	74 c4                	je     c0016648 <cleanerTaskFunction(void*)+0x74>
c0016684:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016689:	83 e8 01             	sub    eax,0x1
c001668c:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016691:	75 01                	jne    c0016694 <cleanerTaskFunction(void*)+0xc0>
c0016693:	fb                   	sti    
c0016694:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0016699:	83 e8 01             	sub    eax,0x1
c001669c:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c00166a1:	0f 85 31 ff ff ff    	jne    c00165d8 <cleanerTaskFunction(void*)+0x4>
c00166a7:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c00166ac:	85 c0                	test   eax,eax
c00166ae:	0f 84 24 ff ff ff    	je     c00165d8 <cleanerTaskFunction(void*)+0x4>
c00166b4:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c00166be:	e8 79 f6 ff ff       	call   c0015d3c <schedule()>
c00166c3:	e9 10 ff ff ff       	jmp    c00165d8 <cleanerTaskFunction(void*)+0x4>
c00166c8:	83 ec 0c             	sub    esp,0xc
c00166cb:	6a 02                	push   0x2
c00166cd:	e8 56 f8 ff ff       	call   c0015f28 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00166d2:	83 c4 10             	add    esp,0x10
c00166d5:	e9 36 ff ff ff       	jmp    c0016610 <cleanerTaskFunction(void*)+0x3c>
c00166da:	66 90                	xchg   ax,ax

c00166dc <terminateTask(int)>:
c00166dc:	83 ec 14             	sub    esp,0x14
c00166df:	fa                   	cli    
c00166e0:	8b 15 c8 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c8
c00166e6:	8b 0d c4 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c4
c00166ec:	83 c2 01             	add    edx,0x1
c00166ef:	83 c1 01             	add    ecx,0x1
c00166f2:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c00166f8:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c00166fe:	fa                   	cli    
c00166ff:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016704:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016708:	83 c0 01             	add    eax,0x1
c001670b:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016710:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016715:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0016718:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001671d:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0016720:	50                   	push   eax
c0016721:	68 cc 96 02 c0       	push   0xc00296cc
c0016726:	e8 35 93 00 00       	call   c001fa60 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001672b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016730:	83 c4 10             	add    esp,0x10
c0016733:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001673a:	a1 a8 96 02 c0       	mov    eax,ds:0xc00296a8
c001673f:	85 c0                	test   eax,eax
c0016741:	74 65                	je     c00167a8 <terminateTask(int)+0xcc>
c0016743:	83 ec 0c             	sub    esp,0xc
c0016746:	c6 05 ac 96 02 c0 01 	mov    BYTE PTR ds:0xc00296ac,0x1
c001674d:	50                   	push   eax
c001674e:	e8 01 fb ff ff       	call   c0016254 <unblockTask(ThreadControlBlock*)>
c0016753:	83 c4 10             	add    esp,0x10
c0016756:	66 90                	xchg   ax,ax
c0016758:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001675d:	83 e8 01             	sub    eax,0x1
c0016760:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016765:	75 01                	jne    c0016768 <terminateTask(int)+0x8c>
c0016767:	fb                   	sti    
c0016768:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c001676d:	83 e8 01             	sub    eax,0x1
c0016770:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0016775:	75 09                	jne    c0016780 <terminateTask(int)+0xa4>
c0016777:	83 3d c0 96 02 c0 00 	cmp    DWORD PTR ds:0xc00296c0,0x0
c001677e:	75 3c                	jne    c00167bc <terminateTask(int)+0xe0>
c0016780:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016785:	83 e8 01             	sub    eax,0x1
c0016788:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001678d:	75 01                	jne    c0016790 <terminateTask(int)+0xb4>
c001678f:	fb                   	sti    
c0016790:	fa                   	cli    
c0016791:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016796:	83 c0 01             	add    eax,0x1
c0016799:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001679e:	66 90                	xchg   ax,ax
c00167a0:	e8 97 f5 ff ff       	call   c0015d3c <schedule()>
c00167a5:	eb d9                	jmp    c0016780 <terminateTask(int)+0xa4>
c00167a7:	90                   	nop
c00167a8:	83 ec 0c             	sub    esp,0xc
c00167ab:	68 1a 25 02 c0       	push   0xc002251a
c00167b0:	e8 90 41 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00167b5:	83 c4 10             	add    esp,0x10
c00167b8:	eb 9e                	jmp    c0016758 <terminateTask(int)+0x7c>
c00167ba:	66 90                	xchg   ax,ax
c00167bc:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c00167c6:	eb d8                	jmp    c00167a0 <terminateTask(int)+0xc4>

c00167c8 <Thr::terminateFromIRQ(int)>:
c00167c8:	83 ec 18             	sub    esp,0x18
c00167cb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00167cf:	50                   	push   eax
c00167d0:	e8 07 ff ff ff       	call   c00166dc <terminateTask(int)>
c00167d5:	90                   	nop
c00167d6:	66 90                	xchg   ax,ax

c00167d8 <Semaphore::release()>:
c00167d8:	83 ec 0c             	sub    esp,0xc
c00167db:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00167df:	fa                   	cli    
c00167e0:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00167e5:	83 c0 01             	add    eax,0x1
c00167e8:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00167ed:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c00167f2:	8d 48 01             	lea    ecx,[eax+0x1]
c00167f5:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c00167fb:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00167fe:	85 c9                	test   ecx,ecx
c0016800:	74 42                	je     c0016844 <Semaphore::release()+0x6c>
c0016802:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0016805:	83 ec 0c             	sub    esp,0xc
c0016808:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001680b:	51                   	push   ecx
c001680c:	e8 43 fa ff ff       	call   c0016254 <unblockTask(ThreadControlBlock*)>
c0016811:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0016816:	83 c4 10             	add    esp,0x10
c0016819:	83 e8 01             	sub    eax,0x1
c001681c:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0016821:	85 c0                	test   eax,eax
c0016823:	75 0b                	jne    c0016830 <Semaphore::release()+0x58>
c0016825:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c001682a:	85 c0                	test   eax,eax
c001682c:	75 22                	jne    c0016850 <Semaphore::release()+0x78>
c001682e:	66 90                	xchg   ax,ax
c0016830:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016835:	83 e8 01             	sub    eax,0x1
c0016838:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001683d:	75 01                	jne    c0016840 <Semaphore::release()+0x68>
c001683f:	fb                   	sti    
c0016840:	83 c4 0c             	add    esp,0xc
c0016843:	c3                   	ret    
c0016844:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0016847:	83 e9 01             	sub    ecx,0x1
c001684a:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001684d:	eb cd                	jmp    c001681c <Semaphore::release()+0x44>
c001684f:	90                   	nop
c0016850:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c001685a:	e8 dd f4 ff ff       	call   c0015d3c <schedule()>
c001685f:	eb cf                	jmp    c0016830 <Semaphore::release()+0x58>
c0016861:	8d 76 00             	lea    esi,[esi+0x0]

c0016864 <__static_initialization_and_destruction_0(int, int)>:
c0016864:	83 ec 0c             	sub    esp,0xc
c0016867:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001686c:	0f 85 8e 00 00 00    	jne    c0016900 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016872:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001687a:	0f 85 80 00 00 00    	jne    c0016900 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016880:	83 ec 0c             	sub    esp,0xc
c0016883:	68 e4 96 02 c0       	push   0xc00296e4
c0016888:	e8 87 94 00 00       	call   c001fd14 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001688d:	83 c4 10             	add    esp,0x10
c0016890:	83 ec 04             	sub    esp,0x4
c0016893:	68 f0 31 02 c0       	push   0xc00231f0
c0016898:	68 e4 96 02 c0       	push   0xc00296e4
c001689d:	68 c4 fc 01 c0       	push   0xc001fcc4
c00168a2:	e8 21 3f ff ff       	call   c000a7c8 <__cxa_atexit>
c00168a7:	83 c4 10             	add    esp,0x10
c00168aa:	83 ec 0c             	sub    esp,0xc
c00168ad:	68 d8 96 02 c0       	push   0xc00296d8
c00168b2:	e8 5d 94 00 00       	call   c001fd14 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00168b7:	83 c4 10             	add    esp,0x10
c00168ba:	83 ec 04             	sub    esp,0x4
c00168bd:	68 f0 31 02 c0       	push   0xc00231f0
c00168c2:	68 d8 96 02 c0       	push   0xc00296d8
c00168c7:	68 c4 fc 01 c0       	push   0xc001fcc4
c00168cc:	e8 f7 3e ff ff       	call   c000a7c8 <__cxa_atexit>
c00168d1:	83 c4 10             	add    esp,0x10
c00168d4:	83 ec 0c             	sub    esp,0xc
c00168d7:	68 cc 96 02 c0       	push   0xc00296cc
c00168dc:	e8 33 94 00 00       	call   c001fd14 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00168e1:	83 c4 10             	add    esp,0x10
c00168e4:	83 ec 04             	sub    esp,0x4
c00168e7:	68 f0 31 02 c0       	push   0xc00231f0
c00168ec:	68 cc 96 02 c0       	push   0xc00296cc
c00168f1:	68 c4 fc 01 c0       	push   0xc001fcc4
c00168f6:	e8 cd 3e ff ff       	call   c000a7c8 <__cxa_atexit>
c00168fb:	83 c4 10             	add    esp,0x10
c00168fe:	66 90                	xchg   ax,ax
c0016900:	90                   	nop
c0016901:	83 c4 0c             	add    esp,0xc
c0016904:	c3                   	ret    
c0016905:	8d 76 00             	lea    esi,[esi+0x0]

c0016908 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0016908:	83 ec 0c             	sub    esp,0xc
c001690b:	83 ec 08             	sub    esp,0x8
c001690e:	68 ff ff 00 00       	push   0xffff
c0016913:	6a 01                	push   0x1
c0016915:	e8 4a ff ff ff       	call   c0016864 <__static_initialization_and_destruction_0(int, int)>
c001691a:	83 c4 10             	add    esp,0x10
c001691d:	83 c4 0c             	add    esp,0xc
c0016920:	c3                   	ret    

c0016921 <Vm::inbv(unsigned short)>:
c0016921:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016925:	66 81 fa fe fe       	cmp    dx,0xfefe
c001692a:	75 06                	jne    c0016932 <Vm::inbv(unsigned short)+0x11>
c001692c:	a0 2c 97 02 c0       	mov    al,ds:0xc002972c
c0016931:	c3                   	ret    
c0016932:	ec                   	in     al,dx
c0016933:	c3                   	ret    

c0016934 <Vm::outbv(unsigned short, unsigned char)>:
c0016934:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016938:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001693c:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016941:	75 25                	jne    c0016968 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0016943:	8b 0d 2c 97 02 c0    	mov    ecx,DWORD PTR ds:0xc002972c
c0016949:	8d 51 01             	lea    edx,[ecx+0x1]
c001694c:	88 81 40 97 02 c0    	mov    BYTE PTR [ecx-0x3ffd68c0],al
c0016952:	89 15 2c 97 02 c0    	mov    DWORD PTR ds:0xc002972c,edx
c0016958:	83 fa 20             	cmp    edx,0x20
c001695b:	75 0c                	jne    c0016969 <Vm::outbv(unsigned short, unsigned char)+0x35>
c001695d:	c7 05 2c 97 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002972c,0x1f
c0016967:	c3                   	ret    
c0016968:	ee                   	out    dx,al
c0016969:	c3                   	ret    

c001696a <Vm::realToLinear(unsigned short, unsigned short)>:
c001696a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001696f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016974:	c1 e0 04             	shl    eax,0x4
c0016977:	01 d0                	add    eax,edx
c0016979:	c3                   	ret    

c001697a <Vm::getSegment(unsigned int)>:
c001697a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001697e:	c1 e8 10             	shr    eax,0x10
c0016981:	c3                   	ret    

c0016982 <Vm::getOffset(unsigned int)>:
c0016982:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016986:	c3                   	ret    

c0016987 <Vm::mainloop2()>:
c0016987:	83 ec 18             	sub    esp,0x18
c001698a:	fa                   	cli    
c001698b:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0016991:	6a 02                	push   0x2
c0016993:	c6 05 25 97 02 c0 01 	mov    BYTE PTR ds:0xc0029725,0x1
c001699a:	e8 89 f5 ff ff       	call   c0015f28 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001699f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00169a4:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c00169a8:	52                   	push   edx
c00169a9:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c00169ad:	52                   	push   edx
c00169ae:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c00169b2:	52                   	push   edx
c00169b3:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c00169b7:	50                   	push   eax
c00169b8:	e8 52 98 fe ff       	call   c000020f <goToVM86>
c00169bd:	83 c4 2c             	add    esp,0x2c
c00169c0:	c3                   	ret    

c00169c1 <Vm::mainVm8086Loop(void*)>:
c00169c1:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00169c6:	48                   	dec    eax
c00169c7:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00169cc:	75 01                	jne    c00169cf <Vm::mainVm8086Loop(void*)+0xe>
c00169ce:	fb                   	sti    
c00169cf:	eb b6                	jmp    c0016987 <Vm::mainloop2()>

c00169d1 <Vm::mainloop3(unsigned long)>:
c00169d1:	83 ec 18             	sub    esp,0x18
c00169d4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00169d8:	fa                   	cli    
c00169d9:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c00169df:	6a 02                	push   0x2
c00169e1:	c6 05 24 97 02 c0 01 	mov    BYTE PTR ds:0xc0029724,0x1
c00169e8:	a3 20 97 02 c0       	mov    ds:0xc0029720,eax
c00169ed:	e8 36 f5 ff ff       	call   c0015f28 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00169f2:	83 c4 1c             	add    esp,0x1c
c00169f5:	eb 90                	jmp    c0016987 <Vm::mainloop2()>

c00169f7 <Vm::initialise8086()>:
c00169f7:	83 ec 0c             	sub    esp,0xc
c00169fa:	68 80 00 00 00       	push   0x80
c00169ff:	6a 00                	push   0x0
c0016a01:	68 c1 69 01 c0       	push   0xc00169c1
c0016a06:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0016a0c:	e8 db f0 ff ff       	call   c0015aec <Process::createThread(void (*)(void*), void*, int)>
c0016a11:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0016a18:	a3 28 97 02 c0       	mov    ds:0xc0029728,eax
c0016a1d:	68 00 01 00 00       	push   0x100
c0016a22:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0016a27:	6a 00                	push   0x0
c0016a29:	6a 00                	push   0x0
c0016a2b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016a31:	e8 e4 34 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016a36:	83 c4 2c             	add    esp,0x2c
c0016a39:	c3                   	ret    

c0016a3a <Vm::finish8086()>:
c0016a3a:	53                   	push   ebx
c0016a3b:	83 ec 08             	sub    esp,0x8
c0016a3e:	fa                   	cli    
c0016a3f:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0016a45:	80 3d 24 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029724,0x0
c0016a4c:	75 15                	jne    c0016a63 <Vm::finish8086()+0x29>
c0016a4e:	e8 e9 f2 ff ff       	call   c0015d3c <schedule()>
c0016a53:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016a58:	48                   	dec    eax
c0016a59:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016a5e:	75 de                	jne    c0016a3e <Vm::finish8086()+0x4>
c0016a60:	fb                   	sti    
c0016a61:	eb db                	jmp    c0016a3e <Vm::finish8086()+0x4>
c0016a63:	83 ec 0c             	sub    esp,0xc
c0016a66:	8b 1d 20 97 02 c0    	mov    ebx,DWORD PTR ds:0xc0029720
c0016a6c:	ff 35 28 97 02 c0    	push   DWORD PTR ds:0xc0029728
c0016a72:	c6 05 24 97 02 c0 00 	mov    BYTE PTR ds:0xc0029724,0x0
c0016a79:	e8 d6 f7 ff ff       	call   c0016254 <unblockTask(ThreadControlBlock*)>
c0016a7e:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016a83:	83 c4 10             	add    esp,0x10
c0016a86:	8d 50 ff             	lea    edx,[eax-0x1]
c0016a89:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0016a8f:	85 d2                	test   edx,edx
c0016a91:	75 01                	jne    c0016a94 <Vm::finish8086()+0x5a>
c0016a93:	fb                   	sti    
c0016a94:	89 d8                	mov    eax,ebx
c0016a96:	83 c4 08             	add    esp,0x8
c0016a99:	5b                   	pop    ebx
c0016a9a:	c3                   	ret    

c0016a9b <Vm::getOutput8086(unsigned char*)>:
c0016a9b:	57                   	push   edi
c0016a9c:	8b 0d 2c 97 02 c0    	mov    ecx,DWORD PTR ds:0xc002972c
c0016aa2:	56                   	push   esi
c0016aa3:	be 40 97 02 c0       	mov    esi,0xc0029740
c0016aa8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0016aac:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016aae:	a1 2c 97 02 c0       	mov    eax,ds:0xc002972c
c0016ab3:	5e                   	pop    esi
c0016ab4:	c7 05 2c 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002972c,0x0
c0016abe:	5f                   	pop    edi
c0016abf:	c3                   	ret    

c0016ac0 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016ac0:	55                   	push   ebp
c0016ac1:	57                   	push   edi
c0016ac2:	56                   	push   esi
c0016ac3:	53                   	push   ebx
c0016ac4:	83 ec 0c             	sub    esp,0xc
c0016ac7:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0016acb:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0016acf:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016ad3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0016ad7:	fa                   	cli    
c0016ad8:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0016ade:	80 3d 25 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029725,0x0
c0016ae5:	75 15                	jne    c0016afc <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0016ae7:	e8 50 f2 ff ff       	call   c0015d3c <schedule()>
c0016aec:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016af1:	48                   	dec    eax
c0016af2:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016af7:	75 de                	jne    c0016ad7 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016af9:	fb                   	sti    
c0016afa:	eb db                	jmp    c0016ad7 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016afc:	a1 28 97 02 c0       	mov    eax,ds:0xc0029728
c0016b01:	c7 05 2c 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002972c,0x0
c0016b0b:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016b0f:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016b13:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016b17:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0016b1b:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016b1f:	0f b7 ff             	movzx  edi,di
c0016b22:	0f b7 f6             	movzx  esi,si
c0016b25:	50                   	push   eax
c0016b26:	6a 20                	push   0x20
c0016b28:	6a 00                	push   0x0
c0016b2a:	68 40 97 02 c0       	push   0xc0029740
c0016b2f:	e8 bc 99 fe ff       	call   c00004f0 <memset>
c0016b34:	5a                   	pop    edx
c0016b35:	59                   	pop    ecx
c0016b36:	57                   	push   edi
c0016b37:	56                   	push   esi
c0016b38:	e8 2d fe ff ff       	call   c001696a <Vm::realToLinear(unsigned short, unsigned short)>
c0016b3d:	83 c4 10             	add    esp,0x10
c0016b40:	89 c7                	mov    edi,eax
c0016b42:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016b46:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0016b4a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016b4c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016b51:	c6 05 25 97 02 c0 00 	mov    BYTE PTR ds:0xc0029725,0x0
c0016b58:	48                   	dec    eax
c0016b59:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016b5e:	75 01                	jne    c0016b61 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0016b60:	fb                   	sti    
c0016b61:	83 ec 0c             	sub    esp,0xc
c0016b64:	ff 35 28 97 02 c0    	push   DWORD PTR ds:0xc0029728
c0016b6a:	e8 e5 f6 ff ff       	call   c0016254 <unblockTask(ThreadControlBlock*)>
c0016b6f:	83 c4 1c             	add    esp,0x1c
c0016b72:	b0 01                	mov    al,0x1
c0016b74:	5b                   	pop    ebx
c0016b75:	5e                   	pop    esi
c0016b76:	5f                   	pop    edi
c0016b77:	5d                   	pop    ebp
c0016b78:	c3                   	ret    

c0016b79 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016b79:	55                   	push   ebp
c0016b7a:	57                   	push   edi
c0016b7b:	56                   	push   esi
c0016b7c:	53                   	push   ebx
c0016b7d:	83 ec 34             	sub    esp,0x34
c0016b80:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0016b84:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0016b88:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0016b8c:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c0016b90:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016b94:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016b98:	68 48 26 02 c0       	push   0xc0022648
c0016b9d:	e8 a3 3d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0016ba2:	83 c4 10             	add    esp,0x10
c0016ba5:	fa                   	cli    
c0016ba6:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0016bac:	8a 1d 25 97 02 c0    	mov    bl,BYTE PTR ds:0xc0029725
c0016bb2:	84 db                	test   bl,bl
c0016bb4:	75 15                	jne    c0016bcb <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x52>
c0016bb6:	e8 81 f1 ff ff       	call   c0015d3c <schedule()>
c0016bbb:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016bc0:	48                   	dec    eax
c0016bc1:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016bc6:	75 dd                	jne    c0016ba5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0016bc8:	fb                   	sti    
c0016bc9:	eb da                	jmp    c0016ba5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0016bcb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016bcf:	a1 28 97 02 c0       	mov    eax,ds:0xc0029728
c0016bd4:	c7 05 2c 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002972c,0x0
c0016bde:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c0016be2:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016be6:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016bea:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016bee:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016bf2:	50                   	push   eax
c0016bf3:	6a 20                	push   0x20
c0016bf5:	6a 00                	push   0x0
c0016bf7:	68 40 97 02 c0       	push   0xc0029740
c0016bfc:	e8 ef 98 fe ff       	call   c00004f0 <memset>
c0016c01:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0016c08:	e8 a9 0e ff ff       	call   c0007ab6 <malloc>
c0016c0d:	83 c4 0c             	add    esp,0xc
c0016c10:	89 c5                	mov    ebp,eax
c0016c12:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0016c18:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016c1c:	50                   	push   eax
c0016c1d:	e8 ae 4c ff ff       	call   c000b8d0 <File::File(char const*, Process*)>
c0016c22:	83 c4 10             	add    esp,0x10
c0016c25:	85 ed                	test   ebp,ebp
c0016c27:	75 0a                	jne    c0016c33 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xba>
c0016c29:	83 ec 0c             	sub    esp,0xc
c0016c2c:	68 6a 26 02 c0       	push   0xc002266a
c0016c31:	eb 2b                	jmp    c0016c5e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe5>
c0016c33:	50                   	push   eax
c0016c34:	8d 44 24 17          	lea    eax,[esp+0x17]
c0016c38:	50                   	push   eax
c0016c39:	8d 44 24 20          	lea    eax,[esp+0x20]
c0016c3d:	50                   	push   eax
c0016c3e:	55                   	push   ebp
c0016c3f:	e8 ac 4f ff ff       	call   c000bbf0 <File::stat(unsigned long long*, bool*)>
c0016c44:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0016c48:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0016c4c:	83 c4 10             	add    esp,0x10
c0016c4f:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0016c54:	74 27                	je     c0016c7d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x104>
c0016c56:	83 ec 0c             	sub    esp,0xc
c0016c59:	68 7e 26 02 c0       	push   0xc002267e
c0016c5e:	e8 16 a7 ff ff       	call   c0011379 <KePanic(char const*)>
c0016c63:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016c68:	83 c4 10             	add    esp,0x10
c0016c6b:	48                   	dec    eax
c0016c6c:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016c71:	85 c0                	test   eax,eax
c0016c73:	75 01                	jne    c0016c76 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0016c75:	fb                   	sti    
c0016c76:	31 db                	xor    ebx,ebx
c0016c78:	e9 90 00 00 00       	jmp    c0016d0d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0016c7d:	51                   	push   ecx
c0016c7e:	51                   	push   ecx
c0016c7f:	6a 01                	push   0x1
c0016c81:	55                   	push   ebp
c0016c82:	e8 67 4c ff ff       	call   c000b8ee <File::open(FileOpenMode)>
c0016c87:	83 c4 10             	add    esp,0x10
c0016c8a:	85 c0                	test   eax,eax
c0016c8c:	74 26                	je     c0016cb4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x13b>
c0016c8e:	83 ec 0c             	sub    esp,0xc
c0016c91:	68 97 26 02 c0       	push   0xc0022697
c0016c96:	e8 de a6 ff ff       	call   c0011379 <KePanic(char const*)>
c0016c9b:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016ca0:	83 c4 10             	add    esp,0x10
c0016ca3:	48                   	dec    eax
c0016ca4:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016ca9:	85 c0                	test   eax,eax
c0016cab:	75 c9                	jne    c0016c76 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0016cad:	fb                   	sti    
c0016cae:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c0016cb2:	eb 59                	jmp    c0016d0d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0016cb4:	0f b7 ff             	movzx  edi,di
c0016cb7:	50                   	push   eax
c0016cb8:	0f b7 f6             	movzx  esi,si
c0016cbb:	50                   	push   eax
c0016cbc:	57                   	push   edi
c0016cbd:	56                   	push   esi
c0016cbe:	e8 a7 fc ff ff       	call   c001696a <Vm::realToLinear(unsigned short, unsigned short)>
c0016cc3:	5a                   	pop    edx
c0016cc4:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0016cc7:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0016ccb:	51                   	push   ecx
c0016ccc:	50                   	push   eax
c0016ccd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016cd1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016cd5:	55                   	push   ebp
c0016cd6:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016cd9:	83 c4 14             	add    esp,0x14
c0016cdc:	55                   	push   ebp
c0016cdd:	e8 6a 4c ff ff       	call   c000b94c <File::close()>
c0016ce2:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016ce7:	83 c4 10             	add    esp,0x10
c0016cea:	48                   	dec    eax
c0016ceb:	c6 05 25 97 02 c0 00 	mov    BYTE PTR ds:0xc0029725,0x0
c0016cf2:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016cf7:	85 c0                	test   eax,eax
c0016cf9:	75 01                	jne    c0016cfc <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c0016cfb:	fb                   	sti    
c0016cfc:	83 ec 0c             	sub    esp,0xc
c0016cff:	ff 35 28 97 02 c0    	push   DWORD PTR ds:0xc0029728
c0016d05:	e8 4a f5 ff ff       	call   c0016254 <unblockTask(ThreadControlBlock*)>
c0016d0a:	83 c4 10             	add    esp,0x10
c0016d0d:	83 c4 2c             	add    esp,0x2c
c0016d10:	88 d8                	mov    al,bl
c0016d12:	5b                   	pop    ebx
c0016d13:	5e                   	pop    esi
c0016d14:	5f                   	pop    edi
c0016d15:	5d                   	pop    ebp
c0016d16:	c3                   	ret    

c0016d17 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0016d17:	57                   	push   edi
c0016d18:	56                   	push   esi
c0016d19:	53                   	push   ebx
c0016d1a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016d1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016d22:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016d26:	83 e8 06             	sub    eax,0x6
c0016d29:	0f b7 c0             	movzx  eax,ax
c0016d2c:	50                   	push   eax
c0016d2d:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0016d32:	50                   	push   eax
c0016d33:	e8 32 fc ff ff       	call   c001696a <Vm::realToLinear(unsigned short, unsigned short)>
c0016d38:	5a                   	pop    edx
c0016d39:	8b 73 38             	mov    esi,DWORD PTR [ebx+0x38]
c0016d3c:	59                   	pop    ecx
c0016d3d:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0016d40:	8d 51 fa             	lea    edx,[ecx-0x6]
c0016d43:	81 e2 ff ff 00 00    	and    edx,0xffff
c0016d49:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0016d4c:	8d 56 02             	lea    edx,[esi+0x2]
c0016d4f:	66 89 10             	mov    WORD PTR [eax],dx
c0016d52:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c0016d56:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0016d5a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0016d5d:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c0016d61:	0f b6 f1             	movzx  esi,cl
c0016d64:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0016d68:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016d6e:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c0016d72:	0f b6 d5             	movzx  edx,ch
c0016d75:	74 0a                	je     c0016d81 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6a>
c0016d77:	c1 e2 08             	shl    edx,0x8
c0016d7a:	09 f2                	or     edx,esi
c0016d7c:	80 ce 02             	or     dh,0x2
c0016d7f:	eb 08                	jmp    c0016d89 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x72>
c0016d81:	c1 e2 08             	shl    edx,0x8
c0016d84:	09 f2                	or     edx,esi
c0016d86:	80 e6 fd             	and    dh,0xfd
c0016d89:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0016d8d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016d92:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0016d96:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c0016d9e:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0016da1:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c0016da9:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0016dac:	5b                   	pop    ebx
c0016dad:	5e                   	pop    esi
c0016dae:	5f                   	pop    edi
c0016daf:	c3                   	ret    

c0016db0 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0016db0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016db5:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016dba:	c1 e0 04             	shl    eax,0x4
c0016dbd:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0016dc0:	c3                   	ret    

c0016dc1 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0016dc1:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016dc6:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016dcb:	c1 e0 04             	shl    eax,0x4
c0016dce:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0016dd2:	c3                   	ret    

c0016dd3 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0016dd3:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016dd8:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016ddd:	c1 e0 04             	shl    eax,0x4
c0016de0:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0016de3:	c3                   	ret    

c0016de4 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0016de4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016de9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016dee:	c1 e0 04             	shl    eax,0x4
c0016df1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016df5:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0016df8:	c3                   	ret    

c0016df9 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0016df9:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016dfe:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016e03:	c1 e0 04             	shl    eax,0x4
c0016e06:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016e0a:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0016e0e:	c3                   	ret    

c0016e0f <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0016e0f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016e14:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016e19:	c1 e0 04             	shl    eax,0x4
c0016e1c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016e20:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0016e23:	c3                   	ret    

c0016e24 <Vm::faultHandler(regs*)>:
c0016e24:	55                   	push   ebp
c0016e25:	57                   	push   edi
c0016e26:	56                   	push   esi
c0016e27:	53                   	push   ebx
c0016e28:	83 ec 2c             	sub    esp,0x2c
c0016e2b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016e2f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016e32:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0016e36:	0f b7 f8             	movzx  edi,ax
c0016e39:	52                   	push   edx
c0016e3a:	0f b7 c0             	movzx  eax,ax
c0016e3d:	50                   	push   eax
c0016e3e:	e8 27 fb ff ff       	call   c001696a <Vm::realToLinear(unsigned short, unsigned short)>
c0016e43:	5a                   	pop    edx
c0016e44:	59                   	pop    ecx
c0016e45:	89 c1                	mov    ecx,eax
c0016e47:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016e4a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016e4e:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c0016e53:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016e57:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0016e5a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016e5e:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c0016e63:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016e67:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016e6b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016e6f:	e8 f6 fa ff ff       	call   c001696a <Vm::realToLinear(unsigned short, unsigned short)>
c0016e74:	5e                   	pop    esi
c0016e75:	be 06 00 00 00       	mov    esi,0x6
c0016e7a:	5d                   	pop    ebp
c0016e7b:	31 ed                	xor    ebp,ebp
c0016e7d:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0016e82:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0016e85:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c0016e8b:	0f 84 74 02 00 00    	je     c0017105 <Vm::faultHandler(regs*)+0x2e1>
c0016e91:	0f 87 94 00 00 00    	ja     c0016f2b <Vm::faultHandler(regs*)+0x107>
c0016e97:	83 fa 66             	cmp    edx,0x66
c0016e9a:	0f 84 e2 01 00 00    	je     c0017082 <Vm::faultHandler(regs*)+0x25e>
c0016ea0:	77 47                	ja     c0016ee9 <Vm::faultHandler(regs*)+0xc5>
c0016ea2:	83 fa 36             	cmp    edx,0x36
c0016ea5:	0f 84 ca 01 00 00    	je     c0017075 <Vm::faultHandler(regs*)+0x251>
c0016eab:	77 1a                	ja     c0016ec7 <Vm::faultHandler(regs*)+0xa3>
c0016ead:	83 fa 26             	cmp    edx,0x26
c0016eb0:	0f 84 98 01 00 00    	je     c001704e <Vm::faultHandler(regs*)+0x22a>
c0016eb6:	83 fa 2e             	cmp    edx,0x2e
c0016eb9:	0f 85 21 06 00 00    	jne    c00174e0 <Vm::faultHandler(regs*)+0x6bc>
c0016ebf:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016ec2:	31 f6                	xor    esi,esi
c0016ec4:	41                   	inc    ecx
c0016ec5:	eb bb                	jmp    c0016e82 <Vm::faultHandler(regs*)+0x5e>
c0016ec7:	83 fa 64             	cmp    edx,0x64
c0016eca:	0f 84 8b 01 00 00    	je     c001705b <Vm::faultHandler(regs*)+0x237>
c0016ed0:	0f 87 92 01 00 00    	ja     c0017068 <Vm::faultHandler(regs*)+0x244>
c0016ed6:	83 fa 3e             	cmp    edx,0x3e
c0016ed9:	0f 85 01 06 00 00    	jne    c00174e0 <Vm::faultHandler(regs*)+0x6bc>
c0016edf:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016ee2:	be 01 00 00 00       	mov    esi,0x1
c0016ee7:	eb db                	jmp    c0016ec4 <Vm::faultHandler(regs*)+0xa0>
c0016ee9:	83 fa 6d             	cmp    edx,0x6d
c0016eec:	0f 84 34 03 00 00    	je     c0017226 <Vm::faultHandler(regs*)+0x402>
c0016ef2:	77 17                	ja     c0016f0b <Vm::faultHandler(regs*)+0xe7>
c0016ef4:	83 fa 67             	cmp    edx,0x67
c0016ef7:	0f 84 92 01 00 00    	je     c001708f <Vm::faultHandler(regs*)+0x26b>
c0016efd:	83 fa 6c             	cmp    edx,0x6c
c0016f00:	0f 84 b1 02 00 00    	je     c00171b7 <Vm::faultHandler(regs*)+0x393>
c0016f06:	e9 d5 05 00 00       	jmp    c00174e0 <Vm::faultHandler(regs*)+0x6bc>
c0016f0b:	83 fa 6f             	cmp    edx,0x6f
c0016f0e:	0f 84 3d 04 00 00    	je     c0017351 <Vm::faultHandler(regs*)+0x52d>
c0016f14:	0f 82 9f 03 00 00    	jb     c00172b9 <Vm::faultHandler(regs*)+0x495>
c0016f1a:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c0016f20:	0f 84 76 01 00 00    	je     c001709c <Vm::faultHandler(regs*)+0x278>
c0016f26:	e9 b5 05 00 00       	jmp    c00174e0 <Vm::faultHandler(regs*)+0x6bc>
c0016f2b:	81 fa ec 00 00 00    	cmp    edx,0xec
c0016f31:	0f 84 51 05 00 00    	je     c0017488 <Vm::faultHandler(regs*)+0x664>
c0016f37:	0f 87 a9 00 00 00    	ja     c0016fe6 <Vm::faultHandler(regs*)+0x1c2>
c0016f3d:	81 fa e4 00 00 00    	cmp    edx,0xe4
c0016f43:	0f 84 d0 04 00 00    	je     c0017419 <Vm::faultHandler(regs*)+0x5f5>
c0016f49:	77 78                	ja     c0016fc3 <Vm::faultHandler(regs*)+0x19f>
c0016f4b:	81 fa cd 00 00 00    	cmp    edx,0xcd
c0016f51:	0f 84 0e 02 00 00    	je     c0017165 <Vm::faultHandler(regs*)+0x341>
c0016f57:	81 fa cf 00 00 00    	cmp    edx,0xcf
c0016f5d:	0f 85 7d 05 00 00    	jne    c00174e0 <Vm::faultHandler(regs*)+0x6bc>
c0016f63:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0016f67:	89 d1                	mov    ecx,edx
c0016f69:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0016f6c:	c1 e1 08             	shl    ecx,0x8
c0016f6f:	09 ca                	or     edx,ecx
c0016f71:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0016f74:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0016f78:	89 d1                	mov    ecx,edx
c0016f7a:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0016f7e:	c1 e1 08             	shl    ecx,0x8
c0016f81:	09 ca                	or     edx,ecx
c0016f83:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0016f86:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c0016f8a:	89 d1                	mov    ecx,edx
c0016f8c:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c0016f90:	c1 e1 08             	shl    ecx,0x8
c0016f93:	09 ca                	or     edx,ecx
c0016f95:	81 ca 00 02 02 00    	or     edx,0x20200
c0016f9b:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016f9e:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c0016fa2:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016fa8:	d1 e8                	shr    eax,1
c0016faa:	83 e0 01             	and    eax,0x1
c0016fad:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016fb0:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016fb3:	83 c0 06             	add    eax,0x6
c0016fb6:	25 ff ff 00 00       	and    eax,0xffff
c0016fbb:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0016fbe:	e9 19 05 00 00       	jmp    c00174dc <Vm::faultHandler(regs*)+0x6b8>
c0016fc3:	81 fa e6 00 00 00    	cmp    edx,0xe6
c0016fc9:	0f 84 8f 04 00 00    	je     c001745e <Vm::faultHandler(regs*)+0x63a>
c0016fcf:	0f 82 60 04 00 00    	jb     c0017435 <Vm::faultHandler(regs*)+0x611>
c0016fd5:	81 fa e7 00 00 00    	cmp    edx,0xe7
c0016fdb:	0f 84 94 04 00 00    	je     c0017475 <Vm::faultHandler(regs*)+0x651>
c0016fe1:	e9 fa 04 00 00       	jmp    c00174e0 <Vm::faultHandler(regs*)+0x6bc>
c0016fe6:	81 fa ef 00 00 00    	cmp    edx,0xef
c0016fec:	0f 84 d7 04 00 00    	je     c00174c9 <Vm::faultHandler(regs*)+0x6a5>
c0016ff2:	77 2e                	ja     c0017022 <Vm::faultHandler(regs*)+0x1fe>
c0016ff4:	81 fa ed 00 00 00    	cmp    edx,0xed
c0016ffa:	0f 84 a4 04 00 00    	je     c00174a4 <Vm::faultHandler(regs*)+0x680>
c0017000:	81 fa ee 00 00 00    	cmp    edx,0xee
c0017006:	0f 85 d4 04 00 00    	jne    c00174e0 <Vm::faultHandler(regs*)+0x6bc>
c001700c:	50                   	push   eax
c001700d:	50                   	push   eax
c001700e:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0017012:	50                   	push   eax
c0017013:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017017:	50                   	push   eax
c0017018:	e8 17 f9 ff ff       	call   c0016934 <Vm::outbv(unsigned short, unsigned char)>
c001701d:	e9 9f 04 00 00       	jmp    c00174c1 <Vm::faultHandler(regs*)+0x69d>
c0017022:	81 fa fa 00 00 00    	cmp    edx,0xfa
c0017028:	0f 84 6d 01 00 00    	je     c001719b <Vm::faultHandler(regs*)+0x377>
c001702e:	81 fa fb 00 00 00    	cmp    edx,0xfb
c0017034:	0f 84 6f 01 00 00    	je     c00171a9 <Vm::faultHandler(regs*)+0x385>
c001703a:	81 fa f3 00 00 00    	cmp    edx,0xf3
c0017040:	0f 85 9a 04 00 00    	jne    c00174e0 <Vm::faultHandler(regs*)+0x6bc>
c0017046:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017049:	e9 76 fe ff ff       	jmp    c0016ec4 <Vm::faultHandler(regs*)+0xa0>
c001704e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017051:	be 02 00 00 00       	mov    esi,0x2
c0017056:	e9 69 fe ff ff       	jmp    c0016ec4 <Vm::faultHandler(regs*)+0xa0>
c001705b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001705e:	be 03 00 00 00       	mov    esi,0x3
c0017063:	e9 5c fe ff ff       	jmp    c0016ec4 <Vm::faultHandler(regs*)+0xa0>
c0017068:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001706b:	be 04 00 00 00       	mov    esi,0x4
c0017070:	e9 4f fe ff ff       	jmp    c0016ec4 <Vm::faultHandler(regs*)+0xa0>
c0017075:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017078:	be 05 00 00 00       	mov    esi,0x5
c001707d:	e9 42 fe ff ff       	jmp    c0016ec4 <Vm::faultHandler(regs*)+0xa0>
c0017082:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017085:	bd 01 00 00 00       	mov    ebp,0x1
c001708a:	e9 35 fe ff ff       	jmp    c0016ec4 <Vm::faultHandler(regs*)+0xa0>
c001708f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017092:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0017097:	e9 28 fe ff ff       	jmp    c0016ec4 <Vm::faultHandler(regs*)+0xa0>
c001709c:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001709f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00170a3:	83 e5 01             	and    ebp,0x1
c00170a6:	74 30                	je     c00170d8 <Vm::faultHandler(regs*)+0x2b4>
c00170a8:	83 e9 04             	sub    ecx,0x4
c00170ab:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00170b1:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00170b7:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00170ba:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00170bd:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00170c3:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00170c7:	0f 84 0c 04 00 00    	je     c00174d9 <Vm::faultHandler(regs*)+0x6b5>
c00170cd:	80 ce 02             	or     dh,0x2
c00170d0:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00170d3:	e9 01 04 00 00       	jmp    c00174d9 <Vm::faultHandler(regs*)+0x6b5>
c00170d8:	83 e9 02             	sub    ecx,0x2
c00170db:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00170e1:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00170e4:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00170e8:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00170ee:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00170f2:	74 05                	je     c00170f9 <Vm::faultHandler(regs*)+0x2d5>
c00170f4:	80 ce 02             	or     dh,0x2
c00170f7:	eb 03                	jmp    c00170fc <Vm::faultHandler(regs*)+0x2d8>
c00170f9:	80 e6 fd             	and    dh,0xfd
c00170fc:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0017100:	e9 d4 03 00 00       	jmp    c00174d9 <Vm::faultHandler(regs*)+0x6b5>
c0017105:	83 e5 01             	and    ebp,0x1
c0017108:	74 2a                	je     c0017134 <Vm::faultHandler(regs*)+0x310>
c001710a:	8b 10                	mov    edx,DWORD PTR [eax]
c001710c:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0017112:	81 ca 00 02 02 00    	or     edx,0x20200
c0017118:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001711b:	8b 00                	mov    eax,DWORD PTR [eax]
c001711d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017123:	c1 e8 09             	shr    eax,0x9
c0017126:	83 e0 01             	and    eax,0x1
c0017129:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001712c:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001712f:	83 c0 04             	add    eax,0x4
c0017132:	eb 24                	jmp    c0017158 <Vm::faultHandler(regs*)+0x334>
c0017134:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0017137:	81 ca 00 02 02 00    	or     edx,0x20200
c001713d:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0017140:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0017143:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017149:	c1 e8 09             	shr    eax,0x9
c001714c:	83 e0 01             	and    eax,0x1
c001714f:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0017152:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0017155:	83 c0 02             	add    eax,0x2
c0017158:	25 ff ff 00 00       	and    eax,0xffff
c001715d:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0017160:	e9 74 03 00 00       	jmp    c00174d9 <Vm::faultHandler(regs*)+0x6b5>
c0017165:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017169:	3d ee 00 00 00       	cmp    eax,0xee
c001716e:	75 10                	jne    c0017180 <Vm::faultHandler(regs*)+0x35c>
c0017170:	83 ec 0c             	sub    esp,0xc
c0017173:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0017176:	e8 56 f8 ff ff       	call   c00169d1 <Vm::mainloop3(unsigned long)>
c001717b:	e9 44 03 00 00       	jmp    c00174c4 <Vm::faultHandler(regs*)+0x6a0>
c0017180:	83 ec 0c             	sub    esp,0xc
c0017183:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017187:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001718b:	51                   	push   ecx
c001718c:	50                   	push   eax
c001718d:	53                   	push   ebx
c001718e:	e8 84 fb ff ff       	call   c0016d17 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0017193:	83 c4 20             	add    esp,0x20
c0017196:	e9 41 03 00 00       	jmp    c00174dc <Vm::faultHandler(regs*)+0x6b8>
c001719b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00171a0:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00171a4:	e9 30 03 00 00       	jmp    c00174d9 <Vm::faultHandler(regs*)+0x6b5>
c00171a9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00171ae:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c00171b2:	e9 22 03 00 00       	jmp    c00174d9 <Vm::faultHandler(regs*)+0x6b5>
c00171b7:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00171ba:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00171bf:	74 2b                	je     c00171ec <Vm::faultHandler(regs*)+0x3c8>
c00171c1:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c00171c8:	76 22                	jbe    c00171ec <Vm::faultHandler(regs*)+0x3c8>
c00171ca:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00171ce:	50                   	push   eax
c00171cf:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00171d3:	50                   	push   eax
c00171d4:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00171d8:	50                   	push   eax
c00171d9:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00171dd:	50                   	push   eax
c00171de:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00171e2:	50                   	push   eax
c00171e3:	6a 6c                	push   0x6c
c00171e5:	6a 6c                	push   0x6c
c00171e7:	e9 bd 01 00 00       	jmp    c00173a9 <Vm::faultHandler(regs*)+0x585>
c00171ec:	83 ec 0c             	sub    esp,0xc
c00171ef:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00171f3:	0f b7 f6             	movzx  esi,si
c00171f6:	50                   	push   eax
c00171f7:	e8 25 f7 ff ff       	call   c0016921 <Vm::inbv(unsigned short)>
c00171fc:	83 c4 0c             	add    esp,0xc
c00171ff:	0f b6 c0             	movzx  eax,al
c0017202:	50                   	push   eax
c0017203:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0017207:	50                   	push   eax
c0017208:	56                   	push   esi
c0017209:	e8 d6 fb ff ff       	call   c0016de4 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001720e:	83 c4 10             	add    esp,0x10
c0017211:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017214:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017218:	74 03                	je     c001721d <Vm::faultHandler(regs*)+0x3f9>
c001721a:	48                   	dec    eax
c001721b:	eb 01                	jmp    c001721e <Vm::faultHandler(regs*)+0x3fa>
c001721d:	40                   	inc    eax
c001721e:	0f b7 c0             	movzx  eax,ax
c0017221:	e9 8b 00 00 00       	jmp    c00172b1 <Vm::faultHandler(regs*)+0x48d>
c0017226:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0017229:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001722c:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0017231:	74 29                	je     c001725c <Vm::faultHandler(regs*)+0x438>
c0017233:	3d ff ff 00 00       	cmp    eax,0xffff
c0017238:	76 22                	jbe    c001725c <Vm::faultHandler(regs*)+0x438>
c001723a:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001723e:	50                   	push   eax
c001723f:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017243:	50                   	push   eax
c0017244:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017248:	50                   	push   eax
c0017249:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001724d:	50                   	push   eax
c001724e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017252:	50                   	push   eax
c0017253:	6a 6d                	push   0x6d
c0017255:	6a 6d                	push   0x6d
c0017257:	e9 4d 01 00 00       	jmp    c00173a9 <Vm::faultHandler(regs*)+0x585>
c001725c:	0f b7 c8             	movzx  ecx,ax
c001725f:	0f b7 f6             	movzx  esi,si
c0017262:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017265:	83 e5 01             	and    ebp,0x1
c0017268:	74 20                	je     c001728a <Vm::faultHandler(regs*)+0x466>
c001726a:	ed                   	in     eax,dx
c001726b:	55                   	push   ebp
c001726c:	50                   	push   eax
c001726d:	51                   	push   ecx
c001726e:	56                   	push   esi
c001726f:	e8 9b fb ff ff       	call   c0016e0f <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0017274:	83 c4 10             	add    esp,0x10
c0017277:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001727a:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001727e:	74 05                	je     c0017285 <Vm::faultHandler(regs*)+0x461>
c0017280:	83 e8 04             	sub    eax,0x4
c0017283:	eb 27                	jmp    c00172ac <Vm::faultHandler(regs*)+0x488>
c0017285:	83 c0 04             	add    eax,0x4
c0017288:	eb 22                	jmp    c00172ac <Vm::faultHandler(regs*)+0x488>
c001728a:	66 ed                	in     ax,dx
c001728c:	0f b7 c0             	movzx  eax,ax
c001728f:	57                   	push   edi
c0017290:	50                   	push   eax
c0017291:	51                   	push   ecx
c0017292:	56                   	push   esi
c0017293:	e8 61 fb ff ff       	call   c0016df9 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0017298:	83 c4 10             	add    esp,0x10
c001729b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001729e:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00172a2:	74 05                	je     c00172a9 <Vm::faultHandler(regs*)+0x485>
c00172a4:	83 e8 02             	sub    eax,0x2
c00172a7:	eb 03                	jmp    c00172ac <Vm::faultHandler(regs*)+0x488>
c00172a9:	83 c0 02             	add    eax,0x2
c00172ac:	25 ff ff 00 00       	and    eax,0xffff
c00172b1:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00172b4:	e9 20 02 00 00       	jmp    c00174d9 <Vm::faultHandler(regs*)+0x6b5>
c00172b9:	8d 46 ff             	lea    eax,[esi-0x1]
c00172bc:	0f b6 f0             	movzx  esi,al
c00172bf:	83 fe 05             	cmp    esi,0x5
c00172c2:	77 23                	ja     c00172e7 <Vm::faultHandler(regs*)+0x4c3>
c00172c4:	ff 24 b5 0c 27 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd8f4]
c00172cb:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c00172d0:	eb 15                	jmp    c00172e7 <Vm::faultHandler(regs*)+0x4c3>
c00172d2:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c00172d6:	eb 0f                	jmp    c00172e7 <Vm::faultHandler(regs*)+0x4c3>
c00172d8:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c00172dc:	eb 09                	jmp    c00172e7 <Vm::faultHandler(regs*)+0x4c3>
c00172de:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c00172e2:	eb 03                	jmp    c00172e7 <Vm::faultHandler(regs*)+0x4c3>
c00172e4:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c00172e7:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00172ea:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00172ef:	74 29                	je     c001731a <Vm::faultHandler(regs*)+0x4f6>
c00172f1:	3d ff ff 00 00       	cmp    eax,0xffff
c00172f6:	76 22                	jbe    c001731a <Vm::faultHandler(regs*)+0x4f6>
c00172f8:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00172fc:	50                   	push   eax
c00172fd:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017301:	50                   	push   eax
c0017302:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017306:	50                   	push   eax
c0017307:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001730b:	50                   	push   eax
c001730c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017310:	50                   	push   eax
c0017311:	6a 6e                	push   0x6e
c0017313:	6a 6e                	push   0x6e
c0017315:	e9 8f 00 00 00       	jmp    c00173a9 <Vm::faultHandler(regs*)+0x585>
c001731a:	0f b7 c0             	movzx  eax,ax
c001731d:	52                   	push   edx
c001731e:	52                   	push   edx
c001731f:	50                   	push   eax
c0017320:	57                   	push   edi
c0017321:	e8 8a fa ff ff       	call   c0016db0 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0017326:	59                   	pop    ecx
c0017327:	0f b6 c0             	movzx  eax,al
c001732a:	5e                   	pop    esi
c001732b:	50                   	push   eax
c001732c:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017330:	50                   	push   eax
c0017331:	e8 fe f5 ff ff       	call   c0016934 <Vm::outbv(unsigned short, unsigned char)>
c0017336:	83 c4 10             	add    esp,0x10
c0017339:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001733c:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017340:	74 03                	je     c0017345 <Vm::faultHandler(regs*)+0x521>
c0017342:	48                   	dec    eax
c0017343:	eb 01                	jmp    c0017346 <Vm::faultHandler(regs*)+0x522>
c0017345:	40                   	inc    eax
c0017346:	0f b7 c0             	movzx  eax,ax
c0017349:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001734c:	e9 88 01 00 00       	jmp    c00174d9 <Vm::faultHandler(regs*)+0x6b5>
c0017351:	8d 46 ff             	lea    eax,[esi-0x1]
c0017354:	0f b6 f0             	movzx  esi,al
c0017357:	83 fe 05             	cmp    esi,0x5
c001735a:	77 1e                	ja     c001737a <Vm::faultHandler(regs*)+0x556>
c001735c:	ff 24 b5 24 27 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd8dc]
c0017363:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017367:	eb 11                	jmp    c001737a <Vm::faultHandler(regs*)+0x556>
c0017369:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001736c:	eb 0c                	jmp    c001737a <Vm::faultHandler(regs*)+0x556>
c001736e:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0017371:	eb 07                	jmp    c001737a <Vm::faultHandler(regs*)+0x556>
c0017373:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0017376:	eb 02                	jmp    c001737a <Vm::faultHandler(regs*)+0x556>
c0017378:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001737a:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001737d:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0017382:	74 37                	je     c00173bb <Vm::faultHandler(regs*)+0x597>
c0017384:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001738a:	76 2f                	jbe    c00173bb <Vm::faultHandler(regs*)+0x597>
c001738c:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017390:	50                   	push   eax
c0017391:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017395:	50                   	push   eax
c0017396:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001739a:	50                   	push   eax
c001739b:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001739f:	50                   	push   eax
c00173a0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00173a4:	50                   	push   eax
c00173a5:	6a 6f                	push   0x6f
c00173a7:	6a 6f                	push   0x6f
c00173a9:	68 b0 26 02 c0       	push   0xc00226b0
c00173ae:	e8 92 35 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00173b3:	83 c4 20             	add    esp,0x20
c00173b6:	e9 83 01 00 00       	jmp    c001753e <Vm::faultHandler(regs*)+0x71a>
c00173bb:	0f b7 d7             	movzx  edx,di
c00173be:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c00173c1:	0f b7 c6             	movzx  eax,si
c00173c4:	81 e1 00 04 00 00    	and    ecx,0x400
c00173ca:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c00173cd:	83 e5 01             	and    ebp,0x1
c00173d0:	74 1d                	je     c00173ef <Vm::faultHandler(regs*)+0x5cb>
c00173d2:	55                   	push   ebp
c00173d3:	55                   	push   ebp
c00173d4:	50                   	push   eax
c00173d5:	52                   	push   edx
c00173d6:	e8 f8 f9 ff ff       	call   c0016dd3 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c00173db:	83 c4 10             	add    esp,0x10
c00173de:	89 fa                	mov    edx,edi
c00173e0:	ef                   	out    dx,eax
c00173e1:	85 c9                	test   ecx,ecx
c00173e3:	74 05                	je     c00173ea <Vm::faultHandler(regs*)+0x5c6>
c00173e5:	83 ee 04             	sub    esi,0x4
c00173e8:	eb 21                	jmp    c001740b <Vm::faultHandler(regs*)+0x5e7>
c00173ea:	83 c6 04             	add    esi,0x4
c00173ed:	eb 1c                	jmp    c001740b <Vm::faultHandler(regs*)+0x5e7>
c00173ef:	55                   	push   ebp
c00173f0:	55                   	push   ebp
c00173f1:	50                   	push   eax
c00173f2:	52                   	push   edx
c00173f3:	e8 c9 f9 ff ff       	call   c0016dc1 <Vm::readWordFromReal(unsigned short, unsigned short)>
c00173f8:	83 c4 10             	add    esp,0x10
c00173fb:	89 fa                	mov    edx,edi
c00173fd:	66 ef                	out    dx,ax
c00173ff:	85 c9                	test   ecx,ecx
c0017401:	74 05                	je     c0017408 <Vm::faultHandler(regs*)+0x5e4>
c0017403:	83 ee 02             	sub    esi,0x2
c0017406:	eb 03                	jmp    c001740b <Vm::faultHandler(regs*)+0x5e7>
c0017408:	83 c6 02             	add    esi,0x2
c001740b:	81 e6 ff ff 00 00    	and    esi,0xffff
c0017411:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0017414:	e9 c0 00 00 00       	jmp    c00174d9 <Vm::faultHandler(regs*)+0x6b5>
c0017419:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0017420:	83 ec 0c             	sub    esp,0xc
c0017423:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017427:	50                   	push   eax
c0017428:	e8 f4 f4 ff ff       	call   c0016921 <Vm::inbv(unsigned short)>
c001742d:	0f b6 c0             	movzx  eax,al
c0017430:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0017433:	eb 3a                	jmp    c001746f <Vm::faultHandler(regs*)+0x64b>
c0017435:	83 e5 01             	and    ebp,0x1
c0017438:	74 07                	je     c0017441 <Vm::faultHandler(regs*)+0x61d>
c001743a:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001743e:	ed                   	in     eax,dx
c001743f:	eb 14                	jmp    c0017455 <Vm::faultHandler(regs*)+0x631>
c0017441:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0017444:	66 31 f6             	xor    si,si
c0017447:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001744a:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001744e:	66 ed                	in     ax,dx
c0017450:	0f b7 c0             	movzx  eax,ax
c0017453:	09 f0                	or     eax,esi
c0017455:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0017458:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001745c:	eb 7e                	jmp    c00174dc <Vm::faultHandler(regs*)+0x6b8>
c001745e:	52                   	push   edx
c001745f:	52                   	push   edx
c0017460:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0017464:	50                   	push   eax
c0017465:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017469:	50                   	push   eax
c001746a:	e8 c5 f4 ff ff       	call   c0016934 <Vm::outbv(unsigned short, unsigned char)>
c001746f:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0017473:	eb 4f                	jmp    c00174c4 <Vm::faultHandler(regs*)+0x6a0>
c0017475:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0017478:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001747c:	83 e5 01             	and    ebp,0x1
c001747f:	74 03                	je     c0017484 <Vm::faultHandler(regs*)+0x660>
c0017481:	ef                   	out    dx,eax
c0017482:	eb d4                	jmp    c0017458 <Vm::faultHandler(regs*)+0x634>
c0017484:	66 ef                	out    dx,ax
c0017486:	eb d0                	jmp    c0017458 <Vm::faultHandler(regs*)+0x634>
c0017488:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001748f:	83 ec 0c             	sub    esp,0xc
c0017492:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017496:	50                   	push   eax
c0017497:	e8 85 f4 ff ff       	call   c0016921 <Vm::inbv(unsigned short)>
c001749c:	0f b6 c0             	movzx  eax,al
c001749f:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00174a2:	eb 1d                	jmp    c00174c1 <Vm::faultHandler(regs*)+0x69d>
c00174a4:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00174a7:	83 e5 01             	and    ebp,0x1
c00174aa:	74 03                	je     c00174af <Vm::faultHandler(regs*)+0x68b>
c00174ac:	ed                   	in     eax,dx
c00174ad:	eb 0d                	jmp    c00174bc <Vm::faultHandler(regs*)+0x698>
c00174af:	66 ed                	in     ax,dx
c00174b1:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00174b4:	0f b7 c0             	movzx  eax,ax
c00174b7:	66 31 d2             	xor    dx,dx
c00174ba:	09 d0                	or     eax,edx
c00174bc:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00174bf:	eb 18                	jmp    c00174d9 <Vm::faultHandler(regs*)+0x6b5>
c00174c1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00174c4:	83 c4 10             	add    esp,0x10
c00174c7:	eb 13                	jmp    c00174dc <Vm::faultHandler(regs*)+0x6b8>
c00174c9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00174cc:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00174cf:	83 e5 01             	and    ebp,0x1
c00174d2:	74 03                	je     c00174d7 <Vm::faultHandler(regs*)+0x6b3>
c00174d4:	ef                   	out    dx,eax
c00174d5:	eb 02                	jmp    c00174d9 <Vm::faultHandler(regs*)+0x6b5>
c00174d7:	66 ef                	out    dx,ax
c00174d9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00174dc:	b0 01                	mov    al,0x1
c00174de:	eb 60                	jmp    c0017540 <Vm::faultHandler(regs*)+0x71c>
c00174e0:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00174e4:	50                   	push   eax
c00174e5:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00174e9:	50                   	push   eax
c00174ea:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00174ee:	50                   	push   eax
c00174ef:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00174f3:	50                   	push   eax
c00174f4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00174f8:	50                   	push   eax
c00174f9:	52                   	push   edx
c00174fa:	52                   	push   edx
c00174fb:	68 dd 26 02 c0       	push   0xc00226dd
c0017500:	e8 40 34 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017505:	83 c4 20             	add    esp,0x20
c0017508:	83 ec 0c             	sub    esp,0xc
c001750b:	6a 60                	push   0x60
c001750d:	e8 0f f4 ff ff       	call   c0016921 <Vm::inbv(unsigned short)>
c0017512:	83 c4 10             	add    esp,0x10
c0017515:	0f b6 d0             	movzx  edx,al
c0017518:	83 fa 1c             	cmp    edx,0x1c
c001751b:	74 05                	je     c0017522 <Vm::faultHandler(regs*)+0x6fe>
c001751d:	83 fa 5a             	cmp    edx,0x5a
c0017520:	75 e6                	jne    c0017508 <Vm::faultHandler(regs*)+0x6e4>
c0017522:	0f b6 c0             	movzx  eax,al
c0017525:	83 f8 1c             	cmp    eax,0x1c
c0017528:	74 05                	je     c001752f <Vm::faultHandler(regs*)+0x70b>
c001752a:	83 f8 5a             	cmp    eax,0x5a
c001752d:	75 0f                	jne    c001753e <Vm::faultHandler(regs*)+0x71a>
c001752f:	83 ec 0c             	sub    esp,0xc
c0017532:	6a 60                	push   0x60
c0017534:	e8 e8 f3 ff ff       	call   c0016921 <Vm::inbv(unsigned short)>
c0017539:	83 c4 10             	add    esp,0x10
c001753c:	eb e4                	jmp    c0017522 <Vm::faultHandler(regs*)+0x6fe>
c001753e:	31 c0                	xor    eax,eax
c0017540:	83 c4 2c             	add    esp,0x2c
c0017543:	5b                   	pop    ebx
c0017544:	5e                   	pop    esi
c0017545:	5f                   	pop    edi
c0017546:	5d                   	pop    ebp
c0017547:	c3                   	ret    

c0017548 <noCopro(unsigned long)>:
c0017548:	c3                   	ret    

c0017549 <nmiHandler(regs*, void*)>:
c0017549:	83 ec 0c             	sub    esp,0xc
c001754c:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017551:	83 ec 0c             	sub    esp,0xc
c0017554:	50                   	push   eax
c0017555:	e8 5c fd fe ff       	call   c00072b6 <Computer::handleNMI()>
c001755a:	83 c4 10             	add    esp,0x10
c001755d:	90                   	nop
c001755e:	83 c4 0c             	add    esp,0xc
c0017561:	c3                   	ret    

c0017562 <doubleFault(regs*, void*)>:
c0017562:	55                   	push   ebp
c0017563:	89 e5                	mov    ebp,esp
c0017565:	83 ec 08             	sub    esp,0x8
c0017568:	83 ec 0c             	sub    esp,0xc
c001756b:	68 3c 27 02 c0       	push   0xc002273c
c0017570:	e8 04 9e ff ff       	call   c0011379 <KePanic(char const*)>
c0017575:	83 c4 10             	add    esp,0x10
c0017578:	90                   	nop
c0017579:	c9                   	leave  
c001757a:	c3                   	ret    

c001757b <displayDebugInfo(regs*)>:
c001757b:	83 ec 1c             	sub    esp,0x1c
c001757e:	0f 20 c0             	mov    eax,cr0
c0017581:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017585:	0f 20 d0             	mov    eax,cr2
c0017588:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001758c:	0f 20 d8             	mov    eax,cr3
c001758f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017593:	0f 20 e0             	mov    eax,cr4
c0017596:	89 04 24             	mov    DWORD PTR [esp],eax
c0017599:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001759d:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00175a0:	83 ec 08             	sub    esp,0x8
c00175a3:	50                   	push   eax
c00175a4:	68 58 27 02 c0       	push   0xc0022758
c00175a9:	e8 97 33 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00175ae:	83 c4 10             	add    esp,0x10
c00175b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00175b5:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00175b8:	83 ec 08             	sub    esp,0x8
c00175bb:	50                   	push   eax
c00175bc:	68 49 27 02 c0       	push   0xc0022749
c00175c1:	e8 7f 33 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00175c6:	83 c4 10             	add    esp,0x10
c00175c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00175cd:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00175d0:	83 ec 08             	sub    esp,0x8
c00175d3:	50                   	push   eax
c00175d4:	68 54 27 02 c0       	push   0xc0022754
c00175d9:	e8 67 33 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00175de:	83 c4 10             	add    esp,0x10
c00175e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00175e5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00175e8:	83 ec 08             	sub    esp,0x8
c00175eb:	50                   	push   eax
c00175ec:	68 63 27 02 c0       	push   0xc0022763
c00175f1:	e8 4f 33 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00175f6:	83 c4 10             	add    esp,0x10
c00175f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00175fd:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0017600:	83 ec 08             	sub    esp,0x8
c0017603:	50                   	push   eax
c0017604:	68 6e 27 02 c0       	push   0xc002276e
c0017609:	e8 37 33 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001760e:	83 c4 10             	add    esp,0x10
c0017611:	83 ec 08             	sub    esp,0x8
c0017614:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017618:	68 79 27 02 c0       	push   0xc0022779
c001761d:	e8 23 33 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017622:	83 c4 10             	add    esp,0x10
c0017625:	83 ec 08             	sub    esp,0x8
c0017628:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001762c:	68 84 27 02 c0       	push   0xc0022784
c0017631:	e8 0f 33 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017636:	83 c4 10             	add    esp,0x10
c0017639:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001763d:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0017640:	c1 e0 05             	shl    eax,0x5
c0017643:	8d 90 00 37 02 c0    	lea    edx,[eax-0x3ffdc900]
c0017649:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001764d:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0017650:	83 ec 04             	sub    esp,0x4
c0017653:	52                   	push   edx
c0017654:	50                   	push   eax
c0017655:	68 8f 27 02 c0       	push   0xc002278f
c001765a:	e8 e6 32 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001765f:	83 c4 10             	add    esp,0x10
c0017662:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017667:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001766d:	83 ec 0c             	sub    esp,0xc
c0017670:	50                   	push   eax
c0017671:	e8 e3 10 ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c0017676:	83 c4 10             	add    esp,0x10
c0017679:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001767e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017684:	83 ec 08             	sub    esp,0x8
c0017687:	68 9e 27 02 c0       	push   0xc002279e
c001768c:	50                   	push   eax
c001768d:	e8 14 14 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017692:	83 c4 10             	add    esp,0x10
c0017695:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001769a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00176a0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00176a4:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c00176a7:	83 ec 08             	sub    esp,0x8
c00176aa:	52                   	push   edx
c00176ab:	50                   	push   eax
c00176ac:	e8 af 13 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c00176b1:	83 c4 10             	add    esp,0x10
c00176b4:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00176b9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00176bf:	83 ec 08             	sub    esp,0x8
c00176c2:	68 ac 27 02 c0       	push   0xc00227ac
c00176c7:	50                   	push   eax
c00176c8:	e8 d9 13 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00176cd:	83 c4 10             	add    esp,0x10
c00176d0:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00176d5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00176db:	ba 00 20 00 c2       	mov    edx,0xc2002000
c00176e0:	8b 12                	mov    edx,DWORD PTR [edx]
c00176e2:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00176e5:	83 c2 0c             	add    edx,0xc
c00176e8:	83 ec 08             	sub    esp,0x8
c00176eb:	52                   	push   edx
c00176ec:	50                   	push   eax
c00176ed:	e8 b4 13 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00176f2:	83 c4 10             	add    esp,0x10
c00176f5:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00176fa:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017700:	83 ec 08             	sub    esp,0x8
c0017703:	68 b5 27 02 c0       	push   0xc00227b5
c0017708:	50                   	push   eax
c0017709:	e8 98 13 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001770e:	83 c4 10             	add    esp,0x10
c0017711:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017716:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001771c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017720:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0017723:	83 ec 08             	sub    esp,0x8
c0017726:	52                   	push   edx
c0017727:	50                   	push   eax
c0017728:	e8 33 13 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c001772d:	83 c4 10             	add    esp,0x10
c0017730:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017735:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001773b:	83 ec 08             	sub    esp,0x8
c001773e:	68 bd 27 02 c0       	push   0xc00227bd
c0017743:	50                   	push   eax
c0017744:	e8 5d 13 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017749:	83 c4 10             	add    esp,0x10
c001774c:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017751:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017757:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001775b:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c001775e:	83 ec 08             	sub    esp,0x8
c0017761:	52                   	push   edx
c0017762:	50                   	push   eax
c0017763:	e8 f8 12 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017768:	83 c4 10             	add    esp,0x10
c001776b:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017770:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017776:	83 ec 08             	sub    esp,0x8
c0017779:	68 c5 27 02 c0       	push   0xc00227c5
c001777e:	50                   	push   eax
c001777f:	e8 22 13 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017784:	83 c4 10             	add    esp,0x10
c0017787:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001778c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017792:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017796:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0017799:	83 ec 08             	sub    esp,0x8
c001779c:	52                   	push   edx
c001779d:	50                   	push   eax
c001779e:	e8 bd 12 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c00177a3:	83 c4 10             	add    esp,0x10
c00177a6:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00177ab:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00177b1:	83 ec 08             	sub    esp,0x8
c00177b4:	68 cd 27 02 c0       	push   0xc00227cd
c00177b9:	50                   	push   eax
c00177ba:	e8 e7 12 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00177bf:	83 c4 10             	add    esp,0x10
c00177c2:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00177c7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00177cd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00177d1:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00177d4:	83 ec 08             	sub    esp,0x8
c00177d7:	52                   	push   edx
c00177d8:	50                   	push   eax
c00177d9:	e8 82 12 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c00177de:	83 c4 10             	add    esp,0x10
c00177e1:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00177e6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00177ec:	83 ec 08             	sub    esp,0x8
c00177ef:	68 d5 27 02 c0       	push   0xc00227d5
c00177f4:	50                   	push   eax
c00177f5:	e8 ac 12 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00177fa:	83 c4 10             	add    esp,0x10
c00177fd:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017802:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017808:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001780c:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c001780f:	83 ec 08             	sub    esp,0x8
c0017812:	52                   	push   edx
c0017813:	50                   	push   eax
c0017814:	e8 47 12 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017819:	83 c4 10             	add    esp,0x10
c001781c:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017821:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017827:	83 ec 08             	sub    esp,0x8
c001782a:	68 dd 27 02 c0       	push   0xc00227dd
c001782f:	50                   	push   eax
c0017830:	e8 71 12 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017835:	83 c4 10             	add    esp,0x10
c0017838:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001783d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017843:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017847:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001784a:	83 ec 08             	sub    esp,0x8
c001784d:	52                   	push   edx
c001784e:	50                   	push   eax
c001784f:	e8 0c 12 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017854:	83 c4 10             	add    esp,0x10
c0017857:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001785c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017862:	83 ec 08             	sub    esp,0x8
c0017865:	68 e5 27 02 c0       	push   0xc00227e5
c001786a:	50                   	push   eax
c001786b:	e8 36 12 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017870:	83 c4 10             	add    esp,0x10
c0017873:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017878:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001787e:	83 ec 08             	sub    esp,0x8
c0017881:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017885:	50                   	push   eax
c0017886:	e8 d5 11 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c001788b:	83 c4 10             	add    esp,0x10
c001788e:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017893:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017899:	83 ec 08             	sub    esp,0x8
c001789c:	68 ee 27 02 c0       	push   0xc00227ee
c00178a1:	50                   	push   eax
c00178a2:	e8 ff 11 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00178a7:	83 c4 10             	add    esp,0x10
c00178aa:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00178af:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00178b5:	83 ec 08             	sub    esp,0x8
c00178b8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00178bc:	50                   	push   eax
c00178bd:	e8 9e 11 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c00178c2:	83 c4 10             	add    esp,0x10
c00178c5:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00178ca:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00178d0:	83 ec 08             	sub    esp,0x8
c00178d3:	68 f6 27 02 c0       	push   0xc00227f6
c00178d8:	50                   	push   eax
c00178d9:	e8 c8 11 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00178de:	83 c4 10             	add    esp,0x10
c00178e1:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00178e6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00178ec:	83 ec 08             	sub    esp,0x8
c00178ef:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00178f3:	50                   	push   eax
c00178f4:	e8 67 11 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c00178f9:	83 c4 10             	add    esp,0x10
c00178fc:	fa                   	cli    
c00178fd:	f4                   	hlt    
c00178fe:	eb fe                	jmp    c00178fe <displayDebugInfo(regs*)+0x383>

c0017900 <HalSystemIdle()>:
c0017900:	56                   	push   esi
c0017901:	53                   	push   ebx
c0017902:	83 ec 14             	sub    esp,0x14
c0017905:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001790a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017910:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0017916:	83 e0 04             	and    eax,0x4
c0017919:	0f b6 c0             	movzx  eax,al
c001791c:	85 c0                	test   eax,eax
c001791e:	0f 95 c0             	setne  al
c0017921:	0f b6 c0             	movzx  eax,al
c0017924:	85 c0                	test   eax,eax
c0017926:	74 4c                	je     c0017974 <HalSystemIdle()+0x74>
c0017928:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001792d:	83 ec 08             	sub    esp,0x8
c0017930:	68 e1 00 00 00       	push   0xe1
c0017935:	50                   	push   eax
c0017936:	e8 85 f7 fe ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c001793b:	83 c4 10             	add    esp,0x10
c001793e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017942:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017946:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001794b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001794f:	83 e2 02             	and    edx,0x2
c0017952:	89 d3                	mov    ebx,edx
c0017954:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017958:	83 e2 00             	and    edx,0x0
c001795b:	89 d6                	mov    esi,edx
c001795d:	56                   	push   esi
c001795e:	53                   	push   ebx
c001795f:	68 e1 00 00 00       	push   0xe1
c0017964:	50                   	push   eax
c0017965:	e8 82 f7 fe ff       	call   c00070ec <Computer::wrmsr(unsigned int, unsigned long long)>
c001796a:	83 c4 10             	add    esp,0x10
c001796d:	e8 22 88 fe ff       	call   c0000194 <doTPAUSE>
c0017972:	eb 01                	jmp    c0017975 <HalSystemIdle()+0x75>
c0017974:	f4                   	hlt    
c0017975:	90                   	nop
c0017976:	83 c4 14             	add    esp,0x14
c0017979:	5b                   	pop    ebx
c001797a:	5e                   	pop    esi
c001797b:	c3                   	ret    

c001797c <displayProgramFault(char const*)>:
c001797c:	83 ec 0c             	sub    esp,0xc
c001797f:	83 ec 0c             	sub    esp,0xc
c0017982:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017986:	e8 ba 2f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001798b:	83 c4 10             	add    esp,0x10
c001798e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017993:	8b 00                	mov    eax,DWORD PTR [eax]
c0017995:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017998:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001799e:	85 c0                	test   eax,eax
c00179a0:	74 21                	je     c00179c3 <displayProgramFault(char const*)+0x47>
c00179a2:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00179a7:	8b 00                	mov    eax,DWORD PTR [eax]
c00179a9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00179ac:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00179b2:	6a 04                	push   0x4
c00179b4:	6a 0f                	push   0xf
c00179b6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00179ba:	50                   	push   eax
c00179bb:	e8 58 11 ff ff       	call   c0008b18 <VgaText::puts(char const*, VgaColour, VgaColour)>
c00179c0:	83 c4 10             	add    esp,0x10
c00179c3:	90                   	nop
c00179c4:	83 c4 0c             	add    esp,0xc
c00179c7:	c3                   	ret    

c00179c8 <gpFault(regs*, void*)>:
c00179c8:	83 ec 1c             	sub    esp,0x1c
c00179cb:	c7 05 74 97 02 c0 24 6e 01 c0 	mov    DWORD PTR ds:0xc0029774,0xc0016e24
c00179d5:	a1 74 97 02 c0       	mov    eax,ds:0xc0029774
c00179da:	85 c0                	test   eax,eax
c00179dc:	74 1e                	je     c00179fc <gpFault(regs*, void*)+0x34>
c00179de:	a1 74 97 02 c0       	mov    eax,ds:0xc0029774
c00179e3:	83 ec 0c             	sub    esp,0xc
c00179e6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00179ea:	ff d0                	call   eax
c00179ec:	83 c4 10             	add    esp,0x10
c00179ef:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00179f3:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00179f8:	85 c0                	test   eax,eax
c00179fa:	75 2e                	jne    c0017a2a <gpFault(regs*, void*)+0x62>
c00179fc:	83 ec 0c             	sub    esp,0xc
c00179ff:	68 fe 27 02 c0       	push   0xc00227fe
c0017a04:	e8 73 ff ff ff       	call   c001797c <displayProgramFault(char const*)>
c0017a09:	83 c4 10             	add    esp,0x10
c0017a0c:	83 ec 0c             	sub    esp,0xc
c0017a0f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017a13:	e8 63 fb ff ff       	call   c001757b <displayDebugInfo(regs*)>
c0017a18:	83 c4 10             	add    esp,0x10
c0017a1b:	83 ec 0c             	sub    esp,0xc
c0017a1e:	6a 00                	push   0x0
c0017a20:	e8 a3 ed ff ff       	call   c00167c8 <Thr::terminateFromIRQ(int)>
c0017a25:	83 c4 10             	add    esp,0x10
c0017a28:	eb 01                	jmp    c0017a2b <gpFault(regs*, void*)+0x63>
c0017a2a:	90                   	nop
c0017a2b:	83 c4 1c             	add    esp,0x1c
c0017a2e:	c3                   	ret    

c0017a2f <pgFault(regs*, void*)>:
c0017a2f:	83 ec 1c             	sub    esp,0x1c
c0017a32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a36:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0017a39:	0f 20 d0             	mov    eax,cr2
c0017a3c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017a40:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017a44:	83 ec 04             	sub    esp,0x4
c0017a47:	52                   	push   edx
c0017a48:	50                   	push   eax
c0017a49:	68 dc 28 02 c0       	push   0xc00228dc
c0017a4e:	e8 f2 2e ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017a53:	83 c4 10             	add    esp,0x10
c0017a56:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017a5b:	8b 00                	mov    eax,DWORD PTR [eax]
c0017a5d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017a60:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0017a66:	0f 20 d2             	mov    edx,cr2
c0017a69:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017a6d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017a71:	83 ec 08             	sub    esp,0x8
c0017a74:	52                   	push   edx
c0017a75:	50                   	push   eax
c0017a76:	e8 15 29 ff ff       	call   c000a390 <VAS::tryLoadBackOffDisk(unsigned long)>
c0017a7b:	83 c4 10             	add    esp,0x10
c0017a7e:	0f b6 c0             	movzx  eax,al
c0017a81:	85 c0                	test   eax,eax
c0017a83:	75 2e                	jne    c0017ab3 <pgFault(regs*, void*)+0x84>
c0017a85:	83 ec 0c             	sub    esp,0xc
c0017a88:	68 17 28 02 c0       	push   0xc0022817
c0017a8d:	e8 ea fe ff ff       	call   c001797c <displayProgramFault(char const*)>
c0017a92:	83 c4 10             	add    esp,0x10
c0017a95:	83 ec 0c             	sub    esp,0xc
c0017a98:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017a9c:	e8 da fa ff ff       	call   c001757b <displayDebugInfo(regs*)>
c0017aa1:	83 c4 10             	add    esp,0x10
c0017aa4:	83 ec 0c             	sub    esp,0xc
c0017aa7:	6a 00                	push   0x0
c0017aa9:	e8 1a ed ff ff       	call   c00167c8 <Thr::terminateFromIRQ(int)>
c0017aae:	83 c4 10             	add    esp,0x10
c0017ab1:	eb 01                	jmp    c0017ab4 <pgFault(regs*, void*)+0x85>
c0017ab3:	90                   	nop
c0017ab4:	83 c4 1c             	add    esp,0x1c
c0017ab7:	c3                   	ret    

c0017ab8 <otherISRHandler(regs*, void*)>:
c0017ab8:	83 ec 0c             	sub    esp,0xc
c0017abb:	83 ec 0c             	sub    esp,0xc
c0017abe:	68 04 29 02 c0       	push   0xc0022904
c0017ac3:	e8 b4 fe ff ff       	call   c001797c <displayProgramFault(char const*)>
c0017ac8:	83 c4 10             	add    esp,0x10
c0017acb:	83 ec 0c             	sub    esp,0xc
c0017ace:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017ad2:	e8 a4 fa ff ff       	call   c001757b <displayDebugInfo(regs*)>
c0017ad7:	83 c4 10             	add    esp,0x10
c0017ada:	83 ec 0c             	sub    esp,0xc
c0017add:	6a 00                	push   0x0
c0017adf:	e8 e4 ec ff ff       	call   c00167c8 <Thr::terminateFromIRQ(int)>
c0017ae4:	83 c4 10             	add    esp,0x10
c0017ae7:	90                   	nop
c0017ae8:	83 c4 0c             	add    esp,0xc
c0017aeb:	c3                   	ret    

c0017aec <opcodeFault(regs*, void*)>:
c0017aec:	55                   	push   ebp
c0017aed:	89 e5                	mov    ebp,esp
c0017aef:	83 ec 08             	sub    esp,0x8
c0017af2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017af5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017af8:	83 ec 08             	sub    esp,0x8
c0017afb:	50                   	push   eax
c0017afc:	68 22 28 02 c0       	push   0xc0022822
c0017b01:	e8 3f 2e ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017b06:	83 c4 10             	add    esp,0x10
c0017b09:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017b0e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017b14:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0017b1a:	0f b6 c0             	movzx  eax,al
c0017b1d:	85 c0                	test   eax,eax
c0017b1f:	74 21                	je     c0017b42 <opcodeFault(regs*, void*)+0x56>
c0017b21:	83 ec 0c             	sub    esp,0xc
c0017b24:	68 2c 29 02 c0       	push   0xc002292c
c0017b29:	e8 17 2e ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017b2e:	83 c4 10             	add    esp,0x10
c0017b31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b34:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017b37:	8d 50 19             	lea    edx,[eax+0x19]
c0017b3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b3d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017b40:	eb 2b                	jmp    c0017b6d <opcodeFault(regs*, void*)+0x81>
c0017b42:	83 ec 0c             	sub    esp,0xc
c0017b45:	68 30 28 02 c0       	push   0xc0022830
c0017b4a:	e8 2d fe ff ff       	call   c001797c <displayProgramFault(char const*)>
c0017b4f:	83 c4 10             	add    esp,0x10
c0017b52:	83 ec 0c             	sub    esp,0xc
c0017b55:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0017b58:	e8 1e fa ff ff       	call   c001757b <displayDebugInfo(regs*)>
c0017b5d:	83 c4 10             	add    esp,0x10
c0017b60:	83 ec 0c             	sub    esp,0xc
c0017b63:	6a 00                	push   0x0
c0017b65:	e8 5e ec ff ff       	call   c00167c8 <Thr::terminateFromIRQ(int)>
c0017b6a:	83 c4 10             	add    esp,0x10
c0017b6d:	c9                   	leave  
c0017b6e:	c3                   	ret    

c0017b6f <i386SaveCoprocessor(void*)>:
c0017b6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017b73:	83 c0 3f             	add    eax,0x3f
c0017b76:	83 e0 c0             	and    eax,0xffffffc0
c0017b79:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017b7d:	ff 25 70 97 02 c0    	jmp    DWORD PTR ds:0xc0029770

c0017b83 <i386LoadCoprocessor(void*)>:
c0017b83:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017b87:	83 c0 3f             	add    eax,0x3f
c0017b8a:	83 e0 c0             	and    eax,0xffffffc0
c0017b8d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017b91:	ff 25 6c 97 02 c0    	jmp    DWORD PTR ds:0xc002976c

c0017b97 <x87EmulHandler(regs*, void*)>:
c0017b97:	53                   	push   ebx
c0017b98:	83 ec 08             	sub    esp,0x8
c0017b9b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017ba0:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0017ba4:	74 10                	je     c0017bb6 <x87EmulHandler(regs*, void*)+0x1f>
c0017ba6:	83 ec 0c             	sub    esp,0xc
c0017ba9:	68 3d 28 02 c0       	push   0xc002283d
c0017bae:	e8 c6 97 ff ff       	call   c0011379 <KePanic(char const*)>
c0017bb3:	83 c4 10             	add    esp,0x10
c0017bb6:	0f 20 c0             	mov    eax,cr0
c0017bb9:	a8 08                	test   al,0x8
c0017bbb:	74 59                	je     c0017c16 <x87EmulHandler(regs*, void*)+0x7f>
c0017bbd:	0f 06                	clts   
c0017bbf:	a1 68 97 02 c0       	mov    eax,ds:0xc0029768
c0017bc4:	85 c0                	test   eax,eax
c0017bc6:	74 0e                	je     c0017bd6 <x87EmulHandler(regs*, void*)+0x3f>
c0017bc8:	83 ec 0c             	sub    esp,0xc
c0017bcb:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0017bce:	e8 9c ff ff ff       	call   c0017b6f <i386SaveCoprocessor(void*)>
c0017bd3:	83 c4 10             	add    esp,0x10
c0017bd6:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0017bdc:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0017be0:	75 12                	jne    c0017bf4 <x87EmulHandler(regs*, void*)+0x5d>
c0017be2:	83 ec 0c             	sub    esp,0xc
c0017be5:	68 40 02 00 00       	push   0x240
c0017bea:	e8 c7 fe fe ff       	call   c0007ab6 <malloc>
c0017bef:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0017bf2:	eb 10                	jmp    c0017c04 <x87EmulHandler(regs*, void*)+0x6d>
c0017bf4:	83 ec 0c             	sub    esp,0xc
c0017bf7:	a1 68 97 02 c0       	mov    eax,ds:0xc0029768
c0017bfc:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0017bff:	e8 7f ff ff ff       	call   c0017b83 <i386LoadCoprocessor(void*)>
c0017c04:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017c09:	83 c4 10             	add    esp,0x10
c0017c0c:	a3 68 97 02 c0       	mov    ds:0xc0029768,eax
c0017c11:	83 c4 08             	add    esp,0x8
c0017c14:	5b                   	pop    ebx
c0017c15:	c3                   	ret    
c0017c16:	83 ec 0c             	sub    esp,0xc
c0017c19:	68 51 28 02 c0       	push   0xc0022851
c0017c1e:	e8 22 2d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017c23:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017c2b:	83 c4 18             	add    esp,0x18
c0017c2e:	5b                   	pop    ebx
c0017c2f:	e9 94 eb ff ff       	jmp    c00167c8 <Thr::terminateFromIRQ(int)>

c0017c34 <HalInitialiseCoprocessor()>:
c0017c34:	83 ec 10             	sub    esp,0x10
c0017c37:	c7 05 68 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029768,0x0
c0017c41:	6a 00                	push   0x0
c0017c43:	68 97 7b 01 c0       	push   0xc0017b97
c0017c48:	6a 07                	push   0x7
c0017c4a:	e8 2f 50 ff ff       	call   c000cc7e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c4f:	e8 4c 70 00 00       	call   c001eca0 <avxDetect>
c0017c54:	83 c4 10             	add    esp,0x10
c0017c57:	85 c0                	test   eax,eax
c0017c59:	74 1c                	je     c0017c77 <HalInitialiseCoprocessor()+0x43>
c0017c5b:	c7 05 70 97 02 c0 ca ec 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc001ecca
c0017c65:	c7 05 6c 97 02 c0 db ec 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc001ecdb
c0017c6f:	83 c4 0c             	add    esp,0xc
c0017c72:	e9 75 70 00 00       	jmp    c001ecec <avxInit>
c0017c77:	e8 b4 73 00 00       	call   c001f030 <absolutelyNoChanceInHell>
c0017c7c:	85 c0                	test   eax,eax
c0017c7e:	74 1c                	je     c0017c9c <HalInitialiseCoprocessor()+0x68>
c0017c80:	c7 05 70 97 02 c0 48 f0 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc001f048
c0017c8a:	c7 05 6c 97 02 c0 50 f0 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc001f050
c0017c94:	83 c4 0c             	add    esp,0xc
c0017c97:	e9 bc 73 00 00       	jmp    c001f058 <sseInit>
c0017c9c:	e8 d5 73 00 00       	call   c001f076 <x87Detect>
c0017ca1:	85 c0                	test   eax,eax
c0017ca3:	74 1c                	je     c0017cc1 <HalInitialiseCoprocessor()+0x8d>
c0017ca5:	c7 05 70 97 02 c0 91 f0 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc001f091
c0017caf:	c7 05 6c 97 02 c0 98 f0 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc001f098
c0017cb9:	83 c4 0c             	add    esp,0xc
c0017cbc:	e9 de 73 00 00       	jmp    c001f09f <x87Init>
c0017cc1:	c7 05 70 97 02 c0 48 75 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc0017548
c0017ccb:	c7 05 6c 97 02 c0 48 75 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc0017548
c0017cd5:	0f 20 c0             	mov    eax,cr0
c0017cd8:	83 c8 04             	or     eax,0x4
c0017cdb:	0f 22 c0             	mov    cr0,eax
c0017cde:	83 c4 0c             	add    esp,0xc
c0017ce1:	c3                   	ret    

c0017ce2 <HalPanic(char const*)>:
c0017ce2:	53                   	push   ebx
c0017ce3:	83 ec 10             	sub    esp,0x10
c0017ce6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017cea:	fa                   	cli    
c0017ceb:	53                   	push   ebx
c0017cec:	68 67 28 02 c0       	push   0xc0022867
c0017cf1:	e8 4f 2c ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017cf6:	a1 64 97 02 c0       	mov    eax,ds:0xc0029764
c0017cfb:	83 c4 10             	add    esp,0x10
c0017cfe:	85 c0                	test   eax,eax
c0017d00:	74 09                	je     c0017d0b <HalPanic(char const*)+0x29>
c0017d02:	83 ec 0c             	sub    esp,0xc
c0017d05:	53                   	push   ebx
c0017d06:	ff d0                	call   eax
c0017d08:	83 c4 10             	add    esp,0x10
c0017d0b:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c0017d10:	85 c0                	test   eax,eax
c0017d12:	0f 84 dc 00 00 00    	je     c0017df4 <HalPanic(char const*)+0x112>
c0017d18:	52                   	push   edx
c0017d19:	6a 01                	push   0x1
c0017d1b:	6a 0f                	push   0xf
c0017d1d:	50                   	push   eax
c0017d1e:	e8 91 08 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017d23:	59                   	pop    ecx
c0017d24:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017d2a:	e8 75 0a ff ff       	call   c00087a4 <VgaText::clearScreen()>
c0017d2f:	58                   	pop    eax
c0017d30:	5a                   	pop    edx
c0017d31:	68 e4 0a 02 c0       	push   0xc0020ae4
c0017d36:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017d3c:	e8 ab 08 ff ff       	call   c00085ec <VgaText::setTitle(char*)>
c0017d41:	83 c4 0c             	add    esp,0xc
c0017d44:	6a 01                	push   0x1
c0017d46:	6a 0f                	push   0xf
c0017d48:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017d4e:	e8 61 08 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017d53:	59                   	pop    ecx
c0017d54:	58                   	pop    eax
c0017d55:	68 80 28 02 c0       	push   0xc0022880
c0017d5a:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017d60:	e8 41 0d ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017d65:	83 c4 0c             	add    esp,0xc
c0017d68:	6a 0f                	push   0xf
c0017d6a:	6a 01                	push   0x1
c0017d6c:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017d72:	e8 3d 08 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017d77:	58                   	pop    eax
c0017d78:	5a                   	pop    edx
c0017d79:	68 89 28 02 c0       	push   0xc0022889
c0017d7e:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017d84:	e8 1d 0d ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017d89:	83 c4 0c             	add    esp,0xc
c0017d8c:	6a 01                	push   0x1
c0017d8e:	6a 0f                	push   0xf
c0017d90:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017d96:	e8 19 08 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017d9b:	59                   	pop    ecx
c0017d9c:	58                   	pop    eax
c0017d9d:	68 cd 28 02 c0       	push   0xc00228cd
c0017da2:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017da8:	e8 f9 0c ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017dad:	58                   	pop    eax
c0017dae:	5a                   	pop    edx
c0017daf:	68 96 28 02 c0       	push   0xc0022896
c0017db4:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017dba:	e8 e7 0c ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017dbf:	59                   	pop    ecx
c0017dc0:	58                   	pop    eax
c0017dc1:	68 d0 28 02 c0       	push   0xc00228d0
c0017dc6:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017dcc:	e8 d5 0c ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017dd1:	58                   	pop    eax
c0017dd2:	5a                   	pop    edx
c0017dd3:	53                   	push   ebx
c0017dd4:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017dda:	e8 c7 0c ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017ddf:	59                   	pop    ecx
c0017de0:	5b                   	pop    ebx
c0017de1:	68 cd 28 02 c0       	push   0xc00228cd
c0017de6:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017dec:	e8 b5 0c ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017df1:	83 c4 10             	add    esp,0x10
c0017df4:	eb fe                	jmp    c0017df4 <HalPanic(char const*)+0x112>

c0017df6 <HalQueryPerformanceCounter()>:
c0017df6:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017dfb:	31 d2                	xor    edx,edx
c0017dfd:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0017e03:	31 c0                	xor    eax,eax
c0017e05:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c0017e0c:	74 02                	je     c0017e10 <HalQueryPerformanceCounter()+0x1a>
c0017e0e:	0f 31                	rdtsc  
c0017e10:	c3                   	ret    

c0017e11 <HalInitialise()>:
c0017e11:	53                   	push   ebx
c0017e12:	83 ec 08             	sub    esp,0x8
c0017e15:	e8 94 50 ff ff       	call   c000ceae <setupINTS()>
c0017e1a:	80 3d e0 8b 02 c0 00 	cmp    BYTE PTR ds:0xc0028be0,0x0
c0017e21:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017e26:	75 0f                	jne    c0017e37 <HalInitialise()+0x26>
c0017e28:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0017e2e:	83 e2 fe             	and    edx,0xfffffffe
c0017e31:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0017e37:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0017e3d:	c6 05 60 97 02 c0 00 	mov    BYTE PTR ds:0xc0029760,0x0
c0017e44:	83 e2 fe             	and    edx,0xfffffffe
c0017e47:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0017e4d:	e8 9e 02 00 00       	call   c00180f0 <picOpen()>
c0017e52:	80 3d 60 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029760,0x0
c0017e59:	74 0a                	je     c0017e65 <HalInitialise()+0x54>
c0017e5b:	e8 e0 01 00 00       	call   c0018040 <picDisable()>
c0017e60:	e8 ad 67 00 00       	call   c001e612 <apicOpen()>
c0017e65:	bb 0f 00 00 00       	mov    ebx,0xf
c0017e6a:	50                   	push   eax
c0017e6b:	6a 00                	push   0x0
c0017e6d:	68 b8 7a 01 c0       	push   0xc0017ab8
c0017e72:	6a 00                	push   0x0
c0017e74:	e8 05 4e ff ff       	call   c000cc7e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017e79:	83 c4 0c             	add    esp,0xc
c0017e7c:	6a 00                	push   0x0
c0017e7e:	68 b8 7a 01 c0       	push   0xc0017ab8
c0017e83:	6a 01                	push   0x1
c0017e85:	e8 f4 4d ff ff       	call   c000cc7e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017e8a:	83 c4 0c             	add    esp,0xc
c0017e8d:	6a 00                	push   0x0
c0017e8f:	68 49 75 01 c0       	push   0xc0017549
c0017e94:	6a 02                	push   0x2
c0017e96:	e8 e3 4d ff ff       	call   c000cc7e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017e9b:	83 c4 0c             	add    esp,0xc
c0017e9e:	6a 00                	push   0x0
c0017ea0:	68 b8 7a 01 c0       	push   0xc0017ab8
c0017ea5:	6a 03                	push   0x3
c0017ea7:	e8 d2 4d ff ff       	call   c000cc7e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017eac:	83 c4 0c             	add    esp,0xc
c0017eaf:	6a 00                	push   0x0
c0017eb1:	68 b8 7a 01 c0       	push   0xc0017ab8
c0017eb6:	6a 04                	push   0x4
c0017eb8:	e8 c1 4d ff ff       	call   c000cc7e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017ebd:	83 c4 0c             	add    esp,0xc
c0017ec0:	6a 00                	push   0x0
c0017ec2:	68 b8 7a 01 c0       	push   0xc0017ab8
c0017ec7:	6a 05                	push   0x5
c0017ec9:	e8 b0 4d ff ff       	call   c000cc7e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017ece:	83 c4 0c             	add    esp,0xc
c0017ed1:	6a 00                	push   0x0
c0017ed3:	68 ec 7a 01 c0       	push   0xc0017aec
c0017ed8:	6a 06                	push   0x6
c0017eda:	e8 9f 4d ff ff       	call   c000cc7e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017edf:	83 c4 0c             	add    esp,0xc
c0017ee2:	6a 00                	push   0x0
c0017ee4:	68 62 75 01 c0       	push   0xc0017562
c0017ee9:	6a 08                	push   0x8
c0017eeb:	e8 8e 4d ff ff       	call   c000cc7e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017ef0:	83 c4 0c             	add    esp,0xc
c0017ef3:	6a 00                	push   0x0
c0017ef5:	68 b8 7a 01 c0       	push   0xc0017ab8
c0017efa:	6a 09                	push   0x9
c0017efc:	e8 7d 4d ff ff       	call   c000cc7e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017f01:	83 c4 0c             	add    esp,0xc
c0017f04:	6a 00                	push   0x0
c0017f06:	68 b8 7a 01 c0       	push   0xc0017ab8
c0017f0b:	6a 0a                	push   0xa
c0017f0d:	e8 6c 4d ff ff       	call   c000cc7e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017f12:	83 c4 0c             	add    esp,0xc
c0017f15:	6a 00                	push   0x0
c0017f17:	68 b8 7a 01 c0       	push   0xc0017ab8
c0017f1c:	6a 0b                	push   0xb
c0017f1e:	e8 5b 4d ff ff       	call   c000cc7e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017f23:	83 c4 0c             	add    esp,0xc
c0017f26:	6a 00                	push   0x0
c0017f28:	68 c8 79 01 c0       	push   0xc00179c8
c0017f2d:	6a 0d                	push   0xd
c0017f2f:	e8 4a 4d ff ff       	call   c000cc7e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017f34:	83 c4 0c             	add    esp,0xc
c0017f37:	6a 00                	push   0x0
c0017f39:	68 2f 7a 01 c0       	push   0xc0017a2f
c0017f3e:	6a 0e                	push   0xe
c0017f40:	e8 39 4d ff ff       	call   c000cc7e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017f45:	83 c4 10             	add    esp,0x10
c0017f48:	50                   	push   eax
c0017f49:	6a 00                	push   0x0
c0017f4b:	68 b8 7a 01 c0       	push   0xc0017ab8
c0017f50:	53                   	push   ebx
c0017f51:	43                   	inc    ebx
c0017f52:	e8 27 4d ff ff       	call   c000cc7e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017f57:	83 c4 10             	add    esp,0x10
c0017f5a:	83 fb 1e             	cmp    ebx,0x1e
c0017f5d:	75 e9                	jne    c0017f48 <HalInitialise()+0x137>
c0017f5f:	50                   	push   eax
c0017f60:	6a 00                	push   0x0
c0017f62:	68 34 27 01 c0       	push   0xc0012734
c0017f67:	6a 60                	push   0x60
c0017f69:	e8 10 4d ff ff       	call   c000cc7e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017f6e:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017f73:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0017f7d:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0017f84:	e8 2d fb fe ff       	call   c0007ab6 <malloc>
c0017f89:	89 04 24             	mov    DWORD PTR [esp],eax
c0017f8c:	89 c3                	mov    ebx,eax
c0017f8e:	e8 3b 09 00 00       	call   c00188ce <RTC::RTC()>
c0017f93:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0017f9d:	5a                   	pop    edx
c0017f9e:	59                   	pop    ecx
c0017f9f:	53                   	push   ebx
c0017fa0:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017fa6:	e8 9f 47 ff ff       	call   c000c74a <Device::addChild(Device*)>
c0017fab:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017fad:	6a 00                	push   0x0
c0017faf:	6a 00                	push   0x0
c0017fb1:	6a 00                	push   0x0
c0017fb3:	53                   	push   ebx
c0017fb4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017fb7:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017fbc:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0017fc2:	83 c4 28             	add    esp,0x28
c0017fc5:	5b                   	pop    ebx
c0017fc6:	c3                   	ret    

c0017fc7 <HalMakeBeep(int)>:
c0017fc7:	53                   	push   ebx
c0017fc8:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0017fcc:	85 db                	test   ebx,ebx
c0017fce:	75 07                	jne    c0017fd7 <HalMakeBeep(int)+0x10>
c0017fd0:	e4 61                	in     al,0x61
c0017fd2:	83 e0 fc             	and    eax,0xfffffffc
c0017fd5:	eb 26                	jmp    c0017ffd <HalMakeBeep(int)+0x36>
c0017fd7:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0017fdc:	99                   	cdq    
c0017fdd:	f7 fb                	idiv   ebx
c0017fdf:	89 c1                	mov    ecx,eax
c0017fe1:	b0 b6                	mov    al,0xb6
c0017fe3:	e6 43                	out    0x43,al
c0017fe5:	88 c8                	mov    al,cl
c0017fe7:	e6 42                	out    0x42,al
c0017fe9:	89 c8                	mov    eax,ecx
c0017feb:	c1 e8 08             	shr    eax,0x8
c0017fee:	e6 42                	out    0x42,al
c0017ff0:	e4 61                	in     al,0x61
c0017ff2:	89 c2                	mov    edx,eax
c0017ff4:	83 ca 03             	or     edx,0x3
c0017ff7:	38 d0                	cmp    al,dl
c0017ff9:	74 04                	je     c0017fff <HalMakeBeep(int)+0x38>
c0017ffb:	88 d0                	mov    al,dl
c0017ffd:	e6 61                	out    0x61,al
c0017fff:	5b                   	pop    ebx
c0018000:	c3                   	ret    

c0018001 <HalGetRand()>:
c0018001:	31 c0                	xor    eax,eax
c0018003:	c3                   	ret    

c0018004 <HalEndOfInterrupt(int)>:
c0018004:	80 3d 60 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029760,0x0
c001800b:	74 23                	je     c0018030 <HalEndOfInterrupt(int)+0x2c>
c001800d:	83 ec 14             	sub    esp,0x14
c0018010:	6a 1b                	push   0x1b
c0018012:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018018:	e8 a3 f0 fe ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c001801d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0018022:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c001802c:	83 c4 1c             	add    esp,0x1c
c001802f:	c3                   	ret    
c0018030:	e9 3f 02 00 00       	jmp    c0018274 <picEOI(int)>

c0018035 <HalRestart()>:
c0018035:	c3                   	ret    

c0018036 <HalShutdown()>:
c0018036:	c3                   	ret    

c0018037 <HalSleep()>:
c0018037:	c3                   	ret    

c0018038 <picIoWait()>:
c0018038:	eb 00                	jmp    c001803a <picIoWait()+0x2>
c001803a:	eb 00                	jmp    c001803c <picIoWait()+0x4>
c001803c:	90                   	nop
c001803d:	c3                   	ret    
c001803e:	66 90                	xchg   ax,ax

c0018040 <picDisable()>:
c0018040:	83 ec 10             	sub    esp,0x10
c0018043:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c001804a:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c001804f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018053:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0018058:	ee                   	out    dx,al
c0018059:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0018060:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0018065:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018069:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001806e:	ee                   	out    dx,al
c001806f:	90                   	nop
c0018070:	83 c4 10             	add    esp,0x10
c0018073:	c3                   	ret    

c0018074 <picGetIRQReg(int)>:
c0018074:	83 ec 10             	sub    esp,0x10
c0018077:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001807b:	0f b6 c0             	movzx  eax,al
c001807e:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0018085:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0018089:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001808d:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0018092:	ee                   	out    dx,al
c0018093:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018097:	0f b6 c0             	movzx  eax,al
c001809a:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c00180a1:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00180a5:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00180a9:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00180ae:	ee                   	out    dx,al
c00180af:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c00180b6:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00180bb:	89 c2                	mov    edx,eax
c00180bd:	ec                   	in     al,dx
c00180be:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00180c2:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00180c6:	0f b6 c0             	movzx  eax,al
c00180c9:	c1 e0 08             	shl    eax,0x8
c00180cc:	89 c1                	mov    ecx,eax
c00180ce:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c00180d5:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00180da:	89 c2                	mov    edx,eax
c00180dc:	ec                   	in     al,dx
c00180dd:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00180e1:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00180e5:	0f b6 c0             	movzx  eax,al
c00180e8:	09 c8                	or     eax,ecx
c00180ea:	83 c4 10             	add    esp,0x10
c00180ed:	c3                   	ret    
c00180ee:	66 90                	xchg   ax,ax

c00180f0 <picOpen()>:
c00180f0:	83 ec 50             	sub    esp,0x50
c00180f3:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c00180fa:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00180ff:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018103:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018107:	ee                   	out    dx,al
c0018108:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c001810f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0018114:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0018118:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001811c:	ee                   	out    dx,al
c001811d:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0018125:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c001812d:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0018134:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018138:	89 c2                	mov    edx,eax
c001813a:	ec                   	in     al,dx
c001813b:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001813f:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0018143:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0018147:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c001814e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018152:	89 c2                	mov    edx,eax
c0018154:	ec                   	in     al,dx
c0018155:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0018159:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001815d:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0018161:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0018168:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c001816d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0018171:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018175:	ee                   	out    dx,al
c0018176:	e8 bd fe ff ff       	call   c0018038 <picIoWait()>
c001817b:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0018182:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0018187:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c001818b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001818f:	ee                   	out    dx,al
c0018190:	e8 a3 fe ff ff       	call   c0018038 <picIoWait()>
c0018195:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0018199:	0f b6 c0             	movzx  eax,al
c001819c:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c00181a3:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c00181a7:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00181ab:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00181af:	ee                   	out    dx,al
c00181b0:	e8 83 fe ff ff       	call   c0018038 <picIoWait()>
c00181b5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00181b9:	0f b6 c0             	movzx  eax,al
c00181bc:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c00181c3:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c00181c7:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c00181cb:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00181cf:	ee                   	out    dx,al
c00181d0:	e8 63 fe ff ff       	call   c0018038 <picIoWait()>
c00181d5:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c00181dc:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c00181e1:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c00181e5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00181e9:	ee                   	out    dx,al
c00181ea:	e8 49 fe ff ff       	call   c0018038 <picIoWait()>
c00181ef:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c00181f6:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c00181fb:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c00181ff:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018203:	ee                   	out    dx,al
c0018204:	e8 2f fe ff ff       	call   c0018038 <picIoWait()>
c0018209:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0018210:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0018215:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0018219:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001821d:	ee                   	out    dx,al
c001821e:	e8 15 fe ff ff       	call   c0018038 <picIoWait()>
c0018223:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c001822a:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c001822f:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0018233:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018237:	ee                   	out    dx,al
c0018238:	e8 fb fd ff ff       	call   c0018038 <picIoWait()>
c001823d:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c0018242:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0018249:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c001824d:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0018251:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0018255:	ee                   	out    dx,al
c0018256:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c001825b:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0018262:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0018266:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c001826a:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001826e:	ee                   	out    dx,al
c001826f:	90                   	nop
c0018270:	83 c4 50             	add    esp,0x50
c0018273:	c3                   	ret    

c0018274 <picEOI(int)>:
c0018274:	83 ec 10             	sub    esp,0x10
c0018277:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001827c:	75 1e                	jne    c001829c <picEOI(int)+0x28>
c001827e:	6a 0b                	push   0xb
c0018280:	e8 ef fd ff ff       	call   c0018074 <picGetIRQReg(int)>
c0018285:	83 c4 04             	add    esp,0x4
c0018288:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001828d:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c0018292:	25 80 00 00 00       	and    eax,0x80
c0018297:	74 73                	je     c001830c <picEOI(int)+0x98>
c0018299:	8d 76 00             	lea    esi,[esi+0x0]
c001829c:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c00182a1:	75 31                	jne    c00182d4 <picEOI(int)+0x60>
c00182a3:	6a 0b                	push   0xb
c00182a5:	e8 ca fd ff ff       	call   c0018074 <picGetIRQReg(int)>
c00182aa:	83 c4 04             	add    esp,0x4
c00182ad:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00182b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00182b6:	98                   	cwde   
c00182b7:	85 c0                	test   eax,eax
c00182b9:	78 19                	js     c00182d4 <picEOI(int)+0x60>
c00182bb:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c00182c2:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c00182c7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00182cb:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00182d0:	ee                   	out    dx,al
c00182d1:	eb 3d                	jmp    c0018310 <picEOI(int)+0x9c>
c00182d3:	90                   	nop
c00182d4:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c00182d9:	7e 19                	jle    c00182f4 <picEOI(int)+0x80>
c00182db:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c00182e2:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c00182e7:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00182eb:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00182f0:	ee                   	out    dx,al
c00182f1:	8d 76 00             	lea    esi,[esi+0x0]
c00182f4:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00182fb:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0018300:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0018304:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0018309:	ee                   	out    dx,al
c001830a:	eb 04                	jmp    c0018310 <picEOI(int)+0x9c>
c001830c:	90                   	nop
c001830d:	8d 76 00             	lea    esi,[esi+0x0]
c0018310:	83 c4 10             	add    esp,0x10
c0018313:	c3                   	ret    

c0018314 <RTC::open(int, int, void*)>:
c0018314:	31 c0                	xor    eax,eax
c0018316:	c3                   	ret    
c0018317:	90                   	nop

c0018318 <RTC::close(int, int, void*)>:
c0018318:	31 c0                	xor    eax,eax
c001831a:	c3                   	ret    
c001831b:	90                   	nop

c001831c <RTC::timeInSecondsUTC()>:
c001831c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018320:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0018326:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001832c:	c3                   	ret    
c001832d:	90                   	nop

c001832e <RTC::timeInDatetimeUTC()>:
c001832e:	53                   	push   ebx
c001832f:	83 ec 14             	sub    esp,0x14
c0018332:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0018336:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001833a:	8b 10                	mov    edx,DWORD PTR [eax]
c001833c:	50                   	push   eax
c001833d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0018340:	83 c4 0c             	add    esp,0xc
c0018343:	52                   	push   edx
c0018344:	50                   	push   eax
c0018345:	53                   	push   ebx
c0018346:	e8 73 41 ff ff       	call   c000c4be <secondsToDatetime(unsigned long long)>
c001834b:	89 d8                	mov    eax,ebx
c001834d:	83 c4 14             	add    esp,0x14
c0018350:	5b                   	pop    ebx
c0018351:	c2 04 00             	ret    0x4

c0018354 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0018354:	56                   	push   esi
c0018355:	53                   	push   ebx
c0018356:	83 ec 14             	sub    esp,0x14
c0018359:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001835d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001835f:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0018362:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018366:	52                   	push   edx
c0018367:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001836b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001836f:	50                   	push   eax
c0018370:	e8 49 41 ff ff       	call   c000c4be <secondsToDatetime(unsigned long long)>
c0018375:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018379:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001837d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0018381:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0018385:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0018389:	89 f0                	mov    eax,esi
c001838b:	83 c4 20             	add    esp,0x20
c001838e:	5b                   	pop    ebx
c001838f:	5e                   	pop    esi
c0018390:	ff e0                	jmp    eax

c0018392 <RTC::~RTC()>:
c0018392:	83 ec 0c             	sub    esp,0xc
c0018395:	ba 6c 29 02 c0       	mov    edx,0xc002296c
c001839a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001839e:	89 10                	mov    DWORD PTR [eax],edx
c00183a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00183a4:	83 ec 0c             	sub    esp,0xc
c00183a7:	50                   	push   eax
c00183a8:	e8 a3 3e ff ff       	call   c000c250 <Clock::~Clock()>
c00183ad:	83 c4 10             	add    esp,0x10
c00183b0:	90                   	nop
c00183b1:	83 c4 0c             	add    esp,0xc
c00183b4:	c3                   	ret    
c00183b5:	90                   	nop

c00183b6 <RTC::~RTC()>:
c00183b6:	83 ec 0c             	sub    esp,0xc
c00183b9:	83 ec 0c             	sub    esp,0xc
c00183bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00183c0:	e8 cd ff ff ff       	call   c0018392 <RTC::~RTC()>
c00183c5:	83 c4 10             	add    esp,0x10
c00183c8:	83 ec 08             	sub    esp,0x8
c00183cb:	68 60 01 00 00       	push   0x160
c00183d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00183d4:	e8 3f 24 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c00183d9:	83 c4 10             	add    esp,0x10
c00183dc:	83 c4 0c             	add    esp,0xc
c00183df:	c3                   	ret    

c00183e0 <RTC::get_update_in_progress_flag()>:
c00183e0:	83 ec 14             	sub    esp,0x14
c00183e3:	6a 0a                	push   0xa
c00183e5:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00183eb:	e8 88 ed fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00183f0:	83 c4 1c             	add    esp,0x1c
c00183f3:	0f b6 c0             	movzx  eax,al
c00183f6:	c1 e8 07             	shr    eax,0x7
c00183f9:	c3                   	ret    

c00183fa <RTC::completeRTCRefresh()>:
c00183fa:	55                   	push   ebp
c00183fb:	57                   	push   edi
c00183fc:	56                   	push   esi
c00183fd:	53                   	push   ebx
c00183fe:	83 ec 3c             	sub    esp,0x3c
c0018401:	8b 1d ec 88 02 c0    	mov    ebx,DWORD PTR ds:0xc00288ec
c0018407:	83 ec 0c             	sub    esp,0xc
c001840a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001840e:	e8 cd ff ff ff       	call   c00183e0 <RTC::get_update_in_progress_flag()>
c0018413:	83 c4 10             	add    esp,0x10
c0018416:	84 c0                	test   al,al
c0018418:	74 0e                	je     c0018428 <RTC::completeRTCRefresh()+0x2e>
c001841a:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0018420:	3b 05 ec 88 02 c0    	cmp    eax,DWORD PTR ds:0xc00288ec
c0018426:	73 df                	jae    c0018407 <RTC::completeRTCRefresh()+0xd>
c0018428:	51                   	push   ecx
c0018429:	51                   	push   ecx
c001842a:	6a 00                	push   0x0
c001842c:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018432:	e8 41 ed fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018437:	5b                   	pop    ebx
c0018438:	89 c7                	mov    edi,eax
c001843a:	5e                   	pop    esi
c001843b:	6a 02                	push   0x2
c001843d:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018443:	e8 30 ed fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018448:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001844c:	5d                   	pop    ebp
c001844d:	58                   	pop    eax
c001844e:	6a 04                	push   0x4
c0018450:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018456:	e8 1d ed fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001845b:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c001845f:	58                   	pop    eax
c0018460:	5a                   	pop    edx
c0018461:	6a 07                	push   0x7
c0018463:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018469:	e8 0a ed fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001846e:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0018472:	59                   	pop    ecx
c0018473:	5b                   	pop    ebx
c0018474:	6a 08                	push   0x8
c0018476:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001847c:	e8 f7 ec fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018481:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0018485:	5e                   	pop    esi
c0018486:	5d                   	pop    ebp
c0018487:	6a 09                	push   0x9
c0018489:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001848f:	e8 e4 ec fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018494:	0f b6 c0             	movzx  eax,al
c0018497:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001849b:	83 c4 10             	add    esp,0x10
c001849e:	8b 1d ec 88 02 c0    	mov    ebx,DWORD PTR ds:0xc00288ec
c00184a4:	83 ec 0c             	sub    esp,0xc
c00184a7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00184ab:	e8 30 ff ff ff       	call   c00183e0 <RTC::get_update_in_progress_flag()>
c00184b0:	83 c4 10             	add    esp,0x10
c00184b3:	84 c0                	test   al,al
c00184b5:	74 0e                	je     c00184c5 <RTC::completeRTCRefresh()+0xcb>
c00184b7:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c00184bd:	3b 05 ec 88 02 c0    	cmp    eax,DWORD PTR ds:0xc00288ec
c00184c3:	73 df                	jae    c00184a4 <RTC::completeRTCRefresh()+0xaa>
c00184c5:	51                   	push   ecx
c00184c6:	51                   	push   ecx
c00184c7:	6a 00                	push   0x0
c00184c9:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00184cf:	e8 a4 ec fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00184d4:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00184d8:	5b                   	pop    ebx
c00184d9:	5e                   	pop    esi
c00184da:	6a 02                	push   0x2
c00184dc:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00184e2:	e8 91 ec fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00184e7:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00184eb:	5d                   	pop    ebp
c00184ec:	58                   	pop    eax
c00184ed:	6a 04                	push   0x4
c00184ef:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00184f5:	e8 7e ec fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00184fa:	88 c3                	mov    bl,al
c00184fc:	58                   	pop    eax
c00184fd:	5a                   	pop    edx
c00184fe:	6a 07                	push   0x7
c0018500:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018506:	e8 6d ec fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001850b:	59                   	pop    ecx
c001850c:	89 c6                	mov    esi,eax
c001850e:	5d                   	pop    ebp
c001850f:	6a 08                	push   0x8
c0018511:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018517:	e8 5c ec fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001851c:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0018520:	58                   	pop    eax
c0018521:	5a                   	pop    edx
c0018522:	6a 09                	push   0x9
c0018524:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001852a:	e8 49 ec fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001852f:	89 f9                	mov    ecx,edi
c0018531:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0018535:	0f b6 e8             	movzx  ebp,al
c0018538:	83 c4 10             	add    esp,0x10
c001853b:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c001853f:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018544:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c0018549:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001854d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0018551:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c0018555:	0f 94 c0             	sete   al
c0018558:	0f b6 fb             	movzx  edi,bl
c001855b:	3a 4c 24 18          	cmp    cl,BYTE PTR [esp+0x18]
c001855f:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c0018564:	0f 94 c2             	sete   dl
c0018567:	21 d0                	and    eax,edx
c0018569:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c001856d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0018571:	0f 94 c2             	sete   dl
c0018574:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0018578:	21 c2                	and    edx,eax
c001857a:	89 f0                	mov    eax,esi
c001857c:	0f b6 c0             	movzx  eax,al
c001857f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018583:	89 f0                	mov    eax,esi
c0018585:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c0018589:	0f 94 c0             	sete   al
c001858c:	21 d0                	and    eax,edx
c001858e:	31 d2                	xor    edx,edx
c0018590:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c0018594:	0f 94 c2             	sete   dl
c0018597:	85 c2                	test   edx,eax
c0018599:	75 27                	jne    c00185c2 <RTC::completeRTCRefresh()+0x1c8>
c001859b:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001859f:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c00185a3:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c00185a7:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c00185ab:	89 f0                	mov    eax,esi
c00185ad:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00185b1:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c00185b5:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00185b9:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00185bd:	e9 dc fe ff ff       	jmp    c001849e <RTC::completeRTCRefresh()+0xa4>
c00185c2:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c00185c6:	75 d3                	jne    c001859b <RTC::completeRTCRefresh()+0x1a1>
c00185c8:	52                   	push   edx
c00185c9:	52                   	push   edx
c00185ca:	6a 0b                	push   0xb
c00185cc:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00185d2:	e8 a1 eb fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00185d7:	83 c4 10             	add    esp,0x10
c00185da:	a8 04                	test   al,0x4
c00185dc:	75 7a                	jne    c0018658 <RTC::completeRTCRefresh()+0x25e>
c00185de:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00185e2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00185e6:	83 e1 0f             	and    ecx,0xf
c00185e9:	c1 ea 04             	shr    edx,0x4
c00185ec:	c1 ef 04             	shr    edi,0x4
c00185ef:	6b d2 0a             	imul   edx,edx,0xa
c00185f2:	83 e6 0f             	and    esi,0xf
c00185f5:	01 d1                	add    ecx,edx
c00185f7:	c1 ed 04             	shr    ebp,0x4
c00185fa:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00185fe:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018602:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018606:	c1 ea 04             	shr    edx,0x4
c0018609:	83 e1 0f             	and    ecx,0xf
c001860c:	6b d2 0a             	imul   edx,edx,0xa
c001860f:	6b ed 0a             	imul   ebp,ebp,0xa
c0018612:	01 d1                	add    ecx,edx
c0018614:	89 fa                	mov    edx,edi
c0018616:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001861a:	83 e2 07             	and    edx,0x7
c001861d:	89 d9                	mov    ecx,ebx
c001861f:	6b d2 0a             	imul   edx,edx,0xa
c0018622:	83 e1 0f             	and    ecx,0xf
c0018625:	83 e3 80             	and    ebx,0xffffff80
c0018628:	01 d1                	add    ecx,edx
c001862a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001862e:	09 cb                	or     ebx,ecx
c0018630:	c1 ea 04             	shr    edx,0x4
c0018633:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018637:	6b d2 0a             	imul   edx,edx,0xa
c001863a:	83 e1 0f             	and    ecx,0xf
c001863d:	01 d6                	add    esi,edx
c001863f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018643:	c1 ea 04             	shr    edx,0x4
c0018646:	6b d2 0a             	imul   edx,edx,0xa
c0018649:	01 d1                	add    ecx,edx
c001864b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001864f:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0018653:	83 e2 0f             	and    edx,0xf
c0018656:	01 d5                	add    ebp,edx
c0018658:	a8 02                	test   al,0x2
c001865a:	75 15                	jne    c0018671 <RTC::completeRTCRefresh()+0x277>
c001865c:	f6 c3 80             	test   bl,0x80
c001865f:	74 10                	je     c0018671 <RTC::completeRTCRefresh()+0x277>
c0018661:	83 e3 7f             	and    ebx,0x7f
c0018664:	b9 18 00 00 00       	mov    ecx,0x18
c0018669:	8d 43 0c             	lea    eax,[ebx+0xc]
c001866c:	99                   	cdq    
c001866d:	f7 f9                	idiv   ecx
c001866f:	88 d3                	mov    bl,dl
c0018671:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c0018677:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c001867d:	77 06                	ja     c0018685 <RTC::completeRTCRefresh()+0x28b>
c001867f:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c0018685:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001868a:	31 c9                	xor    ecx,ecx
c001868c:	c1 e0 10             	shl    eax,0x10
c001868f:	89 cd                	mov    ebp,ecx
c0018691:	c1 e7 10             	shl    edi,0x10
c0018694:	31 d2                	xor    edx,edx
c0018696:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001869c:	09 c5                	or     ebp,eax
c001869e:	89 f0                	mov    eax,esi
c00186a0:	89 e9                	mov    ecx,ebp
c00186a2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00186a6:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c00186aa:	88 c2                	mov    dl,al
c00186ac:	88 d9                	mov    cl,bl
c00186ae:	8a 74 24 10          	mov    dh,BYTE PTR [esp+0x10]
c00186b2:	0f b7 c2             	movzx  eax,dx
c00186b5:	09 f8                	or     eax,edi
c00186b7:	89 c2                	mov    edx,eax
c00186b9:	50                   	push   eax
c00186ba:	50                   	push   eax
c00186bb:	51                   	push   ecx
c00186bc:	52                   	push   edx
c00186bd:	e8 7d 3c ff ff       	call   c000c33f <datetimeToSeconds(datetime_t)>
c00186c2:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c00186c6:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c00186cc:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c00186d2:	83 c4 4c             	add    esp,0x4c
c00186d5:	5b                   	pop    ebx
c00186d6:	5e                   	pop    esi
c00186d7:	5f                   	pop    edi
c00186d8:	5d                   	pop    ebp
c00186d9:	c3                   	ret    

c00186da <RTC::setTimeInDatetimeUTC(datetime_t)>:
c00186da:	55                   	push   ebp
c00186db:	57                   	push   edi
c00186dc:	56                   	push   esi
c00186dd:	53                   	push   ebx
c00186de:	83 ec 30             	sub    esp,0x30
c00186e1:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00186e5:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00186e9:	6a 00                	push   0x0
c00186eb:	6a 00                	push   0x0
c00186ed:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00186f3:	e8 9a eb fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c00186f8:	83 c4 0c             	add    esp,0xc
c00186fb:	6a 00                	push   0x0
c00186fd:	6a 02                	push   0x2
c00186ff:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018705:	e8 88 eb fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c001870a:	31 d2                	xor    edx,edx
c001870c:	89 f9                	mov    ecx,edi
c001870e:	89 f8                	mov    eax,edi
c0018710:	c1 e9 10             	shr    ecx,0x10
c0018713:	0f b6 c4             	movzx  eax,ah
c0018716:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c001871a:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001871e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018722:	b9 64 00 00 00       	mov    ecx,0x64
c0018727:	89 f0                	mov    eax,esi
c0018729:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001872d:	89 f0                	mov    eax,esi
c001872f:	0f b6 c4             	movzx  eax,ah
c0018732:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018736:	89 f0                	mov    eax,esi
c0018738:	c1 e8 10             	shr    eax,0x10
c001873b:	f7 f1                	div    ecx
c001873d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0018741:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0018745:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0018749:	59                   	pop    ecx
c001874a:	5b                   	pop    ebx
c001874b:	89 fb                	mov    ebx,edi
c001874d:	6a 0b                	push   0xb
c001874f:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018755:	e8 1e ea fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001875a:	83 c4 10             	add    esp,0x10
c001875d:	89 c5                	mov    ebp,eax
c001875f:	a8 04                	test   al,0x4
c0018761:	75 6e                	jne    c00187d1 <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c0018763:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018767:	31 d2                	xor    edx,edx
c0018769:	0f b6 c1             	movzx  eax,cl
c001876c:	b9 0a 00 00 00       	mov    ecx,0xa
c0018771:	f7 f1                	div    ecx
c0018773:	c1 e0 04             	shl    eax,0x4
c0018776:	09 d0                	or     eax,edx
c0018778:	31 d2                	xor    edx,edx
c001877a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001877e:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0018783:	f7 f1                	div    ecx
c0018785:	c1 e0 04             	shl    eax,0x4
c0018788:	09 d0                	or     eax,edx
c001878a:	31 d2                	xor    edx,edx
c001878c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018790:	0f b6 c3             	movzx  eax,bl
c0018793:	f7 f1                	div    ecx
c0018795:	c1 e0 04             	shl    eax,0x4
c0018798:	09 d0                	or     eax,edx
c001879a:	31 d2                	xor    edx,edx
c001879c:	89 c3                	mov    ebx,eax
c001879e:	89 f0                	mov    eax,esi
c00187a0:	0f b6 c0             	movzx  eax,al
c00187a3:	f7 f1                	div    ecx
c00187a5:	c1 e0 04             	shl    eax,0x4
c00187a8:	09 d0                	or     eax,edx
c00187aa:	31 d2                	xor    edx,edx
c00187ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00187b0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00187b5:	f7 f1                	div    ecx
c00187b7:	c1 e0 04             	shl    eax,0x4
c00187ba:	09 d0                	or     eax,edx
c00187bc:	31 d2                	xor    edx,edx
c00187be:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00187c2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00187c6:	f7 f1                	div    ecx
c00187c8:	c1 e0 04             	shl    eax,0x4
c00187cb:	09 d0                	or     eax,edx
c00187cd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00187d1:	83 e5 02             	and    ebp,0x2
c00187d4:	75 1e                	jne    c00187f4 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c00187d6:	0f b6 c3             	movzx  eax,bl
c00187d9:	83 f8 0b             	cmp    eax,0xb
c00187dc:	76 10                	jbe    c00187ee <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c00187de:	8d 53 f4             	lea    edx,[ebx-0xc]
c00187e1:	88 d3                	mov    bl,dl
c00187e3:	84 d2                	test   dl,dl
c00187e5:	75 02                	jne    c00187e9 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c00187e7:	b3 0c                	mov    bl,0xc
c00187e9:	83 cb 80             	or     ebx,0xffffff80
c00187ec:	eb 06                	jmp    c00187f4 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c00187ee:	85 c0                	test   eax,eax
c00187f0:	75 02                	jne    c00187f4 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c00187f2:	b3 0c                	mov    bl,0xc
c00187f4:	0f b6 db             	movzx  ebx,bl
c00187f7:	50                   	push   eax
c00187f8:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00187fd:	52                   	push   edx
c00187fe:	6a 00                	push   0x0
c0018800:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018806:	e8 87 ea fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c001880b:	83 c4 0c             	add    esp,0xc
c001880e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018813:	50                   	push   eax
c0018814:	6a 02                	push   0x2
c0018816:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001881c:	e8 71 ea fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018821:	83 c4 0c             	add    esp,0xc
c0018824:	53                   	push   ebx
c0018825:	6a 04                	push   0x4
c0018827:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001882d:	e8 60 ea fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018832:	83 c4 0c             	add    esp,0xc
c0018835:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c001883a:	52                   	push   edx
c001883b:	6a 07                	push   0x7
c001883d:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018843:	e8 4a ea fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018848:	83 c4 0c             	add    esp,0xc
c001884b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018850:	50                   	push   eax
c0018851:	6a 08                	push   0x8
c0018853:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018859:	e8 34 ea fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c001885e:	83 c4 0c             	add    esp,0xc
c0018861:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0018866:	55                   	push   ebp
c0018867:	6a 09                	push   0x9
c0018869:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001886f:	e8 1e ea fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018874:	5a                   	pop    edx
c0018875:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018879:	e8 7c fb ff ff       	call   c00183fa <RTC::completeRTCRefresh()>
c001887e:	83 c4 3c             	add    esp,0x3c
c0018881:	b0 01                	mov    al,0x1
c0018883:	5b                   	pop    ebx
c0018884:	5e                   	pop    esi
c0018885:	5f                   	pop    edi
c0018886:	5d                   	pop    ebp
c0018887:	c3                   	ret    

c0018888 <rtcIRQHandler(regs*, void*)>:
c0018888:	53                   	push   ebx
c0018889:	83 ec 10             	sub    esp,0x10
c001888c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0018890:	6a 0c                	push   0xc
c0018892:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018898:	e8 db e8 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001889d:	83 c4 10             	add    esp,0x10
c00188a0:	a8 80                	test   al,0x80
c00188a2:	74 24                	je     c00188c8 <rtcIRQHandler(regs*, void*)+0x40>
c00188a4:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c00188ab:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c00188b2:	66 ff 05 78 97 02 c0 	inc    WORD PTR ds:0xc0029778
c00188b9:	75 0d                	jne    c00188c8 <rtcIRQHandler(regs*, void*)+0x40>
c00188bb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00188bf:	83 c4 08             	add    esp,0x8
c00188c2:	5b                   	pop    ebx
c00188c3:	e9 32 fb ff ff       	jmp    c00183fa <RTC::completeRTCRefresh()>
c00188c8:	83 c4 08             	add    esp,0x8
c00188cb:	5b                   	pop    ebx
c00188cc:	c3                   	ret    
c00188cd:	90                   	nop

c00188ce <RTC::RTC()>:
c00188ce:	83 ec 1c             	sub    esp,0x1c
c00188d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00188d5:	83 ec 08             	sub    esp,0x8
c00188d8:	68 4f 29 02 c0       	push   0xc002294f
c00188dd:	50                   	push   eax
c00188de:	e8 37 39 ff ff       	call   c000c21a <Clock::Clock(char const*)>
c00188e3:	83 c4 10             	add    esp,0x10
c00188e6:	ba 6c 29 02 c0       	mov    edx,0xc002296c
c00188eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00188ef:	89 10                	mov    DWORD PTR [eax],edx
c00188f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00188f5:	83 ec 0c             	sub    esp,0xc
c00188f8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00188fc:	6a 01                	push   0x1
c00188fe:	68 88 88 01 c0       	push   0xc0018888
c0018903:	6a 08                	push   0x8
c0018905:	50                   	push   eax
c0018906:	e8 eb 3d ff ff       	call   c000c6f6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001890b:	83 c4 20             	add    esp,0x20
c001890e:	89 c2                	mov    edx,eax
c0018910:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018914:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001891a:	fa                   	cli    
c001891b:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0018920:	83 c0 01             	add    eax,0x1
c0018923:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0018928:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001892d:	83 ec 08             	sub    esp,0x8
c0018930:	6a 0b                	push   0xb
c0018932:	50                   	push   eax
c0018933:	e8 40 e8 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018938:	83 c4 10             	add    esp,0x10
c001893b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001893f:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0018944:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018948:	83 ca 10             	or     edx,0x10
c001894b:	0f b6 d2             	movzx  edx,dl
c001894e:	83 ec 04             	sub    esp,0x4
c0018951:	52                   	push   edx
c0018952:	6a 0b                	push   0xb
c0018954:	50                   	push   eax
c0018955:	e8 38 e9 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c001895a:	83 c4 10             	add    esp,0x10
c001895d:	83 ec 0c             	sub    esp,0xc
c0018960:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018964:	e8 91 fa ff ff       	call   c00183fa <RTC::completeRTCRefresh()>
c0018969:	83 c4 10             	add    esp,0x10
c001896c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0018971:	83 e8 01             	sub    eax,0x1
c0018974:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0018979:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001897e:	85 c0                	test   eax,eax
c0018980:	75 01                	jne    c0018983 <RTC::RTC()+0xb5>
c0018982:	fb                   	sti    
c0018983:	90                   	nop
c0018984:	83 c4 1c             	add    esp,0x1c
c0018987:	c3                   	ret    

c0018988 <HalConsoleScroll(int, int)>:
c0018988:	83 ec 10             	sub    esp,0x10
c001898b:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0018993:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c001899b:	90                   	nop
c001899c:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c00189a1:	0f 8f e1 00 00 00    	jg     c0018a88 <HalConsoleScroll(int, int)+0x100>
c00189a7:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00189af:	90                   	nop
c00189b0:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c00189b8:	0f 8f be 00 00 00    	jg     c0018a7c <HalConsoleScroll(int, int)+0xf4>
c00189be:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00189c2:	89 d0                	mov    eax,edx
c00189c4:	c1 e0 02             	shl    eax,0x2
c00189c7:	01 d0                	add    eax,edx
c00189c9:	c1 e0 05             	shl    eax,0x5
c00189cc:	89 c2                	mov    edx,eax
c00189ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00189d2:	01 d0                	add    eax,edx
c00189d4:	89 c2                	mov    edx,eax
c00189d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00189da:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00189dd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00189e1:	89 d0                	mov    eax,edx
c00189e3:	c1 e0 02             	shl    eax,0x2
c00189e6:	01 d0                	add    eax,edx
c00189e8:	c1 e0 05             	shl    eax,0x5
c00189eb:	89 c2                	mov    edx,eax
c00189ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00189f1:	01 d0                	add    eax,edx
c00189f3:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c00189f9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00189fd:	01 c2                	add    edx,eax
c00189ff:	8a 01                	mov    al,BYTE PTR [ecx]
c0018a01:	88 02                	mov    BYTE PTR [edx],al
c0018a03:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018a08:	75 66                	jne    c0018a70 <HalConsoleScroll(int, int)+0xe8>
c0018a0a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018a0e:	83 e0 01             	and    eax,0x1
c0018a11:	74 39                	je     c0018a4c <HalConsoleScroll(int, int)+0xc4>
c0018a13:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018a17:	83 e0 0f             	and    eax,0xf
c0018a1a:	88 c2                	mov    dl,al
c0018a1c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018a20:	c1 e0 04             	shl    eax,0x4
c0018a23:	09 d0                	or     eax,edx
c0018a25:	88 c1                	mov    cl,al
c0018a27:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018a2b:	89 d0                	mov    eax,edx
c0018a2d:	c1 e0 02             	shl    eax,0x2
c0018a30:	01 d0                	add    eax,edx
c0018a32:	c1 e0 05             	shl    eax,0x5
c0018a35:	89 c2                	mov    edx,eax
c0018a37:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018a3b:	01 d0                	add    eax,edx
c0018a3d:	89 c2                	mov    edx,eax
c0018a3f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018a43:	01 d0                	add    eax,edx
c0018a45:	88 ca                	mov    dl,cl
c0018a47:	88 10                	mov    BYTE PTR [eax],dl
c0018a49:	eb 25                	jmp    c0018a70 <HalConsoleScroll(int, int)+0xe8>
c0018a4b:	90                   	nop
c0018a4c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018a50:	89 d0                	mov    eax,edx
c0018a52:	c1 e0 02             	shl    eax,0x2
c0018a55:	01 d0                	add    eax,edx
c0018a57:	c1 e0 05             	shl    eax,0x5
c0018a5a:	89 c2                	mov    edx,eax
c0018a5c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018a60:	01 d0                	add    eax,edx
c0018a62:	89 c2                	mov    edx,eax
c0018a64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018a68:	01 d0                	add    eax,edx
c0018a6a:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0018a6d:	8d 76 00             	lea    esi,[esi+0x0]
c0018a70:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0018a75:	e9 36 ff ff ff       	jmp    c00189b0 <HalConsoleScroll(int, int)+0x28>
c0018a7a:	66 90                	xchg   ax,ax
c0018a7c:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0018a81:	e9 16 ff ff ff       	jmp    c001899c <HalConsoleScroll(int, int)+0x14>
c0018a86:	66 90                	xchg   ax,ax
c0018a88:	90                   	nop
c0018a89:	83 c4 10             	add    esp,0x10
c0018a8c:	c3                   	ret    
c0018a8d:	8d 76 00             	lea    esi,[esi+0x0]

c0018a90 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0018a90:	83 ec 14             	sub    esp,0x14
c0018a93:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018a97:	88 04 24             	mov    BYTE PTR [esp],al
c0018a9a:	8a 04 24             	mov    al,BYTE PTR [esp]
c0018a9d:	0f b6 c0             	movzx  eax,al
c0018aa0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018aa4:	89 d1                	mov    ecx,edx
c0018aa6:	83 e1 0f             	and    ecx,0xf
c0018aa9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018aad:	c1 e2 04             	shl    edx,0x4
c0018ab0:	0f b6 d2             	movzx  edx,dl
c0018ab3:	09 ca                	or     edx,ecx
c0018ab5:	c1 e2 08             	shl    edx,0x8
c0018ab8:	09 d0                	or     eax,edx
c0018aba:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0018abf:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0018ac7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018acb:	89 d0                	mov    eax,edx
c0018acd:	c1 e0 02             	shl    eax,0x2
c0018ad0:	01 d0                	add    eax,edx
c0018ad2:	c1 e0 04             	shl    eax,0x4
c0018ad5:	89 c2                	mov    edx,eax
c0018ad7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018adb:	01 d0                	add    eax,edx
c0018add:	01 c0                	add    eax,eax
c0018adf:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0018ae3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018ae7:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0018aec:	66 89 02             	mov    WORD PTR [edx],ax
c0018aef:	90                   	nop
c0018af0:	83 c4 14             	add    esp,0x14
c0018af3:	c3                   	ret    

c0018af4 <HalConsoleCursorUpdate(int, int)>:
c0018af4:	83 ec 20             	sub    esp,0x20
c0018af7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018afb:	89 c2                	mov    edx,eax
c0018afd:	c1 e2 02             	shl    edx,0x2
c0018b00:	01 d0                	add    eax,edx
c0018b02:	c1 e0 04             	shl    eax,0x4
c0018b05:	89 c2                	mov    edx,eax
c0018b07:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018b0b:	01 d0                	add    eax,edx
c0018b0d:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0018b12:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0018b19:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0018b1e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018b22:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018b26:	ee                   	out    dx,al
c0018b27:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0018b2c:	0f b6 c0             	movzx  eax,al
c0018b2f:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0018b36:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0018b3a:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0018b3e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018b42:	ee                   	out    dx,al
c0018b43:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0018b4a:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0018b4f:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0018b53:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018b57:	ee                   	out    dx,al
c0018b58:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0018b5d:	c1 e8 08             	shr    eax,0x8
c0018b60:	0f b6 c0             	movzx  eax,al
c0018b63:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0018b6a:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0018b6e:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0018b72:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018b76:	ee                   	out    dx,al
c0018b77:	90                   	nop
c0018b78:	83 c4 20             	add    esp,0x20
c0018b7b:	c3                   	ret    

c0018b7c <FAT::getName()>:
c0018b7c:	b8 a0 29 02 c0       	mov    eax,0xc00229a0
c0018b81:	c3                   	ret    
c0018b82:	66 90                	xchg   ax,ax

c0018b84 <FAT::tell(void*, unsigned long long*)>:
c0018b84:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018b89:	75 09                	jne    c0018b94 <FAT::tell(void*, unsigned long long*)+0x10>
c0018b8b:	b8 04 00 00 00       	mov    eax,0x4
c0018b90:	c3                   	ret    
c0018b91:	8d 76 00             	lea    esi,[esi+0x0]
c0018b94:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018b99:	75 09                	jne    c0018ba4 <FAT::tell(void*, unsigned long long*)+0x20>
c0018b9b:	b8 04 00 00 00       	mov    eax,0x4
c0018ba0:	c3                   	ret    
c0018ba1:	8d 76 00             	lea    esi,[esi+0x0]
c0018ba4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018ba8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018bab:	ba 00 00 00 00       	mov    edx,0x0
c0018bb0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018bb4:	89 01                	mov    DWORD PTR [ecx],eax
c0018bb6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018bb9:	b8 00 00 00 00       	mov    eax,0x0
c0018bbe:	c3                   	ret    
c0018bbf:	90                   	nop

c0018bc0 <FAT::stat(void*, unsigned long long*)>:
c0018bc0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018bc5:	75 09                	jne    c0018bd0 <FAT::stat(void*, unsigned long long*)+0x10>
c0018bc7:	b8 04 00 00 00       	mov    eax,0x4
c0018bcc:	c3                   	ret    
c0018bcd:	8d 76 00             	lea    esi,[esi+0x0]
c0018bd0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018bd5:	75 09                	jne    c0018be0 <FAT::stat(void*, unsigned long long*)+0x20>
c0018bd7:	b8 04 00 00 00       	mov    eax,0x4
c0018bdc:	c3                   	ret    
c0018bdd:	8d 76 00             	lea    esi,[esi+0x0]
c0018be0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018be4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018be7:	ba 00 00 00 00       	mov    edx,0x0
c0018bec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018bf0:	89 01                	mov    DWORD PTR [ecx],eax
c0018bf2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018bf5:	b8 00 00 00 00       	mov    eax,0x0
c0018bfa:	c3                   	ret    
c0018bfb:	90                   	nop

c0018bfc <FAT::~FAT()>:
c0018bfc:	83 ec 0c             	sub    esp,0xc
c0018bff:	ba ec 29 02 c0       	mov    edx,0xc00229ec
c0018c04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c08:	89 10                	mov    DWORD PTR [eax],edx
c0018c0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c0e:	83 ec 0c             	sub    esp,0xc
c0018c11:	50                   	push   eax
c0018c12:	e8 4b 29 ff ff       	call   c000b562 <Filesystem::~Filesystem()>
c0018c17:	83 c4 10             	add    esp,0x10
c0018c1a:	90                   	nop
c0018c1b:	83 c4 0c             	add    esp,0xc
c0018c1e:	c3                   	ret    
c0018c1f:	90                   	nop

c0018c20 <FAT::~FAT()>:
c0018c20:	83 ec 0c             	sub    esp,0xc
c0018c23:	83 ec 0c             	sub    esp,0xc
c0018c26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018c2a:	e8 cd ff ff ff       	call   c0018bfc <FAT::~FAT()>
c0018c2f:	83 c4 10             	add    esp,0x10
c0018c32:	83 ec 08             	sub    esp,0x8
c0018c35:	6a 08                	push   0x8
c0018c37:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018c3b:	e8 d8 1b ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0018c40:	83 c4 10             	add    esp,0x10
c0018c43:	83 c4 0c             	add    esp,0xc
c0018c46:	c3                   	ret    
c0018c47:	90                   	nop

c0018c48 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0018c48:	83 ec 1c             	sub    esp,0x1c
c0018c4b:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0018c52:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0018c57:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018c5b:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018c62:	83 f8 ff             	cmp    eax,0xffffffff
c0018c65:	75 35                	jne    c0018c9c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0018c67:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018c6b:	88 c2                	mov    dl,al
c0018c6d:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018c72:	01 d0                	add    eax,edx
c0018c74:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018c78:	8b 15 80 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029780
c0018c7e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018c82:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c0018c89:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018c8e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018c92:	89 14 85 20 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd67e0],edx
c0018c99:	eb 19                	jmp    c0018cb4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0018c9b:	90                   	nop
c0018c9c:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018ca0:	88 c2                	mov    dl,al
c0018ca2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018ca6:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018cad:	01 d0                	add    eax,edx
c0018caf:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018cb3:	90                   	nop
c0018cb4:	83 ec 04             	sub    esp,0x4
c0018cb7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018cbb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018cbf:	8d 44 24 15          	lea    eax,[esp+0x15]
c0018cc3:	50                   	push   eax
c0018cc4:	e8 06 c3 fe ff       	call   c0004fcf <f_getlabel>
c0018cc9:	83 c4 10             	add    esp,0x10
c0018ccc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018cd0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018cd5:	75 09                	jne    c0018ce0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0018cd7:	b8 00 00 00 00       	mov    eax,0x0
c0018cdc:	eb 0a                	jmp    c0018ce8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0018cde:	66 90                	xchg   ax,ax
c0018ce0:	b8 01 00 00 00       	mov    eax,0x1
c0018ce5:	8d 76 00             	lea    esi,[esi+0x0]
c0018ce8:	83 c4 1c             	add    esp,0x1c
c0018ceb:	c3                   	ret    

c0018cec <FAT::setlabel(LogicalDisk*, int, char*)>:
c0018cec:	57                   	push   edi
c0018ced:	83 ec 58             	sub    esp,0x58
c0018cf0:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0018cf8:	8d 54 24 10          	lea    edx,[esp+0x10]
c0018cfc:	b8 00 00 00 00       	mov    eax,0x0
c0018d01:	b9 0f 00 00 00       	mov    ecx,0xf
c0018d06:	fc                   	cld    
c0018d07:	89 d7                	mov    edi,edx
c0018d09:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0018d0b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018d0f:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018d16:	83 f8 ff             	cmp    eax,0xffffffff
c0018d19:	75 35                	jne    c0018d50 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c0018d1b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018d1f:	88 c2                	mov    dl,al
c0018d21:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018d26:	01 d0                	add    eax,edx
c0018d28:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018d2c:	8b 15 80 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029780
c0018d32:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018d36:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c0018d3d:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018d42:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0018d46:	89 14 85 20 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd67e0],edx
c0018d4d:	eb 19                	jmp    c0018d68 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c0018d4f:	90                   	nop
c0018d50:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018d54:	88 c2                	mov    dl,al
c0018d56:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018d5a:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018d61:	01 d0                	add    eax,edx
c0018d63:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018d67:	90                   	nop
c0018d68:	83 ec 08             	sub    esp,0x8
c0018d6b:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0018d6f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018d73:	50                   	push   eax
c0018d74:	e8 c7 7a fe ff       	call   c0000840 <strcat>
c0018d79:	83 c4 10             	add    esp,0x10
c0018d7c:	83 ec 0c             	sub    esp,0xc
c0018d7f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018d83:	50                   	push   eax
c0018d84:	e8 97 c3 fe ff       	call   c0005120 <f_setlabel>
c0018d89:	83 c4 10             	add    esp,0x10
c0018d8c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0018d90:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0018d95:	75 09                	jne    c0018da0 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c0018d97:	b8 00 00 00 00       	mov    eax,0x0
c0018d9c:	eb 0a                	jmp    c0018da8 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c0018d9e:	66 90                	xchg   ax,ax
c0018da0:	b8 01 00 00 00       	mov    eax,0x1
c0018da5:	8d 76 00             	lea    esi,[esi+0x0]
c0018da8:	83 c4 58             	add    esp,0x58
c0018dab:	5f                   	pop    edi
c0018dac:	c3                   	ret    
c0018dad:	90                   	nop
c0018dae:	66 90                	xchg   ax,ax

c0018db0 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0018db0:	83 ec 2c             	sub    esp,0x2c
c0018db3:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0018dbb:	83 ec 08             	sub    esp,0x8
c0018dbe:	68 c4 29 02 c0       	push   0xc00229c4
c0018dc3:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018dc7:	e8 84 79 fe ff       	call   c0000750 <strcmp>
c0018dcc:	83 c4 10             	add    esp,0x10
c0018dcf:	85 c0                	test   eax,eax
c0018dd1:	0f 94 c0             	sete   al
c0018dd4:	0f b6 c0             	movzx  eax,al
c0018dd7:	85 c0                	test   eax,eax
c0018dd9:	74 0d                	je     c0018de8 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0018ddb:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018de3:	e9 c0 00 00 00       	jmp    c0018ea8 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018de8:	83 ec 08             	sub    esp,0x8
c0018deb:	68 b6 29 02 c0       	push   0xc00229b6
c0018df0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018df4:	e8 57 79 fe ff       	call   c0000750 <strcmp>
c0018df9:	83 c4 10             	add    esp,0x10
c0018dfc:	85 c0                	test   eax,eax
c0018dfe:	0f 94 c0             	sete   al
c0018e01:	0f b6 c0             	movzx  eax,al
c0018e04:	85 c0                	test   eax,eax
c0018e06:	74 10                	je     c0018e18 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c0018e08:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018e10:	e9 93 00 00 00       	jmp    c0018ea8 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018e15:	8d 76 00             	lea    esi,[esi+0x0]
c0018e18:	83 ec 08             	sub    esp,0x8
c0018e1b:	68 bc 29 02 c0       	push   0xc00229bc
c0018e20:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018e24:	e8 27 79 fe ff       	call   c0000750 <strcmp>
c0018e29:	83 c4 10             	add    esp,0x10
c0018e2c:	85 c0                	test   eax,eax
c0018e2e:	0f 94 c0             	sete   al
c0018e31:	0f b6 c0             	movzx  eax,al
c0018e34:	85 c0                	test   eax,eax
c0018e36:	74 0c                	je     c0018e44 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c0018e38:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018e40:	eb 66                	jmp    c0018ea8 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018e42:	66 90                	xchg   ax,ax
c0018e44:	83 ec 08             	sub    esp,0x8
c0018e47:	68 9c 01 02 c0       	push   0xc002019c
c0018e4c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018e50:	e8 fb 78 fe ff       	call   c0000750 <strcmp>
c0018e55:	83 c4 10             	add    esp,0x10
c0018e58:	85 c0                	test   eax,eax
c0018e5a:	0f 94 c0             	sete   al
c0018e5d:	0f b6 c0             	movzx  eax,al
c0018e60:	85 c0                	test   eax,eax
c0018e62:	74 0c                	je     c0018e70 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c0018e64:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0018e6c:	eb 3a                	jmp    c0018ea8 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018e6e:	66 90                	xchg   ax,ax
c0018e70:	83 ec 08             	sub    esp,0x8
c0018e73:	68 c2 29 02 c0       	push   0xc00229c2
c0018e78:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018e7c:	e8 cf 78 fe ff       	call   c0000750 <strcmp>
c0018e81:	83 c4 10             	add    esp,0x10
c0018e84:	85 c0                	test   eax,eax
c0018e86:	0f 94 c0             	sete   al
c0018e89:	0f b6 c0             	movzx  eax,al
c0018e8c:	85 c0                	test   eax,eax
c0018e8e:	74 0c                	je     c0018e9c <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c0018e90:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0018e98:	eb 0e                	jmp    c0018ea8 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018e9a:	66 90                	xchg   ax,ax
c0018e9c:	b8 08 00 00 00       	mov    eax,0x8
c0018ea1:	e9 ea 00 00 00       	jmp    c0018f90 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018ea6:	66 90                	xchg   ax,ax
c0018ea8:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0018eaf:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0018eb4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018eb8:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018ebf:	83 f8 ff             	cmp    eax,0xffffffff
c0018ec2:	75 34                	jne    c0018ef8 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c0018ec4:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018ec8:	88 c2                	mov    dl,al
c0018eca:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018ecf:	01 d0                	add    eax,edx
c0018ed1:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018ed5:	8b 15 80 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029780
c0018edb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018edf:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c0018ee6:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018eeb:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018eef:	89 14 85 20 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd67e0],edx
c0018ef6:	eb 18                	jmp    c0018f10 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c0018ef8:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018efc:	88 c2                	mov    dl,al
c0018efe:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018f02:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018f09:	01 d0                	add    eax,edx
c0018f0b:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018f0f:	90                   	nop
c0018f10:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018f14:	88 04 24             	mov    BYTE PTR [esp],al
c0018f17:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018f1b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018f1f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0018f27:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0018f2c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018f34:	83 ec 0c             	sub    esp,0xc
c0018f37:	68 00 20 00 00       	push   0x2000
c0018f3c:	e8 75 eb fe ff       	call   c0007ab6 <malloc>
c0018f41:	83 c4 10             	add    esp,0x10
c0018f44:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018f48:	68 00 20 00 00       	push   0x2000
c0018f4d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018f51:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018f55:	50                   	push   eax
c0018f56:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0018f5a:	50                   	push   eax
c0018f5b:	e8 bd c4 fe ff       	call   c000541d <f_mkfs>
c0018f60:	83 c4 10             	add    esp,0x10
c0018f63:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018f67:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0018f6c:	75 0a                	jne    c0018f78 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c0018f6e:	b8 00 00 00 00       	mov    eax,0x0
c0018f73:	eb 1b                	jmp    c0018f90 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018f75:	8d 76 00             	lea    esi,[esi+0x0]
c0018f78:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0018f7d:	75 09                	jne    c0018f88 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c0018f7f:	b8 09 00 00 00       	mov    eax,0x9
c0018f84:	eb 0a                	jmp    c0018f90 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018f86:	66 90                	xchg   ax,ax
c0018f88:	b8 01 00 00 00       	mov    eax,0x1
c0018f8d:	8d 76 00             	lea    esi,[esi+0x0]
c0018f90:	83 c4 2c             	add    esp,0x2c
c0018f93:	c3                   	ret    

c0018f94 <FAT::tryMount(LogicalDisk*, int)>:
c0018f94:	81 ec 4c 03 00 00    	sub    esp,0x34c
c0018f9a:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018f9f:	83 f8 14             	cmp    eax,0x14
c0018fa2:	75 18                	jne    c0018fbc <FAT::tryMount(LogicalDisk*, int)+0x28>
c0018fa4:	83 ec 0c             	sub    esp,0xc
c0018fa7:	68 c8 29 02 c0       	push   0xc00229c8
c0018fac:	e8 c8 83 ff ff       	call   c0011379 <KePanic(char const*)>
c0018fb1:	83 c4 10             	add    esp,0x10
c0018fb4:	b0 00                	mov    al,0x0
c0018fb6:	e9 ed 01 00 00       	jmp    c00191a8 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018fbb:	90                   	nop
c0018fbc:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0018fc3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0018fc9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0018fcf:	3d 00 02 00 00       	cmp    eax,0x200
c0018fd4:	74 0a                	je     c0018fe0 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c0018fd6:	b0 00                	mov    al,0x0
c0018fd8:	e9 cb 01 00 00       	jmp    c00191a8 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018fdd:	8d 76 00             	lea    esi,[esi+0x0]
c0018fe0:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0018fe8:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0018fef:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018ff6:	83 f8 ff             	cmp    eax,0xffffffff
c0018ff9:	74 09                	je     c0019004 <FAT::tryMount(LogicalDisk*, int)+0x70>
c0018ffb:	b0 01                	mov    al,0x1
c0018ffd:	e9 a6 01 00 00       	jmp    c00191a8 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019002:	66 90                	xchg   ax,ax
c0019004:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c001900e:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0019016:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c001901d:	88 c2                	mov    dl,al
c001901f:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0019024:	01 d0                	add    eax,edx
c0019026:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c001902d:	8b 15 80 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029780
c0019033:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001903a:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c0019041:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0019046:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c001904d:	89 14 85 20 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd67e0],edx
c0019054:	83 ec 0c             	sub    esp,0xc
c0019057:	68 34 02 00 00       	push   0x234
c001905c:	e8 55 ea fe ff       	call   c0007ab6 <malloc>
c0019061:	83 c4 10             	add    esp,0x10
c0019064:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c001906b:	83 ec 04             	sub    esp,0x4
c001906e:	6a 00                	push   0x0
c0019070:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0019077:	50                   	push   eax
c0019078:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001907f:	e8 74 ab fe ff       	call   c0003bf8 <f_mount>
c0019084:	83 c4 10             	add    esp,0x10
c0019087:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001908e:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0019096:	74 1c                	je     c00190b4 <FAT::tryMount(LogicalDisk*, int)+0x120>
c0019098:	83 ec 0c             	sub    esp,0xc
c001909b:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00190a2:	e8 2f ea fe ff       	call   c0007ad6 <rfree>
c00190a7:	83 c4 10             	add    esp,0x10
c00190aa:	b0 00                	mov    al,0x0
c00190ac:	e9 f7 00 00 00       	jmp    c00191a8 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00190b1:	8d 76 00             	lea    esi,[esi+0x0]
c00190b4:	83 ec 04             	sub    esp,0x4
c00190b7:	68 00 01 00 00       	push   0x100
c00190bc:	6a 00                	push   0x0
c00190be:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00190c5:	50                   	push   eax
c00190c6:	e8 25 74 fe ff       	call   c00004f0 <memset>
c00190cb:	83 c4 10             	add    esp,0x10
c00190ce:	83 ec 08             	sub    esp,0x8
c00190d1:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00190d8:	50                   	push   eax
c00190d9:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00190e0:	50                   	push   eax
c00190e1:	e8 5a 77 fe ff       	call   c0000840 <strcat>
c00190e6:	83 c4 10             	add    esp,0x10
c00190e9:	83 ec 08             	sub    esp,0x8
c00190ec:	68 d6 29 02 c0       	push   0xc00229d6
c00190f1:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00190f8:	50                   	push   eax
c00190f9:	e8 42 77 fe ff       	call   c0000840 <strcat>
c00190fe:	83 c4 10             	add    esp,0x10
c0019101:	83 ec 04             	sub    esp,0x4
c0019104:	6a 01                	push   0x1
c0019106:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c001910d:	50                   	push   eax
c001910e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019112:	50                   	push   eax
c0019113:	e8 42 ab fe ff       	call   c0003c5a <f_open>
c0019118:	83 c4 10             	add    esp,0x10
c001911b:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0019122:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0019129:	85 c0                	test   eax,eax
c001912b:	74 0b                	je     c0019138 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001912d:	78 31                	js     c0019160 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001912f:	83 e8 04             	sub    eax,0x4
c0019132:	83 f8 01             	cmp    eax,0x1
c0019135:	77 29                	ja     c0019160 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0019137:	90                   	nop
c0019138:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0019140:	83 ec 0c             	sub    esp,0xc
c0019143:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019147:	50                   	push   eax
c0019148:	e8 dc b2 fe ff       	call   c0004429 <f_close>
c001914d:	83 c4 10             	add    esp,0x10
c0019150:	90                   	nop
c0019151:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c0019159:	85 c0                	test   eax,eax
c001915b:	74 43                	je     c00191a0 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c001915d:	eb 31                	jmp    c0019190 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001915f:	90                   	nop
c0019160:	83 ec 0c             	sub    esp,0xc
c0019163:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001916a:	e8 67 e9 fe ff       	call   c0007ad6 <rfree>
c001916f:	83 c4 10             	add    esp,0x10
c0019172:	83 ec 04             	sub    esp,0x4
c0019175:	6a 00                	push   0x0
c0019177:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001917e:	50                   	push   eax
c001917f:	6a 00                	push   0x0
c0019181:	e8 72 aa fe ff       	call   c0003bf8 <f_mount>
c0019186:	83 c4 10             	add    esp,0x10
c0019189:	b0 00                	mov    al,0x0
c001918b:	eb 1b                	jmp    c00191a8 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001918d:	8d 76 00             	lea    esi,[esi+0x0]
c0019190:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0019195:	83 c0 01             	add    eax,0x1
c0019198:	a3 80 97 02 c0       	mov    ds:0xc0029780,eax
c001919d:	8d 76 00             	lea    esi,[esi+0x0]
c00191a0:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c00191a7:	90                   	nop
c00191a8:	81 c4 4c 03 00 00    	add    esp,0x34c
c00191ae:	c3                   	ret    
c00191af:	90                   	nop

c00191b0 <FAT::allocateSwapfile(char const*, int)>:
c00191b0:	55                   	push   ebp
c00191b1:	57                   	push   edi
c00191b2:	56                   	push   esi
c00191b3:	53                   	push   ebx
c00191b4:	81 ec 3c 04 00 00    	sub    esp,0x43c
c00191ba:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c00191c5:	83 ec 0c             	sub    esp,0xc
c00191c8:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c00191cf:	e8 e2 e8 fe ff       	call   c0007ab6 <malloc>
c00191d4:	83 c4 10             	add    esp,0x10
c00191d7:	89 c7                	mov    edi,eax
c00191d9:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00191de:	83 ec 04             	sub    esp,0x4
c00191e1:	50                   	push   eax
c00191e2:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c00191e9:	57                   	push   edi
c00191ea:	e8 e1 26 ff ff       	call   c000b8d0 <File::File(char const*, Process*)>
c00191ef:	83 c4 10             	add    esp,0x10
c00191f2:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c00191f9:	83 ec 04             	sub    esp,0x4
c00191fc:	8d 44 24 13          	lea    eax,[esp+0x13]
c0019200:	50                   	push   eax
c0019201:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019205:	50                   	push   eax
c0019206:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001920d:	e8 de 29 ff ff       	call   c000bbf0 <File::stat(unsigned long long*, bool*)>
c0019212:	83 c4 10             	add    esp,0x10
c0019215:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001921c:	c1 e0 14             	shl    eax,0x14
c001921f:	89 c7                	mov    edi,eax
c0019221:	89 c5                	mov    ebp,eax
c0019223:	c1 fd 1f             	sar    ebp,0x1f
c0019226:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001922a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001922e:	89 f9                	mov    ecx,edi
c0019230:	31 c1                	xor    ecx,eax
c0019232:	89 cb                	mov    ebx,ecx
c0019234:	89 e9                	mov    ecx,ebp
c0019236:	31 d1                	xor    ecx,edx
c0019238:	89 ce                	mov    esi,ecx
c001923a:	89 f0                	mov    eax,esi
c001923c:	09 d8                	or     eax,ebx
c001923e:	0f 84 9c 00 00 00    	je     c00192e0 <FAT::allocateSwapfile(char const*, int)+0x130>
c0019244:	83 ec 0c             	sub    esp,0xc
c0019247:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001924e:	e8 69 28 ff ff       	call   c000babc <File::unlink()>
c0019253:	83 c4 10             	add    esp,0x10
c0019256:	83 ec 08             	sub    esp,0x8
c0019259:	6a 12                	push   0x12
c001925b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019262:	e8 87 26 ff ff       	call   c000b8ee <File::open(FileOpenMode)>
c0019267:	83 c4 10             	add    esp,0x10
c001926a:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019271:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0019277:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001927e:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0019285:	c1 e0 14             	shl    eax,0x14
c0019288:	83 ec 04             	sub    esp,0x4
c001928b:	6a 01                	push   0x1
c001928d:	50                   	push   eax
c001928e:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0019295:	e8 16 c0 fe ff       	call   c00052b0 <f_expand>
c001929a:	83 c4 10             	add    esp,0x10
c001929d:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00192a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00192a6:	83 c0 10             	add    eax,0x10
c00192a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00192ab:	83 ec 0c             	sub    esp,0xc
c00192ae:	8d 54 24 24          	lea    edx,[esp+0x24]
c00192b2:	52                   	push   edx
c00192b3:	8d 54 24 30          	lea    edx,[esp+0x30]
c00192b7:	52                   	push   edx
c00192b8:	6a 00                	push   0x0
c00192ba:	68 00 04 00 00       	push   0x400
c00192bf:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c00192c6:	ff d0                	call   eax
c00192c8:	83 c4 20             	add    esp,0x20
c00192cb:	83 ec 0c             	sub    esp,0xc
c00192ce:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00192d5:	e8 72 26 ff ff       	call   c000b94c <File::close()>
c00192da:	83 c4 10             	add    esp,0x10
c00192dd:	8d 76 00             	lea    esi,[esi+0x0]
c00192e0:	83 ec 08             	sub    esp,0x8
c00192e3:	6a 01                	push   0x1
c00192e5:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00192ec:	e8 fd 25 ff ff       	call   c000b8ee <File::open(FileOpenMode)>
c00192f1:	83 c4 10             	add    esp,0x10
c00192f4:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00192fb:	8b 00                	mov    eax,DWORD PTR [eax]
c00192fd:	83 c0 0c             	add    eax,0xc
c0019300:	8b 00                	mov    eax,DWORD PTR [eax]
c0019302:	83 ec 0c             	sub    esp,0xc
c0019305:	8d 54 24 24          	lea    edx,[esp+0x24]
c0019309:	52                   	push   edx
c001930a:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001930e:	52                   	push   edx
c001930f:	6a 00                	push   0x0
c0019311:	6a 04                	push   0x4
c0019313:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001931a:	ff d0                	call   eax
c001931c:	83 c4 20             	add    esp,0x20
c001931f:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019326:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001932c:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0019333:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001933a:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001933d:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0019344:	83 ec 0c             	sub    esp,0xc
c0019347:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001934e:	e8 f9 25 ff ff       	call   c000b94c <File::close()>
c0019353:	83 c4 10             	add    esp,0x10
c0019356:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001935d:	ba 00 00 00 00       	mov    edx,0x0
c0019362:	81 c4 3c 04 00 00    	add    esp,0x43c
c0019368:	5b                   	pop    ebx
c0019369:	5e                   	pop    esi
c001936a:	5f                   	pop    edi
c001936b:	5d                   	pop    ebp
c001936c:	c3                   	ret    
c001936d:	90                   	nop
c001936e:	66 90                	xchg   ax,ax

c0019370 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0019370:	57                   	push   edi
c0019371:	56                   	push   esi
c0019372:	53                   	push   ebx
c0019373:	81 ec 50 02 00 00    	sub    esp,0x250
c0019379:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0019381:	74 0d                	je     c0019390 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0019383:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001938b:	75 0f                	jne    c001939c <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001938d:	8d 76 00             	lea    esi,[esi+0x0]
c0019390:	b8 04 00 00 00       	mov    eax,0x4
c0019395:	e9 3a 01 00 00       	jmp    c00194d4 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001939a:	66 90                	xchg   ax,ax
c001939c:	83 ec 08             	sub    esp,0x8
c001939f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00193a6:	50                   	push   eax
c00193a7:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c00193ae:	e8 43 b3 fe ff       	call   c00046f6 <f_readdir>
c00193b3:	83 c4 10             	add    esp,0x10
c00193b6:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c00193bd:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c00193c4:	83 ec 0c             	sub    esp,0xc
c00193c7:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00193ce:	83 c0 16             	add    eax,0x16
c00193d1:	50                   	push   eax
c00193d2:	e8 99 71 fe ff       	call   c0000570 <strlen>
c00193d7:	83 c4 10             	add    esp,0x10
c00193da:	ba 00 00 00 00       	mov    edx,0x0
c00193df:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00193e3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00193e7:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c00193ee:	0f b6 c0             	movzx  eax,al
c00193f1:	83 e0 10             	and    eax,0x10
c00193f4:	74 0a                	je     c0019400 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c00193f6:	b8 02 00 00 00       	mov    eax,0x2
c00193fb:	eb 0b                	jmp    c0019408 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c00193fd:	8d 76 00             	lea    esi,[esi+0x0]
c0019400:	b8 01 00 00 00       	mov    eax,0x1
c0019405:	8d 76 00             	lea    esi,[esi+0x0]
c0019408:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001940c:	83 ec 08             	sub    esp,0x8
c001940f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0019416:	83 c0 16             	add    eax,0x16
c0019419:	50                   	push   eax
c001941a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001941e:	83 c0 10             	add    eax,0x10
c0019421:	50                   	push   eax
c0019422:	e8 19 72 fe ff       	call   c0000640 <strcpy>
c0019427:	83 c4 10             	add    esp,0x10
c001942a:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0019431:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0019438:	8d 44 24 08          	lea    eax,[esp+0x8]
c001943c:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0019443:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001944a:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0019451:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0019458:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001945f:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0019466:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001946d:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0019474:	89 c6                	mov    esi,eax
c0019476:	89 d7                	mov    edi,edx
c0019478:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001947a:	89 c8                	mov    eax,ecx
c001947c:	89 fa                	mov    edx,edi
c001947e:	89 f3                	mov    ebx,esi
c0019480:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0019487:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001948e:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0019495:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001949c:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00194a2:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c00194a9:	0f be c0             	movsx  eax,al
c00194ac:	85 c0                	test   eax,eax
c00194ae:	75 08                	jne    c00194b8 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c00194b0:	b8 07 00 00 00       	mov    eax,0x7
c00194b5:	eb 1d                	jmp    c00194d4 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c00194b7:	90                   	nop
c00194b8:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c00194bf:	85 c0                	test   eax,eax
c00194c1:	75 09                	jne    c00194cc <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c00194c3:	b8 00 00 00 00       	mov    eax,0x0
c00194c8:	eb 0a                	jmp    c00194d4 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c00194ca:	66 90                	xchg   ax,ax
c00194cc:	b8 01 00 00 00       	mov    eax,0x1
c00194d1:	8d 76 00             	lea    esi,[esi+0x0]
c00194d4:	81 c4 50 02 00 00    	add    esp,0x250
c00194da:	5b                   	pop    ebx
c00194db:	5e                   	pop    esi
c00194dc:	5f                   	pop    edi
c00194dd:	c3                   	ret    
c00194de:	66 90                	xchg   ax,ax

c00194e0 <FAT::read(void*, unsigned long, void*, int*)>:
c00194e0:	83 ec 1c             	sub    esp,0x1c
c00194e3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00194e8:	74 0a                	je     c00194f4 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c00194ea:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00194ef:	75 0b                	jne    c00194fc <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c00194f1:	8d 76 00             	lea    esi,[esi+0x0]
c00194f4:	b8 04 00 00 00       	mov    eax,0x4
c00194f9:	eb 41                	jmp    c001953c <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c00194fb:	90                   	nop
c00194fc:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019500:	50                   	push   eax
c0019501:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019505:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019509:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001950d:	e8 0b aa fe ff       	call   c0003f1d <f_read>
c0019512:	83 c4 10             	add    esp,0x10
c0019515:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019519:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001951d:	89 c2                	mov    edx,eax
c001951f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019523:	89 10                	mov    DWORD PTR [eax],edx
c0019525:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019529:	85 c0                	test   eax,eax
c001952b:	75 07                	jne    c0019534 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001952d:	b8 00 00 00 00       	mov    eax,0x0
c0019532:	eb 08                	jmp    c001953c <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0019534:	b8 01 00 00 00       	mov    eax,0x1
c0019539:	8d 76 00             	lea    esi,[esi+0x0]
c001953c:	83 c4 1c             	add    esp,0x1c
c001953f:	c3                   	ret    

c0019540 <FAT::write(void*, unsigned long, void*, int*)>:
c0019540:	83 ec 1c             	sub    esp,0x1c
c0019543:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019548:	74 0a                	je     c0019554 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001954a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001954f:	75 0b                	jne    c001955c <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0019551:	8d 76 00             	lea    esi,[esi+0x0]
c0019554:	b8 04 00 00 00       	mov    eax,0x4
c0019559:	eb 41                	jmp    c001959c <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001955b:	90                   	nop
c001955c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019560:	50                   	push   eax
c0019561:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019565:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019569:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001956d:	e8 aa ab fe ff       	call   c000411c <f_write>
c0019572:	83 c4 10             	add    esp,0x10
c0019575:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019579:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001957d:	89 c2                	mov    edx,eax
c001957f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019583:	89 10                	mov    DWORD PTR [eax],edx
c0019585:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019589:	85 c0                	test   eax,eax
c001958b:	75 07                	jne    c0019594 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001958d:	b8 00 00 00 00       	mov    eax,0x0
c0019592:	eb 08                	jmp    c001959c <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0019594:	b8 01 00 00 00       	mov    eax,0x1
c0019599:	8d 76 00             	lea    esi,[esi+0x0]
c001959c:	83 c4 1c             	add    esp,0x1c
c001959f:	c3                   	ret    

c00195a0 <FAT::close(void*)>:
c00195a0:	83 ec 1c             	sub    esp,0x1c
c00195a3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00195a8:	75 0a                	jne    c00195b4 <FAT::close(void*)+0x14>
c00195aa:	b8 04 00 00 00       	mov    eax,0x4
c00195af:	eb 3f                	jmp    c00195f0 <FAT::close(void*)+0x50>
c00195b1:	8d 76 00             	lea    esi,[esi+0x0]
c00195b4:	83 ec 0c             	sub    esp,0xc
c00195b7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00195bb:	e8 69 ae fe ff       	call   c0004429 <f_close>
c00195c0:	83 c4 10             	add    esp,0x10
c00195c3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00195c7:	83 ec 0c             	sub    esp,0xc
c00195ca:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00195ce:	e8 f3 e4 fe ff       	call   c0007ac6 <free>
c00195d3:	83 c4 10             	add    esp,0x10
c00195d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00195da:	85 c0                	test   eax,eax
c00195dc:	75 0a                	jne    c00195e8 <FAT::close(void*)+0x48>
c00195de:	b8 00 00 00 00       	mov    eax,0x0
c00195e3:	eb 0b                	jmp    c00195f0 <FAT::close(void*)+0x50>
c00195e5:	8d 76 00             	lea    esi,[esi+0x0]
c00195e8:	b8 01 00 00 00       	mov    eax,0x1
c00195ed:	8d 76 00             	lea    esi,[esi+0x0]
c00195f0:	83 c4 1c             	add    esp,0x1c
c00195f3:	c3                   	ret    

c00195f4 <FAT::closeDir(void*)>:
c00195f4:	83 ec 1c             	sub    esp,0x1c
c00195f7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00195fc:	75 0a                	jne    c0019608 <FAT::closeDir(void*)+0x14>
c00195fe:	b8 04 00 00 00       	mov    eax,0x4
c0019603:	eb 3f                	jmp    c0019644 <FAT::closeDir(void*)+0x50>
c0019605:	8d 76 00             	lea    esi,[esi+0x0]
c0019608:	83 ec 0c             	sub    esp,0xc
c001960b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001960f:	e8 c0 b0 fe ff       	call   c00046d4 <f_closedir>
c0019614:	83 c4 10             	add    esp,0x10
c0019617:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001961b:	83 ec 0c             	sub    esp,0xc
c001961e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019622:	e8 9f e4 fe ff       	call   c0007ac6 <free>
c0019627:	83 c4 10             	add    esp,0x10
c001962a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001962e:	85 c0                	test   eax,eax
c0019630:	75 0a                	jne    c001963c <FAT::closeDir(void*)+0x48>
c0019632:	b8 00 00 00 00       	mov    eax,0x0
c0019637:	eb 0b                	jmp    c0019644 <FAT::closeDir(void*)+0x50>
c0019639:	8d 76 00             	lea    esi,[esi+0x0]
c001963c:	b8 01 00 00 00       	mov    eax,0x1
c0019641:	8d 76 00             	lea    esi,[esi+0x0]
c0019644:	83 c4 1c             	add    esp,0x1c
c0019647:	c3                   	ret    

c0019648 <FAT::truncate(void*, unsigned long long)>:
c0019648:	83 ec 2c             	sub    esp,0x2c
c001964b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001964f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019653:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019657:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001965b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0019660:	75 0a                	jne    c001966c <FAT::truncate(void*, unsigned long long)+0x24>
c0019662:	b8 04 00 00 00       	mov    eax,0x4
c0019667:	eb 47                	jmp    c00196b0 <FAT::truncate(void*, unsigned long long)+0x68>
c0019669:	8d 76 00             	lea    esi,[esi+0x0]
c001966c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019670:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019673:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019677:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001967f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019683:	83 ec 08             	sub    esp,0x8
c0019686:	50                   	push   eax
c0019687:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001968b:	e8 c8 ad fe ff       	call   c0004458 <f_lseek>
c0019690:	83 c4 10             	add    esp,0x10
c0019693:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019697:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001969b:	85 c0                	test   eax,eax
c001969d:	75 09                	jne    c00196a8 <FAT::truncate(void*, unsigned long long)+0x60>
c001969f:	b8 00 00 00 00       	mov    eax,0x0
c00196a4:	eb 0a                	jmp    c00196b0 <FAT::truncate(void*, unsigned long long)+0x68>
c00196a6:	66 90                	xchg   ax,ax
c00196a8:	b8 01 00 00 00       	mov    eax,0x1
c00196ad:	8d 76 00             	lea    esi,[esi+0x0]
c00196b0:	83 c4 2c             	add    esp,0x2c
c00196b3:	c3                   	ret    

c00196b4 <FAT::seek(void*, unsigned long long)>:
c00196b4:	83 ec 2c             	sub    esp,0x2c
c00196b7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00196bb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00196bf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00196c3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00196c7:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00196cc:	75 0a                	jne    c00196d8 <FAT::seek(void*, unsigned long long)+0x24>
c00196ce:	b8 04 00 00 00       	mov    eax,0x4
c00196d3:	eb 33                	jmp    c0019708 <FAT::seek(void*, unsigned long long)+0x54>
c00196d5:	8d 76 00             	lea    esi,[esi+0x0]
c00196d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00196dc:	83 ec 08             	sub    esp,0x8
c00196df:	50                   	push   eax
c00196e0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00196e4:	e8 6f ad fe ff       	call   c0004458 <f_lseek>
c00196e9:	83 c4 10             	add    esp,0x10
c00196ec:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00196f0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00196f4:	85 c0                	test   eax,eax
c00196f6:	75 08                	jne    c0019700 <FAT::seek(void*, unsigned long long)+0x4c>
c00196f8:	b8 00 00 00 00       	mov    eax,0x0
c00196fd:	eb 09                	jmp    c0019708 <FAT::seek(void*, unsigned long long)+0x54>
c00196ff:	90                   	nop
c0019700:	b8 01 00 00 00       	mov    eax,0x1
c0019705:	8d 76 00             	lea    esi,[esi+0x0]
c0019708:	83 c4 2c             	add    esp,0x2c
c001970b:	c3                   	ret    

c001970c <fatWrapperReadDisk>:
c001970c:	53                   	push   ebx
c001970d:	83 ec 18             	sub    esp,0x18
c0019710:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019714:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019718:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001971d:	8b 0c 85 80 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7780]
c0019724:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019728:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001972c:	ba 00 00 00 00       	mov    edx,0x0
c0019731:	83 ec 0c             	sub    esp,0xc
c0019734:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019738:	53                   	push   ebx
c0019739:	52                   	push   edx
c001973a:	50                   	push   eax
c001973b:	51                   	push   ecx
c001973c:	e8 eb 43 ff ff       	call   c000db2c <LogicalDisk::read(unsigned long long, int, void*)>
c0019741:	83 c4 20             	add    esp,0x20
c0019744:	83 c4 18             	add    esp,0x18
c0019747:	5b                   	pop    ebx
c0019748:	c3                   	ret    
c0019749:	8d 76 00             	lea    esi,[esi+0x0]

c001974c <fatWrapperWriteDisk>:
c001974c:	53                   	push   ebx
c001974d:	83 ec 18             	sub    esp,0x18
c0019750:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019754:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019758:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001975d:	8b 0c 85 80 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7780]
c0019764:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019768:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001976c:	ba 00 00 00 00       	mov    edx,0x0
c0019771:	83 ec 0c             	sub    esp,0xc
c0019774:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019778:	53                   	push   ebx
c0019779:	52                   	push   edx
c001977a:	50                   	push   eax
c001977b:	51                   	push   ecx
c001977c:	e8 17 44 ff ff       	call   c000db98 <LogicalDisk::write(unsigned long long, int, void*)>
c0019781:	83 c4 20             	add    esp,0x20
c0019784:	83 c4 18             	add    esp,0x18
c0019787:	5b                   	pop    ebx
c0019788:	c3                   	ret    
c0019789:	8d 76 00             	lea    esi,[esi+0x0]

c001978c <fatWrapperIoctl>:
c001978c:	53                   	push   ebx
c001978d:	83 ec 28             	sub    esp,0x28
c0019790:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019794:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019798:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001979c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00197a0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00197a5:	83 f8 02             	cmp    eax,0x2
c00197a8:	75 32                	jne    c00197dc <fatWrapperIoctl+0x50>
c00197aa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00197ae:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00197b2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00197b7:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c00197be:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00197c4:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00197ca:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00197ce:	66 89 02             	mov    WORD PTR [edx],ax
c00197d1:	b8 00 00 00 00       	mov    eax,0x0
c00197d6:	e9 c5 00 00 00       	jmp    c00198a0 <fatWrapperIoctl+0x114>
c00197db:	90                   	nop
c00197dc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00197e1:	83 f8 01             	cmp    eax,0x1
c00197e4:	75 6a                	jne    c0019850 <fatWrapperIoctl+0xc4>
c00197e6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00197ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00197ee:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00197f3:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c00197fa:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019800:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0019806:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001980c:	89 c8                	mov    eax,ecx
c001980e:	89 da                	mov    edx,ebx
c0019810:	0f a4 c2 0a          	shld   edx,eax,0xa
c0019814:	c1 e0 0a             	shl    eax,0xa
c0019817:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001981c:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c0019823:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0019829:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001982f:	89 cb                	mov    ebx,ecx
c0019831:	c1 fb 1f             	sar    ebx,0x1f
c0019834:	53                   	push   ebx
c0019835:	51                   	push   ecx
c0019836:	52                   	push   edx
c0019837:	50                   	push   eax
c0019838:	e8 73 5b 00 00       	call   c001f3b0 <__udivdi3>
c001983d:	83 c4 10             	add    esp,0x10
c0019840:	89 c2                	mov    edx,eax
c0019842:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019846:	89 10                	mov    DWORD PTR [eax],edx
c0019848:	b8 00 00 00 00       	mov    eax,0x0
c001984d:	eb 51                	jmp    c00198a0 <fatWrapperIoctl+0x114>
c001984f:	90                   	nop
c0019850:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019855:	85 c0                	test   eax,eax
c0019857:	75 07                	jne    c0019860 <fatWrapperIoctl+0xd4>
c0019859:	b8 00 00 00 00       	mov    eax,0x0
c001985e:	eb 40                	jmp    c00198a0 <fatWrapperIoctl+0x114>
c0019860:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019865:	83 f8 03             	cmp    eax,0x3
c0019868:	75 1a                	jne    c0019884 <fatWrapperIoctl+0xf8>
c001986a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001986e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019872:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019876:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001987c:	b8 00 00 00 00       	mov    eax,0x0
c0019881:	eb 1d                	jmp    c00198a0 <fatWrapperIoctl+0x114>
c0019883:	90                   	nop
c0019884:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019889:	83 f8 04             	cmp    eax,0x4
c001988c:	75 0a                	jne    c0019898 <fatWrapperIoctl+0x10c>
c001988e:	b8 00 00 00 00       	mov    eax,0x0
c0019893:	eb 0b                	jmp    c00198a0 <fatWrapperIoctl+0x114>
c0019895:	8d 76 00             	lea    esi,[esi+0x0]
c0019898:	b8 04 00 00 00       	mov    eax,0x4
c001989d:	8d 76 00             	lea    esi,[esi+0x0]
c00198a0:	83 c4 28             	add    esp,0x28
c00198a3:	5b                   	pop    ebx
c00198a4:	c3                   	ret    
c00198a5:	90                   	nop
c00198a6:	66 90                	xchg   ax,ax

c00198a8 <FAT::FAT()>:
c00198a8:	83 ec 1c             	sub    esp,0x1c
c00198ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00198af:	83 ec 0c             	sub    esp,0xc
c00198b2:	50                   	push   eax
c00198b3:	e8 86 1c ff ff       	call   c000b53e <Filesystem::Filesystem()>
c00198b8:	83 c4 10             	add    esp,0x10
c00198bb:	ba ec 29 02 c0       	mov    edx,0xc00229ec
c00198c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00198c4:	89 10                	mov    DWORD PTR [eax],edx
c00198c6:	c7 05 80 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029780,0x0
c00198d0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00198d8:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c00198dd:	7f 19                	jg     c00198f8 <FAT::FAT()+0x50>
c00198df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00198e3:	c7 04 85 a0 97 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd6860],0xffffffff
c00198ee:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c00198f3:	eb e3                	jmp    c00198d8 <FAT::FAT()+0x30>
c00198f5:	8d 76 00             	lea    esi,[esi+0x0]
c00198f8:	90                   	nop
c00198f9:	83 c4 1c             	add    esp,0x1c
c00198fc:	c3                   	ret    
c00198fd:	90                   	nop
c00198fe:	66 90                	xchg   ax,ax

c0019900 <FAT::fixFilepath(char*)>:
c0019900:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019904:	8a 00                	mov    al,BYTE PTR [eax]
c0019906:	0f be c0             	movsx  eax,al
c0019909:	83 f8 40             	cmp    eax,0x40
c001990c:	7e 2e                	jle    c001993c <FAT::fixFilepath(char*)+0x3c>
c001990e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019912:	8a 00                	mov    al,BYTE PTR [eax]
c0019914:	83 e8 41             	sub    eax,0x41
c0019917:	88 c2                	mov    dl,al
c0019919:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001991d:	88 10                	mov    BYTE PTR [eax],dl
c001991f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019923:	8a 00                	mov    al,BYTE PTR [eax]
c0019925:	0f be c0             	movsx  eax,al
c0019928:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c001992f:	83 c0 30             	add    eax,0x30
c0019932:	88 c2                	mov    dl,al
c0019934:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019938:	88 10                	mov    BYTE PTR [eax],dl
c001993a:	66 90                	xchg   ax,ax
c001993c:	90                   	nop
c001993d:	c3                   	ret    
c001993e:	66 90                	xchg   ax,ax

c0019940 <FAT::open(char const*, void**, FileOpenMode)>:
c0019940:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019946:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001994e:	74 0c                	je     c001995c <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0019950:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019958:	75 0e                	jne    c0019968 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001995a:	66 90                	xchg   ax,ax
c001995c:	b8 04 00 00 00       	mov    eax,0x4
c0019961:	e9 46 01 00 00       	jmp    c0019aac <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0019966:	66 90                	xchg   ax,ax
c0019968:	83 ec 08             	sub    esp,0x8
c001996b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019972:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019976:	50                   	push   eax
c0019977:	e8 c4 6c fe ff       	call   c0000640 <strcpy>
c001997c:	83 c4 10             	add    esp,0x10
c001997f:	83 ec 08             	sub    esp,0x8
c0019982:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019986:	50                   	push   eax
c0019987:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001998e:	e8 6d ff ff ff       	call   c0019900 <FAT::fixFilepath(char*)>
c0019993:	83 c4 10             	add    esp,0x10
c0019996:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001999e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00199a5:	83 e0 01             	and    eax,0x1
c00199a8:	74 12                	je     c00199bc <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c00199aa:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00199b1:	83 c8 01             	or     eax,0x1
c00199b4:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c00199bb:	90                   	nop
c00199bc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00199c3:	83 e0 04             	and    eax,0x4
c00199c6:	74 24                	je     c00199ec <FAT::open(char const*, void**, FileOpenMode)+0xac>
c00199c8:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00199cf:	83 c8 30             	or     eax,0x30
c00199d2:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c00199d9:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00199e0:	83 c8 02             	or     eax,0x2
c00199e3:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c00199ea:	66 90                	xchg   ax,ax
c00199ec:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00199f3:	83 e0 02             	and    eax,0x2
c00199f6:	74 14                	je     c0019a0c <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c00199f8:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00199ff:	83 c8 02             	or     eax,0x2
c0019a02:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019a09:	8d 76 00             	lea    esi,[esi+0x0]
c0019a0c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019a13:	83 e0 08             	and    eax,0x8
c0019a16:	74 14                	je     c0019a2c <FAT::open(char const*, void**, FileOpenMode)+0xec>
c0019a18:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019a1f:	83 c8 04             	or     eax,0x4
c0019a22:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019a29:	8d 76 00             	lea    esi,[esi+0x0]
c0019a2c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019a33:	83 e0 10             	and    eax,0x10
c0019a36:	74 14                	je     c0019a4c <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c0019a38:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019a3f:	83 c8 08             	or     eax,0x8
c0019a42:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019a49:	8d 76 00             	lea    esi,[esi+0x0]
c0019a4c:	83 ec 0c             	sub    esp,0xc
c0019a4f:	68 28 02 00 00       	push   0x228
c0019a54:	e8 5d e0 fe ff       	call   c0007ab6 <malloc>
c0019a59:	83 c4 10             	add    esp,0x10
c0019a5c:	89 c2                	mov    edx,eax
c0019a5e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019a65:	89 10                	mov    DWORD PTR [eax],edx
c0019a67:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0019a6f:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019a76:	8b 00                	mov    eax,DWORD PTR [eax]
c0019a78:	83 ec 04             	sub    esp,0x4
c0019a7b:	52                   	push   edx
c0019a7c:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019a80:	52                   	push   edx
c0019a81:	50                   	push   eax
c0019a82:	e8 d3 a1 fe ff       	call   c0003c5a <f_open>
c0019a87:	83 c4 10             	add    esp,0x10
c0019a8a:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0019a91:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0019a99:	74 09                	je     c0019aa4 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c0019a9b:	b8 01 00 00 00       	mov    eax,0x1
c0019aa0:	eb 0a                	jmp    c0019aac <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0019aa2:	66 90                	xchg   ax,ax
c0019aa4:	b8 00 00 00 00       	mov    eax,0x0
c0019aa9:	8d 76 00             	lea    esi,[esi+0x0]
c0019aac:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019ab2:	c3                   	ret    
c0019ab3:	90                   	nop

c0019ab4 <FAT::openDir(char const*, void**)>:
c0019ab4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019aba:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019ac2:	74 0c                	je     c0019ad0 <FAT::openDir(char const*, void**)+0x1c>
c0019ac4:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019acc:	75 0e                	jne    c0019adc <FAT::openDir(char const*, void**)+0x28>
c0019ace:	66 90                	xchg   ax,ax
c0019ad0:	b8 04 00 00 00       	mov    eax,0x4
c0019ad5:	e9 82 00 00 00       	jmp    c0019b5c <FAT::openDir(char const*, void**)+0xa8>
c0019ada:	66 90                	xchg   ax,ax
c0019adc:	83 ec 08             	sub    esp,0x8
c0019adf:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019ae6:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019aea:	50                   	push   eax
c0019aeb:	e8 50 6b fe ff       	call   c0000640 <strcpy>
c0019af0:	83 c4 10             	add    esp,0x10
c0019af3:	83 ec 08             	sub    esp,0x8
c0019af6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019afa:	50                   	push   eax
c0019afb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019b02:	e8 f9 fd ff ff       	call   c0019900 <FAT::fixFilepath(char*)>
c0019b07:	83 c4 10             	add    esp,0x10
c0019b0a:	83 ec 0c             	sub    esp,0xc
c0019b0d:	6a 30                	push   0x30
c0019b0f:	e8 a2 df fe ff       	call   c0007ab6 <malloc>
c0019b14:	83 c4 10             	add    esp,0x10
c0019b17:	89 c2                	mov    edx,eax
c0019b19:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019b20:	89 10                	mov    DWORD PTR [eax],edx
c0019b22:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019b29:	8b 00                	mov    eax,DWORD PTR [eax]
c0019b2b:	83 ec 08             	sub    esp,0x8
c0019b2e:	8d 54 24 14          	lea    edx,[esp+0x14]
c0019b32:	52                   	push   edx
c0019b33:	50                   	push   eax
c0019b34:	e8 d0 aa fe ff       	call   c0004609 <f_opendir>
c0019b39:	83 c4 10             	add    esp,0x10
c0019b3c:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019b43:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0019b4b:	74 07                	je     c0019b54 <FAT::openDir(char const*, void**)+0xa0>
c0019b4d:	b8 01 00 00 00       	mov    eax,0x1
c0019b52:	eb 08                	jmp    c0019b5c <FAT::openDir(char const*, void**)+0xa8>
c0019b54:	b8 00 00 00 00       	mov    eax,0x0
c0019b59:	8d 76 00             	lea    esi,[esi+0x0]
c0019b5c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019b62:	c3                   	ret    
c0019b63:	90                   	nop

c0019b64 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0019b64:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019b6a:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0019b72:	75 0c                	jne    c0019b80 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0019b74:	b8 04 00 00 00       	mov    eax,0x4
c0019b79:	e9 d6 00 00 00       	jmp    c0019c54 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019b7e:	66 90                	xchg   ax,ax
c0019b80:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0019b88:	75 0a                	jne    c0019b94 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0019b8a:	b8 04 00 00 00       	mov    eax,0x4
c0019b8f:	e9 c0 00 00 00       	jmp    c0019c54 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019b94:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0019b9c:	75 0a                	jne    c0019ba8 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0019b9e:	b8 04 00 00 00       	mov    eax,0x4
c0019ba3:	e9 ac 00 00 00       	jmp    c0019c54 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019ba8:	83 ec 08             	sub    esp,0x8
c0019bab:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019bb2:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019bb9:	50                   	push   eax
c0019bba:	e8 81 6a fe ff       	call   c0000640 <strcpy>
c0019bbf:	83 c4 10             	add    esp,0x10
c0019bc2:	83 ec 08             	sub    esp,0x8
c0019bc5:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0019bcc:	50                   	push   eax
c0019bcd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019bd4:	e8 27 fd ff ff       	call   c0019900 <FAT::fixFilepath(char*)>
c0019bd9:	83 c4 10             	add    esp,0x10
c0019bdc:	83 ec 08             	sub    esp,0x8
c0019bdf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019be3:	50                   	push   eax
c0019be4:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019beb:	50                   	push   eax
c0019bec:	e8 97 ab fe ff       	call   c0004788 <f_stat>
c0019bf1:	83 c4 10             	add    esp,0x10
c0019bf4:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019bfb:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019c02:	85 c0                	test   eax,eax
c0019c04:	74 0a                	je     c0019c10 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0019c06:	83 f8 04             	cmp    eax,0x4
c0019c09:	74 39                	je     c0019c44 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0019c0b:	eb 3f                	jmp    c0019c4c <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0019c0d:	8d 76 00             	lea    esi,[esi+0x0]
c0019c10:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019c14:	0f b6 c0             	movzx  eax,al
c0019c17:	83 e0 10             	and    eax,0x10
c0019c1a:	0f 95 c2             	setne  dl
c0019c1d:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0019c24:	88 10                	mov    BYTE PTR [eax],dl
c0019c26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c2a:	ba 00 00 00 00       	mov    edx,0x0
c0019c2f:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0019c36:	89 01                	mov    DWORD PTR [ecx],eax
c0019c38:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019c3b:	b8 00 00 00 00       	mov    eax,0x0
c0019c40:	eb 12                	jmp    c0019c54 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019c42:	66 90                	xchg   ax,ax
c0019c44:	b8 02 00 00 00       	mov    eax,0x2
c0019c49:	eb 09                	jmp    c0019c54 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019c4b:	90                   	nop
c0019c4c:	b8 01 00 00 00       	mov    eax,0x1
c0019c51:	8d 76 00             	lea    esi,[esi+0x0]
c0019c54:	81 c4 2c 02 00 00    	add    esp,0x22c
c0019c5a:	c3                   	ret    
c0019c5b:	90                   	nop

c0019c5c <FAT::unlink(char const*)>:
c0019c5c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019c62:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019c6a:	75 08                	jne    c0019c74 <FAT::unlink(char const*)+0x18>
c0019c6c:	b8 04 00 00 00       	mov    eax,0x4
c0019c71:	eb 61                	jmp    c0019cd4 <FAT::unlink(char const*)+0x78>
c0019c73:	90                   	nop
c0019c74:	83 ec 08             	sub    esp,0x8
c0019c77:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019c7e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019c82:	50                   	push   eax
c0019c83:	e8 b8 69 fe ff       	call   c0000640 <strcpy>
c0019c88:	83 c4 10             	add    esp,0x10
c0019c8b:	83 ec 08             	sub    esp,0x8
c0019c8e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019c92:	50                   	push   eax
c0019c93:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019c9a:	e8 61 fc ff ff       	call   c0019900 <FAT::fixFilepath(char*)>
c0019c9f:	83 c4 10             	add    esp,0x10
c0019ca2:	83 ec 0c             	sub    esp,0xc
c0019ca5:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019ca9:	50                   	push   eax
c0019caa:	e8 4b ad fe ff       	call   c00049fa <f_unlink>
c0019caf:	83 c4 10             	add    esp,0x10
c0019cb2:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019cb9:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019cc0:	85 c0                	test   eax,eax
c0019cc2:	75 08                	jne    c0019ccc <FAT::unlink(char const*)+0x70>
c0019cc4:	b8 00 00 00 00       	mov    eax,0x0
c0019cc9:	eb 09                	jmp    c0019cd4 <FAT::unlink(char const*)+0x78>
c0019ccb:	90                   	nop
c0019ccc:	b8 01 00 00 00       	mov    eax,0x1
c0019cd1:	8d 76 00             	lea    esi,[esi+0x0]
c0019cd4:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019cda:	c3                   	ret    
c0019cdb:	90                   	nop

c0019cdc <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0019cdc:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019ce2:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0019ce9:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0019cf0:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0019cf4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019cf8:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0019d00:	75 0a                	jne    c0019d0c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0019d02:	b8 04 00 00 00       	mov    eax,0x4
c0019d07:	e9 7c 01 00 00       	jmp    c0019e88 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c0019d0c:	83 ec 08             	sub    esp,0x8
c0019d0f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019d16:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019d1a:	50                   	push   eax
c0019d1b:	e8 20 69 fe ff       	call   c0000640 <strcpy>
c0019d20:	83 c4 10             	add    esp,0x10
c0019d23:	83 ec 08             	sub    esp,0x8
c0019d26:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019d2a:	50                   	push   eax
c0019d2b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019d32:	e8 c9 fb ff ff       	call   c0019900 <FAT::fixFilepath(char*)>
c0019d37:	83 c4 10             	add    esp,0x10
c0019d3a:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0019d42:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0019d4a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019d4f:	83 e0 01             	and    eax,0x1
c0019d52:	74 14                	je     c0019d68 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x8c>
c0019d54:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019d5b:	83 c8 01             	or     eax,0x1
c0019d5e:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019d65:	8d 76 00             	lea    esi,[esi+0x0]
c0019d68:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019d6d:	83 e0 02             	and    eax,0x2
c0019d70:	74 12                	je     c0019d84 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c0019d72:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019d79:	83 c8 20             	or     eax,0x20
c0019d7c:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019d83:	90                   	nop
c0019d84:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019d89:	83 e0 04             	and    eax,0x4
c0019d8c:	74 12                	je     c0019da0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc4>
c0019d8e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019d95:	83 c8 04             	or     eax,0x4
c0019d98:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019d9f:	90                   	nop
c0019da0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019da5:	83 e0 08             	and    eax,0x8
c0019da8:	74 12                	je     c0019dbc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe0>
c0019daa:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019db1:	83 c8 02             	or     eax,0x2
c0019db4:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019dbb:	90                   	nop
c0019dbc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019dc1:	83 e0 01             	and    eax,0x1
c0019dc4:	74 12                	je     c0019dd8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c0019dc6:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019dcd:	83 c8 01             	or     eax,0x1
c0019dd0:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019dd7:	90                   	nop
c0019dd8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019ddd:	83 e0 02             	and    eax,0x2
c0019de0:	74 12                	je     c0019df4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x118>
c0019de2:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019de9:	83 c8 20             	or     eax,0x20
c0019dec:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019df3:	90                   	nop
c0019df4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019df9:	83 e0 04             	and    eax,0x4
c0019dfc:	74 12                	je     c0019e10 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x134>
c0019dfe:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019e05:	83 c8 04             	or     eax,0x4
c0019e08:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019e0f:	90                   	nop
c0019e10:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019e15:	83 e0 08             	and    eax,0x8
c0019e18:	74 12                	je     c0019e2c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x150>
c0019e1a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019e21:	83 c8 02             	or     eax,0x2
c0019e24:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019e2b:	90                   	nop
c0019e2c:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c0019e33:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019e3a:	09 d0                	or     eax,edx
c0019e3c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019e43:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0019e4b:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0019e53:	83 ec 04             	sub    esp,0x4
c0019e56:	52                   	push   edx
c0019e57:	50                   	push   eax
c0019e58:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019e5c:	50                   	push   eax
c0019e5d:	e8 0d b0 fe ff       	call   c0004e6f <f_chmod>
c0019e62:	83 c4 10             	add    esp,0x10
c0019e65:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0019e6c:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0019e73:	85 c0                	test   eax,eax
c0019e75:	75 09                	jne    c0019e80 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a4>
c0019e77:	b8 00 00 00 00       	mov    eax,0x0
c0019e7c:	eb 0a                	jmp    c0019e88 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c0019e7e:	66 90                	xchg   ax,ax
c0019e80:	b8 01 00 00 00       	mov    eax,0x1
c0019e85:	8d 76 00             	lea    esi,[esi+0x0]
c0019e88:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019e8e:	c3                   	ret    
c0019e8f:	90                   	nop

c0019e90 <FAT::rename(char const*, char const*)>:
c0019e90:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0019e96:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0019e9e:	74 0c                	je     c0019eac <FAT::rename(char const*, char const*)+0x1c>
c0019ea0:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0019ea8:	75 0e                	jne    c0019eb8 <FAT::rename(char const*, char const*)+0x28>
c0019eaa:	66 90                	xchg   ax,ax
c0019eac:	b8 04 00 00 00       	mov    eax,0x4
c0019eb1:	e9 9e 00 00 00       	jmp    c0019f54 <FAT::rename(char const*, char const*)+0xc4>
c0019eb6:	66 90                	xchg   ax,ax
c0019eb8:	83 ec 08             	sub    esp,0x8
c0019ebb:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019ec2:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019ec9:	50                   	push   eax
c0019eca:	e8 71 67 fe ff       	call   c0000640 <strcpy>
c0019ecf:	83 c4 10             	add    esp,0x10
c0019ed2:	83 ec 08             	sub    esp,0x8
c0019ed5:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0019edc:	50                   	push   eax
c0019edd:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019ee4:	e8 17 fa ff ff       	call   c0019900 <FAT::fixFilepath(char*)>
c0019ee9:	83 c4 10             	add    esp,0x10
c0019eec:	83 ec 08             	sub    esp,0x8
c0019eef:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0019ef6:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019efa:	50                   	push   eax
c0019efb:	e8 40 67 fe ff       	call   c0000640 <strcpy>
c0019f00:	83 c4 10             	add    esp,0x10
c0019f03:	83 ec 08             	sub    esp,0x8
c0019f06:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019f0a:	50                   	push   eax
c0019f0b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019f12:	e8 e9 f9 ff ff       	call   c0019900 <FAT::fixFilepath(char*)>
c0019f17:	83 c4 10             	add    esp,0x10
c0019f1a:	83 ec 08             	sub    esp,0x8
c0019f1d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019f21:	50                   	push   eax
c0019f22:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019f29:	50                   	push   eax
c0019f2a:	e8 88 ad fe ff       	call   c0004cb7 <f_rename>
c0019f2f:	83 c4 10             	add    esp,0x10
c0019f32:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0019f39:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0019f40:	85 c0                	test   eax,eax
c0019f42:	75 08                	jne    c0019f4c <FAT::rename(char const*, char const*)+0xbc>
c0019f44:	b8 00 00 00 00       	mov    eax,0x0
c0019f49:	eb 09                	jmp    c0019f54 <FAT::rename(char const*, char const*)+0xc4>
c0019f4b:	90                   	nop
c0019f4c:	b8 01 00 00 00       	mov    eax,0x1
c0019f51:	8d 76 00             	lea    esi,[esi+0x0]
c0019f54:	81 c4 1c 02 00 00    	add    esp,0x21c
c0019f5a:	c3                   	ret    
c0019f5b:	90                   	nop

c0019f5c <FAT::mkdir(char const*)>:
c0019f5c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019f62:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019f6a:	75 08                	jne    c0019f74 <FAT::mkdir(char const*)+0x18>
c0019f6c:	b8 04 00 00 00       	mov    eax,0x4
c0019f71:	eb 61                	jmp    c0019fd4 <FAT::mkdir(char const*)+0x78>
c0019f73:	90                   	nop
c0019f74:	83 ec 08             	sub    esp,0x8
c0019f77:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019f7e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019f82:	50                   	push   eax
c0019f83:	e8 b8 66 fe ff       	call   c0000640 <strcpy>
c0019f88:	83 c4 10             	add    esp,0x10
c0019f8b:	83 ec 08             	sub    esp,0x8
c0019f8e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019f92:	50                   	push   eax
c0019f93:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019f9a:	e8 61 f9 ff ff       	call   c0019900 <FAT::fixFilepath(char*)>
c0019f9f:	83 c4 10             	add    esp,0x10
c0019fa2:	83 ec 0c             	sub    esp,0xc
c0019fa5:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019fa9:	50                   	push   eax
c0019faa:	e8 6d ab fe ff       	call   c0004b1c <f_mkdir>
c0019faf:	83 c4 10             	add    esp,0x10
c0019fb2:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019fb9:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019fc0:	85 c0                	test   eax,eax
c0019fc2:	75 08                	jne    c0019fcc <FAT::mkdir(char const*)+0x70>
c0019fc4:	b8 00 00 00 00       	mov    eax,0x0
c0019fc9:	eb 09                	jmp    c0019fd4 <FAT::mkdir(char const*)+0x78>
c0019fcb:	90                   	nop
c0019fcc:	b8 01 00 00 00       	mov    eax,0x1
c0019fd1:	8d 76 00             	lea    esi,[esi+0x0]
c0019fd4:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019fda:	c3                   	ret    
c0019fdb:	90                   	nop

c0019fdc <FAT::exists(char const*)>:
c0019fdc:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019fe2:	83 ec 08             	sub    esp,0x8
c0019fe5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019fec:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019ff0:	50                   	push   eax
c0019ff1:	e8 4a 66 fe ff       	call   c0000640 <strcpy>
c0019ff6:	83 c4 10             	add    esp,0x10
c0019ff9:	83 ec 08             	sub    esp,0x8
c0019ffc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a000:	50                   	push   eax
c001a001:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a008:	e8 f3 f8 ff ff       	call   c0019900 <FAT::fixFilepath(char*)>
c001a00d:	83 c4 10             	add    esp,0x10
c001a010:	83 ec 08             	sub    esp,0x8
c001a013:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001a01a:	50                   	push   eax
c001a01b:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a01f:	50                   	push   eax
c001a020:	e8 63 a7 fe ff       	call   c0004788 <f_stat>
c001a025:	83 c4 10             	add    esp,0x10
c001a028:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001a02f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001a036:	85 c0                	test   eax,eax
c001a038:	75 06                	jne    c001a040 <FAT::exists(char const*)+0x64>
c001a03a:	b0 01                	mov    al,0x1
c001a03c:	eb 06                	jmp    c001a044 <FAT::exists(char const*)+0x68>
c001a03e:	66 90                	xchg   ax,ax
c001a040:	b0 00                	mov    al,0x0
c001a042:	66 90                	xchg   ax,ax
c001a044:	81 c4 2c 02 00 00    	add    esp,0x22c
c001a04a:	c3                   	ret    
c001a04b:	90                   	nop

c001a04c <isoReadDiscSectorHelper>:
c001a04c:	83 ec 2c             	sub    esp,0x2c
c001a04f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a053:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a057:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001a05c:	83 e8 41             	sub    eax,0x41
c001a05f:	8b 0c 85 80 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7780]
c001a066:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a06a:	ba 00 00 00 00       	mov    edx,0x0
c001a06f:	83 ec 0c             	sub    esp,0xc
c001a072:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a076:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a07a:	52                   	push   edx
c001a07b:	50                   	push   eax
c001a07c:	51                   	push   ecx
c001a07d:	e8 aa 3a ff ff       	call   c000db2c <LogicalDisk::read(unsigned long long, int, void*)>
c001a082:	83 c4 20             	add    esp,0x20
c001a085:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a089:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001a08e:	74 0c                	je     c001a09c <isoReadDiscSectorHelper+0x50>
c001a090:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a094:	c1 e0 0b             	shl    eax,0xb
c001a097:	eb 0b                	jmp    c001a0a4 <isoReadDiscSectorHelper+0x58>
c001a099:	8d 76 00             	lea    esi,[esi+0x0]
c001a09c:	b8 00 00 00 00       	mov    eax,0x0
c001a0a1:	8d 76 00             	lea    esi,[esi+0x0]
c001a0a4:	83 c4 2c             	add    esp,0x2c
c001a0a7:	c3                   	ret    

c001a0a8 <iso_kprintf>:
c001a0a8:	83 ec 0c             	sub    esp,0xc
c001a0ab:	83 ec 08             	sub    esp,0x8
c001a0ae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a0b2:	68 9a 27 02 c0       	push   0xc002279a
c001a0b7:	e8 89 08 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a0bc:	83 c4 10             	add    esp,0x10
c001a0bf:	90                   	nop
c001a0c0:	83 c4 0c             	add    esp,0xc
c001a0c3:	c3                   	ret    

c001a0c4 <iso_kprintfd>:
c001a0c4:	83 ec 0c             	sub    esp,0xc
c001a0c7:	83 ec 08             	sub    esp,0x8
c001a0ca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a0ce:	68 7a 0f 02 c0       	push   0xc0020f7a
c001a0d3:	e8 6d 08 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a0d8:	83 c4 10             	add    esp,0x10
c001a0db:	90                   	nop
c001a0dc:	83 c4 0c             	add    esp,0xc
c001a0df:	c3                   	ret    

c001a0e0 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001a0e0:	b8 08 00 00 00       	mov    eax,0x8
c001a0e5:	c3                   	ret    

c001a0e6 <ISO9660::truncate(void*, unsigned long long)>:
c001a0e6:	b8 01 00 00 00       	mov    eax,0x1
c001a0eb:	c3                   	ret    

c001a0ec <ISO9660::getName()>:
c001a0ec:	b8 50 2a 02 c0       	mov    eax,0xc0022a50
c001a0f1:	c3                   	ret    

c001a0f2 <ISO9660::closeDir(void*)>:
c001a0f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a0f6:	8b 00                	mov    eax,DWORD PTR [eax]
c001a0f8:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001a0fb:	90                   	nop

c001a0fc <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001a0fc:	b8 01 00 00 00       	mov    eax,0x1
c001a101:	c3                   	ret    

c001a102 <ISO9660::unlink(char const*)>:
c001a102:	b8 01 00 00 00       	mov    eax,0x1
c001a107:	c3                   	ret    

c001a108 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001a108:	b8 03 00 00 00       	mov    eax,0x3
c001a10d:	c3                   	ret    

c001a10e <ISO9660::rename(char const*, char const*)>:
c001a10e:	b8 01 00 00 00       	mov    eax,0x1
c001a113:	c3                   	ret    

c001a114 <ISO9660::mkdir(char const*)>:
c001a114:	b8 01 00 00 00       	mov    eax,0x1
c001a119:	c3                   	ret    

c001a11a <ISO9660::~ISO9660()>:
c001a11a:	83 ec 0c             	sub    esp,0xc
c001a11d:	ba 90 2b 02 c0       	mov    edx,0xc0022b90
c001a122:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a126:	89 10                	mov    DWORD PTR [eax],edx
c001a128:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a12c:	83 ec 0c             	sub    esp,0xc
c001a12f:	50                   	push   eax
c001a130:	e8 2d 14 ff ff       	call   c000b562 <Filesystem::~Filesystem()>
c001a135:	83 c4 10             	add    esp,0x10
c001a138:	90                   	nop
c001a139:	83 c4 0c             	add    esp,0xc
c001a13c:	c3                   	ret    
c001a13d:	90                   	nop

c001a13e <ISO9660::~ISO9660()>:
c001a13e:	83 ec 0c             	sub    esp,0xc
c001a141:	83 ec 0c             	sub    esp,0xc
c001a144:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a148:	e8 cd ff ff ff       	call   c001a11a <ISO9660::~ISO9660()>
c001a14d:	83 c4 10             	add    esp,0x10
c001a150:	83 ec 08             	sub    esp,0x8
c001a153:	6a 08                	push   0x8
c001a155:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a159:	e8 ba 06 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001a15e:	83 c4 10             	add    esp,0x10
c001a161:	83 c4 0c             	add    esp,0xc
c001a164:	c3                   	ret    
c001a165:	90                   	nop

c001a166 <ISO9660::exists(char const*)>:
c001a166:	83 ec 18             	sub    esp,0x18
c001a169:	68 6b 2a 02 c0       	push   0xc0022a6b
c001a16e:	e8 06 72 ff ff       	call   c0011379 <KePanic(char const*)>
c001a173:	31 c0                	xor    eax,eax
c001a175:	83 c4 1c             	add    esp,0x1c
c001a178:	c3                   	ret    
c001a179:	90                   	nop

c001a17a <ISO9660::open(char const*, void**, FileOpenMode)>:
c001a17a:	56                   	push   esi
c001a17b:	53                   	push   ebx
c001a17c:	53                   	push   ebx
c001a17d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a181:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a185:	85 db                	test   ebx,ebx
c001a187:	0f 84 ca 00 00 00    	je     c001a257 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001a18d:	85 f6                	test   esi,esi
c001a18f:	0f 84 c2 00 00 00    	je     c001a257 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001a195:	b8 03 00 00 00       	mov    eax,0x3
c001a19a:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001a19f:	0f 85 b7 00 00 00    	jne    c001a25c <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a1a5:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a1a7:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a1ae:	38 0d 80 98 02 c0    	cmp    BYTE PTR ds:0xc0029880,cl
c001a1b4:	74 1b                	je     c001a1d1 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001a1b6:	85 c0                	test   eax,eax
c001a1b8:	74 10                	je     c001a1ca <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001a1ba:	83 ec 0c             	sub    esp,0xc
c001a1bd:	68 89 2a 02 c0       	push   0xc0022a89
c001a1c2:	e8 b2 71 ff ff       	call   c0011379 <KePanic(char const*)>
c001a1c7:	83 c4 10             	add    esp,0x10
c001a1ca:	8a 03                	mov    al,BYTE PTR [ebx]
c001a1cc:	a2 80 98 02 c0       	mov    ds:0xc0029880,al
c001a1d1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a1d4:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a1db:	85 c0                	test   eax,eax
c001a1dd:	74 09                	je     c001a1e8 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001a1df:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a1e6:	74 48                	je     c001a230 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001a1e8:	83 ec 0c             	sub    esp,0xc
c001a1eb:	68 99 2a 02 c0       	push   0xc0022a99
c001a1f0:	e8 50 07 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a1f5:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a1f8:	83 c4 10             	add    esp,0x10
c001a1fb:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a202:	85 c0                	test   eax,eax
c001a204:	74 17                	je     c001a21d <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001a206:	83 ec 0c             	sub    esp,0xc
c001a209:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a210:	68 b9 2a 02 c0       	push   0xc0022ab9
c001a215:	e8 2b 07 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a21a:	83 c4 10             	add    esp,0x10
c001a21d:	83 ec 0c             	sub    esp,0xc
c001a220:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a227:	50                   	push   eax
c001a228:	e8 19 c8 fe ff       	call   c0006a46 <init_percd>
c001a22d:	83 c4 10             	add    esp,0x10
c001a230:	83 c3 03             	add    ebx,0x3
c001a233:	51                   	push   ecx
c001a234:	51                   	push   ecx
c001a235:	6a 00                	push   0x0
c001a237:	53                   	push   ebx
c001a238:	e8 d0 c2 fe ff       	call   c000650d <iso_open>
c001a23d:	83 c4 10             	add    esp,0x10
c001a240:	89 c2                	mov    edx,eax
c001a242:	b8 01 00 00 00       	mov    eax,0x1
c001a247:	83 fa ff             	cmp    edx,0xffffffff
c001a24a:	74 10                	je     c001a25c <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a24c:	83 c2 32             	add    edx,0x32
c001a24f:	31 c0                	xor    eax,eax
c001a251:	01 d2                	add    edx,edx
c001a253:	89 16                	mov    DWORD PTR [esi],edx
c001a255:	eb 05                	jmp    c001a25c <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a257:	b8 04 00 00 00       	mov    eax,0x4
c001a25c:	5a                   	pop    edx
c001a25d:	5b                   	pop    ebx
c001a25e:	5e                   	pop    esi
c001a25f:	c3                   	ret    

c001a260 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001a260:	53                   	push   ebx
c001a261:	83 ec 08             	sub    esp,0x8
c001a264:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a268:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a26c:	85 c0                	test   eax,eax
c001a26e:	74 2d                	je     c001a29d <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a270:	85 db                	test   ebx,ebx
c001a272:	74 29                	je     c001a29d <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a274:	b9 02 00 00 00       	mov    ecx,0x2
c001a279:	52                   	push   edx
c001a27a:	99                   	cdq    
c001a27b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a27f:	f7 f9                	idiv   ecx
c001a281:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a285:	83 e8 32             	sub    eax,0x32
c001a288:	50                   	push   eax
c001a289:	e8 27 c3 fe ff       	call   c00065b5 <iso_read>
c001a28e:	83 c4 10             	add    esp,0x10
c001a291:	89 03                	mov    DWORD PTR [ebx],eax
c001a293:	09 d0                	or     eax,edx
c001a295:	0f 94 c0             	sete   al
c001a298:	0f b6 c0             	movzx  eax,al
c001a29b:	eb 05                	jmp    c001a2a2 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001a29d:	b8 04 00 00 00       	mov    eax,0x4
c001a2a2:	83 c4 08             	add    esp,0x8
c001a2a5:	5b                   	pop    ebx
c001a2a6:	c3                   	ret    
c001a2a7:	90                   	nop

c001a2a8 <ISO9660::seek(void*, unsigned long long)>:
c001a2a8:	57                   	push   edi
c001a2a9:	56                   	push   esi
c001a2aa:	b8 04 00 00 00       	mov    eax,0x4
c001a2af:	51                   	push   ecx
c001a2b0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a2b4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a2b8:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a2bc:	85 d2                	test   edx,edx
c001a2be:	74 26                	je     c001a2e6 <ISO9660::seek(void*, unsigned long long)+0x3e>
c001a2c0:	6a 00                	push   0x0
c001a2c2:	b9 02 00 00 00       	mov    ecx,0x2
c001a2c7:	57                   	push   edi
c001a2c8:	89 d0                	mov    eax,edx
c001a2ca:	56                   	push   esi
c001a2cb:	99                   	cdq    
c001a2cc:	f7 f9                	idiv   ecx
c001a2ce:	83 e8 32             	sub    eax,0x32
c001a2d1:	50                   	push   eax
c001a2d2:	e8 f4 c3 fe ff       	call   c00066cb <iso_seek>
c001a2d7:	83 c4 10             	add    esp,0x10
c001a2da:	31 f0                	xor    eax,esi
c001a2dc:	31 fa                	xor    edx,edi
c001a2de:	09 d0                	or     eax,edx
c001a2e0:	0f 95 c0             	setne  al
c001a2e3:	0f b6 c0             	movzx  eax,al
c001a2e6:	5a                   	pop    edx
c001a2e7:	5e                   	pop    esi
c001a2e8:	5f                   	pop    edi
c001a2e9:	c3                   	ret    

c001a2ea <ISO9660::tell(void*, unsigned long long*)>:
c001a2ea:	53                   	push   ebx
c001a2eb:	83 ec 08             	sub    esp,0x8
c001a2ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a2f2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a2f6:	85 c0                	test   eax,eax
c001a2f8:	74 24                	je     c001a31e <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a2fa:	85 db                	test   ebx,ebx
c001a2fc:	74 20                	je     c001a31e <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a2fe:	83 ec 0c             	sub    esp,0xc
c001a301:	b9 02 00 00 00       	mov    ecx,0x2
c001a306:	99                   	cdq    
c001a307:	f7 f9                	idiv   ecx
c001a309:	83 e8 32             	sub    eax,0x32
c001a30c:	50                   	push   eax
c001a30d:	e8 3d c4 fe ff       	call   c000674f <iso_tell>
c001a312:	83 c4 10             	add    esp,0x10
c001a315:	89 03                	mov    DWORD PTR [ebx],eax
c001a317:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001a31a:	31 c0                	xor    eax,eax
c001a31c:	eb 05                	jmp    c001a323 <ISO9660::tell(void*, unsigned long long*)+0x39>
c001a31e:	b8 04 00 00 00       	mov    eax,0x4
c001a323:	83 c4 08             	add    esp,0x8
c001a326:	5b                   	pop    ebx
c001a327:	c3                   	ret    

c001a328 <ISO9660::stat(void*, unsigned long long*)>:
c001a328:	53                   	push   ebx
c001a329:	83 ec 14             	sub    esp,0x14
c001a32c:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001a330:	68 dd 2a 02 c0       	push   0xc0022add
c001a335:	e8 0b 06 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a33a:	83 c4 10             	add    esp,0x10
c001a33d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a342:	74 2c                	je     c001a370 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a344:	85 db                	test   ebx,ebx
c001a346:	74 28                	je     c001a370 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a348:	83 ec 0c             	sub    esp,0xc
c001a34b:	b9 02 00 00 00       	mov    ecx,0x2
c001a350:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a354:	99                   	cdq    
c001a355:	f7 f9                	idiv   ecx
c001a357:	83 e8 32             	sub    eax,0x32
c001a35a:	50                   	push   eax
c001a35b:	e8 20 c4 fe ff       	call   c0006780 <iso_total>
c001a360:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a367:	89 03                	mov    DWORD PTR [ebx],eax
c001a369:	83 c4 10             	add    esp,0x10
c001a36c:	31 c0                	xor    eax,eax
c001a36e:	eb 05                	jmp    c001a375 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001a370:	b8 04 00 00 00       	mov    eax,0x4
c001a375:	83 c4 08             	add    esp,0x8
c001a378:	5b                   	pop    ebx
c001a379:	c3                   	ret    

c001a37a <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001a37a:	55                   	push   ebp
c001a37b:	57                   	push   edi
c001a37c:	56                   	push   esi
c001a37d:	53                   	push   ebx
c001a37e:	83 ec 18             	sub    esp,0x18
c001a381:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a385:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001a389:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a38d:	68 e5 2a 02 c0       	push   0xc0022ae5
c001a392:	e8 ae 05 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a397:	83 c4 10             	add    esp,0x10
c001a39a:	85 ff                	test   edi,edi
c001a39c:	0f 94 c0             	sete   al
c001a39f:	85 f6                	test   esi,esi
c001a3a1:	0f 94 c2             	sete   dl
c001a3a4:	09 d0                	or     eax,edx
c001a3a6:	a8 01                	test   al,0x1
c001a3a8:	0f 85 dd 00 00 00    	jne    c001a48b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a3ae:	85 db                	test   ebx,ebx
c001a3b0:	0f 84 d5 00 00 00    	je     c001a48b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a3b6:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a3b9:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001a3bf:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a3c6:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a3cd:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a3cf:	38 0d 80 98 02 c0    	cmp    BYTE PTR ds:0xc0029880,cl
c001a3d5:	74 1b                	je     c001a3f2 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001a3d7:	85 c0                	test   eax,eax
c001a3d9:	74 10                	je     c001a3eb <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001a3db:	83 ec 0c             	sub    esp,0xc
c001a3de:	68 89 2a 02 c0       	push   0xc0022a89
c001a3e3:	e8 91 6f ff ff       	call   c0011379 <KePanic(char const*)>
c001a3e8:	83 c4 10             	add    esp,0x10
c001a3eb:	8a 03                	mov    al,BYTE PTR [ebx]
c001a3ed:	a2 80 98 02 c0       	mov    ds:0xc0029880,al
c001a3f2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a3f5:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a3fc:	85 c0                	test   eax,eax
c001a3fe:	74 09                	je     c001a409 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001a400:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a407:	74 51                	je     c001a45a <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001a409:	83 ec 0c             	sub    esp,0xc
c001a40c:	68 ed 2a 02 c0       	push   0xc0022aed
c001a411:	e8 2f 05 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a416:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a419:	83 c4 10             	add    esp,0x10
c001a41c:	83 3c 85 7c 87 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd7884],0x0
c001a424:	74 21                	je     c001a447 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001a426:	83 ec 0c             	sub    esp,0xc
c001a429:	68 0d 2b 02 c0       	push   0xc0022b0d
c001a42e:	e8 12 05 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a433:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a436:	83 c4 10             	add    esp,0x10
c001a439:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a440:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a447:	83 ec 0c             	sub    esp,0xc
c001a44a:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a451:	50                   	push   eax
c001a452:	e8 ef c5 fe ff       	call   c0006a46 <init_percd>
c001a457:	83 c4 10             	add    esp,0x10
c001a45a:	83 c3 03             	add    ebx,0x3
c001a45d:	52                   	push   edx
c001a45e:	52                   	push   edx
c001a45f:	6a 00                	push   0x0
c001a461:	53                   	push   ebx
c001a462:	e8 a6 c0 fe ff       	call   c000650d <iso_open>
c001a467:	83 c4 10             	add    esp,0x10
c001a46a:	89 c5                	mov    ebp,eax
c001a46c:	83 f8 ff             	cmp    eax,0xffffffff
c001a46f:	75 21                	jne    c001a492 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001a471:	50                   	push   eax
c001a472:	50                   	push   eax
c001a473:	6a 01                	push   0x1
c001a475:	53                   	push   ebx
c001a476:	e8 92 c0 fe ff       	call   c000650d <iso_open>
c001a47b:	83 c4 10             	add    esp,0x10
c001a47e:	ba 02 00 00 00       	mov    edx,0x2
c001a483:	40                   	inc    eax
c001a484:	74 2b                	je     c001a4b1 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a486:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001a489:	eb 24                	jmp    c001a4af <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001a48b:	ba 04 00 00 00       	mov    edx,0x4
c001a490:	eb 1f                	jmp    c001a4b1 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a492:	83 ec 0c             	sub    esp,0xc
c001a495:	50                   	push   eax
c001a496:	e8 e5 c2 fe ff       	call   c0006780 <iso_total>
c001a49b:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a4a2:	89 07                	mov    DWORD PTR [edi],eax
c001a4a4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a4a7:	e8 eb c0 fe ff       	call   c0006597 <iso_close>
c001a4ac:	83 c4 10             	add    esp,0x10
c001a4af:	31 d2                	xor    edx,edx
c001a4b1:	83 c4 0c             	add    esp,0xc
c001a4b4:	89 d0                	mov    eax,edx
c001a4b6:	5b                   	pop    ebx
c001a4b7:	5e                   	pop    esi
c001a4b8:	5f                   	pop    edi
c001a4b9:	5d                   	pop    ebp
c001a4ba:	c3                   	ret    
c001a4bb:	90                   	nop

c001a4bc <ISO9660::close(void*)>:
c001a4bc:	83 ec 0c             	sub    esp,0xc
c001a4bf:	b8 04 00 00 00       	mov    eax,0x4
c001a4c4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a4c8:	85 d2                	test   edx,edx
c001a4ca:	74 1b                	je     c001a4e7 <ISO9660::close(void*)+0x2b>
c001a4cc:	83 ec 0c             	sub    esp,0xc
c001a4cf:	b9 02 00 00 00       	mov    ecx,0x2
c001a4d4:	89 d0                	mov    eax,edx
c001a4d6:	99                   	cdq    
c001a4d7:	f7 f9                	idiv   ecx
c001a4d9:	83 e8 32             	sub    eax,0x32
c001a4dc:	50                   	push   eax
c001a4dd:	e8 b5 c0 fe ff       	call   c0006597 <iso_close>
c001a4e2:	83 c4 10             	add    esp,0x10
c001a4e5:	31 c0                	xor    eax,eax
c001a4e7:	83 c4 0c             	add    esp,0xc
c001a4ea:	c3                   	ret    
c001a4eb:	90                   	nop

c001a4ec <ISO9660::openDir(char const*, void**)>:
c001a4ec:	56                   	push   esi
c001a4ed:	53                   	push   ebx
c001a4ee:	50                   	push   eax
c001a4ef:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a4f3:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a4f7:	85 db                	test   ebx,ebx
c001a4f9:	0f 84 bd 00 00 00    	je     c001a5bc <ISO9660::openDir(char const*, void**)+0xd0>
c001a4ff:	85 f6                	test   esi,esi
c001a501:	0f 84 b5 00 00 00    	je     c001a5bc <ISO9660::openDir(char const*, void**)+0xd0>
c001a507:	8a 13                	mov    dl,BYTE PTR [ebx]
c001a509:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a510:	38 15 80 98 02 c0    	cmp    BYTE PTR ds:0xc0029880,dl
c001a516:	74 1b                	je     c001a533 <ISO9660::openDir(char const*, void**)+0x47>
c001a518:	85 c0                	test   eax,eax
c001a51a:	74 10                	je     c001a52c <ISO9660::openDir(char const*, void**)+0x40>
c001a51c:	83 ec 0c             	sub    esp,0xc
c001a51f:	68 89 2a 02 c0       	push   0xc0022a89
c001a524:	e8 50 6e ff ff       	call   c0011379 <KePanic(char const*)>
c001a529:	83 c4 10             	add    esp,0x10
c001a52c:	8a 03                	mov    al,BYTE PTR [ebx]
c001a52e:	a2 80 98 02 c0       	mov    ds:0xc0029880,al
c001a533:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a536:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a53d:	85 c0                	test   eax,eax
c001a53f:	74 10                	je     c001a551 <ISO9660::openDir(char const*, void**)+0x65>
c001a541:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a548:	74 1a                	je     c001a564 <ISO9660::openDir(char const*, void**)+0x78>
c001a54a:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a551:	83 ec 0c             	sub    esp,0xc
c001a554:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a55b:	50                   	push   eax
c001a55c:	e8 e5 c4 fe ff       	call   c0006a46 <init_percd>
c001a561:	83 c4 10             	add    esp,0x10
c001a564:	83 c3 03             	add    ebx,0x3
c001a567:	50                   	push   eax
c001a568:	50                   	push   eax
c001a569:	6a 01                	push   0x1
c001a56b:	53                   	push   ebx
c001a56c:	e8 9c bf fe ff       	call   c000650d <iso_open>
c001a571:	83 c4 10             	add    esp,0x10
c001a574:	89 c3                	mov    ebx,eax
c001a576:	83 f8 ff             	cmp    eax,0xffffffff
c001a579:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001a57e:	75 1c                	jne    c001a59c <ISO9660::openDir(char const*, void**)+0xb0>
c001a580:	53                   	push   ebx
c001a581:	53                   	push   ebx
c001a582:	68 31 2b 02 c0       	push   0xc0022b31
c001a587:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a58d:	e8 14 e5 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001a592:	83 c4 10             	add    esp,0x10
c001a595:	b8 01 00 00 00       	mov    eax,0x1
c001a59a:	eb 25                	jmp    c001a5c1 <ISO9660::openDir(char const*, void**)+0xd5>
c001a59c:	01 db                	add    ebx,ebx
c001a59e:	51                   	push   ecx
c001a59f:	83 c3 65             	add    ebx,0x65
c001a5a2:	51                   	push   ecx
c001a5a3:	68 44 2b 02 c0       	push   0xc0022b44
c001a5a8:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a5ae:	e8 f3 e4 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001a5b3:	89 1e                	mov    DWORD PTR [esi],ebx
c001a5b5:	83 c4 10             	add    esp,0x10
c001a5b8:	31 c0                	xor    eax,eax
c001a5ba:	eb 05                	jmp    c001a5c1 <ISO9660::openDir(char const*, void**)+0xd5>
c001a5bc:	b8 04 00 00 00       	mov    eax,0x4
c001a5c1:	5a                   	pop    edx
c001a5c2:	5b                   	pop    ebx
c001a5c3:	5e                   	pop    esi
c001a5c4:	c3                   	ret    
c001a5c5:	90                   	nop

c001a5c6 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001a5c6:	55                   	push   ebp
c001a5c7:	57                   	push   edi
c001a5c8:	56                   	push   esi
c001a5c9:	53                   	push   ebx
c001a5ca:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a5d0:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001a5d7:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001a5de:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001a5e6:	0f 84 e7 00 00 00    	je     c001a6d3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001a5ec:	85 db                	test   ebx,ebx
c001a5ee:	0f 84 df 00 00 00    	je     c001a6d3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001a5f4:	83 ec 0c             	sub    esp,0xc
c001a5f7:	68 57 2b 02 c0       	push   0xc0022b57
c001a5fc:	e8 44 03 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a601:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001a608:	b9 02 00 00 00       	mov    ecx,0x2
c001a60d:	99                   	cdq    
c001a60e:	f7 f9                	idiv   ecx
c001a610:	83 e8 32             	sub    eax,0x32
c001a613:	89 04 24             	mov    DWORD PTR [esp],eax
c001a616:	e8 b7 c1 fe ff       	call   c00067d2 <iso_readdir>
c001a61b:	83 c4 10             	add    esp,0x10
c001a61e:	89 c6                	mov    esi,eax
c001a620:	85 c0                	test   eax,eax
c001a622:	75 37                	jne    c001a65b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x95>
c001a624:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001a629:	56                   	push   esi
c001a62a:	56                   	push   esi
c001a62b:	68 62 2b 02 c0       	push   0xc0022b62
c001a630:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a636:	e8 6b e4 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001a63b:	83 c4 0c             	add    esp,0xc
c001a63e:	68 10 01 00 00       	push   0x110
c001a643:	6a 00                	push   0x0
c001a645:	57                   	push   edi
c001a646:	e8 a5 5e fe ff       	call   c00004f0 <memset>
c001a64b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001a651:	83 c4 10             	add    esp,0x10
c001a654:	b8 01 00 00 00       	mov    eax,0x1
c001a659:	eb 7d                	jmp    c001a6d8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001a65b:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001a661:	8d 68 08             	lea    ebp,[eax+0x8]
c001a664:	83 ec 0c             	sub    esp,0xc
c001a667:	55                   	push   ebp
c001a668:	e8 03 5f fe ff       	call   c0000570 <strlen>
c001a66d:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001a675:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a679:	83 c4 10             	add    esp,0x10
c001a67c:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c001a680:	75 0a                	jne    c001a68c <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001a682:	b8 02 00 00 00       	mov    eax,0x2
c001a687:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c001a68a:	74 05                	je     c001a691 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xcb>
c001a68c:	b8 01 00 00 00       	mov    eax,0x1
c001a691:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a695:	50                   	push   eax
c001a696:	50                   	push   eax
c001a697:	55                   	push   ebp
c001a698:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a69c:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001a6a0:	50                   	push   eax
c001a6a1:	e8 9a 5f fe ff       	call   c0000640 <strcpy>
c001a6a6:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001a6ad:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a6af:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c001a6b5:	5a                   	pop    edx
c001a6b6:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001a6bb:	59                   	pop    ecx
c001a6bc:	68 75 2b 02 c0       	push   0xc0022b75
c001a6c1:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a6c7:	e8 da e3 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001a6cc:	83 c4 10             	add    esp,0x10
c001a6cf:	31 c0                	xor    eax,eax
c001a6d1:	eb 05                	jmp    c001a6d8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001a6d3:	b8 04 00 00 00       	mov    eax,0x4
c001a6d8:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a6de:	5b                   	pop    ebx
c001a6df:	5e                   	pop    esi
c001a6e0:	5f                   	pop    edi
c001a6e1:	5d                   	pop    ebp
c001a6e2:	c3                   	ret    

c001a6e3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001a6e3:	57                   	push   edi
c001a6e4:	56                   	push   esi
c001a6e5:	53                   	push   ebx
c001a6e6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a6ea:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a6ee:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a6f2:	39 35 84 98 02 c0    	cmp    DWORD PTR ds:0xc0029884,esi
c001a6f8:	0f be cb             	movsx  ecx,bl
c001a6fb:	75 0b                	jne    c001a708 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001a6fd:	0f be 05 a0 39 02 c0 	movsx  eax,BYTE PTR ds:0xc00239a0
c001a704:	39 c8                	cmp    eax,ecx
c001a706:	74 47                	je     c001a74f <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001a708:	83 ec 0c             	sub    esp,0xc
c001a70b:	31 d2                	xor    edx,edx
c001a70d:	68 a0 98 02 c0       	push   0xc00298a0
c001a712:	6a 01                	push   0x1
c001a714:	52                   	push   edx
c001a715:	56                   	push   esi
c001a716:	ff 34 8d 7c 87 02 c0 	push   DWORD PTR [ecx*4-0x3ffd7884]
c001a71d:	e8 0a 34 ff ff       	call   c000db2c <LogicalDisk::read(unsigned long long, int, void*)>
c001a722:	83 c4 20             	add    esp,0x20
c001a725:	85 c0                	test   eax,eax
c001a727:	75 0e                	jne    c001a737 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001a729:	89 35 84 98 02 c0    	mov    DWORD PTR ds:0xc0029884,esi
c001a72f:	88 1d a0 39 02 c0    	mov    BYTE PTR ds:0xc00239a0,bl
c001a735:	eb 18                	jmp    c001a74f <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001a737:	50                   	push   eax
c001a738:	68 00 08 00 00       	push   0x800
c001a73d:	6a 00                	push   0x0
c001a73f:	57                   	push   edi
c001a740:	e8 ab 5d fe ff       	call   c00004f0 <memset>
c001a745:	83 c4 10             	add    esp,0x10
c001a748:	b8 01 00 00 00       	mov    eax,0x1
c001a74d:	eb 0e                	jmp    c001a75d <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001a74f:	be a0 98 02 c0       	mov    esi,0xc00298a0
c001a754:	b9 00 08 00 00       	mov    ecx,0x800
c001a759:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a75b:	31 c0                	xor    eax,eax
c001a75d:	5b                   	pop    ebx
c001a75e:	5e                   	pop    esi
c001a75f:	5f                   	pop    edi
c001a760:	c3                   	ret    
c001a761:	90                   	nop

c001a762 <ISO9660::tryMount(LogicalDisk*, int)>:
c001a762:	53                   	push   ebx
c001a763:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001a769:	c7 05 84 98 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0029884,0xdeadbeef
c001a773:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001a77a:	8d 58 41             	lea    ebx,[eax+0x41]
c001a77d:	0f be db             	movsx  ebx,bl
c001a780:	53                   	push   ebx
c001a781:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a785:	50                   	push   eax
c001a786:	6a 10                	push   0x10
c001a788:	e8 56 ff ff ff       	call   c001a6e3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a78d:	83 c4 10             	add    esp,0x10
c001a790:	31 d2                	xor    edx,edx
c001a792:	85 c0                	test   eax,eax
c001a794:	75 33                	jne    c001a7c9 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a796:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001a79b:	75 2c                	jne    c001a7c9 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a79d:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001a7a2:	75 25                	jne    c001a7c9 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a7a4:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001a7a9:	75 1e                	jne    c001a7c9 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a7ab:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001a7b0:	75 17                	jne    c001a7c9 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a7b2:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001a7b7:	75 10                	jne    c001a7c9 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a7b9:	83 ec 0c             	sub    esp,0xc
c001a7bc:	53                   	push   ebx
c001a7bd:	e8 84 c2 fe ff       	call   c0006a46 <init_percd>
c001a7c2:	83 c4 10             	add    esp,0x10
c001a7c5:	40                   	inc    eax
c001a7c6:	0f 95 c2             	setne  dl
c001a7c9:	88 d0                	mov    al,dl
c001a7cb:	81 c4 08 08 00 00    	add    esp,0x808
c001a7d1:	5b                   	pop    ebx
c001a7d2:	c3                   	ret    
c001a7d3:	90                   	nop

c001a7d4 <ISO9660::ISO9660()>:
c001a7d4:	83 ec 0c             	sub    esp,0xc
c001a7d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a7db:	83 ec 0c             	sub    esp,0xc
c001a7de:	50                   	push   eax
c001a7df:	e8 5a 0d ff ff       	call   c000b53e <Filesystem::Filesystem()>
c001a7e4:	83 c4 10             	add    esp,0x10
c001a7e7:	ba 90 2b 02 c0       	mov    edx,0xc0022b90
c001a7ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a7f0:	89 10                	mov    DWORD PTR [eax],edx
c001a7f2:	e8 61 c3 fe ff       	call   c0006b58 <fs_iso9660_init>
c001a7f7:	90                   	nop
c001a7f8:	83 c4 0c             	add    esp,0xc
c001a7fb:	c3                   	ret    

c001a7fc <SoundCard::beginPlayback()>:
c001a7fc:	c7 44 24 04 f4 2b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022bf4
c001a804:	e9 70 6b ff ff       	jmp    c0011379 <KePanic(char const*)>
c001a809:	90                   	nop

c001a80a <SoundCard::stopPlayback()>:
c001a80a:	c7 44 24 04 f4 2b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022bf4
c001a812:	e9 62 6b ff ff       	jmp    c0011379 <KePanic(char const*)>
c001a817:	90                   	nop

c001a818 <SoundCard::SoundCard(char const*)>:
c001a818:	83 ec 1c             	sub    esp,0x1c
c001a81b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a81f:	83 ec 08             	sub    esp,0x8
c001a822:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a826:	50                   	push   eax
c001a827:	e8 b6 20 ff ff       	call   c000c8e2 <Device::Device(char const*)>
c001a82c:	83 c4 10             	add    esp,0x10
c001a82f:	ba 40 2c 02 c0       	mov    edx,0xc0022c40
c001a834:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a838:	89 10                	mov    DWORD PTR [eax],edx
c001a83a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a83e:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001a845:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a849:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001a853:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a857:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001a861:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a865:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001a86f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a873:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001a87d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a885:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001a88a:	7f 1a                	jg     c001a8a6 <SoundCard::SoundCard(char const*)+0x8e>
c001a88c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a890:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a894:	83 c2 54             	add    edx,0x54
c001a897:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001a89f:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001a8a4:	eb df                	jmp    c001a885 <SoundCard::SoundCard(char const*)+0x6d>
c001a8a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a8aa:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001a8b1:	90                   	nop
c001a8b2:	83 c4 1c             	add    esp,0x1c
c001a8b5:	c3                   	ret    

c001a8b6 <SoundCard::~SoundCard()>:
c001a8b6:	83 ec 0c             	sub    esp,0xc
c001a8b9:	ba 40 2c 02 c0       	mov    edx,0xc0022c40
c001a8be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a8c2:	89 10                	mov    DWORD PTR [eax],edx
c001a8c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a8c8:	83 ec 0c             	sub    esp,0xc
c001a8cb:	50                   	push   eax
c001a8cc:	e8 7b 1d ff ff       	call   c000c64c <Device::~Device()>
c001a8d1:	83 c4 10             	add    esp,0x10
c001a8d4:	90                   	nop
c001a8d5:	83 c4 0c             	add    esp,0xc
c001a8d8:	c3                   	ret    
c001a8d9:	90                   	nop

c001a8da <SoundCard::~SoundCard()>:
c001a8da:	83 ec 0c             	sub    esp,0xc
c001a8dd:	83 ec 0c             	sub    esp,0xc
c001a8e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a8e4:	e8 cd ff ff ff       	call   c001a8b6 <SoundCard::~SoundCard()>
c001a8e9:	83 c4 10             	add    esp,0x10
c001a8ec:	83 ec 08             	sub    esp,0x8
c001a8ef:	68 e8 01 00 00       	push   0x1e8
c001a8f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a8f8:	e8 1b ff fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001a8fd:	83 c4 10             	add    esp,0x10
c001a900:	83 c4 0c             	add    esp,0xc
c001a903:	c3                   	ret    

c001a904 <SoundCard::configureRates(int, int, int)>:
c001a904:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a908:	31 c0                	xor    eax,eax
c001a90a:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001a911:	75 20                	jne    c001a933 <SoundCard::configureRates(int, int, int)+0x2f>
c001a913:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a917:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001a91d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a921:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001a927:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a92b:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001a931:	b0 01                	mov    al,0x1
c001a933:	c3                   	ret    

c001a934 <SoundCard::getSamples16(int, short*)>:
c001a934:	55                   	push   ebp
c001a935:	57                   	push   edi
c001a936:	31 ff                	xor    edi,edi
c001a938:	56                   	push   esi
c001a939:	53                   	push   ebx
c001a93a:	31 db                	xor    ebx,ebx
c001a93c:	83 ec 10             	sub    esp,0x10
c001a93f:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001a943:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001a947:	8d 04 36             	lea    eax,[esi+esi*1]
c001a94a:	50                   	push   eax
c001a94b:	6a 00                	push   0x0
c001a94d:	55                   	push   ebp
c001a94e:	e8 9d 5b fe ff       	call   c00004f0 <memset>
c001a953:	83 c4 10             	add    esp,0x10
c001a956:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a95a:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001a961:	85 c0                	test   eax,eax
c001a963:	74 1b                	je     c001a980 <SoundCard::getSamples16(int, short*)+0x4c>
c001a965:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001a969:	75 15                	jne    c001a980 <SoundCard::getSamples16(int, short*)+0x4c>
c001a96b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a96f:	55                   	push   ebp
c001a970:	56                   	push   esi
c001a971:	50                   	push   eax
c001a972:	e8 f1 02 00 00       	call   c001ac68 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001a977:	83 c4 10             	add    esp,0x10
c001a97a:	39 c7                	cmp    edi,eax
c001a97c:	7d 02                	jge    c001a980 <SoundCard::getSamples16(int, short*)+0x4c>
c001a97e:	89 c7                	mov    edi,eax
c001a980:	43                   	inc    ebx
c001a981:	83 fb 20             	cmp    ebx,0x20
c001a984:	75 d0                	jne    c001a956 <SoundCard::getSamples16(int, short*)+0x22>
c001a986:	83 c4 0c             	add    esp,0xc
c001a989:	89 f8                	mov    eax,edi
c001a98b:	5b                   	pop    ebx
c001a98c:	5e                   	pop    esi
c001a98d:	5f                   	pop    edi
c001a98e:	5d                   	pop    ebp
c001a98f:	c3                   	ret    

c001a990 <SoundCard::getSamples32(int, int*)>:
c001a990:	55                   	push   ebp
c001a991:	57                   	push   edi
c001a992:	31 ff                	xor    edi,edi
c001a994:	56                   	push   esi
c001a995:	31 f6                	xor    esi,esi
c001a997:	53                   	push   ebx
c001a998:	83 ec 10             	sub    esp,0x10
c001a99b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a99f:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001a9a3:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001a9a7:	c1 e0 02             	shl    eax,0x2
c001a9aa:	50                   	push   eax
c001a9ab:	6a 00                	push   0x0
c001a9ad:	55                   	push   ebp
c001a9ae:	e8 3d 5b fe ff       	call   c00004f0 <memset>
c001a9b3:	83 c4 10             	add    esp,0x10
c001a9b6:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001a9bd:	85 c0                	test   eax,eax
c001a9bf:	74 1b                	je     c001a9dc <SoundCard::getSamples32(int, int*)+0x4c>
c001a9c1:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001a9c5:	75 15                	jne    c001a9dc <SoundCard::getSamples32(int, int*)+0x4c>
c001a9c7:	53                   	push   ebx
c001a9c8:	55                   	push   ebp
c001a9c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a9cd:	50                   	push   eax
c001a9ce:	e8 61 03 00 00       	call   c001ad34 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001a9d3:	83 c4 10             	add    esp,0x10
c001a9d6:	39 c6                	cmp    esi,eax
c001a9d8:	7d 02                	jge    c001a9dc <SoundCard::getSamples32(int, int*)+0x4c>
c001a9da:	89 c6                	mov    esi,eax
c001a9dc:	47                   	inc    edi
c001a9dd:	83 ff 20             	cmp    edi,0x20
c001a9e0:	75 d4                	jne    c001a9b6 <SoundCard::getSamples32(int, int*)+0x26>
c001a9e2:	85 f6                	test   esi,esi
c001a9e4:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001a9eb:	75 0f                	jne    c001a9fc <SoundCard::getSamples32(int, int*)+0x6c>
c001a9ed:	85 c0                	test   eax,eax
c001a9ef:	74 1b                	je     c001aa0c <SoundCard::getSamples32(int, int*)+0x7c>
c001a9f1:	83 ec 0c             	sub    esp,0xc
c001a9f4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a9f6:	53                   	push   ebx
c001a9f7:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001a9fa:	eb 0d                	jmp    c001aa09 <SoundCard::getSamples32(int, int*)+0x79>
c001a9fc:	85 c0                	test   eax,eax
c001a9fe:	75 0c                	jne    c001aa0c <SoundCard::getSamples32(int, int*)+0x7c>
c001aa00:	83 ec 0c             	sub    esp,0xc
c001aa03:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aa05:	53                   	push   ebx
c001aa06:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001aa09:	83 c4 10             	add    esp,0x10
c001aa0c:	83 c4 0c             	add    esp,0xc
c001aa0f:	89 f0                	mov    eax,esi
c001aa11:	5b                   	pop    ebx
c001aa12:	5e                   	pop    esi
c001aa13:	5f                   	pop    edi
c001aa14:	5d                   	pop    ebp
c001aa15:	c3                   	ret    

c001aa16 <SoundCard::addChannel(SoundPort*)>:
c001aa16:	83 ec 0c             	sub    esp,0xc
c001aa19:	31 c0                	xor    eax,eax
c001aa1b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001aa1f:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001aa27:	74 1b                	je     c001aa44 <SoundCard::addChannel(SoundPort*)+0x2e>
c001aa29:	40                   	inc    eax
c001aa2a:	83 f8 20             	cmp    eax,0x20
c001aa2d:	75 f0                	jne    c001aa1f <SoundCard::addChannel(SoundPort*)+0x9>
c001aa2f:	83 ec 0c             	sub    esp,0xc
c001aa32:	68 19 2c 02 c0       	push   0xc0022c19
c001aa37:	e8 3d 69 ff ff       	call   c0011379 <KePanic(char const*)>
c001aa3c:	83 c4 10             	add    esp,0x10
c001aa3f:	83 c8 ff             	or     eax,0xffffffff
c001aa42:	eb 0b                	jmp    c001aa4f <SoundCard::addChannel(SoundPort*)+0x39>
c001aa44:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001aa48:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001aa4f:	83 c4 0c             	add    esp,0xc
c001aa52:	c3                   	ret    
c001aa53:	90                   	nop

c001aa54 <SoundCard::removeChannel(int)>:
c001aa54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa58:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001aa5c:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001aa67:	c3                   	ret    

c001aa68 <SoundPort::SoundPort(int, int, int, int)>:
c001aa68:	83 ec 0c             	sub    esp,0xc
c001aa6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa6f:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001aa76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa7a:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001aa7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa82:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001aa86:	89 10                	mov    DWORD PTR [eax],edx
c001aa88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa8c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001aa90:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001aa93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa97:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001aa9b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001aa9e:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001aaa3:	75 13                	jne    c001aab8 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001aaa5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aaa9:	8b 00                	mov    eax,DWORD PTR [eax]
c001aaab:	05 a0 0f 00 00       	add    eax,0xfa0
c001aab0:	01 c0                	add    eax,eax
c001aab2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001aab6:	66 90                	xchg   ax,ax
c001aab8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aabc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001aac0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001aac3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aac7:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001aace:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aad2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001aad5:	c1 e0 02             	shl    eax,0x2
c001aad8:	83 ec 0c             	sub    esp,0xc
c001aadb:	50                   	push   eax
c001aadc:	e8 d5 cf fe ff       	call   c0007ab6 <malloc>
c001aae1:	83 c4 10             	add    esp,0x10
c001aae4:	89 c2                	mov    edx,eax
c001aae6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aaea:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001aaed:	90                   	nop
c001aaee:	83 c4 0c             	add    esp,0xc
c001aaf1:	c3                   	ret    
c001aaf2:	66 90                	xchg   ax,ax

c001aaf4 <SoundPort::~SoundPort()>:
c001aaf4:	83 ec 0c             	sub    esp,0xc
c001aaf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aafb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001aafe:	85 c0                	test   eax,eax
c001ab00:	74 1e                	je     c001ab20 <SoundPort::~SoundPort()+0x2c>
c001ab02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab06:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001ab09:	83 ec 0c             	sub    esp,0xc
c001ab0c:	50                   	push   eax
c001ab0d:	e8 b4 cf fe ff       	call   c0007ac6 <free>
c001ab12:	83 c4 10             	add    esp,0x10
c001ab15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab19:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001ab20:	90                   	nop
c001ab21:	83 c4 0c             	add    esp,0xc
c001ab24:	c3                   	ret    
c001ab25:	90                   	nop
c001ab26:	66 90                	xchg   ax,ax

c001ab28 <SoundPort::unpause()>:
c001ab28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab2c:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001ab30:	c3                   	ret    
c001ab31:	90                   	nop
c001ab32:	66 90                	xchg   ax,ax

c001ab34 <SoundPort::pause()>:
c001ab34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab38:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001ab3c:	c3                   	ret    
c001ab3d:	90                   	nop
c001ab3e:	66 90                	xchg   ax,ax

c001ab40 <SoundPort::getBufferUsed()>:
c001ab40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab44:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ab47:	c3                   	ret    

c001ab48 <SoundPort::getBufferSize()>:
c001ab48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab4c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001ab4f:	c3                   	ret    

c001ab50 <SoundPort::buffer16(short*, int)>:
c001ab50:	55                   	push   ebp
c001ab51:	57                   	push   edi
c001ab52:	56                   	push   esi
c001ab53:	53                   	push   ebx
c001ab54:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ab58:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001ab5c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001ab5f:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001ab62:	74 68                	je     c001abcc <SoundPort::buffer16(short*, int)+0x7c>
c001ab64:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ab68:	85 c9                	test   ecx,ecx
c001ab6a:	7e 60                	jle    c001abcc <SoundPort::buffer16(short*, int)+0x7c>
c001ab6c:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001ab70:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001ab73:	c1 e1 0f             	shl    ecx,0xf
c001ab76:	8d 70 01             	lea    esi,[eax+0x1]
c001ab79:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001ab7c:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001ab7f:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ab82:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001ab85:	74 4d                	je     c001abd4 <SoundPort::buffer16(short*, int)+0x84>
c001ab87:	31 f6                	xor    esi,esi
c001ab89:	eb 21                	jmp    c001abac <SoundPort::buffer16(short*, int)+0x5c>
c001ab8b:	90                   	nop
c001ab8c:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001ab91:	8d 79 01             	lea    edi,[ecx+0x1]
c001ab94:	c1 e3 0f             	shl    ebx,0xf
c001ab97:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001ab9a:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001ab9d:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001aba0:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001aba3:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001aba6:	74 1c                	je     c001abc4 <SoundPort::buffer16(short*, int)+0x74>
c001aba8:	89 c6                	mov    esi,eax
c001abaa:	66 90                	xchg   ax,ax
c001abac:	8d 46 01             	lea    eax,[esi+0x1]
c001abaf:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001abb3:	75 d7                	jne    c001ab8c <SoundPort::buffer16(short*, int)+0x3c>
c001abb5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001abb9:	8d 76 00             	lea    esi,[esi+0x0]
c001abbc:	5b                   	pop    ebx
c001abbd:	5e                   	pop    esi
c001abbe:	5f                   	pop    edi
c001abbf:	5d                   	pop    ebp
c001abc0:	c3                   	ret    
c001abc1:	8d 76 00             	lea    esi,[esi+0x0]
c001abc4:	5b                   	pop    ebx
c001abc5:	8d 46 02             	lea    eax,[esi+0x2]
c001abc8:	5e                   	pop    esi
c001abc9:	5f                   	pop    edi
c001abca:	5d                   	pop    ebp
c001abcb:	c3                   	ret    
c001abcc:	5b                   	pop    ebx
c001abcd:	31 c0                	xor    eax,eax
c001abcf:	5e                   	pop    esi
c001abd0:	5f                   	pop    edi
c001abd1:	5d                   	pop    ebp
c001abd2:	c3                   	ret    
c001abd3:	90                   	nop
c001abd4:	b8 01 00 00 00       	mov    eax,0x1
c001abd9:	eb e1                	jmp    c001abbc <SoundPort::buffer16(short*, int)+0x6c>
c001abdb:	90                   	nop

c001abdc <SoundPort::buffer32(int*, int)>:
c001abdc:	55                   	push   ebp
c001abdd:	57                   	push   edi
c001abde:	56                   	push   esi
c001abdf:	53                   	push   ebx
c001abe0:	83 ec 04             	sub    esp,0x4
c001abe3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001abe7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001abeb:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001abee:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001abf2:	89 04 24             	mov    DWORD PTR [esp],eax
c001abf5:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001abf8:	74 5a                	je     c001ac54 <SoundPort::buffer32(int*, int)+0x78>
c001abfa:	85 c0                	test   eax,eax
c001abfc:	7e 56                	jle    c001ac54 <SoundPort::buffer32(int*, int)+0x78>
c001abfe:	8d 71 01             	lea    esi,[ecx+0x1]
c001ac01:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001ac04:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001ac07:	8b 37                	mov    esi,DWORD PTR [edi]
c001ac09:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001ac0c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ac0f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001ac12:	74 4c                	je     c001ac60 <SoundPort::buffer32(int*, int)+0x84>
c001ac14:	31 f6                	xor    esi,esi
c001ac16:	eb 1c                	jmp    c001ac34 <SoundPort::buffer32(int*, int)+0x58>
c001ac18:	8d 69 01             	lea    ebp,[ecx+0x1]
c001ac1b:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001ac1e:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001ac21:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001ac24:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001ac28:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ac2b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001ac2e:	74 18                	je     c001ac48 <SoundPort::buffer32(int*, int)+0x6c>
c001ac30:	89 de                	mov    esi,ebx
c001ac32:	66 90                	xchg   ax,ax
c001ac34:	8d 5e 01             	lea    ebx,[esi+0x1]
c001ac37:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001ac3a:	75 dc                	jne    c001ac18 <SoundPort::buffer32(int*, int)+0x3c>
c001ac3c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001ac3f:	90                   	nop
c001ac40:	83 c4 04             	add    esp,0x4
c001ac43:	5b                   	pop    ebx
c001ac44:	5e                   	pop    esi
c001ac45:	5f                   	pop    edi
c001ac46:	5d                   	pop    ebp
c001ac47:	c3                   	ret    
c001ac48:	83 c4 04             	add    esp,0x4
c001ac4b:	8d 46 02             	lea    eax,[esi+0x2]
c001ac4e:	5b                   	pop    ebx
c001ac4f:	5e                   	pop    esi
c001ac50:	5f                   	pop    edi
c001ac51:	5d                   	pop    ebp
c001ac52:	c3                   	ret    
c001ac53:	90                   	nop
c001ac54:	83 c4 04             	add    esp,0x4
c001ac57:	31 c0                	xor    eax,eax
c001ac59:	5b                   	pop    ebx
c001ac5a:	5e                   	pop    esi
c001ac5b:	5f                   	pop    edi
c001ac5c:	5d                   	pop    ebp
c001ac5d:	c3                   	ret    
c001ac5e:	66 90                	xchg   ax,ax
c001ac60:	b8 01 00 00 00       	mov    eax,0x1
c001ac65:	eb d9                	jmp    c001ac40 <SoundPort::buffer32(int*, int)+0x64>
c001ac67:	90                   	nop

c001ac68 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001ac68:	57                   	push   edi
c001ac69:	56                   	push   esi
c001ac6a:	53                   	push   ebx
c001ac6b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ac6f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001ac73:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001ac79:	39 03                	cmp    DWORD PTR [ebx],eax
c001ac7b:	74 13                	je     c001ac90 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001ac7d:	83 ec 0c             	sub    esp,0xc
c001ac80:	68 6c 2c 02 c0       	push   0xc0022c6c
c001ac85:	e8 ef 66 ff ff       	call   c0011379 <KePanic(char const*)>
c001ac8a:	83 c4 10             	add    esp,0x10
c001ac8d:	8d 76 00             	lea    esi,[esi+0x0]
c001ac90:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001ac96:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001ac99:	74 11                	je     c001acac <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001ac9b:	83 ec 0c             	sub    esp,0xc
c001ac9e:	68 ab 2c 02 c0       	push   0xc0022cab
c001aca3:	e8 d1 66 ff ff       	call   c0011379 <KePanic(char const*)>
c001aca8:	83 c4 10             	add    esp,0x10
c001acab:	90                   	nop
c001acac:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001acb2:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001acb5:	74 11                	je     c001acc8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001acb7:	83 ec 0c             	sub    esp,0xc
c001acba:	68 ab 2c 02 c0       	push   0xc0022cab
c001acbf:	e8 b5 66 ff ff       	call   c0011379 <KePanic(char const*)>
c001acc4:	83 c4 10             	add    esp,0x10
c001acc7:	90                   	nop
c001acc8:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001accb:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c001accf:	7e 07                	jle    c001acd8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001acd1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001acd5:	8d 76 00             	lea    esi,[esi+0x0]
c001acd8:	85 f6                	test   esi,esi
c001acda:	7e 2c                	jle    c001ad08 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c001acdc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ace0:	8d 3c 36             	lea    edi,[esi+esi*1]
c001ace3:	31 c9                	xor    ecx,ecx
c001ace5:	01 d7                	add    edi,edx
c001ace7:	90                   	nop
c001ace8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001aceb:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001acee:	85 c0                	test   eax,eax
c001acf0:	79 06                	jns    c001acf8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001acf2:	05 ff 7f 00 00       	add    eax,0x7fff
c001acf7:	90                   	nop
c001acf8:	c1 f8 0f             	sar    eax,0xf
c001acfb:	83 c1 04             	add    ecx,0x4
c001acfe:	66 01 02             	add    WORD PTR [edx],ax
c001ad01:	83 c2 02             	add    edx,0x2
c001ad04:	39 d7                	cmp    edi,edx
c001ad06:	75 e0                	jne    c001ace8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001ad08:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001ad0b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ad0e:	83 ec 04             	sub    esp,0x4
c001ad11:	29 f0                	sub    eax,esi
c001ad13:	c1 e0 02             	shl    eax,0x2
c001ad16:	50                   	push   eax
c001ad17:	8d 04 b2             	lea    eax,[edx+esi*4]
c001ad1a:	50                   	push   eax
c001ad1b:	52                   	push   edx
c001ad1c:	e8 af 56 fe ff       	call   c00003d0 <memmove>
c001ad21:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ad24:	83 c4 10             	add    esp,0x10
c001ad27:	29 f0                	sub    eax,esi
c001ad29:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001ad2c:	89 f0                	mov    eax,esi
c001ad2e:	5b                   	pop    ebx
c001ad2f:	5e                   	pop    esi
c001ad30:	5f                   	pop    edi
c001ad31:	c3                   	ret    
c001ad32:	66 90                	xchg   ax,ax

c001ad34 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001ad34:	57                   	push   edi
c001ad35:	56                   	push   esi
c001ad36:	53                   	push   ebx
c001ad37:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ad3b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001ad3f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ad43:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001ad49:	39 06                	cmp    DWORD PTR [esi],eax
c001ad4b:	74 13                	je     c001ad60 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001ad4d:	83 ec 0c             	sub    esp,0xc
c001ad50:	68 8c 2c 02 c0       	push   0xc0022c8c
c001ad55:	e8 1f 66 ff ff       	call   c0011379 <KePanic(char const*)>
c001ad5a:	83 c4 10             	add    esp,0x10
c001ad5d:	8d 76 00             	lea    esi,[esi+0x0]
c001ad60:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001ad66:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001ad69:	74 11                	je     c001ad7c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001ad6b:	83 ec 0c             	sub    esp,0xc
c001ad6e:	68 c7 2c 02 c0       	push   0xc0022cc7
c001ad73:	e8 01 66 ff ff       	call   c0011379 <KePanic(char const*)>
c001ad78:	83 c4 10             	add    esp,0x10
c001ad7b:	90                   	nop
c001ad7c:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001ad82:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001ad85:	74 11                	je     c001ad98 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001ad87:	83 ec 0c             	sub    esp,0xc
c001ad8a:	68 c7 2c 02 c0       	push   0xc0022cc7
c001ad8f:	e8 e5 65 ff ff       	call   c0011379 <KePanic(char const*)>
c001ad94:	83 c4 10             	add    esp,0x10
c001ad97:	90                   	nop
c001ad98:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001ad9b:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001ad9f:	7e 07                	jle    c001ada8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001ada1:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001ada5:	8d 76 00             	lea    esi,[esi+0x0]
c001ada8:	85 ff                	test   edi,edi
c001adaa:	7e 1c                	jle    c001adc8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001adac:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001adb3:	31 c0                	xor    eax,eax
c001adb5:	8d 76 00             	lea    esi,[esi+0x0]
c001adb8:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001adbb:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001adbe:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001adc1:	83 c0 04             	add    eax,0x4
c001adc4:	39 c1                	cmp    ecx,eax
c001adc6:	75 f0                	jne    c001adb8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001adc8:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001adcb:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001adce:	83 ec 04             	sub    esp,0x4
c001add1:	29 f8                	sub    eax,edi
c001add3:	c1 e0 02             	shl    eax,0x2
c001add6:	50                   	push   eax
c001add7:	8d 04 ba             	lea    eax,[edx+edi*4]
c001adda:	50                   	push   eax
c001addb:	52                   	push   edx
c001addc:	e8 ef 55 fe ff       	call   c00003d0 <memmove>
c001ade1:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ade4:	83 c4 10             	add    esp,0x10
c001ade7:	29 f8                	sub    eax,edi
c001ade9:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c001adec:	89 f8                	mov    eax,edi
c001adee:	5b                   	pop    ebx
c001adef:	5e                   	pop    esi
c001adf0:	5f                   	pop    edi
c001adf1:	c3                   	ret    

c001adf2 <PCI::open(int, int, void*)>:
c001adf2:	83 ec 18             	sub    esp,0x18
c001adf5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001adf9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001adfd:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ae03:	8b 10                	mov    edx,DWORD PTR [eax]
c001ae05:	50                   	push   eax
c001ae06:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001ae09:	31 c0                	xor    eax,eax
c001ae0b:	83 c4 1c             	add    esp,0x1c
c001ae0e:	c3                   	ret    
c001ae0f:	90                   	nop

c001ae10 <PCI::close(int, int, void*)>:
c001ae10:	31 c0                	xor    eax,eax
c001ae12:	c3                   	ret    
c001ae13:	90                   	nop

c001ae14 <PCI::PCI()>:
c001ae14:	83 ec 0c             	sub    esp,0xc
c001ae17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae1b:	83 ec 08             	sub    esp,0x8
c001ae1e:	68 e3 2c 02 c0       	push   0xc0022ce3
c001ae23:	50                   	push   eax
c001ae24:	e8 83 12 ff ff       	call   c000c0ac <Bus::Bus(char const*)>
c001ae29:	83 c4 10             	add    esp,0x10
c001ae2c:	ba 8c 2d 02 c0       	mov    edx,0xc0022d8c
c001ae31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae35:	89 10                	mov    DWORD PTR [eax],edx
c001ae37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae3b:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001ae45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae49:	a3 a0 a0 02 c0       	mov    ds:0xc002a0a0,eax
c001ae4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae52:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ae58:	0f b6 d0             	movzx  edx,al
c001ae5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae5f:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001ae66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae6a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ae70:	0f b6 d0             	movzx  edx,al
c001ae73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae77:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001ae7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae80:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ae86:	8d 50 01             	lea    edx,[eax+0x1]
c001ae89:	88 d1                	mov    cl,dl
c001ae8b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ae8f:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001ae95:	0f b6 d0             	movzx  edx,al
c001ae98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae9c:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001aea0:	83 c9 c0             	or     ecx,0xffffffc0
c001aea3:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001aea7:	90                   	nop
c001aea8:	83 c4 0c             	add    esp,0xc
c001aeab:	c3                   	ret    

c001aeac <PCI::readBAR8(unsigned int, int)>:
c001aeac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001aeb0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001aeb4:	f6 c2 01             	test   dl,0x1
c001aeb7:	74 07                	je     c001aec0 <PCI::readBAR8(unsigned int, int)+0x14>
c001aeb9:	83 e2 fc             	and    edx,0xfffffffc
c001aebc:	01 c2                	add    edx,eax
c001aebe:	ec                   	in     al,dx
c001aebf:	c3                   	ret    
c001aec0:	83 e2 f0             	and    edx,0xfffffff0
c001aec3:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001aec6:	c3                   	ret    
c001aec7:	90                   	nop

c001aec8 <PCI::readBAR16(unsigned int, int)>:
c001aec8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001aecc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001aed0:	f6 c2 01             	test   dl,0x1
c001aed3:	74 08                	je     c001aedd <PCI::readBAR16(unsigned int, int)+0x15>
c001aed5:	83 e2 fc             	and    edx,0xfffffffc
c001aed8:	01 c2                	add    edx,eax
c001aeda:	66 ed                	in     ax,dx
c001aedc:	c3                   	ret    
c001aedd:	83 e2 f0             	and    edx,0xfffffff0
c001aee0:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001aee4:	c3                   	ret    
c001aee5:	90                   	nop

c001aee6 <PCI::readBAR32(unsigned int, int)>:
c001aee6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001aeea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001aeee:	f6 c2 01             	test   dl,0x1
c001aef1:	74 07                	je     c001aefa <PCI::readBAR32(unsigned int, int)+0x14>
c001aef3:	83 e2 fc             	and    edx,0xfffffffc
c001aef6:	01 c2                	add    edx,eax
c001aef8:	ed                   	in     eax,dx
c001aef9:	c3                   	ret    
c001aefa:	83 e2 f0             	and    edx,0xfffffff0
c001aefd:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001af00:	c3                   	ret    
c001af01:	90                   	nop

c001af02 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001af02:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001af06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001af0a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001af0e:	f6 c2 01             	test   dl,0x1
c001af11:	74 07                	je     c001af1a <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001af13:	83 e2 fc             	and    edx,0xfffffffc
c001af16:	01 ca                	add    edx,ecx
c001af18:	ee                   	out    dx,al
c001af19:	c3                   	ret    
c001af1a:	83 e2 f0             	and    edx,0xfffffff0
c001af1d:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001af20:	c3                   	ret    
c001af21:	90                   	nop

c001af22 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001af22:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001af26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001af2a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001af2e:	f6 c2 01             	test   dl,0x1
c001af31:	74 08                	je     c001af3b <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001af33:	83 e2 fc             	and    edx,0xfffffffc
c001af36:	01 ca                	add    edx,ecx
c001af38:	66 ef                	out    dx,ax
c001af3a:	c3                   	ret    
c001af3b:	83 e2 f0             	and    edx,0xfffffff0
c001af3e:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001af42:	c3                   	ret    
c001af43:	90                   	nop

c001af44 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001af44:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001af48:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001af4c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001af50:	f6 c2 01             	test   dl,0x1
c001af53:	74 07                	je     c001af5c <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001af55:	83 e2 fc             	and    edx,0xfffffffc
c001af58:	01 ca                	add    edx,ecx
c001af5a:	ef                   	out    dx,eax
c001af5b:	c3                   	ret    
c001af5c:	83 e2 f0             	and    edx,0xfffffff0
c001af5f:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001af62:	c3                   	ret    
c001af63:	90                   	nop

c001af64 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001af64:	55                   	push   ebp
c001af65:	57                   	push   edi
c001af66:	56                   	push   esi
c001af67:	53                   	push   ebx
c001af68:	83 ec 0c             	sub    esp,0xc
c001af6b:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001af70:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001af74:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001af78:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001af7c:	83 fe 07             	cmp    esi,0x7
c001af7f:	76 10                	jbe    c001af91 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001af81:	83 ec 0c             	sub    esp,0xc
c001af84:	68 eb 2c 02 c0       	push   0xc0022ceb
c001af89:	e8 eb 63 ff ff       	call   c0011379 <KePanic(char const*)>
c001af8e:	83 c4 10             	add    esp,0x10
c001af91:	0f b6 db             	movzx  ebx,bl
c001af94:	83 fb 0f             	cmp    ebx,0xf
c001af97:	76 10                	jbe    c001afa9 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001af99:	83 ec 0c             	sub    esp,0xc
c001af9c:	68 1b 2d 02 c0       	push   0xc0022d1b
c001afa1:	e8 d3 63 ff ff       	call   c0011379 <KePanic(char const*)>
c001afa6:	83 c4 10             	add    esp,0x10
c001afa9:	8d 04 36             	lea    eax,[esi+esi*1]
c001afac:	ba f8 0c 00 00       	mov    edx,0xcf8
c001afb1:	83 c8 f0             	or     eax,0xfffffff0
c001afb4:	ee                   	out    dx,al
c001afb5:	ba fa 0c 00 00       	mov    edx,0xcfa
c001afba:	89 e8                	mov    eax,ebp
c001afbc:	ee                   	out    dx,al
c001afbd:	83 c4 0c             	add    esp,0xc
c001afc0:	89 d8                	mov    eax,ebx
c001afc2:	89 f9                	mov    ecx,edi
c001afc4:	c1 e0 08             	shl    eax,0x8
c001afc7:	0f b6 d9             	movzx  ebx,cl
c001afca:	83 e3 fc             	and    ebx,0xfffffffc
c001afcd:	09 d8                	or     eax,ebx
c001afcf:	5b                   	pop    ebx
c001afd0:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001afd5:	5e                   	pop    esi
c001afd6:	5f                   	pop    edi
c001afd7:	5d                   	pop    ebp
c001afd8:	c3                   	ret    
c001afd9:	90                   	nop

c001afda <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001afda:	57                   	push   edi
c001afdb:	56                   	push   esi
c001afdc:	53                   	push   ebx
c001afdd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001afe1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001afe5:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001afeb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001afef:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001aff3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001aff7:	83 ff 01             	cmp    edi,0x1
c001affa:	75 3f                	jne    c001b03b <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001affc:	89 de                	mov    esi,ebx
c001affe:	0f b6 c0             	movzx  eax,al
c001b001:	81 e6 fc 00 00 00    	and    esi,0xfc
c001b007:	c1 e0 10             	shl    eax,0x10
c001b00a:	0f b6 c9             	movzx  ecx,cl
c001b00d:	09 f0                	or     eax,esi
c001b00f:	c1 e1 08             	shl    ecx,0x8
c001b012:	0f b6 d2             	movzx  edx,dl
c001b015:	09 c8                	or     eax,ecx
c001b017:	c1 e2 0b             	shl    edx,0xb
c001b01a:	09 d0                	or     eax,edx
c001b01c:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b021:	0d 00 00 00 80       	or     eax,0x80000000
c001b026:	ef                   	out    dx,eax
c001b027:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b02c:	ed                   	in     eax,dx
c001b02d:	83 e3 02             	and    ebx,0x2
c001b030:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001b037:	d3 e8                	shr    eax,cl
c001b039:	eb 44                	jmp    c001b07f <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001b03b:	83 ff 02             	cmp    edi,0x2
c001b03e:	75 2d                	jne    c001b06d <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001b040:	83 ec 0c             	sub    esp,0xc
c001b043:	0f b6 c9             	movzx  ecx,cl
c001b046:	0f b6 d2             	movzx  edx,dl
c001b049:	0f b6 fb             	movzx  edi,bl
c001b04c:	0f b6 c0             	movzx  eax,al
c001b04f:	57                   	push   edi
c001b050:	51                   	push   ecx
c001b051:	52                   	push   edx
c001b052:	50                   	push   eax
c001b053:	56                   	push   esi
c001b054:	e8 0b ff ff ff       	call   c001af64 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b059:	89 c2                	mov    edx,eax
c001b05b:	ed                   	in     eax,dx
c001b05c:	83 e3 02             	and    ebx,0x2
c001b05f:	83 c4 20             	add    esp,0x20
c001b062:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001b069:	d3 e8                	shr    eax,cl
c001b06b:	eb 12                	jmp    c001b07f <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001b06d:	83 ec 0c             	sub    esp,0xc
c001b070:	68 4b 2d 02 c0       	push   0xc0022d4b
c001b075:	e8 ff 62 ff ff       	call   c0011379 <KePanic(char const*)>
c001b07a:	83 c4 10             	add    esp,0x10
c001b07d:	31 c0                	xor    eax,eax
c001b07f:	5b                   	pop    ebx
c001b080:	5e                   	pop    esi
c001b081:	5f                   	pop    edi
c001b082:	c3                   	ret    
c001b083:	90                   	nop

c001b084 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001b084:	83 ec 18             	sub    esp,0x18
c001b087:	6a 00                	push   0x0
c001b089:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b08e:	50                   	push   eax
c001b08f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b094:	50                   	push   eax
c001b095:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b09a:	50                   	push   eax
c001b09b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b09f:	e8 36 ff ff ff       	call   c001afda <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b0a4:	83 c4 2c             	add    esp,0x2c
c001b0a7:	c3                   	ret    

c001b0a8 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001b0a8:	83 ec 18             	sub    esp,0x18
c001b0ab:	6a 0e                	push   0xe
c001b0ad:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b0b2:	50                   	push   eax
c001b0b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b0b8:	50                   	push   eax
c001b0b9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b0be:	50                   	push   eax
c001b0bf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b0c3:	e8 12 ff ff ff       	call   c001afda <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b0c8:	83 c4 2c             	add    esp,0x2c
c001b0cb:	0f b6 c0             	movzx  eax,al
c001b0ce:	c3                   	ret    
c001b0cf:	90                   	nop

c001b0d0 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001b0d0:	55                   	push   ebp
c001b0d1:	57                   	push   edi
c001b0d2:	56                   	push   esi
c001b0d3:	53                   	push   ebx
c001b0d4:	83 ec 18             	sub    esp,0x18
c001b0d7:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001b0dc:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001b0e1:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001b0e6:	6a 0a                	push   0xa
c001b0e8:	56                   	push   esi
c001b0e9:	55                   	push   ebp
c001b0ea:	57                   	push   edi
c001b0eb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b0ef:	e8 e6 fe ff ff       	call   c001afda <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b0f4:	83 c4 14             	add    esp,0x14
c001b0f7:	89 c3                	mov    ebx,eax
c001b0f9:	6a 0a                	push   0xa
c001b0fb:	0f b6 db             	movzx  ebx,bl
c001b0fe:	56                   	push   esi
c001b0ff:	55                   	push   ebp
c001b100:	57                   	push   edi
c001b101:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b105:	e8 d0 fe ff ff       	call   c001afda <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b10a:	83 c4 2c             	add    esp,0x2c
c001b10d:	25 00 ff 00 00       	and    eax,0xff00
c001b112:	09 d8                	or     eax,ebx
c001b114:	5b                   	pop    ebx
c001b115:	5e                   	pop    esi
c001b116:	5f                   	pop    edi
c001b117:	5d                   	pop    ebp
c001b118:	c3                   	ret    
c001b119:	90                   	nop

c001b11a <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001b11a:	83 ec 18             	sub    esp,0x18
c001b11d:	6a 08                	push   0x8
c001b11f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b124:	50                   	push   eax
c001b125:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b12a:	50                   	push   eax
c001b12b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b130:	50                   	push   eax
c001b131:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b135:	e8 a0 fe ff ff       	call   c001afda <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b13a:	83 c4 2c             	add    esp,0x2c
c001b13d:	0f b6 c4             	movzx  eax,ah
c001b140:	c3                   	ret    
c001b141:	90                   	nop

c001b142 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001b142:	83 ec 18             	sub    esp,0x18
c001b145:	6a 08                	push   0x8
c001b147:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b14c:	50                   	push   eax
c001b14d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b152:	50                   	push   eax
c001b153:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b158:	50                   	push   eax
c001b159:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b15d:	e8 78 fe ff ff       	call   c001afda <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b162:	83 c4 2c             	add    esp,0x2c
c001b165:	c3                   	ret    

c001b166 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001b166:	83 ec 18             	sub    esp,0x18
c001b169:	6a 3c                	push   0x3c
c001b16b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b170:	50                   	push   eax
c001b171:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b176:	50                   	push   eax
c001b177:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b17c:	50                   	push   eax
c001b17d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b181:	e8 54 fe ff ff       	call   c001afda <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b186:	83 c4 2c             	add    esp,0x2c
c001b189:	c3                   	ret    

c001b18a <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001b18a:	83 ec 18             	sub    esp,0x18
c001b18d:	6a 18                	push   0x18
c001b18f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b194:	50                   	push   eax
c001b195:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b19a:	50                   	push   eax
c001b19b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b1a0:	50                   	push   eax
c001b1a1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b1a5:	e8 30 fe ff ff       	call   c001afda <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b1aa:	83 c4 2c             	add    esp,0x2c
c001b1ad:	0f b6 c4             	movzx  eax,ah
c001b1b0:	c3                   	ret    
c001b1b1:	90                   	nop

c001b1b2 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b1b2:	55                   	push   ebp
c001b1b3:	57                   	push   edi
c001b1b4:	56                   	push   esi
c001b1b5:	53                   	push   ebx
c001b1b6:	83 ec 28             	sub    esp,0x28
c001b1b9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001b1bd:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001b1c2:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001b1c7:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001b1cc:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001b1d3:	8d 43 12             	lea    eax,[ebx+0x12]
c001b1d6:	83 c3 10             	add    ebx,0x10
c001b1d9:	0f b6 c0             	movzx  eax,al
c001b1dc:	0f b6 db             	movzx  ebx,bl
c001b1df:	50                   	push   eax
c001b1e0:	51                   	push   ecx
c001b1e1:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001b1e5:	57                   	push   edi
c001b1e6:	55                   	push   ebp
c001b1e7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b1eb:	e8 ea fd ff ff       	call   c001afda <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b1f0:	83 c4 14             	add    esp,0x14
c001b1f3:	89 c6                	mov    esi,eax
c001b1f5:	53                   	push   ebx
c001b1f6:	c1 e6 10             	shl    esi,0x10
c001b1f9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b1fd:	51                   	push   ecx
c001b1fe:	57                   	push   edi
c001b1ff:	55                   	push   ebp
c001b200:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b204:	e8 d1 fd ff ff       	call   c001afda <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b209:	83 c4 3c             	add    esp,0x3c
c001b20c:	0f b7 c0             	movzx  eax,ax
c001b20f:	5b                   	pop    ebx
c001b210:	09 f0                	or     eax,esi
c001b212:	5e                   	pop    esi
c001b213:	5f                   	pop    edi
c001b214:	5d                   	pop    ebp
c001b215:	c3                   	ret    

c001b216 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001b216:	55                   	push   ebp
c001b217:	57                   	push   edi
c001b218:	56                   	push   esi
c001b219:	53                   	push   ebx
c001b21a:	83 ec 0c             	sub    esp,0xc
c001b21d:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001b221:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b225:	89 f5                	mov    ebp,esi
c001b227:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001b22d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b231:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b235:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b239:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b23d:	83 f9 01             	cmp    ecx,0x1
c001b240:	75 5d                	jne    c001b29f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001b242:	0f b6 c8             	movzx  ecx,al
c001b245:	0f b6 d2             	movzx  edx,dl
c001b248:	c1 e1 10             	shl    ecx,0x10
c001b24b:	c1 e2 0b             	shl    edx,0xb
c001b24e:	89 f0                	mov    eax,esi
c001b250:	25 fc 00 00 00       	and    eax,0xfc
c001b255:	09 c1                	or     ecx,eax
c001b257:	89 e8                	mov    eax,ebp
c001b259:	0f b6 c0             	movzx  eax,al
c001b25c:	c1 e0 08             	shl    eax,0x8
c001b25f:	09 c1                	or     ecx,eax
c001b261:	09 d1                	or     ecx,edx
c001b263:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b268:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001b26e:	89 c8                	mov    eax,ecx
c001b270:	ef                   	out    dx,eax
c001b271:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b276:	ed                   	in     eax,dx
c001b277:	0f b7 db             	movzx  ebx,bx
c001b27a:	83 e6 02             	and    esi,0x2
c001b27d:	74 0a                	je     c001b289 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001b27f:	0f b7 d0             	movzx  edx,ax
c001b282:	c1 e3 10             	shl    ebx,0x10
c001b285:	09 d3                	or     ebx,edx
c001b287:	eb 05                	jmp    c001b28e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001b289:	66 31 c0             	xor    ax,ax
c001b28c:	09 c3                	or     ebx,eax
c001b28e:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b293:	89 c8                	mov    eax,ecx
c001b295:	ef                   	out    dx,eax
c001b296:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b29b:	89 d8                	mov    eax,ebx
c001b29d:	eb 41                	jmp    c001b2e0 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001b29f:	83 f9 02             	cmp    ecx,0x2
c001b2a2:	75 45                	jne    c001b2e9 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001b2a4:	83 ec 0c             	sub    esp,0xc
c001b2a7:	0f b6 d2             	movzx  edx,dl
c001b2aa:	89 f1                	mov    ecx,esi
c001b2ac:	0f b6 c0             	movzx  eax,al
c001b2af:	0f b6 f1             	movzx  esi,cl
c001b2b2:	89 e9                	mov    ecx,ebp
c001b2b4:	56                   	push   esi
c001b2b5:	0f b6 c9             	movzx  ecx,cl
c001b2b8:	51                   	push   ecx
c001b2b9:	52                   	push   edx
c001b2ba:	50                   	push   eax
c001b2bb:	57                   	push   edi
c001b2bc:	e8 a3 fc ff ff       	call   c001af64 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b2c1:	89 c2                	mov    edx,eax
c001b2c3:	ed                   	in     eax,dx
c001b2c4:	83 c4 20             	add    esp,0x20
c001b2c7:	0f b7 db             	movzx  ebx,bx
c001b2ca:	f6 c2 02             	test   dl,0x2
c001b2cd:	74 0c                	je     c001b2db <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001b2cf:	0f b7 c8             	movzx  ecx,ax
c001b2d2:	89 d8                	mov    eax,ebx
c001b2d4:	c1 e0 10             	shl    eax,0x10
c001b2d7:	09 c8                	or     eax,ecx
c001b2d9:	eb 05                	jmp    c001b2e0 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001b2db:	66 31 c0             	xor    ax,ax
c001b2de:	09 d8                	or     eax,ebx
c001b2e0:	ef                   	out    dx,eax
c001b2e1:	83 c4 0c             	add    esp,0xc
c001b2e4:	5b                   	pop    ebx
c001b2e5:	5e                   	pop    esi
c001b2e6:	5f                   	pop    edi
c001b2e7:	5d                   	pop    ebp
c001b2e8:	c3                   	ret    
c001b2e9:	c7 44 24 20 4b 2d 02 c0 	mov    DWORD PTR [esp+0x20],0xc0022d4b
c001b2f1:	83 c4 0c             	add    esp,0xc
c001b2f4:	5b                   	pop    ebx
c001b2f5:	5e                   	pop    esi
c001b2f6:	5f                   	pop    edi
c001b2f7:	5d                   	pop    ebp
c001b2f8:	e9 7c 60 ff ff       	jmp    c0011379 <KePanic(char const*)>
c001b2fd:	90                   	nop

c001b2fe <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001b2fe:	55                   	push   ebp
c001b2ff:	57                   	push   edi
c001b300:	56                   	push   esi
c001b301:	53                   	push   ebx
c001b302:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001b308:	8b ac 24 84 01 00 00 	mov    ebp,DWORD PTR [esp+0x184]
c001b30f:	80 3d ac a0 02 c0 00 	cmp    BYTE PTR ds:0xc002a0ac,0x0
c001b316:	0f 85 bd 00 00 00    	jne    c001b3d9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001b31c:	83 ec 0c             	sub    esp,0xc
c001b31f:	68 14 01 00 00       	push   0x114
c001b324:	e8 8d c7 fe ff       	call   c0007ab6 <malloc>
c001b329:	83 c4 0c             	add    esp,0xc
c001b32c:	89 c3                	mov    ebx,eax
c001b32e:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c001b334:	68 51 2d 02 c0       	push   0xc0022d51
c001b339:	50                   	push   eax
c001b33a:	e8 91 05 ff ff       	call   c000b8d0 <File::File(char const*, Process*)>
c001b33f:	83 c4 10             	add    esp,0x10
c001b342:	85 db                	test   ebx,ebx
c001b344:	0f 84 67 02 00 00    	je     c001b5b1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b34a:	56                   	push   esi
c001b34b:	56                   	push   esi
c001b34c:	6a 01                	push   0x1
c001b34e:	53                   	push   ebx
c001b34f:	e8 9a 05 ff ff       	call   c000b8ee <File::open(FileOpenMode)>
c001b354:	83 c4 10             	add    esp,0x10
c001b357:	85 c0                	test   eax,eax
c001b359:	0f 85 52 02 00 00    	jne    c001b5b1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b35f:	52                   	push   edx
c001b360:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001b364:	50                   	push   eax
c001b365:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b369:	50                   	push   eax
c001b36a:	53                   	push   ebx
c001b36b:	e8 80 08 ff ff       	call   c000bbf0 <File::stat(unsigned long long*, bool*)>
c001b370:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b374:	40                   	inc    eax
c001b375:	89 04 24             	mov    DWORD PTR [esp],eax
c001b378:	e8 39 c7 fe ff       	call   c0007ab6 <malloc>
c001b37d:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001b381:	a3 a8 a0 02 c0       	mov    ds:0xc002a0a8,eax
c001b386:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001b38a:	59                   	pop    ecx
c001b38b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b38d:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001b391:	51                   	push   ecx
c001b392:	50                   	push   eax
c001b393:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b397:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b39b:	53                   	push   ebx
c001b39c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b39f:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001b3a3:	83 c4 20             	add    esp,0x20
c001b3a6:	89 c8                	mov    eax,ecx
c001b3a8:	99                   	cdq    
c001b3a9:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001b3ad:	0f 85 fe 01 00 00    	jne    c001b5b1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b3b3:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001b3b7:	0f 85 f4 01 00 00    	jne    c001b5b1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b3bd:	83 ec 0c             	sub    esp,0xc
c001b3c0:	53                   	push   ebx
c001b3c1:	e8 86 05 ff ff       	call   c000b94c <File::close()>
c001b3c6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b3ca:	c6 05 ac a0 02 c0 01 	mov    BYTE PTR ds:0xc002a0ac,0x1
c001b3d1:	a3 a4 a0 02 c0       	mov    ds:0xc002a0a4,eax
c001b3d6:	83 c4 10             	add    esp,0x10
c001b3d9:	a1 a4 a0 02 c0       	mov    eax,ds:0xc002a0a4
c001b3de:	8b 1d a8 a0 02 c0    	mov    ebx,DWORD PTR ds:0xc002a0a8
c001b3e4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b3e8:	31 f6                	xor    esi,esi
c001b3ea:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001b3f2:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001b3f9:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001b3fe:	31 c9                	xor    ecx,ecx
c001b400:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001b408:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001b40d:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001b415:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b419:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001b421:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b425:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001b429:	0f 8e 82 01 00 00    	jle    c001b5b1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b42f:	8a 04 33             	mov    al,BYTE PTR [ebx+esi*1]
c001b432:	d4 40                	aam    0x40
c001b434:	d5 39                	aad    0x39
c001b436:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001b43a:	8a 44 33 01          	mov    al,BYTE PTR [ebx+esi*1+0x1]
c001b43e:	d4 40                	aam    0x40
c001b440:	d5 39                	aad    0x39
c001b442:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b446:	8a 44 33 03          	mov    al,BYTE PTR [ebx+esi*1+0x3]
c001b44a:	d4 40                	aam    0x40
c001b44c:	d5 39                	aad    0x39
c001b44e:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b452:	8a 44 33 04          	mov    al,BYTE PTR [ebx+esi*1+0x4]
c001b456:	d4 40                	aam    0x40
c001b458:	d5 39                	aad    0x39
c001b45a:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b45e:	8a 44 33 06          	mov    al,BYTE PTR [ebx+esi*1+0x6]
c001b462:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001b466:	3c 56                	cmp    al,0x56
c001b468:	74 43                	je     c001b4ad <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1af>
c001b46a:	d4 40                	aam    0x40
c001b46c:	d5 39                	aad    0x39
c001b46e:	8d 48 d0             	lea    ecx,[eax-0x30]
c001b471:	8a 44 33 07          	mov    al,BYTE PTR [ebx+esi*1+0x7]
c001b475:	0f b6 c9             	movzx  ecx,cl
c001b478:	c1 e1 04             	shl    ecx,0x4
c001b47b:	d4 40                	aam    0x40
c001b47d:	d5 39                	aad    0x39
c001b47f:	83 e8 30             	sub    eax,0x30
c001b482:	0f b6 c0             	movzx  eax,al
c001b485:	09 c1                	or     ecx,eax
c001b487:	8a 44 33 08          	mov    al,BYTE PTR [ebx+esi*1+0x8]
c001b48b:	c1 e1 04             	shl    ecx,0x4
c001b48e:	d4 40                	aam    0x40
c001b490:	d5 39                	aad    0x39
c001b492:	83 e8 30             	sub    eax,0x30
c001b495:	0f b6 c0             	movzx  eax,al
c001b498:	09 c1                	or     ecx,eax
c001b49a:	8a 44 33 09          	mov    al,BYTE PTR [ebx+esi*1+0x9]
c001b49e:	c1 e1 04             	shl    ecx,0x4
c001b4a1:	d4 40                	aam    0x40
c001b4a3:	d5 39                	aad    0x39
c001b4a5:	83 e8 30             	sub    eax,0x30
c001b4a8:	0f b6 c0             	movzx  eax,al
c001b4ab:	09 c1                	or     ecx,eax
c001b4ad:	8a 44 33 0b          	mov    al,BYTE PTR [ebx+esi*1+0xb]
c001b4b1:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001b4b5:	3c 58                	cmp    al,0x58
c001b4b7:	74 47                	je     c001b500 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x202>
c001b4b9:	d4 40                	aam    0x40
c001b4bb:	d5 39                	aad    0x39
c001b4bd:	8d 50 d0             	lea    edx,[eax-0x30]
c001b4c0:	8a 44 33 0c          	mov    al,BYTE PTR [ebx+esi*1+0xc]
c001b4c4:	0f b6 d2             	movzx  edx,dl
c001b4c7:	c1 e2 04             	shl    edx,0x4
c001b4ca:	d4 40                	aam    0x40
c001b4cc:	d5 39                	aad    0x39
c001b4ce:	83 e8 30             	sub    eax,0x30
c001b4d1:	0f b6 c0             	movzx  eax,al
c001b4d4:	09 c2                	or     edx,eax
c001b4d6:	8a 44 33 0d          	mov    al,BYTE PTR [ebx+esi*1+0xd]
c001b4da:	c1 e2 04             	shl    edx,0x4
c001b4dd:	d4 40                	aam    0x40
c001b4df:	d5 39                	aad    0x39
c001b4e1:	83 e8 30             	sub    eax,0x30
c001b4e4:	0f b6 c0             	movzx  eax,al
c001b4e7:	09 c2                	or     edx,eax
c001b4e9:	8a 44 33 0e          	mov    al,BYTE PTR [ebx+esi*1+0xe]
c001b4ed:	c1 e2 04             	shl    edx,0x4
c001b4f0:	d4 40                	aam    0x40
c001b4f2:	d5 39                	aad    0x39
c001b4f4:	83 e8 30             	sub    eax,0x30
c001b4f7:	0f b6 c0             	movzx  eax,al
c001b4fa:	09 c2                	or     edx,eax
c001b4fc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b500:	83 c6 10             	add    esi,0x10
c001b503:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001b507:	0f be 14 33          	movsx  edx,BYTE PTR [ebx+esi*1]
c001b50b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b50f:	83 fa 0a             	cmp    edx,0xa
c001b512:	74 0b                	je     c001b51f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x221>
c001b514:	47                   	inc    edi
c001b515:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001b519:	75 19                	jne    c001b534 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x236>
c001b51b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c001b51f:	31 c0                	xor    eax,eax
c001b521:	83 7c 24 10 0a       	cmp    DWORD PTR [esp+0x10],0xa
c001b526:	0f 94 c0             	sete   al
c001b529:	01 c6                	add    esi,eax
c001b52b:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001b530:	75 0b                	jne    c001b53d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x23f>
c001b532:	eb 14                	jmp    c001b548 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x24a>
c001b534:	46                   	inc    esi
c001b535:	88 57 ff             	mov    BYTE PTR [edi-0x1],dl
c001b538:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001b53b:	eb ca                	jmp    c001b507 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c001b53d:	66 3b 4c 24 14       	cmp    cx,WORD PTR [esp+0x14]
c001b542:	0f 85 dd fe ff ff    	jne    c001b425 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b548:	80 7c 24 0b 58       	cmp    BYTE PTR [esp+0xb],0x58
c001b54d:	74 10                	je     c001b55f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x261>
c001b54f:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001b554:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001b559:	0f 85 c6 fe ff ff    	jne    c001b425 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b55f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b563:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b567:	83 e8 30             	sub    eax,0x30
c001b56a:	83 ef 30             	sub    edi,0x30
c001b56d:	c1 e0 04             	shl    eax,0x4
c001b570:	09 f8                	or     eax,edi
c001b572:	0f b6 c0             	movzx  eax,al
c001b575:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001b579:	0f 85 a6 fe ff ff    	jne    c001b425 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b57f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b583:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001b587:	83 e8 30             	sub    eax,0x30
c001b58a:	83 ef 30             	sub    edi,0x30
c001b58d:	c1 e0 04             	shl    eax,0x4
c001b590:	09 f8                	or     eax,edi
c001b592:	0f b6 c0             	movzx  eax,al
c001b595:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001b599:	0f 85 86 fe ff ff    	jne    c001b425 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b59f:	50                   	push   eax
c001b5a0:	50                   	push   eax
c001b5a1:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b5a5:	50                   	push   eax
c001b5a6:	55                   	push   ebp
c001b5a7:	e8 94 50 fe ff       	call   c0000640 <strcpy>
c001b5ac:	83 c4 10             	add    esp,0x10
c001b5af:	eb 06                	jmp    c001b5b7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b9>
c001b5b1:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001b5b5:	31 ed                	xor    ebp,ebp
c001b5b7:	81 c4 4c 01 00 00    	add    esp,0x14c
c001b5bd:	89 e8                	mov    eax,ebp
c001b5bf:	5b                   	pop    ebx
c001b5c0:	5e                   	pop    esi
c001b5c1:	5f                   	pop    edi
c001b5c2:	5d                   	pop    ebp
c001b5c3:	c3                   	ret    

c001b5c4 <PCI::checkBus(unsigned char)>:
c001b5c4:	56                   	push   esi
c001b5c5:	53                   	push   ebx
c001b5c6:	31 db                	xor    ebx,ebx
c001b5c8:	51                   	push   ecx
c001b5c9:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b5ce:	52                   	push   edx
c001b5cf:	53                   	push   ebx
c001b5d0:	43                   	inc    ebx
c001b5d1:	56                   	push   esi
c001b5d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b5d6:	e8 03 03 00 00       	call   c001b8de <PCI::checkDevice(unsigned char, unsigned char)>
c001b5db:	83 c4 10             	add    esp,0x10
c001b5de:	83 fb 20             	cmp    ebx,0x20
c001b5e1:	75 eb                	jne    c001b5ce <PCI::checkBus(unsigned char)+0xa>
c001b5e3:	58                   	pop    eax
c001b5e4:	5b                   	pop    ebx
c001b5e5:	5e                   	pop    esi
c001b5e6:	c3                   	ret    
c001b5e7:	90                   	nop

c001b5e8 <PCI::foundDevice(PCIDeviceInfo)>:
c001b5e8:	55                   	push   ebp
c001b5e9:	57                   	push   edi
c001b5ea:	56                   	push   esi
c001b5eb:	53                   	push   ebx
c001b5ec:	83 ec 1c             	sub    esp,0x1c
c001b5ef:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c001b5f4:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001b5f8:	3d ff ff 00 00       	cmp    eax,0xffff
c001b5fd:	0f 84 57 01 00 00    	je     c001b75a <PCI::foundDevice(PCIDeviceInfo)+0x172>
c001b603:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c001b608:	66 3d 06 04          	cmp    ax,0x406
c001b60c:	75 2c                	jne    c001b63a <PCI::foundDevice(PCIDeviceInfo)+0x52>
c001b60e:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001b613:	50                   	push   eax
c001b614:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001b619:	50                   	push   eax
c001b61a:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001b61f:	50                   	push   eax
c001b620:	53                   	push   ebx
c001b621:	e8 64 fb ff ff       	call   c001b18a <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001b626:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001b62a:	0f b6 c0             	movzx  eax,al
c001b62d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001b631:	83 c4 2c             	add    esp,0x2c
c001b634:	5b                   	pop    ebx
c001b635:	5e                   	pop    esi
c001b636:	5f                   	pop    edi
c001b637:	5d                   	pop    ebp
c001b638:	eb 8a                	jmp    c001b5c4 <PCI::checkBus(unsigned char)>
c001b63a:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001b63e:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c001b644:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001b648:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001b64c:	0f b6 7c 24 54       	movzx  edi,BYTE PTR [esp+0x54]
c001b651:	85 d2                	test   edx,edx
c001b653:	74 36                	je     c001b68b <PCI::foundDevice(PCIDeviceInfo)+0xa3>
c001b655:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001b658:	85 c9                	test   ecx,ecx
c001b65a:	74 2b                	je     c001b687 <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001b65c:	8b b1 18 01 00 00    	mov    esi,DWORD PTR [ecx+0x118]
c001b662:	31 ee                	xor    esi,ebp
c001b664:	81 e6 ff 00 ff ff    	and    esi,0xffff00ff
c001b66a:	75 1b                	jne    c001b687 <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001b66c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001b670:	39 b1 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],esi
c001b676:	75 0f                	jne    c001b687 <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001b678:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c001b67f:	39 f9                	cmp    ecx,edi
c001b681:	0f 84 d3 00 00 00    	je     c001b75a <PCI::foundDevice(PCIDeviceInfo)+0x172>
c001b687:	8b 12                	mov    edx,DWORD PTR [edx]
c001b689:	eb c6                	jmp    c001b651 <PCI::foundDevice(PCIDeviceInfo)+0x69>
c001b68b:	3d 01 06 00 00       	cmp    eax,0x601
c001b690:	75 19                	jne    c001b6ab <PCI::foundDevice(PCIDeviceInfo)+0xc3>
c001b692:	83 ec 0c             	sub    esp,0xc
c001b695:	68 64 01 00 00       	push   0x164
c001b69a:	e8 17 c4 fe ff       	call   c0007ab6 <malloc>
c001b69f:	89 c5                	mov    ebp,eax
c001b6a1:	89 04 24             	mov    DWORD PTR [esp],eax
c001b6a4:	e8 a1 0e 00 00       	call   c001c54a <SATABus::SATABus()>
c001b6a9:	eb 1e                	jmp    c001b6c9 <PCI::foundDevice(PCIDeviceInfo)+0xe1>
c001b6ab:	3d 01 01 00 00       	cmp    eax,0x101
c001b6b0:	75 62                	jne    c001b714 <PCI::foundDevice(PCIDeviceInfo)+0x12c>
c001b6b2:	83 ec 0c             	sub    esp,0xc
c001b6b5:	68 70 02 00 00       	push   0x270
c001b6ba:	e8 f7 c3 fe ff       	call   c0007ab6 <malloc>
c001b6bf:	89 c5                	mov    ebp,eax
c001b6c1:	89 04 24             	mov    DWORD PTR [esp],eax
c001b6c4:	e8 e5 02 00 00       	call   c001b9ae <IDE::IDE()>
c001b6c9:	5f                   	pop    edi
c001b6ca:	58                   	pop    eax
c001b6cb:	55                   	push   ebp
c001b6cc:	53                   	push   ebx
c001b6cd:	e8 78 10 ff ff       	call   c000c74a <Device::addChild(Device*)>
c001b6d2:	83 ec 1c             	sub    esp,0x1c
c001b6d5:	b9 09 00 00 00       	mov    ecx,0x9
c001b6da:	fc                   	cld    
c001b6db:	89 e7                	mov    edi,esp
c001b6dd:	8d 74 24 60          	lea    esi,[esp+0x60]
c001b6e1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b6e3:	55                   	push   ebp
c001b6e4:	e8 a7 0f ff ff       	call   c000c690 <Device::preOpenPCI(PCIDeviceInfo)>
c001b6e9:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001b6ec:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001b6f0:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001b6f8:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001b700:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001b708:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001b70b:	83 c4 4c             	add    esp,0x4c
c001b70e:	5b                   	pop    ebx
c001b70f:	5e                   	pop    esi
c001b710:	5f                   	pop    edi
c001b711:	5d                   	pop    ebp
c001b712:	ff e0                	jmp    eax
c001b714:	83 ec 0c             	sub    esp,0xc
c001b717:	68 58 01 00 00       	push   0x158
c001b71c:	e8 95 c3 fe ff       	call   c0007ab6 <malloc>
c001b721:	89 c5                	mov    ebp,eax
c001b723:	58                   	pop    eax
c001b724:	5a                   	pop    edx
c001b725:	68 6a 2d 02 c0       	push   0xc0022d6a
c001b72a:	55                   	push   ebp
c001b72b:	e8 b8 12 ff ff       	call   c000c9e8 <DriverlessDevice::DriverlessDevice(char const*)>
c001b730:	59                   	pop    ecx
c001b731:	5e                   	pop    esi
c001b732:	55                   	push   ebp
c001b733:	53                   	push   ebx
c001b734:	e8 11 10 ff ff       	call   c000c74a <Device::addChild(Device*)>
c001b739:	83 c4 10             	add    esp,0x10
c001b73c:	b9 09 00 00 00       	mov    ecx,0x9
c001b741:	fc                   	cld    
c001b742:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001b746:	89 fe                	mov    esi,edi
c001b748:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b74a:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c001b74e:	83 c4 1c             	add    esp,0x1c
c001b751:	5b                   	pop    ebx
c001b752:	5e                   	pop    esi
c001b753:	5f                   	pop    edi
c001b754:	5d                   	pop    ebp
c001b755:	e9 36 0f ff ff       	jmp    c000c690 <Device::preOpenPCI(PCIDeviceInfo)>
c001b75a:	83 c4 1c             	add    esp,0x1c
c001b75d:	5b                   	pop    ebx
c001b75e:	5e                   	pop    esi
c001b75f:	5f                   	pop    edi
c001b760:	5d                   	pop    ebp
c001b761:	c3                   	ret    

c001b762 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001b762:	55                   	push   ebp
c001b763:	57                   	push   edi
c001b764:	56                   	push   esi
c001b765:	53                   	push   ebx
c001b766:	83 ec 68             	sub    esp,0x68
c001b769:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001b76d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001b774:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b778:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b77f:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001b784:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001b788:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001b78f:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001b794:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b798:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001b79d:	6a 0c                	push   0xc
c001b79f:	57                   	push   edi
c001b7a0:	53                   	push   ebx
c001b7a1:	56                   	push   esi
c001b7a2:	55                   	push   ebp
c001b7a3:	e8 32 f8 ff ff       	call   c001afda <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b7a8:	83 c4 20             	add    esp,0x20
c001b7ab:	57                   	push   edi
c001b7ac:	53                   	push   ebx
c001b7ad:	56                   	push   esi
c001b7ae:	55                   	push   ebp
c001b7af:	e8 1c f9 ff ff       	call   c001b0d0 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001b7b4:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001b7b9:	57                   	push   edi
c001b7ba:	53                   	push   ebx
c001b7bb:	56                   	push   esi
c001b7bc:	55                   	push   ebp
c001b7bd:	e8 a4 f9 ff ff       	call   c001b166 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001b7c2:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001b7c6:	83 c4 14             	add    esp,0x14
c001b7c9:	6a 3c                	push   0x3c
c001b7cb:	57                   	push   edi
c001b7cc:	53                   	push   ebx
c001b7cd:	56                   	push   esi
c001b7ce:	55                   	push   ebp
c001b7cf:	e8 06 f8 ff ff       	call   c001afda <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b7d4:	0f b6 c4             	movzx  eax,ah
c001b7d7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001b7db:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001b7df:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001b7e3:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001b7e8:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001b7ee:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001b7f4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001b7f8:	83 c4 20             	add    esp,0x20
c001b7fb:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001b800:	74 30                	je     c001b832 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001b802:	31 c0                	xor    eax,eax
c001b804:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001b808:	7e 28                	jle    c001b832 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001b80a:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001b812:	39 cb                	cmp    ebx,ecx
c001b814:	75 19                	jne    c001b82f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001b816:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001b81e:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001b822:	75 0b                	jne    c001b82f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001b824:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001b82b:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001b82f:	40                   	inc    eax
c001b830:	eb d2                	jmp    c001b804 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001b832:	31 d2                	xor    edx,edx
c001b834:	83 ec 0c             	sub    esp,0xc
c001b837:	57                   	push   edi
c001b838:	53                   	push   ebx
c001b839:	56                   	push   esi
c001b83a:	52                   	push   edx
c001b83b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001b83f:	55                   	push   ebp
c001b840:	e8 6d f9 ff ff       	call   c001b1b2 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b845:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001b849:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001b84d:	42                   	inc    edx
c001b84e:	83 c4 20             	add    esp,0x20
c001b851:	83 fa 06             	cmp    edx,0x6
c001b854:	75 de                	jne    c001b834 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001b856:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b85a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b85e:	c1 e2 08             	shl    edx,0x8
c001b861:	83 ec 0c             	sub    esp,0xc
c001b864:	0f b6 c4             	movzx  eax,ah
c001b867:	09 d0                	or     eax,edx
c001b869:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001b86e:	6a 02                	push   0x2
c001b870:	57                   	push   edi
c001b871:	53                   	push   ebx
c001b872:	56                   	push   esi
c001b873:	55                   	push   ebp
c001b874:	e8 61 f7 ff ff       	call   c001afda <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b879:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001b87e:	83 c4 20             	add    esp,0x20
c001b881:	57                   	push   edi
c001b882:	53                   	push   ebx
c001b883:	56                   	push   esi
c001b884:	55                   	push   ebp
c001b885:	e8 90 f8 ff ff       	call   c001b11a <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001b88a:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001b88e:	57                   	push   edi
c001b88f:	53                   	push   ebx
c001b890:	56                   	push   esi
c001b891:	55                   	push   ebp
c001b892:	e8 ed f7 ff ff       	call   c001b084 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b897:	b9 09 00 00 00       	mov    ecx,0x9
c001b89c:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001b8a1:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001b8a5:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001b8a9:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001b8ad:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001b8b1:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001b8b5:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001b8b9:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001b8bd:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001b8c1:	83 ec 0c             	sub    esp,0xc
c001b8c4:	fc                   	cld    
c001b8c5:	89 e7                	mov    edi,esp
c001b8c7:	8d 74 24 58          	lea    esi,[esp+0x58]
c001b8cb:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b8cd:	55                   	push   ebp
c001b8ce:	e8 15 fd ff ff       	call   c001b5e8 <PCI::foundDevice(PCIDeviceInfo)>
c001b8d3:	81 c4 8c 00 00 00    	add    esp,0x8c
c001b8d9:	5b                   	pop    ebx
c001b8da:	5e                   	pop    esi
c001b8db:	5f                   	pop    edi
c001b8dc:	5d                   	pop    ebp
c001b8dd:	c3                   	ret    

c001b8de <PCI::checkDevice(unsigned char, unsigned char)>:
c001b8de:	55                   	push   ebp
c001b8df:	57                   	push   edi
c001b8e0:	56                   	push   esi
c001b8e1:	53                   	push   ebx
c001b8e2:	83 ec 0c             	sub    esp,0xc
c001b8e5:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001b8e9:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001b8ee:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001b8f3:	6a 00                	push   0x0
c001b8f5:	56                   	push   esi
c001b8f6:	57                   	push   edi
c001b8f7:	55                   	push   ebp
c001b8f8:	e8 87 f7 ff ff       	call   c001b084 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b8fd:	6a 00                	push   0x0
c001b8ff:	56                   	push   esi
c001b900:	57                   	push   edi
c001b901:	55                   	push   ebp
c001b902:	e8 5b fe ff ff       	call   c001b762 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b907:	83 c4 20             	add    esp,0x20
c001b90a:	6a 00                	push   0x0
c001b90c:	56                   	push   esi
c001b90d:	57                   	push   edi
c001b90e:	55                   	push   ebp
c001b90f:	e8 94 f7 ff ff       	call   c001b0a8 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b914:	83 c4 10             	add    esp,0x10
c001b917:	a8 80                	test   al,0x80
c001b919:	74 2d                	je     c001b948 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001b91b:	bb 01 00 00 00       	mov    ebx,0x1
c001b920:	53                   	push   ebx
c001b921:	56                   	push   esi
c001b922:	57                   	push   edi
c001b923:	55                   	push   ebp
c001b924:	e8 5b f7 ff ff       	call   c001b084 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b929:	83 c4 10             	add    esp,0x10
c001b92c:	0f b7 c0             	movzx  eax,ax
c001b92f:	3d ff ff 00 00       	cmp    eax,0xffff
c001b934:	74 0c                	je     c001b942 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001b936:	53                   	push   ebx
c001b937:	56                   	push   esi
c001b938:	57                   	push   edi
c001b939:	55                   	push   ebp
c001b93a:	e8 23 fe ff ff       	call   c001b762 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b93f:	83 c4 10             	add    esp,0x10
c001b942:	43                   	inc    ebx
c001b943:	83 fb 08             	cmp    ebx,0x8
c001b946:	75 d8                	jne    c001b920 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001b948:	83 c4 0c             	add    esp,0xc
c001b94b:	5b                   	pop    ebx
c001b94c:	5e                   	pop    esi
c001b94d:	5f                   	pop    edi
c001b94e:	5d                   	pop    ebp
c001b94f:	c3                   	ret    

c001b950 <PCI::detect()>:
c001b950:	56                   	push   esi
c001b951:	53                   	push   ebx
c001b952:	53                   	push   ebx
c001b953:	31 db                	xor    ebx,ebx
c001b955:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b959:	6a 00                	push   0x0
c001b95b:	6a 00                	push   0x0
c001b95d:	6a 00                	push   0x0
c001b95f:	56                   	push   esi
c001b960:	e8 43 f7 ff ff       	call   c001b0a8 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b965:	83 c4 10             	add    esp,0x10
c001b968:	a8 80                	test   al,0x80
c001b96a:	75 21                	jne    c001b98d <PCI::detect()+0x3d>
c001b96c:	51                   	push   ecx
c001b96d:	51                   	push   ecx
c001b96e:	6a 00                	push   0x0
c001b970:	56                   	push   esi
c001b971:	e8 4e fc ff ff       	call   c001b5c4 <PCI::checkBus(unsigned char)>
c001b976:	83 c4 10             	add    esp,0x10
c001b979:	eb 2a                	jmp    c001b9a5 <PCI::detect()+0x55>
c001b97b:	52                   	push   edx
c001b97c:	52                   	push   edx
c001b97d:	53                   	push   ebx
c001b97e:	43                   	inc    ebx
c001b97f:	56                   	push   esi
c001b980:	e8 3f fc ff ff       	call   c001b5c4 <PCI::checkBus(unsigned char)>
c001b985:	83 c4 10             	add    esp,0x10
c001b988:	83 fb 08             	cmp    ebx,0x8
c001b98b:	74 18                	je     c001b9a5 <PCI::detect()+0x55>
c001b98d:	53                   	push   ebx
c001b98e:	6a 00                	push   0x0
c001b990:	6a 00                	push   0x0
c001b992:	56                   	push   esi
c001b993:	e8 ec f6 ff ff       	call   c001b084 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b998:	83 c4 10             	add    esp,0x10
c001b99b:	0f b7 c0             	movzx  eax,ax
c001b99e:	3d ff ff 00 00       	cmp    eax,0xffff
c001b9a3:	74 d6                	je     c001b97b <PCI::detect()+0x2b>
c001b9a5:	58                   	pop    eax
c001b9a6:	5b                   	pop    ebx
c001b9a7:	5e                   	pop    esi
c001b9a8:	c3                   	ret    
c001b9a9:	90                   	nop

c001b9aa <IDE::close(int, int, void*)>:
c001b9aa:	83 c8 ff             	or     eax,0xffffffff
c001b9ad:	c3                   	ret    

c001b9ae <IDE::IDE()>:
c001b9ae:	83 ec 0c             	sub    esp,0xc
c001b9b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9b5:	83 ec 08             	sub    esp,0x8
c001b9b8:	68 b0 2d 02 c0       	push   0xc0022db0
c001b9bd:	50                   	push   eax
c001b9be:	e8 c9 10 ff ff       	call   c000ca8c <HardDiskController::HardDiskController(char const*)>
c001b9c3:	83 c4 10             	add    esp,0x10
c001b9c6:	ba 40 2e 02 c0       	mov    edx,0xc0022e40
c001b9cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9cf:	89 10                	mov    DWORD PTR [eax],edx
c001b9d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9d5:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001b9dc:	90                   	nop
c001b9dd:	83 c4 0c             	add    esp,0xc
c001b9e0:	c3                   	ret    
c001b9e1:	90                   	nop

c001b9e2 <IDE::prepareInterrupt(unsigned char)>:
c001b9e2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b9e7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b9eb:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001b9f3:	c3                   	ret    

c001b9f4 <selectDrive(unsigned char, unsigned char)>:
c001b9f4:	c3                   	ret    
c001b9f5:	90                   	nop

c001b9f6 <IDE::getBase(unsigned char)>:
c001b9f6:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001b9fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b9ff:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001ba07:	c3                   	ret    

c001ba08 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001ba08:	55                   	push   ebp
c001ba09:	57                   	push   edi
c001ba0a:	56                   	push   esi
c001ba0b:	53                   	push   ebx
c001ba0c:	83 ec 1c             	sub    esp,0x1c
c001ba0f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001ba13:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ba17:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001ba1a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ba1e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ba22:	80 f9 03             	cmp    cl,0x3
c001ba25:	77 4f                	ja     c001ba76 <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001ba27:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ba2b:	0f b6 fa             	movzx  edi,dl
c001ba2e:	0f b6 db             	movzx  ebx,bl
c001ba31:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001ba34:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001ba39:	80 ca 80             	or     dl,0x80
c001ba3c:	52                   	push   edx
c001ba3d:	6a 0c                	push   0xc
c001ba3f:	57                   	push   edi
c001ba40:	56                   	push   esi
c001ba41:	e8 c2 ff ff ff       	call   c001ba08 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ba46:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001ba4b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ba4f:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001ba53:	ee                   	out    dx,al
c001ba54:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001ba59:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c001ba5d:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001ba61:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001ba65:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001ba6d:	83 c4 2c             	add    esp,0x2c
c001ba70:	5b                   	pop    ebx
c001ba71:	5e                   	pop    esi
c001ba72:	5f                   	pop    edi
c001ba73:	5d                   	pop    ebp
c001ba74:	eb 92                	jmp    c001ba08 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ba76:	0f b6 cb             	movzx  ecx,bl
c001ba79:	83 f9 07             	cmp    ecx,0x7
c001ba7c:	77 12                	ja     c001ba90 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001ba7e:	0f b6 d2             	movzx  edx,dl
c001ba81:	0f b6 db             	movzx  ebx,bl
c001ba84:	66 8b 94 d6 5a 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15a]
c001ba8c:	01 da                	add    edx,ebx
c001ba8e:	eb 2f                	jmp    c001babf <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001ba90:	83 f9 0d             	cmp    ecx,0xd
c001ba93:	77 13                	ja     c001baa8 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001ba95:	0f b6 d2             	movzx  edx,dl
c001ba98:	0f b6 db             	movzx  ebx,bl
c001ba9b:	8b 94 d6 5c 01 00 00 	mov    edx,DWORD PTR [esi+edx*8+0x15c]
c001baa2:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001baa6:	eb 17                	jmp    c001babf <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001baa8:	83 f9 15             	cmp    ecx,0x15
c001baab:	77 13                	ja     c001bac0 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001baad:	0f b6 d2             	movzx  edx,dl
c001bab0:	0f b6 db             	movzx  ebx,bl
c001bab3:	66 8b 94 d6 5e 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15e]
c001babb:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001babf:	ee                   	out    dx,al
c001bac0:	83 c4 1c             	add    esp,0x1c
c001bac3:	5b                   	pop    ebx
c001bac4:	5e                   	pop    esi
c001bac5:	5f                   	pop    edi
c001bac6:	5d                   	pop    ebp
c001bac7:	c3                   	ret    

c001bac8 <IDE::read(unsigned char, unsigned char)>:
c001bac8:	55                   	push   ebp
c001bac9:	57                   	push   edi
c001baca:	56                   	push   esi
c001bacb:	53                   	push   ebx
c001bacc:	83 ec 1c             	sub    esp,0x1c
c001bacf:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001bad3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001bad7:	8d 43 f8             	lea    eax,[ebx-0x8]
c001bada:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001bade:	3c 03                	cmp    al,0x3
c001bae0:	77 40                	ja     c001bb22 <IDE::read(unsigned char, unsigned char)+0x5a>
c001bae2:	0f b6 f9             	movzx  edi,cl
c001bae5:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001bae8:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001baed:	0c 80                	or     al,0x80
c001baef:	50                   	push   eax
c001baf0:	6a 0c                	push   0xc
c001baf2:	57                   	push   edi
c001baf3:	56                   	push   esi
c001baf4:	e8 0f ff ff ff       	call   c001ba08 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001baf9:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001bafe:	0f b6 d3             	movzx  edx,bl
c001bb01:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001bb05:	ec                   	in     al,dx
c001bb06:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001bb0a:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001bb0f:	52                   	push   edx
c001bb10:	6a 0c                	push   0xc
c001bb12:	57                   	push   edi
c001bb13:	56                   	push   esi
c001bb14:	e8 ef fe ff ff       	call   c001ba08 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bb19:	83 c4 20             	add    esp,0x20
c001bb1c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001bb20:	eb 4c                	jmp    c001bb6e <IDE::read(unsigned char, unsigned char)+0xa6>
c001bb22:	0f b6 d3             	movzx  edx,bl
c001bb25:	83 fa 07             	cmp    edx,0x7
c001bb28:	77 12                	ja     c001bb3c <IDE::read(unsigned char, unsigned char)+0x74>
c001bb2a:	0f b6 c9             	movzx  ecx,cl
c001bb2d:	0f b6 d3             	movzx  edx,bl
c001bb30:	66 8b 84 ce 5a 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15a]
c001bb38:	01 c2                	add    edx,eax
c001bb3a:	eb 31                	jmp    c001bb6d <IDE::read(unsigned char, unsigned char)+0xa5>
c001bb3c:	83 fa 0d             	cmp    edx,0xd
c001bb3f:	77 13                	ja     c001bb54 <IDE::read(unsigned char, unsigned char)+0x8c>
c001bb41:	0f b6 c9             	movzx  ecx,cl
c001bb44:	0f b6 d3             	movzx  edx,bl
c001bb47:	8b 84 ce 5c 01 00 00 	mov    eax,DWORD PTR [esi+ecx*8+0x15c]
c001bb4e:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001bb52:	eb 19                	jmp    c001bb6d <IDE::read(unsigned char, unsigned char)+0xa5>
c001bb54:	31 c0                	xor    eax,eax
c001bb56:	83 fa 15             	cmp    edx,0x15
c001bb59:	77 13                	ja     c001bb6e <IDE::read(unsigned char, unsigned char)+0xa6>
c001bb5b:	0f b6 c9             	movzx  ecx,cl
c001bb5e:	0f b6 d3             	movzx  edx,bl
c001bb61:	66 8b 84 ce 5e 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15e]
c001bb69:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001bb6d:	ec                   	in     al,dx
c001bb6e:	83 c4 1c             	add    esp,0x1c
c001bb71:	5b                   	pop    ebx
c001bb72:	5e                   	pop    esi
c001bb73:	5f                   	pop    edi
c001bb74:	5d                   	pop    ebp
c001bb75:	c3                   	ret    

c001bb76 <IDE::waitInterrupt(unsigned char)>:
c001bb76:	55                   	push   ebp
c001bb77:	57                   	push   edi
c001bb78:	56                   	push   esi
c001bb79:	53                   	push   ebx
c001bb7a:	31 db                	xor    ebx,ebx
c001bb7c:	83 ec 0c             	sub    esp,0xc
c001bb7f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001bb83:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001bb88:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001bb90:	89 e8                	mov    eax,ebp
c001bb92:	84 c0                	test   al,al
c001bb94:	75 30                	jne    c001bbc6 <IDE::waitInterrupt(unsigned char)+0x50>
c001bb96:	50                   	push   eax
c001bb97:	6a 0c                	push   0xc
c001bb99:	56                   	push   esi
c001bb9a:	57                   	push   edi
c001bb9b:	e8 28 ff ff ff       	call   c001bac8 <IDE::read(unsigned char, unsigned char)>
c001bba0:	83 c4 10             	add    esp,0x10
c001bba3:	a8 01                	test   al,0x1
c001bba5:	75 27                	jne    c001bbce <IDE::waitInterrupt(unsigned char)+0x58>
c001bba7:	f6 c3 04             	test   bl,0x4
c001bbaa:	75 12                	jne    c001bbbe <IDE::waitInterrupt(unsigned char)+0x48>
c001bbac:	83 fb 32             	cmp    ebx,0x32
c001bbaf:	7e 0d                	jle    c001bbbe <IDE::waitInterrupt(unsigned char)+0x48>
c001bbb1:	83 ec 0c             	sub    esp,0xc
c001bbb4:	6a 64                	push   0x64
c001bbb6:	e8 b1 a4 ff ff       	call   c001606c <milliTenthSleep(unsigned int)>
c001bbbb:	83 c4 10             	add    esp,0x10
c001bbbe:	83 fb 3c             	cmp    ebx,0x3c
c001bbc1:	74 0b                	je     c001bbce <IDE::waitInterrupt(unsigned char)+0x58>
c001bbc3:	43                   	inc    ebx
c001bbc4:	eb c2                	jmp    c001bb88 <IDE::waitInterrupt(unsigned char)+0x12>
c001bbc6:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001bbce:	83 c4 0c             	add    esp,0xc
c001bbd1:	89 e8                	mov    eax,ebp
c001bbd3:	5b                   	pop    ebx
c001bbd4:	5e                   	pop    esi
c001bbd5:	5f                   	pop    edi
c001bbd6:	5d                   	pop    ebp
c001bbd7:	c3                   	ret    

c001bbd8 <ideChannel0IRQHandler(regs*, void*)>:
c001bbd8:	83 ec 10             	sub    esp,0x10
c001bbdb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bbdf:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001bbe6:	6a 07                	push   0x7
c001bbe8:	6a 00                	push   0x0
c001bbea:	50                   	push   eax
c001bbeb:	e8 d8 fe ff ff       	call   c001bac8 <IDE::read(unsigned char, unsigned char)>
c001bbf0:	83 c4 1c             	add    esp,0x1c
c001bbf3:	c3                   	ret    

c001bbf4 <ideChannel1IRQHandler(regs*, void*)>:
c001bbf4:	83 ec 10             	sub    esp,0x10
c001bbf7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bbfb:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001bc02:	6a 07                	push   0x7
c001bc04:	6a 01                	push   0x1
c001bc06:	50                   	push   eax
c001bc07:	e8 bc fe ff ff       	call   c001bac8 <IDE::read(unsigned char, unsigned char)>
c001bc0c:	83 c4 1c             	add    esp,0x1c
c001bc0f:	c3                   	ret    

c001bc10 <IDE::enableIRQs(unsigned char, bool)>:
c001bc10:	57                   	push   edi
c001bc11:	b8 02 00 00 00       	mov    eax,0x2
c001bc16:	56                   	push   esi
c001bc17:	53                   	push   ebx
c001bc18:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bc1c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001bc20:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001bc25:	74 02                	je     c001bc29 <IDE::enableIRQs(unsigned char, bool)+0x19>
c001bc27:	31 c0                	xor    eax,eax
c001bc29:	0f b6 db             	movzx  ebx,bl
c001bc2c:	bf 04 00 00 00       	mov    edi,0x4
c001bc31:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001bc38:	50                   	push   eax
c001bc39:	6a 0c                	push   0xc
c001bc3b:	53                   	push   ebx
c001bc3c:	56                   	push   esi
c001bc3d:	e8 c6 fd ff ff       	call   c001ba08 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bc42:	83 c4 10             	add    esp,0x10
c001bc45:	50                   	push   eax
c001bc46:	6a 0c                	push   0xc
c001bc48:	53                   	push   ebx
c001bc49:	56                   	push   esi
c001bc4a:	e8 79 fe ff ff       	call   c001bac8 <IDE::read(unsigned char, unsigned char)>
c001bc4f:	83 c4 10             	add    esp,0x10
c001bc52:	4f                   	dec    edi
c001bc53:	75 f0                	jne    c001bc45 <IDE::enableIRQs(unsigned char, bool)+0x35>
c001bc55:	5b                   	pop    ebx
c001bc56:	5e                   	pop    esi
c001bc57:	5f                   	pop    edi
c001bc58:	c3                   	ret    
c001bc59:	90                   	nop

c001bc5a <IDE::open(int, int, void*)>:
c001bc5a:	55                   	push   ebp
c001bc5b:	57                   	push   edi
c001bc5c:	56                   	push   esi
c001bc5d:	53                   	push   ebx
c001bc5e:	83 ec 1c             	sub    esp,0x1c
c001bc61:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001bc65:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001bc6e:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001bc77:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001bc7e:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001bc85:	0f 85 de 02 00 00    	jne    c001bf69 <IDE::open(int, int, void*)+0x30f>
c001bc8b:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001bc91:	88 04 24             	mov    BYTE PTR [esp],al
c001bc94:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001bc97:	83 e0 7f             	and    eax,0x7f
c001bc9a:	83 f8 05             	cmp    eax,0x5
c001bc9d:	74 05                	je     c001bca4 <IDE::open(int, int, void*)+0x4a>
c001bc9f:	83 f8 0f             	cmp    eax,0xf
c001bca2:	75 32                	jne    c001bcd6 <IDE::open(int, int, void*)+0x7c>
c001bca4:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001bcaa:	83 e0 fc             	and    eax,0xfffffffc
c001bcad:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001bcb4:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001bcba:	83 e0 fc             	and    eax,0xfffffffc
c001bcbd:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001bcc4:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001bcca:	83 e0 fc             	and    eax,0xfffffffc
c001bccd:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001bcd4:	eb 14                	jmp    c001bcea <IDE::open(int, int, void*)+0x90>
c001bcd6:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001bce0:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001bcea:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001bcf1:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001bcf8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bcfc:	89 c6                	mov    esi,eax
c001bcfe:	bf f8 0c 00 00       	mov    edi,0xcf8
c001bd03:	c1 e6 10             	shl    esi,0x10
c001bd06:	89 e8                	mov    eax,ebp
c001bd08:	89 fa                	mov    edx,edi
c001bd0a:	c1 e0 0b             	shl    eax,0xb
c001bd0d:	09 f0                	or     eax,esi
c001bd0f:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001bd16:	c1 e6 08             	shl    esi,0x8
c001bd19:	09 c6                	or     esi,eax
c001bd1b:	89 f0                	mov    eax,esi
c001bd1d:	0d 08 00 00 80       	or     eax,0x80000008
c001bd22:	ef                   	out    dx,eax
c001bd23:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001bd28:	89 ca                	mov    edx,ecx
c001bd2a:	ed                   	in     eax,dx
c001bd2b:	c1 e8 10             	shr    eax,0x10
c001bd2e:	3d ff ff 00 00       	cmp    eax,0xffff
c001bd33:	0f 84 f9 00 00 00    	je     c001be32 <IDE::open(int, int, void*)+0x1d8>
c001bd39:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001bd3f:	89 fa                	mov    edx,edi
c001bd41:	89 f0                	mov    eax,esi
c001bd43:	ef                   	out    dx,eax
c001bd44:	b0 fe                	mov    al,0xfe
c001bd46:	89 ca                	mov    edx,ecx
c001bd48:	ee                   	out    dx,al
c001bd49:	89 f0                	mov    eax,esi
c001bd4b:	89 fa                	mov    edx,edi
c001bd4d:	ef                   	out    dx,eax
c001bd4e:	89 ca                	mov    edx,ecx
c001bd50:	ed                   	in     eax,dx
c001bd51:	3c fe                	cmp    al,0xfe
c001bd53:	0f 85 a9 00 00 00    	jne    c001be02 <IDE::open(int, int, void*)+0x1a8>
c001bd59:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c001bd5f:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001bd66:	74 33                	je     c001bd9b <IDE::open(int, int, void*)+0x141>
c001bd68:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001bd6e:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001bd72:	40                   	inc    eax
c001bd73:	83 ec 0c             	sub    esp,0xc
c001bd76:	0f b6 c0             	movzx  eax,al
c001bd79:	50                   	push   eax
c001bd7a:	55                   	push   ebp
c001bd7b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bd7f:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001bd85:	51                   	push   ecx
c001bd86:	e8 31 39 ff ff       	call   c000f6bc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001bd8b:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001bd90:	83 c4 1c             	add    esp,0x1c
c001bd93:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001bd99:	eb 0a                	jmp    c001bda5 <IDE::open(int, int, void*)+0x14b>
c001bd9b:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001bda5:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001bdac:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001bdb3:	c1 e1 10             	shl    ecx,0x10
c001bdb6:	c1 e0 08             	shl    eax,0x8
c001bdb9:	bf f8 0c 00 00       	mov    edi,0xcf8
c001bdbe:	09 c1                	or     ecx,eax
c001bdc0:	89 fa                	mov    edx,edi
c001bdc2:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001bdc9:	c1 e0 0b             	shl    eax,0xb
c001bdcc:	09 c1                	or     ecx,eax
c001bdce:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001bdd4:	89 c8                	mov    eax,ecx
c001bdd6:	ef                   	out    dx,eax
c001bdd7:	be fc 0c 00 00       	mov    esi,0xcfc
c001bddc:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001bde2:	89 f2                	mov    edx,esi
c001bde4:	ee                   	out    dx,al
c001bde5:	89 c8                	mov    eax,ecx
c001bde7:	89 fa                	mov    edx,edi
c001bde9:	ef                   	out    dx,eax
c001bdea:	89 f2                	mov    edx,esi
c001bdec:	ed                   	in     eax,dx
c001bded:	0f b6 c0             	movzx  eax,al
c001bdf0:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001bdf6:	74 4a                	je     c001be42 <IDE::open(int, int, void*)+0x1e8>
c001bdf8:	83 ec 0c             	sub    esp,0xc
c001bdfb:	68 c8 2d 02 c0       	push   0xc0022dc8
c001be00:	eb 38                	jmp    c001be3a <IDE::open(int, int, void*)+0x1e0>
c001be02:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001be0b:	75 1b                	jne    c001be28 <IDE::open(int, int, void*)+0x1ce>
c001be0d:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c001be11:	3d 80 00 00 00       	cmp    eax,0x80
c001be16:	74 07                	je     c001be1f <IDE::open(int, int, void*)+0x1c5>
c001be18:	3d 8a 00 00 00       	cmp    eax,0x8a
c001be1d:	75 09                	jne    c001be28 <IDE::open(int, int, void*)+0x1ce>
c001be1f:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001be26:	eb 1a                	jmp    c001be42 <IDE::open(int, int, void*)+0x1e8>
c001be28:	83 ec 0c             	sub    esp,0xc
c001be2b:	68 d0 2d 02 c0       	push   0xc0022dd0
c001be30:	eb 08                	jmp    c001be3a <IDE::open(int, int, void*)+0x1e0>
c001be32:	83 ec 0c             	sub    esp,0xc
c001be35:	68 01 2e 02 c0       	push   0xc0022e01
c001be3a:	e8 3a 55 ff ff       	call   c0011379 <KePanic(char const*)>
c001be3f:	83 c4 10             	add    esp,0x10
c001be42:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001be49:	74 1a                	je     c001be65 <IDE::open(int, int, void*)+0x20b>
c001be4b:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001be51:	83 e0 fc             	and    eax,0xfffffffc
c001be54:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001be5b:	83 c0 08             	add    eax,0x8
c001be5e:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001be65:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001be6b:	89 c2                	mov    edx,eax
c001be6d:	83 e2 0f             	and    edx,0xf
c001be70:	83 fa 08             	cmp    edx,0x8
c001be73:	75 0a                	jne    c001be7f <IDE::open(int, int, void*)+0x225>
c001be75:	83 e8 02             	sub    eax,0x2
c001be78:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001be7f:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001be85:	89 c2                	mov    edx,eax
c001be87:	83 e2 0f             	and    edx,0xf
c001be8a:	83 fa 08             	cmp    edx,0x8
c001be8d:	75 0a                	jne    c001be99 <IDE::open(int, int, void*)+0x23f>
c001be8f:	83 e8 02             	sub    eax,0x2
c001be92:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001be99:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001bea0:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001bea7:	89 d0                	mov    eax,edx
c001bea9:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001beac:	8d 7a 01             	lea    edi,[edx+0x1]
c001beaf:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001beb3:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001beb7:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001bebb:	83 e1 3f             	and    ecx,0x3f
c001bebe:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001bec2:	89 f9                	mov    ecx,edi
c001bec4:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001becb:	0f b6 c9             	movzx  ecx,cl
c001bece:	8d 78 02             	lea    edi,[eax+0x2]
c001bed1:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001bed4:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001bed8:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001bedc:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001bee0:	83 e2 3f             	and    edx,0x3f
c001bee3:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001bee7:	89 f9                	mov    ecx,edi
c001bee9:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001beef:	0f b6 d1             	movzx  edx,cl
c001bef2:	8d 78 03             	lea    edi,[eax+0x3]
c001bef5:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bef8:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001befc:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001bf00:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001bf04:	83 e1 3f             	and    ecx,0x3f
c001bf07:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001bf0b:	89 f9                	mov    ecx,edi
c001bf0d:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001bf13:	0f b6 c9             	movzx  ecx,cl
c001bf16:	8d 78 04             	lea    edi,[eax+0x4]
c001bf19:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001bf1c:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001bf20:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001bf24:	89 fa                	mov    edx,edi
c001bf26:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001bf2c:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001bf30:	83 e2 3f             	and    edx,0x3f
c001bf33:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001bf37:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001bf3e:	66 85 f6             	test   si,si
c001bf41:	74 65                	je     c001bfa8 <IDE::open(int, int, void*)+0x34e>
c001bf43:	89 f9                	mov    ecx,edi
c001bf45:	83 c0 05             	add    eax,0x5
c001bf48:	0f b6 d1             	movzx  edx,cl
c001bf4b:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bf4e:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bf52:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001bf56:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001bf5c:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001bf60:	83 e0 3f             	and    eax,0x3f
c001bf63:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001bf67:	eb 3f                	jmp    c001bfa8 <IDE::open(int, int, void*)+0x34e>
c001bf69:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001bf6f:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001bf76:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001bf7d:	05 06 02 00 00       	add    eax,0x206
c001bf82:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001bf89:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001bf90:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001bf97:	05 06 02 00 00       	add    eax,0x206
c001bf9c:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001bfa3:	e9 bd fe ff ff       	jmp    c001be65 <IDE::open(int, int, void*)+0x20b>
c001bfa8:	50                   	push   eax
c001bfa9:	50                   	push   eax
c001bfaa:	6a 00                	push   0x0
c001bfac:	53                   	push   ebx
c001bfad:	e8 30 fa ff ff       	call   c001b9e2 <IDE::prepareInterrupt(unsigned char)>
c001bfb2:	5a                   	pop    edx
c001bfb3:	59                   	pop    ecx
c001bfb4:	6a 01                	push   0x1
c001bfb6:	53                   	push   ebx
c001bfb7:	e8 26 fa ff ff       	call   c001b9e2 <IDE::prepareInterrupt(unsigned char)>
c001bfbc:	83 c4 0c             	add    esp,0xc
c001bfbf:	6a 00                	push   0x0
c001bfc1:	6a 00                	push   0x0
c001bfc3:	53                   	push   ebx
c001bfc4:	e8 47 fc ff ff       	call   c001bc10 <IDE::enableIRQs(unsigned char, bool)>
c001bfc9:	83 c4 0c             	add    esp,0xc
c001bfcc:	6a 00                	push   0x0
c001bfce:	6a 01                	push   0x1
c001bfd0:	53                   	push   ebx
c001bfd1:	e8 3a fc ff ff       	call   c001bc10 <IDE::enableIRQs(unsigned char, bool)>
c001bfd6:	83 c4 10             	add    esp,0x10
c001bfd9:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001bfe0:	74 34                	je     c001c016 <IDE::open(int, int, void*)+0x3bc>
c001bfe2:	83 ec 0c             	sub    esp,0xc
c001bfe5:	53                   	push   ebx
c001bfe6:	6a 01                	push   0x1
c001bfe8:	68 d8 bb 01 c0       	push   0xc001bbd8
c001bfed:	6a 0e                	push   0xe
c001bfef:	53                   	push   ebx
c001bff0:	e8 01 07 ff ff       	call   c000c6f6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bff5:	83 c4 14             	add    esp,0x14
c001bff8:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001bffe:	53                   	push   ebx
c001bfff:	6a 01                	push   0x1
c001c001:	68 f4 bb 01 c0       	push   0xc001bbf4
c001c006:	6a 0f                	push   0xf
c001c008:	53                   	push   ebx
c001c009:	e8 e8 06 ff ff       	call   c000c6f6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c00e:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001c014:	eb 38                	jmp    c001c04e <IDE::open(int, int, void*)+0x3f4>
c001c016:	83 ec 0c             	sub    esp,0xc
c001c019:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001c023:	53                   	push   ebx
c001c024:	6a 00                	push   0x0
c001c026:	68 d8 bb 01 c0       	push   0xc001bbd8
c001c02b:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001c031:	53                   	push   ebx
c001c032:	e8 bf 06 ff ff       	call   c000c6f6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c037:	83 c4 14             	add    esp,0x14
c001c03a:	53                   	push   ebx
c001c03b:	6a 00                	push   0x0
c001c03d:	68 f4 bb 01 c0       	push   0xc001bbf4
c001c042:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001c048:	53                   	push   ebx
c001c049:	e8 a8 06 ff ff       	call   c000c6f6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c04e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c050:	83 c4 20             	add    esp,0x20
c001c053:	83 ec 0c             	sub    esp,0xc
c001c056:	53                   	push   ebx
c001c057:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001c05a:	83 c4 0c             	add    esp,0xc
c001c05d:	6a 07                	push   0x7
c001c05f:	6a 00                	push   0x0
c001c061:	53                   	push   ebx
c001c062:	e8 61 fa ff ff       	call   c001bac8 <IDE::read(unsigned char, unsigned char)>
c001c067:	83 c4 0c             	add    esp,0xc
c001c06a:	6a 07                	push   0x7
c001c06c:	6a 01                	push   0x1
c001c06e:	53                   	push   ebx
c001c06f:	e8 54 fa ff ff       	call   c001bac8 <IDE::read(unsigned char, unsigned char)>
c001c074:	83 c4 0c             	add    esp,0xc
c001c077:	6a 01                	push   0x1
c001c079:	6a 00                	push   0x0
c001c07b:	53                   	push   ebx
c001c07c:	e8 8f fb ff ff       	call   c001bc10 <IDE::enableIRQs(unsigned char, bool)>
c001c081:	83 c4 0c             	add    esp,0xc
c001c084:	6a 01                	push   0x1
c001c086:	6a 01                	push   0x1
c001c088:	53                   	push   ebx
c001c089:	e8 82 fb ff ff       	call   c001bc10 <IDE::enableIRQs(unsigned char, bool)>
c001c08e:	83 c4 2c             	add    esp,0x2c
c001c091:	31 c0                	xor    eax,eax
c001c093:	5b                   	pop    ebx
c001c094:	5e                   	pop    esi
c001c095:	5f                   	pop    edi
c001c096:	5d                   	pop    ebp
c001c097:	c3                   	ret    

c001c098 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001c098:	55                   	push   ebp
c001c099:	57                   	push   edi
c001c09a:	56                   	push   esi
c001c09b:	53                   	push   ebx
c001c09c:	83 ec 1c             	sub    esp,0x1c
c001c09f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001c0a3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c0a7:	8d 42 f8             	lea    eax,[edx-0x8]
c001c0aa:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c0ae:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001c0b2:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001c0b6:	3c 03                	cmp    al,0x3
c001c0b8:	77 5a                	ja     c001c114 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001c0ba:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c0be:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c0c2:	0f b6 db             	movzx  ebx,bl
c001c0c5:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001c0c8:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c0cd:	0c 80                	or     al,0x80
c001c0cf:	50                   	push   eax
c001c0d0:	6a 0c                	push   0xc
c001c0d2:	53                   	push   ebx
c001c0d3:	56                   	push   esi
c001c0d4:	e8 2f f9 ff ff       	call   c001ba08 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c0d9:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001c0de:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c0e2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c0e6:	0f b6 d2             	movzx  edx,dl
c001c0e9:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001c0ed:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c0ef:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c0f4:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001c0f8:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001c0fc:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c100:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c108:	83 c4 2c             	add    esp,0x2c
c001c10b:	5b                   	pop    ebx
c001c10c:	5e                   	pop    esi
c001c10d:	5f                   	pop    edi
c001c10e:	5d                   	pop    ebp
c001c10f:	e9 f4 f8 ff ff       	jmp    c001ba08 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c114:	0f b6 c2             	movzx  eax,dl
c001c117:	83 f8 07             	cmp    eax,0x7
c001c11a:	77 12                	ja     c001c12e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001c11c:	0f b6 c2             	movzx  eax,dl
c001c11f:	0f b6 db             	movzx  ebx,bl
c001c122:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001c12a:	01 c2                	add    edx,eax
c001c12c:	eb 2f                	jmp    c001c15d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001c12e:	83 f8 0d             	cmp    eax,0xd
c001c131:	77 13                	ja     c001c146 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001c133:	0f b6 db             	movzx  ebx,bl
c001c136:	0f b6 d2             	movzx  edx,dl
c001c139:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001c140:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001c144:	eb 17                	jmp    c001c15d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001c146:	83 f8 15             	cmp    eax,0x15
c001c149:	77 14                	ja     c001c15f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001c14b:	0f b6 db             	movzx  ebx,bl
c001c14e:	0f b6 d2             	movzx  edx,dl
c001c151:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001c159:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001c15d:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c15f:	83 c4 1c             	add    esp,0x1c
c001c162:	5b                   	pop    ebx
c001c163:	5e                   	pop    esi
c001c164:	5f                   	pop    edi
c001c165:	5d                   	pop    ebp
c001c166:	c3                   	ret    
c001c167:	90                   	nop

c001c168 <IDE::detect()>:
c001c168:	55                   	push   ebp
c001c169:	57                   	push   edi
c001c16a:	56                   	push   esi
c001c16b:	53                   	push   ebx
c001c16c:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001c172:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001c179:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001c180:	0f 85 a4 02 00 00    	jne    c001c42a <IDE::detect()+0x2c2>
c001c186:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001c18d:	31 f6                	xor    esi,esi
c001c18f:	31 ed                	xor    ebp,ebp
c001c191:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c199:	89 e8                	mov    eax,ebp
c001c19b:	c1 e0 06             	shl    eax,0x6
c001c19e:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001c1a6:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c1aa:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c1ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c1b2:	c1 e0 04             	shl    eax,0x4
c001c1b5:	83 c8 a0             	or     eax,0xffffffa0
c001c1b8:	0f b6 c0             	movzx  eax,al
c001c1bb:	50                   	push   eax
c001c1bc:	6a 06                	push   0x6
c001c1be:	56                   	push   esi
c001c1bf:	53                   	push   ebx
c001c1c0:	e8 43 f8 ff ff       	call   c001ba08 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c1c5:	83 c4 0c             	add    esp,0xc
c001c1c8:	6a 0c                	push   0xc
c001c1ca:	56                   	push   esi
c001c1cb:	53                   	push   ebx
c001c1cc:	e8 f7 f8 ff ff       	call   c001bac8 <IDE::read(unsigned char, unsigned char)>
c001c1d1:	83 c4 0c             	add    esp,0xc
c001c1d4:	6a 0c                	push   0xc
c001c1d6:	56                   	push   esi
c001c1d7:	53                   	push   ebx
c001c1d8:	e8 eb f8 ff ff       	call   c001bac8 <IDE::read(unsigned char, unsigned char)>
c001c1dd:	83 c4 0c             	add    esp,0xc
c001c1e0:	6a 0c                	push   0xc
c001c1e2:	56                   	push   esi
c001c1e3:	53                   	push   ebx
c001c1e4:	e8 df f8 ff ff       	call   c001bac8 <IDE::read(unsigned char, unsigned char)>
c001c1e9:	83 c4 0c             	add    esp,0xc
c001c1ec:	6a 0c                	push   0xc
c001c1ee:	56                   	push   esi
c001c1ef:	53                   	push   ebx
c001c1f0:	e8 d3 f8 ff ff       	call   c001bac8 <IDE::read(unsigned char, unsigned char)>
c001c1f5:	68 ec 00 00 00       	push   0xec
c001c1fa:	6a 07                	push   0x7
c001c1fc:	56                   	push   esi
c001c1fd:	53                   	push   ebx
c001c1fe:	e8 05 f8 ff ff       	call   c001ba08 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c203:	83 c4 1c             	add    esp,0x1c
c001c206:	6a 0c                	push   0xc
c001c208:	56                   	push   esi
c001c209:	53                   	push   ebx
c001c20a:	e8 b9 f8 ff ff       	call   c001bac8 <IDE::read(unsigned char, unsigned char)>
c001c20f:	83 c4 0c             	add    esp,0xc
c001c212:	6a 0c                	push   0xc
c001c214:	56                   	push   esi
c001c215:	53                   	push   ebx
c001c216:	e8 ad f8 ff ff       	call   c001bac8 <IDE::read(unsigned char, unsigned char)>
c001c21b:	83 c4 0c             	add    esp,0xc
c001c21e:	6a 0c                	push   0xc
c001c220:	56                   	push   esi
c001c221:	53                   	push   ebx
c001c222:	e8 a1 f8 ff ff       	call   c001bac8 <IDE::read(unsigned char, unsigned char)>
c001c227:	83 c4 0c             	add    esp,0xc
c001c22a:	6a 0c                	push   0xc
c001c22c:	56                   	push   esi
c001c22d:	53                   	push   ebx
c001c22e:	e8 95 f8 ff ff       	call   c001bac8 <IDE::read(unsigned char, unsigned char)>
c001c233:	83 c4 0c             	add    esp,0xc
c001c236:	6a 0c                	push   0xc
c001c238:	56                   	push   esi
c001c239:	53                   	push   ebx
c001c23a:	e8 89 f8 ff ff       	call   c001bac8 <IDE::read(unsigned char, unsigned char)>
c001c23f:	83 c4 10             	add    esp,0x10
c001c242:	84 c0                	test   al,al
c001c244:	0f 84 60 01 00 00    	je     c001c3aa <IDE::detect()+0x242>
c001c24a:	31 ff                	xor    edi,edi
c001c24c:	50                   	push   eax
c001c24d:	6a 0c                	push   0xc
c001c24f:	56                   	push   esi
c001c250:	53                   	push   ebx
c001c251:	e8 72 f8 ff ff       	call   c001bac8 <IDE::read(unsigned char, unsigned char)>
c001c256:	83 c4 10             	add    esp,0x10
c001c259:	a8 01                	test   al,0x1
c001c25b:	0f 85 6a 01 00 00    	jne    c001c3cb <IDE::detect()+0x263>
c001c261:	a8 80                	test   al,0x80
c001c263:	75 04                	jne    c001c269 <IDE::detect()+0x101>
c001c265:	a8 08                	test   al,0x8
c001c267:	75 23                	jne    c001c28c <IDE::detect()+0x124>
c001c269:	47                   	inc    edi
c001c26a:	81 ff 17 01 00 00    	cmp    edi,0x117
c001c270:	7e da                	jle    c001c24c <IDE::detect()+0xe4>
c001c272:	83 ec 0c             	sub    esp,0xc
c001c275:	6a 32                	push   0x32
c001c277:	e8 f0 9d ff ff       	call   c001606c <milliTenthSleep(unsigned int)>
c001c27c:	83 c4 10             	add    esp,0x10
c001c27f:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001c285:	75 c5                	jne    c001c24c <IDE::detect()+0xe4>
c001c287:	e9 3f 01 00 00       	jmp    c001c3cb <IDE::detect()+0x263>
c001c28c:	31 c9                	xor    ecx,ecx
c001c28e:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001c292:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001c296:	83 ec 0c             	sub    esp,0xc
c001c299:	68 80 00 00 00       	push   0x80
c001c29e:	57                   	push   edi
c001c29f:	6a 00                	push   0x0
c001c2a1:	56                   	push   esi
c001c2a2:	53                   	push   ebx
c001c2a3:	e8 f0 fd ff ff       	call   c001c098 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001c2a8:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001c2ad:	89 e8                	mov    eax,ebp
c001c2af:	89 d1                	mov    ecx,edx
c001c2b1:	c1 e0 06             	shl    eax,0x6
c001c2b4:	01 d8                	add    eax,ebx
c001c2b6:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001c2bd:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001c2c4:	89 f2                	mov    edx,esi
c001c2c6:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001c2cc:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001c2d0:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001c2d6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c2da:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001c2e1:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001c2e9:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001c2f0:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001c2f8:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001c2fe:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001c305:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001c30b:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c30f:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c313:	83 c4 20             	add    esp,0x20
c001c316:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001c319:	83 c0 02             	add    eax,0x2
c001c31c:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001c322:	83 c7 02             	add    edi,0x2
c001c325:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001c328:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001c32e:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001c332:	75 e2                	jne    c001c316 <IDE::detect()+0x1ae>
c001c334:	89 e8                	mov    eax,ebp
c001c336:	c1 e0 06             	shl    eax,0x6
c001c339:	01 d8                	add    eax,ebx
c001c33b:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001c342:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001c349:	c1 ea 09             	shr    edx,0x9
c001c34c:	83 e2 01             	and    edx,0x1
c001c34f:	80 e1 01             	and    cl,0x1
c001c352:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001c358:	75 22                	jne    c001c37c <IDE::detect()+0x214>
c001c35a:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001c361:	74 46                	je     c001c3a9 <IDE::detect()+0x241>
c001c363:	83 ec 0c             	sub    esp,0xc
c001c366:	68 7c 01 00 00       	push   0x17c
c001c36b:	e8 46 b7 fe ff       	call   c0007ab6 <malloc>
c001c370:	89 c7                	mov    edi,eax
c001c372:	89 04 24             	mov    DWORD PTR [esp],eax
c001c375:	e8 1a 05 00 00       	call   c001c894 <ATA::ATA()>
c001c37a:	eb 17                	jmp    c001c393 <IDE::detect()+0x22b>
c001c37c:	83 ec 0c             	sub    esp,0xc
c001c37f:	68 84 01 00 00       	push   0x184
c001c384:	e8 2d b7 fe ff       	call   c0007ab6 <malloc>
c001c389:	89 c7                	mov    edi,eax
c001c38b:	89 04 24             	mov    DWORD PTR [esp],eax
c001c38e:	e8 45 0e 00 00       	call   c001d1d8 <ATAPI::ATAPI()>
c001c393:	5a                   	pop    edx
c001c394:	59                   	pop    ecx
c001c395:	57                   	push   edi
c001c396:	53                   	push   ebx
c001c397:	e8 ae 03 ff ff       	call   c000c74a <Device::addChild(Device*)>
c001c39c:	8b 07                	mov    eax,DWORD PTR [edi]
c001c39e:	53                   	push   ebx
c001c39f:	55                   	push   ebp
c001c3a0:	6a 00                	push   0x0
c001c3a2:	57                   	push   edi
c001c3a3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c3a6:	83 c4 20             	add    esp,0x20
c001c3a9:	45                   	inc    ebp
c001c3aa:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001c3af:	74 0d                	je     c001c3be <IDE::detect()+0x256>
c001c3b1:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001c3b9:	e9 db fd ff ff       	jmp    c001c199 <IDE::detect()+0x31>
c001c3be:	4e                   	dec    esi
c001c3bf:	74 69                	je     c001c42a <IDE::detect()+0x2c2>
c001c3c1:	be 01 00 00 00       	mov    esi,0x1
c001c3c6:	e9 c6 fd ff ff       	jmp    c001c191 <IDE::detect()+0x29>
c001c3cb:	50                   	push   eax
c001c3cc:	6a 04                	push   0x4
c001c3ce:	56                   	push   esi
c001c3cf:	53                   	push   ebx
c001c3d0:	e8 f3 f6 ff ff       	call   c001bac8 <IDE::read(unsigned char, unsigned char)>
c001c3d5:	83 c4 0c             	add    esp,0xc
c001c3d8:	89 c7                	mov    edi,eax
c001c3da:	6a 05                	push   0x5
c001c3dc:	56                   	push   esi
c001c3dd:	53                   	push   ebx
c001c3de:	e8 e5 f6 ff ff       	call   c001bac8 <IDE::read(unsigned char, unsigned char)>
c001c3e3:	83 c4 10             	add    esp,0x10
c001c3e6:	89 f9                	mov    ecx,edi
c001c3e8:	0f b6 c0             	movzx  eax,al
c001c3eb:	0f b6 f9             	movzx  edi,cl
c001c3ee:	83 ff 14             	cmp    edi,0x14
c001c3f1:	75 07                	jne    c001c3fa <IDE::detect()+0x292>
c001c3f3:	3d eb 00 00 00       	cmp    eax,0xeb
c001c3f8:	eb 0a                	jmp    c001c404 <IDE::detect()+0x29c>
c001c3fa:	3d 96 00 00 00       	cmp    eax,0x96
c001c3ff:	75 a9                	jne    c001c3aa <IDE::detect()+0x242>
c001c401:	83 ff 69             	cmp    edi,0x69
c001c404:	75 a4                	jne    c001c3aa <IDE::detect()+0x242>
c001c406:	68 a1 00 00 00       	push   0xa1
c001c40b:	6a 07                	push   0x7
c001c40d:	56                   	push   esi
c001c40e:	53                   	push   ebx
c001c40f:	e8 f4 f5 ff ff       	call   c001ba08 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c414:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001c41b:	e8 4c 9c ff ff       	call   c001606c <milliTenthSleep(unsigned int)>
c001c420:	83 c4 10             	add    esp,0x10
c001c423:	b1 01                	mov    cl,0x1
c001c425:	e9 64 fe ff ff       	jmp    c001c28e <IDE::detect()+0x126>
c001c42a:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c430:	5b                   	pop    ebx
c001c431:	5e                   	pop    esi
c001c432:	5f                   	pop    edi
c001c433:	5d                   	pop    ebp
c001c434:	c3                   	ret    
c001c435:	90                   	nop

c001c436 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001c436:	55                   	push   ebp
c001c437:	57                   	push   edi
c001c438:	56                   	push   esi
c001c439:	53                   	push   ebx
c001c43a:	83 ec 1c             	sub    esp,0x1c
c001c43d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c441:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c445:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c449:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001c44d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c451:	88 c3                	mov    bl,al
c001c453:	25 ff 00 00 00       	and    eax,0xff
c001c458:	0f 84 88 00 00 00    	je     c001c4e6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c45e:	83 ec 0c             	sub    esp,0xc
c001c461:	89 c7                	mov    edi,eax
c001c463:	68 2b 2e 02 c0       	push   0xc0022e2b
c001c468:	e8 d8 e4 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001c46d:	83 c4 10             	add    esp,0x10
c001c470:	83 ff 01             	cmp    edi,0x1
c001c473:	74 6b                	je     c001c4e0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001c475:	83 ff 02             	cmp    edi,0x2
c001c478:	75 58                	jne    c001c4d2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001c47a:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001c47f:	01 ff                	add    edi,edi
c001c481:	50                   	push   eax
c001c482:	09 fe                	or     esi,edi
c001c484:	6a 01                	push   0x1
c001c486:	89 f0                	mov    eax,esi
c001c488:	0f b6 f0             	movzx  esi,al
c001c48b:	c1 e6 06             	shl    esi,0x6
c001c48e:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001c496:	50                   	push   eax
c001c497:	55                   	push   ebp
c001c498:	e8 2b f6 ff ff       	call   c001bac8 <IDE::read(unsigned char, unsigned char)>
c001c49d:	83 c4 10             	add    esp,0x10
c001c4a0:	a8 01                	test   al,0x1
c001c4a2:	74 02                	je     c001c4a6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001c4a4:	b3 07                	mov    bl,0x7
c001c4a6:	a8 02                	test   al,0x2
c001c4a8:	74 02                	je     c001c4ac <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001c4aa:	b3 03                	mov    bl,0x3
c001c4ac:	a8 04                	test   al,0x4
c001c4ae:	74 02                	je     c001c4b2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001c4b0:	b3 14                	mov    bl,0x14
c001c4b2:	a8 08                	test   al,0x8
c001c4b4:	74 02                	je     c001c4b8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001c4b6:	b3 03                	mov    bl,0x3
c001c4b8:	a8 10                	test   al,0x10
c001c4ba:	74 02                	je     c001c4be <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001c4bc:	b3 15                	mov    bl,0x15
c001c4be:	a8 20                	test   al,0x20
c001c4c0:	74 02                	je     c001c4c4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001c4c2:	b3 03                	mov    bl,0x3
c001c4c4:	a8 40                	test   al,0x40
c001c4c6:	74 02                	je     c001c4ca <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001c4c8:	b3 16                	mov    bl,0x16
c001c4ca:	a8 80                	test   al,0x80
c001c4cc:	74 18                	je     c001c4e6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c4ce:	b3 0d                	mov    bl,0xd
c001c4d0:	eb 14                	jmp    c001c4e6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c4d2:	83 ff 03             	cmp    edi,0x3
c001c4d5:	74 0d                	je     c001c4e4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001c4d7:	83 ff 04             	cmp    edi,0x4
c001c4da:	75 0a                	jne    c001c4e6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c4dc:	b3 08                	mov    bl,0x8
c001c4de:	eb 06                	jmp    c001c4e6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c4e0:	b3 13                	mov    bl,0x13
c001c4e2:	eb 02                	jmp    c001c4e6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c4e4:	b3 17                	mov    bl,0x17
c001c4e6:	83 c4 1c             	add    esp,0x1c
c001c4e9:	88 d8                	mov    al,bl
c001c4eb:	5b                   	pop    ebx
c001c4ec:	5e                   	pop    esi
c001c4ed:	5f                   	pop    edi
c001c4ee:	5d                   	pop    ebp
c001c4ef:	c3                   	ret    

c001c4f0 <IDE::polling(unsigned char, unsigned int)>:
c001c4f0:	57                   	push   edi
c001c4f1:	56                   	push   esi
c001c4f2:	53                   	push   ebx
c001c4f3:	bb 04 00 00 00       	mov    ebx,0x4
c001c4f8:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001c4fc:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c501:	52                   	push   edx
c001c502:	6a 0c                	push   0xc
c001c504:	56                   	push   esi
c001c505:	57                   	push   edi
c001c506:	e8 bd f5 ff ff       	call   c001bac8 <IDE::read(unsigned char, unsigned char)>
c001c50b:	83 c4 10             	add    esp,0x10
c001c50e:	4b                   	dec    ebx
c001c50f:	75 f0                	jne    c001c501 <IDE::polling(unsigned char, unsigned int)+0x11>
c001c511:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c516:	50                   	push   eax
c001c517:	6a 0c                	push   0xc
c001c519:	56                   	push   esi
c001c51a:	57                   	push   edi
c001c51b:	e8 a8 f5 ff ff       	call   c001bac8 <IDE::read(unsigned char, unsigned char)>
c001c520:	83 c4 10             	add    esp,0x10
c001c523:	a8 01                	test   al,0x1
c001c525:	75 17                	jne    c001c53e <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c527:	a8 20                	test   al,0x20
c001c529:	75 0f                	jne    c001c53a <IDE::polling(unsigned char, unsigned int)+0x4a>
c001c52b:	4b                   	dec    ebx
c001c52c:	74 10                	je     c001c53e <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c52e:	a8 80                	test   al,0x80
c001c530:	75 e4                	jne    c001c516 <IDE::polling(unsigned char, unsigned int)+0x26>
c001c532:	a8 08                	test   al,0x8
c001c534:	74 e0                	je     c001c516 <IDE::polling(unsigned char, unsigned int)+0x26>
c001c536:	31 c0                	xor    eax,eax
c001c538:	eb 06                	jmp    c001c540 <IDE::polling(unsigned char, unsigned int)+0x50>
c001c53a:	b0 01                	mov    al,0x1
c001c53c:	eb 02                	jmp    c001c540 <IDE::polling(unsigned char, unsigned int)+0x50>
c001c53e:	b0 02                	mov    al,0x2
c001c540:	5b                   	pop    ebx
c001c541:	5e                   	pop    esi
c001c542:	5f                   	pop    edi
c001c543:	c3                   	ret    

c001c544 <SATABus::close(int, int, void*)>:
c001c544:	31 c0                	xor    eax,eax
c001c546:	c3                   	ret    
c001c547:	90                   	nop

c001c548 <SATABus::detect()>:
c001c548:	c3                   	ret    
c001c549:	90                   	nop

c001c54a <SATABus::SATABus()>:
c001c54a:	83 ec 0c             	sub    esp,0xc
c001c54d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c551:	83 ec 08             	sub    esp,0x8
c001c554:	68 64 2e 02 c0       	push   0xc0022e64
c001c559:	50                   	push   eax
c001c55a:	e8 2d 05 ff ff       	call   c000ca8c <HardDiskController::HardDiskController(char const*)>
c001c55f:	83 c4 10             	add    esp,0x10
c001c562:	ba 90 2e 02 c0       	mov    edx,0xc0022e90
c001c567:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c56b:	89 10                	mov    DWORD PTR [eax],edx
c001c56d:	83 ec 0c             	sub    esp,0xc
c001c570:	6a 50                	push   0x50
c001c572:	e8 17 b9 fe ff       	call   c0007e8e <Phys::allocateContiguousPages(int)>
c001c577:	83 c4 10             	add    esp,0x10
c001c57a:	89 c2                	mov    edx,eax
c001c57c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c580:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001c586:	83 ec 0c             	sub    esp,0xc
c001c589:	6a 50                	push   0x50
c001c58b:	e8 7d d0 fe ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c001c590:	83 c4 10             	add    esp,0x10
c001c593:	89 c2                	mov    edx,eax
c001c595:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c599:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001c59f:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c001c5a4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c5a8:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001c5ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c5b2:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001c5b8:	83 ec 0c             	sub    esp,0xc
c001c5bb:	6a 03                	push   0x3
c001c5bd:	6a 50                	push   0x50
c001c5bf:	51                   	push   ecx
c001c5c0:	52                   	push   edx
c001c5c1:	50                   	push   eax
c001c5c2:	e8 53 d9 fe ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001c5c7:	83 c4 20             	add    esp,0x20
c001c5ca:	90                   	nop
c001c5cb:	83 c4 0c             	add    esp,0xc
c001c5ce:	c3                   	ret    
c001c5cf:	90                   	nop

c001c5d0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001c5d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c5d4:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001c5d7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001c5da:	09 c2                	or     edx,eax
c001c5dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5e0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001c5e6:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c5e8:	31 c0                	xor    eax,eax
c001c5ea:	c1 e9 08             	shr    ecx,0x8
c001c5ed:	83 e1 0f             	and    ecx,0xf
c001c5f0:	39 c8                	cmp    eax,ecx
c001c5f2:	74 0a                	je     c001c5fe <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001c5f4:	f6 c2 01             	test   dl,0x1
c001c5f7:	74 08                	je     c001c601 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001c5f9:	d1 ea                	shr    edx,1
c001c5fb:	40                   	inc    eax
c001c5fc:	eb f2                	jmp    c001c5f0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001c5fe:	83 c8 ff             	or     eax,0xffffffff
c001c601:	c3                   	ret    

c001c602 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001c602:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c606:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001c609:	89 c2                	mov    edx,eax
c001c60b:	c1 ea 08             	shr    edx,0x8
c001c60e:	83 e2 0f             	and    edx,0xf
c001c611:	4a                   	dec    edx
c001c612:	75 32                	jne    c001c646 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c614:	83 e0 0f             	and    eax,0xf
c001c617:	83 f8 03             	cmp    eax,0x3
c001c61a:	75 2a                	jne    c001c646 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c61c:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001c61f:	b8 02 00 00 00       	mov    eax,0x2
c001c624:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001c62a:	74 1c                	je     c001c648 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001c62c:	b8 04 00 00 00       	mov    eax,0x4
c001c631:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001c637:	74 0f                	je     c001c648 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001c639:	31 c0                	xor    eax,eax
c001c63b:	83 fa 03             	cmp    edx,0x3
c001c63e:	0f 94 c0             	sete   al
c001c641:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001c645:	c3                   	ret    
c001c646:	31 c0                	xor    eax,eax
c001c648:	c3                   	ret    
c001c649:	90                   	nop

c001c64a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001c64a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c64e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c651:	0f ba e2 0f          	bt     edx,0xf
c001c655:	72 f7                	jb     c001c64e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001c657:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c65a:	83 ca 10             	or     edx,0x10
c001c65d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c660:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c663:	83 ca 01             	or     edx,0x1
c001c666:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c669:	c3                   	ret    

c001c66a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001c66a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c66e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c671:	83 e2 fe             	and    edx,0xfffffffe
c001c674:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c677:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c67a:	83 e2 ef             	and    edx,0xffffffef
c001c67d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c680:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c683:	0f ba e2 0e          	bt     edx,0xe
c001c687:	72 f7                	jb     c001c680 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001c689:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c68c:	0f ba e2 0f          	bt     edx,0xf
c001c690:	72 ee                	jb     c001c680 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001c692:	c3                   	ret    
c001c693:	90                   	nop

c001c694 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001c694:	55                   	push   ebp
c001c695:	57                   	push   edi
c001c696:	56                   	push   esi
c001c697:	53                   	push   ebx
c001c698:	83 ec 1c             	sub    esp,0x1c
c001c69b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c69f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c6a3:	53                   	push   ebx
c001c6a4:	56                   	push   esi
c001c6a5:	e8 c0 ff ff ff       	call   c001c66a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001c6aa:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001c6ae:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001c6b4:	83 ec 0c             	sub    esp,0xc
c001c6b7:	c1 e5 0a             	shl    ebp,0xa
c001c6ba:	01 e8                	add    eax,ebp
c001c6bc:	89 03                	mov    DWORD PTR [ebx],eax
c001c6be:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c6c0:	68 00 04 00 00       	push   0x400
c001c6c5:	6a 00                	push   0x0
c001c6c7:	50                   	push   eax
c001c6c8:	e8 23 3e fe ff       	call   c00004f0 <memset>
c001c6cd:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001c6d3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001c6d7:	01 e8                	add    eax,ebp
c001c6d9:	83 c4 1c             	add    esp,0x1c
c001c6dc:	89 03                	mov    DWORD PTR [ebx],eax
c001c6de:	c1 e2 08             	shl    edx,0x8
c001c6e1:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c6e8:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c001c6ee:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001c6f4:	01 f8                	add    eax,edi
c001c6f6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c6f9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001c6fc:	68 00 01 00 00       	push   0x100
c001c701:	6a 00                	push   0x0
c001c703:	50                   	push   eax
c001c704:	e8 e7 3d fe ff       	call   c00004f0 <memset>
c001c709:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c001c70f:	01 fa                	add    edx,edi
c001c711:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001c715:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001c718:	c1 e7 0d             	shl    edi,0xd
c001c71b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001c722:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001c728:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001c72e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c732:	31 ff                	xor    edi,edi
c001c734:	83 c4 10             	add    esp,0x10
c001c737:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001c73d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c741:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001c747:	83 c5 20             	add    ebp,0x20
c001c74a:	01 f8                	add    eax,edi
c001c74c:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001c74f:	52                   	push   edx
c001c750:	68 00 01 00 00       	push   0x100
c001c755:	6a 00                	push   0x0
c001c757:	50                   	push   eax
c001c758:	e8 93 3d fe ff       	call   c00004f0 <memset>
c001c75d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c761:	83 c4 10             	add    esp,0x10
c001c764:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001c76a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001c771:	01 f8                	add    eax,edi
c001c773:	81 c7 00 01 00 00    	add    edi,0x100
c001c779:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001c77c:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001c782:	75 b3                	jne    c001c737 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c001c784:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001c78b:	50                   	push   eax
c001c78c:	50                   	push   eax
c001c78d:	53                   	push   ebx
c001c78e:	56                   	push   esi
c001c78f:	e8 b6 fe ff ff       	call   c001c64a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001c794:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001c79b:	83 c4 2c             	add    esp,0x2c
c001c79e:	5b                   	pop    ebx
c001c79f:	5e                   	pop    esi
c001c7a0:	5f                   	pop    edi
c001c7a1:	5d                   	pop    ebp
c001c7a2:	c3                   	ret    
c001c7a3:	90                   	nop

c001c7a4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001c7a4:	55                   	push   ebp
c001c7a5:	57                   	push   edi
c001c7a6:	56                   	push   esi
c001c7a7:	53                   	push   ebx
c001c7a8:	31 db                	xor    ebx,ebx
c001c7aa:	83 ec 0c             	sub    esp,0xc
c001c7ad:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c7b1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001c7b5:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001c7b8:	f7 c7 01 00 00 00    	test   edi,0x1
c001c7be:	74 7a                	je     c001c83a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001c7c0:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001c7c4:	89 d8                	mov    eax,ebx
c001c7c6:	c1 e0 07             	shl    eax,0x7
c001c7c9:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001c7d0:	55                   	push   ebp
c001c7d1:	56                   	push   esi
c001c7d2:	e8 2b fe ff ff       	call   c001c602 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001c7d7:	5a                   	pop    edx
c001c7d8:	83 f8 01             	cmp    eax,0x1
c001c7db:	59                   	pop    ecx
c001c7dc:	75 21                	jne    c001c7ff <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001c7de:	50                   	push   eax
c001c7df:	53                   	push   ebx
c001c7e0:	55                   	push   ebp
c001c7e1:	56                   	push   esi
c001c7e2:	e8 ad fe ff ff       	call   c001c694 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001c7e7:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001c7ee:	e8 c3 b2 fe ff       	call   c0007ab6 <malloc>
c001c7f3:	89 c5                	mov    ebp,eax
c001c7f5:	89 04 24             	mov    DWORD PTR [esp],eax
c001c7f8:	e8 99 10 00 00       	call   c001d896 <SATA::SATA()>
c001c7fd:	eb 24                	jmp    c001c823 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001c7ff:	83 f8 04             	cmp    eax,0x4
c001c802:	75 36                	jne    c001c83a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001c804:	51                   	push   ecx
c001c805:	53                   	push   ebx
c001c806:	55                   	push   ebp
c001c807:	56                   	push   esi
c001c808:	e8 87 fe ff ff       	call   c001c694 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001c80d:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001c814:	e8 9d b2 fe ff       	call   c0007ab6 <malloc>
c001c819:	89 c5                	mov    ebp,eax
c001c81b:	89 04 24             	mov    DWORD PTR [esp],eax
c001c81e:	e8 d5 17 00 00       	call   c001dff8 <SATAPI::SATAPI()>
c001c823:	58                   	pop    eax
c001c824:	5a                   	pop    edx
c001c825:	55                   	push   ebp
c001c826:	56                   	push   esi
c001c827:	e8 1e ff fe ff       	call   c000c74a <Device::addChild(Device*)>
c001c82c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001c82f:	56                   	push   esi
c001c830:	6a 00                	push   0x0
c001c832:	53                   	push   ebx
c001c833:	55                   	push   ebp
c001c834:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c837:	83 c4 20             	add    esp,0x20
c001c83a:	d1 ef                	shr    edi,1
c001c83c:	43                   	inc    ebx
c001c83d:	83 fb 20             	cmp    ebx,0x20
c001c840:	0f 85 72 ff ff ff    	jne    c001c7b8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001c846:	83 c4 0c             	add    esp,0xc
c001c849:	5b                   	pop    ebx
c001c84a:	5e                   	pop    esi
c001c84b:	5f                   	pop    edi
c001c84c:	5d                   	pop    ebp
c001c84d:	c3                   	ret    

c001c84e <SATABus::open(int, int, void*)>:
c001c84e:	83 ec 14             	sub    esp,0x14
c001c851:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c855:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001c85b:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001c861:	52                   	push   edx
c001c862:	50                   	push   eax
c001c863:	e8 3c ff ff ff       	call   c001c7a4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001c868:	31 c0                	xor    eax,eax
c001c86a:	83 c4 1c             	add    esp,0x1c
c001c86d:	c3                   	ret    

c001c86e <ATA::close(int, int, void*)>:
c001c86e:	83 ec 0c             	sub    esp,0xc
c001c871:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c875:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c87b:	85 c0                	test   eax,eax
c001c87d:	74 0c                	je     c001c88b <ATA::close(int, int, void*)+0x1d>
c001c87f:	83 ec 0c             	sub    esp,0xc
c001c882:	8b 10                	mov    edx,DWORD PTR [eax]
c001c884:	50                   	push   eax
c001c885:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c888:	83 c4 10             	add    esp,0x10
c001c88b:	31 c0                	xor    eax,eax
c001c88d:	83 c4 0c             	add    esp,0xc
c001c890:	c3                   	ret    
c001c891:	90                   	nop

c001c892 <ATA::powerSaving(PowerSavingLevel)>:
c001c892:	c3                   	ret    
c001c893:	90                   	nop

c001c894 <ATA::ATA()>:
c001c894:	83 ec 0c             	sub    esp,0xc
c001c897:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c89b:	83 ec 04             	sub    esp,0x4
c001c89e:	68 00 02 00 00       	push   0x200
c001c8a3:	68 5d 2f 02 c0       	push   0xc0022f5d
c001c8a8:	50                   	push   eax
c001c8a9:	e8 68 02 ff ff       	call   c000cb16 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c8ae:	83 c4 10             	add    esp,0x10
c001c8b1:	ba d0 2e 02 c0       	mov    edx,0xc0022ed0
c001c8b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8ba:	89 10                	mov    DWORD PTR [eax],edx
c001c8bc:	90                   	nop
c001c8bd:	83 c4 0c             	add    esp,0xc
c001c8c0:	c3                   	ret    
c001c8c1:	90                   	nop

c001c8c2 <ATA::flush(bool)>:
c001c8c2:	53                   	push   ebx
c001c8c3:	83 ec 08             	sub    esp,0x8
c001c8c6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c8ca:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c8cf:	83 f8 01             	cmp    eax,0x1
c001c8d2:	19 c0                	sbb    eax,eax
c001c8d4:	83 e0 fd             	and    eax,0xfffffffd
c001c8d7:	05 ea 00 00 00       	add    eax,0xea
c001c8dc:	50                   	push   eax
c001c8dd:	6a 07                	push   0x7
c001c8df:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c8e6:	50                   	push   eax
c001c8e7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c8ed:	e8 16 f1 ff ff       	call   c001ba08 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8f2:	83 c4 0c             	add    esp,0xc
c001c8f5:	6a 00                	push   0x0
c001c8f7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c8fe:	50                   	push   eax
c001c8ff:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c905:	e8 e6 fb ff ff       	call   c001c4f0 <IDE::polling(unsigned char, unsigned int)>
c001c90a:	83 c4 18             	add    esp,0x18
c001c90d:	5b                   	pop    ebx
c001c90e:	c3                   	ret    
c001c90f:	90                   	nop

c001c910 <ATA::readyForCommand()>:
c001c910:	56                   	push   esi
c001c911:	53                   	push   ebx
c001c912:	53                   	push   ebx
c001c913:	31 db                	xor    ebx,ebx
c001c915:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c919:	51                   	push   ecx
c001c91a:	6a 0c                	push   0xc
c001c91c:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c923:	50                   	push   eax
c001c924:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c92a:	e8 99 f1 ff ff       	call   c001bac8 <IDE::read(unsigned char, unsigned char)>
c001c92f:	83 c4 10             	add    esp,0x10
c001c932:	a8 88                	test   al,0x88
c001c934:	74 1f                	je     c001c955 <ATA::readyForCommand()+0x45>
c001c936:	43                   	inc    ebx
c001c937:	83 fb 63             	cmp    ebx,0x63
c001c93a:	7e dd                	jle    c001c919 <ATA::readyForCommand()+0x9>
c001c93c:	83 ec 0c             	sub    esp,0xc
c001c93f:	6a 0a                	push   0xa
c001c941:	e8 26 97 ff ff       	call   c001606c <milliTenthSleep(unsigned int)>
c001c946:	83 c4 10             	add    esp,0x10
c001c949:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001c94f:	75 c8                	jne    c001c919 <ATA::readyForCommand()+0x9>
c001c951:	31 c0                	xor    eax,eax
c001c953:	eb 02                	jmp    c001c957 <ATA::readyForCommand()+0x47>
c001c955:	b0 01                	mov    al,0x1
c001c957:	5a                   	pop    edx
c001c958:	5b                   	pop    ebx
c001c959:	5e                   	pop    esi
c001c95a:	c3                   	ret    
c001c95b:	90                   	nop

c001c95c <ATA::access(unsigned long long, int, void*, bool)>:
c001c95c:	55                   	push   ebp
c001c95d:	57                   	push   edi
c001c95e:	56                   	push   esi
c001c95f:	53                   	push   ebx
c001c960:	83 ec 2c             	sub    esp,0x2c
c001c963:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001c967:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001c96b:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001c96f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c973:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001c977:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c97b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001c97f:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001c985:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c989:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001c98f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c993:	c1 e0 06             	shl    eax,0x6
c001c996:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001c99e:	74 5d                	je     c001c9fd <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001c9a0:	89 fa                	mov    edx,edi
c001c9a2:	89 f0                	mov    eax,esi
c001c9a4:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001c9a8:	c1 ea 1c             	shr    edx,0x1c
c001c9ab:	89 d1                	mov    ecx,edx
c001c9ad:	09 c1                	or     ecx,eax
c001c9af:	74 25                	je     c001c9d6 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001c9b1:	31 ed                	xor    ebp,ebp
c001c9b3:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001c9ba:	89 fa                	mov    edx,edi
c001c9bc:	89 f0                	mov    eax,esi
c001c9be:	0f ad d0             	shrd   eax,edx,cl
c001c9c1:	d3 ea                	shr    edx,cl
c001c9c3:	f6 c1 20             	test   cl,0x20
c001c9c6:	74 02                	je     c001c9ca <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001c9c8:	89 d0                	mov    eax,edx
c001c9ca:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001c9ce:	45                   	inc    ebp
c001c9cf:	83 fd 06             	cmp    ebp,0x6
c001c9d2:	75 df                	jne    c001c9b3 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001c9d4:	eb 76                	jmp    c001ca4c <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001c9d6:	89 f0                	mov    eax,esi
c001c9d8:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001c9dd:	89 fa                	mov    edx,edi
c001c9df:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c9e6:	0f ac d0 10          	shrd   eax,edx,0x10
c001c9ea:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c9ef:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001c9f3:	c1 ee 18             	shr    esi,0x18
c001c9f6:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001c9fb:	eb 56                	jmp    c001ca53 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001c9fd:	6a 00                	push   0x0
c001c9ff:	6a 3f                	push   0x3f
c001ca01:	57                   	push   edi
c001ca02:	56                   	push   esi
c001ca03:	e8 a8 2a 00 00       	call   c001f4b0 <__umoddi3>
c001ca08:	83 c4 10             	add    esp,0x10
c001ca0b:	40                   	inc    eax
c001ca0c:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001ca10:	6a 00                	push   0x0
c001ca12:	68 f0 03 00 00       	push   0x3f0
c001ca17:	57                   	push   edi
c001ca18:	56                   	push   esi
c001ca19:	e8 92 29 00 00       	call   c001f3b0 <__udivdi3>
c001ca1e:	83 c4 10             	add    esp,0x10
c001ca21:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001ca26:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001ca2d:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001ca32:	6a 00                	push   0x0
c001ca34:	6a 3f                	push   0x3f
c001ca36:	57                   	push   edi
c001ca37:	56                   	push   esi
c001ca38:	e8 73 29 00 00       	call   c001f3b0 <__udivdi3>
c001ca3d:	83 c4 10             	add    esp,0x10
c001ca40:	83 e0 0f             	and    eax,0xf
c001ca43:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001ca48:	89 c6                	mov    esi,eax
c001ca4a:	eb 07                	jmp    c001ca53 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001ca4c:	31 f6                	xor    esi,esi
c001ca4e:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001ca53:	bf 01 00 00 00       	mov    edi,0x1
c001ca58:	50                   	push   eax
c001ca59:	6a 00                	push   0x0
c001ca5b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca62:	50                   	push   eax
c001ca63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ca67:	e8 a4 f1 ff ff       	call   c001bc10 <IDE::enableIRQs(unsigned char, bool)>
c001ca6c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ca6f:	e8 9c fe ff ff       	call   c001c910 <ATA::readyForCommand()>
c001ca74:	83 c4 10             	add    esp,0x10
c001ca77:	84 c0                	test   al,al
c001ca79:	0f 84 69 02 00 00    	je     c001cce8 <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c001ca7f:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001ca85:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001ca8b:	c1 e0 04             	shl    eax,0x4
c001ca8e:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001ca95:	09 c6                	or     esi,eax
c001ca97:	f6 44 24 0e 03       	test   BYTE PTR [esp+0xe],0x3
c001ca9c:	75 05                	jne    c001caa3 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001ca9e:	83 ce a0             	or     esi,0xffffffa0
c001caa1:	eb 03                	jmp    c001caa6 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001caa3:	83 ce e0             	or     esi,0xffffffe0
c001caa6:	89 f0                	mov    eax,esi
c001caa8:	0f b6 f0             	movzx  esi,al
c001caab:	56                   	push   esi
c001caac:	6a 06                	push   0x6
c001caae:	51                   	push   ecx
c001caaf:	52                   	push   edx
c001cab0:	e8 53 ef ff ff       	call   c001ba08 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cab5:	83 c4 10             	add    esp,0x10
c001cab8:	6a 00                	push   0x0
c001caba:	6a 01                	push   0x1
c001cabc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cac3:	50                   	push   eax
c001cac4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001caca:	e8 39 ef ff ff       	call   c001ba08 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cacf:	83 c4 10             	add    esp,0x10
c001cad2:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001cad7:	83 f8 02             	cmp    eax,0x2
c001cada:	75 6e                	jne    c001cb4a <ATA::access(unsigned long long, int, void*, bool)+0x1ee>
c001cadc:	6a 00                	push   0x0
c001cade:	6a 08                	push   0x8
c001cae0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cae7:	50                   	push   eax
c001cae8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001caee:	e8 15 ef ff ff       	call   c001ba08 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001caf3:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001caf8:	50                   	push   eax
c001caf9:	6a 09                	push   0x9
c001cafb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb02:	50                   	push   eax
c001cb03:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb09:	e8 fa ee ff ff       	call   c001ba08 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb0e:	83 c4 20             	add    esp,0x20
c001cb11:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001cb16:	50                   	push   eax
c001cb17:	6a 0a                	push   0xa
c001cb19:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb20:	50                   	push   eax
c001cb21:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb27:	e8 dc ee ff ff       	call   c001ba08 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb2c:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001cb31:	50                   	push   eax
c001cb32:	6a 0b                	push   0xb
c001cb34:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb3b:	50                   	push   eax
c001cb3c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb42:	e8 c1 ee ff ff       	call   c001ba08 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb47:	83 c4 20             	add    esp,0x20
c001cb4a:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001cb4f:	50                   	push   eax
c001cb50:	6a 02                	push   0x2
c001cb52:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb59:	50                   	push   eax
c001cb5a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb60:	e8 a3 ee ff ff       	call   c001ba08 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb65:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001cb6a:	50                   	push   eax
c001cb6b:	6a 03                	push   0x3
c001cb6d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb74:	50                   	push   eax
c001cb75:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb7b:	e8 88 ee ff ff       	call   c001ba08 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb80:	83 c4 20             	add    esp,0x20
c001cb83:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001cb88:	50                   	push   eax
c001cb89:	6a 04                	push   0x4
c001cb8b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb92:	50                   	push   eax
c001cb93:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb99:	e8 6a ee ff ff       	call   c001ba08 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb9e:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cba3:	50                   	push   eax
c001cba4:	6a 05                	push   0x5
c001cba6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cbad:	50                   	push   eax
c001cbae:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cbb4:	e8 4f ee ff ff       	call   c001ba08 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cbb9:	83 c4 20             	add    esp,0x20
c001cbbc:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001cbc1:	0f b6 54 24 0e       	movzx  edx,BYTE PTR [esp+0xe]
c001cbc6:	74 11                	je     c001cbd9 <ATA::access(unsigned long long, int, void*, bool)+0x27d>
c001cbc8:	b8 30 00 00 00       	mov    eax,0x30
c001cbcd:	83 fa 02             	cmp    edx,0x2
c001cbd0:	75 16                	jne    c001cbe8 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001cbd2:	b8 34 00 00 00       	mov    eax,0x34
c001cbd7:	eb 0f                	jmp    c001cbe8 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001cbd9:	b8 20 00 00 00       	mov    eax,0x20
c001cbde:	83 fa 02             	cmp    edx,0x2
c001cbe1:	75 05                	jne    c001cbe8 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001cbe3:	b8 24 00 00 00       	mov    eax,0x24
c001cbe8:	50                   	push   eax
c001cbe9:	6a 07                	push   0x7
c001cbeb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cbf2:	50                   	push   eax
c001cbf3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cbf9:	e8 0a ee ff ff       	call   c001ba08 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cbfe:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001cc02:	83 c4 10             	add    esp,0x10
c001cc05:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001cc0a:	85 f6                	test   esi,esi
c001cc0c:	0f 84 b3 00 00 00    	je     c001ccc5 <ATA::access(unsigned long long, int, void*, bool)+0x369>
c001cc12:	50                   	push   eax
c001cc13:	6a 01                	push   0x1
c001cc15:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cc1c:	50                   	push   eax
c001cc1d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cc23:	e8 c8 f8 ff ff       	call   c001c4f0 <IDE::polling(unsigned char, unsigned int)>
c001cc28:	83 c4 10             	add    esp,0x10
c001cc2b:	0f b6 f8             	movzx  edi,al
c001cc2e:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001cc34:	85 ff                	test   edi,edi
c001cc36:	74 1d                	je     c001cc55 <ATA::access(unsigned long long, int, void*, bool)+0x2f9>
c001cc38:	57                   	push   edi
c001cc39:	0f b6 d2             	movzx  edx,dl
c001cc3c:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001cc43:	50                   	push   eax
c001cc44:	52                   	push   edx
c001cc45:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cc4b:	e8 e6 f7 ff ff       	call   c001c436 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001cc50:	e9 90 00 00 00       	jmp    c001cce5 <ATA::access(unsigned long long, int, void*, bool)+0x389>
c001cc55:	85 ed                	test   ebp,ebp
c001cc57:	74 3b                	je     c001cc94 <ATA::access(unsigned long long, int, void*, bool)+0x338>
c001cc59:	31 c9                	xor    ecx,ecx
c001cc5b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001cc5f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001cc63:	66 8b 3c 48          	mov    di,WORD PTR [eax+ecx*2]
c001cc67:	50                   	push   eax
c001cc68:	50                   	push   eax
c001cc69:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cc70:	50                   	push   eax
c001cc71:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cc77:	e8 7a ed ff ff       	call   c001b9f6 <IDE::getBase(unsigned char)>
c001cc7c:	89 c2                	mov    edx,eax
c001cc7e:	89 f8                	mov    eax,edi
c001cc80:	66 ef                	out    dx,ax
c001cc82:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001cc86:	83 c4 10             	add    esp,0x10
c001cc89:	41                   	inc    ecx
c001cc8a:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001cc90:	75 c9                	jne    c001cc5b <ATA::access(unsigned long long, int, void*, bool)+0x2ff>
c001cc92:	eb 23                	jmp    c001ccb7 <ATA::access(unsigned long long, int, void*, bool)+0x35b>
c001cc94:	0f b6 d2             	movzx  edx,dl
c001cc97:	51                   	push   ecx
c001cc98:	51                   	push   ecx
c001cc99:	52                   	push   edx
c001cc9a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cca0:	e8 51 ed ff ff       	call   c001b9f6 <IDE::getBase(unsigned char)>
c001cca5:	b9 00 01 00 00       	mov    ecx,0x100
c001ccaa:	89 c2                	mov    edx,eax
c001ccac:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001ccb0:	fc                   	cld    
c001ccb1:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001ccb4:	83 c4 10             	add    esp,0x10
c001ccb7:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001ccbf:	4e                   	dec    esi
c001ccc0:	e9 45 ff ff ff       	jmp    c001cc0a <ATA::access(unsigned long long, int, void*, bool)+0x2ae>
c001ccc5:	31 ff                	xor    edi,edi
c001ccc7:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001cccc:	74 1a                	je     c001cce8 <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c001ccce:	50                   	push   eax
c001cccf:	50                   	push   eax
c001ccd0:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001ccd5:	83 f8 02             	cmp    eax,0x2
c001ccd8:	0f 94 c0             	sete   al
c001ccdb:	0f b6 c0             	movzx  eax,al
c001ccde:	50                   	push   eax
c001ccdf:	53                   	push   ebx
c001cce0:	e8 dd fb ff ff       	call   c001c8c2 <ATA::flush(bool)>
c001cce5:	83 c4 10             	add    esp,0x10
c001cce8:	83 c4 2c             	add    esp,0x2c
c001cceb:	89 f8                	mov    eax,edi
c001cced:	5b                   	pop    ebx
c001ccee:	5e                   	pop    esi
c001ccef:	5f                   	pop    edi
c001ccf0:	5d                   	pop    ebp
c001ccf1:	c3                   	ret    

c001ccf2 <ATA::detectCHS()>:
c001ccf2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ccf6:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001ccfc:	c1 e0 06             	shl    eax,0x6
c001ccff:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001cd05:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001cd0f:	c7 44 24 04 b4 2e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022eb4
c001cd17:	e9 5d 46 ff ff       	jmp    c0011379 <KePanic(char const*)>

c001cd1c <ATA::open(int, int, void*)>:
c001cd1c:	53                   	push   ebx
c001cd1d:	83 ec 08             	sub    esp,0x8
c001cd20:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cd24:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cd28:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cd2c:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001cd32:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001cd38:	c1 e0 06             	shl    eax,0x6
c001cd3b:	01 d0                	add    eax,edx
c001cd3d:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001cd44:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001cd4a:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001cd51:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001cd5b:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001cd61:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001cd68:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001cd6f:	75 0c                	jne    c001cd7d <ATA::open(int, int, void*)+0x61>
c001cd71:	83 ec 0c             	sub    esp,0xc
c001cd74:	53                   	push   ebx
c001cd75:	e8 78 ff ff ff       	call   c001ccf2 <ATA::detectCHS()>
c001cd7a:	83 c4 10             	add    esp,0x10
c001cd7d:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001cd83:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001cd89:	c1 e0 06             	shl    eax,0x6
c001cd8c:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001cd93:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001cd9d:	d1 e8                	shr    eax,1
c001cd9f:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001cda5:	6a 04                	push   0x4
c001cda7:	6a 0c                	push   0xc
c001cda9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cdb0:	50                   	push   eax
c001cdb1:	52                   	push   edx
c001cdb2:	e8 51 ec ff ff       	call   c001ba08 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cdb7:	90                   	nop
c001cdb8:	90                   	nop
c001cdb9:	6a 00                	push   0x0
c001cdbb:	6a 0c                	push   0xc
c001cdbd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cdc4:	50                   	push   eax
c001cdc5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cdcb:	e8 38 ec ff ff       	call   c001ba08 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cdd0:	83 c4 14             	add    esp,0x14
c001cdd3:	53                   	push   ebx
c001cdd4:	e8 a5 fd fe ff       	call   c000cb7e <PhysicalDisk::startCache()>
c001cdd9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cddc:	e8 e1 0f ff ff       	call   c000ddc2 <createPartitionsForDisk(PhysicalDisk*)>
c001cde1:	31 c0                	xor    eax,eax
c001cde3:	83 c4 18             	add    esp,0x18
c001cde6:	5b                   	pop    ebx
c001cde7:	c3                   	ret    

c001cde8 <combineCharAndColour(char, unsigned char)>:
c001cde8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cded:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001cdf3:	c1 e0 08             	shl    eax,0x8
c001cdf6:	09 d0                	or     eax,edx
c001cdf8:	c3                   	ret    

c001cdf9 <combineColours(unsigned char, unsigned char)>:
c001cdf9:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cdfe:	c1 e0 04             	shl    eax,0x4
c001ce01:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001ce05:	c3                   	ret    

c001ce06 <ATA::read(unsigned long long, int, void*)>:
c001ce06:	55                   	push   ebp
c001ce07:	57                   	push   edi
c001ce08:	56                   	push   esi
c001ce09:	be 04 00 00 00       	mov    esi,0x4
c001ce0e:	53                   	push   ebx
c001ce0f:	83 ec 0c             	sub    esp,0xc
c001ce12:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001ce16:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ce1a:	8d 7b ff             	lea    edi,[ebx-0x1]
c001ce1d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ce21:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001ce25:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001ce2b:	0f 87 a1 01 00 00    	ja     c001cfd2 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001ce31:	be 06 00 00 00       	mov    esi,0x6
c001ce36:	85 c9                	test   ecx,ecx
c001ce38:	0f 84 94 01 00 00    	je     c001cfd2 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001ce3e:	55                   	push   ebp
c001ce3f:	55                   	push   ebp
c001ce40:	6a 00                	push   0x0
c001ce42:	51                   	push   ecx
c001ce43:	53                   	push   ebx
c001ce44:	52                   	push   edx
c001ce45:	50                   	push   eax
c001ce46:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ce4a:	e8 0d fb ff ff       	call   c001c95c <ATA::access(unsigned long long, int, void*, bool)>
c001ce4f:	83 c4 20             	add    esp,0x20
c001ce52:	89 c6                	mov    esi,eax
c001ce54:	85 c0                	test   eax,eax
c001ce56:	0f 85 71 01 00 00    	jne    c001cfcd <ATA::read(unsigned long long, int, void*)+0x1c7>
c001ce5c:	03 1d b4 a0 02 c0    	add    ebx,DWORD PTR ds:0xc002a0b4
c001ce62:	89 da                	mov    edx,ebx
c001ce64:	50                   	push   eax
c001ce65:	bd 10 27 00 00       	mov    ebp,0x2710
c001ce6a:	50                   	push   eax
c001ce6b:	89 1d b4 a0 02 c0    	mov    DWORD PTR ds:0xc002a0b4,ebx
c001ce71:	6a 0f                	push   0xf
c001ce73:	6a 00                	push   0x0
c001ce75:	e8 7f ff ff ff       	call   c001cdf9 <combineColours(unsigned char, unsigned char)>
c001ce7a:	59                   	pop    ecx
c001ce7b:	b9 0a 00 00 00       	mov    ecx,0xa
c001ce80:	5b                   	pop    ebx
c001ce81:	0f b6 d8             	movzx  ebx,al
c001ce84:	89 d0                	mov    eax,edx
c001ce86:	53                   	push   ebx
c001ce87:	99                   	cdq    
c001ce88:	f7 fd                	idiv   ebp
c001ce8a:	99                   	cdq    
c001ce8b:	f7 f9                	idiv   ecx
c001ce8d:	83 c2 30             	add    edx,0x30
c001ce90:	0f b6 d2             	movzx  edx,dl
c001ce93:	52                   	push   edx
c001ce94:	e8 4f ff ff ff       	call   c001cde8 <combineCharAndColour(char, unsigned char)>
c001ce99:	5f                   	pop    edi
c001ce9a:	bf e8 03 00 00       	mov    edi,0x3e8
c001ce9f:	5a                   	pop    edx
c001cea0:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001cea6:	53                   	push   ebx
c001cea7:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001ceac:	99                   	cdq    
c001cead:	f7 ff                	idiv   edi
c001ceaf:	99                   	cdq    
c001ceb0:	f7 f9                	idiv   ecx
c001ceb2:	8d 42 30             	lea    eax,[edx+0x30]
c001ceb5:	0f b6 c0             	movzx  eax,al
c001ceb8:	50                   	push   eax
c001ceb9:	e8 2a ff ff ff       	call   c001cde8 <combineCharAndColour(char, unsigned char)>
c001cebe:	5f                   	pop    edi
c001cebf:	bf 64 00 00 00       	mov    edi,0x64
c001cec4:	5a                   	pop    edx
c001cec5:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001cecb:	53                   	push   ebx
c001cecc:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001ced1:	99                   	cdq    
c001ced2:	f7 ff                	idiv   edi
c001ced4:	99                   	cdq    
c001ced5:	f7 f9                	idiv   ecx
c001ced7:	8d 42 30             	lea    eax,[edx+0x30]
c001ceda:	0f b6 c0             	movzx  eax,al
c001cedd:	50                   	push   eax
c001cede:	e8 05 ff ff ff       	call   c001cde8 <combineCharAndColour(char, unsigned char)>
c001cee3:	5a                   	pop    edx
c001cee4:	5a                   	pop    edx
c001cee5:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001ceeb:	53                   	push   ebx
c001ceec:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cef1:	99                   	cdq    
c001cef2:	f7 f9                	idiv   ecx
c001cef4:	99                   	cdq    
c001cef5:	f7 f9                	idiv   ecx
c001cef7:	8d 42 30             	lea    eax,[edx+0x30]
c001cefa:	0f b6 c0             	movzx  eax,al
c001cefd:	50                   	push   eax
c001cefe:	e8 e5 fe ff ff       	call   c001cde8 <combineCharAndColour(char, unsigned char)>
c001cf03:	5a                   	pop    edx
c001cf04:	5a                   	pop    edx
c001cf05:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001cf0b:	53                   	push   ebx
c001cf0c:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cf11:	99                   	cdq    
c001cf12:	f7 f9                	idiv   ecx
c001cf14:	83 c2 30             	add    edx,0x30
c001cf17:	0f b6 d2             	movzx  edx,dl
c001cf1a:	52                   	push   edx
c001cf1b:	e8 c8 fe ff ff       	call   c001cde8 <combineCharAndColour(char, unsigned char)>
c001cf20:	5a                   	pop    edx
c001cf21:	5a                   	pop    edx
c001cf22:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001cf28:	53                   	push   ebx
c001cf29:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cf2e:	99                   	cdq    
c001cf2f:	f7 fd                	idiv   ebp
c001cf31:	99                   	cdq    
c001cf32:	f7 f9                	idiv   ecx
c001cf34:	8d 42 30             	lea    eax,[edx+0x30]
c001cf37:	0f b6 c0             	movzx  eax,al
c001cf3a:	50                   	push   eax
c001cf3b:	e8 a8 fe ff ff       	call   c001cde8 <combineCharAndColour(char, unsigned char)>
c001cf40:	5d                   	pop    ebp
c001cf41:	bd e8 03 00 00       	mov    ebp,0x3e8
c001cf46:	5a                   	pop    edx
c001cf47:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001cf4d:	53                   	push   ebx
c001cf4e:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cf53:	99                   	cdq    
c001cf54:	f7 fd                	idiv   ebp
c001cf56:	99                   	cdq    
c001cf57:	f7 f9                	idiv   ecx
c001cf59:	8d 42 30             	lea    eax,[edx+0x30]
c001cf5c:	0f b6 c0             	movzx  eax,al
c001cf5f:	50                   	push   eax
c001cf60:	e8 83 fe ff ff       	call   c001cde8 <combineCharAndColour(char, unsigned char)>
c001cf65:	5d                   	pop    ebp
c001cf66:	5a                   	pop    edx
c001cf67:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001cf6d:	53                   	push   ebx
c001cf6e:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cf73:	99                   	cdq    
c001cf74:	f7 ff                	idiv   edi
c001cf76:	99                   	cdq    
c001cf77:	f7 f9                	idiv   ecx
c001cf79:	8d 42 30             	lea    eax,[edx+0x30]
c001cf7c:	0f b6 c0             	movzx  eax,al
c001cf7f:	50                   	push   eax
c001cf80:	e8 63 fe ff ff       	call   c001cde8 <combineCharAndColour(char, unsigned char)>
c001cf85:	5f                   	pop    edi
c001cf86:	5d                   	pop    ebp
c001cf87:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001cf8d:	53                   	push   ebx
c001cf8e:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cf93:	99                   	cdq    
c001cf94:	f7 f9                	idiv   ecx
c001cf96:	99                   	cdq    
c001cf97:	f7 f9                	idiv   ecx
c001cf99:	8d 42 30             	lea    eax,[edx+0x30]
c001cf9c:	0f b6 c0             	movzx  eax,al
c001cf9f:	50                   	push   eax
c001cfa0:	e8 43 fe ff ff       	call   c001cde8 <combineCharAndColour(char, unsigned char)>
c001cfa5:	5a                   	pop    edx
c001cfa6:	5f                   	pop    edi
c001cfa7:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001cfad:	53                   	push   ebx
c001cfae:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cfb3:	99                   	cdq    
c001cfb4:	f7 f9                	idiv   ecx
c001cfb6:	83 c2 30             	add    edx,0x30
c001cfb9:	0f b6 d2             	movzx  edx,dl
c001cfbc:	52                   	push   edx
c001cfbd:	e8 26 fe ff ff       	call   c001cde8 <combineCharAndColour(char, unsigned char)>
c001cfc2:	83 c4 10             	add    esp,0x10
c001cfc5:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001cfcb:	eb 05                	jmp    c001cfd2 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001cfcd:	be 01 00 00 00       	mov    esi,0x1
c001cfd2:	83 c4 0c             	add    esp,0xc
c001cfd5:	89 f0                	mov    eax,esi
c001cfd7:	5b                   	pop    ebx
c001cfd8:	5e                   	pop    esi
c001cfd9:	5f                   	pop    edi
c001cfda:	5d                   	pop    ebp
c001cfdb:	c3                   	ret    

c001cfdc <ATA::write(unsigned long long, int, void*)>:
c001cfdc:	55                   	push   ebp
c001cfdd:	57                   	push   edi
c001cfde:	56                   	push   esi
c001cfdf:	be 04 00 00 00       	mov    esi,0x4
c001cfe4:	53                   	push   ebx
c001cfe5:	83 ec 0c             	sub    esp,0xc
c001cfe8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cfec:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cff0:	8d 7b ff             	lea    edi,[ebx-0x1]
c001cff3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cff7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cffb:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001d001:	0f 87 9c 01 00 00    	ja     c001d1a3 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d007:	be 06 00 00 00       	mov    esi,0x6
c001d00c:	85 c9                	test   ecx,ecx
c001d00e:	0f 84 8f 01 00 00    	je     c001d1a3 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d014:	55                   	push   ebp
c001d015:	55                   	push   ebp
c001d016:	6a 01                	push   0x1
c001d018:	51                   	push   ecx
c001d019:	53                   	push   ebx
c001d01a:	52                   	push   edx
c001d01b:	50                   	push   eax
c001d01c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d020:	e8 37 f9 ff ff       	call   c001c95c <ATA::access(unsigned long long, int, void*, bool)>
c001d025:	83 c4 20             	add    esp,0x20
c001d028:	89 c6                	mov    esi,eax
c001d02a:	85 c0                	test   eax,eax
c001d02c:	0f 85 6c 01 00 00    	jne    c001d19e <ATA::write(unsigned long long, int, void*)+0x1c2>
c001d032:	01 1d b0 a0 02 c0    	add    DWORD PTR ds:0xc002a0b0,ebx
c001d038:	bd 10 27 00 00       	mov    ebp,0x2710
c001d03d:	50                   	push   eax
c001d03e:	50                   	push   eax
c001d03f:	6a 0f                	push   0xf
c001d041:	6a 00                	push   0x0
c001d043:	e8 b1 fd ff ff       	call   c001cdf9 <combineColours(unsigned char, unsigned char)>
c001d048:	5a                   	pop    edx
c001d049:	0f b6 d8             	movzx  ebx,al
c001d04c:	59                   	pop    ecx
c001d04d:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001d052:	53                   	push   ebx
c001d053:	b9 0a 00 00 00       	mov    ecx,0xa
c001d058:	99                   	cdq    
c001d059:	f7 fd                	idiv   ebp
c001d05b:	99                   	cdq    
c001d05c:	f7 f9                	idiv   ecx
c001d05e:	8d 42 30             	lea    eax,[edx+0x30]
c001d061:	0f b6 c0             	movzx  eax,al
c001d064:	50                   	push   eax
c001d065:	e8 7e fd ff ff       	call   c001cde8 <combineCharAndColour(char, unsigned char)>
c001d06a:	5f                   	pop    edi
c001d06b:	bf e8 03 00 00       	mov    edi,0x3e8
c001d070:	5a                   	pop    edx
c001d071:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d077:	53                   	push   ebx
c001d078:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001d07d:	99                   	cdq    
c001d07e:	f7 ff                	idiv   edi
c001d080:	99                   	cdq    
c001d081:	f7 f9                	idiv   ecx
c001d083:	8d 42 30             	lea    eax,[edx+0x30]
c001d086:	0f b6 c0             	movzx  eax,al
c001d089:	50                   	push   eax
c001d08a:	e8 59 fd ff ff       	call   c001cde8 <combineCharAndColour(char, unsigned char)>
c001d08f:	5f                   	pop    edi
c001d090:	bf 64 00 00 00       	mov    edi,0x64
c001d095:	5a                   	pop    edx
c001d096:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d09c:	53                   	push   ebx
c001d09d:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001d0a2:	99                   	cdq    
c001d0a3:	f7 ff                	idiv   edi
c001d0a5:	99                   	cdq    
c001d0a6:	f7 f9                	idiv   ecx
c001d0a8:	8d 42 30             	lea    eax,[edx+0x30]
c001d0ab:	0f b6 c0             	movzx  eax,al
c001d0ae:	50                   	push   eax
c001d0af:	e8 34 fd ff ff       	call   c001cde8 <combineCharAndColour(char, unsigned char)>
c001d0b4:	5a                   	pop    edx
c001d0b5:	5a                   	pop    edx
c001d0b6:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d0bc:	53                   	push   ebx
c001d0bd:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001d0c2:	99                   	cdq    
c001d0c3:	f7 f9                	idiv   ecx
c001d0c5:	99                   	cdq    
c001d0c6:	f7 f9                	idiv   ecx
c001d0c8:	8d 42 30             	lea    eax,[edx+0x30]
c001d0cb:	0f b6 c0             	movzx  eax,al
c001d0ce:	50                   	push   eax
c001d0cf:	e8 14 fd ff ff       	call   c001cde8 <combineCharAndColour(char, unsigned char)>
c001d0d4:	5a                   	pop    edx
c001d0d5:	5a                   	pop    edx
c001d0d6:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d0dc:	53                   	push   ebx
c001d0dd:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001d0e2:	99                   	cdq    
c001d0e3:	f7 f9                	idiv   ecx
c001d0e5:	8d 42 30             	lea    eax,[edx+0x30]
c001d0e8:	0f b6 c0             	movzx  eax,al
c001d0eb:	50                   	push   eax
c001d0ec:	e8 f7 fc ff ff       	call   c001cde8 <combineCharAndColour(char, unsigned char)>
c001d0f1:	5a                   	pop    edx
c001d0f2:	5a                   	pop    edx
c001d0f3:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d0f9:	53                   	push   ebx
c001d0fa:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001d0ff:	99                   	cdq    
c001d100:	f7 fd                	idiv   ebp
c001d102:	99                   	cdq    
c001d103:	f7 f9                	idiv   ecx
c001d105:	8d 42 30             	lea    eax,[edx+0x30]
c001d108:	0f b6 c0             	movzx  eax,al
c001d10b:	50                   	push   eax
c001d10c:	e8 d7 fc ff ff       	call   c001cde8 <combineCharAndColour(char, unsigned char)>
c001d111:	5d                   	pop    ebp
c001d112:	bd e8 03 00 00       	mov    ebp,0x3e8
c001d117:	5a                   	pop    edx
c001d118:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d11e:	53                   	push   ebx
c001d11f:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001d124:	99                   	cdq    
c001d125:	f7 fd                	idiv   ebp
c001d127:	99                   	cdq    
c001d128:	f7 f9                	idiv   ecx
c001d12a:	8d 42 30             	lea    eax,[edx+0x30]
c001d12d:	0f b6 c0             	movzx  eax,al
c001d130:	50                   	push   eax
c001d131:	e8 b2 fc ff ff       	call   c001cde8 <combineCharAndColour(char, unsigned char)>
c001d136:	5d                   	pop    ebp
c001d137:	5a                   	pop    edx
c001d138:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d13e:	53                   	push   ebx
c001d13f:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001d144:	99                   	cdq    
c001d145:	f7 ff                	idiv   edi
c001d147:	99                   	cdq    
c001d148:	f7 f9                	idiv   ecx
c001d14a:	8d 42 30             	lea    eax,[edx+0x30]
c001d14d:	0f b6 c0             	movzx  eax,al
c001d150:	50                   	push   eax
c001d151:	e8 92 fc ff ff       	call   c001cde8 <combineCharAndColour(char, unsigned char)>
c001d156:	5f                   	pop    edi
c001d157:	5d                   	pop    ebp
c001d158:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d15e:	53                   	push   ebx
c001d15f:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001d164:	99                   	cdq    
c001d165:	f7 f9                	idiv   ecx
c001d167:	99                   	cdq    
c001d168:	f7 f9                	idiv   ecx
c001d16a:	8d 42 30             	lea    eax,[edx+0x30]
c001d16d:	0f b6 c0             	movzx  eax,al
c001d170:	50                   	push   eax
c001d171:	e8 72 fc ff ff       	call   c001cde8 <combineCharAndColour(char, unsigned char)>
c001d176:	5a                   	pop    edx
c001d177:	5f                   	pop    edi
c001d178:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d17e:	53                   	push   ebx
c001d17f:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001d184:	99                   	cdq    
c001d185:	f7 f9                	idiv   ecx
c001d187:	83 c2 30             	add    edx,0x30
c001d18a:	0f b6 d2             	movzx  edx,dl
c001d18d:	52                   	push   edx
c001d18e:	e8 55 fc ff ff       	call   c001cde8 <combineCharAndColour(char, unsigned char)>
c001d193:	83 c4 10             	add    esp,0x10
c001d196:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d19c:	eb 05                	jmp    c001d1a3 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d19e:	be 01 00 00 00       	mov    esi,0x1
c001d1a3:	83 c4 0c             	add    esp,0xc
c001d1a6:	89 f0                	mov    eax,esi
c001d1a8:	5b                   	pop    ebx
c001d1a9:	5e                   	pop    esi
c001d1aa:	5f                   	pop    edi
c001d1ab:	5d                   	pop    ebp
c001d1ac:	c3                   	ret    
c001d1ad:	90                   	nop

c001d1ae <ATAPI::write(unsigned long long, int, void*)>:
c001d1ae:	b8 03 00 00 00       	mov    eax,0x3
c001d1b3:	c3                   	ret    

c001d1b4 <ATAPI::close(int, int, void*)>:
c001d1b4:	83 ec 0c             	sub    esp,0xc
c001d1b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1bb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d1c1:	85 c0                	test   eax,eax
c001d1c3:	74 0c                	je     c001d1d1 <ATAPI::close(int, int, void*)+0x1d>
c001d1c5:	83 ec 0c             	sub    esp,0xc
c001d1c8:	8b 10                	mov    edx,DWORD PTR [eax]
c001d1ca:	50                   	push   eax
c001d1cb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d1ce:	83 c4 10             	add    esp,0x10
c001d1d1:	31 c0                	xor    eax,eax
c001d1d3:	83 c4 0c             	add    esp,0xc
c001d1d6:	c3                   	ret    
c001d1d7:	90                   	nop

c001d1d8 <ATAPI::ATAPI()>:
c001d1d8:	83 ec 0c             	sub    esp,0xc
c001d1db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1df:	83 ec 04             	sub    esp,0x4
c001d1e2:	68 00 08 00 00       	push   0x800
c001d1e7:	68 fd 2f 02 c0       	push   0xc0022ffd
c001d1ec:	50                   	push   eax
c001d1ed:	e8 24 f9 fe ff       	call   c000cb16 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d1f2:	83 c4 10             	add    esp,0x10
c001d1f5:	ba 18 2f 02 c0       	mov    edx,0xc0022f18
c001d1fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1fe:	89 10                	mov    DWORD PTR [eax],edx
c001d200:	90                   	nop
c001d201:	83 c4 0c             	add    esp,0xc
c001d204:	c3                   	ret    
c001d205:	90                   	nop

c001d206 <ATAPI::readyForCommand()>:
c001d206:	56                   	push   esi
c001d207:	53                   	push   ebx
c001d208:	53                   	push   ebx
c001d209:	31 db                	xor    ebx,ebx
c001d20b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d20f:	51                   	push   ecx
c001d210:	6a 0c                	push   0xc
c001d212:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001d219:	50                   	push   eax
c001d21a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001d220:	e8 a3 e8 ff ff       	call   c001bac8 <IDE::read(unsigned char, unsigned char)>
c001d225:	83 c4 10             	add    esp,0x10
c001d228:	a8 88                	test   al,0x88
c001d22a:	74 25                	je     c001d251 <ATAPI::readyForCommand()+0x4b>
c001d22c:	43                   	inc    ebx
c001d22d:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001d233:	7e da                	jle    c001d20f <ATAPI::readyForCommand()+0x9>
c001d235:	83 ec 0c             	sub    esp,0xc
c001d238:	68 5e 01 00 00       	push   0x15e
c001d23d:	e8 2a 8e ff ff       	call   c001606c <milliTenthSleep(unsigned int)>
c001d242:	83 c4 10             	add    esp,0x10
c001d245:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001d24b:	75 c2                	jne    c001d20f <ATAPI::readyForCommand()+0x9>
c001d24d:	31 c0                	xor    eax,eax
c001d24f:	eb 02                	jmp    c001d253 <ATAPI::readyForCommand()+0x4d>
c001d251:	b0 01                	mov    al,0x1
c001d253:	5a                   	pop    edx
c001d254:	5b                   	pop    ebx
c001d255:	5e                   	pop    esi
c001d256:	c3                   	ret    
c001d257:	90                   	nop

c001d258 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001d258:	55                   	push   ebp
c001d259:	57                   	push   edi
c001d25a:	56                   	push   esi
c001d25b:	53                   	push   ebx
c001d25c:	83 ec 20             	sub    esp,0x20
c001d25f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d263:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001d267:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001d26b:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001d26f:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001d273:	6a 01                	push   0x1
c001d275:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d27c:	50                   	push   eax
c001d27d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d283:	e8 88 e9 ff ff       	call   c001bc10 <IDE::enableIRQs(unsigned char, bool)>
c001d288:	5e                   	pop    esi
c001d289:	58                   	pop    eax
c001d28a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d291:	50                   	push   eax
c001d292:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d298:	e8 45 e7 ff ff       	call   c001b9e2 <IDE::prepareInterrupt(unsigned char)>
c001d29d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d2a0:	e8 61 ff ff ff       	call   c001d206 <ATAPI::readyForCommand()>
c001d2a5:	83 c4 10             	add    esp,0x10
c001d2a8:	84 c0                	test   al,al
c001d2aa:	75 0a                	jne    c001d2b6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001d2ac:	bb 01 00 00 00       	mov    ebx,0x1
c001d2b1:	e9 60 02 00 00       	jmp    c001d516 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001d2b6:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001d2bc:	c1 e0 04             	shl    eax,0x4
c001d2bf:	0f b6 c0             	movzx  eax,al
c001d2c2:	50                   	push   eax
c001d2c3:	6a 06                	push   0x6
c001d2c5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d2cc:	50                   	push   eax
c001d2cd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d2d3:	e8 30 e7 ff ff       	call   c001ba08 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d2d8:	6a 00                	push   0x0
c001d2da:	6a 01                	push   0x1
c001d2dc:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d2e3:	50                   	push   eax
c001d2e4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d2ea:	e8 19 e7 ff ff       	call   c001ba08 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d2ef:	83 c4 20             	add    esp,0x20
c001d2f2:	0f b6 c3             	movzx  eax,bl
c001d2f5:	0f b6 df             	movzx  ebx,bh
c001d2f8:	50                   	push   eax
c001d2f9:	6a 04                	push   0x4
c001d2fb:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d302:	50                   	push   eax
c001d303:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d309:	e8 fa e6 ff ff       	call   c001ba08 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d30e:	53                   	push   ebx
c001d30f:	6a 05                	push   0x5
c001d311:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d318:	50                   	push   eax
c001d319:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d31f:	e8 e4 e6 ff ff       	call   c001ba08 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d324:	83 c4 20             	add    esp,0x20
c001d327:	68 a0 00 00 00       	push   0xa0
c001d32c:	6a 07                	push   0x7
c001d32e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d335:	50                   	push   eax
c001d336:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d33c:	e8 c7 e6 ff ff       	call   c001ba08 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d341:	83 c4 0c             	add    esp,0xc
c001d344:	6a 01                	push   0x1
c001d346:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d34d:	50                   	push   eax
c001d34e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d354:	e8 97 f1 ff ff       	call   c001c4f0 <IDE::polling(unsigned char, unsigned int)>
c001d359:	83 c4 10             	add    esp,0x10
c001d35c:	0f b6 d8             	movzx  ebx,al
c001d35f:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001d365:	85 db                	test   ebx,ebx
c001d367:	74 20                	je     c001d389 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001d369:	53                   	push   ebx
c001d36a:	0f b6 c0             	movzx  eax,al
c001d36d:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001d374:	52                   	push   edx
c001d375:	50                   	push   eax
c001d376:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d37c:	e8 b5 f0 ff ff       	call   c001c436 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d381:	83 c4 10             	add    esp,0x10
c001d384:	e9 8d 01 00 00       	jmp    c001d516 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001d389:	0f b6 c0             	movzx  eax,al
c001d38c:	53                   	push   ebx
c001d38d:	53                   	push   ebx
c001d38e:	50                   	push   eax
c001d38f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d395:	e8 5c e6 ff ff       	call   c001b9f6 <IDE::getBase(unsigned char)>
c001d39a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d39e:	b9 06 00 00 00       	mov    ecx,0x6
c001d3a3:	89 c2                	mov    edx,eax
c001d3a5:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001d3a8:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001d3ac:	83 c4 10             	add    esp,0x10
c001d3af:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001d3b4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d3b8:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d3be:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d3c5:	85 db                	test   ebx,ebx
c001d3c7:	0f 84 ec 00 00 00    	je     c001d4b9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x261>
c001d3cd:	51                   	push   ecx
c001d3ce:	51                   	push   ecx
c001d3cf:	52                   	push   edx
c001d3d0:	50                   	push   eax
c001d3d1:	e8 a0 e7 ff ff       	call   c001bb76 <IDE::waitInterrupt(unsigned char)>
c001d3d6:	83 c4 10             	add    esp,0x10
c001d3d9:	84 c0                	test   al,al
c001d3db:	0f 84 cb fe ff ff    	je     c001d2ac <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001d3e1:	56                   	push   esi
c001d3e2:	56                   	push   esi
c001d3e3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d3ea:	50                   	push   eax
c001d3eb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d3f1:	e8 ec e5 ff ff       	call   c001b9e2 <IDE::prepareInterrupt(unsigned char)>
c001d3f6:	83 c4 0c             	add    esp,0xc
c001d3f9:	6a 04                	push   0x4
c001d3fb:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d402:	50                   	push   eax
c001d403:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d409:	e8 ba e6 ff ff       	call   c001bac8 <IDE::read(unsigned char, unsigned char)>
c001d40e:	83 c4 0c             	add    esp,0xc
c001d411:	89 c6                	mov    esi,eax
c001d413:	6a 05                	push   0x5
c001d415:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d41c:	50                   	push   eax
c001d41d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d423:	e8 a0 e6 ff ff       	call   c001bac8 <IDE::read(unsigned char, unsigned char)>
c001d428:	89 f1                	mov    ecx,esi
c001d42a:	0f b6 c0             	movzx  eax,al
c001d42d:	0f b6 f1             	movzx  esi,cl
c001d430:	c1 e0 08             	shl    eax,0x8
c001d433:	09 c6                	or     esi,eax
c001d435:	d1 fe                	sar    esi,1
c001d437:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001d43b:	83 c4 10             	add    esp,0x10
c001d43e:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001d443:	74 41                	je     c001d486 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x22e>
c001d445:	31 c9                	xor    ecx,ecx
c001d447:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d44d:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d454:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001d458:	75 0a                	jne    c001d464 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x20c>
c001d45a:	01 c9                	add    ecx,ecx
c001d45c:	01 cd                	add    ebp,ecx
c001d45e:	4b                   	dec    ebx
c001d45f:	e9 54 ff ff ff       	jmp    c001d3b8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x160>
c001d464:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001d469:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d46d:	51                   	push   ecx
c001d46e:	51                   	push   ecx
c001d46f:	52                   	push   edx
c001d470:	50                   	push   eax
c001d471:	e8 80 e5 ff ff       	call   c001b9f6 <IDE::getBase(unsigned char)>
c001d476:	89 c2                	mov    edx,eax
c001d478:	89 f0                	mov    eax,esi
c001d47a:	66 ef                	out    dx,ax
c001d47c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d480:	83 c4 10             	add    esp,0x10
c001d483:	41                   	inc    ecx
c001d484:	eb c1                	jmp    c001d447 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1ef>
c001d486:	31 f6                	xor    esi,esi
c001d488:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d48e:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d495:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001d499:	75 06                	jne    c001d4a1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x249>
c001d49b:	01 f6                	add    esi,esi
c001d49d:	01 f5                	add    ebp,esi
c001d49f:	eb bd                	jmp    c001d45e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x206>
c001d4a1:	51                   	push   ecx
c001d4a2:	51                   	push   ecx
c001d4a3:	52                   	push   edx
c001d4a4:	50                   	push   eax
c001d4a5:	e8 4c e5 ff ff       	call   c001b9f6 <IDE::getBase(unsigned char)>
c001d4aa:	89 c2                	mov    edx,eax
c001d4ac:	66 ed                	in     ax,dx
c001d4ae:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001d4b3:	83 c4 10             	add    esp,0x10
c001d4b6:	46                   	inc    esi
c001d4b7:	eb cf                	jmp    c001d488 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x230>
c001d4b9:	51                   	push   ecx
c001d4ba:	51                   	push   ecx
c001d4bb:	52                   	push   edx
c001d4bc:	50                   	push   eax
c001d4bd:	e8 b4 e6 ff ff       	call   c001bb76 <IDE::waitInterrupt(unsigned char)>
c001d4c2:	83 c4 10             	add    esp,0x10
c001d4c5:	84 c0                	test   al,al
c001d4c7:	0f 84 df fd ff ff    	je     c001d2ac <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001d4cd:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d4d2:	52                   	push   edx
c001d4d3:	52                   	push   edx
c001d4d4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d4db:	50                   	push   eax
c001d4dc:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d4e2:	e8 fb e4 ff ff       	call   c001b9e2 <IDE::prepareInterrupt(unsigned char)>
c001d4e7:	83 c4 10             	add    esp,0x10
c001d4ea:	50                   	push   eax
c001d4eb:	50                   	push   eax
c001d4ec:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d4f3:	50                   	push   eax
c001d4f4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d4fa:	e8 f7 e4 ff ff       	call   c001b9f6 <IDE::getBase(unsigned char)>
c001d4ff:	8d 50 07             	lea    edx,[eax+0x7]
c001d502:	ec                   	in     al,dx
c001d503:	83 c4 10             	add    esp,0x10
c001d506:	a8 88                	test   al,0x88
c001d508:	74 0a                	je     c001d514 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2bc>
c001d50a:	4b                   	dec    ebx
c001d50b:	75 dd                	jne    c001d4ea <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x292>
c001d50d:	bb 02 00 00 00       	mov    ebx,0x2
c001d512:	eb 02                	jmp    c001d516 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001d514:	31 db                	xor    ebx,ebx
c001d516:	83 c4 1c             	add    esp,0x1c
c001d519:	89 d8                	mov    eax,ebx
c001d51b:	5b                   	pop    ebx
c001d51c:	5e                   	pop    esi
c001d51d:	5f                   	pop    edi
c001d51e:	5d                   	pop    ebp
c001d51f:	c3                   	ret    

c001d520 <ATAPI::diskRemoved()>:
c001d520:	53                   	push   ebx
c001d521:	83 ec 14             	sub    esp,0x14
c001d524:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d528:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d52f:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001d535:	e8 78 05 ff ff       	call   c000dab2 <LogicalDisk::unmount()>
c001d53a:	58                   	pop    eax
c001d53b:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d541:	e8 4e 0f ff ff       	call   c000e494 <VCache::writeWriteBuffer()>
c001d546:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001d54c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d550:	83 c4 18             	add    esp,0x18
c001d553:	5b                   	pop    ebx
c001d554:	e9 2b 0f ff ff       	jmp    c000e484 <VCache::invalidateReadBuffer()>
c001d559:	90                   	nop

c001d55a <ATAPI::eject()>:
c001d55a:	57                   	push   edi
c001d55b:	b9 03 00 00 00       	mov    ecx,0x3
c001d560:	53                   	push   ebx
c001d561:	83 ec 14             	sub    esp,0x14
c001d564:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d568:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d56c:	fc                   	cld    
c001d56d:	31 c0                	xor    eax,eax
c001d56f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d571:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d576:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d57b:	50                   	push   eax
c001d57c:	50                   	push   eax
c001d57d:	6a 00                	push   0x0
c001d57f:	6a 00                	push   0x0
c001d581:	6a 00                	push   0x0
c001d583:	6a 02                	push   0x2
c001d585:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d589:	50                   	push   eax
c001d58a:	53                   	push   ebx
c001d58b:	e8 c8 fc ff ff       	call   c001d258 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d590:	83 c4 14             	add    esp,0x14
c001d593:	53                   	push   ebx
c001d594:	e8 87 ff ff ff       	call   c001d520 <ATAPI::diskRemoved()>
c001d599:	83 c4 24             	add    esp,0x24
c001d59c:	31 c0                	xor    eax,eax
c001d59e:	5b                   	pop    ebx
c001d59f:	5f                   	pop    edi
c001d5a0:	c3                   	ret    
c001d5a1:	90                   	nop

c001d5a2 <ATAPI::diskInserted()>:
c001d5a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d5a6:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001d5ad:	c3                   	ret    

c001d5ae <ATAPI::detectMedia()>:
c001d5ae:	56                   	push   esi
c001d5af:	53                   	push   ebx
c001d5b0:	83 ec 28             	sub    esp,0x28
c001d5b3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d5b7:	6a 0c                	push   0xc
c001d5b9:	6a 00                	push   0x0
c001d5bb:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001d5bf:	56                   	push   esi
c001d5c0:	e8 2b 2f fe ff       	call   c00004f0 <memset>
c001d5c5:	58                   	pop    eax
c001d5c6:	5a                   	pop    edx
c001d5c7:	6a 00                	push   0x0
c001d5c9:	6a 00                	push   0x0
c001d5cb:	6a 00                	push   0x0
c001d5cd:	6a 00                	push   0x0
c001d5cf:	56                   	push   esi
c001d5d0:	53                   	push   ebx
c001d5d1:	e8 82 fc ff ff       	call   c001d258 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d5d6:	83 c4 1c             	add    esp,0x1c
c001d5d9:	6a 0c                	push   0xc
c001d5db:	6a 00                	push   0x0
c001d5dd:	56                   	push   esi
c001d5de:	e8 0d 2f fe ff       	call   c00004f0 <memset>
c001d5e3:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001d5e8:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001d5ed:	59                   	pop    ecx
c001d5ee:	58                   	pop    eax
c001d5ef:	6a 01                	push   0x1
c001d5f1:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001d5f5:	50                   	push   eax
c001d5f6:	6a 00                	push   0x0
c001d5f8:	6a 12                	push   0x12
c001d5fa:	56                   	push   esi
c001d5fb:	53                   	push   ebx
c001d5fc:	e8 57 fc ff ff       	call   c001d258 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d601:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001d605:	83 c4 20             	add    esp,0x20
c001d608:	83 e0 7f             	and    eax,0x7f
c001d60b:	83 f8 70             	cmp    eax,0x70
c001d60e:	74 15                	je     c001d625 <ATAPI::detectMedia()+0x77>
c001d610:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d617:	75 0c                	jne    c001d625 <ATAPI::detectMedia()+0x77>
c001d619:	83 ec 0c             	sub    esp,0xc
c001d61c:	53                   	push   ebx
c001d61d:	e8 80 ff ff ff       	call   c001d5a2 <ATAPI::diskInserted()>
c001d622:	83 c4 10             	add    esp,0x10
c001d625:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001d629:	83 e0 0f             	and    eax,0xf
c001d62c:	83 f8 02             	cmp    eax,0x2
c001d62f:	75 1b                	jne    c001d64c <ATAPI::detectMedia()+0x9e>
c001d631:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001d636:	75 2d                	jne    c001d665 <ATAPI::detectMedia()+0xb7>
c001d638:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d63f:	74 24                	je     c001d665 <ATAPI::detectMedia()+0xb7>
c001d641:	83 ec 0c             	sub    esp,0xc
c001d644:	53                   	push   ebx
c001d645:	e8 d6 fe ff ff       	call   c001d520 <ATAPI::diskRemoved()>
c001d64a:	eb 16                	jmp    c001d662 <ATAPI::detectMedia()+0xb4>
c001d64c:	85 c0                	test   eax,eax
c001d64e:	75 15                	jne    c001d665 <ATAPI::detectMedia()+0xb7>
c001d650:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d657:	75 0c                	jne    c001d665 <ATAPI::detectMedia()+0xb7>
c001d659:	83 ec 0c             	sub    esp,0xc
c001d65c:	53                   	push   ebx
c001d65d:	e8 40 ff ff ff       	call   c001d5a2 <ATAPI::diskInserted()>
c001d662:	83 c4 10             	add    esp,0x10
c001d665:	83 c4 24             	add    esp,0x24
c001d668:	5b                   	pop    ebx
c001d669:	5e                   	pop    esi
c001d66a:	c3                   	ret    
c001d66b:	90                   	nop

c001d66c <ATAPI::open(int, int, void*)>:
c001d66c:	56                   	push   esi
c001d66d:	53                   	push   ebx
c001d66e:	50                   	push   eax
c001d66f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d673:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d677:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d67b:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d681:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d687:	c1 e0 06             	shl    eax,0x6
c001d68a:	01 d0                	add    eax,edx
c001d68c:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001d693:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001d699:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001d6a0:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001d6aa:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001d6b0:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001d6b7:	6a 04                	push   0x4
c001d6b9:	6a 0c                	push   0xc
c001d6bb:	51                   	push   ecx
c001d6bc:	52                   	push   edx
c001d6bd:	e8 46 e3 ff ff       	call   c001ba08 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d6c2:	90                   	nop
c001d6c3:	90                   	nop
c001d6c4:	6a 00                	push   0x0
c001d6c6:	6a 0c                	push   0xc
c001d6c8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d6cf:	50                   	push   eax
c001d6d0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d6d6:	e8 2d e3 ff ff       	call   c001ba08 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d6db:	83 c4 14             	add    esp,0x14
c001d6de:	68 78 01 00 00       	push   0x178
c001d6e3:	e8 ce a3 fe ff       	call   c0007ab6 <malloc>
c001d6e8:	83 c4 0c             	add    esp,0xc
c001d6eb:	89 c6                	mov    esi,eax
c001d6ed:	6a 00                	push   0x0
c001d6ef:	68 ff ff ff 7f       	push   0x7fffffff
c001d6f4:	6a 00                	push   0x0
c001d6f6:	6a 00                	push   0x0
c001d6f8:	53                   	push   ebx
c001d6f9:	68 af 30 02 c0       	push   0xc00230af
c001d6fe:	50                   	push   eax
c001d6ff:	e8 ec 01 ff ff       	call   c000d8f0 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001d704:	83 c4 14             	add    esp,0x14
c001d707:	56                   	push   esi
c001d708:	e8 a3 02 ff ff       	call   c000d9b0 <LogicalDisk::assignDriveLetter()>
c001d70d:	5a                   	pop    edx
c001d70e:	0f be c0             	movsx  eax,al
c001d711:	59                   	pop    ecx
c001d712:	50                   	push   eax
c001d713:	68 00 2f 02 c0       	push   0xc0022f00
c001d718:	e8 28 d2 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001d71d:	58                   	pop    eax
c001d71e:	5a                   	pop    edx
c001d71f:	56                   	push   esi
c001d720:	53                   	push   ebx
c001d721:	e8 24 f0 fe ff       	call   c000c74a <Device::addChild(Device*)>
c001d726:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001d72c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d72f:	e8 4a f4 fe ff       	call   c000cb7e <PhysicalDisk::startCache()>
c001d734:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d73b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d73e:	e8 6b fe ff ff       	call   c001d5ae <ATAPI::detectMedia()>
c001d743:	83 c4 14             	add    esp,0x14
c001d746:	31 c0                	xor    eax,eax
c001d748:	5b                   	pop    ebx
c001d749:	5e                   	pop    esi
c001d74a:	c3                   	ret    
c001d74b:	90                   	nop

c001d74c <ATAPI::read(unsigned long long, int, void*)>:
c001d74c:	55                   	push   ebp
c001d74d:	57                   	push   edi
c001d74e:	56                   	push   esi
c001d74f:	53                   	push   ebx
c001d750:	83 ec 1c             	sub    esp,0x1c
c001d753:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d757:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001d75b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001d75f:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d766:	74 3c                	je     c001d7a4 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001d768:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d76c:	b9 03 00 00 00       	mov    ecx,0x3
c001d771:	fc                   	cld    
c001d772:	31 c0                	xor    eax,eax
c001d774:	0f ce                	bswap  esi
c001d776:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d778:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001d77d:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001d781:	89 e8                	mov    eax,ebp
c001d783:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001d787:	50                   	push   eax
c001d788:	50                   	push   eax
c001d789:	55                   	push   ebp
c001d78a:	c1 e5 0b             	shl    ebp,0xb
c001d78d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d791:	6a 00                	push   0x0
c001d793:	55                   	push   ebp
c001d794:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d798:	50                   	push   eax
c001d799:	53                   	push   ebx
c001d79a:	e8 b9 fa ff ff       	call   c001d258 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d79f:	83 c4 20             	add    esp,0x20
c001d7a2:	eb 1a                	jmp    c001d7be <ATAPI::read(unsigned long long, int, void*)+0x72>
c001d7a4:	83 ec 0c             	sub    esp,0xc
c001d7a7:	53                   	push   ebx
c001d7a8:	e8 01 fe ff ff       	call   c001d5ae <ATAPI::detectMedia()>
c001d7ad:	83 c4 10             	add    esp,0x10
c001d7b0:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d7b7:	75 af                	jne    c001d768 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001d7b9:	b8 02 00 00 00       	mov    eax,0x2
c001d7be:	83 c4 1c             	add    esp,0x1c
c001d7c1:	5b                   	pop    ebx
c001d7c2:	5e                   	pop    esi
c001d7c3:	5f                   	pop    edi
c001d7c4:	5d                   	pop    ebp
c001d7c5:	c3                   	ret    

c001d7c6 <SATA::close(int, int, void*)>:
c001d7c6:	83 ec 0c             	sub    esp,0xc
c001d7c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7cd:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d7d3:	85 c0                	test   eax,eax
c001d7d5:	74 0c                	je     c001d7e3 <SATA::close(int, int, void*)+0x1d>
c001d7d7:	83 ec 0c             	sub    esp,0xc
c001d7da:	8b 10                	mov    edx,DWORD PTR [eax]
c001d7dc:	50                   	push   eax
c001d7dd:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d7e0:	83 c4 10             	add    esp,0x10
c001d7e3:	31 c0                	xor    eax,eax
c001d7e5:	83 c4 0c             	add    esp,0xc
c001d7e8:	c3                   	ret    
c001d7e9:	90                   	nop

c001d7ea <SATA::powerSaving(PowerSavingLevel)>:
c001d7ea:	c3                   	ret    
c001d7eb:	90                   	nop

c001d7ec <SATA::open(int, int, void*)>:
c001d7ec:	56                   	push   esi
c001d7ed:	53                   	push   ebx
c001d7ee:	50                   	push   eax
c001d7ef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d7f3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d7f7:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001d801:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001d807:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001d811:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d815:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d81f:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001d825:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001d82c:	e8 8e a5 fe ff       	call   c0007dbf <Phys::allocatePage()>
c001d831:	89 c6                	mov    esi,eax
c001d833:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001d839:	81 c6 00 10 00 00    	add    esi,0x1000
c001d83f:	e8 7b a5 fe ff       	call   c0007dbf <Phys::allocatePage()>
c001d844:	39 c6                	cmp    esi,eax
c001d846:	74 10                	je     c001d858 <SATA::open(int, int, void*)+0x6c>
c001d848:	83 ec 0c             	sub    esp,0xc
c001d84b:	68 48 2f 02 c0       	push   0xc0022f48
c001d850:	e8 24 3b ff ff       	call   c0011379 <KePanic(char const*)>
c001d855:	83 c4 10             	add    esp,0x10
c001d858:	83 ec 0c             	sub    esp,0xc
c001d85b:	6a 02                	push   0x2
c001d85d:	e8 ab bd fe ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c001d862:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d868:	6a 03                	push   0x3
c001d86a:	50                   	push   eax
c001d86b:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001d871:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c001d877:	e8 a4 c4 fe ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c001d87c:	83 c4 14             	add    esp,0x14
c001d87f:	53                   	push   ebx
c001d880:	e8 f9 f2 fe ff       	call   c000cb7e <PhysicalDisk::startCache()>
c001d885:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d888:	e8 35 05 ff ff       	call   c000ddc2 <createPartitionsForDisk(PhysicalDisk*)>
c001d88d:	83 c4 14             	add    esp,0x14
c001d890:	31 c0                	xor    eax,eax
c001d892:	5b                   	pop    ebx
c001d893:	5e                   	pop    esi
c001d894:	c3                   	ret    
c001d895:	90                   	nop

c001d896 <SATA::SATA()>:
c001d896:	83 ec 0c             	sub    esp,0xc
c001d899:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d89d:	83 ec 04             	sub    esp,0x4
c001d8a0:	68 00 02 00 00       	push   0x200
c001d8a5:	68 5c 2f 02 c0       	push   0xc0022f5c
c001d8aa:	50                   	push   eax
c001d8ab:	e8 66 f2 fe ff       	call   c000cb16 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d8b0:	83 c4 10             	add    esp,0x10
c001d8b3:	ba cc 2f 02 c0       	mov    edx,0xc0022fcc
c001d8b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d8bc:	89 10                	mov    DWORD PTR [eax],edx
c001d8be:	90                   	nop
c001d8bf:	83 c4 0c             	add    esp,0xc
c001d8c2:	c3                   	ret    
c001d8c3:	90                   	nop

c001d8c4 <SATA::access(unsigned long long, int, void*, bool)>:
c001d8c4:	55                   	push   ebp
c001d8c5:	57                   	push   edi
c001d8c6:	56                   	push   esi
c001d8c7:	53                   	push   ebx
c001d8c8:	83 ec 2c             	sub    esp,0x2c
c001d8cb:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001d8cf:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001d8d3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d8d7:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001d8db:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001d8df:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001d8e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d8e8:	7e 10                	jle    c001d8fa <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001d8ea:	83 ec 0c             	sub    esp,0xc
c001d8ed:	68 6c 2f 02 c0       	push   0xc0022f6c
c001d8f2:	e8 82 3a ff ff       	call   c0011379 <KePanic(char const*)>
c001d8f7:	83 c4 10             	add    esp,0x10
c001d8fa:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001d900:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001d906:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d90c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d910:	89 d0                	mov    eax,edx
c001d912:	c1 e0 07             	shl    eax,0x7
c001d915:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001d919:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001d923:	51                   	push   ecx
c001d924:	8d 42 02             	lea    eax,[edx+0x2]
c001d927:	51                   	push   ecx
c001d928:	c1 e0 07             	shl    eax,0x7
c001d92b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001d92f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d933:	50                   	push   eax
c001d934:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001d93a:	e8 91 ec ff ff       	call   c001c5d0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001d93f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d943:	83 c4 10             	add    esp,0x10
c001d946:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001d94b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d94f:	0f 84 57 01 00 00    	je     c001daac <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001d955:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d959:	c1 e0 09             	shl    eax,0x9
c001d95c:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001d961:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d965:	74 0e                	je     c001d975 <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001d967:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001d96d:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001d971:	89 c1                	mov    ecx,eax
c001d973:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d975:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001d97b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001d97f:	8d 42 02             	lea    eax,[edx+0x2]
c001d982:	c1 e0 07             	shl    eax,0x7
c001d985:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001d989:	8b 00                	mov    eax,DWORD PTR [eax]
c001d98b:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001d991:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001d997:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d99b:	c1 e1 05             	shl    ecx,0x5
c001d99e:	01 c8                	add    eax,ecx
c001d9a0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d9a4:	83 e1 01             	and    ecx,0x1
c001d9a7:	89 ce                	mov    esi,ecx
c001d9a9:	8a 08                	mov    cl,BYTE PTR [eax]
c001d9ab:	c1 e6 06             	shl    esi,0x6
c001d9ae:	83 e1 bf             	and    ecx,0xffffffbf
c001d9b1:	09 f1                	or     ecx,esi
c001d9b3:	88 08                	mov    BYTE PTR [eax],cl
c001d9b5:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d9b7:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001d9bd:	81 c9 05 00 01 00    	or     ecx,0x10005
c001d9c3:	89 08                	mov    DWORD PTR [eax],ecx
c001d9c5:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001d9cb:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001d9d1:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001d9d7:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001d9da:	50                   	push   eax
c001d9db:	68 90 00 00 00       	push   0x90
c001d9e0:	6a 00                	push   0x0
c001d9e2:	56                   	push   esi
c001d9e3:	e8 08 2b fe ff       	call   c00004f0 <memset>
c001d9e8:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001d9ee:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001d9f4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d9f8:	83 c4 10             	add    esp,0x10
c001d9fb:	48                   	dec    eax
c001d9fc:	25 ff ff 3f 00       	and    eax,0x3fffff
c001da01:	89 c1                	mov    ecx,eax
c001da03:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001da09:	25 00 00 c0 ff       	and    eax,0xffc00000
c001da0e:	09 c8                	or     eax,ecx
c001da10:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001da16:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001da1c:	83 c8 80             	or     eax,0xffffff80
c001da1f:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001da25:	66 8b 06             	mov    ax,WORD PTR [esi]
c001da28:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001da2c:	25 00 7f 00 00       	and    eax,0x7f00
c001da31:	0d 27 80 ff ff       	or     eax,0xffff8027
c001da36:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001da3b:	66 89 06             	mov    WORD PTR [esi],ax
c001da3e:	b0 35                	mov    al,0x35
c001da40:	75 02                	jne    c001da44 <SATA::access(unsigned long long, int, void*, bool)+0x180>
c001da42:	b0 25                	mov    al,0x25
c001da44:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001da47:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001da4b:	89 e8                	mov    eax,ebp
c001da4d:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001da51:	c1 e8 10             	shr    eax,0x10
c001da54:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001da57:	89 e8                	mov    eax,ebp
c001da59:	c1 e8 18             	shr    eax,0x18
c001da5c:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001da5f:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001da63:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001da66:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001da6a:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001da6d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001da71:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001da75:	89 d6                	mov    esi,edx
c001da77:	31 c0                	xor    eax,eax
c001da79:	c1 e6 07             	shl    esi,0x7
c001da7c:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001da80:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001da86:	80 e1 88             	and    cl,0x88
c001da89:	74 0a                	je     c001da95 <SATA::access(unsigned long long, int, void*, bool)+0x1d1>
c001da8b:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001da90:	74 0a                	je     c001da9c <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001da92:	40                   	inc    eax
c001da93:	eb eb                	jmp    c001da80 <SATA::access(unsigned long long, int, void*, bool)+0x1bc>
c001da95:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001da9a:	75 17                	jne    c001dab3 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c001da9c:	83 ec 0c             	sub    esp,0xc
c001da9f:	68 a5 2f 02 c0       	push   0xc0022fa5
c001daa4:	e8 9c ce fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001daa9:	83 c4 10             	add    esp,0x10
c001daac:	b8 01 00 00 00       	mov    eax,0x1
c001dab1:	eb 5d                	jmp    c001db10 <SATA::access(unsigned long long, int, void*, bool)+0x24c>
c001dab3:	b8 01 00 00 00       	mov    eax,0x1
c001dab8:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001dabc:	c1 e2 07             	shl    edx,0x7
c001dabf:	d3 e0                	shl    eax,cl
c001dac1:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001dac5:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001dacb:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001dad1:	85 c8                	test   eax,ecx
c001dad3:	74 16                	je     c001daeb <SATA::access(unsigned long long, int, void*, bool)+0x227>
c001dad5:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001dadb:	0f ba e1 1e          	bt     ecx,0x1e
c001dadf:	73 ea                	jae    c001dacb <SATA::access(unsigned long long, int, void*, bool)+0x207>
c001dae1:	83 ec 0c             	sub    esp,0xc
c001dae4:	68 b3 2f 02 c0       	push   0xc0022fb3
c001dae9:	eb b9                	jmp    c001daa4 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001daeb:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001daf1:	0f ba e0 1e          	bt     eax,0x1e
c001daf5:	72 b5                	jb     c001daac <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001daf7:	31 c0                	xor    eax,eax
c001daf9:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001dafe:	75 10                	jne    c001db10 <SATA::access(unsigned long long, int, void*, bool)+0x24c>
c001db00:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001db06:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001db0a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001db0e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001db10:	83 c4 2c             	add    esp,0x2c
c001db13:	5b                   	pop    ebx
c001db14:	5e                   	pop    esi
c001db15:	5f                   	pop    edi
c001db16:	5d                   	pop    ebp
c001db17:	c3                   	ret    

c001db18 <SATA::read(unsigned long long, int, void*)>:
c001db18:	55                   	push   ebp
c001db19:	57                   	push   edi
c001db1a:	56                   	push   esi
c001db1b:	be 04 00 00 00       	mov    esi,0x4
c001db20:	53                   	push   ebx
c001db21:	83 ec 0c             	sub    esp,0xc
c001db24:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001db28:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001db2c:	8d 7b ff             	lea    edi,[ebx-0x1]
c001db2f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001db33:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001db37:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001db3d:	0f 87 1a 02 00 00    	ja     c001dd5d <SATA::read(unsigned long long, int, void*)+0x245>
c001db43:	be 06 00 00 00       	mov    esi,0x6
c001db48:	85 c9                	test   ecx,ecx
c001db4a:	0f 84 0d 02 00 00    	je     c001dd5d <SATA::read(unsigned long long, int, void*)+0x245>
c001db50:	56                   	push   esi
c001db51:	56                   	push   esi
c001db52:	6a 00                	push   0x0
c001db54:	51                   	push   ecx
c001db55:	53                   	push   ebx
c001db56:	52                   	push   edx
c001db57:	50                   	push   eax
c001db58:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001db5c:	e8 63 fd ff ff       	call   c001d8c4 <SATA::access(unsigned long long, int, void*, bool)>
c001db61:	83 c4 20             	add    esp,0x20
c001db64:	89 c6                	mov    esi,eax
c001db66:	85 c0                	test   eax,eax
c001db68:	0f 85 ea 01 00 00    	jne    c001dd58 <SATA::read(unsigned long long, int, void*)+0x240>
c001db6e:	01 1d b4 a0 02 c0    	add    DWORD PTR ds:0xc002a0b4,ebx
c001db74:	bb 0a 00 00 00       	mov    ebx,0xa
c001db79:	50                   	push   eax
c001db7a:	50                   	push   eax
c001db7b:	6a 0f                	push   0xf
c001db7d:	6a 00                	push   0x0
c001db7f:	e8 75 f2 ff ff       	call   c001cdf9 <combineColours(unsigned char, unsigned char)>
c001db84:	5a                   	pop    edx
c001db85:	0f b6 c0             	movzx  eax,al
c001db88:	59                   	pop    ecx
c001db89:	b9 10 27 00 00       	mov    ecx,0x2710
c001db8e:	50                   	push   eax
c001db8f:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001db94:	99                   	cdq    
c001db95:	f7 f9                	idiv   ecx
c001db97:	99                   	cdq    
c001db98:	f7 fb                	idiv   ebx
c001db9a:	8d 42 30             	lea    eax,[edx+0x30]
c001db9d:	0f b6 c0             	movzx  eax,al
c001dba0:	50                   	push   eax
c001dba1:	e8 42 f2 ff ff       	call   c001cde8 <combineCharAndColour(char, unsigned char)>
c001dba6:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001dbac:	5f                   	pop    edi
c001dbad:	5d                   	pop    ebp
c001dbae:	bd e8 03 00 00       	mov    ebp,0x3e8
c001dbb3:	6a 0f                	push   0xf
c001dbb5:	6a 00                	push   0x0
c001dbb7:	e8 3d f2 ff ff       	call   c001cdf9 <combineColours(unsigned char, unsigned char)>
c001dbbc:	5a                   	pop    edx
c001dbbd:	0f b6 c0             	movzx  eax,al
c001dbc0:	59                   	pop    ecx
c001dbc1:	50                   	push   eax
c001dbc2:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dbc7:	99                   	cdq    
c001dbc8:	f7 fd                	idiv   ebp
c001dbca:	99                   	cdq    
c001dbcb:	f7 fb                	idiv   ebx
c001dbcd:	8d 42 30             	lea    eax,[edx+0x30]
c001dbd0:	0f b6 c0             	movzx  eax,al
c001dbd3:	50                   	push   eax
c001dbd4:	e8 0f f2 ff ff       	call   c001cde8 <combineCharAndColour(char, unsigned char)>
c001dbd9:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001dbdf:	5f                   	pop    edi
c001dbe0:	bf 64 00 00 00       	mov    edi,0x64
c001dbe5:	58                   	pop    eax
c001dbe6:	6a 0f                	push   0xf
c001dbe8:	6a 00                	push   0x0
c001dbea:	e8 0a f2 ff ff       	call   c001cdf9 <combineColours(unsigned char, unsigned char)>
c001dbef:	5a                   	pop    edx
c001dbf0:	0f b6 c0             	movzx  eax,al
c001dbf3:	59                   	pop    ecx
c001dbf4:	50                   	push   eax
c001dbf5:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dbfa:	99                   	cdq    
c001dbfb:	f7 ff                	idiv   edi
c001dbfd:	99                   	cdq    
c001dbfe:	f7 fb                	idiv   ebx
c001dc00:	8d 42 30             	lea    eax,[edx+0x30]
c001dc03:	0f b6 c0             	movzx  eax,al
c001dc06:	50                   	push   eax
c001dc07:	e8 dc f1 ff ff       	call   c001cde8 <combineCharAndColour(char, unsigned char)>
c001dc0c:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001dc12:	58                   	pop    eax
c001dc13:	5a                   	pop    edx
c001dc14:	6a 0f                	push   0xf
c001dc16:	6a 00                	push   0x0
c001dc18:	e8 dc f1 ff ff       	call   c001cdf9 <combineColours(unsigned char, unsigned char)>
c001dc1d:	59                   	pop    ecx
c001dc1e:	0f b6 c0             	movzx  eax,al
c001dc21:	5a                   	pop    edx
c001dc22:	50                   	push   eax
c001dc23:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dc28:	99                   	cdq    
c001dc29:	f7 fb                	idiv   ebx
c001dc2b:	99                   	cdq    
c001dc2c:	f7 fb                	idiv   ebx
c001dc2e:	8d 42 30             	lea    eax,[edx+0x30]
c001dc31:	0f b6 c0             	movzx  eax,al
c001dc34:	50                   	push   eax
c001dc35:	e8 ae f1 ff ff       	call   c001cde8 <combineCharAndColour(char, unsigned char)>
c001dc3a:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001dc40:	59                   	pop    ecx
c001dc41:	58                   	pop    eax
c001dc42:	6a 0f                	push   0xf
c001dc44:	6a 00                	push   0x0
c001dc46:	e8 ae f1 ff ff       	call   c001cdf9 <combineColours(unsigned char, unsigned char)>
c001dc4b:	5a                   	pop    edx
c001dc4c:	0f b6 c0             	movzx  eax,al
c001dc4f:	59                   	pop    ecx
c001dc50:	50                   	push   eax
c001dc51:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dc56:	99                   	cdq    
c001dc57:	f7 fb                	idiv   ebx
c001dc59:	8d 42 30             	lea    eax,[edx+0x30]
c001dc5c:	0f b6 c0             	movzx  eax,al
c001dc5f:	50                   	push   eax
c001dc60:	e8 83 f1 ff ff       	call   c001cde8 <combineCharAndColour(char, unsigned char)>
c001dc65:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001dc6b:	58                   	pop    eax
c001dc6c:	5a                   	pop    edx
c001dc6d:	6a 0f                	push   0xf
c001dc6f:	6a 00                	push   0x0
c001dc71:	e8 83 f1 ff ff       	call   c001cdf9 <combineColours(unsigned char, unsigned char)>
c001dc76:	59                   	pop    ecx
c001dc77:	0f b6 c0             	movzx  eax,al
c001dc7a:	5a                   	pop    edx
c001dc7b:	b9 10 27 00 00       	mov    ecx,0x2710
c001dc80:	50                   	push   eax
c001dc81:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dc86:	99                   	cdq    
c001dc87:	f7 f9                	idiv   ecx
c001dc89:	99                   	cdq    
c001dc8a:	f7 fb                	idiv   ebx
c001dc8c:	8d 42 30             	lea    eax,[edx+0x30]
c001dc8f:	0f b6 c0             	movzx  eax,al
c001dc92:	50                   	push   eax
c001dc93:	e8 50 f1 ff ff       	call   c001cde8 <combineCharAndColour(char, unsigned char)>
c001dc98:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001dc9e:	59                   	pop    ecx
c001dc9f:	58                   	pop    eax
c001dca0:	6a 0f                	push   0xf
c001dca2:	6a 00                	push   0x0
c001dca4:	e8 50 f1 ff ff       	call   c001cdf9 <combineColours(unsigned char, unsigned char)>
c001dca9:	5a                   	pop    edx
c001dcaa:	0f b6 c0             	movzx  eax,al
c001dcad:	59                   	pop    ecx
c001dcae:	50                   	push   eax
c001dcaf:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dcb4:	99                   	cdq    
c001dcb5:	f7 fd                	idiv   ebp
c001dcb7:	99                   	cdq    
c001dcb8:	f7 fb                	idiv   ebx
c001dcba:	8d 42 30             	lea    eax,[edx+0x30]
c001dcbd:	0f b6 c0             	movzx  eax,al
c001dcc0:	50                   	push   eax
c001dcc1:	e8 22 f1 ff ff       	call   c001cde8 <combineCharAndColour(char, unsigned char)>
c001dcc6:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001dccc:	5d                   	pop    ebp
c001dccd:	58                   	pop    eax
c001dcce:	6a 0f                	push   0xf
c001dcd0:	6a 00                	push   0x0
c001dcd2:	e8 22 f1 ff ff       	call   c001cdf9 <combineColours(unsigned char, unsigned char)>
c001dcd7:	5a                   	pop    edx
c001dcd8:	0f b6 c0             	movzx  eax,al
c001dcdb:	59                   	pop    ecx
c001dcdc:	50                   	push   eax
c001dcdd:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dce2:	99                   	cdq    
c001dce3:	f7 ff                	idiv   edi
c001dce5:	99                   	cdq    
c001dce6:	f7 fb                	idiv   ebx
c001dce8:	8d 42 30             	lea    eax,[edx+0x30]
c001dceb:	0f b6 c0             	movzx  eax,al
c001dcee:	50                   	push   eax
c001dcef:	e8 f4 f0 ff ff       	call   c001cde8 <combineCharAndColour(char, unsigned char)>
c001dcf4:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001dcfa:	5f                   	pop    edi
c001dcfb:	5d                   	pop    ebp
c001dcfc:	6a 0f                	push   0xf
c001dcfe:	6a 00                	push   0x0
c001dd00:	e8 f4 f0 ff ff       	call   c001cdf9 <combineColours(unsigned char, unsigned char)>
c001dd05:	5a                   	pop    edx
c001dd06:	0f b6 c0             	movzx  eax,al
c001dd09:	59                   	pop    ecx
c001dd0a:	50                   	push   eax
c001dd0b:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dd10:	99                   	cdq    
c001dd11:	f7 fb                	idiv   ebx
c001dd13:	99                   	cdq    
c001dd14:	f7 fb                	idiv   ebx
c001dd16:	8d 42 30             	lea    eax,[edx+0x30]
c001dd19:	0f b6 c0             	movzx  eax,al
c001dd1c:	50                   	push   eax
c001dd1d:	e8 c6 f0 ff ff       	call   c001cde8 <combineCharAndColour(char, unsigned char)>
c001dd22:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001dd28:	5f                   	pop    edi
c001dd29:	5d                   	pop    ebp
c001dd2a:	6a 0f                	push   0xf
c001dd2c:	6a 00                	push   0x0
c001dd2e:	e8 c6 f0 ff ff       	call   c001cdf9 <combineColours(unsigned char, unsigned char)>
c001dd33:	5a                   	pop    edx
c001dd34:	0f b6 c0             	movzx  eax,al
c001dd37:	59                   	pop    ecx
c001dd38:	50                   	push   eax
c001dd39:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dd3e:	99                   	cdq    
c001dd3f:	f7 fb                	idiv   ebx
c001dd41:	83 c2 30             	add    edx,0x30
c001dd44:	0f b6 d2             	movzx  edx,dl
c001dd47:	52                   	push   edx
c001dd48:	e8 9b f0 ff ff       	call   c001cde8 <combineCharAndColour(char, unsigned char)>
c001dd4d:	83 c4 10             	add    esp,0x10
c001dd50:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001dd56:	eb 05                	jmp    c001dd5d <SATA::read(unsigned long long, int, void*)+0x245>
c001dd58:	be 01 00 00 00       	mov    esi,0x1
c001dd5d:	83 c4 0c             	add    esp,0xc
c001dd60:	89 f0                	mov    eax,esi
c001dd62:	5b                   	pop    ebx
c001dd63:	5e                   	pop    esi
c001dd64:	5f                   	pop    edi
c001dd65:	5d                   	pop    ebp
c001dd66:	c3                   	ret    
c001dd67:	90                   	nop

c001dd68 <SATA::write(unsigned long long, int, void*)>:
c001dd68:	55                   	push   ebp
c001dd69:	b8 04 00 00 00       	mov    eax,0x4
c001dd6e:	57                   	push   edi
c001dd6f:	56                   	push   esi
c001dd70:	53                   	push   ebx
c001dd71:	83 ec 1c             	sub    esp,0x1c
c001dd74:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001dd78:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001dd7c:	8d 75 ff             	lea    esi,[ebp-0x1]
c001dd7f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001dd83:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001dd87:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001dd8d:	0f 87 32 02 00 00    	ja     c001dfc5 <SATA::write(unsigned long long, int, void*)+0x25d>
c001dd93:	b8 06 00 00 00       	mov    eax,0x6
c001dd98:	85 ff                	test   edi,edi
c001dd9a:	0f 84 25 02 00 00    	je     c001dfc5 <SATA::write(unsigned long long, int, void*)+0x25d>
c001dda0:	89 ee                	mov    esi,ebp
c001dda2:	c1 e6 09             	shl    esi,0x9
c001dda5:	01 fe                	add    esi,edi
c001dda7:	89 c8                	mov    eax,ecx
c001dda9:	89 da                	mov    edx,ebx
c001ddab:	83 c0 01             	add    eax,0x1
c001ddae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ddb2:	83 d2 00             	adc    edx,0x0
c001ddb5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ddb9:	50                   	push   eax
c001ddba:	50                   	push   eax
c001ddbb:	6a 01                	push   0x1
c001ddbd:	57                   	push   edi
c001ddbe:	81 c7 00 02 00 00    	add    edi,0x200
c001ddc4:	6a 01                	push   0x1
c001ddc6:	53                   	push   ebx
c001ddc7:	51                   	push   ecx
c001ddc8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001ddcc:	e8 f3 fa ff ff       	call   c001d8c4 <SATA::access(unsigned long long, int, void*, bool)>
c001ddd1:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001ddd5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001ddd9:	83 c4 20             	add    esp,0x20
c001dddc:	39 f7                	cmp    edi,esi
c001ddde:	75 c7                	jne    c001dda7 <SATA::write(unsigned long long, int, void*)+0x3f>
c001dde0:	bb 0a 00 00 00       	mov    ebx,0xa
c001dde5:	01 2d b0 a0 02 c0    	add    DWORD PTR ds:0xc002a0b0,ebp
c001ddeb:	bd 10 27 00 00       	mov    ebp,0x2710
c001ddf0:	50                   	push   eax
c001ddf1:	50                   	push   eax
c001ddf2:	6a 0f                	push   0xf
c001ddf4:	6a 00                	push   0x0
c001ddf6:	e8 fe ef ff ff       	call   c001cdf9 <combineColours(unsigned char, unsigned char)>
c001ddfb:	5a                   	pop    edx
c001ddfc:	0f b6 c0             	movzx  eax,al
c001ddff:	59                   	pop    ecx
c001de00:	50                   	push   eax
c001de01:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001de06:	99                   	cdq    
c001de07:	f7 fd                	idiv   ebp
c001de09:	99                   	cdq    
c001de0a:	f7 fb                	idiv   ebx
c001de0c:	8d 42 30             	lea    eax,[edx+0x30]
c001de0f:	0f b6 c0             	movzx  eax,al
c001de12:	50                   	push   eax
c001de13:	e8 d0 ef ff ff       	call   c001cde8 <combineCharAndColour(char, unsigned char)>
c001de18:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001de1e:	5e                   	pop    esi
c001de1f:	5f                   	pop    edi
c001de20:	bf e8 03 00 00       	mov    edi,0x3e8
c001de25:	6a 0f                	push   0xf
c001de27:	6a 00                	push   0x0
c001de29:	e8 cb ef ff ff       	call   c001cdf9 <combineColours(unsigned char, unsigned char)>
c001de2e:	5a                   	pop    edx
c001de2f:	0f b6 c0             	movzx  eax,al
c001de32:	59                   	pop    ecx
c001de33:	50                   	push   eax
c001de34:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001de39:	99                   	cdq    
c001de3a:	f7 ff                	idiv   edi
c001de3c:	99                   	cdq    
c001de3d:	f7 fb                	idiv   ebx
c001de3f:	8d 42 30             	lea    eax,[edx+0x30]
c001de42:	0f b6 c0             	movzx  eax,al
c001de45:	50                   	push   eax
c001de46:	e8 9d ef ff ff       	call   c001cde8 <combineCharAndColour(char, unsigned char)>
c001de4b:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001de51:	5e                   	pop    esi
c001de52:	be 64 00 00 00       	mov    esi,0x64
c001de57:	58                   	pop    eax
c001de58:	6a 0f                	push   0xf
c001de5a:	6a 00                	push   0x0
c001de5c:	e8 98 ef ff ff       	call   c001cdf9 <combineColours(unsigned char, unsigned char)>
c001de61:	5a                   	pop    edx
c001de62:	0f b6 c0             	movzx  eax,al
c001de65:	59                   	pop    ecx
c001de66:	50                   	push   eax
c001de67:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001de6c:	99                   	cdq    
c001de6d:	f7 fe                	idiv   esi
c001de6f:	99                   	cdq    
c001de70:	f7 fb                	idiv   ebx
c001de72:	8d 42 30             	lea    eax,[edx+0x30]
c001de75:	0f b6 c0             	movzx  eax,al
c001de78:	50                   	push   eax
c001de79:	e8 6a ef ff ff       	call   c001cde8 <combineCharAndColour(char, unsigned char)>
c001de7e:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001de84:	58                   	pop    eax
c001de85:	5a                   	pop    edx
c001de86:	6a 0f                	push   0xf
c001de88:	6a 00                	push   0x0
c001de8a:	e8 6a ef ff ff       	call   c001cdf9 <combineColours(unsigned char, unsigned char)>
c001de8f:	59                   	pop    ecx
c001de90:	0f b6 c0             	movzx  eax,al
c001de93:	5a                   	pop    edx
c001de94:	50                   	push   eax
c001de95:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001de9a:	99                   	cdq    
c001de9b:	f7 fb                	idiv   ebx
c001de9d:	99                   	cdq    
c001de9e:	f7 fb                	idiv   ebx
c001dea0:	8d 42 30             	lea    eax,[edx+0x30]
c001dea3:	0f b6 c0             	movzx  eax,al
c001dea6:	50                   	push   eax
c001dea7:	e8 3c ef ff ff       	call   c001cde8 <combineCharAndColour(char, unsigned char)>
c001deac:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001deb2:	59                   	pop    ecx
c001deb3:	58                   	pop    eax
c001deb4:	6a 0f                	push   0xf
c001deb6:	6a 00                	push   0x0
c001deb8:	e8 3c ef ff ff       	call   c001cdf9 <combineColours(unsigned char, unsigned char)>
c001debd:	5a                   	pop    edx
c001debe:	0f b6 c0             	movzx  eax,al
c001dec1:	59                   	pop    ecx
c001dec2:	50                   	push   eax
c001dec3:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dec8:	99                   	cdq    
c001dec9:	f7 fb                	idiv   ebx
c001decb:	83 c2 30             	add    edx,0x30
c001dece:	0f b6 d2             	movzx  edx,dl
c001ded1:	52                   	push   edx
c001ded2:	e8 11 ef ff ff       	call   c001cde8 <combineCharAndColour(char, unsigned char)>
c001ded7:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001dedd:	58                   	pop    eax
c001dede:	5a                   	pop    edx
c001dedf:	6a 0f                	push   0xf
c001dee1:	6a 00                	push   0x0
c001dee3:	e8 11 ef ff ff       	call   c001cdf9 <combineColours(unsigned char, unsigned char)>
c001dee8:	59                   	pop    ecx
c001dee9:	0f b6 c0             	movzx  eax,al
c001deec:	5a                   	pop    edx
c001deed:	50                   	push   eax
c001deee:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001def3:	99                   	cdq    
c001def4:	f7 fd                	idiv   ebp
c001def6:	99                   	cdq    
c001def7:	f7 fb                	idiv   ebx
c001def9:	8d 42 30             	lea    eax,[edx+0x30]
c001defc:	0f b6 c0             	movzx  eax,al
c001deff:	50                   	push   eax
c001df00:	e8 e3 ee ff ff       	call   c001cde8 <combineCharAndColour(char, unsigned char)>
c001df05:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001df0b:	59                   	pop    ecx
c001df0c:	5d                   	pop    ebp
c001df0d:	6a 0f                	push   0xf
c001df0f:	6a 00                	push   0x0
c001df11:	e8 e3 ee ff ff       	call   c001cdf9 <combineColours(unsigned char, unsigned char)>
c001df16:	5a                   	pop    edx
c001df17:	0f b6 c0             	movzx  eax,al
c001df1a:	59                   	pop    ecx
c001df1b:	50                   	push   eax
c001df1c:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001df21:	99                   	cdq    
c001df22:	f7 ff                	idiv   edi
c001df24:	99                   	cdq    
c001df25:	f7 fb                	idiv   ebx
c001df27:	8d 42 30             	lea    eax,[edx+0x30]
c001df2a:	0f b6 c0             	movzx  eax,al
c001df2d:	50                   	push   eax
c001df2e:	e8 b5 ee ff ff       	call   c001cde8 <combineCharAndColour(char, unsigned char)>
c001df33:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001df39:	5f                   	pop    edi
c001df3a:	5d                   	pop    ebp
c001df3b:	6a 0f                	push   0xf
c001df3d:	6a 00                	push   0x0
c001df3f:	e8 b5 ee ff ff       	call   c001cdf9 <combineColours(unsigned char, unsigned char)>
c001df44:	5a                   	pop    edx
c001df45:	0f b6 c0             	movzx  eax,al
c001df48:	59                   	pop    ecx
c001df49:	50                   	push   eax
c001df4a:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001df4f:	99                   	cdq    
c001df50:	f7 fe                	idiv   esi
c001df52:	99                   	cdq    
c001df53:	f7 fb                	idiv   ebx
c001df55:	8d 42 30             	lea    eax,[edx+0x30]
c001df58:	0f b6 c0             	movzx  eax,al
c001df5b:	50                   	push   eax
c001df5c:	e8 87 ee ff ff       	call   c001cde8 <combineCharAndColour(char, unsigned char)>
c001df61:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001df67:	5e                   	pop    esi
c001df68:	5f                   	pop    edi
c001df69:	6a 0f                	push   0xf
c001df6b:	6a 00                	push   0x0
c001df6d:	e8 87 ee ff ff       	call   c001cdf9 <combineColours(unsigned char, unsigned char)>
c001df72:	5d                   	pop    ebp
c001df73:	0f b6 c0             	movzx  eax,al
c001df76:	5a                   	pop    edx
c001df77:	50                   	push   eax
c001df78:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001df7d:	99                   	cdq    
c001df7e:	f7 fb                	idiv   ebx
c001df80:	99                   	cdq    
c001df81:	f7 fb                	idiv   ebx
c001df83:	8d 42 30             	lea    eax,[edx+0x30]
c001df86:	0f b6 c0             	movzx  eax,al
c001df89:	50                   	push   eax
c001df8a:	e8 59 ee ff ff       	call   c001cde8 <combineCharAndColour(char, unsigned char)>
c001df8f:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001df95:	59                   	pop    ecx
c001df96:	5e                   	pop    esi
c001df97:	6a 0f                	push   0xf
c001df99:	6a 00                	push   0x0
c001df9b:	e8 59 ee ff ff       	call   c001cdf9 <combineColours(unsigned char, unsigned char)>
c001dfa0:	5f                   	pop    edi
c001dfa1:	0f b6 c0             	movzx  eax,al
c001dfa4:	5d                   	pop    ebp
c001dfa5:	50                   	push   eax
c001dfa6:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dfab:	99                   	cdq    
c001dfac:	f7 fb                	idiv   ebx
c001dfae:	83 c2 30             	add    edx,0x30
c001dfb1:	0f b6 d2             	movzx  edx,dl
c001dfb4:	52                   	push   edx
c001dfb5:	e8 2e ee ff ff       	call   c001cde8 <combineCharAndColour(char, unsigned char)>
c001dfba:	83 c4 10             	add    esp,0x10
c001dfbd:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001dfc3:	31 c0                	xor    eax,eax
c001dfc5:	83 c4 1c             	add    esp,0x1c
c001dfc8:	5b                   	pop    ebx
c001dfc9:	5e                   	pop    esi
c001dfca:	5f                   	pop    edi
c001dfcb:	5d                   	pop    ebp
c001dfcc:	c3                   	ret    
c001dfcd:	90                   	nop

c001dfce <SATAPI::write(unsigned long long, int, void*)>:
c001dfce:	b8 03 00 00 00       	mov    eax,0x3
c001dfd3:	c3                   	ret    

c001dfd4 <SATAPI::close(int, int, void*)>:
c001dfd4:	83 ec 0c             	sub    esp,0xc
c001dfd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dfdb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001dfe1:	85 c0                	test   eax,eax
c001dfe3:	74 0c                	je     c001dff1 <SATAPI::close(int, int, void*)+0x1d>
c001dfe5:	83 ec 0c             	sub    esp,0xc
c001dfe8:	8b 10                	mov    edx,DWORD PTR [eax]
c001dfea:	50                   	push   eax
c001dfeb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001dfee:	83 c4 10             	add    esp,0x10
c001dff1:	31 c0                	xor    eax,eax
c001dff3:	83 c4 0c             	add    esp,0xc
c001dff6:	c3                   	ret    
c001dff7:	90                   	nop

c001dff8 <SATAPI::SATAPI()>:
c001dff8:	83 ec 0c             	sub    esp,0xc
c001dffb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dfff:	83 ec 04             	sub    esp,0x4
c001e002:	68 00 08 00 00       	push   0x800
c001e007:	68 fc 2f 02 c0       	push   0xc0022ffc
c001e00c:	50                   	push   eax
c001e00d:	e8 04 eb fe ff       	call   c000cb16 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001e012:	83 c4 10             	add    esp,0x10
c001e015:	ba f0 30 02 c0       	mov    edx,0xc00230f0
c001e01a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e01e:	89 10                	mov    DWORD PTR [eax],edx
c001e020:	90                   	nop
c001e021:	83 c4 0c             	add    esp,0xc
c001e024:	c3                   	ret    
c001e025:	90                   	nop

c001e026 <SATAPI::diskRemoved()>:
c001e026:	c3                   	ret    
c001e027:	90                   	nop

c001e028 <SATAPI::diskInserted()>:
c001e028:	83 ec 18             	sub    esp,0x18
c001e02b:	68 08 30 02 c0       	push   0xc0023008
c001e030:	e8 10 c9 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e035:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e039:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001e040:	83 c4 1c             	add    esp,0x1c
c001e043:	c3                   	ret    

c001e044 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001e044:	55                   	push   ebp
c001e045:	57                   	push   edi
c001e046:	56                   	push   esi
c001e047:	53                   	push   ebx
c001e048:	83 ec 34             	sub    esp,0x34
c001e04b:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001e04f:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e053:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001e057:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e05b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001e05f:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001e065:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e06b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e06f:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001e075:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e079:	83 c0 02             	add    eax,0x2
c001e07c:	c1 e0 07             	shl    eax,0x7
c001e07f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e083:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e087:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e08b:	c1 e0 07             	shl    eax,0x7
c001e08e:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e092:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e096:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001e0a0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e0a4:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e0aa:	e8 21 e5 ff ff       	call   c001c5d0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001e0af:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e0b3:	83 c4 10             	add    esp,0x10
c001e0b6:	b8 01 00 00 00       	mov    eax,0x1
c001e0bb:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001e0c0:	0f 84 53 02 00 00    	je     c001e319 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001e0c6:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e0cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e0d0:	8b 00                	mov    eax,DWORD PTR [eax]
c001e0d2:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001e0d8:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001e0de:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e0e2:	c1 e1 05             	shl    ecx,0x5
c001e0e5:	01 c8                	add    eax,ecx
c001e0e7:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e0e9:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001e0ef:	81 c9 25 00 01 00    	or     ecx,0x10025
c001e0f5:	89 08                	mov    DWORD PTR [eax],ecx
c001e0f7:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e0fd:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001e103:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001e109:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001e10c:	8d 7b 40             	lea    edi,[ebx+0x40]
c001e10f:	50                   	push   eax
c001e110:	68 90 00 00 00       	push   0x90
c001e115:	6a 00                	push   0x0
c001e117:	53                   	push   ebx
c001e118:	e8 d3 23 fe ff       	call   c00004f0 <memset>
c001e11d:	b9 0c 00 00 00       	mov    ecx,0xc
c001e122:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001e126:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e128:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001e12e:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001e132:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001e138:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001e13c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e140:	48                   	dec    eax
c001e141:	25 ff ff 3f 00       	and    eax,0x3fffff
c001e146:	89 c1                	mov    ecx,eax
c001e148:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001e14e:	25 00 00 c0 ff       	and    eax,0xffc00000
c001e153:	09 c8                	or     eax,ecx
c001e155:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001e15b:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001e161:	83 c8 80             	or     eax,0xffffff80
c001e164:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001e16a:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001e16d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001e171:	25 00 7f 00 00       	and    eax,0x7f00
c001e176:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001e17a:	0d 27 80 ff ff       	or     eax,0xffff8027
c001e17f:	66 89 03             	mov    WORD PTR [ebx],ax
c001e182:	89 d0                	mov    eax,edx
c001e184:	c1 ea 18             	shr    edx,0x18
c001e187:	c1 e8 10             	shr    eax,0x10
c001e18a:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001e18d:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001e190:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001e194:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001e197:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e19b:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001e19e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001e1a2:	83 c4 10             	add    esp,0x10
c001e1a5:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001e1a9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e1ad:	31 c0                	xor    eax,eax
c001e1af:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001e1b5:	80 e1 88             	and    cl,0x88
c001e1b8:	74 0a                	je     c001e1c4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x180>
c001e1ba:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e1bf:	74 0a                	je     c001e1cb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x187>
c001e1c1:	40                   	inc    eax
c001e1c2:	eb eb                	jmp    c001e1af <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c001e1c4:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e1c9:	75 43                	jne    c001e20e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c001e1cb:	83 ec 0c             	sub    esp,0xc
c001e1ce:	68 20 30 02 c0       	push   0xc0023020
c001e1d3:	e8 6d c7 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e1d8:	58                   	pop    eax
c001e1d9:	5a                   	pop    edx
c001e1da:	68 35 30 02 c0       	push   0xc0023035
c001e1df:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c001e1e5:	e8 bc a8 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001e1ea:	59                   	pop    ecx
c001e1eb:	5b                   	pop    ebx
c001e1ec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e1f0:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e1f6:	e8 6f e4 ff ff       	call   c001c66a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001e1fb:	5e                   	pop    esi
c001e1fc:	5f                   	pop    edi
c001e1fd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e201:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e207:	e8 3e e4 ff ff       	call   c001c64a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001e20c:	eb 48                	jmp    c001e256 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x212>
c001e20e:	be 01 00 00 00       	mov    esi,0x1
c001e213:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001e217:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e21b:	d3 e6                	shl    esi,cl
c001e21d:	c1 e7 07             	shl    edi,0x7
c001e220:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001e226:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001e22b:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001e22f:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001e235:	85 c6                	test   esi,eax
c001e237:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001e23d:	0f 84 a3 00 00 00    	je     c001e2e6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a2>
c001e243:	0f ba e0 1e          	bt     eax,0x1e
c001e247:	73 1a                	jae    c001e263 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21f>
c001e249:	83 ec 0c             	sub    esp,0xc
c001e24c:	68 47 30 02 c0       	push   0xc0023047
c001e251:	e8 ef c6 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e256:	83 c4 10             	add    esp,0x10
c001e259:	b8 01 00 00 00       	mov    eax,0x1
c001e25e:	e9 b6 00 00 00       	jmp    c001e319 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001e263:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001e269:	83 f8 0d             	cmp    eax,0xd
c001e26c:	77 0a                	ja     c001e278 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x234>
c001e26e:	83 ec 0c             	sub    esp,0xc
c001e271:	68 c8 00 00 00       	push   0xc8
c001e276:	eb 28                	jmp    c001e2a0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001e278:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001e27e:	83 f8 0d             	cmp    eax,0xd
c001e281:	77 0a                	ja     c001e28d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x249>
c001e283:	83 ec 0c             	sub    esp,0xc
c001e286:	68 58 02 00 00       	push   0x258
c001e28b:	eb 13                	jmp    c001e2a0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001e28d:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001e293:	83 f8 06             	cmp    eax,0x6
c001e296:	77 10                	ja     c001e2a8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001e298:	83 ec 0c             	sub    esp,0xc
c001e29b:	68 dc 05 00 00       	push   0x5dc
c001e2a0:	e8 c7 7d ff ff       	call   c001606c <milliTenthSleep(unsigned int)>
c001e2a5:	83 c4 10             	add    esp,0x10
c001e2a8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e2ac:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001e2af:	75 06                	jne    c001e2b7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x273>
c001e2b1:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001e2b5:	74 15                	je     c001e2cc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001e2b7:	83 fb 06             	cmp    ebx,0x6
c001e2ba:	77 10                	ja     c001e2cc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001e2bc:	83 ec 0c             	sub    esp,0xc
c001e2bf:	68 c4 09 00 00       	push   0x9c4
c001e2c4:	e8 a3 7d ff ff       	call   c001606c <milliTenthSleep(unsigned int)>
c001e2c9:	83 c4 10             	add    esp,0x10
c001e2cc:	43                   	inc    ebx
c001e2cd:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001e2d3:	0f 85 56 ff ff ff    	jne    c001e22f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1eb>
c001e2d9:	83 ec 0c             	sub    esp,0xc
c001e2dc:	68 5a 30 02 c0       	push   0xc002305a
c001e2e1:	e9 6b ff ff ff       	jmp    c001e251 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001e2e6:	0f ba e0 1e          	bt     eax,0x1e
c001e2ea:	73 0d                	jae    c001e2f9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b5>
c001e2ec:	83 ec 0c             	sub    esp,0xc
c001e2ef:	68 6e 30 02 c0       	push   0xc002306e
c001e2f4:	e9 58 ff ff ff       	jmp    c001e251 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001e2f9:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001e2fe:	74 17                	je     c001e317 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001e300:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001e305:	74 10                	je     c001e317 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001e307:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001e30d:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001e311:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001e315:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e317:	31 c0                	xor    eax,eax
c001e319:	83 c4 2c             	add    esp,0x2c
c001e31c:	5b                   	pop    ebx
c001e31d:	5e                   	pop    esi
c001e31e:	5f                   	pop    edi
c001e31f:	5d                   	pop    ebp
c001e320:	c3                   	ret    
c001e321:	90                   	nop

c001e322 <SATAPI::eject()>:
c001e322:	57                   	push   edi
c001e323:	b9 03 00 00 00       	mov    ecx,0x3
c001e328:	83 ec 18             	sub    esp,0x18
c001e32b:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e32f:	fc                   	cld    
c001e330:	31 c0                	xor    eax,eax
c001e332:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e334:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001e339:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001e33e:	50                   	push   eax
c001e33f:	6a 00                	push   0x0
c001e341:	6a 00                	push   0x0
c001e343:	6a 00                	push   0x0
c001e345:	6a 00                	push   0x0
c001e347:	6a 02                	push   0x2
c001e349:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e34d:	50                   	push   eax
c001e34e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e352:	e8 ed fc ff ff       	call   c001e044 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e357:	31 c0                	xor    eax,eax
c001e359:	83 c4 38             	add    esp,0x38
c001e35c:	5f                   	pop    edi
c001e35d:	c3                   	ret    

c001e35e <SATAPI::detectMedia()>:
c001e35e:	53                   	push   ebx
c001e35f:	83 ec 14             	sub    esp,0x14
c001e362:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001e366:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e36c:	e8 23 01 ff ff       	call   c000e494 <VCache::writeWriteBuffer()>
c001e371:	59                   	pop    ecx
c001e372:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e378:	e8 07 01 ff ff       	call   c000e484 <VCache::invalidateReadBuffer()>
c001e37d:	c7 04 24 83 30 02 c0 	mov    DWORD PTR [esp],0xc0023083
c001e384:	e8 bc c5 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e389:	83 c4 10             	add    esp,0x10
c001e38c:	31 c0                	xor    eax,eax
c001e38e:	8b 14 85 80 88 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7780]
c001e395:	85 d2                	test   edx,edx
c001e397:	74 0f                	je     c001e3a8 <SATAPI::detectMedia()+0x4a>
c001e399:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001e39f:	75 07                	jne    c001e3a8 <SATAPI::detectMedia()+0x4a>
c001e3a1:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001e3a8:	40                   	inc    eax
c001e3a9:	83 f8 1a             	cmp    eax,0x1a
c001e3ac:	75 e0                	jne    c001e38e <SATAPI::detectMedia()+0x30>
c001e3ae:	83 c4 08             	add    esp,0x8
c001e3b1:	5b                   	pop    ebx
c001e3b2:	c3                   	ret    
c001e3b3:	90                   	nop

c001e3b4 <SATAPI::open(int, int, void*)>:
c001e3b4:	56                   	push   esi
c001e3b5:	53                   	push   ebx
c001e3b6:	51                   	push   ecx
c001e3b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e3bb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e3bf:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001e3c9:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001e3cf:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001e3d9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e3dd:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001e3e7:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001e3ed:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001e3f4:	e8 c6 99 fe ff       	call   c0007dbf <Phys::allocatePage()>
c001e3f9:	89 c6                	mov    esi,eax
c001e3fb:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001e401:	81 c6 00 10 00 00    	add    esi,0x1000
c001e407:	e8 b3 99 fe ff       	call   c0007dbf <Phys::allocatePage()>
c001e40c:	39 c6                	cmp    esi,eax
c001e40e:	74 10                	je     c001e420 <SATAPI::open(int, int, void*)+0x6c>
c001e410:	83 ec 0c             	sub    esp,0xc
c001e413:	68 98 30 02 c0       	push   0xc0023098
c001e418:	e8 5c 2f ff ff       	call   c0011379 <KePanic(char const*)>
c001e41d:	83 c4 10             	add    esp,0x10
c001e420:	83 ec 0c             	sub    esp,0xc
c001e423:	6a 02                	push   0x2
c001e425:	e8 e3 b1 fe ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c001e42a:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001e430:	6a 03                	push   0x3
c001e432:	50                   	push   eax
c001e433:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001e439:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c001e43f:	e8 dc b8 fe ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c001e444:	83 c4 14             	add    esp,0x14
c001e447:	68 78 01 00 00       	push   0x178
c001e44c:	e8 65 96 fe ff       	call   c0007ab6 <malloc>
c001e451:	83 c4 0c             	add    esp,0xc
c001e454:	89 c6                	mov    esi,eax
c001e456:	6a 00                	push   0x0
c001e458:	68 ff ff ff 7f       	push   0x7fffffff
c001e45d:	6a 00                	push   0x0
c001e45f:	6a 00                	push   0x0
c001e461:	53                   	push   ebx
c001e462:	68 ae 30 02 c0       	push   0xc00230ae
c001e467:	50                   	push   eax
c001e468:	e8 83 f4 fe ff       	call   c000d8f0 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001e46d:	83 c4 14             	add    esp,0x14
c001e470:	56                   	push   esi
c001e471:	e8 3a f5 fe ff       	call   c000d9b0 <LogicalDisk::assignDriveLetter()>
c001e476:	5a                   	pop    edx
c001e477:	0f be c0             	movsx  eax,al
c001e47a:	59                   	pop    ecx
c001e47b:	50                   	push   eax
c001e47c:	68 00 2f 02 c0       	push   0xc0022f00
c001e481:	e8 bf c4 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e486:	58                   	pop    eax
c001e487:	5a                   	pop    edx
c001e488:	56                   	push   esi
c001e489:	53                   	push   ebx
c001e48a:	e8 bb e2 fe ff       	call   c000c74a <Device::addChild(Device*)>
c001e48f:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001e495:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e498:	e8 e1 e6 fe ff       	call   c000cb7e <PhysicalDisk::startCache()>
c001e49d:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001e4a4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e4a7:	e8 b2 fe ff ff       	call   c001e35e <SATAPI::detectMedia()>
c001e4ac:	83 c4 14             	add    esp,0x14
c001e4af:	31 c0                	xor    eax,eax
c001e4b1:	5b                   	pop    ebx
c001e4b2:	5e                   	pop    esi
c001e4b3:	c3                   	ret    

c001e4b4 <SATAPI::read(unsigned long long, int, void*)>:
c001e4b4:	57                   	push   edi
c001e4b5:	56                   	push   esi
c001e4b6:	53                   	push   ebx
c001e4b7:	83 ec 30             	sub    esp,0x30
c001e4ba:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e4be:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c001e4c2:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001e4c6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001e4ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e4ce:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e4d2:	83 fe 04             	cmp    esi,0x4
c001e4d5:	7e 10                	jle    c001e4e7 <SATAPI::read(unsigned long long, int, void*)+0x33>
c001e4d7:	83 ec 0c             	sub    esp,0xc
c001e4da:	68 bc 30 02 c0       	push   0xc00230bc
c001e4df:	e8 95 2e ff ff       	call   c0011379 <KePanic(char const*)>
c001e4e4:	83 c4 10             	add    esp,0x10
c001e4e7:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001e4ed:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001e4f3:	51                   	push   ecx
c001e4f4:	50                   	push   eax
c001e4f5:	83 c0 02             	add    eax,0x2
c001e4f8:	c1 e0 07             	shl    eax,0x7
c001e4fb:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001e501:	50                   	push   eax
c001e502:	52                   	push   edx
c001e503:	e8 8c e1 ff ff       	call   c001c694 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e508:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001e50c:	b9 03 00 00 00       	mov    ecx,0x3
c001e511:	fc                   	cld    
c001e512:	31 c0                	xor    eax,eax
c001e514:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e516:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001e51b:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001e520:	83 c4 0c             	add    esp,0xc
c001e523:	6a 00                	push   0x0
c001e525:	6a 00                	push   0x0
c001e527:	6a 00                	push   0x0
c001e529:	6a 00                	push   0x0
c001e52b:	6a 02                	push   0x2
c001e52d:	8d 44 24 30          	lea    eax,[esp+0x30]
c001e531:	50                   	push   eax
c001e532:	53                   	push   ebx
c001e533:	e8 0c fb ff ff       	call   c001e044 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e538:	83 c4 20             	add    esp,0x20
c001e53b:	85 c0                	test   eax,eax
c001e53d:	75 44                	jne    c001e583 <SATAPI::read(unsigned long long, int, void*)+0xcf>
c001e53f:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001e543:	b9 03 00 00 00       	mov    ecx,0x3
c001e548:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e54a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e54e:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001e553:	0f c8                	bswap  eax
c001e555:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001e559:	89 f0                	mov    eax,esi
c001e55b:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001e55f:	50                   	push   eax
c001e560:	56                   	push   esi
c001e561:	c1 e6 0b             	shl    esi,0xb
c001e564:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001e568:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e56c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e570:	56                   	push   esi
c001e571:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001e575:	50                   	push   eax
c001e576:	53                   	push   ebx
c001e577:	e8 c8 fa ff ff       	call   c001e044 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e57c:	83 c4 20             	add    esp,0x20
c001e57f:	85 c0                	test   eax,eax
c001e581:	74 14                	je     c001e597 <SATAPI::read(unsigned long long, int, void*)+0xe3>
c001e583:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e587:	83 ec 0c             	sub    esp,0xc
c001e58a:	53                   	push   ebx
c001e58b:	e8 ce fd ff ff       	call   c001e35e <SATAPI::detectMedia()>
c001e590:	83 c4 10             	add    esp,0x10
c001e593:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e597:	83 c4 30             	add    esp,0x30
c001e59a:	5b                   	pop    ebx
c001e59b:	5e                   	pop    esi
c001e59c:	5f                   	pop    edi
c001e59d:	c3                   	ret    

c001e59e <IOAPIC::close(int, int, void*)>:
c001e59e:	b8 00 00 00 00       	mov    eax,0x0
c001e5a3:	c3                   	ret    

c001e5a4 <apicGetBase()>:
c001e5a4:	55                   	push   ebp
c001e5a5:	89 e5                	mov    ebp,esp
c001e5a7:	83 ec 18             	sub    esp,0x18
c001e5aa:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001e5af:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e5b5:	83 e0 08             	and    eax,0x8
c001e5b8:	0f b6 c0             	movzx  eax,al
c001e5bb:	85 c0                	test   eax,eax
c001e5bd:	75 07                	jne    c001e5c6 <apicGetBase()+0x22>
c001e5bf:	b8 00 00 00 00       	mov    eax,0x0
c001e5c4:	eb 21                	jmp    c001e5e7 <apicGetBase()+0x43>
c001e5c6:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001e5cb:	83 ec 08             	sub    esp,0x8
c001e5ce:	6a 1b                	push   0x1b
c001e5d0:	50                   	push   eax
c001e5d1:	e8 ea 8a fe ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c001e5d6:	83 c4 10             	add    esp,0x10
c001e5d9:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e5dc:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001e5df:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e5e2:	25 00 00 ff ff       	and    eax,0xffff0000
c001e5e7:	c9                   	leave  
c001e5e8:	c3                   	ret    
c001e5e9:	90                   	nop

c001e5ea <IOAPIC::IOAPIC()>:
c001e5ea:	83 ec 0c             	sub    esp,0xc
c001e5ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5f1:	83 ec 08             	sub    esp,0x8
c001e5f4:	68 20 31 02 c0       	push   0xc0023120
c001e5f9:	50                   	push   eax
c001e5fa:	e8 e3 e2 fe ff       	call   c000c8e2 <Device::Device(char const*)>
c001e5ff:	83 c4 10             	add    esp,0x10
c001e602:	ba 30 31 02 c0       	mov    edx,0xc0023130
c001e607:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e60b:	89 10                	mov    DWORD PTR [eax],edx
c001e60d:	90                   	nop
c001e60e:	83 c4 0c             	add    esp,0xc
c001e611:	c3                   	ret    

c001e612 <apicOpen()>:
c001e612:	55                   	push   ebp
c001e613:	89 e5                	mov    ebp,esp
c001e615:	53                   	push   ebx
c001e616:	83 ec 34             	sub    esp,0x34
c001e619:	a0 00 a1 02 c0       	mov    al,ds:0xc002a100
c001e61e:	83 f0 01             	xor    eax,0x1
c001e621:	0f b6 c0             	movzx  eax,al
c001e624:	85 c0                	test   eax,eax
c001e626:	0f 84 a3 00 00 00    	je     c001e6cf <apicOpen()+0xbd>
c001e62c:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001e630:	a0 e0 8b 02 c0       	mov    al,ds:0xc0028be0
c001e635:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001e639:	0f b6 c0             	movzx  eax,al
c001e63c:	39 c2                	cmp    edx,eax
c001e63e:	0f 83 84 00 00 00    	jae    c001e6c8 <apicOpen()+0xb6>
c001e644:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001e64b:	83 ec 0c             	sub    esp,0xc
c001e64e:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001e651:	e8 60 94 fe ff       	call   c0007ab6 <malloc>
c001e656:	83 c4 10             	add    esp,0x10
c001e659:	89 c3                	mov    ebx,eax
c001e65b:	83 ec 0c             	sub    esp,0xc
c001e65e:	53                   	push   ebx
c001e65f:	e8 86 ff ff ff       	call   c001e5ea <IOAPIC::IOAPIC()>
c001e664:	83 c4 10             	add    esp,0x10
c001e667:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001e66a:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001e66e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e671:	89 14 85 e0 a0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5f20],edx
c001e678:	a1 c0 a0 02 c0       	mov    eax,ds:0xc002a0c0
c001e67d:	83 c0 01             	add    eax,0x1
c001e680:	a3 c0 a0 02 c0       	mov    ds:0xc002a0c0,eax
c001e685:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001e68a:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001e690:	83 ec 08             	sub    esp,0x8
c001e693:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001e696:	50                   	push   eax
c001e697:	e8 ae e0 fe ff       	call   c000c74a <Device::addChild(Device*)>
c001e69c:	83 c4 10             	add    esp,0x10
c001e69f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e6a2:	8b 00                	mov    eax,DWORD PTR [eax]
c001e6a4:	83 c0 08             	add    eax,0x8
c001e6a7:	8b 00                	mov    eax,DWORD PTR [eax]
c001e6a9:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001e6ad:	6a 00                	push   0x0
c001e6af:	6a 00                	push   0x0
c001e6b1:	52                   	push   edx
c001e6b2:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001e6b5:	ff d0                	call   eax
c001e6b7:	83 c4 10             	add    esp,0x10
c001e6ba:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001e6bd:	83 c0 01             	add    eax,0x1
c001e6c0:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001e6c3:	e9 68 ff ff ff       	jmp    c001e630 <apicOpen()+0x1e>
c001e6c8:	c6 05 00 a1 02 c0 01 	mov    BYTE PTR ds:0xc002a100,0x1
c001e6cf:	e8 d0 fe ff ff       	call   c001e5a4 <apicGetBase()>
c001e6d4:	05 f0 00 00 00       	add    eax,0xf0
c001e6d9:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e6dc:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001e6df:	8b 00                	mov    eax,DWORD PTR [eax]
c001e6e1:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001e6e4:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001e6eb:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001e6f2:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001e6f5:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001e6f8:	89 10                	mov    DWORD PTR [eax],edx
c001e6fa:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001e701:	a1 30 8b 02 c0       	mov    eax,ds:0xc0028b30
c001e706:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001e709:	7d 7c                	jge    c001e787 <apicOpen()+0x175>
c001e70b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e70e:	8b 04 85 40 8b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd74c0]
c001e715:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001e718:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e71b:	8b 04 85 40 8b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd74c0]
c001e722:	c1 e8 08             	shr    eax,0x8
c001e725:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001e729:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e72c:	8b 04 85 40 8b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd74c0]
c001e733:	c1 e8 18             	shr    eax,0x18
c001e736:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001e739:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001e73d:	3d ff 00 00 00       	cmp    eax,0xff
c001e742:	75 3a                	jne    c001e77e <apicOpen()+0x16c>
c001e744:	e8 5b fe ff ff       	call   c001e5a4 <apicGetBase()>
c001e749:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001e74d:	83 fa 01             	cmp    edx,0x1
c001e750:	75 07                	jne    c001e759 <apicOpen()+0x147>
c001e752:	ba 60 03 00 00       	mov    edx,0x360
c001e757:	eb 05                	jmp    c001e75e <apicOpen()+0x14c>
c001e759:	ba 50 03 00 00       	mov    edx,0x350
c001e75e:	01 d0                	add    eax,edx
c001e760:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001e763:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001e766:	8b 00                	mov    eax,DWORD PTR [eax]
c001e768:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001e76b:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001e772:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001e776:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001e779:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001e77c:	89 10                	mov    DWORD PTR [eax],edx
c001e77e:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001e782:	e9 7a ff ff ff       	jmp    c001e701 <apicOpen()+0xef>
c001e787:	90                   	nop
c001e788:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001e78b:	c9                   	leave  
c001e78c:	c3                   	ret    
c001e78d:	90                   	nop

c001e78e <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001e78e:	55                   	push   ebp
c001e78f:	89 e5                	mov    ebp,esp
c001e791:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e794:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e79a:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e79d:	72 1d                	jb     c001e7bc <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e79f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e7a2:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001e7a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e7ab:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001e7b1:	01 d0                	add    eax,edx
c001e7b3:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e7b6:	73 04                	jae    c001e7bc <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e7b8:	b0 01                	mov    al,0x1
c001e7ba:	eb 02                	jmp    c001e7be <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001e7bc:	b0 00                	mov    al,0x0
c001e7be:	5d                   	pop    ebp
c001e7bf:	c3                   	ret    

c001e7c0 <IOAPIC::read(int)>:
c001e7c0:	55                   	push   ebp
c001e7c1:	89 e5                	mov    ebp,esp
c001e7c3:	83 ec 10             	sub    esp,0x10
c001e7c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e7c9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e7cf:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e7d2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e7d5:	0f b6 d0             	movzx  edx,al
c001e7d8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e7db:	89 10                	mov    DWORD PTR [eax],edx
c001e7dd:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e7e0:	83 c0 10             	add    eax,0x10
c001e7e3:	8b 00                	mov    eax,DWORD PTR [eax]
c001e7e5:	c9                   	leave  
c001e7e6:	c3                   	ret    
c001e7e7:	90                   	nop

c001e7e8 <IOAPIC::open(int, int, void*)>:
c001e7e8:	55                   	push   ebp
c001e7e9:	89 e5                	mov    ebp,esp
c001e7eb:	57                   	push   edi
c001e7ec:	56                   	push   esi
c001e7ed:	53                   	push   ebx
c001e7ee:	83 ec 04             	sub    esp,0x4
c001e7f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e7f4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e7f7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e7fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e800:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e806:	8b 14 85 20 8c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd73e0]
c001e80d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e810:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e816:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e819:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e81f:	8b 14 85 a0 8c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7360]
c001e826:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e829:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001e82f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e832:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001e838:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e83b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e841:	0f b6 f0             	movzx  esi,al
c001e844:	89 d0                	mov    eax,edx
c001e846:	ba 00 00 00 00       	mov    edx,0x0
c001e84b:	89 c7                	mov    edi,eax
c001e84d:	83 e7 ff             	and    edi,0xffffffff
c001e850:	89 f9                	mov    ecx,edi
c001e852:	0f b6 da             	movzx  ebx,dl
c001e855:	89 c8                	mov    eax,ecx
c001e857:	89 da                	mov    edx,ebx
c001e859:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e85c:	8d 5e 08             	lea    ebx,[esi+0x8]
c001e85f:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001e863:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001e867:	83 e0 00             	and    eax,0x0
c001e86a:	09 d0                	or     eax,edx
c001e86c:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001e870:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e873:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e879:	8d 50 01             	lea    edx,[eax+0x1]
c001e87c:	88 d1                	mov    cl,dl
c001e87e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001e881:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001e887:	0f b6 d0             	movzx  edx,al
c001e88a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e88d:	83 c2 08             	add    edx,0x8
c001e890:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001e894:	0f b6 c9             	movzx  ecx,cl
c001e897:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001e89d:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001e8a1:	6a 01                	push   0x1
c001e8a3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e8a6:	e8 15 ff ff ff       	call   c001e7c0 <IOAPIC::read(int)>
c001e8ab:	83 c4 08             	add    esp,0x8
c001e8ae:	c1 f8 10             	sar    eax,0x10
c001e8b1:	0f b6 c0             	movzx  eax,al
c001e8b4:	8d 50 01             	lea    edx,[eax+0x1]
c001e8b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e8ba:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001e8c0:	b8 00 00 00 00       	mov    eax,0x0
c001e8c5:	8d 65 f4             	lea    esp,[ebp-0xc]
c001e8c8:	5b                   	pop    ebx
c001e8c9:	5e                   	pop    esi
c001e8ca:	5f                   	pop    edi
c001e8cb:	5d                   	pop    ebp
c001e8cc:	c3                   	ret    
c001e8cd:	90                   	nop

c001e8ce <IOAPIC::write(int, int)>:
c001e8ce:	55                   	push   ebp
c001e8cf:	89 e5                	mov    ebp,esp
c001e8d1:	83 ec 10             	sub    esp,0x10
c001e8d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e8d7:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e8dd:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e8e0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e8e3:	0f b6 d0             	movzx  edx,al
c001e8e6:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e8e9:	89 10                	mov    DWORD PTR [eax],edx
c001e8eb:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e8ee:	8d 50 10             	lea    edx,[eax+0x10]
c001e8f1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e8f4:	89 02                	mov    DWORD PTR [edx],eax
c001e8f6:	90                   	nop
c001e8f7:	c9                   	leave  
c001e8f8:	c3                   	ret    
c001e8f9:	90                   	nop

c001e8fa <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001e8fa:	55                   	push   ebp
c001e8fb:	89 e5                	mov    ebp,esp
c001e8fd:	53                   	push   ebx
c001e8fe:	83 ec 2c             	sub    esp,0x2c
c001e901:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e904:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001e907:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001e90a:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001e90d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001e910:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e913:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001e916:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001e919:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001e91c:	88 d8                	mov    al,bl
c001e91e:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001e921:	88 c8                	mov    al,cl
c001e923:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001e926:	88 d0                	mov    al,dl
c001e928:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001e92b:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001e92f:	83 c0 08             	add    eax,0x8
c001e932:	01 c0                	add    eax,eax
c001e934:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e937:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001e93b:	83 c0 08             	add    eax,0x8
c001e93e:	01 c0                	add    eax,eax
c001e940:	83 c0 01             	add    eax,0x1
c001e943:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001e946:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e949:	50                   	push   eax
c001e94a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e94d:	e8 6e fe ff ff       	call   c001e7c0 <IOAPIC::read(int)>
c001e952:	83 c4 08             	add    esp,0x8
c001e955:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e958:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001e95f:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001e962:	c1 e0 18             	shl    eax,0x18
c001e965:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001e968:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001e96b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e96e:	52                   	push   edx
c001e96f:	50                   	push   eax
c001e970:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e973:	e8 56 ff ff ff       	call   c001e8ce <IOAPIC::write(int, int)>
c001e978:	83 c4 0c             	add    esp,0xc
c001e97b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e97e:	50                   	push   eax
c001e97f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e982:	e8 39 fe ff ff       	call   c001e7c0 <IOAPIC::read(int)>
c001e987:	83 c4 08             	add    esp,0x8
c001e98a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001e98d:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001e994:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001e99b:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001e9a2:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001e9a6:	85 c0                	test   eax,eax
c001e9a8:	74 09                	je     c001e9b3 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001e9aa:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001e9b1:	eb 07                	jmp    c001e9ba <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001e9b3:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001e9ba:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001e9be:	85 c0                	test   eax,eax
c001e9c0:	74 09                	je     c001e9cb <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001e9c2:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001e9c9:	eb 07                	jmp    c001e9d2 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001e9cb:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001e9d2:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001e9d9:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001e9dd:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001e9e0:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001e9e3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e9e6:	52                   	push   edx
c001e9e7:	50                   	push   eax
c001e9e8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e9eb:	e8 de fe ff ff       	call   c001e8ce <IOAPIC::write(int, int)>
c001e9f0:	83 c4 0c             	add    esp,0xc
c001e9f3:	90                   	nop
c001e9f4:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001e9f7:	c9                   	leave  
c001e9f8:	c3                   	ret    
c001e9f9:	66 90                	xchg   ax,ax
c001e9fb:	90                   	nop

c001e9fc <APICTimer::close(int, int, void*)>:
c001e9fc:	b8 00 00 00 00       	mov    eax,0x0
c001ea01:	c3                   	ret    
c001ea02:	66 90                	xchg   ax,ax

c001ea04 <apicTimerHandler(regs*, void*)>:
c001ea04:	83 ec 0c             	sub    esp,0xc
c001ea07:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ea0b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ea0d:	b8 10 27 00 00       	mov    eax,0x2710
c001ea12:	ba 00 00 00 00       	mov    edx,0x0
c001ea17:	f7 f1                	div    ecx
c001ea19:	83 ec 0c             	sub    esp,0xc
c001ea1c:	50                   	push   eax
c001ea1d:	e8 8a f7 fe ff       	call   c000e1ac <timerHandler(unsigned int)>
c001ea22:	83 c4 10             	add    esp,0x10
c001ea25:	90                   	nop
c001ea26:	83 c4 0c             	add    esp,0xc
c001ea29:	c3                   	ret    
c001ea2a:	66 90                	xchg   ax,ax

c001ea2c <APICTimer::open(int, int, void*)>:
c001ea2c:	83 ec 0c             	sub    esp,0xc
c001ea2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea33:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea35:	83 c0 24             	add    eax,0x24
c001ea38:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea3a:	83 ec 08             	sub    esp,0x8
c001ea3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ea41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ea45:	ff d0                	call   eax
c001ea47:	83 c4 10             	add    esp,0x10
c001ea4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea4e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ea52:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001ea58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea5c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ea60:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001ea66:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ea6a:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001ea70:	83 ec 0c             	sub    esp,0xc
c001ea73:	51                   	push   ecx
c001ea74:	6a 01                	push   0x1
c001ea76:	68 04 ea 01 c0       	push   0xc001ea04
c001ea7b:	52                   	push   edx
c001ea7c:	50                   	push   eax
c001ea7d:	e8 74 dc fe ff       	call   c000c6f6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ea82:	83 c4 20             	add    esp,0x20
c001ea85:	89 c2                	mov    edx,eax
c001ea87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea8b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ea91:	b8 00 00 00 00       	mov    eax,0x0
c001ea96:	83 c4 0c             	add    esp,0xc
c001ea99:	c3                   	ret    
c001ea9a:	66 90                	xchg   ax,ax

c001ea9c <APICTimer::write(int)>:
c001ea9c:	83 ec 0c             	sub    esp,0xc
c001ea9f:	83 ec 0c             	sub    esp,0xc
c001eaa2:	68 54 31 02 c0       	push   0xc0023154
c001eaa7:	e8 cd 28 ff ff       	call   c0011379 <KePanic(char const*)>
c001eaac:	83 c4 10             	add    esp,0x10
c001eaaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eab3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eab7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001eabd:	90                   	nop
c001eabe:	83 c4 0c             	add    esp,0xc
c001eac1:	c3                   	ret    
c001eac2:	66 90                	xchg   ax,ax

c001eac4 <APICTimer::APICTimer()>:
c001eac4:	83 ec 0c             	sub    esp,0xc
c001eac7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eacb:	83 ec 08             	sub    esp,0x8
c001eace:	68 64 31 02 c0       	push   0xc0023164
c001ead3:	50                   	push   eax
c001ead4:	e8 07 f6 fe ff       	call   c000e0e0 <Timer::Timer(char const*)>
c001ead9:	83 c4 10             	add    esp,0x10
c001eadc:	ba 78 31 02 c0       	mov    edx,0xc0023178
c001eae1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eae5:	89 10                	mov    DWORD PTR [eax],edx
c001eae7:	90                   	nop
c001eae8:	83 c4 0c             	add    esp,0xc
c001eaeb:	c3                   	ret    

c001eaec <PIT::write(int)>:
c001eaec:	83 ec 10             	sub    esp,0x10
c001eaef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001eaf3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001eaf7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001eafd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001eb01:	a3 04 a1 02 c0       	mov    ds:0xc002a104,eax
c001eb06:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001eb0b:	89 c2                	mov    edx,eax
c001eb0d:	c1 fa 1f             	sar    edx,0x1f
c001eb10:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001eb14:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001eb18:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001eb1f:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001eb24:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001eb28:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001eb2d:	ee                   	out    dx,al
c001eb2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001eb32:	0f b6 c0             	movzx  eax,al
c001eb35:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001eb3c:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001eb40:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001eb44:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001eb49:	ee                   	out    dx,al
c001eb4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001eb4e:	c1 f8 08             	sar    eax,0x8
c001eb51:	0f b6 c0             	movzx  eax,al
c001eb54:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001eb5b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001eb5f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001eb63:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001eb68:	ee                   	out    dx,al
c001eb69:	90                   	nop
c001eb6a:	83 c4 10             	add    esp,0x10
c001eb6d:	c3                   	ret    
c001eb6e:	66 90                	xchg   ax,ax

c001eb70 <pitHandler(regs*, void*)>:
c001eb70:	83 ec 0c             	sub    esp,0xc
c001eb73:	8b 0d 04 a1 02 c0    	mov    ecx,DWORD PTR ds:0xc002a104
c001eb79:	b8 10 27 00 00       	mov    eax,0x2710
c001eb7e:	89 c2                	mov    edx,eax
c001eb80:	c1 fa 1f             	sar    edx,0x1f
c001eb83:	f7 f9                	idiv   ecx
c001eb85:	83 ec 0c             	sub    esp,0xc
c001eb88:	50                   	push   eax
c001eb89:	e8 1e f6 fe ff       	call   c000e1ac <timerHandler(unsigned int)>
c001eb8e:	83 c4 10             	add    esp,0x10
c001eb91:	90                   	nop
c001eb92:	83 c4 0c             	add    esp,0xc
c001eb95:	c3                   	ret    
c001eb96:	66 90                	xchg   ax,ax

c001eb98 <PIT::open(int, int, void*)>:
c001eb98:	83 ec 0c             	sub    esp,0xc
c001eb9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb9f:	8b 00                	mov    eax,DWORD PTR [eax]
c001eba1:	83 c0 24             	add    eax,0x24
c001eba4:	8b 00                	mov    eax,DWORD PTR [eax]
c001eba6:	83 ec 08             	sub    esp,0x8
c001eba9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ebad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ebb1:	ff d0                	call   eax
c001ebb3:	83 c4 10             	add    esp,0x10
c001ebb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebba:	83 ec 0c             	sub    esp,0xc
c001ebbd:	6a 00                	push   0x0
c001ebbf:	6a 01                	push   0x1
c001ebc1:	68 70 eb 01 c0       	push   0xc001eb70
c001ebc6:	6a 00                	push   0x0
c001ebc8:	50                   	push   eax
c001ebc9:	e8 28 db fe ff       	call   c000c6f6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ebce:	83 c4 20             	add    esp,0x20
c001ebd1:	89 c2                	mov    edx,eax
c001ebd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebd7:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ebdd:	b8 00 00 00 00       	mov    eax,0x0
c001ebe2:	83 c4 0c             	add    esp,0xc
c001ebe5:	c3                   	ret    
c001ebe6:	66 90                	xchg   ax,ax

c001ebe8 <PIT::close(int, int, void*)>:
c001ebe8:	83 ec 0c             	sub    esp,0xc
c001ebeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebef:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001ebf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebfd:	6a 01                	push   0x1
c001ebff:	68 70 eb 01 c0       	push   0xc001eb70
c001ec04:	6a 00                	push   0x0
c001ec06:	50                   	push   eax
c001ec07:	e8 20 db fe ff       	call   c000c72c <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001ec0c:	83 c4 10             	add    esp,0x10
c001ec0f:	b8 00 00 00 00       	mov    eax,0x0
c001ec14:	83 c4 0c             	add    esp,0xc
c001ec17:	c3                   	ret    

c001ec18 <PIT::PIT()>:
c001ec18:	83 ec 0c             	sub    esp,0xc
c001ec1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec1f:	83 ec 08             	sub    esp,0x8
c001ec22:	68 a0 31 02 c0       	push   0xc00231a0
c001ec27:	50                   	push   eax
c001ec28:	e8 b3 f4 fe ff       	call   c000e0e0 <Timer::Timer(char const*)>
c001ec2d:	83 c4 10             	add    esp,0x10
c001ec30:	ba c8 31 02 c0       	mov    edx,0xc00231c8
c001ec35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec39:	89 10                	mov    DWORD PTR [eax],edx
c001ec3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec3f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ec45:	0f b6 d0             	movzx  edx,al
c001ec48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec4c:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001ec53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec57:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ec5d:	0f b6 d0             	movzx  edx,al
c001ec60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec64:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001ec69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec6d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ec73:	8d 50 01             	lea    edx,[eax+0x1]
c001ec76:	88 d1                	mov    cl,dl
c001ec78:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ec7c:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001ec82:	0f b6 d0             	movzx  edx,al
c001ec85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec89:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001ec8d:	83 e1 3f             	and    ecx,0x3f
c001ec90:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001ec94:	90                   	nop
c001ec95:	83 c4 0c             	add    esp,0xc
c001ec98:	c3                   	ret    
c001ec99:	66 90                	xchg   ax,ax
c001ec9b:	66 90                	xchg   ax,ax
c001ec9d:	66 90                	xchg   ax,ax
c001ec9f:	90                   	nop

c001eca0 <avxDetect>:
c001eca0:	b8 01 00 00 00       	mov    eax,0x1
c001eca5:	0f a2                	cpuid  
c001eca7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001ecad:	74 15                	je     c001ecc4 <avxDetect.noAVX>
c001ecaf:	b8 01 00 00 00       	mov    eax,0x1
c001ecb4:	0f a2                	cpuid  
c001ecb6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001ecbc:	74 06                	je     c001ecc4 <avxDetect.noAVX>
c001ecbe:	b8 01 00 00 00       	mov    eax,0x1
c001ecc3:	c3                   	ret    

c001ecc4 <avxDetect.noAVX>:
c001ecc4:	b8 00 00 00 00       	mov    eax,0x0
c001ecc9:	c3                   	ret    

c001ecca <avxSave>:
c001ecca:	53                   	push   ebx
c001eccb:	52                   	push   edx
c001eccc:	31 c0                	xor    eax,eax
c001ecce:	48                   	dec    eax
c001eccf:	89 c2                	mov    edx,eax
c001ecd1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ecd5:	0f ae 23             	xsave  [ebx]
c001ecd8:	5a                   	pop    edx
c001ecd9:	5b                   	pop    ebx
c001ecda:	c3                   	ret    

c001ecdb <avxLoad>:
c001ecdb:	53                   	push   ebx
c001ecdc:	52                   	push   edx
c001ecdd:	31 c0                	xor    eax,eax
c001ecdf:	48                   	dec    eax
c001ece0:	89 c2                	mov    edx,eax
c001ece2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ece6:	0f ae 2b             	xrstor [ebx]
c001ece9:	5a                   	pop    edx
c001ecea:	5b                   	pop    ebx
c001eceb:	c3                   	ret    

c001ecec <avxInit>:
c001ecec:	e8 67 03 00 00       	call   c001f058 <sseInit>
c001ecf1:	50                   	push   eax
c001ecf2:	51                   	push   ecx
c001ecf3:	0f 20 e0             	mov    eax,cr4
c001ecf6:	0d 00 00 04 00       	or     eax,0x40000
c001ecfb:	0f 22 e0             	mov    cr4,eax
c001ecfe:	31 c9                	xor    ecx,ecx
c001ed00:	0f 01 d0             	xgetbv 
c001ed03:	0d 07 00 00 00       	or     eax,0x7
c001ed08:	0f 01 d1             	xsetbv 
c001ed0b:	59                   	pop    ecx
c001ed0c:	58                   	pop    eax
c001ed0d:	c3                   	ret    

c001ed0e <avxClose>:
c001ed0e:	c3                   	ret    

c001ed0f <wouldSheSayYes>:
c001ed0f:	c3                   	ret    
c001ed10:	49                   	dec    ecx
c001ed11:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001ed15:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001ed19:	75 20                	jne    c001ed3b <isr0+0xb>
c001ed1b:	4e                   	dec    esi
c001ed1c:	79 61                	jns    c001ed7f <isr7+0x3>
c001ed1e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001ed23:	66 90                	xchg   ax,ax
c001ed25:	66 90                	xchg   ax,ax
c001ed27:	66 90                	xchg   ax,ax
c001ed29:	66 90                	xchg   ax,ax
c001ed2b:	66 90                	xchg   ax,ax
c001ed2d:	66 90                	xchg   ax,ax
c001ed2f:	90                   	nop

c001ed30 <isr0>:
c001ed30:	fa                   	cli    
c001ed31:	68 00 00 00 00       	push   0x0
c001ed36:	68 00 00 00 00       	push   0x0
c001ed3b:	e9 56 01 00 00       	jmp    c001ee96 <int_common_stub>

c001ed40 <isr1>:
c001ed40:	fa                   	cli    
c001ed41:	6a 00                	push   0x0
c001ed43:	6a 01                	push   0x1
c001ed45:	e9 4c 01 00 00       	jmp    c001ee96 <int_common_stub>

c001ed4a <isr2>:
c001ed4a:	fa                   	cli    
c001ed4b:	6a 00                	push   0x0
c001ed4d:	6a 02                	push   0x2
c001ed4f:	e9 42 01 00 00       	jmp    c001ee96 <int_common_stub>

c001ed54 <isr3>:
c001ed54:	fa                   	cli    
c001ed55:	6a 00                	push   0x0
c001ed57:	6a 03                	push   0x3
c001ed59:	e9 38 01 00 00       	jmp    c001ee96 <int_common_stub>

c001ed5e <isr4>:
c001ed5e:	fa                   	cli    
c001ed5f:	6a 00                	push   0x0
c001ed61:	6a 04                	push   0x4
c001ed63:	e9 2e 01 00 00       	jmp    c001ee96 <int_common_stub>

c001ed68 <isr5>:
c001ed68:	fa                   	cli    
c001ed69:	6a 00                	push   0x0
c001ed6b:	6a 05                	push   0x5
c001ed6d:	e9 24 01 00 00       	jmp    c001ee96 <int_common_stub>

c001ed72 <isr6>:
c001ed72:	fa                   	cli    
c001ed73:	6a 00                	push   0x0
c001ed75:	6a 06                	push   0x6
c001ed77:	e9 1a 01 00 00       	jmp    c001ee96 <int_common_stub>

c001ed7c <isr7>:
c001ed7c:	fa                   	cli    
c001ed7d:	6a 00                	push   0x0
c001ed7f:	6a 07                	push   0x7
c001ed81:	e9 10 01 00 00       	jmp    c001ee96 <int_common_stub>

c001ed86 <isr8>:
c001ed86:	fa                   	cli    
c001ed87:	6a 08                	push   0x8
c001ed89:	e9 08 01 00 00       	jmp    c001ee96 <int_common_stub>

c001ed8e <isr9>:
c001ed8e:	fa                   	cli    
c001ed8f:	6a 00                	push   0x0
c001ed91:	6a 09                	push   0x9
c001ed93:	e9 fe 00 00 00       	jmp    c001ee96 <int_common_stub>

c001ed98 <isr10>:
c001ed98:	fa                   	cli    
c001ed99:	6a 0a                	push   0xa
c001ed9b:	e9 f6 00 00 00       	jmp    c001ee96 <int_common_stub>

c001eda0 <isr11>:
c001eda0:	fa                   	cli    
c001eda1:	6a 0b                	push   0xb
c001eda3:	e9 ee 00 00 00       	jmp    c001ee96 <int_common_stub>

c001eda8 <isr12>:
c001eda8:	fa                   	cli    
c001eda9:	6a 0c                	push   0xc
c001edab:	e9 e6 00 00 00       	jmp    c001ee96 <int_common_stub>

c001edb0 <isr13>:
c001edb0:	fa                   	cli    
c001edb1:	6a 0d                	push   0xd
c001edb3:	53                   	push   ebx
c001edb4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001edb8:	81 fb 86 ef 01 c0    	cmp    ebx,0xc001ef86
c001edbe:	5b                   	pop    ebx
c001edbf:	0f 84 c3 01 00 00    	je     c001ef88 <finishSignal2>
c001edc5:	e9 cc 00 00 00       	jmp    c001ee96 <int_common_stub>

c001edca <isr14>:
c001edca:	fa                   	cli    
c001edcb:	6a 0e                	push   0xe
c001edcd:	e9 c4 00 00 00       	jmp    c001ee96 <int_common_stub>

c001edd2 <isr15>:
c001edd2:	fa                   	cli    
c001edd3:	6a 00                	push   0x0
c001edd5:	6a 0f                	push   0xf
c001edd7:	e9 ba 00 00 00       	jmp    c001ee96 <int_common_stub>

c001eddc <isr16>:
c001eddc:	fa                   	cli    
c001eddd:	6a 00                	push   0x0
c001eddf:	6a 10                	push   0x10
c001ede1:	e9 b0 00 00 00       	jmp    c001ee96 <int_common_stub>

c001ede6 <isr17>:
c001ede6:	fa                   	cli    
c001ede7:	6a 00                	push   0x0
c001ede9:	6a 11                	push   0x11
c001edeb:	e9 a6 00 00 00       	jmp    c001ee96 <int_common_stub>

c001edf0 <isr18>:
c001edf0:	fa                   	cli    
c001edf1:	6a 00                	push   0x0
c001edf3:	6a 12                	push   0x12
c001edf5:	e9 9c 00 00 00       	jmp    c001ee96 <int_common_stub>

c001edfa <irq3>:
c001edfa:	fa                   	cli    
c001edfb:	6a 00                	push   0x0
c001edfd:	6a 23                	push   0x23
c001edff:	e9 92 00 00 00       	jmp    c001ee96 <int_common_stub>

c001ee04 <irq4>:
c001ee04:	fa                   	cli    
c001ee05:	6a 00                	push   0x0
c001ee07:	6a 24                	push   0x24
c001ee09:	e9 88 00 00 00       	jmp    c001ee96 <int_common_stub>

c001ee0e <irq5>:
c001ee0e:	fa                   	cli    
c001ee0f:	6a 00                	push   0x0
c001ee11:	6a 25                	push   0x25
c001ee13:	e9 7e 00 00 00       	jmp    c001ee96 <int_common_stub>

c001ee18 <irq6>:
c001ee18:	fa                   	cli    
c001ee19:	6a 00                	push   0x0
c001ee1b:	6a 26                	push   0x26
c001ee1d:	e9 74 00 00 00       	jmp    c001ee96 <int_common_stub>

c001ee22 <irq7>:
c001ee22:	fa                   	cli    
c001ee23:	6a 00                	push   0x0
c001ee25:	6a 27                	push   0x27
c001ee27:	e9 6a 00 00 00       	jmp    c001ee96 <int_common_stub>

c001ee2c <irq8>:
c001ee2c:	fa                   	cli    
c001ee2d:	6a 00                	push   0x0
c001ee2f:	6a 28                	push   0x28
c001ee31:	e9 60 00 00 00       	jmp    c001ee96 <int_common_stub>

c001ee36 <irq9>:
c001ee36:	fa                   	cli    
c001ee37:	6a 00                	push   0x0
c001ee39:	6a 29                	push   0x29
c001ee3b:	e9 56 00 00 00       	jmp    c001ee96 <int_common_stub>

c001ee40 <irq10>:
c001ee40:	fa                   	cli    
c001ee41:	6a 00                	push   0x0
c001ee43:	6a 2a                	push   0x2a
c001ee45:	e9 4c 00 00 00       	jmp    c001ee96 <int_common_stub>

c001ee4a <irq11>:
c001ee4a:	fa                   	cli    
c001ee4b:	6a 00                	push   0x0
c001ee4d:	6a 2b                	push   0x2b
c001ee4f:	e9 42 00 00 00       	jmp    c001ee96 <int_common_stub>

c001ee54 <irq12>:
c001ee54:	fa                   	cli    
c001ee55:	6a 00                	push   0x0
c001ee57:	6a 2c                	push   0x2c
c001ee59:	e9 38 00 00 00       	jmp    c001ee96 <int_common_stub>

c001ee5e <irq13>:
c001ee5e:	fa                   	cli    
c001ee5f:	6a 00                	push   0x0
c001ee61:	6a 2d                	push   0x2d
c001ee63:	e9 2e 00 00 00       	jmp    c001ee96 <int_common_stub>

c001ee68 <irq14>:
c001ee68:	fa                   	cli    
c001ee69:	6a 00                	push   0x0
c001ee6b:	6a 2e                	push   0x2e
c001ee6d:	e9 24 00 00 00       	jmp    c001ee96 <int_common_stub>

c001ee72 <irq15>:
c001ee72:	fa                   	cli    
c001ee73:	6a 00                	push   0x0
c001ee75:	6a 2f                	push   0x2f
c001ee77:	e9 1a 00 00 00       	jmp    c001ee96 <int_common_stub>

c001ee7c <irq1>:
c001ee7c:	fa                   	cli    
c001ee7d:	6a 00                	push   0x0
c001ee7f:	6a 21                	push   0x21
c001ee81:	eb 13                	jmp    c001ee96 <int_common_stub>

c001ee83 <irq2>:
c001ee83:	fa                   	cli    
c001ee84:	6a 00                	push   0x0
c001ee86:	6a 22                	push   0x22
c001ee88:	eb 0c                	jmp    c001ee96 <int_common_stub>

c001ee8a <isr96>:
c001ee8a:	6a 00                	push   0x0
c001ee8c:	6a 60                	push   0x60
c001ee8e:	fb                   	sti    
c001ee8f:	eb 37                	jmp    c001eec8 <syscall_common_stub>

c001ee91 <irq0>:
c001ee91:	fa                   	cli    
c001ee92:	6a 00                	push   0x0
c001ee94:	6a 20                	push   0x20

c001ee96 <int_common_stub>:
c001ee96:	60                   	pusha  
c001ee97:	1e                   	push   ds
c001ee98:	06                   	push   es
c001ee99:	0f a0                	push   fs
c001ee9b:	0f a8                	push   gs
c001ee9d:	66 b8 10 00          	mov    ax,0x10
c001eea1:	66 8e d8             	mov    ds,ax
c001eea4:	66 8e c0             	mov    es,ax
c001eea7:	66 8e e0             	mov    fs,ax
c001eeaa:	66 8e e8             	mov    gs,ax
c001eead:	54                   	push   esp
c001eeae:	fc                   	cld    
c001eeaf:	e8 40 dd fe ff       	call   c000cbf4 <int_handler>
c001eeb4:	81 c4 04 00 00 00    	add    esp,0x4
c001eeba:	0f a9                	pop    gs
c001eebc:	0f a1                	pop    fs
c001eebe:	07                   	pop    es
c001eebf:	1f                   	pop    ds
c001eec0:	61                   	popa   
c001eec1:	81 c4 08 00 00 00    	add    esp,0x8
c001eec7:	cf                   	iret   

c001eec8 <syscall_common_stub>:
c001eec8:	60                   	pusha  
c001eec9:	1e                   	push   ds
c001eeca:	06                   	push   es
c001eecb:	0f a0                	push   fs
c001eecd:	0f a8                	push   gs
c001eecf:	66 b8 10 00          	mov    ax,0x10
c001eed3:	66 8e d8             	mov    ds,ax
c001eed6:	66 8e c0             	mov    es,ax
c001eed9:	66 8e e0             	mov    fs,ax
c001eedc:	66 8e e8             	mov    gs,ax
c001eedf:	54                   	push   esp
c001eee0:	fc                   	cld    
c001eee1:	e8 0e dd fe ff       	call   c000cbf4 <int_handler>
c001eee6:	81 c4 04 00 00 00    	add    esp,0x4
c001eeec:	0f a9                	pop    gs
c001eeee:	0f a1                	pop    fs
c001eef0:	07                   	pop    es
c001eef1:	1f                   	pop    ds
c001eef2:	e8 97 2a ff ff       	call   c001198e <KiCheckSignalZ>
c001eef7:	3d 00 00 00 00       	cmp    eax,0x0
c001eefc:	0f 84 c0 00 00 00    	je     c001efc2 <skipSignals>
c001ef02:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001ef07:	61                   	popa   
c001ef08:	53                   	push   ebx
c001ef09:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001ef0f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001ef12:	5b                   	pop    ebx
c001ef13:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001ef18:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001ef1b:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001ef1e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001ef21:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001ef24:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001ef27:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001ef2a:	81 c4 08 00 00 00    	add    esp,0x8
c001ef30:	5e                   	pop    esi
c001ef31:	5b                   	pop    ebx
c001ef32:	59                   	pop    ecx
c001ef33:	5a                   	pop    edx
c001ef34:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001ef37:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001ef3a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001ef3d:	52                   	push   edx
c001ef3e:	51                   	push   ecx
c001ef3f:	53                   	push   ebx
c001ef40:	56                   	push   esi
c001ef41:	81 ec 08 00 00 00    	sub    esp,0x8
c001ef47:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001ef4a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001ef4d:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001ef50:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ef53:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001ef56:	60                   	pusha  
c001ef57:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001ef5d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001ef60:	89 e3                	mov    ebx,esp
c001ef62:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001ef65:	52                   	push   edx
c001ef66:	68 86 ef 01 c0       	push   0xc001ef86
c001ef6b:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001ef6e:	89 dc                	mov    esp,ebx
c001ef70:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001ef73:	68 23 00 00 00       	push   0x23
c001ef78:	51                   	push   ecx
c001ef79:	68 02 02 00 00       	push   0x202
c001ef7e:	68 1b 00 00 00       	push   0x1b
c001ef83:	ff 36                	push   DWORD PTR [esi]
c001ef85:	cf                   	iret   

c001ef86 <finishSignal>:
c001ef86:	cd 0f                	int    0xf

c001ef88 <finishSignal2>:
c001ef88:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001ef8e:	e8 78 2a ff ff       	call   c0011a0b <KiFinishSignalZ>
c001ef93:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001ef99:	68 23 00 00 00       	push   0x23
c001ef9e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001efa1:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001efa4:	68 1b 00 00 00       	push   0x1b
c001efa9:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001efac:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001efaf:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001efb2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001efb5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001efb8:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001efbb:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001efbe:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001efc1:	cf                   	iret   

c001efc2 <skipSignals>:
c001efc2:	61                   	popa   
c001efc3:	81 c4 08 00 00 00    	add    esp,0x8
c001efc9:	cf                   	iret   
c001efca:	90                   	nop
c001efcb:	90                   	nop

c001efcc <irq16>:
c001efcc:	fa                   	cli    
c001efcd:	6a 00                	push   0x0
c001efcf:	6a 30                	push   0x30
c001efd1:	e9 c0 fe ff ff       	jmp    c001ee96 <int_common_stub>

c001efd6 <irq17>:
c001efd6:	fa                   	cli    
c001efd7:	6a 00                	push   0x0
c001efd9:	6a 31                	push   0x31
c001efdb:	e9 b6 fe ff ff       	jmp    c001ee96 <int_common_stub>

c001efe0 <irq18>:
c001efe0:	fa                   	cli    
c001efe1:	6a 00                	push   0x0
c001efe3:	6a 32                	push   0x32
c001efe5:	e9 ac fe ff ff       	jmp    c001ee96 <int_common_stub>

c001efea <irq19>:
c001efea:	fa                   	cli    
c001efeb:	6a 00                	push   0x0
c001efed:	6a 33                	push   0x33
c001efef:	e9 a2 fe ff ff       	jmp    c001ee96 <int_common_stub>

c001eff4 <irq20>:
c001eff4:	fa                   	cli    
c001eff5:	6a 00                	push   0x0
c001eff7:	6a 34                	push   0x34
c001eff9:	e9 98 fe ff ff       	jmp    c001ee96 <int_common_stub>

c001effe <irq21>:
c001effe:	fa                   	cli    
c001efff:	6a 00                	push   0x0
c001f001:	6a 35                	push   0x35
c001f003:	e9 8e fe ff ff       	jmp    c001ee96 <int_common_stub>

c001f008 <irq22>:
c001f008:	fa                   	cli    
c001f009:	6a 00                	push   0x0
c001f00b:	6a 36                	push   0x36
c001f00d:	e9 84 fe ff ff       	jmp    c001ee96 <int_common_stub>

c001f012 <irq23>:
c001f012:	fa                   	cli    
c001f013:	6a 00                	push   0x0
c001f015:	6a 37                	push   0x37
c001f017:	e9 7a fe ff ff       	jmp    c001ee96 <int_common_stub>
c001f01c:	66 90                	xchg   ax,ax
c001f01e:	66 90                	xchg   ax,ax

c001f020 <i386GetRDRAND>:
c001f020:	b9 64 00 00 00       	mov    ecx,0x64

c001f025 <retry>:
c001f025:	0f c7 f0             	rdrand eax
c001f028:	72 05                	jb     c001f02f <retry.done>
c001f02a:	e2 f9                	loop   c001f025 <retry>

c001f02c <retry.fail>:
c001f02c:	31 c0                	xor    eax,eax
c001f02e:	c3                   	ret    

c001f02f <retry.done>:
c001f02f:	c3                   	ret    

c001f030 <absolutelyNoChanceInHell>:
c001f030:	b8 01 00 00 00       	mov    eax,0x1
c001f035:	0f a2                	cpuid  
c001f037:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001f03d:	74 06                	je     c001f045 <sseDetect.noSSE>
c001f03f:	b8 01 00 00 00       	mov    eax,0x1
c001f044:	c3                   	ret    

c001f045 <sseDetect.noSSE>:
c001f045:	31 c0                	xor    eax,eax
c001f047:	c3                   	ret    

c001f048 <sseSave>:
c001f048:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f04c:	0f ae 00             	fxsave [eax]
c001f04f:	c3                   	ret    

c001f050 <sseLoad>:
c001f050:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f054:	0f ae 08             	fxrstor [eax]
c001f057:	c3                   	ret    

c001f058 <sseInit>:
c001f058:	e8 42 00 00 00       	call   c001f09f <x87Init>
c001f05d:	0f 20 e0             	mov    eax,cr4
c001f060:	66 0d 00 06          	or     ax,0x600
c001f064:	0f 22 e0             	mov    cr4,eax
c001f067:	c3                   	ret    

c001f068 <sseClose>:
c001f068:	c3                   	ret    
c001f069:	66 90                	xchg   ax,ax
c001f06b:	66 90                	xchg   ax,ax
c001f06d:	66 90                	xchg   ax,ax
c001f06f:	90                   	nop

c001f070 <value_37F>:
c001f070:	7f 03                	jg     c001f075 <value_37A+0x1>

c001f072 <value_37E>:
c001f072:	7e 03                	jle    c001f077 <x87Detect+0x1>

c001f074 <value_37A>:
c001f074:	7a 03                	jp     c001f079 <x87Detect+0x3>

c001f076 <x87Detect>:
c001f076:	b8 01 00 00 00       	mov    eax,0x1
c001f07b:	0f a2                	cpuid  
c001f07d:	f7 c2 01 00 00 00    	test   edx,0x1
c001f083:	74 06                	je     c001f08b <x87Detect.nox87>
c001f085:	b8 01 00 00 00       	mov    eax,0x1
c001f08a:	c3                   	ret    

c001f08b <x87Detect.nox87>:
c001f08b:	b8 00 00 00 00       	mov    eax,0x0
c001f090:	c3                   	ret    

c001f091 <x87Save>:
c001f091:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f095:	dd 30                	fnsave [eax]
c001f097:	c3                   	ret    

c001f098 <x87Load>:
c001f098:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f09c:	dd 20                	frstor [eax]
c001f09e:	c3                   	ret    

c001f09f <x87Init>:
c001f09f:	0f 20 c0             	mov    eax,cr0
c001f0a2:	66 25 fb ff          	and    ax,0xfffb
c001f0a6:	66 0d 22 00          	or     ax,0x22
c001f0aa:	0f 22 c0             	mov    cr0,eax
c001f0ad:	db e3                	fninit 
c001f0af:	0f 06                	clts   
c001f0b1:	d9 2d 74 f0 01 c0    	fldcw  WORD PTR ds:0xc001f074
c001f0b7:	c3                   	ret    

c001f0b8 <x87Close>:
c001f0b8:	c3                   	ret    
c001f0b9:	66 90                	xchg   ax,ax
c001f0bb:	90                   	nop

c001f0bc <__do_global_ctors_aux>:
c001f0bc:	a1 70 00 02 c0       	mov    eax,ds:0xc0020070
c001f0c1:	83 f8 ff             	cmp    eax,0xffffffff
c001f0c4:	74 1a                	je     c001f0e0 <__do_global_ctors_aux+0x24>
c001f0c6:	55                   	push   ebp
c001f0c7:	89 e5                	mov    ebp,esp
c001f0c9:	53                   	push   ebx
c001f0ca:	52                   	push   edx
c001f0cb:	bb 70 00 02 c0       	mov    ebx,0xc0020070
c001f0d0:	ff d0                	call   eax
c001f0d2:	83 eb 04             	sub    ebx,0x4
c001f0d5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f0d7:	83 f8 ff             	cmp    eax,0xffffffff
c001f0da:	75 f4                	jne    c001f0d0 <__do_global_ctors_aux+0x14>
c001f0dc:	58                   	pop    eax
c001f0dd:	5b                   	pop    ebx
c001f0de:	5d                   	pop    ebp
c001f0df:	c3                   	ret    
c001f0e0:	c3                   	ret    
c001f0e1:	66 90                	xchg   ax,ax
c001f0e3:	90                   	nop

c001f0e4 <__divdi3>:
c001f0e4:	55                   	push   ebp
c001f0e5:	57                   	push   edi
c001f0e6:	56                   	push   esi
c001f0e7:	53                   	push   ebx
c001f0e8:	83 ec 1c             	sub    esp,0x1c
c001f0eb:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001f0ef:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f0f3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f0f6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f0fa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f0fe:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f102:	85 db                	test   ebx,ebx
c001f104:	0f 88 8e 00 00 00    	js     c001f198 <__divdi3+0xb4>
c001f10a:	89 dd                	mov    ebp,ebx
c001f10c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001f114:	89 d3                	mov    ebx,edx
c001f116:	85 d2                	test   edx,edx
c001f118:	79 0d                	jns    c001f127 <__divdi3+0x43>
c001f11a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001f11e:	f7 d8                	neg    eax
c001f120:	83 d2 00             	adc    edx,0x0
c001f123:	f7 da                	neg    edx
c001f125:	89 d3                	mov    ebx,edx
c001f127:	89 c7                	mov    edi,eax
c001f129:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f12c:	85 db                	test   ebx,ebx
c001f12e:	75 48                	jne    c001f178 <__divdi3+0x94>
c001f130:	39 ef                	cmp    edi,ebp
c001f132:	76 24                	jbe    c001f158 <__divdi3+0x74>
c001f134:	89 ea                	mov    edx,ebp
c001f136:	f7 f7                	div    edi
c001f138:	89 c1                	mov    ecx,eax
c001f13a:	31 f6                	xor    esi,esi
c001f13c:	89 c8                	mov    eax,ecx
c001f13e:	89 f2                	mov    edx,esi
c001f140:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f144:	85 c9                	test   ecx,ecx
c001f146:	74 07                	je     c001f14f <__divdi3+0x6b>
c001f148:	f7 d8                	neg    eax
c001f14a:	83 d2 00             	adc    edx,0x0
c001f14d:	f7 da                	neg    edx
c001f14f:	83 c4 1c             	add    esp,0x1c
c001f152:	5b                   	pop    ebx
c001f153:	5e                   	pop    esi
c001f154:	5f                   	pop    edi
c001f155:	5d                   	pop    ebp
c001f156:	c3                   	ret    
c001f157:	90                   	nop
c001f158:	85 ff                	test   edi,edi
c001f15a:	75 0b                	jne    c001f167 <__divdi3+0x83>
c001f15c:	b8 01 00 00 00       	mov    eax,0x1
c001f161:	31 d2                	xor    edx,edx
c001f163:	f7 f3                	div    ebx
c001f165:	89 c7                	mov    edi,eax
c001f167:	31 d2                	xor    edx,edx
c001f169:	89 e8                	mov    eax,ebp
c001f16b:	f7 f7                	div    edi
c001f16d:	89 c6                	mov    esi,eax
c001f16f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f172:	f7 f7                	div    edi
c001f174:	89 c1                	mov    ecx,eax
c001f176:	eb c4                	jmp    c001f13c <__divdi3+0x58>
c001f178:	39 eb                	cmp    ebx,ebp
c001f17a:	77 3c                	ja     c001f1b8 <__divdi3+0xd4>
c001f17c:	0f bd f3             	bsr    esi,ebx
c001f17f:	83 f6 1f             	xor    esi,0x1f
c001f182:	75 40                	jne    c001f1c4 <__divdi3+0xe0>
c001f184:	39 eb                	cmp    ebx,ebp
c001f186:	72 09                	jb     c001f191 <__divdi3+0xad>
c001f188:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001f18b:	0f 87 97 00 00 00    	ja     c001f228 <__divdi3+0x144>
c001f191:	b9 01 00 00 00       	mov    ecx,0x1
c001f196:	eb a4                	jmp    c001f13c <__divdi3+0x58>
c001f198:	f7 d9                	neg    ecx
c001f19a:	83 d3 00             	adc    ebx,0x0
c001f19d:	f7 db                	neg    ebx
c001f19f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f1a2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f1a6:	89 dd                	mov    ebp,ebx
c001f1a8:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001f1b0:	e9 5f ff ff ff       	jmp    c001f114 <__divdi3+0x30>
c001f1b5:	8d 76 00             	lea    esi,[esi+0x0]
c001f1b8:	31 f6                	xor    esi,esi
c001f1ba:	31 c9                	xor    ecx,ecx
c001f1bc:	e9 7b ff ff ff       	jmp    c001f13c <__divdi3+0x58>
c001f1c1:	8d 76 00             	lea    esi,[esi+0x0]
c001f1c4:	b8 20 00 00 00       	mov    eax,0x20
c001f1c9:	29 f0                	sub    eax,esi
c001f1cb:	89 f1                	mov    ecx,esi
c001f1cd:	d3 e3                	shl    ebx,cl
c001f1cf:	89 fa                	mov    edx,edi
c001f1d1:	88 c1                	mov    cl,al
c001f1d3:	d3 ea                	shr    edx,cl
c001f1d5:	09 da                	or     edx,ebx
c001f1d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f1db:	89 f1                	mov    ecx,esi
c001f1dd:	d3 e7                	shl    edi,cl
c001f1df:	89 eb                	mov    ebx,ebp
c001f1e1:	88 c1                	mov    cl,al
c001f1e3:	d3 eb                	shr    ebx,cl
c001f1e5:	89 f1                	mov    ecx,esi
c001f1e7:	d3 e5                	shl    ebp,cl
c001f1e9:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001f1ec:	88 c1                	mov    cl,al
c001f1ee:	d3 ea                	shr    edx,cl
c001f1f0:	09 d5                	or     ebp,edx
c001f1f2:	89 e8                	mov    eax,ebp
c001f1f4:	89 da                	mov    edx,ebx
c001f1f6:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001f1fa:	89 d3                	mov    ebx,edx
c001f1fc:	89 c5                	mov    ebp,eax
c001f1fe:	f7 e7                	mul    edi
c001f200:	39 d3                	cmp    ebx,edx
c001f202:	72 18                	jb     c001f21c <__divdi3+0x138>
c001f204:	74 0a                	je     c001f210 <__divdi3+0x12c>
c001f206:	89 e9                	mov    ecx,ebp
c001f208:	31 f6                	xor    esi,esi
c001f20a:	e9 2d ff ff ff       	jmp    c001f13c <__divdi3+0x58>
c001f20f:	90                   	nop
c001f210:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001f213:	89 f1                	mov    ecx,esi
c001f215:	d3 e7                	shl    edi,cl
c001f217:	39 c7                	cmp    edi,eax
c001f219:	73 eb                	jae    c001f206 <__divdi3+0x122>
c001f21b:	90                   	nop
c001f21c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001f21f:	31 f6                	xor    esi,esi
c001f221:	e9 16 ff ff ff       	jmp    c001f13c <__divdi3+0x58>
c001f226:	66 90                	xchg   ax,ax
c001f228:	31 c9                	xor    ecx,ecx
c001f22a:	e9 0d ff ff ff       	jmp    c001f13c <__divdi3+0x58>
c001f22f:	90                   	nop

c001f230 <__moddi3>:
c001f230:	55                   	push   ebp
c001f231:	57                   	push   edi
c001f232:	56                   	push   esi
c001f233:	53                   	push   ebx
c001f234:	83 ec 2c             	sub    esp,0x2c
c001f237:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f23b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001f23f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f243:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f247:	85 db                	test   ebx,ebx
c001f249:	0f 88 85 00 00 00    	js     c001f2d4 <__moddi3+0xa4>
c001f24f:	89 de                	mov    esi,ebx
c001f251:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001f259:	89 d7                	mov    edi,edx
c001f25b:	85 d2                	test   edx,edx
c001f25d:	79 09                	jns    c001f268 <__moddi3+0x38>
c001f25f:	f7 d8                	neg    eax
c001f261:	83 d2 00             	adc    edx,0x0
c001f264:	f7 da                	neg    edx
c001f266:	89 d7                	mov    edi,edx
c001f268:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f26c:	89 cd                	mov    ebp,ecx
c001f26e:	85 ff                	test   edi,edi
c001f270:	75 52                	jne    c001f2c4 <__moddi3+0x94>
c001f272:	89 c3                	mov    ebx,eax
c001f274:	39 f0                	cmp    eax,esi
c001f276:	76 24                	jbe    c001f29c <__moddi3+0x6c>
c001f278:	89 c8                	mov    eax,ecx
c001f27a:	89 f2                	mov    edx,esi
c001f27c:	f7 f3                	div    ebx
c001f27e:	89 d6                	mov    esi,edx
c001f280:	89 f0                	mov    eax,esi
c001f282:	31 d2                	xor    edx,edx
c001f284:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f288:	85 c9                	test   ecx,ecx
c001f28a:	74 07                	je     c001f293 <__moddi3+0x63>
c001f28c:	f7 d8                	neg    eax
c001f28e:	83 d2 00             	adc    edx,0x0
c001f291:	f7 da                	neg    edx
c001f293:	83 c4 2c             	add    esp,0x2c
c001f296:	5b                   	pop    ebx
c001f297:	5e                   	pop    esi
c001f298:	5f                   	pop    edi
c001f299:	5d                   	pop    ebp
c001f29a:	c3                   	ret    
c001f29b:	90                   	nop
c001f29c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f2a0:	85 db                	test   ebx,ebx
c001f2a2:	75 0d                	jne    c001f2b1 <__moddi3+0x81>
c001f2a4:	b8 01 00 00 00       	mov    eax,0x1
c001f2a9:	31 d2                	xor    edx,edx
c001f2ab:	f7 f7                	div    edi
c001f2ad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f2b1:	89 f0                	mov    eax,esi
c001f2b3:	31 d2                	xor    edx,edx
c001f2b5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f2b9:	f7 f7                	div    edi
c001f2bb:	89 e8                	mov    eax,ebp
c001f2bd:	f7 f7                	div    edi
c001f2bf:	89 d6                	mov    esi,edx
c001f2c1:	eb bd                	jmp    c001f280 <__moddi3+0x50>
c001f2c3:	90                   	nop
c001f2c4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f2c8:	39 f7                	cmp    edi,esi
c001f2ca:	76 20                	jbe    c001f2ec <__moddi3+0xbc>
c001f2cc:	89 c8                	mov    eax,ecx
c001f2ce:	89 f2                	mov    edx,esi
c001f2d0:	eb b2                	jmp    c001f284 <__moddi3+0x54>
c001f2d2:	66 90                	xchg   ax,ax
c001f2d4:	f7 d9                	neg    ecx
c001f2d6:	83 d3 00             	adc    ebx,0x0
c001f2d9:	f7 db                	neg    ebx
c001f2db:	89 de                	mov    esi,ebx
c001f2dd:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001f2e5:	e9 6f ff ff ff       	jmp    c001f259 <__moddi3+0x29>
c001f2ea:	66 90                	xchg   ax,ax
c001f2ec:	0f bd c7             	bsr    eax,edi
c001f2ef:	83 f0 1f             	xor    eax,0x1f
c001f2f2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f2f6:	75 24                	jne    c001f31c <__moddi3+0xec>
c001f2f8:	39 f7                	cmp    edi,esi
c001f2fa:	72 06                	jb     c001f302 <__moddi3+0xd2>
c001f2fc:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001f300:	77 0c                	ja     c001f30e <__moddi3+0xde>
c001f302:	89 e9                	mov    ecx,ebp
c001f304:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001f308:	19 fe                	sbb    esi,edi
c001f30a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f30e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f312:	89 f2                	mov    edx,esi
c001f314:	e9 6b ff ff ff       	jmp    c001f284 <__moddi3+0x54>
c001f319:	8d 76 00             	lea    esi,[esi+0x0]
c001f31c:	b8 20 00 00 00       	mov    eax,0x20
c001f321:	89 c2                	mov    edx,eax
c001f323:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f327:	29 da                	sub    edx,ebx
c001f329:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f32d:	88 d9                	mov    cl,bl
c001f32f:	d3 e7                	shl    edi,cl
c001f331:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f335:	88 d1                	mov    cl,dl
c001f337:	d3 e8                	shr    eax,cl
c001f339:	09 c7                	or     edi,eax
c001f33b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001f33f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f343:	89 d8                	mov    eax,ebx
c001f345:	88 d9                	mov    cl,bl
c001f347:	d3 e7                	shl    edi,cl
c001f349:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f34d:	89 f3                	mov    ebx,esi
c001f34f:	88 d1                	mov    cl,dl
c001f351:	d3 eb                	shr    ebx,cl
c001f353:	89 c7                	mov    edi,eax
c001f355:	88 c1                	mov    cl,al
c001f357:	d3 e6                	shl    esi,cl
c001f359:	89 e8                	mov    eax,ebp
c001f35b:	88 d1                	mov    cl,dl
c001f35d:	d3 e8                	shr    eax,cl
c001f35f:	09 f0                	or     eax,esi
c001f361:	89 f9                	mov    ecx,edi
c001f363:	d3 e5                	shl    ebp,cl
c001f365:	89 da                	mov    edx,ebx
c001f367:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001f36b:	89 d3                	mov    ebx,edx
c001f36d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f371:	89 c6                	mov    esi,eax
c001f373:	89 d1                	mov    ecx,edx
c001f375:	39 d3                	cmp    ebx,edx
c001f377:	72 27                	jb     c001f3a0 <__moddi3+0x170>
c001f379:	74 21                	je     c001f39c <__moddi3+0x16c>
c001f37b:	29 f5                	sub    ebp,esi
c001f37d:	19 cb                	sbb    ebx,ecx
c001f37f:	89 de                	mov    esi,ebx
c001f381:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001f385:	d3 e6                	shl    esi,cl
c001f387:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f38b:	89 f9                	mov    ecx,edi
c001f38d:	d3 ed                	shr    ebp,cl
c001f38f:	09 ee                	or     esi,ebp
c001f391:	89 f0                	mov    eax,esi
c001f393:	d3 eb                	shr    ebx,cl
c001f395:	89 da                	mov    edx,ebx
c001f397:	e9 e8 fe ff ff       	jmp    c001f284 <__moddi3+0x54>
c001f39c:	39 c5                	cmp    ebp,eax
c001f39e:	73 db                	jae    c001f37b <__moddi3+0x14b>
c001f3a0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f3a4:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001f3a8:	89 d1                	mov    ecx,edx
c001f3aa:	89 c6                	mov    esi,eax
c001f3ac:	eb cd                	jmp    c001f37b <__moddi3+0x14b>
c001f3ae:	66 90                	xchg   ax,ax

c001f3b0 <__udivdi3>:
c001f3b0:	55                   	push   ebp
c001f3b1:	57                   	push   edi
c001f3b2:	56                   	push   esi
c001f3b3:	53                   	push   ebx
c001f3b4:	83 ec 1c             	sub    esp,0x1c
c001f3b7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f3bb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f3bf:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f3c3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f3c7:	85 d2                	test   edx,edx
c001f3c9:	75 41                	jne    c001f40c <__udivdi3+0x5c>
c001f3cb:	39 f7                	cmp    edi,esi
c001f3cd:	76 15                	jbe    c001f3e4 <__udivdi3+0x34>
c001f3cf:	89 e8                	mov    eax,ebp
c001f3d1:	89 f2                	mov    edx,esi
c001f3d3:	f7 f7                	div    edi
c001f3d5:	31 db                	xor    ebx,ebx
c001f3d7:	89 da                	mov    edx,ebx
c001f3d9:	83 c4 1c             	add    esp,0x1c
c001f3dc:	5b                   	pop    ebx
c001f3dd:	5e                   	pop    esi
c001f3de:	5f                   	pop    edi
c001f3df:	5d                   	pop    ebp
c001f3e0:	c3                   	ret    
c001f3e1:	8d 76 00             	lea    esi,[esi+0x0]
c001f3e4:	89 f9                	mov    ecx,edi
c001f3e6:	85 ff                	test   edi,edi
c001f3e8:	75 0b                	jne    c001f3f5 <__udivdi3+0x45>
c001f3ea:	b8 01 00 00 00       	mov    eax,0x1
c001f3ef:	31 d2                	xor    edx,edx
c001f3f1:	f7 f7                	div    edi
c001f3f3:	89 c1                	mov    ecx,eax
c001f3f5:	31 d2                	xor    edx,edx
c001f3f7:	89 f0                	mov    eax,esi
c001f3f9:	f7 f1                	div    ecx
c001f3fb:	89 c3                	mov    ebx,eax
c001f3fd:	89 e8                	mov    eax,ebp
c001f3ff:	f7 f1                	div    ecx
c001f401:	89 da                	mov    edx,ebx
c001f403:	83 c4 1c             	add    esp,0x1c
c001f406:	5b                   	pop    ebx
c001f407:	5e                   	pop    esi
c001f408:	5f                   	pop    edi
c001f409:	5d                   	pop    ebp
c001f40a:	c3                   	ret    
c001f40b:	90                   	nop
c001f40c:	39 f2                	cmp    edx,esi
c001f40e:	77 1c                	ja     c001f42c <__udivdi3+0x7c>
c001f410:	0f bd da             	bsr    ebx,edx
c001f413:	83 f3 1f             	xor    ebx,0x1f
c001f416:	75 24                	jne    c001f43c <__udivdi3+0x8c>
c001f418:	39 f2                	cmp    edx,esi
c001f41a:	72 08                	jb     c001f424 <__udivdi3+0x74>
c001f41c:	39 ef                	cmp    edi,ebp
c001f41e:	0f 87 84 00 00 00    	ja     c001f4a8 <__udivdi3+0xf8>
c001f424:	b8 01 00 00 00       	mov    eax,0x1
c001f429:	eb ac                	jmp    c001f3d7 <__udivdi3+0x27>
c001f42b:	90                   	nop
c001f42c:	31 db                	xor    ebx,ebx
c001f42e:	31 c0                	xor    eax,eax
c001f430:	89 da                	mov    edx,ebx
c001f432:	83 c4 1c             	add    esp,0x1c
c001f435:	5b                   	pop    ebx
c001f436:	5e                   	pop    esi
c001f437:	5f                   	pop    edi
c001f438:	5d                   	pop    ebp
c001f439:	c3                   	ret    
c001f43a:	66 90                	xchg   ax,ax
c001f43c:	b8 20 00 00 00       	mov    eax,0x20
c001f441:	29 d8                	sub    eax,ebx
c001f443:	88 d9                	mov    cl,bl
c001f445:	d3 e2                	shl    edx,cl
c001f447:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f44b:	89 fa                	mov    edx,edi
c001f44d:	88 c1                	mov    cl,al
c001f44f:	d3 ea                	shr    edx,cl
c001f451:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f455:	09 d1                	or     ecx,edx
c001f457:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f45b:	88 d9                	mov    cl,bl
c001f45d:	d3 e7                	shl    edi,cl
c001f45f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f463:	89 f7                	mov    edi,esi
c001f465:	88 c1                	mov    cl,al
c001f467:	d3 ef                	shr    edi,cl
c001f469:	88 d9                	mov    cl,bl
c001f46b:	d3 e6                	shl    esi,cl
c001f46d:	89 ea                	mov    edx,ebp
c001f46f:	88 c1                	mov    cl,al
c001f471:	d3 ea                	shr    edx,cl
c001f473:	09 d6                	or     esi,edx
c001f475:	89 f0                	mov    eax,esi
c001f477:	89 fa                	mov    edx,edi
c001f479:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f47d:	89 d7                	mov    edi,edx
c001f47f:	89 c6                	mov    esi,eax
c001f481:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f485:	39 d7                	cmp    edi,edx
c001f487:	72 13                	jb     c001f49c <__udivdi3+0xec>
c001f489:	74 09                	je     c001f494 <__udivdi3+0xe4>
c001f48b:	89 f0                	mov    eax,esi
c001f48d:	31 db                	xor    ebx,ebx
c001f48f:	e9 43 ff ff ff       	jmp    c001f3d7 <__udivdi3+0x27>
c001f494:	88 d9                	mov    cl,bl
c001f496:	d3 e5                	shl    ebp,cl
c001f498:	39 c5                	cmp    ebp,eax
c001f49a:	73 ef                	jae    c001f48b <__udivdi3+0xdb>
c001f49c:	8d 46 ff             	lea    eax,[esi-0x1]
c001f49f:	31 db                	xor    ebx,ebx
c001f4a1:	e9 31 ff ff ff       	jmp    c001f3d7 <__udivdi3+0x27>
c001f4a6:	66 90                	xchg   ax,ax
c001f4a8:	31 c0                	xor    eax,eax
c001f4aa:	e9 28 ff ff ff       	jmp    c001f3d7 <__udivdi3+0x27>
c001f4af:	90                   	nop

c001f4b0 <__umoddi3>:
c001f4b0:	55                   	push   ebp
c001f4b1:	57                   	push   edi
c001f4b2:	56                   	push   esi
c001f4b3:	53                   	push   ebx
c001f4b4:	83 ec 1c             	sub    esp,0x1c
c001f4b7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f4bb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f4bf:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f4c3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f4c7:	89 da                	mov    edx,ebx
c001f4c9:	85 c0                	test   eax,eax
c001f4cb:	75 37                	jne    c001f504 <__umoddi3+0x54>
c001f4cd:	39 df                	cmp    edi,ebx
c001f4cf:	76 13                	jbe    c001f4e4 <__umoddi3+0x34>
c001f4d1:	89 f0                	mov    eax,esi
c001f4d3:	f7 f7                	div    edi
c001f4d5:	89 d0                	mov    eax,edx
c001f4d7:	31 d2                	xor    edx,edx
c001f4d9:	83 c4 1c             	add    esp,0x1c
c001f4dc:	5b                   	pop    ebx
c001f4dd:	5e                   	pop    esi
c001f4de:	5f                   	pop    edi
c001f4df:	5d                   	pop    ebp
c001f4e0:	c3                   	ret    
c001f4e1:	8d 76 00             	lea    esi,[esi+0x0]
c001f4e4:	89 fd                	mov    ebp,edi
c001f4e6:	85 ff                	test   edi,edi
c001f4e8:	75 0b                	jne    c001f4f5 <__umoddi3+0x45>
c001f4ea:	b8 01 00 00 00       	mov    eax,0x1
c001f4ef:	31 d2                	xor    edx,edx
c001f4f1:	f7 f7                	div    edi
c001f4f3:	89 c5                	mov    ebp,eax
c001f4f5:	89 d8                	mov    eax,ebx
c001f4f7:	31 d2                	xor    edx,edx
c001f4f9:	f7 f5                	div    ebp
c001f4fb:	89 f0                	mov    eax,esi
c001f4fd:	f7 f5                	div    ebp
c001f4ff:	89 d0                	mov    eax,edx
c001f501:	eb d4                	jmp    c001f4d7 <__umoddi3+0x27>
c001f503:	90                   	nop
c001f504:	89 f1                	mov    ecx,esi
c001f506:	39 d8                	cmp    eax,ebx
c001f508:	76 0a                	jbe    c001f514 <__umoddi3+0x64>
c001f50a:	89 f0                	mov    eax,esi
c001f50c:	83 c4 1c             	add    esp,0x1c
c001f50f:	5b                   	pop    ebx
c001f510:	5e                   	pop    esi
c001f511:	5f                   	pop    edi
c001f512:	5d                   	pop    ebp
c001f513:	c3                   	ret    
c001f514:	0f bd e8             	bsr    ebp,eax
c001f517:	83 f5 1f             	xor    ebp,0x1f
c001f51a:	75 1c                	jne    c001f538 <__umoddi3+0x88>
c001f51c:	39 d8                	cmp    eax,ebx
c001f51e:	72 04                	jb     c001f524 <__umoddi3+0x74>
c001f520:	39 f7                	cmp    edi,esi
c001f522:	77 08                	ja     c001f52c <__umoddi3+0x7c>
c001f524:	89 da                	mov    edx,ebx
c001f526:	29 fe                	sub    esi,edi
c001f528:	19 c2                	sbb    edx,eax
c001f52a:	89 f1                	mov    ecx,esi
c001f52c:	89 c8                	mov    eax,ecx
c001f52e:	83 c4 1c             	add    esp,0x1c
c001f531:	5b                   	pop    ebx
c001f532:	5e                   	pop    esi
c001f533:	5f                   	pop    edi
c001f534:	5d                   	pop    ebp
c001f535:	c3                   	ret    
c001f536:	66 90                	xchg   ax,ax
c001f538:	ba 20 00 00 00       	mov    edx,0x20
c001f53d:	29 ea                	sub    edx,ebp
c001f53f:	89 e9                	mov    ecx,ebp
c001f541:	d3 e0                	shl    eax,cl
c001f543:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f547:	89 f8                	mov    eax,edi
c001f549:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f54d:	88 d1                	mov    cl,dl
c001f54f:	d3 e8                	shr    eax,cl
c001f551:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f555:	09 c1                	or     ecx,eax
c001f557:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f55b:	89 e9                	mov    ecx,ebp
c001f55d:	d3 e7                	shl    edi,cl
c001f55f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f563:	89 d8                	mov    eax,ebx
c001f565:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f569:	88 d1                	mov    cl,dl
c001f56b:	d3 e8                	shr    eax,cl
c001f56d:	89 c7                	mov    edi,eax
c001f56f:	89 e9                	mov    ecx,ebp
c001f571:	d3 e3                	shl    ebx,cl
c001f573:	89 f0                	mov    eax,esi
c001f575:	88 d1                	mov    cl,dl
c001f577:	d3 e8                	shr    eax,cl
c001f579:	09 d8                	or     eax,ebx
c001f57b:	89 e9                	mov    ecx,ebp
c001f57d:	d3 e6                	shl    esi,cl
c001f57f:	89 f3                	mov    ebx,esi
c001f581:	89 fa                	mov    edx,edi
c001f583:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f587:	89 d1                	mov    ecx,edx
c001f589:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f58d:	89 c6                	mov    esi,eax
c001f58f:	89 d7                	mov    edi,edx
c001f591:	39 d1                	cmp    ecx,edx
c001f593:	72 27                	jb     c001f5bc <__umoddi3+0x10c>
c001f595:	74 21                	je     c001f5b8 <__umoddi3+0x108>
c001f597:	89 ca                	mov    edx,ecx
c001f599:	29 f3                	sub    ebx,esi
c001f59b:	19 fa                	sbb    edx,edi
c001f59d:	89 d0                	mov    eax,edx
c001f59f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001f5a3:	d3 e0                	shl    eax,cl
c001f5a5:	89 e9                	mov    ecx,ebp
c001f5a7:	d3 eb                	shr    ebx,cl
c001f5a9:	09 d8                	or     eax,ebx
c001f5ab:	d3 ea                	shr    edx,cl
c001f5ad:	83 c4 1c             	add    esp,0x1c
c001f5b0:	5b                   	pop    ebx
c001f5b1:	5e                   	pop    esi
c001f5b2:	5f                   	pop    edi
c001f5b3:	5d                   	pop    ebp
c001f5b4:	c3                   	ret    
c001f5b5:	8d 76 00             	lea    esi,[esi+0x0]
c001f5b8:	39 c3                	cmp    ebx,eax
c001f5ba:	73 db                	jae    c001f597 <__umoddi3+0xe7>
c001f5bc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f5c0:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001f5c4:	89 d7                	mov    edi,edx
c001f5c6:	89 c6                	mov    esi,eax
c001f5c8:	eb cd                	jmp    c001f597 <__umoddi3+0xe7>

Disassembly of section .init:

c001f5ca <_init>:
c001f5ca:	55                   	push   ebp
c001f5cb:	89 e5                	mov    ebp,esp
c001f5cd:	e8 22 0b fe ff       	call   c00000f4 <frame_dummy>
c001f5d2:	e8 e5 fa ff ff       	call   c001f0bc <__do_global_ctors_aux>
c001f5d7:	5d                   	pop    ebp
c001f5d8:	c3                   	ret    

Disassembly of section .fini:

c001f5d9 <_fini>:
c001f5d9:	55                   	push   ebp
c001f5da:	89 e5                	mov    ebp,esp
c001f5dc:	e8 a3 0a fe ff       	call   c0000084 <__do_global_dtors_aux>
c001f5e1:	5d                   	pop    ebp
c001f5e2:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001f5e4 <Computer::~Computer()>:
c001f5e4:	83 ec 0c             	sub    esp,0xc
c001f5e7:	ba f4 08 02 c0       	mov    edx,0xc00208f4
c001f5ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5f0:	89 10                	mov    DWORD PTR [eax],edx
c001f5f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5f6:	83 ec 0c             	sub    esp,0xc
c001f5f9:	50                   	push   eax
c001f5fa:	e8 4d d0 fe ff       	call   c000c64c <Device::~Device()>
c001f5ff:	83 c4 10             	add    esp,0x10
c001f602:	90                   	nop
c001f603:	83 c4 0c             	add    esp,0xc
c001f606:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001f608 <Computer::~Computer()>:
c001f608:	83 ec 0c             	sub    esp,0xc
c001f60b:	83 ec 0c             	sub    esp,0xc
c001f60e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f612:	e8 cd ff ff ff       	call   c001f5e4 <Computer::~Computer()>
c001f617:	83 c4 10             	add    esp,0x10
c001f61a:	83 ec 08             	sub    esp,0x8
c001f61d:	68 70 01 00 00       	push   0x170
c001f622:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f626:	e8 ed b1 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001f62b:	83 c4 10             	add    esp,0x10
c001f62e:	83 c4 0c             	add    esp,0xc
c001f631:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001f632 <idleCommon()>:
c001f632:	83 ec 0c             	sub    esp,0xc
c001f635:	fa                   	cli    
c001f636:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c001f63c:	e8 fb 66 ff ff       	call   c0015d3c <schedule()>
c001f641:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001f646:	48                   	dec    eax
c001f647:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001f64c:	75 01                	jne    c001f64f <idleCommon()+0x1d>
c001f64e:	fb                   	sti    
c001f64f:	83 c4 0c             	add    esp,0xc
c001f652:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001f654 <LinkedList<UnixFile>::~LinkedList()>:
c001f654:	90                   	nop
c001f655:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001f656 <LinkedList<UnixFile>::LinkedList()>:
c001f656:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f65a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f660:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f664:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f66b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f66f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f676:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f67a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f680:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f684:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f68b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f68f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f696:	90                   	nop
c001f697:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001f698 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001f698:	83 ec 0c             	sub    esp,0xc
c001f69b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f6a0:	75 10                	jne    c001f6b2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001f6a2:	83 ec 0c             	sub    esp,0xc
c001f6a5:	68 08 0b 02 c0       	push   0xc0020b08
c001f6aa:	e8 ca 1c ff ff       	call   c0011379 <KePanic(char const*)>
c001f6af:	83 c4 10             	add    esp,0x10
c001f6b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6b6:	8b 00                	mov    eax,DWORD PTR [eax]
c001f6b8:	85 c0                	test   eax,eax
c001f6ba:	74 34                	je     c001f6f0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f6bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6c0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f6c3:	85 c0                	test   eax,eax
c001f6c5:	74 29                	je     c001f6f0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f6c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6cb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f6ce:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f6d2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f6d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6d9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f6dd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f6e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6e4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f6e7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f6ee:	eb 65                	jmp    c001f755 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f6f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6f4:	8b 00                	mov    eax,DWORD PTR [eax]
c001f6f6:	85 c0                	test   eax,eax
c001f6f8:	75 4b                	jne    c001f745 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f6fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f701:	85 c0                	test   eax,eax
c001f703:	75 40                	jne    c001f745 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f705:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f709:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f70d:	89 10                	mov    DWORD PTR [eax],edx
c001f70f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f713:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f717:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f71a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f71e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f721:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f728:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f72c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f72f:	85 c0                	test   eax,eax
c001f731:	74 22                	je     c001f755 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f733:	83 ec 0c             	sub    esp,0xc
c001f736:	68 2a 0b 02 c0       	push   0xc0020b2a
c001f73b:	e8 39 1c ff ff       	call   c0011379 <KePanic(char const*)>
c001f740:	83 c4 10             	add    esp,0x10
c001f743:	eb 10                	jmp    c001f755 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f745:	83 ec 0c             	sub    esp,0xc
c001f748:	68 34 0b 02 c0       	push   0xc0020b34
c001f74d:	e8 27 1c ff ff       	call   c0011379 <KePanic(char const*)>
c001f752:	83 c4 10             	add    esp,0x10
c001f755:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f759:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f75c:	8d 50 01             	lea    edx,[eax+0x1]
c001f75f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f763:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f766:	90                   	nop
c001f767:	83 c4 0c             	add    esp,0xc
c001f76a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001f76c <LinkedList<UnixFile>::getFirstElement()>:
c001f76c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f770:	8b 00                	mov    eax,DWORD PTR [eax]
c001f772:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001f774 <LinkedList<UnixFile>::removeFirst()>:
c001f774:	83 ec 0c             	sub    esp,0xc
c001f777:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f77b:	8b 00                	mov    eax,DWORD PTR [eax]
c001f77d:	85 c0                	test   eax,eax
c001f77f:	75 12                	jne    c001f793 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001f781:	83 ec 0c             	sub    esp,0xc
c001f784:	68 40 0b 02 c0       	push   0xc0020b40
c001f789:	e8 eb 1b ff ff       	call   c0011379 <KePanic(char const*)>
c001f78e:	83 c4 10             	add    esp,0x10
c001f791:	eb 7e                	jmp    c001f811 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001f793:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f797:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f79a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f79d:	85 c0                	test   eax,eax
c001f79f:	74 10                	je     c001f7b1 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001f7a1:	83 ec 0c             	sub    esp,0xc
c001f7a4:	68 8b 0b 02 c0       	push   0xc0020b8b
c001f7a9:	e8 cb 1b ff ff       	call   c0011379 <KePanic(char const*)>
c001f7ae:	83 c4 10             	add    esp,0x10
c001f7b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7b5:	8b 00                	mov    eax,DWORD PTR [eax]
c001f7b7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f7ba:	85 c0                	test   eax,eax
c001f7bc:	75 33                	jne    c001f7f1 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001f7be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7c2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f7c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7cc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f7d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7d7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f7da:	83 f8 01             	cmp    eax,0x1
c001f7dd:	74 21                	je     c001f800 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f7df:	83 ec 0c             	sub    esp,0xc
c001f7e2:	68 64 0b 02 c0       	push   0xc0020b64
c001f7e7:	e8 8d 1b ff ff       	call   c0011379 <KePanic(char const*)>
c001f7ec:	83 c4 10             	add    esp,0x10
c001f7ef:	eb 0f                	jmp    c001f800 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f7f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7f5:	8b 00                	mov    eax,DWORD PTR [eax]
c001f7f7:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001f7fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7fe:	89 10                	mov    DWORD PTR [eax],edx
c001f800:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f804:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f807:	8d 50 ff             	lea    edx,[eax-0x1]
c001f80a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f80e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f811:	83 c4 0c             	add    esp,0xc
c001f814:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001f816 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001f816:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f81a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f81d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001f81e <DriverlessDevice::~DriverlessDevice()>:
c001f81e:	ba 1c 17 02 c0       	mov    edx,0xc002171c
c001f823:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f827:	89 10                	mov    DWORD PTR [eax],edx
c001f829:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f82d:	50                   	push   eax
c001f82e:	e8 19 ce fe ff       	call   c000c64c <Device::~Device()>
c001f833:	83 c4 04             	add    esp,0x4
c001f836:	90                   	nop
c001f837:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001f838 <DriverlessDevice::~DriverlessDevice()>:
c001f838:	83 ec 0c             	sub    esp,0xc
c001f83b:	83 ec 0c             	sub    esp,0xc
c001f83e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f842:	e8 d7 ff ff ff       	call   c001f81e <DriverlessDevice::~DriverlessDevice()>
c001f847:	83 c4 10             	add    esp,0x10
c001f84a:	83 ec 08             	sub    esp,0x8
c001f84d:	68 58 01 00 00       	push   0x158
c001f852:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f856:	e8 bd af fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001f85b:	83 c4 10             	add    esp,0x10
c001f85e:	83 c4 0c             	add    esp,0xc
c001f861:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001f862 <LinkedList<Device>::addElement(Device*)>:
c001f862:	83 ec 0c             	sub    esp,0xc
c001f865:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f86a:	75 10                	jne    c001f87c <LinkedList<Device>::addElement(Device*)+0x1a>
c001f86c:	83 ec 0c             	sub    esp,0xc
c001f86f:	68 08 0b 02 c0       	push   0xc0020b08
c001f874:	e8 00 1b ff ff       	call   c0011379 <KePanic(char const*)>
c001f879:	83 c4 10             	add    esp,0x10
c001f87c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f880:	8b 00                	mov    eax,DWORD PTR [eax]
c001f882:	85 c0                	test   eax,eax
c001f884:	74 3a                	je     c001f8c0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001f886:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f88a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f88d:	85 c0                	test   eax,eax
c001f88f:	74 2f                	je     c001f8c0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001f891:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f895:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f898:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f89c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001f8a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f8aa:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f8ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8b1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f8b4:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001f8be:	eb 68                	jmp    c001f928 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f8c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8c4:	8b 00                	mov    eax,DWORD PTR [eax]
c001f8c6:	85 c0                	test   eax,eax
c001f8c8:	75 4e                	jne    c001f918 <LinkedList<Device>::addElement(Device*)+0xb6>
c001f8ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8ce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f8d1:	85 c0                	test   eax,eax
c001f8d3:	75 43                	jne    c001f918 <LinkedList<Device>::addElement(Device*)+0xb6>
c001f8d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8d9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f8dd:	89 10                	mov    DWORD PTR [eax],edx
c001f8df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8e3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f8e7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f8ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f8f1:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001f8fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8ff:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f902:	85 c0                	test   eax,eax
c001f904:	74 22                	je     c001f928 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f906:	83 ec 0c             	sub    esp,0xc
c001f909:	68 2a 0b 02 c0       	push   0xc0020b2a
c001f90e:	e8 66 1a ff ff       	call   c0011379 <KePanic(char const*)>
c001f913:	83 c4 10             	add    esp,0x10
c001f916:	eb 10                	jmp    c001f928 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f918:	83 ec 0c             	sub    esp,0xc
c001f91b:	68 34 0b 02 c0       	push   0xc0020b34
c001f920:	e8 54 1a ff ff       	call   c0011379 <KePanic(char const*)>
c001f925:	83 c4 10             	add    esp,0x10
c001f928:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f92c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f92f:	8d 50 01             	lea    edx,[eax+0x1]
c001f932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f936:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f939:	90                   	nop
c001f93a:	83 c4 0c             	add    esp,0xc
c001f93d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001f93e <LinkedList<Device>::LinkedList()>:
c001f93e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f942:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f948:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f94c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f953:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f957:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f95e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f962:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f968:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f96c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f973:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f977:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f97e:	90                   	nop
c001f97f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001f980 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001f980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f984:	8b 00                	mov    eax,DWORD PTR [eax]
c001f986:	85 c0                	test   eax,eax
c001f988:	75 0e                	jne    c001f998 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001f98a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f98e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f991:	85 c0                	test   eax,eax
c001f993:	75 03                	jne    c001f998 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001f995:	b0 01                	mov    al,0x1
c001f997:	c3                   	ret    
c001f998:	b0 00                	mov    al,0x0
c001f99a:	90                   	nop
c001f99b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001f99c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001f99c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9a0:	8b 00                	mov    eax,DWORD PTR [eax]
c001f9a2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001f9a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001f9a4:	83 ec 0c             	sub    esp,0xc
c001f9a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9ab:	8b 00                	mov    eax,DWORD PTR [eax]
c001f9ad:	85 c0                	test   eax,eax
c001f9af:	75 17                	jne    c001f9c8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001f9b1:	83 ec 0c             	sub    esp,0xc
c001f9b4:	68 40 0b 02 c0       	push   0xc0020b40
c001f9b9:	e8 bb 19 ff ff       	call   c0011379 <KePanic(char const*)>
c001f9be:	83 c4 10             	add    esp,0x10
c001f9c1:	e9 96 00 00 00       	jmp    c001fa5c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c001f9c6:	66 90                	xchg   ax,ax
c001f9c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f9cf:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f9d2:	85 c0                	test   eax,eax
c001f9d4:	0f 95 c0             	setne  al
c001f9d7:	0f b6 c0             	movzx  eax,al
c001f9da:	85 c0                	test   eax,eax
c001f9dc:	74 12                	je     c001f9f0 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c001f9de:	83 ec 0c             	sub    esp,0xc
c001f9e1:	68 8b 0b 02 c0       	push   0xc0020b8b
c001f9e6:	e8 8e 19 ff ff       	call   c0011379 <KePanic(char const*)>
c001f9eb:	83 c4 10             	add    esp,0x10
c001f9ee:	66 90                	xchg   ax,ax
c001f9f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9f4:	8b 00                	mov    eax,DWORD PTR [eax]
c001f9f6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f9f9:	85 c0                	test   eax,eax
c001f9fb:	0f 94 c0             	sete   al
c001f9fe:	0f b6 c0             	movzx  eax,al
c001fa01:	85 c0                	test   eax,eax
c001fa03:	74 33                	je     c001fa38 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001fa05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa09:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fa0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa13:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fa1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa1e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fa21:	83 f8 01             	cmp    eax,0x1
c001fa24:	74 22                	je     c001fa48 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001fa26:	83 ec 0c             	sub    esp,0xc
c001fa29:	68 64 0b 02 c0       	push   0xc0020b64
c001fa2e:	e8 46 19 ff ff       	call   c0011379 <KePanic(char const*)>
c001fa33:	83 c4 10             	add    esp,0x10
c001fa36:	eb 10                	jmp    c001fa48 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001fa38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa3c:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa3e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001fa41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa45:	89 10                	mov    DWORD PTR [eax],edx
c001fa47:	90                   	nop
c001fa48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa4c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fa4f:	8d 50 ff             	lea    edx,[eax-0x1]
c001fa52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa56:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fa59:	8d 76 00             	lea    esi,[esi+0x0]
c001fa5c:	83 c4 0c             	add    esp,0xc
c001fa5f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001fa60 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001fa60:	83 ec 0c             	sub    esp,0xc
c001fa63:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fa68:	75 12                	jne    c001fa7c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001fa6a:	83 ec 0c             	sub    esp,0xc
c001fa6d:	68 08 0b 02 c0       	push   0xc0020b08
c001fa72:	e8 02 19 ff ff       	call   c0011379 <KePanic(char const*)>
c001fa77:	83 c4 10             	add    esp,0x10
c001fa7a:	66 90                	xchg   ax,ax
c001fa7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa80:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa82:	85 c0                	test   eax,eax
c001fa84:	74 36                	je     c001fabc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001fa86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa8a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa8d:	85 c0                	test   eax,eax
c001fa8f:	74 2b                	je     c001fabc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001fa91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa95:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa98:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fa9c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001fa9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faa3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001faa7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001faaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fab1:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fab8:	eb 6a                	jmp    c001fb24 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001faba:	66 90                	xchg   ax,ax
c001fabc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fac0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fac2:	85 c0                	test   eax,eax
c001fac4:	75 4e                	jne    c001fb14 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001fac6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001facd:	85 c0                	test   eax,eax
c001facf:	75 43                	jne    c001fb14 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001fad1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fad5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fad9:	89 10                	mov    DWORD PTR [eax],edx
c001fadb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fadf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fae3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fae6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001faed:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001faf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faf8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fafb:	85 c0                	test   eax,eax
c001fafd:	74 25                	je     c001fb24 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001faff:	83 ec 0c             	sub    esp,0xc
c001fb02:	68 2a 0b 02 c0       	push   0xc0020b2a
c001fb07:	e8 6d 18 ff ff       	call   c0011379 <KePanic(char const*)>
c001fb0c:	83 c4 10             	add    esp,0x10
c001fb0f:	eb 13                	jmp    c001fb24 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001fb11:	8d 76 00             	lea    esi,[esi+0x0]
c001fb14:	83 ec 0c             	sub    esp,0xc
c001fb17:	68 34 0b 02 c0       	push   0xc0020b34
c001fb1c:	e8 58 18 ff ff       	call   c0011379 <KePanic(char const*)>
c001fb21:	83 c4 10             	add    esp,0x10
c001fb24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb28:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb2b:	8d 50 01             	lea    edx,[eax+0x1]
c001fb2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb32:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fb35:	90                   	nop
c001fb36:	83 c4 0c             	add    esp,0xc
c001fb39:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001fb3c <ACPI::~ACPI()>:
c001fb3c:	83 ec 0c             	sub    esp,0xc
c001fb3f:	ba 04 1d 02 c0       	mov    edx,0xc0021d04
c001fb44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb48:	89 10                	mov    DWORD PTR [eax],edx
c001fb4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb4e:	83 ec 0c             	sub    esp,0xc
c001fb51:	50                   	push   eax
c001fb52:	e8 f5 ca fe ff       	call   c000c64c <Device::~Device()>
c001fb57:	83 c4 10             	add    esp,0x10
c001fb5a:	90                   	nop
c001fb5b:	83 c4 0c             	add    esp,0xc
c001fb5e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001fb60 <ACPI::~ACPI()>:
c001fb60:	83 ec 0c             	sub    esp,0xc
c001fb63:	83 ec 0c             	sub    esp,0xc
c001fb66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb6a:	e8 cd ff ff ff       	call   c001fb3c <ACPI::~ACPI()>
c001fb6f:	83 c4 10             	add    esp,0x10
c001fb72:	83 ec 08             	sub    esp,0x8
c001fb75:	68 64 12 00 00       	push   0x1264
c001fb7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb7e:	e8 95 ac fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fb83:	83 c4 10             	add    esp,0x10
c001fb86:	83 c4 0c             	add    esp,0xc
c001fb89:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001fb8c <LinkedList<Device>::~LinkedList()>:
c001fb8c:	90                   	nop
c001fb8d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001fb90 <LinkedList<Device>::isEmpty()>:
c001fb90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb94:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb96:	85 c0                	test   eax,eax
c001fb98:	75 0e                	jne    c001fba8 <LinkedList<Device>::isEmpty()+0x18>
c001fb9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb9e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fba1:	85 c0                	test   eax,eax
c001fba3:	75 03                	jne    c001fba8 <LinkedList<Device>::isEmpty()+0x18>
c001fba5:	b0 01                	mov    al,0x1
c001fba7:	c3                   	ret    
c001fba8:	b0 00                	mov    al,0x0
c001fbaa:	90                   	nop
c001fbab:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001fbac <LinkedList<Device>::getFirstElement()>:
c001fbac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fbb0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fbb2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001fbb4 <LinkedList<Device>::removeFirst()>:
c001fbb4:	83 ec 0c             	sub    esp,0xc
c001fbb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbbb:	8b 00                	mov    eax,DWORD PTR [eax]
c001fbbd:	85 c0                	test   eax,eax
c001fbbf:	75 17                	jne    c001fbd8 <LinkedList<Device>::removeFirst()+0x24>
c001fbc1:	83 ec 0c             	sub    esp,0xc
c001fbc4:	68 40 0b 02 c0       	push   0xc0020b40
c001fbc9:	e8 ab 17 ff ff       	call   c0011379 <KePanic(char const*)>
c001fbce:	83 c4 10             	add    esp,0x10
c001fbd1:	e9 92 00 00 00       	jmp    c001fc68 <LinkedList<Device>::removeFirst()+0xb4>
c001fbd6:	66 90                	xchg   ax,ax
c001fbd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbdc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fbdf:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001fbe5:	85 c0                	test   eax,eax
c001fbe7:	74 13                	je     c001fbfc <LinkedList<Device>::removeFirst()+0x48>
c001fbe9:	83 ec 0c             	sub    esp,0xc
c001fbec:	68 8b 0b 02 c0       	push   0xc0020b8b
c001fbf1:	e8 83 17 ff ff       	call   c0011379 <KePanic(char const*)>
c001fbf6:	83 c4 10             	add    esp,0x10
c001fbf9:	8d 76 00             	lea    esi,[esi+0x0]
c001fbfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc00:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc02:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001fc08:	85 c0                	test   eax,eax
c001fc0a:	75 34                	jne    c001fc40 <LinkedList<Device>::removeFirst()+0x8c>
c001fc0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc10:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fc16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc1a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fc21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc25:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fc28:	83 f8 01             	cmp    eax,0x1
c001fc2b:	74 27                	je     c001fc54 <LinkedList<Device>::removeFirst()+0xa0>
c001fc2d:	83 ec 0c             	sub    esp,0xc
c001fc30:	68 64 0b 02 c0       	push   0xc0020b64
c001fc35:	e8 3f 17 ff ff       	call   c0011379 <KePanic(char const*)>
c001fc3a:	83 c4 10             	add    esp,0x10
c001fc3d:	eb 15                	jmp    c001fc54 <LinkedList<Device>::removeFirst()+0xa0>
c001fc3f:	90                   	nop
c001fc40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc44:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc46:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001fc4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc50:	89 10                	mov    DWORD PTR [eax],edx
c001fc52:	66 90                	xchg   ax,ax
c001fc54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc58:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fc5b:	8d 50 ff             	lea    edx,[eax-0x1]
c001fc5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc62:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fc65:	8d 76 00             	lea    esi,[esi+0x0]
c001fc68:	83 c4 0c             	add    esp,0xc
c001fc6b:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001fc6c <CPU::~CPU()>:
c001fc6c:	83 ec 0c             	sub    esp,0xc
c001fc6f:	ba ac 1e 02 c0       	mov    edx,0xc0021eac
c001fc74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc78:	89 10                	mov    DWORD PTR [eax],edx
c001fc7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc7e:	83 ec 0c             	sub    esp,0xc
c001fc81:	50                   	push   eax
c001fc82:	e8 c5 c9 fe ff       	call   c000c64c <Device::~Device()>
c001fc87:	83 c4 10             	add    esp,0x10
c001fc8a:	90                   	nop
c001fc8b:	83 c4 0c             	add    esp,0xc
c001fc8e:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001fc90 <CPU::~CPU()>:
c001fc90:	83 ec 0c             	sub    esp,0xc
c001fc93:	83 ec 0c             	sub    esp,0xc
c001fc96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc9a:	e8 cd ff ff ff       	call   c001fc6c <CPU::~CPU()>
c001fc9f:	83 c4 10             	add    esp,0x10
c001fca2:	83 ec 08             	sub    esp,0x8
c001fca5:	68 94 11 00 00       	push   0x1194
c001fcaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fcae:	e8 65 ab fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fcb3:	83 c4 10             	add    esp,0x10
c001fcb6:	83 c4 0c             	add    esp,0xc
c001fcb9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001fcbc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001fcbc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fcc0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fcc3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001fcc4 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001fcc4:	90                   	nop
c001fcc5:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001fcc8 <ThreadControlBlock::ThreadControlBlock()>:
c001fcc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fccc:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fcd3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fcd7:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001fcde:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fce2:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001fce9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fced:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001fcf4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fcf8:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001fcff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd03:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001fd07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd0b:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001fd0f:	90                   	nop
c001fd10:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001fd14 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001fd14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd18:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fd1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd22:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fd29:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd2d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fd34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd38:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fd3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd42:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fd49:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd4d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fd54:	90                   	nop
c001fd55:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001fd56 <PCI::~PCI()>:
c001fd56:	83 ec 0c             	sub    esp,0xc
c001fd59:	ba 8c 2d 02 c0       	mov    edx,0xc0022d8c
c001fd5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd62:	89 10                	mov    DWORD PTR [eax],edx
c001fd64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd68:	83 ec 0c             	sub    esp,0xc
c001fd6b:	50                   	push   eax
c001fd6c:	e8 73 c3 fe ff       	call   c000c0e4 <Bus::~Bus()>
c001fd71:	83 c4 10             	add    esp,0x10
c001fd74:	90                   	nop
c001fd75:	83 c4 0c             	add    esp,0xc
c001fd78:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001fd7a <PCI::~PCI()>:
c001fd7a:	83 ec 0c             	sub    esp,0xc
c001fd7d:	83 ec 0c             	sub    esp,0xc
c001fd80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd84:	e8 cd ff ff ff       	call   c001fd56 <PCI::~PCI()>
c001fd89:	83 c4 10             	add    esp,0x10
c001fd8c:	83 ec 08             	sub    esp,0x8
c001fd8f:	68 5c 01 00 00       	push   0x15c
c001fd94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd98:	e8 7b aa fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fd9d:	83 c4 10             	add    esp,0x10
c001fda0:	83 c4 0c             	add    esp,0xc
c001fda3:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001fda4 <IDE::~IDE()>:
c001fda4:	83 ec 0c             	sub    esp,0xc
c001fda7:	ba 40 2e 02 c0       	mov    edx,0xc0022e40
c001fdac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdb0:	89 10                	mov    DWORD PTR [eax],edx
c001fdb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdb6:	83 ec 0c             	sub    esp,0xc
c001fdb9:	50                   	push   eax
c001fdba:	e8 05 cd fe ff       	call   c000cac4 <HardDiskController::~HardDiskController()>
c001fdbf:	83 c4 10             	add    esp,0x10
c001fdc2:	90                   	nop
c001fdc3:	83 c4 0c             	add    esp,0xc
c001fdc6:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001fdc8 <IDE::~IDE()>:
c001fdc8:	83 ec 0c             	sub    esp,0xc
c001fdcb:	83 ec 0c             	sub    esp,0xc
c001fdce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdd2:	e8 cd ff ff ff       	call   c001fda4 <IDE::~IDE()>
c001fdd7:	83 c4 10             	add    esp,0x10
c001fdda:	83 ec 08             	sub    esp,0x8
c001fddd:	68 70 02 00 00       	push   0x270
c001fde2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fde6:	e8 2d aa fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fdeb:	83 c4 10             	add    esp,0x10
c001fdee:	83 c4 0c             	add    esp,0xc
c001fdf1:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001fdf2 <SATABus::~SATABus()>:
c001fdf2:	83 ec 0c             	sub    esp,0xc
c001fdf5:	ba 90 2e 02 c0       	mov    edx,0xc0022e90
c001fdfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdfe:	89 10                	mov    DWORD PTR [eax],edx
c001fe00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe04:	83 ec 0c             	sub    esp,0xc
c001fe07:	50                   	push   eax
c001fe08:	e8 b7 cc fe ff       	call   c000cac4 <HardDiskController::~HardDiskController()>
c001fe0d:	83 c4 10             	add    esp,0x10
c001fe10:	90                   	nop
c001fe11:	83 c4 0c             	add    esp,0xc
c001fe14:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001fe16 <SATABus::~SATABus()>:
c001fe16:	83 ec 0c             	sub    esp,0xc
c001fe19:	83 ec 0c             	sub    esp,0xc
c001fe1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe20:	e8 cd ff ff ff       	call   c001fdf2 <SATABus::~SATABus()>
c001fe25:	83 c4 10             	add    esp,0x10
c001fe28:	83 ec 08             	sub    esp,0x8
c001fe2b:	68 64 01 00 00       	push   0x164
c001fe30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe34:	e8 df a9 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fe39:	83 c4 10             	add    esp,0x10
c001fe3c:	83 c4 0c             	add    esp,0xc
c001fe3f:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001fe40 <ATA::~ATA()>:
c001fe40:	83 ec 0c             	sub    esp,0xc
c001fe43:	ba d0 2e 02 c0       	mov    edx,0xc0022ed0
c001fe48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe4c:	89 10                	mov    DWORD PTR [eax],edx
c001fe4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe52:	83 ec 0c             	sub    esp,0xc
c001fe55:	50                   	push   eax
c001fe56:	e8 4b cd fe ff       	call   c000cba6 <PhysicalDisk::~PhysicalDisk()>
c001fe5b:	83 c4 10             	add    esp,0x10
c001fe5e:	90                   	nop
c001fe5f:	83 c4 0c             	add    esp,0xc
c001fe62:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001fe64 <ATA::~ATA()>:
c001fe64:	83 ec 0c             	sub    esp,0xc
c001fe67:	83 ec 0c             	sub    esp,0xc
c001fe6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe6e:	e8 cd ff ff ff       	call   c001fe40 <ATA::~ATA()>
c001fe73:	83 c4 10             	add    esp,0x10
c001fe76:	83 ec 08             	sub    esp,0x8
c001fe79:	68 7c 01 00 00       	push   0x17c
c001fe7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe82:	e8 91 a9 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fe87:	83 c4 10             	add    esp,0x10
c001fe8a:	83 c4 0c             	add    esp,0xc
c001fe8d:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001fe8e <ATAPI::~ATAPI()>:
c001fe8e:	83 ec 0c             	sub    esp,0xc
c001fe91:	ba 18 2f 02 c0       	mov    edx,0xc0022f18
c001fe96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe9a:	89 10                	mov    DWORD PTR [eax],edx
c001fe9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fea0:	83 ec 0c             	sub    esp,0xc
c001fea3:	50                   	push   eax
c001fea4:	e8 fd cc fe ff       	call   c000cba6 <PhysicalDisk::~PhysicalDisk()>
c001fea9:	83 c4 10             	add    esp,0x10
c001feac:	90                   	nop
c001fead:	83 c4 0c             	add    esp,0xc
c001feb0:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001feb2 <ATAPI::~ATAPI()>:
c001feb2:	83 ec 0c             	sub    esp,0xc
c001feb5:	83 ec 0c             	sub    esp,0xc
c001feb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001febc:	e8 cd ff ff ff       	call   c001fe8e <ATAPI::~ATAPI()>
c001fec1:	83 c4 10             	add    esp,0x10
c001fec4:	83 ec 08             	sub    esp,0x8
c001fec7:	68 84 01 00 00       	push   0x184
c001fecc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fed0:	e8 43 a9 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fed5:	83 c4 10             	add    esp,0x10
c001fed8:	83 c4 0c             	add    esp,0xc
c001fedb:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001fedc <SATA::~SATA()>:
c001fedc:	83 ec 0c             	sub    esp,0xc
c001fedf:	ba cc 2f 02 c0       	mov    edx,0xc0022fcc
c001fee4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fee8:	89 10                	mov    DWORD PTR [eax],edx
c001feea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feee:	83 ec 0c             	sub    esp,0xc
c001fef1:	50                   	push   eax
c001fef2:	e8 af cc fe ff       	call   c000cba6 <PhysicalDisk::~PhysicalDisk()>
c001fef7:	83 c4 10             	add    esp,0x10
c001fefa:	90                   	nop
c001fefb:	83 c4 0c             	add    esp,0xc
c001fefe:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001ff00 <SATA::~SATA()>:
c001ff00:	83 ec 0c             	sub    esp,0xc
c001ff03:	83 ec 0c             	sub    esp,0xc
c001ff06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff0a:	e8 cd ff ff ff       	call   c001fedc <SATA::~SATA()>
c001ff0f:	83 c4 10             	add    esp,0x10
c001ff12:	83 ec 08             	sub    esp,0x8
c001ff15:	68 7c 01 00 00       	push   0x17c
c001ff1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff1e:	e8 f5 a8 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001ff23:	83 c4 10             	add    esp,0x10
c001ff26:	83 c4 0c             	add    esp,0xc
c001ff29:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001ff2a <SATAPI::~SATAPI()>:
c001ff2a:	83 ec 0c             	sub    esp,0xc
c001ff2d:	ba f0 30 02 c0       	mov    edx,0xc00230f0
c001ff32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff36:	89 10                	mov    DWORD PTR [eax],edx
c001ff38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff3c:	83 ec 0c             	sub    esp,0xc
c001ff3f:	50                   	push   eax
c001ff40:	e8 61 cc fe ff       	call   c000cba6 <PhysicalDisk::~PhysicalDisk()>
c001ff45:	83 c4 10             	add    esp,0x10
c001ff48:	90                   	nop
c001ff49:	83 c4 0c             	add    esp,0xc
c001ff4c:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001ff4e <SATAPI::~SATAPI()>:
c001ff4e:	83 ec 0c             	sub    esp,0xc
c001ff51:	83 ec 0c             	sub    esp,0xc
c001ff54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff58:	e8 cd ff ff ff       	call   c001ff2a <SATAPI::~SATAPI()>
c001ff5d:	83 c4 10             	add    esp,0x10
c001ff60:	83 ec 08             	sub    esp,0x8
c001ff63:	68 84 01 00 00       	push   0x184
c001ff68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff6c:	e8 a7 a8 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001ff71:	83 c4 10             	add    esp,0x10
c001ff74:	83 c4 0c             	add    esp,0xc
c001ff77:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001ff78 <IOAPIC::~IOAPIC()>:
c001ff78:	83 ec 0c             	sub    esp,0xc
c001ff7b:	ba 30 31 02 c0       	mov    edx,0xc0023130
c001ff80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff84:	89 10                	mov    DWORD PTR [eax],edx
c001ff86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff8a:	83 ec 0c             	sub    esp,0xc
c001ff8d:	50                   	push   eax
c001ff8e:	e8 b9 c6 fe ff       	call   c000c64c <Device::~Device()>
c001ff93:	83 c4 10             	add    esp,0x10
c001ff96:	90                   	nop
c001ff97:	83 c4 0c             	add    esp,0xc
c001ff9a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001ff9c <IOAPIC::~IOAPIC()>:
c001ff9c:	83 ec 0c             	sub    esp,0xc
c001ff9f:	83 ec 0c             	sub    esp,0xc
c001ffa2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ffa6:	e8 cd ff ff ff       	call   c001ff78 <IOAPIC::~IOAPIC()>
c001ffab:	83 c4 10             	add    esp,0x10
c001ffae:	83 ec 08             	sub    esp,0x8
c001ffb1:	68 68 01 00 00       	push   0x168
c001ffb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ffba:	e8 59 a8 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001ffbf:	83 c4 10             	add    esp,0x10
c001ffc2:	83 c4 0c             	add    esp,0xc
c001ffc5:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001ffc8 <APICTimer::~APICTimer()>:
c001ffc8:	83 ec 0c             	sub    esp,0xc
c001ffcb:	ba 78 31 02 c0       	mov    edx,0xc0023178
c001ffd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffd4:	89 10                	mov    DWORD PTR [eax],edx
c001ffd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffda:	83 ec 0c             	sub    esp,0xc
c001ffdd:	50                   	push   eax
c001ffde:	e8 35 e1 fe ff       	call   c000e118 <Timer::~Timer()>
c001ffe3:	83 c4 10             	add    esp,0x10
c001ffe6:	90                   	nop
c001ffe7:	83 c4 0c             	add    esp,0xc
c001ffea:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001ffec <APICTimer::~APICTimer()>:
c001ffec:	83 ec 0c             	sub    esp,0xc
c001ffef:	83 ec 0c             	sub    esp,0xc
c001fff2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fff6:	e8 cd ff ff ff       	call   c001ffc8 <APICTimer::~APICTimer()>
c001fffb:	83 c4 10             	add    esp,0x10
c001fffe:	83 ec 08             	sub    esp,0x8
c0020001:	68 60 01 00 00       	push   0x160
c0020006:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002000a:	e8 09 a8 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c002000f:	83 c4 10             	add    esp,0x10
c0020012:	83 c4 0c             	add    esp,0xc
c0020015:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0020018 <PIT::~PIT()>:
c0020018:	83 ec 0c             	sub    esp,0xc
c002001b:	ba c8 31 02 c0       	mov    edx,0xc00231c8
c0020020:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020024:	89 10                	mov    DWORD PTR [eax],edx
c0020026:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002002a:	83 ec 0c             	sub    esp,0xc
c002002d:	50                   	push   eax
c002002e:	e8 e5 e0 fe ff       	call   c000e118 <Timer::~Timer()>
c0020033:	83 c4 10             	add    esp,0x10
c0020036:	90                   	nop
c0020037:	83 c4 0c             	add    esp,0xc
c002003a:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c002003c <PIT::~PIT()>:
c002003c:	83 ec 0c             	sub    esp,0xc
c002003f:	83 ec 0c             	sub    esp,0xc
c0020042:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020046:	e8 cd ff ff ff       	call   c0020018 <PIT::~PIT()>
c002004b:	83 c4 10             	add    esp,0x10
c002004e:	83 ec 08             	sub    esp,0x8
c0020051:	68 5c 01 00 00       	push   0x15c
c0020056:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002005a:	e8 b9 a7 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c002005f:	83 c4 10             	add    esp,0x10
c0020062:	83 c4 0c             	add    esp,0xc
c0020065:	c3                   	ret    

Disassembly of section userkernel:

c0024000 <KiDefaultSignalHandlerAbort(int)>:
c0024000:	57                   	push   edi
c0024001:	b9 07 00 00 00       	mov    ecx,0x7
c0024006:	56                   	push   esi
c0024007:	be dd 1f 02 c0       	mov    esi,0xc0021fdd
c002400c:	83 ec 24             	sub    esp,0x24
c002400f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024013:	fc                   	cld    
c0024014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0024016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002401a:	50                   	push   eax
c002401b:	6a 00                	push   0x0
c002401d:	6a 38                	push   0x38
c002401f:	6a 01                	push   0x1
c0024021:	e8 2c 00 00 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0024026:	83 c4 34             	add    esp,0x34
c0024029:	5e                   	pop    esi
c002402a:	5f                   	pop    edi
c002402b:	c3                   	ret    

c002402c <KiDefaultSignalHandlerTerminate(int)>:
c002402c:	57                   	push   edi
c002402d:	b9 08 00 00 00       	mov    ecx,0x8
c0024032:	56                   	push   esi
c0024033:	be f9 1f 02 c0       	mov    esi,0xc0021ff9
c0024038:	83 ec 24             	sub    esp,0x24
c002403b:	89 e7                	mov    edi,esp
c002403d:	fc                   	cld    
c002403e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0024040:	54                   	push   esp
c0024041:	6a 00                	push   0x0
c0024043:	6a 37                	push   0x37
c0024045:	6a 01                	push   0x1
c0024047:	e8 06 00 00 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002404c:	83 c4 34             	add    esp,0x34
c002404f:	5e                   	pop    esi
c0024050:	5f                   	pop    edi
c0024051:	c3                   	ret    

c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0024052:	53                   	push   ebx
c0024053:	83 ec 10             	sub    esp,0x10
c0024056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002405a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002405e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024066:	cd 60                	int    0x60
c0024068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002406c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0024074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0024078:	83 c4 10             	add    esp,0x10
c002407b:	5b                   	pop    ebx
c002407c:	c3                   	ret    

Disassembly of section align_previous:

c0025000 <DO_NOT_DELETE()>:
c0025000:	c3                   	ret    
